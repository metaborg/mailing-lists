From L.C.L.Kats at tudelft.nl  Mon Aug  3 15:13:47 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 03 Aug 2009 13:13:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19799 - LennartKats -
	in aster: branches tags tags/2009-v0.1
Message-ID: <200908031311.n73DBNdJ008520@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-03 13:13:47 +0000 (Mon, 03 Aug 2009)
New Revision: 19799

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19799&view=rev

Added:
   aster/tags/2009-v0.1/
Removed:
   aster/branches/2009-v0.1/

Log:
Tagged version 0.1 (in the proper place).

Changes:


Property changes on: aster/tags/2009-v0.1
___________________________________________________________________
Added: svn:mergeinfo
   + 



From L.C.L.Kats at tudelft.nl  Mon Aug  3 15:14:14 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 03 Aug 2009 13:14:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19800 - LennartKats -
	strc-java/trunk/trans
Message-ID: <200908031311.n73DBoJY008526@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-03 13:14:14 +0000 (Mon, 03 Aug 2009)
New Revision: 19800

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19800&view=rev

Modified:
   strc-java/trunk/trans/s2j.str

Log:
Moved the body of registerInterop() to an inner class.

Changes:

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-08-03 13:13:47 UTC (rev 19799)
+++ strc-java/trunk/trans/s2j.str	2009-08-03 13:14:14 UTC (rev 19800)
@@ -165,7 +165,7 @@
      ~*function-defs
      ~*lifted-defs
 
-     ~*register
+     ~register
      }
   ]|
   with 
@@ -288,10 +288,15 @@
   //       (need to make a custom VarScope class to do so)
   java-register-method : 
     defs ->
-    <java-split-method> |[
-      public static void registerInterop(org.spoofax.interpreter.core.IContext context, Context compiledContext) {
-        init(compiledContext);
-        bstm*
+    |[
+      public static void registerInterop(final org.spoofax.interpreter.core.IContext context, final Context compiledContext) {
+        new Runnable() { // Move these many literals and statements to another, lazily loaded class
+          ~*<java-split-method>  |[
+            public void run() {
+              bstm*
+            }
+          ]|
+        }.run();
       }
     ]|
     with



From L.C.L.Kats at tudelft.nl  Tue Aug  4 10:37:09 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 04 Aug 2009 08:37:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19801 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading services
Message-ID: <200908040834.n748YiiN024247@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-04 08:37:09 +0000 (Tue, 04 Aug 2009)
New Revision: 19801

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19801&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java

Log:
Some work on the MetaFileLanguageValidator.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-08-03 13:14:14 UTC (rev 19800)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-08-04 08:37:09 UTC (rev 19801)
@@ -20,6 +20,7 @@
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
 import org.strategoxt.imp.runtime.services.StrategoFeedback;
 
 /**
@@ -221,7 +222,7 @@
                 getProperty("URL", ""),
                 getProperty("Extensions"),
                 getProperty("Aliases", ""),
-                null);
+                new MetaFileLanguageValidator());
         return language;
     }
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java	2009-08-03 13:14:14 UTC (rev 19800)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java	2009-08-04 08:37:09 UTC (rev 19801)
@@ -1,28 +1,33 @@
 package org.strategoxt.imp.runtime.services;
 
-/* TODO: Validate using meta file
-   FIXME: This IMP interface is insufficient: the class always requires a path not just a String
-
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.imp.language.LanguageValidator;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  *
+ */
 public class MetaFileLanguageValidator extends LanguageValidator {
 	
-	public MetaFileLanguageValidator(Language language) {
-		
-	}
+	private static boolean isLanguageRegistryPatchEnabled;
 
 	@Override
 	public boolean validate(IFile file) {
-		...
+		isLanguageRegistryPatchEnabled = true;
+		//String name = file.getName();
+		//IPath location = file.getLocation().removeLastSegments(1);
+		return true;
 	}
 
 	@Override
 	public boolean validate(String buffer) {
-		...
+		// String path = currentPath();
+		if (!isLanguageRegistryPatchEnabled) {
+			System.err.println("LanguageRegistry patch not enabled; cannot use .meta files");
+			isLanguageRegistryPatchEnabled = true;
+		}
+			
+		return false;
 	}
-}
-*/
\ No newline at end of file
+}
\ No newline at end of file



From L.C.L.Kats at tudelft.nl  Tue Aug  4 10:45:30 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 04 Aug 2009 08:45:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19802 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
Message-ID: <200908040843.n748h5g4024306@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-04 08:45:30 +0000 (Tue, 04 Aug 2009)
New Revision: 19802

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19802&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java

Log:
Added SSLLibrary field to hashtable classes.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -88,26 +88,26 @@
         add(new SSL_real_to_string_precision());
         add(new SSL_string_to_real());
         add(new SSL_table_hashtable());
-        add(new SSL_indexedSet_create());
-        add(new SSL_indexedSet_destroy());
-        add(new SSL_indexedSet_put());
-        add(new SSL_indexedSet_getIndex());
-        add(new SSL_indexedSet_elements());
-        add(new SSL_indexedSet_remove());
-        add(new SSL_indexedSet_reset());
-        add(new SSL_hashtable_get());
-        add(new SSL_hashtable_create());
-        add(new SSL_hashtable_put());
+        add(new SSL_indexedSet_create(this));
+        add(new SSL_indexedSet_destroy(this));
+        add(new SSL_indexedSet_put(this));
+        add(new SSL_indexedSet_getIndex(this));
+        add(new SSL_indexedSet_elements(this));
+        add(new SSL_indexedSet_remove(this));
+        add(new SSL_indexedSet_reset(this));
+        add(new SSL_hashtable_get(this));
+        add(new SSL_hashtable_create(this));
+        add(new SSL_hashtable_put(this));
         add(new SSL_stderr_stream());
-        add(new SSL_hashtable_destroy());
-        add(new SSL_hashtable_remove());
-        add(new SSL_hashtable_keys());
+        add(new SSL_hashtable_destroy(this));
+        add(new SSL_hashtable_remove(this));
+        add(new SSL_hashtable_keys(this));
         add(new SSL_fputs());
         add(new SSL_fputc());
         add(new SSL_write_term_to_stream_text());
         add(new SSL_access());
         add(new SSL_getcwd());
-        add(new SSL_dynamic_rules_hashtable());
+        add(new SSL_dynamic_rules_hashtable(this));
         add(new SSL_readdir());
         add(new SSL_modification_time());
         add(new SSL_write_term_to_string());
@@ -123,7 +123,7 @@
         add(new SSL_STDOUT_FILENO());
         add(new SSL_stdout_stream());
         add(new SSL_STDERR_FILENO());
-        add(new SSL_hashtable_reset());
+        add(new SSL_hashtable_reset(this));
         add(new SSL_EXDEV());
         add(new SSL_close());
         add(new SSL_perror());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -15,18 +15,18 @@
 
 public class SSL_dynamic_rules_hashtable extends AbstractPrimitive {
 
-    protected SSL_dynamic_rules_hashtable() {
+    private final SSLLibrary library;
+
+    protected SSL_dynamic_rules_hashtable(SSLLibrary library) {
         super("SSL_dynamic_rules_hashtable", 0, 0);
+        this.library = library;
     }
 
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
 
-        SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        or.getDynamicRuleHashtableRef();
-
-        env.setCurrent(env.getFactory().makeInt(or.getDynamicRuleHashtableRef()));
+        env.setCurrent(env.getFactory().makeInt(library.getDynamicRuleHashtableRef()));
         return true;
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -19,6 +19,8 @@
 
 public class SSL_hashtable_create extends AbstractPrimitive {
 
+    private final SSLLibrary library;
+
     protected static class Hashtable extends LinkedHashMap<IStrategoTerm, IStrategoTerm> {
 
         private static final long serialVersionUID = -8193582031891397734L;
@@ -29,8 +31,9 @@
 
     }
 
-    protected SSL_hashtable_create() {
+    protected SSL_hashtable_create(SSLLibrary library) {
         super("SSL_hashtable_create", 0, 2);
+        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
@@ -44,8 +47,7 @@
         int initialSize = ((IStrategoInt)targs[0]).intValue();
         int maxLoad = ((IStrategoInt)targs[1]).intValue();
 
-        SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        int ref = or.registerHashtable(new Hashtable(initialSize, maxLoad));
+        int ref = library.registerHashtable(new Hashtable(initialSize, maxLoad));
         
         env.setCurrent(env.getFactory().makeInt(ref));
         return true;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -17,8 +17,11 @@
 
 public class SSL_hashtable_destroy extends AbstractPrimitive {
 
-    protected SSL_hashtable_destroy() {
+    private final SSLLibrary library;
+
+    protected SSL_hashtable_destroy(SSLLibrary library) {
         super("SSL_hashtable_destroy", 0, 1);
+        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
@@ -27,8 +30,7 @@
         if (!(Tools.isTermInt(targs[0])))
             return false;
 
-        SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        boolean res = or.removeHashtable(((IStrategoInt)targs[0]).intValue());
+        boolean res = library.removeHashtable(((IStrategoInt)targs[0]).intValue());
         env.setCurrent(targs[0]);
         return res;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -18,8 +18,11 @@
 
 public class SSL_hashtable_get extends AbstractPrimitive {
 
-    protected SSL_hashtable_get() {
+    private final SSLLibrary library;
+
+    protected SSL_hashtable_get(SSLLibrary library) {
         super("SSL_hashtable_get", 0, 2);
+        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
@@ -27,8 +30,7 @@
         if(!(Tools.isTermInt(targs[0])))
             return false;
 
-        SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        Hashtable ath = or.getHashtable(((IStrategoInt)targs[0]).intValue());
+        Hashtable ath = library.getHashtable(((IStrategoInt)targs[0]).intValue());
         if(ath == null)
             return false;
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -17,8 +17,11 @@
 
 public class SSL_hashtable_keys extends AbstractPrimitive {
 
-    protected SSL_hashtable_keys() {
+    private final SSLLibrary library;
+
+    protected SSL_hashtable_keys(SSLLibrary library) {
         super("SSL_hashtable_keys", 0, 1);
+        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
@@ -26,8 +29,7 @@
         if(!(Tools.isTermInt(targs[0])))
             return false;
 
-        SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        Hashtable ath = or.getHashtable(Tools.javaInt(targs[0]));
+        Hashtable ath = library.getHashtable(Tools.javaInt(targs[0]));
         if(ath == null)
             return false;
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -18,8 +18,11 @@
 
 public class SSL_hashtable_put extends AbstractPrimitive {
 
-    protected SSL_hashtable_put() {
+    private final SSLLibrary library;
+
+    protected SSL_hashtable_put(SSLLibrary library) {
         super("SSL_hashtable_put", 0, 3);
+        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
@@ -27,8 +30,7 @@
         if(!(Tools.isTermInt(targs[0])))
             return false;
 
-        SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        Hashtable ath = or.getHashtable(((IStrategoInt)targs[0]).intValue());
+        Hashtable ath = library.getHashtable(((IStrategoInt)targs[0]).intValue());
         if(ath == null)
             return false;
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -18,8 +18,11 @@
 
 public class SSL_hashtable_remove extends AbstractPrimitive {
 
-    protected SSL_hashtable_remove() {
+    private final SSLLibrary library;
+
+    protected SSL_hashtable_remove(SSLLibrary library) {
         super("SSL_hashtable_remove", 0, 2);
+        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
@@ -27,8 +30,7 @@
         if(!(Tools.isTermInt(targs[0])))
             return false;
 
-        SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        Hashtable ath = or.getHashtable(((IStrategoInt)targs[0]).intValue());
+        Hashtable ath = library.getHashtable(((IStrategoInt)targs[0]).intValue());
         if(ath == null)
             return false;
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -18,8 +18,11 @@
 
 public class SSL_hashtable_reset extends AbstractPrimitive {
 
-    protected SSL_hashtable_reset() {
+    private final SSLLibrary library;
+
+    protected SSL_hashtable_reset(SSLLibrary library) {
         super("SSL_hashtable_reset", 0, 1);
+        this.library = library;
     }
 
     @Override
@@ -28,8 +31,7 @@
         if (!(Tools.isTermInt(tvars[0])))
             return false;
 
-        SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        Hashtable ht = or.getHashtable(((IStrategoInt)tvars[0]).intValue());
+        Hashtable ht = library.getHashtable(((IStrategoInt)tvars[0]).intValue());
         ht.clear();
         return true;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -26,6 +26,8 @@
 
 public class SSL_indexedSet_create extends AbstractPrimitive {
 
+    private final SSLLibrary library;
+    
     class IndexedSet  {
         
         private static final long serialVersionUID = -4514696890481283123L;
@@ -102,8 +104,9 @@
         }
     }
 
-    protected SSL_indexedSet_create() {
+    protected SSL_indexedSet_create(SSLLibrary library) {
         super("SSL_indexedSet_create", 0, 2);
+        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
@@ -116,7 +119,7 @@
         int initialSize = ((IStrategoInt)targs[0]).intValue();
         int maxLoad = ((IStrategoInt)targs[1]).intValue();
 
-        int ref = SSLLibrary.instance(env).registerIndexedSet(new IndexedSet(initialSize, maxLoad));
+        int ref = library.registerIndexedSet(new IndexedSet(initialSize, maxLoad));
         env.setCurrent(env.getFactory().makeInt(ref));
         
         return true;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -16,8 +16,11 @@
 
 public class SSL_indexedSet_destroy extends AbstractPrimitive {
 
-    protected SSL_indexedSet_destroy() {
+    private final SSLLibrary library;
+
+    protected SSL_indexedSet_destroy(SSLLibrary library) {
         super("SSL_indexedSet_destroy", 0, 1);
+        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
@@ -25,7 +28,7 @@
         if(!(Tools.isTermInt(targs[0])))
             return false;
 
-        boolean r = SSLLibrary.instance(env).removeIndexedSet(Tools.asJavaInt(targs[0]));
+        boolean r = library.removeIndexedSet(Tools.asJavaInt(targs[0]));
         env.setCurrent(targs[0]);
         
         return r;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -17,8 +17,11 @@
 
 public class SSL_indexedSet_elements extends AbstractPrimitive {
 
-    protected SSL_indexedSet_elements() {
+    private final SSLLibrary library;
+
+    protected SSL_indexedSet_elements(SSLLibrary library) {
         super("SSL_indexedSet_elements", 0, 1);
+        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
@@ -27,7 +30,7 @@
         if (!(Tools.isTermInt(targs[0])))
             return false;
 
-        IndexedSet is = SSLLibrary.instance(env).getIndexedSet(Tools.asJavaInt(targs[0]));
+        IndexedSet is = library.getIndexedSet(Tools.asJavaInt(targs[0]));
 
         if(is == null)
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -17,8 +17,11 @@
 
 public class SSL_indexedSet_getIndex extends AbstractPrimitive {
 
-    protected SSL_indexedSet_getIndex() {
+    private final SSLLibrary library;
+
+    protected SSL_indexedSet_getIndex(SSLLibrary library) {
         super("SSL_indexedSet_getIndex", 0, 2);
+        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
@@ -27,7 +30,7 @@
         if (!(Tools.isTermInt(targs[0])))
             return false;
 
-        IndexedSet is = SSLLibrary.instance(env).getIndexedSet(Tools.asJavaInt(targs[0]));
+        IndexedSet is = library.getIndexedSet(Tools.asJavaInt(targs[0]));
         
         if(is == null)
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -17,8 +17,11 @@
 
 public class SSL_indexedSet_put extends AbstractPrimitive {
 
-    protected SSL_indexedSet_put() {
+    private final SSLLibrary library;
+
+    protected SSL_indexedSet_put(SSLLibrary library) {
         super("SSL_indexedSet_put", 1, 2);
+        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
@@ -27,7 +30,7 @@
         if (!(Tools.isTermInt(targs[0])))
             return false;
 
-        IndexedSet is = SSLLibrary.instance(env).getIndexedSet(Tools.asJavaInt(targs[0]));
+        IndexedSet is = library.getIndexedSet(Tools.asJavaInt(targs[0]));
         
         if(is == null)
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -16,9 +16,12 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_indexedSet_remove extends AbstractPrimitive {
+ 
+    private final SSLLibrary library;
 
-    protected SSL_indexedSet_remove() {
+    protected SSL_indexedSet_remove(SSLLibrary library) {
         super("SSL_indexedSet_remove", 0, 2);
+        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
@@ -27,7 +30,7 @@
         if (!(Tools.isTermInt(targs[0])))
             return false;
 
-        IndexedSet is = SSLLibrary.instance(env).getIndexedSet(Tools.asJavaInt(targs[0]));
+        IndexedSet is = library.getIndexedSet(Tools.asJavaInt(targs[0]));
         
         if(is == null)
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	2009-08-04 08:37:09 UTC (rev 19801)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	2009-08-04 08:45:30 UTC (rev 19802)
@@ -17,8 +17,11 @@
 
 public class SSL_indexedSet_reset extends AbstractPrimitive {
 
-    protected SSL_indexedSet_reset() {
+    private final SSLLibrary library;
+
+    protected SSL_indexedSet_reset(SSLLibrary library) {
         super("SSL_indexedSet_reset", 0, 1);
+        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
@@ -27,7 +30,7 @@
         if (!(Tools.isTermInt(targs[0])))
             return false;
 
-        IndexedSet is = SSLLibrary.instance(env).getIndexedSet(Tools.asJavaInt(targs[0]));
+        IndexedSet is = library.getIndexedSet(Tools.asJavaInt(targs[0]));
         
         if(is == null)
             return false;



From L.C.L.Kats at tudelft.nl  Tue Aug  4 13:20:12 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 04 Aug 2009 11:20:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19803 - LennartKats -
	sglr-recovery/tags
	sglr-recovery/tags/permissive-grammars-finegrained-only
	spoofax/tags spoofax/tags/spoofax-finegrained-only
	spoofax/tags/spoofax-recovery-finegrained-only/src/org/spoofax/jsglr
	spoofax-imp/tags spoofax-imp/tags/spoofax-imp-finegrained-only
Message-ID: <200908041117.n74BHknG026338@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-04 11:20:12 +0000 (Tue, 04 Aug 2009)
New Revision: 19803

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19803&view=rev

Added:
   sglr-recovery/tags/permissive-grammars-finegrained-only/
   spoofax-imp/tags/spoofax-imp-finegrained-only/
   spoofax/tags/spoofax-finegrained-only/
   spoofax/tags/spoofax-finegrained-only/spoofax/
   spoofax/tags/spoofax-recovery-finegrained-only/
Removed:
   spoofax/tags/spoofax-finegrained-only/spoofax/
   spoofax/tags/spoofax-recovery-finegrained-only/src/org/spoofax/jsglr/BackTrackRecovery.java

Log:
Tagged the last version of the "fine-grained only" recovery approach (see also http://torvalds.cs.lth.se/svn/recovery/tags/bridge-parsing-finegrained-only).

Changes:


Property changes on: sglr-recovery/tags/permissive-grammars-finegrained-only
___________________________________________________________________
Added: svn:mergeinfo
   + 


Property changes on: spoofax/tags/spoofax-finegrained-only
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: spoofax/tags/spoofax-recovery-finegrained-only/src/org/spoofax/jsglr/BackTrackRecovery.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/BackTrackRecovery.java	2009-04-06 14:00:56 UTC (rev 18750)
+++ spoofax/tags/spoofax-recovery-finegrained-only/src/org/spoofax/jsglr/BackTrackRecovery.java	2009-08-04 11:20:12 UTC (rev 19803)
@@ -1,386 +0,0 @@
-package org.spoofax.jsglr;
-
-import java.io.IOException;
-import java.util.ArrayList;
-
-import org.spoofax.ArrayDeque;
-
-/*
- * Assumption: some recover productions are implemented in the syntax definition
- * Examples: -> } {avoid}, [a-zA-Z]+ -> LAYOUT {avoid}
- * 
- * Algorithm: 
- * - During parsing: keep a set with parser states for recovering, ignore recover productions
- * - Recovering: Reset parser on last inserted parser state, collect and process recover-productions, continue by backtracking on parser states
- * - Fine tuning: The criteria for inserting recover positions influences quality and performance. 
- */
-public class BackTrackRecovery implements IRecoverAlgorithm {
-
-    private int newLineCount; //Alternative approach for inserting recoverPositions 
-    private int recoverNewLineInterval;
-    private int recoverStreamInterval; //Interval for inserting recover positions. Remark: big interval increases quality but may increase recover time
-    protected ArrayList<RecoverNode> recoverNodes; //List to collect stacks created by a recover production
-    private ArrayList<BacktrackPosition> recoverPositions; //List to collect parser states. Remark: big list increases non-error parse time
-    private ArrayList<Integer> recoverTokens; //parsed characters
-    private int recoveryIndex; //for Reading recovery tokens
-    private boolean inRecoverMode; //Recover mode means that recover productions are processed and the resulting stacknodes are preserved in recoverNodes 
-    private SGLR myParser; //parser
-    private int maxRecoverLoops; //protection against infinity
-    private int nrOfLoops;
-    private boolean exceededMax;
-    private int lastRecoverIndex;
-    private int lastRecoverStreamPosition;
-    private int streamIntervalForSucces;
-    
-    private long recoverTime;
-    
-    public BackTrackRecovery(SGLR parser)
-    {
-        recoverStreamInterval = 10;
-        newLineCount =0;
-        recoverNewLineInterval =1;
-        recoverPositions = new ArrayList<BacktrackPosition>();
-        recoveryIndex=-1;
-        inRecoverMode = false;
-        recoverNodes = new ArrayList<RecoverNode>();
-        recoverTokens = new ArrayList<Integer>();
-        myParser = parser;
-        maxRecoverLoops=50;
-        nrOfLoops=0;
-        lastRecoverIndex =-1;
-        lastRecoverStreamPosition =-1;
-        exceededMax =false;
-        streamIntervalForSucces=4; //4
-        
-        recoverTime = 0;
-    }
-    
-    public void handleRecoverProduction(Frame st0, State s, int length,
-            int numberOfAvoids, IParseNode t) {
-        // Todo: some improvements for performance
-        if (inRecoverMode || hasRecentlyRecovered()) {//Todo: of just recovered
-            Frame st1;
-            Link nl;
-            
-            /*
-            st1=findRecoverStack(s);
-            if(st1==null){ */           
-                st1 = myParser.newStack(s);            
-                nl = st1.addLink(st0, t, length);
-                nl.avoidCount = numberOfAvoids;
-                addRecoverNode(st1, st0);
-            /*} 
-            else{
-                nl = st1.findDirectLink(st0);
-                if (nl != null) 
-                {
-                    if(myParser.lessAvoidsInLink(numberOfAvoids, nl))//??: what about this rejected attribute
-                    {                                        
-                        //choose the best path
-                        nl.avoidCount = numberOfAvoids;
-                        nl.label = t;
-                        nl.length = length;               
-                    }
-                }
-                else
-                {
-                    nl = st1.addLink(st0, t, length);
-                    nl.avoidCount = numberOfAvoids;                    
-                }
-            }*/
-        }
-    }
-    
-    private Frame findRecoverStack(State s)
-    {
-        for (int i = recoverNodes.size()-1; i >= 0; i--) {
-            RecoverNode rn = recoverNodes.get(i);
-            if(rn.tokensSeen < myParser.tokensSeen)
-                return null;
-            if( rn.tokensSeen == myParser.tokensSeen && rn.recoverStack.state.stateNumber == s.stateNumber)
-                return rn.recoverStack;
-        }
-        return null;
-    }
-    
-    //Recover node stacks are collected in handleRecoverProductions and processed as normal stacks in second round  
-    public boolean haltsOnRecoverProduction(Frame st0) {
-        return true;
-    }
-    
-    private void addRecoverNode(Frame st, Frame parent)
-    {
-        RecoverNode rn = new RecoverNode(st, myParser.tokensSeen, myParser.lineNumber, myParser.columnNumber, parent);
-        recoverNodes.add(rn);        
-    }
-
-    public void afterStreamRead(int currToken) {
-        recoverTokens.add(currToken);         
-    }
-
-    public void afterParseStep() {
-        if(keepStackCriteria()){ 
-            keepRecoveryPoints();
-            if(recoverPositions.size()>120) //removing early inserted positions improves non-error parsing performance
-            {             
-                ArrayList<BacktrackPosition> cleanedPositions = new ArrayList<BacktrackPosition>();
-                cleanedPositions.add(recoverPositions.get(0));
-                cleanedPositions.add(recoverPositions.get(35));
-                cleanedPositions.addAll(recoverPositions.subList(70, 120));                
-                recoverPositions=cleanedPositions;
-                lastRecoverIndex =-1; //
-            }
-        }      
-        
-    }
-
-    private void keepRecoveryPoints() {
-        BacktrackPosition recPos=new BacktrackPosition(myParser.activeStacks, myParser.tokensSeen, myParser.lineNumber, myParser.columnNumber);                     
-        recoverPositions.add(recPos);
-    }
-    
-    private boolean keepStackCriteria() { //Todo: experiment with criteria
-        if(myParser.tokensSeen - lastRecoverStreamPosition == streamIntervalForSucces) //recovering succeeded
-            return true;
-        return checkNewLineCount();
-        //return checkStreamPosition();         
-    }
-
-    private boolean checkStreamPosition() {
-        return myParser.tokensSeen % recoverStreamInterval == 0;
-    }
-
-    private boolean checkNewLineCount() {
-        if(newLineCount>recoverNewLineInterval)
-        {
-            newLineCount=0;
-            return true;
-        }
-        if(myParser.currentToken == 10)
-        {
-            newLineCount++;
-            
-        }
-        return false;
-    }
-
-    public void recover() throws IOException {
-        long startTime = System.currentTimeMillis();
-        inRecoverMode =true;        
-        if(hasRecentlyRecovered())//Todo:successful recovery criteria
-            localRecover(lastRecoverIndex-1); 
-        else //no recent recovering or recover positions re-indexed
-        {
-            recoverNodes.clear();
-            localRecover(recoverPositions.size()-1);
-        }
-        recoverTime += System.currentTimeMillis() - startTime;
-        
-    }
-    
-    public long getRecoverTime() {
-        return recoverTime;
-    }
-
-    private boolean hasRecentlyRecovered() {
-        return lastRecoverIndex >=0 && (myParser.tokensSeen - lastRecoverStreamPosition < streamIntervalForSucces);
-    }
-
-    public boolean meetsRecoverCriteria() {
-        return myParser.acceptingStack == null && exceededMax ==false;
-    }
-    
-    /*
-     * Sets parser variables on recover position and tries recovering. 
-     * After failure, continues with previous recover position
-     */
-    private void localRecover(int indexRP) throws IOException {   
-        int indexRecoverPositions =indexRP;
-        if (indexRecoverPositions >=0) {
-            collectNodesForPosition(indexRecoverPositions);
-        }
-        indexRecoverPositions = Math.max(0, indexRP);
-        BacktrackPosition rp=recoverPositions.get(indexRecoverPositions);        
-        myParser.activeStacks.clear();
-        setTokenIndex(rp);
-        setParserFields(rp);
-        
-        boolean hasRecovered = tryRecover();
-        if(hasRecovered) {
-            inRecoverMode=false;
-            //recoverNodes.clear(); //improve 
-            nrOfLoops=0;       
-            lastRecoverIndex = indexRecoverPositions;
-            lastRecoverStreamPosition = myParser.tokensSeen;            
-        }
-        else {
-            int newIndex = Math.max(0, indexRecoverPositions -1);
-            nrOfLoops+=1;
-            if(nrOfLoops>maxRecoverLoops)
-            {
-                exceededMax =true;
-            }
-            if(exceededMax == false){
-                localRecover(newIndex);
-            }
-        }        
-        
-    }
-
-    private void collectNodesForPosition(int indexRecoverPositions)
-            throws IOException {
-        BacktrackPosition rp = recoverPositions.get(indexRecoverPositions);                    
-        setTokenIndex(rp);
-        myParser.activeStacks.addAll(rp.recoverStacks);  
-        setParserFields(rp);
-        int endInterval;
-        if(indexRecoverPositions == recoverPositions.size()-1)
-        {
-            endInterval = recoverTokens.size();
-        }
-        else
-        {
-            endInterval = recoverPositions.get(indexRecoverPositions +1).tokensSeen;
-        }
-        collectRecoverNodes(endInterval);
-        
-    }
-
-    private int setTokenIndex(BacktrackPosition rp) {
-        int recoveryLength = recoverTokens.size() - rp.tokensSeen;
-        recoveryIndex = recoverTokens.size()-recoveryLength;
-        return recoveryLength;
-    }    
-    
-    /*
-     * Collects recover nodes for recoverPosition 
-     */
-    private void collectRecoverNodes(int endInterval) throws IOException {
-        ArrayList<RecoverNode> rnNodes = new ArrayList<RecoverNode>();           
-        rnNodes.addAll(recoverNodes);
-        recoverNodes.clear();
-        //collect till end position is reached
-        while(recoveryIndex < endInterval) 
-        {
-            setCurrentToken();
-            myParser.updateParserFields(myParser.currentToken);             
-            myParser.doParseStep();                    
-        }
-        recoverNodes.addAll(rnNodes);
-    }
-    
-    /*
-     * Stacks resulting from recover productions are collected in the first round
-     * This stacks are added to the active stacks in the next round of recover-parsing.
-     * Remark on quality-performance trade-off: a recovering with two recover-productions near [add stack criteria]
-     * the error position may be preferred above one recover production on an earlier position 
-     */
-    private boolean tryRecover() throws IOException {
-        ArrayDeque<RecoverNode> rnNodes = new ArrayDeque<RecoverNode>();           
-        rnNodes.addAll(recoverNodes);
-        recoverNodes.clear();
-        //do recovering till original position is reached
-        while(recoveryIndex < recoverTokens.size()) 
-        {
-            setCurrentToken();
-            myParser.updateParserFields(myParser.currentToken); 
-            activateRecoverFrames(rnNodes);
-            myParser.doParseStep();                    
-        }
-        return myParser.activeStacks.size() > 0 || myParser.acceptingStack !=null; //Todo: parsing just ok after ...exmp. 5 char
-    }
-    
-    private void setParserFields(BacktrackPosition rp) {
-        myParser.tokensSeen = rp.tokensSeen;
-        myParser.columnNumber = rp.columnNumber;
-        myParser.lineNumber = rp.lineNumber;
-    }
-    
-    private void setCurrentToken() {
-        myParser.currentToken = recoverTokens.get(recoveryIndex).intValue();
-        recoveryIndex ++;        
-    }
-    
-    /*
-     * Add recover nodes meeting the current position in stream
-     */
-    private void activateRecoverFrames(ArrayDeque<RecoverNode> rnNodes) {
-        boolean inspectR=true; //try adding recover nodes for this token position
-        while (rnNodes.size() > 0 && inspectR) {
-            if (myParser.tokensSeen == rnNodes.peek().tokensSeen) {
-                RecoverNode recNode = rnNodes.removeFirst();
-                addRecoverState(recNode);
-            }
-            else
-                inspectR =false; //list is sorted
-        }
-    }
-
-    private void addRecoverState(RecoverNode recNode) {
-        Frame st1 = myParser.findStack(myParser.activeStacks, recNode.recoverStack.state);
-        if(st1==null)
-            myParser.activeStacks.add(recNode.recoverStack);
-        else {
-            Link nl = st1.findDirectLink(recNode.parentStack);
-            Link oldLink = recNode.recoverStack.findDirectLink(recNode.parentStack);
-
-            if (nl == null) { //no need to handle ambiguity, just skip!?
-                nl = st1.addLink(recNode.parentStack, oldLink.label, oldLink.length);
-                nl.avoidCount = oldLink.avoidCount;
-            }
-        }
-    }
-
-    public void initialize() {//TODO: clear, init, constructor
-        recoverPositions.clear();
-        recoverNodes.clear();
-        recoverTokens.clear();
-        inRecoverMode=false;
-        recoveryIndex=-1;
-        newLineCount =0;
-        nrOfLoops=0;
-        exceededMax=false;
-        lastRecoverIndex =-1;
-        keepRecoveryPoints();       
-        recoverTime = 0;
-    }
-    
-  //Debug help
-    private String logRecoverTokens()
-    {
-        String result = "LINE "+myParser.lineNumber +": ";
-        for (int i = 0; i < 50; i++) {
-            if (recoverTokens.size()-50+i > 0) {
-                int tok = recoverTokens.get(recoverTokens.size()-50+i);               
-                char tokChar = (char)tok;
-                result+=tokChar;
-            }
-        }
-        /*
-        for (int tok : recoverTokens) {
-            char tokChar = (char)tok;
-            result+=tokChar;
-        }*/
-        return result;
-    } 
-    
-    //Debug help
-    private String logRecoverInfo()
-    {
-      
-        String result = ""; //todo: info uit current recoverpos
-        for (int i = 0; i < 50; i++) {
-            if (recoveryIndex - 50 + i>0) {
-                int tok = recoverTokens.get(recoveryIndex - 50 + i);
-                char tokChar = (char) tok;
-                result += tokChar;
-            }
-        }
-        /*
-        for (int tok : recoverTokens) {
-            char tokChar = (char)tok;
-            result+=tokChar;
-        }*/
-        return result;
-    } 
-}


Property changes on: spoofax-imp/tags/spoofax-imp-finegrained-only
___________________________________________________________________
Added: svn:mergeinfo
   + 



From L.C.L.Kats at tudelft.nl  Tue Aug  4 13:54:39 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 04 Aug 2009 11:54:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19804 - LennartKats -
	strc-java
Message-ID: <200908041152.n74BqDl6026546@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-04 11:54:39 +0000 (Tue, 04 Aug 2009)
New Revision: 19804

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19804&view=rev

Added:
   strc-java/branches/

Log:


Changes:



From L.C.L.Kats at tudelft.nl  Tue Aug  4 13:56:09 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 04 Aug 2009 11:56:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19805 - LennartKats -
	strc-java/branches
Message-ID: <200908041153.n74Brh1v026551@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-04 11:56:08 +0000 (Tue, 04 Aug 2009)
New Revision: 19805

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19805&view=rev

Added:
   strc-java/branches/one-file-per-strategy/

Log:
Added a new branch that generates one Java file for each strategy.

Changes:



From L.C.L.Kats at tudelft.nl  Tue Aug  4 14:14:08 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 04 Aug 2009 12:14:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19806 - LennartKats -
	in strc-java/branches/one-file-per-strategy: . META-INF java
	java/runtime/org/strategoxt java/runtime/org/strategoxt/lang/compat
	java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat
	java/runtime/org/strategoxt/lang/compat/libstrc_compat trans
Message-ID: <200908041211.n74CBgFI026955@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-04 12:14:08 +0000 (Tue, 04 Aug 2009)
New Revision: 19806

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19806&view=rev

Added:
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java
Removed:
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java
Modified:
   strc-java/branches/one-file-per-strategy/.classpath
   strc-java/branches/one-file-per-strategy/.project
   strc-java/branches/one-file-per-strategy/META-INF/MANIFEST.MF
   strc-java/branches/one-file-per-strategy/build.properties
   strc-java/branches/one-file-per-strategy/java/Makefile.am
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/StringValuePrimitive.java
   strc-java/branches/one-file-per-strategy/trans/java-dead-assigns.str
   strc-java/branches/one-file-per-strategy/trans/java-optimize.str
   strc-java/branches/one-file-per-strategy/trans/java-postprocess.str
   strc-java/branches/one-file-per-strategy/trans/s2j-options.str
   strc-java/branches/one-file-per-strategy/trans/s2j.str
   strc-java/branches/one-file-per-strategy/trans/shared-constructors.str
   strc-java/branches/one-file-per-strategy/trans/strj-options.str
   strc-java/branches/one-file-per-strategy/trans/strj.str

Log:
Branch that generates one Java file for each strategy.

Changes (first 1000 lines of the diffs):

Modified: strc-java/branches/one-file-per-strategy/.classpath
===================================================================
--- strc-java/branches/one-file-per-strategy/.classpath	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/.classpath	2009-08-04 12:14:08 UTC (rev 19806)
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" output="java/runtime" path="java/runtime"/>
-	<classpathentry kind="src" output="strc-java/java/compiler" path="java/compiler"/>
+	<classpathentry kind="src" path="java/runtime"/>
+	<classpathentry kind="src" path="java/compiler"/>
+	<classpathentry kind="src" path="java/lib"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry exported="true" kind="lib" path="java/strategoxt.jar" sourcepath="/org.spoofax.interpreter.library.jsglr"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/3"/>
-	<classpathentry kind="output" path="bin"/>
+	<classpathentry kind="output" path="java/bin"/>
 </classpath>

Modified: strc-java/branches/one-file-per-strategy/.project
===================================================================
--- strc-java/branches/one-file-per-strategy/.project	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/.project	2009-08-04 12:14:08 UTC (rev 19806)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>strc-java</name>
+	<name>strc-java [one-file-per-strategy branch]</name>
 	<comment></comment>
 	<projects>
 	</projects>

Modified: strc-java/branches/one-file-per-strategy/META-INF/MANIFEST.MF
===================================================================
--- strc-java/branches/one-file-per-strategy/META-INF/MANIFEST.MF	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/META-INF/MANIFEST.MF	2009-08-04 12:14:08 UTC (rev 19806)
@@ -14,5 +14,6 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Bundle-ClassPath: .,
- java/strategoxt.jar,
- java/runtime/
+ java/runtime/,
+ java/compiler/,
+ java/lib/

Modified: strc-java/branches/one-file-per-strategy/build.properties
===================================================================
--- strc-java/branches/one-file-per-strategy/build.properties	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/build.properties	2009-08-04 12:14:08 UTC (rev 19806)
@@ -2,5 +2,6 @@
            java/compiler
 bin.includes = META-INF/,\
                .,\
-               java/strategoxt.jar,\
-               java/runtime/
+               java/runtime/,\
+               java/compiler/,\
+               java/lib/

Modified: strc-java/branches/one-file-per-strategy/java/Makefile.am
===================================================================
--- strc-java/branches/one-file-per-strategy/java/Makefile.am	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/java/Makefile.am	2009-08-04 12:14:08 UTC (rev 19806)
@@ -1,5 +1,8 @@
 include $(top_srcdir)/Makefile.xt
 
+EXTRA_DIST=strategoxt.jar
+pkgdata_DATA=strategoxt.jar
+
 RUNTIMEJAVAS = \
   $(wildcard runtime/org/strategoxt/lang/*.java) \
   $(wildcard runtime/org/strategoxt/lang/compat/*.java) \
@@ -11,15 +14,13 @@
   runtime/org/strategoxt/lang/compat/override/xtc_compat.java \
   runtime/org/strategoxt/lang/compat/override/strc_compat.java
 
-RUNTIMECLASSES = \
-  $(RUNTIMEJAVAS:.java=.class)
+GENRUNTIMEJAVAS= \
+  $(subst runtime/org/strategoxt/lang/compat/libstrc_compat.java,, \
+  $(subst runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java,,$(LIBRARYJAVAS)))
 
 COMPILERJAVAS = \
   compiler/org/strategoxt/strj.java
 
-COMPILERCLASSES = \
-  $(COMPILERJAVAS:.java=.class)
-
 LIBRARYJAVAS = \
   lib/org/strategoxt/libstratego_lib.java \
   lib/org/strategoxt/libstratego_xtc.java \
@@ -32,44 +33,30 @@
   lib/org/strategoxt/libstrc.java \
   lib/org/strategoxt/libjava_front.java
 
-LIBRARYCLASSES=$(LIBRARYJAVAS:.java=.class)
+nobase_pkgdata_DATA = $(LIBRARYJAVAS) $(COMPILERJAVAS) .ALLCLASSES
 
-nobase_pkgdata_DATA = $(LIBRARYJAVAS) $(COMPILERJAVAS) .ALLCLASSES $(RUNTIMECLASSES) $(LIBRARYCLASSES) $(COMPILERCLASSES)
-
 CLEANFILES = \
-  $(RUNTIMECLASSES) $(LIBRARYCLASSES) $(COMPILERCLASSES) \
-  $(subst runtime/org/strategoxt/lang/compat/libstrc_compat.java,, \
-  $(subst runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java,,$(LIBRARYJAVAS))) \
-  $(COMPILERJAVAS) \
+  $(LIBRARYJAVAS) $(COMPILERJAVAS) $(GENRUNTIMEJAVAS) $(wildcard bin/*) \
   runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.rtree \
   lib/org/strategoxt/libstratego-xtc.rtree \
   .ALLCLASSES
 
-# HACK: hardcoded, relative classpath
-
-BASEPATH=../../../spoofax/trunk/spoofax
-SPCLASSPATH=$(BASEPATH)/org.spoofax.interpreter.core/bin:$(BASEPATH)/org.spoofax.interpreter.adapter.aterm/bin:$(BASEPATH)/org.spoofax.interpreter.library.jsglr/bin:$(BASEPATH)/../../branches/spoofax-recovery/bin:$(BASEPATH)/org.spoofax.aterm/bin/:$(BASEPATH)/org.spoofax.aterm/lib/jjtraveler-0.4.3.jar:$(BASEPATH)/org.spoofax.aterm/lib/shared-objects-1.4.jar
-CLASSPATH=$(SPCLASSPATH):runtime:lib:.
+SPOOFAX=../../../spoofax/trunk/spoofax
+CLASSPATH=runtime:lib:spoofax-libs.jar:.
 JAVACFLAGS=-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 
 STRJOPTIONS=--library -p org.strategoxt --verbose 3 -O 3
 
 JAR=`if which fastjar >/dev/null; then echo fastjar; else echo jar; fi`
-JARIN1=`find runtime  | grep -E '\.class|\.rtree|\.af|\.tbl' | sed 's!runtime/!-C runtime/ !'`
-JARIN2=`find lib      | grep -E '\.class|\.rtree|\.af|\.tbl' | sed 's!lib/!-C lib/ !'`
-JARIN3=`find compiler | grep -E '\.class|\.rtree|\.af|\.tbl' | sed 's!compiler/!-C compiler/ !'`
+JARIN1=`find runtime  | grep -E '\.rtree|\.af|\.tbl' | sed 's!runtime/!-C runtime/ !'`
+JARIN2=`find lib      | grep -E '\.rtree|\.af|\.tbl' | sed 's!lib/!-C lib/ !'`
+JARIN3=`find compiler | grep -E '\.rtree|\.af|\.tbl' | sed 's!compiler/!-C compiler/ !'`
 
-jar strategoxt.jar : ext-lib # .ALLCLASSES $(RUNTIMEJAVAS) $(LIBARYJAVAS) $(COMPILERJAVAS)
-	$(JAR) cfm strategoxt.jar.tmp META-INF/MANIFEST.MF $(JARIN1)
-	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF $(JARIN2)
-	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF $(JARIN3)
-	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF -C ext-lib/ .
-	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF -C $(BASEPATH)/org.spoofax.interpreter.core/bin/ .
-	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF -C $(BASEPATH)/../../branches/spoofax-recovery/bin/ .
-	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF -C $(BASEPATH)/org.spoofax.aterm/bin/ .
-	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF -C $(BASEPATH)/org.spoofax.interpreter.adapter.aterm/bin/ .
-	$(JAR) ufm strategoxt.jar.tmp META-INF/MANIFEST.MF -C $(BASEPATH)/org.spoofax.interpreter.library.jsglr/bin/ .
+jar strategoxt.jar : spoofax-libs.jar # .ALLCLASSES $(RUNTIMEJAVAS) $(LIBARYJAVAS) $(COMPILERJAVAS)
+	cp spoofax-libs.jar strategoxt.jar.tmp
+	$(JAR) uf strategoxt.jar.tmp $(JARIN1) $(JARIN2) $(JARIN3)
+	$(JAR) uf strategoxt.jar.tmp META-INF/MANIFEST.MF -C bin .
 	jar i strategoxt.jar.tmp
 	mv strategoxt.jar.tmp strategoxt.jar
 
@@ -77,25 +64,35 @@
 	$(JAR) cfm0 strategoxt.jar META-INF/MANIFEST.MF $(JARIN1)
 	$(JAR) ufm0 strategoxt.jar META-INF/MANIFEST.MF $(JARIN2)
 	$(JAR) ufm0 strategoxt.jar META-INF/MANIFEST.MF $(JARIN3)
-	$(JAR) ufm0 strategoxt.jar META-INF/MANIFEST.MF -C ext-lib/ .
-	$(JAR) ufm0 strategoxt.jar META-INF/MANIFEST.MF -C $(BASEPATH)/org.spoofax.interpreter.core/bin/ .
-	$(JAR) ufm0 strategoxt.jar META-INF/MANIFEST.MF -C $(BASEPATH)/../../branches/spoofax-recovery/bin/ .
-	$(JAR) ufm0 strategoxt.jar META-INF/MANIFEST.MF -C $(BASEPATH)/org.spoofax.aterm/bin/ .
-	$(JAR) ufm0 strategoxt.jar META-INF/MANIFEST.MF -C $(BASEPATH)/org.spoofax.interpreter.adapter.aterm/bin/ .
-	$(JAR) ufm0 strategoxt.jar META-INF/MANIFEST.MF -C $(BASEPATH)/org.spoofax.interpreter.library.jsglr/bin/ .
+	$(JAR) ufm0 strategoxt.jar META-INF/MANIFEST.MF -C spoofax-libs/ .
 	mv strategoxt.jar strategoxt-no-compression.jar
 	jar cfm strategoxt.jar META-INF/MANIFEST-repacked.MF strategoxt-no-compression.jar
 	jar i strategoxt.jar
 
-ext-lib : $(BASEPATH)/org.spoofax.aterm/lib/jjtraveler-0.4.3.jar $(BASEPATH)/org.spoofax.aterm/lib/shared-objects-1.4.jar $(BASEPATH)/share/java/junit-3.8.1.jar $(BASEPATH)/share/java/jjtraveler-0.4.3.jar
-	([ -d ext-lib ] || mkdir ext-lib); \
-	cat $(BASEPATH)/org.spoofax.aterm/lib/jjtraveler-0.4.3.jar | (cd ext-lib; $(JAR) x); \
-	cat $(BASEPATH)/org.spoofax.aterm/lib/shared-objects-1.4.jar | (cd ext-lib; $(JAR) x); \
-	cat $(BASEPATH)/share/java/junit-3.8.1.jar | (cd ext-lib; $(JAR) x); \
-	rm -rf ext-lib/META-INF
+new-spoofax-libs :
+	rm -rf spoofax-libs-tmp
+	mkdir spoofax-libs-tmp
+	cat $(SPOOFAX)/org.spoofax.aterm/lib/jjtraveler-0.4.3.jar | (cd spoofax-libs-tmp; $(JAR) x)
+	cat $(SPOOFAX)/org.spoofax.aterm/lib/shared-objects-1.4.jar | (cd spoofax-libs-tmp; $(JAR) x)
+	cat $(SPOOFAX)/share/java/junit-3.8.1.jar | (cd spoofax-libs-tmp; $(JAR) x)
+	rm -rf spoofax-libs-tmp/META-INF
+	$(JAR) cf spoofax-libs.jar.tmp -C spoofax-libs-tmp .
+	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.core/bin/ .
+	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/../../branches/spoofax-recovery/bin/ .
+	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.aterm/bin/ .
+	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.adapter.aterm/bin/ .
+	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.jsglr/bin/ .
+	rm -rf spoofax-libs-tmp
+	mv spoofax-libs.jar.tmp spoofax-libs.jar
 
+.ALLCLASSES : $(RUNTIMEJAVAS) $(LIBARYJAVAS) $(COMPILERJAVAS)
+	$(JAVAC) $(JAVACFLAGS) $(RUNTIMEJAVAS) $(LIBRARYJAVAS) $(COMPILERJAVAS) -d bin && touch $@
+
 ###### LIBRARIES #######
 
+bin/org/strategoxt/libstratego_lib.class : lib/org/strategoxt/libstratego_lib.java
+	$(JAVAC) $< -d bin
+
 lib/org/strategoxt/libstratego_lib.java : $(STRATEGOXT)/share/stratego-lib/libstratego-lib.ctree ../trans/strj
 	../trans/strj -I $(STRATEGOXT)/share/stratego-lib -i $< -o $@ $(STRJOPTIONS)
 
@@ -157,19 +154,13 @@
 compiler/org/strategoxt/strj.java : ../trans/strj.ctree ../trans/strj
 	../trans/strj -i $< -o $@ -p org.strategoxt --verbose 3 -la stratego-lib -la stratego-xtc -la stratego-gpp -la org.strategoxt.libstrc -la org.strategoxt.libjava_front # -D DEFAULT_XTC_REPOSITORY="\"$(REPOSITORY)\""
 
-###### GENERAL #######
+###### EXTERNAL #######
 
-%.class : %.java
-	$(JAVAC) $(JAVACFLAGS) $<
-
 ../trans/strj : .PURPLEPONY
 	$(MAKE) -C ../trans strj
 
 ../trans/strj.ctree : .PURPLEPONY
 	$(MAKE) -C ../trans strj.ctree
 
-.ALLCLASSES : $(RUNTIMEJAVAS) $(LIBARYJAVAS) $(COMPILERJAVAS)
-	$(JAVAC) $(JAVACFLAGS) $(RUNTIMEJAVAS) $(LIBRARYJAVAS) $(COMPILERJAVAS) && touch $@
-
 .PURPLEPONY:
 

Modified: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/HybridInterpreter.java	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/HybridInterpreter.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -44,17 +44,17 @@
 		IContext context = getContext();
 		Context compiledContext = getCompiledContext();
 		
-		libstratego_aterm.registerInterop(context, compiledContext);
-		libstratego_lib.registerInterop(context, compiledContext);
-		libstratego_rtg.registerInterop(context, compiledContext);
-		libstratego_sdf.registerInterop(context, compiledContext);
-		libstratego_xtc.registerInterop(context, compiledContext);
-		libstratego_sglr.registerInterop(context, compiledContext);
-		libstratego_tool_doc.registerInterop(context, compiledContext);
-		libstratego_rtg.registerInterop(context, compiledContext);
-		libstratego_gpp.registerInterop(context, compiledContext);
-		libjava_front.registerInterop(context, compiledContext);
-		libstrc.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_aterm.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_lib.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_rtg.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_sdf.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_xtc.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_sglr.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_tool_doc.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_rtg.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_gpp.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libjava_front.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstrc.Main.registerInterop(context, compiledContext);
 	}
 	
 	public Context getCompiledContext() {

Modified: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -6,10 +6,6 @@
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.compat.override.jsglr_parser;
-import org.strategoxt.lang.compat.override.jsglr_parser_compat;
-import org.strategoxt.lang.compat.override.performance_tweaks;
-import org.strategoxt.lang.compat.override.xtc_compat;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
 
 /**
@@ -51,17 +47,17 @@
 	public void activateComponent(String component) {
 		if ("libstratego_lib".equals(component)) {
 			context.addOperatorRegistry(new CompatLibrary());
-			performance_tweaks.init(context);
-			xtc_compat.init(context); // also deals with native calls for libstratego-lib
+			org.strategoxt.lang.compat.override.performance_tweaks.Main.init(context);
+			org.strategoxt.lang.compat.override.xtc_compat.Main.init(context); // also deals with native calls for libstratego-lib
 		} else if ("libstratego_sglr".equals(component)) {
 			WrappedATermFactory atermFactory = new WrappedATermFactory();
 			context.addOperatorRegistry(new JSGLRLibrary(atermFactory));
 			context.addOperatorRegistry(new SGLRCompatLibrary(atermFactory));
-			jsglr_parser.init(context);
-			jsglr_parser_compat.init(context);
+			org.strategoxt.lang.compat.override.jsglr_parser.Main.init(context);
+			org.strategoxt.lang.compat.override.jsglr_parser_compat.Main.init(context);
 		} else if ("libstrc".equals(component)) {
-			context.addOperatorRegistry(libstrc_compat.getOperatorRegistry());
-			libstrc_compat.init(context);
+			context.addOperatorRegistry(org.strategoxt.lang.compat.libstrc_compat.Main.getOperatorRegistry());
+			org.strategoxt.lang.compat.libstrc_compat.Main.init(context);
 		}
 	}
 }

Modified: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/StringValuePrimitive.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/StringValuePrimitive.java	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/StringValuePrimitive.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -13,7 +13,7 @@
 	
 	private final String value;
 
-	protected StringValuePrimitive(String name, String value) {
+	public StringValuePrimitive(String name, String value) {
 		super(name, 0, 0);
 		this.value = value;
 	}

Copied: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java (from rev 19805, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java)
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java	                        (rev 0)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -0,0 +1,53 @@
+package org.strategoxt.lang.compat.libstratego_rtg_compat;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class Main {
+	public static void init(Context context) {
+		// Nothing to init
+	}
+	
+	public static class strrtg_list_loop1_1_0 extends Strategy {
+		public static strrtg_list_loop1_1_0 instance = new strrtg_list_loop1_1_0();
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+			if (current.getTermType() != IStrategoTerm.LIST)
+				return null;
+			
+			boolean success = false;			
+			IStrategoList list = (IStrategoList) current;
+			
+			for (int i = 0; i < list.size(); i++) {
+				IStrategoTerm term = list.get(i);
+				IStrategoTerm term2 = s.invoke(context, term);
+				if (term2 != null) success = true;
+			}
+			
+			return success ? current : null;
+		}
+	}
+
+	public static class strrtg_repeat_1_0 extends Strategy {
+		public static strrtg_repeat_1_0 instance = new strrtg_repeat_1_0();
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+			IStrategoTerm result = current;
+			IStrategoTerm next = s.invoke(context, result);
+			
+			while (next != null) {
+				result = next;
+				next = s.invoke(context, result);
+			}
+
+			return result;
+		}
+	}
+}

Copied: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java (from rev 19805, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java)
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java	                        (rev 0)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -0,0 +1,30 @@
+package org.strategoxt.lang.compat.libstratego_rtg_compat;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class strrtg_list_loop1_1_0 extends Strategy {
+	public static strrtg_list_loop1_1_0 instance = new strrtg_list_loop1_1_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		if (current.getTermType() != IStrategoTerm.LIST)
+			return null;
+		
+		boolean success = false;			
+		IStrategoList list = (IStrategoList) current;
+		
+		for (int i = 0; i < list.size(); i++) {
+			IStrategoTerm term = list.get(i);
+			IStrategoTerm term2 = s.invoke(context, term);
+			if (term2 != null) success = true;
+		}
+		
+		return success ? current : null;
+	}
+}
\ No newline at end of file

Copied: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java (from rev 19805, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java)
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java	                        (rev 0)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -0,0 +1,26 @@
+package org.strategoxt.lang.compat.libstratego_rtg_compat;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class strrtg_repeat_1_0 extends Strategy {
+	public static strrtg_repeat_1_0 instance = new strrtg_repeat_1_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		IStrategoTerm result = current;
+		IStrategoTerm next = s.invoke(context, result);
+		
+		while (next != null) {
+			result = next;
+			next = s.invoke(context, result);
+		}
+
+		return result;
+	}
+}
\ No newline at end of file

Deleted: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -1,53 +0,0 @@
-package org.strategoxt.lang.compat;
-
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class libstratego_rtg_compat {
-	public static void init(Context context) {
-		// Nothing to init
-	}
-	
-	public static class strrtg_list_loop1_1_0 extends Strategy {
-		public static strrtg_list_loop1_1_0 instance = new strrtg_list_loop1_1_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-			if (current.getTermType() != IStrategoTerm.LIST)
-				return null;
-			
-			boolean success = false;			
-			IStrategoList list = (IStrategoList) current;
-			
-			for (int i = 0; i < list.size(); i++) {
-				IStrategoTerm term = list.get(i);
-				IStrategoTerm term2 = s.invoke(context, term);
-				if (term2 != null) success = true;
-			}
-			
-			return success ? current : null;
-		}
-	}
-
-	public static class strrtg_repeat_1_0 extends Strategy {
-		public static strrtg_repeat_1_0 instance = new strrtg_repeat_1_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-			IStrategoTerm result = current;
-			IStrategoTerm next = s.invoke(context, result);
-			
-			while (next != null) {
-				result = next;
-				next = s.invoke(context, result);
-			}
-
-			return result;
-		}
-	}
-}

Copied: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java (from rev 19805, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java)
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java	                        (rev 0)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -0,0 +1,69 @@
+package org.strategoxt.lang.compat.libstrc_compat;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+import org.strategoxt.lang.compat.StringValuePrimitive;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class Main {
+	
+	// TODO: libstrc_compat and libstratego_rtg_compat should be Stratego modules
+	//       with calls to primitives, and ideally they should get a different name
+	
+	private Main() {
+		// No instantiation
+	}
+	
+	public static void init(Context context) {
+		org.strategoxt.lang.compat.override.strc_compat.Main.init(context);
+	}
+	
+	public static AbstractStrategoOperatorRegistry getOperatorRegistry() {
+		return new OperatorRegistry();
+	}
+	
+	private static class OperatorRegistry extends AbstractStrategoOperatorRegistry {		
+		public OperatorRegistry() {
+			add(new StringValuePrimitive("VERSION_TERM", "x.y"));
+			add(new StringValuePrimitive("SVN_REVISION_TERM", "nnnn"));
+			add(new StringValuePrimitive("STRC_SYSTEM_LDFLAGS", ""));
+			add(new StringValuePrimitive("STRC_SYSTEM_CFLAGS", ""));
+		}
+
+		public String getOperatorRegistryName() {
+			return "libstrc_compat";
+		}		
+	}
+	
+	public static class pp_c_0_0 extends Strategy {
+		public static pp_c_0_0 instance = new pp_c_0_0();
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+			throw new NotImplementedException(); // TODO: pp_c_0_0
+		}
+	}
+	
+	public static class pp_c_pretty_0_0 extends Strategy {
+		public static pp_c_pretty_0_0 instance = new pp_c_pretty_0_0();
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+			throw new NotImplementedException(); // TODO: pp_c_pretty_0_0
+		}
+	}
+	
+	public static class strc_cgen_aterm_0_0 extends Strategy {
+		public static strc_cgen_aterm_0_0 instance = new strc_cgen_aterm_0_0();
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+			throw new NotImplementedException(); // TODO: strc_cgen_aterm_0_0
+		}
+	}
+}


Property changes on: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java (from rev 19805, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java)
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java	                        (rev 0)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -0,0 +1,20 @@
+package org.strategoxt.lang.compat.libstrc_compat;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+import org.strategoxt.lang.compat.StringValuePrimitive;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class pp_c_0_0 extends Strategy {
+	public static pp_c_0_0 instance = new pp_c_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		throw new NotImplementedException(); // TODO: pp_c_0_0
+	}
+}
\ No newline at end of file


Property changes on: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java (from rev 19805, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java)
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java	                        (rev 0)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -0,0 +1,20 @@
+package org.strategoxt.lang.compat.libstrc_compat;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+import org.strategoxt.lang.compat.StringValuePrimitive;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class pp_c_pretty_0_0 extends Strategy {
+	public static pp_c_pretty_0_0 instance = new pp_c_pretty_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		throw new NotImplementedException(); // TODO: pp_c_pretty_0_0
+	}
+}


Property changes on: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Copied: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java (from rev 19805, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java)
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java	                        (rev 0)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -0,0 +1,20 @@
+package org.strategoxt.lang.compat.libstrc_compat;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+import org.strategoxt.lang.compat.StringValuePrimitive;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class strc_cgen_aterm_0_0 extends Strategy {
+	public static strc_cgen_aterm_0_0 instance = new strc_cgen_aterm_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		throw new NotImplementedException(); // TODO: strc_cgen_aterm_0_0
+	}
+}
\ No newline at end of file


Property changes on: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Deleted: strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java	2009-08-04 12:14:08 UTC (rev 19806)
@@ -1,66 +0,0 @@
-package org.strategoxt.lang.compat;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-import org.strategoxt.lang.compat.override.strc_compat;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class libstrc_compat {
-	
-	private libstrc_compat() {
-		// No instantiation
-	}
-	
-	public static void init(Context context) {
-		strc_compat.init(context);
-	}
-	
-	public static AbstractStrategoOperatorRegistry getOperatorRegistry() {
-		return new OperatorRegistry();
-	}
-	
-	private static class OperatorRegistry extends AbstractStrategoOperatorRegistry {		
-		public OperatorRegistry() {
-			add(new StringValuePrimitive("VERSION_TERM", "x.y"));
-			add(new StringValuePrimitive("SVN_REVISION_TERM", "nnnn"));
-			add(new StringValuePrimitive("STRC_SYSTEM_LDFLAGS", ""));
-			add(new StringValuePrimitive("STRC_SYSTEM_CFLAGS", ""));
-		}
-
-		public String getOperatorRegistryName() {
-			return "libstrc_compat";
-		}		
-	}
-	
-	public static class pp_c_0_0 extends Strategy {
-		public static pp_c_0_0 instance = new pp_c_0_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-			throw new NotImplementedException(); // TODO: pp_c_0_0
-		}
-	}
-	
-	public static class pp_c_pretty_0_0 extends Strategy {
-		public static pp_c_pretty_0_0 instance = new pp_c_pretty_0_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-			throw new NotImplementedException(); // TODO: pp_c_pretty_0_0
-		}
-	}
-	
-	public static class strc_cgen_aterm_0_0 extends Strategy {
-		public static strc_cgen_aterm_0_0 instance = new strc_cgen_aterm_0_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-			throw new NotImplementedException(); // TODO: strc_cgen_aterm_0_0
-		}
-	}
-}

Modified: strc-java/branches/one-file-per-strategy/trans/java-dead-assigns.str
===================================================================
--- strc-java/branches/one-file-per-strategy/trans/java-dead-assigns.str	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/trans/java-dead-assigns.str	2009-08-04 12:14:08 UTC (rev 19806)
@@ -60,21 +60,11 @@
   ; If(dead-assigns-expr, id, id)
   
   dead-assigns-control =
-    While(dead-assigns-expr, id)
-  ; While(id, {| IsUsed: dead-assigns-stm |})
-  
-  dead-assigns-control =
     Block({| IsUsed: dead-assigns-stm |})
   
   dead-assigns-control =
-    Labeled(id, {| IsUsed: dead-assigns-stm |})
-  
-  dead-assigns-control =
-    DoWhile(id, {| IsUsed: dead-assigns-stm |})
-  ; While(dead-assigns-expr, id)
-  
-  dead-assigns-control =
-    [Break(id) | {| IsUsed: dead-assigns-stm |}]
+    Labeled(id, id)
+  ; Labeled(id, is-container-stm; dead-assigns-stm)
 
   is-container-stm =
     ?Labeled(_, _) + ?Block(_) + ?If(_, _) + ?If(_, _, _)

Modified: strc-java/branches/one-file-per-strategy/trans/java-optimize.str
===================================================================
--- strc-java/branches/one-file-per-strategy/trans/java-optimize.str	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/trans/java-optimize.str	2009-08-04 12:14:08 UTC (rev 19806)
@@ -18,7 +18,6 @@
         [id | optimize-assignments] + optimize-assignments
       )
     )
-  //; optimize-assignments-top
   ; java-dead-assigns-top
   ; bottomup(repeat( // should be done after previous pass
       optimize-conditionals
@@ -53,8 +52,9 @@
 
   has-no-side-effects =
     ?Lit(_)
-  + ?|[ getConstant(e1, e2) ]|
+  + ?|[ x.getConstant(e1, e2) ]|
   + ?ExprName(_)
+  //+ ?|[ x.get() ]|
   //+ ?|[ termFactory.x(e*) ]|; where(<all(has-no-side-effects)> e*)
 
   optimize-match-test :
@@ -62,7 +62,7 @@
       IStrategoTerm x_cached = term;
       Success: {
         Fail: {
-          ~bstm*:<match-decls-and-appl-test => (bstm_decl*, x_cons, bstm_body*)>
+          ~bstm*:<match-decls-and-appl-test => (bstm_decl*, e_cons, bstm_body*)>
         }
         term = x_cached;
         bstm_othermatch*
@@ -75,7 +75,7 @@
         ? ((IStrategoAppl) term).getConstructor()
         : null;
       Success: {
-        if (x_actualcons == x_cons) {
+        if (x_actualcons == e_cons) {
           Fail: {
             bstm_decl*
             bstm_body*
@@ -96,7 +96,7 @@
       IStrategoTerm x_cached' = term;
       Success: {
         Fail: {
-          ~bstm*:<match-decls-and-appl-test => (bstm_decl*, x_cons, bstm_body*)>
+          ~bstm*:<match-decls-and-appl-test => (bstm_decl*, e_cons, bstm_body*)>
         }
         term = x_cached';
         bstm_othermatch*
@@ -105,7 +105,7 @@
     ]| ->
     bstm* |[
       Success: {
-        if (x_actualcons == x_cons) {
+        if (x_actualcons == e_cons) {
           Fail: {
             bstm_decl*
             bstm_body*
@@ -123,9 +123,9 @@
     [Block(bstm*) | _] -> <match-decls-and-appl-test> bstm*
   
   match-decls-and-appl-test :
-    bstm* |[ IStrategoTerm x = null; bstm* ]| -> ([<Hd> | bstm_decl*], x_cons, bstm_body*)
+    bstm* |[ IStrategoTerm x = null; bstm* ]| -> ([<Hd> | bstm_decl*], e_cons, bstm_body*)
     where
-      (bstm_decl*, x_cons, bstm_body*) := <match-decls-and-appl-test> bstm*
+      (bstm_decl*, e_cons, bstm_body*) := <match-decls-and-appl-test> bstm*
     
   match-decls-and-appl-test :
     bstm* |[
@@ -133,11 +133,7 @@
         break Fail;
       bstm_body*
     ]| ->
-    ([], x_cons, bstm_body*)
-    with
-      !e_cons => |[ x.x_cons ]|
-    <+
-      !e_cons => |[ x_cons ]|
+    ([], e_cons, bstm_body*)
 
 strategies
 

Modified: strc-java/branches/one-file-per-strategy/trans/java-postprocess.str
===================================================================
--- strc-java/branches/one-file-per-strategy/trans/java-postprocess.str	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/trans/java-postprocess.str	2009-08-04 12:14:08 UTC (rev 19806)
@@ -91,3 +91,39 @@
 
   java-param-to-arg :
     param |[ t x ]| -> expr |[ x ]|
+
+strategies
+
+  java-split-class :
+    compilation-unit |[
+      ~package-dec?:pkgname
+      ~import-dec*:imports
+      mod* class x {
+        ~*members
+      }
+    ]| ->
+    [ compilation-unit |[
+        ~package-dec?:pkgname
+        ~import-dec*:imports
+        mod* class x {
+          ~*members'
+        }
+      ]| 
+    | member-classes
+    ]
+    with
+      (member-classes, members') := <partition(to-compilation-unit(|pkgname, imports, mod*))> members
+
+  to-compilation-unit(|pkgname, imports, mod*) :
+    type-dec |[
+      mod2* class x extends y {
+        ~*members
+      }
+    ]| ->
+    compilation-unit |[
+      ~package-dec?: pkgname
+      ~import-dec*: imports
+      mod* class x extends y {
+        ~*members
+      }
+    ]|

Modified: strc-java/branches/one-file-per-strategy/trans/s2j-options.str
===================================================================
--- strc-java/branches/one-file-per-strategy/trans/s2j-options.str	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/trans/s2j-options.str	2009-08-04 12:14:08 UTC (rev 19806)
@@ -15,7 +15,10 @@
   s2j-library-options =
     ArgOption(
       "-p"
-    , <set-config> ("-p", <id>); !()
+    , if is-substring(!"/") + is-substring("-") then
+        fatal-err(|"Illegal package name")
+      end
+    ; <set-config> ("-p", <id>); !()
     , !"-p <name>          Set package name <name>"
     )
   + ArgOption(
@@ -82,7 +85,7 @@
         err(|"Imported libraries must follow format packagename.ClassName"); fail
       
       otherwise:
-        id
+        jify
     end
   
   // For compatibility, ignore all built-in library paths

Modified: strc-java/branches/one-file-per-strategy/trans/s2j.str
===================================================================
--- strc-java/branches/one-file-per-strategy/trans/s2j.str	2009-08-04 11:56:08 UTC (rev 19805)
+++ strc-java/branches/one-file-per-strategy/trans/s2j.str	2009-08-04 12:14:08 UTC (rev 19806)
@@ -66,17 +66,21 @@
       )
     ; log-timed(
         dr-scope-all-verbose(java-compile-spec)
+      ; java-simplify
       | "Backend transformation succeeded", 1
       )
     ; log-timed(
-        java-simplify
-      ; olevel1(java-optimize)
-      ; java-relabel
+        olevel1(java-optimize)
+      | <conc-strings> ("Backend optimization succeeded -O ", <get-config; int-to-string> "-O"), 1
+      )
+    ; log-timed(
+        java-relabel
+      ; java-split-class
       | "Backend postprocessing succeeded", 1
       )
      
-  record-main-classname = 
-    <get-config> "-i"
+  record-main-classname =
+    (<get-config> "-o" <+ strc-getoutfile(!""))
   ; base-filename
   ; jify
   ; remove-extension
@@ -110,21 +114,32 @@
 
      protected static final boolean TRACES_ENABLED = e_traces;
      protected static ITermFactory constantFactory;
+     private static Context initedContext;
+     private static boolean isIniting;
 
      ~*cnst-decls
      ~*cnstr-decls
      
      public static Context init(Context context) {
-       ITermFactory termFactory = context.getFactory();
-       if (constantFactory == termFactory)
+       synchronized (x_name.class) {
+         if (isIniting) return null;
+         isIniting = true;
+         ITermFactory termFactory = context.getFactory();
+         if (constantFactory != termFactory) {
+           initConstructors(termFactory);
+           initConstants(termFactory);
+         }
+         if (context != initedContext) {
+           ~*import-inits
+           ~*def-inits
+           context.registerComponent("~x_name");
+         }
+         // Set these last to trigger failure if getConstant() is called early
+         initedContext = context;
+         constantFactory = termFactory;
+         isIniting = false;
          return context;
-       x_name.constantFactory = termFactory;
-       initConstructors(termFactory);
-       initConstants(termFactory);
-       ~*import-inits
-       ~*def-inits
-       context.registerComponent("~x_name");
-       return context;

(261 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Tue Aug 11 09:38:56 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 11 Aug 2009 07:38:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19807 - LennartKats -
	in spoofax-imp/branches: .
	spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
Message-ID: <200908110738.n7B7cpl7000582@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-11 07:38:56 +0000 (Tue, 11 Aug 2009)
New Revision: 19807

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19807&view=rev

Added:
   spoofax-imp/branches/spoofax-imp-finegrained-only/
Modified:
   spoofax-imp/branches/spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/branches/spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java

Log:
Added a branch based on tags/spoofax-imp-finegrained-only to support testing the old recovery approach.

Changes:

Modified: spoofax-imp/branches/spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
===================================================================
--- spoofax-imp/tags/spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-08-04 11:20:12 UTC (rev 19803)
+++ spoofax-imp/branches/spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-08-11 07:38:56 UTC (rev 19807)
@@ -156,6 +156,7 @@
 	public ATerm parseNoImplode(char[] inputChars, String filename)
 			throws TokenExpectedException, BadTokenException, SGLRException, IOException {
 		
+		/*
 		CachingKey cachingKey = new CachingKey(parseTableId, startSymbol, inputChars);
 		ATerm result = parsedCache.get(cachingKey);
 		if (result != null) {
@@ -163,13 +164,17 @@
 			assert currentTokenizer != null;
 			return result;
 		}
+		*/
+		ATerm result;
 		
 		Debug.startTimer();
 		try {
 			currentTokenizer = new SGLRTokenizer(inputChars, filename);
 			result = doParseNoImplode(inputChars, filename);
+			/*
 			parsedCache.put(cachingKey, result);
 			tokenizerCache.put(result, currentTokenizer);
+			*/
 		
 			return result;
 		} finally {

Modified: spoofax-imp/branches/spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
===================================================================
--- spoofax-imp/tags/spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	2009-08-04 11:20:12 UTC (rev 19803)
+++ spoofax-imp/branches/spoofax-imp-finegrained-only/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java	2009-08-11 07:38:56 UTC (rev 19807)
@@ -13,6 +13,7 @@
 import lpg.runtime.PrsStream;
 
 import org.strategoxt.imp.runtime.Debug;
+import org.strategoxt.imp.runtime.parser.ParseErrorHandler;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRTokenizer;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKindManager;
 
@@ -42,6 +43,8 @@
 
 	protected static final int PROD_ATTRS = 2;
 	
+	private static final int NONE = -1;
+	
 	private static final Map<ATerm, AstNode> implodedCache =
 		Collections.synchronizedMap(new WeakHashMap<ATerm, AstNode>());
 	
@@ -56,8 +59,12 @@
 	/** Character offset for the current implosion. */ 
 	protected int offset;
 	
-	protected boolean lexicalContext;
+	private int nonMatchingOffset = NONE;
 	
+	private char nonMatchingChar, nonMatchingCharExpected;
+	
+	protected boolean inLexicalContext;
+	
     public AsfixImploder(TokenKindManager tokenManager) {
 		this.tokenManager = tokenManager;
 	}
@@ -75,17 +82,19 @@
 		if (!(asfix instanceof ATermAppl || ((ATermAppl) asfix).getName().equals("parsetree")))
 			throw new IllegalArgumentException("Parse tree expected");
 		
-		assert offset == 0 && tokenizer.getStartOffset() == 0 : "Race condition in AsfixImploder";
+		if (offset != 0 || tokenizer.getStartOffset() != 0)
+			throw new IllegalStateException("Race condition in AsfixImploder");
 		
 		ATerm top = (ATerm) asfix.getChildAt(PARSE_TREE);
 		offset = 0;
-		lexicalContext = false;
+		inLexicalContext = false;
 		
 		try {
 			result = implodeAppl(top);
 		} finally {
 			tokenizer.endStream();
 			offset = 0;
+			nonMatchingOffset = NONE;
 		}
 		
 		if (Debug.ENABLED) {
@@ -113,20 +122,18 @@
 		IToken prevToken = tokenizer.currentToken();
 		
 		// Enter lexical context if this is a lex node
-		boolean lexicalStart = !lexicalContext
-			&& ("lex".equals(rhs.getName()) || AsfixAnalyzer.isLiteral(rhs)
-			    || AsfixAnalyzer.isLayout(rhs));
+		boolean lexicalStart = !inLexicalContext && isLexicalNode(rhs);
 		
-		if (lexicalStart) lexicalContext = true;
+		if (lexicalStart) inLexicalContext = true;
 		
-		if (!lexicalContext && "sort".equals(rhs.getName()) && lhs.getLength() == 1 && termAt(contents, 0).getType() == ATerm.INT) {
+		if (!inLexicalContext && "sort".equals(rhs.getName()) && lhs.getLength() == 1 && termAt(contents, 0).getType() == ATerm.INT) {
 			return createIntTerminal(contents, rhs);
 		}
 		
-		boolean isList = !lexicalContext && AsfixAnalyzer.isList(rhs);
-		boolean isVar  = !lexicalContext && !isList && "varsym".equals(rhs.getName());
+		boolean isList = !inLexicalContext && AsfixAnalyzer.isList(rhs);
+		boolean isVar  = !inLexicalContext && !isList && isVariableNode(rhs);
 		
-		if (isVar) lexicalContext = true;
+		if (isVar) inLexicalContext = true;
 		
 		// Recurse the tree (and set children if applicable)
 		ArrayList<AstNode> children =
@@ -134,15 +141,39 @@
 		
 		if (lexicalStart || isVar) {
 			return createStringTerminal(lhs, rhs);
-		} else if (lexicalContext) {
+		} else if (inLexicalContext) {
 			return null; // don't create tokens inside lexical context; just create one big token at the top
 		} else {
 			return createNonTerminalOrInjection(lhs, rhs, attrs, prevToken, children, isList);
 		}
 	}
 
+	/**
+	 * Identifies lexical parse tree nodes.
+	 * 
+	 * @see #isVariableNode(ATermAppl)
+	 *      Identifies variables, which are usually treated similarly to
+	 *      lexical nodes.
+	 * 
+	 * @return true if the current node is lexical.
+	 */
+	public static boolean isLexicalNode(ATermAppl rhs) {
+		return ("lex".equals(rhs.getName()) || AsfixAnalyzer.isLiteral(rhs)
+		    || AsfixAnalyzer.isLayout(rhs));
+	}
+
+	/**
+	 * Identifies parse tree nodes that begin variables.
+	 * 
+	 * @see #isVariableNode(ATermAppl) 
+	 * @return true if the current node is lexical.
+	 */
+	public static boolean isVariableNode(ATermAppl rhs) {
+		return "varsym".equals(rhs.getName());
+	}
+
 	protected ArrayList<AstNode> implodeChildNodes(ATermList contents) {
-		ArrayList<AstNode> results = lexicalContext
+		ArrayList<AstNode> results = inLexicalContext
 				? null
 				: new ArrayList<AstNode>(
 						min(EXPECTED_NODE_CHILDREN, contents.getChildCount()));
@@ -165,7 +196,7 @@
 	}
 
 	private StringAstNode createStringTerminal(ATermList lhs, ATermAppl rhs) {
-		lexicalContext = false;
+		inLexicalContext = false;
 		IToken token = tokenizer.makeToken(offset, tokenManager.getTokenKind(lhs, rhs), true);
 		String sort = reader.getSort(rhs);
 		
@@ -257,11 +288,13 @@
 		final ATermListImpl ambs = termAt(node, 0);
 		
 		ATermAppl lastNonAvoid = null;
+		ATermAppl firstOption = null;
 		boolean multipleNonAvoids = false;
 		
 	alts:
 		for (int i = 0; i < ambs.getLength(); i++) {
 			ATermAppl prod = resolveAmbiguities(termAt(ambs, i));
+			if (firstOption == null) firstOption = prod;
 			ATermAppl appl = termAt(prod, APPL_PROD);
 			ATermAppl attrs = termAt(appl, PROD_ATTRS);
 			
@@ -271,7 +304,7 @@
 				for (int j = 0; j < attrList.getLength(); j++) {
 					ATerm attr = termAt(attrList, j);
 					if (isAppl(attr) && "prefer".equals(asAppl(attr).getName())) {
-						return resolveAmbiguities(prod);
+						return prod;
 					} else if (isAppl(attr) && "avoid".equals(asAppl(attr).getName())) {
 						continue alts;
 					}
@@ -286,10 +319,10 @@
 		}
 		
 		if (!multipleNonAvoids) {
-			return lastNonAvoid != null ? lastNonAvoid : applAt(ambs, 0);
+			return lastNonAvoid != null ? lastNonAvoid : firstOption;
 		} else {
-			if (Debug.ENABLED && !lexicalContext) reportUnresolvedAmb(ambs);
-			return resolveAmbiguities(ambs.getFirst());
+			if (Debug.ENABLED && !inLexicalContext) reportUnresolvedAmb(ambs);
+			return firstOption;
 		}
 	}
 	
@@ -340,14 +373,23 @@
 	
 	/** Implode any appl(_, _) that constructs a lex terminal. */
 	protected void implodeLexical(ATermInt character) {
-		assert tokenizer.getLexStream().getInputChars().length > offset
-		    && character.getInt() == tokenizer.getLexStream().getCharValue(offset)
-			: "Character from asfix stream (" + character.getInt()
-			+ ") must be in lex stream ("
-			+ (tokenizer.getLexStream().getInputChars().length > offset 
-			   ? "???"
-			   : (int) tokenizer.getLexStream().getCharValue(offset)) + ")";
+		char[] inputChars = tokenizer.getLexStream().getInputChars();
+		if (offset >= inputChars.length) {
+			if (nonMatchingOffset == NONE)
+				throw new IllegalStateException("Character in parse tree after end of input stream: " + (char) character.getInt());
+			else
+				throw new IllegalStateException("Character in parse tree after end of input stream: " + (char) character.getInt()
+						+ " - may be caused by unexcepted character in parse tree at position " + nonMatchingChar
+						+ ": " + nonMatchingChar + " instead of " + nonMatchingCharExpected);
+		}
 		
-		offset++;
+		char parsedChar = (char) character.getInt();
+		char inputChar = inputChars[offset];
+		
+		if (parsedChar != inputChar) {
+			throw new IllegalStateException("uh oh");
+		} else {
+			offset++;
+		}
 	}
 }



From L.C.L.Kats at tudelft.nl  Tue Aug 11 11:51:33 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 11 Aug 2009 09:51:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19808 - LennartKats -
	in sglr-recovery/branches: .
	permissive-grammars-finegrained-only/permissive-grammars/trans/make-permissive
	permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/bin
	permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/include
	permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/src
	permissive-grammars-finegrained-only/recovery-runtime/src/test
Message-ID: <200908110951.n7B9pReR002596@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-11 09:51:33 +0000 (Tue, 11 Aug 2009)
New Revision: 19808

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19808&view=rev

Added:
   sglr-recovery/branches/permissive-grammars-finegrained-only/
Modified:
   sglr-recovery/branches/permissive-grammars-finegrained-only/permissive-grammars/trans/make-permissive/insert-sections.astr
   sglr-recovery/branches/permissive-grammars-finegrained-only/permissive-grammars/trans/make-permissive/water-sections.astr
   sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/bin/Stratego-Java-15-Permissive.main.esv
   sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/include/Stratego-Java-15-Permissive.packed.esv
   sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/src/Stratego-Java-15-Permissive.main.esv
   sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/src/test/BaseTest.java

Log:
Added a branch based on tags/spoofax-imp-finegrained-only to support testing the old recovery approach.

Changes:

Modified: sglr-recovery/branches/permissive-grammars-finegrained-only/permissive-grammars/trans/make-permissive/insert-sections.astr
===================================================================
--- sglr-recovery/tags/permissive-grammars-finegrained-only/permissive-grammars/trans/make-permissive/insert-sections.astr	2009-08-11 07:38:56 UTC (rev 19807)
+++ sglr-recovery/branches/permissive-grammars-finegrained-only/permissive-grammars/trans/make-permissive/insert-sections.astr	2009-08-11 09:51:33 UTC (rev 19808)
@@ -70,6 +70,7 @@
     where
       not(closinglit.is-used-as-opening-literal)
   
+  // TODO: Discard any nullable components in this test
   def Test is-used-as-opening-literal:
     lit(x) -> id
     where

Modified: sglr-recovery/branches/permissive-grammars-finegrained-only/permissive-grammars/trans/make-permissive/water-sections.astr
===================================================================
--- sglr-recovery/tags/permissive-grammars-finegrained-only/permissive-grammars/trans/make-permissive/water-sections.astr	2009-08-11 07:38:56 UTC (rev 19807)
+++ sglr-recovery/branches/permissive-grammars-finegrained-only/permissive-grammars/trans/make-permissive/water-sections.astr	2009-08-11 09:51:33 UTC (rev 19808)
@@ -1,6 +1,8 @@
 module water-sections
 
 attributes
+  
+  // TODO: WATER -> LAYOUT rule should be in lexical syntax
 
   // TODO: WATERTOKENSEPARATOR should be based on the definition of LAYOUT
 

Modified: sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/bin/Stratego-Java-15-Permissive.main.esv
===================================================================
--- sglr-recovery/tags/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/bin/Stratego-Java-15-Permissive.main.esv	2009-08-11 07:38:56 UTC (rev 19807)
+++ sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/bin/Stratego-Java-15-Permissive.main.esv	2009-08-11 09:51:33 UTC (rev 19808)
@@ -20,6 +20,6 @@
   description   : "Spoofax/IMP-generated editor for the Stratego-Java-15-Permissive language"
   url           : http://strategoxt.org
                   
-  extensions    : p
+  extensions    : str
   table         : include/Stratego-Java-15-Permissive.tbl
   start symbols : Module_StrategoHost
\ No newline at end of file

Modified: sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/include/Stratego-Java-15-Permissive.packed.esv
===================================================================
--- sglr-recovery/tags/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/include/Stratego-Java-15-Permissive.packed.esv	2009-08-11 07:38:56 UTC (rev 19807)
+++ sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/include/Stratego-Java-15-Permissive.packed.esv	2009-08-11 09:51:33 UTC (rev 19808)
@@ -24,7 +24,7 @@
   extends       : Root
   description   : "Spoofax/IMP-generated editor for the Stratego-Java-15-Permissive language"
   url           : http://strategoxt.org
-  extensions    : p
+  extensions    : str
   table         : include/Stratego-Java-15-Permissive.tbl
   start symbols : Module_StrategoHost
 

Modified: sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/src/Stratego-Java-15-Permissive.main.esv
===================================================================
--- sglr-recovery/tags/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/src/Stratego-Java-15-Permissive.main.esv	2009-08-11 07:38:56 UTC (rev 19807)
+++ sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/Editor_Stratego_Java/Permissive/src/Stratego-Java-15-Permissive.main.esv	2009-08-11 09:51:33 UTC (rev 19808)
@@ -20,6 +20,6 @@
   description   : "Spoofax/IMP-generated editor for the Stratego-Java-15-Permissive language"
   url           : http://strategoxt.org
                   
-  extensions    : p
+  extensions    : str
   table         : include/Stratego-Java-15-Permissive.tbl
   start symbols : Module_StrategoHost
\ No newline at end of file

Modified: sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/src/test/BaseTest.java
===================================================================
--- sglr-recovery/tags/permissive-grammars-finegrained-only/recovery-runtime/src/test/BaseTest.java	2009-08-11 07:38:56 UTC (rev 19807)
+++ sglr-recovery/branches/permissive-grammars-finegrained-only/recovery-runtime/src/test/BaseTest.java	2009-08-11 09:51:33 UTC (rev 19808)
@@ -33,8 +33,8 @@
  */
 public abstract class BaseTest extends TestCase {
 
-	protected final int NBR_OF_PARSE_RUNS = 10;
-	protected final int NBR_WARM_UP_RUNS = 5;
+	protected final int NBR_OF_PARSE_RUNS = 1;
+	protected final int NBR_WARM_UP_RUNS = 100;
 	
 	protected InputStream parseTable;
 	protected InputStream baseParseTable;
@@ -48,6 +48,11 @@
 	@Override
 	protected void setUp() throws Exception {
 		
+		System.out.println();
+		System.out.println("***** ");
+		System.out.println("***** " + getClass().getSimpleName());
+		System.out.println("***** ");
+		
 		parseTable = parseTableInputStream();
 		baseParseTable = baseParseTableInputStream();
 
@@ -55,7 +60,7 @@
 		assertNotNull("Base parse table not found; please run the included Makefile first", baseParseTable);
 		
 		Tools.setMeasuring(true);
-		Tools.setTimeout(60 * 1000);
+		Tools.setTimeout(10 * 1000);
 
 		parser = new StandardParser(parseTable, "CompilationUnit");
 		baseParser = new StandardParser(baseParseTable, "CompilationUnit");
@@ -168,6 +173,7 @@
 					Measures baseM = null;
 					baseParser.withBacktracking(true);
 					System.out.print("Best try of: ");
+					System.gc();
 					for (int i = 0; i < NBR_OF_PARSE_RUNS; i++) {
 						baseParser.parseFile(path + "/" + file);
 						Measures m = Tools.getMeasures();
@@ -175,12 +181,14 @@
 						if (baseM == null || m.getTime() < baseM.getTime()) {
 							baseM = m;
 						}
+						System.gc();
 					}
 					System.out.println("\nBase: " + baseM);
 					
 					Measures gramM = null;
 					parser.withBacktracking(true);
 					System.out.print("Best try of: ");
+					System.gc();
 					for (int i = 0; i < NBR_OF_PARSE_RUNS; i++) {
 						parser.parseFile(path + "/" + file);
 						Measures m = Tools.getMeasures();
@@ -188,6 +196,7 @@
 						if (gramM == null || m.getTime() < gramM.getTime()) {
 							gramM = m;
 						}
+						System.gc();
 					}
 					System.out.println("\nGram:" + gramM);
 					
@@ -295,7 +304,6 @@
 	 */
 	
 	public void testError() throws Exception {
-
 		HashMap<String, Long> timeMap = new HashMap<String, Long>();
 		HashMap<String, Long> recoverMap = new HashMap<String, Long>();
 		HashMap<String, Integer> avoidMap = new HashMap<String, Integer>();
@@ -333,8 +341,14 @@
 
 				for (String file : new File(path).list()) {
 					if (file.startsWith(pattern)) {
+						System.gc();
 						total++;
 						System.out.print("** " + run +  ":" + total + " ** " + file);
+						/*if (file.equals("test-java-traits.2.break35")) {
+							System.out.print("(SKIPPED; failedToRun++)");
+							failedToRun++;
+							continue;
+						}*/
 						try {
 							parser.parseFile(path + "/" + file);
 							
@@ -366,6 +380,7 @@
 						}
 					}
 				}
+				System.gc();
 			}
 			
 			for (String file : new File(path).list()) {



From L.C.L.Kats at tudelft.nl  Tue Aug 11 11:54:25 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 11 Aug 2009 09:54:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19809 - LennartKats -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
Message-ID: <200908110954.n7B9sJai002610@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-11 09:54:25 +0000 (Tue, 11 Aug 2009)
New Revision: 19809

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19809&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr

Log:
TODOs.

Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr	2009-08-11 09:51:33 UTC (rev 19808)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr	2009-08-11 09:54:25 UTC (rev 19809)
@@ -52,7 +52,9 @@
     where
       not(closinglit.is-used-as-opening-literal)
   
+  // TODO: Discard any nullable components in this test
   // TODO: Optimize: use lookup-global?
+
   def Test is-used-as-opening-literal:
     lit(x) -> id
     where

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	2009-08-11 09:51:33 UTC (rev 19808)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	2009-08-11 09:54:25 UTC (rev 19809)
@@ -1,6 +1,8 @@
 module water-sections
 
 attributes
+  
+  // TODO: WATER -> LAYOUT rule should be in lexical syntax
 
   // TODO: WATERTOKENSEPARATOR should be based on the definition of LAYOUT
 



From L.C.L.Kats at tudelft.nl  Tue Aug 11 12:05:55 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 11 Aug 2009 10:05:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19810 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF
	spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF
	strc-java/trunk strc-java/trunk/META-INF
Message-ID: <200908111005.n7BA5nSW003041@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-11 10:05:55 +0000 (Tue, 11 Aug 2009)
New Revision: 19810

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19810&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   strc-java/trunk/.project
   strc-java/trunk/META-INF/MANIFEST.MF

Log:
Changed strj project name and plugin ID to org.strategoxt.strj.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-08-11 09:54:25 UTC (rev 19809)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-08-11 10:05:55 UTC (rev 19810)
@@ -16,7 +16,7 @@
  org.eclipse.swt,
  org.spoofax.compiler,
  org.strategoxt.imp.editors.editorservice,
- org.strategoxt.strcjava;bundle-version="0.1.0"
+ org.strategoxt.strj;bundle-version="0.1.0"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-08-11 09:54:25 UTC (rev 19809)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-08-11 10:05:55 UTC (rev 19810)
@@ -25,7 +25,7 @@
  org.spoofax.compiler,
  org.eclipse.ui.ide,
  org.strategoxt.imp.editors.editorservice,
- org.strategoxt.strcjava;bundle-version="0.1.0"
+ org.strategoxt.strj;bundle-version="0.1.0"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-Activator: org.strategoxt.imp.metatooling.MetatoolingActivator
 Bundle-ActivationPolicy: lazy

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	2009-08-11 09:54:25 UTC (rev 19809)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	2009-08-11 10:05:55 UTC (rev 19810)
@@ -3,7 +3,7 @@
 Bundle-Name: Spoofax/IMP Runtime
 Bundle-SymbolicName: org.strategoxt.imp.runtime;singleton:=true
 Bundle-Version: 0.1.0.2600
-Require-Bundle: org.strategoxt.strcjava;bundle-version="0.1.0",
+Require-Bundle: org.strategoxt.strj;bundle-version="0.1.0",
  org.eclipse.imp.runtime,
  org.spoofax.aterm,
  org.spoofax.jsglr,

Modified: strc-java/trunk/.project
===================================================================
--- strc-java/trunk/.project	2009-08-11 09:54:25 UTC (rev 19809)
+++ strc-java/trunk/.project	2009-08-11 10:05:55 UTC (rev 19810)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>strc-java</name>
+	<name>org.strategoxt.strj</name>
 	<comment></comment>
 	<projects>
 	</projects>

Modified: strc-java/trunk/META-INF/MANIFEST.MF
===================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	2009-08-11 09:54:25 UTC (rev 19809)
+++ strc-java/trunk/META-INF/MANIFEST.MF	2009-08-11 10:05:55 UTC (rev 19810)
@@ -1,7 +1,7 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
-Bundle-Name: strc-java
-Bundle-SymbolicName: org.strategoxt.strcjava;singleton:=true
+Bundle-Name: Stratego/XT Java runtime
+Bundle-SymbolicName: org.strategoxt.strj;singleton:=true
 Bundle-Version: 0.1
 Export-Package: org.strategoxt,
  org.strategoxt.lang,



From L.C.L.Kats at tudelft.nl  Tue Aug 11 13:45:31 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 11 Aug 2009 11:45:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19811 - LennartKats -
	strc-java/trunk/tools
Message-ID: <200908111145.n7BBjQik004220@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-11 11:45:31 +0000 (Tue, 11 Aug 2009)
New Revision: 19811

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19811&view=rev

Modified:
   strc-java/trunk/tools/strj-jar

Log:
Fixed strj-jar -p option.

Changes:

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2009-08-11 10:05:55 UTC (rev 19810)
+++ strc-java/trunk/tools/strj-jar	2009-08-11 11:45:31 UTC (rev 19811)
@@ -23,6 +23,9 @@
   if [ "$P" == "-cp" ]; then
     CLASSPATH="$1"
     shift
+  elif [ "$P" == "-p" ]; then
+    PACKAGE="$1"
+    shift
   elif [ "$P" == "-i" ]; then
     INPUT="$1"
     shift



From L.C.L.Kats at tudelft.nl  Tue Aug 11 14:23:33 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 11 Aug 2009 12:23:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19812 - LennartKats -
	strc-java/trunk/tools
Message-ID: <200908111223.n7BCNSlR004762@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-11 12:23:33 +0000 (Tue, 11 Aug 2009)
New Revision: 19812

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19812&view=rev

Modified:
   strc-java/trunk/tools/strj-jar

Log:
strj-jar: added support for attached files.

Changes:

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2009-08-11 11:45:31 UTC (rev 19811)
+++ strc-java/trunk/tools/strj-jar	2009-08-11 12:23:33 UTC (rev 19812)
@@ -64,8 +64,12 @@
 
 ## JARRING
 
-echo $JAR cf $OUTPUT -C \$TEMPDIR .
-$JAR cf $OUTPUT -C $TEMPDIR .
+INPUTDIR=`dirname $INPUT`
+ATTACHMENTS=`ls $INPUTDIR | grep -vE "^$(basename $INPUT)\$" | sed "s!^!-C $INPUTDIR !"` \
+  || (echo "Illegal input file name: $INPUT">&2; exit 1)
+
+echo $JAR cf $OUTPUT -C . .
+$JAR cf $OUTPUT -C $TEMPDIR . $ATTACHMENTS
 RET=$?
 
 rm -rf $TEMPDIR


Property changes on: strc-java/trunk/tools/strj-jar
___________________________________________________________________
Added: svn:executable
   + *



From L.C.L.Kats at tudelft.nl  Tue Aug 11 14:24:18 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 11 Aug 2009 12:24:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19813 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator
	org.strategoxt.imp.generator/.externalToolBuilders
	org.strategoxt.imp.generator/META-INF
	org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
Message-ID: <200908111224.n7BCODd2004768@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-11 12:24:18 +0000 (Tue, 11 Aug 2009)
New Revision: 19813

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19813&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.generator/.externalToolBuilders/Makefile for Spoofax-IMP generator.launch
   spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java

Log:
- Use sdf2imp.jar (built using strj-jar) instead of sdf2imp.java in Eclipse
- Wizard fixes

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	2009-08-11 12:23:33 UTC (rev 19812)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	2009-08-11 12:24:18 UTC (rev 19813)
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="src-gen"/>
+	<classpathentry exported="true" kind="lib" path="lib/sdf2imp.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/make_permissive.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/.externalToolBuilders/Makefile for Spoofax-IMP generator.launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/.externalToolBuilders/Makefile for Spoofax-IMP generator.launch	2009-08-11 12:23:33 UTC (rev 19812)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/.externalToolBuilders/Makefile for Spoofax-IMP generator.launch	2009-08-11 12:24:18 UTC (rev 19813)
@@ -6,7 +6,7 @@
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_BUILD_SCOPE" value="${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet editPageId=&quot;org.eclipse.ui.resourceWorkingSetPage&quot; factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;str in metatooling&quot; name=&quot;str in metatooling&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.generator/src/syntax&quot; type=&quot;2&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.generator/src/sdf2imp.str&quot; type=&quot;1&quot;/&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/org.strategoxt.imp.generator/src/sdf2imp&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="/usr/bin/make"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS" value="full,incremental,"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS" value="java"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS" value="jar"/>
 <booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
 <stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.generator}"/>
 </launchConfiguration>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-08-11 12:23:33 UTC (rev 19812)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-08-11 12:24:18 UTC (rev 19813)
@@ -3,8 +3,8 @@
 Bundle-Name: Spoofax/IMP Metatooling
 Bundle-SymbolicName: org.strategoxt.imp.generator;singleton:=true
 Bundle-Version: 0.1.0.2600
-Bundle-ClassPath: src-gen/,
- lib/make_permissive.jar
+Bundle-ClassPath: lib/make_permissive.jar,
+ lib/sdf2imp.jar
 Require-Bundle: org.spoofax.aterm,
  org.spoofax.jsglr,
  org.spoofax.interpreter.core,

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-11 12:23:33 UTC (rev 19812)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-11 12:24:18 UTC (rev 19813)
@@ -52,10 +52,12 @@
 	-I src/syntax \
     `pkg-config --variable=strcflags java-front`
 
-all : sdf2imp java syntax
+all : sdf2imp java jar syntax
 
 java : src-gen/org/strategoxt/imp/generator/sdf2imp.java
 
+jar : lib/sdf2imp.jar
+
 check : all \
         tests/EditorService.runtestsuite \
         tests/test-editor-descriptor.runsh \
@@ -67,13 +69,13 @@
 	     -la ${HOME}/.nix-profile/lib/libjava-front.la $(STRCSTFU)
 	rm sdf2imp.c sdf2imp.lo sdf2imp.o
 
-%.class : %.java strategoxt.jar
-	$(JAVAC) $(JAVACFLAGS) -cp strategoxt.jar $<
-
 src-gen/org/strategoxt/imp/generator/sdf2imp.java : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
 	$(STRJ) -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
 	        -la java-front --library -p org.strategoxt.imp.generator $(STRCSTFU)
 
+lib/sdf2imp.jar : src-gen/org/strategoxt/imp/generator/sdf2imp.java
+	strj-jar -i $< -o $@ -p org.strategoxt.imp.generator
+
 syntax : $(SYNTAX)
 
 clean :

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties	2009-08-11 12:23:33 UTC (rev 19812)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/build.properties	2009-08-11 12:24:18 UTC (rev 19813)
@@ -3,6 +3,6 @@
 bin.includes = META-INF/,\
                includes,\
                bin/,\
-               lib/make_permissive.jar
-src.includes = src/,\
-               src-gen/
+               lib/make_permissive.jar,\
+               lib/sdf2imp.jar
+src.includes = src/

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-11 12:23:33 UTC (rev 19812)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-11 12:24:18 UTC (rev 19813)
@@ -46,11 +46,13 @@
     MultiArgOption(
       "-jar"
     , rules(JarLocation := <id>);
-      if not(file-exists) then
-        err(|"File does not exist");
-        fail
-      end
-    , !"-jar <path>           Set jar files to include (optional)"
+      list-loop(
+        if not(file-exists) then
+          err(|"File does not exist");
+          fail
+        end
+      )
+    , !"-jar <paths>          Set jar files to include (optional)"
     )
     
   start-symbol-option =

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-08-11 12:23:33 UTC (rev 19812)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-08-11 12:24:18 UTC (rev 19813)
@@ -8,5 +8,6 @@
   copy-strategoxt-jar =
     if JarLocation then
       <file-exists <+ mkdir> "aux/";
-      <copy-file> (<id>, "aux/strategoxt.jar")
+      JarLocation;
+      list-loop(<copy-file> (<id>, "aux/"))
     end

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-11 12:23:33 UTC (rev 19812)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-11 12:24:18 UTC (rev 19813)
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
+import java.security.CodeSource;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IProject;
@@ -111,8 +112,9 @@
 		try {
 			agent.setWorkingDir(project.getLocation().toOSString());
 			try {
-				String jars = getJarFiles();
-				sdf2imp.mainNoExit(context, "-m", name, "-n", packageName, "-e", extensions, "-jar", jars);
+				String jar1 = libstratego_lib.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+				String jar2 = make_permissive.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+				sdf2imp.mainNoExit(context, "-m", name, "-n", packageName, "-e", extensions, "-jar", jar1, jar2);
 			} catch (StrategoExit e) {
 				if (e.getValue() != 0) {
 					throw new StrategoException("Project builder failed. Log follows\n\n"
@@ -135,12 +137,6 @@
 			}
 		}
 	}
-
-	private static String getJarFiles() {
-		String strategoxt = libstratego_lib.class.getProtectionDomain().getCodeSource().getLocation().toExternalForm();
-		String makePermissive = make_permissive.class.getProtectionDomain().getCodeSource().getLocation().toExternalForm();
-		return strategoxt + " " + makePermissive;
-	}
 	
 	private void openEditor(IProject project, String filename) {
 		final IResource file = (IResource) project.findMember(filename);

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-11 12:23:33 UTC (rev 19812)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-11 12:24:18 UTC (rev 19813)
@@ -27,6 +27,10 @@
 	private Text inputExtensions;
 	
 	private boolean isInputPackageNameChanged;
+	
+	private boolean isInputExtensionsChanged;
+	
+	private boolean ignoreEventsOnce;
 
 	/**
 	 * Constructor for SampleNewWizardPage.
@@ -92,19 +96,24 @@
 		inputExtensions.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
 		inputExtensions.addModifyListener(new ModifyListener() {
 			public void modifyText(ModifyEvent e) {
+				isInputExtensionsChanged = true;
 				onChange();
 			}
 		});
 
-		inputName.setText("MyFirstEditor");
-		inputExtensions.setText("ext");
 		setControl(container);
+		setPageComplete(false);
 	}
 
 	/**
 	 * Ensures that both text fields are set.
 	 */
 	private void onChange() {
+		if (ignoreEventsOnce) {
+			ignoreEventsOnce = false;
+			return;
+		}
+		
 		if (getInputName().length() == 0) {
 			updateStatus("Project name must be specified");
 			return;
@@ -115,19 +124,27 @@
 		}
 		
 		if (!isInputPackageNameChanged) {
+			ignoreEventsOnce = true;
 			inputPackageName.setText(toPackageName(getInputName()));
 			isInputPackageNameChanged = false;
 		} else if (getInputPackageName().equals(toPackageName(getInputName()))) {
 			isInputPackageNameChanged = false;
 		}
+		
+		if (!isInputExtensionsChanged) {
+			ignoreEventsOnce = true;
+			inputExtensions.setText(toExtension(getInputName()));
+			isInputExtensionsChanged = false;
+		} else if (getInputExtensions().equals(toExtension(getInputExtensions()))) {
+			isInputExtensionsChanged = false;
+		}
 
 		if (getInputPackageName().length() == 0) {
 			updateStatus("Package name must be specified");
 			return;
 		}
 		if (!getInputPackageName().toLowerCase().equals(toPackageName(getInputPackageName()))
-				|| getInputPackageName().indexOf("..") != -1)
-		{
+				|| getInputPackageName().indexOf("..") != -1) {
 			updateStatus("Package name must be valid");
 			return;
 		}
@@ -136,8 +153,9 @@
 			updateStatus("File extension must be specified");
 			return;
 		}
-		if (getInputExtensions().startsWith(".")) {
-			updateStatus("File extension must be valid: cannot start with a '.'");
+		if (getInputExtensions().indexOf(".") != -1 || getInputExtensions().indexOf("/") != -1
+				|| getInputExtensions().indexOf(":") > -1){
+			updateStatus("File extension must be valid");
 			return;
 		}
 
@@ -168,6 +186,11 @@
 		}
 		return output.toString();
 	}
+	
+	private static String toExtension(String name) {
+		String input = name.toLowerCase().replace("-", "").replace(".", "").replace(" ", "").replace(":", "");
+		return input.substring(0, Math.min(input.length(), 3));
+	}
 
 	private void updateStatus(String message) {
 		setErrorMessage(message);



From L.C.L.Kats at tudelft.nl  Tue Aug 11 15:31:32 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 11 Aug 2009 13:31:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19814 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	strc-java/trunk/java
Message-ID: <200908111331.n7BDVQ2r005507@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-11 13:31:32 +0000 (Tue, 11 Aug 2009)
New Revision: 19814

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19814&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Polymorphic return type for Tools.termAt.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	2009-08-11 12:24:18 UTC (rev 19813)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	2009-08-11 13:31:32 UTC (rev 19814)
@@ -75,8 +75,9 @@
         return (IStrategoList) t.getSubterm(i);
     }
 
-    public static IStrategoTerm termAt(IStrategoTerm t, int i) {
-        return t.getSubterm(i);
+    @SuppressWarnings("unchecked") // casting is inherently unsafe, but doesn't warrant a warning here
+    public static<T extends IStrategoTerm> T termAt(IStrategoTerm t, int i) {
+        return (T) t.getSubterm(i);
     }
 
     public static IStrategoReal realAt(IStrategoList t, int i) {
Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Wed Aug 12 10:49:42 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 12 Aug 2009 08:49:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19815 - LennartKats -
	strc-java/trunk/trans
Message-ID: <200908120849.n7C8nYxi019390@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-12 08:49:41 +0000 (Wed, 12 Aug 2009)
New Revision: 19815

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19815&view=rev

Modified:
   strc-java/trunk/trans/s2j.str

Log:
Added public accessors for imported terms.

Changes:

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-08-11 13:31:32 UTC (rev 19814)
+++ strc-java/trunk/trans/s2j.str	2009-08-12 08:49:41 UTC (rev 19815)
@@ -852,14 +852,34 @@
         log(|Info(), ["Referenced imported term file ", file, "; exists in ", outputdir])
       end
     with
-      x_constant := <newname> "constImportTerm"
-    ; x_main     := <MainClassName>
-    ; rules(ConstDecl :+= class-body-dec |[ protected static ImportTermReference x_constant; ]|)
+      inputname     := <file-name-to-identifier> inputfile
+    ; inputname'    := <not(IsImported) <+ newname> inputname
+    ; x_constant    := <conc-strings> ("const", inputname')
+    ; x_getconstant := <conc-strings> ("get",   inputname')
+    ; x_main        := <MainClassName>
     ; rules(
-        ConstInit :+=
-          bstm* |[ x_constant = new ImportTermReference(termFactory, x_main.class, "~pkgpath", "~outputfile"); ]|
+        IsImported : inputname
+        ConstDecl :+= class-body-dec |[
+          protected static ImportTermReference x_constant;
+        ]|
+        ConstDecl :+= class-body-dec |[
+          public static IStrategoTerm x_getconstant(ITermFactory termFactory) {
+            return getConstant(termFactory, x_constant);
+          }
+        ]|
+        ConstInit :+= bstm* |[
+          x_constant = new ImportTermReference(termFactory, x_main.class, "~pkgpath", "~outputfile");
+        ]|
       )
-   
+  
+  file-name-to-identifier =
+    base-filename
+  ; string-as-chars(
+      listtd(try(['.', to-upper | id]))
+    ; filter(is-alphanum)
+    ; [to-upper | id]
+    )
+  
   find-import-term-file :
     file -> file'
     with



From L.C.L.Kats at tudelft.nl  Wed Aug 12 11:50:37 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 12 Aug 2009 09:50:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19816 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.generator org.strategoxt.imp.generator/META-INF
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.runtime/META-INF
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200908120950.n7C9oU77020380@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-12 09:50:36 +0000 (Wed, 12 Aug 2009)
New Revision: 19816

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19816&view=rev

Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BadMetaFileException.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileReader.java

Log:
Proper .meta file support.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile	2009-08-12 09:50:36 UTC (rev 19816)
@@ -5,26 +5,26 @@
 SDF2IMP    = ../org.strategoxt.imp.generator/sdf2imp
 ESVS       = ${wildcard src/*.esv}
 
-all : editor/include/$(SYNTAX).packed.esv editor/include/rtg.tbl editor/include/EditorService-pretty.pp.af
+all : include/$(SYNTAX).packed.esv include/rtg.tbl include/EditorService-pretty.pp.af
 
 clean :
 	rm -f src/parser/$(SYNTAX)ParseController.java bin/$(SYNTAX).packed.esv
 	rm -rf src/parser/ast
 	# ...
 
-editor/include/$(SYNTAX).packed.esv : $(SYNTAX).def editor/include/$(SYNTAX).tbl $(SDF2IMP) Makefile $(ESVS)
+include/$(SYNTAX).packed.esv : $(SYNTAX).def include/$(SYNTAX).tbl $(SDF2IMP) Makefile $(ESVS)
 	$(SDF2IMP) -i $< -p $(SYNTAX).tbl -m $(SYNTAX) --verbose 2
 
 $(SYNTAX).def : $(SOURCE)
 	ln -s $< $@
 
-editor/include/$(SYNTAX).tbl : $(SYNTAX).def
-	[ -e editor/include ] || mkdir editor/include
+include/$(SYNTAX).tbl : $(SYNTAX).def
+	[ -e include ] || mkdir include
 	sdf2table -i $< -o $@ -m $(SYNTAX)
 
 # We need a better solution for this
-editor/include/EditorService-pretty.pp.af : $(PPAF)
+include/EditorService-pretty.pp.af : $(PPAF)
 	cp $< $@
 
-editor/include/rtg.tbl : ~/.nix-profile/share/sdf/stratego-regular/rtg.tbl
+include/rtg.tbl : ~/.nix-profile/share/sdf/stratego-regular/rtg.tbl
 	baf2trm  -i $< -o $@ # cp $< $@

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	2009-08-12 09:50:36 UTC (rev 19816)
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src-gen"/>
-	<classpathentry exported="true" kind="lib" path="lib/sdf2imp.jar"/>
+	<classpathentry exported="true" kind="lib" path="lib/sdf2imp.jar" sourcepath="src-gen"/>
 	<classpathentry exported="true" kind="lib" path="lib/make_permissive.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	2009-08-12 09:50:36 UTC (rev 19816)
@@ -15,8 +15,7 @@
  org.junit,
  org.eclipse.swt,
  org.spoofax.compiler,
- org.strategoxt.imp.editors.editorservice,
- org.strategoxt.strj;bundle-version="0.1.0"
+ org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-08-12 09:50:36 UTC (rev 19816)
@@ -1,4 +1,4 @@
-module sdf2imp/project/copy-strategoxt-jar
+module sdf2imp/project/copy-jars
 
 imports
   libstratego-lib

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str	2009-08-12 09:50:36 UTC (rev 19816)
@@ -42,7 +42,6 @@
       language General properties
         ~
         name:    ~name
-        aliases:
         id:      ~pkgname
         extends: Root
         ~

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	2009-08-12 09:50:36 UTC (rev 19816)
@@ -43,8 +43,8 @@
     "table"           ":" PropertyValue  -> LanguageProperty {cons("Table")}
     "start" "symbols" ":" StartSymbols   -> LanguageProperty {cons("StartSymbols")}
     "url"             ":" URL            -> LanguageProperty {cons("URL")}
-    "extends"         ":" PropertyValue  -> LanguageProperty {cons("Extends")} %% derivedFrom
-    "aliases"         ":" PropertyValues -> LanguageProperty {cons("Aliases")} %% synonyms
+    "extends"         ":" PropertyValues -> LanguageProperty {cons("Extends")}
+    "aliases"         ":" PropertyValues -> LanguageProperty {cons("Aliases")} %% deprecated
    
      %% Syntax properties
      

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	2009-08-12 09:50:36 UTC (rev 19816)
@@ -3,8 +3,7 @@
 Bundle-Name: Spoofax/IMP Runtime
 Bundle-SymbolicName: org.strategoxt.imp.runtime;singleton:=true
 Bundle-Version: 0.1.0.2600
-Require-Bundle: org.strategoxt.strj;bundle-version="0.1.0",
- org.eclipse.imp.runtime,
+Require-Bundle: org.eclipse.imp.runtime,
  org.spoofax.aterm,
  org.spoofax.jsglr,
  org.spoofax.interpreter.core,
@@ -20,7 +19,9 @@
  org.eclipse.ui.editors,
  org.eclipse.ui.workbench,
  org.eclipse.ui,
- org.spoofax.compiler
+ org.spoofax.compiler,
+ org.strategoxt.imp.generator,
+ org.strategoxt.strj
 Export-Package: org.strategoxt.imp.runtime,
  org.strategoxt.imp.runtime.dynamicloading,
  org.strategoxt.imp.runtime.parser,

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-12 09:50:36 UTC (rev 19816)
@@ -157,12 +157,9 @@
 			throws IOException, InvalidParseTableException {
 		
 		Debug.startTimer();
-		ParseTable table = parseTableManager.loadFromStream(parseTable);
-			
+		ParseTable table = parseTableManager.loadFromStream(parseTable);	
 		parseTables.put(language.getName(), table);
-		
 		Debug.stopTimer("Parse table loaded");
-		
 		return table;
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-08-12 09:50:36 UTC (rev 19816)
@@ -18,6 +18,7 @@
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.parser.IParseController;
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
@@ -144,11 +145,11 @@
 				attachmentProvider = createService(IParseController.class).getClass();
 			return attachmentProvider;
 		} catch (BadDescriptorException e) { // Unexpected exception
-		    Environment.logException("Unable to instantiate parse controller class", e);
-		    return Descriptor.class;
-		}            
+			Environment.logException("Unable to instantiate parse controller class", e);
+			return Descriptor.class;
+		}
 	}
-	
+
 	public InputStream openParseTableStream() throws BadDescriptorException {
 		try {
 			return openAttachment(getParseTableName(), false);
@@ -156,20 +157,13 @@
 			throw new BadDescriptorException(e);
 		}
 	}
-    
-    public InputStream openPPTableStream() throws BadDescriptorException {
-        try {
-            return openAttachment(getPPTableName(), false);
-        } catch (FileNotFoundException e) {
-            throw new BadDescriptorException(e);
-        }
-    }
 
-    /**
-     * Open an attached file associated with this descriptor.
-     */ 
-    public InputStream openAttachment(String path) throws FileNotFoundException {
-    	return openAttachment(path, false);
+	public InputStream openPPTableStream() throws BadDescriptorException {
+		try {
+			return openAttachment(getPPTableName(), false);
+		} catch (FileNotFoundException e) {
+			throw new BadDescriptorException(e);
+		}
 	}
     
     /**
@@ -179,32 +173,35 @@
      */
 	private InputStream openAttachment(String path, boolean onlyListedFiles) throws FileNotFoundException {
 		if (onlyListedFiles)
-    		path = getAttachmentPath(path);
-    	
-        if (basePath != null) { // read from filesystem
-            path = basePath.append(path).toString();
-            if (!onlyListedFiles && !new File(path).exists())
-            	return openAttachment(path, true);
+			path = getAttachmentPath(path);
+
+		if (basePath != null) { // read from filesystem
+			path = basePath.append(path).toString();
+			if (!onlyListedFiles && !new File(path).exists())
+				return openAttachment(path, true);
 			return new BufferedInputStream(new FileInputStream(path));
-        } else { // read from jar
-		    InputStream result = getAttachmentProvider().getResourceAsStream("/" + path);
-		    if (result == null) { // read resource listed in descriptor
-		    	if (!onlyListedFiles) return openAttachment(path, true);
-		    	String specified = onlyListedFiles ? "specified file " : "";
-		        throw new FileNotFoundException(specified + path + " not found in editor service plugin");
-		    }
-		    return result;
-        }
-    }
+		} else { // read from jar
+			InputStream result = getAttachmentProvider().getResourceAsStream("/" + path);
+			if (result == null) { // read resource listed in descriptor
+				if (!onlyListedFiles)
+					return openAttachment(path, true);
+				String specified = onlyListedFiles ? "specified file " : "";
+				throw new FileNotFoundException(specified + path
+						+ " not found in editor service plugin");
+			}
+			return result;
+		}
+	}
 
 	private String getAttachmentPath(String path) throws FileNotFoundException {
 		File file = new File(path);
 		String name = file.getName();
 		for (File attached : getAttachedFiles()) {
-		    if (attached.getName().equals(name))
-		        return attached.toString();
+			if (attached.getName().equals(name))
+				return attached.toString();
 		}
-		throw new FileNotFoundException(path + " not specified as an attachment in editor service plugin");
+		throw new FileNotFoundException(path
+				+ " not specified as an attachment in editor service plugin");
 	}
 	
 	// INTERPRETING
@@ -218,67 +215,90 @@
                 getProperty("LanguageName"),
                 getProperty("LanguageId", getProperty("LanguageName")), // natureId
                 getProperty("Description", ""),
-                ROOT_LANGUAGE,                     // TODO: Use "extends" property?
-                getProperty("URL", ""),
+                ROOT_LANGUAGE,          // ("extends" property is not used for the
+                getProperty("URL", ""), //   IMP API)
                 getProperty("Extensions"),
                 getProperty("Aliases", ""),
-                new MetaFileLanguageValidator());
+                new MetaFileLanguageValidator(this));
         return language;
     }
 
-    private String getParseTableName() throws BadDescriptorException {
-        String file = getProperty("Table", getProperty("LanguageName"));
-        if (!file.endsWith(".tbl")) file += ".tbl";
-        return file;
+	private String getParseTableName() throws BadDescriptorException {
+		String file = getProperty("Table", getProperty("LanguageName"));
+		if (!file.endsWith(".tbl"))
+			file += ".tbl";
+		return file;
+	}
+
+	private String getPPTableName() throws BadDescriptorException {
+		String file = getProperty("PPTable", getProperty("LanguageName"));
+		if (!file.endsWith(".pp.af"))
+			file += ".pp.af";
+		return file;
+	}
+
+	public String[] getExtendedLanguages() {
+    	return getPropertyArray("Extends");
     }
 
-    private String getPPTableName() throws BadDescriptorException {
-        String file = getProperty("PPTable", getProperty("LanguageName"));
-        if (!file.endsWith(".pp.af")) file += ".pp.af";
-        return file;
-    }
-    
-    /**
-     * Get a set of all files attached to this descriptor
-     * (e.g., .ctree or .pp.af files). 
-     * This method is cached.
-     */
-    public Set<File> getAttachedFiles() {
-    	if (attachedFiles != null) return attachedFiles;
-    	attachedFiles = new HashSet<File>();
-    	
-    	try {
-    		attachedFiles.add(new File(getParseTableName()));
-    		attachedFiles.add(new File(getPPTableName()));
-    	} catch (Exception e) {
-    		// Ignore missing language name here
-    	}
-    	
-    	for (IStrategoAppl s : collectTerms(getDocument(), "SemanticProvider")) {
-    		attachedFiles.add(new File(termContents(s)));
-    	}
-    	
-    	return attachedFiles;
-    }
-	
+	/**
+	 * Get a set of all files attached to this descriptor (e.g., .ctree or
+	 * .pp.af files). This method is cached.
+	 */
+	public Set<File> getAttachedFiles() {
+		if (attachedFiles != null)
+			return attachedFiles;
+		attachedFiles = new HashSet<File>();
+
+		try {
+			attachedFiles.add(new File(getParseTableName()));
+			attachedFiles.add(new File(getPPTableName()));
+		} catch (Exception e) {
+			// Ignore missing language name here
+		}
+
+		for (IStrategoAppl s : collectTerms(getDocument(), "SemanticProvider")) {
+			attachedFiles.add(new File(termContents(s)));
+		}
+
+		return attachedFiles;
+	}
+
 	protected String getProperty(String name) throws BadDescriptorException {
 		String result = getProperty(name, null);
-		if (result == null) throw new BadDescriptorException("Property " + name + " not specified");		
+		if (result == null)
+			throw new BadDescriptorException("Property " + name + " not specified");
 		return result;
 	}
-	
+
 	protected String getProperty(String name, String defaultValue) {
 		IStrategoAppl result = findTerm(document, name);
-		if (result == null) return defaultValue;
-		
-		if ( termAt(result, 0).getTermType() == IStrategoTerm.APPL &&
-				cons((IStrategoAppl) termAt(result, 0)).equals("Values")) {
+		if (result == null)
+			return defaultValue;
+
+		if (termAt(result, 0).getTermType() == IStrategoTerm.APPL
+				&& cons((IStrategoAppl) termAt(result, 0)).equals("Values")) {
 			return concatTermStrings(termAt(result, 0));
 		} else {
 			return termContents(result);
 		}
 	}
-	
+
+	protected String[] getPropertyArray(String name) {
+		IStrategoAppl result = findTerm(document, name);
+		if (result == null)
+			return new String[0];
+		
+		IStrategoList list = termAt(termAt(result, 0), 0);
+
+		String[] results = new String[list.size()];
+		for (int i = 0; i < results.length; i++)
+			results[i] = termContents(list.get(i));
+		
+		return results;
+	}
+
+
 	@Override
 	public String toString() {
 		try {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java	2009-08-12 09:50:36 UTC (rev 19816)
@@ -12,6 +12,7 @@
 import org.spoofax.jsglr.ParseTable;
 import org.spoofax.jsglr.SGLR;
 import org.spoofax.jsglr.SGLRException;
+import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
@@ -29,13 +30,12 @@
 		if (descriptorParser != null) return;
 		try {
 			SGLR.setWorkAroundMultipleLookahead(true);
-			InputStream stream = Descriptor.class.getResourceAsStream("/syntax/EditorService.tbl");
+			InputStream stream = sdf2imp.class.getResourceAsStream("/EditorService.tbl");
 			ParseTable table = Environment.registerParseTable(Descriptor.DESCRIPTOR_LANGUAGE, stream);
 			descriptorParser = new JSGLRI(table, "Module");
 		} catch (Throwable e) {
-			e.printStackTrace();
-  			Environment.logException("Could not initialize the Descriptor class.", e);
-			throw new RuntimeException(e);
+			Environment.logException("Could not initialize the Descriptor class.", e);
+			throw new IllegalStateException(e);
 		}
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TermReader.java	2009-08-12 09:50:36 UTC (rev 19816)
@@ -1,10 +1,12 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+
 import java.util.ArrayList;
 
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import static org.spoofax.interpreter.terms.IStrategoTerm.*;
 
 /**
  * Term reading utility class.
@@ -69,16 +71,16 @@
 		return result;
 	}
 
-	public static String concatTermStrings(IStrategoTerm list) {
-		IStrategoTerm values = termAt(list, 0);
+	public static String concatTermStrings(IStrategoTerm values) {
+		IStrategoList list = termAt(values, 0);
 		StringBuilder results = new StringBuilder();
 		
-		if (values.getSubtermCount() > 0)
-			results.append(termContents(termAt(values, 0)));
+		if (list.getSubtermCount() > 0)
+			results.append(termContents(termAt(list, 0)));
 		
-		for (int i = 1; i <  values.getSubtermCount(); i++) {
+		for (int i = 1; i <  list.getSubtermCount(); i++) {
 			results.append(',');
-			results.append(termContents(termAt(values, i)));
+			results.append(termContents(termAt(list, i)));
 		}
 		return results.toString();
 	}

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BadMetaFileException.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BadMetaFileException.java	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BadMetaFileException.java	2009-08-12 09:50:36 UTC (rev 19816)
@@ -1,9 +0,0 @@
-package org.strategoxt.imp.runtime.services;
-
-public class BadMetaFileException extends Exception {
-	private static final long serialVersionUID = -4173696243409037945L;
-	
-	public BadMetaFileException(String file) {
-		super("Illegal or unrecognized .meta file: " + file);
-	}
-}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java	2009-08-12 09:50:36 UTC (rev 19816)
@@ -1,8 +1,14 @@
 package org.strategoxt.imp.runtime.services;
 
+import java.util.Collection;
+
 import org.eclipse.core.resources.IFile;
-import org.eclipse.core.runtime.IPath;
+import org.eclipse.imp.language.Language;
+import org.eclipse.imp.language.LanguageRegistry;
 import org.eclipse.imp.language.LanguageValidator;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -11,23 +17,93 @@
 public class MetaFileLanguageValidator extends LanguageValidator {
 	
 	private static boolean isLanguageRegistryPatchEnabled;
+	
+	private Descriptor descriptor;
+	
+	public MetaFileLanguageValidator(Descriptor descriptor) {
+	    this.descriptor = descriptor;
+	}
 
 	@Override
 	public boolean validate(IFile file) {
 		isLanguageRegistryPatchEnabled = true;
-		//String name = file.getName();
-		//IPath location = file.getLocation().removeLastSegments(1);
-		return true;
+		String metaFile = file.getFullPath().removeFileExtension().addFileExtension("meta").toOSString();
+		String language = MetaFileReader.readSyntax(metaFile);
+		
+		return language == null || validateByLanguage(file, language);
 	}
+	
+	public boolean validateByLanguage(IFile file, String languageName) {
+		try {
+			Language language = descriptor.getLanguage();
+				
+			if (languageName.equals(language.getName()))
+				return true;
+			
+			if (isExactMatchAvailable(languageName))
+				return false; // better alternative exists
+			
+			if (isExtensionOf(language, languageName))
+				return true;
+			
+			if (!isExtensionOfAvailable(languageName) && validateByExtension(file))
+				return true;
 
+			return true;
+		} catch (BadDescriptorException e) {
+			Environment.logException(e);
+			return false;
+		}
+	}
+	
+	private boolean validateByExtension(IFile file) {
+		try {
+			return descriptor.getLanguage().hasExtension(file.getFileExtension());
+		} catch (BadDescriptorException e) {
+			Environment.logException(e);
+			return false;
+		}
+	}
+	
+	private boolean isExactMatchAvailable(String languageName) throws BadDescriptorException {
+		Language myLanguage = descriptor.getLanguage(); 
+		for (Language language : LanguageRegistry.getLanguages()) {
+			if (language != myLanguage && languageName.equals(language.getName()))
+				return true;
+		}
+		return false;
+	}
+	
+	private boolean isExtensionOfAvailable(String languageName) throws BadDescriptorException {
+		Language myLanguage = descriptor.getLanguage(); 
+		for (Language language : LanguageRegistry.getLanguages()) {
+			if (language != myLanguage && isExtensionOf(language, languageName))
+				return true;
+		}
+		return false;
+	}
+	
+	/**
+	 * Tests if <code>language</code> is an extension of <code>languageName</code>.
+	 */
+	private static boolean isExtensionOf(Language language, String languageName) {
+		Descriptor descriptor = Environment.getDescriptor(language);
+		if (descriptor == null)
+			return false;
+		for (String extended : descriptor.getExtendedLanguages()) {
+			if (languageName.equals(extended))
+				return true;
+		}
+		return false;
+	}
+
 	@Override
 	public boolean validate(String buffer) {
-		// String path = currentPath();
 		if (!isLanguageRegistryPatchEnabled) {
-			System.err.println("LanguageRegistry patch not enabled; cannot use .meta files");
+			System.err.println("Warning: LanguageRegistry patch not enabled; cannot use .meta files");
 			isLanguageRegistryPatchEnabled = true;
 		}
 			
-		return false;
+		return true;
 	}
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileReader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileReader.java	2009-08-12 08:49:41 UTC (rev 19815)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileReader.java	2009-08-12 09:50:36 UTC (rev 19816)
@@ -1,35 +1,60 @@
 package org.strategoxt.imp.runtime.services;
 
+import static org.spoofax.interpreter.core.Tools.*;
+
 import java.io.File;
 import java.io.IOException;
 
-import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.Environment;
 
+/**
+ * A utility class for reading .meta files.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
 public class MetaFileReader {
-	public static String tryReadSyntax(String file) {
+	
+	private MetaFileReader() {
+		// No public constructor
+	}
+	
+	/**
+	 * Reads the syntax name specified in a .meta file.
+	 * 
+	 * If any error occurs while reading, an exception is logged and
+	 * null is returned.
+	 */
+	public static String readSyntax(String file) {
 		if (!new File(file).exists()) return null;
 		
 		try {
-			return readSyntax(file);
+			IStrategoTerm meta = readFile(file);
+			IStrategoString language = termAt(getEntry(meta, "Syntax"), 0);
+			return language.stringValue();
 		} catch (IOException e) {
+			Environment.logException("Error reading " + file, e);
 			return null;
-		} catch (BadMetaFileException e) {
+		} catch (RuntimeException e) {
+			Environment.logException("Error reading " + file, e);
 			return null;
 		}
 	}
-	
-	public static String readSyntax(String file) throws IOException, BadMetaFileException {
-		// IStrategoTerm term =
-			Environment.getTermFactory().parseFromFile(file);
-		
-		try {
-			// TODO: .meta file reading
-			// ATermAppl appl =
-			throw new NotImplementedException();
-			
-		} catch (ClassCastException e) {
-			throw new BadMetaFileException(file);
+
+	private static IStrategoAppl getEntry(IStrategoTerm meta, String entryName) {
+		IStrategoList entries = termAt(meta, 0);
+		for (IStrategoTerm entry : entries.getAllSubterms()) {
+			String cons = ((IStrategoAppl) entry).getConstructor().getName();
+			if (cons.equals(entryName))
+				return (IStrategoAppl) entry;
 		}
+		return null;
 	}
+	
+	private static IStrategoTerm readFile(String file) throws IOException {
+		return Environment.getTermFactory().parseFromFile(file);
+	}
 }



From zef at zefhemel.com  Wed Aug 12 13:30:21 2009
From: zef at zefhemel.com (Zef Hemel)
Date: Wed, 12 Aug 2009 11:30:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19817 - zef - in
	pil/trunk: src/lib/db src/lib/db/java-support/src/pil/db
	src/pil/backend/java src/pil/compile src/pil/syntax test
Message-ID: <200908121130.n7CBUE0V021693@proliant.st.ewi.tudelft.nl>

Author: zef
Date: 2009-08-12 11:30:21 +0000 (Wed, 12 Aug 2009)
New Revision: 19817

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19817&view=rev

Modified:
   pil/trunk/src/lib/db/db.pil
   pil/trunk/src/lib/db/java-support/src/pil/db/Connection.java
   pil/trunk/src/lib/db/lowleveldb.pil
   pil/trunk/src/lib/db/model.pil
   pil/trunk/src/pil/backend/java/utils.str
   pil/trunk/src/pil/compile/compile.str
   pil/trunk/src/pil/compile/import.str
   pil/trunk/src/pil/syntax/PIL-pretty.pp
   pil/trunk/src/pil/syntax/PILMix.sdf
   pil/trunk/test/Makefile.in

Log:
Re-enabled format checks


Changes:

Modified: pil/trunk/src/lib/db/db.pil
===================================================================
--- pil/trunk/src/lib/db/db.pil	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/src/lib/db/db.pil	2009-08-12 11:30:21 UTC (rev 19817)
@@ -239,5 +239,9 @@
       persist(e);
     }
   }
+
+  void close() {
+    conn.close();
+  }
 }
 

Modified: pil/trunk/src/lib/db/java-support/src/pil/db/Connection.java
===================================================================
--- pil/trunk/src/lib/db/java-support/src/pil/db/Connection.java	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/src/lib/db/java-support/src/pil/db/Connection.java	2009-08-12 11:30:21 UTC (rev 19817)
@@ -38,4 +38,11 @@
 			throw new RuntimeException(e);
 		}
 	}
+
+  public void close() {
+    try {
+      conn.close();
+    } catch(Exception e) {
+    }
+  }
 }

Modified: pil/trunk/src/lib/db/lowleveldb.pil
===================================================================
--- pil/trunk/src/lib/db/lowleveldb.pil	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/src/lib/db/lowleveldb.pil	2009-08-12 11:30:21 UTC (rev 19817)
@@ -7,6 +7,7 @@
 external class pil::db::Connection {
   List<Result> query(String query, Array<Object> args);
   void updateQuery(String query, Array<Object> args);
+  void close();
 }
 
 external class pil::db::Result {

Modified: pil/trunk/src/lib/db/model.pil
===================================================================
--- pil/trunk/src/lib/db/model.pil	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/src/lib/db/model.pil	2009-08-12 11:30:21 UTC (rev 19817)
@@ -196,7 +196,7 @@
       var sql = new MutableString();
       var tableName = fromMapping.tableName + "_" + relationName + "_" + toMapping.tableName;
       sql.append("CREATE TABLE `" + tableName + "` (\n");
-      sql.append("   `" + fromMapping.tableName + "` " + dialect.getType(stringType, 36) + " DEFAULT NULL,\n");
+      sql.append("   `" + fromMapping.tableName + "_managing` " + dialect.getType(stringType, 36) + " DEFAULT NULL,\n");
       sql.append("   `" + toMapping.tableName + "` " + dialect.getType(stringType, 36) + " DEFAULT NULL\n");
       sql.append(");\n");
       return sql.as<String>;

Modified: pil/trunk/src/pil/backend/java/utils.str
===================================================================
--- pil/trunk/src/pil/backend/java/utils.str	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/src/pil/backend/java/utils.str	2009-08-12 11:30:21 UTC (rev 19817)
@@ -54,7 +54,7 @@
    pil-pp-format-checker-error(|msg, rtg) =
       err-msg(|msg)
     ; write-to => FILE(file)
-    //; try(<xtc-command(!"format-check")> ["--vis", "-i", file, "--rtg", <xtc-find> rtg | <pass-verbose>])
+    ; try(<xtc-command(!"format-check")> ["--vis", "-i", file, "--rtg", <xtc-find> rtg | <pass-verbose>])
     ; log(|Critical(), "Fatal errors encountered in generated code")
     ; <xtc-exit> 1
 
@@ -73,7 +73,6 @@
         ; name     := <pil-class-name> cu
         ; path     := <conc; create-dirs> ([prefix], pkg)
         ; filename := <concat-strings> [path, "/", name, ".java"]
-        //; java     := <java-concat-ids; core-lift-eblocks> cu
         ; java := cu
         ; text     := <pp-java5-to-string> java
 

Modified: pil/trunk/src/pil/compile/compile.str
===================================================================
--- pil/trunk/src/pil/compile/compile.str	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/src/pil/compile/compile.str	2009-08-12 11:30:21 UTC (rev 19817)
@@ -35,7 +35,7 @@
     //; topdown-l(try(\ [RemoveMe()|lst] -> lst \))
     //; pil-info(|"Format checking")
 
-    //; pil-format-check
+    ; pil-format-check
 
     // The DR list below should include ALL dynamic rules used in the frontend
     ; {| PilFindFunctionDeclaration, PilFindClassDeclaration, PilTypeOf, PilRename, PilImported, PilEmittedDeclarations, PilNamedMemo

Modified: pil/trunk/src/pil/compile/import.str
===================================================================
--- pil/trunk/src/pil/compile/import.str	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/src/pil/compile/import.str	2009-08-12 11:30:21 UTC (rev 19817)
@@ -50,7 +50,7 @@
     where not(<PilImported> s)
     with filename := <try(un-double-quote)> s
        ; filename-header := <concat-strings> [filename, ".h"]
-       ; if not(<file-exists> filename-header) <+ <gt> (<modification-time> filename, <modification-time> filename-header) then
+       ; if <file-exists> filename; not(<file-exists> filename-header) <+ <gt> (<modification-time> filename, <modification-time> filename-header) then
            <pil-compile-file(generate-backend-code)> filename
          end
        ; Application(decl*) := <parse-pil> filename-header

Modified: pil/trunk/src/pil/syntax/PIL-pretty.pp
===================================================================
--- pil/trunk/src/pil/syntax/PIL-pretty.pp	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/src/pil/syntax/PIL-pretty.pp	2009-08-12 11:30:21 UTC (rev 19817)
@@ -23,6 +23,7 @@
    ClassName                                   -- _1 _2,
    ClassName.2:opt                             -- _1,
    ConcatId                                    -- _1 KW["#"] _2,
+   TypeOf                                      -- KW["typeof"] _1,
    TypeParams                                  -- KW["<"] _1 KW[">"],
    TypeParams.1:iter-star-sep                  -- _1 KW[","],
    ConstructorDecl                             -- KW["new"] KW["("] _1 KW[")"] _2 _3,

Modified: pil/trunk/src/pil/syntax/PILMix.sdf
===================================================================
--- pil/trunk/src/pil/syntax/PILMix.sdf	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/src/pil/syntax/PILMix.sdf	2009-08-12 11:30:21 UTC (rev 19817)
@@ -55,10 +55,12 @@
 
   context-free syntax %% Anti-quotations
 
-    "~"  E                                -> Statement[[PIL]]           {cons("FromMetaExpr")}
-    "~*" E                                -> Statement[[PIL]]*          {cons("FromMetaExpr")}
-    "~"  E                                -> Exp[[PIL]]                 {cons("FromMetaExpr")}
-    "~"  E                                -> StringChars[[PIL]]         {cons("FromMetaExpr"), prefer}
+    "~"  E                                -> Statement[[PIL]]             {cons("FromMetaExpr")}
+    "~*" E                                -> Statement[[PIL]]*            {cons("FromMetaExpr")}
+    "~"  E                                -> ClassBodyDeclaration[[PIL]]  {cons("FromMetaExpr")}
+    "~*" E                                -> ClassBodyDeclaration[[PIL]]* {cons("FromMetaExpr")}
+    "~"  E                                -> Exp[[PIL]]                   {cons("FromMetaExpr")}
+    "~"  E                                -> StringChars[[PIL]]           {cons("FromMetaExpr"), prefer}
 
   syntax
 

Modified: pil/trunk/test/Makefile.in
===================================================================
--- pil/trunk/test/Makefile.in	2009-08-12 09:50:36 UTC (rev 19816)
+++ pil/trunk/test/Makefile.in	2009-08-12 11:30:21 UTC (rev 19817)
@@ -249,7 +249,6 @@
 srcdir = @srcdir@
 sysconfdir = @sysconfdir@
 target_alias = @target_alias@
-top_build_prefix = @top_build_prefix@
 top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
 TESTSSUCCEED = $(wildcard *.pil)



From L.C.L.Kats at tudelft.nl  Wed Aug 12 15:05:46 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 12 Aug 2009 13:05:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19818 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200908121305.n7CD5cKv023199@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-12 13:05:46 +0000 (Wed, 12 Aug 2009)
New Revision: 19818

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19818&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.meta
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.project
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java

Log:
- Updated the generated build.xml
- Added generated Eclipse launcher for build.xml


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.project
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.project	2009-08-12 11:30:21 UTC (rev 19817)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/.project	2009-08-12 13:05:46 UTC (rev 19818)
@@ -4,6 +4,16 @@
       <name>org.strategoxt.imp.editors.editorservice</name>
       <comment></comment>
       <buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/Ant Builder.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
         <buildCommand>
           <name>org.eclipse.jdt.core.javabuilder</name>
           <arguments>
@@ -23,6 +33,5 @@
       <natures>
         <nature>org.eclipse.pde.PluginNature</nature>
         <nature>org.eclipse.jdt.core.javanature</nature>
-        <nature>org.eclipse.imp.lpg.runtime.LPGNature</nature>
       </natures>
     </projectDescription>
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-12 11:30:21 UTC (rev 19817)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-12 13:05:46 UTC (rev 19818)
@@ -54,6 +54,7 @@
     );
     guarantee-extension(|"def"); // remove .main.esv
     with(<chdir> "..");
+    <conc-strings> ("syntax/", <id>);
     if not(file-exists) then
       fatal-err(|"Accompanying .def file not found.")
     end
@@ -65,8 +66,6 @@
       !FILE(<InputFile>);
       if FILE(has-extension(|"esv") => esv) then
         <find-def-file> esv
-      <+
-        fatal-err(|"Could not find associated .def file")
       end;
       ?input
     else
@@ -102,6 +101,7 @@
     create-manifest;
     create-plugin-xml;
     create-build-xml;
+    create-builder-xml;
     copy-strategoxt-jar;
     
     <copy-or-create-parse-table> input

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-12 11:30:21 UTC (rev 19817)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-12 13:05:46 UTC (rev 19818)
@@ -30,6 +30,7 @@
         <property name="sdfmodule" value="<%= name %>"/>
         <property name="esvmodule" value="<%= name %>"/>
         <property name="strmodule" location="<%= name' %>"/>
+	    <available file="${trans}/${strmodule}.str" property="strmodule.present"/>
         
         <!-- Environment configuration -->
         <property name="build.strategoxt" location="${user.home}/.nix-profile/bin"/>
@@ -58,7 +59,7 @@
           <touch file="${editor}/${esvmodule}.esv"/>
         </target>
     
-        <target name="sdf2table" depends="pack-sdf">
+        <target name="sdf2table" depends="make-permissive">
             <apply executable="${build.strategoxt}/sdf2table" dest="${dist}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
@@ -66,12 +67,29 @@
                 <targetfile/>
                 <arg value="-m"/>
                 <arg value="${sdfmodule}"/>
-                <fileset dir="${build}" includes="*.def"/>
-                <mapper type="glob" from="*.def" to="*.tbl"/>
+                
+                <fileset file="${syntax}/${sdfmodule}-Permissive.gendef"/>
+                <mapper type="glob" from="*-Permissive.gendef" to="*.tbl"/>
             </apply>
         </target>
+        
+        <target name="make-permissive" depends="pack-sdf">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive"
+                  classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                
+                <fileset file="${syntax}/${sdfmodule}.def"/>
+                <mapper type="glob" from="*.def" to="*-Permissive.gendef"/>
+            </java>
+        </target>
 
         <target name="pack-sdf" depends="init">
+            <dependset>
+                <srcfilelist dir="${syntax}" files="**/*.sdf"/> <!-- */-->
+            </dependset>
             <apply executable="${build.strategoxt}/pack-sdf" dest="${build}" failonerror="true">
                 <arg value="-i"/>
                 <srcfile/>
@@ -82,40 +100,39 @@
                 <arg value="-I"/>
                 <arg value="${lib}"/>
                 <arg line="${build.strategoxt.sdf.imports}"/>
-                <fileset dir="${syntax}" includes="*.sdf"/>
+                
+                <fileset file="${syntax}/${sdfmodule}.sdf"/>
                 <mapper type="glob" from="*.sdf" to="*.def"/>
             </apply>
         </target>
-        
-        <target name="sdf2rtg" depends="init,pack-sdf">
-            <apply executable="${scriptsLocation}/applyUsingBasename.sh" dest="${build}" failonerror="true">
+    
+        <target name="rtg2sig" depends="init,sdf2rtg">
+            <apply executable="${build.strategoxt}/rtg2sig" dest="${build}" failonerror="true">
+                <arg value="-i"/>
                 <srcfile/>
-                <arg value=".def"/>
-                <arg value="-i"/>
-                <arg value="-m"/>
-                <arg value="${build.strategoxt}/sdf2rtg"/>
                 <arg value="-o"/>
                 <targetfile/>
-                <fileset dir="${build}" includes="*.def"/>
-                <mapper type="glob" from="*.def" to="*.rtg"/>
+                
+                <fileset file="${syntax}/${sdfmodule}.rtg"/>
+                <mapper type="glob" from="*.rtg" to="*.str"/>
             </apply>
         </target>
-    
-        <target name="rtg2sig" depends="init,sdf2rtg">
-            <apply executable="${scriptsLocation}/applyUsingBasename.sh" dest="${build}" failonerror="true">
+        
+        <target name="sdf2rtg" depends="init,pack-sdf">
+            <apply executable="${build.strategoxt}/sdf2rtg" dest="${build}" failonerror="true">
+                <arg value="-i"/>
                 <srcfile/>
-                <arg value=".rtg"/>
-                <arg value="-i"/>
-                <arg value="--module"/>
-                <arg value="${build.strategoxt}/rtg2sig"/>
+                <arg value="-m"/>
+            	<arg value="${sdfmodule}"/>
                 <arg value="-o"/>
                 <targetfile/>
-                <fileset dir="${build}" includes="*.rtg"/>
-                <mapper type="glob" from="*.rtg" to="*.str"/>
+                
+                <fileset file="${syntax}/${sdfmodule}.str"/>
+                <mapper type="glob" from="*.def" to="*.rtg"/>
             </apply>
         </target>
     
-        <target name="strc" depends="init,rtg2sig">
+        <target name="strc" depends="init,rtg2sig" if="strmodule.present">
             <antcall target="strc-call">
                 <param name="build.strategoxt.strc.params" value=""/>
                 <param name="build.strategoxt.strc.extension" value="*"/>
@@ -123,7 +140,7 @@
             </antcall>
         </target>
     
-        <target name="strj" depends="init,rtg2sig">
+        <target name="strj" depends="init,rtg2sig" if="strmodule.present">
             <antcall target="strc-call">
                 <param name="build.strategoxt.strc.params" value=""/>
                 <param name="build.strategoxt.strc.extension" value="*.java"/>
@@ -131,7 +148,7 @@
             </antcall>
         </target>
         
-        <target name="strji" depends="init,rtg2sig">
+        <target name="strji" depends="init,rtg2sig" if="strmodule.present">
             <antcall target="strc-call">
                 <param name="build.strategoxt.strc.params" value="-F --library"/>
                 <param name="build.strategoxt.strc.extension" value="*.ctree"/>
@@ -175,9 +192,7 @@
                 <arg line="${build.strategoxt.strc.params}"/>
                 <arg line="${build.strategoxt.strc.imports}"/>
                 
-                <fileset dir="${trans}">
-                    <include name="${trans}/${strmodule}.str"/>
-                </fileset>
+                <fileset file="${trans}/${strmodule}.str"/>
                 <mapper type="glob" from="*.str" to="${build.strategoxt.strc.extension}"/>
             </apply>
             

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.meta
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.meta	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.meta	2009-08-12 13:05:46 UTC (rev 19818)
@@ -0,0 +1 @@
+Meta([Syntax("Stratego-xml")])
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-12 13:05:46 UTC (rev 19818)
@@ -0,0 +1,42 @@
+module sdf2imp/project/create-project-file
+    
+imports
+  sdf2imp/util/-
+
+strategies
+
+  create-builder-xml =
+    package := <BasePackage <+ default-package-name>;
+    
+    // (the XML pretty printer has problems with this file, so it's printed as text instead)
+    <output-text-file(|[".externalToolBuilders"], "Ant Builder.launch")>
+"<?xml version=\"1.0\" encoding=\"UTF-8\"?>
+<launchConfiguration type=\"org.eclipse.ant.AntBuilderLaunchConfigurationType\">
+<booleanAttribute key=\"org.eclipse.ant.ui.ATTR_TARGETS_UPDATED\" value=\"true\"/>
+<booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"true\"/>
+<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">
+<listEntry value=\"/SillyEditor/build.xml\"/>
+</listAttribute>
+<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">
+<listEntry value=\"1\"/>
+</listAttribute>
+<booleanAttribute key=\"org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND\" value=\"false\"/>
+<listAttribute key=\"org.eclipse.jdt.launching.CLASSPATH\">
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/SillyEditor/aux/make_permissive.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/SillyEditor/aux/strategoxt.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>
+</listAttribute>
+<stringAttribute key=\"org.eclipse.jdt.launching.CLASSPATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>
+<booleanAttribute key=\"org.eclipse.jdt.launching.DEFAULT_CLASSPATH\" value=\"false\"/>
+<stringAttribute key=\"org.eclipse.jdt.launching.JRE_CONTAINER\" value=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-gcj-4.3-1.5.0.0\"/>
+<stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"org.eclipse.ant.internal.ui.antsupport.InternalAntRunner\"/>
+<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"SillyEditor\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${workspace_loc:/SillyEditor/build.xml}\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS\" value=\"\"/>
+<booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED\" value=\"true\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${workspace_loc:/SillyEditor}\"/>
+<stringAttribute key=\"process_factory_id\" value=\"org.eclipse.ant.ui.remoteAntProcessFactory\"/>
+</launchConfiguration>
+"

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str	2009-08-12 11:30:21 UTC (rev 19817)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-project-file.str	2009-08-12 13:05:46 UTC (rev 19818)
@@ -8,8 +8,6 @@
   create-project-file =
     package := <BasePackage <+ default-package-name>;
     
-    // TODO2: Cleanup default .project file?
-    
     <output-xml-file(|[], ".project")>
     %>
     <?xml version="1.0" encoding="UTF-8"?>
@@ -17,6 +15,16 @@
       <name><%= package::cdata %></name>
       <comment></comment>
       <buildSpec>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/Ant Builder.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
         <buildCommand>
           <name>org.eclipse.jdt.core.javabuilder</name>
           <arguments>
@@ -36,7 +44,6 @@
       <natures>
         <nature>org.eclipse.pde.PluginNature</nature>
         <nature>org.eclipse.jdt.core.javanature</nature>
-        <nature>org.eclipse.imp.lpg.runtime.LPGNature</nature>
       </natures>
     </projectDescription>
     <%

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-08-12 11:30:21 UTC (rev 19817)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-08-12 13:05:46 UTC (rev 19818)
@@ -165,6 +165,13 @@
 			throw new BadDescriptorException(e);
 		}
 	}
+
+	/**
+	 * Open an attached file associated with this descriptor.
+	 */ 
+	public InputStream openAttachment(String path) throws FileNotFoundException {
+		return openAttachment(path, false);
+	}
     
     /**
      * Open an attached file associated with this descriptor.
@@ -210,16 +217,17 @@
      * Gets the language for this descriptor, but does not register it.
      */
     public Language getLanguage() throws BadDescriptorException {
-        if (language == null)
+        if (language == null) {
             language = new Language(
                 getProperty("LanguageName"),
-                getProperty("LanguageId", getProperty("LanguageName")), // natureId
+                getProperty("LanguageId", getProperty("LanguageName")),
                 getProperty("Description", ""),
-                ROOT_LANGUAGE,          // ("extends" property is not used for the
-                getProperty("URL", ""), //   IMP API)
+                ROOT_LANGUAGE,          // ("Extends" is not used for IMP)
+                getProperty("URL", ""),
                 getProperty("Extensions"),
                 getProperty("Aliases", ""),
                 new MetaFileLanguageValidator(this));
+        }
         return language;
     }
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java	2009-08-12 11:30:21 UTC (rev 19817)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/MetaFileLanguageValidator.java	2009-08-12 13:05:46 UTC (rev 19818)
@@ -1,7 +1,5 @@
 package org.strategoxt.imp.runtime.services;
 
-import java.util.Collection;
-
 import org.eclipse.core.resources.IFile;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
@@ -11,8 +9,10 @@
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 
 /**
+ * Validates files by their (optional) .meta file,
+ * picking the right editor for the job.
+ * 
  * @author Lennart Kats <lennart add lclnet.nl>
- *
  */
 public class MetaFileLanguageValidator extends LanguageValidator {
 	



From L.C.L.Kats at tudelft.nl  Thu Aug 13 13:51:48 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 13 Aug 2009 11:51:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19819 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	strc-java/trunk strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
Message-ID: <200908131151.n7DBpdJZ007828@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-13 11:51:48 +0000 (Thu, 13 Aug 2009)
New Revision: 19819

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19819&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java
   strc-java/trunk/.classpath
   strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java	2009-08-12 13:05:46 UTC (rev 19818)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/InterpreterExit.java	2009-08-13 11:51:48 UTC (rev 19819)
@@ -10,10 +10,11 @@
 public class InterpreterExit extends InterpreterException {
     
     private static final long serialVersionUID = 7198021396619788526L;
-    private final int value;
     
     public static final int SUCCESS = 0;
     
+    private final int value;
+    
     public InterpreterExit(int value) {
         super("Legal exit");
         this.value = value;

Modified: strc-java/trunk/.classpath
===================================================================
--- strc-java/trunk/.classpath	2009-08-12 13:05:46 UTC (rev 19818)
+++ strc-java/trunk/.classpath	2009-08-13 11:51:48 UTC (rev 19819)
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" output="java/runtime" path="java/runtime"/>
-	<classpathentry kind="src" output="strc-java/java/compiler" path="java/compiler"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry exported="true" kind="lib" path="java/strategoxt.jar" sourcepath="java/lib"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2009-08-12 13:05:46 UTC (rev 19818)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2009-08-13 11:51:48 UTC (rev 19819)
@@ -12,14 +12,18 @@
     public static final int SUCCESS = 0;
     
     public StrategoExit(int value) {
-        super("Legal exit");
+        super("Legal exit: return code " + valueToString(value));
         this.value = value;
     }
     
     public StrategoExit(int value, Throwable cause) {
-    	super("Legal exit", cause);
+    	super("Legal exit: return code " + valueToString(value), cause);
     	this.value = value;
     }
+
+    private static Object valueToString(int value) {
+        return (value == SUCCESS ? "0 (success)" : value);
+    }
     
     public int getValue() {
         return value;

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-08-12 13:05:46 UTC (rev 19818)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_call.java	2009-08-13 11:51:48 UTC (rev 19819)
@@ -19,8 +19,6 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class SSL_EXT_call extends AbstractPrimitive {
-    
-	// TODO: Treat sdf2table differently; give warning for other native calls
 
 	private final NativeCallHelper caller = new NativeCallHelper();
 	



From L.C.L.Kats at tudelft.nl  Thu Aug 13 17:03:47 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 13 Aug 2009 15:03:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19820 - LennartKats -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
	spoofax-imp/trunk/org.strategoxt.imp.generator/lib
Message-ID: <200908131503.n7DF3ctr010276@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-13 15:03:47 +0000 (Thu, 13 Aug 2009)
New Revision: 19820

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19820&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar

Log:
Proper import-term attachments for make_permissive.jar.

Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-13 11:51:48 UTC (rev 19819)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-13 15:03:47 UTC (rev 19820)
@@ -16,10 +16,11 @@
 make-permissive : make-permissive.str $(STRS)
 	strc -i $< -m main-make-permissive $(STRCFLAGS)
 
-java make_permissive.java : make-permissive.str $(STRS)
-	strj -i $< -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
+java bin/make_permissive.java : make-permissive.str $(STRS)
+	[ -e bin ] || mkdir bin
+	strj -i $< -o $@ -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
 
-jar make_permissive.jar : make_permissive.java
+jar bin/make_permissive.jar : bin/make_permissive.java
 	strj-jar -i $<
 	     
 make-permissive.str : $(ASTRS) syntax/Stratego-Attributes-Sdf2.tbl syntax/Comments.pp.af

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Thu Aug 13 17:05:31 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 13 Aug 2009 15:05:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19821 - LennartKats -
	spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	strc-java/trunk/java
Message-ID: <200908131505.n7DF5Mx3010289@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-13 15:05:31 +0000 (Thu, 13 Aug 2009)
New Revision: 19821

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19821&view=rev

Modified:
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
- Support non-assoc in JSGLR (which is actually implemented in the parser generator)
- Print a message for SSL_perror

Changes:

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java	2009-08-13 15:03:47 UTC (rev 19820)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java	2009-08-13 15:05:31 UTC (rev 19821)
@@ -220,6 +220,8 @@
                             type = ProductionType.LEFT_ASSOCIATIVE;
                         } else if (a.getName().equals("right")) {
                             type = ProductionType.RIGHT_ASSOCIATIVE;
+                        } else if (a.getName().equals("non-assoc")) {
+                            // non-assoc is handled by the parse table generator
                         } else {
                             throw new InvalidParseTableException("Unknown assocativity: " + a.getName());
                         }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java	2009-08-13 15:03:47 UTC (rev 19820)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java	2009-08-13 15:05:31 UTC (rev 19821)
@@ -22,7 +22,12 @@
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
-        env.setCurrent(env.getFactory().makeString("error: perror() not supported on this platform!"));
+        
+        String message = tvars[0].getTermType() == IStrategoTerm.STRING
+            ? tvars[0] + " - "
+            : "";
+        
+        System.err.println("ERROR: " + message + "<perror() not supported on this platform>");
         return true;
     }
 

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Thu Aug 13 17:18:28 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 13 Aug 2009 15:18:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19822 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	strc-java/trunk/java
Message-ID: <200908131518.n7DFIJ6b010413@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-13 15:18:28 +0000 (Thu, 13 Aug 2009)
New Revision: 19822

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19822&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Support stdin/stdout/stderr in SSL_copy.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	2009-08-13 15:05:31 UTC (rev 19821)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	2009-08-13 15:18:28 UTC (rev 19822)
@@ -15,7 +15,9 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_copy extends AbstractPrimitive {
@@ -28,29 +30,48 @@
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
 
-        if(!Tools.isTermString(tvars[0]))
-            return false;
+        SSLLibrary op = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+        IOAgent agent = op.getIOAgent();
         
-        if(!Tools.isTermString(tvars[1]))
-            return false;
+        InputStream fis = null;
+        OutputStream fos = null;
         
-        SSLLibrary op = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+        boolean closeIn = true;
+        boolean closeOut = true;
 
-        byte[] bs = new byte[1024];
-        int read;
-
         try {
-            InputStream fis = op.getIOAgent().openInputStream(Tools.javaString(tvars[0]));
-            OutputStream fos =  op.getIOAgent().openFileOutputStream(Tools.javaString(tvars[1]));
+            if (Tools.isTermString(tvars[0])) {
+                fis = agent.openInputStream(Tools.javaString(tvars[0]));
+            } else if (Tools.isTermAppl(tvars[0]) && Tools.hasConstructor((IStrategoAppl) tvars[0], "stdin")) {
+                fis = agent.getInputStream(IOAgent.CONST_STDIN);
+                closeIn = false;
+            } else {
+                return false;
+            }
+            
+            if (Tools.isTermString(tvars[1])) {
+                fos =  agent.openFileOutputStream(Tools.javaString(tvars[1]));
+            } else if (Tools.isTermAppl(tvars[1]) && Tools.hasConstructor((IStrategoAppl) tvars[1], "stdout")) {
+                fos =  agent.getOutputStream(IOAgent.CONST_STDOUT);
+                closeOut = false;
+            } else if (Tools.isTermAppl(tvars[1]) && Tools.hasConstructor((IStrategoAppl) tvars[1], "stderr")) {
+                fos =  agent.getOutputStream(IOAgent.CONST_STDERR);
+                closeOut = false;
+            } else {
+                return false;
+            }
+    
+            byte[] bs = new byte[1024];
+            int read;
         
             read = fis.read(bs, 0, 1024);
             while(read != -1) {
                 fos.write(bs,0, read);
                 read = fis.read(bs, 0, 1024);
             }
-            
-            fis.close();
-            fos.close();
+
+            if (closeOut) fos.close();
+            if (closeIn) fis.close();
         } catch(IOException e) {
             throw new InterpreterException(e);
         }

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Thu Aug 13 17:36:06 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 13 Aug 2009 15:36:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19823 - LennartKats -
	strc-java/trunk/tools
Message-ID: <200908131535.n7DFZvj1010537@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-13 15:36:06 +0000 (Thu, 13 Aug 2009)
New Revision: 19823

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19823&view=rev

Modified:
   strc-java/trunk/tools/strj-jar

Log:


Changes:

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2009-08-13 15:18:28 UTC (rev 19822)
+++ strc-java/trunk/tools/strj-jar	2009-08-13 15:36:06 UTC (rev 19823)
@@ -65,10 +65,15 @@
 ## JARRING
 
 INPUTDIR=`dirname $INPUT`
-ATTACHMENTS=`ls $INPUTDIR | grep -vE "^$(basename $INPUT)\$" | sed "s!^!-C $INPUTDIR !"` \
+
+if ls $INPUTDIR/*.str &>/dev/null; then
+  echo "Warning: using this build directory may mean non-term files are included as attachments" >&2
+fi
+
+ATTACHMENTS=`ls $INPUTDIR | grep -vE '^.*\.(java|jar|astr|str|meta|dep|c|lo|o)$' | sed "s!^!-C $INPUTDIR !"` \
   || (echo "Illegal input file name: $INPUT">&2; exit 1)
 
-echo $JAR cf $OUTPUT -C . .
+echo $JAR cf $OUTPUT -C . . $ATTACHMENTS
 $JAR cf $OUTPUT -C $TEMPDIR . $ATTACHMENTS
 RET=$?
 



From L.C.L.Kats at tudelft.nl  Thu Aug 13 17:44:57 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 13 Aug 2009 15:44:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19824 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator
	org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
Message-ID: <200908131544.n7DFim4u010597@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-13 15:44:57 +0000 (Thu, 13 Aug 2009)
New Revision: 19824

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19824&view=rev

Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/include/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.runtime/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java

Log:
Improved Ant builder for generated editor projects
- Now generates permissive grammars
- Further integration with Eclipse built-in builder
- Misc. fixes


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	2009-08-13 15:36:06 UTC (rev 19823)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	2009-08-13 15:44:57 UTC (rev 19824)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry exported="true" kind="lib" path="lib/sdf2imp.jar" sourcepath="src-gen"/>
-	<classpathentry exported="true" kind="lib" path="lib/make_permissive.jar"/>
+	<classpathentry exported="true" kind="lib" path="lib/make_permissive.jar" sourcepath="/permissive-grammars/trans/make-permissive"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="output" path="bin"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-13 15:36:06 UTC (rev 19823)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-13 15:44:57 UTC (rev 19824)
@@ -42,7 +42,7 @@
       file-exists
     where
       def := <find-def-file> esv;
-      <main-sdf2imp> ["sdf2imp", "-i", def]
+      <sdf2imp> FILE(def)
   
   // FIXME: dirty hack for getting the .def file
   //        (should do this based on the esv contents instead...)
@@ -54,7 +54,7 @@
     );
     guarantee-extension(|"def"); // remove .main.esv
     with(<chdir> "..");
-    <conc-strings> ("syntax/", <id>);
+    (file-exists <+ <conc-strings> ("syntax/", <id>));
     if not(file-exists) then
       fatal-err(|"Accompanying .def file not found.")
     end

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-13 15:36:06 UTC (rev 19823)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-13 15:44:57 UTC (rev 19824)
@@ -16,7 +16,7 @@
     <output-xml-file(|[], "build.xml")>
     %>
     <?xml version="1.0" encoding="UTF-8"?>
-    <project name="<%= name %>" default="all">
+    <project name="<%= name %>" default="standalone">
     
         <!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -36,28 +36,31 @@
         <property name="build.strategoxt" location="${user.home}/.nix-profile/bin"/>
         <property name="build.strategoxt.sdf.imports"  value=""/>
         <property name="build.strategoxt.strc.imports" value=""/>
-    
-        <target name="all">
-            <parallel>
-                <available file="${trans}/${strmodule}.str">
-                  <antcall target="strc"/>
-                </available>
-                <antcall target="sdf2table"/>
-            </parallel>
-            <antcall target="sdf2imp"/>
-        </target>
         
+        <!-- Default target for building within Eclipse -->
+        <target name="from-eclipse" depends="strc,sdf2table,sdf2imp-eclipse"/>
+        
+        <!-- Default target for building outside of Eclipse -->
+        <target name="standalone" depends="strc,sdf2table,sdf2imp-standalone"/>
+        
         <target name="init">
             <mkdir dir="${build}"/>
             <mkdir dir="${dist}"/>
         </target>
         
-        <target name="sdf2imp" depends="sdf2table">
+        <target name="sdf2imp-eclipse" depends="sdf2table">
           <!-- HACK: Trigger the Eclipse builder rather than build it here -->
-          <!-- (Eclipse is needed anyway at this time for distribution)    -->
-          <echo message="  Triggering Eclipse build"/> 
           <touch file="${editor}/${esvmodule}.esv"/>
+          <eclipse.refreshLocal resource="${editor}/${esvmodule}.main.esv"/>
         </target>
+        
+        <target name="sdf2imp-standalone" depends="sdf2table">
+          <if> <not><isset property="eclipse.running"/></not>
+          <then>
+            <echo level="error" message="Only building from within Eclipse is implemented at this time"/>
+          </then>
+          </if>
+        </target>
     
         <target name="sdf2table" depends="make-permissive">
             <apply executable="${build.strategoxt}/sdf2table" dest="${dist}" failonerror="true">
@@ -68,27 +71,28 @@
                 <arg value="-m"/>
                 <arg value="${sdfmodule}"/>
                 
-                <fileset file="${syntax}/${sdfmodule}-Permissive.gendef"/>
+                <fileset file="${build}/${sdfmodule}-Permissive.gendef"/>
                 <mapper type="glob" from="*-Permissive.gendef" to="*.tbl"/>
             </apply>
         </target>
         
         <target name="make-permissive" depends="pack-sdf">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive"
-                  classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true">
+            <dependset>
+                <srcfileset    file="${build}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}-Permissive.gendef"/>
+            </dependset>
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true">
                 <arg value="-i"/>
-                <srcfile/>
+                <arg value="${build}/${sdfmodule}.def"/>
                 <arg value="-o"/>
-                <targetfile/>
-                
-                <fileset file="${syntax}/${sdfmodule}.def"/>
-                <mapper type="glob" from="*.def" to="*-Permissive.gendef"/>
+            	<arg value="${syntax}/${sdfmodule}-Permissive.gendef"/>
             </java>
         </target>
 
         <target name="pack-sdf" depends="init">
             <dependset>
                 <srcfilelist dir="${syntax}" files="**/*.sdf"/> <!-- */-->
+                <targetfileset file="${syntax}/${sdfmodule}.def"/>
             </dependset>
             <apply executable="${build.strategoxt}/pack-sdf" dest="${build}" failonerror="true">
                 <arg value="-i"/>
@@ -207,7 +211,7 @@
             </delete>
         </target>
         
-        <target name="clean" description="clean up" >
+        <target name="clean" description="clean up">
             <delete dir="${build}"/>
         </target>
     </project>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-13 15:36:06 UTC (rev 19823)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-13 15:44:57 UTC (rev 19824)
@@ -6,16 +6,20 @@
 strategies
 
   create-builder-xml =
-    package := <BasePackage <+ default-package-name>;
+    name    := <get-main-class-name>;
     
     // (the XML pretty printer has problems with this file, so it's printed as text instead)
     <output-text-file(|[".externalToolBuilders"], "Ant Builder.launch")>
-"<?xml version=\"1.0\" encoding=\"UTF-8\"?>
+    <conc-strings>
+(
+"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
 <launchConfiguration type=\"org.eclipse.ant.AntBuilderLaunchConfigurationType\">
+<stringAttribute key=\"org.eclipse.ant.ui.ATTR_ANT_AFTER_CLEAN_TARGETS\" value=\"from-eclipse,\"/>
+<stringAttribute key=\"org.eclipse.ant.ui.ATTR_ANT_MANUAL_TARGETS\" value=\"from-eclipse,\"/>
 <booleanAttribute key=\"org.eclipse.ant.ui.ATTR_TARGETS_UPDATED\" value=\"true\"/>
-<booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"true\"/>
+<booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"false\"/>
 <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">
-<listEntry value=\"/SillyEditor/build.xml\"/>
+<listEntry value=\"/", name, "/build.xml\"/>
 </listAttribute>
 <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">
 <listEntry value=\"1\"/>
@@ -25,18 +29,16 @@
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;\"/>
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/SillyEditor/aux/make_permissive.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/SillyEditor/aux/strategoxt.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/", name, "/aux/make_permissive.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/", name, "/aux/strategoxt.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>
 </listAttribute>
 <stringAttribute key=\"org.eclipse.jdt.launching.CLASSPATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>
 <booleanAttribute key=\"org.eclipse.jdt.launching.DEFAULT_CLASSPATH\" value=\"false\"/>
-<stringAttribute key=\"org.eclipse.jdt.launching.JRE_CONTAINER\" value=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-gcj-4.3-1.5.0.0\"/>
-<stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"org.eclipse.ant.internal.ui.antsupport.InternalAntRunner\"/>
-<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"SillyEditor\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${workspace_loc:/SillyEditor/build.xml}\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS\" value=\"\"/>
+<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"", name, "\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${workspace_loc:/", name, "/build.xml}\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS\" value=\"full,incremental,\"/>
 <booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED\" value=\"true\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${workspace_loc:/SillyEditor}\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${workspace_loc:/", name, "}\"/>
 <stringAttribute key=\"process_factory_id\" value=\"org.eclipse.ant.ui.remoteAntProcessFactory\"/>
-</launchConfiguration>
-"
+</launchConfiguration>"
+)
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-13 15:36:06 UTC (rev 19823)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-13 15:44:57 UTC (rev 19824)
@@ -152,7 +152,8 @@
 			Debug.startTimer();
 			return sdf2imp.sdf2imp_jvm_0_0.instance.invoke(context, input);
 		} catch (StrategoExit e) {
-			Environment.logException("Unexpected exit in dynamic builder", e);
+			Environment.logException("Unexpected exit in dynamic builder\nAt\n" + context.getTrace(), e);
+			context.printStackTrace();
 			return null;
 		} finally {
 			Debug.stopTimer("Invoked descriptor builder for " + mainFile.getName());

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-13 15:36:06 UTC (rev 19823)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-13 15:44:57 UTC (rev 19824)
@@ -2,7 +2,6 @@
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
-import java.security.CodeSource;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IProject;
@@ -24,12 +23,12 @@
 import org.strategoxt.libstratego_lib;
 import org.strategoxt.imp.editors.editorservice.EditorServiceParseController;
 import org.strategoxt.imp.generator.sdf2imp;
-import org.strategoxt.permissivegrammars.make_permissive;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.lang.StrategoExit;
+import org.strategoxt.permissivegrammars.make_permissive;
 
 /**
  * A wizard for creating new Spoofax/IMP projects.

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/.classpath	2009-08-13 15:36:06 UTC (rev 19823)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/.classpath	2009-08-13 15:44:57 UTC (rev 19824)
@@ -3,7 +3,6 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="include"/>
 	<classpathentry kind="src" path="lib"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/build.properties	2009-08-13 15:36:06 UTC (rev 19823)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/build.properties	2009-08-13 15:44:57 UTC (rev 19824)
@@ -2,5 +2,4 @@
 output.. = bin/
 bin.includes = META-INF/,\
                plugin.xml,\
-               .,\
-               syntax/EditorService.tbl
+               .

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-13 15:36:06 UTC (rev 19823)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-13 15:44:57 UTC (rev 19824)
@@ -13,7 +13,6 @@
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
-import org.spoofax.interpreter.library.LoggingIOAgent;
 import org.spoofax.interpreter.stratego.SDefT;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.InvalidParseTableException;
@@ -192,8 +191,6 @@
 	
 	// ERROR HANDLING
 	
-	// TODO: Move out error handling to a separate class
-	
 	public static void logException(String message, Throwable t) {
 		System.err.println(message);
 		t.printStackTrace();
@@ -208,15 +205,4 @@
 	public static void logException(Throwable t) {
 		RuntimePlugin.getInstance().logException(null, t);
 	}
-	
-	public static void logStrategyFailure(String message, Interpreter interpreter) {
-		if (interpreter.getIOAgent() instanceof LoggingIOAgent) {
-			System.err.println(message);
-			String log = ((LoggingIOAgent) interpreter.getIOAgent()).getLog().trim();
-			logException(message,
-					new InterpreterException(message + " \nLog follows. \n\n" + log));
-		} else {
-			logException(message);
-		}
-	}
 }



From L.C.L.Kats at tudelft.nl  Fri Aug 14 10:26:23 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 14 Aug 2009 08:26:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19825 - LennartKats -
	java-front/trunk/syntax-embedding/languages/java/eblock
Message-ID: <200908140826.n7E8QDrT023020@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-14 08:26:23 +0000 (Fri, 14 Aug 2009)
New Revision: 19825

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19825&view=rev

Modified:
   java-front/trunk/syntax-embedding/languages/java/eblock/ConcatIds.sdf

Log:
Removed ConcatIds sort renaming; not needed in this context.

Changes:

Modified: java-front/trunk/syntax-embedding/languages/java/eblock/ConcatIds.sdf
===================================================================
--- java-front/trunk/syntax-embedding/languages/java/eblock/ConcatIds.sdf	2009-08-13 15:44:57 UTC (rev 19824)
+++ java-front/trunk/syntax-embedding/languages/java/eblock/ConcatIds.sdf	2009-08-14 08:26:23 UTC (rev 19825)
@@ -4,4 +4,4 @@
    
 exports
   context-free syntax
-  	{ ID[[Java]] "#" }+ -> ID[[Java]] {cons("ConcatIds")}
+  	{ ID "#" }+ -> ID {cons("ConcatIds")}



From L.C.L.Kats at tudelft.nl  Fri Aug 14 13:17:02 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 14 Aug 2009 11:17:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19826 - LennartKats -
	sglr-recovery/trunk
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr
	spoofax-imp/trunk/org.strategoxt.imp.generator/lib
	strc-java/trunk/java
	strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr
	strc-java/trunk/trans
Message-ID: <200908141116.n7EBGqbt025821@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-14 11:17:02 +0000 (Fri, 14 Aug 2009)
New Revision: 19826

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19826&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_open_parsetable_compat.java
Removed:
   strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTermReference.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTermReference.java
Modified:
   sglr-recovery/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/WrapperException.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/trans/s2j.str

Log:
- New LazyTerm and ImportTerm classes that replace the old
  LazyTermReference and ImportTermReference classes

- Parse tables stored in LazyTerms are now directly imported
  as ATerms, not first loaded as IStrategoTerms and then converted

- Proper file not found message for strsglr-perror


Changes:

Modified: sglr-recovery/trunk/Makefile
===================================================================
--- sglr-recovery/trunk/Makefile	2009-08-14 08:26:23 UTC (rev 19825)
+++ sglr-recovery/trunk/Makefile	2009-08-14 11:17:02 UTC (rev 19826)
@@ -4,6 +4,9 @@
 	$(MAKE) -C bridge-definitions
 	$(MAKE) -C recovery-runtime
 
+jar :
+	$(MAKE) -C permissive-grammars jar
+
 clean :
 	$(MAKE) -C permissive-grammars clean
 	$(MAKE) -C bridge-definitions clean

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/WrapperException.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/WrapperException.java	2009-08-14 08:26:23 UTC (rev 19825)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/WrapperException.java	2009-08-14 11:17:02 UTC (rev 19826)
@@ -7,7 +7,7 @@
  */
 package org.spoofax.interpreter.adapter.aterm;
 
-public class WrapperException extends RuntimeException {
+public class WrapperException extends UnsupportedOperationException {
 
     private String message;
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java	2009-08-14 08:26:23 UTC (rev 19825)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/JSGLR_open_parsetable.java	2009-08-14 11:17:02 UTC (rev 19826)
@@ -22,7 +22,7 @@
     
     private final TermConverter wrappedFactoryConverter;
 
-	protected JSGLR_open_parsetable(WrappedATermFactory factory) {
+	public JSGLR_open_parsetable(WrappedATermFactory factory) {
 		super("JSGLR_open_parsetable", 0, 1);
 		
 		wrappedFactoryConverter = new TermConverter(factory);

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	2009-08-14 11:17:02 UTC (rev 19826)
@@ -0,0 +1,78 @@
+package org.strategoxt.lang;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+import aterm.ATerm;
+import aterm.ATermFactory;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ImportTerm extends LazyTerm {
+	
+	private final ITermFactory factory;
+	
+	private final Class<?> container;
+	
+	private final String path, name;
+	
+	private ATermFactory atermFactory;
+	
+	private ATerm aterm;
+	
+	public ImportTerm(ITermFactory factory, Class<?> container, String path, String name) {
+		assert path.endsWith("/");
+		this.factory = factory;
+		this.container = container;
+		this.path = path;
+		this.name = name;
+	}
+	
+	public ATerm getATerm(ATermFactory factory) {
+		if (aterm == null) {
+			return aterm = initATerm(factory);
+		} else if (factory != atermFactory) {
+			return factory.importTerm(aterm);
+		} else {
+			return aterm;
+		}
+	}
+	
+	@Override
+	protected IStrategoTerm init() {
+		java.io.InputStream stream = container.getResourceAsStream("/" + name);
+		if (stream == null)
+			stream = container.getResourceAsStream(path + name);
+		if (stream == null)
+			throw new StrategoException(container.getSimpleName()
+					+ ": Could not find imported term file " + name);
+		try {
+			return factory.parseFromStream(stream);
+		} catch (java.io.IOException e) {
+			throw new StrategoException(container.getSimpleName()
+					+ ": Could not read imported term file " + name, e);
+		} catch (RuntimeException e) {
+			throw new StrategoException(container.getSimpleName()
+					+ ": Could not read imported term file " + name, e);
+		}
+	}
+	
+	private ATerm initATerm(ATermFactory factory) {
+		java.io.InputStream stream = container.getResourceAsStream("/" + name);
+		if (stream == null)
+			stream = container.getResourceAsStream(path + name);
+		if (stream == null)
+			throw new StrategoException(container.getSimpleName()
+					+ ": Could not find imported term file " + name);
+		try {
+			return factory.readFromFile(stream);
+		} catch (java.io.IOException e) {
+			throw new StrategoException(container.getSimpleName()
+					+ ": Could not read imported term file " + name, e);
+		} catch (RuntimeException e) {
+			throw new StrategoException(container.getSimpleName()
+					+ ": Could not read imported term file " + name, e);
+		}
+	}
+}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTermReference.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTermReference.java	2009-08-14 08:26:23 UTC (rev 19825)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTermReference.java	2009-08-14 11:17:02 UTC (rev 19826)
@@ -1,43 +0,0 @@
-package org.strategoxt.lang;
-
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermFactory;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ImportTermReference extends LazyTermReference {
-	
-	private final ITermFactory factory;
-	
-	private final Class<?> container;
-	
-	private final String path, name;
-	
-	public ImportTermReference(ITermFactory factory, Class<?> container, String path, String name) {
-		assert path.endsWith("/");
-		this.factory = factory;
-		this.container = container;
-		this.path = path;
-		this.name = name;
-	}
-	
-	@Override
-	protected IStrategoTerm init() {
-		java.io.InputStream stream = container.getResourceAsStream("/" + name);
-		if (stream == null)
-			stream = container.getResourceAsStream(path + name);
-		if (stream == null)
-			throw new StrategoException(container.getSimpleName()
-					+ ": Could not find imported term file " + name);
-		try {
-			return factory.parseFromStream(stream);
-		} catch (java.io.IOException e) {
-			throw new StrategoException(container.getSimpleName()
-					+ ": Could not read imported term file " + name, e);
-		} catch (RuntimeException e) {
-			throw new StrategoException(container.getSimpleName()
-					+ ": Could not read imported term file " + name, e);
-		}
-	}
-}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java	2009-08-14 11:17:02 UTC (rev 19826)
@@ -0,0 +1,139 @@
+package org.strategoxt.lang;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public abstract class LazyTerm implements IStrategoAppl, IStrategoInt, IStrategoList, IStrategoReal, IStrategoString, IStrategoTuple {
+
+	private IStrategoTerm term;
+	
+	public final IStrategoTerm getWrapped() {
+		if (term == null) term = init();
+		return term;
+	}
+	
+	protected abstract IStrategoTerm init();
+	
+	// Common methods
+
+	public IStrategoTerm[] getAllSubterms() {
+		return getWrapped().getAllSubterms();
+	}
+
+	public IStrategoTerm getSubterm(int index) {
+		return getWrapped().getSubterm(index);
+	}
+
+	public int getSubtermCount() {
+		return getWrapped().getSubtermCount();
+	}
+
+	public int getTermType() {
+		return getWrapped().getTermType();
+	}
+
+	public void prettyPrint(ITermPrinter pp) {
+		getWrapped().prettyPrint(pp);
+	}
+
+	@Override
+	public String toString() {
+		return getWrapped().toString();
+	}
+
+	public IStrategoList getAnnotations() {
+		return getWrapped().getAnnotations();
+	}
+
+	public int getStorageType() {
+		return Math.min(IMMUTABLE, getWrapped().getStorageType());
+	}
+
+	public boolean match(IStrategoTerm second) {
+		// TODO Auto-generated method stub
+		return false;
+	}
+	
+	// Semi-specialized accessors
+
+	public final IStrategoTerm get(int index) {
+		return getSubterm(index);
+	}
+
+	public final IStrategoTerm[] getArguments() {
+		return getWrapped().getAllSubterms();
+	}
+	
+	// Specialized accessors
+
+	public IStrategoTerm head() {
+		if (getTermType() != LIST)
+			throw new TermWrapperException("Called head() on a term that is not of type LIST");
+		return ((IStrategoList) getWrapped()).head();
+	}
+
+	public IStrategoList tail() {
+		if (getTermType() != LIST)
+			throw new TermWrapperException("Called tail() on a term that is not of type LIST");
+		return ((IStrategoList) getWrapped()).tail();
+	}
+
+	public boolean isEmpty() {
+		if (getTermType() != LIST)
+			throw new TermWrapperException("Called isEmpty() on a term that is not of type LIST");
+		return ((IStrategoList) getWrapped()).isEmpty();
+	}
+
+	@Deprecated
+	public IStrategoList prepend(IStrategoTerm prefix) {
+		if (getTermType() != LIST)
+			throw new TermWrapperException("Called prepend() on a term that is not of type LIST");
+		return ((IStrategoList) getWrapped()).prepend(prefix);
+	}
+
+	public int size() {
+		switch (getTermType()) {
+			case LIST:
+				return ((IStrategoList) getWrapped()).size();
+			case TUPLE:
+				return ((IStrategoTuple) getWrapped()).size();
+			default:
+				throw new TermWrapperException("Called size() on a term that is not a LIST or TUPLE");
+		}
+	}
+
+	public IStrategoConstructor getConstructor() {
+		if (getTermType() != APPL)
+			throw new TermWrapperException("Called getConstructor() on a term that is not of type LIST");
+		return ((IStrategoAppl) getWrapped()).getConstructor();
+	}
+
+	public int intValue() {
+		if (getTermType() != APPL)
+			throw new TermWrapperException("Called intValue() on a term that is not of type LIST");
+		return ((IStrategoInt) getWrapped()).intValue();
+	}
+
+	public double realValue() {
+		if (getTermType() != APPL)
+			throw new TermWrapperException("Called realValue() on a term that is not of type LIST");
+		return ((IStrategoReal) getWrapped()).realValue();
+	}
+
+	public String stringValue() {
+		if (getTermType() != STRING)
+			throw new TermWrapperException("Called stringValue() on a term that is not of type LIST");
+		return ((IStrategoString) getWrapped()).stringValue();
+	}
+
+}
\ No newline at end of file

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTermReference.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTermReference.java	2009-08-14 08:26:23 UTC (rev 19825)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTermReference.java	2009-08-14 11:17:02 UTC (rev 19826)
@@ -1,16 +0,0 @@
-package org.strategoxt.lang;
-
-import org.spoofax.interpreter.terms.IStrategoTerm;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public abstract class LazyTermReference extends TermReference {
-	@Override
-	public IStrategoTerm get() {
-		if (super.get() == null) set(init());
-		return super.get();
-	}
-	
-	protected abstract IStrategoTerm init();
-}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str	2009-08-14 08:26:23 UTC (rev 19825)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str	2009-08-14 11:17:02 UTC (rev 19826)
@@ -73,6 +73,11 @@
     jsglr-parse-string-pt(on-parse-error |tbl, start-symbol, path);
     implode-asfix
 
+strategies
+
+  override strsglr-perror =
+    err(|"Unable to open file:")
+
 strategies // location information
 
   override asfix-anno-location = // TODO: asfix-anno-location?

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-08-14 08:26:23 UTC (rev 19825)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-08-14 11:17:02 UTC (rev 19826)
@@ -15,10 +15,11 @@
    */
   jsglr-open-parsetable = 
       ?tbl
-    ; prim("JSGLR_open_parsetable", tbl) => int
+    ; prim("JSGLR_open_parsetable_compat", tbl) => int
     ; !ParseTable(int)
     
   /* UNDONE: JSGLR_parse_string_compat not implemented
+   * TODO: implement JSGLR_parse_string without TermConverter usage
   jsglr-parse-string(|tbl) =
     jsglr-parse-string(id | tbl, None(), "string")
   

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_open_parsetable_compat.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_open_parsetable_compat.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_open_parsetable_compat.java	2009-08-14 11:17:02 UTC (rev 19826)
@@ -0,0 +1,77 @@
+package org.strategoxt.lang.compat.sglr;
+
+import java.util.WeakHashMap;
+
+import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
+import org.spoofax.interpreter.library.jsglr.JSGLRPrimitive;
+import org.spoofax.interpreter.library.jsglr.JSGLR_open_parsetable;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.InvalidParseTableException;
+import org.spoofax.jsglr.ParseTable;
+import org.strategoxt.lang.ImportTerm;
+
+import aterm.ATerm;
+import aterm.ATermFactory;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class JSGLR_open_parsetable_compat extends JSGLRPrimitive {
+	
+	public static final String NAME = "JSGLR_open_parsetable_compat";
+
+	// TODO: Do (non-static) caching at the IContext level
+    
+    private final WeakHashMap<ATerm, IStrategoInt> parseTableCache =
+        new WeakHashMap<ATerm, IStrategoInt>();
+    
+    private final JSGLR_open_parsetable normalOpener;
+    
+    private final ATermFactory factory;
+	
+	protected JSGLR_open_parsetable_compat(WrappedATermFactory factory) {
+		super(NAME, 0, 1);
+		normalOpener = new JSGLR_open_parsetable(factory);
+		this.factory = factory.getFactory();
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+	    
+		if (tvars[0] instanceof ImportTerm) {
+			return openTable(env, ((ImportTerm) tvars[0]).getATerm(factory));
+		} else {
+			return normalOpener.call(env, svars, tvars);
+		}
+	}
+	
+	private boolean openTable(IContext env, ATerm table) {
+	    IStrategoInt cached = parseTableCache.get(table);
+	    if (cached != null) {
+	        env.setCurrent(cached);
+	        if (getLibrary(env).getParseTable(cached.intValue()) == null)
+	        	throw new IllegalStateException("Inconsistent context: wrong JSGLR library instance");
+	        return true;
+	    }
+		
+		JSGLRLibrary lib = getLibrary(env);
+		try {
+			ParseTable pt = lib.getParseTableManager().loadFromTerm(table);
+			IStrategoInt result = env.getFactory().makeInt(lib.addParseTable(pt));
+            
+			env.setCurrent(result);			
+			parseTableCache.put(table, result);
+		} catch (InvalidParseTableException e) {
+			e.printStackTrace();
+			return false;
+		}
+		return true;
+	}
+
+}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	2009-08-14 08:26:23 UTC (rev 19825)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	2009-08-14 11:17:02 UTC (rev 19826)
@@ -25,6 +25,7 @@
 		initFilterSettings();
 		
 		add(new JSGLR_parse_string_pt_compat(wrappedFactory, filterSettings));
+		add(new JSGLR_open_parsetable_compat(wrappedFactory));
 		add(new STRSGLR_get_parse_error(wrappedFactory));
 		add(new STRSGLR_clear_parse_error());
 	}

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-08-14 08:26:23 UTC (rev 19825)
+++ strc-java/trunk/trans/s2j.str	2009-08-14 11:17:02 UTC (rev 19826)
@@ -158,9 +158,17 @@
          ~*cnst-inits
        }
      ]|
+     
+     protected static IStrategoTerm getConstant(ITermFactory factory, IStrategoTerm constant) {
+       if (factory == constantFactory) {
+         return constant;
+       } else if (constantFactory != null) {
+         return new TermConverter(factory).convert(constant);
+       } else {
+         throw new IllegalStateException("Component not initialized; please call init() first");
+       }
+     }
 
-     ~*constant
-
      ~*constant-defs
      ~*function-defs
      ~*lifted-defs
@@ -176,7 +184,6 @@
     ; pkgname       := <!package-dec? |[ package ~x:<get-config> "-p"; ]| <+ !None()>
     ; main          := <java-main-methods>
     ; register      := <java-register-method> defs
-    ; constant      := <java-constant-methods>
     ; switch <get-config> "--stacktrace"
         case 0: e_traces := |[ false ]|
         case 1: e_traces := |[ true ]|
@@ -260,29 +267,6 @@
       x_name := <MainClassName>
     ; main   := <get-config <+ !"main"> "-m"
     ; x_main := <conc-strings> (<jify> main, "_0_0")
-
-  java-constant-methods =
-    !|[
-      protected static IStrategoTerm getConstant(ITermFactory factory, IStrategoTerm constant) {
-        if (factory == constantFactory) {
-          return constant;
-        } else if (constantFactory != null) {
-          return new TermConverter(factory).convert(constant);
-        } else {
-          throw new IllegalStateException("Component not initialized; please call init() first");
-        }
-      }
-     
-      protected static IStrategoTerm getConstant(ITermFactory factory, TermReference constant) {
-        if (factory == constantFactory) {
-          return constant.get();
-        } else if (constantFactory != null) {
-          return new TermConverter(factory).convert(constant.get());
-        } else {
-          throw new IllegalStateException("Component not initialized; please call init() first");
-        }
-      }
-    ]|
   
   // TODO: do interop strategy additions in an on-demand fashion
   //       (need to make a custom VarScope class to do so)
@@ -827,7 +811,7 @@
       
   /**
    * Translate 'import-term'
-   * - uses LazyTermReference for caching
+   * - uses LazyTerm to lazily load the term
    * - inlining construction would exceed max method limit
    *    even an array may have this effect
    *  - inlining a string could be an easy solution to inline it
@@ -860,7 +844,7 @@
     ; rules(
         IsImported : inputname
         ConstDecl :+= class-body-dec |[
-          protected static ImportTermReference x_constant;
+          protected static ImportTerm x_constant;
         ]|
         ConstDecl :+= class-body-dec |[
           public static IStrategoTerm x_getconstant(ITermFactory termFactory) {
@@ -868,7 +852,7 @@
           }
         ]|
         ConstInit :+= bstm* |[
-          x_constant = new ImportTermReference(termFactory, x_main.class, "~pkgpath", "~outputfile");
+          x_constant = new ImportTerm(termFactory, x_main.class, "~pkgpath", "~outputfile");
         ]|
       )
   



From L.C.L.Kats at tudelft.nl  Fri Aug 14 16:26:29 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 14 Aug 2009 14:26:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19827 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt/lang
Message-ID: <200908141426.n7EEQIj4028158@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-14 14:26:29 +0000 (Fri, 14 Aug 2009)
New Revision: 19827

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19827&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java

Log:


Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	2009-08-14 11:17:02 UTC (rev 19826)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/ImportTerm.java	2009-08-14 14:26:29 UTC (rev 19827)
@@ -33,7 +33,12 @@
 		if (aterm == null) {
 			return aterm = initATerm(factory);
 		} else if (factory != atermFactory) {
-			return factory.importTerm(aterm);
+			try {
+				return initATerm(factory);
+			} catch (RuntimeException e) {
+				 // factory.importTerm(aterm) may not be implemented, try again...
+				return initATerm(factory);
+			}
 		} else {
 			return aterm;
 		}



From L.C.L.Kats at tudelft.nl  Fri Aug 14 17:09:51 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 14 Aug 2009 15:09:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19828 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	org.strategoxt.imp.runtime
Message-ID: <200908141509.n7EF9fnh028803@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-14 15:09:51 +0000 (Fri, 14 Aug 2009)
New Revision: 19828

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19828&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch

Log:
- Support a project name different from the language name in the wizard (e.g., org.strategoxt.imp.editors.sdf)
- Added an example input file to generated projects
- Minor fixes


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-14 14:26:29 UTC (rev 19827)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-14 15:09:51 UTC (rev 19828)
@@ -102,6 +102,7 @@
     create-plugin-xml;
     create-build-xml;
     create-builder-xml;
+    create-example-file;
     copy-strategoxt-jar;
     
     <copy-or-create-parse-table> input

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-14 14:26:29 UTC (rev 19827)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-14 15:09:51 UTC (rev 19828)
@@ -49,17 +49,13 @@
         </target>
         
         <target name="sdf2imp-eclipse" depends="sdf2table">
-          <!-- HACK: Trigger the Eclipse builder rather than build it here -->
-          <touch file="${editor}/${esvmodule}.esv"/>
-          <eclipse.refreshLocal resource="${editor}/${esvmodule}.main.esv"/>
+            <!-- HACK: Trigger the Eclipse builder rather than build it here -->
+            <touch file="${editor}/${esvmodule}.main.esv"/>
+            <eclipse.refreshLocal resource="${editor}/${esvmodule}.main.esv"/>
         </target>
         
         <target name="sdf2imp-standalone" depends="sdf2table">
-          <if> <not><isset property="eclipse.running"/></not>
-          <then>
-            <echo level="error" message="Only building from within Eclipse is implemented at this time"/>
-          </then>
-          </if>
+            <echo message="Only building from within Eclipse is implemented at this time"/>
         </target>
     
         <target name="sdf2table" depends="make-permissive">

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-14 14:26:29 UTC (rev 19827)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-14 15:09:51 UTC (rev 19828)
@@ -6,8 +6,6 @@
 strategies
 
   create-builder-xml =
-    name    := <get-main-class-name>;
-    
     // (the XML pretty printer has problems with this file, so it's printed as text instead)
     <output-text-file(|[".externalToolBuilders"], "Ant Builder.launch")>
     <conc-strings>
@@ -19,7 +17,7 @@
 <booleanAttribute key=\"org.eclipse.ant.ui.ATTR_TARGETS_UPDATED\" value=\"true\"/>
 <booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"false\"/>
 <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">
-<listEntry value=\"/", name, "/build.xml\"/>
+<listEntry value=\"${project_loc}/build.xml\"/>
 </listAttribute>
 <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">
 <listEntry value=\"1\"/>
@@ -29,16 +27,16 @@
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;\"/>
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/", name, "/aux/make_permissive.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/", name, "/aux/strategoxt.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;${project_loc}/aux/make_permissive.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;${project_loc}/aux/strategoxt.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
 </listAttribute>
 <stringAttribute key=\"org.eclipse.jdt.launching.CLASSPATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>
 <booleanAttribute key=\"org.eclipse.jdt.launching.DEFAULT_CLASSPATH\" value=\"false\"/>
-<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"", name, "\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${workspace_loc:/", name, "/build.xml}\"/>
+<!-- <stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"${project_name}\"/> -->
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${project_loc}/build.xml\"/>
 <stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS\" value=\"full,incremental,\"/>
 <booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED\" value=\"true\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${workspace_loc:/", name, "}\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${project_loc}\"/>
 <stringAttribute key=\"process_factory_id\" value=\"org.eclipse.ant.ui.remoteAntProcessFactory\"/>
 </launchConfiguration>"
 )
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str	2009-08-14 15:09:51 UTC (rev 19828)
@@ -0,0 +1,33 @@
+module sdf2imp/project/create-example-file
+    
+imports
+  sdf2imp/util/-
+
+strategies
+
+  create-example-file =
+    not(NoExistingDescriptor)
+  <+
+    with(
+      name       := <get-sdf-main-module>;
+      extensions := <require-option(EditorExtensions |"File extensions (-e)")>;
+      extension  := <string-tokenize(|[',']); Hd> extensions
+    );
+    
+    // (the XML pretty printer has problems with this file, so it's printed as text instead)
+    <output-text-file(|["test"], <add-extension> ("example", extension))>
+    <conc-strings>
+(
+"module example
+
+// Example ", name, " program
+
+entity Foo {
+  bar : String
+  baz : String
+}
+
+entity Qux {
+  foo : Foo
+}"
+)
\ No newline at end of file


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-file.str
___________________________________________________________________
Added: svn:mergeinfo
   + 

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-14 14:26:29 UTC (rev 19827)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-14 15:09:51 UTC (rev 19828)
@@ -152,7 +152,7 @@
 			Debug.startTimer();
 			return sdf2imp.sdf2imp_jvm_0_0.instance.invoke(context, input);
 		} catch (StrategoExit e) {
-			Environment.logException("Unexpected exit in dynamic builder\nAt\n" + context.getTrace(), e);
+			Environment.logException("Unexpected exit in dynamic builder", e);
 			context.printStackTrace();
 			return null;
 		} finally {

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-14 14:26:29 UTC (rev 19827)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-14 15:09:51 UTC (rev 19828)
@@ -60,14 +60,15 @@
 	 */
 	@Override
 	public boolean performFinish() {
-		final String name = input.getInputName();
+		final String languageName = input.getInputLanguageName();
+		final String projectName = input.getInputProjectName();
 		final String packageName = input.getInputPackageName();
 		final String extensions = input.getInputExtensions();
 		
 		IRunnableWithProgress op = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) throws InvocationTargetException {
 				try {
-					doFinish(name, packageName, extensions, monitor);
+					doFinish(languageName, projectName, packageName, extensions, monitor);
 				} catch (Exception e) {
 					Environment.logException("Error creating new project", e);
 					throw new InvocationTargetException(e);
@@ -90,9 +91,9 @@
 		return true;
 	}
 	
-	private void doFinish(String name, String packageName, String extensions, IProgressMonitor monitor) throws IOException, CoreException {
+	private void doFinish(String languageName, String projectName, String packageName, String extensions, IProgressMonitor monitor) throws IOException, CoreException {
 		final int TASK_COUNT = 5;
-		monitor.beginTask("Creating " + name + " project", TASK_COUNT);
+		monitor.beginTask("Creating " + languageName + " project", TASK_COUNT);
 		
 		monitor.setTaskName("Preparing project builder...");
 		Context context = new Context(Environment.getTermFactory());
@@ -104,7 +105,7 @@
 
 		monitor.setTaskName("Creating project...");
 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
-		IProject project = workspace.getRoot().getProject(name);
+		IProject project = workspace.getRoot().getProject(projectName);
 		project.create(null);
 		project.open(null);
 		boolean success = false;
@@ -113,7 +114,7 @@
 			try {
 				String jar1 = libstratego_lib.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 				String jar2 = make_permissive.class.getProtectionDomain().getCodeSource().getLocation().getFile();
-				sdf2imp.mainNoExit(context, "-m", name, "-n", packageName, "-e", extensions, "-jar", jar1, jar2);
+				sdf2imp.mainNoExit(context, "-m", languageName, "-n", packageName, "-e", extensions, "-jar", jar1, jar2);
 			} catch (StrategoExit e) {
 				if (e.getValue() != 0) {
 					throw new StrategoException("Project builder failed. Log follows\n\n"
@@ -124,8 +125,9 @@
 			monitor.worked(1);		
 			
 			monitor.setTaskName("Opening files for editing...");
-			openEditor(project, "/editor/" + name +  ".main.esv");
-			openEditor(project, "/syntax/" + name +  ".sdf");
+			openEditor(project, "/test/example." + extensions.split(",")[0]);
+			openEditor(project, "/editor/" + languageName +  ".main.esv");
+			openEditor(project, "/syntax/" + languageName +  ".sdf");
 			monitor.worked(1);
 			monitor.done();
 			success = true;

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-14 14:26:29 UTC (rev 19827)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-14 15:09:51 UTC (rev 19828)
@@ -20,17 +20,22 @@
  */
 
 public class NewEditorWizardPage extends WizardPage {
-	private Text inputName;
 	
+	private Text inputLanguageName;
+	
+	private Text inputProjectName;
+	
 	private Text inputPackageName;
 	
 	private Text inputExtensions;
 	
+	private boolean isInputProjectNameChanged;
+	
 	private boolean isInputPackageNameChanged;
 	
 	private boolean isInputExtensionsChanged;
 	
-	private boolean ignoreEventsOnce;
+	private boolean ignoreEvents;
 
 	/**
 	 * Constructor for SampleNewWizardPage.
@@ -72,12 +77,28 @@
 		});
 		*/
 				
+		new Label(container, SWT.NULL).setText("&Language name:");
+		inputLanguageName = new Text(container, SWT.BORDER | SWT.SINGLE);
+		inputLanguageName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
+		inputLanguageName.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				if (!ignoreEvents) {
+					distributeLanguageName();
+					onChange();
+				}
+			}
+		});
+				
 		new Label(container, SWT.NULL).setText("&Project name:");
-		inputName = new Text(container, SWT.BORDER | SWT.SINGLE);
-		inputName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
-		inputName.addModifyListener(new ModifyListener() {
+		inputProjectName = new Text(container, SWT.BORDER | SWT.SINGLE);
+		inputProjectName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
+		inputProjectName.addModifyListener(new ModifyListener() {
 			public void modifyText(ModifyEvent e) {
-				onChange();
+				if (!ignoreEvents) {
+					distributeProjectName();
+					isInputProjectNameChanged = true;
+					onChange();
+				}
 			}
 		});
 		
@@ -86,8 +107,10 @@
 		inputPackageName.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
 		inputPackageName.addModifyListener(new ModifyListener() {
 			public void modifyText(ModifyEvent e) {
-				isInputPackageNameChanged = true;
-				onChange();
+				if (!ignoreEvents) {
+					isInputPackageNameChanged = true;
+					onChange();
+				}
 			}
 		});
 				
@@ -96,8 +119,10 @@
 		inputExtensions.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
 		inputExtensions.addModifyListener(new ModifyListener() {
 			public void modifyText(ModifyEvent e) {
-				isInputExtensionsChanged = true;
-				onChange();
+				if (!ignoreEvents) {
+					isInputExtensionsChanged = true;
+					onChange();
+				}
 			}
 		});
 
@@ -105,39 +130,54 @@
 		setPageComplete(false);
 	}
 
+	private void distributeLanguageName() {
+		if (!isInputProjectNameChanged || getInputProjectName().length() == 0
+				|| getInputProjectName().equals(getInputLanguageName())) {
+			ignoreEvents = true;
+			inputProjectName.setText(getInputLanguageName());
+			isInputProjectNameChanged = false;
+			ignoreEvents = false;
+			distributeProjectName();
+		}
+		if (!isInputExtensionsChanged || getInputExtensions().length() == 0
+				|| getInputExtensions().equals(toExtension(getInputLanguageName()))) {
+			ignoreEvents = true;
+			inputExtensions.setText(toExtension(getInputLanguageName()));
+			isInputExtensionsChanged = false;
+			ignoreEvents = false;
+		}
+	}
+
+	private void distributeProjectName() {
+		if (!isInputPackageNameChanged || getInputPackageName().length() == 0
+				|| getInputPackageName().equals(toPackageName(getInputProjectName()))) {
+			ignoreEvents = true;
+			inputPackageName.setText(toPackageName(getInputProjectName()));
+			isInputPackageNameChanged = false;
+			ignoreEvents = false;
+		}
+	}
+
 	/**
 	 * Ensures that both text fields are set.
 	 */
-	private void onChange() {
-		if (ignoreEventsOnce) {
-			ignoreEventsOnce = false;
+	private void onChange() {		
+		if (getInputLanguageName().length() == 0) {
+			updateStatus("Language name must be specified");
 			return;
 		}
-		
-		if (getInputName().length() == 0) {
+		if (getInputProjectName().length() == 0) {
 			updateStatus("Project name must be specified");
 			return;
 		}
-		if (getInputName().replace('\\', '/').indexOf('/', 1) > 0) {
+		if (getInputLanguageName().replace('\\', '/').indexOf('/', 1) > 0) {
+			updateStatus("Language name must be valid");
+			return;
+		}
+		if (getInputLanguageName().replace('\\', '/').indexOf('/', 1) > 0) {
 			updateStatus("Project name must be valid");
 			return;
 		}
-		
-		if (!isInputPackageNameChanged) {
-			ignoreEventsOnce = true;
-			inputPackageName.setText(toPackageName(getInputName()));
-			isInputPackageNameChanged = false;
-		} else if (getInputPackageName().equals(toPackageName(getInputName()))) {
-			isInputPackageNameChanged = false;
-		}
-		
-		if (!isInputExtensionsChanged) {
-			ignoreEventsOnce = true;
-			inputExtensions.setText(toExtension(getInputName()));
-			isInputExtensionsChanged = false;
-		} else if (getInputExtensions().equals(toExtension(getInputExtensions()))) {
-			isInputExtensionsChanged = false;
-		}
 
 		if (getInputPackageName().length() == 0) {
 			updateStatus("Package name must be specified");
@@ -153,14 +193,14 @@
 			updateStatus("File extension must be specified");
 			return;
 		}
-		if (getInputExtensions().indexOf(".") != -1 || getInputExtensions().indexOf("/") != -1
+		if (getInputExtensions().indexOf(".") != -1 || getInputExtensions().replace('\\', '/').indexOf("/") != -1
 				|| getInputExtensions().indexOf(":") > -1){
 			updateStatus("File extension must be valid");
 			return;
 		}
 
 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
-		if (workspace.getRoot().getProject(getInputName()).exists()) {
+		if (workspace.getRoot().getProject(getInputLanguageName()).exists()) {
 			updateStatus("A project with this name already exists");
 			return;
 		}
@@ -197,10 +237,14 @@
 		setPageComplete(message == null);
 	}
 	
-	public String getInputName() {
-		return inputName.getText().trim();
+	public String getInputLanguageName() {
+		return inputLanguageName.getText().trim();
 	}
 	
+	public String getInputProjectName() {
+		return inputProjectName.getText().trim();
+	}
+	
 	public String getInputPackageName() {
 		return inputPackageName.getText().trim();
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-08-14 14:26:29 UTC (rev 19827)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-08-14 15:09:51 UTC (rev 19828)
@@ -19,7 +19,7 @@
 <stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl}"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
-<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-server -Xmx1024m -Xverify:none -ea:org.strategoxt.imp.runtime.Debug -ea:org.strategoxt.imp..."/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-server -Xmx1024m -Xms256m -XX:MaxPermSize=256M -Xverify:none -ea:org.strategoxt.imp.runtime.Debug -ea:org.strategoxt.imp..."/>
 <stringAttribute key="pde.version" value="3.3"/>
 <stringAttribute key="product" value="org.eclipse.sdk.ide"/>
 <booleanAttribute key="show_selected_only" value="false"/>



From L.C.L.Kats at tudelft.nl  Sat Aug 15 10:31:20 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 15 Aug 2009 08:31:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19829 - LennartKats -
	spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr
Message-ID: <200908150831.n7F8V81O007829@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-15 08:31:20 +0000 (Sat, 15 Aug 2009)
New Revision: 19829

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19829&view=rev

Modified:
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/RecoveryConnector.java

Log:
Some TODO notes.

Changes:

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java	2009-08-14 15:09:51 UTC (rev 19828)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java	2009-08-15 08:31:20 UTC (rev 19829)
@@ -221,7 +221,10 @@
                         } else if (a.getName().equals("right")) {
                             type = ProductionType.RIGHT_ASSOCIATIVE;
                         } else if (a.getName().equals("non-assoc")) {
-                            // non-assoc is handled by the parse table generator
+                            // FIXME: complete and test the non-assoc implementation
+                            // (it currently already seems to work at least for direct cases)
+                            // the current SDF manual and some tests seem to indicate that non-assoc
+                            // has the same effects the same as having a priority P > P
                         } else {
                             throw new InvalidParseTableException("Unknown assocativity: " + a.getName());
                         }

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/RecoveryConnector.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/RecoveryConnector.java	2009-08-14 15:09:51 UTC (rev 19828)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/RecoveryConnector.java	2009-08-15 08:31:20 UTC (rev 19829)
@@ -78,6 +78,10 @@
     private void doRecoverSteps() throws IOException {
         active=true;
         boolean skipSucceeded = skipRecovery.selectErroneousFragment();
+        
+        // TODO: Handle empty and single-line files correctly
+        // TODO: Should the following statements be evaluated if skipSucceeded == false?
+        
         mySGLR.acceptingStack=null;
         long startSkip=System.currentTimeMillis();
         String errorFragment = skipRecovery.getErrorFragment();



From L.C.L.Kats at tudelft.nl  Mon Aug 17 10:48:40 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Aug 2009 08:48:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19830 - LennartKats -
	in strc-java/trunk/java/runtime/org/strategoxt/lang/compat: .
	override
Message-ID: <200908170848.n7H8mONc020593@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-17 08:48:38 +0000 (Mon, 17 Aug 2009)
New Revision: 19830

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19830&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatLibrary.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str

Log:
New SSL_EXT_java_call to call an external Java strategy.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatLibrary.java	2009-08-15 08:31:20 UTC (rev 19829)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatLibrary.java	2009-08-17 08:48:38 UTC (rev 19830)
@@ -11,6 +11,7 @@
 	
 	public CompatLibrary() {
 		add(new SSL_EXT_call());
+		add(new SSL_EXT_java_call());
 		add(new SSL_EXT_read_text_from_stream());
 	}
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-15 08:31:20 UTC (rev 19829)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-17 08:48:38 UTC (rev 19830)
@@ -5,12 +5,14 @@
 
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
+import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.compat.override.jsglr_parser;
 import org.strategoxt.lang.compat.override.jsglr_parser_compat;
 import org.strategoxt.lang.compat.override.performance_tweaks;
 import org.strategoxt.lang.compat.override.xtc_compat;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
+import org.strategoxt.libstratego_lib.set_config_0_0;
 
 /**
  * Handles per-context library compatibility components.
@@ -52,6 +54,9 @@
 		if ("libstratego_lib".equals(component)) {
 			context.addOperatorRegistry(new CompatLibrary());
 			performance_tweaks.init(context);
+			ITermFactory factory = context.getFactory();
+			set_config_0_0.instance.invoke(context,
+					factory.makeTuple(factory.makeString("JAVA_PLATFORM"), factory.makeInt(1)));
 			xtc_compat.init(context); // also deals with native calls for libstratego-lib
 		} else if ("libstratego_sglr".equals(component)) {
 			WrappedATermFactory atermFactory = new WrappedATermFactory();

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-17 08:48:38 UTC (rev 19830)
@@ -0,0 +1,96 @@
+package org.strategoxt.lang.compat;
+
+import static org.spoofax.interpreter.core.Tools.*;
+
+import java.lang.reflect.Field;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.InteropContext;
+import org.strategoxt.lang.StrategoException;
+import org.strategoxt.lang.StrategoExit;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Calls another Java component, loaded using reflection.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SSL_EXT_java_call extends AbstractPrimitive {
+	
+	private static Map<String,Strategy> invocationCache =
+		new ConcurrentHashMap<String, Strategy>();
+	
+	public SSL_EXT_java_call() {
+		super("SSL_EXT_java_call", 0, 3);
+	}
+
+
+	@Override
+	public boolean call(IContext env, org.spoofax.interpreter.stratego.Strategy[] svars,
+			IStrategoTerm[] tvars) throws InterpreterException {
+		
+		if (!isTermString(tvars[0])) return false;
+		if (!isTermInt(tvars[2])) return false;
+		boolean sameContext = ((IStrategoInt) tvars[2]).intValue() != 0;
+		
+		Strategy strategy = getStrategy(((IStrategoString) tvars[0]).stringValue());
+		if (strategy == null) return false;
+
+		Context parentContext = ((InteropContext) env).getContext();
+		Context context;
+		if (sameContext) {
+			context = parentContext;
+		} else {
+			IOAgent ioAgent = parentContext.getIOAgent();
+			context = new Context(parentContext.getFactory());
+			context.setIOAgent(ioAgent);
+		}
+
+		IStrategoTerm result = strategy.invoke(context, tvars[1]);
+		if (result == null) {
+			return false;
+		} else {
+			env.setCurrent(result);
+			return true;
+		}
+	}
+	
+	protected static Strategy getStrategy(String className) {
+		Strategy cached = invocationCache.get(className);
+		if (cached != null) return cached;
+		
+		try {
+			Class<?> library = Class.forName(className);
+			Field instance = library.getField("instance");
+
+			if (!Strategy.class.isAssignableFrom(instance.getDeclaringClass()))
+				return null;
+			
+			cached = (Strategy) instance.get(null);
+			invocationCache.put(className, cached);
+			return cached;
+			
+		} catch (StrategoExit e) {
+			return null;
+		} catch (ClassNotFoundException e) {
+			return null;
+		} catch (IllegalArgumentException e) {
+			return null;
+		} catch (NoSuchFieldException e) {
+			return null;
+		} catch (IllegalAccessException e) {
+			return null;
+		} catch (SecurityException e) {
+			throw new StrategoException("Could not dynamically call strategy " + className, e);
+		}
+	}
+}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-08-15 08:31:20 UTC (rev 19829)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-08-17 08:48:38 UTC (rev 19830)
@@ -27,7 +27,7 @@
   
   override read-text-from-stream =
     ?Stream(stream);
-    prim("SSL_EXT_read_text_from_stream", stream)
+    prim("SSL_EXT_read_text_from_stream", sticsream)
   
   override crush(nul, sum) =
     SRTS-EXT-crush(nul, sum, id)



From L.C.L.Kats at tudelft.nl  Mon Aug 17 10:49:06 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Aug 2009 08:49:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19831 - LennartKats -
	in strc-java/trunk/java/runtime/org/strategoxt/lang/parallel:
	. tables
Message-ID: <200908170848.n7H8mpWY020606@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-17 08:49:05 +0000 (Mon, 17 Aug 2009)
New Revision: 19831

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19831&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java
Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/PureOperatorSet.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/libstratego_parallel.java

Log:
Added stubs for a semi-parallel hash table library.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java	2009-08-17 08:48:38 UTC (rev 19830)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -43,14 +43,12 @@
 
 	private AtomicInteger parallelismLevel = new AtomicInteger(0);
 	
-	private volatile boolean isParallelActive;
-	
 	private volatile boolean allowUnorderedOnce;
 	
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
 		// TODO: The focus thread could actually start more jobs, given a priority job queue
-		if (ENABLED && (ALLOW_NESTED_JOBS || !isParallelActive) && isCandidateTerm(context, current)) {
+		if (ENABLED && (ALLOW_NESTED_JOBS || libstratego_parallel.isActive()) && isCandidateTerm(context, current)) {
 			context.push("<parallel>");
 			IStrategoTerm result = invokeParallel(context, current, s);
 			
@@ -87,7 +85,7 @@
 			allowUnordered = level == 1 && allowUnorderedOnce;
 			allowUnorderedOnce = false;
 		} else {
-			isParallelActive = true;
+			libstratego_parallel.setActive(true);
 			allowUnordered = allowUnorderedOnce;
 			allowUnorderedOnce = false;
 		}
@@ -151,7 +149,7 @@
 			throw new RuntimeException(e);
 		} finally {
 			if (ALLOW_NESTED_JOBS) parallelismLevel.decrementAndGet();
-			else isParallelActive = false;
+			else libstratego_parallel.setActive(false);
 		}
 		
 		if (DIAGNOSE_SYNCHRONOUS_OPERATIONS) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/PureOperatorSet.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/PureOperatorSet.java	2009-08-17 08:48:38 UTC (rev 19830)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/PureOperatorSet.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -45,6 +45,8 @@
 		add("JSGLR_parse_string_pt_compat");
 		add("JSGLR_parse_string_pt");
 		add("JSGLR_open_parsetable");
+		add("SSL_dynamic_rules_hashtable");
+		add("SSL_table_hashtable");
 		// TODO: More "pure" operators
 	}};
 	
@@ -54,12 +56,10 @@
 	 */
 	@SuppressWarnings("serial")
 	private static final HashSet<String> grayList = new HashSet<String>() {{
-		add("SSL_dynamic_rules_hashtable");
 		add("SSL_hashtable_get");
 		add("SSL_indexedSet_get");
 		add("SSL_hashtable_elements");
 		add("SSL_indexedSet_elements");
-		add("SSL_table_hashtable");
 		add("SSL_table_fold");
 		add("SSL_keys_fold");
 		add("SSL_values_fold");

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/libstratego_parallel.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/libstratego_parallel.java	2009-08-17 08:48:38 UTC (rev 19830)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/libstratego_parallel.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -30,8 +30,10 @@
 	
 	protected static final boolean ADJUST_FOCUS_THREAD_PRIORITY = true;
 	
-	private static boolean isInitialized; 
+	private static boolean isInitialized;
 	
+	private static boolean isActive;
+	
 	public static void init(Context context) {
 		if (isInitialized || !ENABLED) return;
 		isInitialized = true;
@@ -49,6 +51,14 @@
 				);
 	}
 	
+	public static boolean isActive() {
+		return isActive;
+	}
+	
+	protected static void setActive(boolean value) {
+		isActive = value;
+	}
+	
 	public static class parallel_unordered_0_0 extends Strategy {
 		public static parallel_unordered_0_0 instance = new parallel_unordered_0_0();
 		

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -0,0 +1,32 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_create;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableCreate extends SSL_hashtable_create {
+
+	protected ParallelTableCreate(ParallelTableLibrary library) {
+		super(library.getSSLLibrary());
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+			// TODO: new thread-bound table 
+			throw new NotImplementedException();
+		} else {
+			return super.call(env, sargs, targs);
+		}
+	}
+	
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -0,0 +1,32 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_destroy;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableDestroy extends SSL_hashtable_destroy {
+
+	protected ParallelTableDestroy(ParallelTableLibrary library) {
+		super(library.getSSLLibrary());
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+			// TODO: remove thread-bound table registration 
+			throw new NotImplementedException();
+		} else {
+			return super.call(env, sargs, targs);
+		}
+	}
+
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -0,0 +1,31 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_get;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableGet extends SSL_hashtable_get {
+
+	protected ParallelTableGet(ParallelTableLibrary library) {
+		super(library.getSSLLibrary());
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+			// TODO: selectively synchronize 
+			throw new NotImplementedException();
+		} else {
+			return super.call(env, sargs, targs);
+		}
+	}
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -0,0 +1,31 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_keys;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableKeys extends SSL_hashtable_keys {
+
+	protected ParallelTableKeys(ParallelTableLibrary library) {
+		super(library.getSSLLibrary());
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+			// TODO: selectively synchronize 
+			throw new NotImplementedException();
+		} else {
+			return super.call(env, sargs, targs);
+		}
+	}
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -0,0 +1,40 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableLibrary extends AbstractStrategoOperatorRegistry {
+
+    public static final String REGISTRY_NAME = "paralleltable";
+    
+    private final Object syncRoot = new Object();
+    
+    private final SSLLibrary sslLibrary;
+    
+    public ParallelTableLibrary(SSLLibrary sslLibrary) {
+    	this.sslLibrary = sslLibrary;
+    	add(new ParallelTableDestroy(this));
+    	add(new ParallelTableRemove(this));
+    	add(new ParallelTableReset(this));
+    	add(new ParallelTableCreate(this));
+    	add(new ParallelTableGet(this));
+    	add(new ParallelTableKeys(this));
+    	add(new ParallelTablePut(this));
+    }
+    
+    public SSLLibrary getSSLLibrary() {
+    	return sslLibrary;
+    }
+    
+    public Object getSyncRoot() {
+		return syncRoot;
+	}
+
+	public String getOperatorRegistryName() {
+		return REGISTRY_NAME;
+	}
+
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -0,0 +1,32 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_put;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTablePut extends SSL_hashtable_put {
+
+	protected ParallelTablePut(ParallelTableLibrary library) {
+		super(library.getSSLLibrary());
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+			// TODO: selectively synchronize 
+			throw new NotImplementedException();
+		} else {
+			return super.call(env, sargs, targs);
+		}
+	}
+
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -0,0 +1,32 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_remove;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableRemove extends SSL_hashtable_remove {
+
+	protected ParallelTableRemove(ParallelTableLibrary library) {
+		super(library.getSSLLibrary());
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+			// TODO: selectively synchronize 
+			throw new NotImplementedException();
+		} else {
+			return super.call(env, sargs, targs);
+		}
+	}
+
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java	2009-08-17 08:49:05 UTC (rev 19831)
@@ -0,0 +1,34 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_reset;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableReset extends SSL_hashtable_reset {
+	
+	private final ParallelTableLibrary library;
+
+	protected ParallelTableReset(ParallelTableLibrary library) {
+		super(library.getSSLLibrary());
+		this.library = library;
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+			synchronized (library.getSyncRoot()) {
+				return super.call(env, sargs, targs);
+			}
+		} else {
+			return super.call(env, sargs, targs);
+		}
+	}
+}



From L.C.L.Kats at tudelft.nl  Mon Aug 17 10:49:55 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Aug 2009 08:49:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19832 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
Message-ID: <200908170849.n7H8ndte020614@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-17 08:49:54 +0000 (Mon, 17 Aug 2009)
New Revision: 19832

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19832&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2009-08-17 08:49:05 UTC (rev 19831)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2009-08-17 08:49:54 UTC (rev 19832)
@@ -87,7 +87,7 @@
         add(new SSL_real_to_string());
         add(new SSL_real_to_string_precision());
         add(new SSL_string_to_real());
-        add(new SSL_table_hashtable());
+        add(new SSL_table_hashtable(this));
         add(new SSL_indexedSet_create(this));
         add(new SSL_indexedSet_destroy(this));
         add(new SSL_indexedSet_put(this));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java	2009-08-17 08:49:05 UTC (rev 19831)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java	2009-08-17 08:49:54 UTC (rev 19832)
@@ -15,13 +15,15 @@
 
 public class SSL_table_hashtable extends AbstractPrimitive {
 
-    protected SSL_table_hashtable() {
+    private final SSLLibrary library;
+    
+    protected SSL_table_hashtable(SSLLibrary library) {
         super("SSL_table_hashtable", 0, 0);
+        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
-        
-        int ref = SSLLibrary.instance(env).getTableTableRef();
+        int ref = library.getTableTableRef();
         env.setCurrent(env.getFactory().makeInt(ref));
         return true;
     }



From L.C.L.Kats at tudelft.nl  Mon Aug 17 12:13:51 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Aug 2009 10:13:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19833 - LennartKats -
	in strc-java/trunk/java/runtime/org/strategoxt/lang: . compat
	compat/override parallel
Message-ID: <200908171013.n7HADZA1021815@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-17 10:13:51 +0000 (Mon, 17 Aug 2009)
New Revision: 19833

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19833&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelContext.java

Log:
- New sameContext argument for SSL_EXT_java_call
- Added SSL_ext_java_call to the call strategy override
- Extended the set of constructors for Context and StrategoExit

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-17 08:49:54 UTC (rev 19832)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-17 10:13:51 UTC (rev 19833)
@@ -48,16 +48,22 @@
     }
     
     public Context(ITermFactory factory) {
-    	this(factory, new HashMap<String, IOperatorRegistry>(), new ArrayList<IOperatorRegistry>());
+    	this(factory, null);
+    }
+    
+    public Context(ITermFactory factory, IOAgent ioAgent) {
+    	this(factory, ioAgent, new HashMap<String, IOperatorRegistry>(), new ArrayList<IOperatorRegistry>());
         SSLLibrary ssl = new SSLLibrary();
 		operatorRegistryMap.put(SSLLibrary.REGISTRY_NAME, ssl);
         operatorRegistries.add(ssl);
     }
     
-    protected Context(ITermFactory factory, Map<String, IOperatorRegistry> operatorRegistryMap, List<IOperatorRegistry> operatorRegistries) {
+    protected Context(ITermFactory factory, IOAgent ioAgent, Map<String, IOperatorRegistry> operatorRegistryMap, List<IOperatorRegistry> operatorRegistries) {
     	this.factory = factory;
     	this.operatorRegistryMap = operatorRegistryMap;
     	this.operatorRegistries = operatorRegistries;
+    	
+    	if (ioAgent != null) setIOAgent(ioAgent);
     	compat.init();
     }
 	

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2009-08-17 08:49:54 UTC (rev 19832)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2009-08-17 10:13:51 UTC (rev 19833)
@@ -20,6 +20,10 @@
     	super("Legal exit: return code " + valueToString(value), cause);
     	this.value = value;
     }
+    
+    public StrategoExit(StrategoExit cause) {
+    	this(cause.getValue(), cause);
+    }
 
     private static Object valueToString(int value) {
         return (value == SUCCESS ? "0 (success)" : value);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-17 08:49:54 UTC (rev 19832)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-17 10:13:51 UTC (rev 19833)
@@ -7,9 +7,9 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -50,17 +50,21 @@
 		if (sameContext) {
 			context = parentContext;
 		} else {
-			IOAgent ioAgent = parentContext.getIOAgent();
-			context = new Context(parentContext.getFactory());
-			context.setIOAgent(ioAgent);
+			context = new Context(parentContext.getFactory(), parentContext.getIOAgent());
 		}
 
-		IStrategoTerm result = strategy.invoke(context, tvars[1]);
-		if (result == null) {
-			return false;
-		} else {
-			env.setCurrent(result);
-			return true;
+		try {
+			IStrategoTerm result = strategy.invoke(context, tvars[1]);
+			if (result == null) {
+				return false;
+			} else {
+				env.setCurrent(result);
+				return true;
+			}
+		} catch (StrategoExit e) {
+			if (sameContext) throw new StrategoExit(e.getValue(), e);
+			
+			return e.getValue() == StrategoExit.SUCCESS;
 		}
 	}
 	
@@ -69,7 +73,12 @@
 		if (cached != null) return cached;
 		
 		try {
-			Class<?> library = Class.forName(className);
+			Class<?> library;
+			try {
+				library = Class.forName(className);
+			} catch (ClassNotFoundException e) {
+				library = Class.forName(toStrategoName(className));
+			}
 			Field instance = library.getField("instance");
 
 			if (!Strategy.class.isAssignableFrom(instance.getDeclaringClass()))
@@ -79,8 +88,6 @@
 			invocationCache.put(className, cached);
 			return cached;
 			
-		} catch (StrategoExit e) {
-			return null;
 		} catch (ClassNotFoundException e) {
 			return null;
 		} catch (IllegalArgumentException e) {
@@ -93,4 +100,18 @@
 			throw new StrategoException("Could not dynamically call strategy " + className, e);
 		}
 	}
+	
+	private static String toStrategoName(String className) {
+		StringBuilder result = new StringBuilder();
+		String[] parts = className.split("\\.");
+		parts[parts.length - 1] = Interpreter.cify(parts[parts.length - 1]);
+		
+		result.append(parts[0]);
+		for (int i = 1; i < parts.length; i++) {
+			result.append('.');
+			result.append(parts[i]);
+		}
+		
+		return result.toString();
+	}
 }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-17 08:49:54 UTC (rev 19832)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-17 10:13:51 UTC (rev 19833)
@@ -17,8 +17,12 @@
   <+
     id // HACK: try to find something on the path instead
   
-  // TODO: also implement fork-and-wait
-  //       (which is more lower-level and probably inlined in call)
+  // TODO: also implement fork-and-wait?
+  
   override call =
     ?(program, args);
+    <is-substring(!".")> program;
+    prim("SSL_EXT_java_call", program, args, 0)
+  <+
+    ?(program, args);
     prim("SSL_EXT_call", program, args)
\ No newline at end of file

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java	2009-08-17 08:49:54 UTC (rev 19832)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java	2009-08-17 10:13:51 UTC (rev 19833)
@@ -159,7 +159,7 @@
 		if (isAborted.get()) {
 			if (exception.get() != null) {
 				if (exception.get() instanceof StrategoExit) {
-					throw new StrategoExit(((StrategoExit) exception.get()).getValue(), exception.get());
+					throw new StrategoExit((StrategoExit) exception.get());
 				} else {
 					throw new StrategoException("Exception in asynchronous job", exception.get());
 				}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelContext.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelContext.java	2009-08-17 08:49:54 UTC (rev 19832)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelContext.java	2009-08-17 10:13:51 UTC (rev 19833)
@@ -43,7 +43,7 @@
 	 *            operations will break the program.
 	 */
 	public ParallelContext(Context context, ParallelJobExecutor executor, ParallelJob job, AtomicBoolean aborted, boolean allowUnordered, boolean allowGrayListed) {
-		super(context.getFactory(), context.getOperatorRegistryMap(), context.getOperatorRegistries());
+		super(context.getFactory(), context.getIOAgent(), context.getOperatorRegistryMap(), context.getOperatorRegistries());
 		this.executor = executor;
 		this.job = job;
 		this.isAborted = aborted;



From L.C.L.Kats at tudelft.nl  Mon Aug 17 12:22:31 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Aug 2009 10:22:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19834 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/tests
Message-ID: <200908171022.n7HAMFo0021884@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-17 10:22:31 +0000 (Mon, 17 Aug 2009)
New Revision: 19834

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19834&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/tests/EditorService.testsuite

Log:
Fixed outdated test suite...

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/tests/EditorService.testsuite
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/tests/EditorService.testsuite	2009-08-17 10:13:51 UTC (rev 19833)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/tests/EditorService.testsuite	2009-08-17 10:22:31 UTC (rev 19834)
@@ -19,15 +19,15 @@
      sortY
   
    colorer
-     sortZ : dark red
+     sortZ : darkred
   
   " ->
   Module(
     "foo"
-  , _
-  , [ Folding([Sort("sortX")])
-    , Outliner([Sort("sortY")])
-    , Colorer([Rule(Sort("sortZ"), ColorName(_), ColorDefault, NORMAL)])
+  , Imports(_)
+  , [ Folding("",  [FoldRule(Sort("sortX"),None)])
+    , Outliner("", [OutlineRule(Sort("sortY"))])
+    , Colorer("",  [ColorRule(Sort("sortZ"),AttributeRef("darkred"))])
     ]
   )
   
@@ -35,21 +35,16 @@
   "module foo
   
    colorer
-     TK_LAYOUT : green italic
-     TK_VAR    : 1 2 3 green bold
+     TK_LAYOUT : green
+     TK_VAR    : 1 2 3 bold
   
   " ->
   Module(
     "foo"
-  , NoImports()
-  , [ Colorer(
-        [ Rule(Sort("TK_LAYOUT"), ColorName(GREEN()), ColorDefault(), ITALIC())
-        , Rule(
-            Sort("TK_VAR")
-          , ColorRGB("1", "2", "3")
-          , ColorName(GREEN())
-          , BOLD()
-          )
+  , NoImports
+  , [ Colorer("",
+        [ ColorRule(Sort("TK_LAYOUT"),AttributeRef("green"))
+        , ColorRule(Sort("TK_VAR"),Attribute(ColorRGB("1","2","3"),NoColor,BOLD))
         ]
       )
     ]



From L.C.L.Kats at tudelft.nl  Mon Aug 17 12:48:38 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Aug 2009 10:48:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19835 - LennartKats -
	in spoofax-imp/trunk/org.strategoxt.imp.generator: .
	src/sdf2imp src/sdf2imp/project test
Message-ID: <200908171048.n7HAmMYQ022114@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-17 10:48:38 +0000 (Mon, 17 Aug 2009)
New Revision: 19835

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19835&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/EditorService.testsuite
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/EditorService.testsuite
   spoofax-imp/trunk/org.strategoxt.imp.generator/tests/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-editor-service.sh
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh

Log:
- Call make-permissive from sdf2imp
- Fixes

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-17 10:22:31 UTC (rev 19834)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-17 10:48:38 UTC (rev 19835)
@@ -59,10 +59,10 @@
 jar : lib/sdf2imp.jar
 
 check : all \
-        tests/EditorService.runtestsuite \
-        tests/test-editor-descriptor.runsh \
-        tests/test-stratego-java.runsh \
-        tests/test-foo.runsh
+        test/EditorService.runtestsuite \
+        test/test-editor-service.runsh \
+        test/test-stratego-java.runsh \
+        test/test-foo.runsh
 
 sdf2imp : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
 	strc -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-17 10:22:31 UTC (rev 19834)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-17 10:48:38 UTC (rev 19835)
@@ -62,6 +62,7 @@
 strategies
 
   sdf2imp =
+    check-options;
     if InputFile then
       !FILE(<InputFile>);
       if FILE(has-extension(|"esv") => esv) then

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-17 10:22:31 UTC (rev 19834)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-17 10:48:38 UTC (rev 19835)
@@ -8,8 +8,6 @@
   create-builder-xml =
     // (the XML pretty printer has problems with this file, so it's printed as text instead)
     <output-text-file(|[".externalToolBuilders"], "Ant Builder.launch")>
-    <conc-strings>
-(
 "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
 <launchConfiguration type=\"org.eclipse.ant.AntBuilderLaunchConfigurationType\">
 <stringAttribute key=\"org.eclipse.ant.ui.ATTR_ANT_AFTER_CLEAN_TARGETS\" value=\"from-eclipse,\"/>
@@ -39,4 +37,3 @@
 <stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${project_loc}\"/>
 <stringAttribute key=\"process_factory_id\" value=\"org.eclipse.ant.ui.remoteAntProcessFactory\"/>
 </launchConfiguration>"
-)
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-17 10:22:31 UTC (rev 19834)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-17 10:48:38 UTC (rev 19835)
@@ -14,7 +14,7 @@
 strategies
   
   copy-or-create-parse-table =
-    copy-parse-table <+ create-parse-table <+ err(|"Could not copy or create parse table")
+    copy-parse-table <+ xtc-ensure-file; create-parse-table <+ err(|"Could not copy or create parse table")
   
   copy-parse-table =
     where(
@@ -27,13 +27,31 @@
       end
     )
     
-  create-parse-table =
-    xtc-ensure-file => FILE(input);
-    where(
+  create-parse-table:
+    FILE(input) -> FILE(output)
+    with
+      FILE(input') := <create-permissive-grammar> FILE(input);
+      output       := <parse-table-target>;
       <file-exists <+ mkdir> "include";
-      <xtc-command(!"sdf2table")> ["-i", input, "-o", <parse-table-target>,
-                                   "-m", <get-sdf-main-module>]
-    )
+      <xtc-command(!"sdf2table")> ["-i", input', "-o", output, "-m", <get-sdf-main-module>]
+  
+  create-permissive-grammar:
+    FILE(input) -> FILE(output)
+    with
+      output := <permissive-grammar-target>;
+      args   := ["-i", input, "-o", output];
+      if <get-config> "JAVA_PLATFORM" then
+        <call> ("org.strategoxt.permissivegrammars.main-make-permissive", args)
+      else
+        // FIXME: should we even bother making make-permissive an xtc executable?
+        <call> ("make-permissive", args)
+      end
+    <+
+      warn(|"Could not create permissive grammar using make-permissive");
+      output := input
 
+  permissive-grammar-target =
+    <conc-strings> ("include/", <get-sdf-main-module>, "-Permissive.gendef")
+
   parse-table-target =
     <conc-strings> ("include/", <get-sdf-main-module>, ".tbl")


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.generator/test
___________________________________________________________________
Added: svn:mergeinfo
   + /spoofax-imp/trunk/org.strategoxt.imp.metatooling/tests:19707-19736

Deleted: spoofax-imp/trunk/org.strategoxt.imp.generator/test/EditorService.testsuite
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/tests/EditorService.testsuite	2009-08-11 07:38:56 UTC (rev 19807)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/test/EditorService.testsuite	2009-08-17 10:48:38 UTC (rev 19835)
@@ -1,56 +0,0 @@
-testsuite EditorService
-
-topsort Module
-
-test Empty module
-  "module foo" -> Module("foo", NoImports(), [])
-
-test Empty module with imports
-  "module foo imports bar baz" -> Module("foo", Imports([Import("bar"), Import("baz")]), [])
-  
-test Larger module
-  "module foo
-   imports bar baz
-  
-   folding
-     sortX
-  
-   outliner
-     sortY
-  
-   colorer
-     sortZ : dark red
-  
-  " ->
-  Module(
-    "foo"
-  , _
-  , [ Folding([Sort("sortX")])
-    , Outliner([Sort("sortY")])
-    , Colorer([Rule(Sort("sortZ"), ColorName(_), ColorDefault, NORMAL)])
-    ]
-  )
-  
-test Token-based colors
-  "module foo
-  
-   colorer
-     TK_LAYOUT : green italic
-     TK_VAR    : 1 2 3 green bold
-  
-  " ->
-  Module(
-    "foo"
-  , NoImports()
-  , [ Colorer(
-        [ Rule(Sort("TK_LAYOUT"), ColorName(GREEN()), ColorDefault(), ITALIC())
-        , Rule(
-            Sort("TK_VAR")
-          , ColorRGB("1", "2", "3")
-          , ColorName(GREEN())
-          , BOLD()
-          )
-        ]
-      )
-    ]
-  )

Copied: spoofax-imp/trunk/org.strategoxt.imp.generator/test/EditorService.testsuite (from rev 19834, spoofax-imp/trunk/org.strategoxt.imp.generator/tests/EditorService.testsuite)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/test/EditorService.testsuite	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/test/EditorService.testsuite	2009-08-17 10:48:38 UTC (rev 19835)
@@ -0,0 +1,51 @@
+testsuite EditorService
+
+topsort Module
+
+test Empty module
+  "module foo" -> Module("foo", NoImports(), [])
+
+test Empty module with imports
+  "module foo imports bar baz" -> Module("foo", Imports([Import("bar"), Import("baz")]), [])
+  
+test Larger module
+  "module foo
+   imports bar baz
+  
+   folding
+     sortX
+  
+   outliner
+     sortY
+  
+   colorer
+     sortZ : darkred
+  
+  " ->
+  Module(
+    "foo"
+  , Imports(_)
+  , [ Folding("",  [FoldRule(Sort("sortX"),None)])
+    , Outliner("", [OutlineRule(Sort("sortY"))])
+    , Colorer("",  [ColorRule(Sort("sortZ"),AttributeRef("darkred"))])
+    ]
+  )
+  
+test Token-based colors
+  "module foo
+  
+   colorer
+     TK_LAYOUT : green
+     TK_VAR    : 1 2 3 bold
+  
+  " ->
+  Module(
+    "foo"
+  , NoImports
+  , [ Colorer("",
+        [ ColorRule(Sort("TK_LAYOUT"),AttributeRef("green"))
+        , ColorRule(Sort("TK_VAR"),Attribute(ColorRGB("1","2","3"),NoColor,BOLD))
+        ]
+      )
+    ]
+  )

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-editor-service.sh
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/tests/test-editor-service.sh	2009-08-11 07:38:56 UTC (rev 19807)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-editor-service.sh	2009-08-17 10:48:38 UTC (rev 19835)
@@ -3,10 +3,10 @@
 cd `dirname $0`
 
 rm -rf editorservice
-mdkir editorservice
+mkdir editorservice
 cd editorservice
 
 ES=../../src/syntax/EditorService
 
 ../../sdf2imp -i $ES.def -p $ES.tbl -m EditorService -s Module -e esv --verbose 2
-../../sdf2imp -i $ES.def --verbose 2
+../../sdf2imp -i $ES.def -m EditorService --verbose 2

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/tests/test-stratego-java.sh	2009-08-11 07:38:56 UTC (rev 19807)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh	2009-08-17 10:48:38 UTC (rev 19835)
@@ -8,5 +8,5 @@
 
 SJ=~/.nix-profile/share/java-front/Stratego-Java-15
 
-../../sdf2imp -i $SJ.def -p $SJ.tbl -m Stratego-Java-15 -s Module[StrategoHost] -e str --verbose 2
-../../sdf2imp -i $SJ.def
+../../sdf2imp -i $SJ.def -m Stratego-Java-15 -p $SJ.tbl -e str -s "Module[StrategoHost]" --verbose 2
+../../sdf2imp -i $SJ.def -m Stratego-Java-15



From L.C.L.Kats at tudelft.nl  Mon Aug 17 16:41:15 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 17 Aug 2009 14:41:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19836 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables
Message-ID: <200908171440.n7HEexX6026138@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-17 14:41:15 +0000 (Mon, 17 Aug 2009)
New Revision: 19836

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19836&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableFold.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeysFold.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableValuesFold.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_keys_fold.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_values_fold.java

Log:
More parallel table stub classes.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	2009-08-17 10:48:38 UTC (rev 19835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	2009-08-17 14:41:15 UTC (rev 19836)
@@ -26,7 +26,6 @@
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
-
         if(!(Tools.isTermInt(targs[0])))
             return false;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_keys_fold.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_keys_fold.java	2009-08-17 10:48:38 UTC (rev 19835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_keys_fold.java	2009-08-17 14:41:15 UTC (rev 19836)
@@ -18,7 +18,7 @@
 
 public class SSL_table_keys_fold extends AbstractPrimitive {
 
-    SSL_table_keys_fold() {
+    public SSL_table_keys_fold() {
         super("SSL_table_keys_fold", 1, 2);
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_values_fold.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_values_fold.java	2009-08-17 10:48:38 UTC (rev 19835)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_values_fold.java	2009-08-17 14:41:15 UTC (rev 19836)
@@ -18,7 +18,7 @@
 
 public class SSL_table_values_fold extends AbstractPrimitive {
 
-    SSL_table_values_fold() {
+    public SSL_table_values_fold() {
         super("SSL_table_values_fold", 1, 2);
     }
     

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableFold.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableFold.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableFold.java	2009-08-17 14:41:15 UTC (rev 19836)
@@ -0,0 +1,10 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.interpreter.library.ssl.SSL_table_fold;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableFold extends SSL_table_fold {
+
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeysFold.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeysFold.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeysFold.java	2009-08-17 14:41:15 UTC (rev 19836)
@@ -0,0 +1,10 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.interpreter.library.ssl.SSL_table_keys_fold;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableKeysFold extends SSL_table_keys_fold {
+	// TODO: ParallelTableKeysFold
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableValuesFold.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableValuesFold.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableValuesFold.java	2009-08-17 14:41:15 UTC (rev 19836)
@@ -0,0 +1,10 @@
+package org.strategoxt.lang.parallel.tables;
+
+import org.spoofax.interpreter.library.ssl.SSL_table_values_fold;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableValuesFold extends SSL_table_values_fold {
+	// TODO
+}



From L.C.L.Kats at tudelft.nl  Tue Aug 18 10:13:39 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 08:13:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19837 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
Message-ID: <200908180813.n7I8DMSU007780@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 08:13:39 +0000 (Tue, 18 Aug 2009)
New Revision: 19837

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19837&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java

Log:
Fixed config initialization.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-17 14:41:15 UTC (rev 19836)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-18 08:13:39 UTC (rev 19837)
@@ -1,10 +1,17 @@
 package org.strategoxt.lang.compat;
 
+import static org.strategoxt.lang.Term.*;
+
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.compat.override.jsglr_parser;
@@ -12,7 +19,6 @@
 import org.strategoxt.lang.compat.override.performance_tweaks;
 import org.strategoxt.lang.compat.override.xtc_compat;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
-import org.strategoxt.libstratego_lib.set_config_0_0;
 
 /**
  * Handles per-context library compatibility components.
@@ -54,9 +60,7 @@
 		if ("libstratego_lib".equals(component)) {
 			context.addOperatorRegistry(new CompatLibrary());
 			performance_tweaks.init(context);
-			ITermFactory factory = context.getFactory();
-			set_config_0_0.instance.invoke(context,
-					factory.makeTuple(factory.makeString("JAVA_PLATFORM"), factory.makeInt(1)));
+			initConfig();
 			xtc_compat.init(context); // also deals with native calls for libstratego-lib
 		} else if ("libstratego_sglr".equals(component)) {
 			WrappedATermFactory atermFactory = new WrappedATermFactory();
@@ -69,4 +73,27 @@
 			libstrc_compat.init(context);
 		}
 	}
+
+	private void initConfig() {
+		ITermFactory factory = context.getFactory();
+		Map<IStrategoTerm, IStrategoTerm> config = getConfigTable();
+		
+		config.put(factory.makeString("JAVA_PLATFORM"), factory.makeInt(1));
+	}
+
+	private Map<IStrategoTerm, IStrategoTerm> getConfigTable() {
+		ITermFactory factory = context.getFactory();
+		SSLLibrary library = (SSLLibrary) context.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+		Map<IStrategoTerm, IStrategoTerm> allTables = library.getHashtable(library.getTableTableRef());
+		
+		IStrategoInt configRef = (IStrategoInt) allTables.get(factory.makeString("config"));
+		if (configRef == null) {
+			IStrategoTerm[] config = { factory.makeInt(117), factory.makeInt(75) };
+			configRef = (IStrategoInt) context.invokePrimitive("SSL_hashtable_create", config[0], NO_STRATEGIES, config);
+			IStrategoAppl configTerm = factory.makeAppl(factory.makeConstructor("Hashtable", 1), configRef);
+			allTables.put(factory.makeString("config"), configTerm);
+		}
+		
+		return library.getHashtable(configRef.intValue());
+	}
 }



From L.C.L.Kats at tudelft.nl  Tue Aug 18 10:36:36 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 08:36:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19838 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator
	spoofax-imp/trunk/org.strategoxt.imp.generator/lib
	strc-java/trunk/java
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
Message-ID: <200908180836.n7I8aJlH007881@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 08:36:36 +0000 (Tue, 18 Aug 2009)
New Revision: 19838

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19838&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
   strc-java/trunk/java/spoofax-libs.jar

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-18 08:13:39 UTC (rev 19837)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-18 08:36:36 UTC (rev 19838)
@@ -126,3 +126,7 @@
 	[ -e src/include ] || mkdir src/include
 	baf2trm  -i $< -o $@ # cp $< $@
 
+new-make-permissive :
+	rm -rf $BRIDGE/permissive-grammars/trans/make-permissive/bin
+	make jar -C $BRIDGE/permissive-grammars/trans/make-permissive
+	cp $BRIDGE/permissive-grammars/trans/make-permissive/bin/*.jar lib

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-18 08:13:39 UTC (rev 19837)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-18 08:36:36 UTC (rev 19838)
@@ -52,6 +52,8 @@
 		} else {
 			context = new Context(parentContext.getFactory(), parentContext.getIOAgent());
 		}
+		
+		// TODO: call init()
 
 		try {
 			IStrategoTerm result = strategy.invoke(context, tvars[1]);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-08-18 08:13:39 UTC (rev 19837)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-08-18 08:36:36 UTC (rev 19838)
@@ -27,7 +27,7 @@
   
   override read-text-from-stream =
     ?Stream(stream);
-    prim("SSL_EXT_read_text_from_stream", sticsream)
+    prim("SSL_EXT_read_text_from_stream", stream)
   
   override crush(nul, sum) =
     SRTS-EXT-crush(nul, sum, id)

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Tue Aug 18 12:13:18 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 10:13:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19839 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
Message-ID: <200908181013.n7IAD1f7009778@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 10:13:18 +0000 (Tue, 18 Aug 2009)
New Revision: 19839

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19839&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Stratego-Java-EditorService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-18 08:36:36 UTC (rev 19838)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-18 10:13:18 UTC (rev 19839)
@@ -41,7 +41,7 @@
       output := <permissive-grammar-target>;
       args   := ["-i", input, "-o", output];
       if <get-config> "JAVA_PLATFORM" then
-        <call> ("org.strategoxt.permissivegrammars.main-make-permissive", args)
+        <call> ("org.strategoxt.permissivegrammars.make_permissive.main-make-permissive", args)
       else
         // FIXME: should we even bother making make-permissive an xtc executable?
         <call> ("make-permissive", args)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str	2009-08-18 08:36:36 UTC (rev 19838)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str	2009-08-18 10:13:18 UTC (rev 19839)
@@ -25,17 +25,17 @@
     );
     
     require-option(
-      rules(StartSymbol := <find-start-symbol>)
+      StartSymbol <+ rules(StartSymbol := <find-start-symbol>)
     | <NoExistingDescriptor < !"Start symbols (-s)" + !"language start symbols">
     );
     
     require-option(
-     rules(BasePackage := <find-package-name>)
+      BasePackage <+ rules(BasePackage := <find-package-name>)
     | <NoExistingDescriptor < !"Package name (-p)" + !"language id">
     );
     
     require-option(
-      rules(EditorExtensions := <find-editor-extensions>)
+      EditorExtensions <+ rules(EditorExtensions := <find-editor-extensions>)
     | <NoExistingDescriptor < !"Editor file extensions (-e)" + !"language extensions">
     )
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str	2009-08-18 08:36:36 UTC (rev 19838)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str	2009-08-18 10:13:18 UTC (rev 19839)
@@ -25,7 +25,7 @@
     pkgname      := <BasePackage <+ default-package-name>;
     extensions   := <require-option(EditorExtensions |"File extensions (-e)")>;
     parsetable   := <parse-table-target>;
-    startsymbols := <StartSymbol>;
+    startsymbols := <![<StartSymbol>] <+ ![]>;
     
     !|[
       module <main-descriptor-name>
@@ -50,5 +50,5 @@
         ~
         extensions: ~extensions
         table:  ~parsetable
-        start symbols: ~startsymbols
+        start symbols: ~*startsymbols
     ]|

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	2009-08-18 08:36:36 UTC (rev 19838)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	2009-08-18 10:13:18 UTC (rev 19839)
@@ -7,7 +7,7 @@
   sorts
   
     LanguageProperty PropertyValue NoContinuation PropertyValues URL
-    FenceDef BlockCommentDef StartSymbols PropertyKeyword
+    FenceDef BlockCommentDef PropertyKeyword
   
   syntax
   
@@ -31,8 +31,6 @@
     { PropertyValue ","}* -> PropertyValues {cons("Values")}
     String                -> PropertyValue
     PropertyKeyword       -> PropertyValue {reject}
-    PropertyValues        -> StartSymbols
-    "_"                   -> StartSymbols {cons("NoStartSymbols"), prefer}
   
   	%% General language properties
   
@@ -41,7 +39,7 @@
     "extensions"      ":" PropertyValues -> LanguageProperty {cons("Extensions")}
     "description"     ":" PropertyValue  -> LanguageProperty {cons("Description")}
     "table"           ":" PropertyValue  -> LanguageProperty {cons("Table")}
-    "start" "symbols" ":" StartSymbols   -> LanguageProperty {cons("StartSymbols")}
+    "start" "symbols" ":" PropertyValues -> LanguageProperty {cons("StartSymbols")}
     "url"             ":" URL            -> LanguageProperty {cons("URL")}
     "extends"         ":" PropertyValues -> LanguageProperty {cons("Extends")}
     "aliases"         ":" PropertyValues -> LanguageProperty {cons("Aliases")} %% deprecated

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Stratego-Java-EditorService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Stratego-Java-EditorService.sdf	2009-08-18 08:36:36 UTC (rev 19838)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Stratego-Java-EditorService.sdf	2009-08-18 10:13:18 UTC (rev 19839)
@@ -39,16 +39,16 @@
 
     QuotedTerm -> Id {cons("FromMetaExpr"), avoid}
     QuotedTerm -> PropertyValue {cons("FromMetaExpr"), avoid}
-    QuotedTerm -> PropertyValues {cons("FromMetaExpr"), avoid}
     QuotedTerm -> URL {cons("FromMetaExpr"), avoid}
     QuotedTerm -> ModuleName {cons("FromMetaExpr")}
     QuotedTerm -> Color {cons("FromMetaExpr")}
     QuotedTerm -> Font  {cons("FromMetaExpr")}
     QuotedTerm -> SectionName {cons("FromMetaExpr")}
     
-    QuotedTerms -> OutlineRule* {cons("FromMetaExpr")}
-    QuotedTerms -> ColorRule*   {cons("FromMetaExpr")}
-    QuotedTerms -> FoldingRule* {cons("FromMetaExpr")}
+    QuotedTerms -> OutlineRule*   {cons("FromMetaExpr")}
+    QuotedTerms -> ColorRule*     {cons("FromMetaExpr")}
+    QuotedTerms -> FoldingRule*   {cons("FromMetaExpr")}
+    QuotedTerms -> PropertyValues {cons("FromMetaExpr")}
 
     "~"  Term[[StrategoHost]] -> QuotedTerm  {bracket}
     "~*" Term[[StrategoHost]] -> QuotedTerms {bracket}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-18 08:36:36 UTC (rev 19838)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-18 10:13:18 UTC (rev 19839)
@@ -128,6 +128,7 @@
 
 		setControl(container);
 		setPageComplete(false);
+		inputLanguageName.setFocus();
 	}
 
 	private void distributeLanguageName() {



From L.C.L.Kats at tudelft.nl  Tue Aug 18 13:03:25 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 11:03:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19840 - LennartKats -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
	spoofax-imp/trunk/org.strategoxt.imp.generator
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
	strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
	strc-java/trunk/trans
Message-ID: <200908181103.n7IB38p0010420@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 11:03:25 +0000 (Tue, 18 Aug 2009)
New Revision: 19840

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19840&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
   strc-java/trunk/trans/s2j.str

Log:
Dynamic Java strategy calling fixes/functionality.

Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-18 10:13:18 UTC (rev 19839)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-18 11:03:25 UTC (rev 19840)
@@ -18,7 +18,7 @@
 
 java bin/make_permissive.java : make-permissive.str $(STRS)
 	[ -e bin ] || mkdir bin
-	strj -i $< -o $@ -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
+	strj -i $< -o bin/make_permissive.java -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
 
 jar bin/make_permissive.jar : bin/make_permissive.java
 	strj-jar -i $<

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	2009-08-18 10:13:18 UTC (rev 19839)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	2009-08-18 11:03:25 UTC (rev 19840)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry exported="true" kind="lib" path="lib/sdf2imp.jar" sourcepath="src-gen"/>
-	<classpathentry exported="true" kind="lib" path="lib/make_permissive.jar" sourcepath="/permissive-grammars/trans/make-permissive"/>
+	<classpathentry exported="true" kind="lib" path="lib/make_permissive.jar" sourcepath="/permissive-grammars/trans/make-permissive/bin"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="output" path="bin"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-18 10:13:18 UTC (rev 19839)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-18 11:03:25 UTC (rev 19840)
@@ -41,7 +41,7 @@
       output := <permissive-grammar-target>;
       args   := ["-i", input, "-o", output];
       if <get-config> "JAVA_PLATFORM" then
-        <call> ("org.strategoxt.permissivegrammars.make_permissive.main-make-permissive", args)
+        <call> ("org.strategoxt.permissivegrammars.make-permissive.main-make-permissive", args)
       else
         // FIXME: should we even bother making make-permissive an xtc executable?
         <call> ("make-permissive", args)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-18 10:13:18 UTC (rev 19839)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-18 11:03:25 UTC (rev 19840)
@@ -52,17 +52,23 @@
     }
     
     public Context(ITermFactory factory, IOAgent ioAgent) {
-    	this(factory, ioAgent, new HashMap<String, IOperatorRegistry>(), new ArrayList<IOperatorRegistry>());
+    	this.factory = factory;
+    	this.operatorRegistryMap = new HashMap<String, IOperatorRegistry>();
+    	this.operatorRegistries = new ArrayList<IOperatorRegistry>();
+    	
         SSLLibrary ssl = new SSLLibrary();
 		operatorRegistryMap.put(SSLLibrary.REGISTRY_NAME, ssl);
         operatorRegistries.add(ssl);
+
+    	if (ioAgent != null) setIOAgent(ioAgent);
+
+        compat.init();
     }
     
     protected Context(ITermFactory factory, IOAgent ioAgent, Map<String, IOperatorRegistry> operatorRegistryMap, List<IOperatorRegistry> operatorRegistries) {
     	this.factory = factory;
     	this.operatorRegistryMap = operatorRegistryMap;
     	this.operatorRegistries = operatorRegistries;
-    	
     	if (ioAgent != null) setIOAgent(ioAgent);
     	compat.init();
     }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-18 10:13:18 UTC (rev 19839)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-18 11:03:25 UTC (rev 19840)
@@ -9,7 +9,6 @@
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
-import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -84,14 +83,18 @@
 	private Map<IStrategoTerm, IStrategoTerm> getConfigTable() {
 		ITermFactory factory = context.getFactory();
 		SSLLibrary library = (SSLLibrary) context.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+		if (library == null) throw new IllegalStateException("Standard operator registry not found");
 		Map<IStrategoTerm, IStrategoTerm> allTables = library.getHashtable(library.getTableTableRef());
 		
-		IStrategoInt configRef = (IStrategoInt) allTables.get(factory.makeString("config"));
-		if (configRef == null) {
+		IStrategoTerm configTerm = allTables.get(factory.makeString("config"));
+		IStrategoInt configRef; 
+		if (configTerm == null) {
 			IStrategoTerm[] config = { factory.makeInt(117), factory.makeInt(75) };
 			configRef = (IStrategoInt) context.invokePrimitive("SSL_hashtable_create", config[0], NO_STRATEGIES, config);
-			IStrategoAppl configTerm = factory.makeAppl(factory.makeConstructor("Hashtable", 1), configRef);
+			configTerm = factory.makeAppl(factory.makeConstructor("Hashtable", 1), configRef);
 			allTables.put(factory.makeString("config"), configTerm);
+		} else {
+			configRef = (IStrategoInt) configTerm.getSubterm(0);
 		}
 		
 		return library.getHashtable(configRef.intValue());

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-18 10:13:18 UTC (rev 19839)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-18 11:03:25 UTC (rev 19840)
@@ -3,6 +3,8 @@
 import static org.spoofax.interpreter.core.Tools.*;
 
 import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -26,9 +28,12 @@
  */
 public class SSL_EXT_java_call extends AbstractPrimitive {
 	
-	private static Map<String,Strategy> invocationCache =
+	private static Map<String, Strategy> invocationCache =
 		new ConcurrentHashMap<String, Strategy>();
 	
+	private static Map<String, Method> initCache =
+		new ConcurrentHashMap<String, Method>();
+	
 	public SSL_EXT_java_call() {
 		super("SSL_EXT_java_call", 0, 3);
 	}
@@ -40,9 +45,12 @@
 		
 		if (!isTermString(tvars[0])) return false;
 		if (!isTermInt(tvars[2])) return false;
+
+		String className = ((IStrategoString) tvars[0]).stringValue();
+		IStrategoTerm arg = tvars[1];
 		boolean sameContext = ((IStrategoInt) tvars[2]).intValue() != 0;
 		
-		Strategy strategy = getStrategy(((IStrategoString) tvars[0]).stringValue());
+		Strategy strategy = getStrategy(className);
 		if (strategy == null) return false;
 
 		Context parentContext = ((InteropContext) env).getContext();
@@ -51,12 +59,12 @@
 			context = parentContext;
 		} else {
 			context = new Context(parentContext.getFactory(), parentContext.getIOAgent());
+			context = initContext(context, className);
+			if (context == null) return false;
 		}
-		
-		// TODO: call init()
 
 		try {
-			IStrategoTerm result = strategy.invoke(context, tvars[1]);
+			IStrategoTerm result = strategy.invoke(context, arg);
 			if (result == null) {
 				return false;
 			} else {
@@ -70,23 +78,62 @@
 		}
 	}
 	
+	protected static Context initContext(Context context, String className) {
+		try {
+			Method method = initCache.get(className);
+			if (method == null) {
+				String libraryName = toLibraryName(className);
+				Class<?> library;
+				try {
+					library = Class.forName(libraryName);
+				} catch (ClassNotFoundException e) {
+					library = Class.forName(toStrategoName(libraryName));
+				}
+				method = library.getMethod("init", Context.class);
+				initCache.put(className, method);
+			}
+			return (Context) method.invoke(null, context);
+		} catch (ClassNotFoundException e) {
+			return null;
+		} catch (IllegalArgumentException e) {
+			return null;
+		} catch (IllegalAccessException e) {
+			return null;
+		} catch (NoSuchMethodException e) {
+			return null;
+		} catch (ClassCastException e) {
+			throw new StrategoException("Could not dynamically call strategy " + className, e);
+		} catch (InvocationTargetException e) {
+			throw new StrategoException("Could not dynamically call strategy " + className, e);
+		} catch (SecurityException e) {
+			throw new StrategoException("Could not dynamically call strategy " + className, e);
+		}
+	}
+
 	protected static Strategy getStrategy(String className) {
 		Strategy cached = invocationCache.get(className);
 		if (cached != null) return cached;
-		
+
+		String innerClassName = toInnerClassName(className);
+
 		try {
 			Class<?> library;
 			try {
-				library = Class.forName(className);
+				library = Class.forName(toStrategoName(innerClassName) + "_0_0");
+				
+				Field instance = library.getField("instance");
+
+				if (!Strategy.class.isAssignableFrom(instance.getDeclaringClass()))
+					return null;
+				
+				cached = (Strategy) instance.get(null);
+				
 			} catch (ClassNotFoundException e) {
 				library = Class.forName(toStrategoName(className));
+				cached = (Strategy) library.getMethod("getMainStrategy", new Class[0]).invoke(null);
+				return cached;
 			}
-			Field instance = library.getField("instance");
-
-			if (!Strategy.class.isAssignableFrom(instance.getDeclaringClass()))
-				return null;
 			
-			cached = (Strategy) instance.get(null);
 			invocationCache.put(className, cached);
 			return cached;
 			
@@ -98,19 +145,42 @@
 			return null;
 		} catch (IllegalAccessException e) {
 			return null;
+		} catch (NoSuchMethodException e) {
+			return null;
+		} catch (ClassCastException e) {
+			throw new StrategoException("Could not dynamically call strategy " + className, e);
+		} catch (InvocationTargetException e) {
+			throw new StrategoException("Could not dynamically call strategy " + className, e);
 		} catch (SecurityException e) {
 			throw new StrategoException("Could not dynamically call strategy " + className, e);
 		}
 	}
 	
+	private static String toInnerClassName(String className) {
+		int lastDot = className.lastIndexOf('.');
+		return className.substring(0, lastDot) + "$" + className.substring(lastDot + 1);
+	}
+	
 	private static String toStrategoName(String className) {
 		StringBuilder result = new StringBuilder();
 		String[] parts = className.split("\\.");
-		parts[parts.length - 1] = Interpreter.cify(parts[parts.length - 1]);
 		
-		result.append(parts[0]);
+		result.append(Interpreter.cify(parts[0]));
 		for (int i = 1; i < parts.length; i++) {
 			result.append('.');
+			result.append(Interpreter.cify(parts[i]));
+		}
+		
+		return result.toString();
+	}
+	
+	private static String toLibraryName(String className) {
+		StringBuilder result = new StringBuilder();
+		String[] parts = className.split("\\.");
+		
+		result.append(parts[0]);
+		for (int i = 1, max = parts.length - 1; i < max; i++) {
+			result.append('.');
 			result.append(parts[i]);
 		}
 		

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-18 10:13:18 UTC (rev 19839)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-18 11:03:25 UTC (rev 19840)
@@ -22,7 +22,12 @@
   override call =
     ?(program, args);
     <is-substring(!".")> program;
-    prim("SSL_EXT_java_call", program, args, 0)
+    if <is-list> args then
+      prim("SSL_EXT_java_call", program, [program | args], 0)
+    else
+      warn(|"Program arguments for <call> should be a list");
+      prim("SSL_EXT_java_call", program, args, 0)
+    end
   <+
     ?(program, args);
     prim("SSL_EXT_call", program, args)
\ No newline at end of file

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-08-18 10:13:18 UTC (rev 19839)
+++ strc-java/trunk/trans/s2j.str	2009-08-18 11:03:25 UTC (rev 19840)
@@ -226,7 +226,12 @@
       x' := <jify> x
 
   java-main-methods :
-    _ -> []
+    _ ->
+    class-body-dec* |[
+      public static Strategy getMainStrategy() {
+        return null;
+      }
+    ]|
     where
       <get-config> "--library"
     ; not(<get-config> "-m")
@@ -260,6 +265,10 @@
        init(context);
        return context.invokeStrategyCLI(x_main.instance, "~x_name", args);
      }
+     
+     public static Strategy getMainStrategy() {
+       return x_main;
+     }
     ]|
     where
       <get-config> "-m" <+ not(<get-config> "--library")



From L.C.L.Kats at tudelft.nl  Tue Aug 18 13:29:36 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 11:29:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19841 - LennartKats - in
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive:
	. syntax
Message-ID: <200908181129.n7IBTJ3j010617@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 11:29:36 +0000 (Tue, 18 Aug 2009)
New Revision: 19841

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19841&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/syntax/Comments.sdf
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr

Log:
Polishing.

Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr	2009-08-18 11:03:25 UTC (rev 19840)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr	2009-08-18 11:29:36 UTC (rev 19841)
@@ -14,9 +14,11 @@
          WATEREOF -/- ~[]
          
        lexical syntax
+         ~%% Lexical insertion recovery rules
          p1*
        
        syntax
+         ~%% Kernel syntax insertion recovery rules
          p2*
     ]|
     where

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/syntax/Comments.sdf
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/syntax/Comments.sdf	2009-08-18 11:03:25 UTC (rev 19840)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/syntax/Comments.sdf	2009-08-18 11:29:36 UTC (rev 19841)
@@ -17,7 +17,7 @@
 
   syntax  
   
-    "%%" <CommentLine[[E]]-LEX> -> <E-CF> {cons("CommentLine")}
+    "~%%" <CommentLine[[E]]-LEX> -> <E-CF> {cons("CommentLine")}
   
   context-free syntax
   

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	2009-08-18 11:03:25 UTC (rev 19840)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	2009-08-18 11:29:36 UTC (rev 19841)
@@ -12,6 +12,7 @@
          WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
        
        lexical syntax
+         ~%% Water-based recovery rules
          [A-Za-z0-9\_]                  -> WATERTOKENSTART {recover}
          WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN
          ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}



From L.C.L.Kats at tudelft.nl  Tue Aug 18 13:30:02 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 11:30:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19842 - LennartKats -
	in spoofax-imp/trunk: . org.strategoxt.imp.generator
	org.strategoxt.imp.generator/lib
	org.strategoxt.imp.generator/src/sdf2imp
Message-ID: <200908181129.n7IBTj0F010622@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 11:30:02 +0000 (Tue, 18 Aug 2009)
New Revision: 19842

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19842&view=rev

Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str

Log:
Polishing.

Changes:

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-08-18 11:29:36 UTC (rev 19841)
+++ spoofax-imp/trunk/Makefile	2009-08-18 11:30:02 UTC (rev 19842)
@@ -8,3 +8,6 @@
 clean :
 	$(MAKE) -C org.strategoxt.imp.generator clean
 	$(MAKE) -C org.strategoxt.imp.editors.editorservice clean
+
+new-make-permissive :
+	$(MAKE) -C org.strategoxt.imp.generator new-make-permissive

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-18 11:29:36 UTC (rev 19841)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-18 11:30:02 UTC (rev 19842)
@@ -127,6 +127,6 @@
 	baf2trm  -i $< -o $@ # cp $< $@
 
 new-make-permissive :
-	rm -rf $BRIDGE/permissive-grammars/trans/make-permissive/bin
-	make jar -C $BRIDGE/permissive-grammars/trans/make-permissive
-	cp $BRIDGE/permissive-grammars/trans/make-permissive/bin/*.jar lib
+	rm -rf $(BRIDGE)/permissive-grammars/trans/make-permissive/bin
+	make jar -C $(BRIDGE)/permissive-grammars/trans/make-permissive
+	cp $(BRIDGE)/permissive-grammars/trans/make-permissive/bin/*.jar lib

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-18 11:29:36 UTC (rev 19841)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-18 11:30:02 UTC (rev 19842)
@@ -106,7 +106,10 @@
     create-example-file;
     copy-strategoxt-jar;
     
-    <copy-or-create-parse-table> input
+    <copy-or-create-parse-table> input;
+    
+    say(!"");
+    say(!"sdf2imp project generator successfully completed with 0 fatal errors.")
   
   // TODO: XTC detox -_-;;
   sdf2rtg:



From L.C.L.Kats at tudelft.nl  Tue Aug 18 14:32:49 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 12:32:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19843 - LennartKats -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
	spoofax-imp/trunk/org.strategoxt.imp.generator/test
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <200908181232.n7ICWVw8011341@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 12:32:49 +0000 (Tue, 18 Aug 2009)
New Revision: 19843

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19843&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-def-file.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-foo.sh
Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Log:
- Added a method SGLRParseController.forceGetParseStream to
  hopefully make the initial colorization of files a bit faster

- Ensured that .def files are copied to the syntax/ dir when necessary.


Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	2009-08-18 11:30:02 UTC (rev 19842)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	2009-08-18 12:32:49 UTC (rev 19843)
@@ -12,7 +12,7 @@
          WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
        
        lexical syntax
-         ~%% Water-based recovery rules
+         ~%% Water-based recovery rule set-up
          [A-Za-z0-9\_]                  -> WATERTOKENSTART {recover}
          WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN
          ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-18 11:30:02 UTC (rev 19842)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-18 12:32:49 UTC (rev 19843)
@@ -66,7 +66,8 @@
     if InputFile then
       !FILE(<InputFile>);
       if FILE(has-extension(|"esv") => esv) then
-        <find-def-file> esv
+        <find-def-file> esv;
+        rules(InputFile := <id>)
       end;
       ?input
     else
@@ -104,7 +105,8 @@
     create-build-xml;
     create-builder-xml;
     create-example-file;
-    copy-strategoxt-jar;
+    copy-jars;
+    copy-def-file;
     
     <copy-or-create-parse-table> input;
     

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-def-file.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-def-file.str	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-def-file.str	2009-08-18 12:32:49 UTC (rev 19843)
@@ -0,0 +1,12 @@
+module sdf2imp/project/copy-def-file
+    
+imports
+  sdf2imp/util/-
+
+strategies
+
+  copy-def-file =
+    if NoExistingDescriptor; InputFile; not(<file-exists> "syntax") then
+      <mkdir> "syntax";
+      <copy-file> (<InputFile>, "syntax")
+    end
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-08-18 11:30:02 UTC (rev 19842)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-08-18 12:32:49 UTC (rev 19843)
@@ -5,7 +5,7 @@
 
 strategies
   
-  copy-strategoxt-jar =
+  copy-jars =
     if JarLocation then
       <file-exists <+ mkdir> "aux/";
       JarLocation;

Added: spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-foo.sh
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-foo.sh	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-foo.sh	2009-08-18 12:32:49 UTC (rev 19843)
@@ -0,0 +1,9 @@
+#!/bin/bash -e
+
+cd `dirname $0`
+
+rm -rf foo
+mkdir foo
+cd foo
+
+../../sdf2imp -m Foo -e foo --verbose 2


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-foo.sh
___________________________________________________________________
Added: svn:executable
   + *

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-08-18 11:30:02 UTC (rev 19842)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-08-18 12:32:49 UTC (rev 19843)
@@ -72,7 +72,9 @@
 	 * Get the current parsestream.
 	 */
 	public PrsStream getParseStream() {
-		return getTokenizer().getParseStream();
+		SGLRTokenizer tokenizer = getTokenizer();
+		if (tokenizer == null) return null;
+		return tokenizer.getParseStream();
 	}
 	
 	public SGLRParseController getController() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-08-18 11:30:02 UTC (rev 19842)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-08-18 12:32:49 UTC (rev 19843)
@@ -1,15 +1,20 @@
 package org.strategoxt.imp.runtime.parser;
 
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.util.Iterator;
 
 import lpg.runtime.IToken;
 import lpg.runtime.PrsStream;
 
+import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.language.Language;
@@ -94,7 +99,7 @@
 			: project.getRawProject().getLocation().append(path);
     }
     
-    public IResource getResource() {
+    public IFile getResource() {
     	IPath path = getPath();
 		IProject project = getProject().getRawProject();
 		path = path.removeFirstSegments(path.matchingFirstSegments(project.getLocation()));
@@ -242,8 +247,9 @@
 	}
 
 	public Iterator<IToken> getTokenIterator(IRegion region) {
-		PrsStream stream = parser.getParseStream();
-		if (stream.getTokens().size() == 0 || getCurrentAst() == null) {
+		PrsStream stream = forceGetParseStream();
+		
+		if (stream == null || stream.getTokens().size() == 0 || getCurrentAst() == null) {
 			// Parse hasn't succeeded yet, consider the entire stream as one big token
 			stream.addToken(new SGLRToken(stream, region.getOffset(), stream.getStreamLength() - 1,
 					TokenKind.TK_UNKNOWN.ordinal()));
@@ -251,4 +257,32 @@
 		
 		return new SGLRTokenIterator(stream, region);
 	}
+
+	/**
+	 * Get a parse stream for the current file, enforcing a new parse
+	 * if it hasn't been parsed before.
+	 */
+	private PrsStream forceGetParseStream() {
+		try {
+			PrsStream stream = parser.getParseStream();
+			
+			if (stream == null) {
+				InputStream input = getResource().getContents();
+	            InputStreamReader reader = new InputStreamReader(input);
+	            StringBuilder contents = new StringBuilder();
+	            char[] buffer = new char[2048];
+	            
+	            for (int read = 0; read != -1; read = reader.read(buffer))
+	                    contents.append(buffer, 0, read);
+	
+				parse(contents.toString(), true, new NullProgressMonitor());
+				stream = parser.getParseStream();
+			}
+			return stream;
+		} catch (IOException e) {
+			return null;
+		} catch (CoreException e) {
+			return null;
+		}
+	}
 }



From L.C.L.Kats at tudelft.nl  Tue Aug 18 16:02:07 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 14:02:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19844 - LennartKats -
	spoofax-imp/tags
Message-ID: <200908181401.n7IE1nXw013173@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 14:02:07 +0000 (Tue, 18 Aug 2009)
New Revision: 19844

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19844&view=rev

Added:
   spoofax-imp/tags/spoofax-imp-partial-background-building/

Log:
Tagged a revision of Spoofax-IMP that partially supported background building of editors.

Changes:



From L.C.L.Kats at tudelft.nl  Tue Aug 18 17:24:34 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 15:24:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19845 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <200908181524.n7IFOGcq014604@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 15:24:34 +0000 (Tue, 18 Aug 2009)
New Revision: 19845

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19845&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyColor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyTextAttribute.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/FileTrackingIOAgent.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TokenColorerFactory.java

Log:
* Simplified editor building:
  - moved to using Ant-initiated editor builds only;
  - removed dependency tracking capabilities from the dynamic builder

* Fixed a SWT Color-related deadlock condition


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-18 14:02:07 UTC (rev 19844)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-18 15:24:34 UTC (rev 19845)
@@ -52,8 +52,9 @@
       MainDescriptorName   := <id>
       DescriptorNamePrefix := <remove-extension>
     );
+    with(<chdir> <dirname>; <chdir> "..");
     guarantee-extension(|"def"); // remove .main.esv
-    with(<chdir> "..");
+    base-filename;
     (file-exists <+ <conc-strings> ("syntax/", <id>));
     if not(file-exists) then
       fatal-err(|"Accompanying .def file not found.")
@@ -62,7 +63,6 @@
 strategies
 
   sdf2imp =
-    check-options;
     if InputFile then
       !FILE(<InputFile>);
       if FILE(has-extension(|"esv") => esv) then
@@ -78,6 +78,7 @@
       input := <pack-sdf> FILE(<conc-strings> ("syntax/", <get-main-class-name>, ".sdf"))
     end;
   
+    check-options;
     configure-main-descriptor;
     <sdf2rtg> input;
   
@@ -110,7 +111,6 @@
     
     <copy-or-create-parse-table> input;
     
-    say(!"");
     say(!"sdf2imp project generator successfully completed with 0 fatal errors.")
   
   // TODO: XTC detox -_-;;

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-18 14:02:07 UTC (rev 19844)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-18 15:24:34 UTC (rev 19845)
@@ -50,8 +50,8 @@
         
         <target name="sdf2imp-eclipse" depends="sdf2table">
             <!-- HACK: Trigger the Eclipse builder rather than build it here -->
-            <touch file="${editor}/${esvmodule}.main.esv"/>
-            <eclipse.refreshLocal resource="${editor}/${esvmodule}.main.esv"/>
+            <touch file="include/${esvmodule}.packed.esv"/>
+            <eclipse.refreshLocal resource="include/${esvmodule}.packed.esv"/>
         </target>
         
         <target name="sdf2imp-standalone" depends="sdf2table">

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-18 14:02:07 UTC (rev 19844)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-18 15:24:34 UTC (rev 19845)
@@ -3,10 +3,6 @@
 import static org.eclipse.core.resources.IMarker.*;
 
 import java.io.IOException;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
 
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IPath;
@@ -15,39 +11,30 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.libstratego_lib;
-import org.strategoxt.imp.editors.editorservice.EditorServiceParseController;
 import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoExit;
 
 /**
+ * Runs the project generator on modified editor descriptors.
+ * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class DynamicDescriptorBuilder {
 	
-	private final Map<String, Set<IResource>> mainEditorFiles =
-		new HashMap<String, Set<IResource>>();
-	
-	private final Map<IResource, Set<String>> includedEditorFiles =
-		new HashMap<IResource, Set<String>>();
-	
-	/**
-	 * The set of main files that just has been updated in the current updating pass.
-	 */
-	private final Set<IResource> upToDateMainFiles =
-		new HashSet<IResource>();
-	
 	// TODO: Use (and properly clean up) new marker type for internal errors?
+	//       (also seen in DynamicDescriptorUpdater)
 	private final AstMessageHandler messageHandler =
 		new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
 	
 	private final Context context;
 	
-	private final FileTrackingIOAgent agent;
+	private final EditorIOAgent agent;
 	
 	private final DynamicDescriptorUpdater loader;
 	
@@ -55,10 +42,8 @@
 		try {
 			this.loader = loader;
 			
-			agent = new FileTrackingIOAgent();		
-			agent.setDescriptor(EditorServiceParseController.getDescriptor());
-			context = new Context(Environment.getTermFactory());
-			context.setIOAgent(agent);
+			agent = new EditorIOAgent();
+			context = new Context(Environment.getTermFactory(), agent);
 			sdf2imp.init(context);
 			
 		} catch (Throwable e) { // (catch classes not loading, etc.)
@@ -73,22 +58,7 @@
 		String filename = location.toOSString();
 		
 		try {
-			Set<IResource> mainFiles = mainEditorFiles.get(filename);
-			if (mainFiles != null) {
-				for (IResource mainFile : mainFiles) {
-					if (!upToDateMainFiles.contains(mainFile)) {
-						upToDateMainFiles.add(mainFile);
-						monitor.beginTask("Building " + mainFile.getName(), IProgressMonitor.UNKNOWN);
-						buildDescriptor(mainFile);
-					}
-				}
-			} else if (!isMainFile(filename)) {
-				// Simply ignore non main files for now
-				// Environment.logException("Could not resolve dependencies for updated file " + resource.getName());
-			}
-			
-			if (isMainFile(filename) && !upToDateMainFiles.contains(resource)) {
-				upToDateMainFiles.add(resource);
+			if (resource.exists() && isMainFile(filename)) {
 				monitor.beginTask("Building " + resource.getName(), IProgressMonitor.UNKNOWN);
 				buildDescriptor(resource);
 			}
@@ -99,10 +69,6 @@
 			Environment.logException("Unable to build descriptor for " + filename, e);
 		}
 	}
-	
-	public void invalidateUpdatedResources() {
-		upToDateMainFiles.clear();
-	}
 
 	/**
 	 * Build and load a descriptor file.
@@ -119,8 +85,6 @@
 				return;
 			}
 			
-			updateDependencies(mainFile);
-			
 			String resultPath = ((IStrategoString) result).stringValue();
 			IResource packedDescriptor = mainFile.getParent().getFile(Path.fromOSString(resultPath));
 			loader.loadPackedDescriptor(packedDescriptor);
@@ -160,30 +124,6 @@
 			libstratego_lib.dr_scope_all_end_0_0.instance.invoke(context, input);
 		}
 	}
-
-	private void updateDependencies(IResource mainFile) {
-		// Remove old dependencies		
-		for (String oldDependency : includedEditorFiles.get(mainFile)) {
-			Set<IResource> set = mainEditorFiles.get(oldDependency);
-			if (set != null) set.remove(mainFile);
-		}
-		
-		// Add new dependencies
-		includedEditorFiles.put(mainFile, agent.getTracked());		
-		for (String newDependency : agent.getTracked()) {
-			newDependency = new Path(newDependency).toPortableString();
-			Set<IResource> set = mainEditorFiles.get(newDependency);
-			if (set == null) {
-				set = new HashSet<IResource>();
-				set.add(mainFile);
-				mainEditorFiles.put(newDependency, set);
-			} else {
-				set.add(mainFile);
-			}
-		}
-		
-		agent.setTracked(new HashSet<String>());
-	}
 	
 	private static boolean isMainFile(String file) {
 		// TODO: Determine if a file is the main descriptor file by its contents?

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/FileTrackingIOAgent.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/FileTrackingIOAgent.java	2009-08-18 14:02:07 UTC (rev 19844)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/FileTrackingIOAgent.java	2009-08-18 15:24:34 UTC (rev 19845)
@@ -14,6 +14,7 @@
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
+ at Deprecated
 public class FileTrackingIOAgent extends EditorIOAgent {
 	private Set<String> tracked = new HashSet<String>();
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-18 14:02:07 UTC (rev 19844)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-18 15:24:34 UTC (rev 19845)
@@ -4,6 +4,9 @@
 import static org.eclipse.core.resources.IResourceDelta.*;
 
 import java.io.IOException;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
 
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
@@ -34,7 +37,11 @@
 	
 	private DynamicDescriptorBuilder builder;
 	
+	private static Set<IResource> updateOnly =
+		Collections.synchronizedSet(new HashSet<IResource>());
+	
 	// TODO: Use (and properly clean up) new marker type for internal errors?
+	//       (also seen in DynamicDescriptorBuilder)
 	private final AstMessageHandler messageHandler =
 		new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
 	
@@ -43,6 +50,16 @@
 			builder = new DynamicDescriptorBuilder(this);
 		return builder;
 	}
+	
+	/**
+	 * Schedules a file to be updated (not built)
+	 * for the next time a matching resource event
+	 * is received.
+	 */
+	public static void scheduleUpdate(IResource resource) {
+		assert resource.toString().endsWith(".packed.esv");
+		updateOnly.add(resource);
+	}
 
 	public void resourceChanged(final IResourceChangeEvent event) {
 		if (event.getType() == IResourceChangeEvent.POST_CHANGE) {
@@ -52,7 +69,6 @@
 					// TODO: Finer-grained locking?
 					synchronized (Environment.getSyncRoot()) {
 						monitor.beginTask("", IProgressMonitor.UNKNOWN);
-						getBuilder().invalidateUpdatedResources();
 						postResourceChanged(event.getDelta(), monitor);
 						return Status.OK_STATUS;
 					}
@@ -87,12 +103,21 @@
 	}
 	
 	public void updateResource(IResource resource, IProgressMonitor monitor, boolean startup) {
-		// FIXME: Enqueue all updates, ensure builder runs first
-		// FIXME: The builder should refresh any build resources (i.e., .packed.esv)
 		if (resource.getName().endsWith(".packed.esv")) {
-			monitor.subTask("Loading " + resource.getName());
-			if (resource.exists())
+			IResource source = getMainDescriptor(resource);
+			
+			boolean isUpdateOnly = updateOnly.contains(resource);
+			
+			if (!source.equals(resource) && !isUpdateOnly) {
+				// Try to build using the .main.esv instead;
+				// the build.xml file may touch the .packed.esv file
+				// to signal a rebuild is necessary
+				getBuilder().updateResource(source, monitor);
+			} else if (resource.exists()) {
+				monitor.subTask("Loading " + resource.getName());
 				loadPackedDescriptor(resource);
+				if (isUpdateOnly) updateOnly.remove(resource);
+			}
 		} else if (!startup) {
 			// Re-build descriptor if resource changed (but not if we're starting up)
 			getBuilder().updateResource(resource, monitor);
@@ -100,8 +125,10 @@
 	}
 
 	public void loadPackedDescriptor(IResource descriptor) {
+		// TODO2: Properly trace back descriptor errors to their original source
+		IResource source = getMainDescriptor(descriptor);
 		try {
-			messageHandler.clearMarkers(descriptor);
+			messageHandler.clearMarkers(source);
 			
 			IFile file = descriptor.getProject().getFile(descriptor.getProjectRelativePath());
 			DescriptorFactory.load(file);
@@ -110,20 +137,27 @@
 			reportError(descriptor, e.getOffendingTerm(), "Error in descriptor: " + e.getMessage());
 		} catch (IOException e) {
 			Environment.logException("Error reading descriptor " + descriptor, e);
-			reportError(descriptor, "Internal error reading descriptor" + e.getMessage());
+			reportError(source, "Internal error reading descriptor" + e.getMessage());
 		} catch (CoreException e) {
 			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(descriptor, "Internal error loading descriptor: " + e.getMessage());
+			reportError(source, "Internal error loading descriptor: " + e.getMessage());
 		} catch (RuntimeException e) {
 			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(descriptor, "Internal error loading descriptor: " + e.getMessage());
+			reportError(source, "Internal error loading descriptor: " + e.getMessage());
 		} catch (Error e) { // workspace thread swallows this >:(
 			Environment.logException("Unable to load descriptor " + descriptor, e);
-			reportError(descriptor, "Internal error loading descriptor: " + e.getMessage());
+			reportError(source, "Internal error loading descriptor: " + e.getMessage());
 			throw e;
 		}
 	}
 	
+	private IResource getMainDescriptor(IResource packedDescriptor) {
+		String name = packedDescriptor.getName();
+		name = name.substring(0, name.length() - ".packed.esv".length());
+		IResource result = packedDescriptor.getParent().getParent().findMember("editor/" + name + ".main.esv");
+		return result != null ? result : packedDescriptor;
+	}
+	
 	private void reportError(final IResource descriptor, final String message) {
 		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
 			Job job = new WorkspaceJob("Add error marker") {

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-18 14:02:07 UTC (rev 19844)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-18 15:24:34 UTC (rev 19845)
@@ -21,8 +21,8 @@
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.ide.IDE;
 import org.strategoxt.libstratego_lib;
-import org.strategoxt.imp.editors.editorservice.EditorServiceParseController;
 import org.strategoxt.imp.generator.sdf2imp;
+import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;
@@ -96,11 +96,9 @@
 		monitor.beginTask("Creating " + languageName + " project", TASK_COUNT);
 		
 		monitor.setTaskName("Preparing project builder...");
-		Context context = new Context(Environment.getTermFactory());
+		EditorIOAgent agent = new EditorIOAgent();		
+		Context context = new Context(Environment.getTermFactory(), agent);
 		sdf2imp.init(context);
-		EditorIOAgent agent = new EditorIOAgent();		
-		agent.setDescriptor(EditorServiceParseController.getDescriptor()); // TODO: remove this?
-		context.setIOAgent(agent);
 		monitor.worked(1);
 
 		monitor.setTaskName("Creating project...");
@@ -122,15 +120,20 @@
 				}
 			}
 			project.refreshLocal(IResource.DEPTH_INFINITE, monitor);
-			monitor.worked(1);		
+			monitor.worked(1);
 			
 			monitor.setTaskName("Opening files for editing...");
-			openEditor(project, "/test/example." + extensions.split(",")[0]);
+			// TODO: ensure editor definition is loaded _before_ opening example editor
+			// openEditor(project, "/test/example." + extensions.split(",")[0]);
 			openEditor(project, "/editor/" + languageName +  ".main.esv");
 			openEditor(project, "/syntax/" + languageName +  ".sdf");
+			
 			monitor.worked(1);
+			DynamicDescriptorUpdater.scheduleUpdate(project.findMember("include/" + languageName + ".packed.esv"));
 			monitor.done();
+			
 			success = true;
+			
 		} finally {
 			if (!success) {
 				monitor.setTaskName("Undoing workspace operations...");

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-08-18 14:02:07 UTC (rev 19844)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2009-08-18 15:24:34 UTC (rev 19845)
@@ -66,7 +66,7 @@
 		serviceFactories.add(new ReferenceResolverFactory());
 		serviceFactories.add(new StrategoFeedbackFactory());
 		serviceFactories.add(new SyntaxPropertiesFactory());
-		serviceFactories.add(new TokenColorerFactory(this));
+		serviceFactories.add(new TokenColorerFactory());
 	}
 	
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TokenColorerFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TokenColorerFactory.java	2009-08-18 14:02:07 UTC (rev 19844)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TokenColorerFactory.java	2009-08-18 15:24:34 UTC (rev 19845)
@@ -8,9 +8,9 @@
 import org.eclipse.imp.services.ITokenColorer;
 import org.eclipse.jface.text.TextAttribute;
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.widgets.Display;
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.strategoxt.imp.runtime.services.LazyColor;
+import org.strategoxt.imp.runtime.services.LazyTextAttribute;
 import org.strategoxt.imp.runtime.services.TextAttributeMapping;
 import org.strategoxt.imp.runtime.services.TextAttributeReference;
 import org.strategoxt.imp.runtime.services.TextAttributeReferenceMap;
@@ -21,16 +21,6 @@
  */
 class TokenColorerFactory extends AbstractServiceFactory<ITokenColorer> {
 	
-	private final ITokenColorer sharedColorer;
-	
-	public TokenColorerFactory(Descriptor descriptor) throws BadDescriptorException {
-		// HACK: Initialize token colorer early to avoid a threading deadlock
-		//       (where the main thread waits to create a coloring service
-		//        and a second thread has a getService() lock but
-		//        waits for the main thread in the Color constructor) 
-		sharedColorer = doCreate(descriptor);
-	}
-	
 	@Override
 	public Class<ITokenColorer> getCreatedType() {
 		return ITokenColorer.class;
@@ -38,10 +28,6 @@
 	
 	@Override
 	public ITokenColorer create(Descriptor descriptor) throws BadDescriptorException {
-		return sharedColorer;
-	}
-	
-	private ITokenColorer doCreate(Descriptor descriptor) throws BadDescriptorException {
 		IStrategoAppl doc = descriptor.getDocument();
 		
 		List<TextAttributeMapping> tokenMappings = new ArrayList<TextAttributeMapping>();
@@ -82,7 +68,7 @@
 			IStrategoAppl foreground = termAt(attribute, 0);
 			IStrategoAppl background = termAt(attribute, 1);
 			IStrategoAppl font = termAt(attribute, 2);
-			TextAttribute result = new TextAttribute(readColor(foreground), readColor(background), readFont(font));
+			TextAttribute result = new LazyTextAttribute(readColor(foreground), readColor(background), readFont(font));
 			return new TextAttributeReference(colors, result);
 		}
 	}
@@ -114,12 +100,11 @@
 		return 0;
 	}
 
-	private static Color readColor(IStrategoAppl color) {
+	private static LazyColor readColor(IStrategoAppl color) {
 		if (cons(color).equals("ColorDefault") || cons(color).equals("NoColor")) {
 			return null;
 		} else if (cons(color).equals("ColorRGB")) {
-			return new Color(Display.getCurrent(), 
-					intAt(color, 0), intAt(color, 1), intAt(color, 2));
+			return new LazyColor(intAt(color, 0), intAt(color, 1), intAt(color, 2));
 		} else {
 			throw new IllegalArgumentException("Unknown color of type " + cons(color));
 		}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyColor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyColor.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyColor.java	2009-08-18 15:24:34 UTC (rev 19845)
@@ -0,0 +1,31 @@
+package org.strategoxt.imp.runtime.services;
+
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.widgets.Display;
+
+/**
+ * A class that lazily loads an SWT color object,
+ * ensuring it is only loaded at an appropriate time,
+ * i.e., when in the main thread). Doing so can avoid 
+ * deadlocks when Color is instantiated from another thread
+ * and the main thread is waiting for a lock.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LazyColor {
+	
+	private final int red, green, blue;
+	
+	private Color color;
+	
+	public LazyColor(int red, int green, int blue) {
+		this.red = red;
+		this.green = green;
+		this.blue = blue;
+	}
+	
+	public Color get() {
+		if (color == null) color = new Color(Display.getCurrent(), red, green, blue);
+		return color;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyTextAttribute.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyTextAttribute.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LazyTextAttribute.java	2009-08-18 15:24:34 UTC (rev 19845)
@@ -0,0 +1,35 @@
+package org.strategoxt.imp.runtime.services;
+
+import org.eclipse.jface.text.TextAttribute;
+import org.eclipse.swt.graphics.Color;
+
+/**
+ * A TextAttribute class that supports {@ref LazyColor} colors.
+ * 
+ * @see LazyColor
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LazyTextAttribute extends TextAttribute{
+	
+	private final LazyColor foreground;
+	
+	private final LazyColor background;
+
+	public LazyTextAttribute(LazyColor foreground, LazyColor background, int style) {
+		super(null, null, style);
+		this.foreground = foreground;
+		this.background = background;
+	}
+	
+	@Override
+	public Color getForeground() {
+		return foreground == null ? null : foreground.get();
+	}
+	
+	@Override
+	public Color getBackground() {
+		return background == null ? null : background.get();
+	}
+	
+}



From L.C.L.Kats at tudelft.nl  Tue Aug 18 18:55:39 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 18 Aug 2009 16:55:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19846 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	strc-java/trunk/META-INF
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
	strc-java/trunk/trans
Message-ID: <200908181655.n7IGtM3u015611@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-18 16:55:39 +0000 (Tue, 18 Aug 2009)
New Revision: 19846

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19846&view=rev

Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NativeCallHelper.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NativeCallPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReadTextFromStreamPrimitive.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/StandAloneSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   strc-java/trunk/META-INF/MANIFEST.MF
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
   strc-java/trunk/trans/s2j.str

Log:
Cleanup and minor fixes.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-18 16:55:39 UTC (rev 19846)
@@ -111,7 +111,7 @@
     
     <copy-or-create-parse-table> input;
     
-    say(!"sdf2imp project generator successfully completed with 0 fatal errors.")
+    say(!"SUCCESS: completed with 0 fatal errors.")
   
   // TODO: XTC detox -_-;;
   sdf2rtg:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str	2009-08-18 16:55:39 UTC (rev 19846)
@@ -12,7 +12,7 @@
   create-grammar-main =
     <file-exists> <conc-strings> ("syntax/", <get-main-class-name>, ".sdf")
   <+
-    name        := <get-main-class-name>;
+    name        := <get-sdf-main-module>;
     startsymbol := <StartSymbol>;
     
     <output-text-file(|["syntax"], <conc-strings> (name, ".sdf"))>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str	2009-08-18 16:55:39 UTC (rev 19846)
@@ -7,8 +7,6 @@
 
 strategies
 
-  // FIXME: Error reporting not always working for new editor..?
-
   /**
    * Records the descriptor configuration, using the 
    * existing descriptor file and/or the command-line options.
@@ -19,23 +17,25 @@
     rules(MainDescriptor := <id>);
     
     require-option(
+      where(<get-config> SdfMainModuleFlag())
+    <+
       where(<set-config> (SdfMainModuleFlag(), <find-main-module>));
       with(get-sdf-main-module)
     | <NoExistingDescriptor < !"Main module (-m)" + !"language name">
     );
     
     require-option(
-      StartSymbol <+ rules(StartSymbol := <find-start-symbol>)
+      where(StartSymbol) <+ rules(StartSymbol := <find-start-symbol>)
     | <NoExistingDescriptor < !"Start symbols (-s)" + !"language start symbols">
     );
     
     require-option(
-      BasePackage <+ rules(BasePackage := <find-package-name>)
+      where(BasePackage) <+ rules(BasePackage := <find-package-name>)
     | <NoExistingDescriptor < !"Package name (-p)" + !"language id">
     );
     
     require-option(
-      EditorExtensions <+ rules(EditorExtensions := <find-editor-extensions>)
+      where(EditorExtensions) <+ rules(EditorExtensions := <find-editor-extensions>)
     | <NoExistingDescriptor < !"Editor file extensions (-e)" + !"language extensions">
     )
   
@@ -72,9 +72,10 @@
     !result
 
   find-start-symbol =
-    oncetd(?StartSymbols(Values([result])));
-    verbose-msg(!"Using start symbol", !result);
-    !result
+    collect-one(?StartSymbols(Values(<id>)));
+    separate-by(|",");
+    concat-strings;
+    verbose-msg(!"Using start symbols", id)
 
   find-editor-extensions =
     oncetd(?Extensions(Values(results)));

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-main-descriptor.str	2009-08-18 16:55:39 UTC (rev 19846)
@@ -21,7 +21,6 @@
 
   default-main-descriptor =
     name         := <get-sdf-main-module>;
-    classname    := <get-main-class-name>;
     pkgname      := <BasePackage <+ default-package-name>;
     extensions   := <require-option(EditorExtensions |"File extensions (-e)")>;
     parsetable   := <parse-table-target>;

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -108,7 +108,7 @@
 			
 			boolean isUpdateOnly = updateOnly.contains(resource);
 			
-			if (!source.equals(resource) && !isUpdateOnly) {
+			if (!source.equals(resource) && !isUpdateOnly && !startup) {
 				// Try to build using the .main.esv instead;
 				// the build.xml file may touch the .packed.esv file
 				// to signal a rebuild is necessary

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -10,6 +10,7 @@
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.viewers.IStructuredSelection;
@@ -123,10 +124,9 @@
 			monitor.worked(1);
 			
 			monitor.setTaskName("Opening files for editing...");
-			// TODO: ensure editor definition is loaded _before_ opening example editor
-			// openEditor(project, "/test/example." + extensions.split(",")[0]);
-			openEditor(project, "/editor/" + languageName +  ".main.esv");
-			openEditor(project, "/syntax/" + languageName +  ".sdf");
+			openEditor(project, "/editor/" + languageName +  ".main.esv", true);
+			openEditor(project, "/syntax/" + languageName +  ".sdf", true);
+			openEditor(project, "/test/example." + extensions.split(",")[0], false);
 			
 			monitor.worked(1);
 			DynamicDescriptorUpdater.scheduleUpdate(project.findMember("include/" + languageName + ".packed.esv"));
@@ -142,7 +142,7 @@
 		}
 	}
 	
-	private void openEditor(IProject project, String filename) {
+	private void openEditor(IProject project, String filename, final boolean activate) {
 		final IResource file = (IResource) project.findMember(filename);
 		if (!file.exists() || !(file instanceof IFile)) {
 			Environment.logException("Cannot open an editor for " + filename);
@@ -153,7 +153,7 @@
 				IWorkbenchPage page =
 					PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
 				try {
-					IDE.openEditor(page, (IFile) file, true);
+					IDE.openEditor(page, (IFile) file, UniversalEditor.EDITOR_ID, activate);
 				} catch (PartInitException e) {
 					Environment.logException("Cannot open an editor for " + file, e);
 				}

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -171,11 +171,12 @@
 			updateStatus("Project name must be specified");
 			return;
 		}
-		if (getInputLanguageName().replace('\\', '/').indexOf('/', 1) > 0) {
+		if (getInputLanguageName().replace('\\', '/').indexOf('/', 1) > 0
+				|| getInputLanguageName().equals("Common")) {
 			updateStatus("Language name must be valid");
 			return;
 		}
-		if (getInputLanguageName().replace('\\', '/').indexOf('/', 1) > 0) {
+		if (getInputProjectName().replace('\\', '/').indexOf('/', 1) > 0) {
 			updateStatus("Project name must be valid");
 			return;
 		}
@@ -230,7 +231,14 @@
 	
 	private static String toExtension(String name) {
 		String input = name.toLowerCase().replace("-", "").replace(".", "").replace(" ", "").replace(":", "");
-		return input.substring(0, Math.min(input.length(), 3));
+		String prefix = input.substring(0, Math.min(input.length(), 3));
+		
+		for (int i = input.length() - 1;; i--) {
+			if (i == prefix.length()
+					|| !(Character.isDigit(input.charAt(i)) || input.charAt(i) == '.')) {
+				return prefix + input.substring(Math.min(input.length(), i + 1));
+			}
+		}
 	}
 
 	private void updateStatus(String message) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -13,7 +13,6 @@
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
-import org.spoofax.interpreter.stratego.SDefT;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.InvalidParseTableException;
 import org.spoofax.jsglr.ParseTable;
@@ -108,11 +107,6 @@
 	// ENVIRONMENT ACCESS AND MANIPULATION
 
 	public static synchronized Interpreter createInterpreter() throws IOException, InterpreterException {
-		// We use the wrappedAstNode factory for both the programs and the terms,
-		// to ensure they are compatible.
-		
-		// TODO: Optimize - at least use the HybridInterpreter here
-		
 		Interpreter result = new HybridInterpreter(getTermFactory()) {
 			@Override
 			public boolean invoke(String name) throws InterpreterExit, InterpreterException {
@@ -138,20 +132,9 @@
 		result.addOperatorRegistry(new IMPLibrary());
 		result.setIOAgent(new EditorIOAgent());
 		
-		SDefT call = result.getContext().lookupSVar("REPLACE_call_0_0");
-		result.getContext().getVarScope().addSVar("call_0_0", call);
-		
 		return result;
 	}
 	
-	/**
-	 * @Deprecated Use {@link Interpreter#load(InputStream)} instead.
-	 */
-	@Deprecated
-	public static synchronized void addToInterpreter(Interpreter interpreter, InputStream stream) throws IOException, InterpreterException {
-		interpreter.load(stream);			
-	}
-	
 	public static synchronized ParseTable registerParseTable(Language language, InputStream parseTable)
 			throws IOException, InvalidParseTableException {
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/CSGLRI.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -9,7 +9,7 @@
 import org.spoofax.jsglr.SGLRException;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKindManager;
-import org.strategoxt.imp.runtime.stratego.NativeCallHelper;
+import org.strategoxt.lang.compat.NativeCallHelper;
 
 import aterm.ATerm;
 import aterm.ATermAppl;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/StandAloneSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/StandAloneSGLRI.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/StandAloneSGLRI.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -42,6 +42,8 @@
 	public void setRecoverHandler(RecoverAlgorithm recoverHandler) {
 		if (parser instanceof JSGLRI) {
 			((JSGLRI) parser).setRecoverHandler(recoverHandler);
+		} else {
+			throw new UnsupportedOperationException("C-SGLR does not support error recovery");
 		}
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -11,8 +11,6 @@
 	
 	public IMPLibrary() {
 		add(new SubtermPrimitive());
-		add(new NativeCallPrimitive());
-		add(new ReadTextFromStreamPrimitive());
 	}
 
 	public String getOperatorRegistryName() {

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NativeCallHelper.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NativeCallHelper.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NativeCallHelper.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -1,60 +0,0 @@
-package org.strategoxt.imp.runtime.stratego;
-
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.PrintStream;
-
-import org.strategoxt.imp.runtime.Environment;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class NativeCallHelper {	
-	public int call(String[] commandArgs, File workingDir, PrintStream outStream, PrintStream errorStream)
-			throws InterruptedException, IOException {
-		
-		Process process = Runtime.getRuntime().exec(commandArgs, null, workingDir);
-		Thread t1 = new StreamCopier(process.getInputStream(), outStream);
-		Thread t2 = new StreamCopier(process.getErrorStream(), errorStream);
-		t1.start();
-		t2.start();
-		
-		int result = process.waitFor();
-		t1.join();
-		t2.join();
-	
-		return result;
-	}
-}
-
-class StreamCopier extends Thread {
-	private final InputStream input;
-	private final PrintStream output;
-
-	public StreamCopier(InputStream input, PrintStream output) {
-		this.input = input;
-		this.output = output;
-	}
-
-	@Override
-	public synchronized void run() {
-		try {
-			InputStreamReader streamReader = new InputStreamReader(input);
-			BufferedReader reader = new BufferedReader(streamReader);
-			
-			// NOTE: This might block if exceptionally long lines are printed
-			String line;
-			while ((line = reader.readLine()) != null) {
-				output.println(line);
-			}
-			
-			reader.close();
-			output.flush();
-		} catch (IOException e) {
-			Environment.logException("IO Exception redirecting output from Process", e);
-		}
-	}
-}
\ No newline at end of file

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NativeCallPrimitive.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NativeCallPrimitive.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NativeCallPrimitive.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -1,74 +0,0 @@
-package org.strategoxt.imp.runtime.stratego;
-
-import static org.spoofax.interpreter.core.Tools.*;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintStream;
-
-import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class NativeCallPrimitive extends AbstractPrimitive {
-    
-	// TODO: Treat sdf2table differently; give warning for other native calls
-
-	private final NativeCallHelper caller = new NativeCallHelper();
-	
-	public NativeCallPrimitive() {
-		super("SSL_EXT_call", 0, 2);
-	}
-
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
-		
-		try {
-			if (!isTermString(tvars[0]) || !isTermList(tvars[1])) return false;
-			
-			String[] commandArgs = toCommandArgs(tvars);
-			
-			// I/O setup
-			SSLLibrary op = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-			IOAgent io = op.getIOAgent();
-			File dir = io.openFile(io.getWorkingDir());
-			PrintStream stdout = (PrintStream) io.getOutputStream(IOAgent.CONST_STDOUT);
-			PrintStream stderr = (PrintStream) io.getOutputStream(IOAgent.CONST_STDERR);
-			
-			// Invocation
-			int returnCode = caller.call(commandArgs, dir, stdout, stderr);
-			env.setCurrent(env.getFactory().makeInt(returnCode));
-			return true;
-			
-		} catch (InterruptedException e) {
-			throw new InterpreterException("SSL_EXT_CALL system call interrupted", e);
-		} catch (IOException e) {
-			return false;
-		} catch (IllegalArgumentException e) {
-			return false;
-		}
-	}
-
-	private String[] toCommandArgs(IStrategoTerm[] tvars) throws IllegalArgumentException {
-		IStrategoList args = (IStrategoList) tvars[1];
-		String[] result = new String[1 + args.size()];
-		result[0] = javaString(tvars[0]);
-		
-		for (int i = 0; i < args.size(); i++) {
-			if (!isTermString(args.get(i)))
-				throw new IllegalArgumentException();
-			result[i+1] = javaString(args.get(i));
-		}
-		
-		return result;
-	}
-}

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReadTextFromStreamPrimitive.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReadTextFromStreamPrimitive.java	2009-08-18 15:24:34 UTC (rev 19845)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/ReadTextFromStreamPrimitive.java	2009-08-18 16:55:39 UTC (rev 19846)
@@ -1,57 +0,0 @@
-package org.strategoxt.imp.runtime.stratego;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-
-import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.imp.runtime.Environment;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ReadTextFromStreamPrimitive extends AbstractPrimitive {
-	
-	private final char[] buffer = new char[2048];
-
-	protected ReadTextFromStreamPrimitive() {
-		super("SSL_EXT_read_text_from_stream", 0, 1);
-	}
-
-	@Override
-	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
-		
-        if(!Tools.isTermInt(tvars[0]))
-            return false;
-        
-        SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-        InputStream input = or.getIOAgent().getInputStream(Tools.asJavaInt(tvars[0]));
-        StringBuilder result = new StringBuilder();
-		
-		try {
-			InputStreamReader reader = new InputStreamReader(input);
-		
-			for (int read = 0; read != -1; read = reader.read(buffer))
-				result.append(buffer, 0, read);
-		} catch (IOException e) {
-			return false;
-		} finally {
-			try {
-				input.close();
-			} catch (IOException e) {
-				// Not gonna happen
-			}
-		}
-		
-		env.setCurrent(Environment.getTermFactory().makeString(result.toString()));
-
-		return true;
-	}
-}

Modified: strc-java/trunk/META-INF/MANIFEST.MF
===================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	2009-08-18 15:24:34 UTC (rev 19845)
+++ strc-java/trunk/META-INF/MANIFEST.MF	2009-08-18 16:55:39 UTC (rev 19846)
@@ -5,6 +5,7 @@
 Bundle-Version: 0.1
 Export-Package: org.strategoxt,
  org.strategoxt.lang,
+ org.strategoxt.lang.compat,
  org.strategoxt.lang.parallel
 Require-Bundle: org.spoofax.aterm,
  org.spoofax.interpreter.core;bundle-version="0.3.13",

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-18 15:24:34 UTC (rev 19845)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-18 16:55:39 UTC (rev 19846)
@@ -30,4 +30,4 @@
     end
   <+
     ?(program, args);
-    prim("SSL_EXT_call", program, args)
\ No newline at end of file
+    prim("SSL_EXT_call", program, args) => 0

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-08-18 15:24:34 UTC (rev 19845)
+++ strc-java/trunk/trans/s2j.str	2009-08-18 16:55:39 UTC (rev 19846)
@@ -267,7 +267,7 @@
      }
      
      public static Strategy getMainStrategy() {
-       return x_main;
+       return x_main.instance;
      }
     ]|
     where



From zef at zefhemel.com  Wed Aug 19 11:04:23 2009
From: zef at zefhemel.com (Zef Hemel)
Date: Wed, 19 Aug 2009 09:04:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19847 - zef -
	pil/trunk/src/lib/db
Message-ID: <200908190904.n7J944Rq028528@proliant.st.ewi.tudelft.nl>

Author: zef
Date: 2009-08-19 09:04:22 +0000 (Wed, 19 Aug 2009)
New Revision: 19847

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19847&view=rev

Modified:
   pil/trunk/src/lib/db/collection.pil
   pil/trunk/src/lib/db/db.pil
   pil/trunk/src/lib/db/query.pil
   pil/trunk/src/lib/db/test.pil
   pil/trunk/src/lib/db/util.pil

Log:
Added offline collection queryset support, no sorting yet.


Changes:

Modified: pil/trunk/src/lib/db/collection.pil
===================================================================
--- pil/trunk/src/lib/db/collection.pil	2009-08-18 16:55:39 UTC (rev 19846)
+++ pil/trunk/src/lib/db/collection.pil	2009-08-19 09:04:22 UTC (rev 19847)
@@ -114,10 +114,10 @@
     }
   }
 
-  List<T> list(DatabaseSession session) {
+  List<T> get(DatabaseSession session) {
     var oldFilter = filter;
     filter = new AndFilter(filter, new PropertyFilter(inverseField, "=", self.id));
-    List<T> result = super.list(session);
+    List<T> result = super.get(session);
     filter = oldFilter;
     return result;
   }
@@ -212,12 +212,12 @@
     local = new Set<T>();
   }
 
-  List<T> list(DatabaseSession session) {
+  List<T> get(DatabaseSession session) {
     var fromMapping = classMappings[self.class];
     var toMapping = classMappings[cls];
     additionalJoinSqls.add("LEFT JOIN `" + getTableName() + "` AS mtm ON mtm.`" + toMapping.tableName + "` = `" + toMapping.tableName  + "`.`id` ");
     additionalWhereSqls.add("mtm.`" + fromMapping.tableName + "` = '" + self.id + "'");
-    List<T> result = super.list(session);
+    List<T> result = super.get(session);
     additionalJoinSqls = new List<String>();
     additionalWhereSqls = new List<String>();
     return result;

Modified: pil/trunk/src/lib/db/db.pil
===================================================================
--- pil/trunk/src/lib/db/db.pil	2009-08-18 16:55:39 UTC (rev 19846)
+++ pil/trunk/src/lib/db/db.pil	2009-08-19 09:04:22 UTC (rev 19847)
@@ -152,6 +152,8 @@
           // nothing
         } else if(f instanceof ManyToOneFieldMapping) {
           getObjectField(o, f.fieldName).as<ManyToOne<Object>>.setId(r.getString(counter));
+        } else if(f instanceof SimpleReferenceFieldMapping) {
+          getObjectField(o, f.fieldName).as<SimpleReference<Object>>.setId(r.getString(counter));
         } else if(r.getObject(counter) != null) {
           getObjectField(o, f.fieldName).as<SimpleValue<Object>>.set(r.getObject(counter), this);
         }

Modified: pil/trunk/src/lib/db/query.pil
===================================================================
--- pil/trunk/src/lib/db/query.pil	2009-08-18 16:55:39 UTC (rev 19846)
+++ pil/trunk/src/lib/db/query.pil	2009-08-19 09:04:22 UTC (rev 19847)
@@ -72,7 +72,7 @@
     throw new Exception("Cannot do contains check!");
   }
 
-  List<T> list(DatabaseSession session) {
+  List<T> get(DatabaseSession session) {
     var args = new List<Object>();
     var selectSql = "SELECT " + session.simpleSelect(cls, null);
     var mapping = classMappings[cls];
@@ -157,10 +157,53 @@
   }
 }
 
+class pil::db::CollectionQuerySet<T> extends QuerySet<T> {
+  List<T> values = null;
+
+  new(List<T> values, Class cls) extends super(cls) {
+    this.values = values;
+  }
+
+  QuerySet<T> newThis() {
+    return new CollectionQuerySet<T>(values, cls);
+  }
+
+  void add(T item, DatabaseSession session) {
+    if(!values.contains(item)) {
+      values.add(item);
+    }
+  }
+
+  void remove(T item, DatabaseSession session) {
+    if(values.contains(item)) {
+      values.remove(item);
+    }
+  }
+
+  Bool contains(T item, DatabaseSession session) {
+    return values.contains(item);
+  }
+
+  List<T> get(DatabaseSession session) {
+    var results = new List<T>();
+    for(T item : values) {
+      if(filter.match(item.as<Object>, session)) {
+        results.add(item);
+      }
+    }
+    // TODO: add sorting
+    return results;
+  }
+}
+
 class pil::db::query::Filter {
   String createSQL(Dialect dialect, List<Object> values) {
     throw new Exception("Create SQL not implemented!");
   }
+
+  Bool match(Object o, DatabaseSession session) {
+    throw new Exception("Match not implemented!");
+  }
 }
 
 class pil::db::query::NullFilter extends Filter {
@@ -170,6 +213,10 @@
   String createSQL(Dialect dialect, List<Object> values) {
     return "1=1";
   }
+
+  Bool match(Object o, DatabaseSession session) {
+    return true;
+  }
 }
 
 class pil::db::query::AndFilter extends Filter {
@@ -184,6 +231,10 @@
   String createSQL(Dialect dialect, List<Object> values) {
     return "(" + left.createSQL(dialect, values) + " AND " + right.createSQL(dialect, values) + ")";
   }
+
+  Bool match(Object o, DatabaseSession session) {
+    return left.match(o, session) && right.match(o, session);
+  }
 }
 
 class pil::db::query::OrFilter extends Filter {
@@ -198,6 +249,10 @@
   String createSQL(Dialect dialect, List<Object> values) {
     return "(" + left.createSQL(dialect, values) + " OR " + right.createSQL(dialect, values) + ")";
   }
+
+  Bool match(Object o, DatabaseSession session) {
+    return left.match(o, session) || right.match(o, session);
+  }
 }
 
 class pil::db::query::PropertyFilter extends Filter {
@@ -215,6 +270,26 @@
     values.add(value);
     return "`" + fieldName + "` " + operator + " ?";
   }
+
+  Bool match(Object o, DatabaseSession session) {
+    Object oValue = dbValue(getObjectField(o, fieldName), session);
+    Object vValue = dbValue(value, session);
+    if(operator == "=") {
+      return oValue == vValue;
+    } else if(operator == "!=") {
+      return oValue != vValue;
+    } else if(operator == "<") {
+      return oValue.as<Int> < vValue.as<Int>;
+    } else if(operator == ">") {
+      return oValue.as<Int> > vValue.as<Int>;
+    } else if(operator == "<=") {
+      return oValue.as<Int> <= vValue.as<Int>;
+    } else if(operator == ">=") {
+      return oValue.as<Int> >= vValue.as<Int>;
+    } else {
+      throw new Exception("Unsupported operator: " + operator);
+    }
+  }
 }
 
 class pil::db::query::FieldName {

Modified: pil/trunk/src/lib/db/test.pil
===================================================================
--- pil/trunk/src/lib/db/test.pil	2009-08-18 16:55:39 UTC (rev 19846)
+++ pil/trunk/src/lib/db/test.pil	2009-08-19 09:04:22 UTC (rev 19847)
@@ -127,12 +127,12 @@
   session.flush();
 
   var u2 = session.get(typeof User, u.id).as<User>;
-  var messages = u2.messages.list(session);
+  var messages = u2.messages.get(session);
   assertEqual(messages.length, 1, "number of messages check");
   assertEqual(messages[0].id, m.id, "message id check");
   messages[0].sender.set(null, session);
   session.flush();
-  messages = u2.messages.list(session);
+  messages = u2.messages.get(session);
   assertEqual(messages.length, 0, "check message removed");
 }
 
@@ -150,7 +150,7 @@
   session.flush();
   var q = new QuerySet<Message>(typeof Message).prefetch(new SimpleFieldName("sender"));
   var qc = session.queryCounter;
-  for(Message m : q.list(session)) {
+  for(Message m : q.get(session)) {
     assertEqual(m.sender.get(session).name.get(session), u.name.get(session), "checking sender name");
   }
   assertEqual(session.queryCounter, qc+1, "check query count");
@@ -181,13 +181,36 @@
     }
   }
 
-  for(User gu : g.members.prefetch(new SimpleFieldName("address")).list(session)) {
+  for(User gu : g.members.prefetch(new SimpleFieldName("address")).get(session)) {
     assert(even.contains(gu), "checking collection values");
   }
 
   assertEqual(g.members.local.length, 0, "local changes flushed");
 }
 
+void testCollectionQuerySet(DatabaseSession session) {
+  println("Testing collection query sets");
+  var qc = session.queryCounter;
+  var qs = new CollectionQuerySet<User>(new List<User>(), typeof String);
+  for(Int i = 0; i < 20; i++) {
+    var u = new User();
+    u.name.set("User " + i.as<String>, session);
+    u.age.set(20+i, session);
+    qs.add(u, session);
+  }
+  var counter = 0;
+  for(User u : qs.filter(new PropertyFilter("age", ">", 25)).get(session)) {
+    assert(u.age.get(session) > 25, "filter check");
+    counter = counter + 1;
+    if(counter % 2 == 0) {
+      qs.remove(u, session);
+    }
+  }
+  assertEqual(counter, 14, "number of results check");
+  assertEqual(qs.filter(new PropertyFilter("age", ">", 25)).get(session).length, 7, "check if remove works");
+  assertEqual(qc, session.queryCounter, "check no queries have been performed");
+}
+
 void main(Array<String> args) {
   var dialect = new pil::db::dialect::MySQLDialect();
   var db = new pil::db::Database(dialect, "localhost", "root", "", "pildb");
@@ -211,6 +234,8 @@
   testPrefetch(session);
   cleanup(session);
   testManyToMany(session);
+  cleanup(session);
+  testCollectionQuerySet(session);
   
   reportTestResults();
   println("Performed " + session.queryCounter.as<String> + " queries.");

Modified: pil/trunk/src/lib/db/util.pil
===================================================================
--- pil/trunk/src/lib/db/util.pil	2009-08-18 16:55:39 UTC (rev 19846)
+++ pil/trunk/src/lib/db/util.pil	2009-08-19 09:04:22 UTC (rev 19847)
@@ -51,8 +51,12 @@
     return null;
   } else if(value instanceof SimpleValue<Object>) {
     return value.as<SimpleValue<Object>>.get(session);
+  } else if(value instanceof SimpleReference<Object>) {
+    return value.as<SimpleReference<Object>>.id;
+  } else if(value instanceof Entity) {
+    return value.as<Entity>.id;
   } else {
-    throw new Exception("Unsupported value: " + value.as<String>);
+    return value;
   }
 }
 



From zef at zefhemel.com  Wed Aug 19 15:40:50 2009
From: zef at zefhemel.com (Zef Hemel)
Date: Wed, 19 Aug 2009 13:40:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19848 - zef -
	pil/trunk/src/lib/db
Message-ID: <200908191340.n7JDeV5c032321@proliant.st.ewi.tudelft.nl>

Author: zef
Date: 2009-08-19 13:40:50 +0000 (Wed, 19 Aug 2009)
New Revision: 19848

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19848&view=rev

Modified:
   pil/trunk/src/lib/db/collection.pil
   pil/trunk/src/lib/db/query.pil
   pil/trunk/src/lib/db/test.pil

Log:
Using entityCache when lazy loading


Changes:

Modified: pil/trunk/src/lib/db/collection.pil
===================================================================
--- pil/trunk/src/lib/db/collection.pil	2009-08-19 09:04:22 UTC (rev 19847)
+++ pil/trunk/src/lib/db/collection.pil	2009-08-19 13:40:50 UTC (rev 19848)
@@ -58,8 +58,12 @@
 
   T get(DatabaseSession session) {
     if(value == null && id != null) {
-      println("Lazy loading: " + id);
-      value = session.get(cls, id).as<T>;
+      if(session.entityCache.contains(id)) {
+        value = session.entityCache[id].as<T>;
+      } else {
+        println("Lazy loading: " + id);
+        value = session.get(cls, id).as<T>;
+      }
     }
     return value;
   }
@@ -174,8 +178,12 @@
 
   T get(DatabaseSession session) {
     if(value == null && id != null) {
-      println("Lazy loading: " + id);
-      value = session.get(cls, id).as<T>;
+      if(session.entityCache.contains(id)) {
+        value = session.entityCache[id].as<T>;
+      } else {
+        println("Lazy loading: " + id);
+        value = session.get(cls, id).as<T>;
+      }
     }
     return value;
   }

Modified: pil/trunk/src/lib/db/query.pil
===================================================================
--- pil/trunk/src/lib/db/query.pil	2009-08-19 09:04:22 UTC (rev 19847)
+++ pil/trunk/src/lib/db/query.pil	2009-08-19 13:40:50 UTC (rev 19848)
@@ -69,7 +69,11 @@
   }
 
   Bool contains(T item, DatabaseSession session) {
-    throw new Exception("Cannot do contains check!");
+    var mapping = classMappings[cls];
+    var sql = "SELECT `id` FROM `" + mapping.tableName + "` WHERE id = ?";
+    session.flush();
+    var results = session.queryWithArgs(sql, new Array<Object>(item.as<Entity>.id));
+    return results.length > 0;
   }
 
   List<T> get(DatabaseSession session) {

Modified: pil/trunk/src/lib/db/test.pil
===================================================================
--- pil/trunk/src/lib/db/test.pil	2009-08-19 09:04:22 UTC (rev 19847)
+++ pil/trunk/src/lib/db/test.pil	2009-08-19 13:40:50 UTC (rev 19848)
@@ -188,10 +188,20 @@
   assertEqual(g.members.local.length, 0, "local changes flushed");
 }
 
+void testQuerySet(DatabaseSession session) {
+  var qs = new QuerySet<User>(typeof User);
+  var u = new User();
+  assert(!qs.contains(u, session), "unique id check");
+  u.name.set("Piet", session);
+  u.age.set(5, session);
+  session.add(u);
+  assert(qs.contains(u, session), "added check");
+}
+
 void testCollectionQuerySet(DatabaseSession session) {
   println("Testing collection query sets");
   var qc = session.queryCounter;
-  var qs = new CollectionQuerySet<User>(new List<User>(), typeof String);
+  var qs = new CollectionQuerySet<User>(new List<User>(), typeof User);
   for(Int i = 0; i < 20; i++) {
     var u = new User();
     u.name.set("User " + i.as<String>, session);
@@ -236,6 +246,8 @@
   testManyToMany(session);
   cleanup(session);
   testCollectionQuerySet(session);
+  cleanup(session);
+  testQuerySet(session);
   
   reportTestResults();
   println("Performed " + session.queryCounter.as<String> + " queries.");



From L.C.L.Kats at tudelft.nl  Thu Aug 20 10:04:56 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 20 Aug 2009 08:04:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19849 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/META-INF
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
Message-ID: <200908200804.n7K84Z1V014453@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-20 08:04:56 +0000 (Thu, 20 Aug 2009)
New Revision: 19849

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19849&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java

Log:
Give Eclipse its much desired hardcoded project name in the builder definition...

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile	2009-08-19 13:40:50 UTC (rev 19848)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile	2009-08-20 08:04:56 UTC (rev 19849)
@@ -13,7 +13,8 @@
 	# ...
 
 include/$(SYNTAX).packed.esv : $(SYNTAX).def include/$(SYNTAX).tbl $(SDF2IMP) Makefile $(ESVS)
-	$(SDF2IMP) -i $< -p $(SYNTAX).tbl -m $(SYNTAX) --verbose 2
+	$(SDF2IMP) -i $< -p $(SYNTAX).tbl -pn org.strategoxt.imp.editors.editorservice -m $(SYNTAX) --verbose 2
+	rm build.xml ".externalToolBuilders/Ant Builder.launch"
 
 $(SYNTAX).def : $(SOURCE)
 	ln -s $< $@

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-19 13:40:50 UTC (rev 19848)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-20 08:04:56 UTC (rev 19849)
@@ -8,6 +8,7 @@
   <+ extensions-option
   <+ parse-table-option
   <+ package-name-option
+  <+ project-name-option
   <+ start-symbol-option
   <+ jar-option
   <+ reset-files-option
@@ -42,6 +43,13 @@
     , !"-n <packagename>      Set base package name (optional)"
     )
 
+  project-name-option =
+    ArgOption(
+      "-pn"
+    , rules(ProjectName := <id>)
+    , !"-pn <project name>    Set project name (optional)"
+    )
+
   jar-option =
     MultiArgOption(
       "-jar"

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-19 13:40:50 UTC (rev 19848)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-20 08:04:56 UTC (rev 19849)
@@ -7,7 +7,11 @@
 
   create-builder-xml =
     // (the XML pretty printer has problems with this file, so it's printed as text instead)
+    name := <ProjectName <+ get-sdf-main-module>; // $project_name} and ${project_loc} don't work properly...
+    
     <output-text-file(|[".externalToolBuilders"], "Ant Builder.launch")>
+    <conc-strings>
+(
 "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>
 <launchConfiguration type=\"org.eclipse.ant.AntBuilderLaunchConfigurationType\">
 <stringAttribute key=\"org.eclipse.ant.ui.ATTR_ANT_AFTER_CLEAN_TARGETS\" value=\"from-eclipse,\"/>
@@ -15,7 +19,7 @@
 <booleanAttribute key=\"org.eclipse.ant.ui.ATTR_TARGETS_UPDATED\" value=\"true\"/>
 <booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"false\"/>
 <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">
-<listEntry value=\"${project_loc}/build.xml\"/>
+<listEntry value=\"", name, "/build.xml\"/>
 </listAttribute>
 <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">
 <listEntry value=\"1\"/>
@@ -25,15 +29,16 @@
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;\"/>
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;${project_loc}/aux/make_permissive.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;${project_loc}/aux/strategoxt.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;", name, "/aux/make_permissive.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;", name, "/aux/strategoxt.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
 </listAttribute>
 <stringAttribute key=\"org.eclipse.jdt.launching.CLASSPATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>
 <booleanAttribute key=\"org.eclipse.jdt.launching.DEFAULT_CLASSPATH\" value=\"false\"/>
-<!-- <stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"${project_name}\"/> -->
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${project_loc}/build.xml\"/>
+<!-- <stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"", name, "\"/> -->
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"", name, "/build.xml\"/>
 <stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS\" value=\"full,incremental,\"/>
 <booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED\" value=\"true\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${project_loc}\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"", name, "\"/>
 <stringAttribute key=\"process_factory_id\" value=\"org.eclipse.ant.ui.remoteAntProcessFactory\"/>
 </launchConfiguration>"
+)
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-08-19 13:40:50 UTC (rev 19848)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/META-INF/MANIFEST.MF	2009-08-20 08:04:56 UTC (rev 19849)
@@ -4,8 +4,8 @@
 Bundle-SymbolicName: org.strategoxt.imp.metatooling;singleton:=true
 Bundle-Version: 0.1.0.2600
 Bundle-ClassPath: org.strategoxt.imp.metatooling/
-Require-Bundle: org.strategoxt.imp.runtime;bundle-version="0.1.0",
- org.strategoxt.imp.generator;bundle-version="0.1.0",
+Require-Bundle: org.strategoxt.imp.runtime,
+ org.strategoxt.imp.generator,
  org.eclipse.imp.runtime,
  org.spoofax.aterm,
  org.spoofax.jsglr,
@@ -24,8 +24,7 @@
  org.eclipse.ui,
  org.spoofax.compiler,
  org.eclipse.ui.ide,
- org.strategoxt.imp.editors.editorservice,
- org.strategoxt.strj;bundle-version="0.1.0"
+ org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-Activator: org.strategoxt.imp.metatooling.MetatoolingActivator
 Bundle-ActivationPolicy: lazy

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-19 13:40:50 UTC (rev 19848)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-20 08:04:56 UTC (rev 19849)
@@ -113,7 +113,7 @@
 			try {
 				String jar1 = libstratego_lib.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 				String jar2 = make_permissive.class.getProtectionDomain().getCodeSource().getLocation().getFile();
-				sdf2imp.mainNoExit(context, "-m", languageName, "-n", packageName, "-e", extensions, "-jar", jar1, jar2);
+				sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "-jar", jar1, jar2);
 			} catch (StrategoExit e) {
 				if (e.getValue() != 0) {
 					throw new StrategoException("Project builder failed. Log follows\n\n"

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-19 13:40:50 UTC (rev 19848)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2009-08-20 08:04:56 UTC (rev 19849)
@@ -202,7 +202,7 @@
 		}
 
 		IWorkspace workspace = ResourcesPlugin.getWorkspace();
-		if (workspace.getRoot().getProject(getInputLanguageName()).exists()) {
+		if (workspace.getRoot().getProject(getInputProjectName()).exists()) {
 			updateStatus("A project with this name already exists");
 			return;
 		}
@@ -232,11 +232,13 @@
 	private static String toExtension(String name) {
 		String input = name.toLowerCase().replace("-", "").replace(".", "").replace(" ", "").replace(":", "");
 		String prefix = input.substring(0, Math.min(input.length(), 3));
+		if (input.length() == 0) return "";
 		
 		for (int i = input.length() - 1;; i--) {
-			if (i == prefix.length()
-					|| !(Character.isDigit(input.charAt(i)) || input.charAt(i) == '.')) {
-				return prefix + input.substring(Math.min(input.length(), i + 1));
+			if (!Character.isDigit(input.charAt(i)) && input.charAt(i) != '.') {
+				return prefix + input.substring(Math.max(prefix.length(), Math.min(input.length(), i + 1)));
+			} else if (i == prefix.length()) {
+				return prefix + input.substring(i);
 			}
 		}
 	}



From L.C.L.Kats at tudelft.nl  Thu Aug 20 11:42:16 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 20 Aug 2009 09:42:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19850 - LennartKats - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter:
	library/ssl terms
Message-ID: <200908200941.n7K9ftYH015525@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-20 09:42:16 +0000 (Thu, 20 Aug 2009)
New Revision: 19850

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19850&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_write_term_to_stream_saf.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoHashMap.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_hashtable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_keys_fold.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_values_fold.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java

Log:
Changed the representation of indexed sets and hash tables to
blob terms instead of integers, eliminating the need to maintain
a central table of all indexed sets/hash tables.


Changes (first 1000 lines of the diffs):

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java (from rev 19836, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java)
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -0,0 +1,139 @@
+/*
+ * Created on 08.aug.2005
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.library.ssl;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.Map.Entry;
+
+import org.spoofax.interpreter.terms.BasicTermFactory;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+public class IndexedSet implements IStrategoTerm {
+        
+    private static final long serialVersionUID = -4514696890481283123L;
+    private int counter;
+    Map<IStrategoTerm, Integer> map;
+    
+    IndexedSet(int initialSize, int maxLoad) {
+        map = new HashMap<IStrategoTerm, Integer>(initialSize, 1.0f*maxLoad/100);
+        counter = 0;
+    }
+    
+    public int put(IStrategoTerm value) {
+        int idx = counter++; 
+        map.put(value, idx);
+        return idx;
+    }
+
+    public int getIndex(IStrategoTerm t) {
+        Integer r = map.get(t);
+        return r == null ? -1 : r;
+    }
+
+    public boolean containsValue(IStrategoTerm t) {
+        return map.containsKey(t);
+    }
+
+    public Collection<Integer> values() {
+        return map.values();
+    }
+
+    public boolean remove(IStrategoTerm t) {
+        return map.remove(t) != null;
+    }
+
+    public void clear() {
+        counter = 0;
+        map.clear();
+    }
+
+    public Collection<IStrategoTerm> keySet() {
+        // FIXME this could easily be more efficient
+        class X implements Comparable<X> {
+            IStrategoTerm t;
+            Integer i;
+            X(IStrategoTerm t, Integer i) {
+                this.t = t;
+                this.i = i;
+            }
+            public int compareTo(X o) {
+                return i.compareTo(o.i);
+            }
+        }
+        List<X> xs = new ArrayList<X>();
+        for(Entry<IStrategoTerm,Integer> e : map.entrySet()) { 
+            xs.add(new X(e.getKey(), e.getValue()));
+        }
+        Collections.sort(xs);
+        List<IStrategoTerm> r = new ArrayList<IStrategoTerm>();
+        for(X x : xs)
+            r.add(x.t);
+        return r;
+    }
+
+    public boolean containsKey(IStrategoTerm t) {
+        return map.containsKey(t);
+    }
+
+    public int size() {
+        return map.size();
+    }
+    
+    public Set<Entry<IStrategoTerm, Integer>> entrySet() {
+        return map.entrySet();
+    }
+
+    public IStrategoTerm[] getAllSubterms() {
+        return BasicTermFactory.EMPTY;
+    }
+
+    public IStrategoList getAnnotations() {
+        return null;
+    }
+
+    public int getStorageType() {
+        return MUTABLE;
+    }
+
+    public IStrategoTerm getSubterm(int index) {
+        throw new UnsupportedOperationException();
+    }
+
+    public int getSubtermCount() {
+        return 0;
+    }
+
+    public int getTermType() {
+        return BLOB;
+    }
+
+    public boolean match(IStrategoTerm second) {
+        return second == this;
+    }
+    
+    public int hashCode() {
+        return System.identityHashCode(this);
+    }
+
+    public void prettyPrint(ITermPrinter pp) {
+        pp.print(toString());
+    }
+    
+    @Override
+    public String toString() {
+        return String.valueOf(hashCode());
+    }
+}


Property changes on: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -7,7 +7,6 @@
  */
 package org.spoofax.interpreter.library.ssl;
 
-import java.util.HashMap;
 import java.util.Map;
 
 import org.spoofax.interpreter.core.Context;
@@ -15,8 +14,6 @@
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
 import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_create.Hashtable;
-import org.spoofax.interpreter.library.ssl.SSL_indexedSet_create.IndexedSet;
 
 // FIXME: The function registry should probably be shared between instances
 public class SSLLibrary extends AbstractStrategoOperatorRegistry {
@@ -26,15 +23,9 @@
     // FIXME: Move these into environment
     
     private IOAgent ioAgent = new IOAgent();
-    
-    private Map<Integer, IndexedSet> indexedSetMap;
-    private int indexedSetCounter;
 
-    //@todo fix
-    protected Map<Integer, Hashtable> hashtableMap;
-    private int hashtableCounter;
-    private int dynruleHashtableRef;
-    private int tableTableRef;
+    private StrategoHashMap dynamicRuleTable;
+    private StrategoHashMap tableTable;
 
     public SSLLibrary() {
         initRegistry();
@@ -87,27 +78,28 @@
         add(new SSL_real_to_string());
         add(new SSL_real_to_string_precision());
         add(new SSL_string_to_real());
+        add(new SSL_dynamic_rules_hashtable(this));
         add(new SSL_table_hashtable(this));
-        add(new SSL_indexedSet_create(this));
-        add(new SSL_indexedSet_destroy(this));
-        add(new SSL_indexedSet_put(this));
-        add(new SSL_indexedSet_getIndex(this));
-        add(new SSL_indexedSet_elements(this));
-        add(new SSL_indexedSet_remove(this));
-        add(new SSL_indexedSet_reset(this));
-        add(new SSL_hashtable_get(this));
-        add(new SSL_hashtable_create(this));
-        add(new SSL_hashtable_put(this));
+        add(new SSL_indexedSet_create());
+        add(new SSL_indexedSet_destroy());
+        add(new SSL_indexedSet_put());
+        add(new SSL_indexedSet_getIndex());
+        add(new SSL_indexedSet_elements());
+        add(new SSL_indexedSet_remove());
+        add(new SSL_indexedSet_reset());
+        add(new SSL_hashtable_get());
+        add(new SSL_hashtable_create());
+        add(new SSL_hashtable_put());
+        add(new SSL_hashtable_reset());
         add(new SSL_stderr_stream());
-        add(new SSL_hashtable_destroy(this));
-        add(new SSL_hashtable_remove(this));
-        add(new SSL_hashtable_keys(this));
+        add(new SSL_hashtable_destroy());
+        add(new SSL_hashtable_remove());
+        add(new SSL_hashtable_keys());
         add(new SSL_fputs());
         add(new SSL_fputc());
         add(new SSL_write_term_to_stream_text());
         add(new SSL_access());
         add(new SSL_getcwd());
-        add(new SSL_dynamic_rules_hashtable(this));
         add(new SSL_readdir());
         add(new SSL_modification_time());
         add(new SSL_write_term_to_string());
@@ -123,12 +115,12 @@
         add(new SSL_STDOUT_FILENO());
         add(new SSL_stdout_stream());
         add(new SSL_STDERR_FILENO());
-        add(new SSL_hashtable_reset(this));
         add(new SSL_EXDEV());
         add(new SSL_close());
         add(new SSL_perror());
         add(new SSL_fopen());
         add(new SSL_write_term_to_stream_baf());
+        add(new SSL_write_term_to_stream_saf());
         add(new SSL_write_term_to_stream_taf());
         add(new SSL_fclose());
         add(new SSL_read_term_from_string());
@@ -163,47 +155,21 @@
      * todo: this state should be scoped inside {@link Context}
      */
     public void init() {
-
-        if(hashtableMap != null) {
-            for (Hashtable hashtable : hashtableMap.values()) {
-                hashtable.clear();
-            }
-            hashtableMap.clear();
-        }
-        
-        hashtableMap = new HashMap<Integer, Hashtable>();
-        hashtableCounter = 0;
-
-        indexedSetMap = new HashMap<Integer, IndexedSet>();
-        indexedSetCounter = 0;
-        
-        // FIXME initialize on-demand
-        dynruleHashtableRef = registerHashtable(new Hashtable(128, 75));
-        tableTableRef = registerHashtable(new Hashtable(128, 75));
+        dynamicRuleTable = null;
+        tableTable = null;
     }
-    
 
-    public int registerHashtable(Hashtable hashtable) {
-        int ref = hashtableCounter;
-        hashtableMap.put(hashtableCounter++, hashtable);
-        return ref;
+    public StrategoHashMap getDynamicRuleTable() {
+        if (dynamicRuleTable == null)
+            dynamicRuleTable = new StrategoHashMap(128, 75);
+        return dynamicRuleTable;
     }
 
-    public boolean removeHashtable(int idx) {
-        return hashtableMap.remove(idx) != null;
+    public StrategoHashMap getTableTable() {
+        if (tableTable == null)
+            tableTable = new StrategoHashMap(128, 75);
+        return tableTable;
     }
-
-    public Hashtable getHashtable(int idx) {
-        return hashtableMap.get(idx);
-    }
-
-    public int getDynamicRuleHashtableRef() {
-        return dynruleHashtableRef;
-    }
-
-    public int getTableTableRef() {
-        return tableTableRef;
-    }
     
     public IOAgent getIOAgent() {
         return ioAgent;
@@ -217,19 +183,5 @@
         return (SSLLibrary)env.getOperatorRegistry(REGISTRY_NAME);
     }
 
-    public IndexedSet getIndexedSet(int i) {
-        return indexedSetMap.get(i);
-    }
-
-    public int registerIndexedSet(IndexedSet set) {
-        int ref = indexedSetCounter;
-        indexedSetMap.put(indexedSetCounter++, set);
-        return ref;
-    }
-
-    public boolean removeIndexedSet(int idx) {
-        return indexedSetMap.remove(idx) != null;
-    }
-
     
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_dynamic_rules_hashtable.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -26,7 +26,7 @@
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
 
-        env.setCurrent(env.getFactory().makeInt(library.getDynamicRuleHashtableRef()));
+        env.setCurrent(library.getDynamicRuleTable());
         return true;
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_create.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -7,8 +7,6 @@
  */
 package org.spoofax.interpreter.library.ssl;
 
-import java.util.LinkedHashMap;
-
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
@@ -18,22 +16,9 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_hashtable_create extends AbstractPrimitive {
-
-    private final SSLLibrary library;
-
-    protected static class Hashtable extends LinkedHashMap<IStrategoTerm, IStrategoTerm> {
-
-        private static final long serialVersionUID = -8193582031891397734L;
-
-        public Hashtable(int initialSize, int maxLoad) {
-            super(initialSize, 1.0f * maxLoad / 100);
-        }
-
-    }
-
-    protected SSL_hashtable_create(SSLLibrary library) {
+    
+    protected SSL_hashtable_create() {
         super("SSL_hashtable_create", 0, 2);
-        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
@@ -47,9 +32,9 @@
         int initialSize = ((IStrategoInt)targs[0]).intValue();
         int maxLoad = ((IStrategoInt)targs[1]).intValue();
 
-        int ref = library.registerHashtable(new Hashtable(initialSize, maxLoad));
+        IStrategoTerm table = new StrategoHashMap(initialSize, maxLoad);
         
-        env.setCurrent(env.getFactory().makeInt(ref));
+        env.setCurrent(table);
         return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -9,29 +9,24 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_hashtable_destroy extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_hashtable_destroy(SSLLibrary library) {
+    protected SSL_hashtable_destroy() {
         super("SSL_hashtable_destroy", 0, 1);
-        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
             throws InterpreterException {
 
-        if (!(Tools.isTermInt(targs[0])))
+        if (!(targs[0] instanceof StrategoHashMap))
             return false;
-
-        boolean res = library.removeHashtable(((IStrategoInt)targs[0]).intValue());
-        env.setCurrent(targs[0]);
-        return res;
+        
+        StrategoHashMap ht = (StrategoHashMap) targs[0];
+        ht.clear();
+        return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -9,31 +9,22 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_create.Hashtable;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_hashtable_get extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_hashtable_get(SSLLibrary library) {
+    protected SSL_hashtable_get() {
         super("SSL_hashtable_get", 0, 2);
-        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
-
-        if(!(Tools.isTermInt(targs[0])))
+        if (!(targs[0] instanceof StrategoHashMap))
             return false;
-
-        Hashtable ath = library.getHashtable(((IStrategoInt)targs[0]).intValue());
-        if(ath == null)
-            return false;
         
+        StrategoHashMap ath = (StrategoHashMap) targs[0];
+        
         IStrategoTerm t = ath.get(targs[1]);
         if(t == null)
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -9,30 +9,22 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_create.Hashtable;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_hashtable_keys extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_hashtable_keys(SSLLibrary library) {
+    protected SSL_hashtable_keys() {
         super("SSL_hashtable_keys", 0, 1);
-        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
-
-        if(!(Tools.isTermInt(targs[0])))
+        if (!(targs[0] instanceof StrategoHashMap))
             return false;
-
-        Hashtable ath = library.getHashtable(Tools.javaInt(targs[0]));
-        if(ath == null)
-            return false;
         
+        StrategoHashMap ath = (StrategoHashMap) targs[0];
+        
         env.setCurrent(env.getFactory().makeList(ath.keySet()));
         return true;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -9,32 +9,24 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_create.Hashtable;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_hashtable_put extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_hashtable_put(SSLLibrary library) {
+    protected SSL_hashtable_put() {
         super("SSL_hashtable_put", 0, 3);
-        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
-        if(!(Tools.isTermInt(targs[0])))
+        if (!(targs[0] instanceof StrategoHashMap))
             return false;
-
-        Hashtable ath = library.getHashtable(((IStrategoInt)targs[0]).intValue());
-        if(ath == null)
-            return false;
         
+        StrategoHashMap ath = (StrategoHashMap) targs[0];
+        
         ath.put(targs[1], targs[2]);
-        env.setCurrent(targs[0]);
+        env.setCurrent(ath);
         return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -9,33 +9,24 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_create.Hashtable;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_hashtable_remove extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_hashtable_remove(SSLLibrary library) {
+    protected SSL_hashtable_remove() {
         super("SSL_hashtable_remove", 0, 2);
-        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
-
-        if(!(Tools.isTermInt(targs[0])))
+        if (!(targs[0] instanceof StrategoHashMap))
             return false;
-
-        Hashtable ath = library.getHashtable(((IStrategoInt)targs[0]).intValue());
-        if(ath == null)
-            return false;
         
+        StrategoHashMap ath = (StrategoHashMap) targs[0];
+        
         ath.remove(targs[1]);
-        env.setCurrent(targs[0]);
+        env.setCurrent(ath);
         return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -9,29 +9,23 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_create.Hashtable;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_hashtable_reset extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_hashtable_reset(SSLLibrary library) {
+    protected SSL_hashtable_reset() {
         super("SSL_hashtable_reset", 0, 1);
-        this.library = library;
     }
 
     @Override
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
-        if (!(Tools.isTermInt(tvars[0])))
+        if (!(tvars[0] instanceof StrategoHashMap))
             return false;
-
-        Hashtable ht = library.getHashtable(((IStrategoInt)tvars[0]).intValue());
+        
+        StrategoHashMap ht = (StrategoHashMap) tvars[0];
         ht.clear();
         return true;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -7,15 +7,6 @@
  */
 package org.spoofax.interpreter.library.ssl;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Map.Entry;
-
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
@@ -26,87 +17,8 @@
 
 public class SSL_indexedSet_create extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-    
-    class IndexedSet  {
-        
-        private static final long serialVersionUID = -4514696890481283123L;
-        private int counter;
-        Map<IStrategoTerm, Integer> map;
-        
-        IndexedSet(int initialSize, int maxLoad) {
-            map = new HashMap<IStrategoTerm, Integer>(initialSize, 1.0f*maxLoad/100);
-            counter = 0;
-        }
-        
-        public int put(IStrategoTerm value) {
-            int idx = counter++; 
-            map.put(value, idx);
-            return idx;
-        }
-
-        public int getIndex(IStrategoTerm t) {
-            Integer r = map.get(t);
-            return r == null ? -1 : r;
-        }
-
-        public boolean containsValue(IStrategoTerm t) {
-            return map.containsKey(t);
-        }
-
-        public Collection<Integer> values() {
-            return map.values();
-        }
-
-        public boolean remove(IStrategoTerm t) {
-            return map.remove(t) != null;
-        }
-
-        public void clear() {
-            counter = 0;
-            map.clear();
-        }
-
-        public Collection<IStrategoTerm> keySet() {
-            // FIXME this could easily be more efficient
-            class X implements Comparable<X> {
-                IStrategoTerm t;
-                Integer i;
-                X(IStrategoTerm t, Integer i) {
-                    this.t = t;
-                    this.i = i;
-                }
-                public int compareTo(X o) {
-                    return i.compareTo(o.i);
-                }
-            }
-            List<X> xs = new ArrayList<X>();
-            for(Entry<IStrategoTerm,Integer> e : map.entrySet()) { 
-                xs.add(new X(e.getKey(), e.getValue()));
-            }
-            Collections.sort(xs);
-            List<IStrategoTerm> r = new ArrayList<IStrategoTerm>();
-            for(X x : xs)
-                r.add(x.t);
-            return r;
-        }
-
-        public boolean containsKey(IStrategoTerm t) {
-            return map.containsKey(t);
-        }
-
-        public int size() {
-            return map.size();
-        }
-        
-        public Set<Entry<IStrategoTerm, Integer>> entrySet() {
-            return map.entrySet();
-        }
-    }
-
-    protected SSL_indexedSet_create(SSLLibrary library) {
+    protected SSL_indexedSet_create() {
         super("SSL_indexedSet_create", 0, 2);
-        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
@@ -119,8 +31,8 @@
         int initialSize = ((IStrategoInt)targs[0]).intValue();
         int maxLoad = ((IStrategoInt)targs[1]).intValue();
 
-        int ref = library.registerIndexedSet(new IndexedSet(initialSize, maxLoad));
-        env.setCurrent(env.getFactory().makeInt(ref));
+        IStrategoTerm result = new IndexedSet(initialSize, maxLoad);
+        env.setCurrent(result);
         
         return true;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -9,28 +9,23 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_indexedSet_destroy extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_indexedSet_destroy(SSLLibrary library) {
+    protected SSL_indexedSet_destroy() {
         super("SSL_indexedSet_destroy", 0, 1);
-        this.library = library;
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
-
-        if(!(Tools.isTermInt(targs[0])))
+        if(!(targs[0] instanceof IndexedSet))
             return false;
-
-        boolean r = library.removeIndexedSet(Tools.asJavaInt(targs[0]));
-        env.setCurrent(targs[0]);
         
-        return r;
+        IndexedSet set = (IndexedSet) targs[0];
+        set.clear();
+        
+        return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -8,34 +8,22 @@
 package org.spoofax.interpreter.library.ssl;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_indexedSet_create.IndexedSet;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_indexedSet_elements extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_indexedSet_elements(SSLLibrary library) {
+    protected SSL_indexedSet_elements() {
         super("SSL_indexedSet_elements", 0, 1);
-        this.library = library;
     }
 
-    public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-            throws InterpreterException {
-
-        if (!(Tools.isTermInt(targs[0])))
+    public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
+        if(!(targs[0] instanceof IndexedSet))
             return false;
-
-        IndexedSet is = library.getIndexedSet(Tools.asJavaInt(targs[0]));
-
-        if(is == null)
-            return false;
-
         
+        IndexedSet is = (IndexedSet) targs[0];
+        
         env.setCurrent(env.getFactory().makeList(is.keySet()));
         
         return true;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -8,32 +8,21 @@
 package org.spoofax.interpreter.library.ssl;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_indexedSet_create.IndexedSet;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_indexedSet_getIndex extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_indexedSet_getIndex(SSLLibrary library) {
+    protected SSL_indexedSet_getIndex() {
         super("SSL_indexedSet_getIndex", 0, 2);
-        this.library = library;
     }
 
-    public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-            throws InterpreterException {
-
-        if (!(Tools.isTermInt(targs[0])))
+    public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
+        if(!(targs[0] instanceof IndexedSet))
             return false;
-
-        IndexedSet is = library.getIndexedSet(Tools.asJavaInt(targs[0]));
         
-        if(is == null)
-            return false;
+        IndexedSet is = (IndexedSet) targs[0];
         
         int idx = is.getIndex(targs[1]);
         if(idx == -1)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -9,29 +9,24 @@
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_indexedSet_create.IndexedSet;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_indexedSet_put extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_indexedSet_put(SSLLibrary library) {
+    protected SSL_indexedSet_put() {
         super("SSL_indexedSet_put", 1, 2);
-        this.library = library;
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
             throws InterpreterException {
-
-        if (!(Tools.isTermInt(targs[0])))
+        
+        if(!(targs[0] instanceof IndexedSet))
             return false;
-
-        IndexedSet is = library.getIndexedSet(Tools.asJavaInt(targs[0]));
         
+        IndexedSet is = (IndexedSet) targs[0];
+        
         if(is == null)
             return false;
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -8,30 +8,21 @@
 package org.spoofax.interpreter.library.ssl;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_indexedSet_create.IndexedSet;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_indexedSet_remove extends AbstractPrimitive {
- 
-    private final SSLLibrary library;
 
-    protected SSL_indexedSet_remove(SSLLibrary library) {
+    protected SSL_indexedSet_remove() {
         super("SSL_indexedSet_remove", 0, 2);
-        this.library = library;
     }
 
-    public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-            throws InterpreterException {
-
-        if (!(Tools.isTermInt(targs[0])))
+    public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
+        if(!(targs[0] instanceof IndexedSet))
             return false;
-
-        IndexedSet is = library.getIndexedSet(Tools.asJavaInt(targs[0]));
         
+        IndexedSet is = (IndexedSet) targs[0];
         if(is == null)
             return false;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	2009-08-20 08:04:56 UTC (rev 19849)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	2009-08-20 09:42:16 UTC (rev 19850)
@@ -8,35 +8,24 @@
 package org.spoofax.interpreter.library.ssl;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.ssl.SSL_indexedSet_create.IndexedSet;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SSL_indexedSet_reset extends AbstractPrimitive {
 
-    private final SSLLibrary library;
-
-    protected SSL_indexedSet_reset(SSLLibrary library) {
+    protected SSL_indexedSet_reset() {
         super("SSL_indexedSet_reset", 0, 1);
-        this.library = library;
     }
 
-    public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-            throws InterpreterException {
-
-        if (!(Tools.isTermInt(targs[0])))
+    public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
+        if(!(targs[0] instanceof IndexedSet))
             return false;
-

(259 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Thu Aug 20 11:42:48 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 20 Aug 2009 09:42:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19851 - LennartKats -
	in strc-java/trunk/java: . runtime/org/strategoxt/lang/compat
	runtime/org/strategoxt/lang/parallel/tables
Message-ID: <200908200942.n7K9gRYF015533@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-20 09:42:48 +0000 (Thu, 20 Aug 2009)
New Revision: 19851

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19851&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Updated STRJ to use blob terms for indexed sets and hash tables. (All tests pass.)

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-20 09:42:16 UTC (rev 19850)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-20 09:42:48 UTC (rev 19851)
@@ -1,7 +1,5 @@
 package org.strategoxt.lang.compat;
 
-import static org.strategoxt.lang.Term.*;
-
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
@@ -9,7 +7,7 @@
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
-import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.library.ssl.StrategoHashMap;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.lang.Context;
@@ -80,23 +78,20 @@
 		config.put(factory.makeString("JAVA_PLATFORM"), factory.makeInt(1));
 	}
 
-	private Map<IStrategoTerm, IStrategoTerm> getConfigTable() {
+	private StrategoHashMap getConfigTable() {
 		ITermFactory factory = context.getFactory();
 		SSLLibrary library = (SSLLibrary) context.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
 		if (library == null) throw new IllegalStateException("Standard operator registry not found");
-		Map<IStrategoTerm, IStrategoTerm> allTables = library.getHashtable(library.getTableTableRef());
+		StrategoHashMap allTables = library.getTableTable();
 		
-		IStrategoTerm configTerm = allTables.get(factory.makeString("config"));
-		IStrategoInt configRef; 
-		if (configTerm == null) {
-			IStrategoTerm[] config = { factory.makeInt(117), factory.makeInt(75) };
-			configRef = (IStrategoInt) context.invokePrimitive("SSL_hashtable_create", config[0], NO_STRATEGIES, config);
-			configTerm = factory.makeAppl(factory.makeConstructor("Hashtable", 1), configRef);
-			allTables.put(factory.makeString("config"), configTerm);
+		IStrategoTerm configRef = allTables.get(factory.makeString("config"));
+		if (configRef == null) {
+			StrategoHashMap result = new StrategoHashMap(117, 75);
+			configRef = factory.makeAppl(factory.makeConstructor("Hashtable", 1), result);
+			allTables.put(factory.makeString("config"), configRef);
+			return result;
 		} else {
-			configRef = (IStrategoInt) configTerm.getSubterm(0);
+			return (StrategoHashMap) configRef.getSubterm(0);
 		}
-		
-		return library.getHashtable(configRef.intValue());
 	}
 }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java	2009-08-20 09:42:16 UTC (rev 19850)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java	2009-08-20 09:42:48 UTC (rev 19851)
@@ -13,9 +13,7 @@
  */
 public class ParallelTableCreate extends SSL_hashtable_create {
 
-	protected ParallelTableCreate(ParallelTableLibrary library) {
-		super(library.getSSLLibrary());
-	}
+	protected ParallelTableCreate(ParallelTableLibrary library) {}
 	
 	@Override
 	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java	2009-08-20 09:42:16 UTC (rev 19850)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java	2009-08-20 09:42:48 UTC (rev 19851)
@@ -13,9 +13,7 @@
  */
 public class ParallelTableDestroy extends SSL_hashtable_destroy {
 
-	protected ParallelTableDestroy(ParallelTableLibrary library) {
-		super(library.getSSLLibrary());
-	}
+	protected ParallelTableDestroy(ParallelTableLibrary library) {}
 
 	@Override
 	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java	2009-08-20 09:42:16 UTC (rev 19850)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java	2009-08-20 09:42:48 UTC (rev 19851)
@@ -13,9 +13,7 @@
  */
 public class ParallelTableGet extends SSL_hashtable_get {
 
-	protected ParallelTableGet(ParallelTableLibrary library) {
-		super(library.getSSLLibrary());
-	}
+	protected ParallelTableGet(ParallelTableLibrary library) {}
 
 	@Override
 	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java	2009-08-20 09:42:16 UTC (rev 19850)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java	2009-08-20 09:42:48 UTC (rev 19851)
@@ -13,9 +13,7 @@
  */
 public class ParallelTableKeys extends SSL_hashtable_keys {
 
-	protected ParallelTableKeys(ParallelTableLibrary library) {
-		super(library.getSSLLibrary());
-	}
+	protected ParallelTableKeys(ParallelTableLibrary library) {}
 	
 	@Override
 	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java	2009-08-20 09:42:16 UTC (rev 19850)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java	2009-08-20 09:42:48 UTC (rev 19851)
@@ -1,7 +1,6 @@
 package org.strategoxt.lang.parallel.tables;
 
 import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -12,10 +11,11 @@
     
     private final Object syncRoot = new Object();
     
-    private final SSLLibrary sslLibrary;
+    // concurrentset?
+    // private final ThreadLocal<Set<LoggedTableRead>> tableReads =
+    //	new ThreadLocal<Set<LoggedTableRead>>();
     
-    public ParallelTableLibrary(SSLLibrary sslLibrary) {
-    	this.sslLibrary = sslLibrary;
+    public ParallelTableLibrary() {
     	add(new ParallelTableDestroy(this));
     	add(new ParallelTableRemove(this));
     	add(new ParallelTableReset(this));
@@ -25,10 +25,6 @@
     	add(new ParallelTablePut(this));
     }
     
-    public SSLLibrary getSSLLibrary() {
-    	return sslLibrary;
-    }
-    
     public Object getSyncRoot() {
 		return syncRoot;
 	}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java	2009-08-20 09:42:16 UTC (rev 19850)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java	2009-08-20 09:42:48 UTC (rev 19851)
@@ -13,9 +13,7 @@
  */
 public class ParallelTablePut extends SSL_hashtable_put {
 
-	protected ParallelTablePut(ParallelTableLibrary library) {
-		super(library.getSSLLibrary());
-	}
+	protected ParallelTablePut(ParallelTableLibrary library) {}
 	
 	@Override
 	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java	2009-08-20 09:42:16 UTC (rev 19850)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java	2009-08-20 09:42:48 UTC (rev 19851)
@@ -13,9 +13,7 @@
  */
 public class ParallelTableRemove extends SSL_hashtable_remove {
 
-	protected ParallelTableRemove(ParallelTableLibrary library) {
-		super(library.getSSLLibrary());
-	}
+	protected ParallelTableRemove(ParallelTableLibrary library) {}
 
 	@Override
 	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java	2009-08-20 09:42:16 UTC (rev 19850)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java	2009-08-20 09:42:48 UTC (rev 19851)
@@ -15,7 +15,6 @@
 	private final ParallelTableLibrary library;
 
 	protected ParallelTableReset(ParallelTableLibrary library) {
-		super(library.getSSLLibrary());
 		this.library = library;
 	}
 	

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Thu Aug 20 14:58:46 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 20 Aug 2009 12:58:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19852 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
Message-ID: <200908201258.n7KCwPBe018036@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-20 12:58:46 +0000 (Thu, 20 Aug 2009)
New Revision: 19852

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19852&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-20 09:42:48 UTC (rev 19851)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-20 12:58:46 UTC (rev 19852)
@@ -58,7 +58,8 @@
     (file-exists <+ <conc-strings> ("syntax/", <id>));
     if not(file-exists) then
       fatal-err(|"Accompanying .def file not found.")
-    end
+    end;
+    verbose-msg(!"Found accompanying .def file: ", id)
 
 strategies
 
@@ -78,7 +79,6 @@
       input := <pack-sdf> FILE(<conc-strings> ("syntax/", <get-main-class-name>, ".sdf"))
     end;
   
-    check-options;
     configure-main-descriptor;
     <sdf2rtg> input;
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-20 09:42:48 UTC (rev 19851)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-20 12:58:46 UTC (rev 19852)
@@ -107,12 +107,6 @@
     lower-case;
     <conc-strings> ("org.strategoxt.imp.generated.", <id>)
   
-  check-options =
-    require-option(
-      where(<get-config> SdfMainModuleFlag)
-    | "Main module (-m)"
-    )
-  
   require-option(rule|description) = 
     rule
   <+

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-20 09:42:48 UTC (rev 19851)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-20 12:58:46 UTC (rev 19852)
@@ -26,6 +26,7 @@
 import org.strategoxt.imp.runtime.stratego.adapter.WrappedAstNodeFactory;
 
 import aterm.ATermFactory;
+import aterm.pure.PureFactory;
 
 /**
  * Environment class that maintains a maximally shared ATerm environment and
@@ -43,8 +44,6 @@
 		
 	private final static ATermFactory factory;
 	
-	private final static ParseTableManager parseTableManager;
-	
 	private final static Map<String, ParseTable> parseTables;
 	
 	private final static Map<String, Descriptor> descriptors;
@@ -57,7 +56,7 @@
 	
 	static {
 		wrappedFactory = new UnsharedWrappedATermFactory();
-		factory = wrappedFactory.getFactory();
+		factory = new PureFactory();
 		parseTableManager = new ParseTableManager(factory);
 		parseTables = new HashMap<String, ParseTable>();
 		descriptors = Collections.synchronizedMap(new HashMap<String, Descriptor>());



From L.C.L.Kats at tudelft.nl  Thu Aug 20 16:06:14 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 20 Aug 2009 14:06:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19853 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/test
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
Message-ID: <200908201405.n7KE5r29019033@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-20 14:06:14 +0000 (Thu, 20 Aug 2009)
New Revision: 19853

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19853&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-20 12:58:46 UTC (rev 19852)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-20 14:06:14 UTC (rev 19853)
@@ -49,8 +49,8 @@
   find-def-file =
     remove-extension;
     rules(
-      MainDescriptorName   := <id>
-      DescriptorNamePrefix := <remove-extension>
+      MainDescriptorName   := <base-filename>
+      DescriptorNamePrefix := <base-filename; remove-extension>
     );
     with(<chdir> <dirname>; <chdir> "..");
     guarantee-extension(|"def"); // remove .main.esv
@@ -68,7 +68,8 @@
       !FILE(<InputFile>);
       if FILE(has-extension(|"esv") => esv) then
         <find-def-file> esv;
-        rules(InputFile := <id>)
+        rules(InputFile := <id>);
+        !FILE(<id>)
       end;
       ?input
     else

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh	2009-08-20 12:58:46 UTC (rev 19852)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/test/test-stratego-java.sh	2009-08-20 14:06:14 UTC (rev 19853)
@@ -10,3 +10,5 @@
 
 ../../sdf2imp -i $SJ.def -m Stratego-Java-15 -p $SJ.tbl -e str -s "Module[StrategoHost]" --verbose 2
 ../../sdf2imp -i $SJ.def -m Stratego-Java-15
+../../sdf2imp -i editor/Stratego-Java-15.main.esv
+(cd editor; ../../../sdf2imp -i Stratego-Java-15.main.esv)

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-20 12:58:46 UTC (rev 19852)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-20 14:06:14 UTC (rev 19853)
@@ -7,7 +7,6 @@
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.Path;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.libstratego_lib;
@@ -55,18 +54,17 @@
 	public void updateResource(IResource resource, IProgressMonitor monitor) {
 		IPath location = resource.getRawLocation();
 		if (location == null) return;
-		String filename = location.toOSString();
 		
 		try {
-			if (resource.exists() && isMainFile(filename)) {
+			if (resource.exists() && isMainFile(resource)) {
 				monitor.beginTask("Building " + resource.getName(), IProgressMonitor.UNKNOWN);
 				buildDescriptor(resource);
 			}
 			
 		} catch (RuntimeException e) {
-			Environment.logException("Unable to build descriptor for " + filename, e);
+			Environment.logException("Unable to build descriptor for " + resource, e);
 		} catch (Error e) { // workspace thread swallows this >:(
-			Environment.logException("Unable to build descriptor for " + filename, e);
+			Environment.logException("Unable to build descriptor for " + resource, e);
 		}
 	}
 
@@ -85,11 +83,9 @@
 				return;
 			}
 			
-			String resultPath = ((IStrategoString) result).stringValue();
-			IResource packedDescriptor = mainFile.getParent().getFile(Path.fromOSString(resultPath));
-			loader.loadPackedDescriptor(packedDescriptor);
+			loader.loadPackedDescriptor(DynamicDescriptorUpdater.getTargetDescriptor(mainFile));
 			
-			// XXX: The generated file should be refreshed after rebuilding
+			// TODO: Refresh generated files after rebuilding?
 			
 		} catch (IOException e) {
 			Environment.logException("Unable to build descriptor for " + mainFile, e);
@@ -118,6 +114,7 @@
 		} catch (StrategoExit e) {
 			Environment.logException("Unexpected exit in dynamic builder", e);
 			context.printStackTrace();
+			messageHandler.addMarkerFirstLine(mainFile, "Error building descriptor:" + e, SEVERITY_ERROR);
 			return null;
 		} finally {
 			Debug.stopTimer("Invoked descriptor builder for " + mainFile.getName());
@@ -125,10 +122,13 @@
 		}
 	}
 	
-	private static boolean isMainFile(String file) {
+	private static boolean isMainFile(IResource file) {
 		// TODO: Determine if a file is the main descriptor file by its contents?
 		// InputStream stream = agent.openInputStream(file);
 		
-		return file.matches(".*(-Main|\\.main)\\.esv");
+		if (file.getParent() != null && "bin".equals(file.getParent().getName()))
+			return false;
+		
+		return file.toString().matches(".*(-Main|\\.main)\\.esv");
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-20 12:58:46 UTC (rev 19852)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-20 14:06:14 UTC (rev 19853)
@@ -104,14 +104,15 @@
 	
 	public void updateResource(IResource resource, IProgressMonitor monitor, boolean startup) {
 		if (resource.getName().endsWith(".packed.esv")) {
-			IResource source = getMainDescriptor(resource);
+			IResource source = getSourceDescriptor(resource);
 			
 			boolean isUpdateOnly = updateOnly.contains(resource);
 			
-			if (!source.equals(resource) && !isUpdateOnly && !startup) {
+			if (!source.equals(resource) && source.exists() && !isUpdateOnly && !startup) {
 				// Try to build using the .main.esv instead;
 				// the build.xml file may touch the .packed.esv file
 				// to signal a rebuild is necessary
+				// TODO: Prevent duplicate builds triggered this way...
 				getBuilder().updateResource(source, monitor);
 			} else if (resource.exists()) {
 				monitor.subTask("Loading " + resource.getName());
@@ -126,7 +127,7 @@
 
 	public void loadPackedDescriptor(IResource descriptor) {
 		// TODO2: Properly trace back descriptor errors to their original source
-		IResource source = getMainDescriptor(descriptor);
+		IResource source = getSourceDescriptor(descriptor);
 		try {
 			messageHandler.clearMarkers(source);
 			
@@ -151,13 +152,20 @@
 		}
 	}
 	
-	private IResource getMainDescriptor(IResource packedDescriptor) {
+	public static IResource getSourceDescriptor(IResource packedDescriptor) {
 		String name = packedDescriptor.getName();
 		name = name.substring(0, name.length() - ".packed.esv".length());
 		IResource result = packedDescriptor.getParent().getParent().findMember("editor/" + name + ".main.esv");
 		return result != null ? result : packedDescriptor;
 	}
 	
+	public static IResource getTargetDescriptor(IResource packedDescriptor) {
+		String name = packedDescriptor.getName();
+		name = name.substring(0, name.length() - ".main.esv".length());
+		IResource result = packedDescriptor.getParent().getParent().findMember("include/" + name + ".packed.esv");
+		return result != null ? result : packedDescriptor;
+	}
+	
 	private void reportError(final IResource descriptor, final String message) {
 		if (ResourcesPlugin.getWorkspace().isTreeLocked()) {
 			Job job = new WorkspaceJob("Add error marker") {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-20 12:58:46 UTC (rev 19852)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-20 14:06:14 UTC (rev 19853)
@@ -44,6 +44,8 @@
 		
 	private final static ATermFactory factory;
 	
+	private final static ParseTableManager parseTableManager;
+	
 	private final static Map<String, ParseTable> parseTables;
 	
 	private final static Map<String, Descriptor> descriptors;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-08-20 12:58:46 UTC (rev 19852)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-08-20 14:06:14 UTC (rev 19853)
@@ -41,8 +41,6 @@
 	
 	private final String markerType;
 
-	// TODO: Synchronize access to activeMarkers
-	//       (but not to marker API)
 	private final Set<IMarker> activeMarkers = new HashSet<IMarker>();
 	
 	public AstMessageHandler(String markerType) {



From L.C.L.Kats at tudelft.nl  Thu Aug 20 17:22:59 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 20 Aug 2009 15:22:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19854 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
Message-ID: <200908201522.n7KFMcJb019974@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-20 15:22:59 +0000 (Thu, 20 Aug 2009)
New Revision: 19854

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19854&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java

Log:
Support having multiple classloaders for SSL_EXT_java_call.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-20 14:06:14 UTC (rev 19853)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-20 15:22:59 UTC (rev 19854)
@@ -18,6 +18,8 @@
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoExit;
+import org.strategoxt.lang.compat.SSL_EXT_java_call;
+import org.strategoxt.permissivegrammars.make_permissive;
 
 /**
  * Runs the project generator on modified editor descriptors.
@@ -43,6 +45,7 @@
 			
 			agent = new EditorIOAgent();
 			context = new Context(Environment.getTermFactory(), agent);
+			SSL_EXT_java_call.registerClassLoader(make_permissive.class.getClassLoader());
 			sdf2imp.init(context);
 			
 		} catch (Throwable e) { // (catch classes not loading, etc.)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-20 14:06:14 UTC (rev 19853)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-20 15:22:59 UTC (rev 19854)
@@ -5,7 +5,9 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 import org.spoofax.interpreter.core.IContext;
@@ -34,11 +36,18 @@
 	private static Map<String, Method> initCache =
 		new ConcurrentHashMap<String, Method>();
 	
+	private static Set<ClassLoader> asyncClassLoaders = new HashSet<ClassLoader>();
+	
 	public SSL_EXT_java_call() {
 		super("SSL_EXT_java_call", 0, 3);
 	}
+	
+	public static void registerClassLoader(ClassLoader classLoader) {
+		synchronized (asyncClassLoaders) {
+			asyncClassLoaders.add(classLoader);
+		}
+	}
 
-
 	@Override
 	public boolean call(IContext env, org.spoofax.interpreter.stratego.Strategy[] svars,
 			IStrategoTerm[] tvars) throws InterpreterException {
@@ -85,9 +94,9 @@
 				String libraryName = toLibraryName(className);
 				Class<?> library;
 				try {
-					library = Class.forName(libraryName);
+					library = findClass(libraryName);
 				} catch (ClassNotFoundException e) {
-					library = Class.forName(toStrategoName(libraryName));
+					library = findClass(toStrategoName(libraryName));
 				}
 				method = library.getMethod("init", Context.class);
 				initCache.put(className, method);
@@ -119,7 +128,7 @@
 		try {
 			Class<?> library;
 			try {
-				library = Class.forName(toStrategoName(innerClassName) + "_0_0");
+				library = findClass(toStrategoName(innerClassName) + "_0_0");
 				
 				Field instance = library.getField("instance");
 
@@ -156,6 +165,23 @@
 		}
 	}
 	
+	private static Class<?> findClass(String className) throws ClassNotFoundException {
+		try {
+			return Class.forName(className, true, SSL_EXT_java_call.class.getClassLoader());
+		} catch (ClassNotFoundException e) {
+			synchronized (asyncClassLoaders) {
+				for (ClassLoader loader : asyncClassLoaders) {
+					try {
+						return Class.forName(className, true, loader);
+					} catch (ClassNotFoundException ignored) {
+						// Try again
+					}
+				}
+			}
+			throw e;
+		}
+	}
+	
 	private static String toInnerClassName(String className) {
 		int lastDot = className.lastIndexOf('.');
 		return className.substring(0, lastDot) + "$" + className.substring(lastDot + 1);



From L.C.L.Kats at tudelft.nl  Fri Aug 21 09:48:00 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 21 Aug 2009 07:48:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19855 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
Message-ID: <200908210747.n7L7lc44032025@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-21 07:47:59 +0000 (Fri, 21 Aug 2009)
New Revision: 19855

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19855&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-20 15:22:59 UTC (rev 19854)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-21 07:47:59 UTC (rev 19855)
@@ -29,7 +29,6 @@
     option-wrap(
       sdf2imp-options
     , 
-      with(<set-verbosity> 2);
       sdf2imp
     <+
       prim("SSL_stacktrace_get_all_frame_names") => trace;       
@@ -41,8 +40,8 @@
     with
       file-exists
     where
-      def := <find-def-file> esv;
-      <sdf2imp> FILE(def)
+      rules(InputFile := esv);
+      <sdf2imp> FILE(esv)
   
   // FIXME: dirty hack for getting the .def file
   //        (should do this based on the esv contents instead...)
@@ -64,6 +63,9 @@
 strategies
 
   sdf2imp =
+    with(
+      <set-verbosity> 2
+    );
     if InputFile then
       !FILE(<InputFile>);
       if FILE(has-extension(|"esv") => esv) then
@@ -73,6 +75,10 @@
       end;
       ?input
     else
+      require-option(
+        <get-config> SdfMainModuleFlag()
+      | "Main module (-m)"
+      );
       if not(StartSymbol) then
         rules(StartSymbol := "Start")
       end;

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-20 15:22:59 UTC (rev 19854)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-21 07:47:59 UTC (rev 19855)
@@ -1,6 +1,7 @@
 package org.strategoxt.imp.metatooling.building;
 
 import static org.eclipse.core.resources.IMarker.*;
+import static org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater.*;
 
 import java.io.IOException;
 
@@ -61,7 +62,7 @@
 		try {
 			if (resource.exists() && isMainFile(resource)) {
 				monitor.beginTask("Building " + resource.getName(), IProgressMonitor.UNKNOWN);
-				buildDescriptor(resource);
+				buildDescriptor(resource, monitor);
 			}
 			
 		} catch (RuntimeException e) {
@@ -74,7 +75,7 @@
 	/**
 	 * Build and load a descriptor file.
 	 */
-	private void buildDescriptor(IResource mainFile) {
+	private void buildDescriptor(IResource mainFile, IProgressMonitor monitor) {
 		try {
 			Environment.assertLock();
 			messageHandler.clearMarkers(mainFile);
@@ -86,7 +87,8 @@
 				return;
 			}
 			
-			loader.loadPackedDescriptor(DynamicDescriptorUpdater.getTargetDescriptor(mainFile));
+			monitor.beginTask("Loading " + mainFile.getName(), IProgressMonitor.UNKNOWN);
+			loader.loadPackedDescriptor(getTargetDescriptor(mainFile));
 			
 			// TODO: Refresh generated files after rebuilding?
 			



From L.C.L.Kats at tudelft.nl  Fri Aug 21 15:14:01 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 21 Aug 2009 13:14:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19856 - LennartKats -
	in strc-java/branches: . one-method-per-strategy
	one-method-per-strategy/trans
Message-ID: <200908211313.n7LDDdX4003929@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-21 13:14:01 +0000 (Fri, 21 Aug 2009)
New Revision: 19856

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19856&view=rev

Added:
   strc-java/branches/one-method-per-strategy/
Modified:
   strc-java/branches/one-method-per-strategy/trans/java-postprocess.str
   strc-java/branches/one-method-per-strategy/trans/s2j.str

Log:
Added an experimental branch that moves strategies to static methods.

Changes:


Property changes on: strc-java/branches/one-method-per-strategy
___________________________________________________________________
Added: svn:ignore
   + configure
*.in
.project
*.log
depcomp
config.guess
config.status
config.sub
ltmain.sh
autoxt.m4
Makefile
mkinstalldirs
libtool
autom4te.cache
Makefile.xt
missing
aclocal.m4
install-sh
XTC

Added: svn:mergeinfo
   + 

Modified: strc-java/branches/one-method-per-strategy/trans/java-postprocess.str
===================================================================
--- strc-java/trunk/trans/java-postprocess.str	2009-08-21 07:47:59 UTC (rev 19855)
+++ strc-java/branches/one-method-per-strategy/trans/java-postprocess.str	2009-08-21 13:14:01 UTC (rev 19856)
@@ -91,3 +91,54 @@
 
   java-param-to-arg :
     param |[ t x ]| -> expr |[ x ]|
+
+strategies
+
+  java-strategies-to-methods-top =
+    topdown-consnil(try(java-strategies-to-methods))
+
+  java-strategies-to-methods :
+    class-body-dec* |[
+      mod* class x extends Strategy {
+        mod_field* x instance = new x();
+        
+        mod_method* IStrategoTerm invoke(param*) { bstm_body* }
+      }
+      
+      ~*tail
+    ]| ->
+    class-body-dec* |[
+      public static Strategy x_override;
+      
+      mod* IStrategoTerm x(param*) {
+        if (x_override != null)
+          stm_overridecall
+        bstm_body'*
+      }
+    
+      mod* class x extends Strategy {
+        mod_field* x instance = new ~x:x{"once"}(); // HACK
+        mod_method* IStrategoTerm invoke(param*) {
+          return x(e_param*);
+        }
+      }
+      
+      ~*tail
+    ]|
+    with
+      x_override  := <conc-strings> (x, "_override")
+    ; e_param*    := <map(\Param(_, _, Id(y)) -> expr |[ y ]|\)> param*
+    ; bstm_body'* := <alltd(\|[ this ]| -> |[ x.instance ]|\ + \|[ this.invoke(e*) ]| -> |[ x(e*) ]|\)> bstm_body*
+    ; if <lt> (<length> e_param*, 6) then // HACK
+        stm_overridecall := |[ return x_override.invoke(e_param*); ]|
+      else
+        stm_overridecall := |[ throw new IllegalStateException("Not implemented"); ]|
+      end
+
+  java-strategies-to-methods :
+    |[ x.instance = e ]| -> |[ x_override = e ]|
+    with
+      x_override := <conc-strings> (x, "_override")
+
+  java-strategies-to-methods :
+    |[ x.instance.invoke(e*) ]| -> |[ x(e*) ]|

Modified: strc-java/branches/one-method-per-strategy/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-08-21 07:47:59 UTC (rev 19855)
+++ strc-java/branches/one-method-per-strategy/trans/s2j.str	2009-08-21 13:14:01 UTC (rev 19856)
@@ -67,6 +67,7 @@
     ; log-timed(
         dr-scope-all-verbose(java-compile-spec)
       ; java-simplify
+      ; java-strategies-to-methods-top
       | "Backend transformation succeeded", 1
       )
     ; log-timed(
@@ -385,7 +386,7 @@
        }
     ]|
     with
-      body := <translate-definition-body> def
+      body           := <translate-definition-body> def
     ; invokedynamic* := <maybe-make-invoke-dynamic> (s*, t*)
 
   translate-outer-definition-conflict :



From L.C.L.Kats at tudelft.nl  Fri Aug 21 15:50:12 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 21 Aug 2009 13:50:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19857 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	strc-java/trunk/trans
Message-ID: <200908211349.n7LDnnck004164@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-21 13:50:11 +0000 (Fri, 21 Aug 2009)
New Revision: 19857

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19857&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkstemp.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java
   strc-java/trunk/trans/s2j.str

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkstemp.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkstemp.java	2009-08-21 13:14:01 UTC (rev 19856)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkstemp.java	2009-08-21 13:50:11 UTC (rev 19857)
@@ -36,6 +36,8 @@
         
         // HACK: We ignore the template directory, and just use it as a filename prefix
         String prefix = new File(javaString(tvars[0])).getName();
+        if (prefix.endsWith("XXXXXX"))
+            prefix = prefix.substring(0, prefix.length() - 6);
         
         SSLLibrary op = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         IOAgent agent = op.getIOAgent();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java	2009-08-21 13:14:01 UTC (rev 19856)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java	2009-08-21 13:50:11 UTC (rev 19857)
@@ -27,8 +27,6 @@
     public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
             throws InterpreterException {
         
-        // FIXME should we even bother with BAF? Now it's just text
-        
         if(!Tools.isTermInt(tvars[0]))
             return false;
         

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-08-21 13:14:01 UTC (rev 19856)
+++ strc-java/trunk/trans/s2j.str	2009-08-21 13:50:11 UTC (rev 19857)
@@ -385,7 +385,7 @@
        }
     ]|
     with
-      body := <translate-definition-body> def
+      body           := <translate-definition-body> def
     ; invokedynamic* := <maybe-make-invoke-dynamic> (s*, t*)
 
   translate-outer-definition-conflict :



From L.C.L.Kats at tudelft.nl  Mon Aug 24 10:01:35 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Aug 2009 08:01:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19858 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego
	strc-java/trunk/java
	strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
Message-ID: <200908240801.n7O818ut030004@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-24 08:01:34 +0000 (Mon, 24 Aug 2009)
New Revision: 19858

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19858&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
   strc-java/trunk/java/spoofax-libs.jar

Log:
Minor performance fixes:
- avoid (reflective) call to Class.getSimpleName in InteropStrategy
- avoid calling PrintStream.checkError(), which has an undocumented feature: it flushes the output stream(!)

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java	2009-08-21 13:50:11 UTC (rev 19857)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java	2009-08-24 08:01:34 UTC (rev 19858)
@@ -32,9 +32,10 @@
 
         SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         
+        // TODO: Don't use a printstream because of its quiet failing behavior
         PrintStream ous = or.getIOAgent().getOutputStream(Tools.asJavaInt(targs[1]));
         ous.print(Tools.javaString(targs[0]));
-        if (ous.checkError()) return false;
+        // if (ous.checkError()) return false; // UNDONE: quietly flushes the stream!
         
         env.setCurrent(targs[1]);
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java	2009-08-21 13:50:11 UTC (rev 19857)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_printnl.java	2009-08-24 08:01:34 UTC (rev 19858)
@@ -59,7 +59,7 @@
         if(output.equals("stderr")) {
             PrintStream stream = agent.getOutputStream(IOAgent.CONST_STDERR);
             stream.println(sb);
-            if (stream.checkError()) return false;
+            // if (stream.checkError()) return false;  // UNDONE: quietly flushes the stream!
         } else if(output.equals("stdout")) {
             PrintStream stream = agent.getOutputStream(IOAgent.CONST_STDOUT);
             stream.println(sb);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2009-08-21 13:50:11 UTC (rev 19857)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2009-08-24 08:01:34 UTC (rev 19858)
@@ -219,7 +219,7 @@
 
     @Override
     public String toString() {
-        return "CallT(\"" + name + "\"," + svars + "," + tvars + ")";
+        return "CallT(\"" + getTargetStrategyName() + "\"," + svars + "," + tvars + ")";
     }
 
     public void prettyPrint(StupidFormatter sf) {
@@ -282,8 +282,8 @@
     }
 
     @Override
-    protected String getTraceName() {
-        return "call of" + "(" + name + ")";
+    protected final String getTraceName() {
+        return "call of" + "(" + getTargetStrategyName() + ")";
     }
 
 	public boolean evaluateWithArgs(IContext env, Strategy[] sv, IStrategoTerm[] tv) throws InterpreterException {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2009-08-21 13:50:11 UTC (rev 19857)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2009-08-24 08:01:34 UTC (rev 19858)
@@ -41,7 +41,7 @@
 	 * @param context	The compiled context, if used with an interpreter context.
 	 */
 	public InteropStrategy(Strategy strategy, Context context) {
-		super(strategy.getName(), null, null);
+		super(null, null, null);
 		
 		this.strategy = strategy;
 		this.context = context;
@@ -71,7 +71,7 @@
     }
 	
 	@Override
-	protected String getTraceName() {
+	public String getTargetStrategyName() {
 		return strategy.getName();
 	}
 	

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-21 13:50:11 UTC (rev 19857)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-24 08:01:34 UTC (rev 19858)
@@ -30,4 +30,5 @@
     end
   <+
     ?(program, args);
+    log(|Info(), ["Calling external tool ", program, " with arguments ", <conc-strings> args]);
     prim("SSL_EXT_call", program, args) => 0

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Mon Aug 24 14:30:57 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Aug 2009 12:30:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19859 - LennartKats - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter:
	library terms
Message-ID: <200908241230.n7OCUUCY001151@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-24 12:30:56 +0000 (Mon, 24 Aug 2009)
New Revision: 19859

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19859&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoString.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java

Log:
- Avoid pooling very large strings
- Escape backslashes in BasicStrategoString.toString()

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	2009-08-24 08:01:34 UTC (rev 19858)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	2009-08-24 12:30:56 UTC (rev 19859)
@@ -139,7 +139,7 @@
         inStreams.put(fileCounter, new BufferedInputStream(new RandomAccessInputStream(file)));
         outStreams.put(fileCounter, new PrintStream(new BufferedOutputStream(new RandomAccessOutputStream(file))));
         
-        if (m.equals("rw")) file.setLength(0);
+        if (m.equals("rw")) file.setLength(0); // HACK
         
         return fileCounter++;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoString.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoString.java	2009-08-24 08:01:34 UTC (rev 19858)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoString.java	2009-08-24 12:30:56 UTC (rev 19859)
@@ -54,7 +54,7 @@
     }
     
     public void prettyPrint(ITermPrinter pp) {
-        pp.print("\"" + value.replace("\"", "\\\"") + "\"");
+        pp.print("\"" + value.replace("\\", "\\\\").replace("\"", "\\\"") + "\"");
         printAnnotations(pp);
     }
  
@@ -62,7 +62,7 @@
     public String toString() {
         StringBuilder result = new StringBuilder();
         result.append("\"");
-        result.append(value.replace("\"", "\\\""));
+        result.append(value.replace("\\", "\\\\").replace("\"", "\\\""));
         result.append("\"");
         appendAnnotations(result);
         return result.toString();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	2009-08-24 08:01:34 UTC (rev 19858)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	2009-08-24 12:30:56 UTC (rev 19859)
@@ -29,7 +29,9 @@
 
     public static final IStrategoTerm[] EMPTY = {};
 
-    public static final BasicStrategoList EMPTY_LIST = new BasicStrategoList(null, null, null); 
+    public static final BasicStrategoList EMPTY_LIST = new BasicStrategoList(null, null, null);
+    
+    private static final int MAX_POOLED_STRING_LENGTH = 100;
 
     private static final Map<BasicStrategoConstructor, BasicStrategoConstructor> ctorCache =
         Collections.synchronizedMap(new WeakHashMap<BasicStrategoConstructor,BasicStrategoConstructor>());
@@ -274,7 +276,9 @@
     }
 
     public boolean hasConstructor(String name, int arity) {
-        return arity == 0
+    	if (name.length() > MAX_POOLED_STRING_LENGTH)
+            throw new UnsupportedOperationException("String too long to be pooled: " + name);
+    	return arity == 0
             ? stringPool.contains(name)
             : ctorCache.get(new BasicStrategoConstructor(name, arity)) != null;
     }
@@ -334,7 +338,8 @@
     }
 
     public IStrategoString makeString(String s) {
-        stringPool.add(s);
+    	if (s.length() <= MAX_POOLED_STRING_LENGTH)
+    	    stringPool.add(s);
         return new BasicStrategoString(s, null);
     }
 



From L.C.L.Kats at tudelft.nl  Mon Aug 24 14:32:13 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Aug 2009 12:32:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19860 - LennartKats -
	in strc-java/trunk: java
	java/runtime/org/strategoxt/lang/compat/override test trans
Message-ID: <200908241231.n7OCVkw9001160@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-24 12:32:13 +0000 (Mon, 24 Aug 2009)
New Revision: 19860

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19860&view=rev

Modified:
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/test/Makefile.am
   strc-java/trunk/trans/java-optimize.str

Log:
Minor pattern match optimization tweak; fixed 'make check' class path.

Changes:

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-08-24 12:30:56 UTC (rev 19859)
+++ strc-java/trunk/java/Makefile.am	2009-08-24 12:32:13 UTC (rev 19860)
@@ -36,17 +36,17 @@
 nobase_pkgdata_DATA = $(LIBRARYJAVAS) $(COMPILERJAVAS) .ALLCLASSES
 
 CLEANFILES = \
-  $(LIBRARYJAVAS) $(COMPILERJAVAS) $(GENRUNTIMEJAVAS) $(wildcard bin/*) \
+  $(LIBRARYJAVAS) $(COMPILERJAVAS) $(GENRUNTIMEJAVAS) $(wildcard bin/*/*/*) $(wildcard bin/*/*/*/*) $(wildcard bin/*/*/*/*/*) \
   runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.rtree \
   lib/org/strategoxt/libstratego-xtc.rtree \
   .ALLCLASSES
 
 SPOOFAX=../../../spoofax/trunk/spoofax
 CLASSPATH=runtime:lib:spoofax-libs.jar:.
-JAVACFLAGS=-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn
+JAVACFLAGS=-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn -d bin
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 
-STRJOPTIONS=--library -p org.strategoxt --verbose 3 -O 3
+STRJOPTIONS=--library -p org.strategoxt --verbose 3 -O 0
 
 JAR=`if which fastjar >/dev/null; then echo fastjar; else echo jar; fi`
 JARIN1=`find runtime  | grep -E '\.rtree|\.af|\.tbl' | sed 's!runtime/!-C runtime/ !'`
@@ -86,12 +86,12 @@
 	mv spoofax-libs.jar.tmp spoofax-libs.jar
 
 .ALLCLASSES : $(RUNTIMEJAVAS) $(LIBARYJAVAS) $(COMPILERJAVAS)
-	$(JAVAC) $(JAVACFLAGS) $(RUNTIMEJAVAS) $(LIBRARYJAVAS) $(COMPILERJAVAS) -d bin && touch $@
+	$(JAVAC) $(JAVACFLAGS) $(RUNTIMEJAVAS) $(LIBRARYJAVAS) $(COMPILERJAVAS) && touch $@
 
 ###### LIBRARIES #######
 
 bin/org/strategoxt/libstratego_lib.class : lib/org/strategoxt/libstratego_lib.java
-	$(JAVAC) $< -d bin
+	$(JAVAC) $<
 
 lib/org/strategoxt/libstratego_lib.java : $(STRATEGOXT)/share/stratego-lib/libstratego-lib.ctree ../trans/strj
 	../trans/strj -I $(STRATEGOXT)/share/stratego-lib -i $< -o $@ $(STRJOPTIONS)
@@ -152,7 +152,7 @@
 ###### COMPILER #######
 
 compiler/org/strategoxt/strj.java : ../trans/strj.ctree ../trans/strj
-	../trans/strj -i $< -o $@ -p org.strategoxt --verbose 3 -la stratego-lib -la stratego-xtc -la stratego-gpp -la org.strategoxt.libstrc -la org.strategoxt.libjava_front # -D DEFAULT_XTC_REPOSITORY="\"$(REPOSITORY)\""
+	../trans/strj -i $< -o $@ -p org.strategoxt --verbose 3 -la stratego-lib -la stratego-xtc -la stratego-gpp -la org.strategoxt.libstrc -la org.strategoxt.libjava_front -O 3 # -D DEFAULT_XTC_REPOSITORY="\"$(REPOSITORY)\""
 
 ###### EXTERNAL #######
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-08-24 12:30:56 UTC (rev 19859)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str	2009-08-24 12:32:13 UTC (rev 19860)
@@ -19,7 +19,7 @@
     ; !ParseTable(int)
     
   /* UNDONE: JSGLR_parse_string_compat not implemented
-   * TODO: implement JSGLR_parse_string without TermConverter usage
+   * TODO: Optimize - implement JSGLR_parse_string without TermConverter usage
   jsglr-parse-string(|tbl) =
     jsglr-parse-string(id | tbl, None(), "string")
   

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-24 12:30:56 UTC (rev 19859)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-24 12:32:13 UTC (rev 19860)
@@ -30,5 +30,6 @@
     end
   <+
     ?(program, args);
-    log(|Info(), ["Calling external tool ", program, " with arguments ", <conc-strings> args]);
+
+    log(|Info(), ["Calling external tool ", program, " ", <try(separate-by(|" "); concat-strings)> args]);
     prim("SSL_EXT_call", program, args) => 0

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/test/Makefile.am
===================================================================
--- strc-java/trunk/test/Makefile.am	2009-08-24 12:30:56 UTC (rev 19859)
+++ strc-java/trunk/test/Makefile.am	2009-08-24 12:32:13 UTC (rev 19860)
@@ -67,11 +67,7 @@
 
 TESTS=$(RUNNERFILES)
 
-# HACK: hardcoded, relative classpath
-
-BASEPATH=../../../spoofax/trunk/spoofax
-SPCLASSPATH=$(BASEPATH)/org.spoofax.interpreter.core/bin:$(BASEPATH)/org.spoofax.interpreter.adapter.aterm/bin:$(BASEPATH)/org.spoofax.interpreter.library.jsglr/bin:$(BASEPATH)/../../branches/spoofax-recovery/bin:$(BASEPATH)/org.spoofax.aterm/bin/:$(BASEPATH)/org.spoofax.aterm/lib/jjtraveler-0.4.3.jar:$(BASEPATH)/org.spoofax.aterm/lib/shared-objects-1.4.jar
-CLASSPATH=$(SPCLASSPATH):../java/runtime:../java/lib:.
+CLASSPATH=../java/spoofax-libs.jar:../java/bin:.
 JAVACFLAGS=-J-Xmx256m -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 

Modified: strc-java/trunk/trans/java-optimize.str
===================================================================
--- strc-java/trunk/trans/java-optimize.str	2009-08-24 12:30:56 UTC (rev 19859)
+++ strc-java/trunk/trans/java-optimize.str	2009-08-24 12:32:13 UTC (rev 19860)
@@ -119,6 +119,17 @@
     with
       bstm_othermatch'* := <try(replace-match-test1(|x_actualcons, x_cached))> bstm_othermatch*
   
+  replace-match-test1(|x_actualcons, x_cached) :
+    <match-decls-and-appl-test => (bstm_decl*, x_cons, bstm_body*)> ->
+    bstm* |[
+      if (x_actualcons == x_cons) {
+        bstm_decl*
+        bstm_body*
+      } else {
+        break Fail;
+      }
+    ]|
+  
   match-decls-and-appl-text :
     [Block(bstm*) | _] -> <match-decls-and-appl-test> bstm*
   



From L.C.L.Kats at tudelft.nl  Mon Aug 24 14:52:43 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Aug 2009 12:52:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19861 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
Message-ID: <200908241252.n7OCqGhh001311@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-24 12:52:43 +0000 (Mon, 24 Aug 2009)
New Revision: 19861

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19861&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AmbAsfixImploder.java

Log:
Fixed null-pointer exception when lexical ambiguities are imploded.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AmbAsfixImploder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AmbAsfixImploder.java	2009-08-24 12:32:13 UTC (rev 19860)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AmbAsfixImploder.java	2009-08-24 12:52:43 UTC (rev 19861)
@@ -46,7 +46,10 @@
 			tokenizer.setStartOffset(oldBeginOffset);
 			inLexicalContext = oldLexicalContext;
 			
-			results.add(implodeAppl(amb));
+			AstNode result = implodeAppl(amb);
+			if (result == null)
+				return null;
+			results.add(result);
 		}
 		
 		return new AmbAstNode(results);



From L.C.L.Kats at tudelft.nl  Mon Aug 24 14:55:18 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Aug 2009 12:55:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19862 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib
Message-ID: <200908241254.n7OCspeR001421@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-24 12:55:18 +0000 (Mon, 24 Aug 2009)
New Revision: 19862

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19862&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str

Log:
Elminated bogus sdf2rtg missing constructor error.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str	2009-08-24 12:52:43 UTC (rev 19861)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str	2009-08-24 12:55:18 UTC (rev 19862)
@@ -22,7 +22,7 @@
     )
   ; where(
       collect-om(?syntax(_))
-    ; map(grammar2prodrules <+ log(|Error(), "Rewriting syntax section failed"); fail)
+    ; map(grammar2prodrules <+ err(|"Rewriting syntax section failed"); fail)
     ; concat
     ; if ?[] then
         log(|Error(), "No production rules in RTG. Did you specify the right main module?")
@@ -62,7 +62,7 @@
           <+ opt2prodrule
           <+ inj2prodrule
           <+ prod2prodrule
-          <+ err(!"Rewriting production failed"); fail
+          <+ err(|"Rewriting production failed"); fail
           )
         ; where(try(<cycle-error> (p, <id>)))
         })
@@ -204,10 +204,10 @@
       ; if y := <get-cnstr-name> attrs then
           !rtg |[ A -> y(t*) ]|
         else
-          log-prod(|Error(), "No constructor name specified in production:", p)
-          ;    log(|Error(), "Resolution: please add a cons attribute to this production.")
-          ; if-verbose1(log(|Error(), "Production in abstract syntax: ", p))
-          ; //if <get-config> IgnoreMissingCons() then
+          //log-prod(|Error(), "No constructor name specified in production:", p)
+          //;    log(|Error(), "Resolution: please add a cons attribute to this production.")
+          //; if-verbose1(log(|Error(), "Production in abstract syntax: ", p))
+          //; if <get-config> IgnoreMissingCons() then
               ![]
             //else
             //  // FIXME SDF: http://sjofar.sen.cwi.nl:8080/show_bug.cgi?id=660



From L.C.L.Kats at tudelft.nl  Mon Aug 24 14:57:18 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Aug 2009 12:57:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19863 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
Message-ID: <200908241256.n7OCup9T001443@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-24 12:57:18 +0000 (Mon, 24 Aug 2009)
New Revision: 19863

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19863&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Common.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java

Log:
- Revised sdf2imp required options fetching and checking
- Revised the generated build.xml to support projects with just a .def and no .sdf file
- Added embedded Stratego expressions to the outliner descriptor syntax
- Minor presentational builder tweaks


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-24 12:57:18 UTC (rev 19863)
@@ -67,7 +67,7 @@
                 <arg value="-m"/>
                 <arg value="${sdfmodule}"/>
                 
-                <fileset file="${build}/${sdfmodule}-Permissive.gendef"/>
+                <fileset file="${syntax}/${sdfmodule}-Permissive.gendef"/>
                 <mapper type="glob" from="*-Permissive.gendef" to="*.tbl"/>
             </apply>
         </target>
@@ -86,8 +86,14 @@
         </target>
 
         <target name="pack-sdf" depends="init">
+            <available property="source-sdf-exists" resource="${syntax}/${sdfmodule}.sdf"/>
+        	<antcall target="pack-sdf.real"/>
+        	<antcall target="pack-sdf.copy"/>
+        </target>
+    
+        <target name="pack-sdf.real" depends="init" if="source-sdf-exists">
             <dependset>
-                <srcfilelist dir="${syntax}" files="**/*.sdf"/> <!-- */-->
+                <srcfilelist dir="${syntax}" files="**/*.sdf"/>
                 <targetfileset file="${syntax}/${sdfmodule}.def"/>
             </dependset>
             <apply executable="${build.strategoxt}/pack-sdf" dest="${build}" failonerror="true">
@@ -105,6 +111,10 @@
                 <mapper type="glob" from="*.sdf" to="*.def"/>
             </apply>
         </target>
+	
+	    <target name="pack-sdf.copy" depends="init" unless="source-sdf-exists">
+            <copy file="${syntax}/${sdfmodule}.def" todir="${build}"/>
+        </target>
     
         <target name="rtg2sig" depends="init,sdf2rtg">
             <apply executable="${build.strategoxt}/rtg2sig" dest="${build}" failonerror="true">
@@ -158,9 +168,9 @@
         
         <target name="strc-call" depends="init,rtg2sig">
             <dependset>
-                <srcfilelist dir="${trans}" files="**/*.str"/> <!-- */-->
-                <srcfilelist dir="${build}" files="**/*.str"/> <!-- */-->
-                <targetfileset dir="${dist}" includes="**/*"/> <!-- */-->
+                <srcfilelist dir="${trans}" files="**/*.str"/>
+                <srcfilelist dir="${build}" files="**/*.str"/>
+                <targetfileset dir="${dist}" includes="**/*"/>
             </dependset>
             <apply executable="${build.strategoxt}/{strcExecutable}" dest="${dist}" failonerror="true">
                 <arg value=".str"/>
@@ -199,10 +209,10 @@
             <!-- Remove any intermediate files -->
             <delete>
                 <fileset dir="${dist}">
-                    <include name="**/*.c"/>   <!-- */ -->
-                    <include name="**/*.dep"/> <!-- */ -->
-                    <include name="**/*.lo"/>  <!-- */ -->
-                    <include name="**/*.o"/>   <!-- */ -->
+                    <include name="**/*.c"/>
+                    <include name="**/*.dep"/>
+                    <include name="**/*.lo"/>
+                    <include name="**/*.o"/>
                 </fileset>
             </delete>
         </target>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str	2009-08-24 12:57:18 UTC (rev 19863)
@@ -6,8 +6,9 @@
 strategies
 
   create-builder-xml =
-    // (the XML pretty printer has problems with this file, so it's printed as text instead)
-    name := <ProjectName <+ get-sdf-main-module>; // $project_name} and ${project_loc} don't work properly...
+    // The XML pretty printer has problems with this file, so it's printed as text instead.
+    // Also, ${project_name} and ${project_loc} don't seem to always work properly...?
+    name := <ProjectName <+ get-sdf-main-module>; 
     
     <output-text-file(|[".externalToolBuilders"], "Ant Builder.launch")>
     <conc-strings>
@@ -18,27 +19,32 @@
 <stringAttribute key=\"org.eclipse.ant.ui.ATTR_ANT_MANUAL_TARGETS\" value=\"from-eclipse,\"/>
 <booleanAttribute key=\"org.eclipse.ant.ui.ATTR_TARGETS_UPDATED\" value=\"true\"/>
 <booleanAttribute key=\"org.eclipse.ant.ui.DEFAULT_VM_INSTALL\" value=\"false\"/>
-<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">
-<listEntry value=\"", name, "/build.xml\"/>
-</listAttribute>
-<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">
-<listEntry value=\"1\"/>
-</listAttribute>
+<stringAttribute key=\"org.eclipse.debug.core.ATTR_REFRESH_SCOPE\" value=\"${working_set:&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;launchConfigurationWorkingSet factoryID=&quot;org.eclipse.ui.internal.WorkingSetFactory&quot; label=&quot;working set&quot; name=&quot;working set&quot;&gt;&#10;&lt;item factoryID=&quot;org.eclipse.ui.internal.model.ResourceFactory&quot; path=&quot;/", name, "/include&quot; type=&quot;2&quot;/&gt;&#10;&lt;/launchConfigurationWorkingSet&gt;}\"/>
+
+<!--
+  <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">
+  <listEntry value=\"", name, "/build.xml\"/>
+  </listAttribute>
+  <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">
+  <listEntry value=\"1\"/>
+  </listAttribute>
+-->
+<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\"/>
+<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\"/>
+
 <booleanAttribute key=\"org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND\" value=\"false\"/>
 <listAttribute key=\"org.eclipse.jdt.launching.CLASSPATH\">
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;\"/>
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
 <listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;", name, "/aux/make_permissive.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
-<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;", name, "/aux/strategoxt.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;${project_loc}/aux/make_permissive.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
+<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.jdt.launching.classpathentry.variableClasspathEntry&quot;&gt;&#10;&lt;memento path=&quot;3&quot; variableString=&quot;${project_loc}/aux/strategoxt.jar&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;\"/>
 </listAttribute>
 <stringAttribute key=\"org.eclipse.jdt.launching.CLASSPATH_PROVIDER\" value=\"org.eclipse.ant.ui.AntClasspathProvider\"/>
 <booleanAttribute key=\"org.eclipse.jdt.launching.DEFAULT_CLASSPATH\" value=\"false\"/>
-<!-- <stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"", name, "\"/> -->
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"", name, "/build.xml\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_LOCATION\" value=\"${project_loc}/build.xml\"/>
 <stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS\" value=\"full,incremental,\"/>
 <booleanAttribute key=\"org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED\" value=\"true\"/>
-<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"", name, "\"/>
-<stringAttribute key=\"process_factory_id\" value=\"org.eclipse.ant.ui.remoteAntProcessFactory\"/>
+<stringAttribute key=\"org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY\" value=\"${project_loc}\"/>
 </launchConfiguration>"
 )
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/configure-main-descriptor.str	2009-08-24 12:57:18 UTC (rev 19863)
@@ -24,20 +24,28 @@
     | <NoExistingDescriptor < !"Main module (-m)" + !"language name">
     );
     
+    verbose-msg(!"Using main module", get-sdf-main-module);
+    
     require-option(
       where(StartSymbol) <+ rules(StartSymbol := <find-start-symbol>)
     | <NoExistingDescriptor < !"Start symbols (-s)" + !"language start symbols">
     );
     
+    verbose-msg(!"Using start symbols", StartSymbol);
+    
     require-option(
       where(BasePackage) <+ rules(BasePackage := <find-package-name>)
     | <NoExistingDescriptor < !"Package name (-p)" + !"language id">
     );
     
+    verbose-msg(!"Using package name", BasePackage);
+    
     require-option(
       where(EditorExtensions) <+ rules(EditorExtensions := <find-editor-extensions>)
     | <NoExistingDescriptor < !"Editor file extensions (-e)" + !"language extensions">
-    )
+    );
+    
+    verbose-msg(!"Using file extensions", EditorExtensions)
   
   current-main-descriptor-file =
      {| InputDirPrefix, OnImportFailure:
@@ -67,21 +75,17 @@
      default-main-descriptor
 
   find-main-module =
-    oncetd(?LanguageName(result));
-    verbose-msg(!"Using main module", !result);
-    !result
+    collect-one(?LanguageName(<id>))
 
   find-start-symbol =
     collect-one(?StartSymbols(Values(<id>)));
     separate-by(|",");
-    concat-strings;
-    verbose-msg(!"Using start symbols", id)
+    concat-strings
 
   find-editor-extensions =
-    oncetd(?Extensions(Values(results)));
-    result := <separate-by(|","); concat-strings> results;
-    verbose-msg(!"Using file extensions", !result);
-    !result
+    collect-one(?Extensions(Values(<id>)));
+    separate-by(|",");
+    concat-strings
 
   find-package-name =
     with(
@@ -89,7 +93,6 @@
     <+
       default-package-name => result
     );
-    verbose-msg(!"Using package name", !result);
     !result
 
   verbosity-scope(s|level) = 

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Common.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Common.sdf	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Common.sdf	2009-08-24 12:57:18 UTC (rev 19863)
@@ -3,18 +3,19 @@
 exports
 
   sorts
-    Id Int STRING String CommentChar Node Sort Constructor ConstructorId
+    Id IdStar Int STRING String CommentChar Node Sort Constructor ConstructorId
     ReservedName SectionName ModuleName Section Eof
 
   lexical syntax
   
-    [a-zA-Z][a-zA-Z0-9\_]* -> Id
-    "-"? [0-9]+            -> Int
-    "\"" ~[\"\n]* "\""     -> STRING
+    [a-zA-Z\_][a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z\_][a-zA-Z0-9\'\-\_]* "*" -> IdStar
+    "-"? [0-9]+                      -> Int
+    "\"" ~[\"\n]* "\""               -> STRING
     
-    ~[\n\r]*               -> SectionName
+    ~[\n\r]*                         -> SectionName
     
-    [\ \t\n\r]             -> LAYOUT
+    [\ \t\n\r]                       -> LAYOUT
     
     [\*]                             -> CommentChar
     "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
@@ -24,9 +25,9 @@
   
   lexical restrictions
   
-  	CommentChar -/- [\/]
-  	Int         -/- [0-9]
-  	Id          -/- [a-zA-Z0-9\_]    
+    CommentChar -/- [\/]
+    Int         -/- [0-9]
+    Id          -/- [a-zA-Z0-9\_]    
     SectionName -/- ~[\n\r]
     Eof         -/- ~[]
 
@@ -53,4 +54,3 @@
     
     ReservedName -> Node       {reject}
     ReservedName -> ModuleName {reject}
-

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf	2009-08-24 12:57:18 UTC (rev 19863)
@@ -2,11 +2,12 @@
 
 imports
   Common
+  StrategoMix[StrategoExpr]
 
 exports
 
   sorts
-    OutlineRule
+    OutlineRule Pattern Term PreTerm
 
   syntax
   
@@ -15,7 +16,6 @@
     "outliner" -> <ReservedName-CF>
 
   context-free syntax
-    
-    %% TODO: Patterns for outlinerservice
 
-    Node -> OutlineRule {cons("OutlineRule")}
+    Node               -> OutlineRule {cons("OutlineRule"), prefer}
+    Term[StrategoExpr] -> OutlineRule {cons("OutlineRule")}
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-24 12:57:18 UTC (rev 19863)
@@ -29,8 +29,6 @@
  */
 public class DynamicDescriptorBuilder {
 	
-	// TODO: Use (and properly clean up) new marker type for internal errors?
-	//       (also seen in DynamicDescriptorUpdater)
 	private final AstMessageHandler messageHandler =
 		new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
 	
@@ -90,8 +88,6 @@
 			monitor.beginTask("Loading " + mainFile.getName(), IProgressMonitor.UNKNOWN);
 			loader.loadPackedDescriptor(getTargetDescriptor(mainFile));
 			
-			// TODO: Refresh generated files after rebuilding?
-			
 		} catch (IOException e) {
 			Environment.logException("Unable to build descriptor for " + mainFile, e);
 			messageHandler.addMarkerFirstLine(mainFile, "Internal error building descriptor:" + e, SEVERITY_ERROR);
@@ -119,7 +115,7 @@
 		} catch (StrategoExit e) {
 			Environment.logException("Unexpected exit in dynamic builder", e);
 			context.printStackTrace();
-			messageHandler.addMarkerFirstLine(mainFile, "Error building descriptor:" + e, SEVERITY_ERROR);
+			messageHandler.addMarkerFirstLine(mainFile, "Error building descriptor:" + e + "\n" + agent.getLog(), SEVERITY_ERROR);
 			return null;
 		} finally {
 			Debug.stopTimer("Invoked descriptor builder for " + mainFile.getName());

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-24 12:57:18 UTC (rev 19863)
@@ -40,8 +40,6 @@
 	private static Set<IResource> updateOnly =
 		Collections.synchronizedSet(new HashSet<IResource>());
 	
-	// TODO: Use (and properly clean up) new marker type for internal errors?
-	//       (also seen in DynamicDescriptorBuilder)
 	private final AstMessageHandler messageHandler =
 		new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2009-08-24 12:57:18 UTC (rev 19863)
@@ -14,12 +14,13 @@
 <booleanAttribute key="includeOptional" value="true"/>
 <stringAttribute key="location" value="${workspace_loc}/../runtime-spoofax-imp"/>
 <listAttribute key="org.eclipse.debug.ui.favoriteGroups">
+<listEntry value="org.eclipse.debug.ui.launchGroup.debug"/>
 <listEntry value="org.eclipse.debug.ui.launchGroup.run"/>
 </listAttribute>
 <stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl}"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
-<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-server -Xmx1024m -Xms256m -XX:MaxPermSize=256M -Xverify:none -ea:org.strategoxt.imp.runtime.Debug -ea:org.strategoxt.imp..."/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-server -Xmx1024m -Xms256m -XX:MaxPermSize=256M -Xverify:none -ea:org.strategoxt.imp.runtime.Debug -ea:org.strategoxt.imp... -ea:org.spoofax..."/>
 <stringAttribute key="pde.version" value="3.3"/>
 <stringAttribute key="product" value="org.eclipse.sdk.ide"/>
 <booleanAttribute key="show_selected_only" value="false"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2009-08-24 12:57:18 UTC (rev 19863)
@@ -117,6 +117,34 @@
             verticalRulerPreferenceKey="parseAnnotationVerticalKey"
             verticalRulerPreferenceValue="true"/>
    </extension>
+   <extension
+         id="org.strategoxt.imp.runtime.analysismarkerspec"
+         point="org.eclipse.ui.editors.markerAnnotationSpecification">
+      <specification
+            annotationType="org.strategoxt.imp.runtime.analysisannotation"
+            colorPreferenceKey="spiAnalysisAnnotationColor"
+            colorPreferenceValue="255,128,147"
+            contributesToHeader="true"
+            highlightPreferenceKey="analysisAnnotationHighlightKey"
+            highlightPreferenceValue="false"
+            includeOnPreferencePage="false"
+            isGoToNextNavigationTarget="true"
+            isGoToNextNavigationTargetKey="analysisAnnotationIsGotoNextKey"
+            isGoToPreviousNavigationTarget="true"
+            isGoToPreviousNavigationTargetKey="analysisAnnotationIsGotoPrevKey"
+            label="Spoofax/IMP Analysis Annotation"
+            overviewRulerPreferenceKey="analysisAnnotationOverviewKey"
+            overviewRulerPreferenceValue="true"
+            presentationLayer="2"
+            showInNextPrevDropdownToolbarAction="true"
+            symbolicIcon="error"
+            textPreferenceKey="analysisAnnotationTextKey"
+            textPreferenceValue="true"
+            textStylePreferenceKey="analysisAnnotationTextStyleKey"
+            textStylePreferenceValue="SQUIGGLES"
+            verticalRulerPreferenceKey="analysisAnnotationVerticalKey"
+            verticalRulerPreferenceValue="true"/>
+   </extension>
 
    <!-- Extension point not implemented; manually called from SGLRParseController instead
    <extension

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-08-24 12:55:18 UTC (rev 19862)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-08-24 12:57:18 UTC (rev 19863)
@@ -98,8 +98,8 @@
 			}
 
 			IMarker marker = file.createMarker(markerType);
-			String[] attrs =  { LINE_NUMBER,    CHAR_START,            CHAR_END,                 MESSAGE, SEVERITY, PRIORITY };
-			Object[] values = { left.getLine(), left.getStartOffset(), right.getEndOffset() + 1, message, severity, PRIORITY_HIGH };
+			String[] attrs =  { LINE_NUMBER,    CHAR_START,            CHAR_END,                 MESSAGE, SEVERITY, PRIORITY,      TRANSIENT};
+			Object[] values = { left.getLine(), left.getStartOffset(), right.getEndOffset() + 1, message, severity, PRIORITY_HIGH, false };
 			marker.setAttributes(attrs, values);
 			synchronized (activeMarkers) {
 				activeMarkers.add(marker);



From L.C.L.Kats at tudelft.nl  Mon Aug 24 16:21:08 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Aug 2009 14:21:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19864 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <200908241420.n7OEKf2O002572@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-24 14:21:08 +0000 (Mon, 24 Aug 2009)
New Revision: 19864

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19864&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Log:
Workaround for a strange race condition.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-24 12:57:18 UTC (rev 19863)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorUpdater.java	2009-08-24 14:21:08 UTC (rev 19864)
@@ -133,6 +133,7 @@
 			DescriptorFactory.load(file);
 			
 		} catch (BadDescriptorException e) {
+			Environment.logException("Error in descriptor " + descriptor, e);
 			reportError(descriptor, e.getOffendingTerm(), "Error in descriptor: " + e.getMessage());
 		} catch (IOException e) {
 			Environment.logException("Error reading descriptor " + descriptor, e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-24 12:57:18 UTC (rev 19863)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-24 14:21:08 UTC (rev 19864)
@@ -142,7 +142,7 @@
 		Debug.startTimer();
 		ParseTable table = parseTableManager.loadFromStream(parseTable);	
 		parseTables.put(language.getName(), table);
-		Debug.stopTimer("Parse table loaded");
+		Debug.stopTimer("Parse table loaded: " + language.getName());
 		return table;
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-08-24 12:57:18 UTC (rev 19863)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-08-24 14:21:08 UTC (rev 19864)
@@ -27,6 +27,7 @@
 import org.eclipse.imp.services.IAnnotationTypeInfo;
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
 import org.eclipse.jface.text.IRegion;
+import org.eclipse.ui.PlatformUI;
 import org.spoofax.jsglr.BadTokenException;
 import org.spoofax.jsglr.ParseTable;
 import org.spoofax.jsglr.ParseTimeoutException;
@@ -74,6 +75,8 @@
 	private ISourceProject project;
 	
 	private IPath path;
+	
+	private boolean isStartupParsed;
 
 	// Simple accessors
 	
@@ -153,7 +156,10 @@
 		
 		IResource resource = getResource();
 		try {
-			Job.getJobManager().beginRule(resource, monitor); // enter lock
+			// while (PlatformUI.getWorkbench().getDisplay().readAndDispatch());
+			
+			if (isStartupParsed)
+				Job.getJobManager().beginRule(resource, monitor); // enter lock
 
 			// TODO: Wait with parsing until token completes? and do it again for timer?
 			
@@ -172,10 +178,19 @@
 			asfix = parser.parseNoImplode(inputChars, filename);
 			if (monitor.isCanceled()) return null;
 			
-			// (must not be synchronized; uses workspace lock)
-			errorHandler.clearErrors();
-			errorHandler.setRecoveryAvailable(true);
-			errorHandler.reportNonFatalErrors(parser.getTokenizer(), asfix);
+
+			if (isStartupParsed) {
+				// Threading concerns:
+				//   - must not be synchronized; uses resource lock
+				//   - when ran directly from the main thread, it may block other
+				//     UI threads that already have a lock on my resource,
+				//     but are waiting to run in the UI thread themselves
+				//   - reporting errors at startup may trigger the above condition,
+				//     at least for files with an in-workspace editor(?)
+				errorHandler.clearErrors();
+				errorHandler.setRecoveryAvailable(true);
+				errorHandler.reportNonFatalErrors(parser.getTokenizer(), asfix);
+			}
 				
 			Debug.stopTimer("File parsed: " + filename);
 		} catch (ParseTimeoutException e) {
@@ -205,7 +220,10 @@
 			Environment.logException("Internal parser error", e);
 			errorHandler.reportError(parser.getTokenizer(), e);
 		} finally {
-			Job.getJobManager().endRule(resource);
+			if (isStartupParsed)
+				Job.getJobManager().endRule(resource);
+			else 
+				isStartupParsed = true;
 		}
 		
 		if (!monitor.isCanceled())



From L.C.L.Kats at tudelft.nl  Mon Aug 24 17:32:26 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Aug 2009 15:32:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19865 - LennartKats -
	spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr
Message-ID: <200908241531.n7OFVxQV003468@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-24 15:32:26 +0000 (Mon, 24 Aug 2009)
New Revision: 19865

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19865&view=rev

Modified:
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/IndentInfo.java

Log:
IndentInfo is an immutable object class: marked fields final

Changes:

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/IndentInfo.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/IndentInfo.java	2009-08-24 14:21:08 UTC (rev 19864)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/IndentInfo.java	2009-08-24 15:32:26 UTC (rev 19865)
@@ -2,8 +2,6 @@
 
 import org.spoofax.ArrayDeque;
 
-import aterm.ATerm;
-
 /*
  * Should be created before parsing the first character of a line
  * Keeps information about indentation of a line.
@@ -11,10 +9,10 @@
  */
 public class IndentInfo {
     
-    private int lineNumber;
-    private int tokensSeen;
-    private int indentValue;
-    private ArrayDeque<Frame> stackNodes;
+    private final int lineNumber;
+    private final int tokensSeen;
+    private final int indentValue;
+    private final ArrayDeque<Frame> stackNodes;
         
     public ArrayDeque<Frame> getStackNodes() {
         return stackNodes;
@@ -29,25 +27,13 @@
         return lineNumber;
     }
 
-    public void setLineNumber(int lineNumber) {
-        this.lineNumber = lineNumber;
-    }
-
     public int getTokensSeen() {
         return tokensSeen;
     }
 
-    public void setTokensSeen(int tokensSeen) {
-        this.tokensSeen = tokensSeen;
-    }
-
     public int getIndentValue() {
         return indentValue;
     }
-
-    public void setIndentValue(int indentValue) {
-        this.indentValue = indentValue;
-    }
     
     public static IndentInfo cloneIndentInfo(IndentInfo original){
         IndentInfo cloneResult = new IndentInfo(original.getLineNumber(), original.getTokensSeen(), original.getIndentValue());
@@ -64,10 +50,7 @@
     }
 
     public IndentInfo() {
-        lineNumber=-1;
-        tokensSeen=-1;
-        indentValue=-1;
-        stackNodes=new ArrayDeque<Frame>();
+        this(-1, -1, -1);
     }
 
     /*



From L.C.L.Kats at tudelft.nl  Mon Aug 24 17:48:56 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 24 Aug 2009 15:48:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19866 - LennartKats -
	in spoofax/branches/spoofax-recovery: . src/org/spoofax/jsglr
Message-ID: <200908241548.n7OFmTY3003774@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-24 15:48:56 +0000 (Mon, 24 Aug 2009)
New Revision: 19866

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19866&view=rev

Removed:
   spoofax/branches/spoofax-recovery/.jsglr-log
Modified:
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Goto.java
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/StructureSkipper.java

Log:
- Fixed ArrayIndexOutOfBoundsException in StructureSkipper
- ParseTable loading tweaks

Changes:

Deleted: spoofax/branches/spoofax-recovery/.jsglr-log
===================================================================
--- spoofax/branches/spoofax-recovery/.jsglr-log	2009-08-24 15:32:26 UTC (rev 19865)
+++ spoofax/branches/spoofax-recovery/.jsglr-log	2009-08-24 15:48:56 UTC (rev 19866)
@@ -1,6 +0,0 @@
-Number of rejects: 495
-Number of reductions: 136079
-Number of ambiguities: 0
-Number of calls to Amb: 0
-Count Eagerness Comparisons: 0 / 0
-Number of Injection Counts: 0

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java	2009-08-24 15:32:26 UTC (rev 19865)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java	2009-08-24 15:48:56 UTC (rev 19866)
@@ -178,7 +178,9 @@
             t = filterTree(t, false);
         }
         
-        return convertToATerm(t);
+        ATerm result = convertToATerm(t);
+        assert Term.asAppl(result).getAFun().getName().equals("parsetree");
+        return result;
     }
 
     private void initializeFromParser(SGLR parser) {
@@ -254,7 +256,7 @@
         if (sort != null && filterTopSort) {
             t = selectOnTopSort(t, sort);
             if (t == null)
-                throw new FilterException(parser, "Desired top sort not found");
+                throw new FilterException(parser, "Desired start symbol not found");
         }
         
         return t;

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Goto.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Goto.java	2009-08-24 15:32:26 UTC (rev 19865)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Goto.java	2009-08-24 15:48:56 UTC (rev 19866)
@@ -15,6 +15,7 @@
     
     private final RangeList ranges;
     public final int nextState;
+    private transient int hashCode;
     
     public Goto(RangeList ranges, int nextState) {
         this.ranges = ranges;
@@ -37,7 +38,9 @@
     
     @Override
     public int hashCode() {
-        return ranges.hashCode();
+        if (hashCode == 0)
+            hashCode = ranges.hashCode();
+        return hashCode;
     }
     @Override
     public String toString() {

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java	2009-08-24 15:32:26 UTC (rev 19865)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java	2009-08-24 15:48:56 UTC (rev 19866)
@@ -11,7 +11,6 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 import aterm.AFun;
 import aterm.ATerm;
@@ -51,14 +50,13 @@
 
     private Label[] injections;
 
-    private Map<Goto, Goto> gotoMap = new HashMap<Goto, Goto>();
+    private transient HashMap<Goto, Goto> gotoCache = new HashMap<Goto, Goto>();
 
-    private Map<Shift, Shift> shiftMap = new HashMap<Shift, Shift>();
+    private transient HashMap<Shift, Shift> shiftCache = new HashMap<Shift, Shift>();
 
-    private Map<Reduce, Reduce> reduceMap = new HashMap<Reduce, Reduce>();
+    private transient HashMap<Reduce, Reduce> reduceCache = new HashMap<Reduce, Reduce>();
 
-    private Map<RangeList, RangeList> rangeMap = new HashMap<RangeList, RangeList>();
-
+    private transient HashMap<RangeList, RangeList> rangesCache = new HashMap<RangeList, RangeList>();
     
     public ParseTable(ATerm pt) throws InvalidParseTableException {
         parse(pt);
@@ -96,6 +94,10 @@
             if(labels[i] != null && labels[i].isInjection())
                 injections[i] = labels[i];
         
+        gotoCache = null;
+        shiftCache = null;
+        reduceCache = null;
+        
         return true;
     }
 
@@ -274,9 +276,9 @@
 
     private Goto makeGoto(int newStateNumber, RangeList ranges) {
         Goto g = new Goto(ranges, newStateNumber);
-        Goto cached = gotoMap.get(g);
+        Goto cached = gotoCache.get(g);
         if (cached == null) {
-            gotoMap.put(g, g);
+            gotoCache.put(g, g);
             return g;
         } else {
             return cached;
@@ -366,9 +368,9 @@
 
     private Reduce makeReduce(int arity, int label, int status, boolean isRecoverAction) {
         Reduce r = new Reduce(arity, label, status, isRecoverAction);
-        Reduce cached = reduceMap.get(r);
+        Reduce cached = reduceCache.get(r);
         if (cached == null) {
-            reduceMap.put(r, r);
+            reduceCache.put(r, r);
             return r;
         } else {
             return cached;
@@ -377,9 +379,9 @@
 
     private Shift makeShift(int nextState) {
         Shift s = new Shift(nextState);
-        Shift cached = shiftMap.get(s);
+        Shift cached = shiftCache.get(s);
         if (cached == null) {
-            shiftMap.put(s, s);
+            shiftCache.put(s, s);
             return s;
         } else {
             return cached;
@@ -422,7 +424,6 @@
 //    }
 
     private RangeList parseRanges(ATermList ranges) throws InvalidParseTableException {
-
         Range[] ret = new Range[ranges.getChildCount()];
 
         for(int i = 0; i < ret.length; i++) {
@@ -442,9 +443,9 @@
 
     private RangeList makeRangeList(Range[] ranges) throws InvalidParseTableException {
         RangeList r = new RangeList(ranges);
-        RangeList cached = rangeMap.get(r);
+        RangeList cached = rangesCache.get(r);
         if (cached == null) {
-            rangeMap.put(r, r);
+            rangesCache.put(r, r);
             return r;
         } else {
             return cached;

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/StructureSkipper.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/StructureSkipper.java	2009-08-24 15:32:26 UTC (rev 19865)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/StructureSkipper.java	2009-08-24 15:48:56 UTC (rev 19866)
@@ -581,7 +581,8 @@
     }   
 
     private IndentInfo skipLine(IndentInfo line) throws IOException {
-        getHistory().setTokenIndex(line.getTokensSeen()-1);
+        // FIXME: Check if this is alright - I added a Math.max(0, _) here to fix the case where tokenIndex == -1 (LK)
+        getHistory().setTokenIndex(Math.max(0, line.getTokensSeen()-1));
         int newLineNumber=line.getLineNumber();
         skipIndentHandler.setInLeftMargin(false);
         getHistory().readRecoverToken(myParser);



From L.C.L.Kats at tudelft.nl  Tue Aug 25 10:38:55 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 25 Aug 2009 08:38:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19867 - LennartKats -
	in spoofax-imp/trunk: . org.strategoxt.imp.editors.sdf
	org.strategoxt.imp.editors.sdf/META-INF
	org.strategoxt.imp.editors.sdf/editor
	org.strategoxt.imp.editors.sdf/editor/java
	org.strategoxt.imp.editors.sdf/editor/java/org
	org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt
	org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp
	org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors
	org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf
	org.strategoxt.imp.editors.sdf/syntax org.strategoxt.imp.generator
	org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <200908250838.n7P8cRP9015880@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-25 08:38:55 +0000 (Tue, 25 Aug 2009)
New Revision: 19867

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19867&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/SDFParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/pp.str

Log:
Added SDF editor.

Changes (first 1000 lines of the diffs):

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/META-INF/MANIFEST.MF	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,20 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: SDF Plug-in
+Bundle-SymbolicName: org.strategoxt.imp.editors.sdf; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: org.strategoxt.imp.editors.sdf.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.aterm,
+  org.spoofax.jsglr
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Export-Package: org.strategoxt.imp.editors.sdf

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.properties
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.properties	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.properties	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               .,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               .

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.xml	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,208 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="SDF" default="standalone">
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="syntax" location="syntax"/>
+        <property name="editor" location="editor"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="SDF"/>
+        <property name="esvmodule" value="SDF"/>
+        <property name="strmodule" location="sdf"/>
+	    <available file="${trans}/${strmodule}.str" property="strmodule.present"/>
+        
+        <!-- Environment configuration -->
+        <property name="build.strategoxt" location="${user.home}/.nix-profile/bin"/>
+        <property name="build.strategoxt.sdf.imports" value=""/>
+        <property name="build.strategoxt.strc.imports" value=""/>
+        
+        <!-- Default target for building within Eclipse -->
+        <target name="from-eclipse" depends="strc,sdf2table,sdf2imp-eclipse"/>
+        
+        <!-- Default target for building outside of Eclipse -->
+        <target name="standalone" depends="strc,sdf2table,sdf2imp-standalone"/>
+        
+        <target name="init">
+            <mkdir dir="${build}"/>
+            <mkdir dir="${dist}"/>
+        </target>
+        
+        <target name="sdf2imp-eclipse" depends="sdf2table">
+            <!-- HACK: Trigger the Eclipse builder rather than build it here -->
+            <touch file="include/${esvmodule}.packed.esv"/>
+            <eclipse.refreshLocal resource="include/${esvmodule}.packed.esv"/>
+        	<echo message="Refreshed include/${esvmodule}.packed.esv"/>
+        </target>
+        
+        <target name="sdf2imp-standalone" depends="sdf2table">
+            <echo message="Only building from within Eclipse is implemented at this time"/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt}/sdf2table" dest="include" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${syntax}/${sdfmodule}-Permissive.gendef"/>
+                <mapper type="glob" from="*-Permissive.gendef" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${build}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}-Permissive.gendef"/>
+            </dependset>
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" classpath="aux/make_permissive.jar:aux/strategoxt.jar" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${build}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+            	<arg value="${syntax}/${sdfmodule}-Permissive.gendef"/>
+            </java>
+        </target>
+
+        <target name="pack-sdf" depends="init">
+            <available property="source-sdf-exists" resource="${syntax}/${sdfmodule}.sdf"/>
+        	<antcall target="pack-sdf.real"/>
+        	<antcall target="pack-sdf.copy"/>
+        </target>
+    
+        <target name="pack-sdf.real" depends="init" if="source-sdf-exists">
+            <dependset>
+                <srcfilelist dir="${syntax}" files="**/*.sdf"/>
+                <targetfileset file="${syntax}/${sdfmodule}.def"/>
+            </dependset>
+            <apply executable="${build.strategoxt}/pack-sdf" dest="${build}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-I"/>
+                <arg value="${trans}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${build.strategoxt.sdf.imports}"/>
+                
+                <fileset file="${syntax}/${sdfmodule}.sdf"/>
+                <mapper type="glob" from="*.sdf" to="*.def"/>
+            </apply>
+        </target>
+	
+	    <target name="pack-sdf.copy" depends="init" unless="source-sdf-exists">
+            <copy file="${syntax}/${sdfmodule}.def" todir="${build}"/>
+        </target>
+    
+        <target name="rtg2sig" depends="init,sdf2rtg">
+            <apply executable="${build.strategoxt}/rtg2sig" dest="${build}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                
+                <fileset file="${syntax}/${sdfmodule}.rtg"/>
+                <mapper type="glob" from="*.rtg" to="*.str"/>
+            </apply>
+        </target>
+        
+        <target name="sdf2rtg" depends="init,pack-sdf">
+            <apply executable="${build.strategoxt}/sdf2rtg" dest="${build}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <targetfile/>
+                
+                <fileset file="${syntax}/${sdfmodule}.str"/>
+                <mapper type="glob" from="*.def" to="*.rtg"/>
+            </apply>
+        </target>
+    
+        <target name="strc" depends="init,rtg2sig" if="strmodule.present">
+            <antcall target="strc-call">
+                <param name="build.strategoxt.strc.params" value=""/>
+                <param name="build.strategoxt.strc.extension" value="*"/>
+                <param name="strcExecutable" value="strc"/>
+            </antcall>
+        </target>
+    
+        <target name="strj" depends="init,rtg2sig" if="strmodule.present">
+            <antcall target="strc-call">
+                <param name="build.strategoxt.strc.params" value=""/>
+                <param name="build.strategoxt.strc.extension" value="*.java"/>
+                <param name="strcExecutable" value="strj"/>
+            </antcall>
+        </target>
+        
+        <target name="strji" depends="init,rtg2sig" if="strmodule.present">
+            <antcall target="strc-call">
+                <param name="build.strategoxt.strc.params" value="-F --library"/>
+                <param name="build.strategoxt.strc.extension" value="*.ctree"/>
+                <param name="strcExecutable" value="strc"/>
+            </antcall>
+        </target>
+        
+        <target name="strc-call" depends="init,rtg2sig">
+            <dependset>
+                <srcfilelist dir="${trans}" files="**/*.str"/> <!-- */-->
+                <srcfilelist dir="${build}" files="**/*.str"/> <!-- */-->
+                <targetfileset dir="${dist}" includes="**/*"/> <!-- */-->
+            </dependset>
+            <apply executable="${build.strategoxt}/{strcExecutable}" dest="${dist}" failonerror="true">
+                <arg value=".str"/>
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="-S"/> <!-- (Silent mode) -->
+                <arg value="-I"/>
+                <arg value="${trans}"/>
+                <arg value="-I"/>
+                <arg value="${build}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg value="-I"/>
+                <arg value="${user.home}/.nix-profile/share/java-front"/>
+                <arg value="-la"/>
+                <arg value="stratego-lib"/>
+                <arg value="-la"/>
+                <arg value="${user.home}/.nix-profile/lib/libjava-front.la"/>
+                <arg value="-la"/>
+                <arg value="stratego-sglr"/>
+                <arg value="-la"/>
+                <arg value="stratego-gpp"/>
+                <arg value="-la"/>
+                <arg value="stratego-xtc"/>
+                
+                <arg line="${build.strategoxt.strc.params}"/>
+                <arg line="${build.strategoxt.strc.imports}"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="${build.strategoxt.strc.extension}"/>
+            </apply>
+            
+            <!-- Remove any intermediate files -->
+            <delete>
+                <fileset dir="${dist}">
+                    <include name="**/*.c"/>   <!-- */ -->
+                    <include name="**/*.dep"/> <!-- */ -->
+                    <include name="**/*.lo"/>  <!-- */ -->
+                    <include name="**/*.o"/>   <!-- */ -->
+                </fileset>
+            </delete>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,13 @@
+module SDF-Analysis
+
+imports
+  SDF-Analysis.generated
+
+analysis
+  
+
+
+
+// This file can be used for custom analysis rules.
+
+// See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.generated.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.generated.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,21 @@
+module SDF-Analysis.generated
+
+analysis
+  
+
+
+
+// Analysis can be provided by an external Stratego program:
+
+//
+
+//   provider stratego-program.ctree // (built using strc -F)
+
+//
+
+
+// Analysis is carried out by a rule of the form (ast, path, fullpath) -> (errors, warnings, infos)
+
+//
+
+//   observer analysis-rule
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,13 @@
+module SDF-Colorer
+
+imports
+  SDF-Colorer.generated
+
+colorer
+  
+
+
+
+// This file can be used for custom colorer rules.
+
+// See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.generated.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.generated.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,58 @@
+module SDF-Colorer.generated
+
+colorer
+  
+
+
+
+// Sort-based highlighting with background color
+
+//   Id: yellow green
+
+//
+
+// Sort- and constructor-based highlighting
+
+//   ClassBodyDec.MethodDec: yellow
+
+//
+
+// Constructor-based highlighting
+
+//   _.MethodDec: 255 0 0
+
+//
+
+
+// Example: background colors for ToMetaExpr/FromMetaExpr, if supported by the grammar
+
+//   environment _.ToMetaExpr:   _ 220 230 200
+
+//   environment _.FromMetaExpr: _ white
+
+colorer Default, token-based highlighting
+                                                
+  keyword    : "Keywords"    = 127 0 85 bold    
+  identifier : "Identifiers" = default          
+  string     : "Strings"     = blue             
+  number     : "Numbers"     = darkgreen        
+  var        : "Variables"   = 255 0 100 italic 
+  operator   : "Operators"   = 0 0 128          
+  layout     : "Comments"    = 100 100 0 italic 
+
+colorer System colors
+                            
+  darkred   = 128 0 0       
+  red       = 255 0 0       
+  darkgreen = 0 128 0       
+  green     = 0 255 0       
+  darkblue  = 0 0 128       
+  blue      = 0 0 255       
+  cyan      = 0 255 255     
+  magenta   = 255 0 255     
+  yellow    = 255 255 0     
+  white     = 255 255 255   
+  black     = 0 0 0         
+  gray      = 128 128 128   
+  grey      = gray          
+  default   = _             
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,18 @@
+module SDF-Folding
+
+imports
+  SDF-Folding.generated
+
+folding
+
+  context-free-syntax
+  
+  lexical-syntax
+  
+  kernel-syntax
+  
+  
+
+// This file can be used for custom folding rules.
+
+// See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.generated.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.generated.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,55 @@
+module SDF-Folding.generated
+
+folding Default folding definitions
+  
+  // Folding rules indicate grammar productions to be foldable,
+  // and take one of the following forms, and :
+  //
+  //   - <sort>.<constructor>
+  //   - <sort>._,
+  //   - _.<constructor>
+  
+  Module.module
+  ModuleName.parameterized
+  ImpSection.imports
+  ListStarOfImport1
+  Import.renamed-module
+  Renamings.renamings
+  Renaming.symbol
+  Production.prod
+  Attributes.attrs
+  Attribute.term
+  ATermAttribute.default
+  Production.prefix-fun
+  ListStarOfSection1
+  Section.exports
+  Grammar.syntax
+  ListStarOfProduction1
+  Grammar.lexical-syntax
+  Grammar.context-free-syntax
+  Grammar.variables
+  Grammar.lexical-variables
+  Grammar.imp-section
+  Grammar.priorities
+  ListStarOfPriority1
+  Priority.chain
+  Group.with-arguments
+  ArgumentIndicator.default
+  Group.prods-group
+  Group.assoc-group
+  Priority.assoc
+  Grammar.sorts
+  Grammar.kernel-start-symbols
+  Grammar.lexical-start-symbols
+  Grammar.context-free-start-symbols
+  Grammar.restrictions
+  ListStarOfRestriction1
+  Restriction.follow
+  Grammar.aliases
+  ListStarOfAlias1
+  Alias.alias
+  Grammar.lexical-priorities
+  Grammar.context-free-priorities
+  Grammar.lexical-restrictions
+  Grammar.context-free-restrictions
+  Section.hiddens
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,13 @@
+module SDF-Occurrences
+
+imports
+  SDF-Occurrences.generated
+
+occurrences
+  
+
+
+
+// This file can be used for custom occurrence highlighting rules.
+
+// See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.generated.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.generated.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,23 @@
+module SDF-Occurrences.generated
+
+occurrences
+  
+
+
+
+
+// Occurrence highlighting functionality may be provided by an external Stratego program:
+
+//
+
+//   provider stratego-program.ctree // (built using strc -F)
+
+//
+
+// Occurence rules can specify the syntax constructors for which
+
+// a reference resolving function is available:
+
+//
+
+//   occurrence FunctionCall : occurrences
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,12 @@
+module SDF-Outliner
+
+imports
+  SDF-Outliner.generated
+
+outliner
+
+
+
+// This file can be used for custom outliner rules.
+
+// See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.generated.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.generated.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,19 @@
+module SDF-Outliner.generated
+
+outliner Default outliner        
+  
+  // Outliner rules indicate grammar productions to be outlined,
+  // and take one of the following forms, and :
+  //
+  //   - <sort>.<constructor>
+  //   - <sort>._,
+  //   - _.<constructor>
+  
+  Module.module
+  ModuleName.parameterized
+  Symbol.parameterized-sort
+  Import.renamed-module
+  Production.prod
+  ATerm.appl
+  Production.prefix-fun
+  Restriction.follow
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,13 @@
+module SDF-References
+
+imports
+  SDF-References.generated
+
+references
+  
+
+
+
+// This file can be used for custom reference resolving rules.
+
+// See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.generated.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.generated.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,31 @@
+module SDF-References.generated
+
+references
+  
+
+
+
+
+// Reference resolving functionality may be provided by an external Stratego program:
+
+//
+
+//   provider stratego-program.ctree // (built using strc -F)
+
+//
+
+// Occurence rules can specify the syntax constructors for which
+
+// a reference resolving function is available:
+
+//
+
+//   reference FunctionCall : resolve-function-call hover-help-function-call
+
+//
+
+// This defines that for each FunctionCall, resolve-function-call
+
+// will retrieve the AST node that declares it, and hover-help-function-call
+
+// returns hover help information.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,13 @@
+module SDF-Syntax
+
+imports
+  SDF-Syntax.generated
+
+language
+  
+
+
+
+// This file can be used for custom syntax rules.
+
+// See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.generated.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.generated.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,11 @@
+module SDF-Syntax.generated
+
+language Syntax properties (static defaults)
+                  
+  line comment  : "//"
+  block comment : "/*" * "*/"
+  fences        : [  ]
+                  (  )
+                  {  }
+                  |[ ]|
+                  <? ?>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF.main.esv	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,23 @@
+module SDF.main
+
+imports
+  SDF-Analysis
+  SDF-Colorer
+  SDF-Folding
+  SDF-Occurrences
+  SDF-Outliner
+  SDF-References
+  SDF-Syntax
+
+language General properties
+                  
+  name          : SDF
+  id            : org.strategoxt.imp.editors.sdf
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the SDF language"
+  url           : http://strategoxt.org
+                  
+  extensions    : sdf
+  table         : include/SDF.tbl
+  start symbols : Module

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/Activator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/Activator.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/Activator.java	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,50 @@
+package org.strategoxt.imp.editors.sdf;
+
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "SDF";
+
+  public static final String kLanguageName = "SDF";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  protected static PreferencesService preferencesService = null;
+
+  public static PreferencesService getPreferencesService()
+  { 
+    if(preferencesService == null)
+    { 
+      preferencesService = new PreferencesService(ResourcesPlugin.getWorkspace().getRoot().getProject());
+      preferencesService.setLanguageName(kLanguageName);
+    }
+    return preferencesService;
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/SDFParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/SDFParseController.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/SDFParseController.java	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,84 @@
+package org.strategoxt.imp.editors.sdf;
+
+import java.io.InputStream;
+import java.io.IOException;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class SDFParseController extends DynamicParseController 
+{ 
+  private static final String LANGUAGE = "SDF";
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  private static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = SDFParseController.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = SDFParseController.class.getResourceAsStream(TABLE);
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin)");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin)");
+      descriptor = DescriptorFactory.load(descriptorStream, table, null);
+      descriptor.setAttachmentProvider(SDFParseController.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="sdf" description="SDF" language="SDF" derivedFrom="DynamicRoot"></language>
+       </extension>
+       <extension id="org.strategoxt.imp.editors.sdf.parser" name="SDF Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="org.strategoxt.imp.editors.sdf.SDFParseController" language="SDF">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def	2009-08-25 08:38:55 UTC (rev 19867)
@@ -0,0 +1,610 @@
+definition
+module languages/sdf2/syntax/Aliases
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  sorts Alias Aliases
+  context-free syntax 
+    "aliases" Aliases              -> Grammar  {cons("aliases")}
+    Symbol arrow:"->" alias:Symbol -> Alias    {cons("alias")}
+    list:Alias*                    -> Aliases
+
+
+
+module languages/sdf2/syntax/Restrictions
+
+imports languages/sdf2/syntax/CC
+
+exports
+  sorts Lookahead Lookaheads Restriction Restrictions
+
+  context-free syntax
+    CharClass                          -> Lookahead  {cons("char-class")}
+    head:CharClass "." tail:Lookaheads -> Lookahead  {cons("seq")}
+
+    Lookahead                                -> Lookaheads  {cons("single")}
+    "left":Lookaheads "|" "right":Lookaheads -> Lookaheads  {cons("alt"),right}
+    "(" Lookaheads ")"                       -> Lookaheads  {bracket}
+    "[[" list:{Lookahead ","}* "]]"          -> Lookaheads  {cons("list")}
+
+    Symbols "-/-" Lookaheads -> Restriction  {cons("follow")}
+
+    list:Restriction* -> Restrictions
+
+    "restrictions" Restrictions -> Grammar  {cons("restrictions")}
+
+    "reject" -> Attribute  {cons("reject")}
+    "prefer" -> Attribute  {cons("prefer")}
+    "avoid"  -> Attribute  {cons("avoid")}
+
+  context-free priorities    
+    CharClass "." Lookaheads    -> Lookahead >
+    Lookaheads "|" Lookaheads   -> Lookaheads
+
+
+module languages/sdf2/syntax/Labels
+
+imports languages/sdf2/syntax/Kernel 
+        basic/StrCon
+
+exports 
+  sorts Label
+
+  context-free syntax
+    StrCon -> Label {cons("quoted")}
+    IdCon  -> Label {cons("unquoted")}
+
+    Label ":" Symbol -> Symbol  {cons("label")}
+
+module languages/sdf2/syntax/Literals
+
+imports languages/sdf2/syntax/Kernel 
+imports basic/StrCon
+imports basic/IdentifierCon
+
+exports
+  sorts FunctionName SingleQuotedStrCon SingleQuotedStrChar
+  lexical syntax
+
+    "\\n"                      -> SingleQuotedStrChar {cons("newline")}
+    "\\t"                      -> SingleQuotedStrChar {cons("tab")}
+    "\\'"                      -> SingleQuotedStrChar {cons("quote")}
+    "\\\\"                     -> SingleQuotedStrChar {cons("backslash")}
+    "\\" a:[0-9]b:[0-9]c:[0-9] -> SingleQuotedStrChar {cons("decimal")}
+    ~[\0-\31\n\t\'\\]          -> SingleQuotedStrChar {cons("normal")}
+
+    [\'] chars:SingleQuotedStrChar* [\']   -> SingleQuotedStrCon  {cons("default")}
+
+  context-free syntax
+    IdCon  -> FunctionName {cons("unquoted-fun")}
+    StrCon -> FunctionName {cons("quoted-fun")}
+
+  context-free syntax
+    string:StrCon                -> Symbol {cons("lit")}
+    ci-string:SingleQuotedStrCon -> Symbol {cons("ci-lit")}
+
+    fun:FunctionName "(" arguments:{Symbol ","}* ")" "->" result:Symbol Attributes 
+	-> Production  {avoid, cons("prefix-fun")}
+
+module languages/sdf2/syntax/Start-Symbols
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  context-free syntax
+  
+    "start-symbols" Symbols                -> Grammar {cons("kernel-start-symbols")} 
+    "lexical" "start-symbols" Symbols      -> Grammar {cons("lexical-start-symbols")}
+    "context-free" "start-symbols" Symbols -> Grammar {cons("context-free-start-symbols")}
+
+module languages/sdf2/syntax/Sorts
+
+imports languages/sdf2/syntax/Kernel
+
+exports
+  sorts Sort
+  lexical syntax
+    head:[A-Z]                          -> Sort {cons("one-char")}
+    head:[A-Z] middle:[A-Za-z0-9\-]* last:[A-Za-z0-9] -> Sort 
+	{cons("more-chars")}
+
+  context-free syntax
+    Sort                                    -> Symbol  {cons("sort")}
+    Sort "[[" parameters:{Symbol ","}+ "]]" -> Symbol  {cons("parameterized-sort")}
+
+    "sorts" Symbols -> Grammar {cons("sorts")}
+
+  lexical restrictions
+    Sort -/- [A-Za-z0-9]
+
+module languages/sdf2/syntax/Character
+
+
+
+exports
+  sorts Character NumChar ShortChar
+  lexical syntax
+    [\\] number:[0-9]+                     -> NumChar   {cons("digits")}
+    character:[a-zA-Z0-9]                  -> ShortChar {cons("regular")}
+    [\\] escape:~[\0-\31A-Za-mo-qsu-z0-9]  -> ShortChar {cons("escaped")}
+
+  context-free syntax
+    NumChar   -> Character {cons("numeric")}

(505 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Tue Aug 25 10:40:19 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 25 Aug 2009 08:40:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19868 - LennartKats -
	in strc-java/trunk: java java/runtime/org/strategoxt/lang/parallel
	java/runtime/org/strategoxt/lang/parallel/collections
	java/runtime/org/strategoxt/lang/parallel/tables tools
Message-ID: <200908250839.n7P8dp6N015894@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-25 08:40:18 +0000 (Tue, 25 Aug 2009)
New Revision: 19868

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19868&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/IThreadBoundCollection.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelCollectionLibrary.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelRead.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelSetCreate.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelTableCreate.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelWrite.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ThreadBoundHashMap.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ThreadBoundSet.java
Removed:
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableFold.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeysFold.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableValuesFold.java
Modified:
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelContext.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelJob.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/PureOperatorSet.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/libstratego_parallel.java
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/tools/strj-jar

Log:
New (soon to be) thread-safe hash table and indexed set operations.

Changes (first 1000 lines of the diffs):

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/Makefile.am	2009-08-25 08:40:18 UTC (rev 19868)
@@ -7,6 +7,8 @@
   $(wildcard runtime/org/strategoxt/lang/*.java) \
   $(wildcard runtime/org/strategoxt/lang/compat/*.java) \
   $(wildcard runtime/org/strategoxt/lang/compat/sglr/*.java) \
+  $(wildcard runtime/org/strategoxt/lang/parallel/*.java) \
+  $(wildcard runtime/org/strategoxt/lang/parallel/*/*.java) \
   runtime/org/strategoxt/lang/compat/override/jsglr_parser.java \
   runtime/org/strategoxt/lang/compat/override/jsglr_parser_compat.java \
   runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.java \
@@ -46,7 +48,7 @@
 JAVACFLAGS=-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn -d bin
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 
-STRJOPTIONS=--library -p org.strategoxt --verbose 3 -O 0
+STRJOPTIONS=--library -p org.strategoxt --verbose 3 -O 3
 
 JAR=`if which fastjar >/dev/null; then echo fastjar; else echo jar; fi`
 JARIN1=`find runtime  | grep -E '\.rtree|\.af|\.tbl' | sed 's!runtime/!-C runtime/ !'`

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelAll.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -48,7 +48,8 @@
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
 		// TODO: The focus thread could actually start more jobs, given a priority job queue
-		if (ENABLED && (ALLOW_NESTED_JOBS || libstratego_parallel.isActive()) && isCandidateTerm(context, current)) {
+		// TODO: Only trigger invokeParallel if synchronous execution takes longer than a certain threshold
+		if (ENABLED && (ALLOW_NESTED_JOBS || !libstratego_parallel.isActive()) && isCandidateTerm(context, current)) {
 			context.push("<parallel>");
 			IStrategoTerm result = invokeParallel(context, current, s);
 			
@@ -61,7 +62,8 @@
 		}
 	}
 
-	public IStrategoTerm invokeParallel(final Context context, final IStrategoTerm current, final Strategy s) {		
+	public IStrategoTerm invokeParallel(final Context context, final IStrategoTerm current, final Strategy s) {
+		// TODO: Cleanup - method got too long!!
 		final IStrategoTerm[] inputs = current.getAllSubterms();
 		final IStrategoTerm[] outputs = new IStrategoTerm[inputs.length];
 		final AtomicInteger focusIndex = new AtomicInteger(0); // index of the job with side effects
@@ -73,11 +75,6 @@
 		
 		ParallelJob firstJob = null;
 		
-		// HACK
-		final boolean allowGrayListed = "lifted1240".equals(s.getName()) || "lifted835".equals(s.getName()) 
-				|| "lifted233".equals(s.getName())  || "lifted324".equals(s.getName())
-				|| "lifted55".equals(s.getName());
-		
 		if (ALLOW_NESTED_JOBS) {
 			int level = parallelismLevel.incrementAndGet();
 			// We can only do this if there are no other parallel jobs active,
@@ -107,7 +104,7 @@
 
 						IStrategoTerm result = null;
 						try {
-							ParallelContext parallelContext = new ParallelContext(context, executor, this, isAborted, allowUnordered, allowGrayListed);
+							ParallelContext parallelContext = new ParallelContext(context, executor, this, isAborted, allowUnordered);
 							if (DIAGNOSE_SYNCHRONOUS_OPERATIONS)
 								parallelContext.setLastSynchronousOperation(lastSynchronousOperation);
 							result = s.invoke(parallelContext, input);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelContext.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelContext.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelContext.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -23,8 +23,6 @@
 	
 	private final boolean allowUnordered;
 	
-	private final boolean allowGrayListed;
-	
 	private AtomicReference<String> lastSynchronousOperation;
 
 	/**
@@ -37,18 +35,13 @@
 	 * @param allowUnordered
 	 *            Allows all threads to use any operation, using locks for
 	 *            non-whitelisted ones.
-	 * @param allowGrayListed
-	 *            Allows all threads to use white-listed and gray-listed
-	 *            operations in parallel, without locks. Using other
-	 *            operations will break the program.
 	 */
-	public ParallelContext(Context context, ParallelJobExecutor executor, ParallelJob job, AtomicBoolean aborted, boolean allowUnordered, boolean allowGrayListed) {
+	public ParallelContext(Context context, ParallelJobExecutor executor, ParallelJob job, AtomicBoolean aborted, boolean allowUnordered) {
 		super(context.getFactory(), context.getIOAgent(), context.getOperatorRegistryMap(), context.getOperatorRegistries());
 		this.executor = executor;
 		this.job = job;
 		this.isAborted = aborted;
 		this.allowUnordered = allowUnordered;
-		this.allowGrayListed = allowGrayListed;
 	}
 	
 	void setLastSynchronousOperation(AtomicReference<String> value) {
@@ -83,7 +76,7 @@
 			return super.invokePrimitive(primitive, term, args, targs);
 		
 		if (DIAGNOSE_SYNCHRONOUS_OPERATIONS) {
-			if (lastSynchronousOperation.get() == null && !PureOperatorSet.isGrayListed(name))
+			if (lastSynchronousOperation.get() == null)
 				lastSynchronousOperation.set(name);
 		}
 		
@@ -93,13 +86,6 @@
 			}
 		}
 		
-		if (allowGrayListed) {
-			if (PureOperatorSet.isGrayListed(name))
-				return super.invokePrimitive(primitive, term, args, targs);
-			else
-				throw new IllegalStateException("Uses non-graylisted operation: " + name);
-		}
-		
 		// If all else fails, perform any "black-listed" operations in an ordered fashion
 		waitForFocus();
 		
@@ -110,7 +96,10 @@
 		return job;
 	}
 	
-	private void waitForFocus() {
+	/**
+	 * Puts the current thread into an idle state until it becomes the focus thread.
+	 */
+	public void waitForFocus() {
 		executor.asyncBeginSleep();
 		try {
 			job.waitForFocus();

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelJob.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelJob.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/ParallelJob.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -109,13 +109,21 @@
 	
 	public abstract IStrategoTerm execute(IStrategoTerm input);
 	
+	/**
+	 * Checks if the current job is executed in the focus thread.
+	 * 
+	 * @return <code>true</code> if the job is executed in the focus thread.
+	 */
 	public boolean isFocusJob() {
 		return isFocusJob || focusIndex.get() == startIndex;
 	}
 	
+	/**
+	 * Waits until the current thread is the focus thread.
+	 * Must be called form the thread that owns this job.
+	 */
 	public void waitForFocus() throws InterruptedException {
 		if (!isFocusJob) {
-			// waitForFocusIndex(focusIndex, startIndex, notifier);
 			waitForFocusIndexEagerly();
 			if (ADJUST_FOCUS_THREAD_PRIORITY)
 				Thread.currentThread().setPriority(Thread.MAX_PRIORITY);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/PureOperatorSet.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/PureOperatorSet.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/PureOperatorSet.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -15,6 +15,7 @@
 	 */
 	@SuppressWarnings("serial")
 	private static final HashSet<String> whiteList = new HashSet<String>() {{
+		// General
 		add("SSL_new");
 		add("SSL_newname");
 		add("SSL_is_string");
@@ -47,13 +48,34 @@
 		add("JSGLR_open_parsetable");
 		add("SSL_dynamic_rules_hashtable");
 		add("SSL_table_hashtable");
+
+		// Collection "read" primitives
+		add("SSL_hashtable_get");
+		add("SSL_indexedSet_get");
+		add("SSL_hashtable_elements");
+		add("SSL_indexedSet_elements");
+		add("SSL_table_fold");
+		add("SSL_keys_fold");
+		add("SSL_values_fold");
+
+		// Collection "write" primitives
+		add("SSL_hashtable_put");
+		add("SSL_indexedSet_put");
+		add("SSL_hashtable_remove");
+		add("SSL_indexedSet_remove");
+		add("SSL_hashtable_reset");
+		add("SSL_indexedSet_reset");
+		add("SSL_hashtable_create");
+		add("SSL_indexedSet_create");
+
 		// TODO: More "pure" operators
 	}};
 	
-	/**
-	 * Primitives that are only thread safe when only
-	 * combined with other white/gray-listed primitives.
-	 */
+	/* UNDONE: operator graylist
+	 * Primitives that are only thread safe when just
+	 * when black listed operations are never used,
+	 * not even from the focus thread.
+	 *
 	@SuppressWarnings("serial")
 	private static final HashSet<String> grayList = new HashSet<String>() {{
 		add("SSL_hashtable_get");
@@ -94,8 +116,5 @@
 	public static void addWhiteListed(String name) {
 		
 	}
-	
-	public static boolean isGrayListed(String name) {
-		return grayList.contains(name);
-	}
+
 }


Property changes on: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/IThreadBoundCollection.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/IThreadBoundCollection.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/IThreadBoundCollection.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -0,0 +1,10 @@
+package org.strategoxt.lang.parallel.collections;
+
+/**
+ * A marker interface for thread-bound collections.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public interface IThreadBoundCollection {
+
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelCollectionLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelCollectionLibrary.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelCollectionLibrary.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -0,0 +1,90 @@
+package org.strategoxt.lang.parallel.collections;
+
+import java.util.HashSet;
+import java.util.IdentityHashMap;
+import java.util.Set;
+
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_destroy;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_get;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_keys;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_put;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_remove;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_reset;
+import org.spoofax.interpreter.library.ssl.SSL_indexedSet_destroy;
+import org.spoofax.interpreter.library.ssl.SSL_indexedSet_elements;
+import org.spoofax.interpreter.library.ssl.SSL_indexedSet_getIndex;
+import org.spoofax.interpreter.library.ssl.SSL_indexedSet_put;
+import org.spoofax.interpreter.library.ssl.SSL_indexedSet_remove;
+import org.spoofax.interpreter.library.ssl.SSL_indexedSet_reset;
+import org.spoofax.interpreter.library.ssl.SSL_table_fold;
+import org.spoofax.interpreter.library.ssl.SSL_table_keys_fold;
+import org.spoofax.interpreter.library.ssl.SSL_table_values_fold;
+import org.strategoxt.lang.parallel.ParallelJob;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelCollectionLibrary extends AbstractStrategoOperatorRegistry {
+
+	public static final String REGISTRY_NAME = "paralleltable";
+	
+	private final Object syncRoot = new Object();
+	
+	private final IdentityHashMap<Object, Set<ParallelJob>> asyncCollectionReadLog =
+		new IdentityHashMap<Object, Set<ParallelJob>>();
+	
+	public ParallelCollectionLibrary() {
+		add(new ParallelTableCreate());
+		add(new ParallelWrite(this, new SSL_hashtable_destroy()));
+		add(new ParallelWrite(this, new SSL_hashtable_remove()));
+		add(new ParallelWrite(this, new SSL_hashtable_reset()));
+		add(new ParallelWrite(this, new SSL_hashtable_put()));
+		add(new ParallelRead(this, new SSL_hashtable_get()));
+		add(new ParallelRead(this, new SSL_hashtable_keys()));
+		add(new ParallelRead(this, new SSL_table_fold(), 1));
+		add(new ParallelRead(this, new SSL_table_values_fold(), 1));
+		add(new ParallelRead(this, new SSL_table_keys_fold(), 1));
+		
+		add(new ParallelSetCreate());
+		add(new ParallelWrite(this, new SSL_indexedSet_put()));
+		add(new ParallelWrite(this, new SSL_indexedSet_remove()));
+		add(new ParallelRead(this, new SSL_indexedSet_getIndex()));
+		add(new ParallelRead(this, new SSL_indexedSet_elements()));
+		add(new ParallelRead(this, new SSL_indexedSet_reset()));
+		add(new ParallelRead(this, new SSL_indexedSet_destroy()));
+	}
+	
+	public void invalidateReads(Object collection) {
+		/* TODO: invalidateReads()
+		synchronized (asyncCollectionReadLog) {
+			Set<ParallelJob> jobs = asyncCollectionReadLog.get(collection);
+			if (jobs != null) {
+				for (ParallelJob job : jobs) {
+					job.restart();
+				}
+			}
+		}
+		*/
+	}
+	
+	public void logReadOperation(Object collection, ParallelJob job) {
+		synchronized (asyncCollectionReadLog) {
+			Set<ParallelJob> jobs = asyncCollectionReadLog.get(collection);
+			if (jobs == null) {
+				jobs = new HashSet<ParallelJob>();
+				asyncCollectionReadLog.put(collection, jobs);
+			}
+			jobs.add(job);
+		}
+	}
+	
+	public Object getSyncRoot() {
+		return syncRoot;
+	}
+
+	public String getOperatorRegistryName() {
+		return REGISTRY_NAME;
+	}
+
+}


Property changes on: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelCollectionLibrary.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelRead.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelRead.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelRead.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -0,0 +1,54 @@
+package org.strategoxt.lang.parallel.collections;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.InteropContext;
+import org.strategoxt.lang.parallel.ParallelContext;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelRead extends AbstractPrimitive {
+	
+	private final ParallelCollectionLibrary library;
+	
+	private final AbstractPrimitive primitive;
+	
+	private final int tableIndex;
+	
+	public ParallelRead(ParallelCollectionLibrary library, AbstractPrimitive primitive, int tableIndex) {
+		super(primitive.getName(), primitive.getSArity(), primitive.getTArity());
+		this.library = library;
+		this.primitive = primitive;
+		this.tableIndex = tableIndex;
+	}
+	
+	public ParallelRead(ParallelCollectionLibrary library, AbstractPrimitive primitive) {
+		this(library, primitive, 0);
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+			return primitive.call(env, sargs, targs);
+		} else if (targs[tableIndex] instanceof IThreadBoundCollection) {
+			return primitive.call(env, sargs, targs);
+		} else {
+			// TODO: Speculative reading
+			ParallelContext context = (ParallelContext) ((InteropContext) env).getContext();
+			if (!context.getJob().isFocusJob())
+				context.waitForFocus();
+			
+			synchronized (library.getSyncRoot()) {
+				return primitive.call(env, sargs, targs); 
+			}
+		}
+	}
+
+}


Property changes on: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelRead.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelSetCreate.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelSetCreate.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelSetCreate.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -0,0 +1,41 @@
+package org.strategoxt.lang.parallel.collections;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.ssl.SSL_hashtable_create;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelSetCreate extends SSL_hashtable_create {
+
+	protected ParallelSetCreate() {}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+	        if (!(Tools.isTermInt(targs[0])))
+	            return false;
+	        if (!(Tools.isTermInt(targs[1])))
+	            return false;
+
+	        int initialSize = ((IStrategoInt) targs[0]).intValue();
+	        int maxLoad = ((IStrategoInt) targs[1]).intValue();
+
+	        IStrategoTerm table = new ThreadBoundSet(initialSize, maxLoad);
+	        
+	        env.setCurrent(table);
+	        return true;
+		} else {
+			return super.call(env, sargs, targs);
+		}
+	}
+	
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelTableCreate.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelTableCreate.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelTableCreate.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -0,0 +1,41 @@
+package org.strategoxt.lang.parallel.collections;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.ssl.SSL_indexedSet_create;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelTableCreate extends SSL_indexedSet_create {
+
+	protected ParallelTableCreate() {}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+	        if (!(Tools.isTermInt(targs[0])))
+	            return false;
+	        if (!(Tools.isTermInt(targs[1])))
+	            return false;
+
+	        int initialSize = ((IStrategoInt) targs[0]).intValue();
+	        int maxLoad = ((IStrategoInt) targs[1]).intValue();
+
+	        IStrategoTerm table = new ThreadBoundHashMap(initialSize, maxLoad);
+	        
+	        env.setCurrent(table);
+	        return true;
+		} else {
+			return super.call(env, sargs, targs);
+		}
+	}
+	
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelWrite.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelWrite.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelWrite.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -0,0 +1,55 @@
+package org.strategoxt.lang.parallel.collections;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.InteropContext;
+import org.strategoxt.lang.parallel.ParallelContext;
+import org.strategoxt.lang.parallel.libstratego_parallel;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ParallelWrite extends AbstractPrimitive {
+	
+	private final ParallelCollectionLibrary library;
+	
+	private final AbstractPrimitive primitive;
+	
+	private final int tableIndex;
+	
+	public ParallelWrite(ParallelCollectionLibrary library, AbstractPrimitive primitive, int tableIndex) {
+		super(primitive.getName(), primitive.getSArity(), primitive.getTArity());
+		this.library = library;
+		this.primitive = primitive;
+		this.tableIndex = tableIndex;
+	}
+	
+	public ParallelWrite(ParallelCollectionLibrary library, AbstractPrimitive primitive) {
+		this(library, primitive, 0);
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
+			throws InterpreterException {
+		
+		if (!libstratego_parallel.isActive()) {
+			return primitive.call(env, sargs, targs);
+		} else if (targs[tableIndex] instanceof IThreadBoundCollection) {
+			return primitive.call(env, sargs, targs);
+		} else {
+			ParallelContext context = (ParallelContext) ((InteropContext) env).getContext();
+			if (!context.getJob().isFocusJob())
+				context.waitForFocus();
+			
+			synchronized (library.getSyncRoot()) {
+				boolean result = primitive.call(env, sargs, targs);
+				if (result) library.invalidateReads(targs[tableIndex]);
+				return result;
+			}
+		}
+	}
+
+}


Property changes on: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelWrite.java
___________________________________________________________________
Added: svn:mergeinfo
   + 

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ThreadBoundHashMap.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ThreadBoundHashMap.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ThreadBoundHashMap.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -0,0 +1,30 @@
+package org.strategoxt.lang.parallel.collections;
+
+import org.spoofax.interpreter.library.ssl.StrategoHashMap;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * A stratego hash table bound to a particular thread.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ThreadBoundHashMap extends StrategoHashMap implements IThreadBoundCollection {
+
+	private static final long serialVersionUID = 964863361598769442L;
+	
+	private final Thread thread;
+
+	public ThreadBoundHashMap(int initialSize, int maxLoad) {
+		super(initialSize, maxLoad);
+		Thread thread = null;
+		assert (thread = Thread.currentThread()) != null;
+		this.thread = thread;
+	}
+	
+	@Override
+	public IStrategoTerm put(IStrategoTerm key, IStrategoTerm value) {
+		assert thread == Thread.currentThread();
+		return super.put(key, value);
+	}
+
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ThreadBoundSet.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ThreadBoundSet.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ThreadBoundSet.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -0,0 +1,30 @@
+package org.strategoxt.lang.parallel.collections;
+
+import org.spoofax.interpreter.library.ssl.StrategoSet;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * A stratego indexed set bound to a particular thread.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ThreadBoundSet extends StrategoSet implements IThreadBoundCollection {
+	
+	private static final long serialVersionUID = -2929485629069696970L;
+	
+	private final Thread thread;
+
+	public ThreadBoundSet(int initialSize, int maxLoad) {
+		super(initialSize, maxLoad);
+		Thread thread = null;
+		assert (thread = Thread.currentThread()) != null;
+		this.thread = thread;
+	}
+	
+	@Override
+	public int put(IStrategoTerm value) {
+		assert thread == Thread.currentThread();
+		return super.put(value);
+	}
+
+}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/libstratego_parallel.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/libstratego_parallel.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/libstratego_parallel.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -12,7 +12,7 @@
 	
 	protected static final boolean ENABLED = true;
 	
-	protected static final boolean VERBOSE = false;
+	protected static final boolean VERBOSE = true;
 	
 	protected static final boolean DIAGNOSE_SYNCHRONOUS_OPERATIONS = false;
 	
@@ -41,6 +41,7 @@
 		ParallelAll.instance = new ParallelAll();
 		SRTS_all.instance = ParallelAll.instance;
 		
+		// TODO: print intro message only for --verbose 2
 		System.err.println("[ libstratego-parallel ] using "
 				+ DEFAULT_ACTIVE_THREADS
 				+ (DEFAULT_MAX_THREADS != DEFAULT_ACTIVE_THREADS ? "/" + DEFAULT_MAX_THREADS : "")

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableCreate.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,30 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_create;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.parallel.libstratego_parallel;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTableCreate extends SSL_hashtable_create {
-
-	protected ParallelTableCreate(ParallelTableLibrary library) {}
-	
-	@Override
-	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-			throws InterpreterException {
-		
-		if (!libstratego_parallel.isActive()) {
-			// TODO: new thread-bound table 
-			throw new NotImplementedException();
-		} else {
-			return super.call(env, sargs, targs);
-		}
-	}
-	
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableDestroy.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,30 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_destroy;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.parallel.libstratego_parallel;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTableDestroy extends SSL_hashtable_destroy {
-
-	protected ParallelTableDestroy(ParallelTableLibrary library) {}
-
-	@Override
-	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-			throws InterpreterException {
-		
-		if (!libstratego_parallel.isActive()) {
-			// TODO: remove thread-bound table registration 
-			throw new NotImplementedException();
-		} else {
-			return super.call(env, sargs, targs);
-		}
-	}
-
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableFold.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableFold.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableFold.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,10 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.interpreter.library.ssl.SSL_table_fold;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTableFold extends SSL_table_fold {
-
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableGet.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,29 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_get;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.parallel.libstratego_parallel;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTableGet extends SSL_hashtable_get {
-
-	protected ParallelTableGet(ParallelTableLibrary library) {}
-
-	@Override
-	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-			throws InterpreterException {
-		
-		if (!libstratego_parallel.isActive()) {
-			// TODO: selectively synchronize 
-			throw new NotImplementedException();
-		} else {
-			return super.call(env, sargs, targs);
-		}
-	}
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeys.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,29 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_keys;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.parallel.libstratego_parallel;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTableKeys extends SSL_hashtable_keys {
-
-	protected ParallelTableKeys(ParallelTableLibrary library) {}
-	
-	@Override
-	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-			throws InterpreterException {
-		
-		if (!libstratego_parallel.isActive()) {
-			// TODO: selectively synchronize 
-			throw new NotImplementedException();
-		} else {
-			return super.call(env, sargs, targs);
-		}
-	}
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeysFold.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeysFold.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableKeysFold.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,10 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.interpreter.library.ssl.SSL_table_keys_fold;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTableKeysFold extends SSL_table_keys_fold {
-	// TODO: ParallelTableKeysFold
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableLibrary.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,36 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTableLibrary extends AbstractStrategoOperatorRegistry {
-
-    public static final String REGISTRY_NAME = "paralleltable";
-    
-    private final Object syncRoot = new Object();
-    
-    // concurrentset?
-    // private final ThreadLocal<Set<LoggedTableRead>> tableReads =
-    //	new ThreadLocal<Set<LoggedTableRead>>();
-    
-    public ParallelTableLibrary() {
-    	add(new ParallelTableDestroy(this));
-    	add(new ParallelTableRemove(this));
-    	add(new ParallelTableReset(this));
-    	add(new ParallelTableCreate(this));
-    	add(new ParallelTableGet(this));
-    	add(new ParallelTableKeys(this));
-    	add(new ParallelTablePut(this));
-    }
-    
-    public Object getSyncRoot() {
-		return syncRoot;
-	}
-
-	public String getOperatorRegistryName() {
-		return REGISTRY_NAME;
-	}
-
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTablePut.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,30 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_put;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.parallel.libstratego_parallel;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTablePut extends SSL_hashtable_put {
-
-	protected ParallelTablePut(ParallelTableLibrary library) {}
-	
-	@Override
-	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-			throws InterpreterException {
-		
-		if (!libstratego_parallel.isActive()) {
-			// TODO: selectively synchronize 
-			throw new NotImplementedException();
-		} else {
-			return super.call(env, sargs, targs);
-		}
-	}
-
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableRemove.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,30 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_remove;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.parallel.libstratego_parallel;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTableRemove extends SSL_hashtable_remove {
-
-	protected ParallelTableRemove(ParallelTableLibrary library) {}
-
-	@Override
-	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-			throws InterpreterException {
-		
-		if (!libstratego_parallel.isActive()) {
-			// TODO: selectively synchronize 
-			throw new NotImplementedException();
-		} else {
-			return super.call(env, sargs, targs);
-		}
-	}
-
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java	2009-08-25 08:38:55 UTC (rev 19867)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/tables/ParallelTableReset.java	2009-08-25 08:40:18 UTC (rev 19868)
@@ -1,33 +0,0 @@
-package org.strategoxt.lang.parallel.tables;
-
-import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.library.ssl.SSL_hashtable_reset;
-import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.parallel.libstratego_parallel;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class ParallelTableReset extends SSL_hashtable_reset {
-	
-	private final ParallelTableLibrary library;
-
-	protected ParallelTableReset(ParallelTableLibrary library) {
-		this.library = library;
-	}
-	
-	@Override
-	public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
-			throws InterpreterException {
-		
-		if (!libstratego_parallel.isActive()) {
-			synchronized (library.getSyncRoot()) {
-				return super.call(env, sargs, targs);
-			}
-		} else {
-			return super.call(env, sargs, targs);
-		}
-	}
-}


(53 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Tue Aug 25 11:37:46 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 25 Aug 2009 09:37:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19869 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor
Message-ID: <200908250937.n7P9bHrv016517@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-25 09:37:46 +0000 (Tue, 25 Aug 2009)
New Revision: 19869

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19869&view=rev

Removed:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.generated.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.generated.esv
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.esv

Log:
Removed generated files.

Changes:

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.generated.esv	2009-08-25 08:40:18 UTC (rev 19868)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Analysis.generated.esv	2009-08-25 09:37:46 UTC (rev 19869)
@@ -1,21 +0,0 @@
-module SDF-Analysis.generated
-
-analysis
-  
-
-
-
-// Analysis can be provided by an external Stratego program:
-
-//
-
-//   provider stratego-program.ctree // (built using strc -F)
-
-//
-
-
-// Analysis is carried out by a rule of the form (ast, path, fullpath) -> (errors, warnings, infos)
-
-//
-
-//   observer analysis-rule
\ No newline at end of file

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.generated.esv	2009-08-25 08:40:18 UTC (rev 19868)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Colorer.generated.esv	2009-08-25 09:37:46 UTC (rev 19869)
@@ -1,58 +0,0 @@
-module SDF-Colorer.generated
-
-colorer
-  
-
-
-
-// Sort-based highlighting with background color
-
-//   Id: yellow green
-
-//
-
-// Sort- and constructor-based highlighting
-
-//   ClassBodyDec.MethodDec: yellow
-
-//
-
-// Constructor-based highlighting
-
-//   _.MethodDec: 255 0 0
-
-//
-
-
-// Example: background colors for ToMetaExpr/FromMetaExpr, if supported by the grammar
-
-//   environment _.ToMetaExpr:   _ 220 230 200
-
-//   environment _.FromMetaExpr: _ white
-
-colorer Default, token-based highlighting
-                                                
-  keyword    : "Keywords"    = 127 0 85 bold    
-  identifier : "Identifiers" = default          
-  string     : "Strings"     = blue             
-  number     : "Numbers"     = darkgreen        
-  var        : "Variables"   = 255 0 100 italic 
-  operator   : "Operators"   = 0 0 128          
-  layout     : "Comments"    = 100 100 0 italic 
-
-colorer System colors
-                            
-  darkred   = 128 0 0       
-  red       = 255 0 0       
-  darkgreen = 0 128 0       
-  green     = 0 255 0       
-  darkblue  = 0 0 128       
-  blue      = 0 0 255       
-  cyan      = 0 255 255     
-  magenta   = 255 0 255     
-  yellow    = 255 255 0     
-  white     = 255 255 255   
-  black     = 0 0 0         
-  gray      = 128 128 128   
-  grey      = gray          
-  default   = _             
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.esv	2009-08-25 08:40:18 UTC (rev 19868)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.esv	2009-08-25 09:37:46 UTC (rev 19869)
@@ -11,7 +11,7 @@
   
   kernel-syntax
   
-  
+  sorts
 
 // This file can be used for custom folding rules.
 

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.generated.esv	2009-08-25 08:40:18 UTC (rev 19868)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Folding.generated.esv	2009-08-25 09:37:46 UTC (rev 19869)
@@ -1,55 +0,0 @@
-module SDF-Folding.generated
-
-folding Default folding definitions
-  
-  // Folding rules indicate grammar productions to be foldable,
-  // and take one of the following forms, and :
-  //
-  //   - <sort>.<constructor>
-  //   - <sort>._,
-  //   - _.<constructor>
-  
-  Module.module
-  ModuleName.parameterized
-  ImpSection.imports
-  ListStarOfImport1
-  Import.renamed-module
-  Renamings.renamings
-  Renaming.symbol
-  Production.prod
-  Attributes.attrs
-  Attribute.term
-  ATermAttribute.default
-  Production.prefix-fun
-  ListStarOfSection1
-  Section.exports
-  Grammar.syntax
-  ListStarOfProduction1
-  Grammar.lexical-syntax
-  Grammar.context-free-syntax
-  Grammar.variables
-  Grammar.lexical-variables
-  Grammar.imp-section
-  Grammar.priorities
-  ListStarOfPriority1
-  Priority.chain
-  Group.with-arguments
-  ArgumentIndicator.default
-  Group.prods-group
-  Group.assoc-group
-  Priority.assoc
-  Grammar.sorts
-  Grammar.kernel-start-symbols
-  Grammar.lexical-start-symbols
-  Grammar.context-free-start-symbols
-  Grammar.restrictions
-  ListStarOfRestriction1
-  Restriction.follow
-  Grammar.aliases
-  ListStarOfAlias1
-  Alias.alias
-  Grammar.lexical-priorities
-  Grammar.context-free-priorities
-  Grammar.lexical-restrictions
-  Grammar.context-free-restrictions
-  Section.hiddens
\ No newline at end of file

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.generated.esv	2009-08-25 08:40:18 UTC (rev 19868)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Occurrences.generated.esv	2009-08-25 09:37:46 UTC (rev 19869)
@@ -1,23 +0,0 @@
-module SDF-Occurrences.generated
-
-occurrences
-  
-
-
-
-
-// Occurrence highlighting functionality may be provided by an external Stratego program:
-
-//
-
-//   provider stratego-program.ctree // (built using strc -F)
-
-//
-
-// Occurence rules can specify the syntax constructors for which
-
-// a reference resolving function is available:
-
-//
-
-//   occurrence FunctionCall : occurrences
\ No newline at end of file

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.generated.esv	2009-08-25 08:40:18 UTC (rev 19868)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Outliner.generated.esv	2009-08-25 09:37:46 UTC (rev 19869)
@@ -1,19 +0,0 @@
-module SDF-Outliner.generated
-
-outliner Default outliner        
-  
-  // Outliner rules indicate grammar productions to be outlined,
-  // and take one of the following forms, and :
-  //
-  //   - <sort>.<constructor>
-  //   - <sort>._,
-  //   - _.<constructor>
-  
-  Module.module
-  ModuleName.parameterized
-  Symbol.parameterized-sort
-  Import.renamed-module
-  Production.prod
-  ATerm.appl
-  Production.prefix-fun
-  Restriction.follow
\ No newline at end of file

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.generated.esv	2009-08-25 08:40:18 UTC (rev 19868)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-References.generated.esv	2009-08-25 09:37:46 UTC (rev 19869)
@@ -1,31 +0,0 @@
-module SDF-References.generated
-
-references
-  
-
-
-
-
-// Reference resolving functionality may be provided by an external Stratego program:
-
-//
-
-//   provider stratego-program.ctree // (built using strc -F)
-
-//
-
-// Occurence rules can specify the syntax constructors for which
-
-// a reference resolving function is available:
-
-//
-
-//   reference FunctionCall : resolve-function-call hover-help-function-call
-
-//
-
-// This defines that for each FunctionCall, resolve-function-call
-
-// will retrieve the AST node that declares it, and hover-help-function-call
-
-// returns hover help information.
\ No newline at end of file

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.generated.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.generated.esv	2009-08-25 08:40:18 UTC (rev 19868)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/SDF-Syntax.generated.esv	2009-08-25 09:37:46 UTC (rev 19869)
@@ -1,11 +0,0 @@
-module SDF-Syntax.generated
-
-language Syntax properties (static defaults)
-                  
-  line comment  : "//"
-  block comment : "/*" * "*/"
-  fences        : [  ]
-                  (  )
-                  {  }
-                  |[ ]|
-                  <? ?>
\ No newline at end of file



From L.C.L.Kats at tudelft.nl  Wed Aug 26 12:54:13 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 26 Aug 2009 10:54:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19870 - LennartKats -
	in strategoxt/trunk: stratego-libraries/lib/spec/strategy/traversal
	stratego-regular/xtc strc-core/tools
Message-ID: <200908261053.n7QArhjp003016@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-26 10:54:13 +0000 (Wed, 26 Aug 2009)
New Revision: 19870

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19870&view=rev

Added:
   strategoxt/trunk/strc-core/tools/str
Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/strategy/traversal/simple.str
   strategoxt/trunk/stratego-regular/xtc/pp-rtg.str
   strategoxt/trunk/strc-core/tools/Makefile.am

Log:
Added my 'str' command-line STRC test-run script.
Try 'str debug', 'str -c debug', or 'str -F "with(1)"' to see what it's about.


Changes:

Modified: strategoxt/trunk/stratego-libraries/lib/spec/strategy/traversal/simple.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/strategy/traversal/simple.str	2009-08-25 09:37:46 UTC (rev 19869)
+++ strategoxt/trunk/stratego-libraries/lib/spec/strategy/traversal/simple.str	2009-08-26 10:54:13 UTC (rev 19870)
@@ -244,6 +244,8 @@
    *
    * @param s          Term -> Term
    * @type  Term -> Term 
+   *
+   * @see collect-one
    */
   oncetd(s) = 
     rec x(s <+ one(x))

Modified: strategoxt/trunk/stratego-regular/xtc/pp-rtg.str
===================================================================
--- strategoxt/trunk/stratego-regular/xtc/pp-rtg.str	2009-08-25 09:37:46 UTC (rev 19869)
+++ strategoxt/trunk/stratego-regular/xtc/pp-rtg.str	2009-08-26 10:54:13 UTC (rev 19870)
@@ -35,4 +35,8 @@
 
   pp-rtg-box =
     rtg-ppfix
-    ; ast2box(|[<xtc-find; ReadFromFile> "rtg.pp.af"])
+    ; ast2box(|[<pp-table-rtg>])
+  
+  pp-table-rtg =
+    import-term(rtg.pp.af)
+

Modified: strategoxt/trunk/strc-core/tools/Makefile.am
===================================================================
--- strategoxt/trunk/strc-core/tools/Makefile.am	2009-08-25 09:37:46 UTC (rev 19869)
+++ strategoxt/trunk/strc-core/tools/Makefile.am	2009-08-26 10:54:13 UTC (rev 19870)
@@ -12,7 +12,7 @@
 
 #strc_LDADD      = $(LIB_STRC) $(SSL_LIBS)
 
-bin_SCRIPTS      = strcflags
+bin_SCRIPTS      = strcflags str
 bin_PROGRAMS 	 = strc parse-stratego pp-stratego
 
 libexec_PROGRAMS = pack-stratego report-ambs stratego-ensugar \

Added: strategoxt/trunk/strc-core/tools/str
===================================================================
--- strategoxt/trunk/strc-core/tools/str	                        (rev 0)
+++ strategoxt/trunk/strc-core/tools/str	2009-08-26 10:54:13 UTC (rev 19870)
@@ -0,0 +1,131 @@
+#!/bin/bash
+#
+# by Lennart Kats <lennart add lclnet.nl>
+
+IOPTION=
+FOPTION=
+COPTION=
+GOPTION=
+GOPTION=
+LOPTION=
+LAOPTION=
+OOPTION="-O 1"
+
+while true; do
+  if [ "$1" = "-c" ] || [ "$1" == "--indent-c" ]; then
+    COPTION="-c --indent-c"
+    shift
+    continue
+  fi
+
+  if [ "$1" = "-F" ]; then
+    FOPTION="-F"
+    shift
+    continue
+  fi
+  
+  if [ "$1" = "--library" ] || [ "$1" = "--lib" ]; then
+    LOPTION="--library"
+    shift
+    continue
+  fi
+  
+  if [ "$1" = "-g" ]; then
+    GOPTION="-g"
+    shift
+    continue
+  fi
+  
+  if [ "$1" = "-O" ]; then
+    OOPTION="-O $2"
+    shift; shift
+    continue
+  fi
+  
+  if [ "$1" = "-la" ]; then
+    LAOPTION="$LAOPTION -la $2"
+    shift; shift
+    continue
+  fi
+  
+  if [ "$1" = "-I" ]; then
+    IOPTION="-I $2"
+    shift; shift
+    continue
+  fi
+  
+  if [ "$1" = "-i" ]; then
+    INPUT="$(cat $2)"
+    shift; shift
+    $0 $FOPTION $GOPTION $COPTION $OOPTION $LOPTION $IOPTION $LAOPTION $* $INPUT
+    exit $?
+  fi
+  
+  if (echo "$1" | grep -e '^ [^ ]\.' &>/dev/null || [ -f "$1" ]) && [ $# = 1 ]; then
+    if [ -f "$1" ]; then
+      $0 $FOPTION $GOPTION $COPTION $OOPTION $LOPTION $IOPTION $LAOPTION "$(cat $1)"
+      exit $?
+    else
+      echo Not a Stratego module: $1 >&2
+      exit 1
+    fi
+  fi
+  
+  if [ $# = 0 ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
+    echo 'Usage: str [-c | -F [--lib] | -g] [-O N] [-i FILE | INPUT]'
+    echo 'Compile and run Stratego program in FILE or from INPUT.'
+    echo
+    echo '  -c        Display program output C code instead of running it.'
+    echo '  -F        Display program in core format instead of running it.'
+    echo '  -g        Run program using gdb and display backtrace.'
+    echo '  --lib     Treat as library, keeping all unused strategies'
+    echo '  -la NAME  Search the libtool library libNAME.la when linking.'
+    echo '  -I DIR    Include modules from directory DIR.'
+    echo '  -O N      Use optimization level N (default 1).'
+    echo '  -i FILE   Read input from FILE.'
+    echo '  INPUT     Use INPUT as the input program (typically specified using single quotes),'
+    echo '            which can be a single strategy or a complete module'
+    exit
+  fi
+  break
+done
+  
+if echo "$@" | grep '^module ' >/dev/null; then
+  PROGRAM="$@"
+else
+  PROGRAM="module foo imports libstratego-lib libstratego-xtc libstratego-sglr libstratego-rtg libstrc rules main =
+$@"
+fi
+
+if [ "$TEMP" == "" ]; then
+  TEMP=/tmp
+fi
+
+[ -d $TEMP/.libs ] || (mkdir $TEMP/.libs; chmod 777 $TEMP/.libs)
+
+TEMPFILE=$TEMP/str-`date +'%N'`.str
+echo "$PROGRAM" |
+  perl -pe 's/\blibstratego-lib\b//; s/module\s+[\w\-'']+\b/$& imports libstratego-lib strategies/' > $TEMPFILE
+
+(strc $FOPTION $LOPTION $COPTION $OOPTION $IOPTION $LAOPTION --format-check 0 -Xcc -O0 -la stratego-lib -la stratego-xtc -la strc -la stratego-sglr -la stratego-rtg -I . -i $TEMPFILE -o $TEMPFILE.out --statistics 0; RET=$?) 2>&1 | grep -vE '^ *[ig]cc|warning ] Mismatch between basename|info ] Compiling|libtool: '
+
+rm $TEMPFILE
+
+if [ -e $TEMPFILE.out ]; then
+  if [ $FOPTION ]; then
+    pp-stratego -a -i $TEMPFILE.out
+  elif [ $GOPTION ]; then
+    echo 'run
+          backtrace' > $TEMPFILE.gdb
+    gdb -batch -x $TEMPFILE.gdb $TEMPFILE.out
+  else
+    $TEMPFILE.out
+  fi
+elif [ "$COPTION" ]; then
+  cat $TEMPFILE.c
+fi
+
+rm -f $TEMPFILE.out $TEMPFILE.gdb $TEMPFILE.c \
+      $TEMPFILE.str.lo $TEMPFILE.str.la $TEMPFILE.str.out.dep $TEMPFILE.str.c
+
+exit $RET


Property changes on: strategoxt/trunk/strc-core/tools/str
___________________________________________________________________
Added: svn:executable
   + *



From L.C.L.Kats at tudelft.nl  Wed Aug 26 13:50:41 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 26 Aug 2009 11:50:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19871 - LennartKats -
	strategoxt/trunk/strc-core/tools
Message-ID: <200908261150.n7QBoBG4003712@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-26 11:50:41 +0000 (Wed, 26 Aug 2009)
New Revision: 19871

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19871&view=rev

Modified:
   strategoxt/trunk/strc-core/tools/Makefile.am

Log:


Changes:

Modified: strategoxt/trunk/strc-core/tools/Makefile.am
===================================================================
--- strategoxt/trunk/strc-core/tools/Makefile.am	2009-08-26 10:54:13 UTC (rev 19870)
+++ strategoxt/trunk/strc-core/tools/Makefile.am	2009-08-26 11:50:41 UTC (rev 19871)
@@ -19,6 +19,6 @@
 		   meta-explode stratego2abox stratego-parenthesize
 
 
-EXTRA_DIST      = $(wildcard *.str) strcflags
+EXTRA_DIST      = $(wildcard *.str) strcflags str
 CLEANFILES 	= $(wildcard *.dep)
 BOOTCLEANFILES 	= $(wildcard *.c)



From L.C.L.Kats at tudelft.nl  Wed Aug 26 15:25:21 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 26 Aug 2009 13:25:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19872 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading parser parser/ast
Message-ID: <200908261324.n7QDOpMA005382@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-26 13:25:21 +0000 (Wed, 26 Aug 2009)
New Revision: 19872

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19872&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java

Log:
- Now using generic markers to report semantic errors
  (since I couldn't get my project-specific markers to show up in
   the package explorer)

- Fixed a null pointer exception when an editor definition is reloaded

- Updated some task tags


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-08-26 11:50:41 UTC (rev 19871)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2009-08-26 13:25:21 UTC (rev 19872)
@@ -64,7 +64,6 @@
 		}
 		
 		// No active editor; try the registry instead
-		// TODO: Use language validator?
 		return LanguageRegistry.findLanguage(filePath, null);
 	}
 	
@@ -76,6 +75,13 @@
 		}
 		return false;
 	}
+	
+	@Override
+	public IParseController getWrapped() {
+		if (!isInitialized())
+			initialize(null, null, null);
+		return super.getWrapped();
+	}
 
 	public IAnnotationTypeInfo getAnnotationTypeInfo() {
 		return getWrapped().getAnnotationTypeInfo();
@@ -120,7 +126,7 @@
 		if (filePath == null) handler = this.handler;
 		else this.handler = handler;
 		
-		getWrapped().initialize(filePath, project, handler);
+		super.getWrapped().initialize(filePath, project, handler);
 	}
 
 	public Object parse(String input, boolean scanOnly, IProgressMonitor monitor) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-08-26 11:50:41 UTC (rev 19871)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-08-26 13:25:21 UTC (rev 19872)
@@ -27,7 +27,6 @@
 import org.eclipse.imp.services.IAnnotationTypeInfo;
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
 import org.eclipse.jface.text.IRegion;
-import org.eclipse.ui.PlatformUI;
 import org.spoofax.jsglr.BadTokenException;
 import org.spoofax.jsglr.ParseTable;
 import org.spoofax.jsglr.ParseTimeoutException;
@@ -187,6 +186,9 @@
 				//     but are waiting to run in the UI thread themselves
 				//   - reporting errors at startup may trigger the above condition,
 				//     at least for files with an in-workspace editor(?)
+				//
+				// TODO: Consider using Display.asyncExec for reporting errors;
+				//       this could be integrated into the AstMessageHandler class!
 				errorHandler.clearErrors();
 				errorHandler.setRecoveryAvailable(true);
 				errorHandler.reportNonFatalErrors(parser.getTokenizer(), asfix);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-08-26 11:50:41 UTC (rev 19871)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java	2009-08-26 13:25:21 UTC (rev 19872)
@@ -35,9 +35,15 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class AstMessageHandler {
+	
+	public static final String GENERIC_PROBLEM = IMarker.PROBLEM;
+	
 	public static final String PARSE_MARKER_TYPE = new String("org.strategoxt.imp.runtime.parsemarker"); 
 
-	public static final String ANALYSIS_MARKER_TYPE = new String("org.strategoxt.imp.runtime.analysismarker");
+	// TODO: ANALYSIS_MARKER_TYPE should be new String("org.strategoxt.imp.runtime.analysismarker");
+	//       as soon as we can get org.strategoxt.imp.runtime.analysismarker to show up in the
+	//       package explorer...
+	public static final String ANALYSIS_MARKER_TYPE = GENERIC_PROBLEM;
 	
 	private final String markerType;
 



From L.C.L.Kats at tudelft.nl  Thu Aug 27 10:08:56 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 27 Aug 2009 08:08:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19873 - LennartKats -
	in strc-java/trunk: . META-INF java java/META-INF
	java/runtime java/runtime/org/strategoxt
	java/runtime/org/strategoxt/lang
	java/runtime/org/strategoxt/lang/compat
	java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat
	java/runtime/org/strategoxt/lang/compat/libstrc_compat
	java/runtime/org/strategoxt/lang/compat/override
	java/runtime/org/strategoxt/lang/parallel/collections test
	test/basic test/sglr test/strc1 test/strc2 trans trans/lib
Message-ID: <200908270808.n7R88P3I019145@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-27 08:08:56 +0000 (Thu, 27 Aug 2009)
New Revision: 19873

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19873&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java
Removed:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java
Modified:
   strc-java/trunk/
   strc-java/trunk/.classpath
   strc-java/trunk/META-INF/MANIFEST.MF
   strc-java/trunk/build.properties
   strc-java/trunk/java/META-INF/MANIFEST-repacked.MF
   strc-java/trunk/java/META-INF/MANIFEST.MF
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/StringValuePrimitive.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/jsglr-parser.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelCollectionLibrary.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelRead.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/parallel/collections/ParallelWrite.java
   strc-java/trunk/test/
   strc-java/trunk/test/basic/build_0.str
   strc-java/trunk/test/basic/gchoice_2.str
   strc-java/trunk/test/basic/iset_2.str
   strc-java/trunk/test/basic/lchoice_1.str
   strc-java/trunk/test/basic/lchoice_2.str
   strc-java/trunk/test/sglr/
   strc-java/trunk/test/strc1/cs_test01.meta
   strc-java/trunk/test/strc1/cs_test01.str
   strc-java/trunk/test/strc1/cs_test02.meta
   strc-java/trunk/test/strc1/cs_test02.str
   strc-java/trunk/test/strc1/cs_test03.meta
   strc-java/trunk/test/strc1/cs_test03.str
   strc-java/trunk/test/strc1/cs_test04.meta
   strc-java/trunk/test/strc1/cs_test04.str
   strc-java/trunk/test/strc1/io_test1.str
   strc-java/trunk/test/strc1/io_test10.str
   strc-java/trunk/test/strc1/io_test11.str
   strc-java/trunk/test/strc1/io_test2.str
   strc-java/trunk/test/strc1/io_test3.str
   strc-java/trunk/test/strc1/io_test4.str
   strc-java/trunk/test/strc1/let_test.str
   strc-java/trunk/test/strc1/nested_defs01.str
   strc-java/trunk/test/strc1/qcons_test01.str
   strc-java/trunk/test/strc1/qcons_test02.str
   strc-java/trunk/test/strc1/qcons_test03.str
   strc-java/trunk/test/strc1/qcons_test04.str
   strc-java/trunk/test/strc1/test103.str
   strc-java/trunk/test/strc1/test110.str
   strc-java/trunk/test/strc1/test111.str
   strc-java/trunk/test/strc1/test_chain01.str
   strc-java/trunk/test/strc1/test_chain02.str
   strc-java/trunk/test/strc1/test_chain03.str
   strc-java/trunk/test/strc1/test_libstrc.str
   strc-java/trunk/test/strc2/
   strc-java/trunk/test/strc2/arity_test.str
   strc-java/trunk/test/strc2/as_pattern.str
   strc-java/trunk/test/strc2/comment_test.str
   strc-java/trunk/test/strc2/conditional_innermost.str
   strc-java/trunk/test/strc2/congruence_arguments.str
   strc-java/trunk/test/strc2/congruence_thread.str
   strc-java/trunk/test/strc2/dynamic_rules_test.str
   strc-java/trunk/test/strc2/empty_sections.str
   strc-java/trunk/test/strc2/flatten_test.str
   strc-java/trunk/test/strc2/higher_order_arg.str
   strc-java/trunk/test/strc2/implicit_var_decl.str
   strc-java/trunk/test/strc2/improper_list_test.str
   strc-java/trunk/test/strc2/innermost_pure.str
   strc-java/trunk/test/strc2/jtree_parenthesize.str
   strc-java/trunk/test/strc2/match_arity.str
   strc-java/trunk/test/strc2/match_automaton_test.str
   strc-java/trunk/test/strc2/number_syntax_test.str
   strc-java/trunk/test/strc2/number_test.str
   strc-java/trunk/test/strc2/overlay_test.str
   strc-java/trunk/test/strc2/overlay_test_b.str
   strc-java/trunk/test/strc2/overloading_constructors_test.str
   strc-java/trunk/test/strc2/rename_test.str
   strc-java/trunk/test/strc2/stratlib_test.meta
   strc-java/trunk/test/strc2/thread_test.str
   strc-java/trunk/test/strc2/traversal_test.str
   strc-java/trunk/test/strc2/unification_test.str
   strc-java/trunk/trans/
   strc-java/trunk/trans/java-optimize.meta
   strc-java/trunk/trans/java-optimize.str
   strc-java/trunk/trans/java-postprocess.meta
   strc-java/trunk/trans/java-postprocess.str
   strc-java/trunk/trans/java-simplify.meta
   strc-java/trunk/trans/java-simplify.str
   strc-java/trunk/trans/lib/
   strc-java/trunk/trans/lib/dr-scoping.str
   strc-java/trunk/trans/s2j-options.str
   strc-java/trunk/trans/s2j.str
   strc-java/trunk/trans/strj-options.str
   strc-java/trunk/trans/strj.str
   strc-java/trunk/trans/variable-access.str

Log:
Merged in the one-file-per-strategy branch and completed the transition to
use one Java file for each generated strategy (making debugging in Eclipse
much easier).

This changes the way libraries are used: each now has its own package.


Changes (first 1000 lines of the diffs):


Property changes on: strc-java/trunk
___________________________________________________________________
Added: svn:mergeinfo
   + /strc-java/branches/one-file-per-strategy:19806

Modified: strc-java/trunk/.classpath
===================================================================
--- strc-java/trunk/.classpath	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/.classpath	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" output="java/runtime" path="java/runtime"/>
+	<classpathentry kind="src" path="java/runtime"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry exported="true" kind="lib" path="java/strategoxt.jar" sourcepath="java/lib"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/3"/>
-	<classpathentry kind="output" path="bin"/>
+	<classpathentry kind="output" path="java/bin"/>
 </classpath>

Modified: strc-java/trunk/META-INF/MANIFEST.MF
===================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/META-INF/MANIFEST.MF	2009-08-27 08:08:56 UTC (rev 19873)
@@ -15,5 +15,6 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Bundle-ClassPath: .,
- java/strategoxt.jar,
- java/runtime/
+ java/runtime/,
+ java/compiler/,
+ java/lib/

Modified: strc-java/trunk/build.properties
===================================================================
--- strc-java/trunk/build.properties	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/build.properties	2009-08-27 08:08:56 UTC (rev 19873)
@@ -2,5 +2,6 @@
            java/compiler
 bin.includes = META-INF/,\
                .,\
-               java/strategoxt.jar,\
-               java/runtime/
+               java/runtime/,\
+               java/compiler/,\
+               java/lib/

Modified: strc-java/trunk/java/META-INF/MANIFEST-repacked.MF
===================================================================
--- strc-java/trunk/java/META-INF/MANIFEST-repacked.MF	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/java/META-INF/MANIFEST-repacked.MF	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,4 +1,4 @@
 Manifest-Version: 1.0
-Main-Class: org.strategoxt.strj
+Main-Class: org.strategoxt.strj.Main
 Class-Path: strategoxt-no-compression.jar
 Export-Package: org.strategoxt
Modified: strc-java/trunk/java/META-INF/MANIFEST.MF
===================================================================
--- strc-java/trunk/java/META-INF/MANIFEST.MF	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/java/META-INF/MANIFEST.MF	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,3 +1,3 @@
 Manifest-Version: 1.0
-Main-Class: org.strategoxt.strj
+Main-Class: org.strategoxt.strj.Main
 
Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/java/Makefile.am	2009-08-27 08:08:56 UTC (rev 19873)
@@ -9,46 +9,42 @@
   $(wildcard runtime/org/strategoxt/lang/compat/sglr/*.java) \
   $(wildcard runtime/org/strategoxt/lang/parallel/*.java) \
   $(wildcard runtime/org/strategoxt/lang/parallel/*/*.java) \
-  runtime/org/strategoxt/lang/compat/override/jsglr_parser.java \
-  runtime/org/strategoxt/lang/compat/override/jsglr_parser_compat.java \
-  runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.java \
-  runtime/org/strategoxt/lang/compat/override/performance_tweaks.java \
-  runtime/org/strategoxt/lang/compat/override/xtc_compat.java \
-  runtime/org/strategoxt/lang/compat/override/strc_compat.java
+  runtime/org/strategoxt/lang/compat/override/jsglr_parser/Main.java \
+  runtime/org/strategoxt/lang/compat/override/jsglr_parser_compat/Main.java \
+  runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat/Main.java \
+  runtime/org/strategoxt/lang/compat/override/performance_tweaks/Main.java \
+  runtime/org/strategoxt/lang/compat/override/xtc_compat/Main.java \
+  runtime/org/strategoxt/lang/compat/override/strc_compat/Main.java
 
-GENRUNTIMEJAVAS= \
-  $(subst runtime/org/strategoxt/lang/compat/libstrc_compat.java,, \
-  $(subst runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java,,$(LIBRARYJAVAS)))
-
 COMPILERJAVAS = \
-  compiler/org/strategoxt/strj.java
+  compiler/org/strategoxt/strj/Main.java
 
 LIBRARYJAVAS = \
-  lib/org/strategoxt/libstratego_lib.java \
-  lib/org/strategoxt/libstratego_xtc.java \
-  lib/org/strategoxt/libstratego_sglr.java \
-  lib/org/strategoxt/libstratego_gpp.java \
-  lib/org/strategoxt/libstratego_rtg.java \
-  lib/org/strategoxt/libstratego_aterm.java \
-  lib/org/strategoxt/libstratego_sdf.java \
-  lib/org/strategoxt/libstratego_tool_doc.java \
-  lib/org/strategoxt/libstrc.java \
-  lib/org/strategoxt/libjava_front.java
+  lib/org/strategoxt/libstratego_lib/Main.java \
+  lib/org/strategoxt/libstratego_xtc/Main.java \
+  lib/org/strategoxt/libstratego_sglr/Main.java \
+  lib/org/strategoxt/libstratego_gpp/Main.java \
+  lib/org/strategoxt/libstratego_rtg/Main.java \
+  lib/org/strategoxt/libstratego_aterm/Main.java \
+  lib/org/strategoxt/libstratego_sdf/Main.java \
+  lib/org/strategoxt/libstratego_tool_doc/Main.java \
+  lib/org/strategoxt/libstrc/Main.java \
+  lib/org/strategoxt/libjava_front/Main.java
 
 nobase_pkgdata_DATA = $(LIBRARYJAVAS) $(COMPILERJAVAS) .ALLCLASSES
 
 CLEANFILES = \
-  $(LIBRARYJAVAS) $(COMPILERJAVAS) $(GENRUNTIMEJAVAS) $(wildcard bin/*/*/*) $(wildcard bin/*/*/*/*) $(wildcard bin/*/*/*/*/*) \
+  $(LIBRARYJAVAS) $(COMPILERJAVAS) $(wildcard bin/*/*/*) $(wildcard bin/*/*/*/*) $(wildcard bin/*/*/*/*/*) \
   runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.rtree \
   lib/org/strategoxt/libstratego-xtc.rtree \
   .ALLCLASSES
 
 SPOOFAX=../../../spoofax/trunk/spoofax
-CLASSPATH=runtime:lib:spoofax-libs.jar:.
+CLASSPATH=runtime:lib:compiler:spoofax-libs.jar:.
 JAVACFLAGS=-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn -d bin
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 
-STRJOPTIONS=--library -p org.strategoxt --verbose 3 -O 3
+STRJFLAGS=--library --verbose 3 -O 3
 
 JAR=`if which fastjar >/dev/null; then echo fastjar; else echo jar; fi`
 JARIN1=`find runtime  | grep -E '\.rtree|\.af|\.tbl' | sed 's!runtime/!-C runtime/ !'`
@@ -92,69 +88,69 @@
 
 ###### LIBRARIES #######
 
-bin/org/strategoxt/libstratego_lib.class : lib/org/strategoxt/libstratego_lib.java
-	$(JAVAC) $<
+bin/org/strategoxt/libstratego_lib/Main.class : lib/org/strategoxt/libstratego_lib/Main.java
+	$(JAVAC) $(JAVACFLAGS) $<
 
-lib/org/strategoxt/libstratego_lib.java : $(STRATEGOXT)/share/stratego-lib/libstratego-lib.ctree ../trans/strj
-	../trans/strj -I $(STRATEGOXT)/share/stratego-lib -i $< -o $@ $(STRJOPTIONS)
+lib/org/strategoxt/libstratego_lib/Main.java : $(STRATEGOXT)/share/stratego-lib/libstratego-lib.ctree ../trans/strj
+	../trans/strj -I $(STRATEGOXT)/share/stratego-lib -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libstratego_lib
 
 lib/org/strategoxt/libstratego-xtc.rtree : $(STRATEGOXT)/share/xtc/stratego-xtc-posix-xsi.rtree
 	cp $< $@
 
-lib/org/strategoxt/libstratego_xtc.java : lib/org/strategoxt/libstratego-xtc.rtree ../trans/strj
-	../trans/strj -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/xtc -i $< -o $@ $(STRJOPTIONS) -la stratego-lib -D GetInternalDefaultXtcRepository=None
+lib/org/strategoxt/libstratego_xtc/Main.java : lib/org/strategoxt/libstratego-xtc.rtree ../trans/strj
+	../trans/strj -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/xtc -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libstratego_xtc -la stratego-lib -D GetInternalDefaultXtcRepository=None
 
-lib/org/strategoxt/libstratego_sglr.java : $(STRATEGOXT)/share/libstratego-sglr.ctree ../trans/strj
-	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJOPTIONS) -la stratego-lib -la stratego-xtc
+lib/org/strategoxt/libstratego_sglr/Main.java : $(STRATEGOXT)/share/libstratego-sglr.ctree ../trans/strj
+	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libstratego_sglr -la stratego-lib -la stratego-xtc
 
-lib/org/strategoxt/libstratego_rtg.java : $(STRATEGOXT)/share/libstratego-rtg.ctree ../trans/strj runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java
-	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJOPTIONS) -la stratego-lib -la stratego-sglr -la org.strategoxt.lang.compat.libstratego_rtg_compat
+lib/org/strategoxt/libstratego_rtg/Main.java : $(STRATEGOXT)/share/libstratego-rtg.ctree ../trans/strj runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java
+	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libstratego_rtg -la stratego-lib -la stratego-sglr -la org.strategoxt.lang.compat.libstratego_rtg_compat
 
-lib/org/strategoxt/libstratego_gpp.java : $(STRATEGOXT)/share/libstratego-gpp.ctree ../trans/strj
-	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJOPTIONS) -la stratego-lib -la stratego-lib -la stratego-sglr
+lib/org/strategoxt/libstratego_gpp/Main.java : $(STRATEGOXT)/share/libstratego-gpp.ctree ../trans/strj
+	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libstratego_gpp -la stratego-lib -la stratego-lib -la stratego-sglr
 
-lib/org/strategoxt/libstratego_aterm.java : $(STRATEGOXT)/share/libstratego-aterm.ctree runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.java ../trans/strj
-	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJOPTIONS) -la stratego-lib -la stratego-gpp -la org.strategoxt.lang.compat.override.libstratego_aterm_compat
+lib/org/strategoxt/libstratego_aterm/Main.java : $(STRATEGOXT)/share/libstratego-aterm.ctree runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat/Main.java ../trans/strj
+	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libstratego_aterm -la stratego-lib -la stratego-gpp -la org.strategoxt.lang.compat.override.libstratego_aterm_compat
 
-lib/org/strategoxt/libstratego_sdf.java : $(STRATEGOXT)/share/libstratego-sdf.ctree ../trans/strj
-	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJOPTIONS) -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-aterm 
+lib/org/strategoxt/libstratego_sdf/Main.java : $(STRATEGOXT)/share/libstratego-sdf.ctree ../trans/strj
+	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libstratego_sdf -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-aterm 
 
-lib/org/strategoxt/libstratego_tool_doc.java : $(STRATEGOXT)/share/libstratego-tool-doc.ctree ../trans/strj
-	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJOPTIONS) -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm -D SRTS-package-bugreport='"bugs at strategoxt.org"' -D SRTS-package-name='"<SRTS-package-name>"' -D SRTS-package-revision='"<SRTS-package-revision>"' -D SRTS-package-version='"<SRTS-package-version>"'
+lib/org/strategoxt/libstratego_tool_doc/Main.java : $(STRATEGOXT)/share/libstratego-tool-doc.ctree ../trans/strj
+	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libstratego_tool_doc -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm -D SRTS-package-bugreport='"bugs at strategoxt.org"' -D SRTS-package-name='"<SRTS-package-name>"' -D SRTS-package-revision='"<SRTS-package-revision>"' -D SRTS-package-version='"<SRTS-package-version>"'
 
-lib/org/strategoxt/libstrc.java : $(STRATEGOXT)/share/libstrc.ctree ../trans/strj runtime/org/strategoxt/lang/compat/libstrc_compat.java
-	../trans/strj -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/sdf/stratego-front -i $< -o $@ $(STRJOPTIONS) -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-rtg -la stratego-xtc -la org.strategoxt.lang.compat.libstrc_compat
+lib/org/strategoxt/libstrc/Main.java : $(STRATEGOXT)/share/libstrc.ctree ../trans/strj runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java
+	../trans/strj -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/sdf/stratego-front -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libstrc -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-rtg -la stratego-xtc -la org.strategoxt.lang.compat.libstrc_compat
 
-lib/org/strategoxt/libjava_front.java : $(JAVA_FRONT)/share/java-front/libjava-front.ctree ../trans/strj
-	../trans/strj -I $(JAVA_FRONT)/share/java-front-syntax -i $< -o $@ $(STRJOPTIONS) -la stratego-lib -la stratego-sglr -la stratego-gpp
+lib/org/strategoxt/libjava_front/Main.java : $(JAVA_FRONT)/share/java-front/libjava-front.ctree ../trans/strj
+	../trans/strj -I $(JAVA_FRONT)/share/java-front-syntax -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.libjava_front -la stratego-lib -la stratego-sglr -la stratego-gpp
 
 ###### RUNTIME #######
 
 runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.rtree : $(STRATEGOXT)/share/aterm-front/ATerms.str
 	parse-stratego -i $< -o $@
 
-runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.java : runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.rtree ../trans/strj
-	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJOPTIONS) -p org.strategoxt.lang.compat.override -la stratego-lib -la stratego-gpp
+runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat/Main.java : runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.rtree ../trans/strj
+	../trans/strj -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.libstratego_aterm_compat -la stratego-lib -la stratego-gpp
 
-runtime/org/strategoxt/lang/compat/override/jsglr_parser_compat.java : runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str ../trans/strj
-	../trans/strj -i $< -o $@ $(STRJOPTIONS) -p org.strategoxt.lang.compat.override -la stratego-lib -la stratego-sglr -la stratego-xtc
+runtime/org/strategoxt/lang/compat/override/jsglr_parser_compat/Main.java : runtime/org/strategoxt/lang/compat/override/jsglr-parser-compat.str ../trans/strj
+	../trans/strj -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.jsglr_parser_compat -la stratego-lib -la stratego-sglr -la stratego-xtc
 
-runtime/org/strategoxt/lang/compat/override/jsglr_parser.java : runtime/org/strategoxt/lang/compat/override/jsglr-parser.str ../trans/strj
-	../trans/strj -i $< -o $@ $(STRJOPTIONS) -p org.strategoxt.lang.compat.override -la stratego-lib
+runtime/org/strategoxt/lang/compat/override/jsglr_parser/Main.java : runtime/org/strategoxt/lang/compat/override/jsglr-parser.str ../trans/strj
+	../trans/strj -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.jsglr_parser -la stratego-lib
 
-runtime/org/strategoxt/lang/compat/override/performance_tweaks.java : runtime/org/strategoxt/lang/compat/override/performance-tweaks.str ../trans/strj
-	../trans/strj -i $< -o $@ $(STRJOPTIONS) -p org.strategoxt.lang.compat.override -la stratego-lib
+runtime/org/strategoxt/lang/compat/override/performance_tweaks/Main.java : runtime/org/strategoxt/lang/compat/override/performance-tweaks.str ../trans/strj
+	../trans/strj -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.performance_tweaks -la stratego-lib
 
-runtime/org/strategoxt/lang/compat/override/xtc_compat.java : runtime/org/strategoxt/lang/compat/override/xtc-compat.str ../trans/strj
-	../trans/strj -i $< -o $@ $(STRJOPTIONS) -p org.strategoxt.lang.compat.override -la stratego-lib -la stratego-xtc
+runtime/org/strategoxt/lang/compat/override/xtc_compat/Main.java : runtime/org/strategoxt/lang/compat/override/xtc-compat.str ../trans/strj
+	../trans/strj -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.xtc_compat -la stratego-lib -la stratego-xtc
 
-runtime/org/strategoxt/lang/compat/override/strc_compat.java : runtime/org/strategoxt/lang/compat/override/strc-compat.str ../trans/strj
-	../trans/strj -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/sdf/stratego-front -I $(STRATEGOXT)/share/xtc -I $(STRATEGOXT)/share/stratego-lib -I $(JAVA_FRONT)/share/java-front -i $< -o $@ $(STRJOPTIONS) -p org.strategoxt.lang.compat.override -la stratego-lib -la stratego-xtc -la org.strategoxt.libstrc
+runtime/org/strategoxt/lang/compat/override/strc_compat/Main.java : runtime/org/strategoxt/lang/compat/override/strc-compat.str ../trans/strj
+	../trans/strj -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/sdf/stratego-front -I $(STRATEGOXT)/share/xtc -I $(STRATEGOXT)/share/stratego-lib -I $(JAVA_FRONT)/share/java-front -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.strc_compat -la stratego-lib -la stratego-xtc -la org.strategoxt.libstrc
 
 ###### COMPILER #######
 
-compiler/org/strategoxt/strj.java : ../trans/strj.ctree ../trans/strj
-	../trans/strj -i $< -o $@ -p org.strategoxt --verbose 3 -la stratego-lib -la stratego-xtc -la stratego-gpp -la org.strategoxt.libstrc -la org.strategoxt.libjava_front -O 3 # -D DEFAULT_XTC_REPOSITORY="\"$(REPOSITORY)\""
+compiler/org/strategoxt/strj/Main.java : ../trans/strj.ctree ../trans/strj
+	../trans/strj -i $< -o $@ -p org.strategoxt.strj --verbose 3 -la stratego-lib -la stratego-xtc -la stratego-gpp -la org.strategoxt.libstrc -la org.strategoxt.libjava_front -O 3 # -D DEFAULT_XTC_REPOSITORY="\"$(REPOSITORY)\""
 
 ###### EXTERNAL #######
 


Property changes on: strc-java/trunk/java/Makefile.am
___________________________________________________________________
Deleted: svn:mergeinfo
   - 


Property changes on: strc-java/trunk/java/runtime
___________________________________________________________________
Deleted: svn:mergeinfo
   - 

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -44,17 +44,17 @@
 		IContext context = getContext();
 		Context compiledContext = getCompiledContext();
 		
-		libstratego_aterm.registerInterop(context, compiledContext);
-		libstratego_lib.registerInterop(context, compiledContext);
-		libstratego_rtg.registerInterop(context, compiledContext);
-		libstratego_sdf.registerInterop(context, compiledContext);
-		libstratego_xtc.registerInterop(context, compiledContext);
-		libstratego_sglr.registerInterop(context, compiledContext);
-		libstratego_tool_doc.registerInterop(context, compiledContext);
-		libstratego_rtg.registerInterop(context, compiledContext);
-		libstratego_gpp.registerInterop(context, compiledContext);
-		libjava_front.registerInterop(context, compiledContext);
-		libstrc.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_aterm.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_lib.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_rtg.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_sdf.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_xtc.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_sglr.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_tool_doc.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_rtg.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstratego_gpp.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libjava_front.Main.registerInterop(context, compiledContext);
+		org.strategoxt.libstrc.Main.registerInterop(context, compiledContext);
 	}
 	
 	public Context getCompiledContext() {


Property changes on: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
___________________________________________________________________
Deleted: svn:mergeinfo
   - 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -11,10 +11,10 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.lang.Context;
-import org.strategoxt.lang.compat.override.jsglr_parser;
-import org.strategoxt.lang.compat.override.jsglr_parser_compat;
-import org.strategoxt.lang.compat.override.performance_tweaks;
-import org.strategoxt.lang.compat.override.xtc_compat;
+import org.strategoxt.lang.compat.override.jsglr_parser.jsglr_parser;
+import org.strategoxt.lang.compat.override.jsglr_parser_compat.jsglr_parser_compat;
+import org.strategoxt.lang.compat.override.performance_tweaks.performance_tweaks;
+import org.strategoxt.lang.compat.override.xtc_compat.xtc_compat;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
 
 /**
@@ -65,9 +65,6 @@
 			context.addOperatorRegistry(new SGLRCompatLibrary(atermFactory));
 			jsglr_parser.init(context);
 			jsglr_parser_compat.init(context);
-		} else if ("libstrc".equals(component)) {
-			context.addOperatorRegistry(libstrc_compat.getOperatorRegistry());
-			libstrc_compat.init(context);
 		}
 	}
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/StringValuePrimitive.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/StringValuePrimitive.java	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/StringValuePrimitive.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -13,7 +13,7 @@
 	
 	private final String value;
 
-	protected StringValuePrimitive(String name, String value) {
+	public StringValuePrimitive(String name, String value) {
 		super(name, 0, 0);
 		this.value = value;
 	}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java	2009-08-04 12:14:08 UTC (rev 19806)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,53 +0,0 @@
-package org.strategoxt.lang.compat.libstratego_rtg_compat;
-
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class Main {
-	public static void init(Context context) {
-		// Nothing to init
-	}
-	
-	public static class strrtg_list_loop1_1_0 extends Strategy {
-		public static strrtg_list_loop1_1_0 instance = new strrtg_list_loop1_1_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-			if (current.getTermType() != IStrategoTerm.LIST)
-				return null;
-			
-			boolean success = false;			
-			IStrategoList list = (IStrategoList) current;
-			
-			for (int i = 0; i < list.size(); i++) {
-				IStrategoTerm term = list.get(i);
-				IStrategoTerm term2 = s.invoke(context, term);
-				if (term2 != null) success = true;
-			}
-			
-			return success ? current : null;
-		}
-	}
-
-	public static class strrtg_repeat_1_0 extends Strategy {
-		public static strrtg_repeat_1_0 instance = new strrtg_repeat_1_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-			IStrategoTerm result = current;
-			IStrategoTerm next = s.invoke(context, result);
-			
-			while (next != null) {
-				result = next;
-				next = s.invoke(context, result);
-			}
-
-			return result;
-		}
-	}
-}

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java (from rev 19806, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/Main.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -0,0 +1,53 @@
+package org.strategoxt.lang.compat.libstratego_rtg_compat;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class Main {
+	public static void init(Context context) {
+		// Nothing to init
+	}
+	
+	public static class strrtg_list_loop1_1_0 extends Strategy {
+		public static strrtg_list_loop1_1_0 instance = new strrtg_list_loop1_1_0();
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+			if (current.getTermType() != IStrategoTerm.LIST)
+				return null;
+			
+			boolean success = false;			
+			IStrategoList list = (IStrategoList) current;
+			
+			for (int i = 0; i < list.size(); i++) {
+				IStrategoTerm term = list.get(i);
+				IStrategoTerm term2 = s.invoke(context, term);
+				if (term2 != null) success = true;
+			}
+			
+			return success ? current : null;
+		}
+	}
+
+	public static class strrtg_repeat_1_0 extends Strategy {
+		public static strrtg_repeat_1_0 instance = new strrtg_repeat_1_0();
+		
+		@Override
+		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+			IStrategoTerm result = current;
+			IStrategoTerm next = s.invoke(context, result);
+			
+			while (next != null) {
+				result = next;
+				next = s.invoke(context, result);
+			}
+
+			return result;
+		}
+	}
+}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java	2009-08-04 12:14:08 UTC (rev 19806)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,30 +0,0 @@
-package org.strategoxt.lang.compat.libstratego_rtg_compat;
-
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class strrtg_list_loop1_1_0 extends Strategy {
-	public static strrtg_list_loop1_1_0 instance = new strrtg_list_loop1_1_0();
-	
-	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-		if (current.getTermType() != IStrategoTerm.LIST)
-			return null;
-		
-		boolean success = false;			
-		IStrategoList list = (IStrategoList) current;
-		
-		for (int i = 0; i < list.size(); i++) {
-			IStrategoTerm term = list.get(i);
-			IStrategoTerm term2 = s.invoke(context, term);
-			if (term2 != null) success = true;
-		}
-		
-		return success ? current : null;
-	}
-}
\ No newline at end of file

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java (from rev 19806, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_list_loop1_1_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -0,0 +1,30 @@
+package org.strategoxt.lang.compat.libstratego_rtg_compat;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class strrtg_list_loop1_1_0 extends Strategy {
+	public static strrtg_list_loop1_1_0 instance = new strrtg_list_loop1_1_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		if (current.getTermType() != IStrategoTerm.LIST)
+			return null;
+		
+		boolean success = false;			
+		IStrategoList list = (IStrategoList) current;
+		
+		for (int i = 0; i < list.size(); i++) {
+			IStrategoTerm term = list.get(i);
+			IStrategoTerm term2 = s.invoke(context, term);
+			if (term2 != null) success = true;
+		}
+		
+		return success ? current : null;
+	}
+}
\ No newline at end of file

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java	2009-08-04 12:14:08 UTC (rev 19806)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,26 +0,0 @@
-package org.strategoxt.lang.compat.libstratego_rtg_compat;
-
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class strrtg_repeat_1_0 extends Strategy {
-	public static strrtg_repeat_1_0 instance = new strrtg_repeat_1_0();
-	
-	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-		IStrategoTerm result = current;
-		IStrategoTerm next = s.invoke(context, result);
-		
-		while (next != null) {
-			result = next;
-			next = s.invoke(context, result);
-		}
-
-		return result;
-	}
-}
\ No newline at end of file

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java (from rev 19806, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat/strrtg_repeat_1_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -0,0 +1,25 @@
+package org.strategoxt.lang.compat.libstratego_rtg_compat;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class strrtg_repeat_1_0 extends Strategy {
+	public static strrtg_repeat_1_0 instance = new strrtg_repeat_1_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		IStrategoTerm result = current;
+		IStrategoTerm next = s.invoke(context, result);
+		
+		while (next != null) {
+			result = next;
+			next = s.invoke(context, result);
+		}
+
+		return result;
+	}
+}
\ No newline at end of file

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstratego_rtg_compat.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,53 +0,0 @@
-package org.strategoxt.lang.compat;
-
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class libstratego_rtg_compat {
-	public static void init(Context context) {
-		// Nothing to init
-	}
-	
-	public static class strrtg_list_loop1_1_0 extends Strategy {
-		public static strrtg_list_loop1_1_0 instance = new strrtg_list_loop1_1_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-			if (current.getTermType() != IStrategoTerm.LIST)
-				return null;
-			
-			boolean success = false;			
-			IStrategoList list = (IStrategoList) current;
-			
-			for (int i = 0; i < list.size(); i++) {
-				IStrategoTerm term = list.get(i);
-				IStrategoTerm term2 = s.invoke(context, term);
-				if (term2 != null) success = true;
-			}
-			
-			return success ? current : null;
-		}
-	}
-
-	public static class strrtg_repeat_1_0 extends Strategy {
-		public static strrtg_repeat_1_0 instance = new strrtg_repeat_1_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
-			IStrategoTerm result = current;
-			IStrategoTerm next = s.invoke(context, result);
-			
-			while (next != null) {
-				result = next;
-				next = s.invoke(context, result);
-			}
-
-			return result;
-		}
-	}
-}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java	2009-08-04 12:14:08 UTC (rev 19806)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,69 +0,0 @@
-package org.strategoxt.lang.compat.libstrc_compat;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-import org.strategoxt.lang.compat.StringValuePrimitive;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class Main {
-	
-	// TODO: libstrc_compat and libstratego_rtg_compat should be Stratego modules
-	//       with calls to primitives, and ideally they should get a different name
-	
-	private Main() {
-		// No instantiation
-	}
-	
-	public static void init(Context context) {
-		org.strategoxt.lang.compat.override.strc_compat.Main.init(context);
-	}
-	
-	public static AbstractStrategoOperatorRegistry getOperatorRegistry() {
-		return new OperatorRegistry();
-	}
-	
-	private static class OperatorRegistry extends AbstractStrategoOperatorRegistry {		
-		public OperatorRegistry() {
-			add(new StringValuePrimitive("VERSION_TERM", "x.y"));
-			add(new StringValuePrimitive("SVN_REVISION_TERM", "nnnn"));
-			add(new StringValuePrimitive("STRC_SYSTEM_LDFLAGS", ""));
-			add(new StringValuePrimitive("STRC_SYSTEM_CFLAGS", ""));
-		}
-
-		public String getOperatorRegistryName() {
-			return "libstrc_compat";
-		}		
-	}
-	
-	public static class pp_c_0_0 extends Strategy {
-		public static pp_c_0_0 instance = new pp_c_0_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-			throw new NotImplementedException(); // TODO: pp_c_0_0
-		}
-	}
-	
-	public static class pp_c_pretty_0_0 extends Strategy {
-		public static pp_c_pretty_0_0 instance = new pp_c_pretty_0_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-			throw new NotImplementedException(); // TODO: pp_c_pretty_0_0
-		}
-	}
-	
-	public static class strc_cgen_aterm_0_0 extends Strategy {
-		public static strc_cgen_aterm_0_0 instance = new strc_cgen_aterm_0_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-			throw new NotImplementedException(); // TODO: strc_cgen_aterm_0_0
-		}
-	}
-}

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java (from rev 19872, strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -0,0 +1,36 @@
+package org.strategoxt.lang.compat.libstrc_compat;
+
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.compat.StringValuePrimitive;
+
+/**
+ * Registers primitives for use by libstrc and configures
+ * the strc_compat overrides.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class Main {
+	
+	private Main() {
+		// No instantiation
+	}
+	
+	public static void init(Context context) {
+		context.addOperatorRegistry(new OperatorRegistry());
+		org.strategoxt.lang.compat.override.strc_compat.Main.init(context);
+	}
+	
+	private static class OperatorRegistry extends AbstractStrategoOperatorRegistry {		
+		public OperatorRegistry() {
+			add(new StringValuePrimitive("VERSION_TERM", "x.y"));
+			add(new StringValuePrimitive("SVN_REVISION_TERM", "nnnn"));
+			add(new StringValuePrimitive("STRC_SYSTEM_LDFLAGS", ""));
+			add(new StringValuePrimitive("STRC_SYSTEM_CFLAGS", ""));
+		}
+
+		public String getOperatorRegistryName() {
+			return "libstrc_compat";
+		}		
+	}
+}


Property changes on: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/Main.java
___________________________________________________________________
Added: svn:mergeinfo
   + /strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java:19806

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java	2009-08-04 12:14:08 UTC (rev 19806)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,20 +0,0 @@
-package org.strategoxt.lang.compat.libstrc_compat;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-import org.strategoxt.lang.compat.StringValuePrimitive;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class pp_c_0_0 extends Strategy {
-	public static pp_c_0_0 instance = new pp_c_0_0();
-	
-	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		throw new NotImplementedException(); // TODO: pp_c_0_0
-	}
-}
\ No newline at end of file

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java (from rev 19806, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_0_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -0,0 +1,21 @@
+package org.strategoxt.lang.compat.libstrc_compat;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+import org.strategoxt.lang.compat.StringValuePrimitive;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+ at SuppressWarnings("all")
+public class pp_c_0_0 extends Strategy {
+	public static pp_c_0_0 instance = new pp_c_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		throw new NotImplementedException("pp-c"); // TODO: pp_c_0_0
+	}
+}
\ No newline at end of file

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java	2009-08-04 12:14:08 UTC (rev 19806)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,20 +0,0 @@
-package org.strategoxt.lang.compat.libstrc_compat;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-import org.strategoxt.lang.compat.StringValuePrimitive;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class pp_c_pretty_0_0 extends Strategy {
-	public static pp_c_pretty_0_0 instance = new pp_c_pretty_0_0();
-	
-	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		throw new NotImplementedException(); // TODO: pp_c_pretty_0_0
-	}
-}

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java (from rev 19806, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/pp_c_pretty_0_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -0,0 +1,18 @@
+package org.strategoxt.lang.compat.libstrc_compat;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class pp_c_pretty_0_0 extends Strategy {
+	public static pp_c_pretty_0_0 instance = new pp_c_pretty_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		throw new NotImplementedException("pp-c-pretty"); // TODO: pp_c_pretty_0_0
+	}
+}

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java
===================================================================
--- strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java	2009-08-04 12:14:08 UTC (rev 19806)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,20 +0,0 @@
-package org.strategoxt.lang.compat.libstrc_compat;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-import org.strategoxt.lang.compat.StringValuePrimitive;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class strc_cgen_aterm_0_0 extends Strategy {
-	public static strc_cgen_aterm_0_0 instance = new strc_cgen_aterm_0_0();
-	
-	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		throw new NotImplementedException(); // TODO: strc_cgen_aterm_0_0
-	}
-}
\ No newline at end of file

Copied: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java (from rev 19806, strc-java/branches/one-file-per-strategy/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java)
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat/strc_cgen_aterm_0_0.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -0,0 +1,18 @@
+package org.strategoxt.lang.compat.libstrc_compat;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class strc_cgen_aterm_0_0 extends Strategy {
+	public static strc_cgen_aterm_0_0 instance = new strc_cgen_aterm_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		throw new NotImplementedException(); // TODO: strc_cgen_aterm_0_0
+	}
+}
\ No newline at end of file

Deleted: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java	2009-08-26 13:25:21 UTC (rev 19872)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/libstrc_compat.java	2009-08-27 08:08:56 UTC (rev 19873)
@@ -1,66 +0,0 @@
-package org.strategoxt.lang.compat;
-
-import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.lang.Context;
-import org.strategoxt.lang.Strategy;
-import org.strategoxt.lang.compat.override.strc_compat;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class libstrc_compat {
-	
-	private libstrc_compat() {
-		// No instantiation
-	}
-	
-	public static void init(Context context) {
-		strc_compat.init(context);
-	}
-	
-	public static AbstractStrategoOperatorRegistry getOperatorRegistry() {
-		return new OperatorRegistry();
-	}
-	
-	private static class OperatorRegistry extends AbstractStrategoOperatorRegistry {		
-		public OperatorRegistry() {
-			add(new StringValuePrimitive("VERSION_TERM", "x.y"));
-			add(new StringValuePrimitive("SVN_REVISION_TERM", "nnnn"));
-			add(new StringValuePrimitive("STRC_SYSTEM_LDFLAGS", ""));
-			add(new StringValuePrimitive("STRC_SYSTEM_CFLAGS", ""));
-		}
-
-		public String getOperatorRegistryName() {
-			return "libstrc_compat";
-		}		
-	}
-	
-	public static class pp_c_0_0 extends Strategy {
-		public static pp_c_0_0 instance = new pp_c_0_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-			throw new NotImplementedException(); // TODO: pp_c_0_0
-		}
-	}
-	
-	public static class pp_c_pretty_0_0 extends Strategy {
-		public static pp_c_pretty_0_0 instance = new pp_c_pretty_0_0();
-		
-		@Override
-		public IStrategoTerm invoke(Context context, IStrategoTerm current) {

(1048 diff lines omitted)


From m.dejonge at tudelft.nl  Thu Aug 27 11:34:41 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 27 Aug 2009 09:34:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19878 - MaartjeDeJonge
	- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr
Message-ID: <200908270934.n7R9Y9OW020128@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-08-27 09:34:41 +0000 (Thu, 27 Aug 2009)
New Revision: 19878

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19878&view=rev

Modified:
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParserHistory.java
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/SGLR.java

Log:
empty file exception

Changes:

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParserHistory.java	2009-08-27 09:33:40 UTC (rev 19877)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParserHistory.java	2009-08-27 09:34:41 UTC (rev 19878)
@@ -91,6 +91,12 @@
         if(indentHandler.lineMarginEnded())
             keepNewLinePoint(myParser, false);
     }
+    
+    public void keepInitialState(SGLR myParser) {        
+        IndentInfo newLinePoint= new IndentInfo(0, 0, 0);
+        newLinePoint.fillStackNodes(myParser.activeStacks);
+        newLinePoints.add(newLinePoint);
+    }
 
     private void keepToken(char currentToken) {
         recoverTokenStream[recoverTokenCount++] = currentToken;         

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/SGLR.java	2009-08-27 09:33:40 UTC (rev 19877)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/SGLR.java	2009-08-27 09:34:41 UTC (rev 19878)
@@ -344,7 +344,8 @@
         columnNumber = 0;
         lineNumber = 1;        
         currentInputStream = new PushbackInputStream(fis, 1024);
-        acceptingStack = null;        
+        acceptingStack = null; 
+        history.keepInitialState(this);
     }    
 
     private void reportInvalidToken(Frame singlePreviousStack)



From L.C.L.Kats at tudelft.nl  Thu Aug 27 14:33:05 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 27 Aug 2009 12:33:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19879 - LennartKats -
	in strc-java/trunk: java tools trans
Message-ID: <200908271232.n7RCWX59022515@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-27 12:33:04 +0000 (Thu, 27 Aug 2009)
New Revision: 19879

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19879&view=rev

Modified:
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/tools/strj-jar
   strc-java/trunk/trans/java-optimize.str

Log:
Tweaks to javac flags (which needs more memory now, unlike ecj) and optimization.

Changes:

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-08-27 09:34:41 UTC (rev 19878)
+++ strc-java/trunk/java/Makefile.am	2009-08-27 12:33:04 UTC (rev 19879)
@@ -41,7 +41,7 @@
 
 SPOOFAX=../../../spoofax/trunk/spoofax
 CLASSPATH=runtime:lib:compiler:spoofax-libs.jar:.
-JAVACFLAGS=-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn -d bin
+JAVACFLAGS=-J-Xmx512m -J-Xms300m -J-server -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn -d bin
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 
 STRJFLAGS=--library --verbose 3 -O 3
@@ -150,6 +150,7 @@
 ###### COMPILER #######
 
 compiler/org/strategoxt/strj/Main.java : ../trans/strj.ctree ../trans/strj
+	if ! which ecj >/dev/null; then echo "WARNING: ecj is not installed; using the (much) slower javac compiler instead" >&2
 	../trans/strj -i $< -o $@ -p org.strategoxt.strj --verbose 3 -la stratego-lib -la stratego-xtc -la stratego-gpp -la org.strategoxt.libstrc -la org.strategoxt.libjava_front -O 3 # -D DEFAULT_XTC_REPOSITORY="\"$(REPOSITORY)\""
 
 ###### EXTERNAL #######

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2009-08-27 09:34:41 UTC (rev 19878)
+++ strc-java/trunk/tools/strj-jar	2009-08-27 12:33:04 UTC (rev 19879)
@@ -7,21 +7,26 @@
 CLASSPATH=strategoxt.jar
 JAR=`if which fastjar &>/dev/null; then echo fastjar; else echo jar; fi`
 JAVAC=`if which ecj &>/dev/null; then echo ecj; else echo javac; fi`
-JAVACFLAGS1="-source 5 -nowarn"
-JAVACFLAGS2="-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC"
+if [ "$JAVAFLAGS" == "" ]; then
+  JAVACFLAGS="-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC"
+fi
 
 [ "$TEMP" != "" ] || TEMP=/tmp
 TEMPDIR=$TEMP/strj-jar-`date +'%N'`
 
 if which strj-jar &>/dev/null; then
-  CLASSPATH=$(dirname $(which strj-jar))/../share/strc-java/strategoxt.jar
+  CLASSPATH=$(cd $(dirname $(which strj-jar))/..; pwd)/share/strc-java/strategoxt.jar
 fi
 
 ## PARAMETERS
 
 while P=$1; shift; do
   if [ "$P" == "-cp" ]; then
-    CLASSPATH="$1"
+    if [ -e $CLASSPATH ]; then
+      CLASSPATH="$1:$CLASSPATH"
+    else
+      CLASSPATH="$1"
+    fi
     shift
   elif [ "$P" == "-p" ]; then
     echo "Warning: ignoring option -p; currently unused" >&2
@@ -62,8 +67,8 @@
 ## COMPILATION
 
 ( mkdir -p $TEMPDIR
-  echo $JAVAC $JAVACFLAGS1 -cp $CLASSPATH `basename $INPUT`
-  $JAVAC $JAVACFLAGS1 $JAVACFLAGS2 -cp $CLASSPATH $INPUT -d $TEMPDIR) || exit 1
+  echo $JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH `basename $INPUT`
+  $JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH $INPUT -d $TEMPDIR) || exit 1
 
 ## JARRING
 

Modified: strc-java/trunk/trans/java-optimize.str
===================================================================
--- strc-java/trunk/trans/java-optimize.str	2009-08-27 09:34:41 UTC (rev 19878)
+++ strc-java/trunk/trans/java-optimize.str	2009-08-27 12:33:04 UTC (rev 19879)
@@ -43,6 +43,14 @@
       e2' := <alltd((ExprName(Id(x)) -> e1))> e2
   
   optimize-assignments :
+    bstm* |[ x = e1; y = e2;  bstm* ]| ->
+    bstm* |[ x = e1; y = e2'; bstm* ]|
+    where
+      not(x := y)
+    ; <has-no-side-effects> e1
+    ; e2' := <sometd((ExprName(Id(x)) -> e1))> e2
+  
+  optimize-assignments :
     bstm* |[ x = y; x = z; bstm* ]| ->
     bstm* |[        x = z; bstm* ]|
   



From m.dejonge at tudelft.nl  Thu Aug 27 17:09:40 2009
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 27 Aug 2009 15:09:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19880 - MaartjeDeJonge
	- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr
Message-ID: <200908271509.n7RF98wg025120@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2009-08-27 15:09:40 +0000 (Thu, 27 Aug 2009)
New Revision: 19880

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19880&view=rev

Modified:
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParserHistory.java
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/RecoveryConnector.java
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/StructureSkipper.java

Log:
fixed some todo issues

Changes:

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParserHistory.java	2009-08-27 12:33:04 UTC (rev 19879)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParserHistory.java	2009-08-27 15:09:40 UTC (rev 19880)
@@ -42,8 +42,7 @@
         newLinePoints=new ArrayList<IndentInfo>();        
         reset();
     }
-    
-    //TODO: call from parser
+     
     public void reset(){
         newLinePoints.clear();
         recoverTokenStream = new char[200];
@@ -296,25 +295,7 @@
             return;
         newLinePoints.remove(newLinePoints.size()-1); //remove line of error detection
         newLinePoints.addAll(recoverNewLinePoints);        
-    }
-    /*
-    //TODO: StartSkip as index
-    public ArrayList<IndentInfo> getRecentHistory(int fromTokensSeen, int toTokensSeen){
-        ArrayList<IndentInfo> recentHistory=new ArrayList<IndentInfo>();
-        int recentStart=0;
-        int recentEnd=newLinePoints.size();
-        for (int i = newLinePoints.size()-1; i > 0; i--) {
-            int toksSeen=newLinePoints.get(i).getTokensSeen();
-            if(toksSeen>=toTokensSeen)
-                recentEnd=i;
-            if(toksSeen<=fromTokensSeen){
-                recentStart=i;
-                break;
-            }
-        }        
-        recentHistory.addAll(newLinePoints.subList(recentStart, recentEnd));
-        return recentHistory;
-    }*/
+    }    
 
     public ArrayList<IndentInfo> getLinesFrom(int startIndex) {
         ArrayList<IndentInfo> recentHistory=new ArrayList<IndentInfo>();

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/RecoveryConnector.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/RecoveryConnector.java	2009-08-27 12:33:04 UTC (rev 19879)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/RecoveryConnector.java	2009-08-27 15:09:40 UTC (rev 19880)
@@ -45,16 +45,7 @@
         return bpSuggestAbsolute;
     }
 
-    //TODO: real BP suggestions
-    private Map<Integer, char[]> getBridges() {     
-        
-        /*
-        Map<Integer, char[]> bpSuggestions = new HashMap<Integer, char[]>();
-        //bpSuggestions.put(0, new char[]{'(', '('});
-        bpSuggestions.put(71, new char[]{'}'});
-        bpSuggestions.put(100, new char[]{'}'});        
-        return bpSuggestions;
-        */
+    private Map<Integer, char[]> getBridges() {
         if (bpResult != null) {
             return bpResult.getSuggestions();
         }
@@ -77,11 +68,7 @@
 
     private void doRecoverSteps() throws IOException {
         active=true;
-        boolean skipSucceeded = skipRecovery.selectErroneousFragment();
-        
-        // TODO: Handle empty and single-line files correctly
-        // TODO: Should the following statements be evaluated if skipSucceeded == false?
-        
+        boolean skipSucceeded = skipRecovery.selectErroneousFragment(); //decides whether whitespace parse makes sense
         mySGLR.acceptingStack=null;
         long startSkip=System.currentTimeMillis();
         String errorFragment = skipRecovery.getErrorFragment();
@@ -92,8 +79,7 @@
         //System.err.print(errorFragment);
         mySGLR.activeStacks.clear();
         //BRIDGE REPAIR
-        if(useBridgeParser){
-            
+        if(useBridgeParser){            
             tryBridgeRepair(errorFragment);
             if(recoverySucceeded()){
                 Tools.debug("Bridge Repair Succeeded");
@@ -136,8 +122,8 @@
                 //System.err.print("******************* AS-succeeded");
             }
             else{
-                Tools.debug("Enforcing Accepting Stack - Failed");
-                Tools.debug("************** AS-Failed");
+                Tools.debug("Enforcing Accepting Stack - Failed"); 
+              //System.err.print("******************* AS-Failed");
             }
         }
         active = false;
@@ -147,8 +133,7 @@
         boolean hasSucceeded = (mySGLR.activeStacks.size()>0 || mySGLR.acceptingStack!=null);
         /*
         if(hasSucceeded){           
-            ArrayList<IndentInfo> recoverNewLinePoints = new ArrayList<IndentInfo>();
-            //TODO: collect recover lines during continueParsing
+            ArrayList<IndentInfo> recoverNewLinePoints = new ArrayList<IndentInfo>();            
             IndentInfo currentStatus = new IndentInfo(mySGLR.lineNumber, getHistory().getTokenIndex(), mySGLR.getIndentHandler().getIndentValue());
             recoverNewLinePoints.add(currentStatus);
             getHistory().addRecoverLines(recoverNewLinePoints);
@@ -177,8 +162,7 @@
     }
 
     private String repairBridges(String errorFragment) {
-        try {
-            // TODO call recover(errorFragement, startSymbol) instead
+        try {            
             bpResult = null;
             bpResult = recoveryParser.recover(errorFragment);
             return bpResult.getResult();
@@ -222,9 +206,8 @@
 
     
     
-    private void parseAsLayout() throws IOException { //TODO: EOF 
-        //Tools.debug("As Whitespace: " + (char)mySGLR.currentToken);
-        if(isLayoutCharacter((char)mySGLR.currentToken))
+    private void parseAsLayout() throws IOException {
+        if(isLayoutCharacter((char)mySGLR.currentToken) || mySGLR.currentToken==SGLR.EOF)
             mySGLR.doParseStep();
         else{
             mySGLR.currentToken=' ';
@@ -233,7 +216,7 @@
     }
     
     public static boolean isLayoutCharacter(char aChar) {
-        // TODO: Move this to the parse table class; only it truely can now layout characters
+        // TODO: Move this to the parse table class; only it truly can now layout characters
         return aChar==' ' || aChar == '\t' || aChar=='\n';
     }
 
@@ -244,8 +227,7 @@
         return indexFragment;
     }
 
-    public boolean isActive() {
-        // TODO Auto-generated method stub
+    public boolean isActive() {        
         return active;
     }
 

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/StructureSkipper.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/StructureSkipper.java	2009-08-27 12:33:04 UTC (rev 19879)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/StructureSkipper.java	2009-08-27 15:09:40 UTC (rev 19880)
@@ -52,7 +52,7 @@
     public void clear() {
         indexPrevChild=-1;
     }
-    //TODO: refactor - fill endSkip in class 
+    
     public StructureSkipSuggestion getErroneousPrefix() throws IOException{
         getHistory().setTokenIndex(getFailureLine().getTokensSeen());
         IndentInfo nextLine = viewNextLine(getFailureLine());
@@ -407,11 +407,8 @@
             nextLine=skipLine(nextLine);
         }         
         return nextLine; //EOF
-    } 
+    }
     
-    //TODO: Level select after zoom (See priorSibling)
-    //TODO: refactor
-    
     public ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(StructureSkipSuggestion prevRegion){
         ArrayList<StructureSkipSuggestion> result = new ArrayList<StructureSkipSuggestion>();
         if(!prevRegion.isPreviousRegion() || (prevRegion.getIndexHistoryEnd()-prevRegion.getIndexHistoryStart() < 3)){
@@ -560,17 +557,8 @@
             return false;
         if(nextLine.getIndentValue() < currLine.getIndentValue())
             return true;        
-        return true;//TODO: try parse line, and check closing?
+        return true;//Alternative (more precise): try parse line, and check if closing occurs?
     }
-
-    /*
-    private IndentInfo viewNextLine() throws IOException {
-        int currentLocation = getHistory().getTokenIndex()-1;
-        IndentInfo nextLine = skipLine(-1);
-        getHistory().setTokenIndex(currentLocation);
-        return nextLine;
-    } 
-    */  
     
     private IndentInfo viewNextLine(IndentInfo currLine) throws IOException {
         int currentLocation = getHistory().getTokenIndex()-1;
@@ -581,7 +569,6 @@
     }   
 
     private IndentInfo skipLine(IndentInfo line) throws IOException {
-        // FIXME: Check if this is alright - I added a Math.max(0, _) here to fix the case where tokenIndex == -1 (LK)
         getHistory().setTokenIndex(Math.max(0, line.getTokensSeen()-1));
         int newLineNumber=line.getLineNumber();
         skipIndentHandler.setInLeftMargin(false);



From L.C.L.Kats at tudelft.nl  Thu Aug 27 17:15:31 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 27 Aug 2009 15:15:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19881 - LennartKats -
	strategoxt/trunk/stratego-libraries/lib/spec/util/config
	strategoxt/trunk/strc-core/lib/stratego/strc/c
	strc-java/trunk/META-INF
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
	strc-java/trunk/trans
Message-ID: <200908271515.n7RFF0mZ025180@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-27 15:15:31 +0000 (Thu, 27 Aug 2009)
New Revision: 19881

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19881&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/util/config/common.str
   strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c-ng.str
   strc-java/trunk/META-INF/MANIFEST.MF
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/trans/s2j.str

Log:
Added new if-java-platform and if-c-platform strategies for some degree of conditional compilation.

Changes:

Modified: strategoxt/trunk/stratego-libraries/lib/spec/util/config/common.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/util/config/common.str	2009-08-27 15:09:40 UTC (rev 19880)
+++ strategoxt/trunk/stratego-libraries/lib/spec/util/config/common.str	2009-08-27 15:15:31 UTC (rev 19881)
@@ -90,3 +90,16 @@
   post-extend-config =
     ?(key, val)
     ; <table-put> ("config", key, <conc> (<get-config <+ ![]> key, val))
+  
+  /**
+   * Evaluates a strategy f if and only if the program is compiled to Java.
+   */
+  if-java-platform(s) = // implemented by the compiler
+    id + s
+  
+  /**
+   * Evaluates a strategy f if and only if the program is compiled to C.
+   */
+  if-c-platform(s) = // implemented by the compiler
+    id + s
+

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c-ng.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c-ng.str	2009-08-27 15:09:40 UTC (rev 19880)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c-ng.str	2009-08-27 15:15:31 UTC (rev 19881)
@@ -440,14 +440,21 @@
 rules 
 
   translate-strat(|S,F) =
-    TranslateStrat(|S,F)
+    TranslateStratPlatform(|S,F)
+    <+ TranslateStrat(|S,F)
     <+ dbg(|"*** translate-strat undefined: "); fail
 
   TranslateStrat(|S,F) :
-    Id -> stm|[ goto ~id:S; ]|
+    Id() -> stm|[ goto ~id:S; ]|
 
   TranslateStrat(|S,F) :
-    Fail -> stm|[ goto ~id:F; ]|
+    Fail() -> stm|[ goto ~id:F; ]|
+  
+  TranslateStratPlatform(|S,F) :
+    CallT(SVar("if_java_platform_1_0"), [s], []) -> stm|[ goto ~id:S; ]|
+  
+  TranslateStratPlatform(|S,F) :
+    CallT(SVar("if_c_platform_1_0"), [s], []) -> <TranslateStrat(|S,F)> s
 
   TranslateStrat(|S,F) :
     |[ {x* : s} ]| -> 

Modified: strc-java/trunk/META-INF/MANIFEST.MF
===================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	2009-08-27 15:09:40 UTC (rev 19880)
+++ strc-java/trunk/META-INF/MANIFEST.MF	2009-08-27 15:15:31 UTC (rev 19881)
@@ -6,7 +6,17 @@
 Export-Package: org.strategoxt,
  org.strategoxt.lang,
  org.strategoxt.lang.compat,
- org.strategoxt.lang.parallel
+ org.strategoxt.lang.parallel,
+ org.strategoxt.libjava_front,
+ org.strategoxt.libstratego_aterm,
+ org.strategoxt.libstratego_gpp,
+ org.strategoxt.libstratego_lib,
+ org.strategoxt.libstratego_rtg,
+ org.strategoxt.libstratego_sdf,
+ org.strategoxt.libstratego_sglr,
+ org.strategoxt.libstratego_tool_doc,
+ org.strategoxt.libstratego_xtc,
+ org.strategoxt.libstrc
 Require-Bundle: org.spoofax.aterm,
  org.spoofax.interpreter.core;bundle-version="0.3.13",
  org.spoofax.interpreter.adapter.aterm;bundle-version="0.3.11",

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-27 15:09:40 UTC (rev 19880)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-27 15:15:31 UTC (rev 19881)
@@ -1,15 +1,10 @@
 package org.strategoxt.lang.compat;
 
 import java.util.HashSet;
-import java.util.Map;
 import java.util.Set;
 
 import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
-import org.spoofax.interpreter.library.ssl.SSLLibrary;
-import org.spoofax.interpreter.library.ssl.StrategoHashMap;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.compat.override.jsglr_parser.jsglr_parser;
 import org.strategoxt.lang.compat.override.jsglr_parser_compat.jsglr_parser_compat;
@@ -57,7 +52,6 @@
 		if ("libstratego_lib".equals(component)) {
 			context.addOperatorRegistry(new CompatLibrary());
 			performance_tweaks.init(context);
-			initConfig();
 			xtc_compat.init(context); // also deals with native calls for libstratego-lib
 		} else if ("libstratego_sglr".equals(component)) {
 			WrappedATermFactory atermFactory = new WrappedATermFactory();
@@ -67,28 +61,4 @@
 			jsglr_parser_compat.init(context);
 		}
 	}
-
-	private void initConfig() {
-		ITermFactory factory = context.getFactory();
-		Map<IStrategoTerm, IStrategoTerm> config = getConfigTable();
-		
-		config.put(factory.makeString("JAVA_PLATFORM"), factory.makeInt(1));
-	}
-
-	private StrategoHashMap getConfigTable() {
-		ITermFactory factory = context.getFactory();
-		SSLLibrary library = (SSLLibrary) context.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
-		if (library == null) throw new IllegalStateException("Standard operator registry not found");
-		StrategoHashMap allTables = library.getTableTable();
-		
-		IStrategoTerm configRef = allTables.get(factory.makeString("config"));
-		if (configRef == null) {
-			StrategoHashMap result = new StrategoHashMap(117, 75);
-			configRef = factory.makeAppl(factory.makeConstructor("Hashtable", 1), result);
-			allTables.put(factory.makeString("config"), configRef);
-			return result;
-		} else {
-			return (StrategoHashMap) configRef.getSubterm(0);
-		}
-	}
 }

Modified: strc-java/trunk/trans/s2j.str
===================================================================
--- strc-java/trunk/trans/s2j.str	2009-08-27 15:09:40 UTC (rev 19880)
+++ strc-java/trunk/trans/s2j.str	2009-08-27 15:15:31 UTC (rev 19881)
@@ -185,7 +185,8 @@
      }
   ]|
   with 
-      alltd(JavaTranslate)
+      <list-loop(try(JavaTranslate))> ops
+    ; <list-loop(try(JavaTranslate))> defs
     ; imports       := <java-imports>
     ; import-inits  := <java-init-imports>
     ; x_name        := <MainClassName>
@@ -559,6 +560,12 @@
   /** @type Id -> Stm */
   translate-Fail :
     Fail() -> |[ if (TRUE) break Fail; ]| // (avoid unreachable stm error)
+  
+  translate-Platform :
+    CallT(SVar("if_java_platform_1_0"), [s], []) -> <translate-strategy> s
+  
+  translate-Platform :
+    CallT(SVar("if_c_platform_1_0"), [s], []) ->  Empty()
 
   translate-Override :
     Override() ->
@@ -629,7 +636,8 @@
 
   translate-strategy = 
        ( 
-       translate-CallT-dynamic
+       translate-Platform
+    <+ translate-CallT-dynamic
     <+ translate-CallT
     <+ translate-Build
     <+ translate-Seq



From L.C.L.Kats at tudelft.nl  Thu Aug 27 17:39:05 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 27 Aug 2009 15:39:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19882 - LennartKats -
	in strc-java/trunk/java: . runtime/org/strategoxt/lang
	runtime/org/strategoxt/lang/compat/override
Message-ID: <200908271538.n7RFcYbB025380@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-27 15:39:05 +0000 (Thu, 27 Aug 2009)
New Revision: 19882

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19882&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/TermWrapperException.java
Modified:
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str

Log:
- Added a new primitive to speed up Aster programs a bit
- Build fixes

Changes:

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-08-27 15:15:31 UTC (rev 19881)
+++ strc-java/trunk/java/Makefile.am	2009-08-27 15:39:05 UTC (rev 19882)
@@ -150,7 +150,7 @@
 ###### COMPILER #######
 
 compiler/org/strategoxt/strj/Main.java : ../trans/strj.ctree ../trans/strj
-	if ! which ecj >/dev/null; then echo "WARNING: ecj is not installed; using the (much) slower javac compiler instead" >&2
+	if ! which ecj >/dev/null; then echo "WARNING: ecj is not installed; using the (much) slower javac compiler instead" >&2; fi
 	../trans/strj -i $< -o $@ -p org.strategoxt.strj --verbose 3 -la stratego-lib -la stratego-xtc -la stratego-gpp -la org.strategoxt.libstrc -la org.strategoxt.libjava_front -O 3 # -D DEFAULT_XTC_REPOSITORY="\"$(REPOSITORY)\""
 
 ###### EXTERNAL #######

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java	2009-08-27 15:39:05 UTC (rev 19882)
@@ -0,0 +1,75 @@
+package org.strategoxt.lang;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SRTS_EXT_newint_0_0 extends Strategy {
+	public static SRTS_EXT_newint_0_0 instance = new SRTS_EXT_newint_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		return new UniqueValue();
+	}
+	
+	private static final class UniqueValue implements IStrategoInt {
+		
+		private static final AtomicInteger counter = new AtomicInteger();
+		
+		private final int value = counter.incrementAndGet();
+
+		public int intValue() {
+			return value;
+		}
+
+		public IStrategoTerm[] getAllSubterms() {
+			return Term.NO_TERMS;
+		}
+
+		public IStrategoList getAnnotations() {
+			return null;
+		}
+
+		public int getStorageType() {
+			return IMMUTABLE;
+		}
+
+		public IStrategoTerm getSubterm(int index) {
+			return null;
+		}
+
+		public int getSubtermCount() {
+			return 0;
+		}
+
+		public int getTermType() {
+			return INT;
+		}
+
+		public void prettyPrint(ITermPrinter pp) {
+			pp.print(String.valueOf(value));
+		}
+
+		public boolean match(IStrategoTerm second) {
+			return second == this;
+		}
+		
+		@Override
+		public boolean equals(Object obj) {
+			return obj == this;
+		}
+		
+		@Override
+		public int hashCode() {
+			// Always different from basic stratego int hash
+			return (449 * value ^ 7841) + 1;
+		}
+		
+	}
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/TermWrapperException.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/TermWrapperException.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/TermWrapperException.java	2009-08-27 15:39:05 UTC (rev 19882)
@@ -0,0 +1,14 @@
+package org.strategoxt.lang;
+
+import org.spoofax.interpreter.adapter.aterm.WrapperException;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class TermWrapperException extends WrapperException {
+	private static final long serialVersionUID = 5194285844333201169L;
+
+	public TermWrapperException(String message) {
+		super(message);
+	}
+}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-08-27 15:15:31 UTC (rev 19881)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-08-27 15:39:05 UTC (rev 19882)
@@ -44,6 +44,11 @@
   override filter(s) =
     SRTS-EXT-filter(s)
 
+  extend newname =
+    ?"@"; SRTS-EXT-newint
+
   external SRTS-EXT-crush(nul, sum, s|)
   
   external SRTS-EXT-filter(s|)
+
+  external SRTS-EXT-newint(|)



From L.C.L.Kats at tudelft.nl  Thu Aug 27 17:41:55 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 27 Aug 2009 15:41:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19883 - LennartKats -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
	spoofax-imp/trunk/org.strategoxt.imp.feature
	spoofax-imp/trunk/org.strategoxt.imp.generator
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
Message-ID: <200908271541.n7RFfNIl025442@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-27 15:41:55 +0000 (Thu, 27 Aug 2009)
New Revision: 19883

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19883&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java

Log:
- Updated projects for new "one file per strategy" STRJ
- Added STRJ to the feature project

Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-27 15:39:05 UTC (rev 19882)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-27 15:41:55 UTC (rev 19883)
@@ -16,12 +16,12 @@
 make-permissive : make-permissive.str $(STRS)
 	strc -i $< -m main-make-permissive $(STRCFLAGS)
 
-java bin/make_permissive.java : make-permissive.str $(STRS)
-	[ -e bin ] || mkdir bin
-	strj -i $< -o bin/make_permissive.java -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
+java bin/org/strategoxt/permissivegrammars/make_permissive.java : make-permissive.str $(STRS)
+	[ -e bin/org/strategoxt/permissivegrammars ] || mkdir -p bin/org/strategoxt/permissivegrammars
+	strj -i $< -o $@ -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
 
-jar bin/make_permissive.jar : bin/make_permissive.java
-	strj-jar -i $<
+jar bin/org/strategoxt/permissivegrammars/make_permissive.jar : bin/org/strategoxt/permissivegrammars/make_permissive.java
+	strj-jar -i $< -cp bin
 	     
 make-permissive.str : $(ASTRS) syntax/Stratego-Attributes-Sdf2.tbl syntax/Comments.pp.af
 	aster --verbose 2 -i $(ASTRS) -I syntax

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-08-27 15:39:05 UTC (rev 19882)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2009-08-27 15:41:55 UTC (rev 19883)
@@ -180,10 +180,10 @@
          unpack="false"/>
 
    <plugin
-         id="org.strategoxt.strcjava"
+         id="org.strategoxt.strj"
          download-size="0"
          install-size="0"
-         version="0.0.0"
+         version="0.1.0"
          unpack="false"/>
 
 </feature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-27 15:39:05 UTC (rev 19882)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-27 15:41:55 UTC (rev 19883)
@@ -75,7 +75,7 @@
 	        -la java-front --library -p org.strategoxt.imp.generator $(STRCSTFU)
 
 lib/sdf2imp.jar : src-gen/org/strategoxt/imp/generator/sdf2imp.java
-	strj-jar -i $< -o $@ -p org.strategoxt.imp.generator
+	strj-jar -i $< -o $@ -p org.strategoxt.imp.generator -cp src-gen
 
 syntax : $(SYNTAX)
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-27 15:39:05 UTC (rev 19882)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-27 15:41:55 UTC (rev 19883)
@@ -40,12 +40,12 @@
     with
       output := <permissive-grammar-target>;
       args   := ["-i", input, "-o", output];
-      if <get-config> "JAVA_PLATFORM" then
+      if-java-platform(
         <call> ("org.strategoxt.permissivegrammars.make-permissive.main-make-permissive", args)
-      else
-        // FIXME: should we even bother making make-permissive an xtc executable?
+      );
+      if-c-platform(  // FIXME: should we even bother making make-permissive an xtc executable?
         <call> ("make-permissive", args)
-      end
+      )
     <+
       warn(|"Could not create permissive grammar using make-permissive");
       output := input

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-27 15:39:05 UTC (rev 19882)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-27 15:41:55 UTC (rev 19883)
@@ -10,7 +10,6 @@
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.strategoxt.libstratego_lib;
 import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
 import org.strategoxt.imp.runtime.Debug;
@@ -20,6 +19,8 @@
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.lang.compat.SSL_EXT_java_call;
+import org.strategoxt.libstratego_lib.dr_scope_all_end_0_0;
+import org.strategoxt.libstratego_lib.dr_scope_all_start_0_0;
 import org.strategoxt.permissivegrammars.make_permissive;
 
 /**
@@ -107,7 +108,7 @@
 		
 		agent.clearLog();
 		agent.setWorkingDir(path);
-		libstratego_lib.dr_scope_all_start_0_0.instance.invoke(context, input);
+		dr_scope_all_start_0_0.instance.invoke(context, input);
 		
 		try {
 			Debug.startTimer();
@@ -119,7 +120,7 @@
 			return null;
 		} finally {
 			Debug.stopTimer("Invoked descriptor builder for " + mainFile.getName());
-			libstratego_lib.dr_scope_all_end_0_0.instance.invoke(context, input);
+			dr_scope_all_end_0_0.instance.invoke(context, input);
 		}
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-27 15:39:05 UTC (rev 19882)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-27 15:41:55 UTC (rev 19883)
@@ -21,7 +21,6 @@
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.ide.IDE;
-import org.strategoxt.libstratego_lib;
 import org.strategoxt.imp.generator.sdf2imp;
 import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
 import org.strategoxt.imp.runtime.Environment;
@@ -111,7 +110,7 @@
 		try {
 			agent.setWorkingDir(project.getLocation().toOSString());
 			try {
-				String jar1 = libstratego_lib.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+				String jar1 = org.strategoxt.libstratego_lib.Main.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 				String jar2 = make_permissive.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 				sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "-jar", jar1, jar2);
 			} catch (StrategoExit e) {



From L.C.L.Kats at tudelft.nl  Fri Aug 28 10:05:55 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 28 Aug 2009 08:05:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19884 - LennartKats -
	in strc-java/trunk: java/runtime/org/strategoxt/lang/compat tools
Message-ID: <200908280805.n7S85NkU005457@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-28 08:05:55 +0000 (Fri, 28 Aug 2009)
New Revision: 19884

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19884&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
   strc-java/trunk/tools/strj-jar

Log:
Fixes to support new package name structure.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-27 15:41:55 UTC (rev 19883)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-28 08:05:55 UTC (rev 19884)
@@ -123,12 +123,10 @@
 		Strategy cached = invocationCache.get(className);
 		if (cached != null) return cached;
 
-		String innerClassName = toInnerClassName(className);
-
 		try {
 			Class<?> library;
 			try {
-				library = findClass(toStrategoName(innerClassName) + "_0_0");
+				library = findClass(toStrategoName(className) + "_0_0");
 				
 				Field instance = library.getField("instance");
 
@@ -182,11 +180,6 @@
 		}
 	}
 	
-	private static String toInnerClassName(String className) {
-		int lastDot = className.lastIndexOf('.');
-		return className.substring(0, lastDot) + "$" + className.substring(lastDot + 1);
-	}
-	
 	private static String toStrategoName(String className) {
 		StringBuilder result = new StringBuilder();
 		String[] parts = className.split("\\.");
@@ -209,6 +202,7 @@
 			result.append('.');
 			result.append(parts[i]);
 		}
+		result.append(".Main");
 		
 		return result.toString();
 	}

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2009-08-27 15:41:55 UTC (rev 19883)
+++ strc-java/trunk/tools/strj-jar	2009-08-28 08:05:55 UTC (rev 19884)
@@ -29,7 +29,7 @@
     fi
     shift
   elif [ "$P" == "-p" ]; then
-    echo "Warning: ignoring option -p; currently unused" >&2
+    echo "Warning: ignoring option -p (currently unused)" >&2
     PACKAGE="$1" # currently unused
     shift
   elif [ "$P" == "-i" ]; then
@@ -67,8 +67,8 @@
 ## COMPILATION
 
 ( mkdir -p $TEMPDIR
-  echo $JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH `basename $INPUT`
-  $JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH $INPUT -d $TEMPDIR) || exit 1
+  echo $JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH `dirname $INPUT`/\*.java -d \$TEMPDIR
+  $JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH `dirname $INPUT`/*.java -d $TEMPDIR) || exit 1
 
 ## JARRING
 
@@ -81,7 +81,7 @@
 ATTACHMENTS=`ls $INPUTDIR | grep -vE '^.*\.(java|jar|astr|str|meta|dep|c|lo|o)$' | sed "s!^!-C $INPUTDIR !"` \
   || (echo "Illegal input file name: $INPUT">&2; exit 1)
 
-echo $JAR cf $OUTPUT -C . . $ATTACHMENTS
+echo $JAR cf $OUTPUT -C \$TEMPDIR . $ATTACHMENTS
 $JAR cf $OUTPUT -C $TEMPDIR . $ATTACHMENTS
 RET=$?
 



From L.C.L.Kats at tudelft.nl  Fri Aug 28 10:06:38 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 28 Aug 2009 08:06:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19885 - LennartKats -
	in sglr-recovery/trunk: permissive-grammars/trans/make-permissive
	recovery-runtime/.settings recovery-runtime/src/compare
Message-ID: <200908280806.n7S865x8005462@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-28 08:06:38 +0000 (Fri, 28 Aug 2009)
New Revision: 19885

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19885&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
   sglr-recovery/trunk/recovery-runtime/.settings/org.eclipse.jdt.core.prefs
   sglr-recovery/trunk/recovery-runtime/src/compare/StrategoCostFunction.java

Log:


Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-28 08:05:55 UTC (rev 19884)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-28 08:06:38 UTC (rev 19885)
@@ -20,8 +20,8 @@
 	[ -e bin/org/strategoxt/permissivegrammars ] || mkdir -p bin/org/strategoxt/permissivegrammars
 	strj -i $< -o $@ -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
 
-jar bin/org/strategoxt/permissivegrammars/make_permissive.jar : bin/org/strategoxt/permissivegrammars/make_permissive.java
-	strj-jar -i $< -cp bin
+jar bin/make_permissive.jar : bin/org/strategoxt/permissivegrammars/make_permissive.java
+	strj-jar -i $< -o bin/make_permissive.jar -cp bin
 	     
 make-permissive.str : $(ASTRS) syntax/Stratego-Attributes-Sdf2.tbl syntax/Comments.pp.af
 	aster --verbose 2 -i $(ASTRS) -I syntax

Modified: sglr-recovery/trunk/recovery-runtime/.settings/org.eclipse.jdt.core.prefs
===================================================================
--- sglr-recovery/trunk/recovery-runtime/.settings/org.eclipse.jdt.core.prefs	2009-08-28 08:05:55 UTC (rev 19884)
+++ sglr-recovery/trunk/recovery-runtime/.settings/org.eclipse.jdt.core.prefs	2009-08-28 08:06:38 UTC (rev 19885)
@@ -1,12 +1,12 @@
-#Fri Feb 27 10:40:19 CET 2009
+#Thu Aug 20 13:53:27 CEST 2009
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.6
+org.eclipse.jdt.core.compiler.compliance=1.5
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.debug.sourceFile=generate
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.6
+org.eclipse.jdt.core.compiler.source=1.5

Modified: sglr-recovery/trunk/recovery-runtime/src/compare/StrategoCostFunction.java
===================================================================
--- sglr-recovery/trunk/recovery-runtime/src/compare/StrategoCostFunction.java	2009-08-28 08:05:55 UTC (rev 19884)
+++ sglr-recovery/trunk/recovery-runtime/src/compare/StrategoCostFunction.java	2009-08-28 08:06:38 UTC (rev 19885)
@@ -11,17 +11,14 @@
  */
 public class StrategoCostFunction implements CostFunction {
 
-	@Override
 	public int cost(Label l1, Empty empty) {
 		return 1;
 	}
 
-	@Override
 	public int cost(Empty empty, Label l2) {
 		return 1;
 	}
 
-	@Override
 	public int cost(Label l1, Label l2) {
 		if (l1.data() == null && l2.data() == null) {
 			return 0;



From L.C.L.Kats at tudelft.nl  Fri Aug 28 10:07:18 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 28 Aug 2009 08:07:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19886 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/lib
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
Message-ID: <200908280806.n7S86jug005467@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-28 08:07:18 +0000 (Fri, 28 Aug 2009)
New Revision: 19886

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19886&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java

Log:
Fixes to support new package name structure.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-28 08:06:38 UTC (rev 19885)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-28 08:07:18 UTC (rev 19886)
@@ -18,11 +18,11 @@
   
   copy-parse-table =
     where(
-      print-filename(|[], <parse-table-target>);
       <eq> (<ParseTable>, <parse-table-target; file-exists>)
     <+
       ParseTable;
       if file-exists then
+        print-filename(|[], <parse-table-target>);
         <copy-file> (<id>, <parse-table-target>)
       end
     )
@@ -32,6 +32,7 @@
     with
       FILE(input') := <create-permissive-grammar> FILE(input);
       output       := <parse-table-target>;
+      print-filename(|[], output);
       <file-exists <+ mkdir> "include";
       <xtc-command(!"sdf2table")> ["-i", input', "-o", output, "-m", <get-sdf-main-module>]
   
@@ -39,9 +40,10 @@
     FILE(input) -> FILE(output)
     with
       output := <permissive-grammar-target>;
+      print-filename(|[], output);
       args   := ["-i", input, "-o", output];
       if-java-platform(
-        <call> ("org.strategoxt.permissivegrammars.make-permissive.main-make-permissive", args)
+        <call> ("org.strategoxt.permissivegrammars.main-make-permissive", args)
       );
       if-c-platform(  // FIXME: should we even bother making make-permissive an xtc executable?
         <call> ("make-permissive", args)

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-28 08:06:38 UTC (rev 19885)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-28 08:07:18 UTC (rev 19886)
@@ -11,6 +11,7 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.generator.sdf2imp;
+import org.strategoxt.imp.generator.sdf2imp_jvm_0_0;
 import org.strategoxt.imp.metatooling.loading.DynamicDescriptorUpdater;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
@@ -112,7 +113,7 @@
 		
 		try {
 			Debug.startTimer();
-			return sdf2imp.sdf2imp_jvm_0_0.instance.invoke(context, input);
+			return sdf2imp_jvm_0_0.instance.invoke(context, input);
 		} catch (StrategoExit e) {
 			Environment.logException("Unexpected exit in dynamic builder", e);
 			context.printStackTrace();



From L.C.L.Kats at tudelft.nl  Fri Aug 28 11:08:43 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 28 Aug 2009 09:08:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19887 - LennartKats -
	in strc-java/trunk: . java/runtime/org/strategoxt/lang
	java/runtime/org/strategoxt/lang/terms
Message-ID: <200908280908.n7S98AEA006472@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-28 09:08:43 +0000 (Fri, 28 Aug 2009)
New Revision: 19887

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19887&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/BAFReader.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAnnotation.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAppl.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoConstructor.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoInt.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoReal.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoString.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTuple.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoWrapped.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
Modified:
   strc-java/trunk/.classpath
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java

Log:
Added the new StrategoTerm term representation.

Its main characteristics:
  - Based on IStrategoTerm; no maximal sharing and interoperates well with other term factories
    (maximal sharing would be something to experiment with in the future,
     which can now be done in an interoperable fashion using the getStorageType() accessor)
  - Assumes all IStrategoAppl terms use the maximally shared StrategoConstructor constructor
  - Various tweaks based on the new getStorageType() logic,
    using hash-code based inequality or pointer-based equality tests where possible
  - Implements its own BAFReader
  - Uses hash code caching, and applies shallow (but recursive) hash codes for lists
  - New thread-safe sharing of constructors and 'newname' cache


Changes (first 1000 lines of the diffs):

Modified: strc-java/trunk/.classpath
===================================================================
--- strc-java/trunk/.classpath	2009-08-28 08:07:18 UTC (rev 19886)
+++ strc-java/trunk/.classpath	2009-08-28 09:08:43 UTC (rev 19887)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="java/runtime"/>
+	<classpathentry excluding="org/strategoxt/lang/compat/override/*/*" kind="src" path="java/runtime"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry exported="true" kind="lib" path="java/strategoxt.jar" sourcepath="java/lib"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-28 08:07:18 UTC (rev 19886)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-28 09:08:43 UTC (rev 19887)
@@ -5,7 +5,6 @@
 import java.util.List;
 import java.util.Map;
 
-import org.spoofax.interpreter.adapter.aterm.BAFBasicTermFactory;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.StackTracer;
@@ -17,6 +16,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.lang.compat.CompatManager;
+import org.strategoxt.lang.terms.TermFactory;
 
 /**
  * The runtime context of a compiled Stratego strategy.
@@ -44,7 +44,7 @@
     private transient AbstractPrimitive lastPrimitive1, lastPrimitive2;
     
     public Context() {
-    	this(new BAFBasicTermFactory());
+    	this(new TermFactory());
     }
     
     public Context(ITermFactory factory) {

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/BAFReader.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/BAFReader.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/BAFReader.java	2009-08-28 09:08:43 UTC (rev 19887)
@@ -0,0 +1,389 @@
+/*
+ * Java version of the ATerm library
+ * Copyright (C) 2006-2007, UiB, CWI, LORIA-INRIA
+ * 
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ * 
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ * 
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+ * Boston, MA  02111-1307, USA.
+ */
+package org.strategoxt.lang.terms;
+
+import java.io.BufferedInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.EOFException;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PushbackInputStream;
+import java.util.ArrayList;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+import aterm.ParseError;
+import aterm.pure.BitStream;
+import aterm.pure.MemoryMappedBitStream;
+
+/**
+ * A BAFReader that uses IStrategoTerms.
+ */
+public class BAFReader {
+
+    private static final int BAF_MAGIC = 0xBAF;
+    
+    public static final int BAF_MAGIC_SIZE = 8; // bytes in BAF header magic
+
+    private static final int BAF_VERSION = 0x300;
+
+    private static final int HEADER_BITS = 32;
+    
+    private static final ThreadLocal<ArrayList<ReadTermFrame>> readerStacks =
+        new ThreadLocal<ArrayList<ReadTermFrame>>();
+
+    private BitStream reader;
+
+    private int nrUniqueSymbols = -1;
+
+    private SymEntry[] symbols;
+
+    private ITermFactory factory;
+
+    public final static boolean isDebugging = false;
+
+    class SymEntry {
+
+        public IStrategoTerm fun;
+
+        public int arity;
+
+        public int nrTerms;
+
+        public int termWidth;
+
+        public IStrategoTerm[] terms;
+
+        public int[] nrTopSyms;
+
+        public int[] symWidth;
+
+        public int[][] topSyms;
+
+    }
+
+    public BAFReader(ITermFactory factory, InputStream inputStream) {
+        this.factory = factory;
+        if(inputStream instanceof FileInputStream) {
+            try {
+                reader = new MemoryMappedBitStream((FileInputStream)inputStream);
+            } catch(IOException e) {
+                reader = new BitStream(inputStream);
+            }
+        } else {
+            reader = new BitStream(inputStream);
+        }
+    }
+
+    public IStrategoTerm readFromBinaryFile(boolean headerAlreadyRead) throws ParseError, IOException {
+
+        if(!headerAlreadyRead && !isBinaryATerm(reader))
+            throw new ParseError("Input is not a BAF file");
+
+        int val = reader.readInt();
+
+        if (val != BAF_VERSION)
+            throw new ParseError("Wrong BAF version (wanted " + BAF_VERSION + ", got " + val + "), giving up");
+
+        nrUniqueSymbols = reader.readInt();
+        int nrUniqueTerms = reader.readInt();
+
+        if(isDebugging()) {
+            debug("" + nrUniqueSymbols + " unique symbols");
+            debug("" + nrUniqueTerms + " unique terms");
+        }
+
+        symbols = new SymEntry[nrUniqueSymbols];
+
+        readAllSymbols();
+
+        int i = reader.readInt();
+
+        return readTerm(symbols[i]);
+    }
+
+    private boolean isDebugging() {
+        return isDebugging;
+    }
+
+    public static boolean isBinaryATerm(BufferedInputStream in) throws IOException {
+        in.mark(10);
+        if(isBinaryATerm(new BitStream(in)))
+            return true;
+        in.reset();
+        return false;
+    }
+
+    private static boolean isBinaryATerm(BitStream in) throws IOException {
+        try {
+            int w0 = in.readInt();
+            int w1 = in.readInt();
+
+            if (w0 == 0 && w1 == BAF_MAGIC)
+                return true;
+        } catch(EOFException e) {}
+
+        return false;
+    }
+
+    public static boolean isBinaryATerm(PushbackInputStream in) throws IOException {
+        byte[] header = new byte[BAF_MAGIC_SIZE];
+        
+        in.read(header);
+        in.unread(header);
+        
+        return isBinaryATerm(new BitStream(new ByteArrayInputStream(header)));
+    }
+
+
+    private void debug(String s) {
+        System.err.println(s);
+    }
+
+    int level = 0;
+    
+    static class ReadTermFrame {
+        final SymEntry input;
+        final IStrategoTerm[] outputArgs;
+        
+        int index;
+        SymEntry argSym;
+        int val;
+        
+        public ReadTermFrame(SymEntry input) {
+            this.input = input;
+            this.outputArgs = new IStrategoTerm[input.arity];
+        }
+    }
+    
+    private IStrategoTerm readTerm(SymEntry e) throws ParseError, IOException {
+        // TODO: Optimize readTerm?
+        //       e.g., throw in some rounds of native-stack based reading
+        ArrayList<ReadTermFrame> stack = readerStacks.get();
+        if (stack == null) readerStacks.set(stack = new ArrayList<ReadTermFrame>());
+        
+        ReadTermFrame frame = new ReadTermFrame(e);
+        boolean resumingFrame = false;
+        
+     readTerm:
+        for(;;) {
+            final SymEntry input = frame.input;
+            final IStrategoTerm[] outputArgs = frame.outputArgs;
+
+            if (!resumingFrame) {
+                level++;
+                if(isDebugging()) debug("readTerm()/" + level + " - " + input.fun + "[" + input.arity + "]");
+            }
+            
+            for (int i = frame.index, arity = input.arity; i < arity; i++) {
+                final SymEntry argSym;
+                final int val;
+                
+                if (!resumingFrame) {
+                    final int symVal = reader.readBits(input.symWidth[i]);
+                    if(isDebugging()) {
+                        debug(" [" + i + "] - " + symVal);
+                        debug(" [" + i + "] - " + input.topSyms[i].length);
+                    }
+                    
+                    argSym = symbols[input.topSyms[i][symVal]];
+                    val = reader.readBits(argSym.termWidth);
+                    
+                    if (argSym.terms[val] == null) {
+                        if(isDebugging()) debug(" [" + i+  "] - recurse");
+
+                        frame.index = i;
+                        frame.argSym = argSym;
+                        frame.val = val;
+                        stack.add(frame);
+                        
+                        frame = new ReadTermFrame(argSym); // recurse: argSym.terms[val] = readTerm(argSym);
+                        continue readTerm;
+                    }
+                } else {
+                    // Re-entry after recursion
+                    resumingFrame = false;
+                    argSym = frame.argSym;
+                    val = frame.val;
+                }
+    
+                if (argSym.terms[val] == null) 
+                    throw new ParseError("Malformed ATerm: Cannot be null");
+    
+                outputArgs[i] = argSym.terms[val];
+            }
+            
+            final IStrategoTerm result = readTermTop(input, outputArgs);
+            
+            if (stack.isEmpty()) {
+                return result;
+            } else {
+                // Add result to parent frame
+                frame = stack.remove(stack.size() - 1);
+                frame.argSym.terms[frame.val] = result;
+                resumingFrame = true;
+            }
+        }
+    }
+
+    private IStrategoTerm readTermTop(SymEntry e, final IStrategoTerm[] args) throws IOException {
+      /*
+      switch (e.fun.getType()) {
+      case ATerm.BLOB:
+          reader.flushBitsFromReader();
+          String t = reader.readString();
+          return factory.makeBlob(t.getBytes());
+      case ATerm.PLACEHOLDER:
+          return factory.makePlaceholder(args[0]);
+      }
+      */
+
+      if (e.fun instanceof IStrategoString) {
+          level--;
+          return e.fun;
+      }
+      
+      IStrategoConstructor fun = (IStrategoConstructor) e.fun;
+      final String name = fun.getName();
+      final int LONGEST_BUILTIN_NAME = 6; // longest string length of "<int>", etc.
+      
+      if (name.length() <= LONGEST_BUILTIN_NAME) {
+          if (name.equals("<int>")) {
+              int val = reader.readBits(HEADER_BITS);
+              level--;
+              return factory.makeInt(val);
+          }
+          else if (name.equals("<real>")) {
+              reader.flushBitsFromReader();
+              String s = reader.readString();
+              level--;
+              return factory.makeReal(new Double(s).doubleValue());
+          }
+          else if (name.equals("[_,_]")) {
+              if(isDebugging()) {
+                  debug("--");
+                  for (int i = 0; i < args.length; i++)
+                      debug(" + " + args[i].getClass());
+              }
+              level--;
+              return ((IStrategoList) args[1]).prepend(args[0]);
+          }
+          else if (name.equals("[]")) {
+              level--;
+              return factory.makeList();
+          } else if (name.equals("{_}")) {
+              return factory.annotateTerm(args[0], (IStrategoList) args[1]);
+          } else if (name.equals("<_>")) {
+              throw new NotImplementedException("ATerm placeholders");
+              // return factory.makePlaceholder(args[0]);
+          } else if (false) {
+              throw new NotImplementedException("ATerm blobs");
+          }
+      }
+
+      if(isDebugging()) {
+          debug(e.fun + " / " + args);
+          for (int i = 0; i < args.length; i++)
+              debug("" + args[i]);
+      }
+      level--;
+      return factory.makeAppl(fun, args);
+    }
+
+    private void readAllSymbols() throws IOException {
+
+        for (int i = 0; i < nrUniqueSymbols; i++) {
+            SymEntry e = new SymEntry();
+            symbols[i] = e;
+
+            IStrategoTerm fun = readSymbol();
+            e.fun = fun;
+            int arity = e.arity = fun instanceof IStrategoConstructor ? ((IStrategoConstructor) fun).getArity() : 0;
+
+            int v = reader.readInt();
+            e.nrTerms = v;
+            e.termWidth = bitWidth(v);
+            // FIXME: original code is inconsistent at this point!
+            e.terms = (v == 0) ? null : new IStrategoTerm[v];
+
+            if (arity == 0) {
+                e.nrTopSyms = null;
+                e.symWidth = null;
+                e.topSyms = null;
+            } else {
+
+                e.nrTopSyms = new int[arity];
+                e.symWidth = new int[arity];
+                e.topSyms = new int[arity][];
+            }
+            for (int j = 0; j < arity; j++) {
+                v = reader.readInt();
+                e.nrTopSyms[j] = v;
+                e.symWidth[j] = bitWidth(v);
+                e.topSyms[j] = new int[v];
+
+                for (int k = 0; k < e.nrTopSyms[j]; k++) {
+                    v = reader.readInt();
+                    e.topSyms[j][k] = v;
+                }
+            }
+        }
+    }
+
+    private int bitWidth(int v) {
+        int nrBits = 0;
+
+        if (v <= 1)
+            return 0;
+
+        while (v != 0) {
+            v >>= 1;
+            nrBits++;
+        }
+
+        return nrBits;
+    }
+
+    private IStrategoTerm readSymbol() throws IOException {
+        String s = reader.readString();
+        int arity = reader.readInt();
+        int quoted = reader.readInt();
+
+        if(isDebugging())
+//            debug(s + " / " + arity + " / " + quoted);
+            debug(s + " / " + arity + " / " + quoted);
+
+        if (quoted != 0) {
+            if (arity == 0) {
+                return factory.makeString(s);
+            } else {
+                return factory.makeConstructor("\"" + s + "\"", arity);
+            }
+        } else {
+            return factory.makeConstructor(s, arity);
+        }
+    }
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAnnotation.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAnnotation.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAnnotation.java	2009-08-28 09:08:43 UTC (rev 19887)
@@ -0,0 +1,83 @@
+package org.strategoxt.lang.terms;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class StrategoAnnotation extends StrategoWrapped {
+	
+	private final int storageType;
+	
+	private final ITermFactory factory;
+	
+	public StrategoAnnotation(ITermFactory factory, IStrategoTerm term, IStrategoList annotations, int storageType) {
+		super(term, annotations);
+		
+		if (!term.getAnnotations().isEmpty())
+			throw new IllegalArgumentException("Annotated term cannot already have annotations");
+		
+		this.factory = factory;
+		this.storageType = storageType;
+		
+		if (storageType != MUTABLE)
+			initImmutableHashCode();
+	}
+	
+	@Override
+	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+		IStrategoTerm wrapped = getWrapped();
+		IStrategoList annotations = getAnnotations();
+		IStrategoList secondAnnotations = second.getAnnotations();
+		
+		if (annotations == secondAnnotations) {
+        	// Do nothing
+        } else if (annotations.match(secondAnnotations)) {
+        	if (commonStorageType == SHARABLE) internalSetAnnotations(secondAnnotations);
+        } else {
+        	return false;
+        }
+		
+		if (annotations.isEmpty()) {
+			return wrapped.match(second);
+		} else {
+			second = factory.annotateTerm(second, TermFactory.EMPTY_LIST);
+			return wrapped.match(second);
+		}
+	}
+
+	@Override
+	protected int hashFunction() {
+		// FIXME: annotations should be part of the hash code	
+		return getWrapped().hashCode();
+	}
+
+	@Override
+	public String toString() {
+		StringBuilder result = new StringBuilder();
+		result.append(getWrapped().toString());
+		appendAnnotations(result);
+		return result.toString();
+	}
+	
+	@Override
+	public void prettyPrint(ITermPrinter pp) {
+		getWrapped().prettyPrint(pp);
+		printAnnotations(pp);
+	}
+
+	@Override
+	public int getStorageType() {
+		return storageType;
+	}
+
+	@Override
+	@Deprecated
+	public IStrategoList prepend(IStrategoTerm prefix) {
+		throw new UnsupportedOperationException();
+	}
+	
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAppl.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAppl.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoAppl.java	2009-08-28 09:08:43 UTC (rev 19887)
@@ -0,0 +1,147 @@
+/*
+ * Created on 28. jan.. 2007
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.strategoxt.lang.terms;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+public class StrategoAppl extends StrategoTerm implements IStrategoAppl {
+
+    private final IStrategoConstructor ctor;
+    
+    private final int storageType;
+
+    private IStrategoTerm[] kids;
+
+    protected StrategoAppl(IStrategoConstructor ctor, IStrategoTerm[] kids, IStrategoList annotations, int storageType) {
+        super(annotations);
+        this.ctor = ctor;
+        this.kids = kids;
+        this.storageType = storageType;
+        
+        if (storageType != MUTABLE) initImmutableHashCode();
+    }
+    
+    public final int getStorageType() {
+        return storageType;
+    }
+    
+    public IStrategoTerm[] getArguments() {
+        return kids;
+    }
+
+    public IStrategoConstructor getConstructor() {
+        return ctor;
+    }
+
+    public IStrategoTerm[] getAllSubterms() {
+        return kids;
+    }
+
+    public IStrategoTerm getSubterm(int index) {
+        if (index < 0 || index > kids.length)
+            throw new IndexOutOfBoundsException("Index out of bounds: " + index);
+        return kids[index];
+    }
+
+    public int getSubtermCount() {
+        return kids.length;
+    }
+
+    public int getTermType() {
+        return IStrategoTerm.APPL;
+    }
+
+    @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        if (second.getTermType() != IStrategoTerm.APPL)
+            return false;
+        IStrategoAppl o = (IStrategoAppl)second;
+        if (ctor != o.getConstructor())
+            return false;
+        
+        IStrategoTerm[] kids = getAllSubterms();
+        IStrategoTerm[] secondKids = o.getAllSubterms();
+        if (kids != secondKids) {
+            for (int i = 0, sz = kids.length; i < sz; i++) {
+                IStrategoTerm kid = kids[i];
+                IStrategoTerm secondKid = secondKids[i];
+                if (kid != secondKid && !kid.match(secondKid)) {
+                    if (commonStorageType == SHARABLE && i != 0)
+                        System.arraycopy(secondKids, 0, kids, 0, i);
+                    return false;
+                }
+            }
+            
+            if (commonStorageType == SHARABLE)
+                this.kids = secondKids;
+        }
+        
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        if (annotations == secondAnnotations) {
+            return true;
+        } else if (annotations.match(secondAnnotations)) {
+            if (commonStorageType == SHARABLE) internalSetAnnotations(secondAnnotations);
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public void prettyPrint(ITermPrinter pp) {
+        pp.print(ctor.getName());
+        IStrategoTerm[] kids = getAllSubterms();
+        if(kids.length > 0) {
+            pp.println("(");
+            pp.indent(ctor.getName().length());
+            kids[0].prettyPrint(pp);
+            for(int i = 1; i < kids.length; i++) {
+                pp.print(",");
+                kids[i].prettyPrint(pp);
+            }
+            pp.println(")");
+            pp.outdent(ctor.getName().length());
+        }
+        printAnnotations(pp);
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append(ctor.getName());
+        IStrategoTerm[] kids = getAllSubterms();
+        if(kids.length > 0) {
+            sb.append("(");
+            sb.append(kids[0]);
+            for(int i = 1; i < kids.length; i++) {
+                sb.append(",");
+                sb.append(kids[i].toString());
+            }
+            sb.append(")");
+        }
+        appendAnnotations(sb);
+        return sb.toString();
+    }
+
+    @Override
+    public int hashFunction() {
+        long r = ctor.hashCode();
+        int accum = 6673;
+        IStrategoTerm[] kids = getAllSubterms();
+        for(int i = 0; i < kids.length; i++) {
+            r += kids[i].hashCode() * accum;
+            accum *= 7703;
+        }
+        return (int)(r >> 12);
+    }
+    
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoConstructor.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoConstructor.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoConstructor.java	2009-08-28 09:08:43 UTC (rev 19887)
@@ -0,0 +1,102 @@
+/*
+ * Created on 28. jan.. 2007
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.strategoxt.lang.terms;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+public final class StrategoConstructor extends StrategoTerm implements IStrategoConstructor {
+
+    private final String name;
+    
+    private final int arity;
+
+    public StrategoConstructor(String name, int arity) {
+        super(null);
+        this.name = name;
+        this.arity = arity;
+    }
+    
+    public int getStorageType() {
+    	// MAXIMALLY_SHARED causes problems before sharing with regular hash maps
+    	return SHARABLE; 
+    }
+    
+    public int getArity() {
+        return arity;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public IStrategoTerm[] getAllSubterms() {
+        return TermFactory.EMPTY;
+    }
+    
+    @Override
+    public IStrategoList getAnnotations() {
+        throw new UnsupportedOperationException();
+    }
+
+    public IStrategoTerm getSubterm(int index) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    public int getSubtermCount() {
+        return 0;
+    }
+
+    public final int getTermType() {
+        return IStrategoTerm.CTOR;
+    }
+
+    @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+    	if (second == this)
+    		return true;
+    	if (second == null || second.getTermType() != CTOR)
+    		return false;
+    	
+    	IStrategoConstructor other = (IStrategoConstructor) second;
+    	
+        return name.equals(other.getName()) && arity == other.getArity();
+    }
+
+    public void prettyPrint(ITermPrinter pp) {
+        throw new UnsupportedOperationException();
+    }
+    
+    @Override
+    public String toString() {
+        return name + "/" + arity;
+    }    
+    public IStrategoConstructor getConstructor() {
+        return this;
+    }
+    
+    @Override
+    public int hashFunction() {
+    	// TODO: hash code that is reproducible from Stratego
+        return name.hashCode() + 5407 * arity; 
+    }
+
+    @Deprecated
+	public IStrategoAppl instantiate(ITermFactory factory, IStrategoTerm... kids) {
+		throw new UnsupportedOperationException();
+	}
+
+	@Deprecated
+	public IStrategoAppl instantiate(ITermFactory factory, IStrategoList kids) {
+		throw new UnsupportedOperationException();
+	}
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoInt.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoInt.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoInt.java	2009-08-28 09:08:43 UTC (rev 19887)
@@ -0,0 +1,90 @@
+/*
+ * Created on 28. jan.. 2007
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.strategoxt.lang.terms;
+
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+
+public class StrategoInt extends StrategoTerm implements IStrategoInt {
+
+    private final int value;
+    
+    protected StrategoInt(int value, IStrategoList annotations) {
+        super(annotations);
+        this.value = value;
+    }
+    
+    public int getStorageType() {
+    	return SHARABLE;
+    }
+    
+    protected StrategoInt(int value) {
+        this(value, null);
+    }
+    
+    public int intValue() {
+        return value;
+    }
+
+    public IStrategoTerm[] getAllSubterms() {
+        return TermFactory.EMPTY;
+    }
+
+    public IStrategoTerm getSubterm(int index) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    public int getSubtermCount() {
+        return 0;
+    }
+
+    public int getTermType() {
+        return IStrategoTerm.INT;
+    }
+
+    @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        if(second.getTermType() != IStrategoTerm.INT)
+            return false;
+
+        if (intValue() != ((IStrategoInt) second).intValue())
+        	return false;
+
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        if (annotations == secondAnnotations) {
+        	return true;
+        } else if (annotations.match(secondAnnotations)) {
+        	if (commonStorageType == SHARABLE) internalSetAnnotations(secondAnnotations);
+        	return true;
+        } else {
+        	return false;
+        }
+    }
+
+    public void prettyPrint(ITermPrinter pp) {
+        pp.print("" + intValue());
+        printAnnotations(pp);
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder result = new StringBuilder();
+        result.append(intValue());
+        appendAnnotations(result);
+        return result.toString();
+    }
+    
+    @Override
+    public int hashFunction() {
+        return 449 * intValue() ^ 7841;
+    }
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java	2009-08-28 09:08:43 UTC (rev 19887)
@@ -0,0 +1,215 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.strategoxt.lang.terms;
+
+import java.util.NoSuchElementException;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+/**
+ * A basic stratego list implementation using a linked-list data structure.
+ */
+public class StrategoList extends StrategoTerm implements IStrategoList {
+	
+	private static final int UNKNOWN_SIZE = -1;
+	
+	private static final int UNKNOWN_STORAGE = -1;
+    
+    private IStrategoTerm head;
+    
+    private IStrategoList tail;
+    
+    private int storageType = UNKNOWN_STORAGE;
+    
+    private int size = UNKNOWN_SIZE;
+
+    /**
+     * Creates a new list.
+     * 
+     * @see #prepend(IStrategoTerm) Adds a new head element to a list.
+     */
+    protected StrategoList(IStrategoTerm head, IStrategoList tail, IStrategoList annotations, int storageType) {
+        super(annotations);
+        this.head = head;
+        this.tail = tail;
+        this.storageType = storageType;
+        
+        if (storageType != MUTABLE) initImmutableHashCode();
+    }
+    
+    public final int getStorageType() {
+    	return storageType;
+    }
+    
+    public IStrategoTerm head() {
+        if (isEmpty())
+            throw new NoSuchElementException();
+        return head;
+    }
+    
+    public boolean isEmpty() {
+        return head == null;
+    }
+    
+    public IStrategoList tail() {
+        if (tail == null)
+            throw new IllegalStateException();
+        return tail;
+    }
+    
+    @Deprecated
+    public IStrategoList prepend(IStrategoTerm prefix) {
+        return new StrategoList(prefix, this, null, TermFactory.getStorageType(prefix, this));
+    }
+    
+    public final IStrategoTerm get(int index) {
+        return getSubterm(index);
+    }
+    
+    public IStrategoTerm[] getAllSubterms() {
+        int size = size();
+        IStrategoTerm[] clone = new IStrategoTerm[size];
+        IStrategoList list = this;
+        for (int i = 0; i < size; i++) {
+            clone[i] = list.head();
+            list = list.tail();
+        }
+        return clone;
+    }
+
+    
+    public final int size() {
+        return getSubtermCount();
+    }
+
+    public IStrategoTerm getSubterm(int index) {
+        IStrategoList list = this;
+        if (index < 0) throw new IndexOutOfBoundsException("Index out of bounds: " + index);
+        for (int i = 0; i < index; i++) {
+        	if (list.isEmpty()) throw new IndexOutOfBoundsException("Index out of bounds: " + index);
+            list = list.tail();
+        }
+        return list.head();
+    }
+
+    public int getSubtermCount() {
+    	int result = size;
+		if (result == UNKNOWN_SIZE) {
+    		result = 0;
+    		for (IStrategoList cur = this; !cur.isEmpty(); cur = cur.tail())
+    			result++;
+    		if (getStorageType() != MUTABLE)
+    			size = result;
+    		return result;
+    	} else {

(1010 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Fri Aug 28 13:47:27 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 28 Aug 2009 11:47:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19888 - LennartKats -
	in strategoxt/trunk: stratego-libraries/lib/spec/util/config
	strc-core/lib/stratego/strc/c
Message-ID: <200908281146.n7SBksF0008675@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-28 11:47:27 +0000 (Fri, 28 Aug 2009)
New Revision: 19888

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19888&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/util/config/common.str
   strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c-ng.str

Log:
Dumbed down if-c-platform(s) compilation.

Changes:

Modified: strategoxt/trunk/stratego-libraries/lib/spec/util/config/common.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/util/config/common.str	2009-08-28 09:08:43 UTC (rev 19887)
+++ strategoxt/trunk/stratego-libraries/lib/spec/util/config/common.str	2009-08-28 11:47:27 UTC (rev 19888)
@@ -95,11 +95,11 @@
    * Evaluates a strategy f if and only if the program is compiled to Java.
    */
   if-java-platform(s) = // implemented by the compiler
-    id + s
+    s
   
   /**
    * Evaluates a strategy f if and only if the program is compiled to C.
    */
   if-c-platform(s) = // implemented by the compiler
-    id + s
+    s
 

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c-ng.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c-ng.str	2009-08-28 09:08:43 UTC (rev 19887)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/c/s2c-ng.str	2009-08-28 11:47:27 UTC (rev 19888)
@@ -452,9 +452,6 @@
   
   TranslateStratPlatform(|S,F) :
     CallT(SVar("if_java_platform_1_0"), [s], []) -> stm|[ goto ~id:S; ]|
-  
-  TranslateStratPlatform(|S,F) :
-    CallT(SVar("if_c_platform_1_0"), [s], []) -> <TranslateStrat(|S,F)> s
 
   TranslateStrat(|S,F) :
     |[ {x* : s} ]| -> 



From L.C.L.Kats at tudelft.nl  Fri Aug 28 15:57:34 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 28 Aug 2009 13:57:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19889 - LennartKats -
	in strc-java/trunk: java java/runtime/org/strategoxt/lang
	java/runtime/org/strategoxt/lang/compat/override trans
Message-ID: <200908281357.n7SDv1bP010128@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-28 13:57:34 +0000 (Fri, 28 Aug 2009)
New Revision: 19889

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19889&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java
   strc-java/trunk/trans/java-pp.c
Modified:
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
   strc-java/trunk/trans/Makefile.am
   strc-java/trunk/trans/strj-options.str
   strc-java/trunk/trans/strj.str

Log:
- New StrategoErrorExit exception for when fatal-err or similar strategies are called
- Added Danny Groenewegen's "quick 'n dirty" Java pretty-printer (disabled by default)


Changes (first 1000 lines of the diffs):

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-08-28 11:47:27 UTC (rev 19888)
+++ strc-java/trunk/java/Makefile.am	2009-08-28 13:57:34 UTC (rev 19889)
@@ -7,6 +7,7 @@
   $(wildcard runtime/org/strategoxt/lang/*.java) \
   $(wildcard runtime/org/strategoxt/lang/compat/*.java) \
   $(wildcard runtime/org/strategoxt/lang/compat/sglr/*.java) \
+  $(wildcard runtime/org/strategoxt/lang/terms/*.java) \
   $(wildcard runtime/org/strategoxt/lang/parallel/*.java) \
   $(wildcard runtime/org/strategoxt/lang/parallel/*/*.java) \
   runtime/org/strategoxt/lang/compat/override/jsglr_parser/Main.java \

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_fatal_err_0_2.java	2009-08-28 13:57:34 UTC (rev 19889)
@@ -0,0 +1,24 @@
+package org.strategoxt.lang;
+
+import static org.spoofax.interpreter.core.Tools.*;
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SRTS_EXT_fatal_err_0_2 extends Strategy {
+	public static SRTS_EXT_fatal_err_0_2 instance = new SRTS_EXT_fatal_err_0_2();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm message, IStrategoTerm term) {
+		if (message.getTermType() != STRING)
+			return null;
+		
+		if (term.getTermType() == TUPLE && term.getSubtermCount() == 0) {
+			throw new StrategoErrorExit(asJavaString(message));
+		} else {
+			throw new StrategoErrorExit(asJavaString(message), term);
+		}
+	}
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoErrorExit.java	2009-08-28 13:57:34 UTC (rev 19889)
@@ -0,0 +1,26 @@
+package org.strategoxt.lang;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class StrategoErrorExit extends StrategoExit {
+
+	private static final long serialVersionUID = 1718563644820693442L;
+	
+	private final IStrategoTerm term;
+
+	public StrategoErrorExit(String message, IStrategoTerm term) {
+		super(1, message);
+		this.term = term;
+	}
+	
+	public StrategoErrorExit(String message) {
+		this(message, null);
+	}
+	
+	public IStrategoTerm getTerm() {
+		return term;
+	}
+}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2009-08-28 11:47:27 UTC (rev 19888)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2009-08-28 13:57:34 UTC (rev 19889)
@@ -21,6 +21,11 @@
     	this.value = value;
     }
     
+    public StrategoExit(int value, String message) {
+    	super(message);
+    	this.value = value;
+    }
+    
     public StrategoExit(StrategoExit cause) {
     	this(cause.getValue(), cause);
     }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-28 11:47:27 UTC (rev 19888)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-28 13:57:34 UTC (rev 19889)
@@ -17,6 +17,11 @@
   <+
     id // HACK: try to find something on the path instead
   
+
+strategies
+  
+  // TODO: move call and fatal-err to lib-compat.str
+
   // TODO: also implement fork-and-wait?
   
   override call =
@@ -33,3 +38,25 @@
 
     log(|Info(), ["Calling external tool ", program, " ", <try(separate-by(|" "); concat-strings)> args]);
     prim("SSL_EXT_call", program, args) => 0
+
+strategies
+
+  override fatal-err(|msg) =
+    log(|Critical(), msg, <id>);
+    SRTS-EXT-fatal-err(|msg, <try(concat-strings)>)
+  
+  override fatal-err-msg(|msg) =
+    log(|Critical(), msg);
+    SRTS-EXT-fatal-err(|msg, ())
+  
+  override fatal-error =
+    error;
+    SRTS-EXT-fatal-err(|<try(concat-strings)>, ())
+  
+  override report-failure(|message, term) =
+    report-failure(
+      log(|Critical(), message, term);
+      SRTS-EXT-fatal-err(|msg, <try(concat-strings)> term)
+    )
+  
+  external SRTS-EXT-fatal-err(|msg, term)

Modified: strc-java/trunk/trans/Makefile.am
===================================================================
--- strc-java/trunk/trans/Makefile.am	2009-08-28 11:47:27 UTC (rev 19888)
+++ strc-java/trunk/trans/Makefile.am	2009-08-28 13:57:34 UTC (rev 19889)
@@ -8,7 +8,7 @@
 
 STRJSOURCES = $(wildcard *.str) $(wildcard lib/*.str)
 
-LDADD += $(SSL_LIBS) -lstrc 
+LDADD += $(SSL_LIBS) libjava-pp.la -lstrc 
 
 STRINCLUDES    = -I $(XTC)/share/xtc -I $(JAVA_FRONT)/share/java-front -I $(STRATEGO_FRONT)/share/stratego-front -I ../syn
 
@@ -38,7 +38,7 @@
 %.str : %.astr
 	aster -i $< -o $@
 
-strj$(exeext) : $(STRJSOURCES:.str=.rtree)
+strj$(exeext) : $(STRJSOURCES:.str=.rtree) libjava-pp.la
 
 strj.ctree : strj.rtree $(STRJSOURCES:.str=.rtree) strj
 	$(SCOMPILE) $(STRINCLUDES) $(STRCFLAGS) $(SCFLAGS) -i $< -o $@ -F -m main-strj
@@ -59,3 +59,12 @@
 	strc -la strc -la stratego-lib -i $<
 	`dirname $<`/`basename $< .str`
 
+## fast C-based pretty-printer
+
+lib_LTLIBRARIES = libjava-pp.la 
+
+libjava_pp_la_SOURCES = java-pp.c
+libjava_pp_la_LIBADD  = $(STRATEGO_XTC_LIBS)   $(STRATEGO_LIB_LIBS)   $(STRATEGO_RUNTIME_LIBS)   $(ATERM_LIBS)
+libjava_pp_la_CFLAGS  = $(STRATEGO_XTC_CFLAGS) $(STRATEGO_LIB_CFLAGS) $(STRATEGO_RUNTIME_CFLAGS) $(ATERM_CFLAGS) $(AM_CFLAGS)
+libjava_pp_la_LDFLAGS = -avoid-version -no-undefined $(AM_LDFLAGS)
+

Added: strc-java/trunk/trans/java-pp.c
===================================================================
--- strc-java/trunk/trans/java-pp.c	                        (rev 0)
+++ strc-java/trunk/trans/java-pp.c	2009-08-28 13:57:34 UTC (rev 19889)
@@ -0,0 +1,6354 @@
+#include <aterm2.h>
+#include <string.h>
+#include <stdlib.h>
+#include <srts/stratego.h>
+#include <stratego-lib/stratego-lib.h>
+
+ATerm xtc_new_file_0_0(StrSL, ATerm);
+
+enum dirs {H, V};
+
+struct position {
+  enum dirs direction;
+  int is;
+  int vs;
+  int hs;
+  int indent;
+  int has_something;
+  struct position *previous;
+};
+
+static
+int hpos;
+
+static
+AFun AltFun;
+static
+AFun SomeFun;
+static
+AFun NoneFun;
+static
+AFun AmbFun;
+
+static
+FILE *stream;
+
+static int printed;
+
+static
+struct position *current;
+
+static
+void next(void)
+{
+  int i;
+  struct position *last = current;
+
+  while (!last->has_something) {
+    last->has_something = 1;
+    if (last->previous != NULL) {
+      last->indent += last->is;
+      last = last->previous;
+    }
+  }
+
+  if (last->direction == V)  {
+    for (i = 0; i <= last->vs; ++i)
+      fputc('\n', stream);
+    for (i = 0; i < last->indent; ++i)
+      fputc(' ', stream);
+    hpos = last->indent;
+  }
+  else if (last->direction == H) {
+    for (i = 0; i < last->hs; ++i)
+      fputc(' ', stream);
+    hpos += last->hs;
+  }
+}
+
+static
+void print_string(char *str)
+{
+  next();
+  hpos += fprintf(stream, "%s", str);
+  //printf("print_string: %s\n",str);
+}
+
+static
+void print_int(int i)
+{
+  next();
+  //occurs with namedescape in string e.g. "\"" produced 34
+  //hpos += fprintf(stream, "%d", i);
+  hpos += fprintf(stream, "%c", i);
+  //printf("print_int: %d\n",i);
+}
+
+static
+void print_real(double d)
+{
+	next();
+	hpos += fprintf(stream, "%f", d);
+    //printf("print_real: %f\n",d);
+}
+
+static
+void init_cons(void);
+
+static
+void init_stack(void)
+{
+  current->indent = 0;
+  current->previous = NULL;
+  current->is = 0;
+  current->vs = 0;
+  current->hs = 0;
+  current->has_something = 0;
+  hpos = 0;
+}
+
+static
+void init(void)
+{
+  current = malloc(sizeof(struct position));
+
+  AltFun = ATmakeAFun("alt", 2, ATfalse);
+  ATprotectAFun(AltFun);
+  SomeFun = ATmakeAFun("Some", 1, ATfalse);
+  ATprotectAFun(SomeFun);
+  NoneFun = ATmakeAFun("None", 0, ATfalse);
+  ATprotectAFun(NoneFun);
+  AmbFun = ATmakeAFun("amb", 1, ATfalse);
+  ATprotectAFun(AmbFun);
+  init_cons();
+}
+
+static
+void push_box(enum dirs direction, int is, int vs, int hs)
+{
+  struct position *newpos = malloc(sizeof(struct position));
+
+  newpos->indent = ((direction == V) && (current->direction == H))
+                     ?hpos:current->indent;
+  newpos->direction = direction;
+  newpos->is = is;
+  newpos->vs = vs;
+  newpos->hs = hs;
+  newpos->has_something = 0;
+  newpos->previous = current;
+  current = newpos;
+}
+
+static
+void pop_box(void)
+{
+  struct position *old = current;
+  current = current->previous;
+  free(old);
+}
+
+static
+void unexpected(ATerm tree, int n, char *str)
+{
+  ATfprintf(stderr,
+   "The %dth argument was expected to be %s\n%a\n", n, str, ATgetAFun(tree));
+  exit(1);
+}
+static AFun var_cons_Parenthetical;
+static AFun var_cons_String;
+static AFun var_cons_Chars;
+static AFun var_cons_None;
+static AFun var_cons_Some;
+static AFun var_cons_NamedEscape;
+static AFun var_cons_OctaEscape1;
+static AFun var_cons_OctaEscape2;
+static AFun var_cons_OctaEscape3;
+static AFun var_cons_Assign;
+static AFun var_cons_AssignMul;
+static AFun var_cons_AssignDiv;
+static AFun var_cons_AssignRemain;
+static AFun var_cons_AssignPlus;
+static AFun var_cons_AssignMinus;
+static AFun var_cons_AssignLeftShift;
+static AFun var_cons_AssignRightShift;
+static AFun var_cons_AssignURightShift;
+static AFun var_cons_AssignAnd;
+static AFun var_cons_AssignExcOr;
+static AFun var_cons_AssignOr;
+static AFun var_cons_InstanceOf;
+static AFun var_cons_Mul;
+static AFun var_cons_Div;
+static AFun var_cons_Remain;
+static AFun var_cons_Plus2;
+static AFun var_cons_Minus2;
+static AFun var_cons_LeftShift;
+static AFun var_cons_RightShift;
+static AFun var_cons_URightShift;
+static AFun var_cons_Lt;
+static AFun var_cons_Gt;
+static AFun var_cons_LtEq;
+static AFun var_cons_GtEq;
+static AFun var_cons_Eq;
+static AFun var_cons_NotEq;
+static AFun var_cons_LazyAnd;
+static AFun var_cons_LazyOr;
+static AFun var_cons_And;
+static AFun var_cons_ExcOr;
+static AFun var_cons_Or;
+static AFun var_cons_Cond;
+static AFun var_cons_Plus1;
+static AFun var_cons_Minus1;
+static AFun var_cons_PreIncr;
+static AFun var_cons_PreDecr;
+static AFun var_cons_Complement;
+static AFun var_cons_Not;
+static AFun var_cons_CastPrim;
+static AFun var_cons_CastRef;
+static AFun var_cons_PostIncr;
+static AFun var_cons_PostDecr;
+static AFun var_cons_Invoke;
+static AFun var_cons_Method1;
+static AFun var_cons_Method3;
+static AFun var_cons_SuperMethod;
+static AFun var_cons_QSuperMethod;
+static AFun var_cons_GenericMethod;
+static AFun var_cons_ArrayAccess;
+static AFun var_cons_Field;
+static AFun var_cons_SuperField;
+static AFun var_cons_QSuperField;
+static AFun var_cons_NewArray;
+static AFun var_cons_UnboundWld;
+static AFun var_cons_Dim1;
+static AFun var_cons_Dim0;
+static AFun var_cons_NewInstance;
+static AFun var_cons_QNewInstance;
+static AFun var_cons_Lit;
+static AFun var_cons_Class;
+static AFun var_cons_VoidClass;
+static AFun var_cons_This;
+static AFun var_cons_QThis;
+static AFun var_cons_PackageDec;
+static AFun var_cons_TypeImportDec;
+static AFun var_cons_TypeImportOnDemandDec;
+static AFun var_cons_StaticImportDec;
+static AFun var_cons_StaticImportOnDemandDec;
+static AFun var_cons_AnnoDec;
+static AFun var_cons_AnnoDecHead;
+static AFun var_cons_AnnoMethodDec;
+static AFun var_cons_Semicolon;
+static AFun var_cons_DefaultVal;
+static AFun var_cons_AbstractMethodDec;
+static AFun var_cons_DeprAbstractMethodDec;
+static AFun var_cons_ConstantDec;
+static AFun var_cons_InterfaceDec;
+static AFun var_cons_InterfaceDecHead;
+static AFun var_cons_ExtendsInterfaces;
+static AFun var_cons_EnumDec;
+static AFun var_cons_EnumDecHead;
+static AFun var_cons_EnumBody;
+static AFun var_cons_EnumConst;
+static AFun var_cons_EnumBodyDecs;
+static AFun var_cons_ConstrDec;
+static AFun var_cons_ConstrDecHead;
+static AFun var_cons_ConstrBody;
+static AFun var_cons_AltConstrInv;
+static AFun var_cons_SuperConstrInv;
+static AFun var_cons_QSuperConstrInv;
+static AFun var_cons_StaticInit;
+static AFun var_cons_InstanceInit;
+static AFun var_cons_Empty;
+static AFun var_cons_Labeled;
+static AFun var_cons_ExprStm;
+static AFun var_cons_If2;
+static AFun var_cons_If3;
+static AFun var_cons_AssertStm1;
+static AFun var_cons_AssertStm2;
+static AFun var_cons_Switch;
+static AFun var_cons_SwitchBlock;
+static AFun var_cons_SwitchGroup;
+static AFun var_cons_Case;
+static AFun var_cons_Default;
+static AFun var_cons_While;
+static AFun var_cons_DoWhile;
+static AFun var_cons_For;
+static AFun var_cons_ForEach;
+static AFun var_cons_Break;
+static AFun var_cons_Continue;
+static AFun var_cons_Return;
+static AFun var_cons_Throw;
+static AFun var_cons_Synchronized2;
+static AFun var_cons_Try2;
+static AFun var_cons_Try3;
+static AFun var_cons_Catch;
+static AFun var_cons_LocalVarDecStm;
+static AFun var_cons_LocalVarDec;
+static AFun var_cons_Block;
+static AFun var_cons_ClassDecStm;
+static AFun var_cons_MethodDec;
+static AFun var_cons_MethodDecHead;
+static AFun var_cons_DeprMethodDecHead;
+static AFun var_cons_Void;
+static AFun var_cons_Param;
+static AFun var_cons_VarArityParam;
+static AFun var_cons_ThrowsDec;
+static AFun var_cons_NoMethodBody;
+static AFun var_cons_ArrayInit;
+static AFun var_cons_Anno;
+static AFun var_cons_SingleElemAnno;
+static AFun var_cons_MarkerAnno;
+static AFun var_cons_ElemValPair;
+static AFun var_cons_ElemValArrayInit;
+static AFun var_cons_FieldDec;
+static AFun var_cons_VarDec1;
+static AFun var_cons_VarDec2;
+static AFun var_cons_ArrayVarDecId;
+static AFun var_cons_ClassDec;
+static AFun var_cons_ClassBody;
+static AFun var_cons_ClassDecHead;
+static AFun var_cons_SuperDec;
+static AFun var_cons_ImplementsDec;
+static AFun var_cons_CompilationUnit;
+static AFun var_cons_PackageName;
+static AFun var_cons_AmbName1;
+static AFun var_cons_AmbName2;
+static AFun var_cons_TypeName1;
+static AFun var_cons_TypeName2;
+static AFun var_cons_ExprName1;
+static AFun var_cons_ExprName2;
+static AFun var_cons_MethodName1;
+static AFun var_cons_MethodName2;
+static AFun var_cons_PackageOrTypeName1;
+static AFun var_cons_PackageOrTypeName2;
+static AFun var_cons_TypeArgs;
+static AFun var_cons_Wildcard;
+static AFun var_cons_WildcardUpperBound;
+static AFun var_cons_WildcardLowerBound;
+static AFun var_cons_TypeParam;
+static AFun var_cons_TypeBound;
+static AFun var_cons_TypeParams;
+static AFun var_cons_ClassOrInterfaceType;
+static AFun var_cons_ClassType;
+static AFun var_cons_InterfaceType;
+static AFun var_cons_Member;
+static AFun var_cons_TypeVar;
+static AFun var_cons_ArrayType;
+static AFun var_cons_Boolean;
+static AFun var_cons_Byte;
+static AFun var_cons_Short;
+static AFun var_cons_Int;
+static AFun var_cons_Long;
+static AFun var_cons_Char;
+static AFun var_cons_Float0;
+static AFun var_cons_Double;
+static AFun var_cons_Null;
+static AFun var_cons_Bool;
+static AFun var_cons_True;
+static AFun var_cons_False;
+static AFun var_cons_Float1;
+static AFun var_cons_Deci;
+static AFun var_cons_Hexa;
+static AFun var_cons_Octa;
+static AFun var_cons_Public;
+static AFun var_cons_Private;
+static AFun var_cons_Protected;
+static AFun var_cons_Abstract;
+static AFun var_cons_Final;
+static AFun var_cons_Static;
+static AFun var_cons_Native;
+static AFun var_cons_Transient;
+static AFun var_cons_Volatile;
+static AFun var_cons_Synchronized0;
+static AFun var_cons_StrictFP;
+static AFun var_cons_Id;
+static void init_cons (void)
+{
+var_cons_Parenthetical = ATmakeAFun("Parenthetical", 1, ATfalse);
+ATprotectAFun(var_cons_Parenthetical);
+var_cons_String = ATmakeAFun("String", 1, ATfalse);
+ATprotectAFun(var_cons_String);
+var_cons_Chars = ATmakeAFun("Chars", 1, ATfalse);
+ATprotectAFun(var_cons_Chars);
+var_cons_None = ATmakeAFun("None", 0, ATfalse);
+ATprotectAFun(var_cons_None);
+var_cons_Some = ATmakeAFun("Some", 1, ATfalse);
+ATprotectAFun(var_cons_Some);
+var_cons_NamedEscape = ATmakeAFun("NamedEscape", 1, ATfalse);
+ATprotectAFun(var_cons_NamedEscape);
+var_cons_OctaEscape1 = ATmakeAFun("OctaEscape1", 1, ATfalse);
+ATprotectAFun(var_cons_OctaEscape1);
+var_cons_OctaEscape2 = ATmakeAFun("OctaEscape2", 1, ATfalse);
+ATprotectAFun(var_cons_OctaEscape2);
+var_cons_OctaEscape3 = ATmakeAFun("OctaEscape3", 1, ATfalse);
+ATprotectAFun(var_cons_OctaEscape3);
+var_cons_Assign = ATmakeAFun("Assign", 2, ATfalse);
+ATprotectAFun(var_cons_Assign);
+var_cons_AssignMul = ATmakeAFun("AssignMul", 2, ATfalse);
+ATprotectAFun(var_cons_AssignMul);
+var_cons_AssignDiv = ATmakeAFun("AssignDiv", 2, ATfalse);
+ATprotectAFun(var_cons_AssignDiv);
+var_cons_AssignRemain = ATmakeAFun("AssignRemain", 2, ATfalse);
+ATprotectAFun(var_cons_AssignRemain);
+var_cons_AssignPlus = ATmakeAFun("AssignPlus", 2, ATfalse);
+ATprotectAFun(var_cons_AssignPlus);
+var_cons_AssignMinus = ATmakeAFun("AssignMinus", 2, ATfalse);
+ATprotectAFun(var_cons_AssignMinus);
+var_cons_AssignLeftShift = ATmakeAFun("AssignLeftShift", 2, ATfalse);
+ATprotectAFun(var_cons_AssignLeftShift);
+var_cons_AssignRightShift = ATmakeAFun("AssignRightShift", 2, ATfalse);
+ATprotectAFun(var_cons_AssignRightShift);
+var_cons_AssignURightShift = ATmakeAFun("AssignURightShift", 2, ATfalse);
+ATprotectAFun(var_cons_AssignURightShift);
+var_cons_AssignAnd = ATmakeAFun("AssignAnd", 2, ATfalse);
+ATprotectAFun(var_cons_AssignAnd);
+var_cons_AssignExcOr = ATmakeAFun("AssignExcOr", 2, ATfalse);
+ATprotectAFun(var_cons_AssignExcOr);
+var_cons_AssignOr = ATmakeAFun("AssignOr", 2, ATfalse);
+ATprotectAFun(var_cons_AssignOr);
+var_cons_InstanceOf = ATmakeAFun("InstanceOf", 2, ATfalse);
+ATprotectAFun(var_cons_InstanceOf);
+var_cons_Mul = ATmakeAFun("Mul", 2, ATfalse);
+ATprotectAFun(var_cons_Mul);
+var_cons_Div = ATmakeAFun("Div", 2, ATfalse);
+ATprotectAFun(var_cons_Div);
+var_cons_Remain = ATmakeAFun("Remain", 2, ATfalse);
+ATprotectAFun(var_cons_Remain);
+var_cons_Plus2 = ATmakeAFun("Plus", 2, ATfalse);
+ATprotectAFun(var_cons_Plus2);
+var_cons_Minus2 = ATmakeAFun("Minus", 2, ATfalse);
+ATprotectAFun(var_cons_Minus2);
+var_cons_LeftShift = ATmakeAFun("LeftShift", 2, ATfalse);
+ATprotectAFun(var_cons_LeftShift);
+var_cons_RightShift = ATmakeAFun("RightShift", 2, ATfalse);
+ATprotectAFun(var_cons_RightShift);
+var_cons_URightShift = ATmakeAFun("URightShift", 2, ATfalse);
+ATprotectAFun(var_cons_URightShift);
+var_cons_Lt = ATmakeAFun("Lt", 2, ATfalse);
+ATprotectAFun(var_cons_Lt);
+var_cons_Gt = ATmakeAFun("Gt", 2, ATfalse);
+ATprotectAFun(var_cons_Gt);
+var_cons_LtEq = ATmakeAFun("LtEq", 2, ATfalse);
+ATprotectAFun(var_cons_LtEq);
+var_cons_GtEq = ATmakeAFun("GtEq", 2, ATfalse);
+ATprotectAFun(var_cons_GtEq);
+var_cons_Eq = ATmakeAFun("Eq", 2, ATfalse);
+ATprotectAFun(var_cons_Eq);
+var_cons_NotEq = ATmakeAFun("NotEq", 2, ATfalse);
+ATprotectAFun(var_cons_NotEq);
+var_cons_LazyAnd = ATmakeAFun("LazyAnd", 2, ATfalse);
+ATprotectAFun(var_cons_LazyAnd);
+var_cons_LazyOr = ATmakeAFun("LazyOr", 2, ATfalse);
+ATprotectAFun(var_cons_LazyOr);
+var_cons_And = ATmakeAFun("And", 2, ATfalse);
+ATprotectAFun(var_cons_And);
+var_cons_ExcOr = ATmakeAFun("ExcOr", 2, ATfalse);
+ATprotectAFun(var_cons_ExcOr);
+var_cons_Or = ATmakeAFun("Or", 2, ATfalse);
+ATprotectAFun(var_cons_Or);
+var_cons_Cond = ATmakeAFun("Cond", 3, ATfalse);
+ATprotectAFun(var_cons_Cond);
+var_cons_Plus1 = ATmakeAFun("Plus", 1, ATfalse);
+ATprotectAFun(var_cons_Plus1);
+var_cons_Minus1 = ATmakeAFun("Minus", 1, ATfalse);
+ATprotectAFun(var_cons_Minus1);
+var_cons_PreIncr = ATmakeAFun("PreIncr", 1, ATfalse);
+ATprotectAFun(var_cons_PreIncr);
+var_cons_PreDecr = ATmakeAFun("PreDecr", 1, ATfalse);
+ATprotectAFun(var_cons_PreDecr);
+var_cons_Complement = ATmakeAFun("Complement", 1, ATfalse);
+ATprotectAFun(var_cons_Complement);
+var_cons_Not = ATmakeAFun("Not", 1, ATfalse);
+ATprotectAFun(var_cons_Not);
+var_cons_CastPrim = ATmakeAFun("CastPrim", 2, ATfalse);
+ATprotectAFun(var_cons_CastPrim);
+var_cons_CastRef = ATmakeAFun("CastRef", 2, ATfalse);
+ATprotectAFun(var_cons_CastRef);
+var_cons_PostIncr = ATmakeAFun("PostIncr", 1, ATfalse);
+ATprotectAFun(var_cons_PostIncr);
+var_cons_PostDecr = ATmakeAFun("PostDecr", 1, ATfalse);
+ATprotectAFun(var_cons_PostDecr);
+var_cons_Invoke = ATmakeAFun("Invoke", 2, ATfalse);
+ATprotectAFun(var_cons_Invoke);
+var_cons_Method1 = ATmakeAFun("Method", 1, ATfalse);
+ATprotectAFun(var_cons_Method1);
+var_cons_Method3 = ATmakeAFun("Method", 3, ATfalse);
+ATprotectAFun(var_cons_Method3);
+var_cons_SuperMethod = ATmakeAFun("SuperMethod", 2, ATfalse);
+ATprotectAFun(var_cons_SuperMethod);
+var_cons_QSuperMethod = ATmakeAFun("QSuperMethod", 3, ATfalse);
+ATprotectAFun(var_cons_QSuperMethod);
+var_cons_GenericMethod = ATmakeAFun("GenericMethod", 3, ATfalse);
+ATprotectAFun(var_cons_GenericMethod);
+var_cons_ArrayAccess = ATmakeAFun("ArrayAccess", 2, ATfalse);
+ATprotectAFun(var_cons_ArrayAccess);
+var_cons_Field = ATmakeAFun("Field", 2, ATfalse);
+ATprotectAFun(var_cons_Field);
+var_cons_SuperField = ATmakeAFun("SuperField", 1, ATfalse);
+ATprotectAFun(var_cons_SuperField);
+var_cons_QSuperField = ATmakeAFun("QSuperField", 2, ATfalse);
+ATprotectAFun(var_cons_QSuperField);
+var_cons_NewArray = ATmakeAFun("NewArray", 3, ATfalse);
+ATprotectAFun(var_cons_NewArray);
+var_cons_UnboundWld = ATmakeAFun("UnboundWld", 1, ATfalse);
+ATprotectAFun(var_cons_UnboundWld);
+var_cons_Dim1 = ATmakeAFun("Dim", 1, ATfalse);
+ATprotectAFun(var_cons_Dim1);
+var_cons_Dim0 = ATmakeAFun("Dim", 0, ATfalse);
+ATprotectAFun(var_cons_Dim0);
+var_cons_NewInstance = ATmakeAFun("NewInstance", 4, ATfalse);
+ATprotectAFun(var_cons_NewInstance);
+var_cons_QNewInstance = ATmakeAFun("QNewInstance", 6, ATfalse);
+ATprotectAFun(var_cons_QNewInstance);
+var_cons_Lit = ATmakeAFun("Lit", 1, ATfalse);
+ATprotectAFun(var_cons_Lit);
+var_cons_Class = ATmakeAFun("Class", 1, ATfalse);
+ATprotectAFun(var_cons_Class);
+var_cons_VoidClass = ATmakeAFun("VoidClass", 0, ATfalse);
+ATprotectAFun(var_cons_VoidClass);
+var_cons_This = ATmakeAFun("This", 0, ATfalse);
+ATprotectAFun(var_cons_This);
+var_cons_QThis = ATmakeAFun("QThis", 1, ATfalse);
+ATprotectAFun(var_cons_QThis);
+var_cons_PackageDec = ATmakeAFun("PackageDec", 2, ATfalse);
+ATprotectAFun(var_cons_PackageDec);
+var_cons_TypeImportDec = ATmakeAFun("TypeImportDec", 1, ATfalse);
+ATprotectAFun(var_cons_TypeImportDec);
+var_cons_TypeImportOnDemandDec = ATmakeAFun("TypeImportOnDemandDec", 1, ATfalse);
+ATprotectAFun(var_cons_TypeImportOnDemandDec);
+var_cons_StaticImportDec = ATmakeAFun("StaticImportDec", 2, ATfalse);
+ATprotectAFun(var_cons_StaticImportDec);
+var_cons_StaticImportOnDemandDec = ATmakeAFun("StaticImportOnDemandDec", 1, ATfalse);
+ATprotectAFun(var_cons_StaticImportOnDemandDec);
+var_cons_AnnoDec = ATmakeAFun("AnnoDec", 2, ATfalse);
+ATprotectAFun(var_cons_AnnoDec);
+var_cons_AnnoDecHead = ATmakeAFun("AnnoDecHead", 2, ATfalse);
+ATprotectAFun(var_cons_AnnoDecHead);
+var_cons_AnnoMethodDec = ATmakeAFun("AnnoMethodDec", 4, ATfalse);
+ATprotectAFun(var_cons_AnnoMethodDec);
+var_cons_Semicolon = ATmakeAFun("Semicolon", 0, ATfalse);
+ATprotectAFun(var_cons_Semicolon);
+var_cons_DefaultVal = ATmakeAFun("DefaultVal", 1, ATfalse);
+ATprotectAFun(var_cons_DefaultVal);
+var_cons_AbstractMethodDec = ATmakeAFun("AbstractMethodDec", 6, ATfalse);
+ATprotectAFun(var_cons_AbstractMethodDec);
+var_cons_DeprAbstractMethodDec = ATmakeAFun("DeprAbstractMethodDec", 7, ATfalse);
+ATprotectAFun(var_cons_DeprAbstractMethodDec);
+var_cons_ConstantDec = ATmakeAFun("ConstantDec", 3, ATfalse);
+ATprotectAFun(var_cons_ConstantDec);
+var_cons_InterfaceDec = ATmakeAFun("InterfaceDec", 2, ATfalse);
+ATprotectAFun(var_cons_InterfaceDec);
+var_cons_InterfaceDecHead = ATmakeAFun("InterfaceDecHead", 4, ATfalse);
+ATprotectAFun(var_cons_InterfaceDecHead);
+var_cons_ExtendsInterfaces = ATmakeAFun("ExtendsInterfaces", 1, ATfalse);
+ATprotectAFun(var_cons_ExtendsInterfaces);
+var_cons_EnumDec = ATmakeAFun("EnumDec", 2, ATfalse);
+ATprotectAFun(var_cons_EnumDec);
+var_cons_EnumDecHead = ATmakeAFun("EnumDecHead", 3, ATfalse);
+ATprotectAFun(var_cons_EnumDecHead);
+var_cons_EnumBody = ATmakeAFun("EnumBody", 2, ATfalse);
+ATprotectAFun(var_cons_EnumBody);
+var_cons_EnumConst = ATmakeAFun("EnumConst", 3, ATfalse);
+ATprotectAFun(var_cons_EnumConst);
+var_cons_EnumBodyDecs = ATmakeAFun("EnumBodyDecs", 1, ATfalse);
+ATprotectAFun(var_cons_EnumBodyDecs);
+var_cons_ConstrDec = ATmakeAFun("ConstrDec", 2, ATfalse);
+ATprotectAFun(var_cons_ConstrDec);
+var_cons_ConstrDecHead = ATmakeAFun("ConstrDecHead", 5, ATfalse);
+ATprotectAFun(var_cons_ConstrDecHead);
+var_cons_ConstrBody = ATmakeAFun("ConstrBody", 2, ATfalse);
+ATprotectAFun(var_cons_ConstrBody);
+var_cons_AltConstrInv = ATmakeAFun("AltConstrInv", 2, ATfalse);
+ATprotectAFun(var_cons_AltConstrInv);
+var_cons_SuperConstrInv = ATmakeAFun("SuperConstrInv", 2, ATfalse);
+ATprotectAFun(var_cons_SuperConstrInv);
+var_cons_QSuperConstrInv = ATmakeAFun("QSuperConstrInv", 3, ATfalse);
+ATprotectAFun(var_cons_QSuperConstrInv);
+var_cons_StaticInit = ATmakeAFun("StaticInit", 1, ATfalse);
+ATprotectAFun(var_cons_StaticInit);
+var_cons_InstanceInit = ATmakeAFun("InstanceInit", 1, ATfalse);
+ATprotectAFun(var_cons_InstanceInit);
+var_cons_Empty = ATmakeAFun("Empty", 0, ATfalse);
+ATprotectAFun(var_cons_Empty);
+var_cons_Labeled = ATmakeAFun("Labeled", 2, ATfalse);
+ATprotectAFun(var_cons_Labeled);
+var_cons_ExprStm = ATmakeAFun("ExprStm", 1, ATfalse);
+ATprotectAFun(var_cons_ExprStm);
+var_cons_If2 = ATmakeAFun("If", 2, ATfalse);
+ATprotectAFun(var_cons_If2);
+var_cons_If3 = ATmakeAFun("If", 3, ATfalse);
+ATprotectAFun(var_cons_If3);
+var_cons_AssertStm1 = ATmakeAFun("AssertStm", 1, ATfalse);
+ATprotectAFun(var_cons_AssertStm1);
+var_cons_AssertStm2 = ATmakeAFun("AssertStm", 2, ATfalse);
+ATprotectAFun(var_cons_AssertStm2);
+var_cons_Switch = ATmakeAFun("Switch", 2, ATfalse);
+ATprotectAFun(var_cons_Switch);
+var_cons_SwitchBlock = ATmakeAFun("SwitchBlock", 2, ATfalse);
+ATprotectAFun(var_cons_SwitchBlock);
+var_cons_SwitchGroup = ATmakeAFun("SwitchGroup", 2, ATfalse);
+ATprotectAFun(var_cons_SwitchGroup);
+var_cons_Case = ATmakeAFun("Case", 1, ATfalse);
+ATprotectAFun(var_cons_Case);
+var_cons_Default = ATmakeAFun("Default", 0, ATfalse);
+ATprotectAFun(var_cons_Default);
+var_cons_While = ATmakeAFun("While", 2, ATfalse);
+ATprotectAFun(var_cons_While);
+var_cons_DoWhile = ATmakeAFun("DoWhile", 2, ATfalse);
+ATprotectAFun(var_cons_DoWhile);
+var_cons_For = ATmakeAFun("For", 4, ATfalse);
+ATprotectAFun(var_cons_For);
+var_cons_ForEach = ATmakeAFun("ForEach", 3, ATfalse);
+ATprotectAFun(var_cons_ForEach);
+var_cons_Break = ATmakeAFun("Break", 1, ATfalse);
+ATprotectAFun(var_cons_Break);
+var_cons_Continue = ATmakeAFun("Continue", 1, ATfalse);
+ATprotectAFun(var_cons_Continue);
+var_cons_Return = ATmakeAFun("Return", 1, ATfalse);
+ATprotectAFun(var_cons_Return);
+var_cons_Throw = ATmakeAFun("Throw", 1, ATfalse);
+ATprotectAFun(var_cons_Throw);
+var_cons_Synchronized2 = ATmakeAFun("Synchronized", 2, ATfalse);
+ATprotectAFun(var_cons_Synchronized2);
+var_cons_Try2 = ATmakeAFun("Try", 2, ATfalse);
+ATprotectAFun(var_cons_Try2);
+var_cons_Try3 = ATmakeAFun("Try", 3, ATfalse);
+ATprotectAFun(var_cons_Try3);
+var_cons_Catch = ATmakeAFun("Catch", 2, ATfalse);
+ATprotectAFun(var_cons_Catch);
+var_cons_LocalVarDecStm = ATmakeAFun("LocalVarDecStm", 1, ATfalse);
+ATprotectAFun(var_cons_LocalVarDecStm);
+var_cons_LocalVarDec = ATmakeAFun("LocalVarDec", 3, ATfalse);
+ATprotectAFun(var_cons_LocalVarDec);
+var_cons_Block = ATmakeAFun("Block", 1, ATfalse);
+ATprotectAFun(var_cons_Block);
+var_cons_ClassDecStm = ATmakeAFun("ClassDecStm", 1, ATfalse);
+ATprotectAFun(var_cons_ClassDecStm);
+var_cons_MethodDec = ATmakeAFun("MethodDec", 2, ATfalse);
+ATprotectAFun(var_cons_MethodDec);
+var_cons_MethodDecHead = ATmakeAFun("MethodDecHead", 6, ATfalse);
+ATprotectAFun(var_cons_MethodDecHead);
+var_cons_DeprMethodDecHead = ATmakeAFun("DeprMethodDecHead", 7, ATfalse);
+ATprotectAFun(var_cons_DeprMethodDecHead);
+var_cons_Void = ATmakeAFun("Void", 0, ATfalse);
+ATprotectAFun(var_cons_Void);
+var_cons_Param = ATmakeAFun("Param", 3, ATfalse);
+ATprotectAFun(var_cons_Param);
+var_cons_VarArityParam = ATmakeAFun("VarArityParam", 3, ATfalse);
+ATprotectAFun(var_cons_VarArityParam);
+var_cons_ThrowsDec = ATmakeAFun("ThrowsDec", 1, ATfalse);
+ATprotectAFun(var_cons_ThrowsDec);
+var_cons_NoMethodBody = ATmakeAFun("NoMethodBody", 0, ATfalse);
+ATprotectAFun(var_cons_NoMethodBody);
+var_cons_ArrayInit = ATmakeAFun("ArrayInit", 1, ATfalse);
+ATprotectAFun(var_cons_ArrayInit);
+var_cons_Anno = ATmakeAFun("Anno", 2, ATfalse);
+ATprotectAFun(var_cons_Anno);
+var_cons_SingleElemAnno = ATmakeAFun("SingleElemAnno", 2, ATfalse);
+ATprotectAFun(var_cons_SingleElemAnno);
+var_cons_MarkerAnno = ATmakeAFun("MarkerAnno", 1, ATfalse);
+ATprotectAFun(var_cons_MarkerAnno);
+var_cons_ElemValPair = ATmakeAFun("ElemValPair", 2, ATfalse);
+ATprotectAFun(var_cons_ElemValPair);
+var_cons_ElemValArrayInit = ATmakeAFun("ElemValArrayInit", 1, ATfalse);
+ATprotectAFun(var_cons_ElemValArrayInit);
+var_cons_FieldDec = ATmakeAFun("FieldDec", 3, ATfalse);
+ATprotectAFun(var_cons_FieldDec);
+var_cons_VarDec1 = ATmakeAFun("VarDec", 1, ATfalse);
+ATprotectAFun(var_cons_VarDec1);
+var_cons_VarDec2 = ATmakeAFun("VarDec", 2, ATfalse);
+ATprotectAFun(var_cons_VarDec2);
+var_cons_ArrayVarDecId = ATmakeAFun("ArrayVarDecId", 2, ATfalse);
+ATprotectAFun(var_cons_ArrayVarDecId);
+var_cons_ClassDec = ATmakeAFun("ClassDec", 2, ATfalse);
+ATprotectAFun(var_cons_ClassDec);
+var_cons_ClassBody = ATmakeAFun("ClassBody", 1, ATfalse);
+ATprotectAFun(var_cons_ClassBody);
+var_cons_ClassDecHead = ATmakeAFun("ClassDecHead", 5, ATfalse);
+ATprotectAFun(var_cons_ClassDecHead);
+var_cons_SuperDec = ATmakeAFun("SuperDec", 1, ATfalse);
+ATprotectAFun(var_cons_SuperDec);
+var_cons_ImplementsDec = ATmakeAFun("ImplementsDec", 1, ATfalse);
+ATprotectAFun(var_cons_ImplementsDec);
+var_cons_CompilationUnit = ATmakeAFun("CompilationUnit", 3, ATfalse);
+ATprotectAFun(var_cons_CompilationUnit);
+var_cons_PackageName = ATmakeAFun("PackageName", 1, ATfalse);
+ATprotectAFun(var_cons_PackageName);
+var_cons_AmbName1 = ATmakeAFun("AmbName", 1, ATfalse);
+ATprotectAFun(var_cons_AmbName1);
+var_cons_AmbName2 = ATmakeAFun("AmbName", 2, ATfalse);
+ATprotectAFun(var_cons_AmbName2);
+var_cons_TypeName1 = ATmakeAFun("TypeName", 1, ATfalse);
+ATprotectAFun(var_cons_TypeName1);
+var_cons_TypeName2 = ATmakeAFun("TypeName", 2, ATfalse);
+ATprotectAFun(var_cons_TypeName2);
+var_cons_ExprName1 = ATmakeAFun("ExprName", 1, ATfalse);
+ATprotectAFun(var_cons_ExprName1);
+var_cons_ExprName2 = ATmakeAFun("ExprName", 2, ATfalse);
+ATprotectAFun(var_cons_ExprName2);
+var_cons_MethodName1 = ATmakeAFun("MethodName", 1, ATfalse);
+ATprotectAFun(var_cons_MethodName1);
+var_cons_MethodName2 = ATmakeAFun("MethodName", 2, ATfalse);
+ATprotectAFun(var_cons_MethodName2);
+var_cons_PackageOrTypeName1 = ATmakeAFun("PackageOrTypeName", 1, ATfalse);
+ATprotectAFun(var_cons_PackageOrTypeName1);
+var_cons_PackageOrTypeName2 = ATmakeAFun("PackageOrTypeName", 2, ATfalse);
+ATprotectAFun(var_cons_PackageOrTypeName2);
+var_cons_TypeArgs = ATmakeAFun("TypeArgs", 1, ATfalse);
+ATprotectAFun(var_cons_TypeArgs);
+var_cons_Wildcard = ATmakeAFun("Wildcard", 1, ATfalse);
+ATprotectAFun(var_cons_Wildcard);
+var_cons_WildcardUpperBound = ATmakeAFun("WildcardUpperBound", 1, ATfalse);
+ATprotectAFun(var_cons_WildcardUpperBound);
+var_cons_WildcardLowerBound = ATmakeAFun("WildcardLowerBound", 1, ATfalse);
+ATprotectAFun(var_cons_WildcardLowerBound);
+var_cons_TypeParam = ATmakeAFun("TypeParam", 2, ATfalse);
+ATprotectAFun(var_cons_TypeParam);
+var_cons_TypeBound = ATmakeAFun("TypeBound", 1, ATfalse);
+ATprotectAFun(var_cons_TypeBound);
+var_cons_TypeParams = ATmakeAFun("TypeParams", 1, ATfalse);
+ATprotectAFun(var_cons_TypeParams);
+var_cons_ClassOrInterfaceType = ATmakeAFun("ClassOrInterfaceType", 2, ATfalse);
+ATprotectAFun(var_cons_ClassOrInterfaceType);
+var_cons_ClassType = ATmakeAFun("ClassType", 2, ATfalse);
+ATprotectAFun(var_cons_ClassType);
+var_cons_InterfaceType = ATmakeAFun("InterfaceType", 2, ATfalse);
+ATprotectAFun(var_cons_InterfaceType);
+var_cons_Member = ATmakeAFun("Member", 3, ATfalse);
+ATprotectAFun(var_cons_Member);
+var_cons_TypeVar = ATmakeAFun("TypeVar", 1, ATfalse);
+ATprotectAFun(var_cons_TypeVar);
+var_cons_ArrayType = ATmakeAFun("ArrayType", 1, ATfalse);
+ATprotectAFun(var_cons_ArrayType);
+var_cons_Boolean = ATmakeAFun("Boolean", 0, ATfalse);
+ATprotectAFun(var_cons_Boolean);
+var_cons_Byte = ATmakeAFun("Byte", 0, ATfalse);
+ATprotectAFun(var_cons_Byte);
+var_cons_Short = ATmakeAFun("Short", 0, ATfalse);
+ATprotectAFun(var_cons_Short);
+var_cons_Int = ATmakeAFun("Int", 0, ATfalse);
+ATprotectAFun(var_cons_Int);
+var_cons_Long = ATmakeAFun("Long", 0, ATfalse);
+ATprotectAFun(var_cons_Long);
+var_cons_Char = ATmakeAFun("Char", 0, ATfalse);
+ATprotectAFun(var_cons_Char);
+var_cons_Float0 = ATmakeAFun("Float", 0, ATfalse);
+ATprotectAFun(var_cons_Float0);
+var_cons_Double = ATmakeAFun("Double", 0, ATfalse);
+ATprotectAFun(var_cons_Double);
+var_cons_Null = ATmakeAFun("Null", 0, ATfalse);
+ATprotectAFun(var_cons_Null);
+var_cons_Bool = ATmakeAFun("Bool", 1, ATfalse);
+ATprotectAFun(var_cons_Bool);
+var_cons_True = ATmakeAFun("True", 0, ATfalse);
+ATprotectAFun(var_cons_True);
+var_cons_False = ATmakeAFun("False", 0, ATfalse);
+ATprotectAFun(var_cons_False);
+var_cons_Float1 = ATmakeAFun("Float", 1, ATfalse);
+ATprotectAFun(var_cons_Float1);
+var_cons_Deci = ATmakeAFun("Deci", 1, ATfalse);
+ATprotectAFun(var_cons_Deci);
+var_cons_Hexa = ATmakeAFun("Hexa", 1, ATfalse);
+ATprotectAFun(var_cons_Hexa);
+var_cons_Octa = ATmakeAFun("Octa", 1, ATfalse);
+ATprotectAFun(var_cons_Octa);
+var_cons_Public = ATmakeAFun("Public", 0, ATfalse);
+ATprotectAFun(var_cons_Public);
+var_cons_Private = ATmakeAFun("Private", 0, ATfalse);
+ATprotectAFun(var_cons_Private);
+var_cons_Protected = ATmakeAFun("Protected", 0, ATfalse);
+ATprotectAFun(var_cons_Protected);
+var_cons_Abstract = ATmakeAFun("Abstract", 0, ATfalse);
+ATprotectAFun(var_cons_Abstract);
+var_cons_Final = ATmakeAFun("Final", 0, ATfalse);
+ATprotectAFun(var_cons_Final);
+var_cons_Static = ATmakeAFun("Static", 0, ATfalse);
+ATprotectAFun(var_cons_Static);
+var_cons_Native = ATmakeAFun("Native", 0, ATfalse);
+ATprotectAFun(var_cons_Native);
+var_cons_Transient = ATmakeAFun("Transient", 0, ATfalse);
+ATprotectAFun(var_cons_Transient);
+var_cons_Volatile = ATmakeAFun("Volatile", 0, ATfalse);
+ATprotectAFun(var_cons_Volatile);
+var_cons_Synchronized0 = ATmakeAFun("Synchronized", 0, ATfalse);
+ATprotectAFun(var_cons_Synchronized0);
+var_cons_StrictFP = ATmakeAFun("StrictFP", 0, ATfalse);
+ATprotectAFun(var_cons_StrictFP);
+var_cons_Id = ATmakeAFun("Id", 1, ATfalse);
+ATprotectAFun(var_cons_Id);
+}
+static void print (ATerm);
+static void print_cons_Parenthetical (ATerm);
+static void print_cons_String (ATerm);
+static void print_cons_Chars (ATerm);
+static void print_cons_None (ATerm);
+static void print_cons_Some (ATerm);
+static void print_cons_NamedEscape (ATerm);
+static void print_cons_OctaEscape1 (ATerm);
+static void print_cons_OctaEscape2 (ATerm);
+static void print_cons_OctaEscape3 (ATerm);
+static void print_cons_Assign (ATerm);
+static void print_cons_AssignMul (ATerm);
+static void print_cons_AssignDiv (ATerm);
+static void print_cons_AssignRemain (ATerm);
+static void print_cons_AssignPlus (ATerm);
+static void print_cons_AssignMinus (ATerm);
+static void print_cons_AssignLeftShift (ATerm);
+static void print_cons_AssignRightShift (ATerm);
+static void print_cons_AssignURightShift (ATerm);
+static void print_cons_AssignAnd (ATerm);
+static void print_cons_AssignExcOr (ATerm);
+static void print_cons_AssignOr (ATerm);
+static void print_cons_InstanceOf (ATerm);
+static void print_cons_Mul (ATerm);
+static void print_cons_Div (ATerm);
+static void print_cons_Remain (ATerm);
+static void print_cons_Plus2 (ATerm);
+static void print_cons_Minus2 (ATerm);
+static void print_cons_LeftShift (ATerm);
+static void print_cons_RightShift (ATerm);
+static void print_cons_URightShift (ATerm);
+static void print_cons_Lt (ATerm);
+static void print_cons_Gt (ATerm);
+static void print_cons_LtEq (ATerm);
+static void print_cons_GtEq (ATerm);
+static void print_cons_Eq (ATerm);
+static void print_cons_NotEq (ATerm);
+static void print_cons_LazyAnd (ATerm);
+static void print_cons_LazyOr (ATerm);
+static void print_cons_And (ATerm);
+static void print_cons_ExcOr (ATerm);
+static void print_cons_Or (ATerm);
+static void print_cons_Cond (ATerm);
+static void print_cons_Plus1 (ATerm);
+static void print_cons_Minus1 (ATerm);
+static void print_cons_PreIncr (ATerm);
+static void print_cons_PreDecr (ATerm);

(5585 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Fri Aug 28 15:57:58 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 28 Aug 2009 13:57:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19890 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling:
	building wizards
Message-ID: <200908281357.n7SDvPlM010133@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-28 13:57:58 +0000 (Fri, 28 Aug 2009)
New Revision: 19890

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19890&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java

Log:
Catch StrategoErrorExit for prettier exceptions.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-28 13:57:34 UTC (rev 19889)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-28 13:57:58 UTC (rev 19890)
@@ -18,6 +18,7 @@
 import org.strategoxt.imp.runtime.parser.ast.AstMessageHandler;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;
+import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.lang.compat.SSL_EXT_java_call;
 import org.strategoxt.libstratego_lib.dr_scope_all_end_0_0;
@@ -114,6 +115,10 @@
 		try {
 			Debug.startTimer();
 			return sdf2imp_jvm_0_0.instance.invoke(context, input);
+		} catch (StrategoErrorExit e) {
+			Environment.logException("Fatal error exit in dynamic builder", e);
+			messageHandler.addMarkerFirstLine(mainFile, "Error building descriptor:" + e.getMessage(), SEVERITY_ERROR);
+			return null;
 		} catch (StrategoExit e) {
 			Environment.logException("Unexpected exit in dynamic builder", e);
 			context.printStackTrace();

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-28 13:57:34 UTC (rev 19889)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-28 13:57:58 UTC (rev 19890)
@@ -26,6 +26,7 @@
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;
+import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoException;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.permissivegrammars.make_permissive;
@@ -113,6 +114,9 @@
 				String jar1 = org.strategoxt.libstratego_lib.Main.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 				String jar2 = make_permissive.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 				sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "-jar", jar1, jar2);
+			} catch (StrategoErrorExit e) {
+				Environment.logException(e);
+				throw new StrategoErrorExit("Project builder failed: " + e.getMessage());
 			} catch (StrategoExit e) {
 				if (e.getValue() != 0) {
 					throw new StrategoException("Project builder failed. Log follows\n\n"



From L.C.L.Kats at tudelft.nl  Fri Aug 28 15:59:25 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 28 Aug 2009 13:59:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19891 - LennartKats -
	strategoxt/trunk/stratego-libraries/lib/spec/lang
Message-ID: <200908281358.n7SDwpQv010171@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-28 13:59:25 +0000 (Fri, 28 Aug 2009)
New Revision: 19891

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19891&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str

Log:
Marked report-with-failure strategy as obsolete.

Changes:

Modified: strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str	2009-08-28 13:57:58 UTC (rev 19890)
+++ strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str	2009-08-28 13:59:25 UTC (rev 19891)
@@ -19,7 +19,7 @@
    *       failures raised by with clauses and uses of this strategy.
    */
   with(s|message) =
-    where(s <+ report-with-failure(|message, <prim("SSL_stacktrace_get_all_frame_names")>))
+    where(s <+ report-failure(|message, <prim("SSL_stacktrace_get_all_frame_names")>))
   
   /**
    * @obsolete
@@ -31,6 +31,7 @@
     ; report-failure(log(|Critical(), message, term); exit)
   
   /**
+   * @obsolete
    * @internal
    */
   report-with-failure(|message, trace) =



From L.C.L.Kats at tudelft.nl  Fri Aug 28 16:30:01 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 28 Aug 2009 14:30:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19892 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp: .
	lib project services
Message-ID: <200908281429.n7SETRqq010799@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-28 14:30:01 +0000 (Fri, 28 Aug 2009)
New Revision: 19892

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19892&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/common.str

Log:
Changed error reports to fatal-err to improve Eclipse error reporting.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str	2009-08-28 13:59:25 UTC (rev 19891)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str	2009-08-28 14:30:01 UTC (rev 19892)
@@ -22,11 +22,10 @@
     )
   ; where(
       collect-om(?syntax(_))
-    ; map(grammar2prodrules <+ err(|"Rewriting syntax section failed"); fail)
+    ; map(grammar2prodrules <+ fatal-err(|"sdf2rtg: Rewriting syntax section failed"); fail)
     ; concat
     ; if ?[] then
-        log(|Error(), "No production rules in RTG. Did you specify the right main module?")
-        ; <xtc-exit> 1
+        fatal-err(|"No production rules in RTG. Did you specify the right main module?")
       else
         ?prods
       end
@@ -37,8 +36,7 @@
      */
   ; collect-om(is-start-prod)
   ; if ?[] then
-      log(|Error(), "No start productions found. Did you specify any start-symbols in the syntax definition?")
-      ; <xtc-exit> 1
+      fatal-err(|"No start productions found. Did you specify any start-symbols in the syntax definition?")
     else
       map(start-prod2tree; ?Ref(<id>) <+ err(!"Rewriting production to nonterm failed"); fail)
     ; !RTG(Start(<id>), ProdRules(prods))
@@ -62,7 +60,7 @@
           <+ opt2prodrule
           <+ inj2prodrule
           <+ prod2prodrule
-          <+ err(|"Rewriting production failed"); fail
+          <+ fatal-err(|"sdf2rtg: Rewriting production failed"); fail
           )
         ; where(try(<cycle-error> (p, <id>)))
         })
@@ -79,8 +77,7 @@
 
   cycle-error =
     ?(p, rtg |[ A -> A ]|)
-    ; log(|Critical(), "production rule resulted in a direct cycle", p)
-    ; <exit> 1
+    ; <fatal-err(|"production rule resulted in a direct cycle")> p
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-28 13:59:25 UTC (rev 19891)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-28 14:30:01 UTC (rev 19892)
@@ -56,8 +56,7 @@
     , rules(JarLocation := <id>);
       list-loop(
         if not(file-exists) then
-          err(|"File does not exist");
-          fail
+          fatal-err(|"File does not exist")
         end
       )
     , !"-jar <paths>          Set jar files to include (optional)"
@@ -69,8 +68,7 @@
     , parameterized-sort-to-rtg-sort;
       if is-substring(!",") then
         // TODO: Multiple start symbols
-        err(|"Multiple start symbols not supported yet, please specify a single start symbol");
-        fail
+        fatal-err(|"Multiple start symbols not supported yet, please specify a single start symbol")
       end;
       rules(StartSymbol := <id>)
     , !"-s <start symbol>     Set start symbol"

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-28 13:59:25 UTC (rev 19891)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-28 14:30:01 UTC (rev 19892)
@@ -14,7 +14,7 @@
 strategies
   
   copy-or-create-parse-table =
-    copy-parse-table <+ xtc-ensure-file; create-parse-table <+ err(|"Could not copy or create parse table")
+    copy-parse-table <+ xtc-ensure-file; create-parse-table <+ fatal-err(|"Could not copy or create parse table")
   
   copy-parse-table =
     where(

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/common.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/common.str	2009-08-28 13:59:25 UTC (rev 19891)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/common.str	2009-08-28 14:30:01 UTC (rev 19892)
@@ -70,6 +70,6 @@
       // FIXME: Fail if unknown sort found (temporarily had to disable this)
       // TODO: Renamed sorts like OptExtendsInterfaces0_Java need special treatment
       //       looks like sdf2rtg needs to be adapted to not perform renaming like this!
-      err(|"Unknown sort referenced");
+      fatal-err(|"Unknown sort referenced");
       fail
     )



From L.C.L.Kats at tudelft.nl  Sat Aug 29 17:00:04 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 29 Aug 2009 15:00:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19893 - LennartKats -
	spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr
Message-ID: <200908291459.n7TExTEb026724@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-29 15:00:04 +0000 (Sat, 29 Aug 2009)
New Revision: 19893

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19893&view=rev

Modified:
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseNode.java

Log:
Performance fixes.

Changes:

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java	2009-08-28 14:30:01 UTC (rev 19892)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java	2009-08-29 15:00:04 UTC (rev 19893)
@@ -356,13 +356,13 @@
             Tools.debug("filterTree(<nodes>) - ", args);
         }
         
-        List<IParseNode> newArgs = new LinkedList<IParseNode>();
-        boolean changed = false;
+        List<IParseNode> newArgs = new ArrayList<IParseNode>();
+        // boolean changed = false;
 
         for (IParseNode n : args) {
             IParseNode filtered = filterTree(n, false);
             
-            changed = !filtered.equals(n) || changed;
+            // changed = !filtered.equals(n) || changed;
             newArgs.add(filtered);
         }
 
@@ -433,7 +433,7 @@
             Tools.debug("applyRightAssociativeFilter() - ", t);
         }
         
-        List<IParseNode> newAmbiguities = new LinkedList<IParseNode>();
+        List<IParseNode> newAmbiguities = new ArrayList<IParseNode>();
         List<IParseNode> kids = t.getKids();
         IParseNode firstKid = kids.get(0);
         
@@ -479,7 +479,7 @@
         
         List<IParseNode> newAmbiguities = new ArrayList<IParseNode>();
         List<IParseNode> kids = t.getKids();
-        List<IParseNode> newKids = new LinkedList<IParseNode>();
+        List<IParseNode> newKids = new ArrayList<IParseNode>();
         
         int l0 = prodLabel.labelNumber;
         int kidnumber = 0;
@@ -659,7 +659,7 @@
             Tools.debug("filterAmbiguities() - [", ambs.size(), "]");
         }
 
-        List<IParseNode> newAmbiguities = new LinkedList<IParseNode>();
+        List<IParseNode> newAmbiguities = new ArrayList<IParseNode>();
 
         for (IParseNode amb : ambs) {
             newAmbiguities.add(filterTree(amb, true));
@@ -689,7 +689,7 @@
         // SG_FilterAmbList
         
         boolean keepT = true;
-        List<IParseNode> r = new LinkedList<IParseNode>();
+        List<IParseNode> r = new ArrayList<IParseNode>();
 
         if (ambiguities.isEmpty()) {
             r.add(t);

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseNode.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseNode.java	2009-08-28 14:30:01 UTC (rev 19892)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseNode.java	2009-08-29 15:00:04 UTC (rev 19893)
@@ -66,6 +66,8 @@
     public boolean equals(Object obj) {
         if(!(obj instanceof ParseNode))
             return false;
+        if (o == this)
+            return true;
         ParseNode o = (ParseNode)obj;
         if(label != o.label)
             return false;



From L.C.L.Kats at tudelft.nl  Sat Aug 29 17:02:32 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 29 Aug 2009 15:02:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19894 - LennartKats -
	aster/trunk/runtime/aster/lang aster/trunk/trans/front
	strc-java/trunk/java/runtime/org/strategoxt/lang
Message-ID: <200908291501.n7TF1uQO026946@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-29 15:02:32 +0000 (Sat, 29 Aug 2009)
New Revision: 19894

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19894&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_eq_ignore_annos_0_1.java
Modified:
   aster/trunk/runtime/aster/lang/annotations.str
   aster/trunk/trans/front/include-library.str

Log:
New Java primitive for Aster's eq-ignore-annos.

Changes:

Modified: aster/trunk/runtime/aster/lang/annotations.str
===================================================================
--- aster/trunk/runtime/aster/lang/annotations.str	2009-08-29 15:00:04 UTC (rev 19893)
+++ aster/trunk/runtime/aster/lang/annotations.str	2009-08-29 15:02:32 UTC (rev 19894)
@@ -29,23 +29,30 @@
     prim("SSL_stacktrace_get_all_frame_names");
     report-failure
   
-  // TODO2: Optimize - eq-ignore-annos is expensive
-  
   eq-ignore-annos(|term) =
-    ?term
-  <+
-    where( // cheapish base check, must at least pass this
-      input-ctor := <get-constructor>{};
-      term-ctor  := <get-constructor> term{};
-      ?input-ctor
+    if-java-platform(
+      SRTS-EXT-eq-ignore-annos(|term)
     );
-    where(
-      term' := <aster-remove-annos> term
-    );
-    where(
-      ?term' <+ aster-remove-annos => term'
+    if-c-platform( // TODO2: Optimize - c-based eq-ignore-annos is expensive
+      ?term
+    <+
+      where( // cheapish base check, must at least pass this
+        is-string
+      < <is-string> term
+      + input-ctor := <get-constructor>{};
+        term-ctor  := <get-constructor> term{};
+        ?input-ctor
+      );
+      where(
+        term' := <aster-remove-annos> term
+      );
+      where(
+        ?term' <+ aster-remove-annos => term'
+      )
     )
   
+  external SRTS-EXT-eq-ignore-annos(|term)
+  
   aster-is-initialized(|all-parents) = where(get-parent(|all-parents))
   
   aster-node-path(|parent, all-parents, global-cache) =

Modified: aster/trunk/trans/front/include-library.str
===================================================================
--- aster/trunk/trans/front/include-library.str	2009-08-29 15:00:04 UTC (rev 19893)
+++ aster/trunk/trans/front/include-library.str	2009-08-29 15:02:32 UTC (rev 19894)
@@ -18,10 +18,13 @@
     AsterRuntimeLibrary
   <+
     import-term(aster-runtime.packed-rtree) => Specification(<id>);
-    map(all(filter(not(is-external-def))));
+    map(all(filter(is-library-excluded)));
     rules(AsterRuntimeLibrary := <id>)
   
+  is-library-excluded =
+    not(is-external-def) <+ ExtSDef("SRTS-EXT-eq-ignore-annos", [], [id])
+  
   aster-include-library:
     Module(name, decl*) -> Module(name, [decl*, lib*])
     with
-      lib* := <aster-runtime-library-term>
\ No newline at end of file
+      lib* := <aster-runtime-library-term>

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_eq_ignore_annos_0_1.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_eq_ignore_annos_0_1.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_eq_ignore_annos_0_1.java	2009-08-29 15:02:32 UTC (rev 19894)
@@ -0,0 +1,73 @@
+package org.strategoxt.lang;
+
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+import static org.strategoxt.lang.Term.*;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * A strategy that tests for term equality, ignoring all annotations.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SRTS_EXT_eq_ignore_annos_0_1 extends Strategy {
+	
+	public static SRTS_EXT_eq_ignore_annos_0_1 instance = new SRTS_EXT_eq_ignore_annos_0_1();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm t1, IStrategoTerm t2) {
+		return equalsIgnoreAnnos(context, t1, t2) ? t1 : null;
+	}
+	
+	private static boolean equalsIgnoreAnnos(Context context, IStrategoTerm t1, IStrategoTerm t2) {
+		int termType = t1.getTermType();
+		int type2 = t2.getTermType();
+		if (termType != type2) return false;
+		
+		switch (termType) {
+			case APPL:
+				return equalsIgnoreAnnosAppl(context, (IStrategoAppl) t1, (IStrategoAppl) t2);
+			case LIST: case TUPLE:
+				return equalsIgnoreAnnosList(context, t1, t2);
+			case INT:
+				return ((IStrategoInt) t1).intValue() == ((IStrategoInt) t2).intValue();
+			case REAL:
+				return ((IStrategoReal) t1).realValue() == ((IStrategoReal) t2).realValue();
+			case STRING:
+				return ((IStrategoString) t1).stringValue().equals(((IStrategoString) t2).stringValue());
+			case BLOB:
+				ITermFactory factory = context.getFactory();
+				IStrategoList empty = factory.makeList(NO_TERMS);
+				return factory.annotateTerm(t1, empty).match(factory.annotateTerm(t2, empty));
+			default:
+				throw new IllegalStateException("Unknown term type: " + termType);
+		}
+	}
+
+	private static boolean equalsIgnoreAnnosAppl(Context context, IStrategoAppl appl1, IStrategoAppl appl2) {
+		IStrategoConstructor cons1 = appl1.getConstructor();
+		IStrategoConstructor cons2 = appl2.getConstructor();
+		if (cons1 != cons2 && !cons1.match(cons2))
+			return false;
+		return equalsIgnoreAnnosList(context, appl1, appl2);
+	}
+
+	private static boolean equalsIgnoreAnnosList(Context context, IStrategoTerm appl1, IStrategoTerm appl2) {
+		IStrategoTerm[] children1 = appl1.getAllSubterms();
+		IStrategoTerm[] children2 = appl1.getAllSubterms();
+		if (children1.length != children2.length)
+			return false;
+		for (int i = 0; i < children1.length; i++) {
+			if (!equalsIgnoreAnnos(context, children1[i], children2[i]))
+				return false;
+		}
+		return true;
+	}
+}



From L.C.L.Kats at tudelft.nl  Sat Aug 29 17:03:23 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 29 Aug 2009 15:03:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19895 - LennartKats -
	in strc-java/trunk: . META-INF java java/runtime/org/strategoxt/lang
	java/runtime/org/strategoxt/lang/compat
	java/runtime/org/strategoxt/lang/compat/override
	java/runtime/org/strategoxt/lang/terms tools trans trans/lib
Message-ID: <200908291502.n7TF2m3n026960@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-29 15:03:23 +0000 (Sat, 29 Aug 2009)
New Revision: 19895

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19895&view=rev

Added:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_at_end_1_0.java
Modified:
   strc-java/trunk/META-INF/MANIFEST.MF
   strc-java/trunk/Makefile.am
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_filter_1_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoConstructor.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
   strc-java/trunk/tools/strj-jar
   strc-java/trunk/trans/Makefile.am
   strc-java/trunk/trans/lib/dr-scoping.str
   strc-java/trunk/trans/s2j-options.str
   strc-java/trunk/trans/split-large-strategies.str
   strc-java/trunk/trans/strj-options.str
   strc-java/trunk/trans/strj.str

Log:
- Added a new -clean option to clean the output directory with strj
- Found a way to get strj-jar to work with the -d option again
- Modified the hash calculation in StrategoTerm to include the annotation
  (which means that other factories would have to do the same to
   remain fully compatible)
- Added a new primitive for at-end to avoid stack overflows in some cases



Changes:

Modified: strc-java/trunk/META-INF/MANIFEST.MF
===================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/META-INF/MANIFEST.MF	2009-08-29 15:03:23 UTC (rev 19895)
@@ -7,6 +7,7 @@
  org.strategoxt.lang,
  org.strategoxt.lang.compat,
  org.strategoxt.lang.parallel,
+ org.strategoxt.lang.terms,
  org.strategoxt.libjava_front,
  org.strategoxt.libstratego_aterm,
  org.strategoxt.libstratego_gpp,

Modified: strc-java/trunk/Makefile.am
===================================================================
--- strc-java/trunk/Makefile.am	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/Makefile.am	2009-08-29 15:03:23 UTC (rev 19895)
@@ -13,3 +13,6 @@
 
 jar :
 	$(MAKE) -C java jar
+
+new-libs :
+	$(MAKE) -C java new-libs

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/Makefile.am	2009-08-29 15:03:23 UTC (rev 19895)
@@ -35,17 +35,20 @@
 nobase_pkgdata_DATA = $(LIBRARYJAVAS) $(COMPILERJAVAS) .ALLCLASSES
 
 CLEANFILES = \
-  $(LIBRARYJAVAS) $(COMPILERJAVAS) $(wildcard bin/*/*/*) $(wildcard bin/*/*/*/*) $(wildcard bin/*/*/*/*/*) \
+  $(LIBRARYJAVAS) $(COMPILERJAVAS) \
   runtime/org/strategoxt/lang/compat/override/libstratego_aterm_compat.rtree \
   lib/org/strategoxt/libstratego-xtc.rtree \
   .ALLCLASSES
+  
+clean :
+	rm -rf bin/* lib/org/strategoxt/*
 
 SPOOFAX=../../../spoofax/trunk/spoofax
 CLASSPATH=runtime:lib:compiler:spoofax-libs.jar:.
 JAVACFLAGS=-J-Xmx512m -J-Xms300m -J-server -J-XX:+UseParallelGC -cp $(CLASSPATH) -source 5 -nowarn -d bin
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 
-STRJFLAGS=--library --verbose 3 -O 3
+STRJFLAGS=--library --verbose 3 -clean -O 3
 
 JAR=`if which fastjar >/dev/null; then echo fastjar; else echo jar; fi`
 JARIN1=`find runtime  | grep -E '\.rtree|\.af|\.tbl' | sed 's!runtime/!-C runtime/ !'`
@@ -68,7 +71,7 @@
 	jar cfm strategoxt.jar META-INF/MANIFEST-repacked.MF strategoxt-no-compression.jar
 	jar i strategoxt.jar
 
-new-spoofax-libs :
+new-libs :
 	rm -rf spoofax-libs-tmp
 	mkdir spoofax-libs-tmp
 	cat $(SPOOFAX)/org.spoofax.aterm/lib/jjtraveler-0.4.3.jar | (cd spoofax-libs-tmp; $(JAR) x)
@@ -85,8 +88,14 @@
 	mv spoofax-libs.jar.tmp spoofax-libs.jar
 
 .ALLCLASSES : $(RUNTIMEJAVAS) $(LIBARYJAVAS) $(COMPILERJAVAS)
+	if ! which ecj >/dev/null; \
+	  then echo "WARNING: ecj is not installed; using the (much) slower javac compiler instead" >&2; \
+	fi
 	$(JAVAC) $(JAVACFLAGS) $(RUNTIMEJAVAS) $(LIBRARYJAVAS) $(COMPILERJAVAS) && touch $@
 
+debug-classes : $(RUNTIMEJAVA)
+	$(JAVAC) -g $(JAVACFLAGS) $(RUNTIMEJAVAS)
+
 ###### LIBRARIES #######
 
 bin/org/strategoxt/libstratego_lib/Main.class : lib/org/strategoxt/libstratego_lib/Main.java
@@ -151,8 +160,7 @@
 ###### COMPILER #######
 
 compiler/org/strategoxt/strj/Main.java : ../trans/strj.ctree ../trans/strj
-	if ! which ecj >/dev/null; then echo "WARNING: ecj is not installed; using the (much) slower javac compiler instead" >&2; fi
-	../trans/strj -i $< -o $@ -p org.strategoxt.strj --verbose 3 -la stratego-lib -la stratego-xtc -la stratego-gpp -la org.strategoxt.libstrc -la org.strategoxt.libjava_front -O 3 # -D DEFAULT_XTC_REPOSITORY="\"$(REPOSITORY)\""
+	../trans/strj -i $< -o $@ -clean -p org.strategoxt.strj --verbose 3 -la stratego-lib -la stratego-xtc -la stratego-gpp -la org.strategoxt.libstrc -la org.strategoxt.libjava_front -O 3 # -D DEFAULT_XTC_REPOSITORY="\"$(REPOSITORY)\""
 
 ###### EXTERNAL #######
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/LazyTerm.java	2009-08-29 15:03:23 UTC (rev 19895)
@@ -50,18 +50,27 @@
 	public String toString() {
 		return getWrapped().toString();
 	}
+	
+	@Override
+	public boolean equals(Object obj) {
+		return getWrapped().equals(obj);
+	}
+	
+	@Override
+	public int hashCode() {
+		return getWrapped().hashCode();
+	}
 
 	public IStrategoList getAnnotations() {
 		return getWrapped().getAnnotations();
 	}
 
 	public int getStorageType() {
-		return Math.min(IMMUTABLE, getWrapped().getStorageType());
+		return Math.min(SHARABLE, getWrapped().getStorageType());
 	}
 
 	public boolean match(IStrategoTerm second) {
-		// TODO Auto-generated method stub
-		return false;
+		return getWrapped().match(second);
 	}
 	
 	// Semi-specialized accessors

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_at_end_1_0.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_at_end_1_0.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_at_end_1_0.java	2009-08-29 15:03:23 UTC (rev 19895)
@@ -0,0 +1,65 @@
+package org.strategoxt.lang;
+
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+import static org.strategoxt.lang.Term.*;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * A stack-efficient version of the at-end strategy,
+ * which is often used to concatenate large lists.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SRTS_EXT_at_end_1_0 extends Strategy {
+	
+	public static SRTS_EXT_at_end_1_0 instance = new SRTS_EXT_at_end_1_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, Strategy s) {
+		if (current.getTermType() != LIST)
+			return null;
+		
+		IStrategoList list = (IStrategoList) current;
+		IStrategoTerm[] listItems = new IStrategoTerm[list.size()];
+		IStrategoList cons = list;
+		
+		for (int i = 0; i < listItems.length; i++) {
+			if (!cons.getAnnotations().isEmpty()) {
+				IStrategoList tail = atEndMaintainAnnos(context, cons, s);
+				return tail == null ? null : concat(context, listItems, i, tail);
+			}
+			listItems[i] = cons.head();
+			cons = cons.tail();
+		}
+		
+		IStrategoTerm tail = context.getFactory().makeList();
+		tail = s.invoke(context, tail);
+		if (tail == null || checkListTail(tail) == null)
+			return null;
+		return concat(context, listItems, listItems.length, (IStrategoList) tail);
+	}
+	
+	private static IStrategoList concat(Context context, IStrategoTerm[] prefix, int prefixEnd, IStrategoList tail) {
+		ITermFactory factory = context.getFactory();
+		IStrategoList result = tail;
+		for (int i = prefixEnd - 1; i >= 0; i--) {
+			result = factory.makeList(prefix[i], result);
+		}
+		return result;
+	}
+	
+	private static IStrategoList atEndMaintainAnnos(Context context, IStrategoList list, Strategy s) {
+		if (list.isEmpty()) {
+			IStrategoTerm tail = s.invoke(context, list);
+			return tail != null && checkListTail(tail) != null ? (IStrategoList) tail : null;
+		} else {
+			IStrategoList tail = atEndMaintainAnnos(context, list.tail(), s);
+			if (list == null) return null;
+			IStrategoTerm result = context.getFactory().makeList(list.head(), tail);
+			return (IStrategoList) context.getFactory().annotateTerm(result, list.getAnnotations());
+		}
+	}
+}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_filter_1_0.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_filter_1_0.java	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_filter_1_0.java	2009-08-29 15:03:23 UTC (rev 19895)
@@ -27,7 +27,7 @@
 			IStrategoTerm[] items = new IStrategoTerm[size];
 			IStrategoList cons = list;
 			for (int i = 0; i < size; i++, cons = cons.tail()) {
-				if (cons.getAnnotations().size() != 0)
+				if (!cons.getAnnotations().isEmpty())
 					return filterMaintainTailAnnos(context, items, cons, i, s);
 				items[i] = cons.head();
 			}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java	2009-08-29 15:03:23 UTC (rev 19895)
@@ -41,7 +41,7 @@
 		}
 
 		public IStrategoTerm getSubterm(int index) {
-			return null;
+			throw new UnsupportedOperationException();
 		}
 
 		public int getSubtermCount() {
@@ -71,5 +71,10 @@
 			return (449 * value ^ 7841) + 1;
 		}
 		
+		@Override
+		public String toString() {
+			return String.valueOf(value);
+		}
+		
 	}
 }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	2009-08-29 15:03:23 UTC (rev 19895)
@@ -34,7 +34,7 @@
 			}
 		}
 	}
-	
+
 	public void registerComponent(String component) {
 		synchronized (asyncComponents) {
 			asyncComponents.add(component);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/performance-tweaks.str	2009-08-29 15:03:23 UTC (rev 19895)
@@ -43,6 +43,9 @@
   
   override filter(s) =
     SRTS-EXT-filter(s)
+  
+  override at-end(s) =
+    SRTS-EXT-at-end(s)
 
   extend newname =
     ?"@"; SRTS-EXT-newint
@@ -51,4 +54,6 @@
   
   external SRTS-EXT-filter(s|)
 
+  external SRTS-EXT-at-end(s|)
+
   external SRTS-EXT-newint(|)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoConstructor.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoConstructor.java	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoConstructor.java	2009-08-29 15:03:23 UTC (rev 19895)
@@ -42,14 +42,9 @@
     public IStrategoTerm[] getAllSubterms() {
         return TermFactory.EMPTY;
     }
-    
-    @Override
-    public IStrategoList getAnnotations() {
-        throw new UnsupportedOperationException();
-    }
 
     public IStrategoTerm getSubterm(int index) {
-        throw new ArrayIndexOutOfBoundsException();
+        throw new UnsupportedOperationException();
     }
 
     public int getSubtermCount() {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoList.java	2009-08-29 15:03:23 UTC (rev 19895)
@@ -22,6 +22,12 @@
 	
 	private static final int UNKNOWN_STORAGE = -1;
     
+    /**
+     * @see #hashFunction()
+     * @see TermFactory#EMPTY_LIST  The singleton maximally shared empty list instance.
+     */
+    static final int EMPTY_LIST_HASH = 1 * 71 * 71;
+    
     private IStrategoTerm head;
     
     private IStrategoList tail;
@@ -206,8 +212,8 @@
         }
         return (int)(hc >> 2);
         */
-		final int prime = 31;
-		int result = 0;
+		final int prime = 71;
+		int result = 1;
 		result = prime * result + ((head == null) ? 0 : head.hashCode());
 		result = prime * result + ((tail == null) ? 0 : tail.hashCode());
 		return result;

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/StrategoTerm.java	2009-08-29 15:03:23 UTC (rev 19895)
@@ -22,8 +22,13 @@
     private IStrategoList annotations;
     
     protected StrategoTerm(IStrategoList annotations) {
-        this.annotations = annotations;
+    	if (annotations != TermFactory.EMPTY_LIST)
+    		this.annotations = annotations;
     }
+    
+    protected StrategoTerm() {
+    	this(null);
+    }
 
     /**
      * Equality test.
@@ -83,10 +88,16 @@
     	int result = hashCode;
     	switch (result) {
     		case MUTABLE_HASH:
-    			return hashFunction();
+    			result = hashFunction();
+    			if (annotations != null && !annotations.isEmpty())
+    				result = result * 2423 + annotations.hashCode();
+    			return result;
     		case UNKNOWN_HASH:
     			result = hashFunction();
-    			if (getTermType() != MUTABLE) hashCode = result;
+    			if (annotations != null && !annotations.isEmpty())
+    				result = result * 2423 + annotations.hashCode();
+    			if (getTermType() != MUTABLE)
+    				hashCode = result;
     			return result;
     		default:
     			return result;
@@ -94,9 +105,13 @@
     }
     
     protected final void initImmutableHashCode() {
-    	assert getTermType() != MUTABLE;
-    	if (hashCode == UNKNOWN_HASH)
-    		hashCode = hashFunction();
+    	assert getTermType() != MUTABLE; // (avoid this virtual call here)
+    	if (hashCode == UNKNOWN_HASH) {
+    		int hashCode = hashFunction();
+			this.hashCode = annotations == null || annotations.isEmpty()
+				? hashCode
+				: hashCode * 2423 + annotations.hashCode();
+    	}
     }
     
     protected abstract int hashFunction();
@@ -140,11 +155,17 @@
         }
     }
     
-    public IStrategoList getAnnotations() {
+    public final IStrategoList getAnnotations() {
         return annotations == null ? TermFactory.EMPTY_LIST : annotations;
     }
     
     protected final void internalSetAnnotations(IStrategoList annotations) {
-        this.annotations = annotations;
+    	if (annotations == TermFactory.EMPTY_LIST)
+    		annotations = null; // essential for hash code calculation
+    	
+    	if (this.annotations != annotations) {
+    		this.annotations = annotations;
+    		this.hashCode = UNKNOWN_HASH;
+    	}
     }
 }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	2009-08-29 15:03:23 UTC (rev 19895)
@@ -37,6 +37,12 @@
     
     private static final int MAX_POOLED_STRING_LENGTH = 100;
 
+    /**
+     * The singleton maximally shared empty list instance.
+     * 
+     * Other empty lists may exists, but this is the only one
+     * that may be marked maximally shared.
+     */
     public static final StrategoList EMPTY_LIST =
     	new StrategoList(null, null, null, MAXIMALLY_SHARED); 
 

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/tools/strj-jar	2009-08-29 15:03:23 UTC (rev 19895)
@@ -2,7 +2,6 @@
 
 ## SETTINGS
 
-PACKAGE=
 MAINCLASS=
 CLASSPATH=strategoxt.jar
 JAR=`if which fastjar &>/dev/null; then echo fastjar; else echo jar; fi`
@@ -28,10 +27,6 @@
       CLASSPATH="$1"
     fi
     shift
-  elif [ "$P" == "-p" ]; then
-    echo "Warning: ignoring option -p (currently unused)" >&2
-    PACKAGE="$1" # currently unused
-    shift
   elif [ "$P" == "-i" ]; then
     INPUT="$1"
     shift
@@ -52,6 +47,7 @@
   exit 1
 fi
 
+
 ## PARAMETER VALIDATION
 
 if [ ! -e "$INPUT" ]; then
@@ -64,16 +60,31 @@
   OUTPUT="`dirname $INPUT`/`basename $INPUT .java`.jar"
 fi
 
+INPUTDIR=`dirname $INPUT`
+
+## PROCESS PACKAGE NAME
+ 
+INPUT2=
+INPUT3=
+if head -n 1 $INPUT | grep '^package'; then
+  # PACKAGE=`head $INPUT -n 1 | sed 's/package //; s/\;//'`
+  # PACKAGEDIR=`echo "$PACKAGE" | sed 's!\.!/!g	'`
+  INPUT2="$INPUTDIR/Main.java"
+  INPUTDIR2=`cd $INPUTDIR; pwd` # canonicalize
+  INPUT3="$INPUTDIR/`basename $INPUTDIR2`.java"
+  if [ ! -e $INPUT3 ]; then
+    INPUT3=
+  fi
+fi
+
 ## COMPILATION
 
 ( mkdir -p $TEMPDIR
-  echo $JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH `dirname $INPUT`/\*.java -d \$TEMPDIR
-  $JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH `dirname $INPUT`/*.java -d $TEMPDIR) || exit 1
+  echo "$JAVAC -source 5 -nowarn $JAVACFLAGS -cp $CLASSPATH -d \$TEMPDIR $INPUT $INPUT2 $INPUT3"
+  $JAVAC -source 5 -nowarn $JAVACFLAGS -cp "$CLASSPATH" -d $TEMPDIR $INPUT $INPUT2 $INPUT3) || exit 1
 
 ## JARRING
 
-INPUTDIR=`dirname $INPUT`
-
 if ls $INPUTDIR/*.str &>/dev/null; then
   echo "Warning: using this build directory may mean non-term files are included as attachments" >&2
 fi

Modified: strc-java/trunk/trans/Makefile.am
===================================================================
--- strc-java/trunk/trans/Makefile.am	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/trans/Makefile.am	2009-08-29 15:03:23 UTC (rev 19895)
@@ -21,11 +21,7 @@
 XTC_IMPORT = $(JAVA_FRONT_XTC)
 LDADD     += $(JAVA_FRONT_LIBS)
 
-# HACK: hardcoded, relative classpath
-
-BASEPATH=../../../spoofax/trunk/spoofax
-SPCLASSPATH=$(BASEPATH)/org.spoofax.interpreter.core/bin:$(BASEPATH)/org.spoofax.interpreter.adapter.aterm/bin:$(BASEPATH)/org.spoofax.interpreter.library.jsglr/bin:$(BASEPATH)/../../branches/spoofax-recovery/bin:$(BASEPATH)/org.spoofax.aterm/bin/:$(BASEPATH)/org.spoofax.aterm/lib/jjtraveler-0.4.3.jar:$(BASEPATH)/org.spoofax.aterm/lib/shared-objects-1.4.jar
-CLASSPATH=.:$(SPCLASSPATH):../java/runtime:../java/lib:../java/compiler
+CLASSPATH=../java/spoofax-libs.jar:../java/bin:.
 JAVACFLAGS=-J-Xmx256m -cp $(CLASSPATH) -source 5 -nowarn
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 

Modified: strc-java/trunk/trans/lib/dr-scoping.str
===================================================================
--- strc-java/trunk/trans/lib/dr-scoping.str	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/trans/lib/dr-scoping.str	2009-08-29 15:03:23 UTC (rev 19895)
@@ -13,10 +13,9 @@
       dr-scope-all-start
     ; s
     <+
-      stack := <prim("SSL_stacktrace_get_all_frame_names")>
+      prim("SSL_stacktrace_get_all_frame_names")
     ; if if-verbose3(?true); !true then
-        !stack
-      ; report-failure(
+        report-failure(
           log(|Error(), ["Compilation failed (", <run-time ; real-to-string(|2)>, " secs)"])
         ; <exit> 1
         )

Modified: strc-java/trunk/trans/s2j-options.str
===================================================================
--- strc-java/trunk/trans/s2j-options.str	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/trans/s2j-options.str	2009-08-29 15:03:23 UTC (rev 19895)
@@ -57,7 +57,8 @@
     )
   + ArgOption(
       "-D"
-    , <post-extend-config> ("-D", [<parse-define-option>]); !()
+    , // TODO: Support prim(<-D constant>) as seen in strc-options
+      <post-extend-config> ("-D", [<parse-define-option>]); !()
     , !"-D name=value      Define a constant value strategy"
     )
   + ArgOption(

Modified: strc-java/trunk/trans/split-large-strategies.str
===================================================================
--- strc-java/trunk/trans/split-large-strategies.str	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/trans/split-large-strategies.str	2009-08-29 15:03:23 UTC (rev 19895)
@@ -60,5 +60,4 @@
     with
       x_split  := <newname> <conc-strings> (x, "_fragment_")
     ; x_unused := <newname> "unused"
-    ; log(|Notice(), ["Split up very large strategy ", x])
 

Modified: strc-java/trunk/trans/strj-options.str
===================================================================
--- strc-java/trunk/trans/strj-options.str	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/trans/strj-options.str	2009-08-29 15:03:23 UTC (rev 19895)
@@ -44,9 +44,15 @@
     ArgOption(
       "--main" + "-m"
     , <set-config>("-m", <id>); !()
-    , "--main f | -m f    Main strategy to compile (default: main)\n"
+    , !"--main f | -m f    Main strategy to compile (default: main)"
     )
   <+
+    Option(
+      "-clean"
+    , <set-config> ("-clean", <id>)
+    , !"-clean             Remove all existing Java files in the output directory"
+    )
+  <+
     s2j-general-options
         
   <+ ArgOption(fail, fail, !"")

Modified: strc-java/trunk/trans/strj.str
===================================================================
--- strc-java/trunk/trans/strj.str	2009-08-29 15:02:32 UTC (rev 19894)
+++ strc-java/trunk/trans/strj.str	2009-08-29 15:03:23 UTC (rev 19895)
@@ -43,13 +43,42 @@
     ; fail
     else
       dr-scope-all-verbose(
-        strc-front-end
+        with(<set-config> ("JAVA_PLATFORM", ()))
+      ; strc-front-end
       )
     end
   ; try(mark-always-needed(|<get-config> "-m", 0, 0))
   ; strc-optimize
   ; s2j
+  ; with(clean-output-dir)
   ; log-timed(list-loop(output-java) | "Pretty printing succeeded", 1)
+  
+  clean-output-dir =
+    if <get-config> "-clean" then
+      if <get-config> "-p" then
+        output-dirname
+      ; if file-exists then
+          delete-java-files-in-dir
+        end
+      else
+        warn-msg(|"Ignored -clean option: no package name specified")
+      end
+    end
+  
+  delete-java-files-in-dir =
+    with(olddir := <getcwd>)
+  ; finally(
+      chdir
+    ; <readdir> "."
+    ; list-loop(
+        if has-extension(|"java") then
+          remove-file
+        end
+      )
+    , <chdir> olddir
+    )
+  <+
+    warn(|"Could not clean output directory")
 
   output-java :
     ast -> name
@@ -69,7 +98,7 @@
     <+
       output-java-error
        
-  external pp-java-native(|)
+   external pp-java-native(|)
 
    // TODO: Override .dep file location
    



From L.C.L.Kats at tudelft.nl  Sat Aug 29 17:04:45 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 29 Aug 2009 15:04:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19896 - LennartKats -
	in spoofax-imp/trunk: . org.strategoxt.imp.generator
	org.strategoxt.imp.generator/lib
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
Message-ID: <200908291504.n7TF49E5026974@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-29 15:04:45 +0000 (Sat, 29 Aug 2009)
New Revision: 19896

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19896&view=rev

Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoListProxy.java
Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeInt.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java

Log:
WrappedAstNode et al now inherit from StrategoTerm.

Changes:

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/Makefile	2009-08-29 15:04:45 UTC (rev 19896)
@@ -9,5 +9,5 @@
 	$(MAKE) -C org.strategoxt.imp.generator clean
 	$(MAKE) -C org.strategoxt.imp.editors.editorservice clean
 
-new-make-permissive :
-	$(MAKE) -C org.strategoxt.imp.generator new-make-permissive
+new-libs :
+	$(MAKE) -C org.strategoxt.imp.generator new-libs

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-29 15:04:45 UTC (rev 19896)
@@ -71,11 +71,11 @@
 	rm sdf2imp.c sdf2imp.lo sdf2imp.o
 
 src-gen/org/strategoxt/imp/generator/sdf2imp.java : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
-	$(STRJ) -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
+	$(STRJ) -clean -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
 	        -la java-front --library -p org.strategoxt.imp.generator $(STRCSTFU)
 
 lib/sdf2imp.jar : src-gen/org/strategoxt/imp/generator/sdf2imp.java
-	strj-jar -i $< -o $@ -p org.strategoxt.imp.generator -cp src-gen
+	strj-jar -i $< -o $@ -cp src-gen
 
 syntax : $(SYNTAX)
 
@@ -127,7 +127,7 @@
 	[ -e src/include ] || mkdir src/include
 	baf2trm  -i $< -o $@ # cp $< $@
 
-new-make-permissive :
+new-libs :
 	rm -rf $(BRIDGE)/permissive-grammars/trans/make-permissive/bin
 	make jar -C $(BRIDGE)/permissive-grammars/trans/make-permissive
 	cp $(BRIDGE)/permissive-grammars/trans/make-permissive/bin/*.jar lib

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoListProxy.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoListProxy.java	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoListProxy.java	2009-08-29 15:04:45 UTC (rev 19896)
@@ -1,79 +0,0 @@
-package org.strategoxt.imp.runtime.stratego;
-
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
-
-/**
- * A proxy class for IStrategoList.
- * 
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class StrategoListProxy implements IStrategoList {
-	private IStrategoList wrapped;
-	
-	public IStrategoList getWrapped() {
-		return wrapped;
-	}
-	
-	public void setWrapped(IStrategoList wrapped) {
-		this.wrapped = wrapped;
-	}
-    
-	public int getStorageType() {
-		return IMMUTABLE;
-	}
-
-	public IStrategoTerm get(int index) {
-		return getWrapped().get(index);
-	}
-
-	public IStrategoTerm head() {
-		return getWrapped().head();
-	}
-
-	public boolean isEmpty() {
-		return getWrapped().isEmpty();
-	}
-
-	public int size() {
-		return getWrapped().size();
-	}
-
-	public IStrategoList tail() {
-		return getWrapped().tail();
-	}
-
-	public IStrategoTerm[] getAllSubterms() {
-		return getWrapped().getAllSubterms();
-	}
-	
-	public IStrategoList getAnnotations() {
-		return getWrapped().getAnnotations();
-	}
-
-	public IStrategoTerm getSubterm(int index) {
-		return getWrapped().getSubterm(index);
-	}
-
-	public int getSubtermCount() {
-		return getWrapped().getSubtermCount();
-	}
-
-	public int getTermType() {
-		return getWrapped().getTermType();
-	}
-
-	public boolean match(IStrategoTerm second) {
-		return getWrapped().match(second);
-	}
-
-	public void prettyPrint(ITermPrinter pp) {
-		getWrapped().prettyPrint(pp);
-	}
-
-	@Deprecated
-	public IStrategoList prepend(IStrategoTerm prefix) {
-		return getWrapped().prepend(prefix);
-	}
-}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2009-08-29 15:04:45 UTC (rev 19896)
@@ -13,7 +13,7 @@
  * 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class StrategoTermPath extends StrategoListProxy {
+public class StrategoTermPath {
 
 	private StrategoTermPath() {
 		// Constructed by a static constructor

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNode.java	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNode.java	2009-08-29 15:04:45 UTC (rev 19896)
@@ -2,20 +2,15 @@
 
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.interpreter.terms.InlinePrinter;
+import org.strategoxt.lang.terms.StrategoTerm;
 
-public abstract class WrappedAstNode implements IWrappedAstNode, IStrategoTerm, Cloneable {
+public abstract class WrappedAstNode extends StrategoTerm implements IWrappedAstNode, IStrategoTerm, Cloneable {
+	
 	private final IStrategoAstNode node;
 	
 	private final WrappedAstNodeFactory factory;
 	
-	private IStrategoList annotations;
-    
-	public int getStorageType() {
-		return IMMUTABLE;
-	}
-	
 	public final IStrategoAstNode getNode() {
 		return node;
 	}
@@ -25,9 +20,16 @@
 	}
 	
 	protected WrappedAstNode(WrappedAstNodeFactory factory, IStrategoAstNode node) {
+		super(null);
 		this.factory = factory;
 		this.node = node;
 	}
+	
+	public final int getStorageType() {
+		// All WrappedAstNodes wrap around an immutable AstNode,
+		// and cannot have non-AstNode children.
+		return IMMUTABLE;
+	}
 
 	public IStrategoTerm[] getAllSubterms() {
 		IStrategoTerm[] result = new IStrategoTerm[getSubtermCount()];
@@ -48,10 +50,6 @@
 		return node.getChildren().size();
 	}
 	
-	public IStrategoList getAnnotations() {
-		return annotations == null ? WrappedAstNodeFactory.EMPTY_LIST : annotations;
-	}
-	
 	/**
 	 * Creates a copy of this term, and applies the given annotations to it.
 	 * 
@@ -59,39 +57,13 @@
 	 */
 	protected WrappedAstNode getAnnotatedWith(IStrategoList annotations) {
 		WrappedAstNode result = clone();
-		result.annotations = annotations;
+		result.internalSetAnnotations(annotations);
 		return result;
 	}
 	
-	public final boolean match(IStrategoTerm second) {
-		return equals(second);
-	}
-
 	@Override
-	public final boolean equals(Object other) {
-		if (other instanceof WrappedAstNode) {
-			WrappedAstNode otherTerm = (WrappedAstNode) other;
-			return (node == otherTerm.node && getAnnotations().equals(otherTerm.getAnnotations()))
-				|| slowCompare(otherTerm);
-		} else if (other instanceof IStrategoTerm) {
-			return slowCompare((IStrategoTerm) other);
-		} else {
-			return false;
-		}
-	}
-	
-	@Override
-	public abstract int hashCode();
-	
-	protected abstract boolean slowCompare(IStrategoTerm second);
-	
-	@Override
 	protected WrappedAstNode clone() {
-		try {
-			return (WrappedAstNode) super.clone();
-		} catch (CloneNotSupportedException e) {
-			throw new RuntimeException(e);
-		}
+		return (WrappedAstNode) super.clone();
 	}
 	
 	@Override
@@ -100,17 +72,4 @@
     	prettyPrint(ip);
     	return ip.getString();
     }
-    
-    protected void printAnnotations(ITermPrinter pp) {
-        IStrategoList annos = getAnnotations();
-        if (annos.size() == 0) return;
-        
-        pp.print("{");
-        annos.get(0).prettyPrint(pp);
-        for (int i = 1; i < annos.size(); i++) {
-            pp.print(",");
-            pp.print(annos.toString());
-        }
-        pp.print("}");
-    }
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeAppl.java	2009-08-29 15:04:45 UTC (rev 19896)
@@ -12,6 +12,7 @@
  * @author Karl Trygve Kalleberg <karltk add strategoxt.org>
  */
 public class WrappedAstNodeAppl extends WrappedAstNode implements IStrategoAppl {
+    
 	private final IStrategoConstructor constructor;
 
 	public IStrategoConstructor getConstructor() {
@@ -29,7 +30,7 @@
 	}
 
 	@Override
-	protected boolean slowCompare(IStrategoTerm second) {
+	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
 		if (second.getTermType() != IStrategoTerm.APPL)
 			return false;
 		IStrategoAppl snd = (IStrategoAppl) second;
@@ -76,7 +77,7 @@
 	}
 	
 	@Override
-	public int hashCode() {
+	public int hashFunction() {
         long r = constructorHashCode();
         int accum = 6673;
         for(int i = 0; i < getSubtermCount(); i++) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeFactory.java	2009-08-29 15:04:45 UTC (rev 19896)
@@ -1,6 +1,5 @@
 package org.strategoxt.imp.runtime.stratego.adapter;
 
-import org.spoofax.interpreter.adapter.aterm.BAFBasicTermFactory;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -10,6 +9,7 @@
 import org.strategoxt.imp.runtime.parser.ast.IntAstNode;
 import org.strategoxt.imp.runtime.parser.ast.ListAstNode;
 import org.strategoxt.imp.runtime.parser.ast.StringAstNode;
+import org.strategoxt.lang.terms.TermFactory;
 
 /**
  * A factory creating ATerms from AST nodes.
@@ -17,7 +17,8 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  * @author Karl Trygve Kalleberg <karltk add strategoxt.org>
  */
-public class WrappedAstNodeFactory extends BAFBasicTermFactory implements ITermFactory {	
+public class WrappedAstNodeFactory extends TermFactory implements ITermFactory {
+	
 	public IStrategoTerm wrap(IStrategoAstNode node) {
 		if(node instanceof IntAstNode) {
 			return new WrappedAstNodeInt(this, (IntAstNode) node);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeInt.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeInt.java	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeInt.java	2009-08-29 15:04:45 UTC (rev 19896)
@@ -23,7 +23,7 @@
 	}
 	
 	@Override
-	public boolean slowCompare(IStrategoTerm second) {
+	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
 		return second.getTermType() == IStrategoTerm.INT
 			&& ((IStrategoInt) second).intValue() == intValue()
 			&& second.getAnnotations().equals(getAnnotations());
@@ -39,7 +39,7 @@
 	}
 	
 	@Override
-	public int hashCode() {
+	public int hashFunction() {
 		return 449 * intValue() ^ 7841;
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeLink.java	2009-08-29 15:04:45 UTC (rev 19896)
@@ -43,7 +43,7 @@
 	// Common accessors
 
 	@Override
-	protected boolean slowCompare(IStrategoTerm second) {
+	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
 		if (second.getAnnotations().size() != getAnnotations().size())
 			return false;
 		
@@ -53,7 +53,7 @@
 	}
 
 	@Override
-	public int hashCode() {
+	public int hashFunction() {
 		return wrapped.hashCode();
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeList.java	2009-08-29 15:04:45 UTC (rev 19896)
@@ -27,7 +27,7 @@
 	}
 
 	@Override
-	protected boolean slowCompare(IStrategoTerm second) {
+	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
 		if (second.getTermType() != IStrategoTerm.LIST)
 			return false;
 
@@ -103,7 +103,7 @@
 	}
 
 	@Override
-	public int hashCode() {
+	public int hashFunction() {
 		long hc = 4787;
 		for (int i = 0; i < getSubtermCount(); i++) {
 			hc *= getSubterm(i).hashCode();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java	2009-08-29 15:03:23 UTC (rev 19895)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/WrappedAstNodeString.java	2009-08-29 15:04:45 UTC (rev 19896)
@@ -34,14 +34,14 @@
 	}
 
 	@Override
-	public boolean slowCompare(IStrategoTerm second) {
+	protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
 		return second.getTermType() == IStrategoTerm.STRING
 			&& ((IStrategoString) second).stringValue().equals(stringValue())
 			&& second.getAnnotations().equals(getAnnotations());
 	}
 	
 	@Override
-	public int hashCode() {
+	public int hashFunction() {
 		return stringValue().hashCode();
 	}
 }



From L.C.L.Kats at tudelft.nl  Sat Aug 29 17:14:41 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 29 Aug 2009 15:14:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19897 - LennartKats -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
	spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr
	spoofax-imp/trunk/org.strategoxt.imp.generator
Message-ID: <200908291514.n7TFE62f027033@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-29 15:14:41 +0000 (Sat, 29 Aug 2009)
New Revision: 19897

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19897&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseNode.java

Log:


Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-29 15:04:45 UTC (rev 19896)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	2009-08-29 15:14:41 UTC (rev 19897)
@@ -11,14 +11,17 @@
   -la stratego-xtc \
   -la stratego-sglr \
   -la stratego-gpp \
-  -la ~/.nix-profile/lib/libstratego-sdf.la
+  -la ~/.nix-profile/lib/libstratego-sdf.la \
+  -O 3
+  
+all : make-permissive # jar
 
 make-permissive : make-permissive.str $(STRS)
 	strc -i $< -m main-make-permissive $(STRCFLAGS)
 
 java bin/org/strategoxt/permissivegrammars/make_permissive.java : make-permissive.str $(STRS)
 	[ -e bin/org/strategoxt/permissivegrammars ] || mkdir -p bin/org/strategoxt/permissivegrammars
-	strj -i $< -o $@ -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
+	strj -clean -i $< -o bin/org/strategoxt/permissivegrammars/make_permissive.java -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
 
 jar bin/make_permissive.jar : bin/org/strategoxt/permissivegrammars/make_permissive.java
 	strj-jar -i $< -o bin/make_permissive.jar -cp bin

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseNode.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseNode.java	2009-08-29 15:04:45 UTC (rev 19896)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseNode.java	2009-08-29 15:14:41 UTC (rev 19897)
@@ -66,7 +66,7 @@
     public boolean equals(Object obj) {
         if(!(obj instanceof ParseNode))
             return false;
-        if (o == this)
+        if (obj == this)
             return true;
         ParseNode o = (ParseNode)obj;
         if(label != o.label)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-29 15:04:45 UTC (rev 19896)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2009-08-29 15:14:41 UTC (rev 19897)
@@ -71,7 +71,7 @@
 	rm sdf2imp.c sdf2imp.lo sdf2imp.o
 
 src-gen/org/strategoxt/imp/generator/sdf2imp.java : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
-	$(STRJ) -clean -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
+	$(STRJ) -clean -O 3 -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
 	        -la java-front --library -p org.strategoxt.imp.generator $(STRCSTFU)
 
 lib/sdf2imp.jar : src-gen/org/strategoxt/imp/generator/sdf2imp.java



From L.C.L.Kats at tudelft.nl  Mon Aug 31 09:20:32 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 07:20:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19898 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.generator/src/syntax
Message-ID: <200908310719.n7V7Jsgr002243@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 07:20:32 +0000 (Mon, 31 Aug 2009)
New Revision: 19898

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19898&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Common.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf

Log:
Fixed minor context-free and lexical ambiguities caused by the new Stratego identifiers and embedding, and ensured the permissive syntax is used for the editor.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile	2009-08-29 15:14:41 UTC (rev 19897)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/Makefile	2009-08-31 07:20:32 UTC (rev 19898)
@@ -3,6 +3,7 @@
 PPAF       = ../org.strategoxt.imp.generator/src/syntax/$(SYNTAX)-pretty.pp.af
 
 SDF2IMP    = ../org.strategoxt.imp.generator/sdf2imp
+STRJAR     = `strj-jar -p || echo strategoxt.jar`
 ESVS       = ${wildcard src/*.esv}
 
 all : include/$(SYNTAX).packed.esv include/rtg.tbl include/EditorService-pretty.pp.af
@@ -12,20 +13,13 @@
 	rm -rf src/parser/ast
 	# ...
 
-include/$(SYNTAX).packed.esv : $(SYNTAX).def include/$(SYNTAX).tbl $(SDF2IMP) Makefile $(ESVS)
-	$(SDF2IMP) -i $< -p $(SYNTAX).tbl -pn org.strategoxt.imp.editors.editorservice -m $(SYNTAX) --verbose 2
+include/$(SYNTAX).packed.esv : $(SYNTAX).def $(SDF2IMP) Makefile $(ESVS)
+	$(SDF2IMP) -i $< -pn org.strategoxt.imp.editors.editorservice -m $(SYNTAX) --verbose 2
 	rm build.xml ".externalToolBuilders/Ant Builder.launch"
 
-$(SYNTAX).def : $(SOURCE)
-	ln -s $< $@
-
-include/$(SYNTAX).tbl : $(SYNTAX).def
-	[ -e include ] || mkdir include
-	sdf2table -i $< -o $@ -m $(SYNTAX)
-
 # We need a better solution for this
 include/EditorService-pretty.pp.af : $(PPAF)
 	cp $< $@
 
 include/rtg.tbl : ~/.nix-profile/share/sdf/stratego-regular/rtg.tbl
-	baf2trm  -i $< -o $@ # cp $< $@
+	baf2trm -i $< -o $@ # workaround for some BAFReader issue(?)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Common.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Common.sdf	2009-08-29 15:14:41 UTC (rev 19897)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Common.sdf	2009-08-31 07:20:32 UTC (rev 19898)
@@ -3,39 +3,43 @@
 exports
 
   sorts
-    Id IdStar Int STRING String CommentChar Node Sort Constructor ConstructorId
+    Id IdStar Int STRING String Node Sort Constructor ConstructorId
     ReservedName SectionName ModuleName Section Eof
+    Ws ShortCom LongCom CommChar
 
   lexical syntax
   
-    [a-zA-Z\_][a-zA-Z0-9\'\-\_]*     -> Id
-    [a-zA-Z\_][a-zA-Z0-9\'\-\_]* "*" -> IdStar
-    "-"? [0-9]+                      -> Int
-    "\"" ~[\"\n]* "\""               -> STRING
+    [a-zA-Z][a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z][a-zA-Z0-9\'\-\_]* "*" -> IdStar
+    "-"? [0-9]+                    -> Int
+    "\"" ~[\"\n]* "\""             -> STRING
     
-    ~[\n\r]*                         -> SectionName
-    
-    [\ \t\n\r]                       -> LAYOUT
-    
-    [\*]                             -> CommentChar
-    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
-    "//" ~[\n\r]* ([\n\r] | Eof)     -> LAYOUT
-    
-    -> Eof
+    ~[\n\r]*                       -> SectionName
+
+    [\t\ \n\r]               -> Ws
+    "//" ~[\n]* ([\n] | Eof) -> ShortCom
+    "/*" CommChar* "*/"      -> LongCom
+    ~[\*]                    -> CommChar
+    Asterisk                 -> CommChar
+    "*"                      -> Asterisk
+    Ws                       -> LAYOUT
+    ShortCom                 -> LAYOUT
+    LongCom                  -> LAYOUT
+                             -> Eof
   
   lexical restrictions
   
-    CommentChar -/- [\/]
     Int         -/- [0-9]
-    Id          -/- [a-zA-Z0-9\_]    
+    Id          -/- [a-zA-Z0-9\'\-\_]
     SectionName -/- ~[\n\r]
+    Asterisk    -/- [\/]
     Eof         -/- ~[]
 
   context-free restrictions
 
     LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
     LAYOUT? -/- [\/].[\/]
-    LAYOUT? -/- [\/].[\*]
 
   context-free syntax
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf	2009-08-29 15:14:41 UTC (rev 19897)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/OutlinerService.sdf	2009-08-31 07:20:32 UTC (rev 19898)
@@ -18,4 +18,4 @@
   context-free syntax
 
     Node               -> OutlineRule {cons("OutlineRule"), prefer}
-    Term[StrategoExpr] -> OutlineRule {cons("OutlineRule")}
\ No newline at end of file
+    Term[StrategoExpr] -> OutlineRule {cons("OutlineRule")}



From L.C.L.Kats at tudelft.nl  Mon Aug 31 09:25:58 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 07:25:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19899 - LennartKats -
	strc-java/trunk/java/runtime/org/strategoxt/lang/terms
Message-ID: <200908310725.n7V7PJFQ002291@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 07:25:58 +0000 (Mon, 31 Aug 2009)
New Revision: 19899

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19899&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java

Log:
Added caching for the lower 0-255 ints used in exploded strings and parse trees.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	2009-08-31 07:20:32 UTC (rev 19898)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/terms/TermFactory.java	2009-08-31 07:25:58 UTC (rev 19899)
@@ -1,10 +1,3 @@
-/*
- * Created on 27. jan.. 2007
- *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
- */
 package org.strategoxt.lang.terms;
 
 import static java.lang.Math.*;
@@ -29,6 +22,9 @@
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
 public class TermFactory extends BasicTermFactory implements ITermFactory {
 
     public static final IStrategoTerm[] EMPTY = BasicTermFactory.EMPTY;
@@ -36,6 +32,8 @@
     private static final int MY_STORAGE_TYPE = SHARABLE;
     
     private static final int MAX_POOLED_STRING_LENGTH = 100;
+    
+    private static final IStrategoInt[] intCache = initIntCache();
 
     /**
      * The singleton maximally shared empty list instance.
@@ -114,9 +112,19 @@
 
     @Override
     public IStrategoInt makeInt(int i) {
+    	if (0 <= i && i <= 255)
+    		return intCache[i];
     	return new StrategoInt(i, null);
     }
 
+    private static final IStrategoInt[] initIntCache() {
+    	IStrategoInt[] results = new IStrategoInt[256];
+    	for (int i = 0; i < results.length; i++) {
+    		results[i] = new StrategoInt(i);
+    	}
+    	return results;
+    }
+    
     @Override
     public IStrategoList makeList(IStrategoTerm... terms) {
         StrategoList result = EMPTY_LIST;



From L.C.L.Kats at tudelft.nl  Mon Aug 31 09:26:35 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 07:26:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19900 - LennartKats -
	in strc-java/trunk: . java java/runtime/org/strategoxt/lang tools
Message-ID: <200908310725.n7V7PvLu002307@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 07:26:35 +0000 (Mon, 31 Aug 2009)
New Revision: 19900

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19900&view=rev

Modified:
   strc-java/trunk/.classpath
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/UncaughtExceptionHandler.java
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/tools/strj-jar

Log:


Changes:

Modified: strc-java/trunk/.classpath
===================================================================
--- strc-java/trunk/.classpath	2009-08-31 07:25:58 UTC (rev 19899)
+++ strc-java/trunk/.classpath	2009-08-31 07:26:35 UTC (rev 19900)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry excluding="org/strategoxt/lang/compat/override/*/*" kind="src" path="java/runtime"/>
+	<classpathentry kind="src" path="java/runtime"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry exported="true" kind="lib" path="java/strategoxt.jar" sourcepath="java/lib"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-31 07:25:58 UTC (rev 19899)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-31 07:26:35 UTC (rev 19900)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.IOperatorRegistry;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.library.ssl.SSL_indexedSet_put;
+import org.spoofax.interpreter.library.ssl.SSL_list_loop;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
@@ -152,7 +154,7 @@
 		
     	interopContext.setCurrent(term);
 		try {
-			if (primitive.call(interopContext, InteropStrategy.toInteropStrategies(sargs), targs)) {
+			if (primitive.call(interopContext, InteropStrategy.toInteropStrategies(sargs, this), targs)) {
 				return interopContext.current();
 			} else {
 				return null;

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2009-08-31 07:25:58 UTC (rev 19899)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2009-08-31 07:26:35 UTC (rev 19900)
@@ -29,17 +29,8 @@
 	 * Creates a new InteropStrategy instance.
 	 * 
 	 * @param strategy	The strategy to adapt.
+	 * @param context	The compiled context; may be null if used with an {@link InteropContext}.
 	 */
-	public InteropStrategy(Strategy strategy) {
-		this(strategy, null);
-	}
-	
-	/**
-	 * Creates a new InteropStrategy instance.
-	 * 
-	 * @param strategy	The strategy to adapt.
-	 * @param context	The compiled context, if used with an interpreter context.
-	 */
 	public InteropStrategy(Strategy strategy, Context context) {
 		super(null, null, null);
 		
@@ -47,12 +38,15 @@
 		this.context = context;
 	}
     
-	public static CallT[] toInteropStrategies(Strategy[] strategies) {
+	/**
+	 * @param context	The compiled context; may be null if used with an {@link InteropContext}.
+	 */
+	public static CallT[] toInteropStrategies(Strategy[] strategies, Context context) {
     	if (strategies.length == 0) return NO_CALLTS;
     	
     	CallT[] results = new CallT[strategies.length];
     	for (int i = 0; i < strategies.length; i++)
-    		results[i] = new InteropStrategy(strategies[i]);
+    		results[i] = new InteropStrategy(strategies[i], context);
     	return results;
     }
     
@@ -103,8 +97,13 @@
 	
 	@Override
 	public boolean evaluateWithArgs(IContext env, org.spoofax.interpreter.stratego.Strategy[] sv, IStrategoTerm[] tv) {
-		IStrategoTerm result = strategy.invokeDynamic(
-				getCompiledContext(env),env.current(), fromInteropStrategies(sv), tv);
+		IStrategoTerm result;
+		if (tv.length == 0 && sv.length == 0) {
+			result = strategy.invoke(getCompiledContext(env), env.current());
+		} else {
+			result = strategy.invokeDynamic(
+					getCompiledContext(env), env.current(), fromInteropStrategies(sv), tv);
+		}
 		if (result == null) return false;
 		env.setCurrent(result);		
 		return true;		

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/UncaughtExceptionHandler.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/UncaughtExceptionHandler.java	2009-08-31 07:25:58 UTC (rev 19899)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/UncaughtExceptionHandler.java	2009-08-31 07:26:35 UTC (rev 19900)
@@ -1,5 +1,7 @@
 package org.strategoxt.lang;
 
+import java.lang.management.ManagementFactory;
+
 import org.spoofax.interpreter.core.StackTracer;
 
 /**
@@ -68,7 +70,7 @@
     	
     	return dumpedError;
     }
-	
+    
 	/**
 	 * Class that handles shutdown and unhandled exception events.
 	 */
@@ -76,11 +78,22 @@
 		public void uncaughtException(Thread t, Throwable e) {
 			originalHandler.uncaughtException(t, e);
 			if (e instanceof StackOverflowError && dumpError("Fatal error at")) {
-				System.err.println("Stack overflow.");
+				if (isStackTuned()) {
+					System.err.println("Stack overflow.");
+				} else {
+					System.err.println("Stack overflow (use java -Xss4m to increase the stack size)");
+				}
 			} else {
 				dumpError("Fatal error at");
 			}
 		}
+
+		private boolean isStackTuned() {
+			for (String arg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {
+				if (arg.startsWith("-Xss")) return true;
+			}
+			return false;
+		}
 		
 		@Override
 		public void run() {

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2009-08-31 07:25:58 UTC (rev 19899)
+++ strc-java/trunk/tools/strj-jar	2009-08-31 07:26:35 UTC (rev 19900)
@@ -3,6 +3,7 @@
 ## SETTINGS
 
 MAINCLASS=
+PRINT_CLASSPATH=
 CLASSPATH=strategoxt.jar
 JAR=`if which fastjar &>/dev/null; then echo fastjar; else echo jar; fi`
 JAVAC=`if which ecj &>/dev/null; then echo ecj; else echo javac; fi`
@@ -30,6 +31,8 @@
   elif [ "$P" == "-i" ]; then
     INPUT="$1"
     shift
+  elif [ "$P" == "-p" ]; then
+    PRINT_CLASSPATH=1
   elif [ "$P" == "-o" ]; then
     OUTPUT="$1"
     shift
@@ -42,6 +45,11 @@
   fi
 done
 
+if [ $PRINT_CLASSPATH ]; then
+  echo $CLASSPATH
+  exit
+fi
+
 if [ "$INPUT" == "" ]; then
   echo "Usage: strj-jar [-m MAINCLASS] [-cp CLASSPATH] [-runtimecp CLASSPATH] -i INPUT.java [-o OUTPUT.jar]"
   exit 1



From L.C.L.Kats at tudelft.nl  Mon Aug 31 10:21:44 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 08:21:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19901 - LennartKats -
	in spoofax/trunk/spoofax: org.spoofax.aterm/src/aterm/pure
	org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms
Message-ID: <200908310821.n7V8L6Lp003321@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 08:21:44 +0000 (Mon, 31 Aug 2009)
New Revision: 19901

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19901&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java
Removed:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.aterm/src/aterm/pure/PureFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoTerm.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java

Log:
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java
M      org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java
M      org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoTerm.java

	Added some documentation about the contract imposed by getStorageType(), and 
	ensured consistent implementation.

M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
D      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java
A  +   org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
M      org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java

	Renamed IndexedSet to StrategoSet and made the constructors of the primitive operations public.	

M      org.spoofax.aterm/src/aterm/pure/PureFactory.java

	Added caching for the lower 0-255 ints used in exploded strings and parse trees.


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.aterm/src/aterm/pure/PureFactory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.aterm/src/aterm/pure/PureFactory.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.aterm/src/aterm/pure/PureFactory.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -50,6 +50,8 @@
 public class PureFactory extends SharedObjectFactory implements ATermFactory {
 
   private static int DEFAULT_TERM_TABLE_SIZE = 16; // means 2^16 entries
+  
+  private final ATermInt[] intCache = new ATermInt[256];
 
   private ATermListImpl protoList;
 
@@ -149,6 +151,16 @@
   }
 
   public ATermInt makeInt(int value, ATermList annos) {
+    if (annos == empty && 0 <= value && value <= 255) {
+      synchronized (intCache) {
+        ATermInt result = intCache[value];
+        if (result == null) {
+          protoInt.initHashCode(annos, value);
+          intCache[value] = result = (ATermInt) build(protoInt);
+        }
+        return result;
+      }
+    }
     synchronized (protoInt) {
       protoInt.initHashCode(annos, value);
       return (ATermInt) build(protoInt);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -21,7 +21,7 @@
 	}
     
 	public int getStorageType() {
-		return IMMUTABLE;
+		return MUTABLE; // does not cache its hashCode() method
 	}
 	
 	public IStrategoTerm[] getAllSubterms() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -12,10 +12,6 @@
 
     public abstract ASTNode getWrappee();
     
-    public int getStorageType() {
-        return MUTABLE;
-    }
-    
     @Override
     public boolean match(IStrategoTerm second) {
     	if(!(second instanceof WrappedASTNode))

Deleted: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -1,139 +0,0 @@
-/*
- * Created on 08.aug.2005
- *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
- * 
- * Licensed under the GNU General Public License, v2
- */
-package org.spoofax.interpreter.library.ssl;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Map.Entry;
-
-import org.spoofax.interpreter.terms.BasicTermFactory;
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
-
-public class IndexedSet implements IStrategoTerm {
-        
-    private static final long serialVersionUID = -4514696890481283123L;
-    private int counter;
-    Map<IStrategoTerm, Integer> map;
-    
-    IndexedSet(int initialSize, int maxLoad) {
-        map = new HashMap<IStrategoTerm, Integer>(initialSize, 1.0f*maxLoad/100);
-        counter = 0;
-    }
-    
-    public int put(IStrategoTerm value) {
-        int idx = counter++; 
-        map.put(value, idx);
-        return idx;
-    }
-
-    public int getIndex(IStrategoTerm t) {
-        Integer r = map.get(t);
-        return r == null ? -1 : r;
-    }
-
-    public boolean containsValue(IStrategoTerm t) {
-        return map.containsKey(t);
-    }
-
-    public Collection<Integer> values() {
-        return map.values();
-    }
-
-    public boolean remove(IStrategoTerm t) {
-        return map.remove(t) != null;
-    }
-
-    public void clear() {
-        counter = 0;
-        map.clear();
-    }
-
-    public Collection<IStrategoTerm> keySet() {
-        // FIXME this could easily be more efficient
-        class X implements Comparable<X> {
-            IStrategoTerm t;
-            Integer i;
-            X(IStrategoTerm t, Integer i) {
-                this.t = t;
-                this.i = i;
-            }
-            public int compareTo(X o) {
-                return i.compareTo(o.i);
-            }
-        }
-        List<X> xs = new ArrayList<X>();
-        for(Entry<IStrategoTerm,Integer> e : map.entrySet()) { 
-            xs.add(new X(e.getKey(), e.getValue()));
-        }
-        Collections.sort(xs);
-        List<IStrategoTerm> r = new ArrayList<IStrategoTerm>();
-        for(X x : xs)
-            r.add(x.t);
-        return r;
-    }
-
-    public boolean containsKey(IStrategoTerm t) {
-        return map.containsKey(t);
-    }
-
-    public int size() {
-        return map.size();
-    }
-    
-    public Set<Entry<IStrategoTerm, Integer>> entrySet() {
-        return map.entrySet();
-    }
-
-    public IStrategoTerm[] getAllSubterms() {
-        return BasicTermFactory.EMPTY;
-    }
-
-    public IStrategoList getAnnotations() {
-        return null;
-    }
-
-    public int getStorageType() {
-        return MUTABLE;
-    }
-
-    public IStrategoTerm getSubterm(int index) {
-        throw new UnsupportedOperationException();
-    }
-
-    public int getSubtermCount() {
-        return 0;
-    }
-
-    public int getTermType() {
-        return BLOB;
-    }
-
-    public boolean match(IStrategoTerm second) {
-        return second == this;
-    }
-    
-    public int hashCode() {
-        return System.identityHashCode(this);
-    }
-
-    public void prettyPrint(ITermPrinter pp) {
-        pp.print(toString());
-    }
-    
-    @Override
-    public String toString() {
-        return String.valueOf(hashCode());
-    }
-}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_fputs.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -32,7 +32,8 @@
 
         SSLLibrary or = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
         
-        // TODO: Don't use a printstream because of its quiet failing behavior
+        // TODO: Don't use a printstream because of its quiet failing behavior and overhead
+        //       (use BufferedOutputStreamWriter instead?)
         PrintStream ous = or.getIOAgent().getOutputStream(Tools.asJavaInt(targs[1]));
         ous.print(Tools.javaString(targs[0]));
         // if (ous.checkError()) return false; // UNDONE: quietly flushes the stream!

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_destroy.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -15,7 +15,7 @@
 
 public class SSL_hashtable_destroy extends AbstractPrimitive {
 
-    protected SSL_hashtable_destroy() {
+    public SSL_hashtable_destroy() {
         super("SSL_hashtable_destroy", 0, 1);
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_get.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -15,7 +15,7 @@
 
 public class SSL_hashtable_get extends AbstractPrimitive {
 
-    protected SSL_hashtable_get() {
+    public SSL_hashtable_get() {
         super("SSL_hashtable_get", 0, 2);
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_keys.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -15,7 +15,7 @@
 
 public class SSL_hashtable_keys extends AbstractPrimitive {
 
-    protected SSL_hashtable_keys() {
+    public SSL_hashtable_keys() {
         super("SSL_hashtable_keys", 0, 1);
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_put.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -15,7 +15,7 @@
 
 public class SSL_hashtable_put extends AbstractPrimitive {
 
-    protected SSL_hashtable_put() {
+    public SSL_hashtable_put() {
         super("SSL_hashtable_put", 0, 3);
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_remove.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -15,7 +15,7 @@
 
 public class SSL_hashtable_remove extends AbstractPrimitive {
 
-    protected SSL_hashtable_remove() {
+    public SSL_hashtable_remove() {
         super("SSL_hashtable_remove", 0, 2);
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_hashtable_reset.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -15,7 +15,7 @@
 
 public class SSL_hashtable_reset extends AbstractPrimitive {
 
-    protected SSL_hashtable_reset() {
+    public SSL_hashtable_reset() {
         super("SSL_hashtable_reset", 0, 1);
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_create.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -31,7 +31,7 @@
         int initialSize = ((IStrategoInt)targs[0]).intValue();
         int maxLoad = ((IStrategoInt)targs[1]).intValue();
 
-        IStrategoTerm result = new IndexedSet(initialSize, maxLoad);
+        IStrategoTerm result = new StrategoSet(initialSize, maxLoad);
         env.setCurrent(result);
         
         return true;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_destroy.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -15,15 +15,15 @@
 
 public class SSL_indexedSet_destroy extends AbstractPrimitive {
 
-    protected SSL_indexedSet_destroy() {
+    public SSL_indexedSet_destroy() {
         super("SSL_indexedSet_destroy", 0, 1);
     }
     
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
-        if(!(targs[0] instanceof IndexedSet))
+        if(!(targs[0] instanceof StrategoSet))
             return false;
         
-        IndexedSet set = (IndexedSet) targs[0];
+        StrategoSet set = (StrategoSet) targs[0];
         set.clear();
         
         return true;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_elements.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -14,15 +14,15 @@
 
 public class SSL_indexedSet_elements extends AbstractPrimitive {
 
-    protected SSL_indexedSet_elements() {
+    public SSL_indexedSet_elements() {
         super("SSL_indexedSet_elements", 0, 1);
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
-        if(!(targs[0] instanceof IndexedSet))
+        if(!(targs[0] instanceof StrategoSet))
             return false;
         
-        IndexedSet is = (IndexedSet) targs[0];
+        StrategoSet is = (StrategoSet) targs[0];
         
         env.setCurrent(env.getFactory().makeList(is.keySet()));
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_getIndex.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -14,15 +14,15 @@
 
 public class SSL_indexedSet_getIndex extends AbstractPrimitive {
 
-    protected SSL_indexedSet_getIndex() {
+    public SSL_indexedSet_getIndex() {
         super("SSL_indexedSet_getIndex", 0, 2);
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
-        if(!(targs[0] instanceof IndexedSet))
+        if(!(targs[0] instanceof StrategoSet))
             return false;
         
-        IndexedSet is = (IndexedSet) targs[0];
+        StrategoSet is = (StrategoSet) targs[0];
         
         int idx = is.getIndex(targs[1]);
         if(idx == -1)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_put.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -15,17 +15,17 @@
 
 public class SSL_indexedSet_put extends AbstractPrimitive {
 
-    protected SSL_indexedSet_put() {
+    public SSL_indexedSet_put() {
         super("SSL_indexedSet_put", 1, 2);
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
             throws InterpreterException {
         
-        if(!(targs[0] instanceof IndexedSet))
+        if(!(targs[0] instanceof StrategoSet))
             return false;
         
-        IndexedSet is = (IndexedSet) targs[0];
+        StrategoSet is = (StrategoSet) targs[0];
         
         if(is == null)
             return false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_remove.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -14,15 +14,15 @@
 
 public class SSL_indexedSet_remove extends AbstractPrimitive {
 
-    protected SSL_indexedSet_remove() {
+    public SSL_indexedSet_remove() {
         super("SSL_indexedSet_remove", 0, 2);
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
-        if(!(targs[0] instanceof IndexedSet))
+        if(!(targs[0] instanceof StrategoSet))
             return false;
         
-        IndexedSet is = (IndexedSet) targs[0];
+        StrategoSet is = (StrategoSet) targs[0];
         if(is == null)
             return false;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_indexedSet_reset.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -14,15 +14,15 @@
 
 public class SSL_indexedSet_reset extends AbstractPrimitive {
 
-    protected SSL_indexedSet_reset() {
+    public SSL_indexedSet_reset() {
         super("SSL_indexedSet_reset", 0, 1);
     }
 
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) {
-        if(!(targs[0] instanceof IndexedSet))
+        if(!(targs[0] instanceof StrategoSet))
             return false;
         
-        IndexedSet is = (IndexedSet) targs[0];
+        StrategoSet is = (StrategoSet) targs[0];
         
         is.clear();
         env.setCurrent(is);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_table_fold.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -18,7 +18,7 @@
 
 public class SSL_table_fold extends AbstractPrimitive {
 
-    protected SSL_table_fold() {
+    public SSL_table_fold() {
         super("SSL_table_fold", 1, 2);
     }
 

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java (from rev 19850, spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/IndexedSet.java)
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -0,0 +1,140 @@
+/*
+ * Created on 08.aug.2005
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.library.ssl;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.Map.Entry;
+
+import org.spoofax.interpreter.terms.BasicTermFactory;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+
+public class StrategoSet implements IStrategoTerm, Serializable {
+        
+    private static final long serialVersionUID = -4514696890481283123L;
+    private int counter;
+    private final Map<IStrategoTerm, Integer> map;
+    
+    public StrategoSet(int initialSize, int maxLoad) {
+        map = new HashMap<IStrategoTerm, Integer>(initialSize, 1.0f*maxLoad/100);
+        counter = 0;
+    }
+    
+    public int put(IStrategoTerm value) {
+        int idx = counter++; 
+        map.put(value, idx);
+        return idx;
+    }
+
+    public int getIndex(IStrategoTerm t) {
+        Integer r = map.get(t);
+        return r == null ? -1 : r;
+    }
+
+    public boolean containsValue(IStrategoTerm t) {
+        return map.containsKey(t);
+    }
+
+    public Collection<Integer> values() {
+        return map.values();
+    }
+
+    public boolean remove(IStrategoTerm t) {
+        return map.remove(t) != null;
+    }
+
+    public void clear() {
+        counter = 0;
+        map.clear();
+    }
+
+    public Collection<IStrategoTerm> keySet() {
+        // FIXME this could easily be more efficient
+        class X implements Comparable<X> {
+            IStrategoTerm t;
+            Integer i;
+            X(IStrategoTerm t, Integer i) {
+                this.t = t;
+                this.i = i;
+            }
+            public int compareTo(X o) {
+                return i.compareTo(o.i);
+            }
+        }
+        List<X> xs = new ArrayList<X>();
+        for(Entry<IStrategoTerm,Integer> e : map.entrySet()) { 
+            xs.add(new X(e.getKey(), e.getValue()));
+        }
+        Collections.sort(xs);
+        List<IStrategoTerm> r = new ArrayList<IStrategoTerm>();
+        for(X x : xs)
+            r.add(x.t);
+        return r;
+    }
+
+    public boolean containsKey(IStrategoTerm t) {
+        return map.containsKey(t);
+    }
+
+    public int size() {
+        return map.size();
+    }
+    
+    public Set<Entry<IStrategoTerm, Integer>> entrySet() {
+        return map.entrySet();
+    }
+
+    public IStrategoTerm[] getAllSubterms() {
+        return BasicTermFactory.EMPTY;
+    }
+
+    public IStrategoList getAnnotations() {
+        return null;
+    }
+
+    public int getStorageType() {
+        return MUTABLE;
+    }
+
+    public IStrategoTerm getSubterm(int index) {
+        throw new UnsupportedOperationException();
+    }
+
+    public int getSubtermCount() {
+        return 0;
+    }
+
+    public int getTermType() {
+        return BLOB;
+    }
+
+    public boolean match(IStrategoTerm second) {
+        return second == this;
+    }
+    
+    public int hashCode() {
+        return System.identityHashCode(this);
+    }
+
+    public void prettyPrint(ITermPrinter pp) {
+        pp.print(toString());
+    }
+    
+    @Override
+    public String toString() {
+        return String.valueOf(hashCode());
+    }
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoTerm.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoTerm.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoTerm.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -16,7 +16,7 @@
     }
     
     public int getStorageType() {
-        return IMMUTABLE;
+        return MUTABLE; // provides no guarantees (and does not cache hashCode())
     }
 
     public boolean match(IStrategoTerm second) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java	2009-08-31 07:26:35 UTC (rev 19900)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java	2009-08-31 08:21:44 UTC (rev 19901)
@@ -28,7 +28,26 @@
     public int getSubtermCount();
     public IStrategoTerm getSubterm(int index);
     public IStrategoTerm[] getAllSubterms();
+    
     public int getTermType();
+    
+    /**
+     * Indicates the assumptions that can be made about how this term is stored.
+     * 
+     * One of {@value #MUTABLE}, {@value #IMMUTABLE}, {@value #SHARABLE} and
+     * {@value #MAXIMALLY_SHARED}. For each a specific contract exists; 
+     * only {@value #MUTABLE} poses no restrictions on the implementation.
+     * 
+     * All non-{@value #MUTABLE} terms are expected to have an O(1)
+     * {@link #hashCode()} implementation.
+     * 
+     * A general contract is that the storage type of a term must always 
+     * be smaller than or equal to the storage types of its subterms.
+     * 
+     * Finally, when multiple term factories are used together,
+     * they should use the same hash codes for equal terms: 
+     * the TermFactory classes should be used as a reference.
+     */
     public int getStorageType();
     
     public IStrategoList getAnnotations();



From L.C.L.Kats at tudelft.nl  Mon Aug 31 11:59:24 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 09:59:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19902 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/lib
	org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.generator/src/sdf2imp/util
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <200908310958.n7V9wjAG004576@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 09:59:23 +0000 (Mon, 31 Aug 2009)
New Revision: 19902

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19902&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPJSGLRIPrimitive.java

Log:
- Ensured sdf2imp always generates a new parse table when needed
- Improved sdf2imp logging
- Added a work-around for when a parsed result wasn't cached, which made the colorer fail
- Fixed a problem in the new project wizard where the language name was not equal to the SDF module name


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-31 09:59:23 UTC (rev 19902)
@@ -83,11 +83,12 @@
         rules(StartSymbol := "Start")
       end;
       create-grammar;
-      input := <pack-sdf> FILE(<conc-strings> ("syntax/", <get-main-class-name>, ".sdf"))
+      input := <pack-sdf> FILE(<conc-strings> ("syntax/", <get-sdf-main-module>, ".sdf"))
     end;
   
     configure-main-descriptor;
     <sdf2rtg> input;
+    <copy-or-create-parse-table> input;
   
     if NoExistingDescriptor then
       create-main-descriptor
@@ -116,8 +117,6 @@
     copy-jars;
     copy-def-file;
     
-    <copy-or-create-parse-table> input;
-    
     say(!"SUCCESS: completed with 0 fatal errors.")
   
   // TODO: XTC detox -_-;;

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2009-08-31 09:59:23 UTC (rev 19902)
@@ -50,6 +50,8 @@
         
         <target name="sdf2imp-eclipse" depends="sdf2table">
             <!-- HACK: Trigger the Eclipse builder rather than build it here -->
+            <!-- (if we did built it here, we'd have to use the -p option to -->
+            <!--  specify the parse table, and put the table in another dir  -->
             <touch file="include/${esvmodule}.packed.esv"/>
             <eclipse.refreshLocal resource="include/${esvmodule}.packed.esv"/>
         </target>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-grammar.str	2009-08-31 09:59:23 UTC (rev 19902)
@@ -10,7 +10,7 @@
     create-grammar-common
   
   create-grammar-main =
-    <file-exists> <conc-strings> ("syntax/", <get-main-class-name>, ".sdf")
+    <file-exists> <conc-strings> ("syntax/", <get-sdf-main-module>, ".sdf")
   <+
     name        := <get-sdf-main-module>;
     startsymbol := <StartSymbol>;

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-31 09:59:23 UTC (rev 19902)
@@ -17,15 +17,13 @@
     copy-parse-table <+ xtc-ensure-file; create-parse-table <+ fatal-err(|"Could not copy or create parse table")
   
   copy-parse-table =
-    where(
-      <eq> (<ParseTable>, <parse-table-target; file-exists>)
-    <+
+    if not(<eq> (<ParseTable>, <parse-table-target>)) then
       ParseTable;
       if file-exists then
         print-filename(|[], <parse-table-target>);
         <copy-file> (<id>, <parse-table-target>)
       end
-    )
+    end
     
   create-parse-table:
     FILE(input) -> FILE(output)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str	2009-08-31 09:59:23 UTC (rev 19902)
@@ -40,6 +40,9 @@
     ?Import(name);
     !FILE(<add-extension; include-input-dir-prefix; file-exists> (name, "esv"));
     parse-xtc-file-report-errors(|<parse-table-descriptor>, "Module");
+    if oncetd(?amb(_)) then
+      fatal-err(|"Parsed module has ambiguities")
+    end;
     
     risky(
       ?Module(name, _, _)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str	2009-08-31 09:59:23 UTC (rev 19902)
@@ -68,7 +68,7 @@
         pp-descriptor-to-string
       | "Illegal editor service descriptor output"
       );
-      output-text-file(|[path], filename)
+      output-text-file'(|[path], filename)
     else
       verbose-msg(!"Skipping", !fullpath)
     end
@@ -83,7 +83,7 @@
     );
     
     pp-descriptor-to-string;
-    output-text-file(|[path], filename)
+    output-text-file'(|[path], filename)
   
   is-descriptor-imported(|name) =
     MainDescriptor;
@@ -111,7 +111,7 @@
     | "Illegal Java output"
     );
     
-    output-text-file(|filename)
+    output-text-file'(|filename)
 
   output-xml-file(|pathparts, filename) =
     print-filename(|pathparts, filename);
@@ -121,14 +121,18 @@
     | "Illegal XML output"
     );
     
-    output-text-file(|pathparts, filename)
+    output-text-file'(|pathparts, filename)
   
   output-text-file(|pathparts, filename) =
+    print-filename(|pathparts, filename);
+    output-text-file'(|pathparts, filename)
+  
+  output-text-file'(|pathparts, filename) =
     where(path := <create-dirs> pathparts);
     
-    output-text-file(|<conc-strings> (path, "/", filename))
+    output-text-file'(|<conc-strings> (path, "/", filename))
   
-  output-text-file(|filename) =
+  output-text-file'(|filename) =
     where(file := <fopen> (filename, "w"));
     
     <fputs> (<id>, file);

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2009-08-31 09:59:23 UTC (rev 19902)
@@ -20,7 +20,6 @@
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoErrorExit;
 import org.strategoxt.lang.StrategoExit;
-import org.strategoxt.lang.compat.SSL_EXT_java_call;
 import org.strategoxt.libstratego_lib.dr_scope_all_end_0_0;
 import org.strategoxt.libstratego_lib.dr_scope_all_start_0_0;
 import org.strategoxt.permissivegrammars.make_permissive;
@@ -47,7 +46,7 @@
 			
 			agent = new EditorIOAgent();
 			context = new Context(Environment.getTermFactory(), agent);
-			SSL_EXT_java_call.registerClassLoader(make_permissive.class.getClassLoader());
+			context.registerClassLoader(make_permissive.class.getClassLoader());
 			sdf2imp.init(context);
 			
 		} catch (Throwable e) { // (catch classes not loading, etc.)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2009-08-31 09:59:23 UTC (rev 19902)
@@ -122,8 +122,7 @@
 		ATerm asfix = parseNoImplode(inputChars, filename);
 		if (monitor.isCanceled())
 			throw new OperationCanceledException();
-		AstNode imploded = imploder.implode(asfix, currentTokenizer);
-		return RootAstNode.makeRoot(imploded, getController());
+		return internalImplode(asfix);
 	}
 	
 	/**
@@ -152,6 +151,16 @@
 	}
 	
 	/**
+	 * Implodes a parse tree that was just produced.
+	 * 
+	 * @note May only work with the latest parse tree produced.
+	 */
+	protected RootAstNode internalImplode(ATerm asfix) {
+		AstNode imploded = imploder.implode(asfix, currentTokenizer);
+		return RootAstNode.makeRoot(imploded, getController());		
+	}
+	
+	/**
 	 * Parse an input, returning the AST and initializing the parse stream.
 	 * Also initializes a new tokenizer for the given input.
 	 */ 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2009-08-31 09:59:23 UTC (rev 19902)
@@ -150,7 +150,7 @@
 		String filename = getPath().toPortableString();
 		
 		// XXX: SGLR.asyncAbort() is never called until the old parse actually completes
-		//      need to use the monitor to get this working
+		//      need to intercept cancellation events in the running thread's monitor instead
 		getParser().asyncAbort();
 		
 		IResource resource = getResource();
@@ -159,24 +159,16 @@
 			
 			if (isStartupParsed)
 				Job.getJobManager().beginRule(resource, monitor); // enter lock
-
-			// TODO: Wait with parsing until token completes? and do it again for timer?
 			
-			// TODO: set update field, or use AstMessageHandler if all else fails
-			
-			ATerm asfix;
-			
 			Debug.startTimer();
 			
 			char[] inputChars = input.toCharArray();
 				
 			if (monitor.isCanceled()) return null;
-			currentAst = parser.parse(inputChars, filename);
+			ATerm asfix = parser.parseNoImplode(inputChars, filename);
 			if (monitor.isCanceled()) return null;
-			// For error handling, retrieve the cached, unimploded asfix tree
-			asfix = parser.parseNoImplode(inputChars, filename);
+			currentAst = parser.internalImplode(asfix);
 			if (monitor.isCanceled()) return null;
-			
 
 			if (isStartupParsed) {
 				// Threading concerns:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPJSGLRIPrimitive.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPJSGLRIPrimitive.java	2009-08-31 08:21:44 UTC (rev 19901)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPJSGLRIPrimitive.java	2009-08-31 09:59:23 UTC (rev 19902)
@@ -35,8 +35,11 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 			throws InterpreterException {
 		
-		// TODO: Use svars[0] onError argument?
+		// TODO: Use svars[0] onError argument
+		//       see jsglr compat component
 		
+		// XXX: IMPJSGLRIPrimitive et al should be used again
+		
 		// XXX: Don't use recovery from Interpreter-primitive parsing
 		
 		if(!Tools.isTermString(tvars[0]))



From L.C.L.Kats at tudelft.nl  Mon Aug 31 12:45:32 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 10:45:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19903 - LennartKats -
	in strc-java/trunk: . META-INF
Message-ID: <200908311044.n7VAisRl005293@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 10:45:32 +0000 (Mon, 31 Aug 2009)
New Revision: 19903

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19903&view=rev

Modified:
   strc-java/trunk/META-INF/MANIFEST.MF
   strc-java/trunk/build.properties

Log:
Fixed a stupid class loading regression caused by merging in the one-file-per-strategy branch.

Changes:

Modified: strc-java/trunk/META-INF/MANIFEST.MF
===================================================================
--- strc-java/trunk/META-INF/MANIFEST.MF	2009-08-31 09:59:23 UTC (rev 19902)
+++ strc-java/trunk/META-INF/MANIFEST.MF	2009-08-31 10:45:32 UTC (rev 19903)
@@ -27,5 +27,4 @@
 Bundle-ActivationPolicy: lazy
 Bundle-ClassPath: .,
  java/runtime/,
- java/compiler/,
- java/lib/
+ java/strategoxt.jar

Modified: strc-java/trunk/build.properties
===================================================================
--- strc-java/trunk/build.properties	2009-08-31 09:59:23 UTC (rev 19902)
+++ strc-java/trunk/build.properties	2009-08-31 10:45:32 UTC (rev 19903)
@@ -3,5 +3,4 @@
 bin.includes = META-INF/,\
                .,\
                java/runtime/,\
-               java/compiler/,\
-               java/lib/
+               java/strategoxt.jar



From L.C.L.Kats at tudelft.nl  Mon Aug 31 12:46:56 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 10:46:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19904 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
Message-ID: <200908311046.n7VAkIRw005316@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 10:46:56 +0000 (Mon, 31 Aug 2009)
New Revision: 19904

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19904&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java

Log:
Proper error handling for SSL_copy.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	2009-08-31 10:45:32 UTC (rev 19903)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	2009-08-31 10:46:56 UTC (rev 19904)
@@ -61,6 +61,7 @@
                 return false;
             }
     
+            // TODO: Optimize - use the fancy new Java API for copying files
             byte[] bs = new byte[1024];
             int read;
         
@@ -73,7 +74,8 @@
             if (closeOut) fos.close();
             if (closeIn) fis.close();
         } catch(IOException e) {
-            throw new InterpreterException(e);
+            agent.getOutputStream(IOAgent.CONST_STDERR).println("SSL_copy: " + e.getMessage());
+            return false;
         }
         
         



From L.C.L.Kats at tudelft.nl  Mon Aug 31 13:31:17 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 11:31:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19905 - LennartKats -
	in strategoxt/trunk: stratego-libraries/lib/spec/lang
	strc-core/lib/stratego/strc/front
Message-ID: <200908311130.n7VBUdVY005964@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 11:31:17 +0000 (Mon, 31 Aug 2009)
New Revision: 19905

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19905&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/lang/dynamic-rules.str
   strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str

Log:
- Fixed the trace reported by with(fail | "message")
- Added scoping of the config table to dr-scope-all
- Added desugaring of if-java-platform to the front-end


Changes:

Modified: strategoxt/trunk/stratego-libraries/lib/spec/lang/dynamic-rules.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/lang/dynamic-rules.str	2009-08-31 10:46:56 UTC (rev 19904)
+++ strategoxt/trunk/stratego-libraries/lib/spec/lang/dynamic-rules.str	2009-08-31 11:31:17 UTC (rev 19905)
@@ -125,9 +125,12 @@
 
   /**
    * Scope all dynamic rules.
+   *
+   * @note While get-config and set-config do not actually use dynamic rules,
+   *       this strategy also scopes the config hashtable.
    */
   dr-scope-all(s) =
-    {| DrScopedRules :
+    {| DrScopedRules, DrScopedConfig :
       finally(
         dr-scope-all-start; s
       , dr-scope-all-end
@@ -136,31 +139,45 @@
 
   /**
    * Start a new scope for all dynamic rules.
+   *
+   * @note While get-config and set-config do not actually use dynamic rules,
+   *       this strategy also scopes the config hashtable.
+   *
+   * @see dr-scope-all(s)
    */
   dr-scope-all-start =
     where(
-      table := Hashtable(<dr-rule-sets-hashtable>);
-      names := ["DrScopedRules" | <hashtable-keys> table];
+      config := <lookup-table(|"config")>
+    ; table-hashtable
+    ; hashtable-put(|"config", <hashtable-copy> config)
+    ; table  := Hashtable(<dr-rule-sets-hashtable>)
+    ; names  := ["DrScopedRules" | <hashtable-keys> table]
       
-      dr-begin-scopes(|names);
-      rules(DrScopedRules := names)
+    ; dr-begin-scopes(|names)
+    ; rules(
+        DrScopedRules  := names
+        DrScopedConfig := config
+      )
     )
 
   /**
    * End a scope for all dynamic rules.
+   *
+   * @see dr-scope-all(s)
    */
   dr-scope-all-end =
     where(
-      table := Hashtable(<dr-rule-sets-hashtable>);
-      names := <DrScopedRules>;
-      
-      dr-end-scopes(|names);
+      table := Hashtable(<dr-rule-sets-hashtable>)
+    ; names := <DrScopedRules>
+    ; table-hashtable
+    ; hashtable-put(|"config", <DrScopedConfig>)
+    ; dr-end-scopes(|names)
   
       // Remove other, newly defined rules
-      <diff> (<hashtable-keys> table, names);
-      list-loop(
-        { key: ?key;
-          <hashtable-remove(|key)> table
+    ; <diff> (<hashtable-keys> table, names)
+    ; list-loop(
+        { key: ?key
+        ; <hashtable-remove(|key)> table
         }
       )
     )

Modified: strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str	2009-08-31 10:46:56 UTC (rev 19904)
+++ strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str	2009-08-31 11:31:17 UTC (rev 19905)
@@ -19,7 +19,7 @@
    *       failures raised by with clauses and uses of this strategy.
    */
   with(s|message) =
-    where(s <+ report-failure(|message, <prim("SSL_stacktrace_get_all_frame_names")>))
+    where(s <+ ?term; prim("SSL_stacktrace_get_all_frame_names"); report-failure(|message, term))
   
   /**
    * @obsolete

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str	2009-08-31 10:46:56 UTC (rev 19904)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str	2009-08-31 11:31:17 UTC (rev 19905)
@@ -354,6 +354,21 @@
 
   Desugar :
     Call(f, ss) -> CallT(f, ss, [])
+  
+  Desugar :
+    CallT(SVar("if-java-platform"), [s], []) -> Id()
+    where
+      not(<get-config> "JAVA_PLATFORM" + <get-config> "-F")
+  
+  Desugar :
+    CallT(SVar("if-c-platform"), [s], []) -> s
+    where
+      not(<get-config> "JAVA_PLATFORM" + <get-config> "-F")
+  
+  Desugar :
+    CallT(SVar("if-java-platform"), [s], []) -> s
+    where
+      <get-config> "JAVA_PLATFORM"; not(<get-config> "-F")
 
   DesugarOnce :
     PrimNoArgs(f) -> PrimT(<try(un-double-quote)>f, [], [])



From L.C.L.Kats at tudelft.nl  Mon Aug 31 14:11:44 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 12:11:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19906 - LennartKats -
	spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
Message-ID: <200908311211.n7VCB6jm006575@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 12:11:44 +0000 (Mon, 31 Aug 2009)
New Revision: 19906

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19906&view=rev

Modified:
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str

Log:


Changes:

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java	2009-08-31 11:31:17 UTC (rev 19905)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/Disambiguator.java	2009-08-31 12:11:44 UTC (rev 19906)
@@ -178,6 +178,7 @@
             t = filterTree(t, false);
         }
         
+        // TODO: Move convertToATerm to SGLR.java and support IStrategoTerms
         ATerm result = convertToATerm(t);
         assert Term.asAppl(result).getAFun().getName().equals("parsetree");
         return result;

Modified: spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java	2009-08-31 11:31:17 UTC (rev 19905)
+++ spoofax/branches/spoofax-recovery/src/org/spoofax/jsglr/ParseTable.java	2009-08-31 12:11:44 UTC (rev 19906)
@@ -49,6 +49,10 @@
     transient public AFun ambAFun;
 
     private Label[] injections;
+    
+    // TODO: allocate prototypes to avoid measurable GC overhead in ParseTable construction
+    //       (especially when using the CMS garbage collector, those gotos and stuff
+    //        introduce a lot of overhead)
 
     private transient HashMap<Goto, Goto> gotoCache = new HashMap<Goto, Goto>();
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	2009-08-31 11:31:17 UTC (rev 19905)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_copy.java	2009-08-31 12:11:44 UTC (rev 19906)
@@ -74,7 +74,7 @@
             if (closeOut) fos.close();
             if (closeIn) fis.close();
         } catch(IOException e) {
-            agent.getOutputStream(IOAgent.CONST_STDERR).println("SSL_copy: " + e.getMessage());
+            agent.getOutputStream(IOAgent.CONST_STDERR).println("SSL_copy: Could not copy file " + e.getMessage());
             return false;
         }
         

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-31 11:31:17 UTC (rev 19905)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/Context.java	2009-08-31 12:11:44 UTC (rev 19906)
@@ -12,12 +12,11 @@
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.IOperatorRegistry;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
-import org.spoofax.interpreter.library.ssl.SSL_indexedSet_put;
-import org.spoofax.interpreter.library.ssl.SSL_list_loop;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.lang.compat.CompatManager;
+import org.strategoxt.lang.compat.SSL_EXT_java_call;
 import org.strategoxt.lang.terms.TermFactory;
 
 /**
@@ -101,6 +100,20 @@
         op.setIOAgent(ioAgent);
     }
 	
+	/**
+	 * Registers a new class loader used for dynamical class loading
+	 * (using {@link SSL_EXT_java_call}). 
+	 * 
+	 * This method is only useful in applications that employ multiple class
+	 * loaders (such as Eclipse). Typically, this method is used in the form
+	 * <code>registerClassLoader(C.class.getClassLoader())</code> where
+	 * <code>C</code> is a class that would be dynamically loaded
+	 * by a Stratego program.
+	 */
+	public void registerClassLoader(ClassLoader classLoader) {
+		SSL_EXT_java_call.registerClassLoader(classLoader);
+	}
+	
 	public final IOperatorRegistry getOperatorRegistry(String domain) {
 		return operatorRegistryMap.get(domain);
 	}

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-31 11:31:17 UTC (rev 19905)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_java_call.java	2009-08-31 12:11:44 UTC (rev 19906)
@@ -2,6 +2,7 @@
 
 import static org.spoofax.interpreter.core.Tools.*;
 
+import java.io.IOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -42,6 +43,15 @@
 		super("SSL_EXT_java_call", 0, 3);
 	}
 	
+	/**
+	 * Registers a new class loader used for dynamical class loading. 
+	 * 
+	 * This method is only useful in applications that employ multiple class
+	 * loaders (such as Eclipse). Typically, this method is used in the form
+	 * <code>registerClassLoader(C.class.getClassLoader())</code> where
+	 * <code>C</code> is a class that would be dynamically loaded
+	 * by a Stratego program.
+	 */
 	public static void registerClassLoader(ClassLoader classLoader) {
 		synchronized (asyncClassLoaders) {
 			asyncClassLoaders.add(classLoader);
@@ -64,9 +74,11 @@
 
 		Context parentContext = ((InteropContext) env).getContext();
 		Context context;
+		String oldWorkingDir = null;
 		if (sameContext) {
 			context = parentContext;
 		} else {
+			oldWorkingDir = parentContext.getIOAgent().getWorkingDir();
 			context = new Context(parentContext.getFactory(), parentContext.getIOAgent());
 			context = initContext(context, className);
 			if (context == null) return false;
@@ -84,6 +96,12 @@
 			if (sameContext) throw new StrategoExit(e.getValue(), e);
 			
 			return e.getValue() == StrategoExit.SUCCESS;
+		} finally {
+			try {
+				if (!sameContext) context.getIOAgent().setWorkingDir(oldWorkingDir);
+			} catch (Exception e) {
+				// Must ignore chdir exceptions here
+			}
 		}
 	}
 	

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-31 11:31:17 UTC (rev 19905)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/xtc-compat.str	2009-08-31 12:11:44 UTC (rev 19906)
@@ -56,7 +56,7 @@
   override report-failure(|message, term) =
     report-failure(
       log(|Critical(), message, term);
-      SRTS-EXT-fatal-err(|msg, <try(concat-strings)> term)
+      SRTS-EXT-fatal-err(|message, <try(concat-strings)> term)
     )
   
   external SRTS-EXT-fatal-err(|msg, term)



From L.C.L.Kats at tudelft.nl  Mon Aug 31 14:13:18 2009
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 31 Aug 2009 12:13:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 19907 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp
	org.strategoxt.imp.generator/src/sdf2imp/lib
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
Message-ID: <200908311212.n7VCCdXI006592@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2009-08-31 12:13:18 +0000 (Mon, 31 Aug 2009)
New Revision: 19907

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=19907&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java

Log:
New project creation fixes/tweaks.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str	2009-08-31 12:11:44 UTC (rev 19906)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/lib/core-sdf-grammar2rtg.str	2009-08-31 12:13:18 UTC (rev 19907)
@@ -25,7 +25,7 @@
     ; map(grammar2prodrules <+ fatal-err(|"sdf2rtg: Rewriting syntax section failed"); fail)
     ; concat
     ; if ?[] then
-        fatal-err(|"No production rules in RTG. Did you specify the right main module?")
+        fatal-err-msg(|"No production rules in RTG. Did you specify the right main module?")
       else
         ?prods
       end

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-31 12:11:44 UTC (rev 19906)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str	2009-08-31 12:13:18 UTC (rev 19907)
@@ -39,6 +39,7 @@
     esv -> <packed-descriptor-file-name>
     with
       file-exists
+    ; not(<get-config> SdfMainModuleFlag()) // (should be read from the file)
     where
       rules(InputFile := esv);
       <sdf2imp> FILE(esv)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-31 12:11:44 UTC (rev 19906)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/options.str	2009-08-31 12:13:18 UTC (rev 19907)
@@ -53,7 +53,7 @@
   jar-option =
     MultiArgOption(
       "-jar"
-    , rules(JarLocation := <id>);
+    , rules(JarLocations := <id>);
       list-loop(
         if not(file-exists) then
           fatal-err(|"File does not exist")

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-08-31 12:11:44 UTC (rev 19906)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/copy-jars.str	2009-08-31 12:13:18 UTC (rev 19907)
@@ -6,8 +6,9 @@
 strategies
   
   copy-jars =
-    if JarLocation then
+    if JarLocations then
+      verbose-msg(!"Copying jar files", JarLocations; separate-by(|","); concat-strings);
       <file-exists <+ mkdir> "aux/";
-      JarLocation;
+      JarLocations;
       list-loop(<copy-file> (<id>, "aux/"))
     end

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-31 12:11:44 UTC (rev 19906)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-table.str	2009-08-31 12:13:18 UTC (rev 19907)
@@ -31,7 +31,6 @@
       FILE(input') := <create-permissive-grammar> FILE(input);
       output       := <parse-table-target>;
       print-filename(|[], output);
-      <file-exists <+ mkdir> "include";
       <xtc-command(!"sdf2table")> ["-i", input', "-o", output, "-m", <get-sdf-main-module>]
   
   create-permissive-grammar:
@@ -51,7 +50,9 @@
       output := input
 
   permissive-grammar-target =
+    <file-exists <+ mkdir> "include";
     <conc-strings> ("include/", <get-sdf-main-module>, "-Permissive.gendef")
 
   parse-table-target =
+    <file-exists <+ mkdir> "include";
     <conc-strings> ("include/", <get-sdf-main-module>, ".tbl")

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-31 12:11:44 UTC (rev 19906)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java	2009-08-31 12:13:18 UTC (rev 19907)
@@ -113,6 +113,7 @@
 			try {
 				String jar1 = org.strategoxt.libstratego_lib.Main.class.getProtectionDomain().getCodeSource().getLocation().getFile();
 				String jar2 = make_permissive.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+				assert jar1.endsWith(".jar") && jar2.endsWith(".jar");
 				sdf2imp.mainNoExit(context, "-m", languageName, "-pn", projectName, "-n", packageName, "-e", extensions, "-jar", jar1, jar2);
 			} catch (StrategoErrorExit e) {
 				Environment.logException(e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-31 12:11:44 UTC (rev 19906)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2009-08-31 12:13:18 UTC (rev 19907)
@@ -147,7 +147,7 @@
 	}
 	
 	public static ParseTable getParseTable(Language language) {
-		assertMainThread();
+		// UNDONE: assertMainThread();
 		
 		synchronized (getSyncRoot()) { // synchronized on registration
 			ParseTable table = parseTables.get(language.getName());



