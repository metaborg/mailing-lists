From gabrielkonat at gmail.com  Sun Apr  1 00:39:26 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Sat, 31 Mar 2012 22:39:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24700 -
	spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans
	spoofax-imp/trunk/experimental/NamingExperiment/lib
Message-ID: <20120331223926.A1A6C7F800D@mx1.tudelft.nl>

Author: gkonat
Date: Sat Mar 31 22:39:25 2012
New Revision: 24700
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24700&sc=1

Log:
Disabled transactions for now, caused some small errors in C language.

Modified:
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str	Sat Mar 31 20:58:04 2012	(r24699)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str	Sat Mar 31 22:39:25 2012	(r24700)
@@ -15,7 +15,7 @@
   testgen-internal-file = !"/.internal/testgen"
   testgen-module-name = !"TestGen"
   
-  testgen-num-files = !250
+  testgen-num-files = !50
   
   testgen-min-entities = !1
   testgen-max-entities = !5

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Sat Mar 31 20:58:04 2012	(r24699)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Sat Mar 31 22:39:25 2012	(r24700)
@@ -116,11 +116,11 @@
     (ast, path, project-path) -> AnalysedResult(ast5, defs, uses, data', added, removed)
     with
       // Init
-      index-setup(|language, [project-path], full-path);
-      index-start-transaction
+      index-setup(|language, [project-path], full-path)
     with
       file := (full-path, ""); // TODO: Get subfile or add subfile param.
-      oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file
+      oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file;
+      <index-clear-file> file
     with
       {| Index-ReadSet, Index-UnresolvedSet:
         readSet := <new-iset>;
@@ -153,8 +153,6 @@
         end
       |}
     with
-      index-end-transaction
-    with
       // Schedule re-analysis of dependent files (if current file is not testing language file)
       // HACK: Depends on file extension, could be other languages with .spt extension?
       if Editor() := phase; not(<is-test-file> path) then

From oskarvanrest at gmail.com  Mon Apr  2 07:37:12 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 02 Apr 2012 05:37:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24701 - in
	experimental/graphical-editor/GEF+GMF+EuGENia
	experiments/GMF/InMemoryModelAccess: META-INF
	src/inmemorymodelaccess
Message-ID: <20120402053712.58992CC02F@mx4.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr  2 05:37:10 2012
New Revision: 24701
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24701&sc=1

Log:
Added model adapters for entities. The textual editor now updates as soon as a change is made in the GMF editor.
Code is quite ugly at the moment, but it's just for demonstration purpose.

Modified:
   experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/META-INF/MANIFEST.MF
   experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/src/inmemorymodelaccess/TextualEditor.java

Modified: experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/META-INF/MANIFEST.MF
==============================================================================
--- experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/META-INF/MANIFEST.MF	Sat Mar 31 22:39:25 2012	(r24700)
+++ experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/META-INF/MANIFEST.MF	Mon Apr  2 05:37:10 2012	(r24701)
@@ -9,6 +9,7 @@
  org.eclipse.jface.text,
  org.eclipse.ui.editors,
  org.eclipse.gmf.runtime.diagram.ui;bundle-version="1.5.0",
- gmf.entityLang;bundle-version="1.0.0"
+ gmf.entityLang;bundle-version="1.0.0",
+ gmf.entityLang.diagram;bundle-version="1.0.0"
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6

Modified: experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/src/inmemorymodelaccess/TextualEditor.java
==============================================================================
--- experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/src/inmemorymodelaccess/TextualEditor.java	Sat Mar 31 22:39:25 2012	(r24700)
+++ experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/src/inmemorymodelaccess/TextualEditor.java	Mon Apr  2 05:37:10 2012	(r24701)
@@ -3,9 +3,14 @@
 import gmf.entityLang.entityLang.Entity;
 import gmf.entityLang.entityLang.Root;
 
+import org.eclipse.emf.common.notify.Adapter;
+import org.eclipse.emf.common.notify.Notification;
+import org.eclipse.emf.common.notify.Notifier;
 import org.eclipse.emf.common.util.EList;
+import org.eclipse.emf.ecore.impl.EReferenceImpl;
 import org.eclipse.emf.ecore.resource.ResourceSet;
 import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;
+import org.eclipse.jface.text.IDocument;
 import org.eclipse.ui.IEditorInput;
 import org.eclipse.ui.IEditorPart;
 import org.eclipse.ui.IEditorSite;
@@ -19,14 +24,19 @@
 public class TextualEditor extends TextEditor {
 
 	private TextualDocumentProvider documentProvider;
+	private IDocument document;
+	private Root root;
+	private RootAdapter adapter;
 
 	public TextualEditor() {
 		super();
 		documentProvider = new TextualDocumentProvider();
 		setDocumentProvider(documentProvider);
+		adapter = new RootAdapter();
 	}
 
 	public void dispose() {
+		root.eAdapters().remove(adapter);
 		super.dispose();
 	}
 
@@ -38,24 +48,79 @@
 			e.printStackTrace();
 		}
 
+		document = documentProvider.getDocument(input);
+		
 		IWorkbench wb = PlatformUI.getWorkbench();
 		IWorkbenchWindow win = wb.getActiveWorkbenchWindow();
 		IWorkbenchPage page = win.getActivePage();
 		IEditorPart editor = page.findEditors(input, "gmf.entityLang.entityLang.diagram.part.EntityLangDiagramEditorID", 1)[0].getEditor(true);
 
-		String result = "Entities:\n";
-
 		if (editor instanceof DiagramEditor) {
 			DiagramEditor diagramEditor = (DiagramEditor) editor;
 			ResourceSet diagramEditorResourceSet = diagramEditor.getEditingDomain().getResourceSet();
-
-			Root root = (Root) diagramEditorResourceSet.getResources().get(1).getContents().get(0);
+			root = (Root) diagramEditorResourceSet.getResources().get(1).getContents().get(0);
+			root.eAdapters().add(adapter);
+			
 			EList<Entity> entities = root.getEntities();
 			for (int i = 0; i < entities.size(); i++) {
-				result += entities.get(i).getId() + "\n";
+				entities.get(i).eAdapters().add(new EntityAdapter());
 			}
 		}
+		
+		printEntities();		
+	}
+	
+	private void printEntities() {
+		String result = "Entities:\n";
+		
+		EList<Entity> entities = root.getEntities();
+		for (int i = 0; i < entities.size(); i++) {
+			result += entities.get(i).getId() + "\n";
+		}
+		
+		document.set(result);
+	}
+
+	public class RootAdapter implements Adapter {
+
+		@Override public void notifyChanged(Notification notification) {
+			printEntities();
+			
+			if (notification.getNewValue() instanceof Entity) {
+				Entity newEntity = (Entity) notification.getNewValue();
+				newEntity.eAdapters().add(new EntityAdapter());
+			}
+		}
+
+		@Override public Notifier getTarget() {
+			return null; //TODO
+		}
 
-		documentProvider.getDocument(input).set(result);
+		@Override public void setTarget(Notifier newTarget) {
+			// Do nothing.
+		}
+
+		@Override public boolean isAdapterForType(Object type) {
+			return type.equals(Root.class);
+		}
+	}
+	
+	public class EntityAdapter implements Adapter {
+
+		@Override public void notifyChanged(Notification notification) {
+			printEntities();
+		}
+
+		@Override public Notifier getTarget() {
+			return null; //TODO
+		}
+
+		@Override public void setTarget(Notifier newTarget) {
+			// Do nothing.
+		}
+
+		@Override public boolean isAdapterForType(Object type) {
+			return type.equals(Root.class);
+		}
 	}
 }

From oskarvanrest at gmail.com  Tue Apr  3 04:46:42 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Tue, 03 Apr 2012 02:46:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24702 -
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf
Message-ID: <20120403024642.CD6AACC064@mx4.tudelft.nl>

Author: OskarVanRest
Date: Tue Apr  3 02:46:40 2012
New Revision: 24702
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24702&sc=1

Log:
Removed xmi:id (don't need this)

Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Mon Apr  2 05:37:10 2012	(r24701)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Tue Apr  3 02:46:40 2012	(r24702)
@@ -76,7 +76,6 @@
 	// Properties:
 
 	to-xml:	Name(name) 			-> XMLAttribute("name", name)
-	to-xml: Id(identifier) 		-> XMLAttribute("xmi", "id", identifier)	
 	to-xml: Type(type)			-> XMLAttribute("eType", type)		
 	to-xml: ESuperType(type)	-> XMLAttribute("eSuperTypes", <conc-strings> ("#//", type))	
 	to-xml: LowerBound(value) 	-> XMLAttribute("lowerBound", <int-to-string> value)

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Mon Apr  2 05:37:10 2012	(r24701)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Tue Apr  3 02:46:40 2012	(r24702)
@@ -14,7 +14,7 @@
 	to-ecore:
 		'module(unparameterized(moduleName), _, exports*)	-> EPackage(properties, children)
 	where
-		properties := [Id(moduleName), Name(moduleName)];
+		properties := [Name(moduleName)];
 		children := <collect-om(?prod(_, _, _))> <collect-om(?context-free-syntax(_))> exports*
 
 	to-ecore:
@@ -23,26 +23,23 @@
 			constructor := <getfirst(?Constructor(_))> attributes;
 			classname := <to-unique-classname> (sort, constructor);
 			name := Name(classname);
-			identifier := Id(classname);
-			properties := <try(add-super-type(|sort))> [identifier, name];
+			properties := <try(add-super-type(|sort))> [name];
 			children := <remove-all(?lit(_))> lhs	
 			
 	to-ecore:
 		sort(primitiveType) -> EAttribute(properties)
 		where 
 			name := Name(primitiveType);
-			identifier := Id(<new>);
 			type := Type(<type-to-ecore> primitiveType);
-			properties := [identifier, name, type]
+			properties := [name, type]
 			
 	to-ecore:
 		label(l, sort(primitiveType)) -> EAttribute(properties)
 		where 
 			label := <get-label> l;
 			name := Name(label);
-			identifier := Id(<new>);
 			type := Type(<type-to-ecore> primitiveType);
-			properties := [identifier, name, type]
+			properties := [name, type]
 
 	to-ecore:
 		label(l, x) -> EReference(properties')
@@ -88,31 +85,33 @@
 			<equal> (s, constructor)
 
 	get-properties:
-		sort(s) -> [Id(<new> name), Name(name), Type(type), LowerBound(1), UpperBound(1)]
+		sort(s) -> [Name(name), Type(type), LowerBound(1), UpperBound(1)]
 		where
 			name := <first-char-to-lowercase> s;
 			type := <get-type> s
 	get-properties:
-		iter(sort(s)) -> [Id(<new> name), Name(name), Type(type), LowerBound(0), UpperBound(1)]
+		iter(sort(s)) -> [Name(name), Type(type), LowerBound(0), UpperBound(1)]
 		where
 			name := <first-char-to-lowercase> s;
 			type := <get-type> s
 	get-properties:
-		iter-star(sort(s)) -> [Id(<new> name), Name(name), Type(type), LowerBound(0), UpperBound(-1)]
+		iter-star(sort(s)) -> [Name(name), Type(type), LowerBound(0), UpperBound(-1)]
 		where
 			name := <make-plural> <first-char-to-lowercase> s;
 			type := <get-type> s
 			
 	get-type:
-		s -> type
+		s -> type'
 		where 
 			<get-unique-declaration(|Production())> s;
-			type := <project-declaration(get-constr|Production())> s		
+			type := <project-declaration(get-constr|Production())> s;
+			type' := <conc-strings> ("#//", type)	
 
 	get-type:
-		s -> s
+		s -> type
 		where 
-			not ( <get-unique-declaration(|Production())> s )
+			not ( <get-unique-declaration(|Production())> s );
+			type := <conc-strings> ("#//", s)
 
 
 rules
@@ -154,9 +153,8 @@
 	create-superclass:
 		sort ->  EClass(properties, children)
 		where
-			identifier := Id(sort);
 			name := Name(sort);
-			properties := [identifier, name];
+			properties := [name];
 			children := []			
 			
 			
\ No newline at end of file

From oskarvanrest at gmail.com  Tue Apr  3 07:02:12 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Tue, 03 Apr 2012 05:02:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24703 - in
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf:
	test test/emf trans/emf
Message-ID: <20120403050212.61622108C00E@mx3.tudelft.nl>

Author: OskarVanRest
Date: Tue Apr  3 05:02:11 2012
New Revision: 24703
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24703&sc=1

Log:
Added namespacedef's and namespaceref2's (indexlib stuff)

Added:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/entity-lang.sdf
      - copied, changed from r24701, spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/entity-lang.sdf
Deleted:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/entity-lang.sdf
Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Copied and modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/entity-lang.sdf (from r24701, spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/entity-lang.sdf)
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/entity-lang.sdf	Mon Apr  2 05:37:10 2012	(r24701, copy source)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/entity-lang.sdf	Tue Apr  3 05:02:11 2012	(r24703)
@@ -3,9 +3,9 @@
 exports
 
 	context-free syntax    
-		"module" ID Definition*       		-> Start      {"Module"} 
-		"entity" ID "{" Property* "}" 		-> Definition {"Entity"}
-		ID  ":" Type               			-> Property   {"Property"}
+		"module" Module@=ID Definition*					-> Start      {"Module"} 
+		"entity" Type@=ID "{" Property* "}" 			-> Definition {"Entity"}
+		Property@=ID  ":" Type at Type               		-> Property   {"Property"}
     
     	
 	context-free syntax

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str	Tue Apr  3 02:46:40 2012	(r24702)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str	Tue Apr  3 05:02:11 2012	(r24703)
@@ -4,13 +4,20 @@
 	include/SDF
 	trans/emf/namespaces
 	lib/namespacelib
+	trans/emf/projections
 
 strategies
-	map-all = alltd(map)
+	map-all = alltd(productions); alltd(namespacerefs)
 	
 rules
 		
-	map:
-		p at prod(lhs, sort(x), attrs(attributes)) -> p
+	productions:
+		p at prod(_, sort(x), attrs(attributes)) -> p
 		where 
-			<store-declaration(|Production())> (x, p)
\ No newline at end of file
+			<store-declaration(|Production())> (x, p)
+			
+	namespacerefs:
+		p at prod(lhs, _, _) -> p
+		where
+			namespace := <get-namespace> p; // here we assume (for now) that one production has at most one namespacedef
+			<store-declaration(|NameSpace())> (namespace, p)
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str	Tue Apr  3 02:46:40 2012	(r24702)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str	Tue Apr  3 05:02:11 2012	(r24703)
@@ -2,4 +2,5 @@
 
 signature constructors
 
-	Production		: NameSpace
\ No newline at end of file
+	Production		: NameSpace
+	NameSpace		: NameSpace
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str	Tue Apr  3 02:46:40 2012	(r24702)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str	Tue Apr  3 05:02:11 2012	(r24703)
@@ -6,17 +6,18 @@
 rules
 	
 	get-constr:
-		prod(lhs, sort(x), attrs(attributes)) -> constr
+		prod(_, _, attrs(attributes)) -> constr
 		where
 			constructor := <getfirst(?Constructor(consName))> attributes;
 			constr := <un-double-quote> consName
+	
+	get-namespace:
+		prod(lhs, _, _) -> namespace	
+		where
+			namespacedef(namespace, _) := <getfirst(?namespacedef(_, _))> lhs
 			
 	get-sort:
 		prod(lhs, sort(x), attrs(attributes)) -> x
 		
 	get-sort:
-		sort(s) -> s
-		
-	get-label: quoted(label) -> <un-double-quote> label
-	
-	get-label: unquoted(label) -> label
\ No newline at end of file
+		sort(s) -> s
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Tue Apr  3 02:46:40 2012	(r24702)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Tue Apr  3 05:02:11 2012	(r24703)
@@ -24,7 +24,7 @@
 			classname := <to-unique-classname> (sort, constructor);
 			name := Name(classname);
 			properties := <try(add-super-type(|sort))> [name];
-			children := <remove-all(?lit(_))> lhs	
+			children := <remove-all(?lit(_) + ?ci-lit(_))> lhs	
 			
 	to-ecore:
 		sort(primitiveType) -> EAttribute(properties)
@@ -32,27 +32,33 @@
 			name := Name(primitiveType);
 			type := Type(<type-to-ecore> primitiveType);
 			properties := [name, type]
-			
+	
 	to-ecore:
-		label(l, sort(primitiveType)) -> EAttribute(properties)
+		namespacedef(_, sort(primitiveType)) -> EAttribute(properties)
 		where 
-			label := <get-label> l;
-			name := Name(label);
+			name := Name("name");
 			type := Type(<type-to-ecore> primitiveType);
 			properties := [name, type]
 
 	to-ecore:
-		label(l, x) -> EReference(properties')
+		namespacedef(_, x) -> EReference(properties')
 		where 
 			properties := <get-properties> x;
-			name := <get-label> l;
-			properties' := <map((Name(_) -> Name(name)) <+ id)> properties
-		
+			properties' := <map((Name(_) -> Name("name")) <+ id)> properties
+			
 	to-ecore:
 		x -> EReference(properties)
 		where
 			properties := <get-properties> x
 
+	to-ecore:
+		namespaceref2(namespace, _) ->  EReference(properties)
+		where
+			type := <project-declaration(get-constr|NameSpace())> namespace;
+			name := Name(<first-char-to-lowercase> namespace);
+			type' := Type(<conc-strings> ("#//", type));
+			properties := [name, type']
+
 	type-to-ecore:
 		"ID" -> EString()
 		

From oskarvanrest at gmail.com  Tue Apr  3 07:11:39 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Tue, 03 Apr 2012 05:11:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24704 -
	experimental/graphical-editor/GEF+GMF+EuGENia
	experiments/EuGENia/euGENia.entityLang/model
Message-ID: <20120403051139.82DFF7F8030@mx1.tudelft.nl>

Author: OskarVanRest
Date: Tue Apr  3 05:11:39 2012
New Revision: 24704
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24704&sc=1

Log:
Model fix

Modified:
   experimental/graphical-editor/GEF+GMF+EuGENia experiments/EuGENia/euGENia.entityLang/model/EntityLang.emf

Modified: experimental/graphical-editor/GEF+GMF+EuGENia experiments/EuGENia/euGENia.entityLang/model/EntityLang.emf
==============================================================================
--- experimental/graphical-editor/GEF+GMF+EuGENia experiments/EuGENia/euGENia.entityLang/model/EntityLang.emf	Tue Apr  3 05:02:11 2012	(r24703)
+++ experimental/graphical-editor/GEF+GMF+EuGENia experiments/EuGENia/euGENia.entityLang/model/EntityLang.emf	Tue Apr  3 05:11:39 2012	(r24704)
@@ -5,12 +5,14 @@
 @gmf.diagram(foo="bar")
 class Entitylang {
     val Entity[*] entities;
-    val Property[*] properties;
 }
 
 @gmf.node(label = "name")
 class Entity {
     attr String name;
+    
+    val Property[*] properties;
+    
     @gmf.compartment(foo="bar")
     val Function[*] functions;
 }

From oskarvanrest at gmail.com  Wed Apr  4 02:50:44 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Wed, 04 Apr 2012 00:50:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24705 - in
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf:
	test/emf trans/emf
Message-ID: <20120404005044.DBF467F8037@mx1.tudelft.nl>

Author: OskarVanRest
Date: Wed Apr  4 00:50:43 2012
New Revision: 24705
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24705&sc=1

Log:
opt(_)

Added:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/BehaviorTrees.sdf
Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Added: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/BehaviorTrees.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/BehaviorTrees.sdf	Wed Apr  4 00:50:43 2012	(r24705)
@@ -0,0 +1,152 @@
+%% Grammar for the BehaviorTrees language
+module BehaviorTrees
+
+imports Common
+
+exports
+	
+  context-free start-symbols
+  
+    Start
+
+  lexical syntax
+
+    [a-zA-Z0-9\_\-]+				-> StateID
+    [a-zA-Z0-9\_\-]+				-> OpLabel
+    [a-zA-Z0-9\_\-\(\)\+\-\*\_]+	-> Value	
+    	
+  lexical syntax
+		
+	"+" 							-> OpLabel {reject}
+	"-" 							-> OpLabel {reject}
+	"--" 							-> OpLabel {reject}
+	"+-" 							-> OpLabel {reject}
+	"++" 							-> OpLabel {reject}
+		   
+  lexical restrictions
+  
+    StateID   						-/- [a-zA-Z0-9\_\-]
+    OpLabel   						-/- [a-zA-Z0-9\_\-]
+    Value							-/- [a-zA-Z0-9\_\-\(\)\+\-\*\_]
+    
+    
+  context-free syntax
+  	
+	Requirements+? Components? Tree?			-> Start {"Start", scope(Requirement, Component)}
+	
+	%% Requirements tracibility
+	
+	"#RT" Requirement*						-> Requirements {"Requirements"}
+									
+	Requirement@=ID Value					-> Requirement {"Requirement"}
+	
+	%% Components
+	
+	Component+								-> Components {"Components"}
+	
+	"#C" Component@=ID Value Behavior*		-> Component {"Component", scope(State)}
+	"#SC" Component@=ID Value Behavior*		-> Component {"SystemComponent", scope(State)}
+
+	%% Behavior
+
+	"#S" State+								-> Behavior {"StateRealisation"}
+	%% "#L" State+								-> Behavior {"Selection"}
+	%% "#E" State+								-> Behavior {"Event"}
+	%% "#G" State+								-> Behavior {"Guard"}
+	%% "#II" State+							-> Behavior {"IIEvent"}
+	%% "#IO" State+							-> Behavior {"IOEvent"}
+	%% "#EI" State+							-> Behavior {"EIEvent"}
+	%% "#EO" State+							-> Behavior {"EOEvent"}
+	%% "#A" State+								-> Behavior {"Assertion"}
+
+	State@=StateID Value					-> State {"State"}
+
+	%% Tree
+	
+	"#T" Node 								-> Tree {"Tree"} 
+	
+	%% Nodes
+	
+	"_" OpLabel? Op?													-> Node {"EmptyNode"}
+	Requirement at ID ReqStatus? Component at ID State at StateID OpLabel? Op?	-> Node	{"Node"}
+	
+	%% Composition
+	
+	Node Composition Node			-> Node {"Composition", left}
+
+	";"								-> Composition {"SequentialComp"}
+	";;"							-> Composition {"AtomicComp"}
+	
+	%% Branching
+
+	Node Branch						-> Node {"Branch"}
+
+	"#N" "{" Nodes "}"				-> Branch {"AlternativeBranch"}
+	"#P" "{" Nodes "}"				-> Branch {"ParallelBranch"}
+	
+	Node+							-> Nodes {"Nodes"}
+	
+	%% Requirements Status
+	"+"								-> ReqStatus {"Plus"}
+%% 	"-"								-> ReqStatus {"Min"}
+%% 	"--"							-> ReqStatus {"DoubleMin"}
+%% 	"+-"							-> ReqStatus {"PlusMin"}
+%% 	"++"							-> ReqStatus {"DoublePlus"}
+	
+	%% Operators
+	
+	"=>"							-> Op {"Op"}
+	%% "^"								-> Op {"Op"}
+	%% "--"							-> Op {"Op"}
+	%% "="								-> Op {"Op"}
+	%% "%"								-> Op {"Op"}
+	%% "^^"							-> Op {"Op"}
+	%% "&"								-> Op {"Op"}
+	%% "|"								-> Op {"Op"}	
+	
+  context-free priorities	
+   	{left:
+   		Node Composition Node		-> Node
+   	}
+    >	
+    Node Branch						-> Node
+      		
+	
+	
+	
+	
+	
+%% 	Common
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Tue Apr  3 05:11:39 2012	(r24704)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Wed Apr  4 00:50:43 2012	(r24705)
@@ -65,6 +65,9 @@
 	type-to-ecore:
 		"INT" -> EInt()
 
+	to-ecore:
+		opt(x) -> x
+
 
 rules
 	
@@ -91,12 +94,18 @@
 			<equal> (s, constructor)
 
 	get-properties:
+		opt(sort) -> properties'
+		where
+			properties := <get-properties> sort;
+			properties' := <map((LowerBound(1) -> LowerBound(0)) <+ id)> properties
+
+	get-properties:
 		sort(s) -> [Name(name), Type(type), LowerBound(1), UpperBound(1)]
 		where
 			name := <first-char-to-lowercase> s;
 			type := <get-type> s
 	get-properties:
-		iter(sort(s)) -> [Name(name), Type(type), LowerBound(0), UpperBound(1)]
+		iter(sort(s)) -> [Name(name), Type(type), LowerBound(1), UpperBound(-1)]
 		where
 			name := <first-char-to-lowercase> s;
 			type := <get-type> s

From oskarvanrest at gmail.com  Wed Apr  4 03:31:42 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Wed, 04 Apr 2012 01:31:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24706 -
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf
Message-ID: <20120404013142.E81FF7F8037@mx1.tudelft.nl>

Author: OskarVanRest
Date: Wed Apr  4 01:31:41 2012
New Revision: 24706
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24706&sc=1

Log:
only store declarations of cf-syntax

Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str	Wed Apr  4 00:50:43 2012	(r24705)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str	Wed Apr  4 01:31:41 2012	(r24706)
@@ -7,7 +7,12 @@
 	trans/emf/projections
 
 strategies
-	map-all = alltd(productions); alltd(namespacerefs)
+	map-all: 
+		term -> term
+		where
+			term' := <collect-om(?context-free-syntax(_))> term;
+			<alltd(productions)> term';
+			<alltd(namespacerefs)> term'
 	
 rules
 		

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Wed Apr  4 00:50:43 2012	(r24705)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Wed Apr  4 01:31:41 2012	(r24706)
@@ -65,9 +65,6 @@
 	type-to-ecore:
 		"INT" -> EInt()
 
-	to-ecore:
-		opt(x) -> x
-
 
 rules
 	

From oskarvanrest at gmail.com  Wed Apr  4 04:03:10 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Wed, 04 Apr 2012 02:03:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24707 - in
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf:
	test/emf trans/emf
Message-ID: <20120404020310.A84557F8037@mx1.tudelft.nl>

Author: OskarVanRest
Date: Wed Apr  4 02:03:10 2012
New Revision: 24707
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24707&sc=1

Log:
types derived from lexical syntax are all EString()'s for now.

Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/BehaviorTrees.sdf
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/BehaviorTrees.sdf
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/BehaviorTrees.sdf	Wed Apr  4 01:31:41 2012	(r24706)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/BehaviorTrees.sdf	Wed Apr  4 02:03:10 2012	(r24707)
@@ -32,7 +32,7 @@
     
   context-free syntax
   	
-	Requirements+? Components? Tree?			-> Start {"Start", scope(Requirement, Component)}
+	Requirements? Components? Tree?			-> Start {"Start", scope(Requirement, Component)}
 	
 	%% Requirements tracibility
 	

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Wed Apr  4 01:31:41 2012	(r24706)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Wed Apr  4 02:03:10 2012	(r24707)
@@ -65,7 +65,6 @@
 	type-to-ecore:
 		"INT" -> EInt()
 
-
 rules
 	
 	add-super-type(|sort):
@@ -115,15 +114,15 @@
 	get-type:
 		s -> type'
 		where 
-			<get-unique-declaration(|Production())> s;
+			<get-declaration(|Production())> s;
 			type := <project-declaration(get-constr|Production())> s;
 			type' := <conc-strings> ("#//", type)	
 
-	get-type:
+	get-type: // super type
 		s -> type
 		where 
-			not ( <get-unique-declaration(|Production())> s );
-			type := <conc-strings> ("#//", s)
+			not ( <get-declaration(|Production())> s );
+			type := EString() //TODO make EInt, EFloat or EString of this depending on the lexical syntax
 
 
 rules

From oskarvanrest at gmail.com  Wed Apr  4 04:20:45 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Wed, 04 Apr 2012 02:20:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24708 -
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf
Message-ID: <20120404022045.670922B8018@mx2.tudelft.nl>

Author: OskarVanRest
Date: Wed Apr  4 02:20:42 2012
New Revision: 24708
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24708&sc=1

Log:
fix

Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Wed Apr  4 02:03:10 2012	(r24707)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Wed Apr  4 02:20:42 2012	(r24708)
@@ -114,11 +114,18 @@
 	get-type:
 		s -> type'
 		where 
-			<get-declaration(|Production())> s;
+			<get-unique-declaration(|Production())> s;
 			type := <project-declaration(get-constr|Production())> s;
 			type' := <conc-strings> ("#//", type)	
 
-	get-type: // super type
+	get-type:  // super type
+		s -> type
+		where 
+			<get-declaration(|Production())> s;
+			not ( <get-unique-declaration(|Production())> s );
+			type := <conc-strings> ("#//", s)
+
+	get-type:
 		s -> type
 		where 
 			not ( <get-declaration(|Production())> s );

From oskarvanrest at gmail.com  Wed Apr  4 04:30:47 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Wed, 04 Apr 2012 02:30:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24709 - in
	experimental/graphical-editor/BehaviorTreesGraphical: .
	META-INF model src
Message-ID: <20120404023047.3B074CC130@mx4.tudelft.nl>

Author: OskarVanRest
Date: Wed Apr  4 02:30:45 2012
New Revision: 24709
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24709&sc=1

Log:
This project will contains a .emf file from which EuGENia can generate a GMF editor for Behavior Trees.
This is just to test if it is possible to make a GMF editor for Behavior Trees.

Added:
   experimental/graphical-editor/BehaviorTreesGraphical/
   experimental/graphical-editor/BehaviorTreesGraphical/.classpath
   experimental/graphical-editor/BehaviorTreesGraphical/.project
   experimental/graphical-editor/BehaviorTreesGraphical/META-INF/
   experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF
   experimental/graphical-editor/BehaviorTreesGraphical/model/
   experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf
   experimental/graphical-editor/BehaviorTreesGraphical/src/

Added: experimental/graphical-editor/BehaviorTreesGraphical/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical/.classpath	Wed Apr  4 02:30:45 2012	(r24709)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: experimental/graphical-editor/BehaviorTreesGraphical/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical/.project	Wed Apr  4 02:30:45 2012	(r24709)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>BehaviorTreesGraphical</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.pde.PluginNature</nature>
+	</natures>
+</projectDescription>

Added: experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF	Wed Apr  4 02:30:45 2012	(r24709)
@@ -0,0 +1,6 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: BehaviorTreesGraphical
+Bundle-SymbolicName: BehaviorTreesGraphical
+Bundle-Version: 0.1.0
+Require-Bundle: org.eclipse.emf.ecore

Added: experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf	Wed Apr  4 02:30:45 2012	(r24709)
@@ -0,0 +1,7 @@
+ at namespace(uri="btgraphical", prefix="btgraphical")
+ at gmf(foo="bar")
+package btgraphical;
+
+ at gmf.diagram(foo="bar")
+class BehaviorTrees {
+}
\ No newline at end of file

From oskarvanrest at gmail.com  Wed Apr  4 08:13:24 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Wed, 04 Apr 2012 06:13:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24710 -
	experimental/graphical-editor/BehaviorTreesGraphical/model
Message-ID: <20120404061324.54B227F800D@mx1.tudelft.nl>

Author: OskarVanRest
Date: Wed Apr  4 06:13:22 2012
New Revision: 24710
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24710&sc=1

Log:
Very basic Behavior Trees graphical editor. Enough to try out some things and see if we can generate the ecore from a .sdf. It includes nodes (having requirement + component + state as label), sequential composition (arrows) and atomic composition (a compartment with nodes).

Modified:
   experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf

Modified: experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf	Wed Apr  4 02:30:45 2012	(r24709)
+++ experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf	Wed Apr  4 06:13:22 2012	(r24710)
@@ -4,4 +4,29 @@
 
 @gmf.diagram(foo="bar")
 class BehaviorTrees {
+    val SuperNode[*] nodes;
+}
+
+ at gmf.node(label="requirement, component, state", label.pattern="{0}, {1}, {2}")
+class Node extends SuperNode {
+    attr String requirement;
+    attr String component;
+    attr String state;
+}
+
+ at gmf.link(source="source", target="target", target.decoration="arrow", label = "name")
+class SequentialComp extends SuperNode {
+	attr String name;
+    ref SuperNode source;
+    ref SuperNode target;
+}
+
+ at gmf.node(label = "foo", label.placement = "none", color="244,252,225")
+class AtomicComp extends SuperNode {
+	attr String foo;
+	@gmf.compartment(layout="list")
+	val Node[*] nodes;
+}
+
+class SuperNode {
 }
\ No newline at end of file

From gabrielkonat at gmail.com  Wed Apr  4 18:15:30 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Wed, 04 Apr 2012 16:15:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24711 - in
	spoofax-contrib/separate-compilation-examples:
	c-without-macros/editor c-without-macros/trans
	csharp-partial-classses/editor csharp-partial-classses/trans
	entit...
Message-ID: <20120404161530.9895E7F8047@mx1.tudelft.nl>

Author: gkonat
Date: Wed Apr  4 16:15:29 2012
New Revision: 24711
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24711&sc=1

Log:
Cleaned up the default builders and fixed index-currentfile not setting the index library up.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv	Wed Apr  4 06:13:22 2012	(r24710)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv	Wed Apr  4 16:15:29 2012	(r24711)
@@ -15,11 +15,12 @@
                                                                                                               
   observer : editor-analyze (multifile)
   
-  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)
+  builder  : "Show deffed syntax" = generate-deffed (openeditor) (realtime) (meta) (source)
   builder  : "Show analyzed syntax" = generate-analyzed (openeditor) (realtime) (meta) (source)
-  builder  : "Show index entries for current file" = index-currentfile (openeditor) (realtime) (meta) (source)   
+  builder  : "Show index entries for current file" = index-currentfile (openeditor) (realtime) (meta) (source)
   builder  : "Show index entries for all files" = index-allfiles (openeditor) (realtime) (meta) (source)
-  builder  : "Clear index" = index-cleanall (meta) (source)                                                                                                  
+  builder  : "Clear index" = index-cleanall (meta) (source)                                                                                               
 
 refactorings
 

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Wed Apr  4 06:13:22 2012	(r24710)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Wed Apr  4 16:15:29 2012	(r24711)
@@ -40,23 +40,30 @@
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      selected' := <desugar-all> selected;
-      filename  := <guarantee-extension(|"aterm")> path;
-      result    := selected'
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected
+      
+  // Prints the definition annotated abstract syntax ATerm of a selection.
+  generate-deffed:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := <analyze-defs(|Anon(), Anon())> selected
   
-  // Prints the analyzed abstract syntax ATerm of a selection.
+  // Prints the analyzed annotated abstract syntax ATerm of a selection.
   generate-analyzed:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       editor-init;
-      selected' := <desugar-all> selected;
-      filename  := <guarantee-extension(|"analyzed.aterm")> path;
-      result    := <analyze-top> (selected', path, project-path)   
+      filename := <guarantee-extension(|"analyzed.aterm")> path;
+      result   := <analyze-top> (selected, path, project-path)   
       
   // Prints the entries in the index of the current file.
   index-currentfile:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
+      language := <index-origin-language> ast;
+      index-setup(|language, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"index.currentfile.aterm")> path;
       result   := <index-get-all-in-file> path
       
@@ -66,9 +73,17 @@
     with
       language  := <index-origin-language> ast;
       index-setup(|language, [project-path], $[[project-path]/[path]]);
-      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
+      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
       result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
       
+  // Cleans all data from the index.
+  index-cleanall:
+    (selected, position, ast, path, project-path)  -> None()
+    with
+      language  := <index-origin-language> ast;
+      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-clear
+      
   // Resolves a reference when the user control-clicks or presses F3 in the editor.
   editor-resolve:
     (node, position, ast, path, project-path) -> target

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv	Wed Apr  4 06:13:22 2012	(r24710)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv	Wed Apr  4 16:15:29 2012	(r24711)
@@ -15,9 +15,10 @@
                                                                                                               
   observer : editor-analyze (multifile)
   
-  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)
+  builder  : "Show deffed syntax" = generate-deffed (openeditor) (realtime) (meta) (source)
   builder  : "Show analyzed syntax" = generate-analyzed (openeditor) (realtime) (meta) (source)
-  builder  : "Show index entries for current file" = index-currentfile (openeditor) (realtime) (meta) (source)   
+  builder  : "Show index entries for current file" = index-currentfile (openeditor) (realtime) (meta) (source)
   builder  : "Show index entries for all files" = index-allfiles (openeditor) (realtime) (meta) (source)
   builder  : "Clear index" = index-cleanall (meta) (source) 
                                                                                                               

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Wed Apr  4 06:13:22 2012	(r24710)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Wed Apr  4 16:15:29 2012	(r24711)
@@ -40,8 +40,15 @@
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := selected
+      
+  // Prints the definition annotated abstract syntax ATerm of a selection.
+  generate-deffed:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := <analyze-defs(|Anon(), Anon())> selected
   
-  // Prints the analyzed abstract syntax ATerm of a selection.
+  // Prints the analyzed annotated abstract syntax ATerm of a selection.
   generate-analyzed:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
@@ -53,6 +60,8 @@
   index-currentfile:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
+      language := <index-origin-language> ast;
+      index-setup(|language, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"index.currentfile.aterm")> path;
       result   := <index-get-all-in-file> path
       
@@ -60,10 +69,18 @@
   index-allfiles:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      language  := <index-origin-language> ast;
+      language := <index-origin-language> ast;
       index-setup(|language, [project-path], $[[project-path]/[path]]);
-      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
+      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
       result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
+      
+  // Cleans all data from the index.
+  index-cleanall:
+    (selected, position, ast, path, project-path)  -> None()
+    with
+      language  := <index-origin-language> ast;
+      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-clear
   
   // Resolves a reference when the user control-clicks or presses F3 in the editor.
   editor-resolve:

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv	Wed Apr  4 06:13:22 2012	(r24710)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv	Wed Apr  4 16:15:29 2012	(r24711)
@@ -15,11 +15,12 @@
 
   observer : editor-analyze (multifile)                                                                             
 
-  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)
+  builder  : "Show deffed syntax" = generate-deffed (openeditor) (realtime) (meta) (source)
   builder  : "Show analyzed syntax" = generate-analyzed (openeditor) (realtime) (meta) (source)
-  builder  : "Show index entries for current file" = index-currentfile (openeditor) (realtime) (meta) (source)   
+  builder  : "Show index entries for current file" = index-currentfile (openeditor) (realtime) (meta) (source)
   builder  : "Show index entries for all files" = index-allfiles (openeditor) (realtime) (meta) (source)
-  builder  : "Clear index" = index-cleanall (meta) (source)
+  builder  : "Clear index" = index-cleanall (meta) (source) 
   builder  : "Generate test files" = generate-test-files (meta)                                                                                                    
 
 refactorings

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Wed Apr  4 06:13:22 2012	(r24710)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Wed Apr  4 16:15:29 2012	(r24711)
@@ -41,26 +41,28 @@
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := selected
+      
+  // Prints the definition annotated abstract syntax ATerm of a selection.
+  generate-deffed:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := <analyze-defs(|Anon(), Anon())> selected
   
-  // Prints the analyzed abstract syntax ATerm of a selection.
+  // Prints the analyzed annotated abstract syntax ATerm of a selection.
   generate-analyzed:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       editor-init;
       filename := <guarantee-extension(|"analyzed.aterm")> path;
-      result   := <analyze-top> (selected, path, project-path)
-      
-  generate-test-files:
-    (selected, position, ast, path, project-path) -> None()
-    with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
-      <testgen> (selected, position, ast, path, project-path)
+      result   := <analyze-top> (selected, path, project-path)   
       
   // Prints the entries in the index of the current file.
   index-currentfile:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
+      language := <index-origin-language> ast;
+      index-setup(|language, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"index.currentfile.aterm")> path;
       result   := <index-get-all-in-file> path
       
@@ -70,9 +72,10 @@
     with
       language  := <index-origin-language> ast;
       index-setup(|language, [project-path], $[[project-path]/[path]]);
-      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
+      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
       result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
       
+  // Cleans all data from the index.
   index-cleanall:
     (selected, position, ast, path, project-path)  -> None()
     with
@@ -120,4 +123,12 @@
 
   def-to-name:
     Def([namespace, name | _]) -> name
+  
+  // Generates random test files.  
+  generate-test-files:
+    (selected, position, ast, path, project-path) -> None()
+    with
+      language  := <index-origin-language> ast;
+      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      <testgen> (selected, position, ast, path, project-path)
     
\ No newline at end of file

From gabrielkonat at gmail.com  Thu Apr  5 15:57:30 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Thu, 05 Apr 2012 13:57:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24712 -
	spoofax-contrib/separate-compilation-examples/entity-with-aspects
	spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans
	spoofax-imp/trunk/experim...
Message-ID: <20120405135731.0124CCC120@mx4.tudelft.nl>

Author: gkonat
Date: Thu Apr  5 13:57:30 2012
New Revision: 24712
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24712&sc=1

Log:
Experimental parallel analysis for entity-with-aspects project.

Modified:
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml	Wed Apr  4 16:15:29 2012	(r24711)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml	Thu Apr  5 13:57:30 2012	(r24712)
@@ -23,7 +23,7 @@
                         --library
                         -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+                        -la stratego-lib -la stratego-parallel -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
         
         <!-- Optional: external .def and .jar locations
         <property name="externaldef" location="syntax/${sdfmodule}.def"/>

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Wed Apr  4 16:15:29 2012	(r24711)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Thu Apr  5 13:57:30 2012	(r24712)
@@ -2,8 +2,10 @@
 
 imports
   libstratego-lib
+  libstratego-sglr
   libstratego-gpp
   libstratego-aterm
+  libstratego-parallel
   include/EntityWithAspects
   lib/editor-common.generated
   lib/analysis-auto.generated
@@ -32,8 +34,39 @@
     files -> None()
     with
       not(<is-tuple> files);
-      debug;
-      <queue-analysis> files
+      debug(!"Changed files: ");
+      map(fake-parse);                                  // Parsing cannot be done in parallel.
+      map(\(ast, file) ->(ast, file, <project-path>)\);
+      debug(!"Parsed changed files: ");
+      parallel-unordered(all(fake-analyze));
+      debug(!"Parallel analyzed results: ");
+      filter(not(?((),(),[],[],[])); fake-update)       // Setting markers cannot be done in parallel.
+      
+  fake-parse:
+    file -> (ast, file)
+    where
+      <file-exists> file
+    with
+      ast := <parse-file> file
+      
+  fake-parse:
+    file -> (ast, file)
+    where
+      not(<file-exists> file)
+    with
+      ast := ()
+      
+  fake-update:
+    (ast, ast', errors, warnings, notes) -> <set-markers(|ast)> (ast', errors, warnings, notes)
+      
+  fake-analyze:
+    (ast, path, project-path) -> (ast, ast', errors, warnings, notes)
+    with
+      ast'      := <analyze-top(|Editor(), "EntityWithAspects")>;
+      errors    := <collect-all(constraint-error, conc)> ast';
+      warnings  := <collect-all(constraint-warning, conc)> ast';
+      notes     := <collect-all(constraint-note, conc)> ast';
+      <debug(!"Parallel analysis on: ")> path
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Wed Apr  4 16:15:29 2012	(r24711)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Thu Apr  5 13:57:30 2012	(r24712)
@@ -116,11 +116,11 @@
     (ast, path, project-path) -> AnalysedResult(ast5, defs, uses, data', added, removed)
     with
       // Init
-      index-setup(|language, [project-path], full-path)
+      index-setup(|language, [project-path], full-path);
+      index-start-transaction
     with
       file := (full-path, ""); // TODO: Get subfile or add subfile param.
-      oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file;
-      <index-clear-file> file
+      oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file
     with
       {| Index-ReadSet, Index-UnresolvedSet:
         readSet := <new-iset>;
@@ -153,6 +153,8 @@
         end
       |}
     with
+      index-end-transaction
+    with
       // Schedule re-analysis of dependent files (if current file is not testing language file)
       // HACK: Depends on file extension, could be other languages with .spt extension?
       if Editor() := phase; not(<is-test-file> path) then
@@ -184,8 +186,8 @@
     with
       if 0 := <analysis-count> then // Only reanalyze if all analyses have been completed.
         diffs := <analyze-get-diffs>;
-        analyze-clean-diffs;
-        <queue-analysis> <filter(not(?(file, _)); Fst)> diffs // Don't reanalyze current file.
+        analyze-clean-diffs//;
+        //<queue-analysis> <debug(!"Queueing analysis for: ")> <filter(not(?(file, _)); Fst)> diffs // Don't reanalyze current file.
       end
     
   analyze-changed-filter-file(|file) = 

From gabrielkonat at gmail.com  Thu Apr  5 15:59:30 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Thu, 05 Apr 2012 13:59:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24713 -
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel
Message-ID: <20120405135931.05196CC074@mx4.tudelft.nl>

Author: gkonat
Date: Thu Apr  5 13:59:29 2012
New Revision: 24713
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24713&sc=1

Log:
Fixed parallel all not working on empty lists.
Fixed parallel all making almost everything parallel.
Parallel context copies the libraries and adds a new SSL library to prevent dynamic rules from being shared 
across threads.

Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelAll.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelAll.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelAll.java	Thu Apr  5 13:57:30 2012	(r24712)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelAll.java	Thu Apr  5 13:59:29 2012	(r24713)
@@ -51,7 +51,7 @@
 		// TODO: The focus thread could actually start more jobs, given a priority job queue
 		// TODO: Only trigger invokeParallel if synchronous execution takes longer than a certain threshold
 		if (ENABLED && (ALLOW_NESTED_JOBS || !stratego_parallel.isActive())
-				&& (isForcedParallel || isCandidateTerm(context, current))) {
+				&& (isForcedParallel /*|| isCandidateTerm(context, current)*/)) {
 			
 			isForcedParallel = false;
 			context.push("<parallel>");
@@ -82,6 +82,8 @@
 
 	public IStrategoTerm invokeParallel(final Context context, final IStrategoTerm current, final Strategy s) {
 		final IStrategoTerm[] inputs = current.getAllSubterms();
+		if(inputs.length == 0)
+			return context.getFactory().makeList();
 		final IStrategoTerm[] outputs = new IStrategoTerm[inputs.length];
 		final AtomicInteger focusIndex = new AtomicInteger(0); // index of the job with side effects
 		final AtomicBoolean isAborted = new AtomicBoolean(false);

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java	Thu Apr  5 13:57:30 2012	(r24712)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java	Thu Apr  5 13:59:29 2012	(r24713)
@@ -1,9 +1,13 @@
 package org.strategoxt.lang.parallel.stratego_parallel;
 
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOperatorRegistry;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
@@ -40,11 +44,16 @@
 	 *            non-whitelisted ones.
 	 */
 	public ParallelContext(Context context, ParallelJob job, AtomicBoolean aborted, boolean allowUnordered) {
-		super(context.getFactory(), context.getOperatorRegistryMap(), context.getOperatorRegistries(), true);
+		super(context.getFactory(), new HashMap<String, IOperatorRegistry>(context.getOperatorRegistryMap()), 
+				new ArrayList<IOperatorRegistry>(context.getOperatorRegistries()), true);
 		this.innerContext = context;
 		this.job = job;
 		this.isAborted = aborted;
 		this.allowUnordered = allowUnordered;
+		
+		SSLLibrary lib = new SSLLibrary();
+		lib.setIOAgent(context.getIOAgent());
+		addOperatorRegistry(lib);
 	}
 	
 	void setLastSynchronousOperation(AtomicReference<String> value) {

From oskarvanrest at gmail.com  Fri Apr  6 06:57:34 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Fri, 06 Apr 2012 04:57:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24714 - in
	experimental/graphical-editor/BehaviorTreesGraphical.diagram:
	. META-INF src src/figures
Message-ID: <20120406045734.2FCF4108C004@mx3.tudelft.nl>

Author: OskarVanRest
Date: Fri Apr  6 04:57:32 2012
New Revision: 24714
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24714&sc=1

Log:
Behavior Trees node figure (custom draw2d figure that will be used by the GMF editor).

Added:
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/.classpath
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/.options
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/.project
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/META-INF/
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/META-INF/MANIFEST.MF
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/build.properties
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.properties
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.xml
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/.classpath	Fri Apr  6 04:57:32 2012	(r24714)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/.options
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/.options	Fri Apr  6 04:57:32 2012	(r24714)
@@ -0,0 +1,7 @@
+# Tracing options for the BehaviorTreesGraphical.diagram plug-in
+
+# Common issues
+BehaviorTreesGraphical.diagram/debug=false
+
+# Visual IDs
+BehaviorTreesGraphical.diagram/debug/visualID=false

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/.project	Fri Apr  6 04:57:32 2012	(r24714)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>BehaviorTreesGraphical.diagram</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.pde.PluginNature</nature>
+	</natures>
+</projectDescription>

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/META-INF/MANIFEST.MF	Fri Apr  6 04:57:32 2012	(r24714)
@@ -0,0 +1,44 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: %pluginName
+Bundle-SymbolicName: BehaviorTreesGraphical.diagram; singleton:=true
+Bundle-Version: 1.0.0.qualifier
+Bundle-ClassPath: .
+Bundle-Activator: btgraphical.diagram.part.BtgraphicalDiagramEditorPlugin
+Bundle-Vendor: %providerName
+Bundle-Localization: plugin
+Export-Package: btgraphical.diagram.edit.parts,
+ btgraphical.diagram.part,
+ btgraphical.diagram.providers
+Require-Bundle: org.eclipse.core.runtime,
+ org.eclipse.core.resources,
+ org.eclipse.core.expressions,
+ org.eclipse.jface,
+ org.eclipse.ui.ide,
+ org.eclipse.ui.views,
+ org.eclipse.ui.navigator,
+ org.eclipse.ui.navigator.resources,
+ org.eclipse.emf.ecore,
+ org.eclipse.emf.ecore.xmi,
+ org.eclipse.emf.edit.ui,
+ org.eclipse.gmf.runtime.emf.core,
+ org.eclipse.gmf.runtime.emf.commands.core,
+ org.eclipse.gmf.runtime.emf.ui.properties,
+ org.eclipse.gmf.runtime.diagram.ui,
+ org.eclipse.gmf.runtime.diagram.ui.printing,
+ org.eclipse.gmf.runtime.diagram.ui.printing.render,
+ org.eclipse.gmf.runtime.diagram.ui.properties,
+ org.eclipse.gmf.runtime.diagram.ui.providers,
+ org.eclipse.gmf.runtime.diagram.ui.providers.ide,
+ org.eclipse.gmf.runtime.diagram.ui.render,
+ org.eclipse.gmf.runtime.diagram.ui.resources.editor,
+ org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide,
+ org.eclipse.draw2d;visibility:=reexport,
+ org.eclipse.gmf.runtime.draw2d.ui;visibility:=reexport,
+ BehaviorTreesGraphical;visibility:=reexport,
+ BehaviorTreesGraphical.edit;visibility:=reexport,
+ org.eclipse.emf.validation;visibility:=reexport,
+ org.eclipse.gef;visibility:=reexport,
+ org.eclipse.ocl.ecore;visibility:=reexport
+Bundle-ActivationPolicy: lazy
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/build.properties	Fri Apr  6 04:57:32 2012	(r24714)
@@ -0,0 +1,10 @@
+bin.includes = .,\
+               icons/,\
+               META-INF/,\
+               plugin.xml,\
+               plugin.properties,\
+               messages.properties,\
+               .options
+jars.compile.order = .
+source.. = src/
+output.. = bin/

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.properties	Fri Apr  6 04:57:32 2012	(r24714)
@@ -0,0 +1,51 @@
+pluginName=Btgraphical Plugin
+providerName=Sample Plugin Provider, Inc
+
+editorName=Btgraphical Diagram Editing
+context.description=Btgraphical Diagram Editing
+context.name=In Btgraphical Diagram Editor
+newWizardName=Btgraphical Diagram
+newWizardDesc=Creates Btgraphical diagram.
+
+initDiagramActionLabel=Initialize btgraphical_diagram diagram file
+
+
+navigatorContentName=*.btgraphical_diagram diagram contents
+domainNavigatorContentName=*.btgraphical model contents
+update.diagram.name=Update Btgraphical diagram
+update.diagram.description=Perform Btgraphical diagram update
+
+
+# Property Sheet
+tab.appearance=Appearance
+tab.diagram=Rulers & Grid
+tab.domain=Core
+
+# Preferences
+prefpage.BehaviorTreesGraphical.diagram.general=Btgraphical Diagram
+prefpage.BehaviorTreesGraphical.diagram.appearance=Appearance
+prefpage.BehaviorTreesGraphical.diagram.connections=Connections
+prefpage.BehaviorTreesGraphical.diagram.printing=Printing
+prefpage.BehaviorTreesGraphical.diagram.rulersAndGrid=Rulers And Grid
+
+
+# Providers
+metatype.name.BehaviorTrees_1000=Undefined
+metatype.name.Node_2001=Node
+metatype.name.AtomicComp_2002=AtomicComp
+metatype.name.Node_3001=Node
+metatype.name.SequentialComp_4001=SequentialComp
+
+# Commands and menu actions
+cmdcategory.name=Btgraphical Editor Commands
+cmdcategory.desc=Btgraphical Editor Commands
+
+metatype.name.Requirement_2003=Requirement
+metatype.name.SequentialComp_2004=SequentialComp
+metatype.name.Node_4002=Node
+metatype.name.NodeReq_4003=Undefined
+metatype.name.SequentialCompTarget_4004=Undefined
+metatype.name.SequentialCompSource_4005=Undefined
+metatype.name.SequentialComp_4006=SequentialComp
+metatype.name.AtomicComp_2004=AtomicComp
+metatype.name.SequentialComp_4008=SequentialComp

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.xml	Fri Apr  6 04:57:32 2012	(r24714)
@@ -0,0 +1,595 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.0"?>
+<!--
+
+-->
+<plugin>
+
+   <extension point="org.eclipse.team.core.fileTypes" id="repo-ftype">
+      <?gmfgen generated="true"?>
+      <fileTypes type="text" extension="btgraphical_diagram"/>
+   </extension>
+
+   <extension point="org.eclipse.emf.ecore.extension_parser" id="resource-factory">
+      <?gmfgen generated="true"?>
+      <parser
+         type="btgraphical_diagram"
+         class="org.eclipse.gmf.runtime.emf.core.resources.GMFResourceFactory">
+      </parser>
+   </extension>
+
+   <extension point="org.eclipse.ui.editors" id="gmf-editor">
+      <?gmfgen generated="true"?>
+      <editor
+         id="btgraphical.diagram.part.BtgraphicalDiagramEditorID"
+         name="%editorName"
+         icon="icons/obj16/BtgraphicalDiagramFile.gif"
+         extensions="btgraphical_diagram"
+         default="true"
+         class="btgraphical.diagram.part.BtgraphicalDiagramEditor"
+         matchingStrategy="btgraphical.diagram.part.BtgraphicalMatchingStrategy"
+         contributorClass="btgraphical.diagram.part.BtgraphicalDiagramActionBarContributor">
+      </editor>
+   </extension>
+   
+   <extension point="org.eclipse.ui.contexts" id="ui-context">
+      <?gmfgen generated="true"?>
+      <context
+         description="%context.description"
+         id="btgraphical.diagram.ui.diagramContext"
+         name="%context.name"
+         parentId="org.eclipse.gmf.runtime.diagram.ui.diagramContext">
+      </context>
+   </extension>
+
+   <extension point="org.eclipse.ui.newWizards" id="creation-wizard">
+      <?gmfgen generated="true"?>
+  	  <wizard
+  	     name="%newWizardName"
+  	     icon="icons/obj16/BtgraphicalDiagramFile.gif"
+  	     category="org.eclipse.ui.Examples"
+  	     class="btgraphical.diagram.part.BtgraphicalCreationWizard"
+  	     id="btgraphical.diagram.part.BtgraphicalCreationWizardID">
+  	  	 <description>%newWizardDesc</description>  
+      </wizard>
+   </extension>
+
+   <extension point="org.eclipse.ui.popupMenus" id="init-diagram-action">
+      <?gmfgen generated="true"?>
+      <objectContribution
+            id="BehaviorTreesGraphical.diagram.InitDiagram"
+            nameFilter="*.btgraphical"
+            objectClass="org.eclipse.core.resources.IFile">
+         <action
+               label="%initDiagramActionLabel"
+               class="btgraphical.diagram.part.BtgraphicalInitDiagramFileAction"
+               menubarPath="additions"
+               enablesFor="1"
+               id="BehaviorTreesGraphical.diagram.InitDiagramAction">
+         </action>
+      </objectContribution>
+   </extension>
+	
+   <extension point="org.eclipse.gmf.runtime.common.ui.services.action.globalActionHandlerProviders" id="global-actions">
+      <?gmfgen generated="true"?>
+      <GlobalActionHandlerProvider
+         class="org.eclipse.gmf.runtime.diagram.ui.providers.DiagramGlobalActionHandlerProvider"
+         id="BtgraphicalPresentation">
+         <Priority name="Lowest"/>
+         <ViewId id="btgraphical.diagram.part.BtgraphicalDiagramEditorID">
+            <ElementType class="org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart">
+               <GlobalActionId actionId="delete"/>
+            </ElementType>
+            <ElementType class="org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart">
+               <GlobalActionId actionId="save"/>
+            </ElementType>
+            <ElementType class="org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart">
+               <GlobalActionId actionId="save">
+               </GlobalActionId>
+            </ElementType>        
+         </ViewId>
+      </GlobalActionHandlerProvider>
+      <GlobalActionHandlerProvider
+         class="org.eclipse.gmf.runtime.diagram.ui.printing.render.providers.DiagramWithPrintGlobalActionHandlerProvider"
+         id="BtgraphicalPresentationPrint">
+         <Priority name="Lowest"/>
+         <ViewId id="btgraphical.diagram.part.BtgraphicalDiagramEditorID">
+            <ElementType class="org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart">
+               <GlobalActionId actionId="print"/>
+            </ElementType>
+         </ViewId>
+      </GlobalActionHandlerProvider>
+      <GlobalActionHandlerProvider
+         class="org.eclipse.gmf.runtime.diagram.ui.providers.ide.providers.DiagramIDEGlobalActionHandlerProvider"
+         id="BtgraphicalPresentationIDE">
+         <Priority name="Lowest"/>
+         <ViewId id="btgraphical.diagram.part.BtgraphicalDiagramEditorID">
+            <ElementType class="org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart">
+               <GlobalActionId actionId="bookmark"/>
+            </ElementType>
+         </ViewId>
+      </GlobalActionHandlerProvider>
+      <GlobalActionHandlerProvider
+            class="org.eclipse.gmf.runtime.diagram.ui.render.providers.DiagramUIRenderGlobalActionHandlerProvider"
+            id="BtgraphicalRender">
+         <Priority name="Lowest"/>
+         <ViewId id="btgraphical.diagram.part.BtgraphicalDiagramEditorID">
+            <ElementType class="org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart">
+               <GlobalActionId actionId="cut"/>
+               <GlobalActionId actionId="copy"/>
+               <GlobalActionId actionId="paste"/>
+            </ElementType>
+         </ViewId>
+      </GlobalActionHandlerProvider>
+   </extension>
+
+
+   
+      
+
+   
+   <extension point="org.eclipse.core.runtime.preferences" id="prefs">
+      <?gmfgen generated="true"?>
+      <initializer class="btgraphical.diagram.preferences.DiagramPreferenceInitializer"/>
+   </extension>
+
+   <extension point="org.eclipse.ui.preferencePages" id="prefpages">
+      <?gmfgen generated="true"?>
+      <page
+            id="BehaviorTreesGraphical.diagram.general"
+            name="%prefpage.BehaviorTreesGraphical.diagram.general"
+            class="btgraphical.diagram.preferences.DiagramGeneralPreferencePage">
+      </page>
+      <page
+            id="BehaviorTreesGraphical.diagram.appearance"
+            name="%prefpage.BehaviorTreesGraphical.diagram.appearance"
+            category="BehaviorTreesGraphical.diagram.general"
+            class="btgraphical.diagram.preferences.DiagramAppearancePreferencePage">
+      </page>
+      <page
+            id="BehaviorTreesGraphical.diagram.connections"
+            name="%prefpage.BehaviorTreesGraphical.diagram.connections"
+            category="BehaviorTreesGraphical.diagram.general"
+            class="btgraphical.diagram.preferences.DiagramConnectionsPreferencePage">
+      </page>
+      <page
+            id="BehaviorTreesGraphical.diagram.printing"
+            name="%prefpage.BehaviorTreesGraphical.diagram.printing"
+            category="BehaviorTreesGraphical.diagram.general"
+            class="btgraphical.diagram.preferences.DiagramPrintingPreferencePage">
+      </page>
+      <page
+            id="BehaviorTreesGraphical.diagram.rulersAndGrid"
+            name="%prefpage.BehaviorTreesGraphical.diagram.rulersAndGrid"
+            category="BehaviorTreesGraphical.diagram.general"
+            class="btgraphical.diagram.preferences.DiagramRulersAndGridPreferencePage">
+      </page>
+   </extension>
+
+   <extension point="org.eclipse.ui.views.properties.tabbed.propertyContributor" id="prop-contrib">
+      <?gmfgen generated="true"?>
+      <propertyContributor
+            contributorId="BehaviorTreesGraphical.diagram"
+            labelProvider="btgraphical.diagram.sheet.BtgraphicalSheetLabelProvider">
+         <propertyCategory category="domain"/>
+         <propertyCategory category="visual"/>
+         <propertyCategory category="extra"/>
+      </propertyContributor>
+   </extension>
+
+   <extension point="org.eclipse.ui.views.properties.tabbed.propertyTabs" id="proptabs">
+      <?gmfgen generated="true"?>   
+      <propertyTabs contributorId="BehaviorTreesGraphical.diagram">
+         <propertyTab
+             category="visual"
+             id="property.tab.AppearancePropertySection"
+             label="%tab.appearance"/>
+          <propertyTab
+             category="visual"
+             id="property.tab.DiagramPropertySection"
+             label="%tab.diagram"/>
+          <propertyTab
+             category="domain"
+             id="property.tab.domain"
+             label="%tab.domain"/>
+      </propertyTabs>
+   </extension>
+
+   <extension point="org.eclipse.ui.views.properties.tabbed.propertySections" id="propsections">
+      <?gmfgen generated="true"?>   
+      <propertySections contributorId="BehaviorTreesGraphical.diagram">
+         <propertySection id="property.section.ConnectorAppearancePropertySection" 
+            filter="org.eclipse.gmf.runtime.diagram.ui.properties.filters.ConnectionEditPartPropertySectionFilter" 
+            class="org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance.ConnectionAppearancePropertySection" 
+            tab="property.tab.AppearancePropertySection">
+         </propertySection>
+         <propertySection id="property.section.ShapeColorAndFontPropertySection" 
+            filter="org.eclipse.gmf.runtime.diagram.ui.properties.filters.ShapeEditPartPropertySectionFilter" 
+            class="org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance.ShapeColorsAndFontsPropertySection" 
+            tab="property.tab.AppearancePropertySection">
+         </propertySection> 
+         <propertySection id="property.section.DiagramColorsAndFontsPropertySection" 
+            filter="org.eclipse.gmf.runtime.diagram.ui.properties.filters.DiagramEditPartPropertySectionFilter" 
+            class="org.eclipse.gmf.runtime.diagram.ui.properties.sections.appearance.DiagramColorsAndFontsPropertySection" 
+            tab="property.tab.AppearancePropertySection">
+         </propertySection>     
+         <propertySection id="property.section.RulerGridPropertySection" 
+            filter="org.eclipse.gmf.runtime.diagram.ui.properties.filters.DiagramEditPartPropertySectionFilter" 
+            class="org.eclipse.gmf.runtime.diagram.ui.properties.sections.grid.RulerGridPropertySection" 
+            tab="property.tab.DiagramPropertySection">
+         </propertySection>     
+         <propertySection
+            id="property.section.domain" 
+            tab="property.tab.domain"
+            class="btgraphical.diagram.sheet.BtgraphicalPropertySection">
+            <input type="org.eclipse.gmf.runtime.notation.View"/>
+            <input type="org.eclipse.gef.EditPart"/>
+            <input type="btgraphical.diagram.navigator.BtgraphicalAbstractNavigatorItem"/>
+         </propertySection>
+      </propertySections>
+   </extension>
+
+   <extension point="org.eclipse.gmf.runtime.diagram.core.viewProviders" id="view-provider">
+      <?gmfgen generated="true"?>
+      <viewProvider class="btgraphical.diagram.providers.BtgraphicalViewProvider">
+         <Priority name="Lowest"/>
+         <object id="referencing-diagrams" class="org.eclipse.gmf.runtime.notation.Diagram">
+            <method name="getType()" value="btgraphical"/>
+         </object>
+         <context viewClass="org.eclipse.gmf.runtime.notation.Node" containerViews="referencing-diagrams"/>
+         <context viewClass="org.eclipse.gmf.runtime.notation.Diagram" semanticHints="Btgraphical"/>
+         <context viewClass="org.eclipse.gmf.runtime.notation.Node" semanticHints="2001,2002,3001"/>
+         <context viewClass="org.eclipse.gmf.runtime.notation.Edge" semanticHints="4001"/>
+      </viewProvider>
+   </extension>
+
+   <extension point="org.eclipse.gmf.runtime.diagram.ui.editpartProviders" id="ep-provider">
+      <?gmfgen generated="true"?>
+      <editpartProvider class="btgraphical.diagram.providers.BtgraphicalEditPartProvider">
+         <Priority name="Lowest"/>
+         <object class="org.eclipse.gmf.runtime.notation.Diagram" id="generated-diagram">
+            <method name="getType()" value="Btgraphical"/>
+         </object>
+         <object class="org.eclipse.gmf.runtime.notation.Node" id="generated-nodes">
+            <method name="getType()" value="2001,2002,3001"/>
+         </object>
+         <object class="org.eclipse.gmf.runtime.notation.Edge" id="generated-links">
+            <method name="getType()" value="4001"/>
+         </object>
+         <object class="org.eclipse.gmf.runtime.notation.Node" id="generated-labels">
+            <method name="getType()" value="5001,5002,5003,5007,5004,5005,5006"/>
+         </object>
+         <object class="org.eclipse.gmf.runtime.notation.Node" id="generated-compartments">
+            <method name="getType()" value="7001"/>
+         </object>
+         <context views="generated-diagram,generated-nodes,generated-links,generated-labels,generated-compartments"/>
+      </editpartProvider>
+   </extension>
+
+   <extension point="org.eclipse.gmf.runtime.emf.ui.modelingAssistantProviders" id="modelassist-provider">
+      <?gmfgen generated="true"?>
+      <modelingAssistantProvider class="btgraphical.diagram.providers.BtgraphicalModelingAssistantProvider">
+         <Priority name="Lowest"/>
+         <object class="btgraphical.diagram.edit.parts.BehaviorTreesEditPart" id="BehaviorTrees_1000"/>
+         <object class="btgraphical.diagram.edit.parts.NodeEditPart" id="Node_2001"/>
+         <object class="btgraphical.diagram.edit.parts.AtomicCompEditPart" id="AtomicComp_2002"/>
+         <context elements="BehaviorTrees_1000,Node_2001,AtomicComp_2002"/>
+      </modelingAssistantProvider>
+   </extension>
+
+   <extension point="org.eclipse.gmf.runtime.common.ui.services.iconProviders" id="icon-provider">
+      <?gmfgen generated="true"?>
+      <IconProvider class="btgraphical.diagram.providers.BtgraphicalIconProvider">
+         <Priority name="Low"/>
+      </IconProvider>
+   </extension>
+
+   <extension point="org.eclipse.gmf.runtime.common.ui.services.parserProviders" id="parser-provider">
+      <?gmfgen generated="true"?>
+      <ParserProvider class="btgraphical.diagram.providers.BtgraphicalParserProvider">
+         <Priority name="Lowest"/>
+      </ParserProvider>
+   </extension>
+
+   
+   <extension point="org.eclipse.gmf.runtime.emf.type.core.elementTypes" id="element-types">
+      <?gmfgen generated="true"?>
+      <metamodel nsURI="btgraphical">
+         <metamodelType
+               id="BehaviorTreesGraphical.diagram.BehaviorTrees_1000"
+               name="%metatype.name.BehaviorTrees_1000"
+               kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType"
+               eclass="BehaviorTrees"
+               edithelper="btgraphical.diagram.edit.helpers.BehaviorTreesEditHelper">
+            <param name="semanticHint" value="1000"/>
+         </metamodelType>
+      </metamodel>
+      <metamodel nsURI="btgraphical">
+         <metamodelType
+               id="BehaviorTreesGraphical.diagram.Node_2001"
+               name="%metatype.name.Node_2001"
+               kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType"
+               eclass="Node"
+               edithelper="btgraphical.diagram.edit.helpers.NodeEditHelper">
+            <param name="semanticHint" value="2001"/>
+         </metamodelType>
+      </metamodel>
+      <metamodel nsURI="btgraphical">
+         <metamodelType
+               id="BehaviorTreesGraphical.diagram.AtomicComp_2002"
+               name="%metatype.name.AtomicComp_2002"
+               kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType"
+               eclass="AtomicComp"
+               edithelper="btgraphical.diagram.edit.helpers.AtomicCompEditHelper">
+            <param name="semanticHint" value="2002"/>
+         </metamodelType>
+      </metamodel>
+      <metamodel nsURI="btgraphical">
+         <specializationType
+               id="BehaviorTreesGraphical.diagram.Node_3001"
+               name="%metatype.name.Node_3001"
+               kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType">
+            <specializes id="BehaviorTreesGraphical.diagram.Node_2001"/>
+            <param name="semanticHint" value="3001"/>
+         </specializationType>
+      </metamodel>
+      <metamodel nsURI="btgraphical">
+         <metamodelType
+               id="BehaviorTreesGraphical.diagram.SequentialComp_4001"
+               name="%metatype.name.SequentialComp_4001"
+               kind="org.eclipse.gmf.runtime.emf.type.core.IHintedType"
+               eclass="SequentialComp"
+               edithelper="btgraphical.diagram.edit.helpers.SequentialCompEditHelper">
+            <param name="semanticHint" value="4001"/>
+         </metamodelType>
+      </metamodel>
+   </extension>
+
+   <extension point="org.eclipse.gmf.runtime.emf.type.core.elementTypeBindings" id="element-types-bindings">
+      <?gmfgen generated="true"?>
+      <clientContext id="BehaviorTreesGraphical.diagram.TypeContext">
+         <enablement>
+            <test
+               property="org.eclipse.gmf.runtime.emf.core.editingDomain"
+               value="BehaviorTreesGraphical.diagram.EditingDomain"/>
+         </enablement>
+      </clientContext> 
+      <binding context="BehaviorTreesGraphical.diagram.TypeContext">
+         <elementType ref="BehaviorTreesGraphical.diagram.BehaviorTrees_1000"/>
+         <elementType ref="BehaviorTreesGraphical.diagram.Node_2001"/>
+         <elementType ref="BehaviorTreesGraphical.diagram.AtomicComp_2002"/>
+         <elementType ref="BehaviorTreesGraphical.diagram.Node_3001"/>
+         <elementType ref="BehaviorTreesGraphical.diagram.SequentialComp_4001"/>
+         <advice ref="org.eclipse.gmf.runtime.diagram.core.advice.notationDepdendents"/>
+      </binding>
+   </extension>
+	   <extension point="org.eclipse.core.expressions.propertyTesters" id="navigator-proptest.isURIEditorInput">
+      <?gmfgen generated="true"?>
+       <propertyTester
+           id="BehaviorTreesGraphical.diagram.URIEditorInputPropertyTester"
+           type="org.eclipse.emf.common.ui.URIEditorInput"
+           namespace="BehaviorTreesGraphical.diagram"
+           properties="isURIEditorInput"
+           class="btgraphical.diagram.part.BtgraphicalUriEditorInputTester">
+       </propertyTester>
+   </extension>
+
+	   
+	   <extension point="org.eclipse.ui.navigator.viewer" id="navigator-viewbinding">
+      <?gmfgen generated="true"?>
+      <viewerContentBinding viewerId="org.eclipse.ui.navigator.ProjectExplorer">
+         <includes>
+            <contentExtension pattern="BehaviorTreesGraphical.diagram.resourceContent"/>
+			<contentExtension pattern="BehaviorTreesGraphical.diagram.domainResourceContent"/>
+            <contentExtension pattern="BehaviorTreesGraphical.diagram.navigatorLinkHelper"/>
+         </includes>
+      </viewerContentBinding>
+      <viewerActionBinding viewerId="org.eclipse.ui.navigator.ProjectExplorer">
+         <includes>
+            <actionExtension pattern="BehaviorTreesGraphical.diagram.navigatorActionProvider"/>
+         </includes>
+      </viewerActionBinding>
+   </extension>
+
+   <extension point="org.eclipse.ui.navigator.navigatorContent" id="navigator-content">
+      <?gmfgen generated="true"?>
+      <navigatorContent
+            id="BehaviorTreesGraphical.diagram.resourceContent" 
+            name="%navigatorContentName" 
+            priority="normal" 
+            contentProvider="btgraphical.diagram.navigator.BtgraphicalNavigatorContentProvider" 
+            labelProvider="btgraphical.diagram.navigator.BtgraphicalNavigatorLabelProvider"
+            icon="icons/obj16/BtgraphicalDiagramFile.gif"
+            activeByDefault="true">
+         <triggerPoints>
+            <or>
+	           <and>
+    	          <instanceof value="org.eclipse.core.resources.IFile"/>
+        	      <test property="org.eclipse.core.resources.extension" value="btgraphical_diagram"/>
+               </and>
+               <instanceof value="btgraphical.diagram.navigator.BtgraphicalAbstractNavigatorItem"/>
+           	   <adapt type="org.eclipse.gmf.runtime.notation.View">
+           	      <test property="BehaviorTreesGraphical.diagram.isShortcut"/>
+           	   </adapt>
+            </or>
+         </triggerPoints>
+         <possibleChildren>
+            <or>
+         	   <instanceof value="btgraphical.diagram.navigator.BtgraphicalAbstractNavigatorItem"/>
+           	   <adapt type="org.eclipse.gmf.runtime.notation.View">
+           	      <test property="BehaviorTreesGraphical.diagram.isShortcut"/>
+           	   </adapt>
+            </or>
+         </possibleChildren>
+         <commonSorter 
+               id="BehaviorTreesGraphical.diagram.navigatorSorter" 
+               class="btgraphical.diagram.navigator.BtgraphicalNavigatorSorter">
+            <parentExpression>
+               <or>
+	              <and>
+    	             <instanceof value="org.eclipse.core.resources.IFile"/>
+        	         <test property="org.eclipse.core.resources.extension" value="btgraphical_diagram"/>
+                  </and>
+                  <instanceof value="btgraphical.diagram.navigator.BtgraphicalAbstractNavigatorItem"/>
+               </or>
+            </parentExpression>
+         </commonSorter>
+      </navigatorContent>
+      <navigatorContent
+            id="BehaviorTreesGraphical.diagram.domainResourceContent" 
+            name="%domainNavigatorContentName" 
+            priority="normal" 
+            contentProvider="btgraphical.diagram.navigator.BtgraphicalDomainNavigatorContentProvider" 
+            labelProvider="btgraphical.diagram.navigator.BtgraphicalDomainNavigatorLabelProvider"
+            icon="icons/obj16/BtgraphicalDiagramFile.gif"
+            activeByDefault="true">
+         <triggerPoints>
+            <or>
+	           <and>
+    	          <instanceof value="org.eclipse.core.resources.IFile"/>
+        	      <test property="org.eclipse.core.resources.extension" value="btgraphical"/>
+               </and>
+               <instanceof value="btgraphical.diagram.navigator.BtgraphicalDomainNavigatorItem"/>
+            </or>
+         </triggerPoints>
+         <possibleChildren>
+            <instanceof value="btgraphical.diagram.navigator.BtgraphicalDomainNavigatorItem"/>
+         </possibleChildren>
+      </navigatorContent>
+      <actionProvider
+            id="BehaviorTreesGraphical.diagram.navigatorActionProvider"
+            class="btgraphical.diagram.navigator.BtgraphicalNavigatorActionProvider">
+         <enablement>
+            <or>
+               <instanceof value="btgraphical.diagram.navigator.BtgraphicalAbstractNavigatorItem"/>
+           	   <adapt type="org.eclipse.gmf.runtime.notation.View">
+           	      <test property="BehaviorTreesGraphical.diagram.isShortcut"/>
+           	   </adapt>
+            </or>
+         </enablement>
+      </actionProvider>
+   </extension>
+   
+	   <extension point="org.eclipse.ui.navigator.linkHelper" id="navigator-linkhelper">
+      <?gmfgen generated="true"?>
+      <linkHelper
+            id="BehaviorTreesGraphical.diagram.navigatorLinkHelper"
+            class="btgraphical.diagram.navigator.BtgraphicalNavigatorLinkHelper">
+         <editorInputEnablement>
+            <and>
+               <instanceof value="org.eclipse.emf.common.ui.URIEditorInput"/>
+               <test property="BehaviorTreesGraphical.diagram.isURIEditorInput"/>
+            </and>
+         </editorInputEnablement>
+         <selectionEnablement>
+            <instanceof value="btgraphical.diagram.navigator.BtgraphicalAbstractNavigatorItem"/>
+         </selectionEnablement>
+      </linkHelper>
+   </extension>
+   <extension point="org.eclipse.ui.commands" id="update-cmd">
+      <?gmfgen generated="true"?>
+      <command
+         categoryId="org.eclipse.ui.category.edit"
+         defaultHandler="btgraphical.diagram.part.BtgraphicalDiagramUpdateCommand"
+         description="%update.diagram.description"
+         id="btgraphical.diagram.updateDiagram"
+         name="%update.diagram.name"/>
+   </extension>
+   
+   <extension point="org.eclipse.ui.bindings" id="update-cmd-binding">
+      <?gmfgen generated="true"?>
+      <key 
+         commandId="btgraphical.diagram.updateDiagram"
+         contextId="btgraphical.diagram.ui.diagramContext"
+         schemeId="org.eclipse.ui.defaultAcceleratorConfiguration"
+         sequence="F5"/>
+   </extension>
+
+   <extension point="org.eclipse.ui.menus" id="context-menus">
+      <?gmfgen generated="true"?>
+      <!-- menuContribution locationURI="menu:org.eclipse.ui.main.menu?after=">
+      </menuContribution>
+      <menuContribution locationURI="toolbar:org.eclipse.ui.main.toolbar?after=">
+      </menuContribution -->
+      <menuContribution locationURI="popup:org.eclipse.gmf.runtime.diagram.ui.DiagramEditorContextMenu">
+         <command commandId="BehaviorTreesGraphical.diagram.LoadResourceAction">
+            <visibleWhen>
+               <and>
+                  <with variable="activePartId"><equals value="btgraphical.diagram.part.BtgraphicalDiagramEditorID"/></with>
+                  <with variable="selection"><iterate ifEmpty="false"> 
+                     <instanceof value="btgraphical.diagram.edit.parts.BehaviorTreesEditPart"/>
+                  </iterate></with>
+               </and>
+            </visibleWhen>
+         </command>
+      </menuContribution>
+   </extension>
+
+   <extension point="org.eclipse.ui.commands" id="menu-commands">
+      <?gmfgen generated="true"?>
+      <category id="btgraphical.diagram.part.BtgraphicalDiagramEditorID" name="%cmdcategory.name" description="%cmdcategory.desc"/>
+      <command id="BehaviorTreesGraphical.diagram.LoadResourceAction"
+         name="Load Resource"
+         categoryId="btgraphical.diagram.part.BtgraphicalDiagramEditorID"
+         defaultHandler="btgraphical.diagram.part.LoadResourceAction"/>
+   </extension>
+
+   <extension point="org.eclipse.ui.handlers" id="menu-handlers">
+      <?gmfgen generated="true"?>
+   </extension>
+
+   <!-- optionally, specify keybindings -->
+   
+   <extension name="DirectedGraphLayout"
+		point="org.eclipse.gmf.runtime.diagram.ui.layoutProviders">
+		<layoutProvider
+			class="org.eclipse.draw2d.graph.DirectedGraphLayout">
+			<Priority name="Medium"/>
+		</layoutProvider>
+	</extension>
+<extension point="org.eclipse.gmf.runtime.common.ui.services.markerNavigationProviders" id="markers-navigation">
+      <?gmfgen generated="true"?>
+      <MarkerNavigationProvider class="btgraphical.diagram.providers.BtgraphicalMarkerNavigationProvider">
+         <MarkerType name="BehaviorTreesGraphical.diagram.diagnostic"/>
+         <Priority name="Lowest"/>
+      </MarkerNavigationProvider>
+   </extension>
+
+<extension id="diagnostic" name="Btgraphical Plugin problems" point="org.eclipse.core.resources.markers">
+      <?gmfgen generated="true"?>
+      <super type="org.eclipse.core.resources.problemmarker"/>
+      <super type="org.eclipse.gmf.runtime.common.ui.services.marker"/>
+      <persistent value="true"/>
+   </extension><extension id="validationDecoratorProvider" name="ValidationDecorations" point="org.eclipse.gmf.runtime.diagram.ui.decoratorProviders">
+      <?gmfgen generated="true"?>
+      <decoratorProvider class="btgraphical.diagram.providers.BtgraphicalValidationDecoratorProvider">
+         <Priority name="Lowest"/>
+         <object class="org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart(org.eclipse.gmf.runtime.diagram.ui)" id="PRIMARY_VIEW"/>
+         <context decoratorTargets="PRIMARY_VIEW"/>
+      </decoratorProvider>
+   </extension>
+
+<extension point="org.eclipse.gmf.runtime.diagram.ui.decoratorProviders" id="decorator-provider">
+      <?gmfgen generated="true"?>
+      <decoratorProvider class="btgraphical.diagram.providers.BtgraphicalShortcutsDecoratorProvider">
+         <Priority name="Lowest"/>
+         <object class="org.eclipse.gmf.runtime.notation.Node(org.eclipse.gmf.runtime.notation)" id="generated-top-nodes">
+            <method name="getType()" value="2001,2002"/>
+         </object>
+         <context decoratorTargets="generated-top-nodes"/>
+      </decoratorProvider>
+   </extension>
+
+<extension point="org.eclipse.core.expressions.propertyTesters" id="navigator-proptest.isShortcut">
+      <?gmfgen generated="true"?>
+       <propertyTester
+           id="BehaviorTreesGraphical.diagram.ShortcutPropertyTester"
+           type="org.eclipse.gmf.runtime.notation.View"
+           namespace="BehaviorTreesGraphical.diagram"
+           properties="isShortcut"
+           class="btgraphical.diagram.part.BtgraphicalShortcutPropertyTester">
+       </propertyTester>
+   </extension>
+
+   
+</plugin>

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java	Fri Apr  6 04:57:32 2012	(r24714)
@@ -0,0 +1,57 @@
+package figures;
+
+import org.eclipse.draw2d.ColorConstants;
+import org.eclipse.draw2d.Figure;
+import org.eclipse.draw2d.Graphics;
+import org.eclipse.draw2d.PositionConstants;
+import org.eclipse.draw2d.geometry.Dimension;
+import org.eclipse.draw2d.geometry.Point;
+import org.eclipse.draw2d.geometry.Rectangle;
+import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
+import org.eclipse.swt.graphics.Color;
+
+public class NodeFigure extends Figure {
+
+	public NodeFigure() {
+		this.setPreferredSize(175, 60);
+		this.setMinimumSize(new Dimension(175, 60));
+	}
+
+	@Override
+	public void paint(Graphics graphics) {
+		Rectangle r = getBounds();
+		graphics.setBackgroundColor(new Color(null, 177, 211, 69));
+		graphics.fillRectangle(r);
+		graphics.setForegroundColor(ColorConstants.black);
+		graphics.setLineWidth(2);
+		graphics.drawRectangle(r);
+
+		int widthLeftCompartment = (int) (0.3 * r.width());
+		int widthRightCompartment = r.width() - widthLeftCompartment;
+		int labelDistanceToBorder = 3;
+
+		graphics.setLineWidth(1);
+		graphics.drawLine(r.x() + widthLeftCompartment, r.y(), r.x() + widthLeftCompartment, r.y() + r.height());
+
+		WrappingLabel requirement = (WrappingLabel) getChildren().get(0);
+		requirement.setAlignment(PositionConstants.CENTER);
+		requirement.setMaximumSize(new Dimension(widthLeftCompartment - 2 * labelDistanceToBorder, r.height()));
+		requirement.setLocation(new Point(r.x() + 4, r.y() + r.height() / 7));
+		requirement.paint(graphics);
+
+		WrappingLabel component = (WrappingLabel) getChildren().get(1);
+		component.setAlignment(PositionConstants.CENTER);
+		component.setMaximumSize(new Dimension(widthRightCompartment - 2 * labelDistanceToBorder, r.height()));
+		component.setLocation(new Point(r.x() + widthLeftCompartment + 4, r.y() + r.height() / 7));
+		component.paint(graphics);
+
+		WrappingLabel state = (WrappingLabel) getChildren().get(2);
+		if (!state.getText().startsWith("[")) {
+			state.setText("[ " + state.getText() + " ]");
+		}
+		state.setAlignment(PositionConstants.CENTER);
+		state.setMaximumSize(new Dimension(widthRightCompartment - 2 * labelDistanceToBorder, r.height()));
+		state.setLocation(new Point(r.x() + widthLeftCompartment + 4, (int) (r.y() + r.height() / 1.8)));
+		state.paint(graphics);
+	}
+}

From oskarvanrest at gmail.com  Fri Apr  6 07:47:59 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Fri, 06 Apr 2012 05:47:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24715 -
	experimental/graphical-editor/BehaviorTreesGraphical.diagram
Message-ID: <20120406054759.5F250CC086@mx4.tudelft.nl>

Author: OskarVanRest
Date: Fri Apr  6 05:47:59 2012
New Revision: 24715
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24715&sc=1

Log:
Changed layoutprovider to a topdown provider...for trees, like a Behavior Tree. Clicking on 'Arrange all' does the job. It's not possible to se the layoutprovider in Eugenia or GMF, it really has to be done in the generate GMF diagram code (so this will probably be a feature that won't be added to our tool).

Modified:
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.xml

Modified: experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.xml
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.xml	Fri Apr  6 04:57:32 2012	(r24714)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/plugin.xml	Fri Apr  6 05:47:59 2012	(r24715)
@@ -591,5 +591,10 @@
        </propertyTester>
    </extension>
 
-   
+	<extension point="org.eclipse.gmf.runtime.diagram.ui.layoutProviders">
+	<?gmfgen generated="false"?>
+		<layoutProvider class="org.eclipse.gmf.runtime.diagram.ui.providers.TopDownProvider">
+			<Priority name="High"></Priority>
+		</layoutProvider>
+	</extension> 
 </plugin>

From oskarvanrest at gmail.com  Fri Apr  6 15:43:57 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Fri, 06 Apr 2012 13:43:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24716 - in
	experimental/graphical-editor/BehaviorTreesGraphical: META-INF model
Message-ID: <20120406134357.69A0A2B800B@mx2.tudelft.nl>

Author: OskarVanRest
Date: Fri Apr  6 13:43:57 2012
New Revision: 24716
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24716&sc=1

Log:
Added EOL transformations so that I can show a `requirement' as a node label. This is needed because EuGENia only supports attributes as labels and not properties of references.

Added:
   experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol
Modified:
   experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF
   experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf

Modified: experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF	Fri Apr  6 05:47:59 2012	(r24715)
+++ experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF	Fri Apr  6 13:43:57 2012	(r24716)
@@ -1,6 +1,16 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
-Bundle-Name: BehaviorTreesGraphical
-Bundle-SymbolicName: BehaviorTreesGraphical
-Bundle-Version: 0.1.0
-Require-Bundle: org.eclipse.emf.ecore
+Bundle-Name: %pluginName
+Bundle-SymbolicName: BehaviorTreesGraphical;singleton:=true
+Bundle-Version: 1.0.0.qualifier
+Bundle-ClassPath: .
+Bundle-Vendor: %providerName
+Bundle-Localization: plugin
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6
+Export-Package: btgraphical,
+ btgraphical.impl,
+ btgraphical.util
+Require-Bundle: org.eclipse.core.runtime,
+ org.eclipse.emf.ecore;visibility:=reexport,
+ org.eclipse.draw2d;bundle-version="3.7.2"
+Bundle-ActivationPolicy: lazy

Modified: experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf	Fri Apr  6 05:47:59 2012	(r24715)
+++ experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf	Fri Apr  6 13:43:57 2012	(r24716)
@@ -4,29 +4,32 @@
 
 @gmf.diagram(foo="bar")
 class BehaviorTrees {
+	val Requirement[*] requirements;
     val SuperNode[*] nodes;
 }
 
- at gmf.node(label="requirement, component, state", label.pattern="{0}, {1}, {2}")
+class SuperNode {
+}
+
+ at gmf.node(figure="figures.NodeFigure", label.icon="false", label="component", label.readOnly="true")
 class Node extends SuperNode {
-    attr String requirement;
-    attr String component;
-    attr String state;
+	attr String component;
+	ref Requirement requirement;
+	@gmf.label(readOnly="true")
+	attr String state;
 }
 
- at gmf.link(source="source", target="target", target.decoration="arrow", label = "name")
+ at gmf.link(source="source", target="target", target.decoration="arrow")
 class SequentialComp extends SuperNode {
-	attr String name;
     ref SuperNode source;
     ref SuperNode target;
 }
 
- at gmf.node(label = "foo", label.placement = "none", color="244,252,225")
 class AtomicComp extends SuperNode {
-	attr String foo;
-	@gmf.compartment(layout="list")
 	val Node[*] nodes;
 }
 
-class SuperNode {
+class Requirement {
+   attr String identifier;
+   attr String label;   
 }
\ No newline at end of file

Added: experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol	Fri Apr  6 13:43:57 2012	(r24716)
@@ -0,0 +1,38 @@
+-- delete text of 
+var nodeLabelFigure = GmfGraph!Label.all.selectOne(r|r.name = 'NodeLabelFigure');
+nodeLabelFigure.text = '';
+
+-- create nodeRequirement label
+var nodeFigure = GmfGraph!CustomFigure.all.selectOne(r|r.name = 'NodeFigure');
+var nodeRequirementLabel = new GmfGraph!Label;
+nodeRequirementLabel.name = 'NodeRequirementLabelFigure';
+nodeFigure.children.add(nodeRequirementLabel);
+
+--
+var nodeFigureDescriptor = GmfGraph!FigureDescriptor.all.selectOne(r|r.name = 'NodeFigure');
+var requirementLabelAccessor = new GmfGraph!ChildAccess;
+requirementLabelAccessor.accessor = 'getFigureNodeRequirementLabelFigure';
+requirementLabelAccessor.figure = nodeRequirementLabel;
+nodeFigureDescriptor.accessors.add(requirementLabelAccessor);
+
+--
+var canvas = GmfGraph!Canvas.all.first;
+var nodeRequirementLabel = new GmfGraph!DiagramLabel;
+nodeRequirementLabel.accessor = requirementLabelAccessor;
+nodeRequirementLabel.figure = nodeFigureDescriptor;
+nodeRequirementLabel.name = 'NodeRequirementLabel';
+nodeRequirementLabel.elementIcon = false;
+canvas.labels.add(nodeRequirementLabel);
+
+--
+
+var nodeMapping = GmfMap!NodeMapping.all.first;
+var nodeRequirementLabelMapping = new GmfMap!ExpressionLabelMapping;
+nodeRequirementLabelMapping.diagramLabel = nodeRequirementLabel;
+nodeRequirementLabelMapping.readOnly = true;
+nodeMapping.labelMappings.add(nodeRequirementLabelMapping);
+var expression = new GmfMap!ValueExpression;
+expression.body = 'requirement.identifier';
+nodeRequirementLabelMapping.viewExpression = expression;
+
+

From oskarvanrest at gmail.com  Fri Apr  6 15:44:29 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Fri, 06 Apr 2012 13:44:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24717 -
	experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures
Message-ID: <20120406134429.61A39CC0EA@mx4.tudelft.nl>

Author: OskarVanRest
Date: Fri Apr  6 13:44:29 2012
New Revision: 24717
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24717&sc=1

Log:
fix

Modified:
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java

Modified: experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java	Fri Apr  6 13:43:57 2012	(r24716)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java	Fri Apr  6 13:44:29 2012	(r24717)
@@ -33,19 +33,19 @@
 		graphics.setLineWidth(1);
 		graphics.drawLine(r.x() + widthLeftCompartment, r.y(), r.x() + widthLeftCompartment, r.y() + r.height());
 
-		WrappingLabel requirement = (WrappingLabel) getChildren().get(0);
+		WrappingLabel requirement = (WrappingLabel) getChildren().get(2);
 		requirement.setAlignment(PositionConstants.CENTER);
 		requirement.setMaximumSize(new Dimension(widthLeftCompartment - 2 * labelDistanceToBorder, r.height()));
 		requirement.setLocation(new Point(r.x() + 4, r.y() + r.height() / 7));
 		requirement.paint(graphics);
 
-		WrappingLabel component = (WrappingLabel) getChildren().get(1);
+		WrappingLabel component = (WrappingLabel) getChildren().get(0);
 		component.setAlignment(PositionConstants.CENTER);
 		component.setMaximumSize(new Dimension(widthRightCompartment - 2 * labelDistanceToBorder, r.height()));
 		component.setLocation(new Point(r.x() + widthLeftCompartment + 4, r.y() + r.height() / 7));
 		component.paint(graphics);
 
-		WrappingLabel state = (WrappingLabel) getChildren().get(2);
+		WrappingLabel state = (WrappingLabel) getChildren().get(1);
 		if (!state.getText().startsWith("[")) {
 			state.setText("[ " + state.getText() + " ]");
 		}

From oskarvanrest at gmail.com  Tue Apr 10 04:09:48 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Tue, 10 Apr 2012 02:09:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24718 -
	experimental/graphical-editor/BehaviorTreesGraphical/model
Message-ID: <20120410020948.8462F2B8005@mx2.tudelft.nl>

Author: OskarVanRest
Date: Tue Apr 10 02:09:47 2012
New Revision: 24718
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24718&sc=1

Log:
Added labels for components and states. Added phantom nodes.

Modified:
   experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf
   experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol

Modified: experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf	Fri Apr  6 13:44:29 2012	(r24717)
+++ experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf	Tue Apr 10 02:09:47 2012	(r24718)
@@ -3,33 +3,41 @@
 package btgraphical;
 
 @gmf.diagram(foo="bar")
-class BehaviorTrees {
+class Start extends SuperNode {
 	val Requirement[*] requirements;
+	val Component[*] components;
     val SuperNode[*] nodes;
 }
 
 class SuperNode {
 }
 
- at gmf.node(figure="figures.NodeFigure", label.icon="false", label="component", label.readOnly="true")
+ at gmf.node(phantom="true", figure="figures.NodeFigure", label="foo", label.icon="false", label.readOnly="true")
 class Node extends SuperNode {
-	attr String component;
+	attr String foo = "bar";
 	ref Requirement requirement;
-	@gmf.label(readOnly="true")
-	attr String state;
+	ref Component component;
+	ref State state;
 }
 
 @gmf.link(source="source", target="target", target.decoration="arrow")
 class SequentialComp extends SuperNode {
-    ref SuperNode source;
-    ref SuperNode target;
-}
-
-class AtomicComp extends SuperNode {
-	val Node[*] nodes;
+    val SuperNode source;
+    val SuperNode target;
 }
 
 class Requirement {
    attr String identifier;
    attr String label;   
+}
+
+class Component {
+   attr String identifier;
+   attr String label; 
+   val State[*] states;
+}
+
+class State {
+   attr String identifier;
+   attr String label;
 }
\ No newline at end of file

Modified: experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol	Fri Apr  6 13:44:29 2012	(r24717)
+++ experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol	Tue Apr 10 02:09:47 2012	(r24718)
@@ -1,22 +1,50 @@
--- delete text of 
-var nodeLabelFigure = GmfGraph!Label.all.selectOne(r|r.name = 'NodeLabelFigure');
-nodeLabelFigure.text = '';
-
--- create nodeRequirement label
+-- initialize some variables
 var nodeFigure = GmfGraph!CustomFigure.all.selectOne(r|r.name = 'NodeFigure');
+var nodeFigureDescriptor = GmfGraph!FigureDescriptor.all.selectOne(r|r.name = 'NodeFigure');
+var canvas = GmfGraph!Canvas.all.first;
+var nodeMapping = GmfMap!NodeMapping.all.first;
+
+-- remove 'foo' label
+--nodeMapping.labelMappings.remove(GmfMap!FeatureLabelMapping.all.first);
+--canvas.labels.remove(GmfGraph!DiagramLabel.all.selectOne(r|r.name = 'NodeLabel'));
+--nodeFigureDescriptor.accessors.remove(GmfGraph!ChildAccess.all.selectOne(r|r.accessor = 'getFigureNodeLabelFigure'));
+--nodeFigure.children.remove(GmfGraph!Label.all.selectOne(r|r.name = 'NodeLabelFigure'));
+
+-- create labels for Requirement, Component and State
+
 var nodeRequirementLabel = new GmfGraph!Label;
 nodeRequirementLabel.name = 'NodeRequirementLabelFigure';
 nodeFigure.children.add(nodeRequirementLabel);
 
---
-var nodeFigureDescriptor = GmfGraph!FigureDescriptor.all.selectOne(r|r.name = 'NodeFigure');
+var nodeComponentLabel = new GmfGraph!Label;
+nodeComponentLabel.name = 'NodeComponentLabelFigure';
+nodeFigure.children.add(nodeComponentLabel);
+
+var nodeStateLabel = new GmfGraph!Label;
+nodeStateLabel.name = 'NodeStateLabelFigure';
+nodeFigure.children.add(nodeStateLabel);
+
+
+-- create child accessors for Requirement, Component and State labels
+
 var requirementLabelAccessor = new GmfGraph!ChildAccess;
 requirementLabelAccessor.accessor = 'getFigureNodeRequirementLabelFigure';
 requirementLabelAccessor.figure = nodeRequirementLabel;
 nodeFigureDescriptor.accessors.add(requirementLabelAccessor);
 
---
-var canvas = GmfGraph!Canvas.all.first;
+var componentLabelAccessor = new GmfGraph!ChildAccess;
+componentLabelAccessor.accessor = 'getFigureNodeComponentLabelFigure';
+componentLabelAccessor.figure = nodeComponentLabel;
+nodeFigureDescriptor.accessors.add(componentLabelAccessor);
+
+var stateLabelAccessor = new GmfGraph!ChildAccess;
+stateLabelAccessor.accessor = 'getFigureNodeStateLabelFigure';
+stateLabelAccessor.figure = nodeStateLabel;
+nodeFigureDescriptor.accessors.add(stateLabelAccessor);
+
+
+-- create Diagram Labels for Requirement, Component and State
+
 var nodeRequirementLabel = new GmfGraph!DiagramLabel;
 nodeRequirementLabel.accessor = requirementLabelAccessor;
 nodeRequirementLabel.figure = nodeFigureDescriptor;
@@ -24,15 +52,43 @@
 nodeRequirementLabel.elementIcon = false;
 canvas.labels.add(nodeRequirementLabel);
 
---
+var nodeComponentLabel = new GmfGraph!DiagramLabel;
+nodeComponentLabel.accessor = componentLabelAccessor;
+nodeComponentLabel.figure = nodeFigureDescriptor;
+nodeComponentLabel.name = 'NodeComponentLabel';
+nodeComponentLabel.elementIcon = false;
+canvas.labels.add(nodeComponentLabel);
+
+var nodeStateLabel = new GmfGraph!DiagramLabel;
+nodeStateLabel.accessor = stateLabelAccessor;
+nodeStateLabel.figure = nodeFigureDescriptor;
+nodeStateLabel.name = 'NodeStateLabel';
+nodeStateLabel.elementIcon = false;
+canvas.labels.add(nodeStateLabel);
+
+
+-- create expressionLabelMappings for Requirement, Component and State
 
-var nodeMapping = GmfMap!NodeMapping.all.first;
 var nodeRequirementLabelMapping = new GmfMap!ExpressionLabelMapping;
 nodeRequirementLabelMapping.diagramLabel = nodeRequirementLabel;
 nodeRequirementLabelMapping.readOnly = true;
 nodeMapping.labelMappings.add(nodeRequirementLabelMapping);
-var expression = new GmfMap!ValueExpression;
-expression.body = 'requirement.identifier';
-nodeRequirementLabelMapping.viewExpression = expression;
-
-
+var requirementExpression = new GmfMap!ValueExpression;
+requirementExpression.body = 'requirement.identifier';
+nodeRequirementLabelMapping.viewExpression = requirementExpression;
+
+var nodeComponentLabelMapping = new GmfMap!ExpressionLabelMapping;
+nodeComponentLabelMapping.diagramLabel = nodeComponentLabel;
+nodeComponentLabelMapping.readOnly = true;
+nodeMapping.labelMappings.add(nodeComponentLabelMapping);
+var componentExpression = new GmfMap!ValueExpression;
+componentExpression.body = 'component.identifier';
+nodeComponentLabelMapping.viewExpression = componentExpression;
+
+var nodeStateLabelMapping = new GmfMap!ExpressionLabelMapping;
+nodeStateLabelMapping.diagramLabel = nodeStateLabel;
+nodeStateLabelMapping.readOnly = true;
+nodeMapping.labelMappings.add(nodeStateLabelMapping);
+var stateExpression = new GmfMap!ValueExpression;
+stateExpression.body = 'state.identifier';
+nodeStateLabelMapping.viewExpression = stateExpression;

From oskarvanrest at gmail.com  Tue Apr 10 04:12:10 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Tue, 10 Apr 2012 02:12:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24719 - in
	experimental/graphical-editor/BehaviorTreesGraphical.diagram/src:
	btgraphical btgraphical/diagram btgraphical/diagram/edit
	btgraphical/diagram/edit/parts btgrap...
Message-ID: <20120410021210.A859A108C026@mx3.tudelft.nl>

Author: OskarVanRest
Date: Tue Apr 10 02:12:10 2012
New Revision: 24719
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24719&sc=1

Log:
Update NodeFigure.
Added workaround for GMF bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=331875

Added:
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/WrappingLabel2EditPart.java
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/WrappingLabel3EditPart.java
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/WrappingLabelEditPart.java
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/parsers/
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/parsers/NodeLabelExpressionLabelParser.java
Modified:
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/WrappingLabel2EditPart.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/WrappingLabel2EditPart.java	Tue Apr 10 02:12:10 2012	(r24719)
@@ -0,0 +1,527 @@
+/*
+ * 
+ */
+package btgraphical.diagram.edit.parts;
+
+import java.util.Collections;
+import java.util.List;
+
+import org.eclipse.draw2d.IFigure;
+import org.eclipse.draw2d.Label;
+import org.eclipse.draw2d.geometry.Point;
+import org.eclipse.emf.common.notify.Notification;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.transaction.RunnableWithResult;
+import org.eclipse.gef.AccessibleEditPart;
+import org.eclipse.gef.EditPolicy;
+import org.eclipse.gef.Request;
+import org.eclipse.gef.requests.DirectEditRequest;
+import org.eclipse.gef.tools.DirectEditManager;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;
+import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;
+import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;
+import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
+import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
+import org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager;
+import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
+import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
+import org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser;
+import org.eclipse.gmf.runtime.notation.FontStyle;
+import org.eclipse.gmf.runtime.notation.NotationPackage;
+import org.eclipse.gmf.runtime.notation.View;
+import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
+import org.eclipse.jface.viewers.ICellEditorValidator;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.accessibility.AccessibleEvent;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.FontData;
+import org.eclipse.swt.graphics.Image;
+
+import btgraphical.diagram.edit.policies.BtgraphicalTextSelectionEditPolicy;
+import btgraphical.diagram.part.BtgraphicalVisualIDRegistry;
+import btgraphical.diagram.providers.BtgraphicalElementTypes;
+import btgraphical.diagram.providers.BtgraphicalParserProvider;
+
+/**
+ * @generated
+ */
+public class WrappingLabel2EditPart extends CompartmentEditPart implements ITextAwareEditPart {
+
+	/**
+	 * @generated
+	 */
+	public static final int VISUAL_ID = 5007;
+
+	/**
+	 * @generated
+	 */
+	private DirectEditManager manager;
+
+	/**
+	 * @generated
+	 */
+	private IParser parser;
+
+	/**
+	 * @generated
+	 */
+	private List<?> parserElements;
+
+	/**
+	 * @generated
+	 */
+	private String defaultText;
+
+	/**
+	 * @generated
+	 */
+	public WrappingLabel2EditPart(View view) {
+		super(view);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void createDefaultEditPolicies() {
+		super.createDefaultEditPolicies();
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new BtgraphicalTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new StartEditPart.NodeLabelDragPolicy());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected String getLabelTextHelper(IFigure figure) {
+		if (figure instanceof WrappingLabel) {
+			return ((WrappingLabel) figure).getText();
+		} else {
+			return ((Label) figure).getText();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setLabelTextHelper(IFigure figure, String text) {
+		if (figure instanceof WrappingLabel) {
+			((WrappingLabel) figure).setText(text);
+		} else {
+			((Label) figure).setText(text);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Image getLabelIconHelper(IFigure figure) {
+		if (figure instanceof WrappingLabel) {
+			return ((WrappingLabel) figure).getIcon();
+		} else {
+			return ((Label) figure).getIcon();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setLabelIconHelper(IFigure figure, Image icon) {
+		if (figure instanceof WrappingLabel) {
+			((WrappingLabel) figure).setIcon(icon);
+		} else {
+			((Label) figure).setIcon(icon);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setLabel(WrappingLabel figure) {
+		unregisterVisuals();
+		setFigure(figure);
+		defaultText = getLabelTextHelper(figure);
+		registerVisuals();
+		refreshVisuals();
+	}
+
+	/**
+	 * @generated
+	 */
+	@SuppressWarnings("rawtypes")
+	protected List getModelChildren() {
+		return Collections.EMPTY_LIST;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IGraphicalEditPart getChildBySemanticHint(String semanticHint) {
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected EObject getParserElement() {
+		return resolveSemanticElement();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Image getLabelIcon() {
+		return null;
+	}
+
+	/**
+	 * @generated not
+	 */
+	protected String getLabelText() {
+		String text = null;
+		EObject parserElement = getParserElement();
+		if (parserElement != null && getParser() != null) {
+			text = getParser().getPrintString(new EObjectAdapter(parserElement), 1);
+		}
+		if (text == null || text.length() == 0) {
+			text = defaultText;
+		}
+		return text;
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setLabelText(String text) {
+		setLabelTextHelper(getFigure(), text);
+		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+		if (pdEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) pdEditPolicy).refreshFeedback();
+		}
+		Object sfEditPolicy = getEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE);
+		if (sfEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) sfEditPolicy).refreshFeedback();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	public String getEditText() {
+		if (getParserElement() == null || getParser() == null) {
+			return ""; //$NON-NLS-1$
+		}
+		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected boolean isEditable() {
+		return false;
+	}
+
+	/**
+	 * @generated
+	 */
+	public ICellEditorValidator getEditTextValidator() {
+		return new ICellEditorValidator() {
+
+			public String isValid(final Object value) {
+				if (value instanceof String) {
+					final EObject element = getParserElement();
+					final IParser parser = getParser();
+					try {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(new RunnableWithResult.Impl<IParserEditStatus>() {
+
+							public void run() {
+								setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
+							}
+						});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+					} catch (InterruptedException ie) {
+						ie.printStackTrace();
+					}
+				}
+
+				// shouldn't get here
+				return null;
+			}
+		};
+	}
+
+	/**
+	 * @generated
+	 */
+	public IContentAssistProcessor getCompletionProcessor() {
+		if (getParserElement() == null || getParser() == null) {
+			return null;
+		}
+		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+	}
+
+	/**
+	 * @generated
+	 */
+	public ParserOptions getParserOptions() {
+		return ParserOptions.NONE;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IParser getParser() {
+		if (parser == null) {
+			parser = BtgraphicalParserProvider.getParser(BtgraphicalElementTypes.Node_2002, getParserElement(), BtgraphicalVisualIDRegistry.getType(btgraphical.diagram.edit.parts.WrappingLabel2EditPart.VISUAL_ID));
+		}
+		return parser;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected DirectEditManager getManager() {
+		if (manager == null) {
+			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this), BtgraphicalEditPartFactory.getTextCellEditorLocator(this)));
+		}
+		return manager;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setManager(DirectEditManager manager) {
+		this.manager = manager;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEdit() {
+		getManager().show();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEdit(Point eventLocation) {
+		if (getManager().getClass() == TextDirectEditManager.class) {
+			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	private void performDirectEdit(char initialCharacter) {
+		if (getManager() instanceof TextDirectEditManager) {
+			((TextDirectEditManager) getManager()).show(initialCharacter);
+		} else {
+			performDirectEdit();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEditRequest(Request request) {
+		final Request theRequest = request;
+		try {
+			getEditingDomain().runExclusive(new Runnable() {
+
+				public void run() {
+					if (isActive() && isEditable()) {
+						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+							performDirectEdit(initialChar.charValue());
+						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
+							performDirectEdit(editRequest.getLocation());
+						} else {
+							performDirectEdit();
+						}
+					}
+				}
+			});
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshVisuals() {
+		super.refreshVisuals();
+		refreshLabel();
+		refreshFont();
+		refreshFontColor();
+		refreshUnderline();
+		refreshStrikeThrough();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshLabel() {
+		setLabelTextHelper(getFigure(), getLabelText());
+		setLabelIconHelper(getFigure(), getLabelIcon());
+		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+		if (pdEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) pdEditPolicy).refreshFeedback();
+		}
+		Object sfEditPolicy = getEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE);
+		if (sfEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) sfEditPolicy).refreshFeedback();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshUnderline() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null && getFigure() instanceof WrappingLabel) {
+			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshStrikeThrough() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null && getFigure() instanceof WrappingLabel) {
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshFont() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null) {
+			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD : SWT.NORMAL) | (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			setFont(fontData);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setFontColor(Color color) {
+		getFigure().setForegroundColor(color);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void addSemanticListeners() {
+		if (getParser() instanceof ISemanticParser) {
+			EObject element = resolveSemanticElement();
+			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			for (int i = 0; i < parserElements.size(); i++) {
+				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+			}
+		} else {
+			super.addSemanticListeners();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void removeSemanticListeners() {
+		if (parserElements != null) {
+			for (int i = 0; i < parserElements.size(); i++) {
+				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
+			}
+		} else {
+			super.removeSemanticListeners();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected AccessibleEditPart getAccessibleEditPart() {
+		if (accessibleEP == null) {
+			accessibleEP = new AccessibleGraphicalEditPart() {
+
+				public void getName(AccessibleEvent e) {
+					e.result = getLabelTextHelper(getFigure());
+				}
+			};
+		}
+		return accessibleEP;
+	}
+
+	/**
+	 * @generated
+	 */
+	private View getFontStyleOwnerView() {
+		return getPrimaryView();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void addNotationalListeners() {
+		super.addNotationalListeners();
+		addListenerFilter("PrimaryView", this, getPrimaryView()); //$NON-NLS-1$
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void removeNotationalListeners() {
+		super.removeNotationalListeners();
+		removeListenerFilter("PrimaryView"); //$NON-NLS-1$
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void handleNotificationEvent(Notification event) {
+		Object feature = event.getFeature();
+		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
+			Integer c = (Integer) event.getNewValue();
+			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+			refreshUnderline();
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+			refreshStrikeThrough();
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature) || NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature) || NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature) || NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+			refreshFont();
+		} else {
+			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+				refreshLabel();
+			}
+			if (getParser() instanceof ISemanticParser) {
+				ISemanticParser modelParser = (ISemanticParser) getParser();
+				if (modelParser.areSemanticElementsAffected(null, event)) {
+					removeSemanticListeners();
+					if (resolveSemanticElement() != null) {
+						addSemanticListeners();
+					}
+					refreshLabel();
+				}
+			}
+		}
+		super.handleNotificationEvent(event);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected IFigure createFigure() {
+		// Parent should assign one using setLabel() method
+		return null;
+	}
+
+}

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/WrappingLabel3EditPart.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/WrappingLabel3EditPart.java	Tue Apr 10 02:12:10 2012	(r24719)
@@ -0,0 +1,527 @@
+/*
+ * 
+ */
+package btgraphical.diagram.edit.parts;
+
+import java.util.Collections;
+import java.util.List;
+
+import org.eclipse.draw2d.IFigure;
+import org.eclipse.draw2d.Label;
+import org.eclipse.draw2d.geometry.Point;
+import org.eclipse.emf.common.notify.Notification;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.transaction.RunnableWithResult;
+import org.eclipse.gef.AccessibleEditPart;
+import org.eclipse.gef.EditPolicy;
+import org.eclipse.gef.Request;
+import org.eclipse.gef.requests.DirectEditRequest;
+import org.eclipse.gef.tools.DirectEditManager;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;
+import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;
+import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;
+import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
+import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
+import org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager;
+import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
+import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
+import org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser;
+import org.eclipse.gmf.runtime.notation.FontStyle;
+import org.eclipse.gmf.runtime.notation.NotationPackage;
+import org.eclipse.gmf.runtime.notation.View;
+import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
+import org.eclipse.jface.viewers.ICellEditorValidator;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.accessibility.AccessibleEvent;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.FontData;
+import org.eclipse.swt.graphics.Image;
+
+import btgraphical.diagram.edit.policies.BtgraphicalTextSelectionEditPolicy;
+import btgraphical.diagram.part.BtgraphicalVisualIDRegistry;
+import btgraphical.diagram.providers.BtgraphicalElementTypes;
+import btgraphical.diagram.providers.BtgraphicalParserProvider;
+
+/**
+ * @generated
+ */
+public class WrappingLabel3EditPart extends CompartmentEditPart implements ITextAwareEditPart {
+
+	/**
+	 * @generated
+	 */
+	public static final int VISUAL_ID = 5008;
+
+	/**
+	 * @generated
+	 */
+	private DirectEditManager manager;
+
+	/**
+	 * @generated
+	 */
+	private IParser parser;
+
+	/**
+	 * @generated
+	 */
+	private List<?> parserElements;
+
+	/**
+	 * @generated
+	 */
+	private String defaultText;
+
+	/**
+	 * @generated
+	 */
+	public WrappingLabel3EditPart(View view) {
+		super(view);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void createDefaultEditPolicies() {
+		super.createDefaultEditPolicies();
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new BtgraphicalTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new StartEditPart.NodeLabelDragPolicy());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected String getLabelTextHelper(IFigure figure) {
+		if (figure instanceof WrappingLabel) {
+			return ((WrappingLabel) figure).getText();
+		} else {
+			return ((Label) figure).getText();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setLabelTextHelper(IFigure figure, String text) {
+		if (figure instanceof WrappingLabel) {
+			((WrappingLabel) figure).setText(text);
+		} else {
+			((Label) figure).setText(text);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Image getLabelIconHelper(IFigure figure) {
+		if (figure instanceof WrappingLabel) {
+			return ((WrappingLabel) figure).getIcon();
+		} else {
+			return ((Label) figure).getIcon();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setLabelIconHelper(IFigure figure, Image icon) {
+		if (figure instanceof WrappingLabel) {
+			((WrappingLabel) figure).setIcon(icon);
+		} else {
+			((Label) figure).setIcon(icon);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setLabel(WrappingLabel figure) {
+		unregisterVisuals();
+		setFigure(figure);
+		defaultText = getLabelTextHelper(figure);
+		registerVisuals();
+		refreshVisuals();
+	}
+
+	/**
+	 * @generated
+	 */
+	@SuppressWarnings("rawtypes")
+	protected List getModelChildren() {
+		return Collections.EMPTY_LIST;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IGraphicalEditPart getChildBySemanticHint(String semanticHint) {
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected EObject getParserElement() {
+		return resolveSemanticElement();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Image getLabelIcon() {
+		return null;
+	}
+
+	/**
+	 * @generated not
+	 */
+	protected String getLabelText() {
+		String text = null;
+		EObject parserElement = getParserElement();
+		if (parserElement != null && getParser() != null) {
+			text = getParser().getPrintString(new EObjectAdapter(parserElement), 2);
+		}
+		if (text == null || text.length() == 0) {
+			text = defaultText;
+		}
+		return text;
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setLabelText(String text) {
+		setLabelTextHelper(getFigure(), text);
+		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+		if (pdEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) pdEditPolicy).refreshFeedback();
+		}
+		Object sfEditPolicy = getEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE);
+		if (sfEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) sfEditPolicy).refreshFeedback();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	public String getEditText() {
+		if (getParserElement() == null || getParser() == null) {
+			return ""; //$NON-NLS-1$
+		}
+		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected boolean isEditable() {
+		return false;
+	}
+
+	/**
+	 * @generated
+	 */
+	public ICellEditorValidator getEditTextValidator() {
+		return new ICellEditorValidator() {
+
+			public String isValid(final Object value) {
+				if (value instanceof String) {
+					final EObject element = getParserElement();
+					final IParser parser = getParser();
+					try {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(new RunnableWithResult.Impl<IParserEditStatus>() {
+
+							public void run() {
+								setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
+							}
+						});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+					} catch (InterruptedException ie) {
+						ie.printStackTrace();
+					}
+				}
+
+				// shouldn't get here
+				return null;
+			}
+		};
+	}
+
+	/**
+	 * @generated
+	 */
+	public IContentAssistProcessor getCompletionProcessor() {
+		if (getParserElement() == null || getParser() == null) {
+			return null;
+		}
+		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+	}
+
+	/**
+	 * @generated
+	 */
+	public ParserOptions getParserOptions() {
+		return ParserOptions.NONE;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IParser getParser() {
+		if (parser == null) {
+			parser = BtgraphicalParserProvider.getParser(BtgraphicalElementTypes.Node_2002, getParserElement(), BtgraphicalVisualIDRegistry.getType(btgraphical.diagram.edit.parts.WrappingLabel3EditPart.VISUAL_ID));
+		}
+		return parser;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected DirectEditManager getManager() {
+		if (manager == null) {
+			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this), BtgraphicalEditPartFactory.getTextCellEditorLocator(this)));
+		}
+		return manager;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setManager(DirectEditManager manager) {
+		this.manager = manager;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEdit() {
+		getManager().show();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEdit(Point eventLocation) {
+		if (getManager().getClass() == TextDirectEditManager.class) {
+			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	private void performDirectEdit(char initialCharacter) {
+		if (getManager() instanceof TextDirectEditManager) {
+			((TextDirectEditManager) getManager()).show(initialCharacter);
+		} else {
+			performDirectEdit();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEditRequest(Request request) {
+		final Request theRequest = request;
+		try {
+			getEditingDomain().runExclusive(new Runnable() {
+
+				public void run() {
+					if (isActive() && isEditable()) {
+						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+							performDirectEdit(initialChar.charValue());
+						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
+							performDirectEdit(editRequest.getLocation());
+						} else {
+							performDirectEdit();
+						}
+					}
+				}
+			});
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshVisuals() {
+		super.refreshVisuals();
+		refreshLabel();
+		refreshFont();
+		refreshFontColor();
+		refreshUnderline();
+		refreshStrikeThrough();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshLabel() {
+		setLabelTextHelper(getFigure(), getLabelText());
+		setLabelIconHelper(getFigure(), getLabelIcon());
+		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+		if (pdEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) pdEditPolicy).refreshFeedback();
+		}
+		Object sfEditPolicy = getEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE);
+		if (sfEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) sfEditPolicy).refreshFeedback();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshUnderline() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null && getFigure() instanceof WrappingLabel) {
+			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshStrikeThrough() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null && getFigure() instanceof WrappingLabel) {
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshFont() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null) {
+			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD : SWT.NORMAL) | (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			setFont(fontData);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setFontColor(Color color) {
+		getFigure().setForegroundColor(color);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void addSemanticListeners() {
+		if (getParser() instanceof ISemanticParser) {
+			EObject element = resolveSemanticElement();
+			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			for (int i = 0; i < parserElements.size(); i++) {
+				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+			}
+		} else {
+			super.addSemanticListeners();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void removeSemanticListeners() {
+		if (parserElements != null) {
+			for (int i = 0; i < parserElements.size(); i++) {
+				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
+			}
+		} else {
+			super.removeSemanticListeners();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected AccessibleEditPart getAccessibleEditPart() {
+		if (accessibleEP == null) {
+			accessibleEP = new AccessibleGraphicalEditPart() {
+
+				public void getName(AccessibleEvent e) {
+					e.result = getLabelTextHelper(getFigure());
+				}
+			};
+		}
+		return accessibleEP;
+	}
+
+	/**
+	 * @generated
+	 */
+	private View getFontStyleOwnerView() {
+		return getPrimaryView();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void addNotationalListeners() {
+		super.addNotationalListeners();
+		addListenerFilter("PrimaryView", this, getPrimaryView()); //$NON-NLS-1$
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void removeNotationalListeners() {
+		super.removeNotationalListeners();
+		removeListenerFilter("PrimaryView"); //$NON-NLS-1$
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void handleNotificationEvent(Notification event) {
+		Object feature = event.getFeature();
+		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
+			Integer c = (Integer) event.getNewValue();
+			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+			refreshUnderline();
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+			refreshStrikeThrough();
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature) || NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature) || NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature) || NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+			refreshFont();
+		} else {
+			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+				refreshLabel();
+			}
+			if (getParser() instanceof ISemanticParser) {
+				ISemanticParser modelParser = (ISemanticParser) getParser();
+				if (modelParser.areSemanticElementsAffected(null, event)) {
+					removeSemanticListeners();
+					if (resolveSemanticElement() != null) {
+						addSemanticListeners();
+					}
+					refreshLabel();
+				}
+			}
+		}
+		super.handleNotificationEvent(event);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected IFigure createFigure() {
+		// Parent should assign one using setLabel() method
+		return null;
+	}
+
+}

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/WrappingLabelEditPart.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/edit/parts/WrappingLabelEditPart.java	Tue Apr 10 02:12:10 2012	(r24719)
@@ -0,0 +1,527 @@
+/*
+ * 
+ */
+package btgraphical.diagram.edit.parts;
+
+import java.util.Collections;
+import java.util.List;
+
+import org.eclipse.draw2d.IFigure;
+import org.eclipse.draw2d.Label;
+import org.eclipse.draw2d.geometry.Point;
+import org.eclipse.emf.common.notify.Notification;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.transaction.RunnableWithResult;
+import org.eclipse.gef.AccessibleEditPart;
+import org.eclipse.gef.EditPolicy;
+import org.eclipse.gef.Request;
+import org.eclipse.gef.requests.DirectEditRequest;
+import org.eclipse.gef.tools.DirectEditManager;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;
+import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;
+import org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;
+import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;
+import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry;
+import org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants;
+import org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager;
+import org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;
+import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;
+import org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser;
+import org.eclipse.gmf.runtime.notation.FontStyle;
+import org.eclipse.gmf.runtime.notation.NotationPackage;
+import org.eclipse.gmf.runtime.notation.View;
+import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
+import org.eclipse.jface.viewers.ICellEditorValidator;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.accessibility.AccessibleEvent;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.FontData;
+import org.eclipse.swt.graphics.Image;
+
+import btgraphical.diagram.edit.policies.BtgraphicalTextSelectionEditPolicy;
+import btgraphical.diagram.part.BtgraphicalVisualIDRegistry;
+import btgraphical.diagram.providers.BtgraphicalElementTypes;
+import btgraphical.diagram.providers.BtgraphicalParserProvider;
+
+/**
+ * @generated
+ */
+public class WrappingLabelEditPart extends CompartmentEditPart implements ITextAwareEditPart {
+
+	/**
+	 * @generated
+	 */
+	public static final int VISUAL_ID = 5006;
+
+	/**
+	 * @generated
+	 */
+	private DirectEditManager manager;
+
+	/**
+	 * @generated
+	 */
+	private IParser parser;
+
+	/**
+	 * @generated
+	 */
+	private List<?> parserElements;
+
+	/**
+	 * @generated
+	 */
+	private String defaultText;
+
+	/**
+	 * @generated
+	 */
+	public WrappingLabelEditPart(View view) {
+		super(view);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void createDefaultEditPolicies() {
+		super.createDefaultEditPolicies();
+		installEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE, new BtgraphicalTextSelectionEditPolicy());
+		installEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());
+		installEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new StartEditPart.NodeLabelDragPolicy());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected String getLabelTextHelper(IFigure figure) {
+		if (figure instanceof WrappingLabel) {
+			return ((WrappingLabel) figure).getText();
+		} else {
+			return ((Label) figure).getText();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setLabelTextHelper(IFigure figure, String text) {
+		if (figure instanceof WrappingLabel) {
+			((WrappingLabel) figure).setText(text);
+		} else {
+			((Label) figure).setText(text);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Image getLabelIconHelper(IFigure figure) {
+		if (figure instanceof WrappingLabel) {
+			return ((WrappingLabel) figure).getIcon();
+		} else {
+			return ((Label) figure).getIcon();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setLabelIconHelper(IFigure figure, Image icon) {
+		if (figure instanceof WrappingLabel) {
+			((WrappingLabel) figure).setIcon(icon);
+		} else {
+			((Label) figure).setIcon(icon);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setLabel(WrappingLabel figure) {
+		unregisterVisuals();
+		setFigure(figure);
+		defaultText = getLabelTextHelper(figure);
+		registerVisuals();
+		refreshVisuals();
+	}
+
+	/**
+	 * @generated
+	 */
+	@SuppressWarnings("rawtypes")
+	protected List getModelChildren() {
+		return Collections.EMPTY_LIST;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IGraphicalEditPart getChildBySemanticHint(String semanticHint) {
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected EObject getParserElement() {
+		return resolveSemanticElement();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected Image getLabelIcon() {
+		return null;
+	}
+
+	/**
+	 * @generated not
+	 */
+	protected String getLabelText() {
+		String text = null;
+		EObject parserElement = getParserElement();
+		if (parserElement != null && getParser() != null) {
+			text = getParser().getPrintString(new EObjectAdapter(parserElement), 0);
+		}
+		if (text == null || text.length() == 0) {
+			text = defaultText;
+		}
+		return text;
+	}
+
+	/**
+	 * @generated
+	 */
+	public void setLabelText(String text) {
+		setLabelTextHelper(getFigure(), text);
+		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+		if (pdEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) pdEditPolicy).refreshFeedback();
+		}
+		Object sfEditPolicy = getEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE);
+		if (sfEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) sfEditPolicy).refreshFeedback();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	public String getEditText() {
+		if (getParserElement() == null || getParser() == null) {
+			return ""; //$NON-NLS-1$
+		}
+		return getParser().getEditString(new EObjectAdapter(getParserElement()), getParserOptions().intValue());
+	}
+
+	/**
+	 * @generated
+	 */
+	protected boolean isEditable() {
+		return false;
+	}
+
+	/**
+	 * @generated
+	 */
+	public ICellEditorValidator getEditTextValidator() {
+		return new ICellEditorValidator() {
+
+			public String isValid(final Object value) {
+				if (value instanceof String) {
+					final EObject element = getParserElement();
+					final IParser parser = getParser();
+					try {
+						IParserEditStatus valid = (IParserEditStatus) getEditingDomain().runExclusive(new RunnableWithResult.Impl<IParserEditStatus>() {
+
+							public void run() {
+								setResult(parser.isValidEditString(new EObjectAdapter(element), (String) value));
+							}
+						});
+						return valid.getCode() == ParserEditStatus.EDITABLE ? null : valid.getMessage();
+					} catch (InterruptedException ie) {
+						ie.printStackTrace();
+					}
+				}
+
+				// shouldn't get here
+				return null;
+			}
+		};
+	}
+
+	/**
+	 * @generated
+	 */
+	public IContentAssistProcessor getCompletionProcessor() {
+		if (getParserElement() == null || getParser() == null) {
+			return null;
+		}
+		return getParser().getCompletionProcessor(new EObjectAdapter(getParserElement()));
+	}
+
+	/**
+	 * @generated
+	 */
+	public ParserOptions getParserOptions() {
+		return ParserOptions.NONE;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IParser getParser() {
+		if (parser == null) {
+			parser = BtgraphicalParserProvider.getParser(BtgraphicalElementTypes.Node_2002, getParserElement(), BtgraphicalVisualIDRegistry.getType(btgraphical.diagram.edit.parts.WrappingLabelEditPart.VISUAL_ID));
+		}
+		return parser;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected DirectEditManager getManager() {
+		if (manager == null) {
+			setManager(new TextDirectEditManager(this, TextDirectEditManager.getTextCellEditorClass(this), BtgraphicalEditPartFactory.getTextCellEditorLocator(this)));
+		}
+		return manager;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setManager(DirectEditManager manager) {
+		this.manager = manager;
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEdit() {
+		getManager().show();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEdit(Point eventLocation) {
+		if (getManager().getClass() == TextDirectEditManager.class) {
+			((TextDirectEditManager) getManager()).show(eventLocation.getSWTPoint());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	private void performDirectEdit(char initialCharacter) {
+		if (getManager() instanceof TextDirectEditManager) {
+			((TextDirectEditManager) getManager()).show(initialCharacter);
+		} else {
+			performDirectEdit();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void performDirectEditRequest(Request request) {
+		final Request theRequest = request;
+		try {
+			getEditingDomain().runExclusive(new Runnable() {
+
+				public void run() {
+					if (isActive() && isEditable()) {
+						if (theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {
+							Character initialChar = (Character) theRequest.getExtendedData().get(RequestConstants.REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);
+							performDirectEdit(initialChar.charValue());
+						} else if ((theRequest instanceof DirectEditRequest) && (getEditText().equals(getLabelText()))) {
+							DirectEditRequest editRequest = (DirectEditRequest) theRequest;
+							performDirectEdit(editRequest.getLocation());
+						} else {
+							performDirectEdit();
+						}
+					}
+				}
+			});
+		} catch (InterruptedException e) {
+			e.printStackTrace();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshVisuals() {
+		super.refreshVisuals();
+		refreshLabel();
+		refreshFont();
+		refreshFontColor();
+		refreshUnderline();
+		refreshStrikeThrough();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshLabel() {
+		setLabelTextHelper(getFigure(), getLabelText());
+		setLabelIconHelper(getFigure(), getLabelIcon());
+		Object pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);
+		if (pdEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) pdEditPolicy).refreshFeedback();
+		}
+		Object sfEditPolicy = getEditPolicy(EditPolicy.SELECTION_FEEDBACK_ROLE);
+		if (sfEditPolicy instanceof BtgraphicalTextSelectionEditPolicy) {
+			((BtgraphicalTextSelectionEditPolicy) sfEditPolicy).refreshFeedback();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshUnderline() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null && getFigure() instanceof WrappingLabel) {
+			((WrappingLabel) getFigure()).setTextUnderline(style.isUnderline());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshStrikeThrough() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null && getFigure() instanceof WrappingLabel) {
+			((WrappingLabel) getFigure()).setTextStrikeThrough(style.isStrikeThrough());
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void refreshFont() {
+		FontStyle style = (FontStyle) getFontStyleOwnerView().getStyle(NotationPackage.eINSTANCE.getFontStyle());
+		if (style != null) {
+			FontData fontData = new FontData(style.getFontName(), style.getFontHeight(), (style.isBold() ? SWT.BOLD : SWT.NORMAL) | (style.isItalic() ? SWT.ITALIC : SWT.NORMAL));
+			setFont(fontData);
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void setFontColor(Color color) {
+		getFigure().setForegroundColor(color);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void addSemanticListeners() {
+		if (getParser() instanceof ISemanticParser) {
+			EObject element = resolveSemanticElement();
+			parserElements = ((ISemanticParser) getParser()).getSemanticElementsBeingParsed(element);
+			for (int i = 0; i < parserElements.size(); i++) {
+				addListenerFilter("SemanticModel" + i, this, (EObject) parserElements.get(i)); //$NON-NLS-1$
+			}
+		} else {
+			super.addSemanticListeners();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void removeSemanticListeners() {
+		if (parserElements != null) {
+			for (int i = 0; i < parserElements.size(); i++) {
+				removeListenerFilter("SemanticModel" + i); //$NON-NLS-1$
+			}
+		} else {
+			super.removeSemanticListeners();
+		}
+	}
+
+	/**
+	 * @generated
+	 */
+	protected AccessibleEditPart getAccessibleEditPart() {
+		if (accessibleEP == null) {
+			accessibleEP = new AccessibleGraphicalEditPart() {
+
+				public void getName(AccessibleEvent e) {
+					e.result = getLabelTextHelper(getFigure());
+				}
+			};
+		}
+		return accessibleEP;
+	}
+
+	/**
+	 * @generated
+	 */
+	private View getFontStyleOwnerView() {
+		return getPrimaryView();
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void addNotationalListeners() {
+		super.addNotationalListeners();
+		addListenerFilter("PrimaryView", this, getPrimaryView()); //$NON-NLS-1$
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void removeNotationalListeners() {
+		super.removeNotationalListeners();
+		removeListenerFilter("PrimaryView"); //$NON-NLS-1$
+	}
+
+	/**
+	 * @generated
+	 */
+	protected void handleNotificationEvent(Notification event) {
+		Object feature = event.getFeature();
+		if (NotationPackage.eINSTANCE.getFontStyle_FontColor().equals(feature)) {
+			Integer c = (Integer) event.getNewValue();
+			setFontColor(DiagramColorRegistry.getInstance().getColor(c));
+		} else if (NotationPackage.eINSTANCE.getFontStyle_Underline().equals(feature)) {
+			refreshUnderline();
+		} else if (NotationPackage.eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {
+			refreshStrikeThrough();
+		} else if (NotationPackage.eINSTANCE.getFontStyle_FontHeight().equals(feature) || NotationPackage.eINSTANCE.getFontStyle_FontName().equals(feature) || NotationPackage.eINSTANCE.getFontStyle_Bold().equals(feature) || NotationPackage.eINSTANCE.getFontStyle_Italic().equals(feature)) {
+			refreshFont();
+		} else {
+			if (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {
+				refreshLabel();
+			}
+			if (getParser() instanceof ISemanticParser) {
+				ISemanticParser modelParser = (ISemanticParser) getParser();
+				if (modelParser.areSemanticElementsAffected(null, event)) {
+					removeSemanticListeners();
+					if (resolveSemanticElement() != null) {
+						addSemanticListeners();
+					}
+					refreshLabel();
+				}
+			}
+		}
+		super.handleNotificationEvent(event);
+	}
+
+	/**
+	 * @generated
+	 */
+	protected IFigure createFigure() {
+		// Parent should assign one using setLabel() method
+		return null;
+	}
+
+}

Added: experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/parsers/NodeLabelExpressionLabelParser.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/btgraphical/diagram/parsers/NodeLabelExpressionLabelParser.java	Tue Apr 10 02:12:10 2012	(r24719)
@@ -0,0 +1,115 @@
+/*
+ * 
+ */
+package btgraphical.diagram.parsers;
+
+import java.util.Collections;
+
+import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.runtime.IAdaptable;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.transaction.TransactionalEditingDomain;
+import org.eclipse.emf.transaction.util.TransactionUtil;
+import org.eclipse.emf.workspace.util.WorkspaceSynchronizer;
+import org.eclipse.gmf.runtime.common.core.command.CommandResult;
+import org.eclipse.gmf.runtime.common.core.command.ICommand;
+import org.eclipse.gmf.runtime.common.core.command.UnexecutableCommand;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;
+import org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus;
+import org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus;
+import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;
+import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
+
+import btgraphical.BtgraphicalPackage;
+import btgraphical.diagram.expressions.BtgraphicalOCLFactory;
+
+/**
+ * @generated
+ */
+public class NodeLabelExpressionLabelParser implements IParser {
+	/**
+	 * @generated
+	 */
+	public NodeLabelExpressionLabelParser() {
+	}
+
+	/**
+	 * @generated
+	 */
+	public String getEditString(IAdaptable element, int flags) {
+		return getPrintString(element, flags);
+	}
+
+	/**
+	 * @generated
+	 */
+	public IParserEditStatus isValidEditString(IAdaptable element, String editString) {
+		return ParserEditStatus.EDITABLE_STATUS;
+	}
+
+	/**
+	 * @generated
+	 */
+	public ICommand getParseCommand(IAdaptable element, final String newString, int flags) {
+		final EObject target = (EObject) element.getAdapter(EObject.class);
+		if (!validateValues(target, newString)) {
+			return UnexecutableCommand.INSTANCE;
+		}
+		TransactionalEditingDomain editingDomain = TransactionUtil.getEditingDomain(target);
+		if (editingDomain == null) {
+			return UnexecutableCommand.INSTANCE;
+		}
+		IFile affectedFile = WorkspaceSynchronizer.getFile(target.eResource());
+		return new AbstractTransactionalCommand(editingDomain, "Set Values", affectedFile == null ? null : Collections.singletonList(affectedFile)) { //$NON-NLS-1$ 
+			protected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {
+				return new CommandResult(updateValues(target, newString));
+			}
+		};
+	}
+
+	/**
+	 * @generated not
+	 */
+	public String getPrintString(IAdaptable element, int flags) {
+		EObject target = (EObject) element.getAdapter(EObject.class);
+		Object result = BtgraphicalOCLFactory.getExpression(flags, BtgraphicalPackage.eINSTANCE.getNode(), null).evaluate(target);
+		return String.valueOf(result);
+	}
+
+	/**
+	 * @generated
+	 */
+	public boolean isAffectingEvent(Object event, int flags) {
+		// XXX Any event is recognized as important, unless there's a way to extract this information from expression itself.
+		// TODO analyze expressions (e.g. using OCL parser) to find out structural features in use  
+		return true;
+	}
+
+	/**
+	 * @generated
+	 */
+	public IContentAssistProcessor getCompletionProcessor(IAdaptable element) {
+		return null;
+	}
+
+	/**
+	 * @generated
+	 */
+	private boolean validateValues(EObject target, String newString) {
+		// TODO implement as needed
+		return true;
+	}
+
+	/**
+	 * @generated
+	 */
+	private IStatus updateValues(EObject target, String newString) throws ExecutionException {
+		// TODO implement this method
+		// DO NOT FORGET to remove @generated tag or mark method @generated NOT
+		throw new ExecutionException("Please implement parsing and value modification");
+	}
+
+}

Modified: experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java	Tue Apr 10 02:09:47 2012	(r24718)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java	Tue Apr 10 02:12:10 2012	(r24719)
@@ -33,22 +33,31 @@
 		graphics.setLineWidth(1);
 		graphics.drawLine(r.x() + widthLeftCompartment, r.y(), r.x() + widthLeftCompartment, r.y() + r.height());
 
-		WrappingLabel requirement = (WrappingLabel) getChildren().get(2);
+		WrappingLabel requirement = (WrappingLabel) getChildren().get(1);
+		if (requirement.getText().equals("null")) {
+			requirement.setText("");
+		}
 		requirement.setAlignment(PositionConstants.CENTER);
 		requirement.setMaximumSize(new Dimension(widthLeftCompartment - 2 * labelDistanceToBorder, r.height()));
 		requirement.setLocation(new Point(r.x() + 4, r.y() + r.height() / 7));
 		requirement.paint(graphics);
 
-		WrappingLabel component = (WrappingLabel) getChildren().get(0);
+		WrappingLabel component = (WrappingLabel) getChildren().get(2);
+		if (component.getText().equals("null")) {
+			component.setText("");
+		}
 		component.setAlignment(PositionConstants.CENTER);
 		component.setMaximumSize(new Dimension(widthRightCompartment - 2 * labelDistanceToBorder, r.height()));
 		component.setLocation(new Point(r.x() + widthLeftCompartment + 4, r.y() + r.height() / 7));
 		component.paint(graphics);
 
-		WrappingLabel state = (WrappingLabel) getChildren().get(1);
+		WrappingLabel state = (WrappingLabel) getChildren().get(3);
 		if (!state.getText().startsWith("[")) {
 			state.setText("[ " + state.getText() + " ]");
 		}
+		if (state.getText().equals("[ null ]")) {
+			state.setText("[  ]");
+		}
 		state.setAlignment(PositionConstants.CENTER);
 		state.setMaximumSize(new Dimension(widthRightCompartment - 2 * labelDistanceToBorder, r.height()));
 		state.setLocation(new Point(r.x() + widthLeftCompartment + 4, (int) (r.y() + r.height() / 1.8)));

From M.A.Akhter at student.tudelft.nl  Tue Apr 10 16:22:03 2012
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 10 Apr 2012 14:22:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24720 -
	spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index
Message-ID: <20120410142203.27DCD7F8058@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Apr 10 14:22:02 2012
New Revision: 24720
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24720&sc=1

Log:
syncing repository

Modified:
   spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java

Modified: spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Tue Apr 10 02:12:10 2012	(r24719)
+++ spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Tue Apr 10 14:22:02 2012	(r24720)
@@ -208,7 +208,7 @@
 				
 				SpxSemanticIndexFacade idxFacade = getSpxIndexFacade(idx, projectPath);
 				if(idxFacade!= null){
-					System.out.println("Closing Index for "+projectPath );
+					System.out.println("Closing Index for "+ projectPath );
 					idxFacade.close(false); // Also committing if the persistence manager is still open
 				}else
 					System.out.println("Index already closed for "+projectPath );

Modified: spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Tue Apr 10 02:12:10 2012	(r24719)
+++ spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Tue Apr 10 14:22:02 2012	(r24720)
@@ -313,9 +313,11 @@
 			
 			if(nsToRemove instanceof PackageNamespace){
 				NamespaceUri internalNamespaceUri = PackageNamespace.packageInternalNamespace(nsToRemove.namespaceUri(), _facade);
-				this.namespaces.remove(internalNamespaceUri.id());	
+				this.namespaces.remove(internalNamespaceUri.id());
+				this.ensureActiveNamespaceUnloaded(internalNamespaceUri.id());
 			}
 			this.namespaces.remove(nsToRemove.namespaceUri().id());
+			this.ensureActiveNamespaceUnloaded(nsToRemove.namespaceUri().id());
 		}
 		return nsToRemove;
 	}
@@ -377,9 +379,4 @@
 	void setLastCodeGeneratedOn(long timestamp){ 
 		timestamps.put(LAST_CODEGEN_ON_KEY, timestamp);
 	}
-	
-//	
-//	String prefixWithUniqueNumber(stri){
-//		if(timestamps.get(LAST_CODEGEN_ON_KEY);)
-//	}
 }

Modified: spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Apr 10 02:12:10 2012	(r24719)
+++ spoofax/branches/adil-thesis-demo/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Apr 10 14:22:02 2012	(r24720)
@@ -169,9 +169,6 @@
 		if ( term != null){
 			retTerm = forceImploderAttachment(term, resUri);
 		}
-		
-		logMessage("SpxSemanticIndexFacade.getCompilationUnit :  Returning Following APPL for uri " + resUri +  " : "+ retTerm);
-		
 		return retTerm;
 	}
 	
@@ -251,6 +248,8 @@
 			IStrategoAppl ast, 
 			IStrategoAppl analyzedAst) throws IOException {
 
+		System.out.println( "Creating a new Module Declaration .  " + moduleQName);
+		
 		SpxModuleLookupTable table = this.getPersistenceManager().spxModuleTable();
 
 		IStrategoList moduleId = ModuleDeclaration.getModuleId( this, moduleQName);
@@ -300,6 +299,8 @@
 	 */
 	public void indexPackageDeclaration(IStrategoAppl packageIdAppl, IStrategoString spxCompilationUnitPath){
 		
+		 
+		
 		SpxPackageLookupTable table = this.getPersistenceManager().spxPackageTable();
 		SpxCompilationUnitTable spxTable = this.getPersistenceManager().spxCompilcationUnitTable();
 		
@@ -317,11 +318,14 @@
 		
 		
 		if(table.containsPackage(packageId)){
+			System.out.println( "Updating Package Declaration .  " + packageId);
 			// Package is already there in the index. Hence,just adding the Uri where 
 			// this package declaration is found.
 			table.addPackageDeclarationLocation(packageId,absFilePath);
  			
 		}else{	
+			System.out.println( "adding Package Declaration .  " + packageId);
+			
 			// Defining PackageDeclaration in the Index
 			PackageDeclaration pDecl = new PackageDeclaration(absFilePath,packageId);
 			table.definePackageDeclaration(pDecl);
@@ -630,7 +634,10 @@
 	private void defineNamespace(INamespaceFactory nsFactory) {
 		SpxPrimarySymbolTable symTable =  this.getPersistenceManager().spxSymbolTable();
 		
-		for( INamespace ns : nsFactory.newNamespaces(this) ) {  symTable.defineNamespace(ns) ; }
+		for( INamespace ns : nsFactory.newNamespaces(this) ) {  
+			System.out.println( "Trying to ADD following Namesapce " + ns.namespaceUri().id());
+			symTable.defineNamespace(ns) ; 
+		}
 	}
 	
 

From M.A.Akhter at student.tudelft.nl  Tue Apr 10 16:26:26 2012
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 10 Apr 2012 14:26:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24721 - in
	spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax:
	editor editor/java/org/strategoxt/imp/editors/spoofax
	editor/java/org/strategoxt/imp/e...
Message-ID: <20120410142626.856C92B801A@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Apr 10 14:26:25 2012
New Revision: 24721
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24721&sc=1

Log:
synchronizing repositories(2). 
changes : 
	- optional qualification. qualified access path e.g., p.m.symbol/p.symbol refers to the symbol located at p package or p.m module unambiguously for language composition.  
	- code generation/sdf-parameterization . generates sdf mix by default. 
	- keyword abstraction.

Modified:
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Completions.esv
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxlangWorkspace.java
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/command/CloseSpxIndexCommand.java
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/check-import.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/check-module.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/store-imports.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-locals.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str
   spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/utils/path.str

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Tue Apr 10 14:26:25 2012	(r24721)
@@ -46,4 +46,4 @@
   builder : "TemplateLang: show pretty printer"       = build-templatelang-str (openeditor) (realtime) (source)
   builder : "TemplateLang: inline placeholders"       = build-expand-template (openeditor) (realtime)
 
-  on save		: build-incrementally-service
+  on save		: generate-artefacts-on-save

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Completions.esv
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Completions.esv	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Completions.esv	Tue Apr 10 14:26:25 2012	(r24721)
@@ -6,6 +6,7 @@
      // Semantic (identifier) completion:
      completion proposer:      editor-complete
      completion trigger: "imports "
+     completion trigger: "package "
      completion trigger: "\."
      
 
@@ -15,7 +16,6 @@
 
 completions 
 
-	completion template: "package " <p> " \n\t module " <m>  "\n" (blank)
 	completion template: "module " <m>  "\n" (blank) 
 	
 completions

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxlangWorkspace.java
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxlangWorkspace.java	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/SpoofaxlangWorkspace.java	Tue Apr 10 14:26:25 2012	(r24721)
@@ -38,10 +38,10 @@
 		command.execute();
 	
 		if( command.getResult()){
-			System.out.println("[org.spoofaxlang] Index is closed successfully for : "+ workspace.getRoot().getName());
+			System.out.println("[org.spoofaxlang] Index is closed successfully for the current workspace");
 		}
 		else
-			System.out.println("[org.spoofaxlang] Index close failed for: "+ workspace.getRoot().getName());
+			System.out.println("[org.spoofaxlang] Index close failed for the current workspace");
 		
 	}
 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/command/CloseSpxIndexCommand.java
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/command/CloseSpxIndexCommand.java	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/editor/java/org/strategoxt/imp/editors/spoofax/command/CloseSpxIndexCommand.java	Tue Apr 10 14:26:25 2012	(r24721)
@@ -99,7 +99,8 @@
 	public Boolean getResult() {
 		return isSuccessful;
 	}
-	
+
+	@SuppressWarnings("unchecked")
 	public void setContext(Set<IProject> projects) {
 		this.projects  = projects;
 	}

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/syntax/SPXCommon.sdf	Tue Apr 10 14:26:25 2012	(r24721)
@@ -23,6 +23,7 @@
 
     -> EOF
 
+  
   lexical restrictions
 
     %% Ensure greedy matching for lexicals
@@ -41,6 +42,7 @@
 
   context-free restrictions
 
+    
     %% Ensure greedy matching for comments
 
     LAYOUT? -/- [\ \t\n\r]
@@ -55,8 +57,9 @@
 		"imports"
 		"language" 
 		"definition"
-		
-		-/- [A-Za-z0-9\_]
+		"keywords"
+		"follow-restriction"
+		"words" -/- [A-Za-z0-9\_]
 
 
 	lexical syntax
@@ -107,7 +110,9 @@
  		"__internal"				-> Reserved
  		"template"          -> Reserved
  		"templates"         -> Reserved
- 	   
+ 	   "keywords"					-> Reserved
+ 	   "words" 					      -> Reserved
+ 	   "follow-restriction"  -> Reserved
  		Reserved 						-> ReservedName[[ESV]]
  		ReservedName[[ESV]]	-> ID {reject}
 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Tue Apr 10 14:26:25 2012	(r24721)
@@ -43,6 +43,7 @@
     Grammar[[SDF]] -> Section {cons("SDFSection")}
     Decl[[STR]]    -> Section {cons("STRSection")}
     Section[[ESV]] -> Section {cons("ESVSection")}
+    
     ImportSection  -> Section
     ConceptSection -> Section
 
@@ -65,7 +66,7 @@
     QID "[" Symbols[[SDF]] "]" -> QName  {cons("ParamName")}
     QID		  				           -> LegacyImportName {cons("Name")}
     {ID "." }+			 -> QName	 {cons("QName")}
-	  ID	 					   -> QName	 {cons("Name"),prefer}
+    ID	 					   -> QName	 {cons("Name"),prefer}
     ID  					   -> SPXModuleName	 {cons("SPXModuleName")}
 
 	context-free syntax %% Imports
@@ -83,8 +84,8 @@
 
 	context-free syntax
     LegacyImportName				 		-> ImportedModule{cons("ImportLegacyArtifact")}
-    QName "::" SPXModuleName 				-> ImportedModule{cons("ImportSpxModule"),prefer}
-    QName		   					   		-> ImportedModule{cons("ImportPackage")  , prefer}
+    QName "::" SPXModuleName 		-> ImportedModule{cons("ImportSpxModule"),prefer}
+    QName		   					   		  -> ImportedModule{cons("ImportPackage")  , prefer}
     QName "as" ID					   		-> ImportedModule{cons("ImportPackageWithAlias"),prefer}
 
 	context-free syntax
@@ -123,11 +124,22 @@
     "cons" "(" Constructor ")"  -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"cons\"), [fun(quoted(<1>))])))")}
     StrCon[[SDF]]               -> Constructor
 
-  %% for testing only. playing with code-contracts in spoofax lang.
   context-free syntax
-    
     "internal" "strategies" Def[[STR]]*     -> Decl[[STR]] {cons("InternalStrategies")}
     "internal" "rules"      Def[[STR]]*     -> Decl[[STR]]{cons("InternalRules")}
     
-		Var[[STR]] "as" ID -> Var[[STR]] {avoid, cons("VarWithType")}
+ 		Var[[STR]] ":" ID -> Var[[STR]] {avoid, cons("VarWithType")}
 
+    QName	"."	Id[[STR]]	   -> SVar[[STR]] {avoid , cons("QualifiedSVar")}
+		QName	"." Sort[[SDF]]  -> QualifiedSort{cons("QualifiedSort")}
+		QualifiedSort          -> Symbol[[SDF]]
+		
+	context-free restrictions
+		QualifiedSort -/- [a-zA-Z0-9\.\-]
+		
+	context-free syntax 
+		
+		"language keywords" KeywordSymbols Keywords  KeywordRestriction?   -> Section         {cons("KeywordSection")}
+		"symbols"  Symbol[[SDF]]+                                          -> KeywordSymbols  {cons("KeywordSymbols")}
+		"words"    ID+                                                     -> Keywords        {cons("Keywords")}
+		"follow-restriction"  Lookaheads[[SDF]]                            -> KeywordRestriction{cons("FollowRestriction")}       	
\ No newline at end of file

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/check-import.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/check-import.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/check-import.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -30,11 +30,8 @@
 	
 	imports-constraint-error:
 		ImportPackage(package-qname at QName(_)) -> (package-qname , $[Failed to resolve '[package-qname-string]'. Please check spx.config for configured SPX sources. ])
-		where
-			!package-qname;
-			require(is-declared-package)
-		where
-			package-qname-string := <convert-qname(|".")>package-qname
+		where	!package-qname;	require(is-declared-package)
+		where	package-qname-string := <convert-qname(|".")>package-qname
 	
 	
 	imports-constraint-error:

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/check-module.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/check-module.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/check-module.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -30,7 +30,7 @@
 		def at Module(attrb* , s at SPXModuleName(m) , section*) -> (s, $[Multiple declaration of module '[m]' ])
 		where
 			module-qname := <GetEnclosingModuleName>
-			; <get-enclosed-modules-of-package><GetEnclosingPackageName>
+			; activate-scope(m* := <get-enclosed-modules-of-package><GetEnclosingPackageName> |<GetEnclosingPackageName> )
 			; filter(?module-qname)
 			; is-not-empty-list 
 			; require(ensure-is-unique)  // if declaration is not unique, it means that module with this names is declared multiple times in the current package scope
@@ -41,9 +41,9 @@
 		m at Module(attrb* , modname , section*)  -> (merrors',[],[]) 
 		where 
 			<collect-all(
-				module-constraint-error, 
-				conc)
-			> m  => merrors'
+					module-constraint-error, 
+					conc
+				)> m  => merrors'
 
 		
 	// analyzes module errors and appened it with the existing problems  
@@ -86,7 +86,8 @@
 			+ ?SDFSection(_) 
 			+ ?ESVSection(_) 
 			+ ?STRSection(_) 
-			+ ?SDFSectionEH(_, _))
+			+ ?SDFSectionEH(_, _)
+			+ ?KeywordSection(_, _,_))
 			)
 		; dbg-analysis(! $[ErrorChecking | Ignoring Section: [<print-as-string>]]| "analyze-section" , <debug-level-INFO>) 
 		; !([], [], [])		

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -71,13 +71,11 @@
 		where
 			if should-analyze-this-package  then //FOR handling circular referneces   
 				{| GetEnclosingPackageName 
-				 : rules ( 
-		 			 	 GetEnclosingPackageName:= package-typed-qname
-		 			 )
-	 			 ; <analyze> package-typed-qname // analyzing current package's declaration
-				 ; with-spxverify ( // analyzing all the enclosed module definition
+				 :	<declare-current-package-scope>package-typed-qname
+		 		 ;	<analyze> package-typed-qname // analyzing current package's declaration
+				 ; 	with-spxverify ( // analyzing all the enclosed module definition
 		   				<list-loop(analyze-spx-module)><get-enclosed-modules>package-typed-qname
-					 )		
+					 	)		
 				 |}		
         ; with-spxverify( <add-to-analyzed-packages-queue>package-typed-qname )
 		  <+
@@ -94,8 +92,8 @@
 			if not(<is-a-analyzed-module>module-typed-qname) then
 				<get-module-definition-with-location> module-typed-qname => (module-decl,location);
 				{| GetEnclosingModuleName
-			   : rules( GetEnclosingModuleName := module-typed-qname)
-				 ; <analyze-module-definition>module-decl
+			   : 	<declare-current-module-scope>module-typed-qname
+				 ; 	<analyze-module-definition>module-decl
 			   |}
 				 ; with-spxverify(<add-to-analyzed-modules>(module-typed-qname,location))	   
 				<+ 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -9,58 +9,61 @@
   context/-
   include/SpoofaxLang
   utils/attributes
+  utils/path
   normalize/signatures 
+  
 
 rules
-	
-	verify-sort-is-declared =
+	verify-sdf-symbol-declaration-exists=
+		?sort(<id>);
+		<verify-symbol-exists>( <id>, SortDeclaration())
+	<+
+		dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<print-as-string>]] 
+               | "verify-sdf-symbol-declaration-exists" ,<debug-level-WARNING>)
+		; fail 
+  
+  verify-sdf-symbol-declaration-exists(|context)=
 		?sort(x);
 		activate-scope(
-			result := <resolve-all-symbol-definitions( id | (LookupLocalScope() , <ONLY_ONE>))>(x,  SortDeclaration())
-			| <GetEnclosingPackageName>
+			result := <resolve-all-symbol-definitions( id | (LookupLocalScope(), <ONLY_ONE>))>(x,  SortDeclaration())
+			| context
 		);	
 		<is-not-empty-list>result
-   
-      
+		
 rules
-	analyze-section: SDFSectionEH(_, ast) -> <analyze-sdf-errors>ast
+	
+	analyze-section:
+    KeywordSection(sort* ,_, Some(FollowRestriction(restriction))) -> (error*, [], [])
+    where	error*   := <collect-all(context-free-syntax-sort-error+context-free-syntax-warning, conc)> sort*
+  
+  analyze-section: SDFSectionEH(_, ast) -> <analyze-sdf-errors>ast
 
 	analyze-section:
 		SDFSection(ast) -> <analyze-sdf-errors>ast
-		where
-			dbg-analysis(! $[ErrorChecking | SDF Section : [<print-as-string>]] | "analyze-section", <debug-level-INFO>)
-
+		where dbg-analysis(! $[ErrorChecking | SDF Section : [<print-as-string>]] | "analyze-section", <debug-level-INFO>)
+	
   analyze-section:
     TemplateSection(ast) -> <analyze-sdf-errors>
-    where
-      dbg-analysis(!$[ErrorChecking | Template Section : [<print-as-string>]] | "analyze-section" , <debug-level-INFO>)
+    where dbg-analysis(!$[ErrorChecking | Template Section : [<print-as-string>]] | "analyze-section" , <debug-level-INFO>)
 
 	analyze-sdf-errors :
 		ast -> (error'*, warning'*, [])
-		where
-			  dbg-analysis(! $[ErrorChecking | SDF  : [<print-as-string>]] | "analyze-sdf-errors" , <debug-level-INFO>) ; 
-			// We only collect-om since we don't want inner warning dupes
-	    error*   := <flatten-list><collect-om( ?context-free-syntax       (<collect-om(context-free-syntax-error)>)
+		where	dbg-analysis(! $[ErrorChecking | SDF  : [<print-as-string>]] | "analyze-sdf-errors" , <debug-level-INFO>)  
+  	where	error*   := <flatten-list><collect-om( ?context-free-syntax       (<collect-om(context-free-syntax-error)>)
                                            + ?lexical-syntax            (<collect-om(lexical-syntax-error)>)
 	    																		 + ?context-free-start-symbols(<collect-om(context-free-start-symbols-error)>)
 	    																		 + ?kernel-start-symbols      (<collect-om(context-free-start-symbols-error)>)
 	    																		 + ?lexical-start-symbols     (<collect-om(context-free-start-symbols-error)>)		
-	                                         + ?TemplateSection           (<collect-om(context-free-templates-error)>), conc)
-	                              > ast;
-	    warning* := <collect-om( ?context-free-syntax (<collect-om(context-free-syntax-warning)>)
-                             + ?lexical-syntax      (<collect-om(lexical-syntax-warning)>)
-	    											 + ?TemplateSection     (<collect-om(context-free-templates-warning)>), conc)
-	    						> ast;
-	    if <file-exists> $[[<get-project-path>]/.disable-global-analysis] then
-	      serror* := []
-	    else
-	      serror* := <collect-om(context-free-syntax-sort-error, conc)> ast
-	    end;
-	    error'*   := <conc;flatten-list> (serror*, error*);
-	    warning'* := <flatten-list> warning*
-
-				
-	
+	                                         + ?TemplateSection           (<collect-om(context-free-templates-error)>), conc
+	                                         )> ast;
+			    warning* := <collect-om( ?context-free-syntax (<collect-om(context-free-syntax-warning)>)
+		                             + ?lexical-syntax      (<collect-om(lexical-syntax-warning)>)
+			    											 + ?TemplateSection     (<collect-om(context-free-templates-warning)>), conc
+			    											 )> ast;
+		      serror*   := <collect-all(context-free-syntax-sort-error, conc)> ast;
+		     	error'*   := <conc> (serror*, <flatten-list>error*);
+			    warning'* := <flatten-list> warning*
+			
 strategies
 	/* TODO : FIX */
 	//checks whether constructor rhs-sort is marked for having declared multiple times
@@ -86,17 +89,29 @@
 rules  //global checks
 
   context-free-syntax-warning:
-    sort(x) -> (x, $[No definition for [x]])
-    where require(
-    				verify-call-sites-already-registered(|Unqualified()) <+
-    				verify-sort-is-declared
-    			)
+    sort(x) -> (x, $[No definition for '[x]'])
+    where require(	verify-sdf-symbol-declaration-exists)
 
+	context-free-syntax-sort-error:
+    q at QualifiedSort(Unresolved(), x) -> (q, $[Unknown namesapce(package/module) is referred. No definition for '[x]'])
+    
+	context-free-syntax-sort-error:
+    q at QualifiedSort(p at Package(qname at QName(_)), x) -> (q, $[Missing import reference. Please add '[<convert-qname(|".")>qname]' as an import reference]) 
+    where	<get-all-usings><GetEnclosingPackageName>
+					;	filter ( ?p )
+					; require(is-not-empty-list)
+		
+	context-free-syntax-sort-error:
+    q at QualifiedSort(p at Package(qname at QName(_)), x) -> (x, $[No definition for Qualified Sort '[namespace].[x]'])
+    where namespace := <convert-qname(|".")>qname  
+		where	require( <verify-sdf-symbol-declaration-exists(|p)>sort(x) )    			
+
   context-free-syntax-sort-error:
     parameterized-sort(_, _) -> [] // not supported
 
   context-free-syntax-sort-error:
     'sorts(_) -> [] // ignored
+
 	
 /*	
 	context-free-syntax-warning:
@@ -180,20 +195,16 @@
    // Instruct users to use { X "," }*
 
   context-free-syntax-warning:
-    [sort(x), iter-star(seq(lit(sep), [sort(x)])) | _] ->
-    (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])
+    [sort(x), iter-star(seq(lit(sep), [sort(x)])) | _] -> (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])
 
   context-free-syntax-warning:
-    [iter-star(seq(sort(x), [lit(sep)])), sort(x) | _] ->
-    (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])
+    [iter-star(seq(sort(x), [lit(sep)])), sort(x) | _] ->  (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])
 
   context-free-syntax-warning:
-    [opt(sort(x)), iter-star(seq(lit(sep), [sort(x)])) | _] ->
-    (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])
+    [opt(sort(x)), iter-star(seq(lit(sep), [sort(x)])) | _] -> (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])
 
   context-free-syntax-warning:
-    [iter-star(seq(sort(x), [lit(sep)])), opt(sort(x)) | _] ->
-    (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])
+    [iter-star(seq(sort(x), [lit(sep)])), opt(sort(x)) | _] -> (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])
 
   context-free-syntax-warning:
     prod(lhs @ [sort(x), opt(seq(lit(sep), [sort(xs)]))], sort(xs), _) ->

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -45,12 +45,7 @@
 	//closes any underlying connection 
 	compile-unload = debug-time (index-close | "Saving Index" ) //closes and saves current state of symbol table.
 
-	// Pre-compilation before starting up actual compilation
-	// Before starting primary compilation,
-	// pre-compile normalize the parsed tree
-	// and creates scope-tree and namespace-reference table for
-	// performing further compilation.
-	pre-compile-compilation-unit = normalize-all  // normalize and builds scope-tree and  partial symbol table with the local information availble
+	
 
 rules 
 	// Creating a new compilation session. 
@@ -195,10 +190,10 @@
 		module-typed-qname at Module(untyped-qname) -> <id>
 		where not(<is-a-compiled-module>module-typed-qname) 
 		where	debug-compiler(!$[----Compiling module:: [<print-as-string>]])
-		where <get-module-definition-with-location>module-typed-qname => (module-decl,location) ;
-					{|	GetEnclosingModuleName
+		where {|	GetEnclosingModuleName
 					 :	<declare-current-package-scope> <get-enclosing-package-qname> module-typed-qname;
 							<declare-current-module-scope> module-typed-qname;
+							<get-module-definition-with-location>module-typed-qname => (module-decl,location) ;
 							<delcare-spx-scoped-symbols>module-decl
 					|}
 					; with-spxverify(

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -53,9 +53,7 @@
 	// only compile and generate codes for the packages that is needed.
 	build-spx-incrementally =
 		verify(?(ast, abs-path) |<id> , "?(ast, abs-path) at build-spx-incrementally" );   
-		compile-packages-of(
-			generate-spx-artifacts
-		) 
+		compile-packages-of(generate-spx-artifacts) 
 
 	generate-spx-artifacts = 
 		if not(HasErrors) then
@@ -63,16 +61,13 @@
 	 		;	debug-time( 
 			  	new-code-generate-session(
  						init-code-generation
-	 				  ;	debug-time(
-		  			  	<list-loop(generate-spx-package)>packages
-				  	  	| $[--Generating the artifacts for all the modified spx]
-			  	  	)
-					  ;	<filter(has-language-name-configured)>packages
+	 				  ; <list-loop(generate-spx-package)> packages
+				  	;	<filter(has-language-name-configured)>packages
 		    		; emit-build-script 
 					)
 					// refreshes autogenerated directory . Seems redundant . Build automatically refreshing following directory. 
 					// ; <refresh-workspace-file> $[[<ProjectPath>]/[<get-autogenerated-artifacts-dir>]]
-				| "--Code Generation done"
+					| "--Code Generation done"
 	  		) 
 		else
 			<debug>$[-- Compilation Failed.Please fix the errors before building the artifacts -----------------------]		
@@ -80,7 +75,7 @@
 					
 rules 
 	new-code-generate-session(s) =
-  	debug-compiler(!$[-----------------::new-code-generate-session::-----------------]);
+  	debug-compiler(!$[-----------------new-code-generate-session::-----------------]);
 		with-spxverify(
 			index-on-init-code-generation;
   		s;
@@ -95,6 +90,7 @@
 	//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
 	//TODO: OPTIMIZE : DR can be used to construct this imports  
 
+
 	// generates artifact for spx packages 
 	generate-spx-package: 
 		package-typed-qname at Package(untyped-qname) -> <id>
@@ -102,32 +98,33 @@
 			debug-compiler(!$[SpxPackage : Generate code for spx-package| Generating Artifacts for following package: [<print-as-string>]] | <debug-at-generator> , <debug-level-INFO>); 
 			with-spxverify(
 				if not(<get-declared(|CodeGenerated())>package-typed-qname)  then 
-					{|GetEnclosingPackageName:
-							with-spxverify(
-								<declare-current-package-scope>package-typed-qname
-						 		, !"Setting GetEnclosingPackageName failed"
-							);  
+					{|	GetEnclosingPackageName
+					 :
+								with-spxverify(
+									<declare-current-package-scope>package-typed-qname
+							 		, !"Setting GetEnclosingPackageName failed"
+								);  
 							
-							// only performing selective code generation for the changed modules
-							enclosed-module-typed-qnames := <get-enclosed-dirty-modules-to-generate>package-typed-qname;
+								// only performing selective code generation for the changed modules
+								enclosed-module-typed-qnames := <get-enclosed-dirty-modules-to-generate>package-typed-qname;
 							
-							<list-loop(generate-spx-module)>enclosed-module-typed-qnames;// Generates artifacts from all the modules 	
-							<emit-internal-signatures>package-typed-qname;// generating internal signatures
+								<list-loop(generate-spx-module)>enclosed-module-typed-qnames;// Generates artifacts from all the modules 	
+								<emit-internal-signatures>package-typed-qname;// generating internal signatures
 							 
-							<generate-sdf-mix-main> package-typed-qname;
-							// Since, the language-name is defined for this language 
-							// generate all the main artifacts  for this package
-							// if Language name is not defined for certain packaged, they will not be considered 
-							// as a language , rather will be treated as a langauge library to be reused by other 
-							// languages.
-							if (<get-language-name> package-typed-qname) then
+								<generate-sdf-mix-main> package-typed-qname;
+								// Since, the language-name is defined for this language 
+								// generate all the main artifacts  for this package
+								// if Language name is not defined for certain packaged, they will not be considered 
+								// as a language , rather will be treated as a langauge library to be reused by other 
+								// languages.
+								if (<get-language-name> package-typed-qname) then
 									<emit-package-signature-main>();
 									<link-all-generated-artefacts> package-typed-qname
-							end
-						|};		
-						with-spxverify( <store-declared(|CodeGenerated())>package-typed-qname , "failed to store CodeGenerated()")
-					end
-					, ! $[Generate| generate-spx-package |[<print-as-string>package-typed-qname] Failed. ]
+								end
+				|};		
+				with-spxverify( <store-declared(|CodeGenerated())>package-typed-qname , "failed to store CodeGenerated()")
+				end
+				, ! $[Generate| generate-spx-package |[<print-as-string>package-typed-qname] Failed. ]
 				)
 	
 	generate-spx-module: 
@@ -147,15 +144,19 @@
 	
 	init-code-generation = with-spxverify(<emit-default-signatures>() , "Failed to emit default signatures") 
 	
-	generate-all =
-		with-spxverify( 
-			verify(?m at Module(QName(_)) |<id> , "?Module(QName(_))  at generate-all")
-			; get-original-module-definition
-			; emit-sdf
-			; emit-signatures 
-		  ; emit-str
-		  , !$[Failed to generate artifacts for module [<print-as-string>]]   
-	  )  
+	generate-all:
+		m at Module(QName(_)) -> <id>
+		where with-spxverify( 
+						get-analyzed-module-ast
+						; emit-sdf
+						, !$[Failed to generate sdf artifacts for module [<print-as-string>m]]
+					)	    
+		where	with-spxverify(	
+						get-original-module-definition // TODO  FIX : check whether it is needed 
+						; emit-signatures 
+		  			; emit-str
+		  			, !$[Failed to generate str artifacts for module [<print-as-string>]]   
+  				)  
 
 	link-all-generated-artefacts =
 		with-spxverify(

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -139,22 +139,7 @@
     	<debug>$[------Index Cleanup is done ------]
   	)
 
-	build-incrementally-service:
-		(selected, position, ast, path, project-path) -> None()
-		where	HasErrors;
-					<debug>$[Compilation Failed.Please fix the errors before building the artifacts : [<print-as-string>path]]
-			
-			
-	build-incrementally-service:
-		(selected, position, ast, path, project-path) -> None()
-		where	not(HasErrors)
-		where	spxlang-editor-init(|project-path);
-					with-spxverify(
-  					abs-path := <concat-strings>[project-path, "/" ,path]
-						; <store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
-	  				; <build-spx-incrementally>(ast, abs-path) 
-	   			)
-  
+				
 	editor-build-all:
 		(selected, position, ast, path, project-path) -> None()
 		where verify-if-has-errors  

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -32,14 +32,13 @@
 	utils/sdf2conflicts
 
 rules
-
-	 emit-sdf:
- 		m at Module(attrb* , modname , section*) -> m
+	emit-sdf:
+ 		Module(attrb* , modname , section*) -> <id>
  		where	with-spxverify(
  						project-path := <ProjectPath>
  						; package-typed-qname := <GetEnclosingPackageName>
 						; module-typed-qname  := <GetEnclosingModuleName>
-						, !"Failed to create current scope at emit-sdf"
+						, !"Failed to create current scope at to-sdf.emit-sdf"
 					)	
 		where	!module-typed-qname  => Module(module-untyped-qname)
 			 		; !package-typed-qname => Package(package-untyped-qname)
@@ -49,7 +48,8 @@
     where	sdf-string := <pp-sdf-string'> 'module( // sdf2conflicts here collects information for the parenthesation in the prettyprinter
     																		<qname-to-path>module-untyped-qname, 
     																		<to-sdf-imports-block>section* , 
-    																		<to-sdf-section-block;sdf2conflicts-store-sdf>section* 
+    																		//<to-sdf-section-block;sdf2conflicts-store-sdf>section* 
+    																		<to-sdf-section-block>section*
     																		)
     			; <save-artifact(| package-untyped-qname , root-directory, output-path)>sdf-string 
 					; debug-compiler(!$[SDF: Finishing generation of SDF for [<print-as-string> module-untyped-qname]. ] | <debug-at-generator> , <debug-level-INFO>)
@@ -57,8 +57,8 @@
 	
 	
 rules	
-	
-	generate-sdf-main:  module-qname* -> <id>
+	generate-sdf-main:  
+		module-qname* -> <id>
 		where Package(package-qname)   := <GetEnclosingPackageName>
 		where debug-compiler(!$[SDF: Generating main failed for the following package : [<print-as-string> package-qname].] | <debug-at-linker> , <debug-level-INFO>)
 		where 		
@@ -75,7 +75,7 @@
 	 				resultant-sorts := <get-sdf-start-symbols-to-sync ; is-not-empty-list <+ ![]>;
 	 				if not(!resultant-sorts => []) then
 		 				start-symbol-syntax := [exports(context-free-start-symbols(resultant-sorts))]
-	 				else
+	 				else	
 	 					start-symbol-syntax := []
 	 				end
 	 				, !"getting & syncing start symbols failed"
@@ -98,9 +98,10 @@
 	to-sdf-section-block : 
 		sections* -> sdf-section-block
 		where with-spxverify(verify( List |sections* , "List expected"))
-		where	sdf-section* := <conc> (
-			  		<collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> sections*,
-			  		<collect-om(?TemplateSection(_)); template-sections-to-sdf> sections*
+		where	sdf-section* := <conc;flatten-list> (
+			  		<collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc) > sections*,
+			  		<collect-om(?TemplateSection(_))    ; template-sections-to-sdf> sections*,
+			  		<collect-om(?KeywordSection(_,_,_)) ; keyword-sections-to-sdf > sections*
 					);
 					if <ensure-list-is-not-empty>sdf-section* then
 						sdf-section-block := <to-generated-artifact-block(desugar-spxsdf-to-sdf , \s -> [exports(s)]\)>sdf-section*
@@ -128,8 +129,14 @@
  		where	is-string
 	
 	to-sdf-import-statement:
-		Package(QName(_)) -> <to-sdf-mix-module-name> 
-					  
+		p at Package(QName(_)) -> r 
+		where	to-sdf-mix-module-name => mix-module-name  
+		where	with-spxverify( 
+							ctx := <get-imported-package-alias> (<GetEnclosingPackageName>,p) 
+						, !$[Failed to get alias for package [<print-as-string>p] in [<print-as-string><GetEnclosingPackageName>]] 
+				  )
+		where r := 'module(parameterized(mix-module-name, [sort(ctx)]))
+						  
 	to-sdf-import-statement:
 			Module(q at QName(_)) -> result
 			where !q  
@@ -176,51 +183,28 @@
     box2text-string(|80)
 
 rules
-  
-	desugar-spxsdf-to-sdf = list-to-conc-grammars; topdown(repeat(desugar-sdf-redux)) ; alltd(parameterize-sdf)
-	
+	desugar-spxsdf-to-sdf = list-to-conc-grammars; topdown(repeat(desugar-sdf-redux)) ; alltd(to-sdf-sort)
+
   // TODO: also support Constructor("Module(<2>, <1>)") => {ast("...")}?
   //desugar-sdf-redux:
   //  term(default(fun(quoted(s)))) -> term(default(appl(unquoted("cons"), [fun(quoted(s))])))
-  desugar-sdf-redux:
-    Constructor(s) -> sdf-cons(s)
+  desugar-sdf-redux:  Constructor(s) -> sdf-cons(s)
 
   // HACK: remove scope from output
-  desugar-sdf-redux:
-    term(default(appl(unquoted("scope"), [s]))) ->  term(default(appl(unquoted("scope"), [])))
-
-  desugar-sdf-redux:
-    namespacedef(_, s) -> s
+  desugar-sdf-redux: term(default(appl(unquoted("scope"), [s]))) ->  term(default(appl(unquoted("scope"), [])))
 
-  desugar-sdf-redux:
-    namespaceref(n) -> sort(s')
-    where
-      s' := < resolve-NamespaceSort-declaration <+ !"ID"> n
+  desugar-sdf-redux: namespacedef(_, s) -> s
 
-  desugar-sdf-redux:
-    namespaceref2(n, s) -> s
+  desugar-sdf-redux: namespaceref(n) -> sort(s') where  s' := < resolve-NamespaceSort-declaration <+ !"ID"> n
 
-	parameterize-sdf:
-    prod(lhs, sort, attrs) -> prod(lhs', sort, attrs)
-  	where 
-  		lhs' := <alltd(rename-external-sort)>lhs
-  
-  rename-external-sort: 
-  	sort(x) -> sort(x')
-  	where 
-  		x' := x // TODO parameterize sort 1 : parameterized-sort(x, [sort(context)])
- 			// get-sdf-usage 
- 				
+  desugar-sdf-redux: namespaceref2(n, s) -> s
+				
 rules
+  list-to-conc-grammars: [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])
 
-  list-to-conc-grammars:
-    [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])
-
-  list-to-conc-grammars:
-    [g1] -> g1
+  list-to-conc-grammars: [g1] -> g1
 
-  list-to-conc-grammars:
-    [] -> []
+  list-to-conc-grammars: [] -> []
 
 rules
 
@@ -325,4 +309,67 @@
 
 	to-sdf-mix(|mix-context) = 
 		?(sortName ,_);
-		!symbol(sort(sortName), parameterized-sort(sortName, [sort(mix-context)]))
\ No newline at end of file
+		!symbol(sort(sortName), parameterized-sort(sortName, [sort(mix-context)]))
+		
+rules
+
+	to-sdf-sort: prod(lhs, sort, attrs) -> prod(lhs', sort, attrs) where lhs' := <alltd(to-sdf-sort)>lhs
+
+  to-sdf-sort: QualifiedSort(Unresolved(), x) -> sort(x)
+
+  to-sdf-sort: 
+  	q at QualifiedSort(p at Package(QName(_)), x) -> sort'
+  	where <get-sdf-usage(|p)>x;
+  				<get-imported-package-alias>(<GetEnclosingPackageName>, p) => ctx;
+  				sort' := parameterized-sort(x, [sort(ctx)])
+			<+
+  				sort' := sort(x)	 
+  	
+  to-sdf-sort: 
+  	sort(x) -> sort'  
+  	where  
+  		(s,c,t) := <get-sdf-usage(|Unqualified())>x;
+  		?(_, _, PublicScope());
+  	  if <?Module(QName(_))>c then 
+				ns:=<get-enclosing-package-qname>c
+			else 
+				ns := c
+			end;		  
+			ctx := <get-imported-package-alias>(<GetEnclosingPackageName>, ns);  
+		  sort' := parameterized-sort(x, [sort(ctx)])
+		<+
+			sort' := sort(x) 		
+			
+rules 
+ 	
+	keyword-sections-to-sdf:
+ 		keyword-sections -> sdf-sections 
+ 		where <mapconcat(keyword-sections-to-sdf)>keyword-sections => sdf-sections 
+ 	
+ 	keyword-sections-to-sdf:	 
+ 			<is-string> -> lit(x)
+ 			where x := <concat-strings>[ "\"" , <id> , "\""]
+
+	keyword-sections-to-sdf:
+		(id-sort , literals*) -> lexical-syntax(prod*) 
+		where ?(_ , <is-list>)
+		where prod* := <map(<keyword-sections-to-sdf>(id-sort , <id>) )>literals*
+	
+	keyword-sections-to-sdf:
+		(id-sort , l at lit(x)) -> prod([l], id-sort, attrs([reject()]))
+	
+	keyword-sections-to-sdf: 
+		KeywordSection(KeywordSymbols(s*) , Keywords(w*), Some(FollowRestriction(restriction))) -> sdf-section*  
+		where literals* := <map(keyword-sections-to-sdf)>w*
+		where sorts*    := <map(to-sdf-sort)>s*     
+		where to-sdf-restriction-section:=
+						lexical-restrictions(
+							[ follow(
+						 				literals*
+						 			,	restriction
+						 	 	)	
+							]
+						) 
+					;	<map(<keyword-sections-to-sdf>(<id>, literals*))>sorts* => to-sdf-keyword-prouction-sections*
+					; <conc>( [to-sdf-restriction-section] , [to-sdf-keyword-prouction-sections*]) => sdf-section* 
+					 				
\ No newline at end of file

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -66,7 +66,9 @@
 				output-path-rtree    := <get-output-path(|"rtree")>(root-dir, module-untyped-qname)
 				, ! "emit-str-rtree: failed to get output-path-rtree @emit-str-rtree"
 			)
-			; str-section-def := <conc>(<collect-om(?STRSection(<id>), conc)> section* ,<get-name-analysis>section*)
+			// TODO FIX : enable name analysis. currently it is not fully supported  
+			//; str-section-def := <conc>(<collect-om(?STRSection(<id>), conc)> section* ,<get-name-analysis>section*)
+			; str-section-def := <collect-om(?STRSection(<id>), conc)> section* 
 			; str-aterm := Module(
 			 										 <qname-to-path>module-untyped-qname,
 			 										 <conc>(<to-str-imports-block(|module-untyped-qname)>section*,
@@ -86,21 +88,24 @@
  		  		)
 		where	debug-compiler(!$[Stratego: Generate-str-main from package-name: [<print-as-string>package-qname]] | <debug-at-linker> , <debug-level-INFO> )
 		where	with-spxverify(
-	 			 			main-str-module-name :=  <get-main-file-name><GetEnclosingPackageName>
-	       		; pp-module-name := <conc-strings>(main-str-module-name, "-prettyprinter")
-				 		; str-aterm := Module(main-str-module-name, [
-				   			Imports(<get-str-imports(|<GetEnclosingPackageName>)>module-qname*),
-				    		Imports([Import(pp-module-name)])
-		 		   		]
-			     		)
-	 			 		; str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
+	 			 			main-str-module-name :=  <get-main-file-name><GetEnclosingPackageName>;
+	       			module-imports := Imports(<get-str-imports(|<GetEnclosingPackageName>)>module-qname*);
+	       			if templatelang-enabled then 
+	       				pp-module-name := <conc-strings>(main-str-module-name, "-prettyprinter");
+	       				all-import* := [module-imports, Imports([Import(pp-module-name)])] 
+				 			else 
+				 				pp-module-name := "";
+				 				all-import* := [module-imports ]
+				 			end
+				 			;	str-aterm := Module(main-str-module-name, all-import*)
+	 			 		; str-string := <pp-stratego-string> <parenthesize-Stratego> str-aterm
 		    	)
 		  		; with-spxverify(
 			 			  <save-artifact(save-to-file      | package-qname , root-directory, <get-main-output-path(|main-str-module-name, "str")>(root-directory, package-qname))>str-string
 						; <save-artifact(WriteToBinaryFile | package-qname , root-directory, <get-main-output-path(|main-str-module-name, "rtree")>(root-directory, package-qname))>str-aterm
 		  			)
 					; debug-compiler(!$[Stratego: Generation of Main STR Module for package : [<print-as-string> package-qname] is done] | <debug-at-linker> , <debug-level-INFO> )
-	where <generate-str-templates-main>(package-qname , module-qname* , pp-module-name, root-directory)
+					where <generate-str-templates-main>(package-qname , module-qname* , pp-module-name, root-directory)
 		
 
 	// Generating pretty-printer if templatelang is enabled 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -39,32 +39,34 @@
 				|}	
 		)
 
-	delcare-spx-scoped-symbols = 
-		declare-internal(declare-local-symbols)
-		//; print-statistics
-		  
+	delcare-spx-scoped-symbols = declare-internal(declare-local-symbols)
+
 	declare-internal(declare-symbols) =  
 		? desugared-module-def
 		; origin-track-forced(declare-spxmodules-all(declare-symbols)) => annotated-moduleDef
 		; !annotated-moduleDef => Module(attrb* , modname , section*)  // updating module definitions
 		; with-spxverify(
-			 <get-annotation(get-package-annotation)>modname => Package( package-qname)
+			 		<get-annotation(get-package-annotation)>modname => Package( package-qname)
 			  ; mId := <get-module-typed-qname>(package-qname, modname)
-			  ; <index-update-existing-module-definition>(mId  ,  annotated-moduleDef)
+				; <index-update-existing-module-definition>(mId  ,  annotated-moduleDef)
   	  )
-  //	; <debug(!"desugared : ")><ppterm> desugared-module-def
-	//  ; <debug(!"analyzeed : ")><ppterm> annotated-moduleDef
+  	
   	    
 rules 
 	
 	declare-spxmodules-all(s):
 		Module(attrb* , modname , section*) -> Module(attrb* , modname , m-sections*)
-		where
-			<alltd(s)>section* => m-sections*
+		where	<alltd(s)>section* => m-sections*
 
 	declare-local-symbols:
 		SDFSection(definition*) -> SDFSection(declared-definition*)
 		where <declare-sdf-usage-main>definition* => declared-definition*  
+	
+	declare-local-symbols:
+		KeywordSection(definition*,words*,restriction) -> KeywordSection(declared-definition*, words*,restriction)
+		where <declare-sdf-usage-main>definition* => declared-definition*
+		  
+	
 				 
 	declare-local-symbols:
 		SDFSectionEH(s,definition*) -> SDFSectionEH(s,declared-definition*)
@@ -72,21 +74,18 @@
 
 	declare-local-symbols:
 	  STRSection(def*) -> STRSection(m-definition*)
-    where
-    	<declare-str-local-definition-main>def* => m-definition*
+    where	<declare-str-local-definition-main>def* => m-definition*
        
   declare-local-symbols: ESVSection(def*) -> <id>
 
   declare-local-symbols:
     TemplateSection(definition*) -> TemplateSection(declared-definition*)
-    with
-     <declare-template-definition-main> definition* => declared-definition* 
+    where with-spxverify(<declare-template-definition-main> definition* => declared-definition*) 
 
   // FIXME: move to spoofax.configuration?
   declare-local-symbols:
   	TemplateOptions(option*) -> TemplateOptions(declared-option*)
-  	with
-  	  <declare-template-options-main> option* => declared-option* 
+  	where with-spxverify(<declare-template-options-main> option* => declared-option*) 
 
 rules
 
@@ -182,7 +181,6 @@
 		
 	newDefData(rename): 
  	(scope at Package(QName(_)) , type, x) -> defData   
-	 where 
-	 		x'  := <rename(|scope)>x;
-	 		defData  := DefData(scope,  type, Internal() , x , x')
+	 where	x'  := <rename(|scope)>x;
+	 				defData  := DefData(scope,  type, Internal() , x , x')
 		     
\ No newline at end of file

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -17,7 +17,8 @@
 	utils/contract
 	config
 	common
-
+	normalize/main 
+	
 rules
 	parse-spx-sources :
 		(sourcedir , searchOption) -> <id>
@@ -54,16 +55,15 @@
 
  	parse-and-precompile-if-needed: 
  		filename -> <id>
- 		where
- 			if has-extension(|"spx") then
-	 			debug-compiler(! $[Pre-Compiling| Parsing following file : [<print-as-string>]]);
-	 			open-spx-compilation-unit(
-					spx-compilation-unit-path,
-					spx-precompiled-cache-path,
-					parse-spoofaxlang-file ,
-					pre-compile-compilation-unit
-				)
-			end
+ 		where	if has-extension(|"spx") then
+	 					debug-compiler(! $[Pre-Compiling| Parsing following file : [<print-as-string>]]);
+	 					open-spx-compilation-unit(
+							spx-compilation-unit-path,
+							spx-precompiled-cache-path,
+							parse-spoofaxlang-file ,
+							normalize-all
+						)
+					end
 
 rules 
 	  

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -57,14 +57,9 @@
 	get-languagename-declaration-sites = get-package-qnames-by-langname
 
 rules
-  get-declared-packages-qname =	
-  		project-package-declarations(package-typed-qname)   
+  get-declared-packages-qname =	 project-package-declarations(package-typed-qname)   
   
-  get-all-declared-packages-qname =   
-  		project-all-package-declarations(package-typed-qname)
-  		
-
-rules 
+  get-all-declared-packages-qname =	project-all-package-declarations(package-typed-qname)
 	
 	get-package-declaration = where(?Package(QName(_))) ; get-indexed-package-declaration
   
@@ -73,6 +68,7 @@
 	get-package-uris = where(?Package(QName(_))) ;  project-package-declarations(package-uris)  
 	
 	get-package-uris = where(?QName(_)); !Package(<id>) ; get-package-uris     
+
 	
   /**
   * Get a list of Package declared in the current Project
@@ -84,11 +80,9 @@
   
 rules 
 
-  get-declared-modules-qname =  
-  	project-module-declarations(module-typed-qname)   
+  get-declared-modules-qname = project-module-declarations(module-typed-qname)   
   
-  get-all-declared-modules-qname = 
-  	 project-all-module-declarations(module-typed-qname)
+  get-all-declared-modules-qname = project-all-module-declarations(module-typed-qname)
   
 	get-analyzed-module-ast = get-desugared-module-ast
   /**
@@ -281,7 +275,8 @@
 	*
 	* @example : <index-enclosed-modules>(packageqname, module-qname)
 	*/
-	index-enclosed-modules = verify(?(p at Package(QName(_)) , m at Module(QName(_)))|<id> , "(PackageQName, ModuleQName) @index-enclosed-modules") ; <index-symbol-definition>(p,DeclaredEnclosedModuleQName(),m) 	
+	index-enclosed-modules = verify(?(p at Package(QName(_)) , m at Module(QName(_)))|<id> , "(PackageQName, ModuleQName) @index-enclosed-modules") ; <index-symbol-definition>(p , DeclaredEnclosedModuleQName(), m ) 	
+	
 	/**
 	* Returns the enclosed module names of the specified package id .  
 	*

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -15,6 +15,7 @@
 	context/sdf/declare
 	context/signatures
 	utils/annotations
+	utils/path
 
 
 // TODO : refactor common functionily in seperate rules/strategy
@@ -109,7 +110,7 @@
 	store-operation-declaration:
 		p at prod(lhs, rhs-sort, attrs) -> <id>
 		where
-			 	if is-lexical-sort then
+			 	if <is-lexical-sort>rhs-sort then
 			 		if not (IsInsideLexicalSyntaxBlock ) then
 			 			// Karnel Syntax and not marked as Lexical Syntax Block.
 			 			// Hence, marking it as a lexical syntax
@@ -131,14 +132,14 @@
 		?(p, lhs , rhs-sort, attrs(attribute-list))
   	;	rhs-sort-name := <get-rhs-sort-name>rhs-sort
   	;	{|	lhs-sort, get-op-name
-  	 	 :		<find-sorts>lhs
-  					;	<try(get-opration-name)>attribute-list
-  					;	if operation-name := <get-op-name> then
-  								lhs-operands-types := <reverse><bagof-lhs-sort>
-  							;	create-opname2opdecl-mapping(|operation-name , lhs-operands-types, rhs-sort-name , p)
-  						else
-  								dbg-declaration(!$[Failed to retrive Operation Name . Hence Ignoring : [<print-as-string> p].] |"Signature" , "Warning")
-  						end
+	 	 :			<find-sorts>lhs
+					;	<try(get-opration-name)>attribute-list
+					;	if operation-name := <get-op-name> then
+							lhs-operands-types := <reverse><bagof-lhs-sort>
+						;	create-opname2opdecl-mapping(|operation-name , lhs-operands-types, rhs-sort-name , p)
+						else
+							dbg-declaration(!$[Failed to retrive Operation Name . Hence Ignoring : [<print-as-string> p].] |"Signature" , "Warning")
+						end
   		  |}
 
 	store-operation-declaration-internal = 
@@ -166,11 +167,12 @@
 			 |}
 	*/
 
-  find-sorts = alltd(get-sort-decl)
-
+  
 rules
 
-	// Gets sort declaration from the production
+	//TODO : use collect-all instead of using dynamic rule to collect all the sort name from LHS
+	find-sorts = alltd(get-sort-decl) 
+
 	get-sort-decl:
 		a at alt(frstSort , restSort*) -> a
 		where
@@ -180,8 +182,7 @@
 					;	inner-sort* := <bagof-lhs-sort;reverse>
 					;	intermediate-resultant-sort-type :=<string-replace(|"(", "_Of_");string-replace(|")", "")> <separate-by(|"_"); concat-strings>inner-sort*
 			|}
-			// storing intermediate operation declarations
-			; <map(create-opname2opdecl-mapping(|"", intermediate-resultant-sort-type, "[N/A]" ))>inner-sort*
+			; <map(create-opname2opdecl-mapping(|"", intermediate-resultant-sort-type, "[N/A]" ))>inner-sort*// storing intermediate operation declarations
 			; rules( lhs-sort :+ _ -> intermediate-resultant-sort-type)
 
 	get-sort-decl:
@@ -219,40 +220,33 @@
   		;rules ( lhs-sort :+ _ -> ret-string)
 
  	get-sort-decl:
- 		p at parameterized-sort(x, _) ->p
-		where 
-			with-spxverify(
-  			rules( lhs-sort :+ _ -> x)
-			)
+ 		p at parameterized-sort(x, _) -> p
+		where with-spxverify( rules( lhs-sort :+ _ -> x))
 
-  get-sort-decl:
+  get-sort-decl:  	
+  	QualifiedSort(qname, x) -> <id>
+  	where qname-string := <convert-qname(|"_")>qname  
+  	where <get-sort-decl> sort( <concat-strings>[qname-string , "_",  x ])
+ 
+ 	get-sort-decl:  	
   	s at sort(x) -> s
-  	where 
-  		with-spxverify(
-  			rules( lhs-sort :+ _ -> x)
-			)
+  	where	with-spxverify(rules( lhs-sort :+ _ -> x))
 
 	get-sort-decl:
 		o at opt(parameterized-sort(x, _)) -> o
-  	where 
-  		with-spxverify(
-  			rules( lhs-sort :+ _ -> $[Option([x])])
-			)
+  	where with-spxverify(	rules( lhs-sort :+ _ -> $[Option([x])]))
 
 	get-sort-decl:
 		opt(sort(x)) -> opt(sort(x))
-  	where 
-  		with-spxverify(
-  			rules( lhs-sort :+ _ -> $[Option([x])])
-			)
+  	where with-spxverify(	rules( lhs-sort :+ _ -> $[Option([x])]))
 
 	get-sort-decl:
 		i at iter-star-sep(operand1, operand2) -> i
  		where 
  			with-spxverify( 
 				{|lhs-sort:
- 					 <find-sorts>operand1
- 					  ;<find-sorts>operand2
+ 					 		<find-sorts>operand1
+ 					  ;	<find-sorts>operand2
  					  ; inner-sorts-tostring := <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>
 			  |}
 			 	;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
@@ -291,11 +285,10 @@
 	assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)=
 		? [hd|tl]
 		; (expected-op-name , expected-op-sorts*, ex-resultant-sort) := hd
-		; (
-				operation-name := expected-op-name
-				;opernand-sorts* := expected-op-sorts*
-				;resultant-sort := ex-resultant-sort
-		  <+
+		; (	operation-name := expected-op-name
+			;	opernand-sorts* := expected-op-sorts*
+			;	resultant-sort := ex-resultant-sort
+	  	<+
 				<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>tl
 			)
 
@@ -333,13 +326,13 @@
 
 
 	record-operation-definition ( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort) =
-		where (
-	  	arg-length := <length>operand-sort*
-			;<index-symbol-definition>(scoped-op-name  , OperationSignature(),(opname  , arg-length ))
-      ;<index-symbol-definition>(scoped-op-name  , OperationDeclaration(),(opname  , operand-sort* , resultant-sort)) 
-      ;dbg-declaration(!$[Stored operation declaration : [<print-as-string> ( opname , operand-sort* ,  resultant-sort) ].]
+		where	(	
+			arg-length := <length>operand-sort*
+			;	<index-symbol-definition>(scoped-op-name  , OperationSignature(),(opname  , arg-length ))
+      ;	<index-symbol-definition>(scoped-op-name  , OperationDeclaration(),(opname  , operand-sort* , resultant-sort)) 
+      ;	dbg-declaration(!$[Stored operation declaration : [<print-as-string> ( opname , operand-sort* ,  resultant-sort) ].]
        		             |"Signature" , <debug-level-INFO>) 
-			;dbg-declaration(! $[Stored operation signature   : [<print-as-string> scoped-op-name] -> [<print-as-string> (opname, <length>operand-sort*)].] 
+			;	dbg-declaration(! $[Stored operation signature   : [<print-as-string> scoped-op-name] -> [<print-as-string> (opname, <length>operand-sort*)].] 
 			                 | "Signature" , <debug-level-INFO>) 
 		)
 
@@ -360,13 +353,8 @@
 			index-operation-signature-flag	
 		end
 
-signature constructors 
-	OperationSignatureFlag : Flag 
-	HasDuplicateOperationDefinition : Flag 
 	
 rules 
-	
-		
 	index-operation-signature-flag = 
 		<get-constructor> OperationSignatureFlag() => cons-name;
 		<index-symbol-definition>(cons-name, OperationSignatureFlag(),  cons-name)
@@ -374,4 +362,8 @@
 	is-operation-signature-initialized = 
 		<get-constructor> OperationSignatureFlag() => key ;  
 		<resolve-symbol-definition>(key, OperationSignatureFlag())   
-		
\ No newline at end of file
+
+signature 
+	constructors 
+		OperationSignatureFlag : Flag 
+		HasDuplicateOperationDefinition : Flag 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -20,7 +20,7 @@
 	libstratego-sdf
   lib/editor-common.generated
 	include/SpoofaxLang
-	
+	normalize/main
   
 rules
 	setof-sdf-declarations = resolve-sdf-declarations
@@ -54,7 +54,7 @@
  //	Instead of declaring in the Global Scope
  // now it is declared in a particular Scope.
  // Here scope is defined by (Package-QName, Module-QName)
- declare-sdf-definition-main= 	alltd(declare-sdf-definition)
+ declare-sdf-definition-main = alltd(declare-sdf-definition)
  
  declare-sdf-usage-main = alltd(declare-sdf-usage)
 
@@ -65,6 +65,7 @@
 		where store-context-free-start-symbols(|<GetEnclosingModuleName>)
 
 rules
+	
 	declare-sdf-definition:
     renamings(y) -> <id>
     where	<all(try(?symbol(_, <id>); declare-sdf-simple-definition))> y
@@ -77,14 +78,11 @@
 
 rules
 
-  declare-sdf-definition:
-    p at prod(lhs, sort, attrs) -> <id>
-    where	<declare-sdf-definition-internal> (p, lhs, sort, attrs) 
-
+  declare-sdf-definition: p at prod(lhs, sort, attrs) -> prod(lhs, sort, attrs)  where	<declare-sdf-definition-internal> (p, lhs, sort, attrs) 
   
-    declare-sdf-definition-internal:
+ 	declare-sdf-definition-internal:
     (prod, lhs, sort, attrs) -> <id>
-    where dbg-declaration(! $[declaring sdf : [<print-as-string>prod]]| "SDF" , <debug-level-INFO> )
+    where dbg-declaration(! $[declaring sdf : [<print-as-string>prod]]| "declare.declare-sdf-definition-internal" , <debug-level-INFO>)
     where	x  := <get-rhs-sort-name>sort
     where if <is-lexical-sort>sort + IsInsideLexicalSyntaxBlock then 
     				sortType :=  LEXSort()
@@ -92,28 +90,33 @@
     				sortType :=  CFSort()
     			end 		
     where	<declare-signature>prod
-  	where	with-spxverify(<topdown(try(declare-namespace-def))> lhs	,	!"declare-sdf-definition-internal | Failed while storing namespace-def ")
+  	// TODO FIX : enable namespace annotation. currently it is not fully supported 
+  	//where	with-spxverify(<topdown(try(declare-namespace-def))> lhs	,	!"declare-sdf-definition-internal | Failed while storing namespace-def ")
   	where	with-spxverify(
       			if <fetch-cons-name> attrs => cons then
 	      			tuple := (x, cons);
 	       			<index-symbol-definition>(tuple , SDFDeclaration() , prod ) // Needed for Sort.Cons references to the production.
 	      		end
-	    			, !"declare-sdf-definition-internal | Failed while storing sort.cons references "      
+	    			, !"Failed while storing sort.cons references at declare.declare-sdf-definition-internal"      
      		 	)
     where	with-spxverify(
       			<index-symbol-definition>(x, SDFDeclaration(),prod );
       			<index-symbol-definition>(x , SortDeclaration(), (x, sortType));
-    	  		dbg-declaration(! $[Storing Declaration : [<print-as-string>x]  -> [<print-as-string>prod]]  | "SDF" , <debug-level-INFO> ) 
-      			, !"declare-sdf-definition-internal | Failed while storing production in symbol table"
+    	  		dbg-declaration(
+    	  			!$[Storing Declaration : [<print-as-string>x]  -> [<print-as-string>prod]]  
+    	  			| "declare.declare-sdf-definition-internal" 
+    	  			, <debug-level-INFO> 
+	  			  ) 
+      			, !"Failed to index production at declare.declare-sdf-definition-internal"
       		) 
  
   declare-signature:
   	p at prod(lhs, sort, attrs) -> <id>
   	where with-spxverify(
-  						if not(<attrs(fetch(?reject()))> attrs) then
+						if not(<attrs(fetch(?reject()))> attrs) then
 	        		<store-operation-declaration>p
 	      		end
-      			, !$[declare-sdf-definition-internal | Failed while trying to store operation declaration with following production [<print-as-string> p]]
+      			, !$[Failed while trying to store operation declaration with following production [<print-as-string> p] at declare.declare-sdf-definition-internal]
   				)
  
  declare-namespace-def:
@@ -147,36 +150,37 @@
 
 
 rules
-	declare-sdf-usage:
-		prod(lhs, sort, attrs) -> <id>
-    where <alltd(declare-sdf-usage)>lhs
-
-
-	declare-sdf-usage:
-		'sorts(s*) -> <id>
-		where <alltd(declare-sdf-usage)>s*
-
-	declare-sdf-usage:
-		context-free-start-symbols(s*) -> <id>
-		where <alltd(declare-sdf-usage)> s*	
-
+	declare-sdf-usage: 'sorts(s*) -> 'sorts(s') where <alltd(declare-sdf-usage)>s* => s' 
+			
+	declare-sdf-usage: context-free-start-symbols(s*) -> context-free-start-symbols(s') where <alltd(declare-sdf-usage)>s* =>s'
+		
+  declare-sdf-usage: lexical-start-symbols(s*) -> lexical-start-symbols(s') where <alltd(declare-sdf-usage)>s* =>s'
+  	
+	declare-sdf-usage: kernel-start-symbols(s*) -> kernel-start-symbols(s') where <alltd(declare-sdf-usage)>s* =>s'
+    
+  declare-sdf-usage: prod(lhs, sort, attrs) -> prod( lhs' , sort, attrs) where <alltd(declare-sdf-usage)>lhs => lhs'
+  
+  declare-sdf-usage: prod(lhs, sort, attrs) -> prod( lhs' , sort, attrs) where <alltd(declare-sdf-usage)>lhs => lhs'
+  
   declare-sdf-usage:
-		lexical-start-symbols(s*) -> <id>
-	  where <alltd(declare-sdf-usage)>s*
-	
-	declare-sdf-usage:
-    kernel-start-symbols(s*) -> <id>
-    where <alltd(declare-sdf-usage)>s*
-
-	//TODO : 
-  // declare-sdf-usage:
-  //   qsort(qname , x) -> <id>
-  // 
-    
+    QualifiedSort(Name(_), x) -> result 
+  	where basic-sdf-desugar
+  				;	declare-sdf-usage
+  				; ?result   
+  
+  declare-sdf-usage:
+    QualifiedSort(q at QName(_), x) -> QualifiedSort(q' , x)
+    where	!q;
+    			((is-declared-package;!Package(q))  
+			<+  (is-declared-module; !Module(q) ; get-enclosing-package-qname) 
+			<+  !Unresolved())=> q'
+	  where if not(!q' => Unresolved()) then 
+	  				with-spxverify( <index-sdf-usage(|q')>x , !"Indexing Qualified SDF Sort Call Sites failed. ")
+	  			end	
+	  			
 	declare-sdf-usage:
     sort(x) -> <id>
-    where with-spxverify( <index-sdf-usage(|Unqualified())>x , !"Indexing SDF Sort Call Sites failed. ")
-
+    where with-spxverify( <index-sdf-usage(|Unqualified())>x , !"Indexing SDF Sort Call Sites failed. ") 
 
 	// For legacy artifacts only.
 	// It is required for import def or sdf file. currently we support parameterized sort in 
@@ -199,52 +203,58 @@
 								fetch-sort-and-context
 								|(LookupAllScope(), <ALL_AS_SET>)
 							)>(sortName,  SortDeclaration())
-						; is-not-empty-list 
-						;	(		(filter(?(_, _, InternalScope())); is-not-empty-list)   
-							<+	(filter(?(_, _, GlobalScope()))  ; is-not-empty-list)    
-							<+  (filter(?(_, _, PublicScope()))  ; is-not-empty-list) 
-							)
-						;	?[(s,c,t)|_] 
-						; !(s,(s,c,t))
-						; index-sdf-usage(|namespace)
+							; is-not-empty-list 
+							;	(		(filter(?(_, _, InternalScope())); is-not-empty-list)   
+								<+	(filter(?(_, _, GlobalScope()))  ; is-not-empty-list)    
+								<+  (filter(?(_, _, PublicScope()))  ; is-not-empty-list) 
+								)
+							;	?[(s,c,t)|_] 
+							; !(s,(s,c,t))
+							; index-sdf-usage(|namespace)
 					<+ 
-						<debug(!"Failed to find sdf sort : " )> sortName		   	
-				 end
+							dbg-declaration(
+								!$[ Failed to find sort : [<print-as-string>sortName]] 
+               	| "declare.index-sdf-usage" , <debug-level-WARNING>
+               	)
+    		 end
 					   
 	index-sdf-usage(|namespace) : 
-  	(sortName , v) -> <id>
+  	(sortName , symbolDef) -> <id>
   	where with-spxverify( 
-  					<index-symbol-definition> ((sortName,namespace), SDFUsage() , v) 
+  					<index-unique-symbol-definition> ((sortName,namespace), SDFUsage() ,symbolDef) 
 					, "Indexing  SDF Call Sites Failed"
 					)
 					 
   get-sdf-usage(|namespace) :
-  	sortName -> result 
-  	where <resolve-all-symbol-definitions(project-from-symboldef-to-symbol |(LookupLocalScope(), <ONLY_ONE>))> ((sortName , namespace),  SDFUsage())
-  				; ensure-is-unique
-  				; ?result   
-					
-
-	
-	fetch-sort-and-context = 
-		?SymbolDef(context, _ ,_, sortName, _) ;
-		<is-string>sortName;
-		GetEnclosingPackageName => enclosing-package;
-		GetEnclosingModuleName  => enclosing-module;
-		switch !context
-        case ?enclosing-package                       : !InternalScope()
-        case ?enclosing-module                        : !InternalScope()
-        case (?Package(QName(_)) + ?Module(QName(_))) : !PublicScope()
-        case ?Globals()                               : !GlobalScope()
-    end;
-  	?referred-scope;  
-    !(sortName , context, referred-scope)  
- 	
-	fetch-sort-and-context = 
-		?SymbolDef(context, k ,t, (sortName,_), is-overloaded) ;
-		<fetch-sort-and-context>SymbolDef(context, k ,t, sortName , is-overloaded)
-				
+  	sortName -> r 
+  	where
+  		activate-scope(
+  			<resolve-all-symbol-definitions(project-from-symboldef-to-symbol |(LookupLocalScope(), <ONLY_ONE>))> ((sortName , namespace),  SDFUsage())
+				; ensure-is-unique
+				; ?r
+			|	<GetEnclosingPackageName>
+			)
+  
+  fetch-sort-and-context: 
+		SymbolDef(m at Module(QName(_)), t1 ,t2, s, t4) -> <fetch-sort-and-context> SymbolDef(<get-enclosing-package-qname>m, t1 ,t2, s, t4)
+		where <is-string>s 
+	
+	fetch-sort-and-context: 
+		SymbolDef(p at Package(QName(_)), _ ,_, sortName, _) -> (sortName , p, resolved-from)
+		where <is-string>sortName 
+		where GetEnclosingPackageName => enclosing-package
+		where if <?p>enclosing-package then 
+						resolved-from := InternalScope()
+					else
+						resolved-from := PublicScope()
+					end
+
+	fetch-sort-and-context: 
+		SymbolDef(Globals(), _ ,_, sortName, _) -> (sortName , Globals(), GlobalScope())
+ 		where <is-string>sortName
 	
+	fetch-sort-and-context: SymbolDef(context, k ,t, (sortName,_), is-overloaded) -> <fetch-sort-and-context>SymbolDef(context, k ,t, sortName , is-overloaded)
+
 	verify-call-sites-already-registered(|namespace): 
 		sortName  ->  <id>
 		where is-string 
@@ -257,11 +267,7 @@
   	?sort(<id>);
   	verify-call-sites-already-registered(|namespace)
   	
-  
-  	
 signature constructors 
 	SDFSortType : Type 
 	CFSort   : SDFSortType 
-	LEXSort  : SDFSortType
-	
-	
\ No newline at end of file
+	LEXSort  : SDFSortType
\ No newline at end of file

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -42,7 +42,7 @@
  
 signature constructors
 	DeclaredEnclosedModuleQName : Type
- 	   
+ 	ImportedPackageAlias : Type    
 signature constructors 
 	// symbol types
 		

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/store-imports.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/store-imports.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/store-imports.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -35,6 +35,38 @@
 						|}
 					 	, !$[Failed compute-dependency-graph: [<print-as-string> p]]	
 					)
+		where get-all-usings;
+				 	list-loop(
+				 		!(p, <id>)
+						;	(get-imported-package-alias <+ store-imported-package-alias)
+				 	)
+	
+	
+	store-imported-package-alias:
+		(p at Package(QName(_)) , i at Package(q at QName(_))) -> <id>
+		where	<?QName(<id>)>q;
+					map(explode-string;	Hd;to-upper;![<id>]; implode-string); 
+					concat-strings; 
+					newname => n
+ 		where 
+			<debug(!"storing alias : ~")>(i , ImportedPackageAlias() , n);
+			activate-scope(
+				<index-unique-symbol-definition> ( i , ImportedPackageAlias() , n)
+				|p
+			)
+			
+	get-imported-package-alias: 
+		(p at Package(QName(_)) , i at Package(QName(_))) -> alias
+		where activate-scope(
+						alias :=	<resolve-all-symbol-definitions(
+												project-from-symboldef-to-symbol
+												|(LookupAllScope(), <ONLY_ONE>)
+											)>(i,  ImportedPackageAlias())
+						|p
+					)
+		where !alias
+					;	ensure-is-unique  
+						 			 			
 rules
   
   compute-module-dependencies: 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-globals.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -133,12 +133,7 @@
       	redeclare-definition
     	)
 	
-  declare-str-definition:
-    ExtOpDecl(x, t) -> <id>
-    where  
-    	with-spxverify(
-   			redeclare-definition
-   		)
+  declare-str-definition: ExtOpDecl(x, t) -> <id> where  with-spxverify(redeclare-definition )
 	
   declare-str-definition:
     Overlay(x, t, d) -> Overlay(x', t, d)
@@ -202,4 +197,4 @@
     ; scoped-sig := <to-scoped-symbol> sig
     ; rules(DeclareCookie: scoped-sig -> cookie)
 		; dbg-declaration(! $[declare-dr-rule [<print-as-string>prefix]| Storing DeclareCookie : [<print-as-string>scoped-sig] -> [<print-as-string>cookie]]
-		                  | "STR" , <debug-level-INFO> )  
+		                  | "STR" , <debug-level-INFO> ) 
\ No newline at end of file

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-locals.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-locals.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/str/declare-locals.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -1,5 +1,4 @@
- module context/str/declare-locals
-
+module context/str/declare-locals
 imports
 	libstrc		
 	libstratego-lib
@@ -22,7 +21,6 @@
 	spoofaxlang  
 	
 strategies 
-  
   // Declarations inside definition bodies , i.e., analyzing strategies local declarations
   declare-str-local-definition-main =  declare-bodies-top 
   
@@ -34,8 +32,7 @@
   declare-bodies: 
     InternalRules(str-defs*) -> InternalRules(analyzed-str-defs*)
     where 
-    	// activate-stratego-internal-scope automatically calls declare-rules
-      <activate-stratego-internal-scope(
+    	<activate-stratego-internal-scope(
       	declare-bodies-top
     	)>str-defs*  
       => analyzed-str-defs*
@@ -415,20 +412,15 @@
         file := <parse-stratego-file> str
       end
 	
-	to-signatures =
-    basic-stratego-desugar-top;
-    topdown(try(remove-stratego-bodies))
-
-
+	to-signatures = basic-stratego-desugar-top; topdown(try(remove-stratego-bodies))
+
   remove-stratego-bodies:
     SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
     where with-spxverify(
       s' := <collect-all(?RDecT(_, _, _))> s
    	)
    	
-  remove-stratego-bodies:
-    Import(_) -> ()
+  remove-stratego-bodies: Import(_) -> ()
    
-  remove-stratego-bodies:
-    ImportWildcard(_) -> ()
+  remove-stratego-bodies: ImportWildcard(_) -> ()
 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -639,7 +639,9 @@
   
 
   constructors
-    //SymbolDef : namespace * key * sort( constructor ) * symboldef * symbolsort(overridable | unique)
+    //SymbolDef : namespace * key * category * symboldef * symbol properties (overridable | unique). TODO : could be a list of property. 
+    //currently we only require only one property for the current symbol table implementation
+    //hence, we are using a SymbolSort instead of  List(SymbolSort). 
     SymbolDef : Namespace * Term * Type  * Term * SymbolSort -> Def
     
     //TODO : use tuple . extract the terms and create a tuple and store it 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -6,7 +6,10 @@
   utils/annotations
   context/symboltable
   context/signatures
+  normalize/signatures
+  context/scope-tree
   common
+	 
 	
 signature
   constructors
@@ -54,7 +57,7 @@
   declare-sdf-usage:
     Placeholder(sort(x), _, _) -> <id>
     where with-spxverify(
-      <index-sdf-usage>( x , x)
+      <index-sdf-usage(|Unqualified())>x
     )  
 
 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -37,13 +37,23 @@
   // (the completion identifier in the AST provides additional context information)
   editor-complete:
     (node, position, ast, path, project-path) -> proposals*
+    where debug 
     where editor-init
     where <alltd(compute-proposals)> ast 
-    where proposals* := <Proposals>()
+    where <Proposals>() <+	![] => proposals* 
     where <debug(!"Final Proposals : ")>proposals*
-    
-  
+			
 rules
+	
+	compute-proposals:
+		Package(Name(COMPLETION(prefix)) , _)-> <id> 
+		where debug(!"-") 
+		where get-package-list
+					;	map(?Package(<id>);convert-qname(|".")) 
+					=> proposals
+					; rules(Proposals: () -> proposals) 	
+
+
 	compute-proposals:
     Package(Name(package-name) , modules* ) -> <id>
     where not(<Proposals>())
@@ -52,6 +62,12 @@
         
 	compute-proposals:
     Package(package-qname at QName(_) , modules* ) -> <id>
+		where <one(?COMPLETION(prefix))>package-qname
+		where debug(!"----")
+
+	compute-proposals:
+    Package(package-qname at QName(_) , modules* ) -> <id>
+    where <not(one(?COMPLETION(prefix)))>package-qname
     where not(<Proposals>())
     where	{| GetEnclosingPackageName
          	 :		rules(GetEnclosingPackageName := Package(package-qname))
@@ -86,8 +102,27 @@
 					;	map(?Package(<id>);convert-qname(|"."))
 					; filter(string-starts-with(|full-prefix)) => proposals
 					; rules(Proposals: () -> proposals) 	
-
-
+	
+	
+	compute-proposals:
+		prod(lhs, rhs, attr) -> <id>
+		where <oncetd(?QualifiedSort(ctx, COMPLETION(t)))>lhs
+		where <debug(!"---")>ctx
+		where <debug(!"---")>t
+	
+	
+	compute-proposals:
+		prod(lhs, rhs, attr) -> <id>
+		where <oncetd(?sort(COMPLETION(prefix))+ ?NOCONTEXT(COMPLETION(prefix)))>lhs
+		where debug(!"1: ")
+		where <get-all-usings><GetEnclosingPackageName>
+					;	map(?Package(<id>);convert-qname(|"."))
+					; filter(string-starts-with(|prefix); not(?"")) => proposals1
+		where debug(!"2: ")
+		where activate-scope(<resolve-all-of-current-scope-by-type> SortDeclaration() | <GetEnclosingPackageName>) => proposals2
+		where debug(!"3: ")
+		where rules(Proposals: () -> [proposals1,proposals2]) 			
+  
 rules
 	
 	editor-analyze-with-eval-exec-time: 
@@ -114,7 +149,7 @@
 	// 	  		!issues => ( errors, warnings, infos)
 	// 	
 	
-	
+	//TODO FIX : tempoirarily added. replace compile-packages-of with the following strategy 
 	editor-analyze: 
  		(ast, path, project-path) -> (analyzed-ast, errors, warnings, infos)
     where abs-path := <concat-strings>[project-path, "/" ,path]
@@ -128,33 +163,29 @@
     			end  
 	 	where with-spxverify(
 	    			<store-currently-analyzing-ast> (<get-normalized-path>abs-path  , ast);
-	    			<compile-current-ast> (ast, abs-path) => (analyzed-ast , issues') 
+	    			<editor-analyze> (ast, abs-path) => (analyzed-ast , issues') 
 					);  
 		  		!issues' => ( errors, warnings, infos)
 		
-		
-	setup-editor-analyze: 
-		(resource-abs-path,project-path) -> <id>
-		where if not(IsAnalyzing; is-equal-path(|resource-abs-path)) then // checking previously analyzed resource
-						debug(!"Saving previous unsaved State : ")  
-			 			//compile-unload;
-			 			//index-init
-			 		end 
-		where	spxlang-editor-init(|project-path)
-    where	rules (IsAnalyzing:= resource-abs-path)
-		
-	
-	
-	//TODO FIX : tempoirarily added. replace compile-packages-of with the following strategy 
-	compile-current-ast = 
-    ?(ast, file-absolute-path);
-    index-init;
-  	on-init-index-updating;
-			<normalize-all> (ast, file-absolute-path);
-			init-declarations; 
+	//TODO FIX : tempoirarily added for testing . 	
+	editor-analyze:  
+ 		(ast, path, project-path) -> (ast, [], [], [])
+  	where <string-ends-with(|".spt")> path
+  	where <not(?CompilationUnit(_,_))>ast
+
+	//TODO FIX : tempoirarily added for testing .
+	editor-analyze= 
+    ?(compilation-unit, file-absolute-path);
+		index-init;
+   	on-init-index-updating;
+		<open-spx-compilation-unit(normalize-all|<spx-precompiled-cache-path>file-absolute-path)>(compilation-unit, file-absolute-path);
+		init-declarations; 
 		on-index-updating-completed;
 		!file-absolute-path; 
-    where(get-declared-packages-qname; 	compile-main) ;
+		where(
+    	get-declared-packages-qname; 	
+    	compile-main
+  	) ;
     get-semantic-problmes-by-file => issues* ;
     if not(<fail-if-has-errors>issues*) then
         set-has-errors // checking whether there are errors 
@@ -163,11 +194,67 @@
     get-related-files-of-packages ; 
     filter(not(is-equal-path(| file-absolute-path))) ;
     mark-issues-of-files ; 
-    !(<get-analyzed-ast>ast , issues*)				
-    
-    
-	editor-analyze:  
- 		(ast, path, project-path) -> (ast, [], [], [])
-  		where <string-ends-with(|".spt")> path
-  		where <not(?CompilationUnit(_,_))>ast
-  		
\ No newline at end of file
+    !(<get-analyzed-ast>compilation-unit, issues*)				
+  
+  //TODO FIX : tempoirarily added for testing .  
+	setup-editor-analyze: 
+		(resource-abs-path,project-path) -> <id>
+		where if not(IsAnalyzing; is-equal-path(|resource-abs-path)) then // checking previously analyzed resource
+						debug(!"Saving previous unsaved State : ")
+		//	 			compile-unload
+			 		end 
+		where	spxlang-editor-init(|project-path)
+    where	rules (IsAnalyzing:= resource-abs-path)
+
+rules 
+	// on save event 
+	// build-incrementally-service:
+	// 	(selected, position, ast, path, project-path) -> None()
+	// 	where	not(HasErrors)
+	// 	where	spxlang-editor-init(|project-path);
+	// 					with-spxverify(
+  //  					abs-path := <concat-strings>[project-path, "/" ,path]
+	// 						; <store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
+	//   					; <build-spx-incrementally>(ast, abs-path) 
+	//    				)
+
+	// build-incrementally-service:
+	// 		(selected, position, ast, path, project-path) -> None()
+	// 		where	HasErrors;
+	// 					<debug>$[Compilation Failed.Please fix the errors before building the artifacts : [<print-as-string>path]]
+	// 			
+
+	//TODO FIX : tempoirarily added for testing purpose. replace it with build-incrementally 
+	// simplified generate artefacts on save 
+	generate-artefacts-on-save:
+		(selected, position, ast, path, project-path) -> None()
+		where	HasErrors
+		where <debug>$[Compilation Failed.Please fix the errors before building the artifacts : [<print-as-string>path]]
+		
+	generate-artefacts-on-save:
+		(selected, position, ast, path, project-path) -> None()
+		where	not(HasErrors)
+		where abs-path := <concat-strings>[project-path, "/" ,path]
+   	where	<setup-editor-analyze>(abs-path , project-path)
+   	where	with-spxverify(
+  					<store-currently-analyzing-ast> (<get-normalized-path>abs-path  , ast);
+  					<generate-artefacts-on-save>(ast, abs-path) 
+   				)
+	
+	generate-artefacts-on-save = 
+   ?(ast, file-absolute-path);
+   	index-init;
+   	on-init-index-updating;
+   	init-declarations; 
+		on-index-updating-completed;
+		!file-absolute-path; 
+		get-semantic-problmes-by-file => issues* ;
+    if not(<fail-if-has-errors>issues*) then
+      set-has-errors // checking whether there are errors 
+    else
+  		!file-absolute-path; 
+  		index-on-init-code-generation;
+  		get-declared-packages-qname; 
+			list-loop(generate-spx-package);	
+			index-on-complete-code-generation 
+    end    	
\ No newline at end of file

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -53,36 +53,31 @@
 strategies 	 
 	normalize-all =
 		?(spx-compilation-unit, current-spx-file-path );
- 	  <origin-track-forced(desugar-compilation-unit(|current-spx-file-path))>spx-compilation-unit              
+ 	  <origin-track-forced(desugar-spx(|current-spx-file-path))>spx-compilation-unit              
       
 strategies 
 	
-	desugar-compilation-unit (| cu-location):
-		CompilationUnit(moduledef*) -> 	<desugar-compilation-unit(|cu-location)>CompilationUnit([] , [appended-default-package-declaration])
+	desugar-spx(| cu-location):
+		CompilationUnit(moduledef*) -> 	<desugar-spx(|cu-location)>CompilationUnit([] , [appended-default-package-declaration])
 		where  appended-default-package-declaration :=  Package(Name(<default_package_name>) , moduledef*)
 
-	desugar-compilation-unit(| cu-location):
+	desugar-spx(| cu-location):
 		c at CompilationUnit(import* , package*)	-> 	CompilationUnit( import* , modified-packages)
 		where	with-spxverify( <index-compilation-unit>(cu-location, c),	!" Failed to index compilation unit"	)
-		where	<alltd(origin-track-forced(desugar-imports(|cu-location)))> import*;
-					<alltd(origin-track-forced(desugar-spx-package(|cu-location)))> package* => modified-packages
+		where	<alltd(origin-track-forced(desugar-spx(|cu-location)))> import*;
+					<alltd(origin-track-forced(desugar-spx(|cu-location)))> package* => modified-packages
 	
-	desugar-imports(|namespace):
-		i at Imports(import*) -> i
-		where	<store-import-declaration>(namespace, i)
+	desugar-spx(|namespace):
+		i at Imports(import*) -> i	where	<store-import-declaration>(namespace, i)
 								
 rules
-	
-	desugar-spx-package(|cu-location):
-		Package(Name(package-name) , modules* ) -> 
-			normalized-package-definition
-		where
-			debug-compiler(!$[Desugaring Packages [<print-as-string>package-name]])
-		where 
-			!QName([package-name]) => package-qname;
-			<desugar-spx-package(|cu-location)>Package(package-qname, modules*) => normalized-package-definition
+	desugar-spx(|cu-location):
+		Package(Name(package-name) , modules* ) -> normalized-package-definition
+		where	debug-compiler(!$[Desugaring Packages [<print-as-string>package-name]])
+		where	!QName([package-name]) => package-qname;
+					<desugar-spx(|cu-location)>Package(package-qname, modules*) => normalized-package-definition
 
-	desugar-spx-package(|cu-location):
+	desugar-spx(|cu-location):
 		p at Package(package-qname , modules* ) -> modifiedPackageDescription
 		where	!package-qname => QName(_)
 		where debug-compiler(!$[Desugaring Packages [<print-as-string>package-qname]])
@@ -90,13 +85,11 @@
 						<index-package-declaration>(Package(package-qname) , cu-location)
 						, !"Indexing Package Declaration failed"
 					)			
-		where
-			{| GetEnclosingPackageName:
-					<declare-current-package-scope>Package(package-qname);
-			   	<alltd(origin-track-forced(desugar-spx(|cu-location)))> modules*  => desugared-modules*
-			|}
-		where
-			!Package( package-qname , desugared-modules*) => modifiedPackageDescription
+		where	{| GetEnclosingPackageName:
+						 	<declare-current-package-scope>Package(package-qname);
+			   			<alltd(origin-track-forced(desugar-spx(|cu-location)))> modules*  => desugared-modules*
+					|}
+		where	!Package( package-qname , desugared-modules*) => modifiedPackageDescription
 	  
 rules
 
@@ -120,7 +113,7 @@
 						//-----------------------
 						// TODO FIX : obsolete :
 						//; sections' := <conc>(<reverse><bagof-PackageCommonImports>, <alltd( origin-track-forced(desugar-spx))>section*)
-						; sections' := <alltd( origin-track-forced(desugar-spx + desugar-imports(|enclosing-module-qname)))>section*
+						; sections' := <alltd( origin-track-forced(desugar-spx + desugar-spx(|enclosing-module-qname)))>section*
 						; dbg-symboltable(! $[ Storing enclosing namespace : [<print-as-string>enclosing-module-qname]] | "desugar-spx" , "Info")
 						; with-spxverify(
 								!Module(attrb* , modname-with-annotation , sections') => modifiedModuleDescription
@@ -133,7 +126,7 @@
 									)
 									, !"Indexing Module Declaration failed . " 		
 								)
-				  	; with-spxverify( <index-enclosed-modules>(package , enclosing-module-qname), !" Failed to index enclosed moduled")   
+				  	; with-spxverify(<index-enclosed-modules>(package , enclosing-module-qname), !" Failed to index enclosed moduled")   
 			|}
 				
 rules
@@ -151,6 +144,32 @@
 		where
     	<templatelang-desugar-sdf-top> sectionDef => sectionDef'
   
+  desugar-spx: 
+  	KeywordSection(s* , w* , None()) -> 
+  	KeywordSection( 
+  		s*
+  	, w* 
+  	, Some(
+		    FollowRestriction(
+		      single(
+		        char-class(
+		          simple-charclass(
+		            present(
+		              conc(
+		                range(short("a"), short("z"))
+		              , conc(
+		                  range(short("A"), short("Z"))
+		                , range(short("0"), short("9"))
+		                )
+		              )
+		            )
+		          )
+		        )
+		      )
+		    )
+  		)
+		) 
+		
 rules
 	//Desugaring STR sections
 	desugar-spx : 
@@ -159,9 +178,8 @@
 			<basic-stratego-desugar-top> sectionDef => sectionDef'
 				
 rules
-	//Desugaring ESV Sections
-	desugar-spx : 
-		ESVSection ( sectionDef ) -> <add-annotation(|<GetEnclosingModuleName>)> <id>
+	desugar-spx:	ESVSection ( sectionDef ) -> <add-annotation(|<GetEnclosingModuleName>)> <id>
+	
 		
 rules
 	//Desugaring template sections
@@ -170,4 +188,8 @@
   	where
   		<templatelang-desugar-top> sectionDef => sectionDef'
   		
-  
\ No newline at end of file
+rules 
+	basic-sdf-desugar-top = topdown(try(origin-track-forced(basic-sdf-desugar)))
+	
+	basic-sdf-desugar : QualifiedSort(Name(x), t2) -> QualifiedSort(QName([x]), t2)
+	  
\ No newline at end of file

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -157,7 +157,7 @@
     generate-aterm;
     normalize;
     generate-name-analysis;
-    build-incrementally-service;
+    //build-incrementally-service;
     // Completions
     editor-complete;
     // References

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -10,22 +10,34 @@
 	utils/contract
 	
 rules
-  open-spx-compilation-unit(resolve-spx-path, resolve-cache-path, parse-file, precompile):
+	
+	open-spx-compilation-unit(precompile|cache-path): 
+		(spx-compilation-unit , path) -> <id>
+		where 
+		  <precompile <+ throw-precompile-exception>( spx-compilation-unit, path);
+      if <file-exists>path then
+          <WriteToBinaryFile> (cache-path, spx-compilation-unit); // updating cache on filesystem (e.g., ignore libstratego-lib)
+          debug-compiler(!$[Updating cache for following CompilationUnit: [<print-as-string>path]]| "cache" , <debug-level-INFO>)
+      end
+     
+	
+  	//TODO : Take the following whole logic in indexing structure based on cached path and actual path.
+		//For example  - 
+  	//if <verify-indexing-needed> (cache-path, path) then
+  	//   ast := read it from file
+  	//   index-compilation-init ( path , ast) 
+  	//   <precompile> ast
+  	//else
+  	//   ast : = get-compilation-unit 
+  	//end     
+	open-spx-compilation-unit(resolve-spx-path, resolve-cache-path, parse-file, precompile):
     path -> <id>
+    where is-string
     where with-spxverify(
-    	full-path := <resolve-spx-path>path;
-    	cache-path := <resolve-cache-path> full-path;
-    	path' := <get-normalized-path> full-path
-    	//TODO : Take the following whole logic in indexing structure based on cached path and actual path.
-    	//For example  - 
-    	//if <verify-indexing-needed> (cache-path, path) then
-    	//   ast := read it from file
-    	//   index-compilation-init ( path , ast) 
-    	//   <precompile> ast
-    	//else
-    	//   ast : = get-compilation-unit 
-    	//end     
-  	)
+    				full-path := <resolve-spx-path>path;
+    				cache-path := <resolve-cache-path> full-path;
+    				path' := <get-normalized-path> full-path
+  				)
   	where with-spxverify(
 		  if <is-newer> (cache-path, path) ; not(<get-currently-analyzing-ast-from-cache> full-path)then
       	debug-compiler(! $[Already updated . Hence, doing nothing] | "cache" , <debug-level-INFO>) 
@@ -37,20 +49,7 @@
         end;
         
         debug-compiler(! $[Precompiling [path']]| "cache" , <debug-level-INFO>);
-        
-        //2. precomiling it so update the index and related artifacts
-        <precompile <+ throw-precompile-exception>( spx-compilation-unit, path');
-        
-        
-        //3. precomile is successful . Hence updating the existing cache. 
-        //   cache acts as a marker to indicate whether compilation and 
-        //   code generation is needed. 
-        //   if it is in cache and updated than source code 
-        //	it means the precompilation is not needed.
-        if <file-exists>full-path then
-          <WriteToBinaryFile> (cache-path, spx-compilation-unit); // updating cache on filesystem (e.g., ignore libstratego-lib)
-          debug-compiler(!$[Updating cache for following CompilationUnit: [<print-as-string>full-path]]| "cache" , <debug-level-INFO>)
-        end
+				<open-spx-compilation-unit( precompile | cache-path)>(spx-compilation-unit, path')
     	end
   	)		
 

Modified: spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
==============================================================================
--- spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Tue Apr 10 14:22:02 2012	(r24720)
+++ spoofax-imp/branches/adil-thesis-demo/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Tue Apr 10 14:26:25 2012	(r24721)
@@ -46,6 +46,8 @@
 		?QName(qname-parts*)
 		;<separate-by(|seperator);concat-strings>qname-parts*
 
+
+
 rules
 
 	get-output-path(|prefix, extension)= 


From gabrielkonat at gmail.com  Wed Apr 11 11:55:37 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Wed, 11 Apr 2012 09:55:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24722 -
	spoofax-contrib/separate-compilation-examples/c-without-macros/test
	spoofax-imp/trunk/experimental/NamingExperiment/lib
	spoofax/trunk/spoofax/org.spoofax.interpret...
Message-ID: <20120411095537.653337F8049@mx1.tudelft.nl>

Author: gkonat
Date: Wed Apr 11 09:55:37 2012
New Revision: 24722
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24722&sc=1

Log:
Fixed failing tests and some other small bugs.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/tests.spt
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt	Tue Apr 10 14:26:25 2012	(r24721)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt	Wed Apr 11 09:55:37 2012	(r24722)
@@ -44,24 +44,24 @@
 ]] resolve #2 to #1
 
 test Resolve property access 1 [[
-  struct B {
-    int [[i]];
+  struct C {
+    int [[n]];
   };
   
   int f() {
-    struct B* b;
-    return b->[[i]];
+    struct C* c;
+    return c->[[n]];
   }
 ]] resolve #2 to #1
 
 test Resolve property access 2 [[
-  struct B {
-    int [[i]];
+  struct D {
+    int [[k]];
   };
   
   int f() {
-    struct B b;
-    return b.[[i]];
+    struct D d;
+    return d.[[k]];
   }
 ]] resolve #2 to #1
 

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/test/tests.spt
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/test/tests.spt	Tue Apr 10 14:26:25 2012	(r24721)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/tests.spt	Wed Apr 11 09:55:37 2012	(r24722)
@@ -57,8 +57,8 @@
 ]] 1 error
 
 test Resolve var and type 1 fails [[
-	char* b(foo_t_2* a) {
-	  return a->s;
+	char* b(foo_t_2* aa) {
+	  return aa->s;
 	}
 ]] 2 errors
 
@@ -92,11 +92,7 @@
   }
 ]] 1 error
 
-test Resolve function call and type fails [[
-	void* c(foo_t_2* a) {
-	  return malloc(a);
-	} 
-]] 2 errors
+
 
 test Resolve function call [[
   A_t* f() {
@@ -106,6 +102,12 @@
   }
 ]]
 
+test Resolve function call and type fails [[
+  void* c(foo_t_2* a) {
+    return malloc(a);
+  } 
+]] 2 errors
+
 test Resolve function call fails [[
   void f() {
     A_t* a;
@@ -131,15 +133,15 @@
 ]]
 
 test Resolve typedeffed type fail (cyclic typedef) [[
-  typedef A_t A_t_1;
-  typedef A_t_1 A_t_2;
-  typedef A_t_2 A_t_1;
+  typedef A_t A_tt_1;
+  typedef A_tt_1 A_tt_2;
+  typedef A_tt_2 A_tt_1;
   
   char* f() {
-    A_t_2* a;
-    a = (A_t_2*)malloc(sizeof(A_t_2));
-    a->s="test";
-    return a->s;
+    A_tt_2* aa;
+    aa = (A_tt_2*)malloc(sizeof(A_tt_2));
+    aa->s="test";
+    return aa->s;
   }
 ]] 6 errors
 

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Tue Apr 10 14:26:25 2012	(r24721)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Wed Apr 11 09:55:37 2012	(r24722)
@@ -186,8 +186,8 @@
     with
       if 0 := <analysis-count> then // Only reanalyze if all analyses have been completed.
         diffs := <analyze-get-diffs>;
-        analyze-clean-diffs//;
-        //<queue-analysis> <debug(!"Queueing analysis for: ")> <filter(not(?(file, _)); Fst)> diffs // Don't reanalyze current file.
+        analyze-clean-diffs;
+        <queue-analysis> <debug(!"Queueing analysis for: ")> <filter(not(?(file, _)); Fst)> diffs // Don't reanalyze current file.
       end
     
   analyze-changed-filter-file(|file) = 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java	Tue Apr 10 14:26:25 2012	(r24721)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java	Wed Apr 11 09:55:37 2012	(r24722)
@@ -72,7 +72,7 @@
 		ISemanticIndex transactionIndex = currentIndex.getTransactionIndex();
 		current.set(index);
 		// TODO: Efficient copy of transactionIndex into index.
-		// TODO: Aquire lock?
+		// TODO: Acquire lock?
 		// TODO: Update revision before or after adding elements?
 		index.removeFile(currentFile.get());
 		for(SemanticIndexEntry entry : transactionIndex.getAllEntries())

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Tue Apr 10 14:26:25 2012	(r24721)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Wed Apr 11 09:55:37 2012	(r24722)
@@ -117,8 +117,8 @@
 	}
 
 	public void clear() {
+		// TODO: Should not be called
 		transactionIndex.clear();
-		index.clear();
 	}
 
 	public IStrategoTerm toTerm(boolean includePositions) {

From gabrielkonat at gmail.com  Wed Apr 11 13:03:39 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Wed, 11 Apr 2012 11:03:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24723 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20120411110339.4E634108C021@mx3.tudelft.nl>

Author: gkonat
Date: Wed Apr 11 11:03:39 2012
New Revision: 24723
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24723&sc=1

Log:
Index is cleared after every test analysis instead of just once.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Apr 11 09:55:37 2012	(r24722)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Apr 11 11:03:39 2012	(r24723)
@@ -123,6 +123,7 @@
       else
         warnings := <filter(check-expectation(|input, selections, messages''))> expectations
       end
+    ; where(spt-index-clear-file)
     ; not([]) 
    
   strip-and-record-analyzed-ast:

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Wed Apr 11 09:55:37 2012	(r24722)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Wed Apr 11 11:03:39 2012	(r24723)
@@ -41,8 +41,7 @@
         notes'    := <flatten-list> [notes, <bagof-GrabbedNotes>];
         if not([] := errors) then
             rules ( HasErrors := () )
-        end;
-        spt-index-clear-file
+        end
       | path, project-path
       )
 
@@ -141,7 +140,10 @@
       language := <origin-language> ast;
       not("Spoofax-Testing");
       {|Language:
-        rules( Language := language );
+        rules(
+          InputFile := path
+          Language := language 
+        );
         completers := <spt-get-content-proposers>;
         results   := <map(execute-service(|input-tuple))> completers;
         proposals := <getfirst(?Some(<id>))> results
@@ -156,12 +158,17 @@
       language := <origin-language> ast;
       not("Spoofax-Testing");
       {|Language:
-        rules( Language := language );
+        rules(
+          InputFile := path
+          Language := language 
+        );
         resolvers := <spt-get-reference-resolvers>;
         results   := <map(execute-service(|input-tuple))> resolvers;
         proposals := <getfirst(?Some(<id>))> results
       |}
-
+    with
+      spt-index-clear-file
+      
   origin-language =
   	prim("SSL_EXT_origin_language", <id>)
 

From gabrielkonat at gmail.com  Wed Apr 11 13:27:37 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Wed, 11 Apr 2012 11:27:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24724 -
	spoofax-contrib/separate-compilation-examples/c-without-macros/test
Message-ID: <20120411112737.088BA2B802A@mx2.tudelft.nl>

Author: gkonat
Date: Wed Apr 11 11:27:36 2012
New Revision: 24724
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24724&sc=1

Log:
Revert changes to tests.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/tests.spt

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt	Wed Apr 11 11:03:39 2012	(r24723)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt	Wed Apr 11 11:27:36 2012	(r24724)
@@ -44,24 +44,24 @@
 ]] resolve #2 to #1
 
 test Resolve property access 1 [[
-  struct C {
-    int [[n]];
+  struct B {
+    int [[i]];
   };
   
   int f() {
-    struct C* c;
-    return c->[[n]];
+    struct B* b;
+    return b->[[i]];
   }
 ]] resolve #2 to #1
 
 test Resolve property access 2 [[
-  struct D {
-    int [[k]];
+  struct B {
+    int [[i]];
   };
   
   int f() {
-    struct D d;
-    return d.[[k]];
+    struct B b;
+    return b.[[i]];
   }
 ]] resolve #2 to #1
 

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/test/tests.spt
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/test/tests.spt	Wed Apr 11 11:03:39 2012	(r24723)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/tests.spt	Wed Apr 11 11:27:36 2012	(r24724)
@@ -57,8 +57,8 @@
 ]] 1 error
 
 test Resolve var and type 1 fails [[
-	char* b(foo_t_2* aa) {
-	  return aa->s;
+	char* b(foo_t_2* a) {
+	  return a->s;
 	}
 ]] 2 errors
 
@@ -92,7 +92,11 @@
   }
 ]] 1 error
 
-
+test Resolve function call and type fails [[
+	void* c(foo_t_2* a) {
+	  return malloc(a);
+	} 
+]] 2 errors
 
 test Resolve function call [[
   A_t* f() {
@@ -102,12 +106,6 @@
   }
 ]]
 
-test Resolve function call and type fails [[
-  void* c(foo_t_2* a) {
-    return malloc(a);
-  } 
-]] 2 errors
-
 test Resolve function call fails [[
   void f() {
     A_t* a;
@@ -133,15 +131,15 @@
 ]]
 
 test Resolve typedeffed type fail (cyclic typedef) [[
-  typedef A_t A_tt_1;
-  typedef A_tt_1 A_tt_2;
-  typedef A_tt_2 A_tt_1;
+  typedef A_t A_t_1;
+  typedef A_t_1 A_t_2;
+  typedef A_t_2 A_t_1;
   
   char* f() {
-    A_tt_2* aa;
-    aa = (A_tt_2*)malloc(sizeof(A_tt_2));
-    aa->s="test";
-    return aa->s;
+    A_t_2* a;
+    a = (A_t_2*)malloc(sizeof(A_t_2));
+    a->s="test";
+    return a->s;
   }
 ]] 6 errors
 

From gabrielkonat at gmail.com  Wed Apr 11 13:37:07 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Wed, 11 Apr 2012 11:37:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24725 -
	spoofax-imp/trunk/experimental/NamingExperiment/lib
Message-ID: <20120411113707.40159108C029@mx3.tudelft.nl>

Author: gkonat
Date: Wed Apr 11 11:37:06 2012
New Revision: 24725
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24725&sc=1

Log:
Moved diff algorithms to separate part in the library.

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Wed Apr 11 11:27:36 2012	(r24724)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Wed Apr 11 11:37:06 2012	(r24725)
@@ -174,13 +174,7 @@
       end
     with
       try(post-analyze-top(|phase, language, full-path))
-
-  analyze-diff:
-    (defs1, defs2) -> (added, removed)
-    with
-      added   := <diff(index-diff-compare)> (defs2, defs1);
-      removed := <diff(index-diff-compare)> (defs1, defs2)
-  
+      
   reanalyze-all(|file):
     _ -> <id>
     with
@@ -189,80 +183,6 @@
         analyze-clean-diffs;
         <queue-analysis> <debug(!"Queueing analysis for: ")> <filter(not(?(file, _)); Fst)> diffs // Don't reanalyze current file.
       end
-    
-  analyze-changed-filter-file(|file) = 
-    ?files@(<id>, _); (is-test-file <+ index-is-fake-file <+ ?file); !files
-    
-  analyze-store-diff(|changedEntries, file, ast): 
-    _ -> <id>
-    with
-      // TODO: Optimize so that there are no duplicate files stored in the index, use iset?
-      changedFiles    := <mapconcat(index-get-files-of)> changedEntries;
-      dependentFiles  := <index-get-dependent-files> changedEntries;
-      files := <make-set> <conc> (changedFiles, dependentFiles);
-      
-      if not(<analyze-astdiff(|ast)> file) then
-      	// Add current file if the AST has changed. Cannot use dependency tracking here because
-      	// the originating file of a removed definition is not in the index any more.
-      	files' := [file|files] 
-    	else
-    		files' := files
-  		end;
-      
-      if not([] := files') then
-        <filter(analyze-add-diff)> <remove-all(analyze-changed-filter-file(|<Fst> file))> files; // Don't store own file as diff.
-        <map(analyze-add-compilediff)> files'
-      end
-      
-  // Fails if old ASTDiff is not found or if ASTDiff is different.
-  analyze-astdiff(|ast):
-    (file, subfile) -> <id>
-    where
-      storePath := <analyze-astdiff-path>;
-      newChecksum := <checksum> ast;
-      if oldChecksum := <index-get-value> Diff([ASTDiff(), file, ".internal"], ()) then
-        <index-remove-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], ())];
-        <index-add-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], newChecksum)];
-        <eq> (oldChecksum, newChecksum)
-      else
-        <index-add-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], newChecksum)];
-        fail
-      end
-      
-  // TODO: Refactor diff strategies into something nicer?
-  analyze-add-diff:
-    file -> <id>
-    with
-      <index-add-all(|<analyze-diff-path>)> [Diff([Diff(), ".internal", "analyze"], file)]
-  analyze-add-compilediff:
-    file -> <id>
-    with
-      <index-add-all(|<analyze-compilediff-path>)> [Diff([Diff(), ".internal", "compile"], file)]
-      
-  analyze-get-diffs:
-  	_ -> diffs
-  	with
-  		diffs := <make-set> <index-get-all-values> Diff([Diff(), ".internal", "analyze"], ())
-  analyze-get-compilediffs:
-    _ -> diffs
-    with
-      diffs := <make-set> <index-get-all-values> Diff([Diff(), ".internal", "compile"], ())
-      
-  analyze-clean-diffs:
-  	_ -> <id>
-  	with
-      <index-remove-all(|<analyze-diff-path>)> [Diff([Diff(), ".internal", "analyze"], ())]
-  analyze-clean-compilediffs:
-    _ -> <id>
-    with
-      <index-remove-all(|<analyze-compilediff-path>)> [Diff([Diff(), ".internal", "compile"], ())]
-  		
-  analyze-astdiff-path = 
-    !"/.internal/astdiff"
-  analyze-diff-path = 
-    !"/.internal/diff/analysis"
-  analyze-compilediff-path = 
-    !"/.internal/diff/compile"
  
   /**
    * Identifies all definitions in the tree
@@ -387,6 +307,88 @@
       appl'          := <all(\(a, _) -> a\)> appl;
       unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
  
+rules // diffs
+  
+  analyze-diff:
+    (defs1, defs2) -> (added, removed)
+    with
+      added   := <diff(index-diff-compare)> (defs2, defs1);
+      removed := <diff(index-diff-compare)> (defs1, defs2)
+    
+  analyze-changed-filter-file(|file) = 
+    ?files@(<id>, _); (is-test-file <+ index-is-fake-file <+ ?file); !files
+    
+  analyze-store-diff(|changedEntries, file, ast): 
+    _ -> <id>
+    with
+      // TODO: Optimize so that there are no duplicate files stored in the index, use iset?
+      changedFiles    := <mapconcat(index-get-files-of)> changedEntries;
+      dependentFiles  := <index-get-dependent-files> changedEntries;
+      files := <make-set> <conc> (changedFiles, dependentFiles);
+      
+      if not(<analyze-astdiff(|ast)> file) then
+        // Add current file if the AST has changed. Cannot use dependency tracking here because
+        // the originating file of a removed definition is not in the index any more.
+        files' := [file|files] 
+      else
+        files' := files
+      end;
+      
+      if not([] := files') then
+        <filter(analyze-add-diff)> <remove-all(analyze-changed-filter-file(|<Fst> file))> files; // Don't store own file as diff.
+        <map(analyze-add-compilediff)> files'
+      end
+      
+  // Fails if old ASTDiff is not found or if ASTDiff is different.
+  analyze-astdiff(|ast):
+    (file, subfile) -> <id>
+    where
+      storePath := <analyze-astdiff-path>;
+      newChecksum := <checksum> ast;
+      if oldChecksum := <index-get-value> Diff([ASTDiff(), file, ".internal"], ()) then
+        <index-remove-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], ())];
+        <index-add-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], newChecksum)];
+        <eq> (oldChecksum, newChecksum)
+      else
+        <index-add-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], newChecksum)];
+        fail
+      end
+      
+  // TODO: Refactor diff strategies into something nicer?
+  analyze-add-diff:
+    file -> <id>
+    with
+      <index-add-all(|<analyze-diff-path>)> [Diff([Diff(), ".internal", "analyze"], file)]
+  analyze-add-compilediff:
+    file -> <id>
+    with
+      <index-add-all(|<analyze-compilediff-path>)> [Diff([Diff(), ".internal", "compile"], file)]
+      
+  analyze-get-diffs:
+    _ -> diffs
+    with
+      diffs := <make-set> <index-get-all-values> Diff([Diff(), ".internal", "analyze"], ())
+  analyze-get-compilediffs:
+    _ -> diffs
+    with
+      diffs := <make-set> <index-get-all-values> Diff([Diff(), ".internal", "compile"], ())
+      
+  analyze-clean-diffs:
+    _ -> <id>
+    with
+      <index-remove-all(|<analyze-diff-path>)> [Diff([Diff(), ".internal", "analyze"], ())]
+  analyze-clean-compilediffs:
+    _ -> <id>
+    with
+      <index-remove-all(|<analyze-compilediff-path>)> [Diff([Diff(), ".internal", "compile"], ())]
+      
+  analyze-astdiff-path = 
+    !"/.internal/astdiff"
+  analyze-diff-path = 
+    !"/.internal/diff/analysis"
+  analyze-compilediff-path = 
+    !"/.internal/diff/compile"
+ 
 rules // index API primitives
  
   /**

From gabrielkonat at gmail.com  Thu Apr 12 16:37:35 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Thu, 12 Apr 2012 14:37:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24726 -
	spoofax-contrib/separate-compilation-examples/c-without-macros/trans
	spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans
	spoofax-contrib/se...
Message-ID: <20120412143735.C32CFCC05F@mx4.tudelft.nl>

Author: gkonat
Date: Thu Apr 12 14:37:33 2012
New Revision: 24726
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24726&sc=1

Log:
Working parallel analysis.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Thu Apr 12 14:37:33 2012	(r24726)
@@ -23,17 +23,17 @@
     (ast, path, project-path) -> (analysedAst, errors, warnings, notes)
     with
       editor-init;
-      ast'        := <desugar-all> ast;
-      analysedAst := <analyze-top> (ast', path, project-path);
+      ast'                          := <desugar-all> ast;
+      (analysedAst, filesToAnalyze) := <analyze-top> (ast', path, project-path);
       errors      := <collect-all(constraint-error, conc)> analysedAst;
       warnings    := <collect-all(constraint-warning, conc)> analysedAst;
-      notes       := <collect-all(constraint-note, conc)> analysedAst
+      notes       := <collect-all(constraint-note, conc)> analysedAst;
+      <editor-analyze> <map(index-filepair-to-file)> filesToAnalyze
       
   editor-analyze:
     files -> None()
     with
       not(<is-tuple> files);
-      debug;
       <queue-analysis> files
   
   // Prints the abstract syntax ATerm of a selection.

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Thu Apr 12 14:37:33 2012	(r24726)
@@ -22,16 +22,16 @@
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      ast'     := <analyze-top>;
+      (ast', filesToAnalyze) := <analyze-top>;
       errors   := <collect-all(constraint-error, conc)> ast';
       warnings := <collect-all(constraint-warning, conc)> ast';
-      notes    := <collect-all(constraint-note, conc)> ast'
+      notes    := <collect-all(constraint-note, conc)> ast';
+      <editor-analyze> <map(index-filepair-to-file)> filesToAnalyze
       
   editor-analyze:
     files -> None()
     with
       not(<is-tuple> files);
-      debug;
       <queue-analysis> files
   
   // Prints the abstract syntax ATerm of a selection.

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Thu Apr 12 14:37:33 2012	(r24726)
@@ -16,6 +16,10 @@
   generate
   generate-test
   analysis-manual
+  
+signature constructors
+
+  Results : File * AST * AST * List(Error) * List(Warning) * List(Note) * List(ReAnalyzeFile) -> Results
 
 rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
   
@@ -25,23 +29,34 @@
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      ast'      := <analyze-top>;
-      errors    := <collect-all(constraint-error, conc)> ast';
-      warnings  := <collect-all(constraint-warning, conc)> ast';
-      notes     := <collect-all(constraint-note, conc)> ast'
+      (ast', filesToAnalyze) := <analyze-top>;
+      errors   := <collect-all(constraint-error, conc)> ast';
+      warnings := <collect-all(constraint-warning, conc)> ast';
+      notes    := <collect-all(constraint-note, conc)> ast';
+      <editor-analyze> <map(index-filepair-to-file)> filesToAnalyze
       
   editor-analyze:
     files -> None()
     with
-      not(<is-tuple> files);
-      debug(!"Changed files: ");
+      not(is-tuple);
+      parallel-analyze;
+      filter(not(?Results(_, (), (),_ ,_ ,_ , _)); fake-update)
+      
+  parallel-analyze:
+  	files -> allResults
+  	with
       map(fake-parse);                                  // Parsing cannot be done in parallel.
-      map(\(ast, file) ->(ast, file, <project-path>)\);
-      debug(!"Parsed changed files: ");
+      map(\(ast, file) -> (ast, file, <project-path>)\);
       parallel-unordered(all(fake-analyze));
-      debug(!"Parallel analyzed results: ");
-      filter(not(?((),(),[],[],[])); fake-update)       // Setting markers cannot be done in parallel.
-      
+      ?results;
+      with(<eq> (<length> results, <length> files) | "Input size not equal to output size");
+      diffs := <make-set> <mapconcat(?Results(_, _, _, _, _, _, <id>))> results;
+      if not([] := diffs) then
+        allResults := <concat> [results, <parallel-analyze> diffs]
+      else
+      	allResults := results
+      end
+
   fake-parse:
     file -> (ast, file)
     where
@@ -57,17 +72,19 @@
       ast := ()
       
   fake-update:
-    (ast, ast', errors, warnings, notes) -> <set-markers(|ast)> (ast', errors, warnings, notes)
+    Results(file, ast, ast', errors, warnings, notes, diffs) -> <id>
+    with
+  		<set-markers(|ast)> (ast', errors, warnings, notes)
       
   fake-analyze:
-    (ast, path, project-path) -> (ast, ast', errors, warnings, notes)
+    (ast, path, project-path) -> Results(path, ast, ast', errors, warnings, notes, diffs')
     with
-      ast'      := <analyze-top(|Editor(), "EntityWithAspects")>;
+      AnalysedResult(ast', _, _, _, _, _, diffs) := <analyze-top-internal(|Editor(), "EntityWithAspects")>;
       errors    := <collect-all(constraint-error, conc)> ast';
       warnings  := <collect-all(constraint-warning, conc)> ast';
       notes     := <collect-all(constraint-note, conc)> ast';
-      <debug(!"Parallel analysis on: ")> path
-  
+      diffs'    := <map(index-filepair-to-file)> diffs
+      
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str	Thu Apr 12 14:37:33 2012	(r24726)
@@ -96,7 +96,7 @@
   	with
   	  index-clear; // Clear index so definitions from the index are not chosen for code generation.
   		files := <map(\n -> $[[project-path]/testgen/test_[n].ewa]\)> <range> <testgen-num-files>;
-  		<map(testgen-file)> files;
+  		<map(testgen-file)> <reverse> files;
   		index-clear  // Clean index to avoid duplicate definitions created during code generation.
   
   testgen-file:

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Thu Apr 12 14:37:33 2012	(r24726)
@@ -8,7 +8,7 @@
 signature constructors
  
   // Analyze constructors
-  AnalysedResult : AST * List(Def) * List(Use) * List(DefData) * List(Def) * List(Def) -> AnalysedResult
+  AnalysedResult : AST * List(Def) * List(Use) * List(DefData) * List(Def) * List(Def) * List(File) -> AnalysedResult
   Editor      : AnalysisPhase
   Compile     : AnalysisPhase
  
@@ -97,9 +97,9 @@
    * @see analyze-top-internal(|phase, language)
    */
   analyze-top(|phase, language):
-    (ast, path, project-path) -> ast'
+    (ast, path, project-path) -> (ast', filesToAnalyze)
     with
-      AnalysedResult(ast', _, _, _, _, _) := <analyze-top-internal(|phase, language)> (ast, path, project-path)
+      AnalysedResult(ast', _, _, _, _, _, filesToAnalyze) := <analyze-top-internal(|phase, language)> (ast, path, project-path)
   
   /**
    * Analyses given AST and annotates definition and use sites found in the AST with URIs.
@@ -113,11 +113,11 @@
   analyze-top-internal(|phase, language) = 
     ?(_, path, project-path); analyze-top-internal(|phase, language, $[[project-path]/[path]])
   analyze-top-internal(|phase, language, full-path):
-    (ast, path, project-path) -> AnalysedResult(ast5, defs, uses, data', added, removed)
+    (ast, path, project-path) -> AnalysedResult(ast5, defs, uses, data', added, removed, filesToAnalyze)
     with
       // Init
       index-setup(|language, [project-path], full-path);
-      index-start-transaction
+      revision := <index-start-transaction>
     with
       file := (full-path, ""); // TODO: Get subfile or add subfile param.
       oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file
@@ -165,25 +165,14 @@
 	      changed := <conc> (added, removed);
 	      
          // Store files that have changed in the index
-        analyze-store-diff(|changed, file, ast);
-
-	      // Schedule re-analysis of files that depend on added or removed elements
-	      reanalyze-all(|file)
+        filesToAnalyze := <analyze-store-diff(|changed, file, ast, revision)>
 	    else
-	      (added, removed) := ([], [])
+	      (added, removed) := ([], []);
+	      filesToAnalyze := []
       end
     with
       try(post-analyze-top(|phase, language, full-path))
       
-  reanalyze-all(|file):
-    _ -> <id>
-    with
-      if 0 := <analysis-count> then // Only reanalyze if all analyses have been completed.
-        diffs := <analyze-get-diffs>;
-        analyze-clean-diffs;
-        <queue-analysis> <debug(!"Queueing analysis for: ")> <filter(not(?(file, _)); Fst)> diffs // Don't reanalyze current file.
-      end
- 
   /**
    * Identifies all definitions in the tree
    * and annotates them with their URI.
@@ -318,26 +307,25 @@
   analyze-changed-filter-file(|file) = 
     ?files@(<id>, _); (is-test-file <+ index-is-fake-file <+ ?file); !files
     
-  analyze-store-diff(|changedEntries, file, ast): 
-    _ -> <id>
+  analyze-store-diff(|changedEntries, file, ast, revision): 
+    _ -> analyzeFiles
     with
       // TODO: Optimize so that there are no duplicate files stored in the index, use iset?
       changedFiles    := <mapconcat(index-get-files-of)> changedEntries;
       dependentFiles  := <index-get-dependent-files> changedEntries;
-      files := <make-set> <conc> (changedFiles, dependentFiles);
+      newInfoFiles    := <filter(where(?f; index-get-file-revision; \r -> (r, revision)\; gt; !f))> dependentFiles;
+      
+      analyzeFiles := <make-set> <remove-all(analyze-changed-filter-file(|<Fst> file))> <conc> (dependentFiles, newInfoFiles);
       
       if not(<analyze-astdiff(|ast)> file) then
         // Add current file if the AST has changed. Cannot use dependency tracking here because
         // the originating file of a removed definition is not in the index any more.
-        files' := [file|files] 
+        compileFiles := <make-set> [file|<conc> (analyzeFiles, changedFiles)]
       else
-        files' := files
+        compileFiles := <make-set> <conc> (analyzeFiles, changedFiles)
       end;
-      
-      if not([] := files') then
-        <filter(analyze-add-diff)> <remove-all(analyze-changed-filter-file(|<Fst> file))> files; // Don't store own file as diff.
-        <map(analyze-add-compilediff)> files'
-      end
+
+      <map(analyze-add-compilediff)> compileFiles
       
   // Fails if old ASTDiff is not found or if ASTDiff is different.
   analyze-astdiff(|ast):
@@ -786,6 +774,8 @@
     where
       <is-test-file> path;
       not(!language => "Spoofax-Testing")
+      
+  index-filepair-to-file = Fst; string-replace(|$[[<project-path>]/], "")
        
   index-is-name-substring(|name):
     template -> <id>

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str	Thu Apr 12 14:37:33 2012	(r24726)
@@ -50,8 +50,8 @@
     (file, subfile) -> None()
     with
       // Parse and analyze ast.
-      ast                                 := <parse-file> file;
-      AnalysedResult(ast', _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast, file, project-path)
+      ast                                    := <parse-file> file;
+      AnalysedResult(ast', _, _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast, file, project-path)
     with
       {| Index-ReadSet:
         readSet := <new-iset>;

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Thu Apr 12 14:37:33 2012	(r24726)
@@ -25,10 +25,11 @@
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      ast'     := <analyze-top>;
+      (ast', filesToAnalyze) := <analyze-top>;
       errors   := <collect-all(constraint-error, conc)> ast';
       warnings := <collect-all(constraint-warning, conc)> ast';
-      notes    := <collect-all(constraint-note, conc)> ast'
+      notes    := <collect-all(constraint-note, conc)> ast';
+      <queue-analysis> <map(index-filepair-to-file)> filesToAnalyze
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Thu Apr 12 14:37:33 2012	(r24726)
@@ -789,6 +789,7 @@
 	public void invokeFeedbackSilent(IStrategoTerm node) {
 		if (runtime == null) initialize(new NullProgressMonitor());
 		if (runtime == null) return;
+		assert getLock().isHeldByCurrentThread();
 		runtime.setCurrent(node);
 		try {
 			runtime.invoke(feedbackFunction);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_start_transaction.java	Thu Apr 12 14:37:33 2012	(r24726)
@@ -23,8 +23,8 @@
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 			throws InterpreterException {
 		IOAgent agent = SSLLibrary.instance(env).getIOAgent();
-		index.startTransaction(env.getFactory(), agent);
+		long newRev = index.startTransaction(env.getFactory(), agent);
+		env.setCurrent(env.getFactory().makeInt((int)newRev));
 		return true;
 	}
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java	Thu Apr 12 14:37:33 2012	(r24726)
@@ -32,6 +32,8 @@
 	
 	private ThreadLocal<SemanticIndexFileDescriptor> currentFile = new ThreadLocal<SemanticIndexFileDescriptor>();
 	
+	private ThreadLocal<Long> currentRevision = new ThreadLocal<Long>();
+	
 	/**
 	 * Indices by language and project. Access requires a lock on {@link #getSyncRoot}
 	 */
@@ -56,14 +58,18 @@
 		this.currentFile.set(currentFile);
 	}
 	
-	public void startTransaction(ITermFactory factory, IOAgent agent) {
+	public long startTransaction(ITermFactory factory, IOAgent agent) {
+		currentRevision.set(revisionProvider.getAndIncrement());
 		ISemanticIndex currentIndex = current.get();
+		currentIndex.getFile(currentFile.get()).setTimeRevision(new Date(), currentRevision.get().longValue());
 		
 		assert currentIndex instanceof SemanticIndex; // Prevent multiple transactions.
 		
 		ISemanticIndex transactionIndex = new SemanticIndex();
 		transactionIndex.initialize(factory, agent);
 		current.set(new TransactionSemanticIndex(currentIndex, transactionIndex));
+		
+		return currentRevision.get().longValue();
 	}
 	
 	public void endTransaction() {
@@ -73,11 +79,9 @@
 		current.set(index);
 		// TODO: Efficient copy of transactionIndex into index.
 		// TODO: Acquire lock?
-		// TODO: Update revision before or after adding elements?
 		index.removeFile(currentFile.get());
 		for(SemanticIndexEntry entry : transactionIndex.getAllEntries())
 			index.add(entry);
-		index.getFile(currentFile.get()).setTimeRevision(new Date(), revisionProvider.getAndIncrement());
 	}
 	
 	private static Object getSyncRoot() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Wed Apr 11 11:37:06 2012	(r24725)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Thu Apr 12 14:37:33 2012	(r24726)
@@ -118,6 +118,7 @@
 
 	public void clear() {
 		// TODO: Should not be called
+		assert false;
 		transactionIndex.clear();
 	}
 

From gabrielkonat at gmail.com  Thu Apr 12 16:38:26 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Thu, 12 Apr 2012 14:38:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24727 -
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel
Message-ID: <20120412143826.D4F382B8043@mx2.tudelft.nl>

Author: gkonat
Date: Thu Apr 12 14:38:26 2012
New Revision: 24727
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24727&sc=1

Log:
Fixed parallel all not waiting for all jobs to be finished.

Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelAll.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelJob.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/stratego_parallel.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelAll.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelAll.java	Thu Apr 12 14:37:33 2012	(r24726)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelAll.java	Thu Apr 12 14:38:26 2012	(r24727)
@@ -86,6 +86,7 @@
 			return context.getFactory().makeList();
 		final IStrategoTerm[] outputs = new IStrategoTerm[inputs.length];
 		final AtomicInteger focusIndex = new AtomicInteger(0); // index of the job with side effects
+		final AtomicInteger jobsCompleted = new AtomicInteger(0);
 		final AtomicBoolean isAborted = new AtomicBoolean(false);
 		final AtomicReference<String> lastSynchronousOperation = DIAGNOSE_SYNCHRONOUS_OPERATIONS ? new AtomicReference<String>() : null;
 		final AtomicReference<Throwable> lastException = new AtomicReference<Throwable>();
@@ -107,15 +108,18 @@
 		try {
 			double jobLengthPrecise = (double) inputs.length / (executor.getMaximumPoolSize() + 1) * jobLengthMultiplier;
 			int jobLength = 1 + (int) jobLengthPrecise;
+			int numJobs = (int)Math.ceil((double)inputs.length / (double)jobLength);
 			
 			if (VERBOSE)
-				System.out.print("<" + inputs.length / jobLength);
+				System.out.print("<" + numJobs);
 			
 			// Initialize job queue
 			for (int i = 0; i < inputs.length; i += jobLength) {
 				final int index = i;
-				ParallelJob job = new ParallelJob(context, s, inputs, outputs, focusIndex, isAborted, lastSynchronousOperation, lastException, allowUnordered, index, jobLength, parallelismLevel.get());
-				
+				ParallelJob job = new ParallelJob(context, s, inputs, outputs, focusIndex, isAborted, 
+						lastSynchronousOperation, lastException, allowUnordered, index, jobLength, 
+						parallelismLevel.get(), jobsCompleted);
+
 				if (DEFAULT_MAX_THREADS == 1) {
 					job.run();
 				} else if (firstJob == null) {
@@ -129,6 +133,11 @@
 				firstJob.run();
 				executor.join();
 				firstJob.waitForCompletedFocusIndex();
+				
+				synchronized(jobsCompleted) {
+					while(jobsCompleted.get() != numJobs)
+						jobsCompleted.wait();
+				}
 			}
 		} catch (InterruptedException e) {
 			throw new RuntimeException(e);

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java	Thu Apr 12 14:37:33 2012	(r24726)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java	Thu Apr 12 14:38:26 2012	(r24727)
@@ -87,20 +87,22 @@
 		
 		// protect access to IContext.getCurrent(), used by primitives
 		synchronized (ParallelAll.instance.getExecutor()) {
-			if (!DIAGNOSE_SYNCHRONOUS_OPERATIONS && job.isFocusJob())
-				return super.invokePrimitive(primitive, term, args, targs);
-			
-			if (PureOperatorSet.isWhiteListed(name))
-				return super.invokePrimitive(primitive, term, args, targs);
-			
-			if (DIAGNOSE_SYNCHRONOUS_OPERATIONS) {
-				if (lastSynchronousOperation.get() == null)
-					lastSynchronousOperation.set(name);
-			}
-			
-			if (allowUnordered) {
-				synchronized (ParallelAll.instance.getExecutor()) {
+			synchronized(ParallelContext.class) {
+				if (!DIAGNOSE_SYNCHRONOUS_OPERATIONS && job.isFocusJob())
+					return super.invokePrimitive(primitive, term, args, targs);
+				
+				if (PureOperatorSet.isWhiteListed(name))
 					return super.invokePrimitive(primitive, term, args, targs);
+				
+				if (DIAGNOSE_SYNCHRONOUS_OPERATIONS) {
+					if (lastSynchronousOperation.get() == null)
+						lastSynchronousOperation.set(name);
+				}
+				
+				if (allowUnordered) {
+					synchronized (ParallelAll.instance.getExecutor()) {
+						return super.invokePrimitive(primitive, term, args, targs);
+					}
 				}
 			}
 		}

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelJob.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelJob.java	Thu Apr 12 14:37:33 2012	(r24726)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelJob.java	Thu Apr 12 14:38:26 2012	(r24727)
@@ -42,6 +42,8 @@
 	
 	private final int parallelismLevel;
 	
+	private final AtomicInteger jobsCompleted;
+	
 	private boolean isFocusJob;
 	
 	/**
@@ -58,7 +60,7 @@
 			AtomicBoolean isAborted,
 			AtomicReference<String> lastSynchronousOperation,
 			AtomicReference<Throwable> lastException, boolean allowUnordered,
-			int startIndex, int jobLength, int parallelismLevel) {
+			int startIndex, int jobLength, int parallelismLevel, AtomicInteger jobsCompleted) {
 		
 		// TODO: put fields shared accross jobs in a separate configuration object?
 		this.parentContext = parentContext;
@@ -74,6 +76,7 @@
 		this.startIndex = startIndex;
 		this.jobLength = jobLength;
 		this.parallelismLevel = parallelismLevel;
+		this.jobsCompleted = jobsCompleted;
 	}
 
 	public final void run() {
@@ -93,6 +96,11 @@
 		
 		updateFocusIndex();
 		
+		synchronized(jobsCompleted) {
+			jobsCompleted.incrementAndGet();
+			jobsCompleted.notifyAll();
+		}
+		
 		if (ADJUST_FOCUS_THREAD_PRIORITY) {
 			Thread thread = Thread.currentThread();
 			if (thread.getPriority() != Thread.NORM_PRIORITY)

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/stratego_parallel.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/stratego_parallel.java	Thu Apr 12 14:37:33 2012	(r24726)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/stratego_parallel.java	Thu Apr 12 14:38:26 2012	(r24727)
@@ -10,7 +10,7 @@
 	
 	protected static final boolean ENABLED = true;
 	
-	protected static final boolean VERBOSE = true;
+	protected static final boolean VERBOSE = false;
 	
 	protected static final boolean DIAGNOSE_SYNCHRONOUS_OPERATIONS = false;
 	

From gabrielkonat at gmail.com  Thu Apr 12 17:03:05 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Thu, 12 Apr 2012 15:03:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24728 -
	spoofax-contrib/separate-compilation-examples/c-without-macros/trans
	spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans
	spoofax-contrib/se...
Message-ID: <20120412150305.D4354CC108@mx4.tudelft.nl>

Author: gkonat
Date: Thu Apr 12 15:03:05 2012
New Revision: 24728
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24728&sc=1

Log:
Moved parallel analysis code into library.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Thu Apr 12 14:38:26 2012	(r24727)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Thu Apr 12 15:03:05 2012	(r24728)
@@ -30,11 +30,19 @@
       notes       := <collect-all(constraint-note, conc)> analysedAst;
       <editor-analyze> <map(index-filepair-to-file)> filesToAnalyze
       
+  analyze:
+    ast -> (ast', errors, warnings, notes)
+    with
+      ast'     := <desugar-all> ast;
+      errors   := <collect-all(constraint-error, conc)> ast';
+      warnings := <collect-all(constraint-warning, conc)> ast';
+      notes    := <collect-all(constraint-note, conc)> ast'
+      
   editor-analyze:
     files -> None()
     with
-      not(<is-tuple> files);
-      <queue-analysis> files
+      not(is-tuple);
+      index-parallel-analyze-files(analyze|"C-without-macros")
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Thu Apr 12 14:38:26 2012	(r24727)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Thu Apr 12 15:03:05 2012	(r24728)
@@ -16,7 +16,7 @@
 
 rules // Main editor interface (defined by editor/CSharpPartialClassses-Builders and -References.esv)
   
-// Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
   // each a list of (term, message) tuples or simply (message) terms.
   editor-analyze:
     (ast, path, project-path) -> (ast', errors, warnings, notes)
@@ -28,11 +28,18 @@
       notes    := <collect-all(constraint-note, conc)> ast';
       <editor-analyze> <map(index-filepair-to-file)> filesToAnalyze
       
+  analyze:
+    ast -> (ast, errors, warnings, notes)
+    with
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+      
   editor-analyze:
     files -> None()
     with
-      not(<is-tuple> files);
-      <queue-analysis> files
+      not(is-tuple);
+      index-parallel-analyze-files(analyze|"CSharpPartialClassses")
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Thu Apr 12 14:38:26 2012	(r24727)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Thu Apr 12 15:03:05 2012	(r24728)
@@ -5,7 +5,6 @@
   libstratego-sglr
   libstratego-gpp
   libstratego-aterm
-  libstratego-parallel
   include/EntityWithAspects
   lib/editor-common.generated
   lib/analysis-auto.generated
@@ -16,10 +15,6 @@
   generate
   generate-test
   analysis-manual
-  
-signature constructors
-
-  Results : File * AST * AST * List(Error) * List(Warning) * List(Note) * List(ReAnalyzeFile) -> Results
 
 rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
   
@@ -35,55 +30,18 @@
       notes    := <collect-all(constraint-note, conc)> ast';
       <editor-analyze> <map(index-filepair-to-file)> filesToAnalyze
       
+  analyze:
+    ast -> (ast, errors, warnings, notes)
+    with
+      errors   := <collect-all(constraint-error, conc)> ast;
+      warnings := <collect-all(constraint-warning, conc)> ast;
+      notes    := <collect-all(constraint-note, conc)> ast
+      
   editor-analyze:
     files -> None()
     with
       not(is-tuple);
-      parallel-analyze;
-      filter(not(?Results(_, (), (),_ ,_ ,_ , _)); fake-update)
-      
-  parallel-analyze:
-  	files -> allResults
-  	with
-      map(fake-parse);                                  // Parsing cannot be done in parallel.
-      map(\(ast, file) -> (ast, file, <project-path>)\);
-      parallel-unordered(all(fake-analyze));
-      ?results;
-      with(<eq> (<length> results, <length> files) | "Input size not equal to output size");
-      diffs := <make-set> <mapconcat(?Results(_, _, _, _, _, _, <id>))> results;
-      if not([] := diffs) then
-        allResults := <concat> [results, <parallel-analyze> diffs]
-      else
-      	allResults := results
-      end
-
-  fake-parse:
-    file -> (ast, file)
-    where
-      <file-exists> file
-    with
-      ast := <parse-file> file
-      
-  fake-parse:
-    file -> (ast, file)
-    where
-      not(<file-exists> file)
-    with
-      ast := ()
-      
-  fake-update:
-    Results(file, ast, ast', errors, warnings, notes, diffs) -> <id>
-    with
-  		<set-markers(|ast)> (ast', errors, warnings, notes)
-      
-  fake-analyze:
-    (ast, path, project-path) -> Results(path, ast, ast', errors, warnings, notes, diffs')
-    with
-      AnalysedResult(ast', _, _, _, _, _, diffs) := <analyze-top-internal(|Editor(), "EntityWithAspects")>;
-      errors    := <collect-all(constraint-error, conc)> ast';
-      warnings  := <collect-all(constraint-warning, conc)> ast';
-      notes     := <collect-all(constraint-note, conc)> ast';
-      diffs'    := <map(index-filepair-to-file)> diffs
+      index-parallel-analyze-files(analyze|"EntityWithAspects")
       
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Thu Apr 12 14:38:26 2012	(r24727)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Thu Apr 12 15:03:05 2012	(r24728)
@@ -2,6 +2,7 @@
  
 imports
   libstratego-lib
+  libstratego-parallel
   lib/editor-common.generated
   lib/index-library
  
@@ -27,6 +28,9 @@
   // Adjust lookup actions
   StopLookup   : LookupAction
   
+  // Parallel
+  ParallelResults : File * AST * AST * List(Error) * List(Warning) * List(Note) * List(ReAnalyzeFile) -> ParallelResults
+  
 rules // extension points
  
   // Should return list of Def(_) and/or [namespace | path] or StopLookup() to stop the lookup
@@ -295,7 +299,57 @@
     with
       appl'          := <all(\(a, _) -> a\)> appl;
       unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
- 
+
+rules // parallel analysis
+  
+  index-parallel-analyze-files(analyze|language):
+    files -> None()
+    with
+      not(is-tuple);
+      index-parallel-analyze(analyze|language);
+      filter(not(?ParallelResults(_, (), (),_ ,_ ,_ , _)); index-set-markers)
+  
+  index-parallel-analyze(analyze|language):
+    files -> allResults
+    with
+      map(index-parse);                                  // Parsing cannot be done in parallel.
+      map(\(ast, file) -> (ast, file, <project-path>)\);
+      parallel-unordered(all(index-analyze(analyze|language)));
+      ?results;
+      with(<eq> (<length> results, <length> files) | "Input size not equal to output size");
+      diffs := <make-set> <mapconcat(?ParallelResults(_, _, _, _, _, _, <id>))> results;
+      if not([] := diffs) then
+        allResults := <concat> [results, <index-parallel-analyze(analyze|language)> diffs]
+      else
+        allResults := results
+      end
+      
+  index-parse:
+    file -> (ast, file)
+    where
+      <file-exists> file
+    with
+      ast := <parse-file> file
+      
+  index-parse:
+    file -> (ast, file)
+    where
+      not(<file-exists> file)
+    with
+      ast := ()
+      
+  index-set-markers:
+    ParallelResults(file, ast, ast', errors, warnings, notes, diffs) -> <id>
+    with
+      <set-markers(|ast)> (ast', errors, warnings, notes)
+      
+  index-analyze(analyze|language):
+    (ast, path, project-path) -> ParallelResults(path, ast, ast'', errors, warnings, notes, diffs')
+    with
+      (ast', diffs)                    := <analyze-top(|Editor(), language)>;
+      (ast'', errors, warnings, notes) := <analyze> ast';
+      diffs'                           := <map(index-filepair-to-file)> diffs
+
 rules // diffs
   
   analyze-diff:

From gabrielkonat at gmail.com  Fri Apr 13 11:36:29 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Fri, 13 Apr 2012 09:36:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24729 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20120413093629.4C3857F8015@mx1.tudelft.nl>

Author: gkonat
Date: Fri Apr 13 09:36:28 2012
New Revision: 24729
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24729&sc=1

Log:
Remove device name for correct Windows paths.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java	Thu Apr 12 15:03:05 2012	(r24728)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java	Fri Apr 13 09:36:28 2012	(r24729)
@@ -135,7 +135,7 @@
 		ITermFactory factory = Environment.getTermFactory();
 		IStrategoTerm[] terms = new IStrategoTerm[paths.length];
 		for(int i = 0; i < paths.length; ++i) {
-			terms[i] = factory.makeString(paths[i].toPortableString());
+			terms[i] = factory.makeString(paths[i].setDevice("").toPortableString());
 		}
 		IStrategoList files = factory.makeList(terms);
 		

From gabrielkonat at gmail.com  Fri Apr 13 12:22:57 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Fri, 13 Apr 2012 10:22:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24730 -
	spoofax-contrib/separate-compilation-examples/c-without-macros
	spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java
	spoofax-contrib/separate-...
Message-ID: <20120413102257.6B41ACC084@mx4.tudelft.nl>

Author: gkonat
Date: Fri Apr 13 10:22:55 2012
New Revision: 24730
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24730&sc=1

Log:
Added Eclipse progress monitor for multi-file (parallel) analyses.
Cleaned up the main stratego files in separate compilation examples.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/   (props changed)
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/java/   (props changed)
   spoofax-contrib/separate-compilation-examples/c-without-macros/lib/   (props changed)
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/   (props changed)
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/java/   (props changed)
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/lib/   (props changed)
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/   (props changed)
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/java/   (props changed)
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/lib/   (props changed)
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Fri Apr 13 09:36:28 2012	(r24729)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Fri Apr 13 10:22:55 2012	(r24730)
@@ -17,32 +17,38 @@
 
 rules // Main editor interface (defined by editor/C-without-macros-Builders and -References.esv)
   
-  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
-  // each a list of (term, message) tuples or simply (message) terms.
+  // Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
+  // files that should be re-analyzed.
+  analyze:
+    (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
+    with
+      ast'                    := <desugar-all> ast; // Optional AST desugaring
+      (ast'', filesToAnalyze) := <analyze-top(|Editor(), "C-without-macros")> (ast', path, project-path);
+      errors                  := <collect-all(constraint-error, conc)> ast'';
+      warnings                := <collect-all(constraint-warning, conc)> ast'';
+      notes                   := <collect-all(constraint-note, conc)> ast'';
+      filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
+
+  // Main entry point for analyzes, called when a single file is opened in the editor.
   editor-analyze:
-    (ast, path, project-path) -> (analysedAst, errors, warnings, notes)
+    (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      ast'                          := <desugar-all> ast;
-      (analysedAst, filesToAnalyze) := <analyze-top> (ast', path, project-path);
-      errors      := <collect-all(constraint-error, conc)> analysedAst;
-      warnings    := <collect-all(constraint-warning, conc)> analysedAst;
-      notes       := <collect-all(constraint-note, conc)> analysedAst;
-      <editor-analyze> <map(index-filepair-to-file)> filesToAnalyze
-      
-  analyze:
-    ast -> (ast', errors, warnings, notes)
-    with
-      ast'     := <desugar-all> ast;
-      errors   := <collect-all(constraint-error, conc)> ast';
-      warnings := <collect-all(constraint-warning, conc)> ast';
-      notes    := <collect-all(constraint-note, conc)> ast'
+      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
+      <editor-analyze> filesToAnalyze
       
+  // Main entry point for analyzes, called when multiple (changed) files have changed. 
   editor-analyze:
     files -> None()
     with
       not(is-tuple);
-      index-parallel-analyze-files(analyze|"C-without-macros")
+      queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+      
+  // Executes parallel analysis using the index library.
+  editor-parallel-analyze:
+    files -> None()
+    with
+      index-parallel-analyze-files(analyze)
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh	Fri Apr 13 09:36:28 2012	(r24729)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/test/example.csh	Fri Apr 13 10:22:55 2012	(r24730)
@@ -1,5 +1,4 @@
-namespace Web
-{
+namespace Web {
 	partial class URL {
 		string location;
 	}

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Fri Apr 13 09:36:28 2012	(r24729)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Fri Apr 13 10:22:55 2012	(r24730)
@@ -16,30 +16,38 @@
 
 rules // Main editor interface (defined by editor/CSharpPartialClassses-Builders and -References.esv)
   
-  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
-  // each a list of (term, message) tuples or simply (message) terms.
+  // Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
+  // files that should be re-analyzed.
+  analyze:
+    (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
+    with
+      ast'                    := <id> ast; // Optional AST desugaring
+      (ast'', filesToAnalyze) := <analyze-top(|Editor(), "CSharpPartialClassses")> (ast', path, project-path);
+      errors                  := <collect-all(constraint-error, conc)> ast'';
+      warnings                := <collect-all(constraint-warning, conc)> ast'';
+      notes                   := <collect-all(constraint-note, conc)> ast'';
+      filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
+
+  // Main entry point for analyzes, called when a single file is opened in the editor.
   editor-analyze:
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      (ast', filesToAnalyze) := <analyze-top>;
-      errors   := <collect-all(constraint-error, conc)> ast';
-      warnings := <collect-all(constraint-warning, conc)> ast';
-      notes    := <collect-all(constraint-note, conc)> ast';
-      <editor-analyze> <map(index-filepair-to-file)> filesToAnalyze
-      
-  analyze:
-    ast -> (ast, errors, warnings, notes)
-    with
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := <collect-all(constraint-warning, conc)> ast;
-      notes    := <collect-all(constraint-note, conc)> ast
+      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
+      <editor-analyze> filesToAnalyze
       
+  // Main entry point for analyzes, called when multiple (changed) files have changed. 
   editor-analyze:
     files -> None()
     with
       not(is-tuple);
-      index-parallel-analyze-files(analyze|"CSharpPartialClassses")
+      queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+      
+  // Executes parallel analysis using the index library.
+  editor-parallel-analyze:
+    files -> None()
+    with
+      index-parallel-analyze-files(analyze)
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Fri Apr 13 09:36:28 2012	(r24729)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Fri Apr 13 10:22:55 2012	(r24730)
@@ -16,32 +16,40 @@
   generate-test
   analysis-manual
 
-rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
+rules // Main editor interface (defined by editor/EntityWithAspects-Builders and -References.esv)
   
-  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
-  // each a list of (term, message) tuples or simply (message) terms.
+	// Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
+	// files that should be re-analyzed.
+  analyze:
+    (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
+    with
+      ast'                    := <id> ast; // Optional AST desugaring
+      (ast'', filesToAnalyze) := <analyze-top(|Editor(), "EntityWithAspects")> (ast', path, project-path);
+      errors                  := <collect-all(constraint-error, conc)> ast'';
+      warnings                := <collect-all(constraint-warning, conc)> ast'';
+      notes                   := <collect-all(constraint-note, conc)> ast'';
+      filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
+
+  // Main entry point for analyzes, called when a single file is opened in the editor.
   editor-analyze:
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      (ast', filesToAnalyze) := <analyze-top>;
-      errors   := <collect-all(constraint-error, conc)> ast';
-      warnings := <collect-all(constraint-warning, conc)> ast';
-      notes    := <collect-all(constraint-note, conc)> ast';
-      <editor-analyze> <map(index-filepair-to-file)> filesToAnalyze
-      
-  analyze:
-    ast -> (ast, errors, warnings, notes)
-    with
-      errors   := <collect-all(constraint-error, conc)> ast;
-      warnings := <collect-all(constraint-warning, conc)> ast;
-      notes    := <collect-all(constraint-note, conc)> ast
+      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
+      <editor-analyze> filesToAnalyze
       
+  // Main entry point for analyzes, called when multiple (changed) files have changed. 
   editor-analyze:
     files -> None()
     with
       not(is-tuple);
-      index-parallel-analyze-files(analyze|"EntityWithAspects")
+      queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+      
+  // Executes parallel analysis using the index library.
+  editor-parallel-analyze:
+    files -> None()
+    with
+      index-parallel-analyze-files(analyze)
       
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str	Fri Apr 13 09:36:28 2012	(r24729)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str	Fri Apr 13 10:22:55 2012	(r24730)
@@ -15,7 +15,7 @@
   testgen-internal-file = !"/.internal/testgen"
   testgen-module-name = !"TestGen"
   
-  testgen-num-files = !50
+  testgen-num-files = !100
   
   testgen-min-entities = !1
   testgen-max-entities = !5

Modified: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv	Fri Apr 13 09:36:28 2012	(r24729)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv	Fri Apr 13 10:22:55 2012	(r24730)
@@ -14,7 +14,7 @@
   provider : include/namingexperiment.ctree                                                                   
   provider : include/namingexperiment-java.jar                                                                
                                                                                                               
-  observer : editor-analyze                                                                                   
+  observer : editor-analyze (multifile)                                                                                  
                                                                                                               
   builder  : "Show abstract syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
   builder  : "Show analyzed syntax" = generate-analyzed (openeditor) (realtime) (source)

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Fri Apr 13 09:36:28 2012	(r24729)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Fri Apr 13 10:22:55 2012	(r24730)
@@ -29,7 +29,7 @@
   StopLookup   : LookupAction
   
   // Parallel
-  ParallelResults : File * AST * AST * List(Error) * List(Warning) * List(Note) * List(ReAnalyzeFile) -> ParallelResults
+  ParallelResults : AST * AST * List(Error) * List(Warning) * List(Note) * List(ReAnalyzeFile) -> ParallelResults
   
 rules // extension points
  
@@ -302,53 +302,52 @@
 
 rules // parallel analysis
   
-  index-parallel-analyze-files(analyze|language):
+  
+  index-parallel-analyze-files(analyze):
     files -> None()
     with
-      not(is-tuple);
-      index-parallel-analyze(analyze|language);
-      filter(not(?ParallelResults(_, (), (),_ ,_ ,_ , _)); index-set-markers)
+      length; 
+      set-total-work-units
+    with
+      index-parallel-analyze(analyze);
+      filter(not(?ParallelResults((), (), _, _, _, _)); index-set-markers)
   
-  index-parallel-analyze(analyze|language):
+  index-parallel-analyze(analyze):
     files -> allResults
     with
-      map(index-parse);                                  // Parsing cannot be done in parallel.
+      map(index-parse-file); // Parsing cannot be done in parallel.
       map(\(ast, file) -> (ast, file, <project-path>)\);
-      parallel-unordered(all(index-analyze(analyze|language)));
+      parallel-unordered(all(index-analyze(analyze)));
       ?results;
       with(<eq> (<length> results, <length> files) | "Input size not equal to output size");
-      diffs := <make-set> <mapconcat(?ParallelResults(_, _, _, _, _, _, <id>))> results;
-      if not([] := diffs) then
-        allResults := <concat> [results, <index-parallel-analyze(analyze|language)> diffs]
+      filesToAnalyze := <make-set> <mapconcat(?ParallelResults(_, _, _, _, _, <id>))> results;
+      if not([] := filesToAnalyze) then
+        allResults := <concat> [results, <index-parallel-analyze(analyze)> filesToAnalyze]
       else
         allResults := results
       end
       
-  index-parse:
+  index-parse-file:
     file -> (ast, file)
-    where
-      <file-exists> file
     with
+    if <file-exists> file then
       ast := <parse-file> file
-      
-  index-parse:
-    file -> (ast, file)
-    where
-      not(<file-exists> file)
-    with
+    else
       ast := ()
+    end
       
   index-set-markers:
-    ParallelResults(file, ast, ast', errors, warnings, notes, diffs) -> <id>
+    ParallelResults(ast, ast', errors, warnings, notes, diffs) -> <id>
     with
       <set-markers(|ast)> (ast', errors, warnings, notes)
       
-  index-analyze(analyze|language):
-    (ast, path, project-path) -> ParallelResults(path, ast, ast'', errors, warnings, notes, diffs')
+  index-analyze(analyze):
+    (ast, path, project-path) -> ParallelResults(ast, ast', errors, warnings, notes, filesToAnalyze)
     with
-      (ast', diffs)                    := <analyze-top(|Editor(), language)>;
-      (ast'', errors, warnings, notes) := <analyze> ast';
-      diffs'                           := <map(index-filepair-to-file)> diffs
+      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
+      if [] := filesToAnalyze then
+        complete-work-unit
+      end
 
 rules // diffs
   

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Fri Apr 13 09:36:28 2012	(r24729)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Fri Apr 13 10:22:55 2012	(r24730)
@@ -19,17 +19,38 @@
 
 rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
   
-  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
-  // each a list of (term, message) tuples or simply (message) terms.
+  // Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
+  // files that should be re-analyzed.
+  analyze:
+    (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
+    with
+      ast'                    := <id> ast; // Optional AST desugaring
+      (ast'', filesToAnalyze) := <analyze-top(|Editor(), "NamingExperiment")> (ast', path, project-path);
+      errors                  := <collect-all(constraint-error, conc)> ast'';
+      warnings                := <collect-all(constraint-warning, conc)> ast'';
+      notes                   := <collect-all(constraint-note, conc)> ast'';
+      filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
+
+  // Main entry point for analyzes, called when a single file is opened in the editor.
   editor-analyze:
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      (ast', filesToAnalyze) := <analyze-top>;
-      errors   := <collect-all(constraint-error, conc)> ast';
-      warnings := <collect-all(constraint-warning, conc)> ast';
-      notes    := <collect-all(constraint-note, conc)> ast';
-      <queue-analysis> <map(index-filepair-to-file)> filesToAnalyze
+      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
+      <editor-analyze> filesToAnalyze
+      
+  // Main entry point for analyzes, called when multiple (changed) files have changed. 
+  editor-analyze:
+    files -> None()
+    with
+      not(is-tuple);
+      queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+      
+  // Executes parallel analysis using the index library.
+  editor-parallel-analyze:
+    files -> None()
+    with
+      index-parallel-analyze-files(analyze)
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:
@@ -51,14 +72,14 @@
     with
       editor-init;
       filename := <guarantee-extension(|"analyzed.aterm")> path;
-      AnalysedResult(_, result, _, _, _, _) := <analyze-top-internal> (selected, path, project-path)
+      AnalysedResult(_, result, _, _, _, _, _) := <analyze-top-internal> (selected, path, project-path)
   
   generate-uses:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       editor-init;
       filename := <guarantee-extension(|"analyzed.aterm")> path;
-      AnalysedResult(_, _, result, _, _, _) := <analyze-top-internal> (selected, path, project-path)
+      AnalysedResult(_, _, result, _, _, _, _) := <analyze-top-internal> (selected, path, project-path)
   
   /*
   generate-reads:

From gabrielkonat at gmail.com  Fri Apr 13 12:50:38 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Fri, 13 Apr 2012 10:50:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24731 -
	spoofax-imp/trunk/experimental/NamingExperiment/lib
Message-ID: <20120413105038.36DD2108C022@mx3.tudelft.nl>

Author: gkonat
Date: Fri Apr 13 10:50:37 2012
New Revision: 24731
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24731&sc=1

Log:
Better outdated revision check.

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Fri Apr 13 10:22:55 2012	(r24730)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Fri Apr 13 10:50:37 2012	(r24731)
@@ -302,7 +302,6 @@
 
 rules // parallel analysis
   
-  
   index-parallel-analyze-files(analyze):
     files -> None()
     with
@@ -361,24 +360,33 @@
     ?files@(<id>, _); (is-test-file <+ index-is-fake-file <+ ?file); !files
     
   analyze-store-diff(|changedEntries, file, ast, revision): 
-    _ -> analyzeFiles
+    _ -> analyzeFiles'
     with
-      // TODO: Optimize so that there are no duplicate files stored in the index, use iset?
       changedFiles    := <mapconcat(index-get-files-of)> changedEntries;
       dependentFiles  := <index-get-dependent-files> changedEntries;
-      newInfoFiles    := <filter(where(?f; index-get-file-revision; \r -> (r, revision)\; gt; !f))> dependentFiles;
       
-      analyzeFiles := <make-set> <remove-all(analyze-changed-filter-file(|<Fst> file))> <conc> (dependentFiles, newInfoFiles);
+      // Files to analyze
+      analyzeFiles := <remove-all(analyze-changed-filter-file(|<Fst> file))> dependentFiles;
+      if <elem(index-get-file-revision; \r -> (r, revision)\; gt)> dependentFiles then
+        // Add current file if the current file has read information from another file with a higher revision.
+        // This indicates that potentially outdated information was read.
+        analyzeFiles' := <make-set> [file|analyzeFiles]
+      else
+        analyzeFiles' := <make-set> analyzeFiles
+      end;
       
+      // Files to compile
+      compileFiles := <conc> (analyzeFiles, changedFiles);
       if not(<analyze-astdiff(|ast)> file) then
         // Add current file if the AST has changed. Cannot use dependency tracking here because
         // the originating file of a removed definition is not in the index any more.
-        compileFiles := <make-set> [file|<conc> (analyzeFiles, changedFiles)]
+        // TODO: Is this still true?
+        compileFiles' := <make-set> [file|compileFiles]
       else
-        compileFiles := <make-set> <conc> (analyzeFiles, changedFiles)
+        compileFiles' := <make-set> compileFiles
       end;
-
-      <map(analyze-add-compilediff)> compileFiles
+      // TODO: Optimize so that there are no duplicate files stored in the index, use iset?
+      <map(analyze-add-compilediff)> compileFiles'
       
   // Fails if old ASTDiff is not found or if ASTDiff is different.
   analyze-astdiff(|ast):

From gabrielkonat at gmail.com  Fri Apr 13 15:59:14 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Fri, 13 Apr 2012 13:59:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24732 -
	spoofax-contrib/separate-compilation-examples/c-without-macros/editor
	spoofax-contrib/separate-compilation-examples/c-without-macros/trans
	spoofax-contrib/separate...
Message-ID: <20120413135914.B2442CC06E@mx4.tudelft.nl>

Author: gkonat
Date: Fri Apr 13 13:59:14 2012
New Revision: 24732
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24732&sc=1

Log:
Added index global storage helpers.
Refactored parts of the index library to use the global storage helpers.
Fixed new files not being compiled after analysis.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/editor/C-without-macros-Builders.esv	Fri Apr 13 13:59:14 2012	(r24732)
@@ -26,4 +26,4 @@
 
   pretty-print : pp-c_without_macros-string
   
-  on save: index-on-save
\ No newline at end of file
+  on save: editor-save
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Fri Apr 13 13:59:14 2012	(r24732)
@@ -2,7 +2,6 @@
 
 imports
   libstratego-lib
-  libstratego-gpp
   libstratego-aterm
   include/C-without-macros
   lib/editor-common.generated
@@ -17,13 +16,16 @@
 
 rules // Main editor interface (defined by editor/C-without-macros-Builders and -References.esv)
   
+  // Defines the current language.
+  language = !"C-without-macros"
+  
   // Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
   // files that should be re-analyzed.
   analyze:
     (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
     with
       ast'                    := <desugar-all> ast; // Optional AST desugaring
-      (ast'', filesToAnalyze) := <analyze-top(|Editor(), "C-without-macros")> (ast', path, project-path);
+      (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
@@ -35,20 +37,32 @@
     with
       editor-init;
       (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
-      <editor-analyze> filesToAnalyze
+      <editor-queue-analysis> filesToAnalyze
       
   // Main entry point for analyzes, called when multiple (changed) files have changed. 
   editor-analyze:
     files -> None()
+    where
+      not(is-tuple)
+    with
+      index-setup(|<language>, [<project-path>], ".");
+      disable-commit-and-compile
+    with
+      editor-queue-analysis
     with
-      not(is-tuple);
-      queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+      <enable-commit-and-compile> <language>;
+      <trigger-commit-and-compile> <language>
       
-  // Executes parallel analysis using the index library.
-  editor-parallel-analyze:
-    files -> None()
+  // Called when current file is saved.
+  editor-save:
+    (ast, _, _, _, _) -> None()
     with
-      index-parallel-analyze-files(analyze)
+      language  := <index-origin-language> ast;
+      index-setup(|language, [<project-path>], ".");
+      <trigger-commit-and-compile> language
+      
+  // Queue parallel analysis for given list of files.
+  editor-queue-analysis = queue-strategy(|"editor-parallel-analyze", "Analyzing files")
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/editor/CSharpPartialClassses-Builders.esv	Fri Apr 13 13:59:14 2012	(r24732)
@@ -26,4 +26,4 @@
 
   pretty-print : pp-csharppartialclassses-string
 
-  on save: index-on-save
\ No newline at end of file
+  on save: editor-save
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Fri Apr 13 13:59:14 2012	(r24732)
@@ -2,7 +2,6 @@
 
 imports
   libstratego-lib
-  libstratego-gpp
   libstratego-aterm
   include/CSharpPartialClassses
   lib/editor-common.generated
@@ -16,13 +15,16 @@
 
 rules // Main editor interface (defined by editor/CSharpPartialClassses-Builders and -References.esv)
   
+  // Defines the current language.
+  language = !"CSharpPartialClassses"
+  
   // Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
   // files that should be re-analyzed.
   analyze:
     (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
     with
       ast'                    := <id> ast; // Optional AST desugaring
-      (ast'', filesToAnalyze) := <analyze-top(|Editor(), "CSharpPartialClassses")> (ast', path, project-path);
+      (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
@@ -34,14 +36,32 @@
     with
       editor-init;
       (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
-      <editor-analyze> filesToAnalyze
+      <editor-queue-analysis> filesToAnalyze
       
   // Main entry point for analyzes, called when multiple (changed) files have changed. 
   editor-analyze:
     files -> None()
+    where
+      not(is-tuple)
+    with
+      index-setup(|<language>, [<project-path>], ".");
+      disable-commit-and-compile
+    with
+      editor-queue-analysis
     with
-      not(is-tuple);
-      queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+      <enable-commit-and-compile> <language>;
+      <trigger-commit-and-compile> <language>
+      
+  // Called when current file is saved.
+  editor-save:
+    (ast, _, _, _, _) -> None()
+    with
+      language  := <index-origin-language> ast;
+      index-setup(|language, [<project-path>], ".");
+      <trigger-commit-and-compile> language
+      
+  // Queue parallel analysis for given list of files.
+  editor-queue-analysis = queue-strategy(|"editor-parallel-analyze", "Analyzing files")
       
   // Executes parallel analysis using the index library.
   editor-parallel-analyze:

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/editor/EntityWithAspects-Builders.esv	Fri Apr 13 13:59:14 2012	(r24732)
@@ -30,4 +30,4 @@
   refactoring ID            : "Rename Entity"  = rename-entity (source) (cursor)
   refactoring Property *    : "Extract Entity" = extract-entity (source)
   
-  on save: index-on-save
\ No newline at end of file
+  on save: editor-save
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Fri Apr 13 13:59:14 2012	(r24732)
@@ -2,8 +2,6 @@
 
 imports
   libstratego-lib
-  libstratego-sglr
-  libstratego-gpp
   libstratego-aterm
   include/EntityWithAspects
   lib/editor-common.generated
@@ -18,13 +16,16 @@
 
 rules // Main editor interface (defined by editor/EntityWithAspects-Builders and -References.esv)
   
+  // Defines the current language.
+  language = !"EntityWithAspects"
+  
 	// Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
 	// files that should be re-analyzed.
   analyze:
     (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
     with
       ast'                    := <id> ast; // Optional AST desugaring
-      (ast'', filesToAnalyze) := <analyze-top(|Editor(), "EntityWithAspects")> (ast', path, project-path);
+      (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
@@ -36,14 +37,32 @@
     with
       editor-init;
       (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
-      <editor-analyze> filesToAnalyze
+      <editor-queue-analysis> filesToAnalyze
       
   // Main entry point for analyzes, called when multiple (changed) files have changed. 
   editor-analyze:
     files -> None()
+    where
+      not(is-tuple)
+    with
+    	index-setup(|<language>, [<project-path>], ".");
+      disable-commit-and-compile
+    with
+      editor-queue-analysis
     with
-      not(is-tuple);
-      queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+      <enable-commit-and-compile> <language>;
+      <trigger-commit-and-compile> <language>
+      
+  // Called when current file is saved.
+  editor-save:
+    (ast, _, _, _, _) -> None()
+    with
+      language  := <index-origin-language> ast;
+      index-setup(|language, [<project-path>], ".");
+      <trigger-commit-and-compile> language
+      
+  // Queue parallel analysis for given list of files.
+  editor-queue-analysis = queue-strategy(|"editor-parallel-analyze", "Analyzing files")
       
   // Executes parallel analysis using the index library.
   editor-parallel-analyze:

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate.str	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate.str	Fri Apr 13 13:59:14 2012	(r24732)
@@ -39,8 +39,7 @@
       writePath := $[[full-path]/java/];
       writeFile :=  $[[writePath][filename]];
       try(<mkdir> writePath);
-      <fclose> <fputs> (java, <fopen> (writeFile, "w"));
-      <debug> $[Compiling to [writeFile]]
+      <fclose> <fputs> (java, <fopen> (writeFile, "w"))
 
 rules // Code generation to java strings
 	

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Fri Apr 13 13:59:14 2012	(r24732)
@@ -9,7 +9,7 @@
 signature constructors
  
   // Analyze constructors
-  AnalysedResult : AST * List(Def) * List(Use) * List(DefData) * List(Def) * List(Def) * List(File) -> AnalysedResult
+  Results     : AST * List(Def) * List(Use) * List(DefData) * List(Def) * List(Def) * List(File) -> Results
   Editor      : AnalysisPhase
   Compile     : AnalysisPhase
  
@@ -29,7 +29,7 @@
   StopLookup   : LookupAction
   
   // Parallel
-  ParallelResults : AST * AST * List(Error) * List(Warning) * List(Note) * List(ReAnalyzeFile) -> ParallelResults
+  ParallelResults : AST * AST * List(Error) * List(Warning) * List(Note) * List(File) -> ParallelResults
   
 rules // extension points
  
@@ -68,8 +68,6 @@
     (Def(u1), Def(u2)) -> <id>
     where
        <index-uri-eq> (u1, u2)
-       
-  post-analyze-top(|phase, language, full-path) = fail
  
 rules // analysis traversals
   
@@ -92,10 +90,9 @@
   /**
    * Analyses given AST and annotates definition and use sites found in the AST with URIs.
    *
-   * @param phase     The type of analysis phase. There are currently 2 phases to choose from:
-   *                  - Editor():   All information is stored into the index and dependent files
-   *                                are automatically scheduled for re-analysis.
-   *                  - Compile():  No information is stored and no re-analysis is done.
+   * @param phase     The type of analysis phase. There are 2 phases to choose from:
+   *                  - Editor():   File dependencies are analysed and returned.
+   *                  - Compile():  File dependencies are not analysed and empty lists are returned.
    * @param language  The name of the language that is being analysed.
    *
    * @see analyze-top-internal(|phase, language)
@@ -103,7 +100,7 @@
   analyze-top(|phase, language):
     (ast, path, project-path) -> (ast', filesToAnalyze)
     with
-      AnalysedResult(ast', _, _, _, _, _, filesToAnalyze) := <analyze-top-internal(|phase, language)> (ast, path, project-path)
+      Results(ast', _, _, _, _, _, filesToAnalyze) := <analyze-top-internal(|phase, language)> (ast, path, project-path)
   
   /**
    * Analyses given AST and annotates definition and use sites found in the AST with URIs.
@@ -117,7 +114,7 @@
   analyze-top-internal(|phase, language) = 
     ?(_, path, project-path); analyze-top-internal(|phase, language, $[[project-path]/[path]])
   analyze-top-internal(|phase, language, full-path):
-    (ast, path, project-path) -> AnalysedResult(ast5, defs, uses, data', added, removed, filesToAnalyze)
+    (ast, path, project-path) -> Results(ast5, defs, uses, data', added, removed, filesToAnalyze)
     with
       // Init
       index-setup(|language, [project-path], full-path);
@@ -174,8 +171,6 @@
 	      (added, removed) := ([], []);
 	      filesToAnalyze := []
       end
-    with
-      try(post-analyze-top(|phase, language, full-path))
       
   /**
    * Identifies all definitions in the tree
@@ -289,17 +284,7 @@
       else
         <iset-add(|t)> set
       end
- 
-  /**
-   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
-   * to a tuple (C(a1, a2), [b1, b2, b3]).
-   */
-  unzip-analyzed:
-    appl -> (appl', unzipped-parts)
-    with
-      appl'          := <all(\(a, _) -> a\)> appl;
-      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
-
+  
 rules // parallel analysis
   
   index-parallel-analyze-files(analyze):
@@ -392,51 +377,21 @@
   analyze-astdiff(|ast):
     (file, subfile) -> <id>
     where
-      storePath := <analyze-astdiff-path>;
+      name := [subfile, file, "ast-diff"];
       newChecksum := <checksum> ast;
-      if oldChecksum := <index-get-value> Diff([ASTDiff(), file, ".internal"], ()) then
-        <index-remove-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], ())];
-        <index-add-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], newChecksum)];
+      if oldChecksum := <index-get-global(|name)> then
+      	<index-set-global(|name)> newChecksum;
         <eq> (oldChecksum, newChecksum)
       else
-        <index-add-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], newChecksum)];
+        <index-add-global(|name)> newChecksum;
         fail
       end
       
-  // TODO: Refactor diff strategies into something nicer?
-  analyze-add-diff:
-    file -> <id>
-    with
-      <index-add-all(|<analyze-diff-path>)> [Diff([Diff(), ".internal", "analyze"], file)]
-  analyze-add-compilediff:
-    file -> <id>
-    with
-      <index-add-all(|<analyze-compilediff-path>)> [Diff([Diff(), ".internal", "compile"], file)]
-      
-  analyze-get-diffs:
-    _ -> diffs
-    with
-      diffs := <make-set> <index-get-all-values> Diff([Diff(), ".internal", "analyze"], ())
-  analyze-get-compilediffs:
-    _ -> diffs
-    with
-      diffs := <make-set> <index-get-all-values> Diff([Diff(), ".internal", "compile"], ())
-      
-  analyze-clean-diffs:
-    _ -> <id>
-    with
-      <index-remove-all(|<analyze-diff-path>)> [Diff([Diff(), ".internal", "analyze"], ())]
-  analyze-clean-compilediffs:
-    _ -> <id>
-    with
-      <index-remove-all(|<analyze-compilediff-path>)> [Diff([Diff(), ".internal", "compile"], ())]
-      
-  analyze-astdiff-path = 
-    !"/.internal/astdiff"
-  analyze-diff-path = 
-    !"/.internal/diff/analysis"
-  analyze-compilediff-path = 
-    !"/.internal/diff/compile"
+  // Adds given file to the list of files to compile.
+  analyze-add-compilediff = index-add-global(|"compile-diff")
+  
+  // Gets the list of files to compile, and then clear it.
+  analyze-get-compilediffs = index-get-all-globals(|"compile-diff"); index-clear-global(|"compile-diff")
  
 rules // index API primitives
  
@@ -828,6 +783,16 @@
        
   index-origin-language = (origin-term <+ id); prim("SSL_EXT_origin_language", <id>)
        
+  /**
+   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
+   * to a tuple (C(a1, a2), [b1, b2, b3]).
+   */
+  unzip-analyzed:
+    appl -> (appl', unzipped-parts)
+    with
+      appl'          := <all(\(a, _) -> a\)> appl;
+      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
+       
   // Tests if the current file is just a testing language input
   is-test-file = string-ends-with(|".spt")
   is-test-input(|language):

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str	Fri Apr 13 13:59:14 2012	(r24732)
@@ -14,29 +14,22 @@
 rules // Compilation
   
   index-schedule-compilation:
-    <with(?(_, _, _) | "(ast, path, project-path) tuple expected")> -> None()
+    _ -> None()
     with
-      queue-strategy(|"index-compilation", "Compiling!")
-    
-  index-compilation:
-    (ast, path, project-path) -> <index-compilation(|path, project-path)> ast
+      queue-strategy(|"index-compilation", "Compiling files")
   
-  index-compilation(|path, project-path):
-    ast -> None()
+  index-compilation:
+    language -> None()
     with
       // Init
-      full-path := $[[project-path]/[path]];
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], full-path)
+      project-path := <project-path>;
+      index-setup(|language, [project-path], ".")
     with
       // Determine the files to compile by looking at changed files
       diffs         := <analyze-get-compilediffs>;
       files         := <map(index-compilation-restore-read-file)> diffs;
       filteredFiles := <make-set> <remove-all(index-compilation-filter-file)> files;
       
-      // Clean compile diffs
-      analyze-clean-compilediffs;
-      
       // Clean compile time reads
       <filter(index-compilation-clean-reads)> filteredFiles;
       
@@ -50,8 +43,8 @@
     (file, subfile) -> None()
     with
       // Parse and analyze ast.
-      ast                                    := <parse-file> file;
-      AnalysedResult(ast', _, _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast, file, project-path)
+      ast                             := <parse-file> file;
+      Results(ast', _, _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast, file, project-path)
     with
       {| Index-ReadSet:
         readSet := <new-iset>;
@@ -84,61 +77,31 @@
   index-compilation-read-path =
     !"/.internal/reads/compile"
     
-signature constructors // On save handling
-
-  CommitAndCompile : List(UriPart) -> Summary
-  CommitAndCompile : Namespace
-    
 rules // On save handling
   
   commit-and-compile:
-    (_, path, project-path) -> <id>
+    language -> None()
     with
       index-commit
     with
       index-schedule-compilation
-  
-  index-on-save:
-    (ast, _, _, path, project-path) -> None()
-    with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
-      if 0 := <analysis-count> then
-        disable-commit-and-compile;
-        <commit-and-compile> (ast, path, project-path)
-      else
-        enable-commit-and-compile
-      end
-      
-  post-analyze-top(|phase, language, full-path):
-    _ -> <id>
-    with
-      if Editor() := phase then 
-	      scheduledAnalyses := <analysis-count>
-      else
-        scheduledAnalyses := -1
-      end
+
+  trigger-commit-and-compile:
+    language -> <id>
     with
-      if 0 := scheduledAnalyses; check-commit-and-compile then
-        disable-commit-and-compile;
+      if not(index-is-global-enabled(|"delay-compile")) then
         commit-and-compile
+      else
+        index-enable-global(|"trigger-compile")
       end
-      
+  
   enable-commit-and-compile:
-    _ -> <id>
+    language -> <id>
     with
-      <index-add-all(|<index-commit-and-compile-path>)> [CommitAndCompile([CommitAndCompile(), ".internal"])]
-      
-  disable-commit-and-compile:
-    _ -> <id>
-    with
-      <index-clear-file> <index-commit-and-compile-path>
-      
-  check-commit-and-compile:
-  	_ -> <id>
-  	where
-  		<index-get> CommitAndCompile([CommitAndCompile(), ".internal"])
-      
-  index-commit-and-compile-path =
-    !"/.internal/commit-and-compile"
-    
\ No newline at end of file
+      if index-is-global-enabled(|"trigger-compile") then
+        commit-and-compile
+      end;
+      index-disable-global(|"delay-compile")
+  
+  disable-commit-and-compile = index-enable-global(|"delay-compile")
+  
\ No newline at end of file

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str	Fri Apr 13 13:59:14 2012	(r24732)
@@ -22,6 +22,11 @@
   
   FileEntries : Term * Term -> Term
   
+  // Globals
+  Global : Namespace
+  Global : List(UriPart) -> Summary
+  Global : List(UriPart) * List(Summary) -> Summary
+  
 rules // Index management
    
   index-setup(|language, project-paths) =
@@ -36,6 +41,16 @@
     prim("LANG_index_setup", language, project-paths, current-file)
 
   /**
+   * Adds given element to the index with given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-add(|"fullpath/file.ext")> Def([Entity(), "Bar"])
+   *   <index-add(|("fullpath/file.ext", "subfile"))> Def([Entity(), "Bar"])
+   */
+  index-add(|file) =
+    prim("LANG_index_add", <id>, file)
+
+  /**
    * Adds all given elements to the index with given file path and optionally subfile.
    *
    * Example:
@@ -43,7 +58,17 @@
    *   <index-add-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
    */
   index-add-all(|file) =
-    list-loop(with(prim("LANG_index_add", <id>, file)))
+    list-loop(with(index-add(|file)))
+    
+  /**
+   * Removes given element from the index that is contained in given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-remove(|"fullpath/file.ext")> Def([Entity(), "Bar"])
+   *   <index-remove(|("fullpath/file.ext", "subfile"))> Def([Entity(), "Bar"])
+   */
+  index-remove(|file) =
+    prim("LANG_index_remove", <id>, file)
     
   /**
    * Removes all given elements from the index that are contained in given file path and optionally subfile.
@@ -52,8 +77,8 @@
    *   <index-remove-all(|"fullpath/file.ext")> [Def([Entity(), "Bar"]), ...]
    *   <index-remove-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
    */
-  index-remove-all(|files) =
-    list-loop(with(prim("LANG_index_remove", <id>, files)))
+  index-remove-all(|file) =
+    list-loop(with(index-remove(|file)))
     
   /**
    * Removes all elements from the index that are contained in given file path and optionally subfile.
@@ -205,6 +230,139 @@
    */
   indexlib-get-value:
     template -> <index-value> <?[<id>|_]> <indexlib-get-all> template
+    
+  /**
+   * Gets the 'fake' path where globals are stored in the index.
+   *
+   * @internal
+   */
+  index-globals-path = 
+    !"/.internal/globals"
+    
+  /**
+   * Gets the URI where globals are stored in the index for given name or names.
+   *
+   * @internal
+   */
+  index-globals-uri:
+  	names -> uri
+  	with
+  		if is-list then
+  			uri := <concat> [[Global()], names, ["globals", ".internal"]]
+      else
+      	uri := [Global(), names, "global", ".internal"]
+      end
+    
+  /**
+   * Gets the first value in global storage with given name, or fail.
+   *
+   * Example:
+   *   index-get-global(|"last-compile") => Timestamp(1334322856)
+   *   index-get-global(|["last-compile", "file.str"]) => Timestamp(1334322856)
+   */
+  index-get-global(|name):
+    _ -> value
+    where
+      value := <indexlib-get-value> Global(<index-globals-uri> name, ())
+    
+  /**
+   * Gets all values in global storage with given name.
+   *
+   * Example:
+   *   index-get-global(|"last-compile") => [Timestamp(1334322856), ...]
+   *   index-get-global(|["last-compile", "file.str"]) => [Timestamp(1334322856), ...]
+   */ 
+  index-get-all-globals(|name):
+    _ -> values
+    with
+      values := <indexlib-get-all-values> Global(<index-globals-uri> name, ())
+    
+  /**
+   * Add value to global storage with given name.
+   *
+   * Example:
+   *   <index-add-global(|"last-compile")> Timestamp(1334322856)
+   *   <index-add-global(|["last-compile", "file.str"])> Timestamp(1334322856)
+   */   
+  index-add-global(|name):
+    value -> <id>
+    with
+      <index-add(|<index-globals-path>)> Global(<index-globals-uri> name, value)
+      
+  /**
+   * Overwrites value in global storage with given value.
+   *
+   * Example:
+   *   <index-set-global(|"last-compile")> Timestamp(1334322856)
+   *   <index-set-global(|["last-compile", "file.str"])> Timestamp(1334322856)
+   */   
+  index-set-global(|name):
+    value -> <id>
+    with
+      index-clear-global(|name);
+      <index-add-global(|name)> value
+    
+  /**
+   * Removes all values from global storage with given name.
+   *
+   * Example:
+   *   index-clear-global(|"last-compile")
+   *   index-clear-global(|["last-compile", "file.str"])
+   */   
+  index-clear-global(|name):
+    _ -> <id>
+    with
+      <index-remove(|<index-globals-path>)> Global(<index-globals-uri> name, ())
+      
+  /**
+   * Gets the URI where boolean globals are stored in the index for given name or names.
+   *
+   * @internal
+   */
+  index-boolean-globals-uri:
+    names -> uri
+    with
+      if is-list then
+        uri := <concat> [[Global()], names, ["boolean", "globals", ".internal"]]
+      else
+        uri := [Global(), names, "boolean", "global", ".internal"]
+      end
+      
+  /**
+   * Sets boolean value true to global boolean storage with given name.
+   *
+   * Example:
+   *   index-enable-global(|"can-compile")
+   *   index-enable-global(|["can-compile", "file.str"])
+   */   
+  index-enable-global(|name):
+    _ -> <id>
+    with
+      <index-add(|<index-globals-path>)> Global(<index-boolean-globals-uri> name)
+      
+  /**
+   * Sets boolean value false to global boolean storage with given name.
+   *
+   * Example:
+   *   index-disable-global(|"can-compile")
+   *   index-disable-global(|["can-compile", "file.str"])
+   */   
+  index-disable-global(|name):
+    _ -> <id>
+    with
+      <index-remove(|<index-globals-path>)> Global(<index-boolean-globals-uri> name)
+      
+  /**
+   * Query for boolean value true in global boolean storage with given name.
+   *
+   * Example:
+   *   index-is-global-enabled(|"can-compile")
+   *   index-is-global-enabled(|["can-compile", "file.str"])
+   */   
+  index-is-global-enabled(|name):
+    _ -> <id>
+    where
+      <indexlib-get> Global(<index-boolean-globals-uri> name)
  
   /**
    * Updates the "last updated" timestamp for the given service name.

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Fri Apr 13 10:50:37 2012	(r24731)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Fri Apr 13 13:59:14 2012	(r24732)
@@ -2,7 +2,6 @@
 
 imports
   libstratego-lib
-  libstratego-gpp
   libstratego-aterm
   include/NamingExperiment
   lib/editor-common.generated
@@ -19,13 +18,16 @@
 
 rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
   
+  // Defines the current language.
+  language = !"NamingExperiment"
+  
   // Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
   // files that should be re-analyzed.
   analyze:
     (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
     with
       ast'                    := <id> ast; // Optional AST desugaring
-      (ast'', filesToAnalyze) := <analyze-top(|Editor(), "NamingExperiment")> (ast', path, project-path);
+      (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
@@ -37,14 +39,32 @@
     with
       editor-init;
       (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
-      <editor-analyze> filesToAnalyze
+      <editor-queue-analysis> filesToAnalyze
       
   // Main entry point for analyzes, called when multiple (changed) files have changed. 
   editor-analyze:
     files -> None()
+    where
+      not(is-tuple)
+    with
+      index-setup(|<language>, [<project-path>], ".");
+      disable-commit-and-compile
+    with
+      editor-queue-analysis
     with
-      not(is-tuple);
-      queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+      <enable-commit-and-compile> <language>;
+      <trigger-commit-and-compile> <language>
+      
+  // Called when current file is saved.
+  editor-save:
+    (ast, _, _, _, _) -> None()
+    with
+      language  := <index-origin-language> ast;
+      index-setup(|language, [<project-path>], ".");
+      <trigger-commit-and-compile> language
+      
+  // Queue parallel analysis for given list of files.
+  editor-queue-analysis = queue-strategy(|"editor-parallel-analyze", "Analyzing files")
       
   // Executes parallel analysis using the index library.
   editor-parallel-analyze:
@@ -72,14 +92,14 @@
     with
       editor-init;
       filename := <guarantee-extension(|"analyzed.aterm")> path;
-      AnalysedResult(_, result, _, _, _, _, _) := <analyze-top-internal> (selected, path, project-path)
+      Results(_, result, _, _, _, _, _) := <analyze-top-internal> (selected, path, project-path)
   
   generate-uses:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       editor-init;
       filename := <guarantee-extension(|"analyzed.aterm")> path;
-      AnalysedResult(_, _, result, _, _, _, _) := <analyze-top-internal> (selected, path, project-path)
+      Results(_, _, result, _, _, _, _) := <analyze-top-internal> (selected, path, project-path)
   
   /*
   generate-reads:

From gabrielkonat at gmail.com  Fri Apr 13 16:50:13 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Fri, 13 Apr 2012 14:50:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24733 -
	spoofax-imp/trunk/experimental/NamingExperiment/lib
Message-ID: <20120413145013.C7C3B7F8022@mx1.tudelft.nl>

Author: gkonat
Date: Fri Apr 13 14:50:13 2012
New Revision: 24733
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24733&sc=1

Log:
Cleaned up libraries and added some extra documentation.

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Fri Apr 13 13:59:14 2012	(r24732)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Fri Apr 13 14:50:13 2012	(r24733)
@@ -36,8 +36,6 @@
   // Should return list of Def(_) and/or [namespace | path] or StopLookup() to stop the lookup
   adjust-index-lookup(is-use |namespace, path, prefix) = fail
  
-  // adjust-index-select(|namespace, path, use) = fail // (e.g., for imports)
- 
   // Should call <store-results> on a (list of) DefData
   adjust-index-def-data(store-results |namespace, path) = fail
  
@@ -173,9 +171,10 @@
       end
       
   /**
-   * Identifies all definitions in the tree
-   * and annotates them with their URI.
+   * Identifies all definitions in the tree and annotates them with their URI.
    * Also annotates uses with a preliminary "Unresolved(_)" URI.
+   *
+   * @internal
    */
   analyze-defs(|head-scope, head-scope-ns):
     ast -> (ast', defs')
@@ -198,7 +197,8 @@
         (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
       end;
       defs' := <![def | defs] <+ !defs>
- 
+      
+  /** @internal */
   analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
     ast -> (ast'', defs)
     where
@@ -206,6 +206,7 @@
       (ast', defs)  := <unzip-analyzed> analyzed;
       ast''         := <try(nam-annotate-names(|def-path))> ast'
  
+  /** @internal */
   update-index-path(|head-scope, head-scope-ns, ast):
     scope-type -> scope-type
     where
@@ -235,8 +236,9 @@
   */
  
   /**
-   * Analyze all uses, changing their preliminary
-   * "Unresolve(_)" URI to a definite URI of their definition.
+   * Analyze all uses, changing their preliminary "Unresolved(_)" URI to a definite URI of their definition.
+   *
+   * @internal
    */
   analyze-uses:
     ast -> (ast'', uses')
@@ -257,7 +259,9 @@
       end
  
   /**
-   * Collects all index data (e.g., types of definitions).
+   * Collects all index data (e.g. types of definitions).
+   *
+   * @internal
    */
   analyze-tree-data:
     tree -> data
@@ -265,7 +269,8 @@
       set := <new-iset>;
       <topdown(analyze-tree-data-part(|set))> tree;
       data := <iset-elements> set
- 
+      
+  /** @internal */
   analyze-tree-data-part(|set):
     tree -> tree
     where
@@ -275,7 +280,8 @@
           <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
         end
       end
- 
+  
+  /** @internal */
   store-index-data-results(|set):
     t -> <fail>
     where
@@ -296,6 +302,7 @@
       index-parallel-analyze(analyze);
       filter(not(?ParallelResults((), (), _, _, _, _)); index-set-markers)
   
+  /** @internal */
   index-parallel-analyze(analyze):
     files -> allResults
     with
@@ -310,7 +317,8 @@
       else
         allResults := results
       end
-      
+  
+  /** @internal */   
   index-parse-file:
     file -> (ast, file)
     with
@@ -319,12 +327,14 @@
     else
       ast := ()
     end
-      
+   
+  /** @internal */   
   index-set-markers:
     ParallelResults(ast, ast', errors, warnings, notes, diffs) -> <id>
     with
       <set-markers(|ast)> (ast', errors, warnings, notes)
       
+  /** @internal */
   index-analyze(analyze):
     (ast, path, project-path) -> ParallelResults(ast, ast', errors, warnings, notes, filesToAnalyze)
     with
@@ -335,15 +345,18 @@
 
 rules // diffs
   
+  /** @internal */
   analyze-diff:
     (defs1, defs2) -> (added, removed)
     with
       added   := <diff(index-diff-compare)> (defs2, defs1);
       removed := <diff(index-diff-compare)> (defs1, defs2)
-    
+  
+  /** @internal */  
   analyze-changed-filter-file(|file) = 
     ?files@(<id>, _); (is-test-file <+ index-is-fake-file <+ ?file); !files
     
+  /** @internal */
   analyze-store-diff(|changedEntries, file, ast, revision): 
     _ -> analyzeFiles'
     with
@@ -373,7 +386,11 @@
       // TODO: Optimize so that there are no duplicate files stored in the index, use iset?
       <map(analyze-add-compilediff)> compileFiles'
       
-  // Fails if old ASTDiff is not found or if ASTDiff is different.
+  /** 
+   * Fails if old ASTDiff is not found or if ASTDiff is different.
+   *
+   * @internal
+   */
   analyze-astdiff(|ast):
     (file, subfile) -> <id>
     where
@@ -387,10 +404,18 @@
         fail
       end
       
-  // Adds given file to the list of files to compile.
+  /** 
+   * Adds given file to the list of files to compile.
+   *
+   * @internal
+   */
   analyze-add-compilediff = index-add-global(|"compile-diff")
   
-  // Gets the list of files to compile, and then clear it.
+  /** 
+   * Gets the list of files to compile, and then clear it.
+   *
+   * @internal
+   */
   analyze-get-compilediffs = index-get-all-globals(|"compile-diff"); index-clear-global(|"compile-diff")
  
 rules // index API primitives
@@ -490,13 +515,19 @@
     template -> <index-value> <?[<id>|_]> <index-get-all> template
    
   /**
-   * Gets the namespace part of the URI for given term.
+   * Gets the namespace part of the URI for given key (term{uri} element).
+   *
+   * Example:
+   *   <index-namespace> "Bar"{[Entity(), "Bar"]} => Entity() 
    */
   index-namespace:
     x{[namespace | path]} -> <index-namespace-unwrap> namespace
 
   /**
-   * Gets the path part of the URI for given term.
+   * Gets the path part of the URI for given key (term{uri} element).
+   *
+   * Example:
+   *   <index-path> "Bar"{[Entity(), "Bar"]} => ["Bar"]
    */
   index-path:
     x{[namespace | path]} -> path'
@@ -508,39 +539,71 @@
       end
     
   /**
-   * Determines if a given AST node is a definition site,
-   * according to the syntax.
+   * Determines if a given AST node is a definition site, according to the syntax.
+   *
+   * TODO: Does not work?
    */
   index-is-definition =
     where(nam-get-definition-key)
- 
+
   /**
-   * Returns all children of a Def.
+   * Gets all Def children elements of an URI in a certain namespace.
+   * URI can be contained in a Def(uri), key (term{uri} element) or the uri itself.
    *
-   * @param namespace Only child Defs with this namespace are returned.
-   * @param prefix    Only Defs with a name that starts with this
-   *                  string are returned.
+   * @param namespace Only child Def elements in this namespace are returned.
    *
+   * Example:
+   *   <index-get-children(|Field())> Def([Entity(), "Baz"]) => [Def([Field(), "Bar"]), Def([Field(), "Foo"]), ...]
+   *   <index-get-children(|Field())> "Foo"{[Entity(), "Baz"]} => [Def([Field(), "Bar"]), Def([Field(), "Foo"]), ...]
+   *   <index-get-children(|Field())> [Entity(), "Baz"] => [Def([Field(), "Bar"]), Def([Field(), "Foo"]), ...]
+   */
+  index-get-children(|namespace) = index-get-children(\uri -> Def(uri)\|namespace)
+  
+  /**
+   * Gets all children elements of an URI in a certain namespace using custom templates.
+   * URI can be contained in a Def(uri), key (term{uri} element) or the uri itself.
+   *
+   * @param construct-template  Should create a template to match index entries with, given an URI.
+   * @param namespace           Only child elements in this namespace are returned.
    */
-  index-get-children(|namespace, prefix):
-    <with(?Def([parent-ns | path]) | "Def expected")> -> children'
+  index-get-children(construct-template|namespace):
+    <with(?Def([parent-ns | path]) <+ ?_{[parent-ns | path]} <+ ?[parent-ns | path] | "Def, key or uri expected")> -> children
+    with
+      template  := <construct-template> [namespace | path];
+      children  := <prim("LANG_index_get_children", template)>;
+      <store-wildcard-read(|namespace, path, "")> children
+
+  /**
+   * Gets all Def children elements of an URI in a certain namespace where the name starts with a prefix.
+   * URI can be contained in a Def(uri), key (term{uri} element) or the uri itself.
+   *
+   * @param namespace Only child Def elements in this namespace are returned.
+   * @param prefix    Only child Def elements where the name starts with this prefix are returned.
+   *
+   * Example:
+   *   <index-get-children(|Field(), "fo")> Def([Entity(), "Baz"]) => [Def([Field(), "Foo"]), ...]
+   *   <index-get-children(|Field(), "ba")> "Foo"{[Entity(), "Baz"]} => [Def([Field(), "Bar"]), ...]
+   *   <index-get-children(|Field(), "ze")> [Entity(), "Baz"] => [...]
+   */
+  index-get-children(|namespace, prefix) = index-get-children(\uri -> Def(uri)\|namespace, prefix)
+  
+  /**
+   * Gets all children elements of an URI in a certain namespace where the name starts with a prefix
+   * using custom templates.
+   * URI can be contained in a Def(uri), key (term{uri} element) or the uri itself.
+   *
+   * @param construct-template  Should create a template to match index entries with, given an URI.
+   * @param namespace           Only child elements in this namespace are returned.
+   * @param prefix              Only child elements where the name starts with this prefix are returned.
+   */
+  index-get-children(construct-template|namespace, prefix):
+    <with(?Def([parent-ns | path]) <+ ?_{[parent-ns | path]} <+ ?[parent-ns | path] | "Def, key or uri expected")> -> children'
     with
-      with(not(!namespace => Def(_)) | "index-get-children interface changed");
       prefix'   := <strip-annos> prefix;
-      template  := Def([namespace | path]);
+      template  := <construct-template> [namespace | path];
       children  := <prim("LANG_index_get_children", template)>;
       children' := <filter(index-is-name-substring(|prefix'))> children;
-      store     := [namespace, prefix' | path];
-      // Store read in index.
-      if set := <Index-ReadSet> then
-        if 1 := <length> children' then
-          // HACK: This solves the problem of ReadWildcards making too many files re-analyze, but this should
-          // be handled in the index primitives instead.
-          <iset-add(|Read([namespace, prefix' | path]))> set
-        else
-          <iset-add(|ReadWildcard([namespace | path], prefix'))> set
-        end
-      end
+      <store-wildcard-read(|namespace, path, prefix')> children'
 
   /**
    * Gets a set of all files that have a reference to the given index entries.
@@ -671,6 +734,8 @@
    * @param namespace Only Defs with this namespace are returned.
    * @param prefix    Indicates that only Defs with a name that starts with this
    *                  string are demanded.
+   *
+   * @internal
    */
   index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path, prefix):
     x{_} -> defs
@@ -705,6 +770,8 @@
    *
    * @param prefix    Indicates that only Defs with a name that starts with this
    *                  string are demanded.
+   *
+   * @internal
    */
   index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path, prefix):
     x{_} -> all-defs
@@ -813,6 +880,19 @@
   index-readwildcard-substring(|prefix):
     ReadWildcard(_, name) -> <id>
     where <is-substring(!prefix)> name
+    
+  store-wildcard-read(|namespace, path, prefix):
+    children -> <id>
+    with
+      if set := <Index-ReadSet> then
+        if 1 := <length> children then
+          // HACK: This solves the problem of ReadWildcards making too many files re-analyze, but this should
+          // be handled in the index primitives instead.
+          <iset-add(|Read([namespace | path]))> set
+        else
+          <iset-add(|ReadWildcard([namespace | path], prefix))> set
+        end
+      end
       
   index-is-unresolved(|x, uri) = Index-UnresolvedSet; (iset-contains(|(x, uri)) <+ fail)
   index-add-unresolved(|x, uri) = (Index-UnresolvedSet; iset-add(|(x, uri))) <+ id
@@ -858,7 +938,8 @@
     )
   
   external SRTS-EXT-eq-ignore-annos(|t)
- 
+
+/** @internal */
 rules // interface for generated code
  
   nam-get-def(|namespace):

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str	Fri Apr 13 13:59:14 2012	(r24732)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str	Fri Apr 13 14:50:13 2012	(r24733)
@@ -8,16 +8,23 @@
   
 rules // Extension points
     
+  // Should desugar given ast.
+  index-desugar-ast = fail
+    
   // Should compile given analysed ast.
   index-compile-ast(|file, subfile, project-path) = fail
   
 rules // Compilation
   
+  /**
+   * Schedules compilation of all files that have changed since the last compilation.
+   */
   index-schedule-compilation:
     _ -> None()
     with
       queue-strategy(|"index-compilation", "Compiling files")
   
+  /** @internal */
   index-compilation:
     language -> None()
     with
@@ -39,12 +46,14 @@
       // Compile the files
       <filter(index-compilation-file(|language, project-path); complete-work-unit)> filteredFiles
 
+  /** @internal */
   index-compilation-file(|language, project-path):
     (file, subfile) -> None()
     with
       // Parse and analyze ast.
-      ast                             := <parse-file> file;
-      Results(ast', _, _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast, file, project-path)
+      ast                              := <parse-file> file;
+      ast'                             := <try(index-desugar-ast)> ast;
+      Results(ast'', _, _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast', file, project-path)
     with
       {| Index-ReadSet:
         readSet := <new-iset>;
@@ -58,27 +67,19 @@
         <index-add-all(|<index-compilation-file-tuple> (file, subfile))> reads
       |}
 
+  /** @internal */
   index-compilation-filter-file = 
     ?(<id>, _); (is-test-file <+ index-is-fake-file <+ not(file-exists))
-
-rules // Compile time reads
-
-  index-compilation-restore-read-file:
-    (file, subfile) -> (file', subfile)
-    with
-      file' := <string-replace(|<index-compilation-read-path>, "")> file
-      
-  index-compilation-clean-reads = 
-    ?(file, subfile); index-compilation-file-tuple; index-clear-file
-      
-  index-compilation-file-tuple:
-    (file, subfile) -> ($[[<index-compilation-read-path>]/[file]], subfile)
-    
-  index-compilation-read-path =
-    !"/.internal/reads/compile"
     
 rules // On save handling
   
+  /**
+   * Commits the index to disk and schedules compilation.
+   *
+   * @see trigger-commit-and-compile
+   *
+   * @internal
+   */
   commit-and-compile:
     language -> None()
     with
@@ -86,6 +87,11 @@
     with
       index-schedule-compilation
 
+  /**
+   * Triggers commit and compilation, requires target language as current term.
+   * Compilation can be delayed by using disable-commit-and-compile. Compilation will be triggered when 
+   * enable-commit-and-compile is called.
+   */
   trigger-commit-and-compile:
     language -> <id>
     with
@@ -95,6 +101,15 @@
         index-enable-global(|"trigger-compile")
       end
   
+  /**
+   * Delays commit and compilation until enable-commit-and-compile is called.
+   */
+  disable-commit-and-compile = index-enable-global(|"delay-compile")
+  
+  /**
+   * Cancels the commit and compilation delay. If commit and compilation was triggered during the delay, it
+   * is triggered now.
+   */
   enable-commit-and-compile:
     language -> <id>
     with
@@ -102,6 +117,21 @@
         commit-and-compile
       end;
       index-disable-global(|"delay-compile")
-  
-  disable-commit-and-compile = index-enable-global(|"delay-compile")
-  
\ No newline at end of file
+      
+/** @internal */
+rules // Compile time reads
+
+  index-compilation-restore-read-file:
+    (file, subfile) -> (file', subfile)
+    with
+      file' := <string-replace(|<index-compilation-read-path>, "")> file
+      
+  index-compilation-clean-reads = 
+    ?(file, subfile); index-compilation-file-tuple; index-clear-file
+      
+  index-compilation-file-tuple:
+    (file, subfile) -> ($[[<index-compilation-read-path>]/[file]], subfile)
+    
+  index-compilation-read-path =
+    !"/.internal/reads/compile"
+    
\ No newline at end of file

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str	Fri Apr 13 13:59:14 2012	(r24732)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str	Fri Apr 13 14:50:13 2012	(r24733)
@@ -29,6 +29,12 @@
   
 rules // Index management
    
+  /**
+   * Sets up the index library for given language and project paths.
+   * Must be called once before doing anything with the library.
+   *
+   * @obsolete
+   */
   index-setup(|language, project-paths) =
     obsolete(!"index-setup(|language, project-paths); use index-setup(|language, project-paths, current-file)");
     index-setup(|language, project-paths, ".")

From gabrielkonat at gmail.com  Fri Apr 13 16:53:02 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Fri, 13 Apr 2012 14:53:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24734 -
	spoofax-imp/trunk/experimental/NamingExperiment/lib
Message-ID: <20120413145302.E087A2B8014@mx2.tudelft.nl>

Author: gkonat
Date: Fri Apr 13 14:53:02 2012
New Revision: 24734
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24734&sc=1

Log:
Removed unused strategy.

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str	Fri Apr 13 14:50:13 2012	(r24733)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str	Fri Apr 13 14:53:02 2012	(r24734)
@@ -188,16 +188,6 @@
     template -> <prim("LANG_index_get_files_of", template)>
     
   /**
-   * Gets all index entries (of every file for current project).
-   *
-   * Example:
-   *   <indexlib-get-all-elements> => [Def([Entity(), "Bar"]), ...]
-   */
-  indexlib-get-all-elements =
-    // TODO: is there a use case for this? doing this is *expensive*
-    <mapconcat(index-get-all-in-file)> <index-get-all-files>
-    
-  /**
    * Get all index entries that match the given template.
    *
    * Example:

From E.Visser at tudelft.nl  Mon Apr 16 09:19:08 2012
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 16 Apr 2012 07:19:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24735 -
	spoofax-contrib/grace
Message-ID: <20120416071908.D190BCC06B@mx4.tudelft.nl>

Author: visser
Date: Mon Apr 16 07:19:07 2012
New Revision: 24735
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24735&sc=1

Log:


Added:
   spoofax-contrib/grace/

From E.Visser at tudelft.nl  Mon Apr 16 09:20:02 2012
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 16 Apr 2012 07:20:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24736 -
	spoofax-contrib/grace/trunk
Message-ID: <20120416072002.5E373CC05D@mx4.tudelft.nl>

Author: visser
Date: Mon Apr 16 07:20:02 2012
New Revision: 24736
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24736&sc=1

Log:


Added:
   spoofax-contrib/grace/trunk/
      - copied from r24735, spoofax-contrib/separate-compilation-examples/csharp-partial-classses/

From gabrielkonat at gmail.com  Mon Apr 16 10:37:55 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Mon, 16 Apr 2012 08:37:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24737 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20120416083755.28626108C01C@mx3.tudelft.nl>

Author: gkonat
Date: Mon Apr 16 08:37:54 2012
New Revision: 24737
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24737&sc=1

Log:
Less hacky way to do multi-file analysis in a background update job.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Apr 16 07:20:02 2012	(r24736)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Mon Apr 16 08:37:54 2012	(r24737)
@@ -196,6 +196,10 @@
 		return multifile;
 	}
 	
+	public String getFeedbackFunction() {
+		return feedbackFunction;
+	}
+	
 	public void setDebuggerEnabled(boolean isDebuggerEnabled) {
 		this.isDebuggerEnabled = isDebuggerEnabled;
 	}
@@ -786,37 +790,6 @@
 		return result;
 	}
 	
-	public void invokeFeedbackSilent(IStrategoTerm node) {
-		if (runtime == null) initialize(new NullProgressMonitor());
-		if (runtime == null) return;
-		assert getLock().isHeldByCurrentThread();
-		runtime.setCurrent(node);
-		try {
-			runtime.invoke(feedbackFunction);
-		} catch (UndefinedStrategyException e) {
-			// Note that this condition may also be reached when the semantic service hasn't been loaded yet
-			if (descriptor.isDynamicallyLoaded())
-				runtime.getIOAgent().printError("Internal error: strategy does not exist or is defined in a module that is not imported: " + e.getMessage());
-			Environment.logException("Strategy does not exist: " + e.getMessage(), runtime.getCompiledContext(), e);
-		} catch (InterpreterException e) {
-			if (descriptor.isDynamicallyLoaded())
-				runtime.getIOAgent().printError("Internal error evaluating " + feedbackFunction + " (" + name(e) + "; see error log)");
-			Environment.logException("Internal error evaluating strategy " + feedbackFunction, runtime.getCompiledContext(), e);
-			if (descriptor.isDynamicallyLoaded()) StrategoConsole.activateConsole();
-		} catch (RuntimeException e) {
-			if (runtime != null && descriptor.isDynamicallyLoaded())
-				runtime.getIOAgent().printError("Internal error evaluating " + feedbackFunction + " (" + name(e) + "; see error log)");
-			Environment.logException("Internal error evaluating strategy " + feedbackFunction, runtime.getCompiledContext(), e);
-			if (descriptor.isDynamicallyLoaded()) StrategoConsole.activateConsole();
-		} catch (Error e) { // e.g. NoClassDefFoundError due to bad/missing stratego jar
-			if (runtime != null && descriptor.isDynamicallyLoaded())
-				runtime.getIOAgent().printError("Internal error evaluating " + feedbackFunction + " (" + name(e) + "; see error log)");
-			Environment.logException("Internal error evaluating strategy " + feedbackFunction, runtime.getCompiledContext(), e);
-			if (descriptor.isDynamicallyLoaded()) StrategoConsole.activateConsole();
-		}
-		runtime.setCurrent(null);
-	}
-	
 	private static String name(Throwable e) {
 		return e.getClass().getSimpleName();
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java	Mon Apr 16 07:20:02 2012	(r24736)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserverBackgroundUpdateJob.java	Mon Apr 16 08:37:54 2012	(r24737)
@@ -54,7 +54,7 @@
 		this.progress = new StrategoProgressMonitor(monitor);
 		
 		try {
-			StrategoObserver observerNoParseController = getObserverNoParseController();
+			StrategoObserver observerNoParseController = createObserverNoParseController();
 			
 			if(paths.length == 1 || !observerNoParseController.isMultiFile()) {
 				this.progress.setSubTasks(paths.length);
@@ -73,9 +73,7 @@
 			Environment.logException("Background job failed", e);
 		}
 		
-		
 		return Status.OK_STATUS;
-		
 	}
 	
 	private void analyzeFile(IPath path, IProgressMonitor monitor)
@@ -139,15 +137,18 @@
 		}
 		IStrategoList files = factory.makeList(terms);
 		
-		observer.getLock().lock();
 		try {
-			observer.invokeFeedbackSilent(files);
+			observer.getLock().lock();
+			((EditorIOAgent)observer.getRuntime().getIOAgent()).setJob(this);
+			observer.invoke(observer.getFeedbackFunction(), files, project.getLocation().toFile());
+		} catch (Exception e) {
+			Environment.logException("Background job failed", e);
 		} finally {
-			observer.getLock().unlock();
+			if (observer != null) observer.getLock().unlock();
 		}
 	}
 	
-	private StrategoObserver getObserverNoParseController() throws BadDescriptorException {
+	private StrategoObserver createObserverNoParseController() throws BadDescriptorException {
 		IPath absolutePath = project == null ? getPath() : project.getLocation().append(getPath());
 		Language lang = LanguageRegistry.findLanguage(absolutePath, null);
 		if (lang == null) {
@@ -157,7 +158,6 @@
 		Descriptor descriptor = Environment.getDescriptor(lang); 
 		
 		StrategoObserverFactory fac = new StrategoObserverFactory();
-		// HACK: Create observer without parse controller.
 		return fac.create(descriptor, null);
 	}
 

From E.Visser at tudelft.nl  Mon Apr 16 11:08:08 2012
From: E.Visser at tudelft.nl (Eelco Visser)
Date: Mon, 16 Apr 2012 09:08:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24738 - in
	spoofax-contrib: grace
	separate-compilation-examples/csharp-partial-classses
	separate-compilation-examples/csharp-partial-classses/syntax
Message-ID: <20120416090808.090FD2B800A@mx2.tudelft.nl>

Author: visser
Date: Mon Apr 16 09:08:07 2012
New Revision: 24738
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24738&sc=1

Log:


Deleted:
   spoofax-contrib/grace/
Modified:
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml	Mon Apr 16 08:37:54 2012	(r24737)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml	Mon Apr 16 09:08:07 2012	(r24738)
@@ -23,7 +23,7 @@
                         --library
                         -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+                        -la stratego-lib -la stratego-parallel -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
         
         <!-- Optional: external .def and .jar locations
         <property name="externaldef" location="syntax/${sdfmodule}.def"/>

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf	Mon Apr 16 08:37:54 2012	(r24737)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/syntax/CSharpPartialClassses.sdf	Mon Apr 16 09:08:07 2012	(r24738)
@@ -5,11 +5,11 @@
 exports
 
   context-free start-symbols
-  
+     
     Start
 
   context-free syntax
-
+  
 		%% Constructs
 		Using* Definition*                                        -> Start {"Start", scope(Type, PartialType, Namespace, Using)}
 		"namespace" Namespace@=ID "{" Definition* "}"             -> Definition {"Namespace", scope(Type, PartialType, Namespace)}
@@ -31,7 +31,7 @@
 		"void"    -> Type {"VoidType", prefer}
 		
 		%% Statements
-		"return" Expr ";" -> Stmt {"Return"}
+		"return" Expr ";" -> Stmt {"Return"}   
 		 
 		%% Expressions
 		Field at ID                    -> Expr {"FieldRef"}

From oskarvanrest at gmail.com  Mon Apr 16 14:21:35 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 16 Apr 2012 12:21:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24739 -
	experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures
Message-ID: <20120416122135.AC069108C00D@mx3.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr 16 12:21:35 2012
New Revision: 24739
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24739&sc=1

Log:
Bugfix + removed label 'foo'

Modified:
   experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java

Modified: experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java	Mon Apr 16 09:08:07 2012	(r24738)
+++ experimental/graphical-editor/BehaviorTreesGraphical.diagram/src/figures/NodeFigure.java	Mon Apr 16 12:21:35 2012	(r24739)
@@ -33,25 +33,25 @@
 		graphics.setLineWidth(1);
 		graphics.drawLine(r.x() + widthLeftCompartment, r.y(), r.x() + widthLeftCompartment, r.y() + r.height());
 
-		WrappingLabel requirement = (WrappingLabel) getChildren().get(1);
+		WrappingLabel requirement = (WrappingLabel) getChildren().get(0);
 		if (requirement.getText().equals("null")) {
-			requirement.setText("");
+			requirement.setText("      ");
 		}
 		requirement.setAlignment(PositionConstants.CENTER);
 		requirement.setMaximumSize(new Dimension(widthLeftCompartment - 2 * labelDistanceToBorder, r.height()));
 		requirement.setLocation(new Point(r.x() + 4, r.y() + r.height() / 7));
 		requirement.paint(graphics);
 
-		WrappingLabel component = (WrappingLabel) getChildren().get(2);
+		WrappingLabel component = (WrappingLabel) getChildren().get(1);
 		if (component.getText().equals("null")) {
-			component.setText("");
+			component.setText("       ");
 		}
 		component.setAlignment(PositionConstants.CENTER);
 		component.setMaximumSize(new Dimension(widthRightCompartment - 2 * labelDistanceToBorder, r.height()));
 		component.setLocation(new Point(r.x() + widthLeftCompartment + 4, r.y() + r.height() / 7));
 		component.paint(graphics);
 
-		WrappingLabel state = (WrappingLabel) getChildren().get(3);
+		WrappingLabel state = (WrappingLabel) getChildren().get(2);
 		if (!state.getText().startsWith("[")) {
 			state.setText("[ " + state.getText() + " ]");
 		}

From oskarvanrest at gmail.com  Tue Apr 17 05:13:23 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Tue, 17 Apr 2012 03:13:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24740 - in
	experimental/graphical-editor/BehaviorTreesGraphical: META-INF model
Message-ID: <20120417031323.271AD7F8021@mx1.tudelft.nl>

Author: OskarVanRest
Date: Tue Apr 17 03:13:21 2012
New Revision: 24740
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24740&sc=1

Log:
- Removed 'foo' label.
- Show labels instead of identifiers.

Modified:
   experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF
   experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf
   experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol

Modified: experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF	Mon Apr 16 12:21:35 2012	(r24739)
+++ experimental/graphical-editor/BehaviorTreesGraphical/META-INF/MANIFEST.MF	Tue Apr 17 03:13:21 2012	(r24740)
@@ -11,6 +11,5 @@
  btgraphical.impl,
  btgraphical.util
 Require-Bundle: org.eclipse.core.runtime,
- org.eclipse.emf.ecore;visibility:=reexport,
- org.eclipse.draw2d;bundle-version="3.7.2"
+ org.eclipse.emf.ecore;visibility:=reexport
 Bundle-ActivationPolicy: lazy

Modified: experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf	Mon Apr 16 12:21:35 2012	(r24739)
+++ experimental/graphical-editor/BehaviorTreesGraphical/model/BTGraphical.emf	Tue Apr 17 03:13:21 2012	(r24740)
@@ -3,7 +3,11 @@
 package btgraphical;
 
 @gmf.diagram(foo="bar")
-class Start extends SuperNode {
+class Diagram {
+   val Specification specification;
+}
+
+class Specification {
 	val Requirement[*] requirements;
 	val Component[*] components;
     val SuperNode[*] nodes;
@@ -12,18 +16,14 @@
 class SuperNode {
 }
 
- at gmf.node(phantom="true", figure="figures.NodeFigure", label="foo", label.icon="false", label.readOnly="true")
+ at gmf.node(phantom="true", figure="figures.NodeFigure", label="info", label.icon="false", label.readOnly="true")
 class Node extends SuperNode {
-	attr String foo = "bar";
+	attr String info = "";
 	ref Requirement requirement;
 	ref Component component;
 	ref State state;
-}
-
- at gmf.link(source="source", target="target", target.decoration="arrow")
-class SequentialComp extends SuperNode {
-    val SuperNode source;
-    val SuperNode target;
+	@gmf.link(tool.name="Child", target.decoration="arrow")
+	val Node[*] children;
 }
 
 class Requirement {

Modified: experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol
==============================================================================
--- experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol	Mon Apr 16 12:21:35 2012	(r24739)
+++ experimental/graphical-editor/BehaviorTreesGraphical/model/ECore2GMF.eol	Tue Apr 17 03:13:21 2012	(r24740)
@@ -4,11 +4,11 @@
 var canvas = GmfGraph!Canvas.all.first;
 var nodeMapping = GmfMap!NodeMapping.all.first;
 
--- remove 'foo' label
---nodeMapping.labelMappings.remove(GmfMap!FeatureLabelMapping.all.first);
---canvas.labels.remove(GmfGraph!DiagramLabel.all.selectOne(r|r.name = 'NodeLabel'));
---nodeFigureDescriptor.accessors.remove(GmfGraph!ChildAccess.all.selectOne(r|r.accessor = 'getFigureNodeLabelFigure'));
---nodeFigure.children.remove(GmfGraph!Label.all.selectOne(r|r.name = 'NodeLabelFigure'));
+-- remove 'foo' label (workaround for bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=292241)
+nodeMapping.labelMappings.remove(GmfMap!FeatureLabelMapping.all.first);
+canvas.labels.remove(GmfGraph!DiagramLabel.all.selectOne(r|r.name = 'NodeLabel'));
+nodeFigureDescriptor.accessors.remove(GmfGraph!ChildAccess.all.selectOne(r|r.accessor = 'getFigureNodeLabelFigure'));
+nodeFigure.children.remove(GmfGraph!Label.all.selectOne(r|r.name = 'NodeLabelFigure'));
 
 -- create labels for Requirement, Component and State
 
@@ -74,7 +74,7 @@
 nodeRequirementLabelMapping.readOnly = true;
 nodeMapping.labelMappings.add(nodeRequirementLabelMapping);
 var requirementExpression = new GmfMap!ValueExpression;
-requirementExpression.body = 'requirement.identifier';
+requirementExpression.body = 'requirement.label';
 nodeRequirementLabelMapping.viewExpression = requirementExpression;
 
 var nodeComponentLabelMapping = new GmfMap!ExpressionLabelMapping;
@@ -82,7 +82,7 @@
 nodeComponentLabelMapping.readOnly = true;
 nodeMapping.labelMappings.add(nodeComponentLabelMapping);
 var componentExpression = new GmfMap!ValueExpression;
-componentExpression.body = 'component.identifier';
+componentExpression.body = 'component.label';
 nodeComponentLabelMapping.viewExpression = componentExpression;
 
 var nodeStateLabelMapping = new GmfMap!ExpressionLabelMapping;
@@ -90,5 +90,5 @@
 nodeStateLabelMapping.readOnly = true;
 nodeMapping.labelMappings.add(nodeStateLabelMapping);
 var stateExpression = new GmfMap!ValueExpression;
-stateExpression.body = 'state.identifier';
+stateExpression.body = 'state.label';
 nodeStateLabelMapping.viewExpression = stateExpression;

From karltk at strategoxt.org  Tue Apr 17 11:08:06 2012
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 17 Apr 2012 09:08:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24741 -
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <20120417090806.20A88CC0E0@mx4.tudelft.nl>

Author: karltk
Date: Tue Apr 17 09:08:05 2012
New Revision: 24741
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24741&sc=1

Log:
Changed first line in license information; this line is shown when multiple plugins are installed and the user is asked to accept licenses.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Apr 17 03:13:21 2012	(r24740)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Apr 17 09:08:05 2012	(r24741)
@@ -17,7 +17,9 @@
    </copyright>
 
    <license url="http://www.spoofax.org/">
-      This software is distributed in the hope that it will be useful,
+      Spoofax License Information
+
+This software is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 full license texts for more details.

From gabrielkonat at gmail.com  Tue Apr 17 13:12:25 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Tue, 17 Apr 2012 11:12:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24742 -
	spoofax-contrib/separate-compilation-examples/c-without-macros
Message-ID: <20120417111225.8DD53CC0ED@mx4.tudelft.nl>

Author: gkonat
Date: Tue Apr 17 11:12:25 2012
New Revision: 24742
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24742&sc=1

Log:
Add link to stratego-parallel.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml	Tue Apr 17 09:08:05 2012	(r24741)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml	Tue Apr 17 11:12:25 2012	(r24742)
@@ -23,7 +23,7 @@
                         --library
                         -I &quot;${trans}&quot;
                         -I &quot;${basedir}&quot;
-                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+                        -la stratego-lib -la stratego-parallel -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
         
         <!-- Optional: external .def and .jar locations
         <property name="externaldef" location="syntax/${sdfmodule}.def"/>

From oskarvanrest at gmail.com  Tue Apr 17 13:41:46 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Tue, 17 Apr 2012 11:41:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24743 -
	experimental/graphical-editor/GEF+GMF+EuGENia
	experiments/GMF/InMemoryModelAccess/src/inmemorymodelaccess
Message-ID: <20120417114147.00BFDCC0ED@mx4.tudelft.nl>

Author: OskarVanRest
Date: Tue Apr 17 11:41:46 2012
New Revision: 24743
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24743&sc=1

Log:
added example of how to modify the EMF model (of a GMF editor). before this I only read an EMF model.

Modified:
   experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/src/inmemorymodelaccess/TextualEditor.java

Modified: experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/src/inmemorymodelaccess/TextualEditor.java
==============================================================================
--- experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/src/inmemorymodelaccess/TextualEditor.java	Tue Apr 17 11:12:25 2012	(r24742)
+++ experimental/graphical-editor/GEF+GMF+EuGENia experiments/GMF/InMemoryModelAccess/src/inmemorymodelaccess/TextualEditor.java	Tue Apr 17 11:41:46 2012	(r24743)
@@ -9,8 +9,12 @@
 import org.eclipse.emf.common.util.EList;
 import org.eclipse.emf.ecore.impl.EReferenceImpl;
 import org.eclipse.emf.ecore.resource.ResourceSet;
+import org.eclipse.emf.transaction.RecordingCommand;
+import org.eclipse.emf.transaction.TransactionalEditingDomain;
 import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;
+import org.eclipse.gmf.runtime.notation.View;
 import org.eclipse.jface.text.IDocument;
+import org.eclipse.swt.graphics.Device;
 import org.eclipse.ui.IEditorInput;
 import org.eclipse.ui.IEditorPart;
 import org.eclipse.ui.IEditorSite;
@@ -49,7 +53,7 @@
 		}
 
 		document = documentProvider.getDocument(input);
-		
+
 		IWorkbench wb = PlatformUI.getWorkbench();
 		IWorkbenchWindow win = wb.getActiveWorkbenchWindow();
 		IWorkbenchPage page = win.getActivePage();
@@ -57,69 +61,92 @@
 
 		if (editor instanceof DiagramEditor) {
 			DiagramEditor diagramEditor = (DiagramEditor) editor;
-			ResourceSet diagramEditorResourceSet = diagramEditor.getEditingDomain().getResourceSet();
+			TransactionalEditingDomain editingDomain = diagramEditor.getEditingDomain();
+			ResourceSet diagramEditorResourceSet = editingDomain.getResourceSet();
 			root = (Root) diagramEditorResourceSet.getResources().get(1).getContents().get(0);
 			root.eAdapters().add(adapter);
-			
+
 			EList<Entity> entities = root.getEntities();
 			for (int i = 0; i < entities.size(); i++) {
 				entities.get(i).eAdapters().add(new EntityAdapter());
 			}
+
+			// this is how we can make changes to the EMF model. Thanks to these
+			// recording commands, we can undo changes made by the textual
+			// editor by pressing 'cntr-z' in the graphical editor.
+			if (entities.size() > 0) {
+				final Entity testje = entities.get(0);
+				editingDomain.getCommandStack().execute(new RecordingCommand(editingDomain) {
+					protected void doExecute() {
+						testje.setId(testje.getId() + "TEST");
+
+					}
+				});
+
+			}
 		}
-		
-		printEntities();		
+
+		printEntities();
 	}
-	
+
 	private void printEntities() {
 		String result = "Entities:\n";
-		
+
 		EList<Entity> entities = root.getEntities();
 		for (int i = 0; i < entities.size(); i++) {
 			result += entities.get(i).getId() + "\n";
 		}
-		
+
 		document.set(result);
 	}
 
 	public class RootAdapter implements Adapter {
 
-		@Override public void notifyChanged(Notification notification) {
+		@Override
+		public void notifyChanged(Notification notification) {
 			printEntities();
-			
+
 			if (notification.getNewValue() instanceof Entity) {
 				Entity newEntity = (Entity) notification.getNewValue();
 				newEntity.eAdapters().add(new EntityAdapter());
 			}
 		}
 
-		@Override public Notifier getTarget() {
-			return null; //TODO
+		@Override
+		public Notifier getTarget() {
+			return null; // TODO
 		}
 
-		@Override public void setTarget(Notifier newTarget) {
+		@Override
+		public void setTarget(Notifier newTarget) {
 			// Do nothing.
 		}
 
-		@Override public boolean isAdapterForType(Object type) {
+		@Override
+		public boolean isAdapterForType(Object type) {
 			return type.equals(Root.class);
 		}
 	}
-	
+
 	public class EntityAdapter implements Adapter {
 
-		@Override public void notifyChanged(Notification notification) {
+		@Override
+		public void notifyChanged(Notification notification) {
 			printEntities();
 		}
 
-		@Override public Notifier getTarget() {
-			return null; //TODO
+		@Override
+		public Notifier getTarget() {
+			return null; // TODO
 		}
 
-		@Override public void setTarget(Notifier newTarget) {
+		@Override
+		public void setTarget(Notifier newTarget) {
 			// Do nothing.
 		}
 
-		@Override public boolean isAdapterForType(Object type) {
+		@Override
+		public boolean isAdapterForType(Object type) {
 			return type.equals(Root.class);
 		}
 	}

From gabrielkonat at gmail.com  Wed Apr 18 17:03:08 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Wed, 18 Apr 2012 15:03:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24744 -
	spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans
	spoofax-imp/trunk/experimental/NamingExperiment/lib
	spoofax/trunk/spoofax/org.spoofax.inter...
Message-ID: <20120418150308.C94C7108C033@mx3.tudelft.nl>

Author: gkonat
Date: Wed Apr 18 15:03:08 2012
New Revision: 24744
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24744&sc=1

Log:
Made the index thread safe so that some locks from stratego-parallel can be removed.

Modified:
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Tue Apr 17 11:41:46 2012	(r24743)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Wed Apr 18 15:03:08 2012	(r24744)
@@ -26,9 +26,11 @@
     with
       ast'                    := <id> ast; // Optional AST desugaring
       (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
+      index-start-transaction;
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
+      index-end-transaction;
       filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
 
   // Main entry point for analyzes, called when a single file is opened in the editor.

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str	Tue Apr 17 11:41:46 2012	(r24743)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/generate-test.str	Wed Apr 18 15:03:08 2012	(r24744)
@@ -15,7 +15,7 @@
   testgen-internal-file = !"/.internal/testgen"
   testgen-module-name = !"TestGen"
   
-  testgen-num-files = !100
+  testgen-num-files = !250
   
   testgen-min-entities = !1
   testgen-max-entities = !5

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Tue Apr 17 11:41:46 2012	(r24743)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Wed Apr 18 15:03:08 2012	(r24744)
@@ -119,7 +119,8 @@
       revision := <index-start-transaction>
     with
       file := (full-path, ""); // TODO: Get subfile or add subfile param.
-      oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file
+      oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file;
+      <index-clear-file> file
     with
       {| Index-ReadSet, Index-UnresolvedSet:
         readSet := <new-iset>;
@@ -163,8 +164,10 @@
 	      (added, removed) := <analyze-diff> (oldElems, newElems);
 	      changed := <conc> (added, removed);
 	      
-         // Store files that have changed in the index
-        filesToAnalyze := <analyze-store-diff(|changed, file, ast, revision)>
+        // Store files that have changed in the index
+        index-start-transaction;
+        filesToAnalyze := <analyze-store-diff(|changed, file, ast, revision)>;
+        index-end-transaction
 	    else
 	      (added, removed) := ([], []);
 	      filesToAnalyze := []
@@ -364,17 +367,19 @@
       dependentFiles  := <index-get-dependent-files> changedEntries;
       
       // Files to analyze
-      analyzeFiles := <remove-all(analyze-changed-filter-file(|<Fst> file))> dependentFiles;
-      if <elem(index-get-file-revision; \r -> (r, revision)\; gt)> dependentFiles then
+      analyzeFiles := <make-set> <remove-all(analyze-changed-filter-file(|<Fst> file))> dependentFiles;
+      analyzeFiles' := analyzeFiles;
+      // TODO: Is this extra check needed?
+      /*if <getfirst(index-get-file-revision; \r -> (r, revision)\; gt)> analyzeFiles then
         // Add current file if the current file has read information from another file with a higher revision.
         // This indicates that potentially outdated information was read.
-        analyzeFiles' := <make-set> [file|analyzeFiles]
+        analyzeFiles' := [file|analyzeFiles]
       else
-        analyzeFiles' := <make-set> analyzeFiles
-      end;
+        analyzeFiles' := analyzeFiles
+      end;*/
       
       // Files to compile
-      compileFiles := <conc> (analyzeFiles, changedFiles);
+      compileFiles := <conc> (analyzeFiles', changedFiles);
       if not(<analyze-astdiff(|ast)> file) then
         // Add current file if the AST has changed. Cannot use dependency tracking here because
         // the originating file of a removed definition is not in the index any more.

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java	Tue Apr 17 11:41:46 2012	(r24743)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java	Wed Apr 18 15:03:08 2012	(r24744)
@@ -11,6 +11,8 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -23,6 +25,8 @@
 public class SemanticIndexManager {
 	
 	private final static AtomicLong revisionProvider = new AtomicLong();
+	
+	private final static ReadWriteLock transactionLock = new ReentrantReadWriteLock();
 
 	private ThreadLocal<ISemanticIndex> current = new ThreadLocal<ISemanticIndex>();
 	
@@ -32,14 +36,16 @@
 	
 	private ThreadLocal<SemanticIndexFileDescriptor> currentFile = new ThreadLocal<SemanticIndexFileDescriptor>();
 	
-	private ThreadLocal<Long> currentRevision = new ThreadLocal<Long>();
-	
 	/**
 	 * Indices by language and project. Access requires a lock on {@link #getSyncRoot}
 	 */
 	private static Map<String, Map<URI, WeakReference<ISemanticIndex>>> asyncIndexCache =
 		new HashMap<String, Map<URI, WeakReference<ISemanticIndex>>>();
 	
+	public static ReadWriteLock getTransactionLock() {
+		return transactionLock;
+	}
+	
 	public ISemanticIndex getCurrent() {
 		if (!isInitialized())
 			throw new IllegalStateException("No semantic index has been set-up, use index-setup(|language, project-paths) to set up the index before use.");
@@ -59,17 +65,19 @@
 	}
 	
 	public long startTransaction(ITermFactory factory, IOAgent agent) {
-		currentRevision.set(revisionProvider.getAndIncrement());
+		// TODO: Does this operation need a transaction write lock?
+		
+		long rev = revisionProvider.getAndIncrement();
 		ISemanticIndex currentIndex = current.get();
-		currentIndex.getFile(currentFile.get()).setTimeRevision(new Date(), currentRevision.get().longValue());
+		currentIndex.getFile(currentFile.get()).setTimeRevision(new Date(), rev);
 		
 		assert currentIndex instanceof SemanticIndex; // Prevent multiple transactions.
 		
 		ISemanticIndex transactionIndex = new SemanticIndex();
 		transactionIndex.initialize(factory, agent);
-		current.set(new TransactionSemanticIndex(currentIndex, transactionIndex));
+		current.set(new TransactionSemanticIndex(currentIndex, transactionIndex, currentFile.get()));
 		
-		return currentRevision.get().longValue();
+		return rev;
 	}
 	
 	public void endTransaction() {
@@ -77,11 +85,18 @@
 		ISemanticIndex index = currentIndex.getIndex();
 		ISemanticIndex transactionIndex = currentIndex.getTransactionIndex();
 		current.set(index);
-		// TODO: Efficient copy of transactionIndex into index.
-		// TODO: Acquire lock?
-		index.removeFile(currentFile.get());
-		for(SemanticIndexEntry entry : transactionIndex.getAllEntries())
-			index.add(entry);
+		
+		transactionLock.writeLock().lock();
+		try {
+			// TODO: Efficient copy of transactionIndex into index.
+			if(currentIndex.hasClearedCurrentFile())
+				index.removeFile(currentFile.get());
+			
+			for(SemanticIndexEntry entry : transactionIndex.getAllEntries())
+				index.add(entry);
+		} finally {
+			transactionLock.writeLock().unlock();
+		}
 	}
 	
 	private static Object getSyncRoot() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Tue Apr 17 11:41:46 2012	(r24743)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Wed Apr 18 15:03:08 2012	(r24744)
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+import java.util.concurrent.locks.Lock;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -13,10 +14,14 @@
 public class TransactionSemanticIndex implements ISemanticIndex {
 	private ISemanticIndex index;
 	private ISemanticIndex transactionIndex;
+	private SemanticIndexFileDescriptor currentFile;
+	private boolean clearedCurrentFile = false;
 	
-	public TransactionSemanticIndex(ISemanticIndex index, ISemanticIndex transactionIndex) {
+	public TransactionSemanticIndex(ISemanticIndex index, ISemanticIndex transactionIndex, 
+			SemanticIndexFileDescriptor currentFile) {
 		this.index = index;
 		this.transactionIndex = transactionIndex;
+		this.currentFile = currentFile;
 	}
 	
 	public ISemanticIndex getIndex() {
@@ -27,6 +32,10 @@
 		return transactionIndex;
 	}
 	
+	public boolean hasClearedCurrentFile() {
+		return clearedCurrentFile;
+	}
+	
 	public void initialize(ITermFactory factory, IOAgent agent) {
 		// TODO: Should not be called
 		assert false;
@@ -58,66 +67,107 @@
 
 	public Collection<SemanticIndexEntry> getEntries(IStrategoAppl template) {
 		Collection<SemanticIndexEntry> entries1 = transactionIndex.getEntries(template);
-		Collection<SemanticIndexEntry> entries2 = index.getEntries(template);
-		return concat(entries1, entries2);
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexEntry> entries2 = index.getEntries(template);
+			return concat(entries1, entries2);
+		} finally {
+			getReadLock().unlock();
+		}
 	}
 	
 	public Collection<SemanticIndexEntry> getAllEntries() {
 		Collection<SemanticIndexEntry> entries1 = transactionIndex.getAllEntries();
-		Collection<SemanticIndexEntry> entries2 = index.getAllEntries();
-		return concat(entries1, entries2);
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexEntry> entries2 = index.getAllEntries();
+			return concat(entries1, entries2);
+		} finally {
+			getReadLock().unlock();
+		}
 	}
 
 	public Collection<SemanticIndexEntry> getEntryChildTerms(
 			IStrategoAppl template) {
 		Collection<SemanticIndexEntry> entries1 = transactionIndex.getEntryChildTerms(template);
-		Collection<SemanticIndexEntry> entries2 = index.getEntryChildTerms(template);
-		return concat(entries1, entries2);
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexEntry> entries2 = index.getEntryChildTerms(template);
+			return concat(entries1, entries2);
+		} finally {
+			getReadLock().unlock();
+		}
 	}
 
 	public Collection<SemanticIndexEntry> getEntriesInFile(
 			SemanticIndexFileDescriptor fileDescriptor) {
 		Collection<SemanticIndexEntry> entries1 = transactionIndex.getEntriesInFile(fileDescriptor);
-		Collection<SemanticIndexEntry> entries2 = index.getEntriesInFile(fileDescriptor);
-		return concat(entries1, entries2);
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexEntry> entries2 = index.getEntriesInFile(fileDescriptor);
+			return concat(entries1, entries2);
+		} finally {
+			getReadLock().unlock();
+		}
 	}
 	
 	public SemanticIndexFile getFile(SemanticIndexFileDescriptor fileDescriptor) {
 		// TODO: Does this get the right file?
-		return index.getFile(fileDescriptor);
+		getReadLock().lock();
+		try {
+			return index.getFile(fileDescriptor);
+		} finally {
+			getReadLock().unlock();
+		}
 	}
 	
 	public SemanticIndexFileDescriptor getFileDescriptor(IStrategoTerm fileTerm) {
 		// TODO: Does this get the right file descriptor?
-		return index.getFileDescriptor(fileTerm);
+		getReadLock().lock();
+		try {
+			return index.getFileDescriptor(fileTerm);
+		} finally {
+			getReadLock().unlock();
+		}
 	}
 
 	public void removeFile(IStrategoTerm fileTerm) {
-		// TODO: Does this remove the right file? Should it be called anyway?
-		transactionIndex.removeFile(fileTerm);
+		removeFile(transactionIndex.getFileDescriptor(fileTerm));
 	}
 	
 	public void removeFile(SemanticIndexFileDescriptor fileDescriptor) {
-		// TODO: Does this remove the right file? Should it be called anyway?
+		assert fileDescriptor.equals(currentFile);
+		
+		clearedCurrentFile = true;
 		transactionIndex.removeFile(fileDescriptor);
 	}
 
 	public Collection<SemanticIndexFile> getAllFiles() {
 		// TODO: No duplicates?
 		Collection<SemanticIndexFile> files1 = transactionIndex.getAllFiles();
-		Collection<SemanticIndexFile> files2 = index.getAllFiles();
-		return concat(files1, files2);
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexFile> files2 = index.getAllFiles();
+			return concat(files1, files2);
+		} finally {
+			getReadLock().unlock();
+		}
 	}
 	
 	public Collection<SemanticIndexFileDescriptor> getAllFileDescriptors() {
 		// TODO: No duplicates?
 		Collection<SemanticIndexFileDescriptor> files1 = transactionIndex.getAllFileDescriptors();
-		Collection<SemanticIndexFileDescriptor> files2 = index.getAllFileDescriptors();
-		return concat(files1, files2);
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexFileDescriptor> files2 = index.getAllFileDescriptors();
+			return concat(files1, files2);
+		} finally {
+			getReadLock().unlock();
+		}
 	}
 
 	public void clear() {
-		// TODO: Should not be called
+		// Should not be called.
 		assert false;
 		transactionIndex.clear();
 	}
@@ -135,4 +185,8 @@
 		
 		return l;
 	}
+	
+	private Lock getReadLock() {
+		return SemanticIndexManager.getTransactionLock().readLock();
+	}
 }

From gabrielkonat at gmail.com  Wed Apr 18 17:04:03 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Wed, 18 Apr 2012 15:04:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24745 - in
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang:
	. parallel/stratego_parallel
Message-ID: <20120418150403.953EF108C03E@mx3.tudelft.nl>

Author: gkonat
Date: Wed Apr 18 15:04:03 2012
New Revision: 24745
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24745&sc=1

Log:
Made current term thread local.
Removed locks to protect current term.
Added index library primitives to the thread safe whitelist.

Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/InteropContext.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/PureOperatorSet.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/InteropContext.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/InteropContext.java	Wed Apr 18 15:03:08 2012	(r24744)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/InteropContext.java	Wed Apr 18 15:04:03 2012	(r24745)
@@ -35,7 +35,7 @@
 
 	private final Context context;
 
-	private IStrategoTerm current;
+	private ThreadLocal<IStrategoTerm> current = new ThreadLocal<IStrategoTerm>();
 
 	private final Set<IStrategoConstructor> constructors = new HashSet<IStrategoConstructor>();
 
@@ -52,11 +52,11 @@
 	}
 
 	public IStrategoTerm current() {
-		return current;
+		return current.get();
 	}
 
 	public void setCurrent(IStrategoTerm value) {
-		current = value;
+		current.set(value);
 	}
 
 	public ITermFactory getFactory() {

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java	Wed Apr 18 15:03:08 2012	(r24744)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/ParallelContext.java	Wed Apr 18 15:04:03 2012	(r24745)
@@ -84,29 +84,24 @@
 			throw new ParallelJobAbortedException();
 		
 		String name = primitive.getName();
+	
+		if (!DIAGNOSE_SYNCHRONOUS_OPERATIONS && job.isFocusJob())
+			return super.invokePrimitive(primitive, term, args, targs);
 		
-		// protect access to IContext.getCurrent(), used by primitives
-		synchronized (ParallelAll.instance.getExecutor()) {
+		if (PureOperatorSet.isWhiteListed(name))
+			return super.invokePrimitive(primitive, term, args, targs);
+		
+		if (DIAGNOSE_SYNCHRONOUS_OPERATIONS) {
+			if (lastSynchronousOperation.get() == null)
+				lastSynchronousOperation.set(name);
+		}
+		
+		if (allowUnordered) {
 			synchronized(ParallelContext.class) {
-				if (!DIAGNOSE_SYNCHRONOUS_OPERATIONS && job.isFocusJob())
-					return super.invokePrimitive(primitive, term, args, targs);
-				
-				if (PureOperatorSet.isWhiteListed(name))
-					return super.invokePrimitive(primitive, term, args, targs);
-				
-				if (DIAGNOSE_SYNCHRONOUS_OPERATIONS) {
-					if (lastSynchronousOperation.get() == null)
-						lastSynchronousOperation.set(name);
-				}
-				
-				if (allowUnordered) {
-					synchronized (ParallelAll.instance.getExecutor()) {
-						return super.invokePrimitive(primitive, term, args, targs);
-					}
-				}
+				return super.invokePrimitive(primitive, term, args, targs);
 			}
 		}
-			
+
 		// If all else fails, perform any "black-listed" operations in an ordered fashion
 		waitForFocus();
 		

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/PureOperatorSet.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/PureOperatorSet.java	Wed Apr 18 15:03:08 2012	(r24744)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/parallel/stratego_parallel/PureOperatorSet.java	Wed Apr 18 15:04:03 2012	(r24745)
@@ -48,6 +48,25 @@
 		add("JSGLR_open_parsetable");
 		add("SSL_dynamic_rules_hashtable");
 		add("SSL_table_hashtable");
+		
+		// Index
+		add("LANG_index_add");
+		add("LANG_index_clear_all");
+		add("LANG_index_clear_file");
+		//add("LANG_index_commit");
+		add("LANG_index_end_transaction");
+		add("LANG_index_get_all_files");
+		add("LANG_index_get_all_in_file");
+		add("LANG_index_get_children");
+		add("LANG_index_current_file");
+		add("LANG_index_descendants");
+		add("LANG_index_get_file_revision");
+		add("LANG_index_get_files_newer_than");
+		add("LANG_index_get_files_of");
+		add("LANG_index_get");
+		add("LANG_index_remove");
+		add("LANG_index_setup");
+		add("LANG_index_start_transaction");
 
 		// Collection "read" primitives
 		add("SSL_hashtable_get");

From oskarvanrest at gmail.com  Thu Apr 19 02:20:47 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Thu, 19 Apr 2012 00:20:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24746 -
	experimental/graphical-editor/Ecore/syntax
Message-ID: <20120419002047.B57037F8019@mx1.tudelft.nl>

Author: OskarVanRest
Date: Thu Apr 19 00:20:47 2012
New Revision: 24746
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24746&sc=1

Log:
Added containment (true/false)

Modified:
   experimental/graphical-editor/Ecore/syntax/Ecore.sdf

Modified: experimental/graphical-editor/Ecore/syntax/Ecore.sdf
==============================================================================
--- experimental/graphical-editor/Ecore/syntax/Ecore.sdf	Wed Apr 18 15:04:03 2012	(r24745)
+++ experimental/graphical-editor/Ecore/syntax/Ecore.sdf	Thu Apr 19 00:20:47 2012	(r24746)
@@ -55,6 +55,7 @@
 	Type							-> EReferenceProperty
 	UpperBound						-> EReferenceProperty
 	LowerBound						-> EReferenceProperty
+	Containment						-> EReferenceProperty
 	
 	%% Properties
 	"Id" "=" ID						-> Id {cons("Id")}
@@ -63,6 +64,7 @@
 	"ESuper" "Type" "=" Type		-> ESuperType {cons("ESuperType")}
 	"Upper" "Bound" "=" INT			-> UpperBound {cons("UpperBound")}
 	"Lower" "Bound" "=" INT			-> LowerBound {cons("LowerBound")}
+	"Containment" "=" Boolean		-> Containment {cons("Containment")}
 
 
     %%
@@ -72,4 +74,10 @@
 	ID								-> Type {avoid}
 	"EString"						-> Type {cons("EString")}
 	"EInt"							-> Type {cons("EInt")}
-											
\ No newline at end of file
+											
+											
+	%%
+	%% Utils
+	%%
+	"true"							-> Boolean {cons("True")}
+	"false"							-> Boolean {cons("False")}
\ No newline at end of file

From oskarvanrest at gmail.com  Thu Apr 19 02:21:24 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Thu, 19 Apr 2012 00:21:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24747 - in
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf:
	lib trans/emf
Message-ID: <20120419002124.0E6772B803B@mx2.tudelft.nl>

Author: OskarVanRest
Date: Thu Apr 19 00:21:23 2012
New Revision: 24747
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24747&sc=1

Log:
Fixed containment for non-containment references

Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/lib/ecore-signatures.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/lib/ecore-signatures.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/lib/ecore-signatures.str	Thu Apr 19 00:20:47 2012	(r24746)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/lib/ecore-signatures.str	Thu Apr 19 00:21:23 2012	(r24747)
@@ -2,39 +2,43 @@
 
 signature
   constructors
-    ESuperType : Type -> ESuperType
-    LowerBound : INT -> LowerBound
-    UpperBound : INT -> UpperBound
-    EInt       : Type
-    EString    : Type
-               : ID -> Type
-    Type       : Type -> Type
-    Name       : ID -> Name
-    Id         : ID -> Id
-               : LowerBound -> EReferenceProperty
-               : UpperBound -> EReferenceProperty
-               : Type -> EReferenceProperty
-               : Name -> EReferenceProperty
-               : Id -> EReferenceProperty
-               : LowerBound -> EAttributeProperty
-               : UpperBound -> EAttributeProperty
-               : Type -> EAttributeProperty
-               : Name -> EAttributeProperty
-               : Id -> EAttributeProperty
-               : ESuperType -> EClassProperty
-               : Name -> EClassProperty
-               : Id -> EClassProperty
-               : Name -> EPackageProperty
-               : Id -> EPackageProperty
-               : EReference -> EClassChild
-               : EAttribute -> EClassChild
-               : EClass -> EPackageChild
-    EReference : List(EReferenceProperty) -> EReference
-    EAttribute : List(EAttributeProperty) -> EAttribute
-    EClass     : List(EClassProperty) * List(EClassChild) -> EClass
-    EPackage   : List(EPackageProperty) * List(EPackageChild) -> Start
-               : String -> INT
-               : String -> ID
+    False       : Boolean
+    True        : Boolean
+    Containment : Boolean -> Containment
+    LowerBound  : INT -> LowerBound
+    UpperBound  : INT -> UpperBound
+    ESuperType  : Type -> ESuperType
+    EInt        : Type
+    EString     : Type
+                : ID -> Type
+    Type        : Type -> Type
+    Name        : ID -> Name
+    Id          : ID -> Id
+                : Containment -> EReferenceProperty
+                : LowerBound -> EReferenceProperty
+                : UpperBound -> EReferenceProperty
+                : Type -> EReferenceProperty
+                : Name -> EReferenceProperty
+                : Id -> EReferenceProperty
+                : LowerBound -> EAttributeProperty
+                : UpperBound -> EAttributeProperty
+                : Type -> EAttributeProperty
+                : Name -> EAttributeProperty
+                : Id -> EAttributeProperty
+                : ESuperType -> EClassProperty
+                : Name -> EClassProperty
+                : Id -> EClassProperty
+                : Name -> EPackageProperty
+                : Id -> EPackageProperty
+                : EReference -> EClassChild
+                : EAttribute -> EClassChild
+                : EClass -> EPackageChild
+    EReference  : List(EReferenceProperty) -> EReference
+    EAttribute  : List(EAttributeProperty) -> EAttribute
+    EClass      : List(EClassProperty) * List(EClassChild) -> EClass
+    EPackage    : List(EPackageProperty) * List(EPackageChild) -> Start
+                : String -> INT
+                : String -> ID
 
 
 signature

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Thu Apr 19 00:20:47 2012	(r24746)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Thu Apr 19 00:21:23 2012	(r24747)
@@ -60,8 +60,7 @@
 		where
 			qName := QName(None(), "eStructuralFeatures");
 			fixedAttributes := [
-				XMLAttribute("xsi", "type", "ecore:EReference"),
-				XMLAttribute("containment", "true")
+				XMLAttribute("xsi", "type", "ecore:EReference")
 			];
 			attributes := <conc> (fixedAttributes, properties);
 			children := []
@@ -79,6 +78,8 @@
 	to-xml: Type(type)			-> XMLAttribute("eType", type)		
 	to-xml: ESuperType(type)	-> XMLAttribute("eSuperTypes", <conc-strings> ("#//", type))	
 	to-xml: LowerBound(value) 	-> XMLAttribute("lowerBound", <int-to-string> value)
-	to-xml:	UpperBound(value) 	->  XMLAttribute("upperBound", <int-to-string> value)
+	to-xml:	UpperBound(value) 	-> XMLAttribute("upperBound", <int-to-string> value)
+	to-xml: Containment(True()) -> XMLAttribute("containment", "true")
+	to-xml: Containment(False()) -> XMLAttribute("containment", "false")
 	
 			
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Thu Apr 19 00:20:47 2012	(r24746)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Thu Apr 19 00:21:23 2012	(r24747)
@@ -57,7 +57,8 @@
 			type := <project-declaration(get-constr|NameSpace())> namespace;
 			name := Name(<first-char-to-lowercase> namespace);
 			type' := Type(<conc-strings> ("#//", type));
-			properties := [name, type']
+			containment := Containment(False());
+			properties := [name, type', containment]
 
 	type-to-ecore:
 		"ID" -> EString()
@@ -96,17 +97,17 @@
 			properties' := <map((LowerBound(1) -> LowerBound(0)) <+ id)> properties
 
 	get-properties:
-		sort(s) -> [Name(name), Type(type), LowerBound(1), UpperBound(1)]
+		sort(s) -> [Name(name), Type(type), LowerBound(1), UpperBound(1), Containment(True())]
 		where
 			name := <first-char-to-lowercase> s;
 			type := <get-type> s
 	get-properties:
-		iter(sort(s)) -> [Name(name), Type(type), LowerBound(1), UpperBound(-1)]
+		iter(sort(s)) -> [Name(name), Type(type), LowerBound(1), UpperBound(-1), Containment(True())]
 		where
 			name := <first-char-to-lowercase> s;
 			type := <get-type> s
 	get-properties:
-		iter-star(sort(s)) -> [Name(name), Type(type), LowerBound(0), UpperBound(-1)]
+		iter-star(sort(s)) -> [Name(name), Type(type), LowerBound(0), UpperBound(-1), Containment(True())]
 		where
 			name := <make-plural> <first-char-to-lowercase> s;
 			type := <get-type> s

From gabrielkonat at gmail.com  Thu Apr 19 13:03:59 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Thu, 19 Apr 2012 11:03:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24748 -
	spoofax-contrib/separate-compilation-examples/c-without-macros/trans
	spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans
	spoofax-contrib/se...
Message-ID: <20120419110359.55740CC105@mx4.tudelft.nl>

Author: gkonat
Date: Thu Apr 19 11:03:58 2012
New Revision: 24748
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24748&sc=1

Log:
Changed other separate compilation examples to also work with new locking system.
Some small optimizations.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Thu Apr 19 00:21:23 2012	(r24747)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Thu Apr 19 11:03:58 2012	(r24748)
@@ -26,9 +26,11 @@
     with
       ast'                    := <desugar-all> ast; // Optional AST desugaring
       (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
+      index-start-transaction;
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
+      index-end-transaction;
       filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
 
   // Main entry point for analyzes, called when a single file is opened in the editor.
@@ -144,11 +146,13 @@
       ast''             := <analyze-top> (ast', path, project-path);
       x                 := <collect-one(?COMPLETION(_))> ast'';
       COMPLETION(name)	:= x;
+      index-start-transaction;
       (
         proposals       := <index-lookup-all-levels(|name)> x 
       <+ 
         proposals 			:= []
       );
+      index-end-transaction;
       proposals'        := <map(def-to-name)> proposals
 
   def-to-name:

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Thu Apr 19 00:21:23 2012	(r24747)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Thu Apr 19 11:03:58 2012	(r24748)
@@ -25,9 +25,11 @@
     with
       ast'                    := <id> ast; // Optional AST desugaring
       (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
+      index-start-transaction;
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
+      index-end-transaction;
       filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
 
   // Main entry point for analyzes, called when a single file is opened in the editor.
@@ -148,11 +150,13 @@
       ast'              := <analyze-top> (ast, path, project-path);
       x                 := <collect-one(?COMPLETION(_))> ast';
       COMPLETION(name)  := x;
+      index-start-transaction;
       (
         proposals       := <index-lookup-all-levels(|name)> x
       <+ 
         proposals 			:= []
       );
+      index-end-transaction;
       proposals'        := <map(def-to-name)> proposals
 
   def-to-name:

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Thu Apr 19 00:21:23 2012	(r24747)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Thu Apr 19 11:03:58 2012	(r24748)
@@ -151,11 +151,13 @@
       ast'              := <analyze-top> (ast, path, project-path);
       x                 := <collect-one(?COMPLETION(_))> ast';
       COMPLETION(name)  := x;
+      index-start-transaction;
       (
         proposals       := <index-lookup-all-levels(|name)> x
       <+ 
         proposals       := []
       );
+      index-end-transaction;
       proposals'        := <map(def-to-name)> proposals
 
   def-to-name:

Modified: spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Thu Apr 19 00:21:23 2012	(r24747)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str	Thu Apr 19 11:03:58 2012	(r24748)
@@ -625,7 +625,7 @@
     where
       uris        := <filter(index-uri)> entries;
       referenced  := <concat> <filter(construct-from-uri)> uris;
-      files       := <make-set> <mapconcat(index-get-files-of)> referenced
+      files       := <iset-elements> <iset-addlist(|<mapconcat(index-get-files-of)> referenced)> <new-iset>
  
   /**
    * Convenience function for finding files with Read and Use dependencies to the given definitions.

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Thu Apr 19 00:21:23 2012	(r24747)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Thu Apr 19 11:03:58 2012	(r24748)
@@ -28,9 +28,11 @@
     with
       ast'                    := <id> ast; // Optional AST desugaring
       (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
+      index-start-transaction;
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
+      index-end-transaction;
       filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
 
   // Main entry point for analyzes, called when a single file is opened in the editor.
@@ -157,11 +159,13 @@
       ast'              := <analyze-top> (ast, path, project-path);
       x                 := <collect-one(?COMPLETION(_))> ast';
       COMPLETION(name)	:= x;
+      index-start-transaction;
       (
         proposals       := <index-lookup-all-levels(|name)> x
       <+ 
         proposals 			:= []
       );
+      index-end-transaction;
       proposals'        := <map(def-to-name)> proposals
 
   def-to-name:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntry.java	Thu Apr 19 00:21:23 2012	(r24747)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexEntry.java	Thu Apr 19 11:03:58 2012	(r24748)
@@ -19,7 +19,7 @@
 	
 	private SemanticIndexFileDescriptor fileDescriptor;
 	
-	private transient IStrategoAppl term;
+	private transient IStrategoAppl cachedTerm;
 
 	protected SemanticIndexEntry(IStrategoTerm contents, SemanticIndexURI uri, 
 			SemanticIndexFileDescriptor fileDescriptor) {
@@ -46,12 +46,12 @@
 	 * Returns a term representation of this entry.
 	 */
 	public IStrategoAppl toTerm(ITermFactory factory) {
-		if (term != null)
-			return term;
+		if (cachedTerm != null)
+			return cachedTerm;
 		
-		term = uri.toTerm(factory, contents);
+		cachedTerm = uri.toTerm(factory, contents);
 		
-		return forceImploderAttachment(term);
+		return forceImploderAttachment(cachedTerm);
 	}
 	
 	/**
@@ -69,7 +69,7 @@
 	 * Force an imploder attachment for a term.
 	 * This ensures that there is always some form of position info,
 	 * and makes sure that origin info is not added to the term.
-	 * (The latter would be bad since we cache in {@link #term}.)
+	 * (The latter would be bad since we cache in {@link #cachedTerm}.)
 	 */
 	private IStrategoAppl forceImploderAttachment(IStrategoAppl term) {
 		ImploderAttachment attach = ImploderAttachment.get(uri.getId());
@@ -98,7 +98,7 @@
 				+ ((contents == null) ? 0 : contents.hashCode());
 		result = prime * result
 				+ ((fileDescriptor == null) ? 0 : fileDescriptor.hashCode());
-		result = prime * result + ((term == null) ? 0 : term.hashCode());
+		result = prime * result + ((cachedTerm == null) ? 0 : cachedTerm.hashCode());
 		result = prime * result + ((uri == null) ? 0 : uri.hashCode());
 		return result;
 	}
@@ -122,10 +122,10 @@
 				return false;
 		} else if (!fileDescriptor.equals(other.fileDescriptor))
 			return false;
-		if (term == null) {
-			if (other.term != null)
+		if (cachedTerm == null) {
+			if (other.cachedTerm != null)
 				return false;
-		} else if (!term.equals(other.term))
+		} else if (!cachedTerm.equals(other.cachedTerm))
 			return false;
 		if (uri == null) {
 			if (other.uri != null)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java	Thu Apr 19 00:21:23 2012	(r24747)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java	Thu Apr 19 11:03:58 2012	(r24748)
@@ -16,6 +16,10 @@
 	
 	private final String subfile;
 	
+	private transient IStrategoTerm cachedTerm;
+	
+	private transient String cachedString;
+	
 	public URI getURI() {
 		return uri;
 	}
@@ -30,9 +34,14 @@
 	}
 	
 	public IStrategoTerm toTerm(ITermFactory factory) {
+		if (cachedTerm != null)
+			return cachedTerm;
+		
 		IStrategoString uriString = factory.makeString(toString());
 		IStrategoString descriptorName = factory.makeString(subfile == null ? "" : subfile);
-		return factory.makeTuple(uriString, descriptorName);
+		cachedTerm = factory.makeTuple(uriString, descriptorName);
+		
+		return cachedTerm;
 	}
 	
 	/**
@@ -62,7 +71,13 @@
 	
 	@Override
 	public String toString() {
-		return "file".equals(uri.getScheme()) ? new File(uri).getAbsolutePath().replace("\\", "/") : uri.toString();
+		if(cachedString != null)
+			return cachedString;
+		
+		cachedString = "file".equals(uri.getScheme()) ? 
+				new File(uri).getAbsolutePath().replace("\\", "/") : uri.toString();
+				
+		return cachedString;
 	}
 	
 	@Override

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Thu Apr 19 00:21:23 2012	(r24747)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Thu Apr 19 11:03:58 2012	(r24748)
@@ -37,7 +37,7 @@
 	}
 	
 	public void initialize(ITermFactory factory, IOAgent agent) {
-		// TODO: Should not be called
+		// Should not be called
 		assert false;
 	}
 
@@ -112,8 +112,8 @@
 	}
 	
 	public SemanticIndexFile getFile(SemanticIndexFileDescriptor fileDescriptor) {
-		// TODO: Does this get the right file?
-		getReadLock().lock();
+		// Need a write lock here because getFile can add a new file.
+		getWriteLock().lock();
 		try {
 			return index.getFile(fileDescriptor);
 		} finally {
@@ -122,13 +122,7 @@
 	}
 	
 	public SemanticIndexFileDescriptor getFileDescriptor(IStrategoTerm fileTerm) {
-		// TODO: Does this get the right file descriptor?
-		getReadLock().lock();
-		try {
-			return index.getFileDescriptor(fileTerm);
-		} finally {
-			getReadLock().unlock();
-		}
+		return index.getFileDescriptor(fileTerm);
 	}
 
 	public void removeFile(IStrategoTerm fileTerm) {
@@ -169,16 +163,15 @@
 	public void clear() {
 		// Should not be called.
 		assert false;
-		transactionIndex.clear();
 	}
 
 	public IStrategoTerm toTerm(boolean includePositions) {
-		// TODO: Transaction data not stored?
+		// TODO: Transaction data not stored, this is ok?
 		return index.toTerm(includePositions);
 	}
 	
 	private <T> Collection<T> concat(Collection<T> c1, Collection<T> c2) {
-		// TODO: Make something like CompositeCollection so nothing has to be copied?
+		// Need to copy here, collections could be changed from other threads.
 		List<T> l = new ArrayList<T>(c1.size() + c2.size());
 		l.addAll(c1);
 		l.addAll(c2);
@@ -189,4 +182,8 @@
 	private Lock getReadLock() {
 		return SemanticIndexManager.getTransactionLock().readLock();
 	}
+	
+	private Lock getWriteLock() {
+		return SemanticIndexManager.getTransactionLock().writeLock();
+	}
 }

From gabrielkonat at gmail.com  Thu Apr 19 17:10:40 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Thu, 19 Apr 2012 15:10:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24749 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20120419151040.B8BBCCC116@mx4.tudelft.nl>

Author: gkonat
Date: Thu Apr 19 15:10:38 2012
New Revision: 24749
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24749&sc=1

Log:
Spoofax doesn't explode any more when a project is closed.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java	Thu Apr 19 11:03:58 2012	(r24748)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/FileNotificationServer.java	Thu Apr 19 15:10:38 2012	(r24749)
@@ -1,6 +1,7 @@
 package org.strategoxt.imp.runtime.stratego;
 
 import static org.eclipse.core.resources.IResourceChangeEvent.POST_CHANGE;
+import static org.eclipse.core.resources.IResourceChangeEvent.PRE_CLOSE;
 import static org.eclipse.core.resources.IResourceDelta.ADDED;
 import static org.eclipse.core.resources.IResourceDelta.CHANGED;
 import static org.eclipse.core.resources.IResourceDelta.CONTENT;
@@ -34,6 +35,8 @@
  */
 public class FileNotificationServer implements IResourceChangeListener {
 	
+	private boolean projectClosed = false;
+	
 	private FileNotificationServer() {
 		// Use the statics
 	}
@@ -46,8 +49,15 @@
 	}
 
 	public void resourceChanged(IResourceChangeEvent event) {
-		if (event.getType() == POST_CHANGE) {
-			postResourceChanged(event.getDelta());
+		switch(event.getType()) {
+			case POST_CHANGE:
+				if(!projectClosed)
+					postResourceChanged(event.getDelta());
+				projectClosed = false;
+				break;
+			case PRE_CLOSE:
+				projectClosed = true;
+				break;
 		}
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Thu Apr 19 11:03:58 2012	(r24748)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/QueueAnalysisService.java	Thu Apr 19 15:10:38 2012	(r24749)
@@ -57,7 +57,7 @@
 		try {
 			// TODO: assuming all projects are the same, is that fine?
 			IProject project = EditorIOAgent.getProject(new File(files[0].file));
-			StrategoAnalysisQueueFactory.getInstance().queueAnalysis(relativePaths.toArray(new IPath[0]), project, true);
+			StrategoAnalysisQueueFactory.getInstance().queueAnalysis(relativePaths.toArray(new IPath[0]), project, false);
 		} catch (FileNotFoundException e) {
 			Environment.logException("Background language service failed", e);
 		}

From oskarvanrest at gmail.com  Fri Apr 20 07:41:05 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Fri, 20 Apr 2012 05:41:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24750 - in
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf:
	test/emf trans/emf
Message-ID: <20120420054105.23369CC076@mx4.tudelft.nl>

Author: OskarVanRest
Date: Fri Apr 20 05:41:04 2012
New Revision: 24750
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24750&sc=1

Log:
Added the following rule:
If there is a class A with a namespacedef for class B, and there is a class C that has only a reference to class B and no attributes, then, remove class C and let class A extend class B.
I'm not sure yet if this rule holds in every situation and/or in what ways this rule possibly needs to be extended. But for now, it's enough to generate a correct .ecore for the Entity Language (what was missing was that an Entity didn't extend a Type).

Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/entity-lang.sdf
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/entity-lang.sdf
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/entity-lang.sdf	Thu Apr 19 15:10:38 2012	(r24749)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/test/emf/entity-lang.sdf	Fri Apr 20 05:41:04 2012	(r24750)
@@ -2,123 +2,60 @@
 
 exports
 
-	context-free syntax    
-		"module" Module@=ID Definition*					-> Start      {"Module"} 
-		"entity" Type@=ID "{" Property* "}" 			-> Definition {"Entity"}
-		Property@=ID  ":" Type at Type               		-> Property   {"Property"}
-    
-    	
-	context-free syntax
-		ID                              	-> Type {"Type"}
-		"Int"								-> Type {"IntegerType", prefer}
-		"String"							-> Type {"StringType" , prefer}
+  context-free start-symbols
+  
+    Start
+
+  context-free syntax
+  
+    "module" Module@=ID Definition*		-> Start {"Module", scope(Type)}
+    "entity" Type@=ID "{" Property* "}"	-> Definition {"Entity", scope(Property)}
+    Property@=ID ":" Type				-> Property {"Property"}
+    Type at ID								-> Type {"EntityType"}
+	"Int"								-> Type {"Int", prefer}
+	"String"							-> Type {"String", prefer}
 
-
 exports
 
   lexical syntax
-
-    [a-zA-Z]* "CONTENTCOMPLETE" [0-9]+ -> CONTENTCOMPLETE {avoid}
-
-    [a-zA-Z][a-zA-Z0-9\_\-]* -> ID
-    "-"? [0-9]+            -> INT
-
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
     "\"" StringChar* "\"" -> STRING
     ~[\"\n]               -> StringChar
     "\\\""                -> StringChar
     BackSlashChar         -> StringChar
     "\\"                  -> BackSlashChar
-
+    
     [\ \t\n\r] -> LAYOUT
-
+    
     [\*]                             -> CommentChar
     "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
     "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
-
+    
     -> EOF
-
+  
   lexical restrictions
-
+  
     %% Ensure greedy matching for lexicals
-
+  
     CommentChar   -/- [\/]
     INT           -/- [0-9]
-    ID            -/- [a-zA-Z0-9\_\-]
-
+    ID            -/- [a-zA-Z0-9\_]
+    
     %% EOF may not be followed by any char
-
+    
     EOF           -/- ~[]
 
-    %% Backslash chars in strings may not be followed by "
-
+    %% Backslash chars in strings may not be followed by " 
+    
     BackSlashChar -/- [\"]
 
   context-free restrictions
-
+  
     %% Ensure greedy matching for comments
 
     LAYOUT? -/- [\ \t\n\r]
     LAYOUT? -/- [\/].[\/]
     LAYOUT? -/- [\/].[\*]
-
-	lexical restrictions
-
-		"main"
-		"module"
-		"package"
-		"imports"
-		"language" -/- [A-Za-z0-9\_]
-
-
-	lexical syntax
-
-    "language"          -> Reserved
-    "project"           -> Reserved
-    "retain"            -> Reserved
-    "with"              -> Reserved
-    "unimports"         -> Reserved
-
-
-
-    "imports"           -> Reserved
-    "overlays"          -> Reserved
-    "rules"             -> Reserved
-    "signature"         -> Reserved
-    "strategies"        -> Reserved
-    "attributes"        -> Reserved
-
-    "aliases"           -> Reserved
-    "lexical"           -> Reserved
-    "priorities"        -> Reserved
-    "context-free"      -> Reserved
-    "definition"        -> Reserved
-    "syntax"            -> Reserved
-    "variables"         -> Reserved
-    "module"            -> Reserved
-    "imports"           -> Reserved
-    "exports"           -> Reserved
-    "hiddens"           -> Reserved
-    "left"              -> Reserved
-    "right"             -> Reserved
-    "assoc"             -> Reserved
-    "non-assoc"         -> Reserved
-    "bracket"           -> Reserved
-    "sorts"             -> Reserved
-    "bracket"           -> Reserved
-    "sorts"             -> Reserved
-    "restrictions"      -> Reserved
-  	"as"								-> Reserved
- 		"main"							-> Reserved
- 		"__default"					-> Reserved
- 		"__internal"				-> Reserved
- 		"template"          -> Reserved
- 		"templates"         -> Reserved
-
- 		Reserved 						-> ReservedName[[ESV]]
- 		ReservedName[[ESV]]	-> ID {reject}
-
-
-	lexical syntax
- 		"package"  	-> EnclosingSymbol
-		"assembly"  -> EnclosingSymbol
-		"module"  	-> EnclosingSymbol

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str	Thu Apr 19 15:10:38 2012	(r24749)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str	Fri Apr 20 05:41:04 2012	(r24750)
@@ -10,19 +10,30 @@
 	map-all: 
 		term -> term
 		where
+			//<enable-namespace-debugging> "";
 			term' := <collect-om(?context-free-syntax(_))> term;
 			<alltd(productions)> term';
-			<alltd(namespacerefs)> term'
+			<alltd(namespacedefs)> term';
+			<alltd(constrctors)> term'
 	
 rules
 		
 	productions:
-		p at prod(_, sort(x), attrs(attributes)) -> p
+		p at prod(_, sort(x), _) -> p
 		where 
 			<store-declaration(|Production())> (x, p)
 			
-	namespacerefs:
+	namespacedefs:
 		p at prod(lhs, _, _) -> p
 		where
-			namespace := <get-namespace> p; // here we assume (for now) that one production has at most one namespacedef
-			<store-declaration(|NameSpace())> (namespace, p)
\ No newline at end of file
+			namespacedef := <get-namespacedef> p; // here we assume (for now) that one production has at most one namespacedef
+			<store-declaration(|Namespacedef())> (namespacedef, p)
+			
+	constrctors:
+		p at prod(_, _, attrs(attributes)) -> p
+		where
+			<fetch(?Constructor(constructor))> attributes;
+			<store-declaration(|Constructor())> (<un-double-quote> constructor, p)
+	
+	
+	
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str	Thu Apr 19 15:10:38 2012	(r24749)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str	Fri Apr 20 05:41:04 2012	(r24750)
@@ -3,4 +3,5 @@
 signature constructors
 
 	Production		: NameSpace
-	NameSpace		: NameSpace
\ No newline at end of file
+	Namespacedef	: NameSpace
+	Constructor		: NameSpace
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str	Thu Apr 19 15:10:38 2012	(r24749)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str	Fri Apr 20 05:41:04 2012	(r24750)
@@ -2,22 +2,41 @@
 
 imports
 	include/SDF
+	lib/ecore-signatures
 
 rules
 	
 	get-constr:
 		prod(_, _, attrs(attributes)) -> constr
 		where
-			constructor := <getfirst(?Constructor(consName))> attributes;
+			constructor := <fetch-elem(?Constructor(consName))> attributes;
 			constr := <un-double-quote> consName
 	
-	get-namespace:
+	get-namespacedef:
 		prod(lhs, _, _) -> namespace	
 		where
-			namespacedef(namespace, _) := <getfirst(?namespacedef(_, _))> lhs
+			<getfirst(?namespacedef(namespace, _))> lhs
 			
 	get-sort:
 		prod(lhs, sort(x), attrs(attributes)) -> x
 		
 	get-sort:
-		sort(s) -> s
\ No newline at end of file
+		sort(s) -> s
+		
+	get-lhs:
+		prod(lhs, _, _) -> lhs	
+	
+	get-reference-type:
+		EReference(properties) -> type'
+		where
+			<fetch-elem(?Type(type))> properties;
+			type' := <string-replace(|"#//", "")> type
+			
+	get-eSuperType:
+		EClass(properties, children) -> type
+		where
+			<fetch-elem(?ESuperType(type))> properties
+		
+		
+		
+		
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Thu Apr 19 15:10:38 2012	(r24749)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Fri Apr 20 05:41:04 2012	(r24750)
@@ -8,7 +8,7 @@
 	emf/projections
 	
 strategies
-	sdf-to-ecore = topdown(try(to-ecore)); create-superclasses
+	sdf-to-ecore = topdown(try(to-ecore)); create-superclasses; collapse-classes
 
 rules
 	to-ecore:
@@ -29,43 +29,54 @@
 	to-ecore:
 		sort(primitiveType) -> EAttribute(properties)
 		where 
-			name := Name(primitiveType);
+			name := Name(<first-char-to-lowercase> primitiveType);
 			type := Type(<type-to-ecore> primitiveType);
 			properties := [name, type]
-	
+
 	to-ecore:
 		namespacedef(_, sort(primitiveType)) -> EAttribute(properties)
 		where 
-			name := Name("name");
+			name := Name("identifier");
 			type := Type(<type-to-ecore> primitiveType);
 			properties := [name, type]
 
-	to-ecore:
-		namespacedef(_, x) -> EReference(properties')
-		where 
-			properties := <get-properties> x;
-			properties' := <map((Name(_) -> Name("name")) <+ id)> properties
-			
+	// to-ecore:
+	// 	namespacedef(_, x) -> EReference(properties')
+	// 	where 
+	// 		properties := <get-properties> x;
+	// 		properties' := <map((Name(_) -> Name("name2")) <+ id)> properties
+	
+	// containment = true 
 	to-ecore:
 		x -> EReference(properties)
 		where
 			properties := <get-properties> x
 
+	containment = false
 	to-ecore:
 		namespaceref2(namespace, _) ->  EReference(properties)
 		where
-			type := <project-declaration(get-constr|NameSpace())> namespace;
+			type := <project-declaration(get-constr|Namespacedef())> namespace;
 			name := Name(<first-char-to-lowercase> namespace);
 			type' := Type(<conc-strings> ("#//", type));
 			containment := Containment(False());
 			properties := [name, type', containment]
 
+	//TODO: extract these from lexical syntax
 	type-to-ecore:
 		"ID" -> EString()
 		
 	type-to-ecore:
 		"INT" -> EInt()
 
+
+	type-to-ecore:
+		"StateID" -> EString()
+	type-to-ecore:
+		"OpLabel" -> EString()
+	type-to-ecore:
+		"Value" -> EString()
+
 rules
 	
 	add-super-type(|sort):
@@ -91,26 +102,29 @@
 			<equal> (s, constructor)
 
 	get-properties:
-		opt(sort) -> properties'
+		opt(x) -> properties'
 		where
-			properties := <get-properties> sort;
+			properties := <get-properties> x;
 			properties' := <map((LowerBound(1) -> LowerBound(0)) <+ id)> properties
 
 	get-properties:
-		sort(s) -> [Name(name), Type(type), LowerBound(1), UpperBound(1), Containment(True())]
+		sort(s) -> [Name(name), Type(type), LowerBound(1), UpperBound(1), Containment(containment)]
 		where
 			name := <first-char-to-lowercase> s;
-			type := <get-type> s
+			type := <get-type> s;
+			containment := <containment> s
 	get-properties:
-		iter(sort(s)) -> [Name(name), Type(type), LowerBound(1), UpperBound(-1), Containment(True())]
+		iter(sort(s)) -> [Name(name), Type(type), LowerBound(1), UpperBound(-1), Containment(containment)]
 		where
 			name := <first-char-to-lowercase> s;
-			type := <get-type> s
+			type := <get-type> s;
+			containment := <containment> s
 	get-properties:
-		iter-star(sort(s)) -> [Name(name), Type(type), LowerBound(0), UpperBound(-1), Containment(True())]
+		iter-star(sort(s)) -> [Name(name), Type(type), LowerBound(0), UpperBound(-1), Containment(containment)]
 		where
 			name := <make-plural> <first-char-to-lowercase> s;
-			type := <get-type> s
+			type := <get-type> s;
+			containment := <containment> s
 			
 	get-type:
 		s -> type'
@@ -159,6 +173,21 @@
 		string -> <conc-strings> (string, ".")
 
 
+rules
+	
+	containment:
+		namespaceref2(_, _) -> False()
+	
+	containment:
+		sort -> True()
+		where
+			lhs := <project-declaration(get-lhs|Production())> sort; // what if the sort is not unique? And what if there is a whole sequence of productions that needs to be followed to determine containment?
+			<fetch(?namespacedef(_, _))> lhs
+
+	containment:
+		sort -> False()
+		where not (lhs := <project-declaration(get-lhs|Production())> sort;
+			 <fetch(?namespacedef(_, _))> lhs )
 
 rules
 
@@ -176,4 +205,29 @@
 			properties := [name];
 			children := []			
 			
+rules
+	
+	collapse-classes:
+		EPackage(properties, classes) -> EPackage(properties, classes'')
+		where
+			classes-with-one-ref := <filter(?EClass(_, [EReference(_)]))> classes; //TODO: only take classes that extend another class
+			classes' := <diff> (classes, classes-with-one-ref);			
+			classes'' := <map(collapse-class(|classes-with-one-ref) <+ id)> classes'
+		
+	collapse-class(|classes-with-one-ref):
+		e at EClass(properties, children) -> EClass(properties', children)
+		where
+			<fetch(?Name(constructor))> properties;
+			namespacedef := <project-declaration(get-namespacedef|Constructor())> constructor;
+			class := <fetch-elem(collapse-class(|constructor))> classes-with-one-ref;
+			eSuperType := <get-eSuperType> class;
+			properties' := <conc> (properties, [ESuperType(eSuperType)])
+	
+	collapse-class(|sort):
+		e at EClass(_, [eReference]) -> e
+		where
+			namespaceref := <get-reference-type> eReference;
+			<equal> (sort, namespaceref)
+		
+		
 			
\ No newline at end of file

From oskarvanrest at gmail.com  Fri Apr 20 08:23:15 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Fri, 20 Apr 2012 06:23:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24751 -
	experimental/graphical-editor/Ecore/syntax
Message-ID: <20120420062315.F098C2B8004@mx2.tudelft.nl>

Author: OskarVanRest
Date: Fri Apr 20 06:23:15 2012
New Revision: 24751
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24751&sc=1

Log:
Added property "abstract"

Modified:
   experimental/graphical-editor/Ecore/syntax/Ecore.sdf

Modified: experimental/graphical-editor/Ecore/syntax/Ecore.sdf
==============================================================================
--- experimental/graphical-editor/Ecore/syntax/Ecore.sdf	Fri Apr 20 05:41:04 2012	(r24750)
+++ experimental/graphical-editor/Ecore/syntax/Ecore.sdf	Fri Apr 20 06:23:15 2012	(r24751)
@@ -41,6 +41,7 @@
 	Id								-> EClassProperty
 	Name							-> EClassProperty
 	ESuperType						-> EClassProperty
+	Abstract						-> EClassProperty
 
 	%% EAttribute properties
 	Id								-> EAttributeProperty
@@ -65,7 +66,7 @@
 	"Upper" "Bound" "=" INT			-> UpperBound {cons("UpperBound")}
 	"Lower" "Bound" "=" INT			-> LowerBound {cons("LowerBound")}
 	"Containment" "=" Boolean		-> Containment {cons("Containment")}
-
+	"Abstract" "=" Boolean			-> Abstract {cons("Abstract")}
 
     %%
     %% TYPES

From oskarvanrest at gmail.com  Fri Apr 20 08:28:48 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Fri, 20 Apr 2012 06:28:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24752 - in
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf:
	lib trans/emf
Message-ID: <20120420062848.826E57F8005@mx1.tudelft.nl>

Author: OskarVanRest
Date: Fri Apr 20 06:28:48 2012
New Revision: 24752
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24752&sc=1

Log:
Super classes are abstract now

Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/lib/ecore-signatures.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/lib/ecore-signatures.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/lib/ecore-signatures.str	Fri Apr 20 06:23:15 2012	(r24751)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/lib/ecore-signatures.str	Fri Apr 20 06:28:48 2012	(r24752)
@@ -4,6 +4,7 @@
   constructors
     False       : Boolean
     True        : Boolean
+    Abstract    : Boolean -> Abstract
     Containment : Boolean -> Containment
     LowerBound  : INT -> LowerBound
     UpperBound  : INT -> UpperBound
@@ -25,6 +26,7 @@
                 : Type -> EAttributeProperty
                 : Name -> EAttributeProperty
                 : Id -> EAttributeProperty
+                : Abstract -> EClassProperty
                 : ESuperType -> EClassProperty
                 : Name -> EClassProperty
                 : Id -> EClassProperty

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Fri Apr 20 06:23:15 2012	(r24751)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Fri Apr 20 06:28:48 2012	(r24752)
@@ -79,7 +79,9 @@
 	to-xml: ESuperType(type)	-> XMLAttribute("eSuperTypes", <conc-strings> ("#//", type))	
 	to-xml: LowerBound(value) 	-> XMLAttribute("lowerBound", <int-to-string> value)
 	to-xml:	UpperBound(value) 	-> XMLAttribute("upperBound", <int-to-string> value)
-	to-xml: Containment(True()) -> XMLAttribute("containment", "true")
-	to-xml: Containment(False()) -> XMLAttribute("containment", "false")
+	to-xml: Containment(True())	-> XMLAttribute("containment", "true")
+	to-xml: Containment(False())-> XMLAttribute("containment", "false")
+	to-xml: Abstract(True())	-> XMLAttribute("abstract", "true")
+	to-xml: Abstract(False())	-> XMLAttribute("abstract", "false")
 	
 			
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Fri Apr 20 06:23:15 2012	(r24751)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Fri Apr 20 06:28:48 2012	(r24752)
@@ -202,7 +202,8 @@
 		sort ->  EClass(properties, children)
 		where
 			name := Name(sort);
-			properties := [name];
+			abstract := Abstract(True());
+			properties := [name, abstract];
 			children := []			
 			
 rules

From gabrielkonat at gmail.com  Fri Apr 20 13:52:18 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Fri, 20 Apr 2012 11:52:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24753 -
	spoofax-contrib/separate-compilation-examples/c-without-macros
	spoofax-contrib/separate-compilation-examples/csharp-partial-classses
	spoofax-contrib/separate-compi...
Message-ID: <20120420115218.F20EA2B8014@mx2.tudelft.nl>

Author: gkonat
Date: Fri Apr 20 11:52:18 2012
New Revision: 24753
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24753&sc=1

Log:
Move stratego index libraries to org.spoofax.interpreter.library.language project.
Moved java and stratego files in org.spoofax.interpreter.library.language into separate directories.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/jdbm/
      - copied from r24743, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/
      - copied from r24743, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str
      - copied unchanged from r24744, spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str
      - copied unchanged from r24743, spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str
      - copied unchanged from r24743, spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/test/stratego/
Replaced:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexManager.java
      - copied unchanged from r24744, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
      - copied unchanged from r24744, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
Deleted:
   spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/jdbm/
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/
Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml	Fri Apr 20 06:28:48 2012	(r24752)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/build.main.xml	Fri Apr 20 11:52:18 2012	(r24753)
@@ -50,15 +50,15 @@
         
         <target name="copy-lib-files" if="isWin" depends="os-detection">
           <!-- Copy libraries from naming experiment, Ant is stupid and cannot link on Windows :( -->
-          <copy file="../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str" tofile="lib/index-library.str"/>
-          <copy file="../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str" tofile="lib/analysis-library.str"/>
-          <copy file="../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str" tofile="lib/compilation-library.str"/>
+          <copy file="../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str" tofile="lib/index-library.str"/>
+          <copy file="../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str" tofile="lib/analysis-library.str"/>
+          <copy file="../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str" tofile="lib/compilation-library.str"/>
         </target>
         
         <target name="link-lib-files" unless="isWin" depends="os-detection">
           <!-- Link libraries from naming experiment -->
-          <symlink resource="${basedir}/../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str" link="${basedir}/lib/index-library.str" overwrite="true" />
-          <symlink resource="${basedir}/../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str" link="${basedir}/lib/analysis-library.str" overwrite="true" />
-          <symlink resource="${basedir}/../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str" link="${basedir}/lib/compilation-library.str" overwrite="true" />
+          <symlink resource="${basedir}/../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str" link="${basedir}/lib/index-library.str" overwrite="true" />
+          <symlink resource="${basedir}/../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str" link="${basedir}/lib/analysis-library.str" overwrite="true" />
+          <symlink resource="${basedir}/../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str" link="${basedir}/lib/compilation-library.str" overwrite="true" />
         </target>
     </project>
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml	Fri Apr 20 06:28:48 2012	(r24752)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/build.main.xml	Fri Apr 20 11:52:18 2012	(r24753)
@@ -50,15 +50,15 @@
       	
         <target name="copy-lib-files" if="isWin" depends="os-detection">
           <!-- Copy libraries from naming experiment, Ant is stupid and cannot link on Windows :( -->
-        	<copy file="../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str" tofile="lib/index-library.str"/>
-          <copy file="../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str" tofile="lib/analysis-library.str"/>
-          <copy file="../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str" tofile="lib/compilation-library.str"/>
+          <copy file="../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str" tofile="lib/index-library.str"/>
+          <copy file="../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str" tofile="lib/analysis-library.str"/>
+          <copy file="../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str" tofile="lib/compilation-library.str"/>
         </target>
-      	
+        
         <target name="link-lib-files" unless="isWin" depends="os-detection">
-        	<!-- Link libraries from naming experiment -->
-          <symlink resource="${basedir}/../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str" link="${basedir}/lib/index-library.str" overwrite="true" />
-          <symlink resource="${basedir}/../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str" link="${basedir}/lib/analysis-library.str" overwrite="true" />
-          <symlink resource="${basedir}/../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str" link="${basedir}/lib/compilation-library.str" overwrite="true" />
+          <!-- Link libraries from naming experiment -->
+          <symlink resource="${basedir}/../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str" link="${basedir}/lib/index-library.str" overwrite="true" />
+          <symlink resource="${basedir}/../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str" link="${basedir}/lib/analysis-library.str" overwrite="true" />
+          <symlink resource="${basedir}/../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str" link="${basedir}/lib/compilation-library.str" overwrite="true" />
         </target>
     </project>
\ No newline at end of file

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml	Fri Apr 20 06:28:48 2012	(r24752)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/build.main.xml	Fri Apr 20 11:52:18 2012	(r24753)
@@ -50,15 +50,15 @@
         
         <target name="copy-lib-files" if="isWin" depends="os-detection">
           <!-- Copy libraries from naming experiment, Ant is stupid and cannot link on Windows :( -->
-          <copy file="../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str" tofile="lib/index-library.str"/>
-          <copy file="../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str" tofile="lib/analysis-library.str"/>
-          <copy file="../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str" tofile="lib/compilation-library.str"/>
+          <copy file="../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str" tofile="lib/index-library.str"/>
+          <copy file="../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str" tofile="lib/analysis-library.str"/>
+          <copy file="../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str" tofile="lib/compilation-library.str"/>
         </target>
         
         <target name="link-lib-files" unless="isWin" depends="os-detection">
           <!-- Link libraries from naming experiment -->
-          <symlink resource="${basedir}/../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str" link="${basedir}/lib/index-library.str" overwrite="true" />
-          <symlink resource="${basedir}/../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str" link="${basedir}/lib/analysis-library.str" overwrite="true" />
-          <symlink resource="${basedir}/../../../spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str" link="${basedir}/lib/compilation-library.str" overwrite="true" />
+          <symlink resource="${basedir}/../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str" link="${basedir}/lib/index-library.str" overwrite="true" />
+          <symlink resource="${basedir}/../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str" link="${basedir}/lib/analysis-library.str" overwrite="true" />
+          <symlink resource="${basedir}/../../../spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str" link="${basedir}/lib/compilation-library.str" overwrite="true" />
         </target>
     </project>
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath	Fri Apr 20 06:28:48 2012	(r24752)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/.classpath	Fri Apr 20 11:52:18 2012	(r24753)
@@ -1,8 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
+	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="src" path="src/test/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="lib" path="lib/guava-11.0.2.jar" sourcepath="lib/guava-11.0.1-sources.jar">
 		<attributes>
 			<attribute name="javadoc_location" value="jar:platform:/resource/org.spoofax.interpreter.library.language/lib/guava-11.0.1-javadoc.jar!/"/>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties	Fri Apr 20 06:28:48 2012	(r24752)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/build.properties	Fri Apr 20 11:52:18 2012	(r24753)
@@ -1,5 +1,6 @@
-source.. = src/
+source.. = src/main/java,\
+           src/test/java
 output.. = bin/
 bin.includes = META-INF/,\
-               .,\
-               lib/guava-11.0.2.jar
+               lib/guava-11.0.2.jar,\
+               .

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexManager.java (from r24744, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexManager.java	Fri Apr 20 11:52:18 2012	(r24753, copy of r24744, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/SemanticIndexManager.java)
@@ -0,0 +1,169 @@
+package org.spoofax.interpreter.library.language;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.Writer;
+import java.lang.ref.WeakReference;
+import java.net.URI;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.io.binary.TermReader;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SemanticIndexManager {
+	
+	private final static AtomicLong revisionProvider = new AtomicLong();
+	
+	private final static ReadWriteLock transactionLock = new ReentrantReadWriteLock();
+
+	private ThreadLocal<ISemanticIndex> current = new ThreadLocal<ISemanticIndex>();
+	
+	private ThreadLocal<URI> currentProject = new ThreadLocal<URI>();
+	
+	private ThreadLocal<String> currentLanguage = new ThreadLocal<String>();
+	
+	private ThreadLocal<SemanticIndexFileDescriptor> currentFile = new ThreadLocal<SemanticIndexFileDescriptor>();
+	
+	/**
+	 * Indices by language and project. Access requires a lock on {@link #getSyncRoot}
+	 */
+	private static Map<String, Map<URI, WeakReference<ISemanticIndex>>> asyncIndexCache =
+		new HashMap<String, Map<URI, WeakReference<ISemanticIndex>>>();
+	
+	public static ReadWriteLock getTransactionLock() {
+		return transactionLock;
+	}
+	
+	public ISemanticIndex getCurrent() {
+		if (!isInitialized())
+			throw new IllegalStateException("No semantic index has been set-up, use index-setup(|language, project-paths) to set up the index before use.");
+		
+		return current.get();
+	}
+	
+	public SemanticIndexFileDescriptor getCurrentFile() {
+		if (!isInitialized())
+			throw new IllegalStateException("No semantic index has been set-up, use index-setup(|language, project-paths) to set up the index before use.");
+		
+		return currentFile.get();
+	}
+	
+	public void setCurrentFile(SemanticIndexFileDescriptor currentFile) {
+		this.currentFile.set(currentFile);
+	}
+	
+	public long startTransaction(ITermFactory factory, IOAgent agent) {
+		// TODO: Does this operation need a transaction write lock?
+		
+		long rev = revisionProvider.getAndIncrement();
+		ISemanticIndex currentIndex = current.get();
+		currentIndex.getFile(currentFile.get()).setTimeRevision(new Date(), rev);
+		
+		assert currentIndex instanceof SemanticIndex; // Prevent multiple transactions.
+		
+		ISemanticIndex transactionIndex = new SemanticIndex();
+		transactionIndex.initialize(factory, agent);
+		current.set(new TransactionSemanticIndex(currentIndex, transactionIndex, currentFile.get()));
+		
+		return rev;
+	}
+	
+	public void endTransaction() {
+		TransactionSemanticIndex currentIndex = (TransactionSemanticIndex)current.get();
+		ISemanticIndex index = currentIndex.getIndex();
+		ISemanticIndex transactionIndex = currentIndex.getTransactionIndex();
+		current.set(index);
+		
+		transactionLock.writeLock().lock();
+		try {
+			// TODO: Efficient copy of transactionIndex into index.
+			if(currentIndex.hasClearedCurrentFile())
+				index.removeFile(currentFile.get());
+			
+			for(SemanticIndexEntry entry : transactionIndex.getAllEntries())
+				index.add(entry);
+		} finally {
+			transactionLock.writeLock().unlock();
+		}
+	}
+	
+	private static Object getSyncRoot() {
+		return SemanticIndexManager.class;
+	}
+	
+	public AtomicLong getRevisionProvider() {
+		return revisionProvider;
+	}
+	
+	public boolean isInitialized() {
+		return current.get() != null;
+	}
+	
+	public static boolean isKnownIndexingLanguage(String language) {
+		synchronized (getSyncRoot()) {
+			return asyncIndexCache.containsKey(language);
+		}
+	}
+	
+	public void loadIndex(String language, URI project, ITermFactory factory, IOAgent agent) {
+		synchronized (getSyncRoot()) {
+			Map<URI, WeakReference<ISemanticIndex>> indicesByProject =
+					asyncIndexCache.get(language);
+			if (indicesByProject == null) {
+				indicesByProject = new HashMap<URI, WeakReference<ISemanticIndex>>();
+				asyncIndexCache.put(language, indicesByProject);
+			}
+			WeakReference<ISemanticIndex> indexRef = indicesByProject.get(project);
+			ISemanticIndex index = indexRef == null ? null : indexRef.get();
+			if (index == null) {
+				index = tryReadFromFile(getIndexFile(project, language), factory, agent);
+			}
+			if (index == null) {
+				index = new SemanticIndex();
+				NotificationCenter.notifyNewProject(project);
+			}
+			indicesByProject.put(project, new WeakReference<ISemanticIndex>(index));
+			current.set(index);
+			currentLanguage.set(language);
+			currentProject.set(project);
+		}
+	}
+	
+	public ISemanticIndex tryReadFromFile(File file, ITermFactory factory, IOAgent agent) {
+		try {
+			IStrategoTerm term = new TermReader(factory).parseFromFile(file.toString());
+			return SemanticIndex.fromTerm(term, factory, agent, true); // TODO: Move to other class
+		} catch (IOException e) {
+			return null;
+		}
+	}
+	
+	public void storeCurrent() throws IOException {
+		File file = getIndexFile(currentProject.get(), currentLanguage.get());
+		IStrategoTerm stored = getCurrent().toTerm(true);
+		Writer writer = new BufferedWriter(new FileWriter(file));
+		try {
+			stored.writeAsString(writer, IStrategoTerm.INFINITE);
+		} finally {
+			writer.close();
+		}
+	}
+
+	private File getIndexFile(URI project, String language) {
+		File container = new File(new File(project), ".cache");
+		container.mkdirs();
+		return new File(container, language + ".idx");
+	}
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java (from r24744, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Fri Apr 20 11:52:18 2012	(r24753, copy of r24744, spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java)
@@ -0,0 +1,192 @@
+package org.spoofax.interpreter.library.language;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.concurrent.locks.Lock;
+
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public class TransactionSemanticIndex implements ISemanticIndex {
+	private ISemanticIndex index;
+	private ISemanticIndex transactionIndex;
+	private SemanticIndexFileDescriptor currentFile;
+	private boolean clearedCurrentFile = false;
+	
+	public TransactionSemanticIndex(ISemanticIndex index, ISemanticIndex transactionIndex, 
+			SemanticIndexFileDescriptor currentFile) {
+		this.index = index;
+		this.transactionIndex = transactionIndex;
+		this.currentFile = currentFile;
+	}
+	
+	public ISemanticIndex getIndex() {
+		return index;
+	}
+	
+	public ISemanticIndex getTransactionIndex() {
+		return transactionIndex;
+	}
+	
+	public boolean hasClearedCurrentFile() {
+		return clearedCurrentFile;
+	}
+	
+	public void initialize(ITermFactory factory, IOAgent agent) {
+		// TODO: Should not be called
+		assert false;
+	}
+
+	public SemanticIndexEntryFactory getFactory() {
+		return index.getFactory();
+	}
+
+	public void add(IStrategoAppl entry, SemanticIndexFileDescriptor fileDescriptor) {
+		transactionIndex.add(entry, fileDescriptor);
+	}
+	
+	public void add(SemanticIndexEntry entry) {
+		transactionIndex.add(entry);
+	}
+
+	public void addAll(IStrategoList entries, SemanticIndexFileDescriptor fileDescriptor) {
+		transactionIndex.addAll(entries, fileDescriptor);
+	}
+
+	public void remove(IStrategoAppl template) {
+		transactionIndex.remove(template);
+	}
+
+	public void remove(IStrategoAppl template, SemanticIndexFileDescriptor fileDescriptor) {
+		transactionIndex.remove(template, fileDescriptor);
+	}
+
+	public Collection<SemanticIndexEntry> getEntries(IStrategoAppl template) {
+		Collection<SemanticIndexEntry> entries1 = transactionIndex.getEntries(template);
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexEntry> entries2 = index.getEntries(template);
+			return concat(entries1, entries2);
+		} finally {
+			getReadLock().unlock();
+		}
+	}
+	
+	public Collection<SemanticIndexEntry> getAllEntries() {
+		Collection<SemanticIndexEntry> entries1 = transactionIndex.getAllEntries();
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexEntry> entries2 = index.getAllEntries();
+			return concat(entries1, entries2);
+		} finally {
+			getReadLock().unlock();
+		}
+	}
+
+	public Collection<SemanticIndexEntry> getEntryChildTerms(
+			IStrategoAppl template) {
+		Collection<SemanticIndexEntry> entries1 = transactionIndex.getEntryChildTerms(template);
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexEntry> entries2 = index.getEntryChildTerms(template);
+			return concat(entries1, entries2);
+		} finally {
+			getReadLock().unlock();
+		}
+	}
+
+	public Collection<SemanticIndexEntry> getEntriesInFile(
+			SemanticIndexFileDescriptor fileDescriptor) {
+		Collection<SemanticIndexEntry> entries1 = transactionIndex.getEntriesInFile(fileDescriptor);
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexEntry> entries2 = index.getEntriesInFile(fileDescriptor);
+			return concat(entries1, entries2);
+		} finally {
+			getReadLock().unlock();
+		}
+	}
+	
+	public SemanticIndexFile getFile(SemanticIndexFileDescriptor fileDescriptor) {
+		// TODO: Does this get the right file?
+		getReadLock().lock();
+		try {
+			return index.getFile(fileDescriptor);
+		} finally {
+			getReadLock().unlock();
+		}
+	}
+	
+	public SemanticIndexFileDescriptor getFileDescriptor(IStrategoTerm fileTerm) {
+		// TODO: Does this get the right file descriptor?
+		getReadLock().lock();
+		try {
+			return index.getFileDescriptor(fileTerm);
+		} finally {
+			getReadLock().unlock();
+		}
+	}
+
+	public void removeFile(IStrategoTerm fileTerm) {
+		removeFile(transactionIndex.getFileDescriptor(fileTerm));
+	}
+	
+	public void removeFile(SemanticIndexFileDescriptor fileDescriptor) {
+		assert fileDescriptor.equals(currentFile);
+		
+		clearedCurrentFile = true;
+		transactionIndex.removeFile(fileDescriptor);
+	}
+
+	public Collection<SemanticIndexFile> getAllFiles() {
+		// TODO: No duplicates?
+		Collection<SemanticIndexFile> files1 = transactionIndex.getAllFiles();
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexFile> files2 = index.getAllFiles();
+			return concat(files1, files2);
+		} finally {
+			getReadLock().unlock();
+		}
+	}
+	
+	public Collection<SemanticIndexFileDescriptor> getAllFileDescriptors() {
+		// TODO: No duplicates?
+		Collection<SemanticIndexFileDescriptor> files1 = transactionIndex.getAllFileDescriptors();
+		getReadLock().lock();
+		try {
+			Collection<SemanticIndexFileDescriptor> files2 = index.getAllFileDescriptors();
+			return concat(files1, files2);
+		} finally {
+			getReadLock().unlock();
+		}
+	}
+
+	public void clear() {
+		// Should not be called.
+		assert false;
+		transactionIndex.clear();
+	}
+
+	public IStrategoTerm toTerm(boolean includePositions) {
+		// TODO: Transaction data not stored?
+		return index.toTerm(includePositions);
+	}
+	
+	private <T> Collection<T> concat(Collection<T> c1, Collection<T> c2) {
+		// TODO: Make something like CompositeCollection so nothing has to be copied?
+		List<T> l = new ArrayList<T>(c1.size() + c2.size());
+		l.addAll(c1);
+		l.addAll(c2);
+		
+		return l;
+	}
+	
+	private Lock getReadLock() {
+		return SemanticIndexManager.getTransactionLock().readLock();
+	}
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str (from r24744, spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str	Fri Apr 20 11:52:18 2012	(r24753, copy of r24744, spoofax-imp/trunk/experimental/NamingExperiment/lib/analysis-library.str)
@@ -0,0 +1,960 @@
+module lib/analysis-library
+ 
+imports
+  libstratego-lib
+  libstratego-parallel
+  lib/editor-common.generated
+  lib/index-library
+ 
+signature constructors
+ 
+  // Analyze constructors
+  Results     : AST * List(Def) * List(Use) * List(DefData) * List(Def) * List(Def) * List(File) -> Results
+  Editor      : AnalysisPhase
+  Compile     : AnalysisPhase
+ 
+  // Index elements
+  Def          : List(UriPart) -> Summary
+  Use          : List(UriPart) -> Summary
+  BadUse       : List(UriPart) -> Summary
+  Read         : List(UriPart) -> Summary
+  ReadWildcard : List(UriPart) * String -> Summary
+  Diff         : List(UriPart) * List(Summary) -> Summary
+    
+  // Namespaces
+  Diff         : Namespace
+  ASTDiff      : Namespace
+  
+  // Adjust lookup actions
+  StopLookup   : LookupAction
+  
+  // Parallel
+  ParallelResults : AST * AST * List(Error) * List(Warning) * List(Note) * List(File) -> ParallelResults
+  
+rules // extension points
+ 
+  // Should return list of Def(_) and/or [namespace | path] or StopLookup() to stop the lookup
+  adjust-index-lookup(is-use |namespace, path, prefix) = fail
+ 
+  // Should call <store-results> on a (list of) DefData
+  adjust-index-def-data(store-results |namespace, path) = fail
+ 
+  // Should return a path
+  adjust-index-path(is-def |namespace, path) = fail
+ 
+  // adjust-index-path-from-filesystem(|project-path, path)
+  
+  /**
+   * Should define constructors to check for difference during analysis. Defaults to Def constructs.
+   *
+   * Extension example:
+   *   index-diff-constructors = ?Type(_, _)
+   */
+  index-diff-constructors = ?Def(_)
+  
+  /**
+   * Should compare two index elements and fail if they are not equal.
+   *
+   * Extension example:
+	 *   index-diff-compare:
+   *     (Type(u1, v1), Type(u2, v2)) -> <id>
+   *     where
+   *       <index-uri-eq> (u1, u2);
+   *       <eq> (v1, v2)
+   */
+  index-diff-compare:
+    (Def(u1), Def(u2)) -> <id>
+    where
+       <index-uri-eq> (u1, u2)
+ 
+rules // analysis traversals
+  
+  /**
+   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
+   * Defaults to Editor() phase and tries to automatically determine language name.
+   *
+   * @see analyze-top(|phase, language)
+   */
+  analyze-top = analyze-top(|Editor())
+  
+  /**
+   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
+   * Tries to automatically determine language name.
+   *
+   * @see analyze-top(|phase, language)
+   */
+  analyze-top(|phase) = ?(ast, _, _); analyze-top(|phase, <index-origin-language> ast)
+   
+  /**
+   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
+   *
+   * @param phase     The type of analysis phase. There are 2 phases to choose from:
+   *                  - Editor():   File dependencies are analysed and returned.
+   *                  - Compile():  File dependencies are not analysed and empty lists are returned.
+   * @param language  The name of the language that is being analysed.
+   *
+   * @see analyze-top-internal(|phase, language)
+   */
+  analyze-top(|phase, language):
+    (ast, path, project-path) -> (ast', filesToAnalyze)
+    with
+      Results(ast', _, _, _, _, _, filesToAnalyze) := <analyze-top-internal(|phase, language)> (ast, path, project-path)
+  
+  /**
+   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
+   *
+   * @internal
+   */
+  analyze-top-internal = 
+    analyze-top-internal(|Editor())
+  analyze-top-internal(|phase) = 
+    ?(ast, path, project-path); analyze-top-internal(|phase, <index-origin-language> ast)
+  analyze-top-internal(|phase, language) = 
+    ?(_, path, project-path); analyze-top-internal(|phase, language, $[[project-path]/[path]])
+  analyze-top-internal(|phase, language, full-path):
+    (ast, path, project-path) -> Results(ast5, defs, uses, data', added, removed, filesToAnalyze)
+    with
+      // Init
+      index-setup(|language, [project-path], full-path);
+      revision := <index-start-transaction>
+    with
+      file := (full-path, ""); // TODO: Get subfile or add subfile param.
+      oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file;
+      <index-clear-file> file
+    with
+      {| Index-ReadSet, Index-UnresolvedSet:
+        readSet := <new-iset>;
+        unresolvedSet := <new-iset>;
+        
+        rules(Index-ReadSet: _ -> readSet);
+        rules(Index-UnresolvedSet: _ -> unresolvedSet);
+       
+        // Add Unresolved annotations, record globals
+        (Some(ast2), defs) := <analyze-defs(|Anon(), Anon())> Some(ast); // HACK: force origin tracking with Some()... // TODO: still needed?
+        <index-add-all(|file)> defs;
+
+        // Find DefData
+        ast3 := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
+        data := <origin-track-forced(analyze-tree-data)> ast3;
+
+        // Resolve all references in DefData
+        (data', _) := <analyze-uses> data;
+        <index-add-all(|file)> data';
+       
+        // Resolve all unresolved references in the tree
+        (ast4, uses) := <analyze-uses> ast3;
+        <index-add-all(|file)> uses;
+        
+        ast5 := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4;
+       
+        // Store reads into the index (if current language is not testing language)
+        if not(<is-test-input(|language)> (ast, path)) then
+          <index-add-all(|file)> <iset-elements> readSet
+        end
+      |}
+    with
+      index-end-transaction
+    with
+      // Schedule re-analysis of dependent files (if current file is not testing language file)
+      // HACK: Depends on file extension, could be other languages with .spt extension?
+      if Editor() := phase; not(<is-test-file> path) then
+        newElems := <conc> (defs, <filter(index-diff-constructors)> data');
+        
+	      // Find added and removed definitions
+	      (added, removed) := <analyze-diff> (oldElems, newElems);
+	      changed := <conc> (added, removed);
+	      
+        // Store files that have changed in the index
+        index-start-transaction;
+        filesToAnalyze := <analyze-store-diff(|changed, file, ast, revision)>;
+        index-end-transaction
+	    else
+	      (added, removed) := ([], []);
+	      filesToAnalyze := []
+      end
+      
+  /**
+   * Identifies all definitions in the tree and annotates them with their URI.
+   * Also annotates uses with a preliminary "Unresolved(_)" URI.
+   *
+   * @internal
+   */
+  analyze-defs(|head-scope, head-scope-ns):
+    ast -> (ast', defs')
+    with
+      if def := <nam-get-definition> ast then
+        Def(def-path)                     := def;
+        [head-scope-ns', head-scope' | _] := def-path
+      else
+        def-path       := INTERNAL_ERROR();
+        head-scope-ns' := head-scope-ns;
+        head-scope'    := head-scope
+      end;
+      if scope-types := <nam-get-scope-types> ast then
+        {| IndexPath:
+          <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
+          // <balanced-update-path> head-scope';
+          (ast', defs) := <analyze-defs-recurse(|Anon(), Anon(), def-path)> ast
+        |}
+      else
+        (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
+      end;
+      defs' := <![def | defs] <+ !defs>
+      
+  /** @internal */
+  analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
+    ast -> (ast'', defs)
+    where
+      analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
+      (ast', defs)  := <unzip-analyzed> analyzed;
+      ast''         := <try(nam-annotate-names(|def-path))> ast'
+ 
+  /** @internal */
+  update-index-path(|head-scope, head-scope-ns, ast):
+    scope-type -> scope-type
+    where
+      if !head-scope-ns => Anon() then
+        path  := <IndexPath <+ ![]> scope-type;
+        path' := <do-adjusted-index-path(|scope-type, path, Anon(<new>))> ast
+      else
+        path  := <IndexPath <+ ![]> head-scope-ns;
+        path' := <do-adjusted-index-path(|scope-type, path, head-scope)> ast
+      end;
+      rules(IndexPath: scope-type -> path')
+ 
+  /* TODO: consider using simple-update-def-path
+   *       which uses "balanced" path scopes
+   *       e.g. when Entity doesn't scope Function
+   *       then it's hard to access properties from a function
+  balanced-update-index-path:
+    head-scope -> head-scope
+    where
+      if !head-scope => Anon() then
+        head-scope' := Anon(<new>)
+      else
+        head-scope' := head-scope
+      end;
+      (something with do-adjust-path)
+      rules(IndexPath := [head-scope' | <IndexPath <+ ![]> ()])
+  */
+ 
+  /**
+   * Analyze all uses, changing their preliminary "Unresolved(_)" URI to a definite URI of their definition.
+   *
+   * @internal
+   */
+  analyze-uses:
+    ast -> (ast'', uses')
+    with
+      analyzed     := <all(analyze-uses)> ast;
+      (ast', uses) := <unzip-analyzed> analyzed;
+      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
+        if Def(def-uri) := <index-lookup(id |namespace, path, <strip-annos> ast')> ast' then
+          ast'' := ast{def-uri};
+          uses' := [Use(def-uri) | uses]
+        else
+          ast'' := ast';
+          uses' := [BadUse([namespace, x]) | uses]
+        end
+      else
+        ast'' := ast';
+        uses' := uses
+      end
+ 
+  /**
+   * Collects all index data (e.g. types of definitions).
+   *
+   * @internal
+   */
+  analyze-tree-data:
+    tree -> data
+    where
+      set := <new-iset>;
+      <topdown(analyze-tree-data-part(|set))> tree;
+      data := <iset-elements> set
+      
+  /** @internal */
+  analyze-tree-data-part(|set):
+    tree -> tree
+    where
+      if def-term := <nam-get-definition-key> then
+        _{[namespace | path]} := def-term;
+        if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
+          <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
+        end
+      end
+  
+  /** @internal */
+  store-index-data-results(|set):
+    t -> <fail>
+    where
+      if is-list then
+        <iset-addlist(|t)> set
+      else
+        <iset-add(|t)> set
+      end
+  
+rules // parallel analysis
+  
+  index-parallel-analyze-files(analyze):
+    files -> None()
+    with
+      length; 
+      set-total-work-units
+    with
+      index-parallel-analyze(analyze);
+      filter(not(?ParallelResults((), (), _, _, _, _)); index-set-markers)
+  
+  /** @internal */
+  index-parallel-analyze(analyze):
+    files -> allResults
+    with
+      map(index-parse-file); // Parsing cannot be done in parallel.
+      map(\(ast, file) -> (ast, file, <project-path>)\);
+      parallel-unordered(all(index-analyze(analyze)));
+      ?results;
+      with(<eq> (<length> results, <length> files) | "Input size not equal to output size");
+      filesToAnalyze := <make-set> <mapconcat(?ParallelResults(_, _, _, _, _, <id>))> results;
+      if not([] := filesToAnalyze) then
+        allResults := <concat> [results, <index-parallel-analyze(analyze)> filesToAnalyze]
+      else
+        allResults := results
+      end
+  
+  /** @internal */   
+  index-parse-file:
+    file -> (ast, file)
+    with
+    if <file-exists> file then
+      ast := <parse-file> file
+    else
+      ast := ()
+    end
+   
+  /** @internal */   
+  index-set-markers:
+    ParallelResults(ast, ast', errors, warnings, notes, diffs) -> <id>
+    with
+      <set-markers(|ast)> (ast', errors, warnings, notes)
+      
+  /** @internal */
+  index-analyze(analyze):
+    (ast, path, project-path) -> ParallelResults(ast, ast', errors, warnings, notes, filesToAnalyze)
+    with
+      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
+      if [] := filesToAnalyze then
+        complete-work-unit
+      end
+
+rules // diffs
+  
+  /** @internal */
+  analyze-diff:
+    (defs1, defs2) -> (added, removed)
+    with
+      added   := <diff(index-diff-compare)> (defs2, defs1);
+      removed := <diff(index-diff-compare)> (defs1, defs2)
+  
+  /** @internal */  
+  analyze-changed-filter-file(|file) = 
+    ?files@(<id>, _); (is-test-file <+ index-is-fake-file <+ ?file); !files
+    
+  /** @internal */
+  analyze-store-diff(|changedEntries, file, ast, revision): 
+    _ -> analyzeFiles'
+    with
+      changedFiles    := <mapconcat(index-get-files-of)> changedEntries;
+      dependentFiles  := <index-get-dependent-files> changedEntries;
+      
+      // Files to analyze
+      analyzeFiles := <make-set> <remove-all(analyze-changed-filter-file(|<Fst> file))> dependentFiles;
+      analyzeFiles' := analyzeFiles;
+      // TODO: Is this extra check needed?
+      /*if <getfirst(index-get-file-revision; \r -> (r, revision)\; gt)> analyzeFiles then
+        // Add current file if the current file has read information from another file with a higher revision.
+        // This indicates that potentially outdated information was read.
+        analyzeFiles' := [file|analyzeFiles]
+      else
+        analyzeFiles' := analyzeFiles
+      end;*/
+      
+      // Files to compile
+      compileFiles := <conc> (analyzeFiles', changedFiles);
+      if not(<analyze-astdiff(|ast)> file) then
+        // Add current file if the AST has changed. Cannot use dependency tracking here because
+        // the originating file of a removed definition is not in the index any more.
+        // TODO: Is this still true?
+        compileFiles' := <make-set> [file|compileFiles]
+      else
+        compileFiles' := <make-set> compileFiles
+      end;
+      // TODO: Optimize so that there are no duplicate files stored in the index, use iset?
+      <map(analyze-add-compilediff)> compileFiles'
+      
+  /** 
+   * Fails if old ASTDiff is not found or if ASTDiff is different.
+   *
+   * @internal
+   */
+  analyze-astdiff(|ast):
+    (file, subfile) -> <id>
+    where
+      name := [subfile, file, "ast-diff"];
+      newChecksum := <checksum> ast;
+      if oldChecksum := <index-get-global(|name)> then
+      	<index-set-global(|name)> newChecksum;
+        <eq> (oldChecksum, newChecksum)
+      else
+        <index-add-global(|name)> newChecksum;
+        fail
+      end
+      
+  /** 
+   * Adds given file to the list of files to compile.
+   *
+   * @internal
+   */
+  analyze-add-compilediff = index-add-global(|"compile-diff")
+  
+  /** 
+   * Gets the list of files to compile, and then clear it.
+   *
+   * @internal
+   */
+  analyze-get-compilediffs = index-get-all-globals(|"compile-diff"); index-clear-global(|"compile-diff")
+ 
+rules // index API primitives
+ 
+  /**
+   * Gets all DefData entries that match the kind of data and URI in given definition.
+   *
+   * @param kind Only data of this kind is returned.
+   *
+   * Example:
+   *   <index-get-data(|Type())> Def([Entity(), "Bar"]) => [DefData([Entity(), "Bar"], Type(), TYPE("Bar")), ...]
+   */
+  index-get-data(|kind):
+    <with(?Def(uri) | "Def expected")> -> <index-get-value> DefData(uri, kind, ())
+      
+	/**
+	 * Gets all data entries that match the kind of data and URI in given definition.
+	 *
+	 * @param kind Only data of this kind is returned.
+	 *
+	 * Example:
+	 *   <index-get-data-all(|Type())> Def([Entity(), "Bar"]) => [TYPE("Bar"), ...]
+	 */
+  index-get-data-all(|kind):
+    <with(?Def(uri) | "Def expected")> -> <index-get-all-values> DefData(uri, kind, ())
+     
+  /**
+   * Gets all Use entries that match the URI in given definition.
+   *
+   * Example:
+   *   <index-get-uses-all> Def([Entity(), "M", "Bar"]) => [Use([Entity(), "M", "Bar"]), ...]
+   */
+  index-get-uses-all:
+    <with(?Def(uri) | "Def expected")> -> <index-get-all> Use(uri)
+     
+  /**
+   * Gets all Read or ReadWildcard entries that match the given template.
+   *
+   * Example:
+   *   <index-get-reads-all> [Property(), "Bar", "p"] => [Read([Property(), "Bar", "p"]), ...]
+   */
+  index-get-reads-all:
+    template -> <conc> (reads, readwildcards')
+    where
+      uri   := <index-uri> template;
+      reads := <index-get-all> Read(uri);
+      if !uri => [namespace, prefix | path-parent] then
+        readwildcards  := <index-get-all> ReadWildcard([namespace | path-parent], ());
+        readwildcards' := <filter(index-readwildcard-substring(|prefix))> readwildcards
+      else
+        readwildcards' := []
+      end
+ 
+  /**
+   * Get all index entries that match the given template.
+   *
+   * Example:
+   *   <index-get-all> Def([Entity(), "Bar"]) => [Def([Entity(), "Bar"]), ...]
+   */
+  index-get-all:
+    template -> <indexlib-get-all> template
+      with
+       if set := <Index-ReadSet> then
+         uri := <index-uri>;
+         <iset-add(|Read(uri))> set
+       end
+       
+  /**
+   * Get all values of index entries that match the given template.
+   *
+   * @see index-value
+   *
+   * Example:
+   *   <index-get-all-values> DefData([Property(), "s"], Type(), ()) => [TYPE("String"), ...]
+   */
+  index-get-all-values:
+    template -> <map(index-value)> <index-get-all> template
+       
+  /**
+   * Get the first index entry that matches the given template, or fail.
+   *
+   * Example:
+   *   <index-get> Def([Entity(), "Bar"]) => Def([Entity(), "Bar"])
+   */
+  index-get:
+    template -> <?[<id>|_]> <index-get-all> template
+      
+  /**
+   * Get the value of first index entry that matches the given template, or fail.
+   *
+   * @see index-value
+   *
+   * Example:
+   *   <index-get-value> DefData([Entity(), "Bar"], Type(), ()) => TYPE("Bar")
+   */
+  index-get-value:
+    template -> <index-value> <?[<id>|_]> <index-get-all> template
+   
+  /**
+   * Gets the namespace part of the URI for given key (term{uri} element).
+   *
+   * Example:
+   *   <index-namespace> "Bar"{[Entity(), "Bar"]} => Entity() 
+   */
+  index-namespace:
+    x{[namespace | path]} -> <index-namespace-unwrap> namespace
+
+  /**
+   * Gets the path part of the URI for given key (term{uri} element).
+   *
+   * Example:
+   *   <index-path> "Bar"{[Entity(), "Bar"]} => ["Bar"]
+   */
+  index-path:
+    x{[namespace | path]} -> path'
+    where
+      if !namespace => Unresolved(namespace) then
+        Def(path') := <index-lookup>
+      else
+        path' := path
+      end
+    
+  /**
+   * Determines if a given AST node is a definition site, according to the syntax.
+   *
+   * TODO: Does not work?
+   */
+  index-is-definition =
+    where(nam-get-definition-key)
+
+  /**
+   * Gets all Def children elements of an URI in a certain namespace.
+   * URI can be contained in a Def(uri), key (term{uri} element) or the uri itself.
+   *
+   * @param namespace Only child Def elements in this namespace are returned.
+   *
+   * Example:
+   *   <index-get-children(|Field())> Def([Entity(), "Baz"]) => [Def([Field(), "Bar"]), Def([Field(), "Foo"]), ...]
+   *   <index-get-children(|Field())> "Foo"{[Entity(), "Baz"]} => [Def([Field(), "Bar"]), Def([Field(), "Foo"]), ...]
+   *   <index-get-children(|Field())> [Entity(), "Baz"] => [Def([Field(), "Bar"]), Def([Field(), "Foo"]), ...]
+   */
+  index-get-children(|namespace) = index-get-children(\uri -> Def(uri)\|namespace)
+  
+  /**
+   * Gets all children elements of an URI in a certain namespace using custom templates.
+   * URI can be contained in a Def(uri), key (term{uri} element) or the uri itself.
+   *
+   * @param construct-template  Should create a template to match index entries with, given an URI.
+   * @param namespace           Only child elements in this namespace are returned.
+   */
+  index-get-children(construct-template|namespace):
+    <with(?Def([parent-ns | path]) <+ ?_{[parent-ns | path]} <+ ?[parent-ns | path] | "Def, key or uri expected")> -> children
+    with
+      template  := <construct-template> [namespace | path];
+      children  := <prim("LANG_index_get_children", template)>;
+      <store-wildcard-read(|namespace, path, "")> children
+
+  /**
+   * Gets all Def children elements of an URI in a certain namespace where the name starts with a prefix.
+   * URI can be contained in a Def(uri), key (term{uri} element) or the uri itself.
+   *
+   * @param namespace Only child Def elements in this namespace are returned.
+   * @param prefix    Only child Def elements where the name starts with this prefix are returned.
+   *
+   * Example:
+   *   <index-get-children(|Field(), "fo")> Def([Entity(), "Baz"]) => [Def([Field(), "Foo"]), ...]
+   *   <index-get-children(|Field(), "ba")> "Foo"{[Entity(), "Baz"]} => [Def([Field(), "Bar"]), ...]
+   *   <index-get-children(|Field(), "ze")> [Entity(), "Baz"] => [...]
+   */
+  index-get-children(|namespace, prefix) = index-get-children(\uri -> Def(uri)\|namespace, prefix)
+  
+  /**
+   * Gets all children elements of an URI in a certain namespace where the name starts with a prefix
+   * using custom templates.
+   * URI can be contained in a Def(uri), key (term{uri} element) or the uri itself.
+   *
+   * @param construct-template  Should create a template to match index entries with, given an URI.
+   * @param namespace           Only child elements in this namespace are returned.
+   * @param prefix              Only child elements where the name starts with this prefix are returned.
+   */
+  index-get-children(construct-template|namespace, prefix):
+    <with(?Def([parent-ns | path]) <+ ?_{[parent-ns | path]} <+ ?[parent-ns | path] | "Def, key or uri expected")> -> children'
+    with
+      prefix'   := <strip-annos> prefix;
+      template  := <construct-template> [namespace | path];
+      children  := <prim("LANG_index_get_children", template)>;
+      children' := <filter(index-is-name-substring(|prefix'))> children;
+      <store-wildcard-read(|namespace, path, prefix')> children'
+
+  /**
+   * Gets a set of all files that have a reference to the given index entries.
+   *
+   * @param construct-from-uri  Construction strategy that creates a list of reference constructs from all 
+   *                            given entries, such as \uri -> [Read(uri), Use(uri, [])]\
+   *
+   * Example:
+   *   <index-get-referenced-files(\uri -> [Read(uri), Use(uri, [])]\)> [Def([Entity(), "Bar"]), ...] => 
+   *     [("fullpath/otherfile.ext", "subfile"), ...]
+   */
+  index-get-referenced-files(construct-from-uri):
+    entries -> files
+    where
+      uris        := <filter(index-uri)> entries;
+      referenced  := <concat> <filter(construct-from-uri)> uris;
+      files       := <make-set> <mapconcat(index-get-files-of)> referenced
+ 
+  /**
+   * Convenience function for finding files with Read and Use dependencies to the given definitions.
+   *
+   * @see index-get-referenced-files(construct-from-uri)
+   * @see index-file-dependent-construct
+   *
+   * Example:
+   *   <index-get-dependent-files> [Def([Entity(), "Bar"]), ...] => [("fullpath/otherfile.ext", "subfile"), ...]
+   */
+  index-get-dependent-files = 
+    index-get-referenced-files(index-file-dependent-construct)
+     
+rules // index lookup rules (take into account adjust-index-lookup)
+ 
+  /**
+   * Given an annotated AST node, resolves it, returning its Def.
+   */
+  index-lookup:
+    x{[namespace | path]} -> <index-lookup(id |<index-namespace-unwrap> namespace, path, <strip-annos> x)>
+ 
+  /**
+   * Given an annotated AST node, resolves it, returning all its Defs.
+   */
+  index-lookup-all:
+    x{[namespace | path]} -> <index-lookup-all(id |<index-namespace-unwrap> namespace, path, <strip-annos> x)>
+ 
+  /**
+   * Given an annotated AST node, resolves it, returning all its Defs.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   *
+   * @internal
+   */
+  index-lookup(is-adjust-lookup-enabled |namespace, path, prefix):
+    x -> def
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path, prefix)>;
+      if <?StopLookup()> candidates then
+        fail
+      else
+        def        := <index-select(|namespace, path, x)>
+      <+
+	      // TODO: optimize: try not to call do-adjust-index-lookup from here
+	      [_ | path'] := path;
+	      def         := <index-lookup(is-adjust-lookup-enabled |namespace, path', prefix)> x
+      end
+
+  /**
+   * Given an annotated AST node, resolves it, returning all its Defs.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   *
+   * @internal
+   */
+  index-lookup-all(is-adjust-lookup-enabled |namespace, path, prefix):
+    x -> defs'
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path, prefix)>;
+      defs       := <index-select-all(|namespace, path, x)>;
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      if [_ | path'] := path then
+        defs2 := <index-lookup-all(is-adjust-lookup-enabled |namespace, path', prefix)> x;
+        defs' := <conc> (defs, defs2)
+      else
+        defs' := defs
+      end
+ 
+  /**
+   * Given an annotated AST node, returns the outermost Def with a corresponding URI.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   */
+  index-lookup-outermost(|prefix):
+    x{[namespace | path]} -> <index-lookup-outermost(id |<index-namespace-unwrap> namespace, path, prefix)>
+ 
+  /**
+   * Given an annotated AST node, returns the outermost Def with a corresponding URI.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   *
+   * @internal
+   */
+  index-lookup-outermost(is-adjust-lookup-enabled |namespace, path, prefix):
+    x -> def
+    where
+      // TODO: optimize: just like index-lookup
+      [_ | path'] := path;
+      def         := <index-lookup-outermost(is-adjust-lookup-enabled |namespace, path', prefix)> x
+    <+
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path, prefix)>;
+      def        := <index-select(|namespace, path, x)>
+ 
+  /**
+   * Given an annotated AST node, returns a Def that has the same parent URI.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   */
+  index-lookup-one-level(|prefix):
+    x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path, prefix)>
+ 
+  /**
+   * Given an annotated AST node, resolves it, and
+   * returns all possibly matching Defs with a common ancestor URI. 
+   *
+   * @param namespace Only Defs with this namespace are returned.
+   * @param prefix    Indicates that only Defs with a name that starts with this
+   *                  string are demanded.
+   *
+   * @internal
+   */
+  index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path, prefix):
+    x{_} -> defs
+    with
+      is-adjusted-lookup-enabled;
+      do-adjust-index-lookup(|namespace, path, x, prefix);
+      if ?StopLookup() then
+        defs := StopLookup()
+      else
+        mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path', prefix)> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a list Def(_) or [namespace | path] or StopLookup() to stop the lookup"));
+        ?defs
+      end
+    <+
+      defs := <index-get-children(|namespace, prefix)> Def([namespace | path])
+      
+  /**
+   * Given an annotated AST node, resolves it, and
+   * returns all possibly matching Defs with a common ancestor URI. 
+   *
+   * @param namespace Only Defs with this namespace are returned.
+   * @param prefix    Indicates that only Defs with a name that starts with this
+   *                  string are demanded.
+   */
+  index-lookup-all-levels(|prefix):
+    x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path, prefix)>
+ 
+  /**
+   * Given an annotated AST node, resolves it, and
+   * returns all possibly matching Defs with a common ancestor URI. 
+   *
+   * @param prefix    Indicates that only Defs with a name that starts with this
+   *                  string are demanded.
+   *
+   * @internal
+   */
+  index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path, prefix):
+    x{_} -> all-defs
+    with
+      is-adjust-lookup-enabled;
+      do-adjust-index-lookup(|namespace, path, x, prefix);
+      if ?StopLookup() then
+        all-defs := []
+      else
+	      mapconcat(\d at Def(p) -> [d]\
+	          <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path', prefix)> x\
+	          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a list Def(_) or [namespace | path] or StopLookup() to stop the lookup"));
+	      ?all-defs
+      end
+    <+
+      one-level := <index-get-children(|namespace, prefix)> Def([namespace | path]);
+      if [_ | path'] := path then
+        all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path', prefix)> x]
+      else
+        all-defs := one-level
+      end
+ 
+  /**
+   * Given an annotated AST node, resolves it,
+   * and returns all child Defs of its definition.
+   *
+   * @param namespace Only child Defs with this namespace are returned.
+   * @param prefix    Only child Defs with a name that starts with this
+   *                  string are returned.
+   */
+  index-lookup-children(|namespace, prefix): // TODO: how does this compare w/ index-lookup-one-level?
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-one-level(id|namespace, def-path, prefix)> x
+      else
+        defs := <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path, prefix)>
+      end
+    <+
+      defs := []
+       
+/** @internal */
+rules // URI and value projections
+       
+  index-uri-impl:
+    Def(uri) -> uri
+    
+  index-uri-impl:
+    Use(uri) -> uri
+    
+  index-uri-impl:
+    Read(uri) -> uri
+    
+  index-uri-impl:
+    x{[namespace | path]} -> [<index-namespace-unwrap> namespace | path]
+ 
+  // TODO: Should second part of ReadWildcard be included in the URI, between namespace and path?
+  index-uri-impl:
+    ReadWildcard(uri, _) -> uri
+
+  index-value-impl:
+    Def(value) -> value
+
+  index-value-impl:
+    Use(value) -> value
+
+  index-value-impl:
+    Read(value) -> value
+    
+  index-value-impl:
+    ReadWildcard(_, value) -> value
+       
+/** @internal */
+rules // Internal helpers
+       
+  index-origin-language = (origin-term <+ id); prim("SSL_EXT_origin_language", <id>)
+       
+  /**
+   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
+   * to a tuple (C(a1, a2), [b1, b2, b3]).
+   */
+  unzip-analyzed:
+    appl -> (appl', unzipped-parts)
+    with
+      appl'          := <all(\(a, _) -> a\)> appl;
+      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
+       
+  // Tests if the current file is just a testing language input
+  is-test-file = string-ends-with(|".spt")
+  is-test-input(|language):
+    (ast, path) -> (ast, path)
+    where
+      <is-test-file> path;
+      not(!language => "Spoofax-Testing")
+      
+  index-filepair-to-file = Fst; string-replace(|$[[<project-path>]/], "")
+       
+  index-is-name-substring(|name):
+    template -> <id>
+    with
+      [_, uri-name | _] := <index-uri>
+    where
+      <is-substring(!name)> uri-name
+      
+  index-readwildcard-substring(|prefix):
+    ReadWildcard(_, name) -> <id>
+    where <is-substring(!prefix)> name
+    
+  store-wildcard-read(|namespace, path, prefix):
+    children -> <id>
+    with
+      if set := <Index-ReadSet> then
+        if 1 := <length> children then
+          // HACK: This solves the problem of ReadWildcards making too many files re-analyze, but this should
+          // be handled in the index primitives instead.
+          <iset-add(|Read([namespace | path]))> set
+        else
+          <iset-add(|ReadWildcard([namespace | path], prefix))> set
+        end
+      end
+      
+  index-is-unresolved(|x, uri) = Index-UnresolvedSet; (iset-contains(|(x, uri)) <+ fail)
+  index-add-unresolved(|x, uri) = (Index-UnresolvedSet; iset-add(|(x, uri))) <+ id
+  
+  index-file-dependent-construct: 
+    uri -> <conc> (uses, reads)
+    with
+    	uses := <index-get-uses-all> Def(uri);
+    	reads := <index-get-reads-all> Def(uri)
+    
+  index-file-dependency-filter = ?Read(_) <+ ?ReadWildcard(_, _) <+ ?Use(_)
+ 
+  do-adjust-index-lookup(|namespace, path, use, prefix) =
+    // UNDONE: try(origin-term);
+    repeat-until(
+      prim("SSL_EXT_get_parent", <id>)
+    , adjust-index-lookup(origin-equal(|use) |namespace, path, prefix) 
+    )
+ 
+  index-select(|namespace, path, use) =
+    getfirst(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+ 
+  index-select-all(|namespace, path, use) =
+    filter(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+ 
+  do-adjusted-index-path(|namespace, path, def) =
+    adjust-index-path(origin-equal(|def) |namespace, path)
+  <+
+    ![def | path]
+ 
+  index-eq(|namespace, expected) =
+    where(
+      ?Def([_, name | _]);
+      <SRTS-EXT-eq-ignore-annos(|expected)> name
+    )
+  
+  external SRTS-EXT-eq-ignore-annos(|t)
+
+/** @internal */
+rules // interface for generated code
+ 
+  nam-get-def(|namespace):
+    x -> Def([namespace, x | <IndexPath <+ ![]> namespace])
+   
+  nam-annotate-use(|namespace):
+    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
+   
+  nam-get-scope-types = fail
+  nam-get-definition = fail
+  nam-get-definition-key = fail
+  nam-annotate-names(|def-path) = fail
+  
\ No newline at end of file

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str (from r24743, spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str	Fri Apr 20 11:52:18 2012	(r24753, copy of r24743, spoofax-imp/trunk/experimental/NamingExperiment/lib/compilation-library.str)
@@ -0,0 +1,137 @@
+module lib/compilation-library
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  lib/index-library
+  lib/analysis-library
+  
+rules // Extension points
+    
+  // Should desugar given ast.
+  index-desugar-ast = fail
+    
+  // Should compile given analysed ast.
+  index-compile-ast(|file, subfile, project-path) = fail
+  
+rules // Compilation
+  
+  /**
+   * Schedules compilation of all files that have changed since the last compilation.
+   */
+  index-schedule-compilation:
+    _ -> None()
+    with
+      queue-strategy(|"index-compilation", "Compiling files")
+  
+  /** @internal */
+  index-compilation:
+    language -> None()
+    with
+      // Init
+      project-path := <project-path>;
+      index-setup(|language, [project-path], ".")
+    with
+      // Determine the files to compile by looking at changed files
+      diffs         := <analyze-get-compilediffs>;
+      files         := <map(index-compilation-restore-read-file)> diffs;
+      filteredFiles := <make-set> <remove-all(index-compilation-filter-file)> files;
+      
+      // Clean compile time reads
+      <filter(index-compilation-clean-reads)> filteredFiles;
+      
+      // Set total work units to number of files to compile for visual indication
+      <set-total-work-units> <length> filteredFiles;
+      
+      // Compile the files
+      <filter(index-compilation-file(|language, project-path); complete-work-unit)> filteredFiles
+
+  /** @internal */
+  index-compilation-file(|language, project-path):
+    (file, subfile) -> None()
+    with
+      // Parse and analyze ast.
+      ast                              := <parse-file> file;
+      ast'                             := <try(index-desugar-ast)> ast;
+      Results(ast'', _, _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast', file, project-path)
+    with
+      {| Index-ReadSet:
+        readSet := <new-iset>;
+        rules(Index-ReadSet: _ -> readSet);
+        
+        // Compile file
+        <index-compile-ast(|file, subfile, project-path)> ast';
+        
+        // Store compile-time reads.
+        reads := <iset-elements> readSet;
+        <index-add-all(|<index-compilation-file-tuple> (file, subfile))> reads
+      |}
+
+  /** @internal */
+  index-compilation-filter-file = 
+    ?(<id>, _); (is-test-file <+ index-is-fake-file <+ not(file-exists))
+    
+rules // On save handling
+  
+  /**
+   * Commits the index to disk and schedules compilation.
+   *
+   * @see trigger-commit-and-compile
+   *
+   * @internal
+   */
+  commit-and-compile:
+    language -> None()
+    with
+      index-commit
+    with
+      index-schedule-compilation
+
+  /**
+   * Triggers commit and compilation, requires target language as current term.
+   * Compilation can be delayed by using disable-commit-and-compile. Compilation will be triggered when 
+   * enable-commit-and-compile is called.
+   */
+  trigger-commit-and-compile:
+    language -> <id>
+    with
+      if not(index-is-global-enabled(|"delay-compile")) then
+        commit-and-compile
+      else
+        index-enable-global(|"trigger-compile")
+      end
+  
+  /**
+   * Delays commit and compilation until enable-commit-and-compile is called.
+   */
+  disable-commit-and-compile = index-enable-global(|"delay-compile")
+  
+  /**
+   * Cancels the commit and compilation delay. If commit and compilation was triggered during the delay, it
+   * is triggered now.
+   */
+  enable-commit-and-compile:
+    language -> <id>
+    with
+      if index-is-global-enabled(|"trigger-compile") then
+        commit-and-compile
+      end;
+      index-disable-global(|"delay-compile")
+      
+/** @internal */
+rules // Compile time reads
+
+  index-compilation-restore-read-file:
+    (file, subfile) -> (file', subfile)
+    with
+      file' := <string-replace(|<index-compilation-read-path>, "")> file
+      
+  index-compilation-clean-reads = 
+    ?(file, subfile); index-compilation-file-tuple; index-clear-file
+      
+  index-compilation-file-tuple:
+    (file, subfile) -> ($[[<index-compilation-read-path>]/[file]], subfile)
+    
+  index-compilation-read-path =
+    !"/.internal/reads/compile"
+    
\ No newline at end of file

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str (from r24743, spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str	Fri Apr 20 11:52:18 2012	(r24753, copy of r24743, spoofax-imp/trunk/experimental/NamingExperiment/lib/index-library.str)
@@ -0,0 +1,459 @@
+module lib/index-library
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+signature constructors
+  
+  // Index elements
+  DefData      : List(UriPart) * DefDataType * Term -> Summary
+    
+  // URI header
+  Namespace      : UriPart
+  Unresolved     : Namespace -> UriPart
+  INTERNAL_ERROR : UriPart
+  Timestamp      : UriPart
+ 
+  // Remainder of URI
+  String : UriPart
+  Anon   : Int -> UriPart
+  Anon   : UriPart
+  
+  FileEntries : Term * Term -> Term
+  
+  // Globals
+  Global : Namespace
+  Global : List(UriPart) -> Summary
+  Global : List(UriPart) * List(Summary) -> Summary
+  
+rules // Index management
+   
+  /**
+   * Sets up the index library for given language and project paths.
+   * Must be called once before doing anything with the library.
+   *
+   * @obsolete
+   */
+  index-setup(|language, project-paths) =
+    obsolete(!"index-setup(|language, project-paths); use index-setup(|language, project-paths, current-file)");
+    index-setup(|language, project-paths, ".")
+    
+  /**
+   * Sets up the index library for given language and project paths.
+   * Must be called once before doing anything with the library.
+   */
+  index-setup(|language, project-paths, current-file) =
+    prim("LANG_index_setup", language, project-paths, current-file)
+
+  /**
+   * Adds given element to the index with given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-add(|"fullpath/file.ext")> Def([Entity(), "Bar"])
+   *   <index-add(|("fullpath/file.ext", "subfile"))> Def([Entity(), "Bar"])
+   */
+  index-add(|file) =
+    prim("LANG_index_add", <id>, file)
+
+  /**
+   * Adds all given elements to the index with given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-add-all(|"fullpath/file.ext")> [Def([Entity(), "Bar"]), ...]
+   *   <index-add-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
+   */
+  index-add-all(|file) =
+    list-loop(with(index-add(|file)))
+    
+  /**
+   * Removes given element from the index that is contained in given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-remove(|"fullpath/file.ext")> Def([Entity(), "Bar"])
+   *   <index-remove(|("fullpath/file.ext", "subfile"))> Def([Entity(), "Bar"])
+   */
+  index-remove(|file) =
+    prim("LANG_index_remove", <id>, file)
+    
+  /**
+   * Removes all given elements from the index that are contained in given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-remove-all(|"fullpath/file.ext")> [Def([Entity(), "Bar"]), ...]
+   *   <index-remove-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
+   */
+  index-remove-all(|file) =
+    list-loop(with(index-remove(|file)))
+    
+  /**
+   * Removes all elements from the index that are contained in given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-clear-file> "fullpath/file.ext"
+   *   <index-clear-file> ("fullpath/file.ext", "subfile")
+   */
+  index-clear-file = 
+    prim("LANG_index_clear_file", <id>)
+    
+  /**
+   * Clears all elements from the index.
+   */
+  index-clear = 
+    prim("LANG_index_clear_all")
+   
+  /**
+   * Commits index to a file on disk.
+   */
+  index-commit = 
+    if not(index-timestamp-get-updates(|"LANG_index_commit") => []) then
+      prim("LANG_index_commit");
+      index-timestamp-set-updated(|"LANG_index_commit")
+    end
+    
+  /**
+   * Starts a transaction on the index for the current file. Additions to the index are not visible to other files 
+   * until index-end-transaction is called.
+   */
+  index-start-transaction = prim("LANG_index_start_transaction")
+  
+  /**
+   * Ends a transaction on the index for the current file. Additions made to the index during the transaction are
+   * added to the global index visible for other files.
+   */
+  index-end-transaction = prim("LANG_index_end_transaction")
+  
+rules // Index API
+  
+  /**
+   * Gets the file that the analysis is currently in.
+   */
+  index-get-current-file =
+    prim("LANG_index_get_current_file")
+  
+  /**
+   * Gets a list of all files and subfile for current project.
+   *
+   * Example:
+   *   <index-get-all-files> => ["fullpath/file.ext", ...]
+   */   
+  index-get-all-files =
+    prim("LANG_index_all_files")
+  
+  /**
+   * Gets all index entries for the given file path and optionally subfile.
+   *
+   * Examples:
+   *   <index-get-all-in-file> "fullpath/file.ext" => [Def([Entity(), "Bar"]), ...]
+   *   <index-get-all-in-file> ("fullpath/file.ext", "subfile") => [Def([Entity(), "Bar"]), ...]
+   */  
+  index-get-all-in-file:
+    filepath -> entries
+    with
+      entries := <prim("LANG_index_get_all_in_file", filepath)>
+   
+  /**
+   * Gets index entries in some namespace for the given file path and optionally subfile.
+   *
+   * @param namespace Only index entries from this namespace are retrieved.
+   *
+   * Example:
+   *   <index-get-all-in-file(|Import())> "fullpath/file.ext" => [Def([Import(), "Bar"]), ...]
+   *   <index-get-all-in-file(|Import())> ("fullpath/file.ext", "subfile") => [Def([Import(), "Bar"]), ...]
+   */  
+  index-get-all-in-file(|namespace):
+    filepath -> entries
+    with
+      // TODO: Optimize -- add an argument to LANG_index_get_all_in_file to do this filtering
+      entries := <prim("LANG_index_get_all_in_file", filepath)>;
+      filter(where(index-uri => [namespace | _]))
+    
+  /**
+   * Gets the revision of a file and optionally subfile.
+   *
+   * Example:
+   *   <index-get-file-revision> "fullpath/file.ext" => 13
+   *   <index-get-file-revision> ("fullpath/file.ext", "subfile") => 37
+   */
+  index-get-file-revision:
+    file -> <prim("LANG_index_get_file_revision", file)>
+    
+  /**
+   * Gets the containing files and subfiles of index entry with given template.
+   *
+   * Example:
+   *   <index-get-files-of> Def([Entity(), "Bar"]) => [("fullpath/file.ext", "subfile"), ...]
+   */  
+  index-get-files-of:
+    template -> <prim("LANG_index_get_files_of", template)>
+    
+  /**
+   * Get all index entries that match the given template.
+   *
+   * Example:
+   *   <indexlib-get-all> Def([Entity(), "Bar"]) => [Def([Entity(), "Bar"]), ...]
+   */
+  indexlib-get-all:
+    template -> <prim("LANG_index_get", template)>
+    
+  /**
+   * Get all values of index entries that match the given template.
+   *
+   * @see index-value
+   *
+   * Example:
+   *   <indexlib-get-all-values> DefData([Property(), "s"], Type(), ()) => [TYPE("String"), ...]
+   */
+  indexlib-get-all-values:
+    template -> <map(index-value)> <indexlib-get-all> template
+ 
+  /**
+   * Get the first index entry that matches the given template, or fail.
+   *
+   * Example:
+   *   <indexlib-get> Def([Entity(), "Bar"]) => Def([Entity(), "Bar"])
+   */
+  indexlib-get:
+    template -> <?[<id>|_]> <indexlib-get-all> template
+   
+  /**
+   * Get the value of first index entry that matches the given template, or fail.
+   *
+   * @see index-value
+   *
+   * Example:
+   *   <indexlib-get-value> DefData([Entity(), "Bar"], Type(), ()) => TYPE("Bar")
+   */
+  indexlib-get-value:
+    template -> <index-value> <?[<id>|_]> <indexlib-get-all> template
+    
+  /**
+   * Gets the 'fake' path where globals are stored in the index.
+   *
+   * @internal
+   */
+  index-globals-path = 
+    !"/.internal/globals"
+    
+  /**
+   * Gets the URI where globals are stored in the index for given name or names.
+   *
+   * @internal
+   */
+  index-globals-uri:
+  	names -> uri
+  	with
+  		if is-list then
+  			uri := <concat> [[Global()], names, ["globals", ".internal"]]
+      else
+      	uri := [Global(), names, "global", ".internal"]
+      end
+    
+  /**
+   * Gets the first value in global storage with given name, or fail.
+   *
+   * Example:
+   *   index-get-global(|"last-compile") => Timestamp(1334322856)
+   *   index-get-global(|["last-compile", "file.str"]) => Timestamp(1334322856)
+   */
+  index-get-global(|name):
+    _ -> value
+    where
+      value := <indexlib-get-value> Global(<index-globals-uri> name, ())
+    
+  /**
+   * Gets all values in global storage with given name.
+   *
+   * Example:
+   *   index-get-global(|"last-compile") => [Timestamp(1334322856), ...]
+   *   index-get-global(|["last-compile", "file.str"]) => [Timestamp(1334322856), ...]
+   */ 
+  index-get-all-globals(|name):
+    _ -> values
+    with
+      values := <indexlib-get-all-values> Global(<index-globals-uri> name, ())
+    
+  /**
+   * Add value to global storage with given name.
+   *
+   * Example:
+   *   <index-add-global(|"last-compile")> Timestamp(1334322856)
+   *   <index-add-global(|["last-compile", "file.str"])> Timestamp(1334322856)
+   */   
+  index-add-global(|name):
+    value -> <id>
+    with
+      <index-add(|<index-globals-path>)> Global(<index-globals-uri> name, value)
+      
+  /**
+   * Overwrites value in global storage with given value.
+   *
+   * Example:
+   *   <index-set-global(|"last-compile")> Timestamp(1334322856)
+   *   <index-set-global(|["last-compile", "file.str"])> Timestamp(1334322856)
+   */   
+  index-set-global(|name):
+    value -> <id>
+    with
+      index-clear-global(|name);
+      <index-add-global(|name)> value
+    
+  /**
+   * Removes all values from global storage with given name.
+   *
+   * Example:
+   *   index-clear-global(|"last-compile")
+   *   index-clear-global(|["last-compile", "file.str"])
+   */   
+  index-clear-global(|name):
+    _ -> <id>
+    with
+      <index-remove(|<index-globals-path>)> Global(<index-globals-uri> name, ())
+      
+  /**
+   * Gets the URI where boolean globals are stored in the index for given name or names.
+   *
+   * @internal
+   */
+  index-boolean-globals-uri:
+    names -> uri
+    with
+      if is-list then
+        uri := <concat> [[Global()], names, ["boolean", "globals", ".internal"]]
+      else
+        uri := [Global(), names, "boolean", "global", ".internal"]
+      end
+      
+  /**
+   * Sets boolean value true to global boolean storage with given name.
+   *
+   * Example:
+   *   index-enable-global(|"can-compile")
+   *   index-enable-global(|["can-compile", "file.str"])
+   */   
+  index-enable-global(|name):
+    _ -> <id>
+    with
+      <index-add(|<index-globals-path>)> Global(<index-boolean-globals-uri> name)
+      
+  /**
+   * Sets boolean value false to global boolean storage with given name.
+   *
+   * Example:
+   *   index-disable-global(|"can-compile")
+   *   index-disable-global(|["can-compile", "file.str"])
+   */   
+  index-disable-global(|name):
+    _ -> <id>
+    with
+      <index-remove(|<index-globals-path>)> Global(<index-boolean-globals-uri> name)
+      
+  /**
+   * Query for boolean value true in global boolean storage with given name.
+   *
+   * Example:
+   *   index-is-global-enabled(|"can-compile")
+   *   index-is-global-enabled(|["can-compile", "file.str"])
+   */   
+  index-is-global-enabled(|name):
+    _ -> <id>
+    where
+      <indexlib-get> Global(<index-boolean-globals-uri> name)
+ 
+  /**
+   * Updates the "last updated" timestamp for the given service name.
+   *
+   * @see index-get-changes-since-timestamp(|service)
+   */
+  index-timestamp-set-updated(|service) =
+    file := $[/.internal/timestamps/[service]];
+    <index-clear-file> file;
+    prim("LANG_index_add", DefData([Timestamp(), "timestamps", ".internal"], Timestamp(), []), file)
+   
+  /**
+   * Gets all files with changes since the last time stamp update for the given service name.
+   */
+  index-timestamp-get-updates(|service):
+    _ -> files'
+    with
+      timestampName := $[/.internal/timestamps/[service]];
+      files := <prim("LANG_index_get_files_newer_than", timestampName)>;
+      files' := <remove-all(?(timestampName, _))> files
+
+  /**
+   * Queries if given index file is a 'fake' file for storing internal data.
+   */
+  index-is-fake-file = string-starts-with(|"/.internal")
+    
+  /**
+   * Gets the URI part for given term.
+   */ 
+  index-uri = index-uri-impl <+ index-uri-generic
+  
+  /**
+   * Checks if given URI's are equal. Discards anonymous scopes if necessary.
+   *
+   * Example:
+   *   <index-uri-eq> ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"]) => 
+   *     ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"])
+   *   <index-uri-eq> ([Entity(), "Foo"], [Entity(), "Bar"]) => fail
+   */
+  index-uri-eq:
+  	(u1, u2) -> <id>
+  	where
+  	  u1' := <index-uri-unwrap> u1;
+  	  u2' := <index-uri-unwrap> u2;
+      (<eq> (u1', u2') <+ <eq> (<remove-all(?Anon(_))> u1', <remove-all(?Anon(_))> u2'))
+
+  /**
+   * Checks if given keys (term{uri} elements) are equal. Discards unresolved URI's.
+   *
+   * Example:
+   *   <index-key-eq> ("Bar"{[Entity(), "Bar"]}, "Bar"{[Unresolved(Entity()), "Bar"]}) => 
+   *     ("Bar"{[Entity(), "Bar"]}, "Bar"{[Unresolved(Entity()), "Bar"]})
+   *   <index-key-eq> ("Foo"{[Entity(), "Foo"]}, "Bar"{[Entity(), "Bar"]}) => fail
+   */      
+  index-key-eq:
+    (k1, k2) -> <id>
+    where
+      <eq> (<index-key-unwrap> k1, <index-key-unwrap> k2)
+  
+  /**
+   * Gets the value part for given term.
+   */  
+  index-value = index-value-impl <+ index-value-generic
+  
+  /**
+   * Finds the first key (term{uri} element) for given term, or fail. 
+   */
+  index-find-key:
+    x -> key
+    where
+      key := <collect-one(?_{_})> x
+      
+/** @internal */
+rules // URI and value projections
+	
+  index-uri-impl:
+    DefData(uri, _, _) -> uri
+
+  index-uri-generic:
+    term -> <?_#(<?[<id>|_]>)> term
+  
+  index-value-impl:
+    DefData(_, _, value) -> value
+    
+  index-value-generic:
+    term -> <?_#(<?[_, <id>|_]> )> term
+     
+/** @internal */ 
+rules // Internal helpers
+  
+  index-namespace-unwrap =
+    \Unresolved(n) -> n\ <+ id
+    
+  index-uri-unwrap =
+    \[ns|xs] -> [<index-namespace-unwrap> ns|xs]\ <+ id
+    
+  index-key-unwrap = 
+    \key{uri} -> key{<index-uri-unwrap> uri}\ <+ id

From gabrielkonat at gmail.com  Fri Apr 20 14:05:03 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Fri, 20 Apr 2012 12:05:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24754 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main:
	java/org/spoofax/interpreter/library/language stratego/lib
Message-ID: <20120420120503.A16FD2B8004@mx2.tudelft.nl>

Author: gkonat
Date: Fri Apr 20 12:05:02 2012
New Revision: 24754
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24754&sc=1

Log:
Fixed merge fails.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntry.java	Fri Apr 20 11:52:18 2012	(r24753)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexEntry.java	Fri Apr 20 12:05:02 2012	(r24754)
@@ -19,7 +19,7 @@
 	
 	private SemanticIndexFileDescriptor fileDescriptor;
 	
-	private transient IStrategoAppl term;
+	private transient IStrategoAppl cachedTerm;
 
 	protected SemanticIndexEntry(IStrategoTerm contents, SemanticIndexURI uri, 
 			SemanticIndexFileDescriptor fileDescriptor) {
@@ -46,12 +46,12 @@
 	 * Returns a term representation of this entry.
 	 */
 	public IStrategoAppl toTerm(ITermFactory factory) {
-		if (term != null)
-			return term;
+		if (cachedTerm != null)
+			return cachedTerm;
 		
-		term = uri.toTerm(factory, contents);
+		cachedTerm = uri.toTerm(factory, contents);
 		
-		return forceImploderAttachment(term);
+		return forceImploderAttachment(cachedTerm);
 	}
 	
 	/**
@@ -69,7 +69,7 @@
 	 * Force an imploder attachment for a term.
 	 * This ensures that there is always some form of position info,
 	 * and makes sure that origin info is not added to the term.
-	 * (The latter would be bad since we cache in {@link #term}.)
+	 * (The latter would be bad since we cache in {@link #cachedTerm}.)
 	 */
 	private IStrategoAppl forceImploderAttachment(IStrategoAppl term) {
 		ImploderAttachment attach = ImploderAttachment.get(uri.getId());
@@ -98,7 +98,7 @@
 				+ ((contents == null) ? 0 : contents.hashCode());
 		result = prime * result
 				+ ((fileDescriptor == null) ? 0 : fileDescriptor.hashCode());
-		result = prime * result + ((term == null) ? 0 : term.hashCode());
+		result = prime * result + ((cachedTerm == null) ? 0 : cachedTerm.hashCode());
 		result = prime * result + ((uri == null) ? 0 : uri.hashCode());
 		return result;
 	}
@@ -122,10 +122,10 @@
 				return false;
 		} else if (!fileDescriptor.equals(other.fileDescriptor))
 			return false;
-		if (term == null) {
-			if (other.term != null)
+		if (cachedTerm == null) {
+			if (other.cachedTerm != null)
 				return false;
-		} else if (!term.equals(other.term))
+		} else if (!cachedTerm.equals(other.cachedTerm))
 			return false;
 		if (uri == null) {
 			if (other.uri != null)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java	Fri Apr 20 11:52:18 2012	(r24753)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java	Fri Apr 20 12:05:02 2012	(r24754)
@@ -16,6 +16,10 @@
 	
 	private final String subfile;
 	
+	private transient IStrategoTerm cachedTerm;
+	
+	private transient String cachedString;
+	
 	public URI getURI() {
 		return uri;
 	}
@@ -30,9 +34,14 @@
 	}
 	
 	public IStrategoTerm toTerm(ITermFactory factory) {
+		if (cachedTerm != null)
+			return cachedTerm;
+		
 		IStrategoString uriString = factory.makeString(toString());
 		IStrategoString descriptorName = factory.makeString(subfile == null ? "" : subfile);
-		return factory.makeTuple(uriString, descriptorName);
+		cachedTerm = factory.makeTuple(uriString, descriptorName);
+		
+		return cachedTerm;
 	}
 	
 	/**
@@ -62,7 +71,13 @@
 	
 	@Override
 	public String toString() {
-		return "file".equals(uri.getScheme()) ? new File(uri).getAbsolutePath().replace("\\", "/") : uri.toString();
+		if(cachedString != null)
+			return cachedString;
+		
+		cachedString = "file".equals(uri.getScheme()) ? 
+				new File(uri).getAbsolutePath().replace("\\", "/") : uri.toString();
+				
+		return cachedString;
 	}
 	
 	@Override

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Fri Apr 20 11:52:18 2012	(r24753)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Fri Apr 20 12:05:02 2012	(r24754)
@@ -37,7 +37,7 @@
 	}
 	
 	public void initialize(ITermFactory factory, IOAgent agent) {
-		// TODO: Should not be called
+		// Should not be called
 		assert false;
 	}
 
@@ -112,8 +112,8 @@
 	}
 	
 	public SemanticIndexFile getFile(SemanticIndexFileDescriptor fileDescriptor) {
-		// TODO: Does this get the right file?
-		getReadLock().lock();
+		// Need a write lock here because getFile can add a new file.
+		getWriteLock().lock();
 		try {
 			return index.getFile(fileDescriptor);
 		} finally {
@@ -122,13 +122,7 @@
 	}
 	
 	public SemanticIndexFileDescriptor getFileDescriptor(IStrategoTerm fileTerm) {
-		// TODO: Does this get the right file descriptor?
-		getReadLock().lock();
-		try {
-			return index.getFileDescriptor(fileTerm);
-		} finally {
-			getReadLock().unlock();
-		}
+		return index.getFileDescriptor(fileTerm);
 	}
 
 	public void removeFile(IStrategoTerm fileTerm) {
@@ -169,16 +163,15 @@
 	public void clear() {
 		// Should not be called.
 		assert false;
-		transactionIndex.clear();
 	}
 
 	public IStrategoTerm toTerm(boolean includePositions) {
-		// TODO: Transaction data not stored?
+		// TODO: Transaction data not stored, this is ok?
 		return index.toTerm(includePositions);
 	}
 	
 	private <T> Collection<T> concat(Collection<T> c1, Collection<T> c2) {
-		// TODO: Make something like CompositeCollection so nothing has to be copied?
+		// Need to copy here, collections could be changed from other threads.
 		List<T> l = new ArrayList<T>(c1.size() + c2.size());
 		l.addAll(c1);
 		l.addAll(c2);
@@ -189,4 +182,8 @@
 	private Lock getReadLock() {
 		return SemanticIndexManager.getTransactionLock().readLock();
 	}
+	
+	private Lock getWriteLock() {
+		return SemanticIndexManager.getTransactionLock().writeLock();
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str	Fri Apr 20 11:52:18 2012	(r24753)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str	Fri Apr 20 12:05:02 2012	(r24754)
@@ -625,7 +625,7 @@
     where
       uris        := <filter(index-uri)> entries;
       referenced  := <concat> <filter(construct-from-uri)> uris;
-      files       := <make-set> <mapconcat(index-get-files-of)> referenced
+      files       := <iset-elements> <iset-addlist(|<mapconcat(index-get-files-of)> referenced)> <new-iset>
  
   /**
    * Convenience function for finding files with Read and Use dependencies to the given definitions.

From oskarvanrest at gmail.com  Sat Apr 21 16:29:16 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Sat, 21 Apr 2012 14:29:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24755 -
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf
Message-ID: <20120421142916.D0C4B7F800D@mx1.tudelft.nl>

Author: OskarVanRest
Date: Sat Apr 21 14:29:15 2012
New Revision: 24755
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24755&sc=1

Log:
Added rule: if the LHS of a production P1 contains a sort that is sorted by production P2 and P2 only has a sort to a primitive type (ID/INT/..) in its LHS, then, don't make a class for P2 and let the sort of P1 be the sort of P2.

Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Fri Apr 20 12:05:02 2012	(r24754)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Sat Apr 21 14:29:15 2012	(r24755)
@@ -23,13 +23,15 @@
 			xMLDecl := XMLDecl(VersionDecl(Version("1.0")), Some(EncodingDecl(Encoding("UTF-8"))), None());
 			prologue := Prologue(Some(xMLDecl), [], None());
 	
-			qName := QName(Some(Prefix("ecore")), "EPackage");
+			qName := QName(Some(Prefix("ecore")), "EPackage");
+			<fetch-elem(?Name(moduleName))> properties;
 			fixedAttributes := [
 				XMLAttribute("xmi", "version", "2.0"),
 				XMLAttribute("xmlns", "xmi", "http://www.omg.org/XMI"),
 				XMLAttribute("xmlns", "xsi", "http://www.w3.org/2001/XMLSchema-instance"),
 				XMLAttribute("xmlns", "ecore", "http://www.eclipse.org/emf/2002/Ecore"),
-				XMLAttribute("nsURI", "uri")		
+				XMLAttribute("nsURI", moduleName),
+				XMLAttribute("nsPrefix", moduleName)
 			];
 			attributes := <conc> (fixedAttributes, properties);
 			element := Element(qName, attributes, children, None()); 

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str	Fri Apr 20 12:05:02 2012	(r24754)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/map.str	Sat Apr 21 14:29:15 2012	(r24755)
@@ -12,24 +12,24 @@
 		where
 			//<enable-namespace-debugging> "";
 			term' := <collect-om(?context-free-syntax(_))> term;
-			<alltd(productions)> term';
-			<alltd(namespacedefs)> term';
-			<alltd(constrctors)> term'
+			<alltd(sort)> term';
+			<alltd(namespacedef)> term';
+			<alltd(constructor)> term'
 	
 rules
 		
-	productions:
+	sort:
 		p at prod(_, sort(x), _) -> p
 		where 
-			<store-declaration(|Production())> (x, p)
+			<store-declaration(|Sort())> (x, p)
 			
-	namespacedefs:
+	namespacedef:
 		p at prod(lhs, _, _) -> p
 		where
 			namespacedef := <get-namespacedef> p; // here we assume (for now) that one production has at most one namespacedef
 			<store-declaration(|Namespacedef())> (namespacedef, p)
 			
-	constrctors:
+	constructor:
 		p at prod(_, _, attrs(attributes)) -> p
 		where
 			<fetch(?Constructor(constructor))> attributes;

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str	Fri Apr 20 12:05:02 2012	(r24754)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/namespaces.str	Sat Apr 21 14:29:15 2012	(r24755)
@@ -2,6 +2,6 @@
 
 signature constructors
 
-	Production		: NameSpace
+	Sort			: NameSpace
 	Namespacedef	: NameSpace
 	Constructor		: NameSpace
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Fri Apr 20 12:05:02 2012	(r24754)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Sat Apr 21 14:29:15 2012	(r24755)
@@ -8,7 +8,7 @@
 	emf/projections
 	
 strategies
-	sdf-to-ecore = topdown(try(to-ecore)); create-superclasses; collapse-classes
+	sdf-to-ecore = topdown(try(remove-textual-sugar)); topdown(try(to-ecore)); create-superclasses; collapse-classes; topdown(try(remove-textual-sugar))
 
 rules
 	to-ecore:
@@ -83,7 +83,7 @@
 		properties -> properties'
 		where
 			s := <get-sort> sort;
-			not ( <get-unique-declaration(|Production())> s );
+			not ( <get-unique-declaration(|Sort())> s );
 			properties' := <conc> (properties, [ESuperType(s)])
 			
 	to-unique-classname:
@@ -91,14 +91,14 @@
 		where
 			constructor := <un-double-quote> c
 		where
-			<get-unique-declaration(|Production())> s
+			<get-unique-declaration(|Sort())> s
 			+ not ( <equal> (s, constructor) )
 			
 	to-unique-classname:
 		(sort(s), Constructor(c)) -> <concat-strings> [constructor, "_", <new>]
 		where
 			constructor := <un-double-quote> c;
-			not ( <get-unique-declaration(|Production())> s );
+			not ( <get-unique-declaration(|Sort())> s );
 			<equal> (s, constructor)
 
 	get-properties:
@@ -129,21 +129,21 @@
 	get-type:
 		s -> type'
 		where 
-			<get-unique-declaration(|Production())> s;
-			type := <project-declaration(get-constr|Production())> s;
+			<get-unique-declaration(|Sort())> s;
+			type := <project-declaration(get-constr|Sort())> s;
 			type' := <conc-strings> ("#//", type)	
 
 	get-type:  // super type
 		s -> type
 		where 
-			<get-declaration(|Production())> s;
-			not ( <get-unique-declaration(|Production())> s );
+			<get-declaration(|Sort())> s;
+			not ( <get-unique-declaration(|Sort())> s );
 			type := <conc-strings> ("#//", s)
 
 	get-type:
 		s -> type
 		where 
-			not ( <get-declaration(|Production())> s );
+			not ( <get-declaration(|Sort())> s );
 			type := EString() //TODO make EInt, EFloat or EString of this depending on the lexical syntax
 
 
@@ -181,12 +181,12 @@
 	containment:
 		sort -> True()
 		where
-			lhs := <project-declaration(get-lhs|Production())> sort; // what if the sort is not unique? And what if there is a whole sequence of productions that needs to be followed to determine containment?
+			lhs := <project-declaration(get-lhs|Sort())> sort; // what if the sort is not unique? And what if there is a whole sequence of productions that needs to be followed to determine containment?
 			<fetch(?namespacedef(_, _))> lhs
 
 	containment:
 		sort -> False()
-		where not (lhs := <project-declaration(get-lhs|Production())> sort;
+		where not (lhs := <project-declaration(get-lhs|Sort())> sort;
 			 <fetch(?namespacedef(_, _))> lhs )
 
 rules
@@ -194,7 +194,7 @@
 	create-superclasses:
 		EPackage(properties, classes) -> EPackage(properties, classes')
 		where
-			non-unique-sorts := <make-set> <remove-all(get-unique-declaration(|Production()))> <project-all-declarations(get-sort|Production())>;
+			non-unique-sorts := <make-set> <remove-all(get-unique-declaration(|Sort()))> <project-all-declarations(get-sort|Sort())>;
 			super-classes := <map(create-superclass)> non-unique-sorts;
 			classes' := <conc> (classes, super-classes)
 			
@@ -216,7 +216,7 @@
 			classes'' := <map(collapse-class(|classes-with-one-ref) <+ id)> classes'
 		
 	collapse-class(|classes-with-one-ref):
-		e at EClass(properties, children) -> EClass(properties', children)
+		EClass(properties, children) -> EClass(properties', children)
 		where
 			<fetch(?Name(constructor))> properties;
 			namespacedef := <project-declaration(get-namespacedef|Constructor())> constructor;
@@ -225,10 +225,27 @@
 			properties' := <conc> (properties, [ESuperType(eSuperType)])
 	
 	collapse-class(|sort):
-		e at EClass(_, [eReference]) -> e
+		c at EClass(_, [eReference]) -> c
 		where
 			namespaceref := <get-reference-type> eReference;
 			<equal> (sort, namespaceref)
 		
-		
+rules
+	
+	remove-textual-sugar:
+		context-free-syntax(productions)	-> context-free-syntax(productions')
+		where
+			productions' := <remove-all(?prod([sort(x)], _, _))> productions;
+			<type-to-ecore> x
+	
+	remove-textual-sugar:
+		r at EReference(properties) -> EReference(properties')
+		where
+			refType := <get-reference-type> r;
+			prod([sort(type)], _, _) := <get-declaration(|Sort())> refType;
+			primType := <type-to-ecore> type;
+			properties' := <map(replace-type(|primType) <+ id)> properties			
+			
+	replace-type(|y):
+		Type(x) -> Type(y)
 			
\ No newline at end of file

From oskarvanrest at gmail.com  Mon Apr 23 03:26:25 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 23 Apr 2012 01:26:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24756 -
	spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf
Message-ID: <20120423012625.CCE407F8017@mx1.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr 23 01:26:24 2012
New Revision: 24756
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24756&sc=1

Log:
Moved "#//" (for cross-referencing) from sdf-to-ecore to ecore-to-xml

Modified:
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str
   spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Sat Apr 21 14:29:15 2012	(r24755)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/ecore-to-xml.str	Mon Apr 23 01:26:24 2012	(r24756)
@@ -72,11 +72,15 @@
 
 	to-xml:
 		EInt() -> "ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
-			
+
 	
 	// Properties:
 
 	to-xml:	Name(name) 			-> XMLAttribute("name", name)
+	to-xml: Type(type)			-> XMLAttribute("eType", type)
+		where not ( <is-string> type )
+	to-xml: Type(type)			-> XMLAttribute("eType", type')
+		where type' := <conc-strings> ("#//", type)
 	to-xml: Type(type)			-> XMLAttribute("eType", type)		
 	to-xml: ESuperType(type)	-> XMLAttribute("eSuperTypes", <conc-strings> ("#//", type))	
 	to-xml: LowerBound(value) 	-> XMLAttribute("lowerBound", <int-to-string> value)

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str	Sat Apr 21 14:29:15 2012	(r24755)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/projections.str	Mon Apr 23 01:26:24 2012	(r24756)
@@ -37,6 +37,9 @@
 		where
 			<fetch-elem(?ESuperType(type))> properties
 		
-		
+	get-class-name:
+		EClass(properties, children) -> type
+		where
+			<fetch-elem(?Name(type))> properties			
 		
 		
\ No newline at end of file

Modified: spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str
==============================================================================
--- spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Sat Apr 21 14:29:15 2012	(r24755)
+++ spoofax-imp/branches/graphical-editor/org.strategoxt.imp.editors.sdf/trans/emf/sdf-to-ecore.str	Mon Apr 23 01:26:24 2012	(r24756)
@@ -58,7 +58,7 @@
 		where
 			type := <project-declaration(get-constr|Namespacedef())> namespace;
 			name := Name(<first-char-to-lowercase> namespace);
-			type' := Type(<conc-strings> ("#//", type));
+			type' := Type(type);
 			containment := Containment(False());
 			properties := [name, type', containment]
 
@@ -127,18 +127,16 @@
 			containment := <containment> s
 			
 	get-type:
-		s -> type'
+		s -> type
 		where 
 			<get-unique-declaration(|Sort())> s;
-			type := <project-declaration(get-constr|Sort())> s;
-			type' := <conc-strings> ("#//", type)	
+			type := <project-declaration(get-constr|Sort())> s
 
 	get-type:  // super type
-		s -> type
+		s -> s
 		where 
 			<get-declaration(|Sort())> s;
-			not ( <get-unique-declaration(|Sort())> s );
-			type := <conc-strings> ("#//", s)
+			not ( <get-unique-declaration(|Sort())> s )
 
 	get-type:
 		s -> type
@@ -177,17 +175,31 @@
 	
 	containment:
 		namespaceref2(_, _) -> False()
-	
+			
+	containment:
+		sort -> False()
+		where
+			<sort-has-refs> sort;
+			not ( <sort-has-defs> sort )
+			
 	containment:
 		sort -> True()
+		where not ( 
+			<sort-has-refs> sort;
+			not ( <sort-has-defs> sort )
+		 )
+		
+	sort-has-refs:
+		sort -> sort
 		where
-			lhs := <project-declaration(get-lhs|Sort())> sort; // what if the sort is not unique? And what if there is a whole sequence of productions that needs to be followed to determine containment?
-			<fetch(?namespacedef(_, _))> lhs
+			productions := <get-declarations(|Sort())> sort;
+			<oncetd(?namespaceref2(_, _))> productions
 
-	containment:
-		sort -> False()
-		where not (lhs := <project-declaration(get-lhs|Sort())> sort;
-			 <fetch(?namespacedef(_, _))> lhs )
+	sort-has-defs:
+		sort -> sort
+		where
+			productions := <get-declarations(|Sort())> sort;
+			<oncetd(?namespacedef(_, _))> productions
 
 rules
 
@@ -248,4 +260,24 @@
 			
 	replace-type(|y):
 		Type(x) -> Type(y)
-			
\ No newline at end of file
+		
+// rules
+// 	
+// 	collapse-classes2:
+// 		EPackage(name, classes) -> EPackage(name, classes')
+// 		where
+// 			to-be-collapsed := <map(get-reference-type)> <collect-om(collapse-class2)> classes;
+// 			classes' :=
+// 			
+// 	collapse-classes2:		
+// 		EClass(attributes, children) -> EClass(attributes, children')
+// 		where
+// 			children' := <remove-all(collapse-class2 <+ id)> children
+// 	
+// 	collapse-class2:
+// 		e at EReference(properties) -> e
+// 		where
+// 			<oncetd(?LowerBound(1))> properties;
+// 			<oncetd(?UpperBound(1))> properties;
+// 			<oncetd(?Containment(True()))> properties
+			

From oskarvanrest at gmail.com  Mon Apr 23 03:38:21 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 23 Apr 2012 01:38:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24757 - in
	experimental/graphical-editor/EntityLang: .
	synchronizeEntityLang synchronizeEntityLang/.settings
	synchronizeEntityLang/META-INF synchronizeEntityLang/icons syn...
Message-ID: <20120423013821.4610CCC08C@mx4.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr 23 01:38:20 2012
New Revision: 24757
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24757&sc=1

Log:
Synchronizer for the EntityLang. Keeps Spoofax editor and GMF editor synchronized.
At the moment, it can only add entities (from the Spoofax editor) to the GMF editor.

Added:
   experimental/graphical-editor/EntityLang/
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/.classpath
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/.project
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/.settings/
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/.settings/org.eclipse.jdt.core.prefs
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/META-INF/
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/META-INF/MANIFEST.MF
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/build.properties
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/icons/
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/icons/sample.gif   (contents, props changed)
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/plugin.xml
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/Activator.java
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/EMF2EMF.java
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/EMF2Term.java
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/Term2EMF.java
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/actions/
   experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/actions/SampleAction.java

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/.classpath	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/.project	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>synchronizeEntityLang</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/.settings/org.eclipse.jdt.core.prefs	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,7 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+org.eclipse.jdt.core.compiler.compliance=1.6
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.6

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/META-INF/MANIFEST.MF	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,16 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: Synchronize
+Bundle-SymbolicName: synchronizeEntityLang;singleton:=true
+Bundle-Version: 1.0.0.qualifier
+Bundle-Activator: synchronizeEntityLang.Activator
+Require-Bundle: org.eclipse.ui,
+ org.eclipse.core.runtime,
+ org.strategoxt.imp.runtime;bundle-version="0.1.1",
+ org.spoofax.terms;bundle-version="1.0.0",
+ org.eclipse.gmf.runtime.diagram.ui;bundle-version="1.5.0",
+ EntityLangEMF;bundle-version="1.0.0",
+ org.eclipse.imp.runtime;bundle-version="0.1.1015900",
+ org.spoofax.interpreter.core;bundle-version="0.4.1"
+Bundle-ActivationPolicy: lazy
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/build.properties	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,6 @@
+source.. = src/
+output.. = bin/
+bin.includes = plugin.xml,\
+               META-INF/,\
+               .,\
+               icons/

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/icons/sample.gif
==============================================================================
Binary file. No diff available.

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/plugin.xml	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.4"?>
+<plugin>
+
+   <extension
+         point="org.eclipse.ui.actionSets">
+      <actionSet
+            label="Sample Action Set"
+            visible="true"
+            id="synchronize.actionSet">
+         <menu
+               label="Sample &amp;Menu"
+               id="sampleMenu">
+            <separator
+                  name="sampleGroup">
+            </separator>
+         </menu>
+         <action
+               label="&amp;Sample Action"
+               icon="icons/sample.gif"
+               class="synchronizeEntityLang.actions.SampleAction"
+               tooltip="Hello, Eclipse world"
+               menubarPath="sampleMenu/sampleGroup"
+               toolbarPath="sampleGroup"
+               id="synchronize.actions.SampleAction">
+         </action>
+      </actionSet>
+   </extension>
+
+</plugin>

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/Activator.java	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,61 @@
+package synchronizeEntityLang;
+
+import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.ui.plugin.AbstractUIPlugin;
+import org.osgi.framework.BundleContext;
+
+/**
+ * The activator class controls the plug-in life cycle
+ */
+public class Activator extends AbstractUIPlugin {
+
+	// The plug-in ID
+	public static final String PLUGIN_ID = "synchronize"; //$NON-NLS-1$
+
+	// The shared instance
+	private static Activator plugin;
+	
+	/**
+	 * The constructor
+	 */
+	public Activator() {
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
+	 */
+	public void start(BundleContext context) throws Exception {
+		super.start(context);
+		plugin = this;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
+	 */
+	public void stop(BundleContext context) throws Exception {
+		plugin = null;
+		super.stop(context);
+	}
+
+	/**
+	 * Returns the shared instance
+	 *
+	 * @return the shared instance
+	 */
+	public static Activator getDefault() {
+		return plugin;
+	}
+
+	/**
+	 * Returns an image descriptor for the image file at the given
+	 * plug-in relative path
+	 *
+	 * @param path the path
+	 * @return the image descriptor
+	 */
+	public static ImageDescriptor getImageDescriptor(String path) {
+		return imageDescriptorFromPlugin(PLUGIN_ID, path);
+	}
+}

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/EMF2EMF.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/EMF2EMF.java	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,37 @@
+package synchronizeEntityLang;
+
+import org.eclipse.emf.ecore.util.EcoreUtil;
+import org.eclipse.emf.transaction.RecordingCommand;
+import org.eclipse.emf.transaction.TransactionalEditingDomain;
+
+import example.Module;
+
+public class EMF2EMF {
+
+	/**
+	 * Update GMFModel to reflect newModel
+	 */
+	public EMF2EMF(final Module newModel, final Module GMFModel, TransactionalEditingDomain editingDomain) {
+		editingDomain.getCommandStack().execute(new RecordingCommand(editingDomain) {
+			protected void doExecute() {
+				synchronize(newModel, GMFModel);
+			}
+		});
+	}
+
+	private void synchronize(Module newModel, Module GMFModel) {
+		for (int i = 0; i < newModel.getDefinitions().size(); i++) {
+			boolean oldModelHasEntity = false;
+
+			for (int j = 0; j < GMFModel.getDefinitions().size(); j++) {
+				if (GMFModel.getDefinitions().get(j).getIdentifier().equals(newModel.getDefinitions().get(i).getIdentifier())) {
+					oldModelHasEntity = true;
+				}
+			}
+
+			if (!oldModelHasEntity) {
+				GMFModel.getDefinitions().add(EcoreUtil.copy(newModel.getDefinitions().get(i)));
+			}
+		}
+	}
+}

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/EMF2Term.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/EMF2Term.java	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,5 @@
+package synchronizeEntityLang;
+
+public class EMF2Term {
+
+}

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/Term2EMF.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/Term2EMF.java	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,104 @@
+package synchronizeEntityLang;
+
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.ecore.util.EcoreUtil;
+import org.eclipse.emf.transaction.RecordingCommand;
+import org.eclipse.emf.transaction.TransactionalEditingDomain;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+import example.Entity;
+import example.ExampleFactory;
+import example.Module;
+import example.Property;
+import example.impl.ExampleFactoryImpl;
+
+enum ModelClass {
+	Module, Entity, Property, Type
+}
+
+public class Term2EMF {
+
+	// For creating Modules, Entities and Properties
+	private ExampleFactory eFactory;
+	// Semantical EMF model of the GMF editor
+	private Module GMFModel;
+	// Model generated from ATerm
+	private Module newModel;
+
+	/**
+	 * Updates the EMF model of the GMF editor with changes made by the textual editor
+	 * @param newTerm : the new IStrategoTerm
+	 * @param GMFModel : the semantical EMF model of the GMF editor
+	 * @param editingDomain : the TransactionalEditingDomain of the GMF editor
+	 */
+	public void synchronize(IStrategoTerm newTerm, EObject GMFModel, TransactionalEditingDomain editingDomain) {
+		eFactory = new ExampleFactoryImpl();
+		this.GMFModel = (Module) GMFModel;
+		newModel = (Module) term2EMF(newTerm, ModelClass.Module);
+
+		new EMF2EMF(newModel, this.GMFModel, editingDomain);
+	}
+
+	/**
+	 * Converts a term into an EObject
+	 * @param term: the term to be converted
+	 * @param modelClass: the model class (Property/Entity/Module) that the term represents
+	 * @return the EObject corresponding to the term
+	 */
+	private EObject term2EMF(IStrategoTerm term, ModelClass modelClass) {
+		if (modelClass == ModelClass.Module) {
+			newModel = eFactory.createModule();
+
+			String identifier = ((IStrategoString) term.getSubterm(0)).getName();
+			newModel.setIdentifier(identifier);
+
+			IStrategoList definitions = (IStrategoList) term.getSubterm(1);
+			int definitionCount = definitions.size();
+			for (int i = 0; i < definitionCount; i++) {
+				IStrategoTerm definition = definitions.head();
+				definitions = definitions.tail();
+				Entity entity = (Entity) term2EMF(definition, ModelClass.Entity);
+				newModel.getDefinitions().add(entity);
+			}
+
+			return newModel;
+		} else if (modelClass == ModelClass.Entity) {
+			Entity entity = eFactory.createEntity();
+
+			String identifier = ((IStrategoString) term.getSubterm(0)).getName();
+			entity.setIdentifier(identifier);
+
+			IStrategoList properties = (IStrategoList) term.getSubterm(1);
+			int propertyCount = properties.size();
+			for (int i = 0; i < propertyCount; i++) {
+				IStrategoTerm definition = properties.head();
+				properties = properties.tail();
+				Property property = (Property) term2EMF(definition, ModelClass.Property);
+				entity.getProperties().add(property);
+			}
+
+			return entity;
+		} else if (modelClass == ModelClass.Property) {
+			Property property = eFactory.createProperty();
+
+			String identifier = ((IStrategoString) term.getSubterm(0)).getName();
+			property.setIdentifier(identifier);
+
+			String type = ((IStrategoString) ((IStrategoAppl) term.getSubterm(1)).getSubterm(0)).getName();
+			for (int i = 0; i < newModel.getDefinitions().size(); i++) {
+				if (newModel.getDefinitions().get(i).getIdentifier().equals(type)) {
+					property.setType(newModel.getDefinitions().get(i));
+				}
+			}
+			// problem: what if type is null? (this is the case when type is undefined)
+			// solution: the property has no type in the EMF model.
+
+			return property;
+		}
+
+		return null;
+	}
+}

Added: experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/actions/SampleAction.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/synchronizeEntityLang/src/synchronizeEntityLang/actions/SampleAction.java	Mon Apr 23 01:38:20 2012	(r24757)
@@ -0,0 +1,105 @@
+package synchronizeEntityLang.actions;
+
+//import inmemorymodelaccess.Entity;
+//import inmemorymodelaccess.Root;
+
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.ecore.resource.ResourceSet;
+import org.eclipse.emf.transaction.TransactionalEditingDomain;
+import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;
+import org.eclipse.jface.action.IAction;
+import org.eclipse.jface.viewers.ISelection;
+import org.eclipse.ui.IEditorPart;
+import org.eclipse.ui.IEditorReference;
+import org.eclipse.ui.IWorkbench;
+import org.eclipse.ui.IWorkbenchPage;
+import org.eclipse.ui.IWorkbenchWindow;
+import org.eclipse.ui.IWorkbenchWindowActionDelegate;
+import org.eclipse.ui.PlatformUI;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.EditorState;
+
+import synchronizeEntityLang.Term2EMF;
+
+/**
+ * Our sample action implements workbench action delegate. The action proxy will
+ * be created by the workbench and shown in the UI. When the user tries to use
+ * the action, this delegate will be created and execution will be delegated to
+ * it.
+ * 
+ * @see IWorkbenchWindowActionDelegate
+ */
+public class SampleAction implements IWorkbenchWindowActionDelegate {
+	private IWorkbenchWindow window;
+
+	/**
+	 * The constructor.
+	 */
+	public SampleAction() {
+	}
+
+	/**
+	 * This action causes the semantical EMF model of the GMF editor to be updated with 
+	 * changes made in the textual editor.
+	 * At the moment, it only adds entities to the EMF model that were not there yet.
+	 * 
+	 * @see IWorkbenchWindowActionDelegate#run
+	 */
+	public void run(IAction action) {
+		// find the term
+		EditorState activeEditor = EditorState.getActiveEditor();
+		IStrategoTerm term = activeEditor.getCurrentAst();
+
+		// find the EMF model
+		IWorkbench wb = PlatformUI.getWorkbench();
+		IWorkbenchWindow win = wb.getActiveWorkbenchWindow();
+		IWorkbenchPage page = win.getActivePage();
+		IEditorReference[] editors = page.getEditorReferences();
+
+		IEditorPart editor = null;
+		for (int i = 0; i < editors.length; i++) {
+			if (editors[i].getId().equals("example.diagram.part.ExampleDiagramEditorID")) {
+				editor = editors[i].getEditor(false);
+			}
+		}
+
+		if (editor instanceof DiagramEditor) {
+			DiagramEditor diagramEditor = (DiagramEditor) editor;
+			TransactionalEditingDomain editingDomain = diagramEditor.getEditingDomain();
+			ResourceSet diagramEditorResourceSet = editingDomain.getResourceSet();
+			EObject model = diagramEditorResourceSet.getResources().get(1).getContents().get(0);
+
+			// For now, do a term2EMF synchronization
+			new Term2EMF().synchronize(term, model, editingDomain);
+		}
+	}
+
+	/**
+	 * Selection in the workbench has been changed. We can change the state of
+	 * the 'real' action here if we want, but this can only happen after the
+	 * delegate has been created.
+	 * 
+	 * @see IWorkbenchWindowActionDelegate#selectionChanged
+	 */
+	public void selectionChanged(IAction action, ISelection selection) {
+	}
+
+	/**
+	 * We can use this method to dispose of any system resources we previously
+	 * allocated.
+	 * 
+	 * @see IWorkbenchWindowActionDelegate#dispose
+	 */
+	public void dispose() {
+	}
+
+	/**
+	 * We will cache window object in order to be able to provide parent shell
+	 * for the message dialog.
+	 * 
+	 * @see IWorkbenchWindowActionDelegate#init
+	 */
+	public void init(IWorkbenchWindow window) {
+		this.window = window;
+	}
+}
\ No newline at end of file

From lennart at lclnet.nl  Thu Apr 26 22:20:10 2012
From: lennart at lclnet.nl (Lennart Kats)
Date: Thu, 26 Apr 2012 20:20:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24758 -
	spoofax-imp/trunk
Message-ID: <20120426202010.73E857F8018@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Apr 26 20:20:10 2012
New Revision: 24758
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24758&sc=1

Log:
hint about initializeFactories()

Modified:
   spoofax-imp/trunk/README

Modified: spoofax-imp/trunk/README
==============================================================================
--- spoofax-imp/trunk/README	Mon Apr 23 01:38:20 2012	(r24757)
+++ spoofax-imp/trunk/README	Thu Apr 26 20:20:10 2012	(r24758)
@@ -17,3 +17,4 @@
 7. Implement the feature in a concrete class in org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
 8. Implement the feature in a factory class in org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
    (e.g. see OutlinerFactory, OnSaveServiceFactory)
+9. Add a reference the factory to initializeFactories() in org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java

From g.h.wachsmuth at tudelft.nl  Fri Apr 27 12:03:52 2012
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Fri, 27 Apr 2012 10:03:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24759 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime: .
	src/org/strategoxt/imp/runtime/dynamicloading
	src/org/strategoxt/imp/runtime/services
Message-ID: <20120427100352.996622B801C@mx2.tudelft.nl>

Author: GuidoWachsmuth
Date: Fri Apr 27 10:03:51 2012
New Revision: 24759
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24759&sc=1

Log:
prepared runtime to deal with label provider strategies

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicLabelProvider.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/LabelProviderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Thu Apr 26 20:20:10 2012	(r24758)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	Fri Apr 27 10:03:51 2012	(r24759)
@@ -50,7 +50,7 @@
    <extension
          point="org.eclipse.imp.runtime.labelProvider">
       <labelProvider
-            class="org.strategoxt.imp.runtime.services.LabelProvider"
+            class="org.strategoxt.imp.runtime.dynamicloading.DynamicLabelProvider"
             language="DynamicRoot">
       </labelProvider>
    </extension>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Thu Apr 26 20:20:10 2012	(r24758)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Fri Apr 27 10:03:51 2012	(r24759)
@@ -107,6 +107,7 @@
 	private void initializeFactories() throws BadDescriptorException {
 		serviceFactories.add(new ParseControllerFactory());
 		serviceFactories.add(new FoldingUpdaterFactory());
+		serviceFactories.add(new LabelProviderFactory());
 		serviceFactories.add(new TreeModelBuilderFactory());
 		serviceFactories.add(new ReferenceResolverFactory());
 		serviceFactories.add(new StrategoObserverFactory());
@@ -115,7 +116,6 @@
 		serviceFactories.add(new BuilderFactory());
 		serviceFactories.add(new RefactoringFactory());
 		serviceFactories.add(new ContentProposerFactory());
-		serviceFactories.add(new LabelProviderFactory());
 		serviceFactories.add(new AutoEditStrategyFactory());
 		serviceFactories.add(new OnSaveServiceFactory());
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicLabelProvider.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicLabelProvider.java	Fri Apr 27 10:03:51 2012	(r24759)
@@ -0,0 +1,52 @@
+package org.strategoxt.imp.runtime.dynamicloading;
+
+import org.eclipse.imp.services.ILabelProvider;
+import org.eclipse.jface.viewers.ILabelProviderListener;
+import org.eclipse.swt.graphics.Image;
+
+/**
+ * @author Guido Wachsmuth <G.H.Wachsmuth add tudelft.nl>
+ */
+public class DynamicLabelProvider extends AbstractService<ILabelProvider> implements ILabelProvider {
+	
+	public DynamicLabelProvider() {
+		super(ILabelProvider.class);
+	}
+
+	public Image getImage(Object element) {
+		if (!isInitialized())
+			return null; 
+		
+		return getWrapped().getImage(element);
+	}
+
+	public String getText(Object element) {
+		if (!isInitialized())
+			return "foo"; 
+		
+		return getWrapped().getText(element);
+	}
+	
+	public boolean isLabelProperty(Object element, String property) {
+		if (!isInitialized())
+			return true; 
+
+		return getWrapped().isLabelProperty(element, property);
+	}
+
+	public void addListener(ILabelProviderListener listener) {
+		if (isInitialized())
+			getWrapped().addListener(listener);
+	}
+
+	public void removeListener(ILabelProviderListener listener) {
+		if (isInitialized())
+			getWrapped().removeListener(listener);
+	}
+
+	public void dispose() {
+		if (isInitialized())
+			getWrapped().dispose();
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	Thu Apr 26 20:20:10 2012	(r24758)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	Fri Apr 27 10:03:51 2012	(r24759)
@@ -92,6 +92,7 @@
 		TokenColorerHelper.register((SGLRParseController) parser, lastEditor);
 		StrategoObserverPartListener.register(lastEditor);
 		RefactoringFactory.eagerInit(descriptor, parser, lastEditor);
+		LabelProviderFactory.eagerInit(descriptor, parser, lastEditor);
 	}
 
 	public IAnnotationTypeInfo getAnnotationTypeInfo() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/LabelProviderFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/LabelProviderFactory.java	Thu Apr 26 20:20:10 2012	(r24758)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/LabelProviderFactory.java	Fri Apr 27 10:03:51 2012	(r24759)
@@ -1,25 +1,54 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
+import static org.spoofax.interpreter.core.Tools.termAt;
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.findTerm;
+
+import org.eclipse.imp.parser.IParseController;
 import org.eclipse.imp.services.ILabelProvider;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.services.LabelProvider;
+import org.strategoxt.imp.runtime.services.StrategoObserver;
 
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Guido Wachsmuth <G.H.Wachsmuth add tudelft.nl>
  */
 public class LabelProviderFactory extends AbstractServiceFactory<ILabelProvider> {
 
 	public LabelProviderFactory() {
-		super(ILabelProvider.class);
+		super(ILabelProvider.class, true);
 	}
 	
 	@Override
 	public ILabelProvider create(Descriptor descriptor, SGLRParseController controller)
 			throws BadDescriptorException {
 		
-		return new LabelProvider();
+		// try to find label providing strategy in editor description
+		IStrategoAppl provider = findTerm(descriptor.getDocument(), "LabelProvider");
+		String function = null;
+		if (provider != null)
+			function = TermReader.termContents(termAt(provider, 0));
+		StrategoObserver feedback = descriptor.createService(StrategoObserver.class, controller);
+		return new LabelProvider(feedback, function);
 	}
 
+	public static void eagerInit(Descriptor descriptor, IParseController controller, EditorState editor) {
+		
+		try {
+			if (editor != null && controller instanceof SGLRParseController) {
+				org.eclipse.jface.viewers.ILabelProvider provider = editor.getEditor().getLanguageServiceManager().getLabelProvider();
+				if (provider instanceof DynamicLabelProvider) {
+					DynamicLabelProvider dynProvider = (DynamicLabelProvider) provider;
+					dynProvider.initialize(controller);
+				}
+			}
+		} catch (RuntimeException e) {
+			Environment.logException("Could not eagerly intiialize the label provider service", e);
+		}
+	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java	Thu Apr 26 20:20:10 2012	(r24758)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java	Fri Apr 27 10:03:51 2012	(r24759)
@@ -6,28 +6,65 @@
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getSort;
 import static org.spoofax.terms.Term.tryGetName;
+import static org.spoofax.terms.Term.isTermString;
 
 import org.eclipse.imp.services.ILabelProvider;
 import org.eclipse.jface.viewers.ILabelProviderListener;
 import org.eclipse.swt.graphics.Image;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
 import org.spoofax.terms.attachments.ParentAttachment;
+import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.ast.AstNodeLocator;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Guido Wachsmuth <G.H.Wachsmuth add tudelft.nl>
  */
 public class LabelProvider implements ILabelProvider {
 
+	private final StrategoObserver observer;
+	private final String function;
+	
+	public LabelProvider() {
+		this.observer = null;
+		this.function = "";
+		Debug.log("label provider nullary");
+	}
+	
+	public LabelProvider(StrategoObserver observer, String function) {
+		this.observer = observer;
+		this.function = function;
+	}
+	
 	public Image getImage(Object element) {
 		return null;
 	}
 
 	public String getText(Object element) {
 		IStrategoTerm node = AstNodeLocator.impObjectToAstNode(element);
+		
+		// try to apply label provider strategy
+		if (function != null) {
+			observer.getLock().lock();
+			try {
+				IStrategoTerm result = observer.invokeSilent(function, node);
+				if (result != null) {
+					if (isTermString(result)) {
+						return ((IStrategoString) result).stringValue();
+					} else {
+						return result.toString();
+					}
+				}
+			} finally {
+				observer.getLock().unlock();
+			}
+		}
+		
+		// fall back to generic code
 		String caption = getCaption(node);
 		
 		if (caption == null) {
@@ -42,7 +79,7 @@
 	}
 
 	private String getCaption(IStrategoTerm node) {
-		// TODO: add user-defined outline captions, perhaps just using Stratego
+		// TODO Remove hack for hardcoded outline
 		// HACK: Hardcoded outlining, until we have support for patterns
 		String constructor = node == null ? null : tryGetName(node);
 		

From gabrielkonat at gmail.com  Fri Apr 27 16:10:55 2012
From: gabrielkonat at gmail.com (GabriÃ«l Konat)
Date: Fri, 27 Apr 2012 14:10:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24760 -
	spoofax-contrib/separate-compilation-examples/c-without-macros/syntax
	spoofax-contrib/separate-compilation-examples/c-without-macros/test
	spoofax-contrib/separate-...
Message-ID: <20120427141055.0DA322B8048@mx2.tudelft.nl>

Author: gkonat
Date: Fri Apr 27 14:10:54 2012
New Revision: 24760
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24760&sc=1

Log:
Implemented subfiles in the index.

Modified:
   spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf
   spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-manual.str
   spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
   spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/EntityWithAspects.sdf
   spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/syntax/C-without-macros.sdf	Fri Apr 27 14:10:54 2012	(r24760)
@@ -10,10 +10,10 @@
 	
 	context-free syntax
 
-		Definition* -> Start {"Start", scope(Function, Struct, Type, Include)}
+		Include* Definition* -> Start {"Start", scope(Function, Struct, Type, Include)}
 		
-		"include" "\"" Include@=UQSTRING "\"" -> Definition {"Include"}
-		"include" "<" Include@=UQSTRING ">"   -> Definition {"Include"}
+		"include" "\"" Include@=UQSTRING "\"" -> Include {"Include"}
+		"include" "<" Include@=UQSTRING ">"   -> Include {"Include"}
 		
 		Type Function@=ID "(" {Param "," }* ")" "{" Stmt* "}" -> Definition {"FunDecl", scope(Var)}
 		

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/test/resolving.spt	Fri Apr 27 14:10:54 2012	(r24760)
@@ -37,7 +37,7 @@
   
   typedef B_t [[B_t_1]];
   
-  [[B_t_1]] f() { 
+  [[B_t_1]] f() {
     B_t_1 b;
     return b;
   }

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-manual.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-manual.str	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/analysis-manual.str	Fri Apr 27 14:10:54 2012	(r24760)
@@ -14,7 +14,7 @@
   
   // Set root URI part to the file path.
   adjust-index-path(is-def |namespace, path):
-    Start(_) -> [<string-replace(|<project-path>, "")> <Fst> <index-get-current-file>]
+    Start(_, _) -> [<string-replace(|<project-path>, "")> <Fst> <index-get-current-file>]
   
 rules // Adjust lookup
   

Modified: spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax-contrib/separate-compilation-examples/c-without-macros/trans/c_without_macros.str	Fri Apr 27 14:10:54 2012	(r24760)
@@ -13,6 +13,7 @@
   desugar
   generate
   analysis-manual
+  splitter
 
 rules // Main editor interface (defined by editor/C-without-macros-Builders and -References.esv)
   
@@ -25,13 +26,13 @@
     (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
     with
       ast'                    := <desugar-all> ast; // Optional AST desugaring
-      (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
+      (ast'', filesToAnalyze) := <analyze-top-multiple(|path, project-path, Editor(), <language>)> <toplevel-split> ast';
       index-start-transaction;
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
       index-end-transaction;
-      filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
+      filesToAnalyze'         := <make-set> <map(index-filepair-to-file)> filesToAnalyze
 
   // Main entry point for analyzes, called when a single file is opened in the editor.
   editor-analyze:
@@ -39,7 +40,7 @@
     with
       editor-init;
       (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
-      <editor-queue-analysis> filesToAnalyze
+      <try(editor-queue-analysis)> filesToAnalyze
       
   // Main entry point for analyzes, called when multiple (changed) files have changed. 
   editor-analyze:
@@ -59,12 +60,17 @@
   editor-save:
     (ast, _, _, _, _) -> None()
     with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [<project-path>], ".");
-      <trigger-commit-and-compile> language
+      index-setup(|<language>, [<project-path>], ".");
+      <trigger-commit-and-compile> <language>
       
   // Queue parallel analysis for given list of files.
-  editor-queue-analysis = queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+  editor-queue-analysis = not(?[]); queue-strategy(|"editor-parallel-analyze", "Analyzing files")
+  
+  // Executes parallel analysis using the index library.
+  editor-parallel-analyze:
+    files -> None()
+    with
+      index-parallel-analyze-files(analyze)
   
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:
@@ -86,14 +92,13 @@
     with
       editor-init;
       filename := <guarantee-extension(|"analyzed.aterm")> path;
-      result   := <analyze-top> (selected, path, project-path)   
+      result   := <analyze> (selected, path, project-path)
       
   // Prints the entries in the index of the current file.
   index-currentfile:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      language := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"index.currentfile.aterm")> path;
       result   := <index-get-all-in-file> path
       
@@ -101,8 +106,7 @@
   index-allfiles:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"index.allfiles.aterm")> path;
       result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
       
@@ -110,31 +114,24 @@
   index-cleanall:
     (selected, position, ast, path, project-path)  -> None()
     with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       index-clear
       
   // Resolves a reference when the user control-clicks or presses F3 in the editor.
   editor-resolve:
     (node, position, ast, path, project-path) -> target
     where
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
-      def     := <index-lookup> node;
-      target  := def
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
+      index-start-transaction;
+      target := <index-lookup> node;
+      index-end-transaction
 
   // Returns "hover help" information for a particular node in the editor.
   // For references, this rule is invoked using the resolved term.
   editor-hover:
-    (target, position, ast, path, project-path) -> $[[def-path'']]
+    (target, position, ast, path, project-path) -> $[[uriString]]
     where
-      // FIXME: this only works for definition paths
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
-      def-term           := <nam-get-definition-key> target;
-      _{[ns | def-path]} := def-term;
-      def-path'  := <take-until(?Anon(_))> def-path;
-      def-path'' := <reverse; separate-by(|".")> def-path'
+      uriString := <uri-to-string> <index-path> <nam-get-definition-key> target
 
   // Completes an identifier when the user presses control-space
   // (the completion identifier in the AST provides additional context information)
@@ -143,7 +140,7 @@
     where
       editor-init;
       ast'              := <desugar-all> ast;
-      ast''             := <analyze-top> (ast', path, project-path);
+      (ast'', _)        := <analyze-top-multiple(|path, project-path, Editor(), <language>)> <toplevel-split> ast';
       x                 := <collect-one(?COMPLETION(_))> ast'';
       COMPLETION(name)	:= x;
       index-start-transaction;

Modified: spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax-contrib/separate-compilation-examples/csharp-partial-classses/trans/csharppartialclassses.str	Fri Apr 27 14:10:54 2012	(r24760)
@@ -12,6 +12,7 @@
   check
   generate
   analysis-manual
+  splitter
 
 rules // Main editor interface (defined by editor/CSharpPartialClassses-Builders and -References.esv)
   
@@ -24,20 +25,20 @@
     (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
     with
       ast'                    := <id> ast; // Optional AST desugaring
-      (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
+      (ast'', filesToAnalyze) := <analyze-top-multiple(|path, project-path, Editor(), <language>)> <toplevel-split> ast';
       index-start-transaction;
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
       index-end-transaction;
-      filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
+      filesToAnalyze'         := <make-set> <map(index-filepair-to-file)> filesToAnalyze
 
   // Main entry point for analyzes, called when a single file is opened in the editor.
   editor-analyze:
     (ast, path, project-path) -> (ast', errors, warnings, notes)
     with
       editor-init;
-      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
+      (ast', errors, warnings, notes, filesToAnalyze) := <analyze> (ast, path, project-path);
       <editor-queue-analysis> filesToAnalyze
       
   // Main entry point for analyzes, called when multiple (changed) files have changed. 
@@ -58,9 +59,8 @@
   editor-save:
     (ast, _, _, _, _) -> None()
     with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [<project-path>], ".");
-      <trigger-commit-and-compile> language
+      index-setup(|<language>, [<project-path>], ".");
+      <trigger-commit-and-compile> <language>
       
   // Queue parallel analysis for given list of files.
   editor-queue-analysis = queue-strategy(|"editor-parallel-analyze", "Analyzing files")
@@ -91,14 +91,13 @@
     with
       editor-init;
       filename := <guarantee-extension(|"analyzed.aterm")> path;
-      result   := <analyze-top> (selected, path, project-path)   
+      result   := <analyze> (selected, path, project-path)   
       
   // Prints the entries in the index of the current file.
   index-currentfile:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      language := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"index.currentfile.aterm")> path;
       result   := <index-get-all-in-file> path
       
@@ -106,8 +105,7 @@
   index-allfiles:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      language := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"index.allfiles.aterm")> path;
       result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
       
@@ -115,31 +113,24 @@
   index-cleanall:
     (selected, position, ast, path, project-path)  -> None()
     with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       index-clear
   
   // Resolves a reference when the user control-clicks or presses F3 in the editor.
   editor-resolve:
     (node, position, ast, path, project-path) -> target
     where
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
-      def     := <index-lookup> node;
-      target  := def
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
+      index-start-transaction;
+      target := <index-lookup> node;
+      index-end-transaction
 
   // Returns "hover help" information for a particular node in the editor.
   // For references, this rule is invoked using the resolved term.
   editor-hover:
-    (target, position, ast, path, project-path) -> $[[def-path'']]
+    (target, position, ast, path, project-path) -> $[[uriString]]
     where
-      // FIXME: this only works for definition paths
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
-      def-term           := <nam-get-definition-key> target;
-      _{[ns | def-path]} := def-term;
-      def-path'  := <take-until(?Anon(_))> def-path;
-      def-path'' := <reverse; separate-by(|".")> def-path'
+      uriString := <uri-to-string> <index-path> <nam-get-definition-key> target
 
   // Completes an identifier when the user presses control-space
   // (the completion identifier in the AST provides additional context information)
@@ -147,7 +138,7 @@
     (node, position, ast, path, project-path) -> proposals'
     where
       editor-init;
-      ast'              := <analyze-top> (ast, path, project-path);
+      (ast', _)         := <analyze-top-multiple(|path, project-path, Editor(), <language>)> <toplevel-split> ast;
       x                 := <collect-one(?COMPLETION(_))> ast';
       COMPLETION(name)  := x;
       index-start-transaction;

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/EntityWithAspects.sdf
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/EntityWithAspects.sdf	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/syntax/EntityWithAspects.sdf	Fri Apr 27 14:10:54 2012	(r24760)
@@ -11,9 +11,9 @@
   context-free syntax
 
     %% Constructs
-    "module" Module@=ID Definition*   -> Start {"Module", scope(Type, Aspect, Import)}
-    "entity" Type@=ID "{" Member* "}" -> Definition {"Entity", scope(Property, Function)}
-    "import" Import@=ImportPart       -> Definition {"Import"}
+    "module" Module@=ID Import* Definition* -> Start {"Module", scope(Type, Aspect, Import)}
+    "entity" Type@=ID "{" Member* "}"       -> Definition {"Entity", scope(Property, Function)}
+    "import" Import@=ImportPart             -> Import {"Import"}
     
     Module at ID "." "*"     -> ImportPart {"WildcardImport"}
     Module at ID "." Type at ID -> ImportPart {"EntityImport"}

Modified: spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str
==============================================================================
--- spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax-contrib/separate-compilation-examples/entity-with-aspects/trans/entitywithaspects.str	Fri Apr 27 14:10:54 2012	(r24760)
@@ -13,6 +13,7 @@
   generate
   generate-test
   analysis-manual
+  splitter
 
 rules // Main editor interface (defined by editor/EntityWithAspects-Builders and -References.esv)
   
@@ -25,13 +26,13 @@
     (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
     with
       ast'                    := <id> ast; // Optional AST desugaring
-      (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
+      (ast'', filesToAnalyze) := <analyze-top-multiple(|path, project-path, Editor(), <language>)> <toplevel-split> ast';
       index-start-transaction;
       errors                  := <collect-all(constraint-error, conc)> ast'';
       warnings                := <collect-all(constraint-warning, conc)> ast'';
       notes                   := <collect-all(constraint-note, conc)> ast'';
       index-end-transaction;
-      filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze
+      filesToAnalyze'         := <make-set> <map(index-filepair-to-file)> filesToAnalyze
 
   // Main entry point for analyzes, called when a single file is opened in the editor.
   editor-analyze:
@@ -59,9 +60,8 @@
   editor-save:
     (ast, _, _, _, _) -> None()
     with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [<project-path>], ".");
-      <trigger-commit-and-compile> language
+      index-setup(|<language>, [<project-path>], ".");
+      <trigger-commit-and-compile> <language>
       
   // Queue parallel analysis for given list of files.
   editor-queue-analysis = queue-strategy(|"editor-parallel-analyze", "Analyzing files")
@@ -92,14 +92,13 @@
     with
       editor-init;
       filename := <guarantee-extension(|"analyzed.aterm")> path;
-      result   := <analyze-top> (selected, path, project-path)   
+      result   := <analyze-top(|<language>)> (selected, path, project-path)   
       
   // Prints the entries in the index of the current file.
   index-currentfile:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      language := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"index.currentfile.aterm")> path;
       result   := <index-get-all-in-file> path
       
@@ -107,8 +106,7 @@
   index-allfiles:
     (selected, position, ast, path, project-path) -> (filename, result)
     with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"index.allfiles.aterm")> path;
       result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
       
@@ -116,31 +114,24 @@
   index-cleanall:
     (selected, position, ast, path, project-path)  -> None()
     with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       index-clear
       
   // Resolves a reference when the user control-clicks or presses F3 in the editor.
   editor-resolve:
     (node, position, ast, path, project-path) -> target
     where
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
-      def     := <index-lookup> node;
-      target  := def
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
+      index-start-transaction;
+      target := <index-lookup> node;
+      index-end-transaction
 
   // Returns "hover help" information for a particular node in the editor.
   // For references, this rule is invoked using the resolved term.
   editor-hover:
-    (target, position, ast, path, project-path) -> $[[def-path'']]
+    (target, position, ast, path, project-path) -> $[[uriString]]
     where
-      // FIXME: this only works for definition paths
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
-      def-term           := <nam-get-definition-key> target;
-      _{[ns | def-path]} := def-term;
-      def-path'  := <take-until(?Anon(_))> def-path;
-      def-path'' := <reverse; separate-by(|".")> def-path'
+      uriString := <uri-to-string> <index-path> <nam-get-definition-key> target
 
   // Completes an identifier when the user presses control-space
   // (the completion identifier in the AST provides additional context information)
@@ -148,7 +139,7 @@
     (node, position, ast, path, project-path) -> proposals'
     where
       editor-init;
-      ast'              := <analyze-top> (ast, path, project-path);
+      (ast', _)         := <analyze-top-multiple(|path, project-path, Editor(), <language>)> <toplevel-split> ast;
       x                 := <collect-one(?COMPLETION(_))> ast';
       COMPLETION(name)  := x;
       index-start-transaction;
@@ -167,7 +158,6 @@
   generate-test-files:
     (selected, position, ast, path, project-path) -> None()
     with
-      language  := <index-origin-language> ast;
-      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
       <testgen> (selected, position, ast, path, project-path)
     
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_clear_file.java	Fri Apr 27 14:10:54 2012	(r24760)
@@ -24,7 +24,7 @@
 
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
-		if (index.isInitialized() && (isTermString(tvars[0]) || isTermTuple(tvars[0]))) {
+		if (isTermString(tvars[0]) || isTermTuple(tvars[0])) {
 			ISemanticIndex ind = index.getCurrent();
 			ind.removeFile(tvars[0]);
 			return true;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/LANG_index_get_all_files.java	Fri Apr 27 14:10:54 2012	(r24760)
@@ -25,7 +25,6 @@
 		ITermFactory factory = env.getFactory();
 		IStrategoList results = getAllFiles(index.getCurrent(), factory);
 		env.setCurrent(results);
-		//new SemanticIndexStatistics(index.getCurrent()).printStats();
 		return true;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndex.java	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndex.java	Fri Apr 27 14:10:54 2012	(r24760)
@@ -5,6 +5,7 @@
 import static org.spoofax.terms.Term.tryGetConstructor;
 
 import java.io.IOException;
+import java.net.URI;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -35,10 +36,12 @@
 			ArrayListMultimap.create();
 	private final Multimap<SemanticIndexURI, SemanticIndexEntry> childs = 
 			ArrayListMultimap.create();
-	private final Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> entriesPerFile = 
+	private final Multimap<SemanticIndexFileDescriptor, SemanticIndexEntry> entriesPerFileDescriptor = 
 			ArrayListMultimap.create();
 	private final Map<SemanticIndexFileDescriptor, SemanticIndexFile> files =
 			new HashMap<SemanticIndexFileDescriptor, SemanticIndexFile>();
+	private final Multimap<URI, SemanticIndexFileDescriptor> fileDescriptorsPerURI = 
+			ArrayListMultimap.create();
 	
 	private static final IStrategoConstructor FILE_ENTRIES_CON =
 			new TermFactory().makeConstructor("FileEntries", 2);
@@ -86,7 +89,7 @@
 			childs.put(entry.getURI().getParent(), entry);
 
 		// Add entry to files.
-		entriesPerFile.put(entry.getFileDescriptor(), entry);
+		entriesPerFileDescriptor.put(entry.getFileDescriptor(), entry);
 	}
 	
 	public void addAll(IStrategoList entries, SemanticIndexFileDescriptor fileDescriptor) {
@@ -169,7 +172,9 @@
 			// Remove entry from files.
 			SemanticIndexFileDescriptor fileDescriptor = entry.getFileDescriptor();
 			if (fileDescriptor != null)
-				entriesPerFile.remove(fileDescriptor, entry);
+			{
+				entriesPerFileDescriptor.remove(fileDescriptor, entry);
+			}
 		}
 	}
 	
@@ -182,7 +187,7 @@
 	}
 	
 	public Collection<SemanticIndexEntry> getEntriesInFile(SemanticIndexFileDescriptor fileDescriptor) {
-		return getCollection(entriesPerFile.get(fileDescriptor));
+		return getCollection(entriesPerFileDescriptor.get(fileDescriptor));
 	}
 	
 	public Collection<SemanticIndexEntry> getAllEntries() {
@@ -194,6 +199,8 @@
 		if(file == null) {
 			file = new SemanticIndexFile(fileDescriptor, null);
 			files.put(fileDescriptor, file);
+			if(fileDescriptor.getSubfile() != null)
+				fileDescriptorsPerURI.put(fileDescriptor.getURI(), fileDescriptor);
 		}
 		return file;
 	}
@@ -207,7 +214,17 @@
 	}
 	
 	public void removeFile(SemanticIndexFileDescriptor fileDescriptor) {
-		clearFile(fileDescriptor);
+		if(fileDescriptor.getSubfile() == null && fileDescriptorsPerURI.containsKey(fileDescriptor.getURI()))
+		{
+			// Make an array copy because clearFile removes from fileDescriptorsPerURI.
+			SemanticIndexFileDescriptor[] childDescriptors = 
+					fileDescriptorsPerURI.get(fileDescriptor.getURI()).toArray(new SemanticIndexFileDescriptor[0]);
+			
+			for(SemanticIndexFileDescriptor fd : childDescriptors)
+				clearFile(fd);
+		}
+		else 
+			clearFile(fileDescriptor);
 	}
 	
 	private void clearFile(SemanticIndexFileDescriptor fileDescriptor) {
@@ -220,6 +237,8 @@
 		remove(Arrays.asList(copy));
 
 		assert getEntriesInFile(fileDescriptor).isEmpty();
+		
+		fileDescriptorsPerURI.remove(fileDescriptor.getURI(), fileDescriptor);
 	}
 	
 	public Collection<SemanticIndexFile> getAllFiles() {
@@ -233,14 +252,15 @@
 	public void clear() {
 		entries.clear();
 		childs.clear();
+		entriesPerFileDescriptor.clear();
 		files.clear();
-		entriesPerFile.clear();
+		fileDescriptorsPerURI.clear();
 	}
 	
 	public IStrategoTerm toTerm(boolean includePositions) {
 		IStrategoList results = termFactory.makeList();
 		for(SemanticIndexFileDescriptor fileDescriptor : files.keySet()) {
-			IStrategoList fileResults = SemanticIndexEntry.toTerms(termFactory, entriesPerFile.get(fileDescriptor));
+			IStrategoList fileResults = SemanticIndexEntry.toTerms(termFactory, entriesPerFileDescriptor.get(fileDescriptor));
 			// TODO: include time stamp for file
 			IStrategoTerm result = termFactory.makeAppl(FILE_ENTRIES_CON, fileDescriptor.toTerm(termFactory), fileResults);
 			results = termFactory.makeListCons(result, results);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/SemanticIndexFileDescriptor.java	Fri Apr 27 14:10:54 2012	(r24760)
@@ -55,18 +55,18 @@
 	 */
 	public static SemanticIndexFileDescriptor fromTerm(IOAgent agent, IStrategoTerm term) {
 		String name;
-		String descriptor;
+		String subfile;
 		if (isTermTuple(term)) {
 			name = asJavaString(term.getSubterm(0));
-			descriptor = asJavaString(term.getSubterm(1));
+			subfile = asJavaString(term.getSubterm(1));
 		} else {
 			name = asJavaString(term);
-			descriptor = null;
+			subfile = null;
 		}
 		File file = new File(name);
 		if (!file.isAbsolute() && agent != null)
 			file = new File(agent.getWorkingDir(), name);
-		return new SemanticIndexFileDescriptor(file.toURI(), descriptor);
+		return new SemanticIndexFileDescriptor(file.toURI(), subfile);
 	}
 	
 	@Override

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/java/org/spoofax/interpreter/library/language/TransactionSemanticIndex.java	Fri Apr 27 14:10:54 2012	(r24760)
@@ -117,7 +117,7 @@
 		try {
 			return index.getFile(fileDescriptor);
 		} finally {
-			getReadLock().unlock();
+			getWriteLock().unlock();
 		}
 	}
 	
@@ -130,10 +130,16 @@
 	}
 	
 	public void removeFile(SemanticIndexFileDescriptor fileDescriptor) {
-		assert fileDescriptor.equals(currentFile);
+		assert fileDescriptor.equals(currentFile) || fileDescriptor.getURI().equals(currentFile.getURI());
 		
-		clearedCurrentFile = true;
-		transactionIndex.removeFile(fileDescriptor);
+		// TODO: Is a write lock required when fileDescriptor equals currentFile (including the subfile!)
+		getWriteLock().lock();
+		try {
+			clearedCurrentFile = true;
+			transactionIndex.removeFile(fileDescriptor);
+		} finally {
+			getWriteLock().unlock();
+		}
 	}
 
 	public Collection<SemanticIndexFile> getAllFiles() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/analysis-library.str	Fri Apr 27 14:10:54 2012	(r24760)
@@ -71,19 +71,13 @@
   
   /**
    * Analyses given AST and annotates definition and use sites found in the AST with URIs.
-   * Defaults to Editor() phase and tries to automatically determine language name.
+   * Defaults to Editor() phase.
    *
-   * @see analyze-top(|phase, language)
-   */
-  analyze-top = analyze-top(|Editor())
-  
-  /**
-   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
-   * Tries to automatically determine language name.
+   * @param language  The name of the language that is being analysed.
    *
    * @see analyze-top(|phase, language)
    */
-  analyze-top(|phase) = ?(ast, _, _); analyze-top(|phase, <index-origin-language> ast)
+  analyze-top(|language) = analyze-top(|Editor(), language)
    
   /**
    * Analyses given AST and annotates definition and use sites found in the AST with URIs.
@@ -99,26 +93,40 @@
     (ast, path, project-path) -> (ast', filesToAnalyze)
     with
       Results(ast', _, _, _, _, _, filesToAnalyze) := <analyze-top-internal(|phase, language)> (ast, path, project-path)
+      
+  analyze-top-multiple(|path, project-path, phase, language):
+    asts -> (ast', filesToAnalyze)
+    with
+      full-path := $[[project-path]/[path]];
+      results := <map(analyze-top-subfile(|path, project-path, full-path, phase, language))> asts;
+      (ast', filesToAnalyzes) := <unzip> results;
+      filesToAnalyze := <concat> filesToAnalyzes
+  
+  analyze-top-subfile(|path, project-path, full-path, phase, language):
+    (ast, subfile) -> (ast', filesToAnalyze)
+    with
+      Results(ast', _, _, _, _, _, filesToAnalyze) := 
+        <analyze-top-internal(|phase, language, project-path, full-path, <uri-to-string> subfile)> ast
   
   /**
    * Analyses given AST and annotates definition and use sites found in the AST with URIs.
    *
    * @internal
    */
-  analyze-top-internal = 
+  analyze-top-internal(|language) = 
     analyze-top-internal(|Editor())
-  analyze-top-internal(|phase) = 
-    ?(ast, path, project-path); analyze-top-internal(|phase, <index-origin-language> ast)
   analyze-top-internal(|phase, language) = 
-    ?(_, path, project-path); analyze-top-internal(|phase, language, $[[project-path]/[path]])
-  analyze-top-internal(|phase, language, full-path):
-    (ast, path, project-path) -> Results(ast5, defs, uses, data', added, removed, filesToAnalyze)
+    ?(ast, path, project-path); analyze-top-internal(|phase, language, project-path, $[[project-path]/[path]]); !ast
+  analyze-top-internal(|phase, language, project-path, full-path) = 
+    analyze-top-internal(|phase, language, project-path, full-path, "")
+  analyze-top-internal(|phase, language, project-path, full-path, subfile):
+    ast -> Results(ast5, defs, uses, data', added, removed, filesToAnalyze)
     with
       // Init
-      index-setup(|language, [project-path], full-path);
+      file := (full-path, subfile);
+      index-setup(|language, [project-path], file);
       revision := <index-start-transaction>
     with
-      file := (full-path, ""); // TODO: Get subfile or add subfile param.
       oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file;
       <index-clear-file> file
     with
@@ -148,7 +156,7 @@
         ast5 := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4;
        
         // Store reads into the index (if current language is not testing language)
-        if not(<is-test-input(|language)> (ast, path)) then
+        if not(<is-test-input(|language)> (ast, full-path)) then
           <index-add-all(|file)> <iset-elements> readSet
         end
       |}
@@ -157,7 +165,7 @@
     with
       // Schedule re-analysis of dependent files (if current file is not testing language file)
       // HACK: Depends on file extension, could be other languages with .spt extension?
-      if Editor() := phase; not(<is-test-file> path) then
+      if Editor() := phase; not(<is-test-file> full-path) then
         newElems := <conc> (defs, <filter(index-diff-constructors)> data');
         
 	      // Find added and removed definitions
@@ -354,10 +362,6 @@
     with
       added   := <diff(index-diff-compare)> (defs2, defs1);
       removed := <diff(index-diff-compare)> (defs1, defs2)
-  
-  /** @internal */  
-  analyze-changed-filter-file(|file) = 
-    ?files@(<id>, _); (is-test-file <+ index-is-fake-file <+ ?file); !files
     
   /** @internal */
   analyze-store-diff(|changedEntries, file, ast, revision): 
@@ -367,7 +371,7 @@
       dependentFiles  := <index-get-dependent-files> changedEntries;
       
       // Files to analyze
-      analyzeFiles := <make-set> <remove-all(analyze-changed-filter-file(|<Fst> file))> dependentFiles;
+      analyzeFiles := <make-set> <remove-all(fake-file)> dependentFiles;
       analyzeFiles' := analyzeFiles;
       // TODO: Is this extra check needed?
       /*if <getfirst(index-get-file-revision; \r -> (r, revision)\; gt)> analyzeFiles then
@@ -852,9 +856,7 @@
        
 /** @internal */
 rules // Internal helpers
-       
-  index-origin-language = (origin-term <+ id); prim("SSL_EXT_origin_language", <id>)
-       
+
   /**
    * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
    * to a tuple (C(a1, a2), [b1, b2, b3]).
@@ -873,6 +875,8 @@
       <is-test-file> path;
       not(!language => "Spoofax-Testing")
       
+  fake-file = is-test-file <+ index-is-fake-file
+      
   index-filepair-to-file = Fst; string-replace(|$[[<project-path>]/], "")
        
   index-is-name-substring(|name):

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/compilation-library.str	Fri Apr 27 14:10:54 2012	(r24760)
@@ -48,23 +48,24 @@
 
   /** @internal */
   index-compilation-file(|language, project-path):
-    (file, subfile) -> None()
+    (path, subfile) -> None()
     with
       // Parse and analyze ast.
-      ast                              := <parse-file> file;
+      full-path                        := $[[project-path]/[path]];
+      ast                              := <parse-file> path;
       ast'                             := <try(index-desugar-ast)> ast;
-      Results(ast'', _, _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast', file, project-path)
+      Results(ast'', _, _, _, _, _, _) := <analyze-top-internal(|Compile(), language, project-path, full-path, subfile)> ast'
     with
       {| Index-ReadSet:
         readSet := <new-iset>;
         rules(Index-ReadSet: _ -> readSet);
         
         // Compile file
-        <index-compile-ast(|file, subfile, project-path)> ast';
+        <index-compile-ast(|path, subfile, project-path)> ast';
         
         // Store compile-time reads.
         reads := <iset-elements> readSet;
-        <index-add-all(|<index-compilation-file-tuple> (file, subfile))> reads
+        <index-add-all(|<index-compilation-file-tuple> (path, subfile))> reads
       |}
 
   /** @internal */

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str	Fri Apr 27 10:03:51 2012	(r24759)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/main/stratego/lib/index-library.str	Fri Apr 27 14:10:54 2012	(r24760)
@@ -431,6 +431,8 @@
     where
       key := <collect-one(?_{_})> x
       
+  uri-to-string = take-until(?Anon(_)); reverse; separate-by(|"."); concat-strings
+      
 /** @internal */
 rules // URI and value projections
 	


From oskarvanrest at gmail.com  Mon Apr 30 02:49:49 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 30 Apr 2012 00:49:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24761 -
	experimental/graphical-editor/EntityLang/EntityLang
Message-ID: <20120430004949.3FC997F807E@mx1.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr 30 00:49:48 2012
New Revision: 24761
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24761&sc=1

Log:
Project that creates EMF model instances for EntityLang programs on-save.

Added:
   experimental/graphical-editor/EntityLang/EntityLang/

From oskarvanrest at gmail.com  Mon Apr 30 03:08:13 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 30 Apr 2012 01:08:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24762 - in
	experimental/graphical-editor/EntityLang/EntityLang: .
	.externalToolBuilders .settings META-INF editor editor/java
	editor/java/EntityLang editor/java/EntityLang...
Message-ID: <20120430010813.A43AA108C00A@mx3.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr 30 01:08:12 2012
New Revision: 24762
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24762&sc=1

Log:
Project that creates EMF model instances for EntityLang programs on-save.

Added:
   experimental/graphical-editor/EntityLang/EntityLang/.classpath
   experimental/graphical-editor/EntityLang/EntityLang/.externalToolBuilders/
   experimental/graphical-editor/EntityLang/EntityLang/.externalToolBuilders/EntityLang build.main.xml.launch
   experimental/graphical-editor/EntityLang/EntityLang/.project
   experimental/graphical-editor/EntityLang/EntityLang/.settings/
   experimental/graphical-editor/EntityLang/EntityLang/.settings/org.eclipse.jdt.core.prefs
   experimental/graphical-editor/EntityLang/EntityLang/META-INF/
   experimental/graphical-editor/EntityLang/EntityLang/META-INF/MANIFEST.MF
   experimental/graphical-editor/EntityLang/EntityLang/build.generated.xml
   experimental/graphical-editor/EntityLang/EntityLang/build.main.xml
   experimental/graphical-editor/EntityLang/EntityLang/build.properties
   experimental/graphical-editor/EntityLang/EntityLang/editor/
   experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Builders.esv
   experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Colorer.esv
   experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Completions.esv
   experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Folding.esv
   experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Outliner.esv
   experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-References.esv
   experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Syntax.esv
   experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang.main.esv
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/Activator.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/EntityLangParseController.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/EntityLangParseControllerGenerated.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/EntityLangValidator.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/InteropRegisterer.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/Main.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/create_instance_0_1.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/initialize_emf_package_0_0.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/java_strategy_0_0.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/serialise_0_1.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/set_attribute_0_2.java
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/set_reference_0_2.java
   experimental/graphical-editor/EntityLang/EntityLang/lib/
   experimental/graphical-editor/EntityLang/EntityLang/lib/EntityLangEMF.jar   (contents, props changed)
   experimental/graphical-editor/EntityLang/EntityLang/lib/org.eclipse.emf.common_2.7.0.v20110912-0920.jar   (contents, props changed)
   experimental/graphical-editor/EntityLang/EntityLang/lib/org.eclipse.emf.ecore.xmi-2.5.0.v20100521-1846.jar   (contents, props changed)
   experimental/graphical-editor/EntityLang/EntityLang/lib/org.eclipse.emf.ecore_2.7.0.v20110912-0920.jar   (contents, props changed)
   experimental/graphical-editor/EntityLang/EntityLang/lib/org.spoofax.text2model.jar   (contents, props changed)
   experimental/graphical-editor/EntityLang/EntityLang/plugin.xml
   experimental/graphical-editor/EntityLang/EntityLang/syntax/
   experimental/graphical-editor/EntityLang/EntityLang/syntax/Common.sdf
   experimental/graphical-editor/EntityLang/EntityLang/syntax/EntityLang.generated.pp
   experimental/graphical-editor/EntityLang/EntityLang/syntax/EntityLang.pp
   experimental/graphical-editor/EntityLang/EntityLang/syntax/EntityLang.sdf
   experimental/graphical-editor/EntityLang/EntityLang/test/
   experimental/graphical-editor/EntityLang/EntityLang/test/example.ent
   experimental/graphical-editor/EntityLang/EntityLang/test/test-example.spt
   experimental/graphical-editor/EntityLang/EntityLang/trans/
   experimental/graphical-editor/EntityLang/EntityLang/trans/analysis-manual.str
   experimental/graphical-editor/EntityLang/EntityLang/trans/check.str
   experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str
   experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str
   experimental/graphical-editor/EntityLang/EntityLang/trans/generate.str
   experimental/graphical-editor/EntityLang/EntityLang/trans/refactor.str
   experimental/graphical-editor/EntityLang/EntityLang/utils/
   experimental/graphical-editor/EntityLang/EntityLang/utils/aster.jar   (contents, props changed)
   experimental/graphical-editor/EntityLang/EntityLang/utils/make_permissive.jar   (contents, props changed)
   experimental/graphical-editor/EntityLang/EntityLang/utils/sdf2imp.jar   (contents, props changed)
   experimental/graphical-editor/EntityLang/EntityLang/utils/strategoxt.jar   (contents, props changed)

Added: experimental/graphical-editor/EntityLang/EntityLang/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/.classpath	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry excluding="trans/**" kind="src" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="lib" path="include/EntityLangEMF.jar"/>
+	<classpathentry kind="lib" path="include/org.eclipse.emf.ecore_2.7.0.v20110912-0920.jar"/>
+	<classpathentry kind="lib" path="include/org.spoofax.text2model.jar"/>
+	<classpathentry kind="lib" path="include/org.eclipse.emf.common_2.7.0.v20110912-0920.jar"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: experimental/graphical-editor/EntityLang/EntityLang/.externalToolBuilders/EntityLang build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/.externalToolBuilders/EntityLang build.main.xml.launch	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/EntityLang/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/EntityLang}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: experimental/graphical-editor/EntityLang/EntityLang/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/.project	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>EntityLang</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/EntityLang build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/.settings/org.eclipse.jdt.core.prefs	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: experimental/graphical-editor/EntityLang/EntityLang/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/META-INF/MANIFEST.MF	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: EntityLang Plug-in
+Bundle-SymbolicName: EntityLang; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: EntityLang.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+ org.eclipse.core.resources,
+ org.eclipse.imp.runtime,
+ org.eclipse.ui,
+ lpg.runtime,
+ org.eclipse.jface.text,
+ org.eclipse.ui.editors,
+ org.eclipse.ui.workbench.texteditor,
+ org.strategoxt.imp.runtime,
+ org.spoofax.jsglr,
+ org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: EntityLang

Added: experimental/graphical-editor/EntityLang/EntityLang/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/build.generated.xml	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,640 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${src-gen}/EntityLang/strategies/Main.java" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la EntityLang.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- value determines which target will be executed.
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="Selective clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete file="${include}/${strmodule}.rtree"/>
+            <delete file="${include}/${strmodule}.ctree"/>
+            <delete file="${include}/${strmodule}.jar"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/build.main.xml	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="EntityLang" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="EntityLang"/>
+        <property name="metasdfmodule" value="Stratego-EntityLang"/>
+        <property name="esvmodule" value="EntityLang"/>
+        <property name="strmodule" value="entitylang"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree, java.jar"/>
+    </project>
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/build.properties	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,9 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .
+bin.excludes = trans/

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Builders.esv	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,39 @@
+module EntityLang-Builders
+
+imports EntityLang-Builders.generated
+
+builders
+                                                                                   
+  // This file can be used for custom analysis, builder and refactoring rules.     
+  //                                                                               
+  // See the imported file for a brief introduction and examples.                  
+
+builders
+                                                                                                                          
+  provider : include/entitylang.ctree                                                                                     
+  provider : include/entitylang-java.jar                                                         
+  provider : lib/EntityLangEMF.jar                                                                                   
+  provider : lib/org.eclipse.emf.ecore_2.7.0.v20110912-0920.jar                                                                               
+  provider : lib/org.eclipse.emf.common_2.7.0.v20110912-0920.jar
+  provider : lib/org.eclipse.emf.ecore.xmi-2.5.0.v20100521-1846.jar                                                         
+  provider : lib/org.spoofax.text2model.jar                                                                               
+                                                                                                                          
+  observer : editor-analyze                                                                                               
+                                                                                                                          
+  builder  : "Generate Java code (for selection)"            = generate-java (openeditor) (realtime)                      
+  builder  : "Show abstract syntax (for selection)"          = generate-aterm (openeditor) (realtime) (meta) (source)     
+  builder  : "Show analyzed abstract syntax (for selection)" = generate-analyzed (openeditor) (realtime) (meta) (source)  
+  builder  : "Generate EMF model"							 = generate-emf (openeditor) (realtime)
+                                                                                                                          
+
+refactorings
+
+  pretty-print : pp-entitylang-string
+
+  refactoring ID : "Rename Entity" = rename-entity (source) (cursor)
+    shortcut : "org.eclipse.jdt.ui.edit.text.java.rename.element"
+    input
+      identifier : "new name" = ""
+
+ 
+  on save : generate-emf
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Colorer.esv	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,9 @@
+module EntityLang-Colorer
+
+imports EntityLang-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Completions.esv	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,31 @@
+module EntityLang-Completions
+
+imports EntityLang-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                             
+  // Syntax completion:                      
+                                             
+  completion template Start :
+    "module " <m> (blank)  
+                                             
+  completion template Definition :
+    "entity " <e> " {" (cursor) "}" (blank)  
+                                             
+  completion template Property : "property : Type" =
+    <x> " : " <T> (blank)  
+                                             
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  completion proposer                  : editor-complete
+                                         
+  completion trigger                   : ":"
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Folding.esv	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,9 @@
+module EntityLang-Folding
+
+imports EntityLang-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Outliner.esv	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,9 @@
+module EntityLang-Outliner
+
+imports EntityLang-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-References.esv	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,15 @@
+module EntityLang-References
+
+imports EntityLang-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Syntax.esv	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,9 @@
+module EntityLang-Syntax
+
+imports EntityLang-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang.main.esv	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,16 @@
+module EntityLang.main
+
+imports EntityLang-Builders EntityLang-Colorer EntityLang-Completions EntityLang-Folding EntityLang-Outliner EntityLang-References EntityLang-Syntax
+
+language General properties
+                  
+  name          : EntityLang
+  id            : EntityLang
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the EntityLang language"
+  url           : http://strategoxt.org
+                  
+  extensions    : ent
+  table         : include/EntityLang.tbl
+  start symbols : Start
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/Activator.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,44 @@
+package EntityLang;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "EntityLang";
+
+  public static final String kLanguageName = "EntityLang";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/EntityLangParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/EntityLangParseController.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,4 @@
+package EntityLang;
+
+public class EntityLangParseController extends EntityLangParseControllerGenerated 
+{ }
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/EntityLangParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/EntityLangParseControllerGenerated.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,108 @@
+package EntityLang;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class EntityLangParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("EntityLang");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    EntityLangParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = EntityLangParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = EntityLangParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(EntityLangParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return EntityLangParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/EntityLangValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/EntityLangValidator.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,12 @@
+package EntityLang;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class EntityLangValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return EntityLangParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/InteropRegisterer.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,21 @@
+package EntityLang.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+  public InteropRegisterer() {
+    super(new Strategy[] { 
+    		java_strategy_0_0.instance,
+    		initialize_emf_package_0_0.instance,
+    		create_instance_0_1.instance,
+    		set_attribute_0_2.instance,
+    		set_reference_0_2.instance,
+    		serialise_0_1.instance    
+    });
+  }
+}

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/Main.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,11 @@
+package EntityLang.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/create_instance_0_1.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/create_instance_0_1.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,18 @@
+package EntityLang.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.text2model.bridges.API.java.EcoreAPI;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class create_instance_0_1 extends Strategy {
+
+	public static create_instance_0_1 instance = new create_instance_0_1();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm className, IStrategoTerm packName) {
+		return EcoreAPI.createInstance(context.getFactory(), (IStrategoString) packName, (IStrategoString) className);
+	}
+
+}

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/initialize_emf_package_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/initialize_emf_package_0_0.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,21 @@
+package EntityLang.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+import EntityLangModel.EntityLangModelPackage;
+
+//FIXME this needs to be done somewhere else
+public class initialize_emf_package_0_0 extends Strategy {
+
+	public static initialize_emf_package_0_0 instance = new initialize_emf_package_0_0();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		@SuppressWarnings("unused")
+		EntityLangModelPackage initialize = EntityLangModelPackage.eINSTANCE; 
+		return context.getFactory().makeInt(1);
+	}
+
+}

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/java_strategy_0_0.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,32 @@
+package EntityLang.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class java_strategy_0_0 extends Strategy {
+  
+  public static java_strategy_0_0 instance = new java_strategy_0_0();
+
+  @Override
+  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+    context.getIOAgent().printError("Input for java-strategy: " + current);
+    ITermFactory factory = context.getFactory();
+    return factory.makeString("Regards from java-strategy");
+  }
+
+}

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/serialise_0_1.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/serialise_0_1.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,18 @@
+package EntityLang.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.text2model.bridges.API.java.EcoreAPI;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class serialise_0_1 extends Strategy {
+
+	public static serialise_0_1 instance = new serialise_0_1();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm element, IStrategoTerm resourceURI) {
+		return EcoreAPI.serialise(context.getFactory(), (IStrategoString) element, (IStrategoString) resourceURI);
+	}
+
+}

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/set_attribute_0_2.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/set_attribute_0_2.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,19 @@
+package EntityLang.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.text2model.bridges.API.java.EcoreAPI;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class set_attribute_0_2 extends Strategy {
+
+	public static set_attribute_0_2 instance = new set_attribute_0_2();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm value, IStrategoTerm element, IStrategoTerm featureName) {
+		return EcoreAPI.setAttribute((IStrategoString) element, (IStrategoString) featureName, value);
+	    
+	}
+
+}

Added: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/set_reference_0_2.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/set_reference_0_2.java	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,18 @@
+package EntityLang.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.text2model.bridges.API.java.EcoreAPI;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class set_reference_0_2 extends Strategy {
+
+	public static set_reference_0_2 instance = new set_reference_0_2();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm reference, IStrategoTerm element, IStrategoTerm featureName) {
+		return EcoreAPI.setReference((IStrategoString) element, (IStrategoString) featureName, reference);
+	}
+
+}

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/EntityLangEMF.jar
==============================================================================
Binary file. No diff available.

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/org.eclipse.emf.common_2.7.0.v20110912-0920.jar
==============================================================================
Binary file. No diff available.

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/org.eclipse.emf.ecore.xmi-2.5.0.v20100521-1846.jar
==============================================================================
Binary file. No diff available.

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/org.eclipse.emf.ecore_2.7.0.v20110912-0920.jar
==============================================================================
Binary file. No diff available.

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/org.spoofax.text2model.jar
==============================================================================
Binary file. No diff available.

Added: experimental/graphical-editor/EntityLang/EntityLang/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/plugin.xml	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="ent" description="EntityLang" language="EntityLang" derivedFrom="DynamicRoot" validator="EntityLang.EntityLangValidator" validatorClass="EntityLang.EntityLangValidator"></language>
+       </extension>
+       <extension id="EntityLang.parser" name="EntityLang Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="EntityLang.EntityLangParseController" language="EntityLang">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/syntax/Common.sdf	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: experimental/graphical-editor/EntityLang/EntityLang/syntax/EntityLang.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/syntax/EntityLang.generated.pp	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,8 @@
+[
+   Module             -- KW["module"] _1 _2,
+   Module.2:iter-star -- _1,
+   Entity             -- KW["entity"] _1 KW["{"] _2 KW["}"],
+   Entity.2:iter-star -- _1,
+   Property           -- _1 KW[":"] _2,
+   Type               -- _1
+]
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/syntax/EntityLang.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/syntax/EntityLang.pp	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also EntityLang.generated.pp)
+[]

Added: experimental/graphical-editor/EntityLang/EntityLang/syntax/EntityLang.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/syntax/EntityLang.sdf	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,18 @@
+%% Grammar for the EntityLang language
+%% By default, based on an example "entities" syntax
+module EntityLang
+
+imports Common
+
+exports
+
+  context-free start-symbols
+  
+    Start
+
+  context-free syntax
+  
+    "module" Module@=ID Definition*       -> Start {"Module", scope(Type)}
+    "entity" Type@=ID "{" Property* "}"   -> Definition {"Entity", scope(Property)}
+    Property@=ID ":" Type                 -> Property {"Property"}
+    Type at ID                               -> Type {"Type"}

Added: experimental/graphical-editor/EntityLang/EntityLang/test/example.ent
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/test/example.ent	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,19 @@
+/**
+* Example EntityLang program.
+*/  
+module example 
+
+entity User {
+  //name     : String 
+  //password : String
+  homepage : URL
+}
+
+entity BlogPosting {
+  poster : User
+ // body   : String
+}
+
+entity URL {
+  //location : String
+}

Added: experimental/graphical-editor/EntityLang/EntityLang/test/test-example.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/test/test-example.spt	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,56 @@
+/**
+* Unit tests for the EntityLang language.
+*/
+module test-example
+
+language EntityLang
+
+setup Common [[
+  module test
+]]
+
+test Simple entity [[
+  entity User {
+    name  : String
+    other : User
+  }
+]] 0 errors
+
+test Resolve type fails [[
+  entity User {
+    name  : Strin
+    other : Use
+  }
+]] 2 errors
+
+test Duplicate entity fails [[
+  entity User {}
+  entity User {}
+]] 2 errors
+
+test Duplicate property fails [[
+  entity User {
+  	name : String
+  	name : String
+  }
+]] 2 errors
+
+test Resolve type [[
+  entity [[User]] {}
+  
+  entity Owner {
+    owns : [[User]]
+  }
+]] resolve #2 to #1
+
+test Complete primitive type [[
+  entity User {
+    name : [[Str]]
+  }
+]] complete to "String"
+
+test Complete user type [[
+  entity User {
+    owner : [[Us]]
+  }
+]] complete to "User"

Added: experimental/graphical-editor/EntityLang/EntityLang/trans/analysis-manual.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/analysis-manual.str	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,13 @@
+module analysis-manual
+
+imports
+  include/EntityLang
+  lib/analysis-auto.generated
+  lib/index-library.generated
+  lib/analysis-library.generated
+
+rules // Adjust lookup
+
+  // Add primitive types to type lookup.
+  adjust-index-lookup(target |namespace, path, prefix): 
+    Type(<target>) ->  [Def([Type(), "Int"]), Def([Type(), "String"]), [Type() | path]]

Added: experimental/graphical-editor/EntityLang/EntityLang/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/check.str	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,38 @@
+module check
+
+imports
+  libstratego-lib
+  include/EntityLang
+  lib/editor-common.generated
+  lib/analysis-auto.generated
+  lib/index-library.generated
+  lib/analysis-library.generated
+
+rules // Resolving
+  
+  constraint-error:
+    x{[Unresolved(t) | _]} -> (x, $[Unable to resolve.])
+    
+rules // Duplicates
+    
+  is-unique-namespace = ?Type()
+  is-unique-namespace = ?Property()
+      
+  constraint-error:
+    definition -> (definition, $[Duplicate definition])
+    where
+      key{[ns|_]} := <nam-get-definition-key> definition;
+      <is-unique-namespace> ns;
+      definitions := <index-lookup-all> key;
+      <gt> (<length> definitions, 1)
+    
+rules // Other
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])

Added: experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,102 @@
+module emf
+
+imports
+ include/EntityLang
+ lib/index-library.generated
+
+strategies
+	
+	to-emf(|path) = topdown(try(create-object(|path))); topdown(try(set-structural-features))
+	//commit(|path) = lookup-identifier; serialise(|path) FIXME
+
+rules
+	
+	create-object(|path):
+		e at Module(name, entities) -> e
+		with
+			identifier := <create-instance(|<packName>)> "Module";
+			<map-identifier(|path)> (name, identifier)
+	 	
+	create-object(|path):
+		e at Entity(name, properties) -> e
+		with
+			identifier := <create-instance(|<packName>)> "Entity";
+			<map-identifier(|path)> (name, identifier)
+			
+	create-object(|path):
+		e at Property(name, Type(typeRef)) -> e
+		with
+			identifier := <create-instance(|<packName>)> "Property";
+			<map-identifier(|path)> (name, identifier)
+			
+rules
+
+	set-structural-features:
+		e at Module(name, entities) -> e
+		with
+			identifier := <lookup-identifier> e;
+			<set-attribute(|identifier, "identifier")> name;
+			entities' := <map(lookup-identifier)> entities;
+			<set-reference(|identifier, "definitions")> entities'
+	 	
+	set-structural-features:
+		e at Entity(name, properties) -> e
+		with
+			identifier := <lookup-identifier> e;
+			<set-attribute(|identifier, "identifier")> name;			
+			properties' := <map(lookup-identifier)> properties;
+			<set-reference(|identifier, "properties")> properties'
+			
+	set-structural-features:
+		e at Property(name, Type(typeRef)) -> e
+		with
+			identifier := <lookup-identifier> e;
+			<set-attribute(|identifier, "identifier")> name;
+			typeRef_identifier := <lookup-identifier> typeRef;
+			<set-reference(|identifier, "type")> typeRef_identifier	
+
+rules
+	
+	map-identifier(|path):
+		(namespaceDef, identifier) -> identifier
+		with
+			[URI] := <get-annos> namespaceDef;
+			<index-add-all(|path)> [DefData(URI, EMFObject(), identifier)]
+
+	lookup-identifier:
+		Module(name, entities) -> identifier
+		with
+			identifier := <lookup-identifier> name
+
+	lookup-identifier:
+		Entity(name, properties) -> identifier
+		with
+			identifier := <lookup-identifier> name
+			
+	lookup-identifier:
+		Property(name, Type(typeRef)) -> identifier
+		with
+			identifier := <lookup-identifier> name
+
+	lookup-identifier:
+		namespaceDef -> identifier
+		where
+			[URI] := <get-annos> namespaceDef;
+			identifier := <indexlib-get-value> DefData(URI, EMFObject(), ())
+			
+rules
+	
+	external initialize-emf-package(|) //TODO
+	external create-instance(|packName)
+	external set-attribute(|element, featureName)
+	external set-reference(|element, featureName)
+	external serialise(|resourceURI)
+	
+rules
+	
+	packName = <conc-strings> (<get-config> "program", "Model")
+	
+signature constructors
+
+	EMFObject			: Namespace
+	
\ No newline at end of file

Added: experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,94 @@
+module entitylang
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/EntityLang
+  lib/editor-common.generated
+  lib/analysis-auto.generated
+  lib/index-library.generated
+  lib/analysis-library.generated
+  lib/compilation-library.generated
+  analysis-manual
+  check
+  generate
+  refactor
+  emf
+
+rules // Main editor interface (defined by editor/EntityLang-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast', errors, warnings, notes)
+    with
+      editor-init;
+      ast'     := <analyze-top>;
+      errors   := <collect-all(constraint-error, conc)> ast';
+      warnings := <collect-all(constraint-warning, conc)> ast';
+      notes    := <collect-all(constraint-note, conc)> ast'
+
+  generate-emf:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      language  := <index-origin-language> ast;
+      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      filename := <guarantee-extension(|"txt")> path;
+      <initialize-emf-package> <packName>;
+      result   := <to-emf(|path)> ast
+      //<commit(|"test.txt")> result
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+      
+  // Prints the analyzed abstract syntax ATerm of a selection.
+  generate-analyzed:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      filename := <guarantee-extension(|"analyzed.aterm")> path;
+      result   := <analyze-top> (selected, path, project-path)
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      language  := <index-origin-language> ast;
+      index-setup(|language, [project-path], $[[project-path]/[path]]);
+      target    := <index-lookup> node
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) -> proposals'
+    where
+      editor-init;
+      ast'              := <analyze-top> (ast, path, project-path);
+      x                 := <collect-one(?COMPLETION(_))> ast';
+      COMPLETION(name)  := x;
+      (
+        proposals       := <index-lookup-all-levels(|name)> x
+      <+ 
+        proposals       := []
+      );
+      proposals'        := <map(def-to-name)> proposals
+
+  def-to-name:
+    Def([namespace, name | _]) -> name

Added: experimental/graphical-editor/EntityLang/EntityLang/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/generate.str	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,62 @@
+module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/EntityLang
+  lib/editor-common.generated
+  lib/compilation-library.generated
+
+rules // Incremental code generation of project using compilation library.
+      
+  index-compile-ast(|file, subfile, project-path):
+    ast -> None()
+    with
+      java := <to-java> ast;
+      full-path := <dirname> file;
+      filename := <guarantee-extension(|"java")> <base-filename> file;
+      writePath := $[[full-path]/];
+      writeFile :=  $[[writePath][filename]];
+      try(<mkdir> writePath);
+      <fclose> <fputs> (java, <fopen> (writeFile, "w"));
+      <debug> $[Compiling to [writeFile]]
+
+rules // Transformation to java strings.
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: experimental/graphical-editor/EntityLang/EntityLang/trans/refactor.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/refactor.str	Mon Apr 30 01:08:12 2012	(r24762)
@@ -0,0 +1,28 @@
+module refactor
+
+imports
+  lib/refactor-common.generated
+  include/EntityLang
+  lib/editor-common.generated  
+  entitylang
+
+rules
+ 
+  rename-entity:
+    (newname, selected-name, position, ast, path, project-path) -> ([(ast, new-ast)], fatal-errors, errors, warnings)
+    with
+      new-ast  := <topdown(try(rename-type(|selected-name, newname)))> ast; 
+      (errors, warnings) := <semantic-constraint-issues> (ast, new-ast);
+      fatal-errors := []
+
+  rename-type(|old-name, new-name):
+    Entity(old-name, y) -> Entity(new-name, y)
+
+  rename-type(|old-name, new-name):
+    Type(old-name) -> Type(new-name)
+    
+  semantic-constraint-issues:
+    (ast, new-ast) -> (<diff>(new-errors, errors), <diff>(new-warnings, warnings))
+    where
+    	(_, errors, warnings, _) := <editor-analyze> (ast, "", "");
+    	(_, new-errors, new-warnings, _) := <editor-analyze> (new-ast, "", "")

Added: experimental/graphical-editor/EntityLang/EntityLang/utils/aster.jar
==============================================================================
Binary file. No diff available.

Added: experimental/graphical-editor/EntityLang/EntityLang/utils/make_permissive.jar
==============================================================================
Binary file. No diff available.

Added: experimental/graphical-editor/EntityLang/EntityLang/utils/sdf2imp.jar
==============================================================================
Binary file. No diff available.

Added: experimental/graphical-editor/EntityLang/EntityLang/utils/strategoxt.jar
==============================================================================
Binary file. No diff available.

From oskarvanrest at gmail.com  Mon Apr 30 03:12:24 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 30 Apr 2012 01:12:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24763 - in
	experimental/graphical-editor/EntityLang/EntityLang: . utils
Message-ID: <20120430011224.BE637108C007@mx3.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr 30 01:12:24 2012
New Revision: 24763
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24763&sc=1

Log:
fix

Deleted:
   experimental/graphical-editor/EntityLang/EntityLang/utils/
Modified:
   experimental/graphical-editor/EntityLang/EntityLang/.classpath

Modified: experimental/graphical-editor/EntityLang/EntityLang/.classpath
==============================================================================
--- experimental/graphical-editor/EntityLang/EntityLang/.classpath	Mon Apr 30 01:08:12 2012	(r24762)
+++ experimental/graphical-editor/EntityLang/EntityLang/.classpath	Mon Apr 30 01:12:24 2012	(r24763)
@@ -4,9 +4,9 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
-	<classpathentry kind="lib" path="include/EntityLangEMF.jar"/>
-	<classpathentry kind="lib" path="include/org.eclipse.emf.ecore_2.7.0.v20110912-0920.jar"/>
-	<classpathentry kind="lib" path="include/org.spoofax.text2model.jar"/>
-	<classpathentry kind="lib" path="include/org.eclipse.emf.common_2.7.0.v20110912-0920.jar"/>
+	<classpathentry kind="lib" path="lib/EntityLangEMF.jar"/>
+	<classpathentry kind="lib" path="lib/org.eclipse.emf.common_2.7.0.v20110912-0920.jar"/>
+	<classpathentry kind="lib" path="lib/org.eclipse.emf.ecore_2.7.0.v20110912-0920.jar"/>
+	<classpathentry kind="lib" path="lib/org.spoofax.text2model.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

From oskarvanrest at gmail.com  Mon Apr 30 03:21:13 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 30 Apr 2012 01:21:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24764 -
	experimental/graphical-editor/EntityLang/EntityLang/lib
Message-ID: <20120430012113.CA6FD7F801B@mx1.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr 30 01:21:13 2012
New Revision: 24764
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24764&sc=1

Log:
Apparently it won't build without some generated files.

Added:
   experimental/graphical-editor/EntityLang/EntityLang/lib/analysis-auto.generated.str
   experimental/graphical-editor/EntityLang/EntityLang/lib/analysis-library.generated.str
   experimental/graphical-editor/EntityLang/EntityLang/lib/compilation-library.generated.str
   experimental/graphical-editor/EntityLang/EntityLang/lib/editor-common.generated.str
   experimental/graphical-editor/EntityLang/EntityLang/lib/index-library.generated.str
   experimental/graphical-editor/EntityLang/EntityLang/lib/refactor-common.generated.str

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/analysis-auto.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/lib/analysis-auto.generated.str	Mon Apr 30 01:21:13 2012	(r24764)
@@ -0,0 +1,56 @@
+module lib/analysis-auto.generated
+
+signature
+  constructors
+    Module   : Namespace
+    Property : Namespace
+    Type     : Namespace
+
+
+imports
+  include/EntityLang
+
+
+rules
+
+  nam-get-scope-types :
+    Module(_, _) -> [Type()]
+
+  nam-get-scope-types :
+    Entity(_, _) -> [Property()]
+
+  nam-get-definition-key :
+    Module(x, _) -> x
+
+  nam-get-definition :
+    Module(x, _) -> <nam-get-def(|Module())> x
+
+  nam-get-definition-key :
+    Entity(x, _) -> x
+
+  nam-get-definition :
+    Entity(x, _) -> <nam-get-def(|Type())> x
+
+  nam-get-definition-key :
+    Property(x, _) -> x
+
+  nam-get-definition :
+    Property(x, _) -> <nam-get-def(|Property())> x
+
+  nam-annotate-names(|def-path):
+    Module(s_1422, t_1422) -> Module(s_1422{def-path}, t_1422)
+
+  nam-annotate-names(|def-path):
+    Entity(q_1422, r_1422) -> Entity(q_1422{def-path}, r_1422)
+
+  nam-annotate-names(|def-path):
+    Property(o_1422, p_1422) -> Property(o_1422{def-path}, p_1422)
+
+  nam-annotate-names(|def-path):
+    Type(n_1422) -> Type(<nam-annotate-use(|Type())> n_1422)
+
+  nam-get-def(|n) =
+    fail
+
+  nam-annotate-use(|n) =
+    fail

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/analysis-library.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/lib/analysis-library.generated.str	Mon Apr 30 01:21:13 2012	(r24764)
@@ -0,0 +1,874 @@
+module lib/analysis-library.generated
+ 
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  lib/index-library.generated
+ 
+signature constructors
+ 
+  // Analyze constructors
+  AnalysedResult : AST * List(Def) * List(Use) * List(DefData) * List(Def) * List(Def) -> AnalysedResult
+  Editor      : AnalysisPhase
+  Compile     : AnalysisPhase
+ 
+  // Index elements
+  Def          : List(UriPart) -> Summary
+  Use          : List(UriPart) * List(UriPart) -> Summary
+  BadUse       : List(UriPart) -> Summary
+  Read         : List(UriPart) -> Summary
+  ReadWildcard : List(UriPart) * String -> Summary
+  Diff         : List(UriPart) * List(Summary) -> Summary
+    
+  // Namespaces
+  Diff         : Namespace
+  ASTDiff      : Namespace
+  
+  // Adjust lookup actions
+  StopLookup   : LookupAction
+  
+rules // extension points
+ 
+  // Should return list of Def(_) and/or [namespace | path] or StopLookup() to stop the lookup
+  adjust-index-lookup(is-use |namespace, path, prefix) = fail
+ 
+  // adjust-index-select(|namespace, path, use) = fail // (e.g., for imports)
+ 
+  // Should call <store-results> on a (list of) DefData
+  adjust-index-def-data(store-results |namespace, path) = fail
+ 
+  // Should return a path
+  adjust-index-path(is-def |namespace, path) = fail
+ 
+  // adjust-index-path-from-filesystem(|project-path, path)
+  
+  /**
+   * Should define constructors to check for difference during analysis. Defaults to Def constructs.
+   *
+   * Extension example:
+   *   index-diff-constructors = ?Type(_, _)
+   */
+  index-diff-constructors = ?Def(_)
+  
+  /**
+   * Should compare two index elements and fail if they are not equal.
+   *
+   * Extension example:
+     *   index-diff-compare:
+   *     (Type(u1, v1), Type(u2, v2)) -> <id>
+   *     where
+   *       <index-uri-eq> (u1, u2);
+   *       <eq> (v1, v2)
+   */
+  index-diff-compare:
+    (Def(u1), Def(u2)) -> <id>
+    where
+       <index-uri-eq> (u1, u2)
+       
+  post-analyze-top(|phase, language, full-path) = fail
+ 
+rules // analysis traversals
+  
+  /**
+   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
+   * Defaults to Editor() phase and tries to automatically determine language name.
+   *
+   * @see analyze-top(|phase, language)
+   */
+  analyze-top = analyze-top(|Editor())
+  
+  /**
+   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
+   * Tries to automatically determine language name.
+   *
+   * @see analyze-top(|phase, language)
+   */
+  analyze-top(|phase) = ?(ast, _, _); analyze-top(|phase, <index-origin-language> ast)
+   
+  /**
+   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
+   *
+   * @param phase     The type of analysis phase. There are currently 2 phases to choose from:
+   *                  - Editor():   All information is stored into the index and dependent files
+   *                                are automatically scheduled for re-analysis.
+   *                  - Compile():  No information is stored and no re-analysis is done.
+   * @param language  The name of the language that is being analysed.
+   *
+   * @see analyze-top-internal(|phase, language)
+   */
+  analyze-top(|phase, language):
+    (ast, path, project-path) -> ast'
+    with
+      AnalysedResult(ast', _, _, _, _, _) := <analyze-top-internal(|phase, language)> (ast, path, project-path)
+  
+  /**
+   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
+   *
+   * @internal
+   */
+  analyze-top-internal = 
+    analyze-top-internal(|Editor())
+  analyze-top-internal(|phase) = 
+    ?(ast, path, project-path); analyze-top-internal(|phase, <index-origin-language> ast)
+  analyze-top-internal(|phase, language) = 
+    ?(_, path, project-path); analyze-top-internal(|phase, language, $[[project-path]/[path]])
+  analyze-top-internal(|phase, language, full-path):
+    (ast, path, project-path) -> AnalysedResult(ast5, defs, uses, data', added, removed)
+    with
+      // Init
+      index-setup(|language, [project-path], full-path)
+    with
+      file := (full-path, ""); // TODO: Get subfile or add subfile param.
+        // Store copy of elements for diff and clear file
+      oldElems := <filter(index-diff-constructors)> <index-get-all-in-file> file;
+      <index-clear-file> file
+    with
+      {| Index-ReadSet, Index-UnresolvedSet:
+        readSet := <new-iset>;
+        unresolvedSet := <new-iset>;
+        
+        rules(Index-ReadSet: _ -> readSet);
+        rules(Index-UnresolvedSet: _ -> unresolvedSet);
+       
+        // Add Unresolved annotations, record globals
+        (Some(ast2), defs) := <analyze-defs(|Anon(), Anon())> Some(ast); // HACK: force origin tracking with Some()... // TODO: still needed?
+        <index-add-all(|file)> defs;
+
+        // Find DefData
+        ast3 := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
+        data := <origin-track-forced(analyze-tree-data)> ast3;
+        <index-add-all(|file)> data;
+
+        // Resolve an references in DefData (using what we just stored)
+        (data', data-uses) := <analyze-uses> data;
+        <index-remove-all(|file)> data;
+        <index-add-all(|file)> data';
+       
+        // Resolve all unresolved references in the tree
+        (ast4, uses) := <analyze-uses> ast3;
+        <index-add-all(|file)> uses;
+        
+        ast5 := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4;
+       
+        // Store reads into the index (if current language is not testing language)
+        if not(<is-test-input(|language)> (ast, path)) then
+          <index-add-all(|file)> <iset-elements> readSet
+        end
+      |}
+    with
+      // Schedule re-analysis of dependent files (if current file is not testing language file)
+      // HACK: Depends on file extension, could be other languages with .spt extension?
+      if Editor() := phase; not(<is-test-file> path) then
+        newElems := <conc> (defs, <filter(index-diff-constructors)> data');
+        
+          // Find added and removed definitions
+          (added, removed) := <analyze-diff> (oldElems, newElems);
+          changed := <conc> (added, removed);
+
+          // Schedule re-analysis of files that depend on added or removed elements
+          <reanalyze-all(|full-path)> changed;
+          
+          // TODO: Move diff stuff to compilation-library somehow.
+          // Store added and removed elements in the index
+          analyze-store-diff(|changed, file, ast)
+        else
+          (added, removed) := ([], [])
+      end
+    with
+      try(post-analyze-top(|phase, language, full-path))
+
+  analyze-diff:
+    (defs1, defs2) -> (added, removed)
+    with
+      added   := <diff(index-diff-compare)> (defs2, defs1);
+      removed := <diff(index-diff-compare)> (defs1, defs2)
+  
+  reanalyze-all(|file) =
+    index-get-dependent-files; 
+    filter(not(analyze-changed-filter-file(|file)); reanalyze-file)
+    
+  analyze-changed-filter-file(|file) = 
+    ?files@(<id>, _); (is-test-file <+ index-is-fake-file <+ ?file); !files
+    
+  reanalyze-file = 
+    ?(<id>, _); debug(!"Re-analyzing "); prim("SSL_EXT_queue_analysis")
+    
+  analyze-store-diff(|changedEntries, file, ast): 
+    _ -> <id>
+    with
+      // TODO: Optimize so that there are no duplicate files stored in the index, use iset?
+      changedFiles    := <mapconcat(index-get-files-of)> changedEntries;
+      dependentFiles  := <index-get-dependent-files> changedEntries;
+      files := <conc> (changedFiles, dependentFiles);
+      
+      if not(<analyze-astdiff(|ast)> file) then
+        // Add current file if the AST has changed. Cannot use dependency tracking here because
+        // the originating file of a removed definition is not in the index any more.
+        files' := <make-set> [file|files] 
+        else
+            files' := <make-set> files
+        end;
+      
+      if not([] := files') then
+        storePath := <analyze-diff-path>;
+        <map(analyze-add-diff(|storePath))> files'
+      end
+      
+  analyze-add-diff(|storePath):
+    file -> <id>
+    with
+      <index-add-all(|storePath)> [Diff([Diff(), ".internal"], file)]
+      
+  analyze-get-diffs:
+    _ -> diffs
+    with
+        diffs := <make-set> <index-get-all-values> Diff([Diff(), ".internal"], ())
+        
+  // Fails if old ASTDiff is not found or if ASTDiff is different.
+  analyze-astdiff(|ast):
+    (file, subfile) -> <id>
+    where
+      storePath := <analyze-diff-path>;
+        newChecksum := <checksum> ast;
+      if oldChecksum := <index-get-value> Diff([ASTDiff(), file, ".internal"], ()) then
+        <index-remove-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], ())];
+          <index-add-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], newChecksum)];
+        <eq> (oldChecksum, newChecksum)
+        else
+            <index-add-all(|storePath)> [Diff([ASTDiff(), file, ".internal"], newChecksum)];
+            fail
+        end
+      
+  analyze-clean-diff:
+    _ -> <id>
+    with
+        storePath := <analyze-diff-path>; 
+      <index-remove-all(|storePath)> [Diff([Diff(), ".internal"], ())]
+        
+  analyze-diff-path = 
+    !"/.internal/diff"
+ 
+  /**
+   * Identifies all definitions in the tree
+   * and annotates them with their URI.
+   * Also annotates uses with a preliminary "Unresolved(_)" URI.
+   */
+  analyze-defs(|head-scope, head-scope-ns):
+    ast -> (ast', defs')
+    with
+      if def := <nam-get-definition> ast then
+        Def(def-path)                     := def;
+        [head-scope-ns', head-scope' | _] := def-path
+      else
+        def-path       := INTERNAL_ERROR();
+        head-scope-ns' := head-scope-ns;
+        head-scope'    := head-scope
+      end;
+      if scope-types := <nam-get-scope-types> ast then
+        {| IndexPath:
+          <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
+          // <balanced-update-path> head-scope';
+          (ast', defs) := <analyze-defs-recurse(|Anon(), Anon(), def-path)> ast
+        |}
+      else
+        (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
+      end;
+      defs' := <![def | defs] <+ !defs>
+ 
+  analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
+    ast -> (ast'', defs)
+    where
+      analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
+      (ast', defs)  := <unzip-analyzed> analyzed;
+      ast''         := <try(nam-annotate-names(|def-path))> ast'
+ 
+  update-index-path(|head-scope, head-scope-ns, ast):
+    scope-type -> scope-type
+    where
+      if !head-scope-ns => Anon() then
+        path  := <IndexPath <+ ![]> scope-type;
+        path' := <do-adjusted-index-path(|scope-type, path, Anon(<new>))> ast
+      else
+        path  := <IndexPath <+ ![]> head-scope-ns;
+        path' := <do-adjusted-index-path(|scope-type, path, head-scope)> ast
+      end;
+      rules(IndexPath: scope-type -> path')
+ 
+  /* TODO: consider using simple-update-def-path
+   *       which uses "balanced" path scopes
+   *       e.g. when Entity doesn't scope Function
+   *       then it's hard to access properties from a function
+  balanced-update-index-path:
+    head-scope -> head-scope
+    where
+      if !head-scope => Anon() then
+        head-scope' := Anon(<new>)
+      else
+        head-scope' := head-scope
+      end;
+      (something with do-adjust-path)
+      rules(IndexPath := [head-scope' | <IndexPath <+ ![]> ()])
+  */
+ 
+  /**
+   * Analyze all uses, changing their preliminary
+   * "Unresolve(_)" URI to a definite URI of their definition.
+   */
+  analyze-uses = analyze-uses(|None())
+  analyze-uses(|parent):
+    ast -> (ast'', uses')
+    with
+      analyzed     := <all(analyze-uses(|ast))> ast;
+      (ast', uses) := <unzip-analyzed> analyzed;
+      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
+        if Def(def-uri) := <index-lookup(id |namespace, path, <strip-annos> ast')> ast' then
+          ast'' := ast{def-uri};
+          if key{keyUri} := <nam-get-definition-key> parent ; not(<eq>(key, ast')) then
+            uses' := [Use(def-uri, keyUri) | uses]
+          else
+            uses' := [Use(def-uri, [namespace | path]) | uses]
+          end
+        else
+          ast'' := ast';
+          uses' := [BadUse([namespace, x]) | uses]
+        end
+      else
+        ast'' := ast';
+        uses' := uses
+      end
+ 
+  /**
+   * Collects all index data (e.g., types of definitions).
+   */
+  analyze-tree-data:
+    tree -> data
+    where
+      set := <new-iset>;
+      <topdown(analyze-tree-data-part(|set))> tree;
+      data := <iset-elements> set
+ 
+  analyze-tree-data-part(|set):
+    tree -> tree
+    where
+      if def-term := <nam-get-definition-key> then
+        _{[namespace | path]} := def-term;
+        if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
+          <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
+        end
+      end
+ 
+  store-index-data-results(|set):
+    t -> <fail>
+    where
+      if is-list then
+        <iset-addlist(|t)> set
+      else
+        <iset-add(|t)> set
+      end
+ 
+  /**
+   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
+   * to a tuple (C(a1, a2), [b1, b2, b3]).
+   */
+  unzip-analyzed:
+    appl -> (appl', unzipped-parts)
+    with
+      appl'          := <all(\(a, _) -> a\)> appl;
+      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
+ 
+rules // index API primitives
+ 
+  /**
+   * Gets all DefData entries that match the kind of data and URI in given definition.
+   *
+   * @param kind Only data of this kind is returned.
+   *
+   * Example:
+   *   <index-get-data(|Type())> Def([Entity(), "Bar"]) => [DefData([Entity(), "Bar"], Type(), TYPE("Bar")), ...]
+   */
+  index-get-data(|kind):
+    <with(?Def(uri) | "Def expected")> -> <index-get-value> DefData(uri, kind, ())
+      
+    /**
+     * Gets all data entries that match the kind of data and URI in given definition.
+     *
+     * @param kind Only data of this kind is returned.
+     *
+     * Example:
+     *   <index-get-data-all(|Type())> Def([Entity(), "Bar"]) => [TYPE("Bar"), ...]
+     */
+  index-get-data-all(|kind):
+    <with(?Def(uri) | "Def expected")> -> <index-get-all-values> DefData(uri, kind, ())
+     
+  /**
+   * Gets all Use entries that match the URI in given definition.
+   *
+   * Example:
+   *   <index-get-uses-all> Def([Entity(), "M", "Bar"]) => [Use([Entity(), "M", "Bar"], [Entity(), "M"]), ...]
+   */
+  index-get-uses-all:
+    <with(?Def(uri) | "Def expected")> -> <index-get-all> Use(uri, [])
+     
+  /**
+   * Gets all Read or ReadWildcard entries that match the given template.
+   *
+   * Example:
+   *   <index-get-reads-all> [Property(), "Bar", "p"] => [Read([Property(), "Bar", "p"]), ...]
+   */
+  index-get-reads-all:
+    template -> <conc> (reads, readwildcards')
+    where
+      uri   := <index-uri> template;
+      reads := <index-get-all> Read(uri);
+      if !uri => [namespace, prefix | path-parent] then
+        readwildcards  := <index-get-all> ReadWildcard([namespace | path-parent], ());
+        readwildcards' := <filter(index-readwildcard-substring(|prefix))> readwildcards
+      else
+        readwildcards' := []
+      end
+ 
+  /**
+   * Get all index entries that match the given template.
+   *
+   * Example:
+   *   <index-get-all> Def([Entity(), "Bar"]) => [Def([Entity(), "Bar"]), ...]
+   */
+  index-get-all:
+    template -> <indexlib-get-all> template
+      with
+       if set := <Index-ReadSet> then
+         uri := <index-uri>;
+         <iset-add(|Read(uri))> set
+       end
+       
+  /**
+   * Get all values of index entries that match the given template.
+   *
+   * @see index-value
+   *
+   * Example:
+   *   <index-get-all-values> DefData([Property(), "s"], Type(), ()) => [TYPE("String"), ...]
+   */
+  index-get-all-values:
+    template -> <map(index-value)> <index-get-all> template
+       
+  /**
+   * Get the first index entry that matches the given template, or fail.
+   *
+   * Example:
+   *   <index-get> Def([Entity(), "Bar"]) => Def([Entity(), "Bar"])
+   */
+  index-get:
+    template -> <?[<id>|_]> <index-get-all> template
+      
+  /**
+   * Get the value of first index entry that matches the given template, or fail.
+   *
+   * @see index-value
+   *
+   * Example:
+   *   <index-get-value> DefData([Entity(), "Bar"], Type(), ()) => TYPE("Bar")
+   */
+  index-get-value:
+    template -> <index-value> <?[<id>|_]> <index-get-all> template
+   
+  /**
+   * Gets the namespace part of the URI for given term.
+   */
+  index-namespace:
+    x{[namespace | path]} -> <index-namespace-unwrap> namespace
+
+  /**
+   * Gets the path part of the URI for given term.
+   */
+  index-path:
+    x{[namespace | path]} -> path'
+    where
+      if !namespace => Unresolved(namespace) then
+        Def(path') := <index-lookup>
+      else
+        path' := path
+      end
+    
+  /**
+   * Determines if a given AST node is a definition site,
+   * according to the syntax.
+   */
+  index-is-definition =
+    where(nam-get-definition-key)
+ 
+  /**
+   * Returns all children of a Def.
+   *
+   * @param namespace Only child Defs with this namespace are returned.
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   *
+   */
+  index-get-children(|namespace, prefix):
+    <with(?Def([parent-ns | path]) | "Def expected")> -> children'
+    with
+      with(not(!namespace => Def(_)) | "index-get-children interface changed");
+      prefix'   := <strip-annos> prefix;
+      template  := Def([namespace | path]);
+      children  := <prim("LANG_index_get_children", template)>;
+      children' := <filter(index-is-name-substring(|prefix'))> children;
+      store     := [namespace, prefix' | path];
+      // Store read in index.
+      if set := <Index-ReadSet> then
+        if 1 := <length> children' then
+          // HACK: This solves the problem of ReadWildcards making too many files re-analyze, but this should
+          // be handled in the index primitives instead.
+          <iset-add(|Read([namespace, prefix' | path]))> set
+        else
+          <iset-add(|ReadWildcard([namespace | path], prefix'))> set
+        end
+      end
+
+  /**
+   * Gets a set of all files that have a reference to the given index entries.
+   *
+   * @param construct-from-uri  Construction strategy that creates a list of reference constructs from all 
+   *                            given entries, such as \uri -> [Read(uri), Use(uri, [])]\
+   *
+   * Example:
+   *   <index-get-referenced-files(\uri -> [Read(uri), Use(uri, [])]\)> [Def([Entity(), "Bar"]), ...] => 
+   *     [("fullpath/otherfile.ext", "subfile"), ...]
+   */
+  index-get-referenced-files(construct-from-uri):
+    entries -> files
+    where
+      uris        := <filter(index-uri)> entries;
+      referenced  := <concat> <filter(construct-from-uri)> uris;
+      files       := <make-set> <mapconcat(index-get-files-of)> referenced
+ 
+  /**
+   * Convenience function for finding files with Read and Use dependencies to the given definitions.
+   *
+   * @see index-get-referenced-files(construct-from-uri)
+   * @see index-file-dependent-construct
+   *
+   * Example:
+   *   <index-get-dependent-files> [Def([Entity(), "Bar"]), ...] => [("fullpath/otherfile.ext", "subfile"), ...]
+   */
+  index-get-dependent-files = 
+    index-get-referenced-files(index-file-dependent-construct)
+     
+rules // index lookup rules (take into account adjust-index-lookup)
+ 
+  /**
+   * Given an annotated AST node, resolves it, returning its Def.
+   */
+  index-lookup:
+    x{[namespace | path]} -> <index-lookup(id |<index-namespace-unwrap> namespace, path, <strip-annos> x)>
+ 
+  /**
+   * Given an annotated AST node, resolves it, returning all its Defs.
+   */
+  index-lookup-all:
+    x{[namespace | path]} -> <index-lookup-all(id |<index-namespace-unwrap> namespace, path, <strip-annos> x)>
+ 
+  /**
+   * Given an annotated AST node, resolves it, returning all its Defs.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   *
+   * @internal
+   */
+  index-lookup(is-adjust-lookup-enabled |namespace, path, prefix):
+    x -> def
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path, prefix)>;
+      if <?StopLookup()> candidates then
+        fail
+      else
+        def        := <index-select(|namespace, path, x)>
+      <+
+          // TODO: optimize: try not to call do-adjust-index-lookup from here
+          [_ | path'] := path;
+          def         := <index-lookup(is-adjust-lookup-enabled |namespace, path', prefix)> x
+      end
+
+  /**
+   * Given an annotated AST node, resolves it, returning all its Defs.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   *
+   * @internal
+   */
+  index-lookup-all(is-adjust-lookup-enabled |namespace, path, prefix):
+    x -> defs'
+    where
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path, prefix)>;
+      defs       := <index-select-all(|namespace, path, x)>;
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      if [_ | path'] := path then
+        defs2 := <index-lookup-all(is-adjust-lookup-enabled |namespace, path', prefix)> x;
+        defs' := <conc> (defs, defs2)
+      else
+        defs' := defs
+      end
+ 
+  /**
+   * Given an annotated AST node, returns the outermost Def with a corresponding URI.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   */
+  index-lookup-outermost(|prefix):
+    x{[namespace | path]} -> <index-lookup-outermost(id |<index-namespace-unwrap> namespace, path, prefix)>
+ 
+  /**
+   * Given an annotated AST node, returns the outermost Def with a corresponding URI.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   *
+   * @internal
+   */
+  index-lookup-outermost(is-adjust-lookup-enabled |namespace, path, prefix):
+    x -> def
+    where
+      // TODO: optimize: just like index-lookup
+      [_ | path'] := path;
+      def         := <index-lookup-outermost(is-adjust-lookup-enabled |namespace, path', prefix)> x
+    <+
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path, prefix)>;
+      def        := <index-select(|namespace, path, x)>
+ 
+  /**
+   * Given an annotated AST node, returns a Def that has the same parent URI.
+   *
+   * @param prefix    Only Defs with a name that starts with this
+   *                  string are returned.
+   */
+  index-lookup-one-level(|prefix):
+    x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path, prefix)>
+ 
+  /**
+   * Given an annotated AST node, resolves it, and
+   * returns all possibly matching Defs with a common ancestor URI. 
+   *
+   * @param namespace Only Defs with this namespace are returned.
+   * @param prefix    Indicates that only Defs with a name that starts with this
+   *                  string are demanded.
+   */
+  index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path, prefix):
+    x{_} -> defs
+    with
+      is-adjusted-lookup-enabled;
+      do-adjust-index-lookup(|namespace, path, x, prefix);
+      if ?StopLookup() then
+        defs := StopLookup()
+      else
+        mapconcat(\d at Def(p) -> [d]\
+          <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path', prefix)> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a list Def(_) or [namespace | path] or StopLookup() to stop the lookup"));
+        ?defs
+      end
+    <+
+      defs := <index-get-children(|namespace, prefix)> Def([namespace | path])
+      
+  /**
+   * Given an annotated AST node, resolves it, and
+   * returns all possibly matching Defs with a common ancestor URI. 
+   *
+   * @param namespace Only Defs with this namespace are returned.
+   * @param prefix    Indicates that only Defs with a name that starts with this
+   *                  string are demanded.
+   */
+  index-lookup-all-levels(|prefix):
+    x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path, prefix)>
+ 
+  /**
+   * Given an annotated AST node, resolves it, and
+   * returns all possibly matching Defs with a common ancestor URI. 
+   *
+   * @param prefix    Indicates that only Defs with a name that starts with this
+   *                  string are demanded.
+   */
+  index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path, prefix):
+    x{_} -> all-defs
+    with
+      is-adjust-lookup-enabled;
+      do-adjust-index-lookup(|namespace, path, x, prefix);
+      if ?StopLookup() then
+        all-defs := []
+      else
+          mapconcat(\d at Def(p) -> [d]\
+              <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path', prefix)> x\
+              <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a list Def(_) or [namespace | path] or StopLookup() to stop the lookup"));
+          ?all-defs
+      end
+    <+
+      one-level := <index-get-children(|namespace, prefix)> Def([namespace | path]);
+      if [_ | path'] := path then
+        all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path', prefix)> x]
+      else
+        all-defs := one-level
+      end
+ 
+  /** @Deprecated */
+  index-lookup-contained(|namespace, prefix) =
+    obsolete(!"index-lookup-contained; use index-lookup-children");
+    index-lookup-children(|namespace, prefix)
+   
+  /** @Deprecated */
+  index-lookup-contained-all-levels(|namespace, name) =
+    obsolete(!"index-lookup-contained-all-levels; use index-lookup-descendants");
+    index-lookup-descendants(|namespace, name)
+ 
+  /**
+   * Given an annotated AST node, resolves it,
+   * and returns all child Defs of its definition.
+   *
+   * @param namespace Only child Defs with this namespace are returned.
+   * @param prefix    Only child Defs with a name that starts with this
+   *                  string are returned.
+   */
+  index-lookup-children(|namespace, prefix): // TODO: how does this compare w/ index-lookup-one-level?
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-one-level(id|namespace, def-path, prefix)> x
+      else
+        defs := <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path, prefix)>
+      end
+    <+
+      defs := []
+ 
+  /**
+   * Given an annotated AST node, resolves it,
+   * and returns all descendant Defs of its definition.
+   *
+   * @param namespace Only child Defs with this namespace are returned.
+   * @param prefix    Only child Defs with a name that starts with this
+   *                  string are returned.
+   */
+  index-lookup-descendants(|namespace, name):
+    x{[ns | path]} -> defs
+    with
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-all-levels(id|namespace, def-path, name)> x
+      else
+        defs := <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path, name)>
+      end
+    <+
+      defs := []
+       
+/** @internal */
+rules // URI and value projections
+       
+  index-uri-impl:
+    Def(uri) -> uri
+    
+  index-uri-impl:
+    Use(uri, _) -> uri
+    
+  index-uri-impl:
+    Read(uri) -> uri
+    
+  index-uri-impl:
+    x{[namespace | path]} -> [<index-namespace-unwrap> namespace | path]
+ 
+  // TODO: Should second part of ReadWildcard be included in the URI, between namespace and path?
+  index-uri-impl:
+    ReadWildcard(uri, _) -> uri
+
+  index-value-impl:
+    Def(value) -> value
+
+  index-value-impl:
+    Use(_, value) -> value
+
+  index-value-impl:
+    Read(value) -> value
+    
+  index-value-impl:
+    ReadWildcard(_, value) -> value
+       
+/** @internal */
+rules // Internal helpers
+       
+  index-origin-language = (origin-term <+ id); prim("SSL_EXT_origin_language", <id>)
+       
+  // Tests if the current file is just a testing language input
+  is-test-file = string-ends-with(|".spt")
+  is-test-input(|language):
+    (ast, path) -> (ast, path)
+    where
+      <is-test-file> path;
+      not(!language => "Spoofax-Testing")
+       
+  index-is-name-substring(|name):
+    template -> <id>
+    with
+      [_, uri-name | _] := <index-uri>
+    where
+      <is-substring(!name)> uri-name
+      
+  index-readwildcard-substring(|prefix):
+    ReadWildcard(_, name) -> <id>
+    where <is-substring(!prefix)> name
+      
+  index-is-unresolved(|x, uri) = Index-UnresolvedSet; (iset-contains(|(x, uri)) <+ fail)
+  index-add-unresolved(|x, uri) = (Index-UnresolvedSet; iset-add(|(x, uri))) <+ id
+  
+  index-file-dependent-construct: 
+    uri -> <conc> (uses, reads)
+    with
+        uses := <index-get-uses-all> Def(uri);
+        reads := <index-get-reads-all> Def(uri)
+    
+  index-file-dependency-filter = ?Read(_) <+ ?ReadWildcard(_, _) <+ ?Use(_, _)
+ 
+  do-adjust-index-lookup(|namespace, path, use, prefix) =
+    // UNDONE: try(origin-term);
+    repeat-until(
+      prim("SSL_EXT_get_parent", <id>)
+    , adjust-index-lookup(origin-equal(|use) |namespace, path, prefix) 
+    )
+ 
+  index-select(|namespace, path, use) =
+    getfirst(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+ 
+  index-select-all(|namespace, path, use) =
+    filter(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+ 
+  do-adjusted-index-path(|namespace, path, def) =
+    adjust-index-path(origin-equal(|def) |namespace, path)
+  <+
+    ![def | path]
+ 
+  index-eq(|namespace, expected) =
+    where(
+      ?Def([_, name | _]);
+      <SRTS-EXT-eq-ignore-annos(|expected)> name
+    )
+  
+  external SRTS-EXT-eq-ignore-annos(|t)
+ 
+rules // interface for generated code
+ 
+  nam-get-def(|namespace):
+    x -> Def([namespace, x | <IndexPath <+ ![]> namespace])
+   
+  nam-annotate-use(|namespace):
+    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
+   
+  nam-get-scope-types = fail
+  nam-get-definition = fail
+  nam-get-definition-key = fail
+  nam-annotate-names(|def-path) = fail

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/compilation-library.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/lib/compilation-library.generated.str	Mon Apr 30 01:21:13 2012	(r24764)
@@ -0,0 +1,143 @@
+module lib/compilation-library.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  lib/index-library.generated
+  lib/analysis-library.generated
+  
+rules // Extension points
+    
+  // Should compile given analysed ast.
+  index-compile-ast(|file, subfile, project-path) = fail
+  
+rules // Compilation
+  
+  index-schedule-compilation:
+    <with(?(_, _, _) | "(ast, path, project-path) tuple expected")> -> None()
+    with
+      queue-strategy(|"index-compilation", "Compiling!")
+    
+  index-compilation:
+    (ast, path, project-path) -> <index-compilation(|path, project-path)> ast
+  
+  index-compilation(|path, project-path):
+    ast -> None()
+    with
+      // Init
+      full-path := $[[project-path]/[path]];
+      language  := <index-origin-language> ast;
+      index-setup(|language, [project-path], full-path)
+    with
+      // Determine the files to compile by looking at changed files.
+      diffs         := <analyze-get-diffs>;
+      files         := <map(index-compilation-restore-read-file)> diffs;
+      filteredFiles := <make-set> <remove-all(index-compilation-filter-file)> files;
+      
+      // Clean compile time reads.
+      <filter(index-compilation-clean-reads)> filteredFiles;
+      
+      <set-total-work-units> <length> filteredFiles;
+      
+      // Compile the files
+      <filter(index-compilation-file(|language, project-path); complete-work-unit)> filteredFiles;
+      
+      // Clean diffs
+      analyze-clean-diff
+
+  index-compilation-file(|language, project-path):
+    (file, subfile) -> None()
+    with
+      // Parse and analyze ast.
+      ast                                 := <parse-file> file;
+      AnalysedResult(ast', _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast, file, project-path)
+    with
+      {| Index-ReadSet:
+        readSet := <new-iset>;
+        rules(Index-ReadSet: _ -> readSet);
+        
+        // Compile file
+        <index-compile-ast(|file, subfile, project-path)> ast';
+        
+        // Store compile-time reads.
+        reads := <iset-elements> readSet;
+        <index-add-all(|<index-compilation-file-tuple> (file, subfile))> reads
+      |}
+
+  index-compilation-filter-file = 
+    ?(<id>, _); (is-test-file <+ index-is-fake-file <+ not(file-exists))
+
+rules // Compile time reads
+
+  index-compilation-restore-read-file:
+    (file, subfile) -> (file', subfile)
+    with
+      file' := <string-replace(|<index-compilation-read-path>, "")> file
+      
+  index-compilation-clean-reads = 
+    ?(file, subfile); index-compilation-file-tuple; index-clear-file
+      
+  index-compilation-file-tuple:
+    (file, subfile) -> ($[[<index-compilation-read-path>]/[file]], subfile)
+    
+  index-compilation-read-path =
+    !"/.internal/reads/compile"
+    
+signature constructors // On save handling
+
+  CommitAndCompile : List(UriPart) -> Summary
+  CommitAndCompile : Namespace
+    
+rules // On save handling
+  
+  commit-and-compile:
+    (_, path, project-path) -> <id>
+    with
+      index-commit
+    with
+      index-schedule-compilation
+  
+  index-on-save:
+    (ast, _, _, path, project-path) -> None()
+    with
+      if 0 := <analysis-count> then
+        disable-commit-and-compile;
+        <commit-and-compile> (ast, path, project-path)
+      else
+        enable-commit-and-compile
+      end
+      
+  post-analyze-top(|phase, language, full-path):
+    _ -> <id>
+    with
+      if Editor() := phase then 
+          scheduledAnalyses := <analysis-count>
+      else
+        scheduledAnalyses := -1
+      end
+    with
+      if 0 := scheduledAnalyses; check-commit-and-compile then
+        disable-commit-and-compile;
+        commit-and-compile
+      end
+      
+  analysis-count = 
+    prim("SSL_EXT_queue_analysis_count")
+      
+  enable-commit-and-compile:
+    _ -> <id>
+    with
+      <index-add-all(|<index-commit-and-compile-path>)> [CommitAndCompile([CommitAndCompile(), ".internal"])]
+      
+  disable-commit-and-compile:
+    _ -> <id>
+    with
+      <index-clear-file> <index-commit-and-compile-path>
+      
+  check-commit-and-compile:
+    _ -> <id>
+    where
+        <index-get> CommitAndCompile([CommitAndCompile(), ".internal"])
+      
+  index-commit-and-compile-path =
+    !"/.internal/commit-and-compile"

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/lib/editor-common.generated.str	Mon Apr 30 01:21:13 2012	(r24764)
@@ -0,0 +1,264 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-entitylang-file
+  parse-entitylang-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/EntityLang.tbl)>
+    )
+
+  parse-string = parse-entitylang-string
+  parse-entitylang-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/EntityLang.tbl)>
+    )
+  
+  parse-stream = parse-entitylang-stream
+  parse-entitylang-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/EntityLang.tbl)>
+    )
+
+  pp-entitylang-string =
+    ast2abox(|[<import-term(include/EntityLang.generated.pp.af)>,
+               <import-term(include/EntityLang.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-offset    = prim("SSL_EXT_origin_offset", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-file      = prim("SSL_EXT_origin_file", <id>)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+
+  origin-language =
+    prim("SSL_EXT_origin_language", <id>)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "EntityLang", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    ![<id>]; all(s); ?[<id>]
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+  True       : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/entitylang.str file. These definitions should also be automatically 
+  // generated in the imported include/EntityLang.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+    
+  // Gets the number of background analyses for currenct project and language.
+  // Current term: ignored
+  analysis-count = prim("SSL_EXT_queue_analysis_count")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/index-library.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/lib/index-library.generated.str	Mon Apr 30 01:21:13 2012	(r24764)
@@ -0,0 +1,280 @@
+module lib/index-library.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+signature constructors
+  
+  // Index elements
+  DefData      : List(UriPart) * DefDataType * Term -> Summary
+    
+  // URI header
+  Namespace      : UriPart
+  Unresolved     : Namespace -> UriPart
+  INTERNAL_ERROR : UriPart
+  Timestamp      : UriPart
+ 
+  // Remainder of URI
+  String : UriPart
+  Anon   : Int -> UriPart
+  Anon   : UriPart
+  
+  FileEntries : Term * Term -> Term
+  
+rules // Index management
+   
+  index-setup(|language, project-paths) =
+    obsolete(!"index-setup(|language, project-paths); use index-setup(|language, project-paths, current-file)");
+    index-setup(|language, project-paths, ".")
+    
+  /**
+   * Sets up the index library for given language and project paths.
+   * Must be called once before doing anything with the library.
+   */
+  index-setup(|language, project-paths, current-file) =
+    prim("LANG_index_setup", language, project-paths, current-file)
+
+  /**
+   * Adds all given elements to the index with given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-add-all(|"fullpath/file.ext")> [Def([Entity(), "Bar"]), ...]
+   *   <index-add-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
+   */
+  index-add-all(|file) =
+    list-loop(with(prim("LANG_index_add", <id>, file)))
+    
+  /**
+   * Removes all given elements from the index that are contained in given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-remove-all(|"fullpath/file.ext")> [Def([Entity(), "Bar"]), ...]
+   *   <index-remove-all(|("fullpath/file.ext", "subfile"))> [Def([Entity(), "Bar"]), ...]
+   */
+  index-remove-all(|files) =
+    list-loop(with(prim("LANG_index_remove", <id>, files)))
+    
+  /**
+   * Removes all elements from the index that are contained in given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-clear-file> "fullpath/file.ext"
+   *   <index-clear-file> ("fullpath/file.ext", "subfile")
+   */
+  index-clear-file = 
+    prim("LANG_index_clear_file", <id>)
+    
+  /**
+   * Clears all elements from the index.
+   */
+  index-clear = 
+    prim("LANG_index_clear_all")
+   
+  /**
+   * Commits index to a file on disk.
+   */
+  index-commit = 
+    if not(index-timestamp-get-updates(|"LANG_index_commit") => []) then
+      prim("LANG_index_commit");
+      index-timestamp-set-updated(|"LANG_index_commit")
+    end
+  
+rules // Index API
+  
+  /**
+   * Gets the file that the analysis is currently in.
+   */
+  index-get-current-file =
+    prim("LANG_index_get_current_file")
+  
+  /**
+   * Gets a list of all files and subfile for current project.
+   *
+   * Example:
+   *   <index-get-all-files> => ["fullpath/file.ext", ...]
+   */   
+  index-get-all-files =
+    prim("LANG_index_all_files")
+  
+  /**
+   * Gets all index entries for the given file path and optionally subfile.
+   *
+   * Examples:
+   *   <index-get-all-in-file> "fullpath/file.ext" => [Def([Entity(), "Bar"]), ...]
+   *   <index-get-all-in-file> ("fullpath/file.ext", "subfile") => [Def([Entity(), "Bar"]), ...]
+   */  
+  index-get-all-in-file:
+    filepath -> entries
+    with
+      entries := <prim("LANG_index_get_all_in_file", filepath)>
+   
+  /**
+   * Gets all index entries for the given file path and optionally subfile.
+   *
+   * Example:
+   *   <index-get-all-in-file(|Import())> "fullpath/file.ext" => [Def([Import(), "Bar"]), ...]
+   */  
+  index-get-all-in-file(|namespace):
+    filepath -> entries
+    with
+      // TODO: Optimize -- add an argument to LANG_index_get_all_in_file to do this filtering
+      entries := <prim("LANG_index_get_all_in_file", filepath)>;
+      filter(where(index-uri => [namespace | _]))
+    
+  /**
+   * Gets the containing files and subfiles of index entry with given template.
+   *
+   * Example:
+   *   <index-get-files-of> Def([Entity(), "Bar"]) => [("fullpath/file.ext", "subfile"), ...]
+   */  
+  index-get-files-of:
+    template -> <prim("LANG_index_get_files_of", template)>
+    
+  /**
+   * Gets all index entries (of every file for current project).
+   *
+   * Example:
+   *   <indexlib-get-all-elements> => [Def([Entity(), "Bar"]), ...]
+   */
+  indexlib-get-all-elements =
+    // TODO: is there a use case for this? doing this is *expensive*
+    <mapconcat(index-get-all-in-file)> <index-get-all-files>
+    
+  /**
+   * Get all index entries that match the given template.
+   *
+   * Example:
+   *   <indexlib-get-all> Def([Entity(), "Bar"]) => [Def([Entity(), "Bar"]), ...]
+   */
+  indexlib-get-all:
+    template -> <prim("LANG_index_get", template)>
+    
+  /**
+   * Get all values of index entries that match the given template.
+   *
+   * @see index-value
+   *
+   * Example:
+   *   <indexlib-get-all-values> DefData([Property(), "s"], Type(), ()) => [TYPE("String"), ...]
+   */
+  indexlib-get-all-values:
+    template -> <map(index-value)> <indexlib-get-all> template
+ 
+  /**
+   * Get the first index entry that matches the given template, or fail.
+   *
+   * Example:
+   *   <indexlib-get> Def([Entity(), "Bar"]) => Def([Entity(), "Bar"])
+   */
+  indexlib-get:
+    template -> <?[<id>|_]> <indexlib-get-all> template
+   
+  /**
+   * Get the value of first index entry that matches the given template, or fail.
+   *
+   * @see index-value
+   *
+   * Example:
+   *   <indexlib-get-value> DefData([Entity(), "Bar"], Type(), ()) => TYPE("Bar")
+   */
+  indexlib-get-value:
+    template -> <index-value> <?[<id>|_]> <indexlib-get-all> template
+ 
+  /**
+   * Updates the "last updated" timestamp for the given service name.
+   *
+   * @see index-get-changes-since-timestamp(|service)
+   */
+  index-timestamp-set-updated(|service) =
+    file := $[/.internal/timestamps/[service]];
+    <index-clear-file> file;
+    prim("LANG_index_add", DefData([Timestamp(), "timestamps", ".internal"], Timestamp(), []), file)
+   
+  /**
+   * Gets all files with changes since the last time stamp update for the given service name.
+   */
+  index-timestamp-get-updates(|service):
+    _ -> files'
+    with
+      timestampName := $[/.internal/timestamps/[service]];
+      files := <prim("LANG_index_get_files_newer_than", timestampName)>;
+      files' := <remove-all(?(timestampName, _))> files
+
+  /**
+   * Queries if given index file is a 'fake' file for storing internal data.
+   */
+  index-is-fake-file = string-starts-with(|"/.internal")
+    
+  /**
+   * Gets the URI part for given term.
+   */ 
+  index-uri = index-uri-impl <+ index-uri-generic
+  
+  /**
+   * Checks if given URI's are equal. Discards anonymous scopes if necessary.
+   *
+   * Example:
+   *   <index-uri-eq> ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"]) => 
+   *     ([Entity(), Anon("a"), "Bar"], [Entity(), Anon("b"), "Bar"])
+   *   <index-uri-eq> ([Entity(), "Foo"], [Entity(), "Bar"]) => fail
+   */
+  index-uri-eq:
+    (u1, u2) -> <id>
+    where
+      u1' := <index-uri-unwrap> u1;
+      u2' := <index-uri-unwrap> u2;
+      (<eq> (u1', u2') <+ <eq> (<remove-all(?Anon(_))> u1', <remove-all(?Anon(_))> u2'))
+
+  /**
+   * Checks if given keys (term{uri} elements) are equal. Discards unresolved URI's.
+   *
+   * Example:
+   *   <index-key-eq> ("Bar"{[Entity(), "Bar"]}, "Bar"{[Unresolved(Entity()), "Bar"]}) => 
+   *     ("Bar"{[Entity(), "Bar"]}, "Bar"{[Unresolved(Entity()), "Bar"]})
+   *   <index-key-eq> ("Foo"{[Entity(), "Foo"]}, "Bar"{[Entity(), "Bar"]}) => fail
+   */      
+  index-key-eq:
+    (k1, k2) -> <id>
+    where
+      <eq> (<index-key-unwrap> k1, <index-key-unwrap> k2)
+  
+  /**
+   * Gets the value part for given term.
+   */  
+  index-value = index-value-impl <+ index-value-generic
+  
+  /**
+   * Finds the first key (term{uri} element) for given term, or fail. 
+   */
+  index-find-key:
+    x -> key
+    where
+      key := <collect-one(?_{_})> x
+      
+/** @internal */
+rules // URI and value projections
+    
+  index-uri-impl:
+    DefData(uri, _, _) -> uri
+
+  index-uri-generic:
+    term -> <?_#(<?[<id>|_]>)> term
+  
+  index-value-impl:
+    DefData(_, _, value) -> value
+    
+  index-value-generic:
+    term -> <?_#(<?[_, <id>|_]> )> term
+     
+/** @internal */ 
+rules // Internal helpers
+  
+  index-namespace-unwrap =
+    \Unresolved(n) -> n\ <+ id
+    
+  index-uri-unwrap =
+    \[ns|xs] -> [<index-namespace-unwrap> ns|xs]\ <+ id
+    
+  index-key-unwrap = 
+    \key{uri} -> key{<index-uri-unwrap> uri}\ <+ id

Added: experimental/graphical-editor/EntityLang/EntityLang/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ experimental/graphical-editor/EntityLang/EntityLang/lib/refactor-common.generated.str	Mon Apr 30 01:21:13 2012	(r24764)
@@ -0,0 +1,67 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
+ */
+input-dialog:
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
+  
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/EntityLang.generated.pp.af)
+	

From oskarvanrest at gmail.com  Mon Apr 30 07:52:26 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 30 Apr 2012 05:52:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24765 -
	experimental/graphical-editor/EntityLang/EntityLang/trans
Message-ID: <20120430055226.187AD7F8003@mx1.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr 30 05:52:23 2012
New Revision: 24765
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24765&sc=1

Log:
serialise EMF model

Modified:
   experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str
   experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str

Modified: experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str
==============================================================================
--- experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str	Mon Apr 30 01:21:13 2012	(r24764)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str	Mon Apr 30 05:52:23 2012	(r24765)
@@ -7,7 +7,7 @@
 strategies
 	
 	to-emf(|path) = topdown(try(create-object(|path))); topdown(try(set-structural-features))
-	//commit(|path) = lookup-identifier; serialise(|path) FIXME
+	commit(|path) = lookup-identifier; serialise(|path)
 
 rules
 	

Modified: experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str
==============================================================================
--- experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str	Mon Apr 30 01:21:13 2012	(r24764)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str	Mon Apr 30 05:52:23 2012	(r24765)
@@ -36,8 +36,8 @@
       index-setup(|language, [project-path], $[[project-path]/[path]]);
       filename := <guarantee-extension(|"txt")> path;
       <initialize-emf-package> <packName>;
-      result   := <to-emf(|path)> ast
-      //<commit(|"test.txt")> result
+      ast'   := <to-emf(|path)> ast;
+      result := <commit(|filename)> ast'
   
   // Transforms a selection to Java
   generate-java:

From oskarvanrest at gmail.com  Mon Apr 30 13:11:04 2012
From: oskarvanrest at gmail.com (Oskar van Rest)
Date: Mon, 30 Apr 2012 11:11:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r24766 - in
	experimental/graphical-editor/EntityLang/EntityLang: editor
	editor/java/EntityLang/strategies trans
Message-ID: <20120430111104.57410CC0E3@mx4.tudelft.nl>

Author: OskarVanRest
Date: Mon Apr 30 11:11:04 2012
New Revision: 24766
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=24766&sc=1

Log:
Writing to file works properly now. GMF picks it up correctly.

Modified:
   experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Builders.esv
   experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/initialize_emf_package_0_0.java
   experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str
   experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str

Modified: experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Builders.esv
==============================================================================
--- experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Builders.esv	Mon Apr 30 05:52:23 2012	(r24765)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/EntityLang-Builders.esv	Mon Apr 30 11:11:04 2012	(r24766)
@@ -22,9 +22,7 @@
                                                                                                                           
   builder  : "Generate Java code (for selection)"            = generate-java (openeditor) (realtime)                      
   builder  : "Show abstract syntax (for selection)"          = generate-aterm (openeditor) (realtime) (meta) (source)     
-  builder  : "Show analyzed abstract syntax (for selection)" = generate-analyzed (openeditor) (realtime) (meta) (source)  
-  builder  : "Generate EMF model"							 = generate-emf (openeditor) (realtime)
-                                                                                                                          
+  builder  : "Show analyzed abstract syntax (for selection)" = generate-analyzed (openeditor) (realtime) (meta) (source)                                                                                                                           
 
 refactorings
 

Modified: experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/initialize_emf_package_0_0.java
==============================================================================
--- experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/initialize_emf_package_0_0.java	Mon Apr 30 05:52:23 2012	(r24765)
+++ experimental/graphical-editor/EntityLang/EntityLang/editor/java/EntityLang/strategies/initialize_emf_package_0_0.java	Mon Apr 30 11:11:04 2012	(r24766)
@@ -6,16 +6,13 @@
 
 import EntityLangModel.EntityLangModelPackage;
 
-//FIXME this needs to be done somewhere else
 public class initialize_emf_package_0_0 extends Strategy {
 
 	public static initialize_emf_package_0_0 instance = new initialize_emf_package_0_0();
 
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		@SuppressWarnings("unused")
-		EntityLangModelPackage initialize = EntityLangModelPackage.eINSTANCE; 
-		return context.getFactory().makeInt(1);
+		return context.getFactory().makeString(EntityLangModelPackage.eINSTANCE.eClass().toString());
 	}
 
 }

Modified: experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str
==============================================================================
--- experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str	Mon Apr 30 05:52:23 2012	(r24765)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/emf.str	Mon Apr 30 11:11:04 2012	(r24766)
@@ -7,7 +7,7 @@
 strategies
 	
 	to-emf(|path) = topdown(try(create-object(|path))); topdown(try(set-structural-features))
-	commit(|path) = lookup-identifier; serialise(|path)
+	serialise-model(|path) = lookup-identifier; serialise(|path)
 
 rules
 	

Modified: experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str
==============================================================================
--- experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str	Mon Apr 30 05:52:23 2012	(r24765)
+++ experimental/graphical-editor/EntityLang/EntityLang/trans/entitylang.str	Mon Apr 30 11:11:04 2012	(r24766)
@@ -30,14 +30,26 @@
       notes    := <collect-all(constraint-note, conc)> ast'
 
   generate-emf:
-    (selected, position, ast, path, project-path) -> (filename, result)
+    (selected, position, ast, path, project-path) -> None()
     with
+      // initialize
+	  editor-init;
+      ast' := <analyze-top> (ast, path, project-path);
       language  := <index-origin-language> ast;
       index-setup(|language, [project-path], $[[project-path]/[path]]);
-      filename := <guarantee-extension(|"txt")> path;
+      fileExtension := <lower-case> <packName>;
+      filename := <guarantee-extension(|fileExtension)> path;
       <initialize-emf-package> <packName>;
-      ast'   := <to-emf(|path)> ast;
-      result := <commit(|filename)> ast'
+      
+      // generate EMF
+      ast''  := <to-emf(|path)> ast';
+      result := <serialise-model(|path)> ast'';
+      
+      // write to file
+      fdescr := <fopen> (filename, "w");
+	  <fputs> (result, fdescr);
+	  <fclose> fdescr;
+	  <refresh-workspace-file> filename
   
   // Transforms a selection to Java
   generate-java:

