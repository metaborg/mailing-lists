From M.A.Akhter at student.tudelft.nl  Tue Nov  1 11:32:04 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 01 Nov 2011 10:32:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23542 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index
Message-ID: <20111101103204.AAAAC108C003@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov  1 10:32:04 2011
New Revision: 23542
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23542&sc=1

Log:
enabling caching . fixed index-clean primitive

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java	Sun Oct 30 21:04:15 2011	(r23541)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java	Tue Nov  1 10:32:04 2011	(r23542)
@@ -9,5 +9,8 @@
 	static final String ROLLBACK_COMMAND_STRING = "ROLLBACK" ;
 	static final String INVALIDATE_GLOBAL_CACHE_COMMAND_STRING = "INVALIDATE_GLOBAL_CACHE" ;
 	
+	static final String INIT_CODEGEN_COMMAND_STRING = "INIT_CODEGEN" ;
+	static final String SUCCESSFUL_CODEGEN_COMMAND_STRING = "SUCCESSFUL_CODEGEN" ;
+	
 	public void run() throws Exception;
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sun Oct 30 21:04:15 2011	(r23541)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Tue Nov  1 10:32:04 2011	(r23542)
@@ -1,6 +1,5 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
-import java.io.File;
 import java.io.IOException;
 import java.util.Properties;
 import java.util.UUID;
@@ -69,7 +68,7 @@
 		
 		//setting properties of RecordManager
 		options.put(RecordManagerOptions.INDEX_RELATIVE_PATH_OPTION, BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX);
-		options.put(RecordManagerOptions.CACHE_TYPE, "none");
+		options.put(RecordManagerOptions.CACHE_TYPE, "soft");
 		options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "false");
 		
 		tryInitRecordManager(spxSemanticIndexFacade,options);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sun Oct 30 21:04:15 2011	(r23541)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Nov  1 10:32:04 2011	(r23542)
@@ -906,16 +906,13 @@
 	 * @throws Exception 
 	 */
 	public void reinitSymbolTable() throws Exception {	
-		
-		if (! isPersistenceManagerClosed()){
-			// cleaning persistence manager.
-			persistenceManager().clear();
-			//cleaning the SpxCache as well.
-			invalidateSpxCacheDirectory();
+		if (!isPersistenceManagerClosed()){
+			persistenceManager().clear(); // cleaning persistence manager.
+			persistenceManager().commitAndClose();
 			tryCleanupIndexDirectory();
-			
+			invalidateSpxCacheDirectory(); //cleaning the SpxCache as well.
 		}
-		persistenceManager().initializeSymbolTables(this.getProjectName(), this);
+		initializePersistenceManager();
 	}
 
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sun Oct 30 21:04:15 2011	(r23541)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Tue Nov  1 10:32:04 2011	(r23542)
@@ -80,7 +80,7 @@
 	    if ( cacheDir.exists() &&  cacheDir.isDirectory()) {
 	        String[] children = cacheDir.list();
 	        for (int i=0; i<children.length; i++) {
-	           deleteSpxCacheDir(new File(cacheDir, children[i]));
+	        	tryDeleteSpxIndexDir(new File(cacheDir, children[i]));
 	        }
 	    }
 	    cacheDir.delete();

From v.vergu at gmail.com  Tue Nov  1 20:28:04 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Tue, 01 Nov 2011 19:28:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23543 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111101192804.4BC502B8012@mx2.tudelft.nl>

Author: VladVergu
Date: Tue Nov  1 19:28:04 2011
New Revision: 23543
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23543&sc=1

Log:
Fix for Spoofax/452

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Tue Nov  1 10:32:04 2011	(r23542)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Tue Nov  1 19:28:04 2011	(r23543)
@@ -46,15 +46,12 @@
     <find(has-extension(|"spt"))> "." 
   ; string-sort
 
-  origin-offset =
-    prim("SSL_EXT_origin_offset", <id>) => (<id>, _)
-    
   run-testsuite :
     file -> (ast, [])
     where 
       ast  := <parse-spt-file> file
     ; ast' := <topdown(repeat(spt-desugar)); alltd(spt-desugar-refactoring-conditions)> ast 
-    ; testcases := <collect-all(testlistener-add-testcase(|file, <test-to-description>,<origin-offset>))>ast'
+    ; testcases := <collect-all(testlistener-add-testcase(|file, <test-to-description>,<origin-offset;Fst>))>ast'
     ; <map(run-testcase(|file))>testcases
   
   get-testsuite-name :

From M.A.Akhter at student.tudelft.nl  Tue Nov  1 22:21:21 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 01 Nov 2011 21:21:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23544 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration:
	editor syntax test
Message-ID: <20111101212121.423DF108C00D@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov  1 21:21:19 2011
New Revision: 23544
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23544&sc=1

Log:
few changes in config

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv	Tue Nov  1 19:28:04 2011	(r23543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv	Tue Nov  1 21:21:19 2011	(r23544)
@@ -5,7 +5,9 @@
   // This file can be used for custom colorer rules.                  
   //                                                                  
   // See the imported file for a brief introduction and examples.
-  
+  colorer 
+  	DebugOption._ : 0 0 0  italic
+  	STROutputMode._: 0 0 0  italic
   colorer Default, token-based highlighting
                                   
 	  keyword    : 255 69 0         

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf	Tue Nov  1 19:28:04 2011	(r23543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf	Tue Nov  1 21:21:19 2011	(r23544)
@@ -17,7 +17,15 @@
 	    RelativePath IncludeOption 							-> IncludeDefinition {cons("Source")}
 	    
 	    "projectreferences" ":" ProjectName* 	-> ConfigSection {cons("SpxProjects")}
-	    	
+	    
+	    "debug-switch:" {DebugOption ","}* 	-> ConfigSection {cons("Debug")}
+	    
+	    "compiler" -> DebugOption{cons("DebugCompiler")}
+	    "declaration" -> DebugOption{cons("DebugDeclaration")}
+	    "analysis" -> DebugOption{cons("DebugAnalysis")}
+	    "symboltable" -> DebugOption{cons("DebugSymbolTable")}
+	    "all" -> DebugOption{cons("DebugAll")}
+	    
 	    
 	    "codegen:" CodeGenDefinition*    			 	-> ConfigSection{cons("CodeGeneration")}
 	    "todir" ":" RelativePath				  			-> CodeGenDefinition {cons("OutputDirectory")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config	Tue Nov  1 19:28:04 2011	(r23543)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config	Tue Nov  1 21:21:19 2011	(r23544)
@@ -17,9 +17,18 @@
 	// By default, it includes all the directories ( and their subdirectories) of the project during build. Hence, It is  
 	// always recommended to explicitly specify the sources to include. 							  
 	src:
-		test|**
-		test|.
+		test | **
+		test | .
+		
+	debug-switch: compiler , declaration , symboltable
+	
+	//Todo dependency :  
+	//imports:
+	//  stratego-lib
+	//  stratego-sglr
+	//  stratego-gpp
 	
+	  
 	codegen:
 		// todir refers to the project directory where intermediate generated 
 		// output is stored for further processing. 
@@ -33,8 +42,9 @@
 	// Other project references are specified in this configuration section.
 	projectreferences:
 			//../DatabaseLang 
-			langTestD
-			    
+		
+  
+  			    
 			  
 
 			
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Tue Nov  1 22:30:39 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 01 Nov 2011 21:30:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23545 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. data tests
Message-ID: <20111101213039.B4158108C00D@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov  1 21:30:39 2011
New Revision: 23545
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23545&sc=1

Log:
refactored cons def

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -16,7 +16,7 @@
 	}
 	
 	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade){
-		return facade.getTermFactory().makeAppl(facade.getGlobalNamespaceTypeCon());
+		return facade.getTermFactory().makeAppl(facade.getCons().getGlobalNamespaceTypeCon());
 	} 
 	
 	/**
@@ -33,7 +33,7 @@
 			return gns;
 		else{
 			return new GlobalNamespace(symbol_table.toNamespaceUri(spoofaxNamespaceUri), 
-					facade.getGlobalNamespaceTypeCon(), 
+					facade.getCons().getGlobalNamespaceTypeCon(), 
 					facade.persistenceManager()
 			);
 		}
@@ -43,6 +43,6 @@
 	public static IStrategoList getGlobalNamespaceId(SpxSemanticIndexFacade facade){
 		ITermFactory termFactory = facade.getTermFactory();
 		
-		return termFactory.makeList(facade.getGlobalNamespaceTypeCon());
+		return termFactory.makeList(facade.getCons().getGlobalNamespaceTypeCon());
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/IIndexManageCommand.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -9,8 +9,8 @@
 	static final String ROLLBACK_COMMAND_STRING = "ROLLBACK" ;
 	static final String INVALIDATE_GLOBAL_CACHE_COMMAND_STRING = "INVALIDATE_GLOBAL_CACHE" ;
 	
-	static final String INIT_CODEGEN_COMMAND_STRING = "INIT_CODEGEN" ;
-	static final String SUCCESSFUL_CODEGEN_COMMAND_STRING = "SUCCESSFUL_CODEGEN" ;
+	static final String ON_INIT_CODEGEN_COMMAND_STRING = "ON_INIT_CODEGEN" ;
+	static final String ON_COMPLETE_CODEGEN_COMMAND_STRING = "ON_COMPLETE_CODEGEN" ;
 	
 	public void run() throws Exception;
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -22,7 +22,7 @@
 	
 	@Override
 	public IStrategoAppl toTypedQualifiedName(SpxSemanticIndexFacade facade) {
-		return facade.getTermFactory().makeAppl(facade.getLocalNamespaceTypeCon());
+		return facade.getTermFactory().makeAppl(facade.getCons().getLocalNamespaceTypeCon());
 	}
 	
 	/**
@@ -39,7 +39,7 @@
 		UUID uniqueId= UUID.randomUUID();
 		NamespaceUri localNamespaceUri = new NamespaceUri(termFactory.makeList(termFactory.makeString("anonymous_"+uniqueId.toString())) , uniqueId);
 
-		return new LocalNamespace(localNamespaceUri , facade.getLocalNamespaceTypeCon(), facade.persistenceManager(), enclosingNamespace.namespaceUri());
+		return new LocalNamespace(localNamespaceUri , facade.getCons().getLocalNamespaceTypeCon(), facade.persistenceManager(), enclosingNamespace.namespaceUri());
 	}
 
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -46,7 +46,7 @@
 		if(ns != null)
 			return ns;
 		else
-			return new ModuleNamespace(id, facade.getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.persistenceManager());
+			return new ModuleNamespace(id, facade.getCons().getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.persistenceManager());
 	}
 
 	@Override

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -272,7 +272,7 @@
 			NamespaceUri globalNsUri =  table.toNamespaceUri(GlobalNamespace.getGlobalNamespaceId(facade));
 			NamespaceUri currentPackageUri = table.toNamespaceUri(id);
 	
-			ns = new PackageNamespace(currentPackageUri, facade.getPackageNamespaceTypeCon(), globalNsUri,facade.persistenceManager());
+			ns = new PackageNamespace(currentPackageUri, facade.getCons().getPackageNamespaceTypeCon(), globalNsUri,facade.persistenceManager());
 		}
 		
 		namespaces.add(ns);

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -0,0 +1,156 @@
+package org.spoofax.interpreter.library.language.spxlang.index;
+
+import java.util.HashMap;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+
+public class SpxConstructors {
+
+	private final HashMap<ConstructorDef , IStrategoConstructor> _knownCons;
+	
+	private final ITermFactory _termFactory;
+	
+	public SpxConstructors( ITermFactory tf){
+		_termFactory = tf;
+		_knownCons = new HashMap<ConstructorDef , IStrategoConstructor>();
+		
+		initKnownConstructors();
+	}
+	
+	private void initKnownConstructors(){
+		ConstructorDef.newInstance("ModuleDef"  ,5).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("ModuleDecl" ,3).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("SymbolDef"  ,4).index(_knownCons, _termFactory);
+
+		ConstructorDef.newInstance("PackageDecl",2).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("ImportDecl" ,2).index(_knownCons, _termFactory);
+		
+		ConstructorDef.newInstance("LanguageDescriptor", 5).index(_knownCons, _termFactory);
+		
+		ConstructorDef.newInstance("Module" ,  1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Package",  1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("QName"  ,  1).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Locals" ,  1).index(_knownCons, _termFactory);
+		
+		ConstructorDef.newInstance("Globals", 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Package", 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("Module" , 0).index(_knownCons, _termFactory);
+		
+		ConstructorDef.newInstance("ToCompile"  , 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("ToGenerate" , 0).index(_knownCons, _termFactory);
+	}
+	
+	IStrategoConstructor indexConstructor(IStrategoConstructor ctor){
+		ConstructorDef def = ConstructorDef.newInstance(ctor.getName(), ctor.getArity());
+		return def.index(_knownCons, ctor);
+	}
+	
+	static class ConstructorDef
+	{
+		private String _name ;
+		private int _arity;
+
+		ConstructorDef( String name , int arity) {  _name =  name ; _arity = arity; }
+
+		static ConstructorDef newInstance( String name , int arity) {  return new ConstructorDef(name, arity); }
+
+		private IStrategoConstructor toStrategoConstructor(ITermFactory fac) {  return fac.makeConstructor(_name, _arity);}
+
+		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac){
+			return this.index(cons, this.toStrategoConstructor(fac));
+		}
+
+		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , IStrategoConstructor ctor){
+			cons.put(this, ctor) ;
+			return ctor;
+		}
+
+		@Override
+		public String toString() {
+			return "ConstructorDef [_name=" + _name + ", _arity=" + _arity
+			+ "]";
+		}
+
+		/* (non-Javadoc)
+		 * @see java.lang.Object#hashCode()
+		 */
+		@Override
+		public int hashCode() {
+			final int prime = 31;
+			int result = 1;
+			result = prime * result + _arity;
+			result = prime * result + ((_name == null) ? 0 : _name.hashCode());
+			return result;
+		}
+
+		/* (non-Javadoc)
+		 * @see java.lang.Object#equals(java.lang.Object)
+		 */
+		@Override
+		public boolean equals(Object obj) {
+			if (this == obj)
+				return true;
+			if (obj == null)
+				return false;
+			if (getClass() != obj.getClass())
+				return false;
+			ConstructorDef other = (ConstructorDef) obj;
+			if (_arity != other._arity)
+				return false;
+			if (_name == null) {
+				if (other._name != null)
+					return false;
+			} else if (!_name.equals(other._name))
+				return false;
+			return true;
+		}
+
+	}
+
+	public IStrategoConstructor getPackageDeclCon() { return getConstructor("PackageDecl",2);}
+	
+	public IStrategoConstructor getModuleDeclCon() { return getConstructor("ModuleDecl", 3); }
+
+	public IStrategoConstructor getModuleDefCon() {	return getConstructor("ModuleDef" , 5);}
+
+	public IStrategoConstructor getLanguageDescriptorCon() { return getConstructor("LanguageDescriptor" , 5);}
+
+	public IStrategoConstructor getModuleQNameCon() {return getConstructor("Module" , 1); }
+
+	public IStrategoConstructor getPackageQNameCon() { return getConstructor("Package" , 1);}
+	
+	public IStrategoConstructor getQNameCon() { return getConstructor("QName" , 1); }
+	
+	public IStrategoConstructor getImportDeclCon() {return getConstructor("ImportDecl",2);}
+	
+	public IStrategoConstructor getGlobalNamespaceTypeCon() {return getConstructor("Globals",0);}
+	
+	public IStrategoConstructor getPackageNamespaceTypeCon() {return getConstructor("Package",0);}
+	
+	public IStrategoConstructor getModuleNamespaceTypeCon() {return getConstructor("Module",0);}
+	
+	public IStrategoConstructor getSymbolTableEntryDefCon() {return getConstructor("SymbolDef",4);}
+	
+	public IStrategoConstructor getLocalNamespaceTypeCon() { return getConstructor("Locals",1);  }
+	
+	public IStrategoConstructor getToCompileCon(){return getConstructor("ToCompile", 0);}
+	
+	public IStrategoConstructor getToCodeGenerateCon(){return getConstructor("ToCodeGenerate", 0);}
+	
+	public IStrategoConstructor getConstructor(String symbolTypeCons, int arity) {
+		return _knownCons.get(ConstructorDef.newInstance(symbolTypeCons ,arity));
+	}
+	
+
+	public boolean hasEqualConstructor ( IStrategoAppl actual , IStrategoConstructor expected){
+		
+		return this.isEqualConstructor(actual.getConstructor(), expected);
+	}
+	
+	public boolean isEqualConstructor ( IStrategoConstructor actual , IStrategoConstructor expected){
+		return actual == expected;
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -66,9 +66,42 @@
 		if(commandName.equalsIgnoreCase(INVALIDATE_GLOBAL_CACHE_COMMAND_STRING))
 			return invalidateGlobalCacheCommandInstance(spxSemanticIndex , projectPath, objects);
 		
-		throw new IllegalArgumentException("Invalid Command Name : "+ commandName) ;
+		if(commandName.equalsIgnoreCase(ON_INIT_CODEGEN_COMMAND_STRING))
+			return onInitCodeGenrationCommandInstance(spxSemanticIndex , projectPath, objects);
+		
+		if(commandName.equalsIgnoreCase(ON_COMPLETE_CODEGEN_COMMAND_STRING))
+			return onCompleteCodeGenrationCommandInstance(spxSemanticIndex , projectPath, objects);
+		
+		
+		throw new IllegalArgumentException("Invalid command name :"+ commandName) ;
+	}
+
+	private static IIndexManageCommand onInitCodeGenrationCommandInstance(
+			final SpxSemanticIndex index, IStrategoString projectPath,
+			Object[] objects) {
+		
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				SpxSemanticIndexFacade f = idx.getFacadeRegistry().getFacade(projectPath);
+				if(f != null)
+					f.onInitCodeGeneration();
+			}
+		};
 	}
 
+	private static IIndexManageCommand onCompleteCodeGenrationCommandInstance(
+			final SpxSemanticIndex index, IStrategoString projectPath,
+			Object[] objects) {
+		
+		return new SpxIndexManager(index , projectPath, objects){
+			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
+				SpxSemanticIndexFacade f = idx.getFacadeRegistry().getFacade(projectPath);
+				if(f != null)
+					f.onCompleteCodeGeneration();
+			}
+		};
+	}
+	
 	private static IIndexManageCommand rollbackCommandInstance(
 			final SpxSemanticIndex index, IStrategoString projectPath,
 			Object[] objects) {
@@ -81,6 +114,7 @@
 			}
 		};
 	}
+	
 	private static  SpxIndexManager clearCommandInstance(
 			SpxSemanticIndex index, 
 			IStrategoString projectPath,

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -50,14 +50,17 @@
 	private final TermAttachmentStripper _stripper;
 	private final TermAttachmentSerializer _termAttachmentSerializer;
 	private final TermConverter _converter;
-
+	private final SpxConstructors _spxConstructors;
+	
 	private long _initializedOn;
-	public TermAttachmentSerializer getTermAttachmentSerializer() {
-		return _termAttachmentSerializer;
-	}
+	
+	private long _previousSuccessfulCodeGenerationDoneOn;
+	private long _currentCodeGenerationStratedOn;
 
+	
 	/**
-	 * Initializes the SemanticIndexFactory
+	 * Initialises the factory for the semantic index
+	 * 
 	 * @param projectPath name of the project 
 	 * @param termFactory {@link ITermFactory}
 	 * @param agent {@link IOAgent}
@@ -75,16 +78,22 @@
 		
 		_termAttachmentSerializer = new TermAttachmentSerializer(_termFactory);
 		
-		_knownCons = new HashMap<ConstructorDef ,IStrategoConstructor>();
-		initKnownConstructors();
+		_spxConstructors = new SpxConstructors(_termFactory);
 	}
 	
 	public synchronized void initializePersistenceManager() throws Exception {
 		_persistenceManager = new SpxPersistenceManager(this);
 		_persistenceManager.initializeSymbolTables(this._projectPath, this);
 		_indexId = _persistenceManager.getIndexId();
+		
+		//Setting IntializedOn Flag for incremental Compilation	
 		_initializedOn  = System.currentTimeMillis();
 	}
+	public SpxConstructors getCons(){ return _spxConstructors;}
+	
+	public TermAttachmentSerializer getTermAttachmentSerializer() {
+		return _termAttachmentSerializer;
+	}
 	
 	public String indexId() {return _indexId; }
 	/**
@@ -102,7 +111,6 @@
 	public String getProjectPath(){ return Utils.toAbsPathString(_projectPath); }
 	
 	public String getProjectName(){ return new File(_projectPath).getName(); }
-	
 
 	/**
 	 * Returns an instance of the Persistence Manager active for the current Facade
@@ -110,6 +118,9 @@
 	 */
 	public ISpxPersistenceManager persistenceManager(){	return _persistenceManager; }
 
+	public void onInitCodeGeneration(){ this._currentCodeGenerationStratedOn = System.currentTimeMillis(); }
+	
+	public void onCompleteCodeGeneration() { this._previousSuccessfulCodeGenerationDoneOn = this._currentCodeGenerationStratedOn;}
 	
 	/**
 	 * Returns CompilationUnit located in {@code spxCompilationUnitPath} as {@link IStrategoTerm}
@@ -135,14 +146,12 @@
 		return retTerm;
 	}
 	
-	
 	public SpxCompilationUnitInfo getCompilationUnitInfo(String absUriPath){
 		URI resUri = Utils.getAbsolutePathUri(absUriPath ,_agent);
 		
 		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
 		return table.getInfo(this, resUri);
 	}
-	
 
 	/**
 	 * Removes CompilationUnit located in {@code spxCompilationUnitPath} file path.  
@@ -177,7 +186,6 @@
 		
 		table.define(this, resUri, astTerm);
 	}
-
 	
 	/**
 	 * Indexes {@code moduleDefinition}
@@ -188,7 +196,7 @@
 	 */
 	public void indexModuleDefinition(IStrategoAppl moduleDefinition) throws IllegalArgumentException, IOException
 	{
-		verifyConstructor(moduleDefinition.getConstructor() , getModuleDefCon() , "Illegal Module Definition" );
+		verifyConstructor(moduleDefinition.getConstructor() , getCons().getModuleDefCon() , "Illegal Module Definition" );
 		
 		indexModuleDefinition( 
 				applAt(moduleDefinition ,  ModuleDeclaration.ModuleTypedQNameIndex),
@@ -246,7 +254,7 @@
 	 * @param packageDeclaration
 	 */
 	public void indexPackageDeclaration(IStrategoAppl packageDeclaration){
-		verifyConstructor( packageDeclaration.getConstructor(), getPackageDeclCon(), "Illegal PackageDeclaration");
+		verifyConstructor( packageDeclaration.getConstructor(), getCons().getPackageDeclCon(), "Illegal PackageDeclaration");
 	
 		indexPackageDeclaration(
 				(IStrategoAppl)  packageDeclaration.getSubterm(PackageDeclaration.PACKAGE_ID_INDEX), // package id
@@ -297,24 +305,24 @@
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
 		INamespace ns = symbolTable.newAnonymousNamespace(parentId);
 		
-		return this.getTermFactory().makeAppl(getLocalNamespaceTypeCon(), ns.namespaceUri().id());
+		return this.getTermFactory().makeAppl(getCons().getLocalNamespaceTypeCon(), ns.namespaceUri().id());
 	}
 	
 	public IStrategoTerm destroyScope(IStrategoAppl namespaceAppl) throws SpxSymbolTableException {
-		verifyConstructor( namespaceAppl.getConstructor(), this.getLocalNamespaceTypeCon(), "Expected LocalNamespace. This operation has not been implementated for other type of Namespace.");
+		verifyConstructor( namespaceAppl.getConstructor(), this.getCons().getLocalNamespaceTypeCon(), "Expected LocalNamespace. This operation has not been implementated for other type of Namespace.");
 		
 		IStrategoList id = getNamespaceId(namespaceAppl);
 		
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
 		INamespace deletedLocalNs = symbolTable.destroyNamespace(id);
 		
-		return _termFactory.makeAppl(getLocalNamespaceTypeCon(), deletedLocalNs.namespaceUri().id());
+		return _termFactory.makeAppl(getCons().getLocalNamespaceTypeCon(), deletedLocalNs.namespaceUri().id());
 	}
 	
 	// SymbolDef : namespace * id * type *  value -> Def  
 	public void indexSymbol(IStrategoAppl symbolDefinition) throws SpxSymbolTableException, IOException{	
 		final int NAMESPACE_ID_INDEX  = 0;
-		verifyConstructor(symbolDefinition.getConstructor(), getSymbolTableEntryDefCon(), "Illegal SymbolDefinition argument");
+		verifyConstructor(symbolDefinition.getConstructor(), getCons().getSymbolTableEntryDefCon(), "Illegal SymbolDefinition argument");
 		IStrategoConstructor typeCtor = null;
 		
 		try{
@@ -323,7 +331,7 @@
 			// It seems like the constructor does not exist in local type declarations. 
 			// Hence, defining it to be used further.
 			IStrategoConstructor ctor = ((IStrategoAppl)symbolDefinition.getSubterm(SpxSymbolTableEntry.TYPE_INDEX)).getConstructor();
-			typeCtor = ConstructorDef.newInstance(ctor.getName() , ctor.getArity()).index(_knownCons, ctor);
+			typeCtor = _spxConstructors.indexConstructor(ctor);
 		}
 		
 		// Constructing Spx Symbol-Table Entry from the provided symbolDefinition argument.  
@@ -351,7 +359,7 @@
 			throw new IllegalArgumentException(" resolveSymbols | Illegal symbolLookupTerm Argument ; expected 4 subterms. Found : " + searchCriteria.getSubtermCount());
 		String searchMode = asJavaString(searchCriteria.get(3)).trim();
 		IStrategoAppl typeAppl =  (IStrategoAppl)searchCriteria.getSubterm(2);
-		IStrategoConstructor typeCtor = getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
+		IStrategoConstructor typeCtor = getCons().getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
 		
 		Set<SpxSymbol> spxSymbols = null;
 		
@@ -382,7 +390,7 @@
 	    IStrategoList namespaceID = this.getNamespaceId(Tools.applAt(searchCriteria, 0));
 	    IStrategoTerm symbolID = Tools.termAt(searchCriteria, 1);
 	    IStrategoAppl typeAppl =  Tools.applAt(searchCriteria, 2);
-	    IStrategoConstructor typeCtor = getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
+	    IStrategoConstructor typeCtor = getCons().getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
 	    
 	    Set<SpxSymbol> spxSymbols = this.persistenceManager().spxSymbolTable()
 	    					.undefineSymbols(namespaceID, 
@@ -433,15 +441,13 @@
 		return resolvedSymbols;
 	}
 
-	
-
 	/**
 	 * @param symbolLookupTerm
 	 * @return
 	 * @throws IllegalArgumentException
 	 */
 	private IStrategoConstructor verifyKnownContructorExists(IStrategoAppl symbolType) throws IllegalArgumentException {
-		IStrategoConstructor typeCtor = getConstructor( symbolType.getConstructor().getName(), symbolType.getConstructor().getArity()) ;
+		IStrategoConstructor typeCtor = getCons().getConstructor( symbolType.getConstructor().getName(), symbolType.getConstructor().getArity()) ;
 		if(typeCtor == null) {
 			throw new IllegalArgumentException("Illegal Argument . Unknown Symbol Type. Found " + symbolType.getConstructor());
 		}
@@ -455,15 +461,15 @@
 	 */
 	private IStrategoList getNamespaceId(IStrategoAppl namespaceTypedQname) throws SpxSymbolTableException {
 		IStrategoList namespaceId;
-		if (namespaceTypedQname.getConstructor() == getModuleQNameCon() || namespaceTypedQname.getConstructor() == getPackageQNameCon()) {
+		if (namespaceTypedQname.getConstructor() == getCons().getModuleQNameCon() || namespaceTypedQname.getConstructor() == getCons().getPackageQNameCon()) {
 			
 			namespaceId = IdentifiableConstruct.getID(this, (IStrategoAppl) namespaceTypedQname.getSubterm(0));
 			
-		} else if (namespaceTypedQname.getConstructor() == getGlobalNamespaceTypeCon()) {
+		} else if (namespaceTypedQname.getConstructor() == getCons().getGlobalNamespaceTypeCon()) {
 			
 			namespaceId = GlobalNamespace.getGlobalNamespaceId(this);
 			
-		} else if ( namespaceTypedQname.getConstructor() == getLocalNamespaceTypeCon()){
+		} else if ( namespaceTypedQname.getConstructor() == getCons().getLocalNamespaceTypeCon()){
 			
 			namespaceId = LocalNamespace.getLocalNamespaceId(namespaceTypedQname.getSubterm(0));
 		} 
@@ -480,7 +486,7 @@
 	 */
 	public void indexLanguageDescriptor (IStrategoAppl languageDescriptor)
 	{
-		verifyConstructor(languageDescriptor.getConstructor(), getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
+		verifyConstructor(languageDescriptor.getConstructor(), getCons().getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
 
 		IStrategoList qualifiedPackageId = PackageDeclaration.getPackageId(this, (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
 		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
@@ -514,19 +520,19 @@
 	 * @param importReferences
 	 */
 	public void indexImportReferences(IStrategoAppl importReferences) throws SpxSymbolTableException{
-		verifyConstructor(importReferences.getConstructor(), this.getImportDeclCon(), "Illegal ImportDeclaration Constructor encountered.");
+		verifyConstructor(importReferences.getConstructor(), getCons().getImportDeclCon(), "Illegal ImportDeclaration Constructor encountered.");
 		
 		IStrategoAppl namespaceId = (IStrategoAppl) importReferences.getSubterm(0);
 		IStrategoList imports = (IStrategoList) importReferences.getSubterm(1);
 		IStrategoList packageId; 
 		
-		if (namespaceId.getConstructor() == getModuleQNameCon()) {
+		if (namespaceId.getConstructor() == getCons().getModuleQNameCon()) {
 			packageId = persistenceManager()
 					.spxModuleTable()
 					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
 			
 			
-		} else if (namespaceId.getConstructor() == getPackageQNameCon()) {
+		} else if (namespaceId.getConstructor() == getCons().getPackageQNameCon()) {
 			packageId = PackageDeclaration.getPackageId(this, namespaceId);
 		} else
 			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
@@ -563,12 +569,12 @@
 	public IStrategoTerm getImportReferences(IStrategoAppl namespaceId) throws SpxSymbolTableException {
 		IdentifiableConstruct ns; 
 
-		if (namespaceId.getConstructor() == getModuleQNameCon()) {
+		if (namespaceId.getConstructor() == getCons().getModuleQNameCon()) {
 			IStrategoList packageId = persistenceManager()
 					.spxModuleTable()
 					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
 			ns = lookupPackageDecl(packageId);
-		} else if (namespaceId.getConstructor() == getPackageQNameCon()) {
+		} else if (namespaceId.getConstructor() == getCons().getPackageQNameCon()) {
 			ns = this.lookupPackageDecl(namespaceId);
 		} else
 			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
@@ -703,7 +709,7 @@
 		if(Tools.isTermAppl(res))
 		{	
 			if( Utils.DIRTY  == asJavaString(queryType)) {
-				retValue  = this.getDirtyModuleDeclarations((IStrategoAppl)res);
+				retValue  = this.getDirtyModuleDeclarations((IStrategoAppl)res , (IStrategoAppl)searchQueryTuple.getSubterm(2)) ;
 			}else if (Utils.All == asJavaString(queryType)){
 				retValue  = this.getModuleDeclarations((IStrategoAppl)res);
 			}else
@@ -759,17 +765,28 @@
 	}	
 	
 	
-	public IStrategoList getDirtyModuleDeclarations(IStrategoAppl packageQName) throws SpxSymbolTableException {
+	public IStrategoList getDirtyModuleDeclarations(IStrategoAppl packageQName , IStrategoAppl qualifiedFor) throws SpxSymbolTableException {
 		logMessage("getDirtyModuleDeclarations| Arguments : " + packageQName);
-		List<ModuleDeclaration> dirtyModuleDeclarations  = new ArrayList<ModuleDeclaration>();
 		
+		List<ModuleDeclaration> dirtyModuleDeclarations  = new ArrayList<ModuleDeclaration>();
 		IStrategoList packageID = PackageDeclaration.getPackageId(this, packageQName);
 		
 		Iterable<ModuleDeclaration> decls = getModuleDeclarations(packageID);
 		logMessage("getDirtyModuleDeclarations | Found following result from SymbolTable : " + decls);
 		
+		long ts = 0;
+		if( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCompileCon())){
+			ts = this._initializedOn;
+		}
+		else if ( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCodeGenerateCon())){
+			ts = this._previousSuccessfulCodeGenerationDoneOn;
+		}
+		else
+			throw new SpxSymbolTableException("Illegal qualifiedFor constructor at getDirtyModuleDeclarations");
+		
+		
 		for(ModuleDeclaration decl : decls ){
-			if( decl.getLastModifiedOn() >= this._initializedOn){ 
+			if( decl.getLastModifiedOn() >= ts){ 
 				dirtyModuleDeclarations.add(decl);
 			}
 		}
@@ -988,10 +1005,7 @@
 	 * 
 	 * @param message
 	 */
-	private void logMessage(String message) {
-		
-		_persistenceManager.logMessage("SpxSemanticIndexFacade", message);
-	}
+	private void logMessage(String message) { _persistenceManager.logMessage("SpxSemanticIndexFacade", message); }
 	
 	
 	String fromFileURI(URI uri) {
@@ -999,17 +1013,13 @@
 		return file.toString();
 	}
 
-	IOAgent getIOAgent() {
-		return _agent;
-	}
+	IOAgent getIOAgent() { return _agent; }
 	
 	/**
 	 * Prints error message
 	 * @param errMessage
 	 */
-	void printError(String errMessage){
-		_agent.printError(errMessage);
-	}
+	void printError(String errMessage){ _agent.printError(errMessage); }
 	
 	/**
 	 * Force an imploder attachment for a term.
@@ -1034,124 +1044,5 @@
 		return term;
 	}
 
-	//TODO : better handling of the known constructors
-	public IStrategoConstructor getPackageDeclCon() { return getConstructor("PackageDecl",2);}
-	
-	public IStrategoConstructor getModuleDeclCon() { return getConstructor("ModuleDecl", 3); }
-
-	public IStrategoConstructor getModuleDefCon() {	return getConstructor("ModuleDef" , 5);}
-
-	public IStrategoConstructor getLanguageDescriptorCon() { return getConstructor("LanguageDescriptor" , 5);}
-
-	public IStrategoConstructor getModuleQNameCon() {return getConstructor("Module" , 1); }
-
-	public IStrategoConstructor getPackageQNameCon() { return getConstructor("Package" , 1);}
-	
-	public IStrategoConstructor getQNameCon() { return getConstructor("QName" , 1); }
-	
-	public IStrategoConstructor getImportDeclCon() {return getConstructor("ImportDecl",2);}
-	
-	public IStrategoConstructor getGlobalNamespaceTypeCon() {return getConstructor("Globals",0);}
-	
-	public IStrategoConstructor getPackageNamespaceTypeCon() {return getConstructor("Package",0);}
-	
-	public IStrategoConstructor getModuleNamespaceTypeCon() {return getConstructor("Module",0);}
-	
-	public IStrategoConstructor getSymbolTableEntryDefCon() {return getConstructor("SymbolDef",4);}
-	
-	public IStrategoConstructor getLocalNamespaceTypeCon() { return getConstructor("Locals",1);  }
-	
-	public IStrategoConstructor getConstructor(String symbolTypeCons, int arity) {
-		return _knownCons.get(ConstructorDef.newInstance(symbolTypeCons ,arity));
-	}
-
-	private void initKnownConstructors(){
-		ConstructorDef.newInstance("ModuleDef"  ,5).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("ModuleDecl" ,3).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("SymbolDef"  ,4).index(_knownCons, _termFactory);
-
-		ConstructorDef.newInstance("PackageDecl",2).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("ImportDecl" ,2).index(_knownCons, _termFactory);
-		
-		ConstructorDef.newInstance("LanguageDescriptor", 5).index(_knownCons, _termFactory);
-		
-		ConstructorDef.newInstance("Module" ,  1).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("Package",  1).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("QName"  ,  1).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("Locals" ,  1).index(_knownCons, _termFactory);
-		
-		ConstructorDef.newInstance("Globals", 0).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("Package", 0).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("Module" , 0).index(_knownCons, _termFactory);
-	}
-	
-	private final HashMap<ConstructorDef , IStrategoConstructor> _knownCons;
-	private static class ConstructorDef
-	{
-		private String _name ;
-		private int _arity;
-		
-		ConstructorDef( String name , int arity) {  _name =  name ; _arity = arity; }
-		
-		static ConstructorDef newInstance( String name , int arity) {  return new ConstructorDef(name, arity); }
-		
-		private IStrategoConstructor toStrategoConstructor(ITermFactory fac) {  return fac.makeConstructor(_name, _arity);}
-		
-		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , ITermFactory fac){
-			return this.index(cons, this.toStrategoConstructor(fac));
-		}
-		
-		IStrategoConstructor index(HashMap<ConstructorDef , IStrategoConstructor> cons , IStrategoConstructor ctor){
-			cons.put(this, ctor) ;
-			return ctor;
-		}
-	
-		@Override
-		public String toString() {
-			return "ConstructorDef [_name=" + _name + ", _arity=" + _arity
-					+ "]";
-		}
-
-		/* (non-Javadoc)
-		 * @see java.lang.Object#hashCode()
-		 */
-		@Override
-		public int hashCode() {
-			final int prime = 31;
-			int result = 1;
-			result = prime * result + _arity;
-			result = prime * result + ((_name == null) ? 0 : _name.hashCode());
-			return result;
-		}
-
-		/* (non-Javadoc)
-		 * @see java.lang.Object#equals(java.lang.Object)
-		 */
-		@Override
-		public boolean equals(Object obj) {
-			if (this == obj)
-				return true;
-			if (obj == null)
-				return false;
-			if (getClass() != obj.getClass())
-				return false;
-			ConstructorDef other = (ConstructorDef) obj;
-			if (_arity != other._arity)
-				return false;
-			if (_name == null) {
-				if (other._name != null)
-					return false;
-			} else if (!_name.equals(other._name))
-				return false;
-			return true;
-		}
-		
-	}
-	
-	public void clearCache() throws IOException{
-		this.persistenceManager().clearCache();
-		
-	}
-
-
+	public void clearCache() throws IOException{ persistenceManager().clearCache();	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -59,7 +59,7 @@
 	 */
 	private void addManagedImport(SpxSemanticIndexFacade idxFacade,	IStrategoTerm i) throws SpxSymbolTableException {
 		IStrategoAppl packageRef = (IStrategoAppl)i;
-		if( packageRef.getConstructor() ==  idxFacade.getPackageQNameCon()){
+		if( packageRef.getConstructor() ==  idxFacade.getCons().getPackageQNameCon()){
 			IStrategoList id = PackageDeclaration.getPackageId(idxFacade, packageRef);
 			PackageDeclaration decl = idxFacade.lookupPackageDecl(id);
 			if((decl != null) && (!SpxSymbol.verifyEquals(this.id, id))){	
@@ -133,7 +133,7 @@
 	static IStrategoAppl toIdTerm ( SpxSemanticIndexFacade facade , IStrategoConstructor namespaceCon, IStrategoList id){
 		ITermFactory factory = facade.getTermFactory();
 		
-		IStrategoConstructor qnameCons = facade.getQNameCon();
+		IStrategoConstructor qnameCons = facade.getCons().getQNameCon();
 		IStrategoAppl qnameAppl = factory.makeAppl(qnameCons, id);
 		return factory.makeAppl(namespaceCon, qnameAppl);
 	}
@@ -148,7 +148,7 @@
 	 */
 	public static IStrategoList getID(SpxSemanticIndexFacade facade, IStrategoAppl qName) {
 		
-		if(qName.getConstructor() == facade.getQNameCon())
+		if(qName.getConstructor() == facade.getCons().getQNameCon())
 			return (IStrategoList)qName.getSubterm(0);
 		
 		throw new IllegalArgumentException("Invalid QName : " + qName);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -208,7 +208,7 @@
 		
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		
-		IStrategoConstructor ctr = idxFacade.getLanguageDescriptorCon();
+		IStrategoConstructor ctr = idxFacade.getCons().getLanguageDescriptorCon();
 		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(idxFacade, this.getId());
 		
 		IStrategoTerm retTerm = termFactory.makeAppl(ctr, packageQNameAppl , this.languageNames , this.languageIDs , this.esvDeclaredStartSymbols , this.sdfDeclaredStartSymbols);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -50,7 +50,7 @@
 	
 	
 	public static IStrategoList getModuleId(SpxSemanticIndexFacade facade, IStrategoAppl moduleQName ){
-		IStrategoConstructor moduleCon  = facade.getModuleQNameCon();
+		IStrategoConstructor moduleCon  = facade.getCons().getModuleQNameCon();
 		
 		if(moduleCon   == moduleQName.getConstructor())
 			return getID(facade, (IStrategoAppl)moduleQName.getSubterm(ModuleTypedQNameIndex));	
@@ -60,12 +60,12 @@
 	
 	public static IStrategoAppl toModuleQNameAppl(SpxSemanticIndexFacade facade , ModuleDeclaration decl)
 	{
-		return toIdTerm(facade, facade.getModuleQNameCon() , decl.getId());
+		return toIdTerm(facade, facade.getCons().getModuleQNameCon() , decl.getId());
 	}
 	
 	public static IStrategoAppl toModuleQNameAppl(SpxSemanticIndexFacade facade , IStrategoList id)
 	{
-		return toIdTerm(facade, facade.getModuleQNameCon() , id);
+		return toIdTerm(facade, facade.getCons().getModuleQNameCon() , id);
 	}
 
 	/* Transforms {@link ModuleDeclaration} to following term : 
@@ -79,7 +79,7 @@
 		
 		ITermFactory termFactory = idxFacade.getTermFactory();
 
-		IStrategoConstructor moduleDeclCons = idxFacade.getModuleDeclCon();
+		IStrategoConstructor moduleDeclCons = idxFacade.getCons().getModuleDeclCon();
 		
 		IStrategoAppl moduleQNameAppl =toModuleQNameAppl( idxFacade,  this);
 		IStrategoString resAbsPathTerm = termFactory.makeString(resourceAbsPath) ;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -47,7 +47,7 @@
 	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade) {
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		IStrategoTerm moduleDeclarationTerm = super.toTerm(idxFacade);
-		IStrategoConstructor moduleDefCons = idxFacade.getModuleDefCon();
+		IStrategoConstructor moduleDefCons = idxFacade.getCons().getModuleDefCon();
 		
 		IStrategoTerm retTerm = termFactory.makeAppl(
 				moduleDefCons,

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -111,7 +111,7 @@
 	public IStrategoTerm toTerm(SpxSemanticIndexFacade idxFacade){
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		
-		IStrategoConstructor packageDeclCons = idxFacade.getPackageDeclCon();
+		IStrategoConstructor packageDeclCons = idxFacade.getCons().getPackageDeclCon();
 		IStrategoList absPathList = termFactory.makeList();
 		
 		for(String resourceAbsPath : resourceAbsPaths){
@@ -136,7 +136,7 @@
 	 * @return {@link IStrategoList}
 	 */
 	public static IStrategoList getPackageId(SpxSemanticIndexFacade facade,IStrategoAppl packageQName){
-		final IStrategoConstructor packageQNameCon = facade.getPackageQNameCon();
+		final IStrategoConstructor packageQNameCon = facade.getCons().getPackageQNameCon();
 		
 		if(packageQNameCon == packageQName.getConstructor()){
 			return getID( facade, (IStrategoAppl)packageQName.getSubterm(0));	
@@ -165,7 +165,7 @@
 	}
 
 	public static IStrategoAppl toPackageQNameAppl (SpxSemanticIndexFacade facade, IStrategoList id){
-		return toIdTerm(facade ,  facade.getPackageQNameCon(), id);
+		return toIdTerm(facade ,  facade.getCons().getPackageQNameCon(), id);
 	}
 
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -50,7 +50,7 @@
 }
 	
 	public IStrategoConstructor typeCons(SpxSemanticIndexFacade facade){
-		return facade.getConstructor( type() , 0);
+		return facade.getCons().getConstructor( type() , 0);
 	}
 	
 	public void setNamespace(NamespaceUri id){ _namespace = id;}
@@ -88,13 +88,13 @@
 		IStrategoTerm deserializedDataToTerm = this.deserializedDataToTerm(termFactory, facade.getTermAttachmentSerializer());
 		
 		//Enclosing Namespace 
-		IStrategoConstructor qnameCons = facade.getQNameCon();
+		IStrategoConstructor qnameCons = facade.getCons().getQNameCon();
 		IStrategoAppl nsQNameAppl = this.namespaceUri().resolve(facade.persistenceManager().spxSymbolTable()).toTypedQualifiedName(facade);
 		
 		//ID/Key 
 		IStrategoTerm id = this.Id(termFactory); //TODO : It might require term conversion.
 
-		return (IStrategoTerm)termFactory.makeAppl( facade.getSymbolTableEntryDefCon(),
+		return (IStrategoTerm)termFactory.makeAppl( facade.getCons().getSymbolTableEntryDefCon(),
 				nsQNameAppl,  //ns qname 
 				spxTypeCtorAppl,  // type
 				id,			  //id	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -209,7 +209,7 @@
 	public void testUnknownNamespaceShouldThrowSpxSymbolTableException() throws IOException{
 			
 		// defining following composite ID :  (Global() , "TestId")
-		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());
 		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId")); 
 		IStrategoAppl typeAppl = namespaceAppl ; 
 		IStrategoAppl pQnameUnknown = (IStrategoAppl)termFactory().parseFromString("Package(QName(["+"\"lang\", \"unknown\"" +"]))");
@@ -231,7 +231,7 @@
 		setupScopeTree();
 
 		// defining a composite key 
-		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());
 		// defining following composite ID :  (Global() , "TestId")
 		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId")); 
 		// defining Data 
@@ -263,7 +263,7 @@
 		
 		setupScopeTree();
 
-		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());// defining a composite key 
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());// defining a composite key 
 		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId"));// defining following composite ID :  (Global() , "TestId")
 	 	IStrategoTerm data = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade); // defining Data
 		IStrategoAppl typeAppl = namespaceAppl ;// setting Type to Global() 
@@ -300,7 +300,7 @@
 		setupScopeTree();
 
 		// defining a composite key 
-		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());
 		// defining following composite ID :  (Global() , "TestId")
 		IStrategoTerm symbolId = termFactory().makeTuple( namespaceAppl , termFactory().makeString("TestId")); 
 		// defining Data 
@@ -330,7 +330,7 @@
 	public void testDefiningGlobalSymbols() throws IOException, SpxSymbolTableException {
 		setupScopeTree();
 	
-		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());
 		
 		IStrategoTerm symbolId1 = termFactory().makeTuple( namespaceAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "TestId") 
 	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
@@ -358,7 +358,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0) 
 				);
 		
 		assertEquals(2 , resolvedSymbols.size());
@@ -367,7 +367,7 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbol( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0) 
 				);
 		
 		assertEquals(1 , resolvedSymbols.size());
@@ -375,7 +375,7 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getConstructor("STRDef", 0) 
+				_facade.getCons().getConstructor("STRDef", 0) 
 				);
 		
 		assertEquals( 1 , resolvedSymbols.size());
@@ -398,7 +398,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolUnknownId,
-				_facade.getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0) 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -418,7 +418,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0) 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -443,7 +443,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP2M1),
 				symbolId1,
-				_facade.getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0) 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -466,7 +466,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade, this.packageDeclaration2.getId()),
 				symbolId1,
-				_facade.getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0) 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -488,7 +488,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				internalModuleAppl,
 				symbolId1,
-				_facade.getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0) 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -517,7 +517,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
-				_facade.getConstructor("ModuleDef", 0) 
+				_facade.getCons().getConstructor("ModuleDef", 0) 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -536,7 +536,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
-				_facade.getConstructor("ModuleDef", 0) 
+				_facade.getCons().getConstructor("ModuleDef", 0) 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -562,7 +562,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()),
 				symbolId1,
-				_facade.getConstructor("ModuleDef", 0) 
+				_facade.getCons().getConstructor("ModuleDef", 0) 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -570,7 +570,7 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()),
 				symbolId1,
-				_facade.getConstructor("ModuleDef", 0) 
+				_facade.getCons().getConstructor("ModuleDef", 0) 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -607,7 +607,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
 				symbolId3,	//looking for 
-				_facade.getConstructor("ModuleDef", 0) // with type 
+				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		
@@ -644,7 +644,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()), // search origin
 				symbolId3, // loooking for 
-				_facade.getConstructor("ModuleDef", 0) // with type 
+				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -684,7 +684,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
-				tfacade.getConstructor("ModuleDef", 0) // with type 
+				tfacade.getCons().getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		// current import chain is as following : p1-> p2 ->p3->p1
@@ -700,7 +700,7 @@
 		resolvedSymbols = (Set<SpxSymbol>)tfacade.resolveSymbol(
 				ModuleDeclaration.toModuleQNameAppl(tfacade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
-				tfacade.getConstructor("ModuleDef", 0) // with type 
+				tfacade.getCons().getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -715,7 +715,7 @@
 	
 		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(moduleQnameAppl1);
 		
-		assertEquals(_facade.getLocalNamespaceTypeCon(), nsAppl.getConstructor());
+		assertEquals(_facade.getCons().getLocalNamespaceTypeCon(), nsAppl.getConstructor());
 		
 		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		
@@ -730,7 +730,7 @@
 	
 		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(moduleQnameAppl1);
 		
-		assertEquals(_facade.getLocalNamespaceTypeCon(), nsAppl.getConstructor());
+		assertEquals(_facade.getCons().getLocalNamespaceTypeCon(), nsAppl.getConstructor());
 		
 		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		assertNotNull(ns);
@@ -760,7 +760,7 @@
 		
 		//Creating anonymous scope
 		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(moduleQnameAppl1);
-		assertEquals(_facade.getLocalNamespaceTypeCon(), nsAppl.getConstructor());
+		assertEquals(_facade.getCons().getLocalNamespaceTypeCon(), nsAppl.getConstructor());
 		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		assertNotNull(ns);
 		
@@ -769,7 +769,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				nsAppl, // search origin
 				symbolId1,	//looking for 
-				_facade.getConstructor("ModuleDef", 0) // with type 
+				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		
@@ -781,7 +781,7 @@
 		assertTrue(SpxSymbol.verifyEquals( this.moduleDeclarationP1M1.getId() , actual.namespaceUri().id()) );
 	
 		//Resolve symbol defined in GlobalScope 
-		IStrategoAppl globalNamespaceAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		IStrategoAppl globalNamespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());
 		
 		IStrategoTerm symbolId2 = termFactory().makeTuple( globalNamespaceAppl , termFactory().makeString("1")); // defining following composite ID :  (Global() , "TestId") 
 	 	IStrategoTerm data2 = (IStrategoAppl)moduleDeclarationP1M2.toTerm(_facade);	// defining Data
@@ -793,7 +793,7 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				nsAppl, // search origin
 				symbolId2,	//looking for 
-				_facade.getConstructor("SDFDef", 0) // with type 
+				_facade.getCons().getConstructor("SDFDef", 0) // with type 
 				);
 		
 		
@@ -811,7 +811,7 @@
 	public void testResolveInAnonymousScope() throws IOException, SpxSymbolTableException {
 		createExtendedScopeTree();
 		
-		IStrategoAppl globalNsAppl = termFactory().makeAppl(_facade.getGlobalNamespaceTypeCon());
+		IStrategoAppl globalNsAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());
 		
 		//adding a symbol in moduleDeclarationP1M1
 		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
@@ -821,7 +821,7 @@
 		
 		//Creating anonymous scope
 		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(globalNsAppl);
-		assertEquals(_facade.getLocalNamespaceTypeCon(), nsAppl.getConstructor());
+		assertEquals(_facade.getCons().getLocalNamespaceTypeCon(), nsAppl.getConstructor());
 		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		assertNotNull(ns);
 		
@@ -832,7 +832,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				nsAppl, // search origin
 				symbolId1,	//looking for 
-				_facade.getConstructor("ModuleDef", 0) // with type 
+				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
 				);
 		
 		
@@ -978,7 +978,7 @@
 	}
 	
 	private void indexImportRef ( PackageDeclaration decl ,  PackageDeclaration importPackageDecl) throws SpxSymbolTableException{
-		IStrategoConstructor importCtor  = _facade.getImportDeclCon();
+		IStrategoConstructor importCtor  = _facade.getCons().getImportDeclCon();
 		IStrategoAppl importDecl = this.termFactory().makeAppl(importCtor,  
 				PackageDeclaration.toPackageQNameAppl(_facade,decl.getId()),
 				termFactory().makeList(
@@ -1020,7 +1020,7 @@
 	
 	private IStrategoAppl createEntry(IStrategoAppl namespaceAppl , IStrategoTerm id , IStrategoAppl typeAppl, IStrategoTerm data){
 		
-		IStrategoConstructor ctor = _facade.getSymbolTableEntryDefCon();
+		IStrategoConstructor ctor = _facade.getCons().getSymbolTableEntryDefCon();
 		IStrategoAppl symbolEntryAppl = (IStrategoAppl)termFactory().makeAppl(ctor, namespaceAppl , id , typeAppl,data);
 		return symbolEntryAppl;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -169,10 +169,10 @@
 		IStrategoAppl pQnameAppl3 = indexTestPackageDecl(packageName3, absPathString1);
 		IStrategoAppl mQnameAppl2  = indexTestModuleDefs ( "m2" , packageName3 , absPathString1);
 		
-		IStrategoAppl importDecl1 = this.termFactory().makeAppl(_facade.getImportDeclCon(), pQnameAppl3,  this.termFactory().makeList(pQnameAppl1) );
+		IStrategoAppl importDecl1 = this.termFactory().makeAppl(_facade.getCons().getImportDeclCon(), pQnameAppl3,  this.termFactory().makeList(pQnameAppl1) );
 		this._facade.indexImportReferences(importDecl1);
 		
-		IStrategoAppl importDecl2 = this.termFactory().makeAppl(_facade.getImportDeclCon(), mQnameAppl2,  this.termFactory().makeList(pQnameAppl2) );
+		IStrategoAppl importDecl2 = this.termFactory().makeAppl(_facade.getCons().getImportDeclCon(), mQnameAppl2,  this.termFactory().makeList(pQnameAppl2) );
 		this._facade.indexImportReferences(importDecl2);
 		
 		
@@ -215,7 +215,7 @@
 		
 		IStrategoAppl moduleDeclaration = (IStrategoAppl)_facade.getModuleDeclaration( mQnameAppl );
 		
-		_facade.verifyConstructor(moduleDeclaration.getConstructor(), _facade.getModuleDeclCon(), "Wrong Module Declaration Constructs");
+		_facade.verifyConstructor(moduleDeclaration.getConstructor(), _facade.getCons().getModuleDeclCon(), "Wrong Module Declaration Constructs");
 	}	
 	
 	public void testIndexPackageDeclaration() throws SpxSymbolTableException 
@@ -232,7 +232,7 @@
 		
 		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
 		
-		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration"); 
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getCons().getPackageDeclCon(), "Wrong Package Declaration"); 
 	}
 	
 	public void testIndexPackageDeclarationInMultipleFiles() throws SpxSymbolTableException {
@@ -249,7 +249,7 @@
 		
 		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
 		
-		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getCons().getPackageDeclCon(), "Wrong Package Declaration");
 	
 		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
 	}
@@ -274,7 +274,7 @@
 		//getting package declaration
 		IStrategoAppl packageDeclaration = (IStrategoAppl)_facade.getPackageDeclaration(pQnameAppl);
 		
-		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getPackageDeclCon(), "Wrong Package Declaration");
+		_facade.verifyConstructor(packageDeclaration.getConstructor(), _facade.getCons().getPackageDeclCon(), "Wrong Package Declaration");
 		
 		assertEquals(2, ((IStrategoList)packageDeclaration.getSubterm(1)).getAllSubterms().length);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java	Tue Nov  1 21:21:19 2011	(r23544)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java	Tue Nov  1 21:30:39 2011	(r23545)
@@ -49,15 +49,15 @@
 		SpxSymbolTableEntry entry = 
 			SpxSymbolTableEntry.newEntry()
 						  .with(id)
-						  .instanceOf(_facade.getGlobalNamespaceTypeCon())	
+						  .instanceOf(_facade.getCons().getGlobalNamespaceTypeCon())	
 					      .uses(_facade.getTermAttachmentSerializer())
 					      .data(data)
 					      .build();
 		
 		assertTrue(entry.value != null);
 		assertTrue(entry.value.namespaceUri() == null);
-		assertEquals(_facade.getGlobalNamespaceTypeCon().getName() , entry.value.type());
-		assertEquals(_facade.getGlobalNamespaceTypeCon(), entry.value.typeCons(_facade));
+		assertEquals(_facade.getCons().getGlobalNamespaceTypeCon().getName() , entry.value.type());
+		assertEquals(_facade.getCons().getGlobalNamespaceTypeCon(), entry.value.typeCons(_facade));
 		assertTrue(entry.key != null);
 	}
 	

From M.A.Akhter at student.tudelft.nl  Tue Nov  1 23:16:21 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 01 Nov 2011 22:16:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23546 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax
Message-ID: <20111101221621.2E4EFCC0DB@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov  1 22:16:20 2011
New Revision: 23546
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23546&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf	Tue Nov  1 21:30:39 2011	(r23545)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf	Tue Nov  1 22:16:20 2011	(r23546)
@@ -18,14 +18,14 @@
 	    
 	    "projectreferences" ":" ProjectName* 	-> ConfigSection {cons("SpxProjects")}
 	    
-	    "debug-switch:" {DebugOption ","}* 	-> ConfigSection {cons("Debug")}
+	    "debug" ":" {DebugOption ","}* 	-> ConfigSection {cons("Debug")}
 	    
 	    "compiler" -> DebugOption{cons("DebugCompiler")}
 	    "declaration" -> DebugOption{cons("DebugDeclaration")}
 	    "analysis" -> DebugOption{cons("DebugAnalysis")}
 	    "symboltable" -> DebugOption{cons("DebugSymbolTable")}
 	    "all" -> DebugOption{cons("DebugAll")}
-	    
+	    "none" -> DebugOption{cons("DebugNone")}
 	    
 	    "codegen:" CodeGenDefinition*    			 	-> ConfigSection{cons("CodeGeneration")}
 	    "todir" ":" RelativePath				  			-> CodeGenDefinition {cons("OutputDirectory")}

From v.vergu at gmail.com  Wed Nov  2 01:11:23 2011
From: v.vergu at gmail.com (Vlag Vergu)
Date: Wed, 02 Nov 2011 00:11:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23547 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/lib
Message-ID: <20111102001123.A8D00CC08F@mx4.tudelft.nl>

Author: VladVergu
Date: Wed Nov  2 00:11:22 2011
New Revision: 23547
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23547&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str	Tue Nov  1 22:16:20 2011	(r23546)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str	Wed Nov  2 00:11:22 2011	(r23547)
@@ -125,6 +125,7 @@
   
   origin-term      = prim("SSL_EXT_origin_term", <id>)
   origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-offset    = prim("SSL_EXT_origin_offset", <id>)
   origin-location  = prim("SSL_EXT_origin_location", <id>)
   origin-line      = origin-location => (<id>, _, _, _)
   origin-column    = origin-location => (_, <id>, _, _)

From m.dejonge at tudelft.nl  Wed Nov  2 10:09:04 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Nov 2011 09:09:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23548 -
	sglr-recovery/trunk/SyntaxErrorGen
Message-ID: <20111102090904.52D28108C006@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov  2 09:09:03 2011
New Revision: 23548
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23548&sc=1

Log:
Share project "SyntaxErrorGen"

Added:
   sglr-recovery/trunk/SyntaxErrorGen/

From m.dejonge at tudelft.nl  Wed Nov  2 10:16:33 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Nov 2011 09:16:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23549 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111102091633.AE6067F801F@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov  2 09:16:33 2011
New Revision: 23549
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23549&sc=1

Log:
1. Edit Scenarios: 
- Generate Completion Errors
2. Automatic Oracles: 
- Fail/Succes, 
- Excellent/Good/Poor approximation based on heuristic comparison with known error region
3. Language instantiation
4. workflow: base-file => error files/ region-oracle files => ast-diff => EXCELLENT/GOOD/POOR/FAILED

Added:
   sglr-recovery/trunk/SyntaxErrorGen/trans/

From m.dejonge at tudelft.nl  Wed Nov  2 10:17:23 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Nov 2011 09:17:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23550 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111102091724.0013F7F802E@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov  2 09:17:23 2011
New Revision: 23550
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23550&sc=1

Log:
error generation / oracle heuristics

Added:
   sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/err.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/signatures-error-gen.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str	Wed Nov  2 09:17:23 2011	(r23550)
@@ -0,0 +1,387 @@
+//TODO: eval (x,y) y not parent of ERR "rec affects unrelated elem", (x,()) "rec constructs new list elem"
+//TODO: eval ([...], [...])
+
+module apply-oracle 
+
+imports 
+	signatures-error-gen
+	configuration
+	helpers
+
+rules
+
+apply-success-failure-oracle(recover-parse):
+	erroneous-text -> (recovered-ast, oracle-result)
+	where
+		if recovered-ast := <recover-parse> erroneous-text then
+			oracle-result := SUCCEEDED()
+		else
+			(recovered-ast, oracle-result) := (None(), FAILED())
+		end
+		
+apply-error-region-oracle:
+	(recovered-ast, oracle-ast) -> (ast-diffs, evaluations, <fetch-worst-region-result> evaluations)
+	where 
+		ast-diffs   := <ast-diff> (recovered-ast, oracle-ast); 
+		evaluations := <
+			alltd(\ERROR_REGION(ids, err-string) -> ERROR_REGION(ids)\); 
+			map(eval-oracle); 
+			flatten-list
+		> ast-diffs
+
+fetch-worst-region-result = 
+	fetch-elem(?POOR()) <+
+	fetch-elem(?GOOD()) <+
+	fetch-elem(?EXCELLENT()) 
+
+rules //evaluation criteria
+	
+// effects of error do not stretch further then the context of its ancestor list element
+// example: erroneous statement does not affect sibling statements nor the parent node
+// recoveries that affect unrelated list elements or their context are always evaluated as POOR
+recovery-affects-unrelated-list-elements:
+	(recover-diff-term, oracle-diff-term) -> (recover-diff-term, oracle-diff-term)
+	where
+		<oncetd(?[_,_|_]; fetch(is-parent-of-error-region))> oracle-diff-term
+
+// effects of error do not stretch further then the surrounding context of the error
+// the parent node may be affected (example: Rule => RuleNoCond), 
+// but the unrelated subterms must be the same (with exception of the directly preceeding sibling)
+//example: a [:] b;c EXCELLENT a = b;c,  POOR(GOOD?) a: b -> c 
+recovery-affects-subterms-outside-error-region-context:
+	(recover-diff-term, oracle-diff-term) -> (recover-diff-term, oracle-diff-term)
+	where 
+		oracle-subterms-outside := <collect-subterms-outside-error-context> oracle-diff-term;
+		<not(map(is-subterm-of(|recover-diff-term)))> oracle-subterms-outside
+
+//in order to be EXCELLENT, all leafnodes (except one) must be preserved by the recovery
+//the discarded identifier must be in the error region (or directly preceding an empty error region?).
+//reason: unlikely that programmar types more then one identifier by accident, also, needed for code completion
+//However: single id regions are reasonable to skip, sometimes best recovery because of not-introduce criteria 
+recovery-discards-leafnodes(|max):
+	(recover-diff-term, oracle-diff-term) -> (recover-diff-term, oracle-diff-term)
+	where
+		recovered-leaves := <collect-om(is-leaf; not(?[]), conc)> recover-diff-term;
+		oracle-leaves := <collect-om(is-leaf; not(?[]), conc)> oracle-diff-term;
+		diff-size := <subt> (<length> oracle-leaves, <length> recovered-leaves);
+		(
+			<gt> (diff-size, max) <+ //check protects against situation that one term occurs more then once 
+			<gt> (<diff; length> (oracle-leaves, recovered-leaves), max) //checks number of lost oracle terms
+		)
+
+//recoveries that accidentally introduce new identifiers/leafnodes are considered poor
+//since they obscure edit services and error reporting
+// example: keywords seen as identifier in context free languages
+//an exception is made for recovery specific leaves such as NULL() in completion recovery //TODO
+//error region is hard to control since keywords may be broken and correctly(?) seen as id
+recovery-introduces-leafnodes:
+	(recover-diff-term, oracle-diff-term) -> (recover-diff-term, oracle-diff-term)
+	where
+		recovered-leaves := <collect-om(is-leaf; not(?[]))> recover-diff-term;
+		oracle-leaves := <collect-om(is-leaf; not(?[]))> oracle-diff-term;
+		introduced-leaves := <diff> (recovered-leaves, oracle-leaves);
+		<not(?[])> introduced-leaves
+		//PROBLEM: wit(h) may be seen as identifier 
+
+//Unlikely that "human intention" involves deleting or replacing more then 4 tokens
+//or manipulations at more then 2 different locations
+recovery-implies-too-many-token-manipulations:
+	(recover-diff-term, oracle-diff-term) -> (recover-diff-term, oracle-diff-term)
+	where
+		rec-tokens := <origin-token-stream; filter(is-recover-token)> recover-diff-term; 
+		affected-recover-tokens := <number-of-affected-tokens> rec-tokens; 
+		recover-cluster-count := <number-of-recover-clusters> rec-tokens; 
+		(<gt> (affected-recover-tokens, 3) <+ <gt> (recover-cluster-count, 2))
+
+recovery-inserts-new-element:
+	(rec-diff-term, ()) -> (rec-diff-term, ())
+
+number-of-recover-clusters =
+	number-of-recover-clusters(|0, -10)
+	
+number-of-recover-clusters(|n, last-recover-index):
+	[] -> n
+	
+number-of-recover-clusters(|n, last-recover-index):
+	[h|tail] -> <number-of-recover-clusters(|n, last-recover-index)> tail
+	where
+		<not(is-recover-token)> h 
+
+number-of-recover-clusters(|n, last-recover-index):
+	[h|tail] -> <number-of-recover-clusters(|new-n, recover-index)> tail
+	where
+		<is-recover-token> h;
+		<?(recover-index, _, _)> h;
+		if <leq> (<subt> (recover-index, last-recover-index), 2) then
+			new-n := n
+		else
+			new-n := <inc> n
+		end
+
+number-of-affected-tokens:
+	tokenstream -> <filter(is-affected-token); length> tokenstream
+
+is-affected-token:
+	t@(_, txt, _) -> t
+	where
+		<is-recover-token> t;
+		<not(?"")> txt
+		
+
+is-recover-token =
+	?(_,_,9) <+
+	?(_,_,10) <+
+	?(_,_,11) <+
+	?(_,_,12)
+
+is-layout-token =
+	?(_,_,7)
+
+
+collect-subterms-inside-error-region =
+	collect-subterms-error-context-helper; 
+	filter(?ERROR_REGION(<id>));
+	concat
+
+collect-subterms-outside-error-region =
+	collect-subterms-error-context-helper; 
+	filter(not(?ERROR_REGION(_)))
+
+collect-subterms-outside-error-context:
+	trm -> outside-subterms
+	where
+		subterms := <collect-subterms-error-context-helper> trm; 
+		outside-subterms := <drop-error-context-terms> subterms 
+
+collect-subterms-inside-error-context:
+	trm -> inside-subterms
+	where
+		subterms := <collect-subterms-error-context-helper> trm;
+		outside-subterms := <drop-error-context-terms> subterms;
+		inside-subterms := <diff> (subterms, outside-subterms)
+
+collect-subterms-error-context-helper:
+	trm -> subterms
+	where
+		subterms := <collect-om(not(is-parent-of-error-region) <+ is-error-region)> trm
+
+is-error-region =
+	?ERROR_REGION(_) <+ ?ERROR_REGION(_,_)
+
+drop-error-context-terms =
+	drop-error-context-terms-near-error <+
+	drop-error-context-terms-rec
+	
+drop-error-context-terms-near-error:
+	[ERROR_REGION(t)|tail] -> <drop-error-context-terms> tail
+
+drop-error-context-terms-near-error:
+	[h, ERROR_REGION(t)|tail] -> <drop-error-context-terms> tail
+
+drop-error-context-terms-rec:
+	[h|tail] -> [h|<drop-error-context-terms> tail]
+
+drop-error-context-terms-rec:
+	[] -> []
+
+rules //eval oracle
+
+eval-oracle =
+	eval-oracle-list <+
+	eval-oracle-term
+
+eval-oracle-term =
+	eval-oracle-exellent <+
+	eval-oracle-good <+
+	eval-oracle-poor
+
+
+//GOOD +
+eval-oracle-exellent:
+	(recovered-trm, oracle-trm) -> [EXCELLENT()]
+	where
+		where(eval-oracle-good);
+		not(recovery-discards-leafnodes(|1));
+		not(recovery-implies-too-many-token-manipulations)
+		
+eval-oracle-good:
+	(recovered-trm, oracle-trm) -> [GOOD()]
+	where 
+		not(recovery-inserts-new-element);
+		not(recovery-affects-unrelated-list-elements);
+		not(recovery-affects-subterms-outside-error-region-context);
+		//not(recovery-introduces-leafnodes);
+		not(recovery-discards-leafnodes(|5)) 
+
+eval-oracle-good:
+	((), oracle-term) -> [GOOD()]
+	where
+		<is-parent-of-error-region> oracle-term;
+		not(recovery-discards-leafnodes(|5)) 
+		
+eval-oracle-poor:
+	(recovered-trm, oracle-trm) -> [POOR()]
+
+eval-oracle-list =
+	eval-oracle-list-1 <+
+	eval-oracle-list-2 <+
+	eval-oracle-list-3 <+
+	eval-oracle-list-4
+
+eval-oracle-list-1:
+	([], [error-trm]) -> <eval-oracle> ((), error-trm)
+
+eval-oracle-list-2:
+	([rec-trm], []) -> <eval-oracle> (rec-trm, ())
+	
+eval-oracle-list-3:
+	(recovered-elems, oracle-elems) -> <zip; map(eval-oracle); concat> (recovered-elems, oracle-elems)
+
+eval-oracle-list-4:
+	(recovered-elems, oracle-elems) -> [POOR()]
+	where
+		<is-list> recovered-elems;
+		<is-list> oracle-elems
+
+eval-oracle-elem (|rec-unmatched) =
+	eval-oracle-elem-excellent(|rec-unmatched) <+
+	eval-oracle-elem-good(|rec-unmatched) <+
+	eval-oracle-elem-poor(|rec-unmatched)
+
+eval-oracle-elem-excellent(|rec-unmatched):
+	oracle-elem -> EXCELLENT()
+	where
+		<fetch-elem(!(<id>, oracle-elem); eval-oracle-exellent)> rec-unmatched
+
+eval-oracle-elem-excellent(|rec-unmatched):
+	oracle-elem -> EXCELLENT()
+	where
+		<eval-oracle-exellent>((), oracle-elem)
+
+eval-oracle-elem-good(|rec-unmatched):
+	oracle-elem -> GOOD()
+	where
+		<fetch-elem(!(<id>, oracle-elem); eval-oracle-good)> rec-unmatched
+
+eval-oracle-elem-excellent(|rec-unmatched):
+	oracle-elem -> GOOD()
+	where
+		<eval-oracle-good>((), oracle-elem)
+
+eval-oracle-elem-poor(|rec-unmatched):
+	oracle-elem -> POOR()
+
+rules //ast-diff
+
+ast-diff =
+	(
+		ast-diff-eq <+
+		ast-diff-rec-list <+
+		ast-diff-rec <+
+		ast-diff-replacement
+	)
+
+ast-diff-eq:
+	(recovered-trm, oracle-trm) -> []
+	where
+		<equal> (recovered-trm, oracle-trm)
+
+ast-diff-rec:
+	(recovered-trm, oracle-trm) -> <map(ast-diff); concat> zipped-args
+	where
+		<equal> (<get-constructor> recovered-trm,<get-constructor> oracle-trm);
+		zipped-args := <zip; filter(not(equal))>(<get-arguments> recovered-trm, <get-arguments> oracle-trm)
+		
+ast-diff-replacement:
+	(recovered-trm, oracle-trm) -> [<id>]
+
+ast-diff-rec-list:
+	t@(recovered-lst, oracle-lst) -> list-diff
+	where
+		list-diff := <ast-diff-rec-list> (recovered-lst, oracle-lst, [], [])
+
+ast-diff-rec-list =
+	ast-diff-rec-list-match <+
+	ast-diff-rec-list-no-match
+
+ast-diff-rec-list-match:
+	(recovered-lst, [o|oracle-rest], r-unmatched, o-unmatched) -> 
+	<ast-diff-rec-list> (suffix, oracle-rest, <conc>(r-unmatched, prefix), o-unmatched)
+	where
+		(prefix, suffix) := <split-fetch(equal(|o))> recovered-lst
+
+ast-diff-rec-list-no-match:
+	(recovered-lst, [o|oracle-rest], r-unmatched, o-unmatched) -> 
+	<ast-diff-rec-list> (recovered-lst, oracle-rest, r-unmatched, <conc>(o-unmatched, [o]))
+
+ast-diff-rec-list-no-match:
+	(recovered-lst, [], r-unmatched, o-unmatched) -> list-diffs
+	where
+		recover-unmatched := <conc>(r-unmatched, recovered-lst);
+		if diffs := <ast-diff-continue-list-diff> (recover-unmatched, o-unmatched) then
+			list-diffs := diffs 
+		else
+			list-diffs := [(recover-unmatched, o-unmatched)]
+		end
+
+ast-diff-continue-list-diff =
+	ast-diff-continue-list-diff-1 <+
+	ast-diff-continue-list-diff-2 <+
+	ast-diff-continue-list-diff-3 <+
+	ast-diff-continue-list-diff-4
+
+ast-diff-continue-list-diff-1:
+	([a], [b]) -> <ast-diff> (a, b)
+
+ast-diff-continue-list-diff-2:
+	(rec-elems, oracle-elems) -> <map(ast-diff); concat> zipped
+	where
+		zipped := <zip> (rec-elems, oracle-elems);
+		<map(is-heuristic-match)> zipped
+
+ast-diff-continue-list-diff-3:
+	t@(recovered-lst, [or]) -> <concat> [prefix-insertions, <ast-diff> (m, or), suffix-insertions]
+	where
+		(prefix, m, suffix) := <split-fetch-keep(is-heuristic-match(|or))> recovered-lst;
+		prefix-insertions := <if <not(?[])> prefix then ![(prefix, [])] else ![] end>;
+		suffix-insertions := <if <not(?[])> suffix then ![(suffix, [])] else ![] end>
+
+ast-diff-continue-list-diff-4:
+	t@([r], oracle-lst) -> <concat> [prefix-insertions, <ast-diff> (r, m), suffix-insertions]
+	where
+		(prefix, m, suffix) := <split-fetch-keep(is-heuristic-match-on-oracle(|r))> oracle-lst;
+		prefix-insertions := <if <not(?[])> prefix then ![([], prefix)] else ![] end>;
+		suffix-insertions := <if <not(?[])> suffix then ![([], suffix)] else ![] end>
+
+is-heuristic-match-on-oracle(|rec-trm) :
+	or-trm -> or-trm
+	where
+		<is-heuristic-match(|or-trm)> rec-trm
+
+is-heuristic-match(|or-trm):
+	rec-trm -> rec-trm
+	where
+		<is-heuristic-match> (rec-trm, or-trm)
+	
+is-heuristic-match:
+	(rec-elem, or-elem) -> (rec-elem, or-elem)
+	where
+		rec-ids := <collect-om(is-string)> rec-elem;
+		<geq> (<length> rec-ids, 3);
+		or-ids := <alltd(\ERROR_REGION(t1, _) -> ERROR_REGION(t1)\); collect-om(is-string)> or-elem;
+		l-isect := <isect; length> (rec-ids, or-ids);
+		if <lt>(l-isect, 5) then 
+			<geq>(l-isect, <length; dec> rec-ids);
+			<geq>(l-isect, <length; dec; dec; dec> or-ids)
+		end
+
+rules //helpers
+
+
+is-subterm-of(|parent-trm):
+	trm -> trm
+	where
+		<oncetd(equal(|trm))> parent-trm
+
+is-parent-of-error-region =
+	oncetd(?ERROR_REGION(_) <+ ?ERROR_REGION(_, _))
\ No newline at end of file

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str	Wed Nov  2 09:17:23 2011	(r23550)
@@ -0,0 +1,32 @@
+module configuration-stratego
+
+imports
+  libstratego-sglr
+  lib/editor-common.generated
+  error-rules-stratego
+  configuration
+  libstrc
+
+
+strategies //error generation strategies
+	
+strategies //common language strategies 
+
+generate-testsuite-stratego:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"txt")> path;
+      generate-testcases(|<stratego-language-name>);
+      result   :=  "Testsuite for stratego: " //info about generation
+      
+strategies //common language strategies 
+
+stratego-language-name = !"stratego"
+
+get-parse-table(|lang-name) = 
+	where (<equal> (lang-name, <stratego-language-name>));
+	import-term(parsetables/Stratego-Sugar.tbl)
+
+pp(|lang-name) =
+	where (<equal> (lang-name, <stratego-language-name>));
+	pp-stratego-string

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Wed Nov  2 09:17:23 2011	(r23550)
@@ -0,0 +1,83 @@
+module configuration
+
+imports
+  libstratego-sglr
+  lib/editor-common.generated
+  configuration-stratego
+  generate-errors-incomplete
+  signatures-error-gen
+
+strategies //error generation strategies
+
+bracket-pairs = fail //TODO lang-name, dyn rule
+
+bracket-pairs-stochast = !65
+	
+strategies //common language strategies 
+
+get-parse-table(|lang-name) = fail //<import-term(parsetables/Stratego-Sugar.tbl)> 	where (<equal> (lang-name, <stratego-language-name>));
+
+pp(|lang-name) = fail
+
+generate-testcases(|language-name) =
+	generate-incompletion-testcases(|language-name)
+
+parse-source-file(|lang-name) =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <get-parse-table(|lang-name)>
+    )
+
+parse-source-string(|lang-name) =
+    parse-string(
+      strsglr-report-parse-error
+    | <get-parse-table(|lang-name)>
+    )
+    
+parse-source-string-recover-mode(|lang-name, cursor-loc) =
+  where(pt := <get-parse-table(|lang-name)>); //$[[<project-path>]/parsetables/Stratego-Sugar.tbl]
+  jsglr-recover-parse-string(fail | pt, None(), "", cursor-loc)
+
+
+strategies
+
+  jsglr-recover-parse-string(on-parse-error | pt, start-symbol, path, cursor-loc) =
+      ?string
+    ; prim("JSGLR_recover_parse_string", on-parse-error | string, pt, start-symbol, path, cursor-loc)
+      
+strategies //file paths
+	
+basefile-dir(|lang-name) = 
+	!$[[<project-path>]/testsuites/[lang-name]/basefiles]
+
+errorfile-dir(|lang-name) = 
+	!$[[<project-path>]/testsuites/[lang-name]/errorfiles]
+
+region-oracle-dir(|lang-name) =
+	!$[[<project-path>]/testsuites/[lang-name]/region-oracle-asts]
+
+results-failure-dir(|lang-name) = 
+	!$[[<project-path>]/testsuites/[lang-name]/results/recoveryfailed]
+
+results-poor-dir(|lang-name) = 
+	!$[[<project-path>]/testsuites/[lang-name]/results/poor]
+
+results-good-dir(|lang-name) = 
+	!$[[<project-path>]/testsuites/[lang-name]/results/good]
+
+results-excellent-dir(|lang-name) = 
+	!$[[<project-path>]/testsuites/[lang-name]/results/excellent]
+
+get-result-dir(|lang):
+	EXCELLENT() -> <results-excellent-dir(|lang)>
+
+get-result-dir(|lang):
+	GOOD() -> <results-good-dir(|lang)>
+	
+get-result-dir(|lang):
+	POOR() -> <results-poor-dir(|lang)>
+	
+get-result-dir(|lang):
+	FAILED() -> <results-failure-dir(|lang)>
+	
+	
\ No newline at end of file

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/err.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/err.str	Wed Nov  2 09:17:23 2011	(r23550)
@@ -0,0 +1,31 @@
+module err
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/Err
+  lib/editor-common.generated
+  configuration		
+	
+rules // Main editor interface (defined by editor/Err-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast, [], [], [])
+    
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> node
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) -> []

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str	Wed Nov  2 09:17:23 2011	(r23550)
@@ -0,0 +1,7 @@
+module error-rules-stratego
+
+rules
+
+bracket-pairs = ![("(", ")"), ("[", "]"), ("{", "}"), ("<", ">"), ("|[", "]|"), ("\"", "\"")]
+
+//todo: templeates
\ No newline at end of file

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str	Wed Nov  2 09:17:23 2011	(r23550)
@@ -0,0 +1,118 @@
+module generate-errors-incomplete
+
+imports
+  lib/editor-common.generated
+  configuration
+  helpers
+  signatures-error-gen
+  apply-oracle
+  workflow
+
+strategies
+	
+generate-incompletion-testcases(|language-name) =
+	generate-testcases(create-completion-errors|language-name, "incomplete")
+
+create-completion-errors:
+	term -> completion-errors //[("a ->", 4)]
+	where
+		completion-errors := <
+			get-incomplete-strings;
+			map(!(<conc-strings>, <Fst; string-length>))
+		> term
+		
+strategies //create incomplete prefixes
+
+get-incomplete-strings:
+	trm -> incomplete-prefix-strings
+	where 
+		token-expansion := <origin-token-expand; explode-singleline-subterms> trm; 
+		incomplete-prefix-token-lists := <get-incomplete-prefixes(|trm)>(token-expansion, [], [], []); 
+		trm-string := <origin-text> trm;
+		incomplete-prefix-strings := <map(all(concat-strings)); make-set; filter(not(equal(|trm-string)))> incomplete-prefix-token-lists
+
+//only single line subterms are broken as well
+explode-singleline-subterms:
+	tok-term-list -> <foldr(![], add-singleline-term-explode <+ ![<Fst>|<Snd>])>
+
+add-singleline-term-explode:
+	(term, lst) -> <conc>(<origin-tokens> term, lst)
+	where
+		<not(is-string)> term; 
+		<origin-location; ?(l,_,l,_)> term
+
+get-incomplete-prefixes(|construct-term) = 
+	get-incomplete-prefixes-stop(|construct-term) <+
+	get-incomplete-prefixes-rec-lo(|construct-term) <+
+	get-incomplete-prefixes-rec(|construct-term) 
+
+get-incomplete-prefixes-rec(|construct-term):
+	([tok-trm|remaining], prefix, closing-tokens, temp-results) -> lst-incomplete-prefixes
+	where
+		new-closings := <update-closings(|tok-trm)> closing-tokens;
+		next-prefix-results := <get-next-prefix-results(|construct-term)> (tok-trm, prefix, new-closings);
+		new-temp-results := <conc; make-set>(temp-results, next-prefix-results);
+		new-prefix := <conc>(prefix,[<is-string <+ origin-text> tok-trm]);
+		lst-incomplete-prefixes := <get-incomplete-prefixes(|construct-term)>(remaining, new-prefix, new-closings, new-temp-results)
+
+get-incomplete-prefixes-rec-lo(|construct-term):
+	([""|remaining], prefix, closing-tokens, temp-results) -> <get-incomplete-prefixes(|construct-term)>(remaining, prefix, closing-tokens, temp-results)
+
+get-incomplete-prefixes-rec-lo(|construct-term):
+	([tok-trm|remaining], prefix, closing-tokens, temp-results) -> lst-incomplete-prefixes
+	where
+		<is-layout-string; not(?"")> tok-trm;
+		lst-incomplete-prefixes := <get-incomplete-prefixes(|construct-term)>(remaining, <conc>(prefix,[tok-trm]), closing-tokens, temp-results)
+
+get-incomplete-prefixes-stop(|construct-term):
+	([], prefix, closing-tokens, temp-results) -> temp-results
+
+/*(A, List(Strings), List(Strings)) -> List(List(Strings))*/
+get-next-prefix-results(|construct-term):
+	(next-term, prefix, closing-tokens) -> <add-closing-tokens(|closing-tokens)> next-prefix-results
+	where
+		next-term-string := <is-string <+ origin-text> next-term;
+		if br-next-term := <break-string-token(|construct-term)> next-term then //break subterms on single line 
+			next-prefix-results := [<conc>(prefix, [br-next-term]), <conc>(prefix,[next-term-string])] 
+		else
+			next-prefix-results := [<conc>(prefix, [next-term-string])]
+		end
+
+break-string-token(|construct-term) :
+	tok-term ->  init-string
+	where 
+		if non-id-string-token := <is-string> tok-term then 
+			<topdown(not(equal(|tok-term)))> construct-term //prevent break identifiers (leads to identical error) 
+		else 
+			<get-arguments; ?[]> tok-term;
+			non-id-string-token := <origin-text> tok-term
+		end;
+		init-string := <string-as-chars(init)> non-id-string-token; 
+		<not(is-layout-string)> init-string
+
+
+strategies //bracket strategies to simulate auto insert actions
+
+add-closing-tokens(|closing-tokens):
+	prefix-results -> <map(!(<id>, closings))> prefix-results
+	where
+		if random-succeed(|<bracket-pairs-stochast>) then
+			closings := closing-tokens
+		else
+			closings := []
+		end
+
+lookup-closing:
+	open-br -> <lookup> (open-br, <bracket-pairs>) 
+
+update-closings(|br) =
+	remove-closing(|br) <+
+	add-closing(|br) <+
+	id
+
+add-closing(|opening-br):
+	closings -> [<lookup-closing> opening-br|closings]
+
+remove-closing(|closing-br):
+	[closing-br|tail] -> tail
+

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str	Wed Nov  2 09:17:23 2011	(r23550)
@@ -0,0 +1,165 @@
+module helpers
+
+imports
+  lib/editor-common.generated
+  libstratego-aterm
+  libstratego-gpp
+  signatures-error-gen
+  configuration
+
+rules //text modification
+
+get-modified-text:
+	(ast, replace-fragment, start-offset, end-offset) -> modified-text
+	where
+		ast-text := <origin-text> ast;
+		ast-start-offset := <origin-offset; Fst> ast;
+		start-offset' := <subt>(start-offset, ast-start-offset);
+		end-offset' := <subt>(end-offset, ast-start-offset);
+		modified-text := <replace-in-text> (ast-text, replace-fragment, start-offset', end-offset')
+			
+replace-in-text:
+	(old-text, replace-fragment, start-offset, end-offset) -> result-text
+	where 
+		old-chars := <explode-string> old-text; 
+		(prefix, _) := <split-at(|start-offset)> old-chars; 
+		(_, suffix) := <split-at(|end-offset)> old-chars; 
+		result-text := <conc-strings> (<implode-string> prefix, replace-fragment, <implode-string> suffix) 
+
+rules //pretty-printing
+
+pp-aterm = pp-aterm-box ; box2text-string(|100)
+
+pp-error-region:
+	ERROR_REGION(_, error-string) -> error-string
+
+pp-oracle-term(|lang) = pp-oracle-term(pp(|lang))
+
+pp-oracle-term(pp) =
+	alltd(pp-error-region); 
+	pp
+
+pp-region-oracle-diff-list(|lang) = 
+	pp-region-oracle-diff-list(pp(|lang)) 
+
+pp-region-oracle-diff-list(pp) = 
+	map(pp-region-oracle-diff(pp))
+
+pp-region-oracle-diff(|lang) = 
+	pp-region-oracle-diff(pp(|lang))
+
+pp-region-oracle-diff(pp):
+	(recovered-trm, oracle-trm) -> diff-string
+	where
+		pp-recovered-trm := <pp> recovered-trm;
+		pp-oracle-trm := <pp-oracle-term(pp)> oracle-trm;
+		diff-string := 
+		$[
+		actual:   
+		[recovered-trm] 
+		
+		expected: 
+		[pp-oracle-trm]
+		
+		--------------------------------------------------------------------------------------
+		]
+	
+
+rules //save file
+
+save-formatted-aterm =
+ 	?(fpath, trm);
+	<save> (fpath, <pp-aterm> trm)
+				
+save =
+ 	?(pathname, text);
+ 	testfile := <fopen <+ debug(!"Could not open file: "); fail> (pathname, "w");
+    <fputs> (text, testfile);
+    <fclose> testfile
+	
+format-counter(|n):
+	counter -> fix-length-counter
+	where
+		counter-string := <int-to-string> counter;
+		number-of-zeros := <subt>(n, <string-length> counter-string);
+		zeros := <copy; concat-strings> (number-of-zeros, "0");
+		fix-length-counter := <conc-strings> (zeros, counter-string)
+
+format-counter(|n):
+	counter -> <int-to-string> counter
+	where
+		<leq> (n, <length> counter)
+	
+rules //signature frequency helpers
+
+get-random-term-weight-table:
+	ast -> term-position-weight-table
+	where
+		signatures := <collect-signatures> ast;
+		term-weight-table := <map(!(<random-term-with-signature(|ast)>, <occurrences-in(|ast)>))> signatures;
+		term-position-weight-table := <map(!(<Fst>, <Fst; look-up-position-in-ast(|ast)>, <Snd>))> term-weight-table
+
+look-up-position-in-ast(|ast):
+	trm -> <position-of-term(equal(|trm))> ast
+
+has-signature(|trm-signature):
+	trm -> trm
+	where
+		where(get-signature; equal(|trm-signature))
+
+get-signature:
+	term -> (<get-constructor>, <get-arguments; length>)
+	where
+		not(is-string <+ is-list)
+
+occurrences-in(|ast):
+	trm-signature -> <occurrences(has-signature(|trm-signature))> ast
+
+collect-signatures:
+	ast -> <collect-all(get-signature); make-set> ast
+
+
+rules //random helpers
+	
+random-element:
+	lst -> rnd-elem
+	where
+		random-index := <random-next(|<length> lst); inc>;
+		rnd-elem := <index(|random-index)> lst
+
+random-prefix:
+	lst -> <take(|random-index)> lst
+	where
+		random-index := <random-next(|<length; dec> lst); inc>
+
+random-term(s):
+	ast -> term-with-sign
+	where
+		terms := <collect-all(s)> ast;
+		term-with-sign := <random-element> terms
+
+random-term-with-signature(|ast):
+	sign -> <random-term(has-signature(|sign))> ast
+
+
+random-next(|max-value)=
+	where(<gt>(max-value, 0));
+	<mod>(<next-random; abs>, max-value)
+
+random-succeed(|stochast) =
+	<lt> (<random-next(|100)>, stochast)
+	
+
+rules //origin tokenstream strategies
+
+origin-tokens = prim("SSL_EXT_origin_tokens", <id>)
+
+origin-token-expand = prim("SSL_EXT_origin_token_expand", <id>)
+
+origin-token-stream = prim("SSL_EXT_origin_token_stream", <id>)
+
+
+rules //common helpers
+	
+is-layout-string =
+	where(trim-chars(?' ' <+ ?'\t' <+ ?'\n'); ?"")

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/signatures-error-gen.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/signatures-error-gen.str	Wed Nov  2 09:17:23 2011	(r23550)
@@ -0,0 +1,12 @@
+module signatures-error-gen
+
+signature constructors
+
+	ERROR_REGION: List(t)*String -> ERROR_REGION
+	ERROR_REGION: List(t) -> ERROR_REGION
+
+	EXCELLENT : e
+	GOOD      : g
+	POOR      : p
+	FAILED    : f
+	SUCCEEDED : s

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Wed Nov  2 09:17:23 2011	(r23550)
@@ -0,0 +1,193 @@
+module workflow
+
+imports
+	configuration
+	helpers
+	lib/editor-common.generated
+	signatures-error-gen
+	apply-oracle
+
+rules
+	
+generate-testcases(make-error-strings|language-name, error-cat) =
+	dir := <basefile-dir(|language-name)>; 
+	readdir;
+	![<Hd>]; //TODO: only one file for now
+	list-loop(
+		<generate-testcases-for-basefile(make-error-strings|language-name, error-cat)> $[[dir]/[<id>]]
+	)
+
+generate-testcases-for-basefile(make-error-strings|language-name, error-cat):
+	basefile -> ()
+	where
+		base-ast := <parse-source-file(|language-name)> basefile;
+		term-weight-table := <get-random-term-weight-table> base-ast;
+		test-case-specifications := <map(testcase-specifications(make-error-strings)); concat> term-weight-table;
+		<process-testcase-specifications(|language-name, error-cat, base-ast, 1)> test-case-specifications
+
+testcase-specifications(make-error-strings):
+	(term, position, weight) -> test-case-specifications
+	where
+		error-prefixes := <make-error-strings> term; //[(err-str, error-offset)]
+		test-case-specifications := <map(!(term, position, <Fst>, <Snd>, weight))> error-prefixes
+		//[(term, position, error-string, error-offset, weight)]
+		
+process-testcase-specifications(|language-name, error-cat, ast, counter):
+	[test-spec|remaining-test-specifications] -> new-counter
+	where
+		if <process-testcase(|language-name, error-cat, ast, counter)> test-spec then
+			new-counter := <inc> counter
+		else
+			new-counter := counter
+		end;
+		<process-testcase-specifications(|language-name, error-cat, ast, new-counter)> remaining-test-specifications
+
+process-testcase-specifications(|language-name, error-cat, ast, counter):
+	[] -> -1
+
+process-testcase(|lang, error-cat, ast, counter): 
+	(term, position, error-string, error-offset, weight) -> ()
+	where 
+		filename := <get-fpath(|error-cat, weight, counter)> term; 
+		modified-text := <get-modified-text> (ast, error-string, <origin-offset; Fst> term, <origin-offset; Snd> term);
+		cursor-loc := <get-cursor-location> (ast, term, error-offset);
+		not(<parse-source-string(|lang)> modified-text) //sanity check: modified text must contain errors
+	with
+		if (recovered-ast, SUCCEEDED()) := <process-testcase-failure-oracle(|lang, filename, cursor-loc)> modified-text then 
+			base-pp-ast := <try(pp(|lang); parse-source-string(|lang))> ast; 
+			err-region := <construct-error-region(|cursor-loc, error-string)> term; 
+			error-region-ast := <construct-error-region-ast(|term, err-region)> base-pp-ast; 
+			<process-testcase-region-oracle(|lang, filename, error-string)> (modified-text, recovered-ast, error-region-ast)
+		end
+		
+process-testcase-failure-oracle(|lang, filename, cursor-loc):
+	modified-text -> (recovered-ast, SUCCEEDED())
+	where
+		(recovered-ast, SUCCEEDED()) := <apply-success-failure-oracle(parse-source-string-recover-mode(|lang, cursor-loc))> modified-text
+		
+process-testcase-failure-oracle(|lang, filename, cursor-loc):
+	modified-text -> <fail>
+	where
+		(recovered-ast, FAILED()) := <apply-success-failure-oracle(parse-source-string-recover-mode(|lang, cursor-loc))> modified-text;
+		filepath := <get-fpath-result(|lang, FAILED())> (filename, "error.str"); //TODO: get-extension => str
+		<save> (filepath, modified-text)
+
+process-testcase-region-oracle(|lang, filename, err-string):
+	(modified-text, recovered-ast, error-region-ast) -> region-oracles
+	where //<debug(!"fname: ")> filename; !" "; debug;
+		(ast-diff, region-oracles, worst-region-oracle) := <apply-error-region-oracle> (recovered-ast, error-region-ast); //TODO: multiple regions?
+		
+		fpath-error-file := <get-fpath-result(|lang, worst-region-oracle)> (filename, "error.str");
+		//<save> (fpath-error-file, modified-text);
+
+		fpath-recovered-ast := <get-fpath-result(|lang, worst-region-oracle)> (filename, "recovered.aterm");
+		//<save-formatted-aterm> (fpath-recovered-ast, recovered-ast);
+		
+		fpath-recovered-pp := <get-fpath-result(|lang, worst-region-oracle)> (filename, "recovered.str");
+		//<save> (fpath-recovered-pp, <pp(|lang)> recovered-ast);
+		
+		fpath-oracle-ast := <get-fpath-result(|lang, worst-region-oracle)> (filename, "oracle.aterm");
+		//<save-formatted-aterm> (fpath-oracle-ast, error-region-ast);
+		
+		fpath-oracle-pp := <get-fpath-result(|lang, worst-region-oracle)> (filename, "oracle.str");
+		//<save> (fpath-oracle-pp, <construct-text-error-region-ast> error-region-ast);
+		
+		fpath-ast-diff := <get-fpath-result(|lang, worst-region-oracle)> (filename, "diff.aterm");
+		<save-formatted-aterm> (fpath-ast-diff, ast-diff);
+
+		fpath-pp-compare := <get-fpath-result(|lang, worst-region-oracle)> (filename, "compare.txt");
+		<save> (
+			fpath-pp-compare, 
+			<
+				map(ct-region-oracle-diff(|lang)); 
+				separate-by(|"\n\n"); 
+				concat-strings; 
+				concat-err-fragment(|err-string)
+			> ast-diff
+		)
+				
+get-fpath(|error-cat, weight, counter):
+	term -> $[[<get-constructor>]_[weight].[<format-counter(|4)> counter].[error-cat]]
+
+get-fpath-result(|lang, oracle):
+	(filename, ext) -> $[[<get-result-dir(|lang)> oracle]/[filename].[ext]]
+
+get-cursor-location:
+	(ast, term, error-offset) -> cursor-loc
+	where
+		term-offset := <origin-offset; Fst> term;
+		ast-offset := <origin-offset; Fst> ast;
+		cursor-loc := <subt>(<add>(term-offset, error-offset), ast-offset)
+
+construct-text-error-region-ast:
+	error-region-ast -> error-region-text
+	where
+		[err at ERROR_REGION(_, error-string)] := <collect-om(?ERROR_REGION(_, _))> error-region-ast; //TODO: multiple error regions
+		error-region-text := <get-modified-text> (error-region-ast, error-string, <origin-offset; Fst> err, <origin-offset; Snd> err)
+		
+construct-text-error-region-ast:
+	error-region-ast -> error-region-text
+	where
+		[] := <collect-om(?ERROR_REGION(_, _))> error-region-ast; //TODO: multiple error regions
+		error-region-text := <origin-text> error-region-ast
+
+construct-text-error-region-ast:
+	err-region-diff-terms -> txt
+	where
+		txt := <map(construct-text-error-region-ast); separate-by(|"\n\n"); concat-strings> err-region-diff-terms
+
+
+construct-text-error-region-ast:
+	error-region-ast -> error-region-text
+	where
+		[err at ERROR_REGION(_, error-string)] := <collect-om(?ERROR_REGION(_, _))> error-region-ast; //TODO: multiple error regions
+		error-region-text := <get-modified-text> (error-region-ast, error-string, <origin-offset; Fst> err, <origin-offset; Snd> err)
+
+
+construct-error-region-ast(|trm, err-region):
+	ast -> error-region-ast
+	where
+		error-region-ast := <alltd(
+			where(equal(|trm)); //TODO: use ast position!
+			origin-track-forced(!err-region)
+		)> ast
+
+construct-error-region(|break-offset, err-string):
+	trm -> <origin-strip> ERROR_REGION(subterms, err-string)
+	where 
+		subterms := <collect-om(is-leafnode-in-prefix(|break-offset))> trm
+
+is-leafnode-in-prefix(|break-offset):
+	leafnode -> leafnode
+	where
+		<is-leaf; not(?[])> leafnode;
+		<leq>(<origin-offset; Snd> leafnode, break-offset)
+
+ct-region-oracle-diff(|lang):
+	(recovered-trm, oracle-trm) -> diff-string
+	where
+		pp-recovered-trm := <pp(|lang) <+ write-to-string> recovered-trm; 
+		pp-oracle-trm := <conc-strings> (<origin-indent <+ !""> oracle-trm, <construct-text-error-region-ast <+ write-to-string> oracle-trm); 
+		diff-string := 
+		$[
+		DIFF-FRAGMENT-IN-ERROR-TEXT: 
+		[pp-oracle-trm]
+		
+		DIFF-FRAGMENT-IN-RECOVERED-TEXT:   
+		[pp-recovered-trm] 
+		
+		--------------------------------------------------------------------------------------
+		]
+
+concat-err-fragment(|err-string):
+	txt -> result-txt
+	where
+		result-txt := 
+		$[
+		[txt]
+		=======================================================================================
+		ORIGINAL-ERROR:
+		[err-string]
+		]
+
+origin-indent = try(Hd); prim("SSL_EXT_origin_indentation", <id>)

From m.dejonge at tudelft.nl  Wed Nov  2 10:20:25 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Nov 2011 09:20:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23551 - in
	sglr-recovery/trunk/SyntaxErrorGen: parsetables testsuites
	testsuites/stratego testsuites/stratego/basefiles
	testsuites/stratego/results testsuites/stratego/res...
Message-ID: <20111102092025.E373ECC0FD@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov  2 09:20:25 2011
New Revision: 23551
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23551&sc=1

Log:
error gen directories

Added:
   sglr-recovery/trunk/SyntaxErrorGen/parsetables/
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/basefiles/
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/results/
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/results/excellent/
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/results/good/
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/results/poor/
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/results/recoveryfailed/

From m.dejonge at tudelft.nl  Wed Nov  2 10:23:59 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Nov 2011 09:23:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23552 -
	sglr-recovery/trunk/SyntaxErrorGen/editor
Message-ID: <20111102092359.641842B802C@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov  2 09:23:59 2011
New Revision: 23552
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23552&sc=1

Log:
builders to run error gen/evaluation

Added:
   sglr-recovery/trunk/SyntaxErrorGen/editor/
   sglr-recovery/trunk/SyntaxErrorGen/editor/Err-Builders.esv

Added: sglr-recovery/trunk/SyntaxErrorGen/editor/Err-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/editor/Err-Builders.esv	Wed Nov  2 09:23:59 2011	(r23552)
@@ -0,0 +1,18 @@
+module Err-Builders
+
+imports Err-Builders.generated
+
+builders
+                                                                                   
+  // This file can be used for custom analysis, builder and refactoring rules.     
+  //                                                                               
+  // See the imported file for a brief introduction and examples.                  
+
+builders
+                                                                                                              
+  provider : include/err.ctree                                                                                
+  provider : include/err-java.jar                                                                             
+                                                                                                              
+  observer : editor-analyze                                                                                   
+                                                                                                              
+  builder  : "Generate Testsuite Stratego" = generate-testsuite-stratego (openeditor) (source)                   

From m.dejonge at tudelft.nl  Wed Nov  2 10:28:04 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Nov 2011 09:28:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23553 - in
	sglr-recovery/trunk/SyntaxErrorGen: . editor
	testsuites/stratego/results/excellent
	testsuites/stratego/results/good
	testsuites/stratego/results/poor testsuites/...
Message-ID: <20111102092804.9DA11CC101@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov  2 09:28:04 2011
New Revision: 23553
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23553&sc=1

Log:
svn ignore

Modified:
   sglr-recovery/trunk/SyntaxErrorGen/   (props changed)
   sglr-recovery/trunk/SyntaxErrorGen/editor/   (props changed)
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/results/excellent/   (props changed)
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/results/good/   (props changed)
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/results/poor/   (props changed)
   sglr-recovery/trunk/SyntaxErrorGen/testsuites/stratego/results/recoveryfailed/   (props changed)

From m.dejonge at tudelft.nl  Wed Nov  2 12:02:15 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Nov 2011 11:02:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23554 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111102110215.A222ACC03E@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov  2 11:02:15 2011
New Revision: 23554
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23554&sc=1

Log:
reordering rules and strategies

Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/signatures-error-gen.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str	Wed Nov  2 09:28:04 2011	(r23553)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str	Wed Nov  2 11:02:15 2011	(r23554)
@@ -1,6 +1,3 @@
-//TODO: eval (x,y) y not parent of ERR "rec affects unrelated elem", (x,()) "rec constructs new list elem"
-//TODO: eval ([...], [...])
-
 module apply-oracle 
 
 imports 
@@ -31,6 +28,7 @@
 
 fetch-worst-region-result = 
 	fetch-elem(?POOR()) <+
+	fetch-elem(?GOOD_SKIP()) <+
 	fetch-elem(?GOOD()) <+
 	fetch-elem(?EXCELLENT()) 
 
@@ -93,98 +91,15 @@
 		recover-cluster-count := <number-of-recover-clusters> rec-tokens; 
 		(<gt> (affected-recover-tokens, 3) <+ <gt> (recover-cluster-count, 2))
 
+//Introduction of a new list element in most cases violates human intention expressed by layout
+//Example: Erroneous Stratego rule is recovered as two separated rules
 recovery-inserts-new-element:
 	(rec-diff-term, ()) -> (rec-diff-term, ())
 
-number-of-recover-clusters =
-	number-of-recover-clusters(|0, -10)
-	
-number-of-recover-clusters(|n, last-recover-index):
-	[] -> n
-	
-number-of-recover-clusters(|n, last-recover-index):
-	[h|tail] -> <number-of-recover-clusters(|n, last-recover-index)> tail
-	where
-		<not(is-recover-token)> h 
-
-number-of-recover-clusters(|n, last-recover-index):
-	[h|tail] -> <number-of-recover-clusters(|new-n, recover-index)> tail
-	where
-		<is-recover-token> h;
-		<?(recover-index, _, _)> h;
-		if <leq> (<subt> (recover-index, last-recover-index), 2) then
-			new-n := n
-		else
-			new-n := <inc> n
-		end
-
-number-of-affected-tokens:
-	tokenstream -> <filter(is-affected-token); length> tokenstream
-
-is-affected-token:
-	t@(_, txt, _) -> t
-	where
-		<is-recover-token> t;
-		<not(?"")> txt
-		
-
-is-recover-token =
-	?(_,_,9) <+
-	?(_,_,10) <+
-	?(_,_,11) <+
-	?(_,_,12)
-
-is-layout-token =
-	?(_,_,7)
-
-
-collect-subterms-inside-error-region =
-	collect-subterms-error-context-helper; 
-	filter(?ERROR_REGION(<id>));
-	concat
-
-collect-subterms-outside-error-region =
-	collect-subterms-error-context-helper; 
-	filter(not(?ERROR_REGION(_)))
-
-collect-subterms-outside-error-context:
-	trm -> outside-subterms
-	where
-		subterms := <collect-subterms-error-context-helper> trm; 
-		outside-subterms := <drop-error-context-terms> subterms 
 
-collect-subterms-inside-error-context:
-	trm -> inside-subterms
-	where
-		subterms := <collect-subterms-error-context-helper> trm;
-		outside-subterms := <drop-error-context-terms> subterms;
-		inside-subterms := <diff> (subterms, outside-subterms)
 
-collect-subterms-error-context-helper:
-	trm -> subterms
-	where
-		subterms := <collect-om(not(is-parent-of-error-region) <+ is-error-region)> trm
 
-is-error-region =
-	?ERROR_REGION(_) <+ ?ERROR_REGION(_,_)
-
-drop-error-context-terms =
-	drop-error-context-terms-near-error <+
-	drop-error-context-terms-rec
-	
-drop-error-context-terms-near-error:
-	[ERROR_REGION(t)|tail] -> <drop-error-context-terms> tail
-
-drop-error-context-terms-near-error:
-	[h, ERROR_REGION(t)|tail] -> <drop-error-context-terms> tail
-
-drop-error-context-terms-rec:
-	[h|tail] -> [h|<drop-error-context-terms> tail]
-
-drop-error-context-terms-rec:
-	[] -> []
-
-rules //eval oracle
+rules //evaluation of AST DIFF
 
 eval-oracle =
 	eval-oracle-list <+
@@ -193,17 +108,22 @@
 eval-oracle-term =
 	eval-oracle-exellent <+
 	eval-oracle-good <+
+	eval-oracle-skip <+
 	eval-oracle-poor
 
 
-//GOOD +
+// (approximately) according to human intention: 
+// recovery does not affect unerroneous constructs (respect layout), 
+// recovery does not apply too many (unclustered) manipulations
 eval-oracle-exellent:
 	(recovered-trm, oracle-trm) -> [EXCELLENT()]
 	where
 		where(eval-oracle-good);
 		not(recovery-discards-leafnodes(|1));
 		not(recovery-implies-too-many-token-manipulations)
-		
+
+// recovery does not affect unerroneous constructs (respect layout)
+// recovery does not discard a very large region 
 eval-oracle-good:
 	(recovered-trm, oracle-trm) -> [GOOD()]
 	where 
@@ -213,11 +133,21 @@
 		//not(recovery-introduces-leafnodes);
 		not(recovery-discards-leafnodes(|5)) 
 
+// recovery discards erroneous region that is not too large 
 eval-oracle-good:
 	((), oracle-term) -> [GOOD()]
 	where
-		<is-parent-of-error-region> oracle-term;
+		where(eval-oracle-skip);
 		not(recovery-discards-leafnodes(|5)) 
+
+// recovery discards erroneous region, 
+// criteria that applies to non-correcting panic mode recoveries  
+eval-oracle-skip:
+	((), oracle-term) -> [GOOD_SKIP()]
+	where
+		<is-parent-of-error-region> oracle-term;
+		not(recovery-affects-unrelated-list-elements);
+		not(recovery-discards-leafnodes(|50)) 
 		
 eval-oracle-poor:
 	(recovered-trm, oracle-trm) -> [POOR()]
@@ -243,33 +173,6 @@
 		<is-list> recovered-elems;
 		<is-list> oracle-elems
 
-eval-oracle-elem (|rec-unmatched) =
-	eval-oracle-elem-excellent(|rec-unmatched) <+
-	eval-oracle-elem-good(|rec-unmatched) <+
-	eval-oracle-elem-poor(|rec-unmatched)
-
-eval-oracle-elem-excellent(|rec-unmatched):
-	oracle-elem -> EXCELLENT()
-	where
-		<fetch-elem(!(<id>, oracle-elem); eval-oracle-exellent)> rec-unmatched
-
-eval-oracle-elem-excellent(|rec-unmatched):
-	oracle-elem -> EXCELLENT()
-	where
-		<eval-oracle-exellent>((), oracle-elem)
-
-eval-oracle-elem-good(|rec-unmatched):
-	oracle-elem -> GOOD()
-	where
-		<fetch-elem(!(<id>, oracle-elem); eval-oracle-good)> rec-unmatched
-
-eval-oracle-elem-excellent(|rec-unmatched):
-	oracle-elem -> GOOD()
-	where
-		<eval-oracle-good>((), oracle-elem)
-
-eval-oracle-elem-poor(|rec-unmatched):
-	oracle-elem -> POOR()
 
 rules //ast-diff
 
@@ -324,6 +227,8 @@
 			list-diffs := [(recover-unmatched, o-unmatched)]
 		end
 
+//list elements that are not matched based on equality are 
+//heuristically matched based on the number of corresponding leaf nodes.
 ast-diff-continue-list-diff =
 	ast-diff-continue-list-diff-1 <+
 	ast-diff-continue-list-diff-2 <+
@@ -375,8 +280,88 @@
 			<geq>(l-isect, <length; dec; dec; dec> or-ids)
 		end
 
-rules //helpers
 
+rules //helper rules for evaluation criteria
+	
+number-of-recover-clusters =
+	number-of-recover-clusters(|0, -10)
+	
+number-of-recover-clusters(|n, last-recover-index):
+	[] -> n
+	
+number-of-recover-clusters(|n, last-recover-index):
+	[h|tail] -> <number-of-recover-clusters(|n, last-recover-index)> tail
+	where
+		<not(is-recover-token)> h 
+
+number-of-recover-clusters(|n, last-recover-index):
+	[h|tail] -> <number-of-recover-clusters(|new-n, recover-index)> tail
+	where
+		<is-recover-token> h;
+		<?(recover-index, _, _)> h;
+		if <leq> (<subt> (recover-index, last-recover-index), 2) then
+			new-n := n
+		else
+			new-n := <inc> n
+		end
+
+number-of-affected-tokens:
+	tokenstream -> <filter(is-affected-token); length> tokenstream
+
+is-affected-token:
+	t@(_, txt, _) -> t
+	where
+		<is-recover-token> t;
+		<not(?"")> txt
+
+collect-subterms-inside-error-region =
+	collect-subterms-error-context-helper; 
+	filter(?ERROR_REGION(<id>));
+	concat
+
+collect-subterms-outside-error-region =
+	collect-subterms-error-context-helper; 
+	filter(not(?ERROR_REGION(_)))
+
+collect-subterms-outside-error-context:
+	trm -> outside-subterms
+	where
+		subterms := <collect-subterms-error-context-helper> trm; 
+		outside-subterms := <drop-error-context-terms> subterms 
+
+collect-subterms-inside-error-context:
+	trm -> inside-subterms
+	where
+		subterms := <collect-subterms-error-context-helper> trm;
+		outside-subterms := <drop-error-context-terms> subterms;
+		inside-subterms := <diff> (subterms, outside-subterms)
+
+collect-subterms-error-context-helper:
+	trm -> subterms
+	where
+		subterms := <collect-om(not(is-parent-of-error-region) <+ is-error-region)> trm
+
+is-error-region =
+	?ERROR_REGION(_) <+ ?ERROR_REGION(_,_)
+
+drop-error-context-terms =
+	drop-error-context-terms-near-error <+
+	drop-error-context-terms-rec
+	
+drop-error-context-terms-near-error:
+	[ERROR_REGION(t)|tail] -> <drop-error-context-terms> tail
+
+drop-error-context-terms-near-error:
+	[h, ERROR_REGION(t)|tail] -> <drop-error-context-terms> tail
+
+drop-error-context-terms-rec:
+	[h|tail] -> [h|<drop-error-context-terms> tail]
+
+drop-error-context-terms-rec:
+	[] -> []
+
+
+rules //helpers
 
 is-subterm-of(|parent-trm):
 	trm -> trm
@@ -384,4 +369,10 @@
 		<oncetd(equal(|trm))> parent-trm
 
 is-parent-of-error-region =
-	oncetd(?ERROR_REGION(_) <+ ?ERROR_REGION(_, _))
\ No newline at end of file
+	oncetd(?ERROR_REGION(_) <+ ?ERROR_REGION(_, _))
+	
+is-recover-token =
+	?(_,_,9) <+
+	?(_,_,10) <+
+	?(_,_,11) <+
+	?(_,_,12)

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str	Wed Nov  2 09:28:04 2011	(r23553)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str	Wed Nov  2 11:02:15 2011	(r23554)
@@ -23,6 +23,11 @@
 
 stratego-language-name = !"stratego"
 
+get-extension(|lang-name):
+	_ -> "str"
+	where
+		<equal> (lang-name, <stratego-language-name>)
+
 get-parse-table(|lang-name) = 
 	where (<equal> (lang-name, <stratego-language-name>));
 	import-term(parsetables/Stratego-Sugar.tbl)

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Wed Nov  2 09:28:04 2011	(r23553)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Wed Nov  2 11:02:15 2011	(r23554)
@@ -9,12 +9,14 @@
 
 strategies //error generation strategies
 
-bracket-pairs = fail //TODO lang-name, dyn rule
+bracket-pairs = fail
 
 bracket-pairs-stochast = !65
 	
 strategies //common language strategies 
 
+get-extension(|lang) = fail
+
 get-parse-table(|lang-name) = fail //<import-term(parsetables/Stratego-Sugar.tbl)> 	where (<equal> (lang-name, <stratego-language-name>));
 
 pp(|lang-name) = fail
@@ -39,7 +41,7 @@
   jsglr-recover-parse-string(fail | pt, None(), "", cursor-loc)
 
 
-strategies
+strategies //primitive for parsing in recover mode
 
   jsglr-recover-parse-string(on-parse-error | pt, start-symbol, path, cursor-loc) =
       ?string
@@ -62,6 +64,9 @@
 results-poor-dir(|lang-name) = 
 	!$[[<project-path>]/testsuites/[lang-name]/results/poor]
 
+results-goodskip-dir(|lang-name) = 
+	!$[[<project-path>]/testsuites/[lang-name]/results/goodskip]
+
 results-good-dir(|lang-name) = 
 	!$[[<project-path>]/testsuites/[lang-name]/results/good]
 
@@ -73,6 +78,9 @@
 
 get-result-dir(|lang):
 	GOOD() -> <results-good-dir(|lang)>
+
+get-result-dir(|lang):
+	GOOD_SKIP() -> <results-goodskip-dir(|lang)>
 	
 get-result-dir(|lang):
 	POOR() -> <results-poor-dir(|lang)>

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str	Wed Nov  2 09:28:04 2011	(r23553)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str	Wed Nov  2 11:02:15 2011	(r23554)
@@ -23,6 +23,7 @@
 		
 strategies //create incomplete prefixes
 
+//generate prefixes based on original fragment
 get-incomplete-strings:
 	trm -> incomplete-prefix-strings
 	where 
@@ -55,9 +56,11 @@
 		new-prefix := <conc>(prefix,[<is-string <+ origin-text> tok-trm]);
 		lst-incomplete-prefixes := <get-incomplete-prefixes(|construct-term)>(remaining, new-prefix, new-closings, new-temp-results)
 
+//ignore layout breaks
 get-incomplete-prefixes-rec-lo(|construct-term):
 	([""|remaining], prefix, closing-tokens, temp-results) -> <get-incomplete-prefixes(|construct-term)>(remaining, prefix, closing-tokens, temp-results)
 
+//ignore layout breaks
 get-incomplete-prefixes-rec-lo(|construct-term):
 	([tok-trm|remaining], prefix, closing-tokens, temp-results) -> lst-incomplete-prefixes
 	where
@@ -68,6 +71,7 @@
 	([], prefix, closing-tokens, temp-results) -> temp-results
 
 /*(A, List(Strings), List(Strings)) -> List(List(Strings))*/
+//add characters to the previous prefix. Stochastically add closing brackets to simulate automatic bracket completion in editors
 get-next-prefix-results(|construct-term):
 	(next-term, prefix, closing-tokens) -> <add-closing-tokens(|closing-tokens)> next-prefix-results
 	where
@@ -78,6 +82,7 @@
 			next-prefix-results := [<conc>(prefix, [next-term-string])]
 		end
 
+//breaks literals, example: with => wit
 break-string-token(|construct-term) :
 	tok-term ->  init-string
 	where 

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str	Wed Nov  2 09:28:04 2011	(r23553)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str	Wed Nov  2 11:02:15 2011	(r23554)
@@ -2,123 +2,9 @@
 
 imports
   lib/editor-common.generated
-  libstratego-aterm
-  libstratego-gpp
   signatures-error-gen
   configuration
-
-rules //text modification
-
-get-modified-text:
-	(ast, replace-fragment, start-offset, end-offset) -> modified-text
-	where
-		ast-text := <origin-text> ast;
-		ast-start-offset := <origin-offset; Fst> ast;
-		start-offset' := <subt>(start-offset, ast-start-offset);
-		end-offset' := <subt>(end-offset, ast-start-offset);
-		modified-text := <replace-in-text> (ast-text, replace-fragment, start-offset', end-offset')
-			
-replace-in-text:
-	(old-text, replace-fragment, start-offset, end-offset) -> result-text
-	where 
-		old-chars := <explode-string> old-text; 
-		(prefix, _) := <split-at(|start-offset)> old-chars; 
-		(_, suffix) := <split-at(|end-offset)> old-chars; 
-		result-text := <conc-strings> (<implode-string> prefix, replace-fragment, <implode-string> suffix) 
-
-rules //pretty-printing
-
-pp-aterm = pp-aterm-box ; box2text-string(|100)
-
-pp-error-region:
-	ERROR_REGION(_, error-string) -> error-string
-
-pp-oracle-term(|lang) = pp-oracle-term(pp(|lang))
-
-pp-oracle-term(pp) =
-	alltd(pp-error-region); 
-	pp
-
-pp-region-oracle-diff-list(|lang) = 
-	pp-region-oracle-diff-list(pp(|lang)) 
-
-pp-region-oracle-diff-list(pp) = 
-	map(pp-region-oracle-diff(pp))
-
-pp-region-oracle-diff(|lang) = 
-	pp-region-oracle-diff(pp(|lang))
-
-pp-region-oracle-diff(pp):
-	(recovered-trm, oracle-trm) -> diff-string
-	where
-		pp-recovered-trm := <pp> recovered-trm;
-		pp-oracle-trm := <pp-oracle-term(pp)> oracle-trm;
-		diff-string := 
-		$[
-		actual:   
-		[recovered-trm] 
-		
-		expected: 
-		[pp-oracle-trm]
-		
-		--------------------------------------------------------------------------------------
-		]
-	
-
-rules //save file
-
-save-formatted-aterm =
- 	?(fpath, trm);
-	<save> (fpath, <pp-aterm> trm)
-				
-save =
- 	?(pathname, text);
- 	testfile := <fopen <+ debug(!"Could not open file: "); fail> (pathname, "w");
-    <fputs> (text, testfile);
-    <fclose> testfile
-	
-format-counter(|n):
-	counter -> fix-length-counter
-	where
-		counter-string := <int-to-string> counter;
-		number-of-zeros := <subt>(n, <string-length> counter-string);
-		zeros := <copy; concat-strings> (number-of-zeros, "0");
-		fix-length-counter := <conc-strings> (zeros, counter-string)
-
-format-counter(|n):
-	counter -> <int-to-string> counter
-	where
-		<leq> (n, <length> counter)
 	
-rules //signature frequency helpers
-
-get-random-term-weight-table:
-	ast -> term-position-weight-table
-	where
-		signatures := <collect-signatures> ast;
-		term-weight-table := <map(!(<random-term-with-signature(|ast)>, <occurrences-in(|ast)>))> signatures;
-		term-position-weight-table := <map(!(<Fst>, <Fst; look-up-position-in-ast(|ast)>, <Snd>))> term-weight-table
-
-look-up-position-in-ast(|ast):
-	trm -> <position-of-term(equal(|trm))> ast
-
-has-signature(|trm-signature):
-	trm -> trm
-	where
-		where(get-signature; equal(|trm-signature))
-
-get-signature:
-	term -> (<get-constructor>, <get-arguments; length>)
-	where
-		not(is-string <+ is-list)
-
-occurrences-in(|ast):
-	trm-signature -> <occurrences(has-signature(|trm-signature))> ast
-
-collect-signatures:
-	ast -> <collect-all(get-signature); make-set> ast
-
-
 rules //random helpers
 	
 random-element:
@@ -133,14 +19,10 @@
 		random-index := <random-next(|<length; dec> lst); inc>
 
 random-term(s):
-	ast -> term-with-sign
+	ast -> rnd-trm
 	where
 		terms := <collect-all(s)> ast;
-		term-with-sign := <random-element> terms
-
-random-term-with-signature(|ast):
-	sign -> <random-term(has-signature(|sign))> ast
-
+		rnd-trm := <random-element> terms
 
 random-next(|max-value)=
 	where(<gt>(max-value, 0));
@@ -158,8 +40,11 @@
 
 origin-token-stream = prim("SSL_EXT_origin_token_stream", <id>)
 
+is-layout-token =
+	?(_,_,7)
 
 rules //common helpers
-	
+		
 is-layout-string =
 	where(trim-chars(?' ' <+ ?'\t' <+ ?'\n'); ?"")
+

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/signatures-error-gen.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/signatures-error-gen.str	Wed Nov  2 09:28:04 2011	(r23553)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/signatures-error-gen.str	Wed Nov  2 11:02:15 2011	(r23554)
@@ -7,6 +7,7 @@
 
 	EXCELLENT : e
 	GOOD      : g
+	GOOD_SKIP : gs
 	POOR      : p
 	FAILED    : f
 	SUCCEEDED : s

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Wed Nov  2 09:28:04 2011	(r23553)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Wed Nov  2 11:02:15 2011	(r23554)
@@ -6,12 +6,15 @@
 	lib/editor-common.generated
 	signatures-error-gen
 	apply-oracle
+	libstratego-aterm
+	libstratego-gpp
 
 rules
 	
 generate-testcases(make-error-strings|language-name, error-cat) =
 	dir := <basefile-dir(|language-name)>; 
 	readdir;
+	filter(not(string-ends-with(|".svn"))); 
 	![<Hd>]; //TODO: only one file for now
 	list-loop(
 		<generate-testcases-for-basefile(make-error-strings|language-name, error-cat)> $[[dir]/[<id>]]
@@ -69,7 +72,7 @@
 	modified-text -> <fail>
 	where
 		(recovered-ast, FAILED()) := <apply-success-failure-oracle(parse-source-string-recover-mode(|lang, cursor-loc))> modified-text;
-		filepath := <get-fpath-result(|lang, FAILED())> (filename, "error.str"); //TODO: get-extension => str
+		filepath := <get-fpath-result(|lang, FAILED())> (filename, $[error.[<get-extension(|lang)>]]); //TODO: get-extension => str
 		<save> (filepath, modified-text)
 
 process-testcase-region-oracle(|lang, filename, err-string):
@@ -77,20 +80,20 @@
 	where //<debug(!"fname: ")> filename; !" "; debug;
 		(ast-diff, region-oracles, worst-region-oracle) := <apply-error-region-oracle> (recovered-ast, error-region-ast); //TODO: multiple regions?
 		
-		fpath-error-file := <get-fpath-result(|lang, worst-region-oracle)> (filename, "error.str");
-		//<save> (fpath-error-file, modified-text);
+		fpath-error-file := <get-fpath-result(|lang, worst-region-oracle)> (filename, $[error.[<get-extension(|lang)>]]);
+		<save> (fpath-error-file, modified-text);
 
 		fpath-recovered-ast := <get-fpath-result(|lang, worst-region-oracle)> (filename, "recovered.aterm");
-		//<save-formatted-aterm> (fpath-recovered-ast, recovered-ast);
+		<save-formatted-aterm> (fpath-recovered-ast, recovered-ast);
 		
-		fpath-recovered-pp := <get-fpath-result(|lang, worst-region-oracle)> (filename, "recovered.str");
-		//<save> (fpath-recovered-pp, <pp(|lang)> recovered-ast);
+		fpath-recovered-pp := <get-fpath-result(|lang, worst-region-oracle)> (filename, $[recovered.[<get-extension(|lang)>]]);
+		<save> (fpath-recovered-pp, <pp(|lang)> recovered-ast);
 		
 		fpath-oracle-ast := <get-fpath-result(|lang, worst-region-oracle)> (filename, "oracle.aterm");
-		//<save-formatted-aterm> (fpath-oracle-ast, error-region-ast);
+		<save-formatted-aterm> (fpath-oracle-ast, error-region-ast);
 		
-		fpath-oracle-pp := <get-fpath-result(|lang, worst-region-oracle)> (filename, "oracle.str");
-		//<save> (fpath-oracle-pp, <construct-text-error-region-ast> error-region-ast);
+		fpath-oracle-pp := <get-fpath-result(|lang, worst-region-oracle)> (filename, $[oracle.[<get-extension(|lang)>]]);
+		<save> (fpath-oracle-pp, <construct-text-error-region-ast> error-region-ast);
 		
 		fpath-ast-diff := <get-fpath-result(|lang, worst-region-oracle)> (filename, "diff.aterm");
 		<save-formatted-aterm> (fpath-ast-diff, ast-diff);
@@ -191,3 +194,117 @@
 		]
 
 origin-indent = try(Hd); prim("SSL_EXT_origin_indentation", <id>)
+
+rules //signature frequency helpers
+
+get-random-term-weight-table:
+	ast -> term-position-weight-table
+	where
+		signatures := <collect-signatures> ast;
+		term-weight-table := <map(!(<random-term-with-signature(|ast)>, <occurrences-in(|ast)>))> signatures;
+		term-position-weight-table := <map(!(<Fst>, <Fst; look-up-position-in-ast(|ast)>, <Snd>))> term-weight-table
+
+look-up-position-in-ast(|ast):
+	trm -> <position-of-term(equal(|trm))> ast
+
+has-signature(|trm-signature):
+	trm -> trm
+	where
+		where(get-signature; equal(|trm-signature))
+
+get-signature:
+	term -> (<get-constructor>, <get-arguments; length>)
+	where
+		not(is-string <+ is-list)
+
+occurrences-in(|ast):
+	trm-signature -> <occurrences(has-signature(|trm-signature))> ast
+
+collect-signatures:
+	ast -> <collect-all(get-signature); make-set> ast
+
+random-term-with-signature(|ast):
+	sign -> <random-term(has-signature(|sign))> ast
+
+
+rules //save file
+
+save-formatted-aterm =
+ 	?(fpath, trm);
+	<save> (fpath, <pp-aterm> trm)
+				
+save =
+ 	?(pathname, text);
+ 	testfile := <fopen <+ debug(!"Could not open file: "); fail> (pathname, "w");
+    <fputs> (text, testfile);
+    <fclose> testfile
+	
+format-counter(|n):
+	counter -> fix-length-counter
+	where
+		counter-string := <int-to-string> counter;
+		number-of-zeros := <subt>(n, <string-length> counter-string);
+		zeros := <copy; concat-strings> (number-of-zeros, "0");
+		fix-length-counter := <conc-strings> (zeros, counter-string)
+
+format-counter(|n):
+	counter -> <int-to-string> counter
+	where
+		<leq> (n, <length> counter)
+		
+rules //pretty-printing
+
+pp-aterm = pp-aterm-box ; box2text-string(|100)
+
+pp-error-region:
+	ERROR_REGION(_, error-string) -> error-string
+
+pp-oracle-term(|lang) = pp-oracle-term(pp(|lang))
+
+pp-oracle-term(pp) =
+	alltd(pp-error-region); 
+	pp
+
+pp-region-oracle-diff-list(|lang) = 
+	pp-region-oracle-diff-list(pp(|lang)) 
+
+pp-region-oracle-diff-list(pp) = 
+	map(pp-region-oracle-diff(pp))
+
+pp-region-oracle-diff(|lang) = 
+	pp-region-oracle-diff(pp(|lang))
+
+pp-region-oracle-diff(pp):
+	(recovered-trm, oracle-trm) -> diff-string
+	where
+		pp-recovered-trm := <pp> recovered-trm;
+		pp-oracle-trm := <pp-oracle-term(pp)> oracle-trm;
+		diff-string := 
+		$[
+		actual:   
+		[recovered-trm] 
+		
+		expected: 
+		[pp-oracle-trm]
+		
+		--------------------------------------------------------------------------------------
+		]
+
+rules //text modification
+
+get-modified-text:
+	(ast, replace-fragment, start-offset, end-offset) -> modified-text
+	where
+		ast-text := <origin-text> ast;
+		ast-start-offset := <origin-offset; Fst> ast;
+		start-offset' := <subt>(start-offset, ast-start-offset);
+		end-offset' := <subt>(end-offset, ast-start-offset);
+		modified-text := <replace-in-text> (ast-text, replace-fragment, start-offset', end-offset')
+			
+replace-in-text:
+	(old-text, replace-fragment, start-offset, end-offset) -> result-text
+	where 
+		old-chars := <explode-string> old-text; 
+		(prefix, _) := <split-at(|start-offset)> old-chars; 
+		(_, suffix) := <split-at(|end-offset)> old-chars; 
+		result-text := <conc-strings> (<implode-string> prefix, replace-fragment, <implode-string> suffix) 

From tobivollebregt at gmail.com  Wed Nov  2 13:41:18 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 02 Nov 2011 12:41:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23555 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	context context/esv context/sdf context/template utils
Message-ID: <20111102124118.8E5AC7F8035@mx1.tudelft.nl>

Author: tvo
Date: Wed Nov  2 12:41:18 2011
New Revision: 23555
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23555&sc=1

Log:
SpoofaxLang: some Declaration fixes, workaround Stratego/843

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/esv/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/esv/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/esv/declare.str	Wed Nov  2 11:02:15 2011	(r23554)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/esv/declare.str	Wed Nov  2 12:41:18 2011	(r23555)
@@ -11,7 +11,7 @@
 rules 
 	resolve-sdf-sort-declaration = 
  		?symbol; 
- 		<resolve-symbol-declarations(all-keys-SortDeclaration , bagof-SortDeclaration)><to-scoped-symbol>symbol 
+ 		<resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol 
  	<+
  		<debug-analysis> $[ErrorChecking|Failed to retrive SDF Sort for symbol [<pp-aterm>]];
  		fail

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str	Wed Nov  2 11:02:15 2011	(r23554)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str	Wed Nov  2 12:41:18 2011	(r23555)
@@ -61,7 +61,9 @@
 		x -> x
 		where
 			scoped-x := <to-scoped-symbol>x;
-			rules( Declaration : (Type, scoped-x) -> x)
+			// DR fails if this tuple is placed in-line ...
+			tuple := (Type, scoped-x);
+			rules( Declaration :+ tuple -> x)
 		where
 			<debug-symboltable>$[ScopeTree|Storing Declaration [<pp-aterm>(Type, scoped-x)] -> [<pp-aterm>x]]	
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Wed Nov  2 11:02:15 2011	(r23554)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Wed Nov  2 12:41:18 2011	(r23555)
@@ -1,46 +1,46 @@
 module context/sdf/declare
 imports
-	libstratego-sdf
+  libstratego-sdf
   lib/editor-common.generated
-	include/SpoofaxLang
+  include/SpoofaxLang
 imports
-	context/-
-	codegen/-
-	analyze/main
-	normalize/signatures
+  context/-
+  codegen/-
+  analyze/main
+  normalize/signatures
 imports
-	common
-	utils/debug
-	utils/annotations
-	utils/attributes
+  common
+  utils/debug
+  utils/annotations
+  utils/attributes
 imports
-	context/sdf/declare-signature
+  context/sdf/declare-signature
 imports
-	libstratego-sdf
+  libstratego-sdf
   lib/editor-common.generated
-	include/SpoofaxLang
+  include/SpoofaxLang
 
 rules
-	resolve-sdf-declarations =
-		?symbol;
- 		<resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol
- 	<+
- 		<debug-analysis> $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<pp-aterm>]];
- 		fail
-
-	resolve-unique-sdf-declaration =
- 		?symbol;
- 		<resolve-symbol-unique-declaration(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol
- 	<+
- 		<debug-analysis> $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<pp-aterm>]];
- 		fail
-
-	resolve-NamespaceSort-declaration =
- 		?symbol;
- 		<resolve-symbol-unique-declaration(all-keys-NamespaceSort , bagof-NamespaceSort)><to-scoped-symbol>symbol
- 	<+
- 		<debug-analysis> $[ErrorChecking| FAIL| Failed to retrive NamespaceSort declaration for symbol [<pp-aterm>]];
- 		fail
+  resolve-sdf-declarations =
+    ?symbol;
+     <resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol
+   <+
+     <debug-analysis> $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<pp-aterm>]];
+     fail
+
+  resolve-unique-sdf-declaration =
+     ?symbol;
+     <resolve-symbol-unique-declaration(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol
+   <+
+     <debug-analysis> $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<pp-aterm>]];
+     fail
+
+  resolve-NamespaceSort-declaration =
+     ?symbol;
+     <resolve-symbol-unique-declaration(all-keys-NamespaceSort , bagof-NamespaceSort)><to-scoped-symbol>symbol
+   <+
+     <debug-analysis> $[ErrorChecking| FAIL| Failed to retrive NamespaceSort declaration for symbol [<pp-aterm>]];
+     fail
 
 
 rules
@@ -49,24 +49,24 @@
  // now it is declared in a particular Scope.
  // Here scope is defined by (Package-QName, Module-QName)
  declare-sdf-definition-main=
-    	alltd(declare-sdf-definition)
+      alltd(declare-sdf-definition)
 
 rules
-	declare-sdf-definition :
-		context-free-start-symbols(s*) -> <id>
-		with
-			<declare-sdf-definition-main>s*
-		with
-			store-context-free-start-symbols(|<GetEnclosingPackageName>)
+  declare-sdf-definition :
+    context-free-start-symbols(s*) -> <id>
+    with
+      <declare-sdf-definition-main>s*
+    with
+      store-context-free-start-symbols(|<GetEnclosingPackageName>)
 
 rules
-	declare-sdf-definition:
+  declare-sdf-definition:
     renamings(y) -> <id>
     where
       <all(try(?symbol(_, <id>); declare-sdf-simple-definition))> y
 
 
-	declare-sdf-definition:
+  declare-sdf-definition:
     parameterized(x, y) -> parameterized(x, y)
     where
       <declare-sdf-definition> unparameterized(x);
@@ -77,46 +77,42 @@
   declare-sdf-definition:
     prod @ prod(lhs, sort, attrs) -> <id>
     where
-    	<declare-sdf-definition-internal> (prod, lhs, sort, attrs)
+      <declare-sdf-definition-internal> (prod, lhs, sort, attrs)
 
   declare-sdf-definition-internal:
     (prod, lhs, sort, attrs) -> <id>
     where
       x:= <get-rhs-sort-name>sort;
-      qualified-sort-name := <to-scoped-symbol> x
-   	with
-   		// enable-declaration-debugging;
+      qualified-sort-name := <to-scoped-symbol> x;
+      package-qualified-sort-name := <to-package-scoped-symbol> x
+     with
+       // enable-declaration-debugging;
       // reject productions shouldn't generate signatures ever
       if not(<attrs(fetch(?reject()))> attrs) then
         <store-operation-declaration>prod
       end
-  	with
+    with
       <topdown(try(store-namespace-def))> lhs
     with
       if <fetch-cons-name> attrs => cons then
-        package-qualified-sort-name := <to-package-scoped-symbol> x;
         package-qualified-cons-name := <to-package-scoped-symbol> cons;
+        // DR fails if this tuple is placed in-line ...
+        tuple := (package-qualified-sort-name, package-qualified-cons-name);
         rules(
-        	// Needed for Sort.Cons references to the production.
-        	Declaration: (package-qualified-sort-name, package-qualified-cons-name) -> prod
+          // Needed for Sort.Cons references to the production.
+          Declaration :+ tuple -> prod
         )
       end
     with
-      <Declaration> qualified-sort-name
-    <+
-      (
-        // in SPT tests, file may be unavailable
-      	if (GetEnclosingModuleName;get-module-abs-filepath <+ LegacyModuleResolvedPath) => file then
-      	  rules( DeclarationFile: qualified-sort-name -> file )
-      	end;
-      	rules(
-       		Declaration		 :    qualified-sort-name  -> prod
-        	// Added following two dynamic rules for the ESV Def. analysis
-        	SortDeclaration  :  qualified-sort-name -> x
-       		SortProductionLHS:+ qualified-sort-name -> lhs
-      	);
-      	<debug-declaration(| "SDF" , "Info" )> $[Storing Declaration : [<pp-aterm>qualified-sort-name]  -> [<pp-aterm>prod]]
-      )
+      // in SPT tests, file may be unavailable
+      if (GetEnclosingModuleName;get-module-abs-filepath <+ LegacyModuleResolvedPath) => file then
+        rules( DeclarationFile: qualified-sort-name -> file )
+      end;
+      rules(
+        Declaration :+ qualified-sort-name -> prod
+        Declaration :+ package-qualified-sort-name -> prod
+      );
+      <debug-declaration(| "SDF" , "Info" )> $[Storing Declaration : [<pp-aterm>qualified-sort-name]  -> [<pp-aterm>prod]]
     with
       <alltd(declare-sdf-usage)> lhs
      // ;disable-declaration-debugging
@@ -125,61 +121,61 @@
   store-namespace-def:
     namespacedef(name, sort) -> <id>
     with
-    	scoped-name  := <to-scoped-symbol> name
+      scoped-name  := <to-scoped-symbol> name
     where
       rules(NamespaceSort: scoped-name  -> sort)
 
   declare-sdf-definition:
-		lex-syntax at lexical-syntax(lex-defintions) ->lex-syntax
-		with{| IsInsideLexicalSyntaxBlock:
-							mark-as-lexical-syntax-block;
-							<declare-sdf-definition-main> lex-defintions
-				|}
-
-
-	declare-sdf-definition:
-		parameterized(x, y) -> parameterized(x, y)
-  	where
-			<declare-sdf-definition> unparameterized(x);
-  		<alltd(declare-sdf-simple-definition)> y
-
-	declare-sdf-definition:
-		'sorts(_) -> <id>
-		with
-    	 alltd(declare-sdf-usage)
-
-	declare-sdf-definition:
-		context-free-start-symbols(_) -> <id>
-		with
-    	alltd(declare-sdf-usage)
-
-  declare-sdf-definition:
-		lexical-start-symbols(_) -> <id>
-	  with
-	  	alltd(declare-sdf-usage)
+    lex-syntax at lexical-syntax(lex-defintions) ->lex-syntax
+    with{| IsInsideLexicalSyntaxBlock:
+              mark-as-lexical-syntax-block;
+              <declare-sdf-definition-main> lex-defintions
+        |}
+
+
+  declare-sdf-definition:
+    parameterized(x, y) -> parameterized(x, y)
+    where
+      <declare-sdf-definition> unparameterized(x);
+      <alltd(declare-sdf-simple-definition)> y
+
+  declare-sdf-definition:
+    'sorts(_) -> <id>
+    with
+       alltd(declare-sdf-usage)
 
-	declare-sdf-definition:
+  declare-sdf-definition:
+    context-free-start-symbols(_) -> <id>
+    with
+      alltd(declare-sdf-usage)
+
+  declare-sdf-definition:
+    lexical-start-symbols(_) -> <id>
+    with
+      alltd(declare-sdf-usage)
+
+  declare-sdf-definition:
     kernel-start-symbols(_) -> <id>
     with
       alltd(declare-sdf-usage)
 
-	declare-sdf-simple-definition:
-		sort(x) -> <id>
-		with
-	  	scoped-x:= <to-scoped-symbol>x;
-	  	rules(Declaration: scoped-x -> x)
-		where
-			<debug-declaration(| "SDF" , "Info" )>$[Storing Declaration [<pp-aterm>scoped-x] -> [<pp-aterm>x]]
+  declare-sdf-simple-definition:
+    sort(x) -> <id>
+    with
+      scoped-x:= <to-scoped-symbol>x;
+      rules(Declaration :+ scoped-x -> x)
+    where
+      <debug-declaration(| "SDF" , "Info" )>$[Storing Declaration [<pp-aterm>scoped-x] -> [<pp-aterm>x]]
 
 rules
 
-	declare-sdf-usage:
+  declare-sdf-usage:
     sort(x) -> <id>
     with
-    	x-with-scope := <to-scoped-symbol>x
+      x-with-scope := <to-scoped-symbol>x
       ;rules(Usage: (scope, x)-> x)
 
-	declare-sdf-usage:
+  declare-sdf-usage:
     parameterized-sort(x, y) -> <id>
     where
       if !y => [sort(y')]; <is-string> x; <is-string> y' then
@@ -190,13 +186,13 @@
 
 rules
 
-	propose-completion:
+  propose-completion:
     sort(COMPLETION(x)) -> [decl*, use*]
     with
       decl* := <all-keys-Declaration> <to-scoped-symbol> x;
       use*  := <all-keys-Usage> <to-scoped-symbol>x
 
-	propose-completion:
+  propose-completion:
     NOCONTEXT(COMPLETION(x)) -> [decl*, use*]
     with
       decl* := <all-keys-Declaration> <to-scoped-symbol>x;

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Wed Nov  2 11:02:15 2011	(r23554)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Wed Nov  2 12:41:18 2011	(r23555)
@@ -51,7 +51,6 @@
       rules(Usage: x -> x)
 
 rules // Options
-  // FIXME: move to spoofax.configuration
 
   declare-template-option:
     Newlines(t) -> <id>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str	Wed Nov  2 11:02:15 2011	(r23554)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str	Wed Nov  2 12:41:18 2011	(r23555)
@@ -4,6 +4,10 @@
 	libstratego-sglr
 	include/SpoofaxLang
 
+signature
+  constructors
+    deprecated : String -> Term
+
 overlays
   sdf-cons(x) = term(default(appl(unquoted("cons"), [fun(quoted(x))])))
 
@@ -23,3 +27,9 @@
 
   fetch-cons-name:
     attrs(attr*) -> <getfirst(fetch-cons-name)> attr*
+
+  is-bracket:
+    attrs(attr*) -> <one(?bracket())> attr*
+
+  is-deprecated:
+    attrs(attr*) -> <one(?deprecated(_))> attr*

From m.dejonge at tudelft.nl  Wed Nov  2 14:55:40 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Nov 2011 13:55:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23556 - in
	sglr-recovery/trunk/SyntaxErrorGen: editor trans
Message-ID: <20111102135540.AB4F8CC062@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov  2 13:55:40 2011
New Revision: 23556
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23556&sc=1

Log:
evaluation results per category: absolutes, percentages, weight absolutes/percentages

Added:
   sglr-recovery/trunk/SyntaxErrorGen/trans/builders.str
Modified:
   sglr-recovery/trunk/SyntaxErrorGen/editor/Err-Builders.esv
   sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/err.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/editor/Err-Builders.esv
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/editor/Err-Builders.esv	Wed Nov  2 12:41:18 2011	(r23555)
+++ sglr-recovery/trunk/SyntaxErrorGen/editor/Err-Builders.esv	Wed Nov  2 13:55:40 2011	(r23556)
@@ -15,4 +15,4 @@
                                                                                                               
   observer : editor-analyze                                                                                   
                                                                                                               
-  builder  : "Generate Testsuite Stratego" = generate-testsuite-stratego (openeditor) (source)                   
+  builder  : "Stratego  --Evaluate Edit Scenarios" = evaluate-edit-scenarios-stratego (openeditor) (source)                   

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str	Wed Nov  2 12:41:18 2011	(r23555)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/apply-oracle.str	Wed Nov  2 13:55:40 2011	(r23556)
@@ -147,7 +147,7 @@
 	where
 		<is-parent-of-error-region> oracle-term;
 		not(recovery-affects-unrelated-list-elements);
-		not(recovery-discards-leafnodes(|50)) 
+		not(recovery-discards-leafnodes(|100)) 
 		
 eval-oracle-poor:
 	(recovered-trm, oracle-trm) -> [POOR()]

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/builders.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/builders.str	Wed Nov  2 13:55:40 2011	(r23556)
@@ -0,0 +1,14 @@
+module builders
+
+imports 
+	workflow
+	configuration-stratego
+
+strategies //builders
+
+evaluate-edit-scenarios-stratego:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"txt")> path;
+      result   :=  <evaluate-edit-scenarios(|<stratego-language-name>)>
+

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str	Wed Nov  2 12:41:18 2011	(r23555)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration-stratego.str	Wed Nov  2 13:55:40 2011	(r23556)
@@ -10,14 +10,6 @@
 
 strategies //error generation strategies
 	
-strategies //common language strategies 
-
-generate-testsuite-stratego:
-    (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"txt")> path;
-      generate-testcases(|<stratego-language-name>);
-      result   :=  "Testsuite for stratego: " //info about generation
       
 strategies //common language strategies 
 

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Wed Nov  2 12:41:18 2011	(r23555)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Wed Nov  2 13:55:40 2011	(r23556)
@@ -4,7 +4,6 @@
   libstratego-sglr
   lib/editor-common.generated
   configuration-stratego
-  generate-errors-incomplete
   signatures-error-gen
 
 strategies //error generation strategies
@@ -21,9 +20,6 @@
 
 pp(|lang-name) = fail
 
-generate-testcases(|language-name) =
-	generate-incompletion-testcases(|language-name)
-
 parse-source-file(|lang-name) =
     parse-file(
       strsglr-perror, strsglr-report-parse-error

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/err.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/err.str	Wed Nov  2 12:41:18 2011	(r23555)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/err.str	Wed Nov  2 13:55:40 2011	(r23556)
@@ -6,7 +6,7 @@
   libstratego-aterm
   include/Err
   lib/editor-common.generated
-  configuration		
+  builders	
 	
 rules // Main editor interface (defined by editor/Err-Builders and -References.esv)
   

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str	Wed Nov  2 12:41:18 2011	(r23555)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str	Wed Nov  2 13:55:40 2011	(r23556)
@@ -10,9 +10,6 @@
 
 strategies
 	
-generate-incompletion-testcases(|language-name) =
-	generate-testcases(create-completion-errors|language-name, "incomplete")
-
 create-completion-errors:
 	term -> completion-errors //[("a ->", 4)]
 	where

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Wed Nov  2 12:41:18 2011	(r23555)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Wed Nov  2 13:55:40 2011	(r23556)
@@ -8,25 +8,42 @@
 	apply-oracle
 	libstratego-aterm
 	libstratego-gpp
+	generate-errors-incomplete
 
 rules
-	
-generate-testcases(make-error-strings|language-name, error-cat) =
-	dir := <basefile-dir(|language-name)>; 
-	readdir;
-	filter(not(string-ends-with(|".svn"))); 
-	![<Hd>]; //TODO: only one file for now
-	list-loop(
-		<generate-testcases-for-basefile(make-error-strings|language-name, error-cat)> $[[dir]/[<id>]]
-	)
 
-generate-testcases-for-basefile(make-error-strings|language-name, error-cat):
-	basefile -> ()
+evaluate-edit-scenarios(|language-name) =
+	evaluate-scenario(create-completion-errors|language-name, "incomplete")
+
+evaluate-scenario(make-error-strings|language-name, error-cat):
+	_ -> result-description
+	where
+		dir := <basefile-dir(|language-name)>; 
+		readdir;
+		filter(not(string-ends-with(|".svn"))); 
+		![<Hd>]; //TODO: only one file for now
+		mapconcat(
+			<evaluate-scenario-for-basefile(make-error-strings|language-name, error-cat)> $[[dir]/[<id>]]
+		);
+		group-test-evaluations;
+		result-description := <result-description(|error-cat)>
+
+evaluate-scenario-for-basefile(make-error-strings|language-name, error-cat):
+	basefile -> evaluations
 	where
 		base-ast := <parse-source-file(|language-name)> basefile;
 		term-weight-table := <get-random-term-weight-table> base-ast;
 		test-case-specifications := <map(testcase-specifications(make-error-strings)); concat> term-weight-table;
-		<process-testcase-specifications(|language-name, error-cat, base-ast, 1)> test-case-specifications
+		evaluations := <process-testcase-specifications(|language-name, error-cat, base-ast, 1)> test-case-specifications
+		
+add-score:
+	((oracle-result, weight), (oracle-result, fcount, weight-score)) -> (oracle-result, <inc> fcount, <add>(weight-score, weight))
+
+add-score:
+	((r, _), (oracle-result, fcount, weight-score)) -> (oracle-result, fcount, weight-score)
+	where
+		<not(equal)> (r, oracle-result)
+
 
 testcase-specifications(make-error-strings):
 	(term, position, weight) -> test-case-specifications
@@ -35,21 +52,26 @@
 		test-case-specifications := <map(!(term, position, <Fst>, <Snd>, weight))> error-prefixes
 		//[(term, position, error-string, error-offset, weight)]
 		
+process-testcase-specifications(|language-name, error-cat, ast, counter) =
+	process-testcase-specifications-succes(|language-name, error-cat, ast, counter) <+
+	process-testcase-specifications-fail(|language-name, error-cat, ast, counter)
+
 process-testcase-specifications(|language-name, error-cat, ast, counter):
-	[test-spec|remaining-test-specifications] -> new-counter
+	[] -> []
+
+process-testcase-specifications-succes(|language-name, error-cat, ast, counter):
+	[test-spec|remaining-test-specifications] -> [eval | eval-tail]
 	where
-		if <process-testcase(|language-name, error-cat, ast, counter)> test-spec then
-			new-counter := <inc> counter
-		else
-			new-counter := counter
-		end;
-		<process-testcase-specifications(|language-name, error-cat, ast, new-counter)> remaining-test-specifications
+		eval := <process-testcase(|language-name, error-cat, ast, counter)> test-spec;
+		eval-tail := <process-testcase-specifications(|language-name, error-cat, ast, <inc> counter)> remaining-test-specifications
 
-process-testcase-specifications(|language-name, error-cat, ast, counter):
-	[] -> -1
+process-testcase-specifications-fail(|language-name, error-cat, ast, counter):
+	[test-spec|remaining-test-specifications] -> eval-tail
+	where
+		eval-tail := <process-testcase-specifications(|language-name, error-cat, ast, counter)> remaining-test-specifications
 
 process-testcase(|lang, error-cat, ast, counter): 
-	(term, position, error-string, error-offset, weight) -> ()
+	(term, position, error-string, error-offset, weight) -> (eval, weight)
 	where 
 		filename := <get-fpath(|error-cat, weight, counter)> term; 
 		modified-text := <get-modified-text> (ast, error-string, <origin-offset; Fst> term, <origin-offset; Snd> term);
@@ -60,7 +82,9 @@
 			base-pp-ast := <try(pp(|lang); parse-source-string(|lang))> ast; 
 			err-region := <construct-error-region(|cursor-loc, error-string)> term; 
 			error-region-ast := <construct-error-region-ast(|term, err-region)> base-pp-ast; 
-			<process-testcase-region-oracle(|lang, filename, error-string)> (modified-text, recovered-ast, error-region-ast)
+			eval := <process-testcase-region-oracle(|lang, filename, error-string)> (modified-text, recovered-ast, error-region-ast)
+		else
+			eval := FAILED()
 		end
 		
 process-testcase-failure-oracle(|lang, filename, cursor-loc):
@@ -76,7 +100,7 @@
 		<save> (filepath, modified-text)
 
 process-testcase-region-oracle(|lang, filename, err-string):
-	(modified-text, recovered-ast, error-region-ast) -> region-oracles
+	(modified-text, recovered-ast, error-region-ast) -> worst-region-oracle
 	where //<debug(!"fname: ")> filename; !" "; debug;
 		(ast-diff, region-oracles, worst-region-oracle) := <apply-error-region-oracle> (recovered-ast, error-region-ast); //TODO: multiple regions?
 		
@@ -308,3 +332,39 @@
 		(prefix, _) := <split-at(|start-offset)> old-chars; 
 		(_, suffix) := <split-at(|end-offset)> old-chars; 
 		result-text := <conc-strings> (<implode-string> prefix, replace-fragment, <implode-string> suffix) 
+
+rules //evaluation results
+
+group-test-evaluations:
+	test-results -> [excellent, good, goodskip, poor, failed]
+	where
+		excellent := <foldl(add-score)> (test-results, (EXCELLENT(), 0, 0));
+		good      := <foldl(add-score)> (test-results, (GOOD(), 0, 0));
+		goodskip  := <foldl(add-score)> (test-results, (GOOD_SKIP(), 0, 0));
+		poor      := <foldl(add-score)> (test-results, (POOR(), 0, 0));
+		failed    := <foldl(add-score)> (test-results, (FAILED(), 0, 0))
+
+result-description(|error-cat):
+	grouped-results -> result-txt
+	where
+		total-files := <foldl(<add>(<Fst; Snd>, <Snd>))> (grouped-results, 0);
+		total-weight := <foldl(<add>(<Fst; Third>, <Snd>))> (grouped-results, 0);
+		grouped-results-string := <
+			map(result-description-group(|total-files, total-weight));
+			separate-by(|"\n");
+			concat-strings
+		> grouped-results;
+		result-txt := 
+		$[
+		[<upper-case> error-cat]:
+			[grouped-results-string]
+		]
+
+result-description-group(|total-files, total-weight):
+	(oracle, file-count, weight-count) ->
+	$[[<get-constructor> oracle]: [file-count] ([file-count-percentage]%), [weight-count] ([weight-count-percentage]%)]
+	where
+		file-count-percentage := <div>(<mul>(file-count,100), total-files);
+		weight-count-percentage := <div>(<mul>(weight-count,100), total-weight)
+
+	

From m.dejonge at tudelft.nl  Wed Nov  2 17:42:06 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Nov 2011 16:42:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23557 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin
Message-ID: <20111102164206.EC1A07F8046@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov  2 16:42:04 2011
New Revision: 23557
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23557&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java	Wed Nov  2 13:55:40 2011	(r23556)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/LayoutStructure.java	Wed Nov  2 16:42:04 2011	(r23557)
@@ -319,6 +319,8 @@
 					indexPreceedingSib = i-1;
 			}
 		}
+		if(indexPreceedingSib == -1)
+			return -1;
 		assert(indexPreceedingSib >= 0 && indexPreceedingSib < listParent.getSubtermCount());
 		ISimpleTerm preceedingNode = listParent.getSubterm(indexPreceedingSib);
 		if(!ImploderAttachment.hasImploderOrigin(preceedingNode))

From M.A.Akhter at student.tudelft.nl  Wed Nov  2 21:32:33 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 02 Nov 2011 20:32:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23558 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index
Message-ID: <20111102203233.BC5C57F8046@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Nov  2 20:32:31 2011
New Revision: 23558
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23558&sc=1

Log:
fixed bugs due to unknown type constructor(s) in incremental compilation

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Wed Nov  2 16:42:04 2011	(r23557)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Wed Nov  2 20:32:31 2011	(r23558)
@@ -31,8 +31,8 @@
 	private static final long serialVersionUID = 7324156752002137217L;
 	private static final String INTERNAL_NAMESPACENAME = "__internal";
 
-	private transient Set<NamespaceUri> importedNamespaceUris;
-	private transient Set<NamespaceUri> enclosedNamespaceUris;
+	transient Set<NamespaceUri> importedNamespaceUris;
+	transient Set<NamespaceUri> enclosedNamespaceUris;
 	
 	/**
 	 * Instantiates a new instance of {@link PackageNamespace}
@@ -61,7 +61,7 @@
 	 * @param facade
 	 * @throws SpxSymbolTableException
 	 */
-	private void ensureEnclosedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
+	void ensureEnclosedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
 		if( enclosedNamespaceUris == null){
 			enclosedNamespaceUris = new HashSet<NamespaceUri>();
 			
@@ -83,7 +83,7 @@
 	 * @param facade
 	 * @throws SpxSymbolTableException
 	 */
-	private void ensureImportedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
+	void ensureImportedNamespaceUrisLoaded(SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
 		if( importedNamespaceUris == null){
 			
 			importedNamespaceUris= new HashSet<NamespaceUri>();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java	Wed Nov  2 16:42:04 2011	(r23557)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java	Wed Nov  2 20:32:31 2011	(r23558)
@@ -143,7 +143,6 @@
 	public IStrategoConstructor getConstructor(String symbolTypeCons, int arity) {
 		return _knownCons.get(ConstructorDef.newInstance(symbolTypeCons ,arity));
 	}
-	
 
 	public boolean hasEqualConstructor ( IStrategoAppl actual , IStrategoConstructor expected){
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Wed Nov  2 16:42:04 2011	(r23557)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Wed Nov  2 20:32:31 2011	(r23558)
@@ -120,9 +120,11 @@
 
 		initListeners();
 		
+		/*
 		if(Utils.DEBUG){
-			_spxSymbolTable.printSymbols("init" , facade.getProjectPath() , facade.indexId());
-		}	
+			_spxSymbolTable.printSymbols(facade, "init" , facade.getProjectPath() , facade.indexId());
+		}
+		*/	
 	}
 	
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Wed Nov  2 16:42:04 2011	(r23557)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Wed Nov  2 20:32:31 2011	(r23558)
@@ -296,12 +296,15 @@
 		persistenceManager().logMessage(SRC, "clearGlobalNamespce | Successfully removed all the entries." );
 	}
 	
+	
+	
 	/**
 	 * Printing all the symbols current hashmap 
 	 * 
 	 * @throws IOException
+	 * @throws SpxSymbolTableException 
 	 */
-	public void printSymbols(String state , String projectPath , String indexId) throws IOException{
+	public void printSymbols(SpxSemanticIndexFacade f, String state , String projectPath , String indexId) throws IOException, SpxSymbolTableException{
 		new File(projectPath + "/.log").mkdirs();
 		FileWriter fstream = new FileWriter(projectPath + "/.log/"+indexId+"_symbols_"+Utils.now("yyyy-MM-dd HH.mm")+".txt" , true);
 		BufferedWriter out = new BufferedWriter(fstream);
@@ -311,7 +314,7 @@
 			if(namespaces != null){
 				for(INamespace ns : namespaces.values()){
 					out.write("[" + ns +"]\n\n");
-					logEntries(ns,out) ;
+					logEntries(f, ns,out) ;
 				}
 			}
 		}catch(IOException ex){ //ignore 
@@ -320,10 +323,33 @@
 		finally{out.close();}
 	}
 
-	private static  void logEntries( INamespace namespace , BufferedWriter logger) throws IOException{
+	private static  void logEntries(SpxSemanticIndexFacade f,  INamespace namespace , BufferedWriter logger) throws IOException, SpxSymbolTableException{
 		Map<SpxSymbolKey , List<SpxSymbol>> members = namespace.getMembers();
+		if( namespace instanceof PackageNamespace){
+			PackageNamespace ns = (PackageNamespace)namespace;
+			ns.ensureEnclosedNamespaceUrisLoaded(f);
+			ns.ensureImportedNamespaceUrisLoaded(f);
+			
+			logger.write("\t" + "Enclosed Namespace Uris"+"\n");
+			for(NamespaceUri uri : ns.enclosedNamespaceUris ){
+				logger.write( "\t\t"+uri +"\n");
+			}
+			logger.write("\n");
+			
+
+			logger.write("\tImported Namespace Uris"+"\n");
+			for(NamespaceUri uri : ns.importedNamespaceUris ){
+				logger.write("\t\t"+uri +"\n");
+			}
+			logger.write("\n");
+		}
+		
+		if( namespace instanceof ModuleNamespace){
+			logger.write("\t\tParent Namespace :"+ ((ModuleNamespace) namespace).enclosingNamespaceUri()+"\n" );
+		}
+		
 		for( SpxSymbolKey k : members.keySet()) {
-			logger.write("\t"+k.toString()  + "  ----> \n");
+			logger.write("\t\t"+k.toString()  + "  ----> \n");
 			for( SpxSymbol s : members.get(k) ){
 				logger.write( s.printSymbol());
 			}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Wed Nov  2 16:42:04 2011	(r23557)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Wed Nov  2 20:32:31 2011	(r23558)
@@ -357,15 +357,24 @@
 	public IStrategoTerm resolveSymbols(IStrategoTuple searchCriteria) throws SpxSymbolTableException{
 		if (searchCriteria.getSubtermCount() != 4)
 			throw new IllegalArgumentException(" resolveSymbols | Illegal symbolLookupTerm Argument ; expected 4 subterms. Found : " + searchCriteria.getSubtermCount());
+		
 		String searchMode = asJavaString(searchCriteria.get(3)).trim();
+		
 		IStrategoAppl typeAppl =  (IStrategoAppl)searchCriteria.getSubterm(2);
-		IStrategoConstructor typeCtor = getCons().getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
+		IStrategoConstructor typeCtor = null; 
+		try{
+			typeCtor = verifyKnownContructorExists(typeAppl);
+		}catch(IllegalArgumentException ex){
+			// It seems like the constructor does not exist in local type declarations. 
+			// Hence, defining it to be used further.
+			IStrategoConstructor ctor = (IStrategoConstructor)typeAppl.getConstructor();
+			typeCtor = _spxConstructors.indexConstructor(ctor);
+		}
 		
 		Set<SpxSymbol> spxSymbols = null;
-		
 		if (typeCtor != null) {
 			if(searchMode.equalsIgnoreCase(Utils.All)){
-				spxSymbols = resolveSymbols( 
+				spxSymbols = resolveSymbols(
 							(IStrategoAppl)searchCriteria.get(0),
 							searchCriteria.get(1),
 							typeCtor);
@@ -378,7 +387,9 @@
 			else{
 				throw new IllegalArgumentException(" Illegal symbolLookupTerm searchMode Argument ; expected * or . . Found : " + searchMode);
 			}
-		}
+		}else
+			this.logMessage("resolve symbols. Unknown Type Contructor "+typeAppl.getConstructor().getName() );
+		
 		return SpxSymbol.toTerms(this, spxSymbols);
 	}
 	
@@ -439,6 +450,7 @@
 			resolvedSymbols.add(sym) ;
 		
 		return resolvedSymbols;
+		
 	}
 
 	/**
@@ -894,14 +906,14 @@
 	 */
 	public void persistChanges() throws IOException {
 		_persistenceManager.commit();
-		
-		if(Utils.DEBUG){
-			_persistenceManager.spxSymbolTable().printSymbols("commit",
-					this.getProjectPath(), this.indexId());
-		}
 
-	}
-	
+		if (Utils.DEBUG)
+			try {
+				_persistenceManager.spxSymbolTable().printSymbols(this,
+						"commit", this.getProjectPath(), this.indexId());
+			} catch (SpxSymbolTableException e) {
+			}
+	}	
 	/**
 	 * Closes any underlying open connection. 
 	 *  

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Wed Nov  2 16:42:04 2011	(r23557)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Wed Nov  2 20:32:31 2011	(r23558)
@@ -28,7 +28,7 @@
 	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
 	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
 	
-	static final boolean DEBUG = false;
+	static boolean DEBUG = false;
 	
 	/**
 	 * Constructs {@link IStrategoList} from {@code decls}  

From m.dejonge at tudelft.nl  Thu Nov  3 11:00:13 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Nov 2011 10:00:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23559 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111103100014.01A5D7F801C@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov  3 10:00:12 2011
New Revision: 23559
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23559&sc=1

Log:
missing token errors

Added:
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-missing.str
Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Wed Nov  2 20:32:31 2011	(r23558)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Thu Nov  3 10:00:12 2011	(r23559)
@@ -10,6 +10,8 @@
 
 bracket-pairs = fail
 
+missing-tokens = fail
+
 bracket-pairs-stochast = !65
 	
 strategies //common language strategies 

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str	Wed Nov  2 20:32:31 2011	(r23558)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str	Thu Nov  3 10:00:12 2011	(r23559)
@@ -4,4 +4,5 @@
 
 bracket-pairs = ![("(", ")"), ("[", "]"), ("{", "}"), ("<", ">"), ("|[", "]|"), ("\"", "\"")]
 
+missing-tokens = ![";", "<+", "+>", "+", "(", ")", "<", ">", "[", "]", "|", "=", ":", "->", "=>", "<=" ]
 //todo: templeates
\ No newline at end of file

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str	Wed Nov  2 20:32:31 2011	(r23558)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str	Thu Nov  3 10:00:12 2011	(r23559)
@@ -9,13 +9,17 @@
   workflow
 
 strategies
+
+ast-to-completion-error-specification =
+	make-testcase-specification-for-terms(create-completion-errors)
 	
 create-completion-errors:
-	term -> completion-errors //[("a ->", 4)]
+	term -> completion-errors //[(T, [2,3], "a ->", 4)]
 	where
 		completion-errors := <
 			get-incomplete-strings;
-			map(!(<conc-strings>, <Fst; string-length>))
+			map(!(<conc-strings>, <Fst; string-length>));
+			map(!(term, [], <Fst>, <Snd>))
 		> term
 		
 strategies //create incomplete prefixes

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-missing.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-missing.str	Thu Nov  3 10:00:12 2011	(r23559)
@@ -0,0 +1,98 @@
+module generate-errors-missing
+
+imports
+  lib/editor-common.generated
+  configuration
+  helpers
+  signatures-error-gen
+  apply-oracle
+  workflow
+
+strategies
+
+ast-to-missing-error-specification:
+	ast -> <conc>(missing-separator-errors, missing-token-errors)
+	where
+		missing-separator-errors := <make-testcase-specification-for-terms(create-errors-missing-separator)> ast;
+		missing-token-errors := <create-missing-token-errors> ast
+
+create-missing-token-errors:
+	ast -> missing-errors
+	where
+		weighted-missing-tokens := <missing-tokens-specification> ast;
+		missing-errors := <map(create-token-error-missing(|ast))> weighted-missing-tokens
+
+missing-tokens-specification:
+	ast -> random-error-tokens-weighted
+	where
+		tokens := <get-shuffled-literal-tokens> ast;
+		token-set := <make-set({t,s: ?((_,t,s),(_,t,s))})> tokens; 
+		random-error-tokens := <filter(where(Snd; contained-in-missings))> token-set;
+		random-error-tokens-weighted := <map(!(<id>, <count-occurrences(|tokens)>))> random-error-tokens
+		
+
+count-occurrences(|tokens):
+	(_, t, s) -> <filter(?(_, t, s)); length> tokens
+
+contained-in-missings:
+	token -> token
+	where 
+		missing-tokens;
+		fetch(equal(|token))
+	
+
+rules //missing operators
+
+rules //missing separators
+	
+create-errors-missing-separator:
+	trm -> <create-errors-on-subterms(create-error-string-missing-separator)> trm
+	where
+		<not(is-list)> trm
+
+create-error-string-missing-separator:
+	lst -> (err-string, prefix-length)
+	where
+		<?[_,_|_]> lst;
+		token-expansion := <origin-token-expand> lst; //debug(!1); 
+		(prefix, ws, suffix) := <split-fetch-keep(is-string; not(is-layout-string); !" ")> token-expansion; //debug(!2);
+		err-string-prefix := <map(is-string <+ origin-text); concat-strings> prefix; //debug(!3);
+		err-string-suffix := <map(is-string <+ origin-text); concat-strings> suffix; //debug(!4);
+		err-string := <concat-strings> [err-string-prefix, ws, err-string-suffix]; //debug(!5);
+		prefix-length := <string-length> err-string-prefix //;debug(!6)
+
+rules //helper rules for tokens
+
+get-shuffled-literal-tokens:
+	ast -> shuffled-tokens
+	where
+		tokenstream := <origin-token-stream> ast;
+		literal-tokens := <filter(is-keyword-token <+ is-operator-token)> tokenstream;
+		shuffled-tokens := <shuffle> literal-tokens
+		
+
+create-token-error-missing(|ast):
+	(token, weight) -> <create-token-error-replaced(|ast)> (token, " ", weight)
+
+
+create-token-error-replaced(|ast):
+	(token, new-token-text, weight) -> (trm, [], err-string, prefix-length, weight) //TODO: get-term-path instead of []
+	where
+		trm := <find-parent-of-token(|token)> ast; 
+		tokenstream := <origin-token-stream> trm;
+		(prefix, suffix) := <split-fetch(equal(|token))> tokenstream;
+		err-string-prefix := <map(Snd); concat-strings> prefix; //debug(!3);
+		err-string-suffix := <map(Snd); concat-strings> suffix; //debug(!4);
+		err-string := <concat-strings> [err-string-prefix, new-token-text, err-string-suffix]; //debug(!5);
+		prefix-length := <string-length> err-string-prefix //;debug(!6)
+
+find-parent-of-token(|token):
+	ast -> trm
+	where
+		<oncebu(trm := <contains-token(|token)>)> ast
+
+contains-token(|token):
+	node -> node
+	where
+		tokenstream := <origin-token-stream> node;
+		<fetch(equal(|token))> tokenstream
\ No newline at end of file

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str	Wed Nov  2 20:32:31 2011	(r23558)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str	Thu Nov  3 10:00:12 2011	(r23559)
@@ -4,7 +4,28 @@
   lib/editor-common.generated
   signatures-error-gen
   configuration
+
+
+rules //error creation helpers
+
+make-testcase-specification-for-terms(term-to-error-specs):
+	base-ast -> test-case-specifications
+	where
+		term-weight-table := <get-random-term-weight-table> base-ast; 
+		test-case-specifications := <map(testcase-specifications(term-to-error-specs)); concat> term-weight-table
 	
+create-errors-on-subterms(create-error):
+	trm -> errors
+	where
+		indexed-subterms := <get-arguments; add-indices> trm;
+		errors := 
+			<filter(create-error-on-indexed-subterm(create-error))> indexed-subterms
+		
+create-error-on-indexed-subterm(create-error):
+	(index, subterm) -> (subterm, [<dec> index], err-string, prefix-length)
+	where
+		(err-string, prefix-length) := <create-error> subterm
+
 rules //random helpers
 	
 random-element:
@@ -43,8 +64,60 @@
 is-layout-token =
 	?(_,_,7)
 
+is-keyword-token =
+	?(_,_,4)
+
+is-operator-token =
+	?(_,_,5)
+
 rules //common helpers
 		
 is-layout-string =
 	where(trim-chars(?' ' <+ ?'\t' <+ ?'\n'); ?"")
 
+make-set(eq) =
+    foldr(![], union(eq), ![<id>])
+
+rules //signature frequency helpers
+
+get-random-term-weight-table:
+	ast -> term-position-weight-table
+	where
+		signatures := <collect-signatures> ast;
+		term-weight-table := <map(!(<random-term-with-signature(|ast)>, <occurrences-in(|ast)>))> signatures;
+		term-position-weight-table := <map(!(<Fst>, <Fst; look-up-position-in-ast(|ast)>, <Snd>))> term-weight-table
+
+look-up-position-in-ast(|ast):
+	trm -> <position-of-term(equal(|trm))> ast
+
+has-signature(|trm-signature):
+	trm -> trm
+	where
+		where(get-signature; equal(|trm-signature))
+
+get-signature:
+	term -> (<get-constructor>, <get-arguments; length>)
+	where
+		not(is-string <+ is-list)
+
+occurrences-in(|ast):
+	trm-signature -> <occurrences(has-signature(|trm-signature))> ast
+
+collect-signatures:
+	ast -> <collect-all(get-signature); make-set> ast
+
+random-term-with-signature(|ast):
+	sign -> <random-term(has-signature(|sign))> ast
+
+
+rules
+
+testcase-specifications(make-error-strings):
+	(term, position, weight) -> test-case-specifications
+	where
+		error-prefixes := <make-error-strings> term; //[(err-str, error-offset)]
+		test-case-specifications := <map(
+			\(term, rel-pos, err-string, prefix-length) -> 
+			(term, <conc>(position, rel-pos), err-string, prefix-length, weight)\
+		)> error-prefixes
+		//[(term, position, error-string, error-offset, weight)]

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Wed Nov  2 20:32:31 2011	(r23558)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Thu Nov  3 10:00:12 2011	(r23559)
@@ -9,11 +9,13 @@
 	libstratego-aterm
 	libstratego-gpp
 	generate-errors-incomplete
+	generate-errors-missing
 
 rules
 
 evaluate-edit-scenarios(|language-name) =
-	evaluate-scenario(create-completion-errors|language-name, "incomplete")
+	//evaluate-scenario(ast-to-completion-error-specification|language-name, "incomplete")
+	evaluate-scenario(ast-to-missing-error-specification|language-name, "missing")
 
 evaluate-scenario(make-error-strings|language-name, error-cat):
 	_ -> result-description
@@ -32,8 +34,7 @@
 	basefile -> evaluations
 	where
 		base-ast := <parse-source-file(|language-name)> basefile;
-		term-weight-table := <get-random-term-weight-table> base-ast;
-		test-case-specifications := <map(testcase-specifications(make-error-strings)); concat> term-weight-table;
+		test-case-specifications := <make-error-strings> base-ast;
 		evaluations := <process-testcase-specifications(|language-name, error-cat, base-ast, 1)> test-case-specifications
 		
 add-score:
@@ -43,14 +44,6 @@
 	((r, _), (oracle-result, fcount, weight-score)) -> (oracle-result, fcount, weight-score)
 	where
 		<not(equal)> (r, oracle-result)
-
-
-testcase-specifications(make-error-strings):
-	(term, position, weight) -> test-case-specifications
-	where
-		error-prefixes := <make-error-strings> term; //[(err-str, error-offset)]
-		test-case-specifications := <map(!(term, position, <Fst>, <Snd>, weight))> error-prefixes
-		//[(term, position, error-string, error-offset, weight)]
 		
 process-testcase-specifications(|language-name, error-cat, ast, counter) =
 	process-testcase-specifications-succes(|language-name, error-cat, ast, counter) <+
@@ -134,7 +127,7 @@
 		)
 				
 get-fpath(|error-cat, weight, counter):
-	term -> $[[<get-constructor>]_[weight].[<format-counter(|4)> counter].[error-cat]]
+	term -> $[[<(is-list; !"LIST") <+ get-constructor>]_[weight].[<format-counter(|4)> counter].[error-cat]]
 
 get-fpath-result(|lang, oracle):
 	(filename, ext) -> $[[<get-result-dir(|lang)> oracle]/[filename].[ext]]
@@ -217,39 +210,8 @@
 		[err-string]
 		]
 
-origin-indent = try(Hd); prim("SSL_EXT_origin_indentation", <id>)
-
-rules //signature frequency helpers
-
-get-random-term-weight-table:
-	ast -> term-position-weight-table
-	where
-		signatures := <collect-signatures> ast;
-		term-weight-table := <map(!(<random-term-with-signature(|ast)>, <occurrences-in(|ast)>))> signatures;
-		term-position-weight-table := <map(!(<Fst>, <Fst; look-up-position-in-ast(|ast)>, <Snd>))> term-weight-table
-
-look-up-position-in-ast(|ast):
-	trm -> <position-of-term(equal(|trm))> ast
-
-has-signature(|trm-signature):
-	trm -> trm
-	where
-		where(get-signature; equal(|trm-signature))
-
-get-signature:
-	term -> (<get-constructor>, <get-arguments; length>)
-	where
-		not(is-string <+ is-list)
-
-occurrences-in(|ast):
-	trm-signature -> <occurrences(has-signature(|trm-signature))> ast
-
-collect-signatures:
-	ast -> <collect-all(get-signature); make-set> ast
-
-random-term-with-signature(|ast):
-	sign -> <random-term(has-signature(|sign))> ast
-
+//TODO: Bug in origin indent
+origin-indent = fail; try(Hd); prim("SSL_EXT_origin_indentation", <id>)
 
 rules //save file
 
@@ -364,6 +326,8 @@
 	(oracle, file-count, weight-count) ->
 	$[[<get-constructor> oracle]: [file-count] ([file-count-percentage]%), [weight-count] ([weight-count-percentage]%)]
 	where
+		<gt> (total-files,0);
+		<gt> (total-weight,0);
 		file-count-percentage := <div>(<mul>(file-count,100), total-files);
 		weight-count-percentage := <div>(<mul>(weight-count,100), total-weight)
 

From tobivollebregt at gmail.com  Thu Nov  3 12:25:24 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 03 Nov 2011 11:25:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23560 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils
Message-ID: <20111103112525.06BA6CC08F@mx4.tudelft.nl>

Author: tvo
Date: Thu Nov  3 11:25:23 2011
New Revision: 23560
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23560&sc=1

Log:
SpoofaxLang: fix is-deprecated

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str	Thu Nov  3 10:00:12 2011	(r23559)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str	Thu Nov  3 11:25:23 2011	(r23560)
@@ -7,9 +7,12 @@
 signature
   constructors
     deprecated : String -> Term
+    deprecated : Term
 
 overlays
   sdf-cons(x) = term(default(appl(unquoted("cons"), [fun(quoted(x))])))
+  sdf-deprecated() = term(default(fun(unquoted("deprecated"))))
+  sdf-deprecated(x) = term(default(appl(unquoted("deprecated"), [fun(quoted(x))])))
 
 strategies
 
@@ -32,4 +35,5 @@
     attrs(attr*) -> <one(?bracket())> attr*
 
   is-deprecated:
-    attrs(attr*) -> <one(?deprecated(_))> attr*
+    attrs(attr*) -> <one(?deprecated(_) + ?deprecated()
+                         + ?sdf-deprecated() + ?sdf-deprecated(_))> attr*

From tobivollebregt at gmail.com  Thu Nov  3 12:37:14 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 03 Nov 2011 11:37:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23561 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen/template unit-tests/templatelang
Message-ID: <20111103113714.794992B8018@mx2.tudelft.nl>

Author: tvo
Date: Thu Nov  3 11:37:13 2011
New Revision: 23561
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23561&sc=1

Log:
TemplateLang: new strategy to generate completion templates

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv.spt
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Nov  3 11:25:23 2011	(r23560)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Nov  3 11:37:13 2011	(r23561)
@@ -4,6 +4,7 @@
   lib/EditorService
   include/SpoofaxLang
 imports
+  context/resolve-symbols
   context/sdf/declare
   context/template/declare
   normalize/templatelang
@@ -58,42 +59,92 @@
       )
 
 /*internal*/ strategies
+
+  template-to-completion-template:
+    TemplateProduction(sort, SingleLineTemplate(elem* @ [_ | _]), attrs) ->
+      |[ completion template ~sort : ~prefix = ~*part* ]|
+    where
+      not(<is-deprecated> attrs)
+    with {|Expanded:
+      part* := <map(template-element-to-esv);
+                template-to-completion-template-helper> elem*;
+      prefix := <build-prefix> part*
+    |}
+    where
+      <accept-template-parts(|sort)> part*
 
   template-to-completion-template:
-    TemplateProduction(sort, Template(line* @ [_ | _]), attr*) -> t
-    with
+    TemplateProduction(sort, Template(line* @ [_ | _]), attrs) ->
+      |[ completion template ~sort : ~prefix = ~*part* (blank) ]|
+    where
+      not(<is-deprecated> attrs)
+    with {|Expanded:
       part* := <map(template-line-to-esv);
                 try(\[[_, Cursor()] | tail] -> tail\); // HACK for Mobl <MetaAnno*>
                 remove-cursor-except-first;
                 separate-by(|String("\n"));
-                flatten-list;
-                concatenate-consecutive-strings;
-                map(try(String(templatelang-escape)))> line*;
-      // if prefix := String(<collect-one(?sdf-cons(<un-double-quote>))> attr*) then
-      //   t := |[ completion template ~sort : ~prefix = ~*part* (blank) ]|
-      // else
-        t := |[ completion template ~sort : ~*part* (blank) ]|
-      // end
+                template-to-completion-template-helper> line*;
+      prefix := <build-prefix> part*
+    |}
+    where
+      <accept-template-parts(|sort)> part*
+
+  template-to-completion-template-helper =
+    flatten-list;
+    concatenate-consecutive-strings;
+    map(try(String(templatelang-escape)))
+
+  build-prefix =
+    map(template-element-to-string);
+    concat-strings;
+    string-replace(|"\\n", " ");
+    string-replace(|"\\t", " ");
+    string-as-chars(listbu(try( \[' ', ' ' | t] -> [' ' | t]\ )));
+    !String(<id>)
+
+  accept-template-parts(|sort) =
+    // not acceptable are:
+    //  * empty templates
+    //  * injections (i.e., a single element that isn't String(_))
+    (?[_, _ | _] + ?[String(_) | _])
+      <+ <debug(!"template rejected: ")> sort; fail
+
+rules
 
   template-line-to-esv:
     Line([Layout(x), Placeholder(None(), _, <Option() + Star()>, _)]) ->
       <spaces-to-tabs> [String(x), Cursor()]
 
   template-line-to-esv:
+    line @ Line([Layout(_), Placeholder(None(), _, <None() + Plus()>, _)]) ->
+      // ?t and not(?t) are cycle breaker
+      <?t; expand-template-line; not(?t); map(template-line-to-esv)> [line]
+
+  template-line-to-esv:
     Line(elem*) -> <map(template-element-to-esv); spaces-to-tabs> elem*
 
   spaces-to-tabs =
     try([String(string-replace(|"  ", "\t")) | id])
 
+  // Any placeholder with title results in a placeholder with that title.
   template-element-to-esv:
-    Placeholder(Text(name), sort(sort), _, _) -> PlaceholderWithSort($[<[name]:], sort)
+    Placeholder(Text(name), sort(sort), _, _) ->
+      PlaceholderWithSort($[<[name]:], sort)
 
+  // A and A+ result in a placeholder containing the shortest expansion of A.
   template-element-to-esv:
-    Placeholder(None(), sort(sort), <None() + Plus()>, _) ->
-      PlaceholderWithSort($[<[<try(generate-placeholder)> sort]:], sort)
+    placeholder @ Placeholder(None(), sort(sort), <None() + Plus()>, _) ->
+      PlaceholderWithSort($[<[text]:], sort)
+    where
+      text := <expand-template-element;
+               map(template-element-to-string);
+               concat-strings
+               <+ !sort> [placeholder]
 
+  // A? and A* result in a 0-length placeholder.
   template-element-to-esv:
-    Placeholder(None(), sort(sort), <Option() + Star()>, _) -> []
+    Placeholder(None(), sort(sort), <Option() + Star()>, _) ->
+      PlaceholderWithSort("<:", sort)
 
   template-element-to-esv:
     Layout(x) -> String(x)
@@ -107,25 +158,151 @@
   remove-cursor =
     ?[[_, Cursor()] | <remove-cursor>] <+ [id | remove-cursor] <+ []
 
-  // FIXME: Does this make sense? Answer: not any more!
-  generate-placeholder =
-    bagof-Declaration;
-    map(\TemplateProduction(_, Template(e*), _) -> e*\);
-    filter(not([])); // is this desired?
-    qsort((percentage-string-elements, percentage-string-elements); gt);
-    Hd;
-    template-elements-to-string
-
-  percentage-string-elements =
-    ?e*;
-    <divr> (<length> <filter(?String(_))> e*, <length> e*)
-
-  template-elements-to-string =
-    // trim-layout;
-    filter(
-         \Placeholder(Text(x), _, _, _) -> x\
-      <+ \Placeholder(None(), sort(x), _, _) -> x\
-      <+ \String(x) -> x\
-      <+ \Layout(x) -> <string-replace(|"\t", " ")> x\
-    );
-    concat-strings
+rules // TemplateLang / completion template element to string
+
+  template-element-to-string:
+    Placeholder(Text(t), _, _, _) -> t
+
+  template-element-to-string:
+    Placeholder(None(), sort(sort), <None() + Plus()>, _) -> sort
+
+  template-element-to-string:
+    Placeholder(None(), _, <Option() + Star()>, _) -> ""
+
+  template-element-to-string:
+    Placeholder(t) -> t
+
+  template-element-to-string:
+    PlaceholderWithSort(t, _) -> <string-as-chars(Tl; init)> t
+
+  template-element-to-string:
+    Layout(x) -> x
+
+  template-element-to-string:
+    String(x) -> x
+
+  template-element-to-string:
+    Cursor() -> ""
+
+strategies // Template expansion
+
+  expand-multi-line-template-production:
+    TemplateProduction(sort, SingleLineTemplate(elem*), a) ->
+      <memo(expand-template-production)> TemplateProduction(sort, Template([Line(elem*)]), a)
+
+  expand-multi-line-template-production:
+    TemplateProduction(_, Template(_), _) -> <memo(expand-template-production)>
+
+  expand-single-line-template-production:
+    TemplateProduction(_, SingleLineTemplate(_), _) -> <memo(expand-template-production)>
+
+  expand-template-production:
+    TemplateProduction(sort, template, attrs) -> result{score}
+    where
+      <not(Expanded)> sort
+    where {|Expanded:
+      rules( Expanded: sort -> sort );
+      result := <expand-template> template;
+      score := <is-deprecated < !-100 + !0> attrs
+    |}
+
+  expand-template:
+    t @ SingleLineTemplate(elem*) -> elem'*
+    where
+      elem'* := <listbu(expand-template-element)> elem*
+
+  expand-template:
+    t @ Template(line*) -> line'*
+    where
+      line'* := <listbu(expand-template-line)> line*
+
+  is-template-placeholder:
+    Placeholder(_, sort(x), _, _) -> <id>
+    where
+      <setof-Declaration; one(?TemplateProduction(_, _, _))> x
+
+  is-template-placeholder:
+    PlaceholderWithSort(_, x) -> <id>
+    where
+      <setof-Declaration; one(?TemplateProduction(_, _, _))> x
+
+  // expand-template-line covers exactly all valid input terms except:
+  //  Line([indent @ Layout(_), Placeholder(_, sort(x), <None() + Plus()>, _)]) where <Expanded> x
+
+  expand-template-line:
+    [t @ Line([indent @ Layout(_), Placeholder(_, sort(x), <None() + Plus()>, _)]) | tail] -> [line* | tail]
+    where
+      <not(Expanded)> x
+    where
+      line* := <get-template-lines(|indent) <+ ![t]> x
+
+  expand-template-line:
+    [t @ Line(elem*) | tail] -> [Line(elem'*) | tail]
+    where
+      not(!elem* => [Layout(_), Placeholder(_, _, <None() + Plus()>, _)])
+    where
+      elem'* := <listbu(expand-template-element)> elem*
+
+  expand-template-line:
+    [] -> <id>
+
+  // expand-template-element covers exactly all valid input terms except:
+  //  Placeholder(_, sort(x), <None() + Plus()>, _) where <Expanded> x
+
+  expand-template-element:
+    [t @ Placeholder(_, sort(x), <None() + Plus()>, _) | tail] -> [elem* | tail]
+    where
+      <not(Expanded)> x
+    where
+      elem* := <get-template-elements <+ ![t]> x
+
+  expand-template-element:
+    [t | tail] -> [t | tail]
+    where
+      not(!t => Placeholder(_, sort(x), <None() + Plus()>, _))
+
+  expand-template-element:
+    [] -> <id>
+
+  // helpers
+
+  get-template-lines(|indent) =
+    setof-Declaration;
+    filter(expand-multi-line-template-production);
+    choose-one-expansion;
+    map(Line(![indent | <id>]))
+
+  get-template-elements =
+    setof-Declaration;
+    filter(expand-single-line-template-production);
+    choose-one-expansion
+
+  choose-one-expansion =
+       filter(not(oncetd(is-template-placeholder)));
+       qsort(template-compare);
+       Hd
+    <+
+       Hd
+
+  // prefer least amount of literal characters
+  template-compare:
+    (x{x-score}, y{y-score}) -> <id>
+    where
+      <gti> (x-score, y-score)
+    <+
+      <eq> (x-score, y-score);
+      <lti> (<template-character-count> x, <template-character-count> y)
+
+  template-character-count =
+    ?String(<string-length>)
+    <+ ?Layout(<string-length>)
+    <+ ?Text(<string-length>)
+    <+ crush(!0, addi, template-character-count)
+
+  lti = not(gti)
+
+  setof-Declaration =
+    to-package-scoped-symbol;
+    bagof-Declaration; nub; is-not-empty
+
+  is-not-empty = ?[_ | _]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Nov  3 11:25:23 2011	(r23560)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Nov  3 11:37:13 2011	(r23561)
@@ -28,7 +28,6 @@
 imports
 	normalize/main
 	normalize/signatures
-	normalize/templatelang
 imports
 	context/-
 imports
@@ -72,17 +71,6 @@
       filename := <guarantee-extension(|"aterm")> path;
       result   := ast // we just return the input term
 
-/*
-  run-templatelang-tests:
-    (selected, position, ast, path, project-path) -> None()
-    with
-      test-templatelang-to-sdf;
-      test-templatelang-to-esv;
-      test-templatelang-to-stratego;
-      test-templatelang-desugar;
-      test-sdf2conflicts
-*/
-
 strategies
 
   //testing only
@@ -92,7 +80,5 @@
     test-templatelang-to-esv;
     test-templatelang-to-sdf;
     test-templatelang-to-str;
-    templatelang-desugar-sdf-top; // FIXME shouldn't be needed
-    templatelang-desugar-top;     // FIXME shouldn't be needed
     build-spoofaxlang-jvm;
     compile-spx

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt	Thu Nov  3 11:37:13 2011	(r23561)
@@ -0,0 +1,69 @@
+module templatelang-to-esv
+
+language SpoofaxLang
+target language EditorService
+
+setup [[
+  package example
+  module example
+  templates
+]]
+
+target setup [[
+  module example
+  completions
+]]
+
+test empty [[ X.Y = <<>> ]]
+run test-templatelang-to-esv to [[ ]]
+
+test placeholder [[ X.Y = <<foo <Z> bar>> ]]
+run test-templatelang-to-esv to [[
+  completion template X: "foo Z bar" = "foo " <Z:Z> " bar"
+]]
+
+test placeholder (text) [[ X.Y = <<foo < display text : Z> bar>> ]]
+run test-templatelang-to-esv to [[
+  completion template X: "foo display text bar" = "foo " < display text :Z> " bar"
+]]
+
+test placeholder (option) [[ X.Y = <<foo <Z?> bar>> ]]
+run test-templatelang-to-esv to [[
+  completion template X: "foo bar" = "foo " <:Z> " bar"
+]]
+
+test placeholder (plus) [[ X.Y = <<foo <Z+> bar>> ]]
+run test-templatelang-to-esv to [[
+  completion template X: "foo Z bar" = "foo " <Z:Z> " bar"
+]]
+
+test placeholder (star) [[ X.Y = <<foo <Z*> bar>> ]]
+run test-templatelang-to-esv to [[
+  completion template X: "foo bar" = "foo " <:Z> " bar"
+]]
+
+test n placeholders => one (cursor)-directive [[
+  X.Y = <<
+    foo
+      <A?>
+      <B?>
+      <C?>
+    bar
+  >>
+]]
+run test-templatelang-to-esv to [[
+  completion template X: "foo bar" = "foo\n\t" (cursor) "\nbar" (blank)
+]]
+
+test if then statement [[
+  Statement.IfThen = <<
+    <MetaAnno*; separator="\n">
+    if <Exp> then
+      <Statement*; separator="\n">
+    end
+  >>
+]]
+run test-templatelang-to-esv to [[
+  completion template Statement: "if Exp then end" =
+    "if " <Exp:Exp> " then\n\t" (cursor) "\nend" (blank)
+]]

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt	Thu Nov  3 11:37:13 2011	(r23561)
@@ -0,0 +1,85 @@
+module templatelang-to-esv-2
+
+language SpoofaxLang
+target language EditorService
+
+setup [[
+  package example
+  module example
+  templates
+]]
+
+target setup [[
+  module example
+  completions
+]]
+
+test deprecated templates [[
+  A.F = "foo" {deprecated}
+  A.FF = "ffoo" {deprecated("don't panic")}
+  A.B = "bar"
+  B = <<x: <A>>>
+]]
+run test-templatelang-to-esv to [[
+  // WRONG: completion template A: "foo" = "foo"
+  // WRONG: completion template A: "ffoo" = "ffoo"
+  completion template A: "bar" = "bar"
+  // WRONG: completion template B: "x: foo" = "x: " <foo:A>
+  completion template B: "x: bar" = "x: " <bar:A>
+]]
+
+test Mobl module [[
+  QId = <<<ID>>>
+  QId.QId = <<<QId>::<ID>>>
+  Start.Module = <<
+    module <QId>
+
+    <Definition*; separator="\n">
+  >>
+]]
+run test-templatelang-to-esv to [[
+  completion template QId: "ID::ID" = <ID:QId> "::" <ID:ID>
+  completion template Start: "module ID " =
+    "module " <ID:QId> "\n\n" (cursor) (blank)
+]]
+
+test Mobl types [[[[
+  QId = <<<ID>>>
+  QId.QId = <<<QId>::<ID>>>
+  NFType.SimpleType = <<<QId>>>
+  NFType.GenericType = [[[QId]<[Type*; separator=", "]>]]
+  NFType.TupleType = <<(<Type*; separator=", ">)>>
+  NFType.ArrayType = <<[<Type>]>>
+  NFType.DynamicType = <<?>>
+  Type = <<<NFType>>>
+  Type.FunctionType = [[[NFType+; separator=" * "] -> [NFType]]] {avoid}
+
+  FunctionDef.Function = <<
+    <MetaAnno*; separator="\n">
+    function <QId>(<FArg*; separator=", ">) : <Type> {
+      <Statement*; separator="\n">
+    }
+  >>
+]]]]
+run test-templatelang-to-esv to [[
+  completion template QId: "ID::ID" = <ID:QId> "::" <ID:ID>
+  completion template NFType: "ID<>" = <ID:QId> "<" <:Type> ">"
+  completion template NFType: "()" = "(" <:Type> ")"
+  completion template NFType: "[ID]" = "[" <ID:Type> "]"
+  completion template NFType: "?" = "?"
+  completion template Type: "ID -> ID" = <ID:NFType> " -> " <ID:NFType>
+  completion template FunctionDef: "function ID() : ID { }" =
+    "function " <ID:QId> "(" <:FArg> ") : " <ID:Type> " {\n\t" (cursor) "\n}" (blank)
+]]
+
+test template-character-count
+  !(String("foo"), Placeholder(Text("f"), "Sort", None(), Options([])), [Layout("bar"), String("baz")]);
+  template-character-count => 10
+
+test substring(1, -1)
+  !"foo";
+  string-as-chars(Tl; init) => "o"
+
+test remove spaces
+  !"foo   bar    baz";
+  string-as-chars(listbu(try(\[' ', ' ' | t] -> [' ' | t]\))) => "foo bar baz"

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt	Thu Nov  3 11:37:13 2011	(r23561)
@@ -0,0 +1,61 @@
+module templatelang-to-esv-3
+
+language SpoofaxLang
+target language EditorService
+
+setup [[
+  package example
+  module example
+  templates
+]]
+
+target setup [[
+  module example
+  completions
+]]
+
+test stuff [[
+  Statement.IfThen = <<
+    <MetaAnno*; separator="\n">
+    if <Exp> then
+      <Statement*; separator="\n">
+    end
+  >>
+  Statement.For = <<
+    <MetaAnno*; separator="\n">
+    for (<Exp>; <Exp>; <Exp>) do
+      <Statement*; separator="\n">
+    end
+  >>
+
+  Exp = <<<Term>>>
+
+  Term = <<<Factor>>>
+  Term.BinOp = <<<Term> <TermOp> <Factor>>>
+
+  Factor = <<<Var>>>
+  Factor.BinOp = <<<Factor> <FactorOp> <Var>>>
+
+  Var.Var = <<$<ID>$>>
+
+  TermOp.Plus = "+"
+  TermOp.Minus = "-"
+
+  FactorOp.Times = "*"
+  FactorOp.Over = "/"
+]]
+run test-templatelang-to-esv to [[
+  completion template Statement: "if $ID$ then end" =
+    "if " <$ID$:Exp> " then\n\t" (cursor) "\nend" (blank)
+  completion template Statement: "for ($ID$; $ID$; $ID$) do end" =
+    "for (" <$ID$:Exp> "; " <$ID$:Exp> "; " <$ID$:Exp> ") do\n\t" (cursor) "\nend" (blank)
+  completion template Term: "$ID$ + $ID$" =
+    <$ID$:Term> " " <+:TermOp> " " <$ID$:Factor>
+  completion template Factor: "$ID$ * $ID$" =
+    <$ID$:Factor> " " <*:FactorOp> " " <$ID$:Var>
+  completion template Var: "$ID$" = "$" <ID:ID> "$"
+  completion template TermOp: "+" = "+"
+  completion template TermOp: "-" = "-"
+  completion template FactorOp: "*" = "*"
+  completion template FactorOp: "/" = "/"
+]]

From tobivollebregt at gmail.com  Thu Nov  3 12:38:06 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 03 Nov 2011 11:38:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23562 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: . lib
Message-ID: <20111103113806.D77DACC09F@mx4.tudelft.nl>

Author: tvo
Date: Thu Nov  3 11:38:06 2011
New Revision: 23562
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23562&sc=1

Log:
SpoofaxLang: update generated files

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml	Thu Nov  3 11:37:13 2011	(r23561)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.generated.xml	Thu Nov  3 11:38:06 2011	(r23562)
@@ -46,7 +46,7 @@
         <mkdir dir="${lib}"/>
         <mkdir dir="${syntax}"/>
 
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
             <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
@@ -250,6 +250,43 @@
             </java>
         </target>
         
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
+        
         <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
@@ -421,145 +458,145 @@
                 
         <!-- begin: targets used for adding debugging instrumentation to stratego -->
         
-		<!-- 
-			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
-			Only used by stratego.jvm.helper.debug 
-		-->
-		<condition property="transformer-output" value="" else="--output-rtree">
-			<isset property="debug.the.debug.transformer"/>
-		</condition>
-		
-		<!-- 
-			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
-			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
-			Only used by stratego.jvm.helper.debug
-		-->
-		<condition property="strj.input.file.type" value="str" else="rtree">
-			<isset property="debug.the.debug.transformer"/>
-		</condition>
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
         
         <!-- value determines which target will be executed.
-        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
-        	else call stratego.jar
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
         -->
         <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
             <available file=".debugmode"/>
         </condition>
-		
-		<!-- will save the stratego files with debug info in this folder -->
-		<property name="trans-debug" location="trans-debug"/>
-		
-		<!-- this helper target determines what target to call, based on debug.build.enabled -->
-		<target name="stratego.jar.helper">
-			<antcall target="${stratego.jar.target}"/>
-		</target>
-		
-		<!-- call stratego.jar unless debug.build.enabled property is set --> 
-		<target name="call.stratego.jar" depends="stratego.jar">
-			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
-		</target>
-		
-		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
-		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
-			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
-		</target>
-		
-		<!-- copy stratego runtime jars to utils folder -->
-		<target name="utils-files-debug" depends="utils-files">
-			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
-			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
-		</target>
-		
-	    <!-- Stratego to Java compiler with debugging capabilities -->
-	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
-	        <dependset>
-	            <srcfileset dir="${basedir}">
-	                <include name="**/*.str"/>
-	                <include name="**/*.astr"/>
-	                <exclude name="lib/editor-common.generated.str"/>
-	            </srcfileset>
-	            <targetfileset file="${src-gen}/trans/Main.java"/>
-	        </dependset>
-	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
-	        <antcall target="copy-jar"/>
-	        <antcall target="stratego.jar.deletehelper"/>
-	    	<!-- compile stratego to java -->
-	        <antcall target="stratego.jvm.helper.debug">
-	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
-	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
-	        </antcall>
-	    	<!-- compile java to class -->
-	        <javac destdir="${build}" source="1.5" target="1.5" debug="on">
-	    		<!-- attribute in javac: srcdir="${src-gen}" -->
-	    		<src path="${src-gen}"/>
-	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
-	        	<classpath>
-	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
-	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
-	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
-	        	</classpath>
-	        	<!-- attribute in javac: includes="trans/**"  -->
-	        	<include name="trans/**"/>
-	    	</javac>
-	        <!-- copy imported terms -->
-	        <copy todir="${build}/trans">
-	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
-	        </copy>
-	    	<!-- create a jar from the class files -->
-	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
-	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
-	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
-	    </target>
-		
-		<!-- instrument the stratego program and compile it to java -->
-	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
-	    	<echo message="generate stratego with debug information"/>
-	    	<echo message="${basedir}"/>
-	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
-	    	<!-- add debug information -->
-	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
-	  		     <classpath>
-					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
-	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
-	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}"/>
-	  		     </classpath>
-	  			<arg value="-i"/>
-	  			<arg value="${trans}/${strmodule}.str"/>
-	  			<arg value="--gen-dir"/>
-	  			<arg value="${trans-debug}"/>
-	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
-	  			<arg value="${basedir}"/>
-	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
-	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
-	  			
-	  			<!-- arguments should start with two '-'-characters -->
-	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
-	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
-	  			<!-- <arg value="-output-rtree"/> --> 
-	    	</java>
-	    	<!-- now compile instrumented stratego to java -->
-	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-	        <java classname="org.strategoxt.strj.Main" failonerror="true">
-	            <arg value="-i"/>
-	            <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
-	            <arg value="-o"/>
-	            <arg value="${build.stratego.outputfile}"/>
-	            <arg value="-p"/>
-	            <arg value="trans"/>
-	            <arg value="--library"/>
-	            <arg value="--clean"/>
-	            <arg line="${build.stratego.args}"/>
-	            <arg line="${build.stratego.extraargs}"/>
-	            <arg line="${externaljarflags}"/>
-	            <arg line="${externaldefimport}"/>
-	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
-	        	<!-- put strategodebuglib.rtree on the include path -->
-	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
-	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
-	        </java>
-	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-	        <mkdir dir="${build}/trans"/>
-	    </target>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
         
         
         <!-- end: targets used for adding debugging instrumentation to stratego -->

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str	Thu Nov  3 11:37:13 2011	(r23561)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/editor-common.generated.str	Thu Nov  3 11:38:06 2011	(r23562)
@@ -125,6 +125,7 @@
   
   origin-term      = prim("SSL_EXT_origin_term", <id>)
   origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-offset    = prim("SSL_EXT_origin_offset", <id>)
   origin-location  = prim("SSL_EXT_origin_location", <id>)
   origin-line      = origin-location => (<id>, _, _, _)
   origin-column    = origin-location => (_, <id>, _, _)

From tobivollebregt at gmail.com  Thu Nov  3 13:22:33 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 03 Nov 2011 12:22:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23563 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/template unit-tests/templatelang utils
Message-ID: <20111103122233.522D42B802E@mx2.tudelft.nl>

Author: tvo
Date: Thu Nov  3 12:22:32 2011
New Revision: 23563
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23563&sc=1

Log:
TemplateLang: prioritizing of completion templates using completion(prefer|avoid)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Nov  3 11:38:06 2011	(r23562)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Nov  3 12:22:32 2011	(r23563)
@@ -203,9 +203,16 @@
     where {|Expanded:
       rules( Expanded: sort -> sort );
       result := <expand-template> template;
-      score := <is-deprecated < !-100 + !0> attrs
+      score := <determine-score> attrs
     |}
 
+  determine-score:
+    attrs -> <sum> [depr', prefer', avoid']
+    where
+      depr'   := <is-deprecated < !-100 + !0> attrs;
+      prefer' := <is-completion-prefer < !50 + !0> attrs;
+      avoid'  := <is-completion-avoid < !-50 + !0> attrs
+
   expand-template:
     t @ SingleLineTemplate(elem*) -> elem'*
     where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Thu Nov  3 11:38:06 2011	(r23562)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Thu Nov  3 12:22:32 2011	(r23563)
@@ -7,6 +7,7 @@
   common
   context/template/declare
   normalize/templatelang
+  utils/attributes
   utils/annotations
   utils/contract
   utils/debug
@@ -96,9 +97,10 @@
       A* := <template-to-sdf> t
 
   template-production-to-sdf:
-    TemplateProduction(S', t, attrs') -> p|[ A* -> S' attrs' ]|
+    TemplateProduction(S', t, attrs) -> p|[ A* -> S' attrs' ]|
     with
-      A* := <template-to-sdf> t
+      A* := <template-to-sdf> t;
+      attrs' := <attrs(filter(not(?sdf-completion(_)))) <+ no-attrs()> attrs
 
   // Single line template.
   //  -OR-

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt	Thu Nov  3 11:38:06 2011	(r23562)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt	Thu Nov  3 12:22:32 2011	(r23563)
@@ -14,6 +14,28 @@
   completions
 ]]
 
+test directed expansion (prefer) [[
+  A.F = "foo"
+  A.B = "bar" {completion(prefer)}
+  B = <<x: <A>>>
+]]
+run test-templatelang-to-esv to [[
+  completion template A: "foo" = "foo"
+	completion template A: "bar" = "bar"
+	completion template B: "x: bar" = "x: " <bar:A>
+]]
+
+test directed expansion (avoid) [[
+  A.F = "foo" {completion(avoid)}
+  A.B = "bar"
+  B = <<x: <A>>>
+]]
+run test-templatelang-to-esv to [[
+  completion template A: "foo" = "foo"
+  completion template A: "bar" = "bar"
+  completion template B: "x: bar" = "x: " <bar:A>
+]]
+
 test deprecated templates [[
   A.F = "foo" {deprecated}
   A.FF = "ffoo" {deprecated("don't panic")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt	Thu Nov  3 11:38:06 2011	(r23562)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt	Thu Nov  3 12:22:32 2011	(r23563)
@@ -50,6 +50,9 @@
 
 test escaped chars in separator [[ X.Y = <<<Z*; separator="\"">>> ]]
 run test-templatelang-to-sdf to [[ {Z "\""}* -> X {cons("Y")} ]]
+
+test completion(...) attribute is erased [[ X.Y = <<<Z>>> {completion(prefer) }]]
+run test-templatelang-to-sdf to [[ Z -> X {cons("Y")} ]]
 
 target setup footer [[
   context-free syntax

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str	Thu Nov  3 11:38:06 2011	(r23562)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str	Thu Nov  3 12:22:32 2011	(r23563)
@@ -14,6 +14,10 @@
   sdf-deprecated() = term(default(fun(unquoted("deprecated"))))
   sdf-deprecated(x) = term(default(appl(unquoted("deprecated"), [fun(quoted(x))])))
 
+  sdf-completion-prefer() = term(default(appl(unquoted("completion"), [fun(unquoted("prefer"))])))
+  sdf-completion-avoid() = term(default(appl(unquoted("completion"), [fun(unquoted("avoid"))])))
+  sdf-completion(x) = term(default(appl(unquoted("completion"), [x])))
+
 strategies
 
   fetch-cons =
@@ -37,3 +41,9 @@
   is-deprecated:
     attrs(attr*) -> <one(?deprecated(_) + ?deprecated()
                          + ?sdf-deprecated() + ?sdf-deprecated(_))> attr*
+
+  is-completion-prefer:
+  	attrs(attr*) -> <one(?sdf-completion-prefer())> attr*
+
+  is-completion-avoid:
+    attrs(attr*) -> <one(?sdf-completion-avoid())> attr*

From m.dejonge at tudelft.nl  Thu Nov  3 13:34:55 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Nov 2011 12:34:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23564 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111103123455.09A462B8036@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov  3 12:34:53 2011
New Revision: 23564
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23564&sc=1

Log:
missing token erros, duplicate token errors

Added:
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str
      - copied, changed from r23559, sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-missing.str
Deleted:
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-missing.str
Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Thu Nov  3 12:22:32 2011	(r23563)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Thu Nov  3 12:34:53 2011	(r23564)
@@ -10,7 +10,7 @@
 
 bracket-pairs = fail
 
-missing-tokens = fail
+operators = fail
 
 bracket-pairs-stochast = !65
 	

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str	Thu Nov  3 12:22:32 2011	(r23563)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str	Thu Nov  3 12:34:53 2011	(r23564)
@@ -4,5 +4,4 @@
 
 bracket-pairs = ![("(", ")"), ("[", "]"), ("{", "}"), ("<", ">"), ("|[", "]|"), ("\"", "\"")]
 
-missing-tokens = ![";", "<+", "+>", "+", "(", ")", "<", ">", "[", "]", "|", "=", ":", "->", "=>", "<=" ]
-//todo: templeates
\ No newline at end of file
+operators = ![";", "<+", "+>", "+", "=", ":=", ":", "->", "=>", "<=" ]

Copied and modified: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str (from r23559, sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-missing.str)
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-missing.str	Thu Nov  3 10:00:12 2011	(r23559, copy source)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str	Thu Nov  3 12:34:53 2011	(r23564)
@@ -1,4 +1,4 @@
-module generate-errors-missing
+module generate-token-errors
 
 imports
   lib/editor-common.generated
@@ -8,37 +8,56 @@
   apply-oracle
   workflow
 
+rules
+
+missing-tokens = <conc> (<operators>, <bracket-pairs; map(Fst)>, <bracket-pairs; map(Snd)>)
+
+duplication-tokens = missing-tokens
+
 strategies
 
+ast-to-superfluous-error-specification:
+	ast -> <conc>(superfluous-separator-errors, superfluous-token-errors)
+	where
+		superfluous-separator-errors := 
+			<make-testcase-specification-for-terms(create-errors-duplicate-separator)> ast;
+		superfluous-token-errors := <create-missing-token-errors> ast
+
 ast-to-missing-error-specification:
 	ast -> <conc>(missing-separator-errors, missing-token-errors)
 	where
-		missing-separator-errors := <make-testcase-specification-for-terms(create-errors-missing-separator)> ast;
+		missing-separator-errors := 
+			<make-testcase-specification-for-terms(create-errors-missing-separator)> ast;
 		missing-token-errors := <create-missing-token-errors> ast
 
 create-missing-token-errors:
 	ast -> missing-errors
 	where
-		weighted-missing-tokens := <missing-tokens-specification> ast;
+		weighted-missing-tokens := <tokens-specification(|<missing-tokens>)> ast;
 		missing-errors := <map(create-token-error-missing(|ast))> weighted-missing-tokens
 
-missing-tokens-specification:
+create-duplication-token-errors:
+	ast -> duplication-errors
+	where
+		weighted-tokens := <tokens-specification(|<duplication-tokens>)> ast;
+		duplication-errors := <map(create-token-error-duplication(|ast))> weighted-tokens
+
+tokens-specification(|lst):
 	ast -> random-error-tokens-weighted
 	where
 		tokens := <get-shuffled-literal-tokens> ast;
 		token-set := <make-set({t,s: ?((_,t,s),(_,t,s))})> tokens; 
-		random-error-tokens := <filter(where(Snd; contained-in-missings))> token-set;
+		random-error-tokens := <filter(where(Snd; contained-in(|lst)))> token-set;
 		random-error-tokens-weighted := <map(!(<id>, <count-occurrences(|tokens)>))> random-error-tokens
 		
 
 count-occurrences(|tokens):
 	(_, t, s) -> <filter(?(_, t, s)); length> tokens
 
-contained-in-missings:
+contained-in(|lst):
 	token -> token
 	where 
-		missing-tokens;
-		fetch(equal(|token))
+		<fetch(equal(|token))> lst
 	
 
 rules //missing operators
@@ -46,16 +65,23 @@
 rules //missing separators
 	
 create-errors-missing-separator:
-	trm -> <create-errors-on-subterms(create-error-string-missing-separator)> trm
+	trm -> <create-errors-on-subterms(create-error-string-replace-separator(!" "))> trm
 	where
 		<not(is-list)> trm
 
-create-error-string-missing-separator:
+create-errors-duplicate-separator:
+	trm -> <create-errors-on-subterms(
+		create-error-string-replace-separator(<concat-strings>[<id>, " ", <id>])
+	)> trm
+	where
+		<not(is-list)> trm
+
+create-error-string-replace-separator(replace-sep):
 	lst -> (err-string, prefix-length)
 	where
 		<?[_,_|_]> lst;
 		token-expansion := <origin-token-expand> lst; //debug(!1); 
-		(prefix, ws, suffix) := <split-fetch-keep(is-string; not(is-layout-string); !" ")> token-expansion; //debug(!2);
+		(prefix, ws, suffix) := <split-fetch-keep(is-string; not(is-layout-string); replace-sep)> token-expansion; //debug(!2);
 		err-string-prefix := <map(is-string <+ origin-text); concat-strings> prefix; //debug(!3);
 		err-string-suffix := <map(is-string <+ origin-text); concat-strings> suffix; //debug(!4);
 		err-string := <concat-strings> [err-string-prefix, ws, err-string-suffix]; //debug(!5);
@@ -70,10 +96,11 @@
 		literal-tokens := <filter(is-keyword-token <+ is-operator-token)> tokenstream;
 		shuffled-tokens := <shuffle> literal-tokens
 		
-
 create-token-error-missing(|ast):
 	(token, weight) -> <create-token-error-replaced(|ast)> (token, " ", weight)
 
+create-token-error-duplication(|ast):
+	(token, weight) -> <create-token-error-replaced(|ast)> (token, <concat>[token, " ", token], weight)
 
 create-token-error-replaced(|ast):
 	(token, new-token-text, weight) -> (trm, [], err-string, prefix-length, weight) //TODO: get-term-path instead of []

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Thu Nov  3 12:22:32 2011	(r23563)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Thu Nov  3 12:34:53 2011	(r23564)
@@ -9,13 +9,14 @@
 	libstratego-aterm
 	libstratego-gpp
 	generate-errors-incomplete
-	generate-errors-missing
+	generate-token-errors
 
 rules
 
 evaluate-edit-scenarios(|language-name) =
 	//evaluate-scenario(ast-to-completion-error-specification|language-name, "incomplete")
-	evaluate-scenario(ast-to-missing-error-specification|language-name, "missing")
+	//evaluate-scenario(ast-to-missing-error-specification|language-name, "missing");
+	evaluate-scenario(ast-to-superfluous-error-specification|language-name, "superfluous")
 
 evaluate-scenario(make-error-strings|language-name, error-cat):
 	_ -> result-description

From tobivollebregt at gmail.com  Thu Nov  3 14:40:07 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 03 Nov 2011 13:40:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23565 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/template unit-tests/templatelang utils
Message-ID: <20111103134007.EBDB3108C041@mx3.tudelft.nl>

Author: tvo
Date: Thu Nov  3 13:40:07 2011
New Revision: 23565
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23565&sc=1

Log:
TemplateLang: completion templates for trivial SDF prods, no completion templates for rejects

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Nov  3 12:34:53 2011	(r23564)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Nov  3 13:40:07 2011	(r23565)
@@ -50,6 +50,7 @@
       )
     with
       // FIXME: desugaring should have been performed before the current strategy is invoked.
+      // FIXME: declaring is here for unit testing only ???
       completion* := <templatelang-desugar-top;
                       declare-template-definition-main;
                       filter(template-to-completion-template)> prod*
@@ -58,13 +59,44 @@
         contract-requires(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion*)
       )
 
+  template-section-to-esv:
+    SDFSection(lexical-syntax(prod*)) ->
+      <sdf-productions-to-completion-templates> prod*
+
+  template-section-to-esv:
+    SDFSection(context-free-syntax(prod*)) ->
+      <sdf-productions-to-completion-templates> prod*
+
+  sdf-productions-to-completion-templates:
+    prod* -> completion*
+    with
+      contracts(
+        // FIXME: remove SdfProduction/3 and SdfProductionWithCons/3 when desugaring is performed before code generation.
+        contract-requires(ListOf(?prod(_, _, _) + ?SdfProduction(_, _, _) + ?SdfProductionWithCons(_, _, _)) | prod*)
+      )
+    with
+      // FIXME: desugaring should have been performed before the current strategy is invoked.
+      // FIXME: declaring is here for unit testing only ???
+      completion* := <templatelang-desugar-sdf-top;
+                      declare-sdf-definition-main;
+                      filter(sdf-production-to-template;
+                             template-to-completion-template)> prod*
+    with
+      contracts(
+        contract-requires(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion*)
+      )
+
 /*internal*/ strategies
 
+  sdf-production-to-template:
+    prod([lit(text)], sort(sort), attrs) -> 
+      TemplateProduction(sort, SingleLineTemplate([String(<un-double-quote> text)]), attrs)
+
   template-to-completion-template:
     TemplateProduction(sort, SingleLineTemplate(elem* @ [_ | _]), attrs) ->
       |[ completion template ~sort : ~prefix = ~*part* ]|
     where
-      not(<is-deprecated> attrs)
+      not(<is-deprecated + is-reject> attrs)
     with {|Expanded:
       part* := <map(template-element-to-esv);
                 template-to-completion-template-helper> elem*;
@@ -77,7 +109,7 @@
     TemplateProduction(sort, Template(line* @ [_ | _]), attrs) ->
       |[ completion template ~sort : ~prefix = ~*part* (blank) ]|
     where
-      not(<is-deprecated> attrs)
+      not(<is-deprecated + is-reject> attrs)
     with {|Expanded:
       part* := <map(template-line-to-esv);
                 try(\[[_, Cursor()] | tail] -> tail\); // HACK for Mobl <MetaAnno*>
@@ -106,8 +138,7 @@
     // not acceptable are:
     //  * empty templates
     //  * injections (i.e., a single element that isn't String(_))
-    (?[_, _ | _] + ?[String(_) | _])
-      <+ <debug(!"template rejected: ")> sort; fail
+    ?[_, _ | _] + ?[String(_) | _]
 
 rules
 
@@ -193,12 +224,19 @@
   expand-multi-line-template-production:
     TemplateProduction(_, Template(_), _) -> <memo(expand-template-production)>
 
+  expand-multi-line-template-production:
+    prod(_, _, _) -> <memo(expand-template-production)>
+
   expand-single-line-template-production:
     TemplateProduction(_, SingleLineTemplate(_), _) -> <memo(expand-template-production)>
 
+  expand-single-line-template-production:
+    prod(_, _, _) -> <memo(expand-template-production)>
+
   expand-template-production:
     TemplateProduction(sort, template, attrs) -> result{score}
     where
+    	<not(is-reject)> attrs;
       <not(Expanded)> sort
     where {|Expanded:
       rules( Expanded: sort -> sort );
@@ -206,6 +244,9 @@
       score := <determine-score> attrs
     |}
 
+  expand-template-production:
+    prod(_, _, _) -> <sdf-production-to-template; expand-template-production>
+
   determine-score:
     attrs -> <sum> [depr', prefer', avoid']
     where

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt	Thu Nov  3 13:40:07 2011	(r23565)
@@ -0,0 +1,58 @@
+module templatelang-to-esv-4
+
+language SpoofaxLang
+target language EditorService
+
+setup [[
+  package example
+  module example
+]]
+
+target setup [[
+  module example
+  completions
+]]
+
+test completion templates for lexical syntax [[
+  lexical syntax
+    "||" -> BoolMethodId
+]]
+run test-templatelang-to-esv to [[
+  completion template BoolMethodId: "||" = "||"
+]]
+
+test completion templates for lexical syntax (sugared) [[
+  lexical syntax
+    BoolMethodId = "||"
+]]
+run test-templatelang-to-esv to [[
+  completion template BoolMethodId: "||" = "||"
+]]
+
+test completion templates from lexical syntax expanded [[
+  lexical syntax
+    BoolMethodId = "||"
+  templates
+    Exp.BinOp = <<<Exp> <BoolMethodId> <Exp>>>
+]]
+run test-templatelang-to-esv to [[
+  completion template BoolMethodId: "||" = "||"
+  completion template Exp: "Exp || Exp" = <Exp:Exp> " " <||:BoolMethodId> " " <Exp:Exp>
+]]
+
+test no completion template for reject production [[
+  lexical syntax
+    "if" -> ID {reject}
+]]
+run test-templatelang-to-esv to [[
+]]
+
+test no expansion for reject production [[
+  lexical syntax
+    "if" -> ID {reject}
+  templates
+    Exp.Var = <<*<ID>>>
+]]
+run test-templatelang-to-esv to [[
+	completion template Exp: "*ID" = "*" <ID:ID>
+]]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str	Thu Nov  3 12:34:53 2011	(r23564)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/attributes.str	Thu Nov  3 13:40:07 2011	(r23565)
@@ -42,6 +42,9 @@
     attrs(attr*) -> <one(?deprecated(_) + ?deprecated()
                          + ?sdf-deprecated() + ?sdf-deprecated(_))> attr*
 
+  is-reject:
+    attrs(attr*) -> <one(?reject())> attr*
+
   is-completion-prefer:
   	attrs(attr*) -> <one(?sdf-completion-prefer())> attr*
 

From m.dejonge at tudelft.nl  Thu Nov  3 15:26:30 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Nov 2011 14:26:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23566 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111103142630.99F7E108C01F@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov  3 14:26:29 2011
New Revision: 23566
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23566&sc=1

Log:
token errors: incorrect symbol

Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Thu Nov  3 13:40:07 2011	(r23565)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Thu Nov  3 14:26:29 2011	(r23566)
@@ -12,6 +12,8 @@
 
 operators = fail
 
+replacement-pairs = fail
+
 bracket-pairs-stochast = !65
 	
 strategies //common language strategies 

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str	Thu Nov  3 13:40:07 2011	(r23565)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str	Thu Nov  3 14:26:29 2011	(r23566)
@@ -5,3 +5,7 @@
 bracket-pairs = ![("(", ")"), ("[", "]"), ("{", "}"), ("<", ">"), ("|[", "]|"), ("\"", "\"")]
 
 operators = ![";", "<+", "+>", "+", "=", ":=", ":", "->", "=>", "<=" ]
+
+replacement-pairs = 
+	![("|[", "[|"), ("]|", "|]"), ("|[", "["), ("]|", "]"), (",", "."), (".", ","),("/","\\"), 
+	(":=","="), (":","="),("=",":"), ("_","-"),	("rules", "rule"), ("imports", "import")]
\ No newline at end of file

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str	Thu Nov  3 13:40:07 2011	(r23565)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str	Thu Nov  3 14:26:29 2011	(r23566)
@@ -16,6 +16,11 @@
 
 strategies
 
+ast-to-replaced-token-error-specification:
+	ast -> replaced-token-errors
+	where
+		replaced-token-errors := <create-replacement-token-errors> ast
+
 ast-to-superfluous-error-specification:
 	ast -> <conc>(superfluous-separator-errors, superfluous-token-errors)
 	where
@@ -33,22 +38,35 @@
 create-missing-token-errors:
 	ast -> missing-errors
 	where
-		weighted-missing-tokens := <tokens-specification(|<missing-tokens>)> ast;
-		missing-errors := <map(create-token-error-missing(|ast))> weighted-missing-tokens
+		weighted-missing-tokens := <tokens-specification(!" "|<missing-tokens>)> ast;
+		missing-errors := <map(create-token-error-replaced(|ast))> weighted-missing-tokens
 
 create-duplication-token-errors:
 	ast -> duplication-errors
 	where
-		weighted-tokens := <tokens-specification(|<duplication-tokens>)> ast;
-		duplication-errors := <map(create-token-error-duplication(|ast))> weighted-tokens
+		weighted-tokens := <tokens-specification(duplicate-token-string|<duplication-tokens>)> ast;
+		duplication-errors := <map(create-token-error-replaced(|ast))> weighted-tokens
 
-tokens-specification(|lst):
+create-replacement-token-errors:
+	ast -> replacement-errors
+	where
+		replaced-tokens := <replacement-pairs; map(Fst)>;
+		weighted-tokens := <tokens-specification(lookup-replace-token|replaced-tokens)> ast;
+		replacement-errors := <map(create-token-error-replaced(|ast))> weighted-tokens
+
+lookup-replace-token:
+	(_, txt, _) -> <lookup> (txt, <replacement-pairs>) 
+	
+duplicate-token-string:
+	token -> <concat>[token, " ", token]
+
+tokens-specification(get-replacement|lst):
 	ast -> random-error-tokens-weighted
 	where
 		tokens := <get-shuffled-literal-tokens> ast;
 		token-set := <make-set({t,s: ?((_,t,s),(_,t,s))})> tokens; 
 		random-error-tokens := <filter(where(Snd; contained-in(|lst)))> token-set;
-		random-error-tokens-weighted := <map(!(<id>, <count-occurrences(|tokens)>))> random-error-tokens
+		random-error-tokens-weighted := <map(!(<id>, <get-replacement>, <count-occurrences(|tokens)>))> random-error-tokens
 		
 
 count-occurrences(|tokens):
@@ -60,8 +78,6 @@
 		<fetch(equal(|token))> lst
 	
 
-rules //missing operators
-
 rules //missing separators
 	
 create-errors-missing-separator:
@@ -95,12 +111,6 @@
 		tokenstream := <origin-token-stream> ast;
 		literal-tokens := <filter(is-keyword-token <+ is-operator-token)> tokenstream;
 		shuffled-tokens := <shuffle> literal-tokens
-		
-create-token-error-missing(|ast):
-	(token, weight) -> <create-token-error-replaced(|ast)> (token, " ", weight)
-
-create-token-error-duplication(|ast):
-	(token, weight) -> <create-token-error-replaced(|ast)> (token, <concat>[token, " ", token], weight)
 
 create-token-error-replaced(|ast):
 	(token, new-token-text, weight) -> (trm, [], err-string, prefix-length, weight) //TODO: get-term-path instead of []

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Thu Nov  3 13:40:07 2011	(r23565)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Thu Nov  3 14:26:29 2011	(r23566)
@@ -15,8 +15,9 @@
 
 evaluate-edit-scenarios(|language-name) =
 	//evaluate-scenario(ast-to-completion-error-specification|language-name, "incomplete")
-	//evaluate-scenario(ast-to-missing-error-specification|language-name, "missing");
-	evaluate-scenario(ast-to-superfluous-error-specification|language-name, "superfluous")
+	evaluate-scenario(ast-to-missing-error-specification|language-name, "missing");
+	evaluate-scenario(ast-to-superfluous-error-specification|language-name, "superfluous");
+	evaluate-scenario(ast-to-replaced-token-error-specification|language-name, "incorrect")
 
 evaluate-scenario(make-error-strings|language-name, error-cat):
 	_ -> result-description

From tobivollebregt at gmail.com  Thu Nov  3 17:07:25 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 03 Nov 2011 16:07:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23567 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax
Message-ID: <20111103160725.B1BEA108C004@mx3.tudelft.nl>

Author: tvo
Date: Thu Nov  3 16:07:23 2011
New Revision: 23567
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23567&sc=1

Log:
tiny fix

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Thu Nov  3 14:26:29 2011	(r23566)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Thu Nov  3 16:07:23 2011	(r23567)
@@ -166,8 +166,7 @@
     "\\u" [0-9A-Fa-f]+ -> EscapedUnicodeChar
     EscapedUnicodeChar -> EscapedChar
 
-    "\\" ~[] -> EscapedLayoutChar {recover, cons("WATER")}
-    "\\" ~[] -> EscapedNonLayoutChar {recover, cons("WATER")}
+    "\\" ~[]       -> EscapedChar  {recover, cons("WATER")}
     "<" ~[\>]+ ">" -> EscapedChar1 {recover, cons("WATER")}
     "[" ~[\]]+ "]" -> EscapedChar2 {recover, cons("WATER")}
 

From m.dejonge at tudelft.nl  Thu Nov  3 17:46:43 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Nov 2011 16:46:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23568 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111103164643.AD3AE7F800D@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov  3 16:46:43 2011
New Revision: 23568
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23568&sc=1

Log:
output: combined results

Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Thu Nov  3 16:07:23 2011	(r23567)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Thu Nov  3 16:46:43 2011	(r23568)
@@ -13,11 +13,15 @@
 
 rules
 
-evaluate-edit-scenarios(|language-name) =
-	//evaluate-scenario(ast-to-completion-error-specification|language-name, "incomplete")
-	evaluate-scenario(ast-to-missing-error-specification|language-name, "missing");
-	evaluate-scenario(ast-to-superfluous-error-specification|language-name, "superfluous");
-	evaluate-scenario(ast-to-replaced-token-error-specification|language-name, "incorrect")
+evaluate-edit-scenarios(|language-name):
+	_ -> results-text
+	where
+		incomplete := <evaluate-scenario(ast-to-completion-error-specification|language-name, "incomplete")>;
+		missing := <evaluate-scenario(ast-to-missing-error-specification|language-name, "missing")>;
+		superfluous := <evaluate-scenario(ast-to-superfluous-error-specification|language-name, "superfluous")>;
+		incorrect := <evaluate-scenario(ast-to-replaced-token-error-specification|language-name, "incorrect")>;
+		results-text := <separate-by(|"\n"); concat-strings> [incomplete, missing, superfluous, incorrect]
+		//TODO: total with weighted categories
 
 evaluate-scenario(make-error-strings|language-name, error-cat):
 	_ -> result-description
@@ -331,6 +335,5 @@
 		<gt> (total-files,0);
 		<gt> (total-weight,0);
 		file-count-percentage := <div>(<mul>(file-count,100), total-files);
-		weight-count-percentage := <div>(<mul>(weight-count,100), total-weight)
-
-	
+		weight-count-percentage := <div>(<mul>(weight-count,100), total-weight)		
+			

From L.C.L.Kats at tudelft.nl  Fri Nov  4 11:17:56 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 04 Nov 2011 10:17:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23569 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111104101756.609A0CC0D8@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Nov  4 10:17:54 2011
New Revision: 23569
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23569&sc=1

Log:
slightly different message for Spoofax/453

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Thu Nov  3 16:46:43 2011	(r23568)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Fri Nov  4 10:17:54 2011	(r23569)
@@ -57,8 +57,8 @@
       switch !results
         case one(is-successful-resolver(|to')): fail
         case one(?Some(t)):  error := $[Unexpected result: [<write-to-string> t]]
-        case one(?Error(m)): error := $[Unexpected error: [m]]
-        case one(?Fail(m)):  error := $[Unexpected error: [m]]
+        case one(?Error(m)): error := $[Unexpected error resolving: [m]]
+        case one(?Fail(m)):  error := $[Unexpected error resolving: [m]]
         otherwise: with(fail)
       end
   

From tobivollebregt at gmail.com  Fri Nov  4 16:54:16 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 04 Nov 2011 15:54:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23570 - in
	spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections:
	src/org/strategoxt/imp/runtime/services
	test/org/strategoxt/imp/runtime/services
Message-ID: <20111104155416.6D7567F8011@mx1.tudelft.nl>

Author: tvo
Date: Fri Nov  4 15:54:16 2011
New Revision: 23570
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23570&sc=1

Log:
Saner content proposal filtering (related to Spoofax/380)

No more arbitrary differentiation between semantic / "starting with an identifierLexical" proposals:
All proposals are handled identically!

Needs completion keyword generation for literals not starting with identifierLexical to be disabled,
and needs editors to be updated before being merged into trunk (as mentioned in Spoofax/380).

(And needs better candidate sort detection, which is a bad argument to put this in this branch.)

Modified:
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/test/org/strategoxt/imp/runtime/services/TestFilterCompletions.java

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Fri Nov  4 10:17:54 2011	(r23569)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Fri Nov  4 15:54:16 2011	(r23570)
@@ -427,45 +427,20 @@
 
 		final Set<ICompletionProposal> results = new HashSet<ICompletionProposal>();
 		final int offset = offsetPosition.getOffset();
-		boolean backTrackResultsOnly = false;
+		final int prefixLength = prefix.length();
 
 		for (Completion proposal : completions) {
-			String proposalPrefix = proposal.getPrefix();
 			if (proposal.getSort() != null && !sorts.contains(proposal.getSort()))
 				continue;
-			if (!backTrackResultsOnly && proposalPrefix.regionMatches(IGNORE_TEMPLATE_PREFIX_CASE, 0, prefix, 0, prefix.length())) {
-				if (!proposal.isBlankLineRequired() || isBlankBeforeOffset(document, offset - prefix.length()))
-					if (proposal.isSemantic() || prefix.length() > 0 || proposalPrefix.length() == 0 || identifierLexical.matcher(proposalPrefix).lookingAt())
-						results.add(new ContentProposal(this, proposal, prefix, offsetPosition, viewer));
-			}
-			if (prefix.length() == 0) {
-				// find longest match of proposal in document
-				for (int i = proposalPrefix.length() - 1; i > 0; i--) {
-					if (document.regionMatches(true, offset - i, proposalPrefix, 0, i)) {
-						if (!backTrackResultsOnly) results.clear();
-						backTrackResultsOnly = true;
-						results.add(new ContentProposal(this, proposal, proposalPrefix.substring(0, i), offsetPosition, viewer));
-						break;
-					}
+			if (proposal.isBlankLineRequired() && !isBlankBeforeOffset(document, offset - prefixLength))
+				continue;
+			// Find longest match of proposal in document, no shorter than prefix.
+			final String proposalPrefix = proposal.getPrefix();
+			for (int i = proposalPrefix.length() - 1; i >= prefixLength; i--) {
+				if (document.regionMatches(IGNORE_TEMPLATE_PREFIX_CASE, offset - i, proposalPrefix, 0, i)) {
+					results.add(new ContentProposal(this, proposal, proposalPrefix.substring(0, i), offsetPosition, viewer));
+					break;
 				}
-//				Matcher matcher = identifierLexical.matcher(proposalPrefix);
-//				if (matcher.find() && (matcher.start() > 0 || matcher.end() < proposalPrefix.length())) {
-//					// Handle completion literals with special characters, like "(disabled)"
-//					if (matcher.start() == 0 && !matcher.find(matcher.end()))
-//						continue;
-//					do {
-//						if (document.regionMatches(offset - matcher.start() - prefix.length(), proposalPrefix, 0, matcher.start())
-//								&& proposalPrefix.regionMatches(matcher.start(), prefix, 0, prefix.length())) {
-//
-//							// TODO: respect proposal.isBlankLineRequired() here?
-//							String bigPrefix = proposalPrefix.substring(0, matcher.start() + prefix.length());
-//							if (!backTrackResultsOnly) results.clear();
-//							backTrackResultsOnly = true;
-//							results.add(new ContentProposal(this, proposal, bigPrefix, offsetPosition, viewer));
-//							break;
-//						}
-//					} while (matcher.find(matcher.end()));
-//				}
 			}
 		}
 

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/test/org/strategoxt/imp/runtime/services/TestFilterCompletions.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/test/org/strategoxt/imp/runtime/services/TestFilterCompletions.java	Fri Nov  4 10:17:54 2011	(r23569)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/test/org/strategoxt/imp/runtime/services/TestFilterCompletions.java	Fri Nov  4 15:54:16 2011	(r23570)
@@ -58,7 +58,7 @@
 		filterCompletions("", "", 0, 0, noSorts);
 		assertEquals(2, results.length);
 	}
-	
+
 	@Test
 	public void testPrefix() {
 		completions.add(Completion.makeTemplate("foo", null));
@@ -72,22 +72,21 @@
 	public void testSelectedPrefix() {
 		completions.add(Completion.makeTemplate("foo", null));
 		completions.add(Completion.makeTemplate("oof", null));
-		filterCompletions("fo", "fo", 0, 2, noSorts);
-		assertEquals(1, results.length);
-		assertEquals("foo", results[0].getDisplayString());	
+		filterCompletions("fo", "", 0, 2, noSorts);
+		assertEquals(2, results.length);
 	}
-	
+
 	@Test
 	public void testNonIdentifier() {
 		completions.add(Completion.makeTemplate(", avoid", null));
 		filterCompletions("", "", 0, 0, noSorts);
-		assertEquals(0, results.length);
+		assertEquals(1, results.length);
 	}
-	
+
 	@Test
 	public void testNonIdentifierPrefix() {
 		completions.add(Completion.makeTemplate(", avoid", null));
-		filterCompletions(", ", ", ", 1, 0, noSorts);
+		filterCompletions(", ", "", 1, 0, noSorts);
 		assertEquals(1, results.length);
 	}
 
@@ -104,14 +103,14 @@
 		filterCompletions("", "", 0, 0, noSorts);
 		assertEquals(1, results.length);
 	}
-	
+
 	@Test
 	public void testNonIdentifierSemanticProposalPrefix() {
 		completions.add(Completion.makeSemantic("\"aaa\"", null));
-		filterCompletions("\"a", "\"a", 0, 0, noSorts);
+		filterCompletions("\"a", "a", 2, 0, noSorts);
 		assertEquals(1, results.length);
 	}
-	
+
 	@Test
 	public void testFilterSorts() {
 		completions.add(Completion.makeTemplate("foo", "Foo"));

From M.A.Akhter at student.tudelft.nl  Sat Nov  5 14:08:33 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 05 Nov 2011 13:08:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23571 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang spxlang/index spxlang/index/data spxlang/...
Message-ID: <20111105130833.5FBA1CC06E@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Nov  5 13:08:31 2011
New Revision: 23571
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23571&sc=1

Log:
more refactoring and bug fixing + added two new primitive for semantic index.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_by_LanguageName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_verify_symbol_exists.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -44,6 +44,8 @@
 		add(new SPX_index_get_module_definition(spxIndex));
 		add(new SPX_index_get_module_declarations_of(spxIndex));
 		add(new SPX_index_get_package_declarations_of(spxIndex));
+		add(new SPX_index_get_package_declarations_by_LanguageName(spxIndex));
+		
 		add(new SPX_index_get_imports(spxIndex));
 		add(new SPX_index_get_related_files_of_packages(spxIndex));
 		add(new SPX_index_equal_resource_uri(spxIndex));
@@ -53,6 +55,7 @@
 		add(new SPX_symtab_destroy_scope(spxIndex));
 		add(new SPX_symtab_define_symbol(spxIndex));
 		add(new SPX_symtab_resolve_symbols(spxIndex));
+		add(new SPX_symtab_verify_symbol_exists(spxIndex));
 		add(new SPX_symtab_undefine_symbols(spxIndex));
 	}
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_by_LanguageName.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_package_declarations_by_LanguageName.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -0,0 +1,38 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Md. Adil Akhter
+ * Created On : Sep 11, 2011
+ */
+public class SPX_index_get_package_declarations_by_LanguageName extends SpxAbstractPrimitive {
+	private static String NAME = "SPX_index_get_package_declarations_by_LanguageName";
+	private static int LANG_NAME_INDEX = 1;
+	private final static int NO_ARGS = 2;
+	
+	public SPX_index_get_package_declarations_by_LanguageName(SpxSemanticIndex index) {
+		super(index, NAME, 0, NO_ARGS);
+	}
+	
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateStringTermAt(LANG_NAME_INDEX);
+	}
+	
+	/* Retrieve Spoofaxlang  PackageDeclarations of a SpxCompilationUnit 
+	 * specified in {@code tvars}.    
+	 */
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoString  langName= (IStrategoString)tvars[LANG_NAME_INDEX];
+		IStrategoTerm t = index.getPackageDeclarationsByLanguageName(getProjectPath(tvars), langName);
+		env.setCurrent(t);
+		return true;
+	}
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_verify_symbol_exists.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_symtab_verify_symbol_exists.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -0,0 +1,33 @@
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+
+public class SPX_symtab_verify_symbol_exists extends SpxAbstractPrimitive {
+	private static String NAME = "SPX_symtab_verify_symbol_exists";
+	private static int SEARCH_CRITERIA_INDEX = 1;
+	private final static int NO_ARGS = 2;
+
+	public SPX_symtab_verify_symbol_exists(SpxSemanticIndex index) {
+		super(index, NAME, 0, NO_ARGS);
+	}
+	
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateTupleTermAt(SEARCH_CRITERIA_INDEX);
+	}
+	
+	
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoTuple searchCriteria = (IStrategoTuple)tvars[SEARCH_CRITERIA_INDEX];
+		SpxSymbol ret = index.verifySymbolExists(getProjectPath(tvars), searchCriteria);
+		
+		return ret != null;
+	}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -50,8 +50,8 @@
 			successStatement = executePrimitive(env, svars, tvars) ;
 		}
 		catch (Exception ex) {
-			logException(agent , ex);
 			if( ex instanceof IOException ||  ex instanceof IllegalStateException){
+				logException(agent , ex);
 				tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
 			}
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -3,6 +3,7 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -174,11 +175,17 @@
 		return null; // symbol is not found
 	}
 	
-	public Set<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException {
+	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade  facade, IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedBy, boolean returnDuplicate) throws SpxSymbolTableException {
 		
 		facade.persistenceManager().logMessage(this.src, "resolveAll(Base) | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
-		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
+		Collection<SpxSymbol> retResult = null;
+		
+		if (returnDuplicate)
+			retResult =	new ArrayList<SpxSymbol>();
+		else
+			retResult =	new HashSet<SpxSymbol>();
+		
 		
 		List<SpxSymbol> lookupResult = lookupSymbols(getMembers() , searchingFor , ofType);
 		retResult.addAll(lookupResult);
@@ -190,7 +197,7 @@
 		if( namespace  != null && !namespace.equals(this)){
 			//checks whether searching to the enclosing scope is allowed.
 			if( shouldSearchInEnclosingNamespace(searchedBy)){	
-				Set<SpxSymbol> parentResults  = (Set<SpxSymbol>)namespace.resolveAll(searchingFor, ofType, this ,facade);
+				Collection<SpxSymbol> parentResults  = namespace.resolveAll(facade, searchingFor, ofType ,this, false);
 				retResult.addAll(parentResults);
 			}
 		}	 
@@ -205,8 +212,8 @@
 	 * (non-Javadoc)
 	 * @see org.spoofax.interpreter.library.language.spxlang.INamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
-	public Set<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException{
-		return resolveAll(searchingFor, ofType,  this, spxFacade);
+	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade spxFacade, IStrategoTerm searchingFor, IStrategoTerm ofType, boolean retrunDuplicate) throws SpxSymbolTableException{
+		return resolveAll(spxFacade, searchingFor,  ofType, this, retrunDuplicate);
 	}
 	
 	public Map<SpxSymbolKey, List<SpxSymbol>> getMembers(){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/INamespace.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -1,6 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
 import java.io.Serializable;
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -25,9 +26,9 @@
     
 	SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
     
-	Set<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm type, SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
+	Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade spxFacade, IStrategoTerm searchingFor, IStrategoTerm type, boolean retrunDuplicate) throws SpxSymbolTableException;
 	
-	Set<SpxSymbol> resolveAll(IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedByNamepsace , SpxSemanticIndexFacade spxFacade) throws SpxSymbolTableException;
+	Collection<SpxSymbol>  resolveAll(SpxSemanticIndexFacade spxFacade, IStrategoTerm searchingFor, IStrategoTerm ofType , INamespace searchedByNamepsace, boolean returnDuplicate) throws SpxSymbolTableException;
 	
 	Map<SpxSymbolKey, List<SpxSymbol>> getMembers();
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -157,23 +158,28 @@
 	 * @see org.spoofax.interpreter.library.language.spxlang.BaseNamespace#resolveAll(org.spoofax.interpreter.terms.IStrategoTerm, org.spoofax.interpreter.library.language.spxlang.INamespace, org.spoofax.interpreter.library.language.spxlang.SpxSemanticIndexFacade)
 	 */
 	@Override
-	public Set<SpxSymbol> resolveAll(IStrategoTerm key,IStrategoTerm type, INamespace originNamespace, SpxSemanticIndexFacade facade) throws SpxSymbolTableException{
+	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade facade,IStrategoTerm key, IStrategoTerm type, INamespace originNamespace, boolean returnDuplicate) throws SpxSymbolTableException{
 		facade.persistenceManager().logMessage(this.src, "resolveAll | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + key + " origin Namespace: " + originNamespace.namespaceUri().id() );
 		
-		Set<SpxSymbol> retResult = new HashSet<SpxSymbol>();
+		Collection<SpxSymbol> retResult = null;
+		
+		if (returnDuplicate)
+			retResult =	new ArrayList<SpxSymbol>();
+		else
+			retResult =	new HashSet<SpxSymbol>();
 		
 		//searching in the enclosed namespace. For PackageNamespace, all the enclosed ModuleNamespace is searched. 
 		ensureEnclosedNamespaceUrisLoaded(facade);
-		retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, type, originNamespace, facade)) ;
+		retResult.addAll(resolveAllSymbolsInNamespaces(this.enclosedNamespaceUris, key, type, originNamespace, facade , returnDuplicate)) ;
 		
 		//searching in the current scope and its enclosing scope
-		retResult.addAll((Set<SpxSymbol>)super.resolveAll(key, type, originNamespace, facade));
+		retResult.addAll(super.resolveAll(facade, key, type, originNamespace, returnDuplicate));
 		
 		
 		//searching in the imported namespaces. Also  detect transitive and cyclic import references.  
 		if ( !isTransitiveImportLookup(facade , originNamespace)) {
 			ensureImportedNamespaceUrisLoaded(facade);
-			retResult.addAll((Set<SpxSymbol>)resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, type, originNamespace, facade)) ;
+			retResult.addAll(resolveAllSymbolsInNamespaces(this.importedNamespaceUris, key, type, originNamespace, facade, returnDuplicate)) ;
 		}
 		//returning the result 
 		return retResult;
@@ -227,9 +233,15 @@
 		return retSymbol;
 	}
 	
-	private Set<SpxSymbol> resolveAllSymbolsInNamespaces(Iterable<NamespaceUri> resolvableUris  ,IStrategoTerm key, IStrategoTerm ofType,  INamespace searchOrigin, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
+	private Collection<SpxSymbol> resolveAllSymbolsInNamespaces(Iterable<NamespaceUri> resolvableUris  ,IStrategoTerm key, IStrategoTerm ofType,  INamespace searchOrigin, SpxSemanticIndexFacade facade, boolean returnDuplicates) throws SpxSymbolTableException {
+		
+		Collection<SpxSymbol> retSymbol = null;
+		
+		if (returnDuplicates)
+			retSymbol =	new ArrayList<SpxSymbol>();
+		else
+			retSymbol =	new HashSet<SpxSymbol>();
 		
-		Set<SpxSymbol> retSymbol = new HashSet<SpxSymbol>();
 		INamespaceResolver namespaceResolver = facade.persistenceManager().spxSymbolTable();
 		 
 		for( NamespaceUri uri : resolvableUris){
@@ -242,7 +254,7 @@
 				// hence, ignoring it.
 				continue;
 			}
-			retSymbol.addAll((Set<SpxSymbol>)thisNamespace.resolveAll(key, ofType, this, facade));
+			retSymbol.addAll((Set<SpxSymbol>)thisNamespace.resolveAll(facade, key, ofType, this, false));
 		}
 		
 		return retSymbol;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -10,13 +10,16 @@
 import jdbm.SecondaryHashMap;
 import jdbm.SecondaryKeyExtractor;
 
+import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.language.spxlang.index.data.IdentifiableConstruct;
+import org.spoofax.interpreter.library.language.spxlang.index.data.LanguageDescriptor;
 import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxCompilationUnitInfo;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class SpxModuleLookupTable implements ICompilationUnitRecordListener, IPackageDeclarationRecordListener{
@@ -38,8 +41,11 @@
 	private final SecondaryHashMap <String , IStrategoList , ModuleDeclaration> _moduleByFileAbsPath;
 	private final SecondaryHashMap<IStrategoList, IStrategoList,ModuleDeclaration> _moduleByPackageId;
 	
+	// Symbol table for language descriptor
+	private final PrimaryHashMap<IStrategoList, LanguageDescriptor> _languageDescriptors;
+	private final SecondaryHashMap<String, IStrategoList, LanguageDescriptor> _modulesByLangaugeName;
+
 	private final ISpxPersistenceManager _manager;
-	
 	private final String SRC  = this.getClass().getSimpleName();
 	
 	/**
@@ -48,8 +54,7 @@
 	 * @param tableName name of the table 
 	 * @param manager an instance of {@link ISpxPersistenceManager}
 	 */
-	public SpxModuleLookupTable(ISpxPersistenceManager manager)
-	{
+	public SpxModuleLookupTable(ISpxPersistenceManager manager){
 		String tableName = SRC+ "_"+ manager.getIndexId();
 
 		assert manager != null;
@@ -100,6 +105,23 @@
 		this._moduleDefinition = manager.loadHashMap(tableName+ "._moduleDefinition.idx");
 		this._moduleAnalyzedDefinition = manager.loadHashMap(tableName+ "._moduleAnalyzedDefinition.idx");
 
+		_languageDescriptors = manager.loadHashMap(tableName+ "._languageDescriptors.idx"); 		// initialising language Descriptor for the package
+		_modulesByLangaugeName = _languageDescriptors
+				.secondaryHashMapManyToOne( tableName + "._modulesByLangaugeName.idx",
+						new SecondaryKeyExtractor<Iterable<String>, IStrategoList, LanguageDescriptor>() {
+							/**
+							 * Returns the Secondary keys as Language Name Strings
+							 * 
+							 * @param key
+							 *            current primary key
+							 * @param value
+							 *            value to be mapped using primary key
+							 * @return secondary key to map the value with .
+							 */
+							public Iterable<String> extractSecondaryKey(IStrategoList key, LanguageDescriptor value) {
+								return value.asLanguageNameStrings();
+							}
+						});
 		initRecordListener();
 	}
 	
@@ -108,26 +130,22 @@
 		_moduleLookupMap.addRecordListener(
 				new RecordListener<IStrategoList, ModuleDeclaration>() {
 
-					public void recordInserted(IStrategoList key,
-							ModuleDeclaration value) throws IOException {
+					public void recordInserted(IStrategoList key,ModuleDeclaration value) throws IOException {
 						//do nothing 
-						
 					}
 
-					public void recordUpdated(IStrategoList key,
-							ModuleDeclaration oldValue,
-							ModuleDeclaration newValue) throws IOException {
+					public void recordUpdated(IStrategoList key,ModuleDeclaration oldValue,ModuleDeclaration newValue) throws IOException {
 						//do nothing 
-						
 					}
 
-					public void recordRemoved(IStrategoList key,
-							ModuleDeclaration value) throws IOException {
-					
+					public void recordRemoved(IStrategoList key, ModuleDeclaration value) throws IOException {
+
 						// cleanup other table to make it consistent 
 						_moduleDefinition.remove(key);
 						_moduleAnalyzedDefinition.remove(key);
-						
+
+						_languageDescriptors.remove(key);
+
 						if(!recordListeners.isEmpty()){	
 							for( RecordListener<IStrategoList, ModuleDeclaration> rl: recordListeners){
 								rl.recordRemoved(key, value);
@@ -137,18 +155,24 @@
 				}
 		);
 	}
-	/** Size of the Symbol Table 
+	
+	void verifyModuleIDExists(IStrategoList moduleId) {
+		if (!containsModuleDeclaration(moduleId)) {
+			throw new IllegalArgumentException("Unknown Module ID : "+ moduleId);
+		}
+	}
+	
+	/** 
+	 * size of the symbol-table 
 	 * 
 	 * @return
 	 */
-	public int size() 
-	{
+	public int size() {
 		assert _moduleLookupMap.size() == _moduleDefinition.size();
 		assert _moduleLookupMap.size() == _moduleAnalyzedDefinition.size();
 		
 		return _moduleLookupMap.size();
 	}
-
 	
 	/**
 	 * Defines Module Definition in the SymbolTable
@@ -199,17 +223,51 @@
 	}
 	
 	/**
+	 * Defines {@link LanguageDescriptor} for the SpxModule with
+	 * {@code moduleId}
+	 * 
+	 * @param moduleId
+	 *            Qualified ID of the Module
+	 * @param newDesc
+	 *            {@link LanguageDescriptor} of module with ID -  {@code newDesc}
+	 */
+	public void defineLanguageDescriptor(IStrategoList moduleId, LanguageDescriptor newDesc) {
+		if (containsModuleDeclaration(moduleId)) {
+			this._languageDescriptors.put(moduleId, newDesc);
+		} else
+			throw new IllegalArgumentException("Unknown Module ID : "+ moduleId.toString());
+	}
+	
+	/**
+	 * Returns language descriptor associated with id
+	 * 
+	 * @param id
+	 *            module id whose language descriptor is to be returned
+	 * @return {@link LanguageDescriptor}
+	 */
+	public LanguageDescriptor getLangaugeDescriptor(IStrategoList id) {
+		return _languageDescriptors.get(id);
+	}
+
+	
+	/**
 	 * Removes {@link IdentifiableConstruct} from the lookup table mapped by the {@code id}
 	 * 
 	 * @param id {@link IStrategoList} representing qualified ID of the Construct
 	 * @return {@link IdentifiableConstruct} mapped by {@code id}
 	 */
-	public ModuleDeclaration remove(IStrategoList id)
-	{	
+	public ModuleDeclaration remove(IStrategoList id){	
 		_manager.logMessage(SRC+".remove", "Removing following Module : "+ id);
 		//removing module declaration from the table 
 		//and returning it.
-		return _moduleLookupMap.remove(id);
+		ModuleDeclaration ret = _moduleLookupMap.remove(id);
+		
+		if(ret != null)	{
+			_manager.logMessage(SRC+".remove", "Removed : "+ ret);
+		}else
+			_manager.logMessage(SRC+".remove", "Could not find : "+ ret);
+		
+		return ret; 
 	}
 	
 	/**
@@ -228,13 +286,13 @@
 	 * @param id
 	 * @return
 	 */
-	public boolean containsModuleDeclaration(IStrategoList id)
-	{
+	public boolean containsModuleDeclaration(IStrategoList id){
 		return _moduleLookupMap.containsKey(id);
 	}
 	
 	/**
 	 * Gets a module definition 
+	 * 
 	 * @param facade an instance of  {@links SpxSemanticIndexFacade}
 	 * @param id
 	 * 
@@ -248,7 +306,7 @@
 	}
 	
 	/**
-	 * Gets module definition (analyzed) 
+	 * Gets module definition (analysed) 
 	 * @param f an instance of  {@links SpxSemanticIndexFacade}
 	 * @param id
 	 * 
@@ -259,11 +317,11 @@
 		IStrategoTerm deserializedTerm = Utils.deserializeToTerm(f.getTermFactory(), f.getTermAttachmentSerializer(), this._moduleAnalyzedDefinition.get(id));
 		assert deserializedTerm instanceof IStrategoAppl : "Expected IStrategoAppl" ;  
 		
-		return (IStrategoAppl)deserializedTerm;
+		return (IStrategoAppl)deserializedTerm; 
 	}
 	
 	/**
-	 * Returns ModuleDeclarations mapped by a filepath. It actually returns 
+	 * Returns ModuleDeclarations mapped by a file path. It actually returns 
 	 * all the module declaration exists in a file . 
 	 * 
 	 * @param absUri
@@ -451,5 +509,19 @@
 	public void removeRecordListener( final IModuleDeclarationRecordListener rl){
 		this.recordListeners.remove(rl.getModuleDeclarationRecordListener());
 	}
+
+	/**
+	 * Returns the packages indexed using languageName
+	 * 
+	 * @param langaugeName
+	 * @return
+	 */
+	public Iterable<IStrategoList> getModuleIdsByLangaugeName(String langaugeName) {
+		return this._modulesByLangaugeName.get(langaugeName);
+	}
+	
+	public Iterable<IStrategoList> getModuleIdsByLangaugeName(IStrategoString langaugeName) {
+		return getModuleIdsByLangaugeName(Tools.asJavaString(langaugeName));
+	}
 }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPackageLookupTable.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -31,13 +31,8 @@
 	private final PrimaryHashMap<IStrategoList, PackageDeclaration> _packageLookupTable;
 	private final SecondaryHashMap<String, IStrategoList, PackageDeclaration> _uriMap;
 
-	// Symbol table for language descriptor
-	private final PrimaryHashMap<IStrategoList, LanguageDescriptor> _languageDescriptors;
-	private final SecondaryHashMap<String, IStrategoList, LanguageDescriptor> _packagesByLangaugeName;
-
 	private final String SRC = this.getClass().getSimpleName();
 	private final ISpxPersistenceManager _manager;
-	
 
     /**
      * Listeners which are notified about changes in records
@@ -83,29 +78,7 @@
 							}
 						});
 
-		initListeners();
-
-		// initializing language Descriptor for the package
-		_languageDescriptors = manager.loadHashMap(tableName+ "._languageDescriptors.idx");
-
-		_packagesByLangaugeName = _languageDescriptors
-				.secondaryHashMapManyToOne( tableName + "._packagesByLangaugeName.idx",
-						new SecondaryKeyExtractor<Iterable<String>, IStrategoList, LanguageDescriptor>() {
-							/**
-							 * Returns the Secondary keys as Language Name
-							 * Strings
-							 * 
-							 * @param key
-							 *            current primary key
-							 * @param value
-							 *            value to be mapped using primary key
-							 * @return secondary key to map the value with .
-							 */
-							public Iterable<String> extractSecondaryKey(
-									IStrategoList key, LanguageDescriptor value) {
-								return value.asLanguageNameStrings();
-							}
-						});
+		initListeners();		
 	}
 
 	/**
@@ -130,7 +103,6 @@
 							// since there is no URI left for the Package
 							// removing it from the table.
 							remove(key);
-							_languageDescriptors.remove(key);
 						}
 						else{
 							if(!recordListeners.isEmpty()){	
@@ -144,9 +116,6 @@
 					public void recordRemoved(IStrategoList key,
 							PackageDeclaration value) throws IOException {
 
-						// removing language descriptors
-						_languageDescriptors.remove(key);
-
 						_manager.logMessage(SRC + ".recordUpdated", "Removing Package " + key + ".");
 
 						if(!recordListeners.isEmpty()){	
@@ -186,24 +155,7 @@
 		_manager.logMessage(SRC + ".definePackageDeclaration", "Indexed/Reindexed package declaration : " + packageDeclaration);
 	}
 
-	/**
-	 * Defines {@link LanguageDescriptor} for the Spx Package with
-	 * {@code packageId}
-	 * 
-	 * @param packageId
-	 *            Qualified ID of the package
-	 * @param newDesc
-	 *            {@link LanguageDescriptor} of package with ID -
-	 *            {@code newDesc}
-	 */
-	public void defineLanguageDescriptor(IStrategoList packageId, LanguageDescriptor newDesc) {
-		if (containsPackage(packageId)) {
-			this._languageDescriptors.put(packageId, newDesc);
-		} else
-			throw new IllegalArgumentException("Unknown Package ID : "
-					+ packageId.toString());
-	}
-
+	
 	/**
 	 * Adds a SPX Package Declaration location
 	 * 
@@ -254,12 +206,9 @@
 				packageDecl.removeImportedToPackageReference(decl);
 			}
 		}
-
 	}
 
-	public PackageDeclaration getPackageDeclaration(IStrategoList id) {
-		return _packageLookupTable.get(id);
-	}
+	public PackageDeclaration getPackageDeclaration(IStrategoList id) { return _packageLookupTable.get(id); }
 
 	public Set<PackageDeclaration> getPackageDeclarations() {
 		Set<PackageDeclaration> declsToReturn = new HashSet<PackageDeclaration>();
@@ -268,17 +217,7 @@
 		return declsToReturn;
 	}
 
-	/**
-	 * Returns language descriptor associated with id
-	 * 
-	 * @param id
-	 *            package id whose language descriptor is to be returned
-	 * @return {@link LanguageDescriptor}
-	 */
-	public LanguageDescriptor getLangaugeDescriptor(IStrategoList id) {
-		return _languageDescriptors.get(id);
-	}
-
+	
 	/**
 	 * Removes a PackageDeclaration from the table
 	 * 
@@ -381,22 +320,7 @@
 		return _packageLookupTable.containsKey(packageId);
 	}
 
-	/**
-	 * Returns the packages indexed using languageName
-	 * 
-	 * @param langaugeName
-	 * @return
-	 */
-	public Iterable<IStrategoList> getPackageIdsByLangaugeName(
-			String langaugeName) {
-		return _packagesByLangaugeName.get(langaugeName);
-	}
-
-	public Iterable<IStrategoList> getPackageIdsByLangaugeName(
-			IStrategoString langaugeName) {
-		return getPackageIdsByLangaugeName(Tools.asJavaString(langaugeName));
-	}
-
+	
 	public RecordListener<String, SpxCompilationUnitInfo> getCompilationUnitRecordListener() {
 		return new RecordListener<String, SpxCompilationUnitInfo>() {
 			public void recordUpdated(String key,

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -4,6 +4,7 @@
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -92,18 +93,25 @@
 	
 	public INamespace removeNamespace(IStrategoList id){
 		INamespace nsToRemove  = resolveNamespace(id) ;
-		
 		if(nsToRemove != null){
 			// Removing the internal namespace associate with the PackageNamespace
 			if(nsToRemove instanceof PackageNamespace){
 				NamespaceUri internalNamespaceUri = PackageNamespace.packageInternalNamespace(nsToRemove.namespaceUri(), _facade);
-				this.namespaces.remove(internalNamespaceUri);	
+				INamespace internalNS = this.namespaces.remove(internalNamespaceUri);	
+				if(internalNS  != null)
+					persistenceManager().logMessage(SRC, "removenamespace | removed internal namespace: " + internalNS);
+				else
+					persistenceManager().logMessage(SRC, "removenamespace | could not find internal namespace");
 			}
 			
 			persistenceManager().logMessage(SRC, "removenamespace | removing following namespace : " + nsToRemove);
-			this.namespaces.remove(nsToRemove.namespaceUri());
+			INamespace retNs =this.namespaces.remove(nsToRemove.namespaceUri());
+			
+			if(retNs   != null)
+				persistenceManager().logMessage(SRC, "removenamespace | removed namespace: " + retNs);
+			else
+				persistenceManager().logMessage(SRC, "removenamespace | could not find namespace");
 		}
-		
 		return nsToRemove;
 	}
 	
@@ -184,16 +192,17 @@
 		
 	}
 
-	public Set<SpxSymbol> resolveSymbols(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType) throws SpxSymbolTableException {
+	public Collection<SpxSymbol> resolveSymbols(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType, boolean returnDuplicates) throws SpxSymbolTableException {
 		persistenceManager().logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + " of Type : "+ symbolType.getName());
 		
 		ensureActiveNamespaceLoaded(namespaceId);
-		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_activeNamespace.resolveAll(symbolId, symbolType ,_facade);
+		Collection<SpxSymbol> resolvedSymbols = _activeNamespace.resolveAll(_facade, symbolId ,symbolType, returnDuplicates);
 		
 		persistenceManager().logMessage(SRC, "resolveSymbols | Resolved Symbols : " + resolvedSymbols);
 		return resolvedSymbols;
 	}
-
+	
+	
 	public SpxSymbol resolveSymbol(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType) throws SpxSymbolTableException {
 		persistenceManager().logMessage(SRC, "resolveSymbol | Resolving symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
 		
@@ -296,8 +305,6 @@
 		persistenceManager().logMessage(SRC, "clearGlobalNamespce | Successfully removed all the entries." );
 	}
 	
-	
-	
 	/**
 	 * Printing all the symbols current hashmap 
 	 * 
@@ -357,4 +364,5 @@
 		}
 		logger.write("\n");
 	}
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -1,5 +1,6 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbol;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -143,6 +144,19 @@
 			}
 		}.executeWith(projectPath, compilationUnitUri);
 	}
+	
+	public IStrategoTerm getPackageDeclarationsByLanguageName(IStrategoString projectPath, IStrategoString compilationUnitUri)  throws Exception{
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm term)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
+					return idxFacade.getPackageDeclarationsByLanguageName((IStrategoString) term);
+			}
+		}.executeWith(projectPath, compilationUnitUri);
+	}
+	
 
 	public IStrategoTerm getModuleDeclaration(IStrategoString projectPath, final IStrategoAppl moduleTypedQname) throws Exception{
 		return new SpxResolver() {
@@ -237,7 +251,19 @@
 			}
 		}.executeWith(projectPath, searchCriteria);
 	}
-
+	
+	public SpxSymbol verifySymbolExists(IStrategoString projectPath, final IStrategoTuple searchCriteria)  throws Exception{
+		return new SpxResolver() {
+			@SuppressWarnings("unchecked")
+			@Override
+			public SpxSymbol resolve(IStrategoString projectPath, IStrategoTerm qnamesearchCriteria) throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
+					return idxFacade.verifySymbolExists((IStrategoTuple)searchCriteria);
+			}
+		}.executeWith(projectPath, searchCriteria);
+	}
+	
 	public IStrategoTerm undefineSymbols(IStrategoString projectPath,IStrategoTuple searchCriteria) throws Exception {
 		return new SpxResolver() {
 			@Override
@@ -248,6 +274,7 @@
 		}.executeWith(projectPath, searchCriteria);
 	}
 	
+	
 	public boolean removeCompilationUnit(IStrategoString projectPath,IStrategoString spxCompilationUnitPath) throws Exception{
 	
 			SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
@@ -276,13 +303,15 @@
 	
 	private abstract class SpxResolver 
 	{	
-		public IStrategoTerm executeWith(IStrategoString projectPath , IStrategoTerm term) throws Exception{
+		public <U> U executeWith(IStrategoString projectPath , IStrategoTerm term) throws Exception{
 			return resolve(projectPath, term);
 		}
 	
-		public abstract IStrategoTerm resolve(IStrategoString projectPath , IStrategoTerm term) throws Exception ;
+		public abstract <U> U resolve(IStrategoString projectPath , IStrategoTerm term) throws Exception ;
 	}
 
+
+
 	
 
 	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -8,6 +8,7 @@
 import java.io.IOException;
 import java.net.URI;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -352,6 +353,26 @@
 		symbolTable.defineSymbol(getNamespaceId((IStrategoAppl)symbolDefinition.getSubterm(NAMESPACE_ID_INDEX)), entry);
 	}
 	
+	public SpxSymbol verifySymbolExists(IStrategoTuple searchCriteria) throws SpxSymbolTableException {
+		if (searchCriteria.getSubtermCount() != 3)
+			throw new IllegalArgumentException(" verifySymbolExists | Illegal symbolLookupTerm Argument ; expected 4 subterms. Found : " + searchCriteria.getSubtermCount());
+		
+		IStrategoAppl typeAppl =  (IStrategoAppl)searchCriteria.getSubterm(2);
+		IStrategoConstructor typeCtor = null; 
+		try{
+			typeCtor = verifyKnownContructorExists(typeAppl);
+		}catch(IllegalArgumentException ex){
+			// It seems like the constructor does not exist in local type declarations. 
+			// Hence, defining it to be used further.
+			IStrategoConstructor ctor = (IStrategoConstructor)typeAppl.getConstructor();
+			typeCtor = _spxConstructors.indexConstructor(ctor);
+		}
+		
+		IStrategoList namespaceID = this.getNamespaceId((IStrategoAppl)searchCriteria.get(0));
+		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		
+		return symbolTable.resolveSymbol(namespaceID, strip(searchCriteria.get(1)), typeCtor);
+	}
 	
 	// (namespace * idTolookupFor * type constructor)
 	public IStrategoTerm resolveSymbols(IStrategoTuple searchCriteria) throws SpxSymbolTableException{
@@ -371,18 +392,15 @@
 			typeCtor = _spxConstructors.indexConstructor(ctor);
 		}
 		
-		Set<SpxSymbol> spxSymbols = null;
+		Collection<SpxSymbol> spxSymbols = null;
 		if (typeCtor != null) {
-			if(searchMode.equalsIgnoreCase(Utils.All)){
-				spxSymbols = resolveSymbols(
-							(IStrategoAppl)searchCriteria.get(0),
-							searchCriteria.get(1),
-							typeCtor);
-			}else if(searchMode.equalsIgnoreCase(Utils.CURRENT)){
-				spxSymbols = resolveSymbol( 
-								(IStrategoAppl)searchCriteria.get(0),
-								searchCriteria.get(1),
-								typeCtor);
+			if(searchMode.equalsIgnoreCase(Utils.AllWithDuplicates)){
+				spxSymbols = resolveSymbols( (IStrategoAppl)searchCriteria.get(0), searchCriteria.get(1),typeCtor, true);
+			}
+			else if(searchMode.equalsIgnoreCase(Utils.All)){
+				spxSymbols = resolveSymbols( (IStrategoAppl)searchCriteria.get(0), searchCriteria.get(1),typeCtor, false);
+			}else if(searchMode.equalsIgnoreCase(Utils.ONLY_ONE)){
+				spxSymbols = resolveSymbol( (IStrategoAppl)searchCriteria.get(0), searchCriteria.get(1),typeCtor);
 			}
 			else{
 				throw new IllegalArgumentException(" Illegal symbolLookupTerm searchMode Argument ; expected * or . . Found : " + searchMode);
@@ -425,17 +443,17 @@
 	 * @param namespaceToStartSearchWith Starts search from this namespace. 
 	 * @param symbolId symbol Id to resolve
 	 * @param symbolType Type of Symbols to look for
-	 * 
+	 * @param returnDuplicates TODO
 	 * @return {@link IStrategoList} representation of resolved {@code symbols} 
 	 * 
 	 * @throws SpxSymbolTableException
 	 */
-	public Set<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType) throws SpxSymbolTableException {
+	public Collection<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType, boolean returnDuplicates) throws SpxSymbolTableException {
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 
 		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
 		
-		Set<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(namespaceID, strip(symbolId), symbolType);
+		Collection<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(namespaceID, strip(symbolId), symbolType, returnDuplicates);
 		return resolvedSymbols;
 	}
 	
@@ -500,32 +518,23 @@
 	{
 		verifyConstructor(languageDescriptor.getConstructor(), getCons().getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
 
-		IStrategoList qualifiedPackageId = PackageDeclaration.getPackageId(this, (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
-		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
+		IStrategoList moduleId = ModuleDeclaration.getModuleId(this, (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
+		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
 
-		table.verifyPackageIDExists(qualifiedPackageId) ;
+		table.verifyModuleIDExists(moduleId);
 
 		//FIXME : move the following logic to extract information and 
 		//construct instance in respective classes . e.g. in LanguageDesrciptor class
-		qualifiedPackageId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)qualifiedPackageId);
+		moduleId = (IStrategoList)toCompactPositionInfo((IStrategoTerm)moduleId);
 
 		IStrategoList lNames = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageNamesIndex));
 		IStrategoList lIds = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.LanguageIdsIndex));
 		IStrategoList lEsvStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.EsvStartSymbolsIndex));
 		IStrategoList lSdfStartSymbols = (IStrategoList) this.strip(languageDescriptor.getSubterm(LanguageDescriptor.SdfStartSymbolsIndex));
 
-		LanguageDescriptor current = table.getLangaugeDescriptor(qualifiedPackageId);
-		if( current != null){	
-			current.addEsvDeclaredStartSymbols(this.getTermFactory(), lEsvStartSymbols);
-			current.addSDFDeclaredStartSymbols(this.getTermFactory(), lSdfStartSymbols );
-			current.addLanguageIDs(this.getTermFactory(), lIds);
-			current.addLanguageNames(this.getTermFactory(), lNames);
-		}
-		else
-			current = LanguageDescriptor.newInstance(this.getTermFactory() , qualifiedPackageId , lIds, lNames,lSdfStartSymbols , lEsvStartSymbols);
-
-		table.defineLanguageDescriptor(qualifiedPackageId, current);
-
+		LanguageDescriptor current  = LanguageDescriptor.newInstance(this.getTermFactory() , moduleId , lIds, lNames,lSdfStartSymbols , lEsvStartSymbols);
+		
+		table.defineLanguageDescriptor(moduleId, current);
 	}
 	
 	/**
@@ -667,7 +676,31 @@
 
 		return result;
 	}
+	
 
+	public IStrategoList getPackageDeclarationsByLanguageName(IStrategoString langName) {
+		logMessage("getPackageDeclarationsByLanguageName | Arguments : " + langName);
+		
+		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
+		
+		Set<IStrategoList> decls  = new HashSet<IStrategoList>(); 
+		
+		Iterable<IStrategoList> mdecls = table.getModuleIdsByLangaugeName(langName);
+		
+		for ( IStrategoList mId: mdecls){
+			decls.add(table.getModuleDeclaration(mId).enclosingPackageID);
+		}
+		
+		IStrategoList result = getTermFactory().makeList();
+		for(IStrategoList  pId : decls){ 
+			result  = getTermFactory().makeListCons(PackageDeclaration.toPackageQNameAppl(this, pId), result);
+		}
+		
+		logMessage("getPackageDeclarationsByLanguageName | Returning IStrategoList : " + result );
+
+		return result;
+	}
+	
 	/**
 	 * Returns {@link ModuleDeclaration} indexed with Module Id - {@code moduleTypeQName}  
 	 * 
@@ -846,18 +879,39 @@
 	 */
 	public IStrategoTerm getLanguageDescriptor ( IStrategoAppl packageTypedQName) throws IllegalArgumentException, Exception{
 		IStrategoList  packageId = PackageDeclaration.getPackageId(this, packageTypedQName);
-		IStrategoList emptyList= getTermFactory().makeList() ;
 		
-		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
-		table.verifyPackageIDExists(packageId) ;
+		SpxPackageLookupTable packageTable = persistenceManager().spxPackageTable();
+		packageTable.verifyPackageIDExists(packageId) ;
+		
+		LanguageDescriptor desc = getLangaugeDescriptorByPackageId(packageId);
 		
-		LanguageDescriptor desc = table.getLangaugeDescriptor(packageId);
-		if ( desc == null){	
-			// creating a empty language descriptor 
-			desc = LanguageDescriptor.newInstance(getTermFactory(), packageId , emptyList,emptyList,emptyList,emptyList ); 
-		}
 		return desc.toTerm(this);
 	}
+
+	/**
+	 * Returns language descriptor associated with id
+	 * 
+	 * @param id
+	 *            module id whose language descriptor is to be returned
+	 * @return {@link LanguageDescriptor}
+	 * @throws SpxSymbolTableException 
+	 */
+	LanguageDescriptor getLangaugeDescriptorByPackageId(IStrategoList packageId) throws SpxSymbolTableException {
+		
+		SpxModuleLookupTable moduleLookupTable = persistenceManager().spxModuleTable();
+		
+		LanguageDescriptor ret = LanguageDescriptor.newInstance(getTermFactory(), packageId);
+		Iterable<ModuleDeclaration> moduleDeclarations = this.getModuleDeclarations(packageId);
+	
+		for( ModuleDeclaration m : moduleDeclarations){
+			
+			LanguageDescriptor moduleLangaugeDescriptor = moduleLookupTable.getLangaugeDescriptor(m.getId());
+			
+			ret = LanguageDescriptor.appendLanguageDescriptors(getTermFactory(),ret , moduleLangaugeDescriptor);
+		}
+		
+		return ret;
+	}
 	
 	/**
 	 * Removes PackageDeclaration mapped with the {@code spxCompilationUnitPath}
@@ -938,7 +992,7 @@
 		if (!isPersistenceManagerClosed()){
 			persistenceManager().clear(); // cleaning persistence manager.
 			persistenceManager().commitAndClose();
-			tryCleanupIndexDirectory();
+			//tryCleanupIndexDirectory();
 			invalidateSpxCacheDirectory(); //cleaning the SpxCache as well.
 		}
 		initializePersistenceManager();
@@ -1057,4 +1111,6 @@
 	}
 
 	public void clearCache() throws IOException{ persistenceManager().clearCache();	}
+
+	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -19,15 +19,19 @@
 	}
 	public static final int NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER = 1;
 	
+	public static final String AllWithDuplicates = "**";
 	public static final String All = "*";
 	public static final String DIRTY = "-";
 	public static final String CURRENT = ".";
+	public static final String ONLY_ONE= ".";
 	
 	public static final String All_SYMBOLS = "\"*\"";
 	
+	
 	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
 	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
 	
+	
 	static boolean DEBUG = false;
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -101,7 +101,7 @@
 	}
 	
 	protected IStrategoTerm forceImploderAttachment(IStrategoTerm term) {
-		ImploderAttachment attach = ImploderAttachment.get(id);
+		ImploderAttachment attach = ImploderAttachment.get(term);
 		if (attach != null) {
 			ImploderAttachment.putImploderAttachment(term, false, attach.getSort(), attach.getLeftToken(), attach.getRightToken());
 		} 
@@ -111,7 +111,7 @@
 					fn, 0, 0, 0, -1));
 		}
 		return term;
-	}
+	} 
 	
 	/**
 	 * Returns the location of the construct 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/LanguageDescriptor.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -69,18 +69,20 @@
 	}
 
 	public void addLanguageIDs(ITermFactory fac, IStrategoList langIds) {
+		if (languageIDs == null)
+			this.languageIDs = fac.makeList();
+
+		
 		languageIDs = prepend(fac, languageIDs, langIds);
 	}
 	
-	public void addEsvDeclaredStartSymbols(ITermFactory fac,
-			IStrategoList startSymbols) {
-		this.esvDeclaredStartSymbols = prepend(fac,
-				this.esvDeclaredStartSymbols, startSymbols);
+	public void addEsvDeclaredStartSymbols(ITermFactory fac, IStrategoList startSymbols) {
+		this.esvDeclaredStartSymbols = prepend(fac, this.esvDeclaredStartSymbols, startSymbols);
 	}
 
 	public void addSDFDeclaredStartSymbols( ITermFactory fac , IStrategoList startSymbols)
 	{
-		this.sdfDeclaredStartSymbols =  prepend(fac, this.esvDeclaredStartSymbols  , startSymbols);
+		this.sdfDeclaredStartSymbols =  prepend(fac, this.sdfDeclaredStartSymbols  , startSymbols);
 	}
 	
 	public Iterable<String> asLanguageNameStrings()
@@ -91,6 +93,21 @@
 		}
 		return langNames;
 	}
+
+	public static LanguageDescriptor appendLanguageDescriptors(ITermFactory f,  LanguageDescriptor desc , LanguageDescriptor toAppend ){
+		if( toAppend ==null) return desc;
+		
+		desc.addLanguageIDs(f, toAppend.getLanguageIDs());
+		desc.addLanguageNames( f, toAppend.getLanguageNames());
+		desc.addSDFDeclaredStartSymbols(f, toAppend.getSdfDeclaredStartSymbols());
+		desc.addEsvDeclaredStartSymbols(f, toAppend.getEsvDeclaredStartSymbols());
+
+		return desc;
+	} 
+	
+	public static LanguageDescriptor newInstance( ITermFactory f,  IStrategoList id ){
+		return newInstance(f, id , f.makeList() , f.makeList() , f.makeList()  , f.makeList()) ;
+	}
 	
 	/**
 	 * Creates a new instance of {@link LanguageDescriptor}
@@ -98,20 +115,18 @@
 	 * @param decl
 	 * @return
 	 */
-	public static LanguageDescriptor newInstance(ITermFactory fac, LanguageDescriptor decl)
-	{
+	public static LanguageDescriptor newInstance(ITermFactory fac, LanguageDescriptor decl){
 		return newInstance(fac, 
 				decl.getId(), 
 				decl.languageIDs, 
 				decl.languageNames, 
 				decl.sdfDeclaredStartSymbols, 
 				decl.esvDeclaredStartSymbols);
-		
 	}
 
-	public static LanguageDescriptor newInstance( ITermFactory f,  IStrategoList packageId , IStrategoList languageIds, IStrategoList languageNames,IStrategoList sdfStartSymbols,IStrategoList esvStartSymbols)
+	public static LanguageDescriptor newInstance( ITermFactory f,  IStrategoList id , IStrategoList languageIds, IStrategoList languageNames,IStrategoList sdfStartSymbols,IStrategoList esvStartSymbols)
 	{
-		LanguageDescriptor desc = new LanguageDescriptor(packageId);
+		LanguageDescriptor desc = new LanguageDescriptor(id);
 
 		desc.addLanguageIDs(f, languageIds);
 		desc.addLanguageNames( f, languageNames);
@@ -120,7 +135,7 @@
 
 		return desc;
 	}
-	
+		
 	private static IStrategoList prepend(ITermFactory fac, IStrategoList srcList, IStrategoList toPrepend) {
 		if ( toPrepend == null)
 			return srcList;
@@ -211,8 +226,9 @@
 		IStrategoConstructor ctr = idxFacade.getCons().getLanguageDescriptorCon();
 		IStrategoAppl packageQNameAppl = PackageDeclaration.toPackageQNameAppl(idxFacade, this.getId());
 		
+		
 		IStrategoTerm retTerm = termFactory.makeAppl(ctr, packageQNameAppl , this.languageNames , this.languageIDs , this.esvDeclaredStartSymbols , this.sdfDeclaredStartSymbols);
 		
-		return this.forceImploderAttachment(retTerm);
+		return idxFacade.getTermConverter().convert(retTerm);
 	} 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDefinition.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -54,8 +54,8 @@
 				moduleDeclarationTerm.getSubterm(0),
 				moduleDeclarationTerm.getSubterm(1),
 				moduleDeclarationTerm.getSubterm(2),
-				ast,
-				analyzedAst 
+				forceImploderAttachment(ast) ,
+				forceImploderAttachment(analyzedAst)  
 				);
 		
 		return retTerm;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
@@ -101,7 +102,7 @@
 				deserializedDataToTerm )	;
 	}
 	
-	public static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Set<SpxSymbol> symbols) throws SpxSymbolTableException{
+	public static IStrategoTerm toTerms(SpxSemanticIndexFacade facade , Collection<SpxSymbol> symbols) throws SpxSymbolTableException{
 		IStrategoList result = facade.getTermFactory().makeList();
 		
 		if( symbols != null){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -4,15 +4,14 @@
 import java.util.ArrayList;
 import java.util.Set;
 
-import org.junit.Test;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.LanguageLibrary;
 import org.spoofax.interpreter.library.language.spxlang.index.ISpxPersistenceManager;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxModuleLookupTable;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxPackageLookupTable;
-import org.spoofax.interpreter.library.language.spxlang.index.SpxPersistenceManager;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacadeRegistry;
 import org.spoofax.interpreter.library.language.spxlang.index.data.LanguageDescriptor;
 import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
@@ -27,13 +26,16 @@
 
 public class SpxLookupTableUnitTests  extends AbstractInterpreterTest{
 	
-	private final String _projectName = "test";
+	private final String _projectName = "test-sybol-table_2";
 	private IStrategoString projectNameTerm;
 	
+	private SpxSemanticIndexFacade _facade;
+	private SpxSemanticIndexFacadeRegistry _registry;
+	
 	private ISpxPersistenceManager manager ;
 	private SpxPackageLookupTable symtable;
 	private SpxModuleLookupTable mSymTable;
-	private SpxSemanticIndexFacade facade; 
+	
 	
 	final String absPathString1 = "c:/temp/test.spx" ;
 	final String absPathString2 = "c:/temp/test2.spx" ;
@@ -53,17 +55,25 @@
 		return itp.getIOAgent(); 
 	}
 	
-	@Override protected void setUp() throws Exception {
+	@Override 
+	protected void setUp() throws Exception {
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
-		projectNameTerm = termFactory().makeString(_projectName);
-		facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
-		manager = new SpxPersistenceManager(facade);
+		_registry = new SpxSemanticIndexFacadeRegistry();
+		
+		projectNameTerm = termFactory().makeString(System.getProperty("user.dir")+ "/"+_projectName);
+	
+		_registry.initFacade(projectNameTerm, termFactory(), ioAgent()); 
+		_facade = _registry.getFacade(projectNameTerm);
+		_facade.reinitSymbolTable();
+		
+		symtable = _facade.persistenceManager().spxPackageTable();
+		mSymTable= _facade.persistenceManager().spxModuleTable();
 		
-		symtable = new SpxPackageLookupTable(manager);
-		mSymTable = new SpxModuleLookupTable(manager);
+		manager = _facade.persistenceManager();
 		
+		mSymTable.clear();
 		symtable.clear();
 	}
 	
@@ -71,7 +81,7 @@
 		symtable.clear();
 		mSymTable.clear();
 		
-		manager.commitAndClose();
+		_facade.persistChanges();
 	}
 	
 	public void testShouldReturngPackageDeclarationbyUri() throws IOException 
@@ -222,79 +232,95 @@
 
 	public void testLanguageDescriptorIsPersisted() throws IOException
 	{
-		symtable.clear();
+		mSymTable.clear();
 		
 		ITermFactory factory = termFactory();
 		
-		//Defining packagedecl in the symbol table. 
-		IStrategoList idp1 = factory.makeList(factory.makeString("test") , factory.makeString("p1"));
-		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idp1);
+		IStrategoList pId2 = factory.makeList(factory.makeString("test2"));
+		IStrategoList idm2 = factory.makeList(factory.makeString("test") , factory.makeString("m2"));
+		ModuleDeclaration m2 = new ModuleDeclaration(absPathString1, idm2,pId2 );
+		
+		mSymTable.define(
+				this._facade , 
+				m2 , 
+				(IStrategoAppl)getModuleDefinition(factory, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(factory, "m2")
+			);
+		
+		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idm2);
 		symtable.definePackageDeclaration(p1);
 		
 		//adding langauge descriptor
 		LanguageDescriptor langDescriptor = LanguageDescriptor.newInstance(
 				factory,
-				idp1, 
+				idm2, 
 				factory.makeList( factory.makeString("id1lang") ,factory.makeString("id2lang")),    
 				factory.makeList( factory.makeString("langname2") ,factory.makeString("langname2")),
 				asSDFStartSymbols( new String[]{"Start" , "Package"}) , 
 				asEsvStartSymbols( new String[]{"Start" , "Package"})
 				);
 		
-		symtable.defineLanguageDescriptor(idp1, langDescriptor);
 		
-		
-		ArrayList<IStrategoList> actual = (ArrayList<IStrategoList>)symtable.getPackageIdsByLangaugeName("langname2");
+		mSymTable.defineLanguageDescriptor(idm2, langDescriptor);
+				
+		ArrayList<IStrategoList> actual = (ArrayList<IStrategoList>)mSymTable.getModuleIdsByLangaugeName("langname2");
 	
 		assertEquals( actual.size() , 1) ;
-		assertEquals(idp1, actual.get(0));
+		assertEquals(idm2, actual.get(0));
 	}	
 	
-	public void testUpdatingLanguageDescriptorIsPersisted() throws IOException
-	{
+	public void testUpdatingLanguageDescriptorIsPersisted() throws IOException{
+		mSymTable.clear();
 		symtable.clear();
 		
 		ITermFactory factory = termFactory();
 		
-		//Defining packagedecl in the symbol table. 
-		IStrategoList idp1 = factory.makeList(factory.makeString("test") , factory.makeString("p1"));
-		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idp1);
+		IStrategoList pId2 = factory.makeList(factory.makeString("test2"));
+		PackageDeclaration p1  = new PackageDeclaration(absPathString1, pId2);
 		symtable.definePackageDeclaration(p1);
 		
+		IStrategoList idm2 = factory.makeList(factory.makeString("test") , factory.makeString("m2"));
+		ModuleDeclaration m2 = new ModuleDeclaration(absPathString1, idm2,pId2 );
+		
+		mSymTable.define(
+				this._facade , 
+				m2 , 
+				(IStrategoAppl)getModuleDefinition(factory, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(factory, "m2")
+			);
+		
 		//adding langauge descriptor
 		LanguageDescriptor langDescriptor = LanguageDescriptor.newInstance(
 				factory,
-				idp1, 
+				idm2, 
 				factory.makeList( factory.makeString("id1lang") ,factory.makeString("id2lang")),    
 				factory.makeList( factory.makeString("langname2") ,factory.makeString("langname2")),
 				asSDFStartSymbols( new String[]{"Start" , "Package"}) , 
 				asEsvStartSymbols( new String[]{"Start" , "Package"})
 				);
 		
-		symtable.defineLanguageDescriptor(idp1, langDescriptor);
 		
-		LanguageDescriptor langDescriptor2 = symtable.getLangaugeDescriptor(idp1);
+		mSymTable.defineLanguageDescriptor(idm2, langDescriptor);
+		
+		LanguageDescriptor langDescriptor2 = mSymTable.getLangaugeDescriptor(idm2);
 		langDescriptor2 = LanguageDescriptor.newInstance(factory, langDescriptor2);
 		langDescriptor2.addLanguageNames(factory, factory.makeList( factory.makeString("langname3") ,factory.makeString("langname4")));
 		
-		symtable.defineLanguageDescriptor(idp1, langDescriptor2);
+		mSymTable.defineLanguageDescriptor(idm2, langDescriptor2);
 		
-		ArrayList<IStrategoList> actual = (ArrayList<IStrategoList>)symtable.getPackageIdsByLangaugeName("langname3");
+		ArrayList<IStrategoList> actual = (ArrayList<IStrategoList>)mSymTable.getModuleIdsByLangaugeName("langname3");
 	
 		assertEquals( actual.size() , 1) ;
-		assertEquals(idp1, actual.get(0));
+		assertEquals(idm2, actual.get(0));
 	}	
 	
-	public void testShouldThrowIllegalArgumentExceptionIfUnknownPackageId() throws IOException
+	public void testShouldThrowIllegalArgumentExceptionIfUnknownModuleId() throws IOException
 	{
-		symtable.clear();
+		this.mSymTable.clear();
 		
 		ITermFactory factory = termFactory();
 		
 		//Defining packagedecl in the symbol table. 
-		IStrategoList idp1 = factory.makeList(factory.makeString("test") , factory.makeString("p1"));
-		PackageDeclaration p1  = new PackageDeclaration(absPathString1, idp1);
-		
+		IStrategoList idM1 = factory.makeList(factory.makeString("test") , factory.makeString("p1"));
+	
 		//Not defining package declaration. Hence package p1 is unknown 
 		//is unknown in this current symbol table.
 		//symtable.definePackageDeclaration(p1);
@@ -302,7 +328,7 @@
 		//adding langauge descriptor
 		LanguageDescriptor langDescriptor = LanguageDescriptor.newInstance(
 				factory,
-				idp1, 
+				idM1, 
 				factory.makeList( factory.makeString("id1lang") ,factory.makeString("id2lang")),    
 				factory.makeList( factory.makeString("langname2") ,factory.makeString("langname2")),
 				asSDFStartSymbols( new String[]{"Start" , "Package"}) , 
@@ -310,7 +336,7 @@
 				);
 		try
 		{
-			symtable.defineLanguageDescriptor(idp1, langDescriptor);
+			this.mSymTable.defineLanguageDescriptor(idM1, langDescriptor);
 		}catch (IllegalArgumentException ex)
 		{
 			// test is ok  since is it throwing corrent excpetion.  
@@ -356,7 +382,6 @@
 		SpxModuleLookupTable lookupTable = mSymTable;
 		
 		IStrategoList pId = f.makeList(f.makeString("test"));
-		IStrategoList pId2 = f.makeList(f.makeString("test2"));
 		
 		//module declaration 
 		IStrategoList idm1 = f.makeList(f.makeString("test") , f.makeString("m1"));
@@ -364,16 +389,17 @@
 		
 		
 		lookupTable.define(
-					facade , 
+				_facade , 
 					m1 , 
 					(IStrategoAppl)getModuleDefinition(f, "m1"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
 		
+		IStrategoList pId2 = f.makeList(f.makeString("test2"));
 		IStrategoList idm2 = f.makeList(f.makeString("test") , f.makeString("m2"));
 		ModuleDeclaration m2 = new ModuleDeclaration(absPathString1, idm2,pId2 );
 		
 		lookupTable.define(
-				facade , 
+				_facade , 
 				m2 , 
 				(IStrategoAppl)getModuleDefinition(f, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
@@ -383,7 +409,7 @@
 		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
 
 		lookupTable.define(
-				facade , 
+				_facade , 
 				m3 , 
 				(IStrategoAppl)getModuleDefinition(f, "m3"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
 			);
@@ -411,10 +437,8 @@
 		//module declaration 
 		IStrategoList idm1 = f.makeList(f.makeString("test") , f.makeString("m1"));
 		ModuleDeclaration m1 = new ModuleDeclaration(absPathString1, idm1,pId );
-		
-		
 		lookupTable.define(
-					facade , 
+				_facade , 
 					m1 , 
 					(IStrategoAppl)getModuleDefinition(f, "m1"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
@@ -423,7 +447,7 @@
 		ModuleDeclaration m2 = new ModuleDeclaration(absPathString1, idm2,pId2 );
 		
 		lookupTable.define(
-				facade , 
+				_facade , 
 				m2 , 
 				(IStrategoAppl)getModuleDefinition(f, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
@@ -433,7 +457,7 @@
 		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
 
 		lookupTable.define(
-				facade , 
+				_facade , 
 				m3 , 
 				(IStrategoAppl)getModuleDefinition(f, "m3"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
 			);
@@ -463,7 +487,7 @@
 		
 		
 		lookupTable.define(
-					facade, 
+				_facade, 
 					m1 , 
 					(IStrategoAppl)getModuleDefinition(f, "m1"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
@@ -472,7 +496,7 @@
 		ModuleDeclaration m2 = new ModuleDeclaration(absPathString2, idm2,pId2 );
 		
 		lookupTable.define(
-				facade , 
+				_facade , 
 				m2 , 
 				(IStrategoAppl)getModuleDefinition(f, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
@@ -482,7 +506,7 @@
 		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
 
 		lookupTable.define(
-				facade , 
+				_facade , 
 				m3 , 
 				(IStrategoAppl)getModuleDefinition(f, "m3"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m3")
 			);
@@ -513,7 +537,7 @@
 		
 		
 		lookupTable.define(
-					facade , 
+				_facade , 
 					m1 , 
 					(IStrategoAppl)getModuleDefinition(f, "m1"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m1")
 				);
@@ -522,7 +546,7 @@
 		ModuleDeclaration m2 = new ModuleDeclaration(absPathString2, idm2,pId2 );
 		
 		lookupTable.define(
-				facade , 
+				_facade , 
 				m2 , 
 				(IStrategoAppl)getModuleDefinition(f, "m2"), (IStrategoAppl)getAnalyzedModuleDefinition(f, "m2")
 			);
@@ -532,7 +556,7 @@
 		ModuleDeclaration m3 = new ModuleDeclaration(absPathString2, idm3,pId );
 
 		lookupTable.define(
-				facade , 
+				_facade , 
 				m3 , 
 				(IStrategoAppl)getModuleDefinition(f, "m3"), (IStrategoAppl)getAnalyzedModuleDefinition(f , "m3")
 			);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -1,9 +1,8 @@
 package org.spoofax.interpreter.library.language.spxlang.index.tests;
 
-import java.io.File;
 import java.io.IOException;
-import java.net.URI;
 import java.net.URISyntaxException;
+import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 
@@ -33,7 +32,7 @@
 
 public class SpxPrimarySymbolTableTest extends AbstractInterpreterTest{
 	
-	private final String _projectName = "_test-symbol-table_2";
+	private final String _projectName = ".test-symbol-table_10";
 	
 	private IStrategoString projectNameTerm; 
 	private SpxSemanticIndexFacade _facade;
@@ -251,7 +250,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId,
-				namespaceAppl.getConstructor()
+				namespaceAppl.getConstructor(), false
 				);
 		
 		assertEquals( 1 , resolvedSymbols.size());
@@ -278,7 +277,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId,
-				namespaceAppl.getConstructor()
+				namespaceAppl.getConstructor(), false
 				);
 		
 		assertEquals( 1 , resolvedSymbols.size());
@@ -289,7 +288,7 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId,
-				namespaceAppl.getConstructor()
+				namespaceAppl.getConstructor(), false
 				);
 		
 		assertEquals( 0 , resolvedSymbols.size());
@@ -358,7 +357,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0), false 
 				);
 		
 		assertEquals(2 , resolvedSymbols.size());
@@ -375,7 +374,7 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols( 
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getCons().getConstructor("STRDef", 0) 
+				_facade.getCons().getConstructor("STRDef", 0), false 
 				);
 		
 		assertEquals( 1 , resolvedSymbols.size());
@@ -398,7 +397,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolUnknownId,
-				_facade.getCons().getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0), false 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -418,7 +417,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, moduleDeclarationP1M1),
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0), false 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -443,7 +442,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade, this.moduleDeclarationP2M1),
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0), false 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -466,7 +465,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade, this.packageDeclaration2.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0), false 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -488,7 +487,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				internalModuleAppl,
 				symbolId1,
-				_facade.getCons().getConstructor("SDFDef", 0) 
+				_facade.getCons().getConstructor("SDFDef", 0), false 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -517,7 +516,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("ModuleDef", 0) 
+				_facade.getCons().getConstructor("ModuleDef", 0), false 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -536,7 +535,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				PackageDeclaration.toPackageQNameAppl(_facade,this.packageDeclaration1.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("ModuleDef", 0) 
+				_facade.getCons().getConstructor("ModuleDef", 0), false 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -562,7 +561,7 @@
 		Set<SpxSymbol> resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("ModuleDef", 0) 
+				_facade.getCons().getConstructor("ModuleDef", 0), false 
 				);
 		
 		assertEquals(0, resolvedSymbols.size());
@@ -570,7 +569,7 @@
 		resolvedSymbols = (Set<SpxSymbol>)_facade.resolveSymbols(
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()),
 				symbolId1,
-				_facade.getCons().getConstructor("ModuleDef", 0) 
+				_facade.getCons().getConstructor("ModuleDef", 0), false 
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -608,6 +607,7 @@
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
 				symbolId3,	//looking for 
 				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
+, false
 				);
 		
 		
@@ -645,6 +645,7 @@
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP2M1.getId()), // search origin
 				symbolId3, // loooking for 
 				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
+, false
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -685,6 +686,7 @@
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
 				symbolId3, // loooking for 
 				tfacade.getCons().getConstructor("ModuleDef", 0) // with type 
+, false
 				);
 		
 		// current import chain is as following : p1-> p2 ->p3->p1
@@ -747,7 +749,36 @@
 		assertNull(ns);
 	}
 	
+	public void testshouldReturnDuplicates()  throws IOException, SpxSymbolTableException{
+		createExtendedScopeTree();
+		
+		IStrategoAppl moduleQnameAppl2 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M2.getId());
+		
+		//adding a symbol in moduleDeclarationP1M1
+		IStrategoAppl moduleQnameAppl1 = ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId());
+		IStrategoTerm symbolId1 = moduleQnameAppl1; 
+	 	IStrategoTerm data1 = (IStrategoAppl)moduleDeclarationP1M1.toTerm(_facade);	// defining Data
+		IStrategoAppl typeAppl1 = termFactory().makeAppl(termFactory().makeConstructor("ModuleDef", 0)); // setting Type  
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId1 , typeAppl1  , data1));
+		
+		_facade.indexSymbol(createEntry(moduleQnameAppl2 , symbolId1 , typeAppl1  , data1));
+		
+		IStrategoAppl nsAppl = PackageDeclaration.toPackageQNameAppl(_facade, this.packageDeclaration1.getId());
+		
+		Collection<SpxSymbol> resolvedSymbols = _facade.resolveSymbols(
+				nsAppl, // search origin
+				symbolId1,	//looking for 
+				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
+				, true
+				);
+		
+		assertEquals(2, resolvedSymbols.size());
+	}
+	
+	
 	public void testResolveInAnonymousScopeShouldReturnEnclosingSymbols() throws IOException, SpxSymbolTableException {
+		
 		createExtendedScopeTree();
 		
 		//adding a symbol in moduleDeclarationP1M1
@@ -770,6 +801,7 @@
 				nsAppl, // search origin
 				symbolId1,	//looking for 
 				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
+, false
 				);
 		
 		
@@ -794,6 +826,7 @@
 				nsAppl, // search origin
 				symbolId2,	//looking for 
 				_facade.getCons().getConstructor("SDFDef", 0) // with type 
+, false
 				);
 		
 		
@@ -833,6 +866,7 @@
 				nsAppl, // search origin
 				symbolId1,	//looking for 
 				_facade.getCons().getConstructor("ModuleDef", 0) // with type 
+, false
 				);
 		
 		
@@ -953,6 +987,7 @@
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP3M1.getId()), // search origin
 				termFactory().makeString(Utils.All), // loooking for * symbols 
 				typeAppl1.getConstructor() // of Type 
+, false
 				);
 		
 		assertEquals(1, resolvedSymbols.size());
@@ -968,6 +1003,7 @@
 				ModuleDeclaration.toModuleQNameAppl(_facade,this.moduleDeclarationP1M1.getId()), // search origin
 				termFactory().makeString(Utils.All), // loooking for * symbols 
 				typeAppl1.getConstructor() // of Type 
+, false
 				);
 		
 		assertEquals(2, resolvedSymbols.size());

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Fri Nov  4 15:54:16 2011	(r23570)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Sat Nov  5 13:08:31 2011	(r23571)
@@ -7,7 +7,6 @@
 import org.spoofax.interpreter.library.language.LanguageLibrary;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacadeRegistry;
-import org.spoofax.interpreter.library.language.spxlang.index.data.ModuleDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.PackageDeclaration;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -23,6 +22,7 @@
 	
 	private IStrategoString projectNameTerm; 
 	private SpxSemanticIndexFacade _facade;
+	private SpxSemanticIndexFacadeRegistry _registry;
 	
 	final String absPathString1 = "c:/temp/test1.spx" ;
 	final String absPathString2 = "c:/temp/test2.spx" ;
@@ -30,7 +30,7 @@
 	private Interpreter interpreter(){ return itp;	}
 
 	private IOAgent ioAgent() { return itp.getIOAgent(); }
-	private SpxSemanticIndexFacadeRegistry _registry;
+	
 	private ITermFactory termFactory() { return factory; 	}
 	
 	@Override

From L.C.L.Kats at tudelft.nl  Mon Nov  7 12:20:30 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 07 Nov 2011 11:20:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23572 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20111107112030.62F0D108C01E@mx3.tudelft.nl>

Author: LennartKats
Date: Mon Nov  7 11:20:29 2011
New Revision: 23572
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23572&sc=1

Log:
added a call to flatten-list for languages that return lists of lists of errors/warnings/notes

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Sat Nov  5 13:08:31 2011	(r23571)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Mon Nov  7 11:20:29 2011	(r23572)
@@ -84,16 +84,17 @@
     ; if not(<?[_ | _]; all(is-parse-only-test)> expectations) then
         // TODO: set starting directory to project path using invoke-plugin-strategy
         plugin-strategy-invoke(|<Language>, "editor-init")
-      ; input'    := (input, <InputFile>, <project-path>)
-      ; messages  := <plugin-strategy-invoke(|<Language>, <spt-get-observer>) <+ !([], [], [])> input'
-      ; messages' := <strip-and-record-analyzed-ast <+ reset-analyzed-ast> <try(?Some(<id>))> messages
+      ; input'     := (input, <InputFile>, <project-path>)
+      ; messages   := <plugin-strategy-invoke(|<Language>, <spt-get-observer>) <+ !([], [], [])> input'
+      ; messages'  := <strip-and-record-analyzed-ast <+ reset-analyzed-ast> <try(?Some(<id>))> messages
+      ; messages'' := <try((flatten-list, flatten-list, flatten-list))> messages'
       else
-        messages' := ([], [], [])
+        messages'' := ([], [], [])
       end
     ; if !expectations => [] then
-        warnings := <filter(check-expectation(|input, selections, messages'))> [Success()]
+        warnings := <filter(check-expectation(|input, selections, messages''))> [Success()]
       else
-        warnings := <filter(check-expectation(|input, selections, messages'))> expectations
+        warnings := <filter(check-expectation(|input, selections, messages''))> expectations
       end
     ; not([]) 
    

From karltk at strategoxt.org  Tue Nov  8 13:32:50 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 12:32:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23573 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj: .
	.settings src/org/spoofax/ecjadapter
	src/org/spoofax/interpreter/adapter/ecj src/org/spoofax/interp...
Message-ID: <20111108123250.71DBE108C00E@mx3.tudelft.nl>

Author: karltk
Date: Tue Nov  8 12:32:48 2011
New Revision: 23573
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23573&sc=1

Log:
Started on the long path of updating the ECJ wrapper to work with the revised Stratego term library. Fixed all compilation issues. Next up: getting it to actually work.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedECJNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedGenericAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedGenericList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJInt.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInt.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJReal.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJString.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJTuple.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTuple.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedECJNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedGenericAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedGenericList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInt.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedReal.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedString.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTuple.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.settings/org.eclipse.jdt.core.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/Main.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/ParseJava.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ASTCtor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AmbName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/DottedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/None.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIField.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/RecursiveScriptTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/TestECJAdapter.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath	Tue Nov  8 12:32:48 2011	(r23573)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry exported="true" kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="output" path="bin"/>

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.settings/org.eclipse.jdt.core.prefs	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.settings/org.eclipse.jdt.core.prefs	Tue Nov  8 12:32:48 2011	(r23573)
@@ -1,15 +1,15 @@
-#Thu Jun 25 10:30:32 CEST 2009
+#Tue Nov 08 12:39:53 CET 2011
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.compliance=1.6
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.debug.sourceFile=generate
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.5
+org.eclipse.jdt.core.compiler.source=1.6
 org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
@@ -81,9 +81,12 @@
 org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
 org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=false
 org.eclipse.jdt.core.formatter.indentation.size=4
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/Main.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/Main.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,7 +12,6 @@
 import java.util.List;
 
 import org.spoofax.DebugUtil;
-import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.adapter.ecj.ECJFactory;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
@@ -20,6 +19,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.io.InlinePrinter;
 
 public class Main {
@@ -47,9 +47,9 @@
         }
         
         ITermFactory data = new ECJFactory();
-        ITermFactory program = new WrappedATermFactory();
+        ITermFactory program = new TermFactory();
         Interpreter intp = new Interpreter(data, program);
-        intp.addOperatorRegistry(ECJLibrary.REGISTRY_NAME, new ECJLibrary());
+        intp.addOperatorRegistry(new ECJLibrary());
         for(String f : files)
             intp.load(f);
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/ParseJava.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/ParseJava.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/ParseJava.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,12 +13,9 @@
 import java.io.FileReader;
 import java.io.IOException;
 
-import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.ASTParser;
-import org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
-import org.eclipse.jdt.internal.core.CompilationUnit;
 import org.spoofax.DebugUtil;
 import org.spoofax.interpreter.adapter.ecj.ECJFactory;
 import org.spoofax.interpreter.core.InterpreterException;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ASTCtor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ASTCtor.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ASTCtor.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,6 +7,8 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
+import java.io.IOException;
+
 import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
@@ -14,9 +16,13 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
 
 public class ASTCtor implements IStrategoConstructor {
 
+    private static final long serialVersionUID = 1L;
+    
     private final String name;
     private final int arity;
 
@@ -38,14 +44,14 @@
     }
 
     public IStrategoAppl instantiate(ITermFactory factory, IStrategoTerm... kids) {
-        return new WrappedGenericAppl(this, kids);
+        return new ECJGenericAppl(this, kids);
     }
 
     public IStrategoAppl instantiate(ITermFactory factory, IStrategoList kids) {
         IStrategoTerm[] children = new IStrategoTerm[kids.size()];
         for(int i = 0; i < children.length; i++) 
-            children[i] = kids.get(i); 
-        return new WrappedGenericAppl(this, children); 
+            children[i] = kids.getSubterm(i); 
+        return new ECJGenericAppl(this, children); 
         //throw new NotImplementedException();
     }
 
@@ -76,4 +82,38 @@
     public IStrategoList getAnnotations() {
     	throw new UnsupportedOperationException();
     }
+
+    @Override
+    public String toString(int maxDepth) {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        // TODO Auto-generated method stub
+        
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        throw new NotImplementedException();
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,28 +12,36 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.TermFactory;
 
 public abstract class AbstractECJAppl extends AbstractECJNode implements IStrategoAppl {
 
+    private static final long serialVersionUID = 1L;
+    
     private final IStrategoConstructor constructor;
     
     protected AbstractECJAppl(IStrategoConstructor constructor) {
+        super(TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
         this.constructor = constructor;
     }
-    
+
+    @Override
     public int getTermType() {
         return IStrategoTerm.APPL;
     }
 
+    @Override
     public IStrategoConstructor getConstructor() {
         return constructor;
     }
 
+    @Override
     public int getSubtermCount() {
         return constructor.getArity();
     }
  
-
+/*
+    @Override
     public IStrategoTerm[] getArguments() {
         IStrategoTerm[] r = new IStrategoTerm[constructor.getArity()];
         for(int i = 0; i < r.length; i++) {
@@ -41,11 +49,8 @@
         }
         return r;
     }
-    
-    public boolean match(IStrategoTerm second) {
-        throw new NotImplementedException();
-    }
-
+*/    
+    @Override
     public void prettyPrint(ITermPrinter pp) {
         pp.print(constructor.getName());
         
@@ -71,6 +76,7 @@
     
     public abstract IStrategoTerm getSubterm(int index);
 
+    @Override
     public IStrategoTerm[] getAllSubterms() {
         final int sz = getConstructor().getArity();
         IStrategoTerm[] r = new IStrategoTerm[sz];
@@ -80,4 +86,18 @@
         return r;
     }
 
+    @Override
+    protected int hashFunction() {
+        throw new NotImplementedException();
+    }
+    
+    @Override
+    public String getName() {
+        return constructor.getName();
+    }
+    
+    @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        throw new NotImplementedException();
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,23 +7,23 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.terms.io.AbstractIOTermFactory;
+import org.spoofax.terms.StrategoTerm;
+
+public abstract class AbstractECJNode extends StrategoTerm {
+
+    private static final long serialVersionUID = 1L;
 
-public abstract class AbstractECJNode implements IStrategoTerm {
-	public IStrategoList getAnnotations() {
-		return AbstractIOTermFactory.EMPTY_LIST;
-	}
-    
-    public int getStorageType() {
-        return MUTABLE;
+    protected AbstractECJNode(IStrategoList annotations, int storageType) {
+        super(annotations, storageType);
     }
 
     @Override
-    public boolean equals(Object obj) {
-        if(!(obj instanceof IStrategoTerm))
-            return false;
-        return match((IStrategoTerm)obj);
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 
 
 public abstract class AbstractWrappedBinding extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
 
     protected AbstractWrappedBinding(IStrategoConstructor constructor) {
         super(constructor);

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedECJNode.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedECJNode.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -8,23 +8,16 @@
 package org.spoofax.interpreter.adapter.ecj;
 
 import org.spoofax.interpreter.terms.IStrategoConstructor;
-import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.terms.io.AbstractIOTermFactory;
 
 
-public abstract class WrappedECJNode extends AbstractECJAppl {
+public abstract class AbstractWrappedECJNode extends AbstractECJAppl {
 
-    protected WrappedECJNode(IStrategoConstructor constructor) {
+    private static final long serialVersionUID = 1L;
+
+    protected AbstractWrappedECJNode(IStrategoConstructor constructor) {
         super(constructor);
     }
 
     public abstract Object getWrappee();
     
-    public IStrategoList getAnnotations() {
-    	return AbstractIOTermFactory.EMPTY_LIST;
-    }
-    
-    public int getStorageType() {
-        return MUTABLE;
-    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AmbName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AmbName.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AmbName.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -1,17 +1,18 @@
 package org.spoofax.interpreter.adapter.ecj;
 
-import org.spoofax.interpreter.terms.BasicStrategoAppl;
-import org.spoofax.interpreter.terms.BasicStrategoConstructor;
-import org.spoofax.interpreter.terms.BasicStrategoString;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoAppl;
+import org.spoofax.terms.StrategoConstructor;
 
-public class AmbName extends BasicStrategoAppl {
+public class AmbName extends StrategoAppl {
 
-	private static IStrategoConstructor CTOR = new BasicStrategoConstructor("AmbName", 1);
+    private static final long serialVersionUID = 1L;
+    
+    private static IStrategoConstructor CTOR = new StrategoConstructor("AmbName", 1);
 	
 	public AmbName(String name) {
-		super(CTOR, new IStrategoTerm[] { new BasicStrategoString(name) });
+		super(CTOR, new IStrategoTerm[] { new ECJString(name) });
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/DottedName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/DottedName.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/DottedName.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -1,16 +1,18 @@
 package org.spoofax.interpreter.adapter.ecj;
 
-import org.spoofax.interpreter.terms.BasicStrategoAppl;
-import org.spoofax.interpreter.terms.BasicStrategoConstructor;
-import org.spoofax.interpreter.terms.BasicStrategoString;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoAppl;
+import org.spoofax.terms.StrategoConstructor;
 
-public class DottedName extends BasicStrategoAppl {
-	private final static IStrategoConstructor CTOR = new BasicStrategoConstructor("DottedName", 1);
+public class DottedName extends StrategoAppl {
+    
+    private static final long serialVersionUID = 1L;
+    
+    private final static IStrategoConstructor CTOR = new StrategoConstructor("DottedName", 1);
 	
 	protected DottedName(String name) {
-		super(CTOR, new IStrategoTerm[] { new BasicStrategoString(name) });
+		super(CTOR, new IStrategoTerm[] { new ECJString(name) });
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -1,5 +1,8 @@
 package org.spoofax.interpreter.adapter.ecj;
 
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;
@@ -9,99 +12,166 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
 
-public class ECJAnnoWrapper implements IStrategoTerm, IStrategoList, IStrategoAppl, IStrategoInt, IStrategoReal, IStrategoString, IStrategoTuple {
-
-	private final IStrategoTerm wrappee;
-	private final IStrategoList annotations;
-	
-	public ECJAnnoWrapper(IStrategoTerm wrappee, IStrategoList annotations) {
-		this.wrappee = wrappee;
-		this.annotations = annotations;
-	}
-    
-	public int getStorageType() {
-		return MUTABLE; // does not cache its hashCode() method
-	}
-	
-	public IStrategoTerm[] getAllSubterms() {
-		return wrappee.getAllSubterms();
-	}
-
-	public IStrategoList getAnnotations() {
-		return annotations;
-	}
-
-	public IStrategoTerm getSubterm(int index) {
-		return wrappee.getSubterm(index);
-	}
-
-	public int getSubtermCount() {
-		return wrappee.getSubtermCount();
-	}
-
-	public int getTermType() {
-		return wrappee.getTermType();
-	}
-
-	public boolean match(IStrategoTerm second) {
-		return wrappee.match(second) && annotations.match(second.getAnnotations()); 
-	}
-
-	public void prettyPrint(ITermPrinter pp) {
-		wrappee.prettyPrint(pp);
-		pp.print("{");
-		annotations.prettyPrint(pp);
-		pp.print("}");
-	}
-
-	public IStrategoTerm get(int index) {
-		return ((IStrategoList) wrappee).get(index);
-	}
-
-	public IStrategoTerm head() {
-		return ((IStrategoList) wrappee).head();
-	}
-
-	public boolean isEmpty() {
-		return ((IStrategoList) wrappee).isEmpty();
-	}
-
-	public IStrategoList prepend(IStrategoTerm prefix) {
-		return ((IStrategoList) wrappee).prepend(prefix);
-	}
-
-	public int size() {
-		return ((IStrategoList) wrappee).size();
-	}
-
-	public IStrategoList tail() {
-		return ((IStrategoList) wrappee).tail();
-	}
-
-	@Deprecated
-	public IStrategoTerm[] getArguments() {
-		return ((IStrategoAppl) wrappee).getAllSubterms();
-	}
-
-	public IStrategoConstructor getConstructor() {
-		return ((IStrategoAppl) wrappee).getConstructor();
-	}
-
-	public int intValue() {
-		return ((IStrategoInt) wrappee).intValue();
-	}
-
-	public double realValue() {
-		return ((IStrategoReal) wrappee).realValue();
-	}
-
-	public String stringValue() {
-		return ((IStrategoString) wrappee).stringValue();
-	}
-
-	public IStrategoTerm getWrappee() {
-		return wrappee;
-	}
+public class ECJAnnoWrapper implements IStrategoTerm, IStrategoList,
+        IStrategoAppl, IStrategoInt, IStrategoReal, IStrategoString,
+        IStrategoTuple {
+
+    private static final long serialVersionUID = 1L;
+
+    private final IStrategoTerm wrappee;
+    private final IStrategoList annotations;
+
+    public ECJAnnoWrapper(IStrategoTerm wrappee, IStrategoList annotations) {
+        this.wrappee = wrappee;
+        this.annotations = annotations;
+    }
+
+    @Override
+    public int getStorageType() {
+        return MUTABLE; // does not cache its hashCode() method
+    }
+
+    @Override
+    public IStrategoTerm[] getAllSubterms() {
+        return wrappee.getAllSubterms();
+    }
+
+    @Override
+    public IStrategoList getAnnotations() {
+        return annotations;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return wrappee.getSubterm(index);
+    }
+
+    @Override
+    public int getSubtermCount() {
+        return wrappee.getSubtermCount();
+    }
+
+    @Override
+    public int getTermType() {
+        return wrappee.getTermType();
+    }
+
+    @Override
+    public boolean match(IStrategoTerm second) {
+        return wrappee.match(second)
+                && annotations.match(second.getAnnotations());
+    }
+
+    @Override
+    public void prettyPrint(ITermPrinter pp) {
+        wrappee.prettyPrint(pp);
+        pp.print("{");
+        annotations.prettyPrint(pp);
+        pp.print("}");
+    }
+
+    @Override
+    public IStrategoTerm get(int index) {
+        return ((IStrategoList) wrappee).getSubterm(index);
+    }
+
+    @Override
+    public IStrategoTerm head() {
+        return ((IStrategoList) wrappee).head();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return ((IStrategoList) wrappee).isEmpty();
+    }
+
+    @Override
+    public IStrategoList prepend(IStrategoTerm prefix) {
+        return ((IStrategoList) wrappee).prepend(prefix);
+    }
+
+    @Override
+    public int size() {
+        return ((IStrategoList) wrappee).size();
+    }
+
+    @Override
+    public IStrategoList tail() {
+        return ((IStrategoList) wrappee).tail();
+    }
+
+    @Deprecated
+    public IStrategoTerm[] getArguments() {
+        return ((IStrategoAppl) wrappee).getAllSubterms();
+    }
+
+    @Override
+    public IStrategoConstructor getConstructor() {
+        return ((IStrategoAppl) wrappee).getConstructor();
+    }
+
+    @Override
+    public int intValue() {
+        return ((IStrategoInt) wrappee).intValue();
+    }
+
+    @Override
+    public double realValue() {
+        return ((IStrategoReal) wrappee).realValue();
+    }
+
+    @Override
+    public String stringValue() {
+        return ((IStrategoString) wrappee).stringValue();
+    }
+
+    public IStrategoTerm getWrappee() {
+        return wrappee;
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String getName() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isUniqueValueTerm() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String toString(int maxDepth) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,10 +7,6 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.Writer;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -32,7 +28,6 @@
 import org.eclipse.jdt.core.dom.PrimitiveType.Code;
 import org.spoofax.DebugUtil;
 import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.terms.BasicStrategoArrayList;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;
@@ -43,8 +38,6 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.interpreter.terms.ITermPrinter;
-import org.spoofax.terms.io.InlinePrinter;
 
 public class ECJFactory implements ITermFactory {
 
@@ -257,14 +250,7 @@
         ctorNameToIndexMap.put("AssignmentOperator", ASSIGNMENT_OPERATOR);
     }
     
-    public IStrategoTerm parseFromFile(String path) throws IOException {
-        throw new NotImplementedException();
-    }
-
-    public IStrategoTerm parseFromStream(InputStream inputStream) throws IOException {
-        throw new NotImplementedException();
-    }
-
+    @Override
     public IStrategoTerm parseFromString(String text) {
         if(text.equals("()")) {
             return makeTuple();
@@ -274,23 +260,6 @@
         throw new NotImplementedException();
     }
 
-    public void unparseToFile(IStrategoTerm t, OutputStream ous) throws IOException {
-        InlinePrinter pp = new InlinePrinter();
-        t.prettyPrint(pp);
-        ous.write(pp.getString().getBytes());
-    }
-
-    public void unparseToFile(IStrategoTerm t, Writer out) throws IOException {
-        ITermPrinter tp = new InlinePrinter();
-        t.prettyPrint(tp);
-        out.write(tp.getString());
-    }
-
-    public boolean hasConstructor(String s, int i) {
-    	// FIXME also check generic factory
-    	return ctorNameToIndexMap.containsKey(s);
-    }
-
     private List<ASTNode> getAnnotations(IStrategoTerm term) {
         return ((WrappedASTNodeList)term).getWrappee();
     }
@@ -299,15 +268,12 @@
         return ((WrappedJavadoc)term).getWrappee();
     }
     
+    @Override
     public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
         throw new NotImplementedException();
     }
-
-    @Deprecated
-    public IStrategoAppl makeAppl(IStrategoConstructor ctr, IStrategoList terms) {
-        return makeAppl(ctr, terms.getAllSubterms());
-    }
     
+    @Override
     public IStrategoTerm annotateTerm(IStrategoTerm term, IStrategoList annotations) {
     	if(term instanceof ECJAnnoWrapper) {
     		return new ECJAnnoWrapper(((ECJAnnoWrapper)term).getWrappee(), annotations);
@@ -316,6 +282,7 @@
     	}
     }
 
+    @Override
     public IStrategoAppl makeAppl(IStrategoConstructor ctr, IStrategoTerm... kids) {
         IStrategoAppl t = constructASTNode(ctr, kids);
         if(t == null) {
@@ -338,7 +305,7 @@
         return t;
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private IStrategoAppl constructASTNode(IStrategoConstructor ctr, IStrategoTerm[] kids) {
         int index = ctorNameToIndex(ctr);
         switch(index) {
@@ -1231,7 +1198,7 @@
         return x.getParent() == null && x.getAST() == ast ? x : (Javadoc)ASTNode.copySubtree(ast, x);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asExtendedModifierList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1264,7 +1231,7 @@
         return term instanceof IWrappedExtendedModifier;
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asTypeParameterList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1279,7 +1246,7 @@
         return x.getParent() == null && x.getAST() == ast ? x : (TypeParameter)ASTNode.copySubtree(ast, x);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asTagElementList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1295,7 +1262,7 @@
         return x.getParent() == null && x.getAST() == ast ? x : (TagElement)ASTNode.copySubtree(ast, x);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asAbstractTypeDeclarationList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1312,7 +1279,7 @@
     }
 
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asNameList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1322,7 +1289,7 @@
         return r;    
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asSingleVariableDeclarationList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1337,7 +1304,7 @@
         return x.getParent() == null && x.getAST() == ast ? x : (AbstractTypeDeclaration)ASTNode.copySubtree(ast, x);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asMethodRefParameterList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1347,7 +1314,7 @@
         return r;    
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asImportDeclarationList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1368,7 +1335,7 @@
     }
 
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asEnumConstantDeclarationList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1384,7 +1351,7 @@
     }
 
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asASTNodeList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1404,7 +1371,7 @@
         return x.getParent() == null && x.getAST() == ast ? x : (MethodRefParameter)ASTNode.copySubtree(ast, x);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asMemberValuePairList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1432,7 +1399,7 @@
         return x.getParent() == null && x.getAST() == ast ? x : (Name)ASTNode.copySubtree(ast, x);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asCatchClauseList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1447,7 +1414,7 @@
         return x.getParent() == null && x.getAST() == ast ? x : (AbstractTypeDeclaration)ASTNode.copySubtree(ast, x);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private List asFragmentList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1486,7 +1453,7 @@
         return ((WrappedPrefixExpressionOperator)term).getWrappee();
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asTypeList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1496,7 +1463,7 @@
         return r;    
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asBodyDeclarationList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1515,7 +1482,7 @@
         return ((IStrategoInt)term).intValue();
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asExpressionList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1567,7 +1534,7 @@
         return ((IStrategoString)term).stringValue();
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asStatementList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1871,7 +1838,7 @@
         return term instanceof WrappedType;
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     private Collection asModifierList(IStrategoTerm term) {
         IStrategoTerm[] kids = term.getAllSubterms();
         List r = new ArrayList(kids.length);
@@ -1910,15 +1877,18 @@
         return x == null ? -1 : x.intValue();
     }
 
+    @Override
     public IStrategoConstructor makeConstructor(String string, int arity) {
         return new ASTCtor(string, arity);
     }
 
+    @Override
     public IStrategoInt makeInt(int i) {
-        return new WrappedInt(i);
+        return new ECJInt(i);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    @Override
     public IStrategoList makeList(IStrategoTerm... terms) {
         
         boolean mustUseGeneric = false;
@@ -1927,7 +1897,7 @@
                 mustUseGeneric = true;
         
         if(mustUseGeneric) {
-            return new WrappedGenericList(terms);
+            return new ECJGenericList(terms);
         }
         
         List<ASTNode> r = new ArrayList();
@@ -1935,31 +1905,26 @@
             r.add(((WrappedASTNode)t).getWrappee());
         return new WrappedASTNodeList(r);
     }
-
-    public IStrategoList makeList(Collection<IStrategoTerm> terms) {
-    	return makeList(terms.toArray(new IStrategoTerm[0]));
-    }
-    
-    @Deprecated
-    public final IStrategoList makeList(IStrategoTerm head, IStrategoList tail) {
-        return makeListCons(head, tail);
-    }
     
+    @Override
     public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail) {
         // TODO: handle list prepending in ECJFactory
         return tail.prepend(head);
     }
 
+    @Override
     public IStrategoReal makeReal(double d) {
-        return new WrappedReal(d);
+        return new ECJReal(d);
     }
 
+    @Override
     public IStrategoString makeString(String s) {
-        return new WrappedString(s);
+        return new ECJString(s);
     }
 
+    @Override
     public IStrategoTuple makeTuple(IStrategoTerm... terms) {
-        return new WrappedTuple(terms);
+        return new ECJTuple(terms);
     }
 
     public static IStrategoAppl wrap(Javadoc javadoc) {
@@ -1969,7 +1934,7 @@
             return new WrappedJavadoc(javadoc);
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
     public static IStrategoTerm wrap(List list) {
         if(list == null)
             return None.INSTANCE;
@@ -2004,8 +1969,8 @@
             return new WrappedQualifiedName(name);
     }
 
-    @SuppressWarnings("unchecked")
-	public static IStrategoTerm genericWrap(ASTNode node) {
+	@SuppressWarnings("rawtypes")
+    public static IStrategoTerm genericWrap(ASTNode node) {
         
         if(node instanceof ImportDeclaration)
             return wrap((ImportDeclaration) node);
@@ -2480,7 +2445,7 @@
     }
 
     public static IStrategoTerm wrap(int val) {
-        return new WrappedInt(val);
+        return new ECJInt(val);
     }
 
     public static IStrategoAppl wrap(ArrayType type) {
@@ -2494,7 +2459,7 @@
         if(identifier == null)
             return None.INSTANCE;
         else
-            return new WrappedString(identifier);
+            return new ECJString(identifier);
     }
 
     static IStrategoTerm wrapExpression(Expression expr) {
@@ -2905,21 +2870,21 @@
         IStrategoTerm[] terms = new IStrategoTerm[bindings.length];
         for(int i = 0, sz = bindings.length; i < sz; i++)
             terms[i] = ECJFactory.wrap(bindings[i]);
-        return new WrappedGenericList(terms);
+        return new ECJGenericList(terms);
     }
 
     public static IStrategoTerm wrap(ITypeParameter[] parameters) {
         final IStrategoTerm[] terms = new IStrategoTerm[parameters.length];
         for(int i = 0, sz = parameters.length; i < sz; i++)
             terms[i] = ECJFactory.wrap(parameters[i]);
-        return new WrappedGenericList(terms);
+        return new ECJGenericList(terms);
     }
     
     public static IStrategoTerm wrap(IField[] fields) {
         IStrategoTerm[] terms = new IStrategoTerm[fields.length];
         for(int i = 0, sz = fields.length; i < sz; i++)
             terms[i] = ECJFactory.wrap(fields[i]);
-        return new WrappedGenericList(terms);
+        return new ECJGenericList(terms);
     }
 
 
@@ -2948,7 +2913,7 @@
         IStrategoTerm[] r = new IStrategoTerm[strs.length];
         for(int i = 0; i < r.length; i++)
             r[i] = wrap(strs[i]);
-        return new WrappedGenericList(r);
+        return new ECJGenericList(r);
     }
 
     public static IStrategoTerm wrap(IMethodBinding mb) {
@@ -3093,7 +3058,7 @@
 			IStrategoAppl[] ws = new WrappedActualTypeSignature[signatures.length];
 			for(int i = 0; i < signatures.length; i++)
 				ws[i] = wrapSignature(signatures[i]);
-			return new BasicStrategoArrayList(ws);
+			return new ECJGenericList(ws);
 		}
 
 	}
@@ -3104,4 +3069,69 @@
 		return astMatcher;
 	}
 
+    @Override
+    public IStrategoList makeList() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoAppl makeAppl(IStrategoConstructor constructor,
+            IStrategoTerm[] kids, IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoList makeList(IStrategoTerm[] kids,
+            IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail,
+            IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoTuple makeTuple(IStrategoTerm[] kids,
+            IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoString tryMakeUniqueString(String name) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public int getDefaultStorageType() {
+        return IStrategoTerm.IMMUTABLE;
+    }
+
+    @Override
+    public IStrategoTerm copyAttachments(IStrategoTerm from, IStrategoTerm to) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoList replaceListCons(IStrategoTerm head,
+            IStrategoList tail, IStrategoTerm oldHead, IStrategoList oldTail) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoTerm replaceTerm(IStrategoTerm term, IStrategoTerm old) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermFactory getFactoryWithStorageType(int storageType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoList makeList(Collection<? extends IStrategoTerm> terms) {
+        throw new NotImplementedException();
+    }
+
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedGenericAppl.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedGenericAppl.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,56 +7,67 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
-import org.spoofax.terms.io.AbstractIOTermFactory;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
 
-public class WrappedGenericAppl implements IStrategoAppl {
+public class ECJGenericAppl implements IStrategoAppl {
 
+    private static final long serialVersionUID = 1L;
+    
     private IStrategoConstructor ctor;
     private IStrategoTerm[] children;
     
 
-    WrappedGenericAppl(IStrategoConstructor ctor, IStrategoTerm[] children) {
+    ECJGenericAppl(IStrategoConstructor ctor, IStrategoTerm[] children) {
         this.ctor = ctor;
         this.children = children;
     }
     
+    @Override
     public int getStorageType() {
         return MUTABLE;
     }
     
-    public IStrategoTerm[] getArguments() {
-        return children;
-    }
-    
+    @Override
     public IStrategoList getAnnotations() {
-    	return AbstractIOTermFactory.EMPTY_LIST;
+    	return TermFactory.EMPTY_LIST;
     }
 
+    @Override
     public IStrategoConstructor getConstructor() {
         return ctor;
     }
 
+    @Override
     public IStrategoTerm getSubterm(int index) {
         return children[index];
     }
     
+    @Override
     public IStrategoTerm[] getAllSubterms() {
         return children;
     }
 
+    @Override
     public int getSubtermCount() {
         return children.length;
     }
 
+    @Override
     public int getTermType() {
         return IStrategoTerm.APPL;
     }
 
+    @Override
     public boolean match(IStrategoTerm second) {
         if(!(second instanceof IStrategoAppl))
             return false;
@@ -74,6 +85,7 @@
         return true;
     }
 
+    @Override
     public void prettyPrint(ITermPrinter pp) {
         pp.print(ctor.getName());
         
@@ -97,4 +109,41 @@
         }
     }
 
+    @Override
+    public String toString(int maxDepth) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String getName() {
+        throw new NotImplementedException();
+    }
+
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedGenericList.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedGenericList.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,23 +7,132 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import org.spoofax.interpreter.terms.BasicStrategoArrayList;
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
+
+public class ECJGenericList implements IStrategoList {
 
-public class WrappedGenericList extends BasicStrategoArrayList {
+    private static final long serialVersionUID = 1L;
+    
+    private IStrategoTerm[] kids;
 
-    WrappedGenericList(IStrategoTerm[] kids) {
-        super(kids);
+    ECJGenericList(IStrategoTerm[] kids) {
+        this.kids = kids;
     }
     
     @Override
     public IStrategoList tail() {
-        return new WrappedGenericList(doTail());
+        return new ECJGenericList(doTail());
     }
     
     @Override
     public IStrategoList prepend(IStrategoTerm prefix) {
-        return new WrappedGenericList(doPrepend(prefix)); 
+        throw new NotImplementedException(); 
+    }
+    
+    private IStrategoTerm[] doTail() {
+        IStrategoTerm[] tail = new IStrategoTerm[kids.length - 1];
+        System.arraycopy(kids, 1, tail, 0, tail.length);
+        return tail;
+    }
+
+    @Override
+    public int getSubtermCount() {
+        return kids.length;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return kids[index];
+    }
+
+    @Override
+    public IStrategoTerm[] getAllSubterms() {
+        return kids;
+    }
+
+    @Override
+    public int getTermType() {
+        return IStrategoTerm.LIST;
+    }
+
+    @Override
+    public int getStorageType() {
+        return IStrategoTerm.IMMUTABLE;
+    }
+
+    @Override
+    public IStrategoList getAnnotations() {
+        return TermFactory.EMPTY_LIST;
+    }
+
+    @Override
+    public boolean match(IStrategoTerm second) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void prettyPrint(ITermPrinter pp) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String toString(int maxDepth) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        return true;
+    }
+
+    @Override
+    public IStrategoTerm get(int index) {
+        return kids[index];
+    }
+
+    @Override
+    public int size() {
+        return kids.length;
+    }
+
+    @Override
+    public IStrategoTerm head() {
+        return kids[0];
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return false;
     }
 }
+

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJInt.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInt.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInt.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJInt.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,11 +7,15 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import org.spoofax.interpreter.terms.BasicStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoInt;
+import org.spoofax.terms.TermFactory;
 
-public class WrappedInt extends BasicStrategoInt {
+public class ECJInt extends StrategoInt {
 
-    WrappedInt(int value) {
-        super(value);
+    private static final long serialVersionUID = 1L;
+
+    ECJInt(int value) {
+        super(value, TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
     }
 }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJReal.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJReal.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -0,0 +1,21 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoReal;
+import org.spoofax.terms.TermFactory;
+
+public class ECJReal extends StrategoReal {
+
+    private static final long serialVersionUID = 1L;
+
+    ECJReal(double value) {
+        super(value, TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
+    }
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJString.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJString.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -0,0 +1,12 @@
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.terms.StrategoString;
+
+public class ECJString extends StrategoString {
+
+    private static final long serialVersionUID = 1L;
+
+    protected ECJString(String value) {
+        super(value);
+    }
+}

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJTuple.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTuple.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTuple.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJTuple.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,17 +7,16 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import org.spoofax.interpreter.terms.BasicStrategoTuple;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoTuple;
+import org.spoofax.terms.TermFactory;
 
-public class WrappedTuple extends BasicStrategoTuple {
+public class ECJTuple extends StrategoTuple {
 
-    WrappedTuple(IStrategoTerm[] kids) {
-        super(kids);
-    }
+    private static final long serialVersionUID = 1L;
 
-    public boolean match(IStrategoTerm second) {
-        return doSlowMatch(second);
+    ECJTuple(IStrategoTerm[] kids) {
+        super(kids, TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
     }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/None.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/None.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/None.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,13 +7,17 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
+import java.io.IOException;
+
 import org.eclipse.jdt.core.dom.ASTNode;
+import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class None extends WrappedASTNode {
 
-
+    private static final long serialVersionUID = 1L;
+    
     private final static IStrategoTerm[] EMPTY = new IStrategoTerm[0];
     private final static IStrategoConstructor CTOR = new ASTCtor("None", 0); 
     
@@ -33,11 +37,36 @@
         return null;
     }
 
+/*    
+    @Override
     public IStrategoTerm[] getArguments() {
         return EMPTY;
     }
-
+*/
+    
+    @Override
     public IStrategoTerm[] getAllSubterms() {
         return EMPTY;
     }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String getName() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    protected int hashFunction() {
+        throw new NotImplementedException();
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -2,9 +2,10 @@
 
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
-import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public abstract class WrappedASTNode extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
 
     protected WrappedASTNode(IStrategoConstructor constructor) {
         super(constructor);
@@ -12,10 +13,4 @@
 
     public abstract ASTNode getWrappee();
     
-    @Override
-    public boolean match(IStrategoTerm second) {
-    	if(!(second instanceof WrappedASTNode))
-    		return false;
-    	return getWrappee().subtreeMatch(ECJFactory.getMatcher(), ((WrappedASTNode)second).getWrappee());
-    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,6 +7,7 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -15,10 +16,14 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
-import org.spoofax.terms.io.AbstractIOTermFactory;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
 
 public class WrappedASTNodeList implements IStrategoList {
 
+    private static final long serialVersionUID = 1L;
+    
     private List<ASTNode> wrappee;
     
     public WrappedASTNodeList(List<ASTNode> wrappee) {
@@ -29,18 +34,22 @@
         this.wrappee = (List<ASTNode>)wrappee;
     }
     
+    @Override
     public int getStorageType() {
         return MUTABLE;
     }
     
+    @Override
     public IStrategoTerm get(int i) {
         return getSubterm(i);
     }
 
+    @Override
     public IStrategoTerm head() {
         return ECJFactory.genericWrap(wrappee.get(0));
     }
 
+    @Override
     public IStrategoList prepend(IStrategoTerm prefix) {
         
         // Trying to build a hybrid list. Do on-the-fly conversion.
@@ -57,15 +66,17 @@
             for(int i = 0; i < sz; i++) {
                 r[i + 1] = ECJFactory.genericWrap(wrappee.get(i));
             }
-            return new WrappedGenericList(r);
+            return new ECJGenericList(r);
         }
     }
 
+    @Override
     public int size() {
         return wrappee.size();
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    @Override
     public IStrategoList tail() {
         List r = new ArrayList();
         for(int i = 1; i < wrappee.size(); i++) {
@@ -74,6 +85,7 @@
         return new WrappedASTNodeList(r);
     }
 
+    @Override
     public IStrategoTerm getSubterm(int index) {
         Object o = wrappee.get(index);
         if(o instanceof IStrategoTerm)
@@ -86,6 +98,7 @@
         throw new NotImplementedException("Unsupported type : " + o.getClass());
     }
 
+    @Override
     public IStrategoTerm[] getAllSubterms() {
         IStrategoTerm[] r = new IStrategoTerm[wrappee.size()];
         ASTNode[] s = wrappee.toArray(new ASTNode[0]);
@@ -95,27 +108,31 @@
         return r;
     }
     
+    @Override
     public int getSubtermCount() {
         return wrappee.size();
     }
 
+    @Override
     public int getTermType() {
         return IStrategoTerm.LIST;
     }
 
+    @Override
     public boolean match(IStrategoTerm second) {
         if(second instanceof IStrategoList) {
             IStrategoList snd = (IStrategoList) second;
             if(size() != snd.size()) 
                 return false;
             for(int i = 0; i < size(); i++) 
-                if(!get(i).match(snd.get(i)))
+                if(!get(i).match(snd.getSubterm(i)))
                     return false;
             return true;
         } 
         return false;
     }
 
+    @Override
     public void prettyPrint(ITermPrinter pp) {
         int sz = size();
         if(sz > 0) {
@@ -141,11 +158,45 @@
         return wrappee;
     }
 
+    @Override
     public boolean isEmpty() {
         return wrappee.isEmpty();
     }
     
+    @Override
     public IStrategoList getAnnotations() {
-    	return AbstractIOTermFactory.EMPTY_LIST;
+    	return TermFactory.EMPTY_LIST;
+    }
+
+    @Override
+    public String toString(int maxDepth) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        return true;
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 
 public abstract class WrappedAbstractTypeDeclaration extends WrappedBodyDeclaration {
 
+    private static final long serialVersionUID = 1L;
+
     protected WrappedAbstractTypeDeclaration(IStrategoConstructor constructor) {
         super(constructor);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -5,6 +5,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedActualTypeSignature extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
 
 	private final String wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ActualTypeSignature", 4);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -11,6 +11,8 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 
 public abstract class WrappedAnnotation extends WrappedExpression implements IWrappedExtendedModifier {
+    
+    private static final long serialVersionUID = 1L;
 
     protected WrappedAnnotation(IStrategoConstructor constructor) {
         super(constructor);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedAnnotationTypeDeclaration extends WrappedAbstractTypeDeclaration {
+    
+    private static final long serialVersionUID = 1L;
 
     private final AnnotationTypeDeclaration wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("AnnotationTypeDeclaration", 3);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedAnnotationTypeMemberDeclaration extends WrappedBodyDeclaration {
+    
+    private static final long serialVersionUID = 1L;
 
     private final AnnotationTypeMemberDeclaration wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("AnnotationTypeMemberDeclaration", 4);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedAnonymousClassDeclaration extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
 
     private final AnonymousClassDeclaration wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("AnonymousClassDeclaration", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedArrayAccess extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ArrayAccess wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ArrayAccess", 2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedArrayCreation extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ArrayCreation wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ArrayCreation", 3);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedArrayInitializer extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ArrayInitializer wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ArrayInitializer", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedArrayType extends WrappedType {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ArrayType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ArrayType", 3);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedAssertStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final AssertStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("AssertStatement", 2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedAssignment extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final Assignment wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("Assignment", 3);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,7 +13,9 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class WrappedAssignmentOperator extends WrappedECJNode {
+public class WrappedAssignmentOperator extends AbstractWrappedECJNode {
+    
+    private static final long serialVersionUID = 1L;
 
     private final Assignment.Operator wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("AssignmentOperator", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedBlock extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final Block wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("Block", 1); 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedBlockComment extends WrappedComment {
+    
+    private static final long serialVersionUID = 1L;
 
     // FIXME where's the content?
     private final BlockComment wrappee;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -11,6 +11,8 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 
 public abstract class WrappedBodyDeclaration extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
 
     protected WrappedBodyDeclaration(IStrategoConstructor constructor) {
         super(constructor);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedBooleanLiteral extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final BooleanLiteral wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("BooleanLiteral", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedBooleanType extends WrappedType {
 
+    private static final long serialVersionUID = 1L;
+
     private final PrimitiveType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("BooleanType", 0);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedBreakStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final BreakStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("BreakStatement", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedByteType extends WrappedType {
+    
+    private static final long serialVersionUID = 1L;
 
     private final PrimitiveType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ByteType", 0);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedCastExpression extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final CastExpression wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("CastExpression", 2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedCatchClause extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
 
     private final CatchClause wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("CatchClause", 2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedCharacterLiteral extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final CharacterLiteral wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("CharacterLiteral", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedClassInstanceCreation extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ClassInstanceCreation wrappee;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedComment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedComment.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedComment.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -10,6 +10,8 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 
 public abstract class WrappedComment extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
 
     protected WrappedComment(IStrategoConstructor constructor) {
         super(constructor);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedCompilationUnit extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
 
     private final CompilationUnit wrappee;
     private static final IStrategoConstructor CTOR = new ASTCtor("CompilationUnit", 3); 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedConditionalExpression extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ConditionalExpression wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ConditionalExpression", 3);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedConstructorInvocation extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ConstructorInvocation wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ConstructorInvocation", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedContinueStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ContinueStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ContinueStatement", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedDoStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final DoStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("DoStatement", 2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedDoubleType extends WrappedType {
+    
+    private static final long serialVersionUID = 1L;
 
     private final PrimitiveType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("DoubleType", 0);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedEmptyStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final EmptyStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("EmptyStatement", 0);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedEnhancedForStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final EnhancedForStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("EnhancedForStatement", 3);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedEnumConstantDeclaration extends WrappedBodyDeclaration {
+    
+    private static final long serialVersionUID = 1L;
 
     private final EnumConstantDeclaration wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("EnumConstantDeclaration", 4);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedEnumDeclaration extends WrappedAbstractTypeDeclaration {
+    
+    private static final long serialVersionUID = 1L;
 
     private final EnumDeclaration wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("EnumDeclaration", 5);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -11,6 +11,8 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 
 public abstract class WrappedExpression extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
 
     protected WrappedExpression(IStrategoConstructor constructor) {
         super(constructor);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedExpressionStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ExpressionStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ExpressionStatement", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedFieldAccess extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final FieldAccess wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("FieldAccess", 2); 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedFieldDeclaration extends WrappedBodyDeclaration {
+    
+    private static final long serialVersionUID = 1L;
 
     private final FieldDeclaration wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("FieldDeclaration", 4);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedFloatType extends WrappedType {
+    
+    private static final long serialVersionUID = 1L;
 
     private final PrimitiveType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("FloatType", 0);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedForStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ForStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ForStatement", 4);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedIBinding extends AbstractWrappedBinding {
     
+    private static final long serialVersionUID = 1L;
+    
     private final IBinding wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("Binding", 3);
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -11,7 +11,9 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class WrappedICompilationUnit extends WrappedECJNode {
+public class WrappedICompilationUnit extends AbstractWrappedECJNode {
+    
+    private static final long serialVersionUID = 1L;
 
     private final ICompilationUnit wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ICompilationUnit", 2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIField.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIField.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIField.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,7 +13,9 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class WrappedIField extends WrappedECJNode {
+public class WrappedIField extends AbstractWrappedECJNode {
+    
+    private static final long serialVersionUID = 1L;
 
     private final IField wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("IField", 3);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedIFile extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
 
     private final IFile wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ECJFile", 2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedIJavaElement extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
 
     private final IJavaElement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("IJavaElement", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedIJavaProject extends WrappedIJavaElement {
+    
+    private static final long serialVersionUID = 1L;
 
     private final IJavaProject wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ECJJavaProject", 2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedIMethodBinding extends AbstractWrappedBinding {
+    
+    private static final long serialVersionUID = 1L;
 
     private final IMethodBinding wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("MethodBinding", 4);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedIProject extends AbstractECJAppl {
 
+    private static final long serialVersionUID = 1L;
+
     private final IProject wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ECJProject", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,7 +12,9 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class WrappedIType extends WrappedECJNode {
+public class WrappedIType extends AbstractWrappedECJNode {
+
+    private static final long serialVersionUID = 1L;
 
     private final IType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("IType", 6);
@@ -70,7 +72,7 @@
     	final IStrategoTerm[] resolved = new IStrategoTerm[names.length];
     	for(int i = 0; i < names.length; i++)
     		resolved[i] = resolveDottedName(names[i]);
-    	return new WrappedGenericList(resolved);
+    	return new ECJGenericList(resolved);
 	}
 
 	private IStrategoTerm resolveDottedName(final String name) throws JavaModelException {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedITypeBinding extends AbstractWrappedBinding {
 
+    private static final long serialVersionUID = 1L;
+
     private final ITypeBinding wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("TypeBinding", 7);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -7,7 +7,9 @@
 
 public class WrappedITypeHierarchy extends AbstractECJAppl {
 
-	private final static IStrategoConstructor CTOR = new ASTCtor("ITypeHierarchy", 2);
+    private static final long serialVersionUID = 1L;
+
+    private final static IStrategoConstructor CTOR = new ASTCtor("ITypeHierarchy", 2);
 	private final ITypeHierarchy wrappee;
 	
 	protected WrappedITypeHierarchy(ITypeHierarchy wrappee) {
@@ -25,7 +27,7 @@
 			final IStrategoTerm[] terms = new IStrategoTerm[types.length];
 			for(int i = 0; i < types.length; i++)
 				terms[i] = ECJFactory.wrap(types[i]);
-			return new WrappedGenericList(terms);
+			return new ECJGenericList(terms);
 		default:
 			throw new ArrayIndexOutOfBoundsException();
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -9,16 +9,13 @@
 
 import org.eclipse.jdt.core.ITypeParameter;
 import org.eclipse.jdt.core.JavaModelException;
-import org.eclipse.jdt.core.Signature;
-import org.eclipse.jdt.core.dom.AST;
-import org.eclipse.jdt.core.dom.Name;
-import org.eclipse.jdt.core.dom.ParameterizedType;
-import org.eclipse.jdt.core.dom.Type;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedITypeParameter extends AbstractECJAppl {
 
+    private static final long serialVersionUID = 1L;
+    
     private final ITypeParameter wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ITypeParameter", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedIfStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final IfStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("IfStatement", 3); 
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -11,6 +11,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedImportDeclaration extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
 
     private ImportDeclaration wrappee;
     public final static ASTCtor CTOR = new ASTCtor("ImportDeclaration", 3); 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedInfixExpression extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
 
     private final InfixExpression wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("InfixExpression", 4);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedInitializer extends WrappedBodyDeclaration {
 
+    private static final long serialVersionUID = 1L;
+
     private final Initializer wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("Initializer", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedInstanceofExpression extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final InstanceofExpression wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("InstanceofExpression", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedIntType extends WrappedType {
 
+    private static final long serialVersionUID = 1L;
+
     private final PrimitiveType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("IntType", 0);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedJavadoc extends WrappedComment {
 
+    private static final long serialVersionUID = 1L;
+
     private final Javadoc wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("Javadoc", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedLabeledStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final LabeledStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("LabeledStatement", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedLineComment extends WrappedComment {
 
+    private static final long serialVersionUID = 1L;
+
     // FIXME where is the content?
     private final LineComment wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("LineComment", 0);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedLongType extends WrappedType {
 
+    private static final long serialVersionUID = 1L;
+
     private final PrimitiveType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("LongType", 0);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -14,6 +14,8 @@
 
 public class WrappedMarkerAnnotation extends WrappedAnnotation {
 
+    private static final long serialVersionUID = 1L;
+
     // FIXME improve
     private final MarkerAnnotation wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("MarkerAnnotation", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedMemberRef extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     private final MemberRef wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("MemberRef", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedMemberValuePair extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     private final MemberValuePair wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("MemberValuePair", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedMethodDeclaration extends WrappedBodyDeclaration {
 
+    private static final long serialVersionUID = 1L;
+
     private final MethodDeclaration wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("MethodDeclaration", 8); 
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedMethodInvocation extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final MethodInvocation wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("MethodInvocation", 4);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedMethodRef extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     private final MethodRef wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("MethodRef", 3);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedMethodRefParameter extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     private final MethodRefParameter wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("MethodRefParameter", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -14,6 +14,8 @@
 
 public class WrappedModifier extends WrappedASTNode implements IWrappedExtendedModifier {
 
+    private static final long serialVersionUID = 1L;
+
     private final Modifier wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("Modifier", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -11,7 +11,9 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class WrappedModifierKeyword extends WrappedECJNode {
+public class WrappedModifierKeyword extends AbstractWrappedECJNode {
+
+    private static final long serialVersionUID = 1L;
 
     private final Modifier.ModifierKeyword wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ModifierKeyword", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedName.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedName.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 
 public abstract class WrappedName extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     protected WrappedName(IStrategoConstructor constructor) {
         super(constructor);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -14,6 +14,8 @@
 
 public class WrappedNormalAnnotation extends WrappedAnnotation {
 
+    private static final long serialVersionUID = 1L;
+
     private final NormalAnnotation wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("NormalAnnotation", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedNullLiteral extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final NullLiteral wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("NullLiteral", 0);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedNumberLiteral extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final NumberLiteral wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("NumberLiteral", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedPackageDeclaration extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     private static final IStrategoConstructor CTOR = new ASTCtor("PackageDeclaration", 3); 
     private final PackageDeclaration wrappee;
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedParameterizedType extends WrappedType {
 
+    private static final long serialVersionUID = 1L;
+
     private final ParameterizedType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ParameterizedType", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedParenthesizedExpression extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final ParenthesizedExpression wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ParenthesizedExpression", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedPostfixExpression extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+    
     private final PostfixExpression wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("PostfixExpression", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,8 +13,10 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class WrappedPostfixExpressionOperator extends WrappedECJNode {
+public class WrappedPostfixExpressionOperator extends AbstractWrappedECJNode {
 
+    private static final long serialVersionUID = 1L;
+    
     private final PostfixExpression.Operator wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("PostfixExpressionOperator", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedPrefixExpression extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final PrefixExpression wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("PrefixExpression", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,7 +13,9 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
-public class WrappedPrefixExpressionOperator extends WrappedECJNode {
+public class WrappedPrefixExpressionOperator extends AbstractWrappedECJNode {
+
+    private static final long serialVersionUID = 1L;
 
     private final PrefixExpression.Operator wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("PrefixExpressionOperator", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -15,6 +15,8 @@
 
 public class WrappedPrimitiveType extends WrappedType {
 
+    private static final long serialVersionUID = 1L;
+
     // FIXME should we even keep this?
     
     private final PrimitiveType wrappee;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedQualifiedName extends WrappedName {
 
+    private static final long serialVersionUID = 1L;
+
     private final QualifiedName wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("QualifiedName", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedQualifiedType extends WrappedType {
 
+    private static final long serialVersionUID = 1L;
+
     private final QualifiedType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("QualifiedType", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedReturnStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final ReturnStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ReturnStatement", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedSimpleName extends WrappedName {
 
+    private static final long serialVersionUID = 1L;
+
     private final SimpleName wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("SimpleName", 1); 
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedSimpleType extends WrappedType {
 
+    private static final long serialVersionUID = 1L;
+
     private final SimpleType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("SimpleType", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -14,6 +14,8 @@
 
 public class WrappedSingleMemberAnnotation extends WrappedAnnotation {
 
+    private static final long serialVersionUID = 1L;
+    
     private final SingleMemberAnnotation wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("SingleMemberAnnotation", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedSingleVariableDeclaration extends WrappedVariableDeclaration {
 
+    private static final long serialVersionUID = 1L;
+    
     private final SingleVariableDeclaration wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("SingleVariableDeclaration", 5);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 
 public abstract class WrappedStatement extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     protected WrappedStatement(IStrategoConstructor constructor) {
         super(constructor);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedStringLiteral extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final StringLiteral wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("StringLiteral", 1); 
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedSuperConstructorInvocation extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+    
     private final SuperConstructorInvocation wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("SuperConstructorInvocation", 3);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedSuperFieldAccess extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final SuperFieldAccess wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("SuperFieldAccess", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedSuperMethodInvocation extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final SuperMethodInvocation wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("SuperMethodInvocation", 4);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedSwitchCase extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     // FIXME default
     
     private final SwitchCase wrappee;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedSwitchStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final SwitchStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("SwitchStatement", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedSynchronizedStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final SynchronizedStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("SynchronizedStatement", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedTagElement extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     // FIXME nested
     
     private final TagElement wrappee;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedTextElement extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     private final TextElement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("TextElement", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedThisExpression extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+    
     private final ThisExpression wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ThisExpression", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedThrowStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final ThrowStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("ThrowStatement", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedTryStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final TryStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("TryStatement", 3);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 
 public abstract class WrappedType extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     protected WrappedType(IStrategoConstructor constructor) {
         super(constructor);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedTypeDeclaration extends WrappedAbstractTypeDeclaration {
 
+    private static final long serialVersionUID = 1L;
+
     private final TypeDeclaration wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("TypeDeclaration", 8); 
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedTypeDeclarationStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final TypeDeclarationStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("TypeDeclarationStatement", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedTypeLiteral extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final TypeLiteral wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("TypeLiteral", 1);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,6 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 public class WrappedTypeParameter extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
 
     private final TypeParameter wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("TypeParameter", 2);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -11,6 +11,8 @@
 
 public abstract class WrappedVariableDeclaration extends WrappedASTNode {
 
+    private static final long serialVersionUID = 1L;
+
     protected WrappedVariableDeclaration(IStrategoConstructor constructor) {
         super(constructor);
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedVariableDeclarationExpression extends WrappedExpression {
 
+    private static final long serialVersionUID = 1L;
+
     private final VariableDeclarationExpression wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("VariableDeclarationExpression", 3);
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedVariableDeclarationFragment extends WrappedVariableDeclaration {
 
+    private static final long serialVersionUID = 1L;
+
     private final VariableDeclarationFragment wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("VariableDeclarationFragment", 3); 
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedVariableDeclarationStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final VariableDeclarationStatement wrappee;  
     private final static IStrategoConstructor CTOR = new ASTCtor("VariableDeclarationStatement", 3); 
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,8 @@
 
 public class WrappedWhileStatement extends WrappedStatement {
 
+    private static final long serialVersionUID = 1L;
+
     private final WhileStatement wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("WhileStatement", 2);
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -13,6 +13,10 @@
 
 public class WrappedWildcardType extends WrappedType {
 
+    /**
+     * 
+     */
+    private static final long serialVersionUID = 1L;
     // FIXME isUpperBound()
     private final WildcardType wrappee;
     private final static IStrategoConstructor CTOR = new ASTCtor("WildcardType", 1);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/RecursiveScriptTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/RecursiveScriptTest.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/RecursiveScriptTest.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -16,12 +16,12 @@
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.adapter.ecj.ECJFactory;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.ecj.ECJLibrary;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.TermFactory;
 
 public class RecursiveScriptTest {
 
@@ -81,15 +81,15 @@
     }
 
     private ECJFactory dataFactory;
-    private WrappedATermFactory programFactory;
+    private TermFactory programFactory;
     private Interpreter interp;
     private ASTParser parser; 
     
     RecursiveScriptTest(String script) {
-        programFactory = new WrappedATermFactory();
+        programFactory = new TermFactory();
         dataFactory = new ECJFactory();
         interp = new Interpreter(dataFactory, programFactory);
-        interp.addOperatorRegistry(ECJLibrary.REGISTRY_NAME, new ECJLibrary());
+        interp.addOperatorRegistry(new ECJLibrary());
         parser = ASTParser.newParser(AST.JLS3);
         try {
             interp.load(script);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -43,7 +43,7 @@
 
         ECJFactory wef = new ECJFactory();
         Interpreter itp = new Interpreter(wef);
-        itp.addOperatorRegistry(ECJLibrary.REGISTRY_NAME, new ECJLibrary());
+        itp.addOperatorRegistry(new ECJLibrary());
         itp.load(prg);
         IStrategoTerm t = wef.parseFromTree(n);
         itp.setCurrent(t);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseFile.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseFile.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -38,7 +38,7 @@
     static void parse(String prg, String file) throws FileNotFoundException, IOException, InterpreterException {
 
         Interpreter itp = new Interpreter(new ECJFactory());
-        itp.addOperatorRegistry(ECJLibrary.REGISTRY_NAME, new ECJLibrary());
+        itp.addOperatorRegistry(new ECJLibrary());
         itp.load(prg);
         ASTParser parser = ASTParser.newParser(AST.JLS3);
         parser.setSource(getBytes(file));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseTest.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseTest.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -39,7 +39,7 @@
     static void parse(String file) throws FileNotFoundException, IOException, InterpreterException {
 
         Interpreter itp = new Interpreter(new ECJFactory());
-        itp.addOperatorRegistry(ECJLibrary.REGISTRY_NAME, new ECJLibrary());
+        itp.addOperatorRegistry(new ECJLibrary());
         itp.load("deconstructor.rtree");
         ASTParser parser = ASTParser.newParser(AST.JLS3);
         parser.setSource(getBytes(file));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -14,9 +14,6 @@
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.Path;
-import org.eclipse.jdt.core.IJavaProject;
-import org.eclipse.jdt.core.IPackageFragment;
 import org.spoofax.interpreter.adapter.ecj.ECJFactory;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -28,7 +28,7 @@
 		super("ECJ_rewrite_compilation_unit", 1, 1);
 	}
 
-	@SuppressWarnings("unchecked")
+	@SuppressWarnings({ "unchecked", "rawtypes" })
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 	throws InterpreterException {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -30,7 +30,7 @@
 		super("ECJ_rewrite_file", 1, 1);
 	}
 
-	@SuppressWarnings("unchecked")
+	@SuppressWarnings({ "unchecked", "rawtypes" })
 	@Override
 	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
 	throws InterpreterException {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,7 +12,6 @@
 
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.jdt.core.IType;
-import org.eclipse.jdt.core.Signature;
 import org.eclipse.jdt.core.search.IJavaSearchConstants;
 import org.eclipse.jdt.core.search.IJavaSearchScope;
 import org.eclipse.jdt.core.search.SearchEngine;
@@ -28,7 +27,6 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.terms.io.InlinePrinter;
 
 public class ECJ_search_for_supertype_type_refs_in_hierarchy extends AbstractPrimitive {
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -70,7 +70,6 @@
 					//System.out.println(" * " + t.getFullyQualifiedName());
 					for(String s : t.getSuperInterfaceTypeSignatures()) {
 						final String p = Signature.toString(s);
-						int x = 0;
 						if(p.equals(className)) {
 							results.add(t);
 							return;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -12,7 +12,6 @@
 import org.eclipse.jdt.core.dom.Name;
 import org.eclipse.jdt.core.dom.ParameterizedType;
 import org.eclipse.jdt.core.dom.Type;
-import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.adapter.ecj.ECJFactory;
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/TestECJAdapter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/TestECJAdapter.java	Mon Nov  7 11:20:29 2011	(r23572)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/TestECJAdapter.java	Tue Nov  8 12:32:48 2011	(r23573)
@@ -74,7 +74,7 @@
     protected void interpTestFail(String string, String in) throws IOException, InterpreterException {
         ECJFactory f = new ECJFactory();
         Interpreter itp = new Interpreter(f);
-        itp.addOperatorRegistry(ECJLibrary.REGISTRY_NAME, new ECJLibrary());
+        itp.addOperatorRegistry(new ECJLibrary());
         itp.load("str/" + string + ".rtree");
         IStrategoTerm inTerm = f.parseFromString(in);
         itp.setCurrent(inTerm);
@@ -85,7 +85,7 @@
         ECJFactory f = new ECJFactory();
         Interpreter itp = new Interpreter(f);
         //DebugUtil.debugging = true;
-        itp.addOperatorRegistry(ECJLibrary.REGISTRY_NAME, new ECJLibrary());
+        itp.addOperatorRegistry(new ECJLibrary());
         itp.load(findFile(string));
         IStrategoTerm inTerm = f.parseFromString(in);
         IStrategoTerm outTerm = f.parseFromString(out);

From karltk at strategoxt.org  Tue Nov  8 13:56:52 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 12:56:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23574 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj: .
	src/main src/main/java src/main/java/org
	src/main/java/org/spoofax/ecjadapter src/main/java/org/spo...
Message-ID: <20111108125652.C72FD108C01D@mx3.tudelft.nl>

Author: karltk
Date: Tue Nov  8 12:56:52 2011
New Revision: 23574
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23574&sc=1

Log:
Split source code into Apache-style layout: src/main/java and src/main/test.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/
      - copied from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJInt.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJInt.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJReal.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJReal.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJString.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJString.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJTuple.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/ParseTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/RecursiveScriptTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/ScriptTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SimpleTest.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/SimpleTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SpoofaxDemo.java
      - copied, changed from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/SpoofaxDemo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/library/ecj/
Replaced:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/Main.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/ParseJava.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/ParseJava.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ASTCtor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AmbName.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AmbName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/DottedName.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/DottedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/None.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedComment.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIField.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedName.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/TestECJAdapter.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedECJNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedGenericAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedGenericList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInt.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReal.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedString.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTuple.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/tests/ParseTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/tests/RecursiveScriptTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/tests/ScriptTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/tests/SimpleTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/tests/SpoofaxDemo.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath	Tue Nov  8 12:32:48 2011	(r23573)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/.classpath	Tue Nov  8 12:56:52 2011	(r23574)
@@ -1,7 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
+	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="src" path="src/test/java"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry exported="true" kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/Main.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/Main.java)
@@ -0,0 +1,71 @@
+/*
+ * Created on 27. jan.. 2007
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.ecjadapter;
+
+import java.io.IOException;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.spoofax.DebugUtil;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.ecj.ECJLibrary;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.io.InlinePrinter;
+
+public class Main {
+
+    public static void main(String[] args) throws IOException, InterpreterException {
+        
+        String[] files = null;
+        List<String> actualArgs = new LinkedList<String>();
+        
+        for (int i = 0; i < args.length; i++) {
+            if (args[i].equals("--debug")) {
+                DebugUtil.setDebug(true);
+            } else if (args[i].equals("-i")) {
+                files = args[i + 1].split(",");
+            } else if (args[i].equals("/trace")) {
+                DebugUtil.tracing = true;
+            } else {
+                actualArgs.add(args[i]);
+            }
+        }
+
+        if(files == null) {
+            System.err.println("Usage: ecj-shell [--debug] -i program.ctree");
+            System.exit(2);
+        }
+        
+        ITermFactory data = new ECJFactory();
+        ITermFactory program = new TermFactory();
+        Interpreter intp = new Interpreter(data, program);
+        intp.addOperatorRegistry(new ECJLibrary());
+        for(String f : files)
+            intp.load(f);
+        
+        // Compute parameters
+        IStrategoTerm[] finalArgs = new IStrategoTerm[actualArgs.size()];
+        for(int i = 0; i < actualArgs.size(); i++)
+            finalArgs[i] = data.makeString(actualArgs.get(i));
+        intp.setCurrent(data.makeList(finalArgs));
+        
+        if(!intp.invoke("main_0_0")) {
+            System.err.println("Rewriting failed");
+            System.exit(2);
+        }
+        ITermPrinter pp = new InlinePrinter();
+        intp.current().prettyPrint(pp);
+        System.out.println(pp.getString());
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/ParseJava.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/ParseJava.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/ParseJava.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/ecjadapter/ParseJava.java)
@@ -0,0 +1,95 @@
+/*
+ * Created on 27. jan.. 2007
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.ecjadapter;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.FileReader;
+import java.io.IOException;
+
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTNode;
+import org.eclipse.jdt.core.dom.ASTParser;
+import org.spoofax.DebugUtil;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.io.InlinePrinter;
+
+public class ParseJava {
+
+    public static void main(String[] args) throws IOException, InterpreterException {
+        
+    	String inputFile = null;
+    	String outputFile = null;
+    	boolean statementsRecovery=true;
+    	
+        for (int i = 0; i < args.length; i++) {
+            if (args[i].equals("--debug")) {
+                DebugUtil.setDebug(true);
+            } else if (args[i].equals("-i")) {
+                inputFile = args[i + 1];
+            } else if (args[i].equals("-o")) {
+                outputFile = args[i + 1];
+            }else if (args[i].equals("-nsr")) {
+                statementsRecovery=false;
+            }
+        }
+
+        if(inputFile == null) {
+            System.err.println("Usage: ecj-parse-java [--debug] -i file.java");
+            System.exit(2);
+        }
+
+        IStrategoTerm r = parseJava(inputFile, statementsRecovery);
+        if(r == null) {
+        	System.err.println("Failed to open and read file " + inputFile);
+        	System.exit(3);
+        }
+
+        InlinePrinter ip = new InlinePrinter();
+        r.prettyPrint(ip);
+        String output= ip.getString();
+        System.out.println(output);
+        
+        if(outputFile!=null){
+        	FileOutputStream ous = new FileOutputStream(outputFile);
+        	ous.write(output.getBytes());
+        }
+    }
+ 
+    private static IStrategoTerm parseJava(String fileName, boolean useStatementsRecovery) throws FileNotFoundException, IOException {
+    
+    	ASTParser parser = ASTParser.newParser(AST.JLS3);
+    	parser.setStatementsRecovery(useStatementsRecovery);
+    	parser.setKind(ASTParser.K_COMPILATION_UNIT);
+        parser.setResolveBindings(true);
+    	parser.setSource(getBytes(fileName));
+    	parser.setBindingsRecovery(true);
+    
+    	ASTNode ast = parser.createAST(null);
+    	
+    	ECJFactory f = new ECJFactory();
+    	return f.parseFromTree(ast);
+    }
+
+    private static char[] getBytes(String fileName) throws FileNotFoundException, IOException {
+
+        BufferedReader r = new BufferedReader(new FileReader(fileName));
+        StringBuilder sb = new StringBuilder();
+        String s = r.readLine();
+        while(s != null) {
+            sb.append(s);
+            s = r.readLine();
+        }
+            
+        return sb.toString().toCharArray();
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ASTCtor.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ASTCtor.java)
@@ -0,0 +1,119 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
+
+public class ASTCtor implements IStrategoConstructor {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final String name;
+    private final int arity;
+
+    ASTCtor(String name, int arity) {
+        this.name = name;
+        this.arity = arity;
+    }
+    
+    public int getStorageType() {
+        return IMMUTABLE;
+    }
+    
+    public int getArity() {
+        return arity;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public IStrategoAppl instantiate(ITermFactory factory, IStrategoTerm... kids) {
+        return new ECJGenericAppl(this, kids);
+    }
+
+    public IStrategoAppl instantiate(ITermFactory factory, IStrategoList kids) {
+        IStrategoTerm[] children = new IStrategoTerm[kids.size()];
+        for(int i = 0; i < children.length; i++) 
+            children[i] = kids.getSubterm(i); 
+        return new ECJGenericAppl(this, children); 
+        //throw new NotImplementedException();
+    }
+
+    public IStrategoTerm getSubterm(int index) {
+        throw new NotImplementedException();
+    }
+
+    public int getSubtermCount() {
+        throw new NotImplementedException();
+    }
+
+    public int getTermType() {
+        return IStrategoTerm.CTOR;
+    }
+
+    public boolean match(IStrategoTerm second) {
+        throw new NotImplementedException();
+    }
+
+    public void prettyPrint(ITermPrinter pp) {
+        pp.print(name + "##" + arity);
+    }
+
+    public IStrategoTerm[] getAllSubterms() {
+        throw new NotImplementedException();
+    }
+
+    public IStrategoList getAnnotations() {
+    	throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public String toString(int maxDepth) {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        // TODO Auto-generated method stub
+        
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        throw new NotImplementedException();
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java)
@@ -0,0 +1,103 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.TermFactory;
+
+public abstract class AbstractECJAppl extends AbstractECJNode implements IStrategoAppl {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final IStrategoConstructor constructor;
+    
+    protected AbstractECJAppl(IStrategoConstructor constructor) {
+        super(TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
+        this.constructor = constructor;
+    }
+
+    @Override
+    public int getTermType() {
+        return IStrategoTerm.APPL;
+    }
+
+    @Override
+    public IStrategoConstructor getConstructor() {
+        return constructor;
+    }
+
+    @Override
+    public int getSubtermCount() {
+        return constructor.getArity();
+    }
+ 
+/*
+    @Override
+    public IStrategoTerm[] getArguments() {
+        IStrategoTerm[] r = new IStrategoTerm[constructor.getArity()];
+        for(int i = 0; i < r.length; i++) {
+            r[i] = getSubterm(i);
+        }
+        return r;
+    }
+*/    
+    @Override
+    public void prettyPrint(ITermPrinter pp) {
+        pp.print(constructor.getName());
+        
+        int arity = constructor.getArity();
+        if(arity > 0) {
+            pp.println("(", false);
+            pp.indent(constructor.getName().length() + 1);
+            pp.print("  ");
+            pp.nextIndentOff();
+            getSubterm(0).prettyPrint(pp);
+            pp.println("");
+            for(int i = 1; i < arity; i++) {
+                pp.print(", ");
+                pp.nextIndentOff();
+                getSubterm(i).prettyPrint(pp);
+                pp.println("");
+            }
+            pp.print(")");
+            pp.outdent(constructor.getName().length() + 1);
+            
+        }
+    }
+    
+    public abstract IStrategoTerm getSubterm(int index);
+
+    @Override
+    public IStrategoTerm[] getAllSubterms() {
+        final int sz = getConstructor().getArity();
+        IStrategoTerm[] r = new IStrategoTerm[sz];
+        for(int i = 0; i < sz; i++) {
+            r[i] = getSubterm(i);
+        }
+        return r;
+    }
+
+    @Override
+    protected int hashFunction() {
+        throw new NotImplementedException();
+    }
+    
+    @Override
+    public String getName() {
+        return constructor.getName();
+    }
+    
+    @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        throw new NotImplementedException();
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java)
@@ -0,0 +1,29 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.terms.StrategoTerm;
+
+public abstract class AbstractECJNode extends StrategoTerm {
+
+    private static final long serialVersionUID = 1L;
+
+    protected AbstractECJNode(IStrategoList annotations, int storageType) {
+        super(annotations, storageType);
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java)
@@ -0,0 +1,23 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.IBinding;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+
+public abstract class AbstractWrappedBinding extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
+
+    protected AbstractWrappedBinding(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+
+    public abstract IBinding getWrappee();
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java)
@@ -0,0 +1,23 @@
+/*
+ * Created on 24. jan.. 2007
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+
+public abstract class AbstractWrappedECJNode extends AbstractECJAppl {
+
+    private static final long serialVersionUID = 1L;
+
+    protected AbstractWrappedECJNode(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+
+    public abstract Object getWrappee();
+    
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AmbName.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AmbName.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AmbName.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/AmbName.java)
@@ -0,0 +1,18 @@
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoAppl;
+import org.spoofax.terms.StrategoConstructor;
+
+public class AmbName extends StrategoAppl {
+
+    private static final long serialVersionUID = 1L;
+    
+    private static IStrategoConstructor CTOR = new StrategoConstructor("AmbName", 1);
+	
+	public AmbName(String name) {
+		super(CTOR, new IStrategoTerm[] { new ECJString(name) });
+	}
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/DottedName.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/DottedName.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/DottedName.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/DottedName.java)
@@ -0,0 +1,18 @@
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoAppl;
+import org.spoofax.terms.StrategoConstructor;
+
+public class DottedName extends StrategoAppl {
+    
+    private static final long serialVersionUID = 1L;
+    
+    private final static IStrategoConstructor CTOR = new StrategoConstructor("DottedName", 1);
+	
+	protected DottedName(String name) {
+		super(CTOR, new IStrategoTerm[] { new ECJString(name) });
+	}
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJAnnoWrapper.java)
@@ -0,0 +1,177 @@
+package org.spoofax.interpreter.adapter.ecj;
+
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
+
+public class ECJAnnoWrapper implements IStrategoTerm, IStrategoList,
+        IStrategoAppl, IStrategoInt, IStrategoReal, IStrategoString,
+        IStrategoTuple {
+
+    private static final long serialVersionUID = 1L;
+
+    private final IStrategoTerm wrappee;
+    private final IStrategoList annotations;
+
+    public ECJAnnoWrapper(IStrategoTerm wrappee, IStrategoList annotations) {
+        this.wrappee = wrappee;
+        this.annotations = annotations;
+    }
+
+    @Override
+    public int getStorageType() {
+        return MUTABLE; // does not cache its hashCode() method
+    }
+
+    @Override
+    public IStrategoTerm[] getAllSubterms() {
+        return wrappee.getAllSubterms();
+    }
+
+    @Override
+    public IStrategoList getAnnotations() {
+        return annotations;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return wrappee.getSubterm(index);
+    }
+
+    @Override
+    public int getSubtermCount() {
+        return wrappee.getSubtermCount();
+    }
+
+    @Override
+    public int getTermType() {
+        return wrappee.getTermType();
+    }
+
+    @Override
+    public boolean match(IStrategoTerm second) {
+        return wrappee.match(second)
+                && annotations.match(second.getAnnotations());
+    }
+
+    @Override
+    public void prettyPrint(ITermPrinter pp) {
+        wrappee.prettyPrint(pp);
+        pp.print("{");
+        annotations.prettyPrint(pp);
+        pp.print("}");
+    }
+
+    @Override
+    public IStrategoTerm get(int index) {
+        return ((IStrategoList) wrappee).getSubterm(index);
+    }
+
+    @Override
+    public IStrategoTerm head() {
+        return ((IStrategoList) wrappee).head();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return ((IStrategoList) wrappee).isEmpty();
+    }
+
+    @Override
+    public IStrategoList prepend(IStrategoTerm prefix) {
+        return ((IStrategoList) wrappee).prepend(prefix);
+    }
+
+    @Override
+    public int size() {
+        return ((IStrategoList) wrappee).size();
+    }
+
+    @Override
+    public IStrategoList tail() {
+        return ((IStrategoList) wrappee).tail();
+    }
+
+    @Deprecated
+    public IStrategoTerm[] getArguments() {
+        return ((IStrategoAppl) wrappee).getAllSubterms();
+    }
+
+    @Override
+    public IStrategoConstructor getConstructor() {
+        return ((IStrategoAppl) wrappee).getConstructor();
+    }
+
+    @Override
+    public int intValue() {
+        return ((IStrategoInt) wrappee).intValue();
+    }
+
+    @Override
+    public double realValue() {
+        return ((IStrategoReal) wrappee).realValue();
+    }
+
+    @Override
+    public String stringValue() {
+        return ((IStrategoString) wrappee).stringValue();
+    }
+
+    public IStrategoTerm getWrappee() {
+        return wrappee;
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String getName() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isUniqueValueTerm() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String toString(int maxDepth) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java)
@@ -0,0 +1,3137 @@
+/*
+ * Created on 27. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.jdt.core.ICompilationUnit;
+import org.eclipse.jdt.core.IField;
+import org.eclipse.jdt.core.IJavaElement;
+import org.eclipse.jdt.core.IJavaProject;
+import org.eclipse.jdt.core.IType;
+import org.eclipse.jdt.core.ITypeHierarchy;
+import org.eclipse.jdt.core.ITypeParameter;
+import org.eclipse.jdt.core.dom.*;
+import org.eclipse.jdt.core.dom.InfixExpression.Operator;
+import org.eclipse.jdt.core.dom.Modifier.ModifierKeyword;
+import org.eclipse.jdt.core.dom.PrimitiveType.Code;
+import org.spoofax.DebugUtil;
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoPlaceholder;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+public class ECJFactory implements ITermFactory {
+
+    private static final int ARRAY_ACCESS = 1;
+    private static final int PACKAGE_DECLARATION = 2;
+    private static final int NONE = 3;
+    private static final int BOOLEAN_LITERAL = 4;
+    private static final int BOOLEAN_TYPE = 5;
+    private static final int BREAK_STATEMENT = 6;
+    private static final int CATCH_CLAUSE = 7;
+    private static final int CHARACTER_LITERAL = 8;
+    private static final int CLASS_INSTANCE_CREATION = 9;
+    private static final int ANNOTATION_TYPE_DECLARATION = 10;
+    private static final int ENUM_DECLARATION = 11;
+    private static final int TYPE_DECLARATION = 12;
+    private static final int ANNOTATION_TYPE_MEMBER_DECLARATION = 13;
+    private static final int ENUM_CONSTANT_DECLARATION = 14;
+    private static final int FIELD_DECLARATION = 15;
+    private static final int INITIALIZER = 16;
+    private static final int METHOD_DECLARATION = 17;
+    private static final int BLOCK_COMMENT = 18;
+    private static final int JAVADOC = 19;
+    private static final int LINE_COMMENT = 20;
+    private static final int COMPILATION_UNIT = 21;
+    private static final int MARKER_ANNOTATION = 22;
+    private static final int NORMAL_ANNOTATION = 23;
+    private static final int SINGLE_MEMBER_ANNOTATION = 24;
+    private static final int ARRAY_CREATION = 25;
+    private static final int ARRAY_INITIALIZER = 26;
+    private static final int ASSIGNMENT = 27;
+    private static final int CAST_EXPRESSION = 28;
+    private static final int CONDITIONAL_EXPRESSION = 29;
+    private static final int FIELD_ACCESS = 30;
+    private static final int INFIX_EXPRESSION = 31;
+    private static final int INSTANCEOF_EXPRESSION = 32;
+    private static final int METHOD_INVOCATION = 33;
+    private static final int QUALIFIED_NAME = 34;
+    private static final int SIMPLE_NAME = 35;
+    private static final int NULL_LITERAL = 36;
+    private static final int NUMBER_LITERAL = 37;
+    private static final int PARENTHESIZED_EXPRESSION = 38;
+    private static final int POSTFIX_EXPRESSION = 39;
+    private static final int PREFIX_EXPRESSION = 40;
+    private static final int STRING_LITERAL = 41;
+    private static final int SUPER_FIELD_ACCESS = 42;
+    private static final int THIS_EXPRESSION = 43;
+    private static final int VARIABLE_DECLARATION_EXPRESSION = 44;
+    private static final int IMPORT_DECLARATION = 45;
+    private static final int MEMBER_REF = 46;
+    private static final int MEMBER_VALUE_PAIR = 47;
+    private static final int METHOD_REF = 48;
+    private static final int METHOD_REF_PARAMETER = 49;
+    private static final int MODIFIER = 50;
+    private static final int MODIFIER_KEYWORD = 51;
+    private static final int POSTFIX_EXPRESSION_OPERATOR = 52;
+    private static final int PREFIX_EXPRESSION_OPERATOR = 53;
+    private static final int ASSERT_STATEMENT = 54;
+    private static final int BLOCK = 55;
+    private static final int CONSTRUCTOR_INVOCATION = 56;
+    private static final int CONTINUE_STATEMENT = 57;
+    private static final int DO_STATEMENT = 58;
+    private static final int EMPTY_STATEMENT = 59;
+    private static final int ENHANCED_FOR_STATEMENT = 60;
+    private static final int EXPRESSION_STATEMENT = 61;
+    private static final int FOR_STATEMENT = 62;
+    private static final int IF_STATEMENT = 63;
+    private static final int LABELED_STATEMENT = 64;
+    private static final int RETURN_STATEMENT = 65;
+    private static final int SUPER_CONSTRUCTOR_INVOCATION = 66;
+    private static final int SWITCH_CASE = 67;
+    private static final int SWITCH_STATEMENT = 68;
+    private static final int SYNCHRONIZED_STATEMENT = 69;
+    private static final int THROW_STATEMENT = 70;
+    private static final int TRY_STATEMENT = 71;
+    private static final int TYPE_DECLARATION_STATEMENT = 72;
+    private static final int TYPE_LITERAL = 73;
+    private static final int VARIABLE_DECLARATION_STATEMENT = 74;
+    private static final int WHILE_STATEMENT = 75;
+    private static final int SUPER_METHOD_INVOCATION = 76;
+    private static final int TAG_ELEMENT = 77;
+    private static final int TEXT_ELEMENT = 78;
+    private static final int ARRAY_TYPE = 79;
+    private static final int DOUBLE_TYPE = 80;
+    private static final int FLOAT_TYPE = 81;
+    private static final int INT_TYPE = 82;
+    private static final int LONG_TYPE = 83;
+    private static final int PARAMETERIZED_TYPE = 84;
+    private static final int PRIMITIVE_TYPE = 85;
+    private static final int QUALIFIED_TYPE = 86;
+    private static final int SIMPLE_TYPE = 87;
+    private static final int WILDCARD_TYPE = 88;
+    private static final int TYPE_PARAMETER = 89;
+    private static final int SINGLE_VARIABLE_DECLARATION = 90;
+    private static final int VARIABLE_DECLARATION_FRAGMENT = 91;
+    private static final int BYTE_TYPE = 92;
+    private static final int IMPORT_REFERENCE = 93;
+    private static final int ANONYMOUS_CLASS_DECLARATION = 94;
+    private static final int ASSIGNMENT_OPERATOR = 95;
+	private static ASTMatcher astMatcher;
+        
+    private Map<String,Integer> ctorNameToIndexMap;
+    private AST ast;
+    
+    public ECJFactory(AST ast) {
+        this.ast = ast;
+        initCtorMap();
+    }
+    
+    public ECJFactory() {
+        initCtorMap();
+    }
+    
+    private void initCtorMap() {
+        ctorNameToIndexMap = new HashMap<String,Integer>();
+        ctorNameToIndexMap.put("ArrayAccess", ARRAY_ACCESS);
+        ctorNameToIndexMap.put("PackageDeclaration", PACKAGE_DECLARATION);
+        ctorNameToIndexMap.put("BooleanLiteral", BOOLEAN_LITERAL);
+        ctorNameToIndexMap.put("BooleanType", BOOLEAN_TYPE);
+        ctorNameToIndexMap.put("ByteType", BYTE_TYPE);
+        ctorNameToIndexMap.put("BreakStatement", BREAK_STATEMENT);
+        ctorNameToIndexMap.put("CatchClause", CATCH_CLAUSE);
+        ctorNameToIndexMap.put("CharacterLiteral", CHARACTER_LITERAL);
+        ctorNameToIndexMap.put("ClassInstanceCreation", CLASS_INSTANCE_CREATION);
+        ctorNameToIndexMap.put("AnnotationTypeDeclaration", ANNOTATION_TYPE_DECLARATION);
+        ctorNameToIndexMap.put("EnumDeclaration", ENUM_DECLARATION);
+        ctorNameToIndexMap.put("TypeDeclaration", TYPE_DECLARATION);
+        ctorNameToIndexMap.put("AnnotationTypeMemberDeclaration", ANNOTATION_TYPE_MEMBER_DECLARATION);
+        ctorNameToIndexMap.put("EnumConstantDeclaration", ENUM_CONSTANT_DECLARATION);
+        ctorNameToIndexMap.put("FieldDeclaration", FIELD_DECLARATION);
+        ctorNameToIndexMap.put("Initializer", INITIALIZER);
+        ctorNameToIndexMap.put("MethodDeclaration", METHOD_DECLARATION);
+        ctorNameToIndexMap.put("BlockComment", BLOCK_COMMENT);
+        ctorNameToIndexMap.put("Javadoc", JAVADOC);
+        ctorNameToIndexMap.put("LineComment", LINE_COMMENT);
+        ctorNameToIndexMap.put("CompilationUnit", COMPILATION_UNIT);
+        ctorNameToIndexMap.put("MarkerAnnotation", MARKER_ANNOTATION);
+        ctorNameToIndexMap.put("NormalAnnotation", NORMAL_ANNOTATION);
+        ctorNameToIndexMap.put("SingleMemberAnnotation", SINGLE_MEMBER_ANNOTATION);
+        ctorNameToIndexMap.put("ArrayCreation", ARRAY_CREATION);
+        ctorNameToIndexMap.put("ArrayInitializer", ARRAY_INITIALIZER);
+        ctorNameToIndexMap.put("Assignment", ASSIGNMENT);
+        ctorNameToIndexMap.put("CastExpression", CAST_EXPRESSION);
+        ctorNameToIndexMap.put("ConditionalExpression", CONDITIONAL_EXPRESSION);
+        ctorNameToIndexMap.put("FieldAccess", FIELD_ACCESS);
+        ctorNameToIndexMap.put("InfixExpression", INFIX_EXPRESSION);
+        ctorNameToIndexMap.put("InstanceofExpression", INSTANCEOF_EXPRESSION);
+        ctorNameToIndexMap.put("MethodInvocation", METHOD_INVOCATION);
+        ctorNameToIndexMap.put("QualifiedName", QUALIFIED_NAME);
+        ctorNameToIndexMap.put("SimpleName", SIMPLE_NAME);
+        ctorNameToIndexMap.put("NullLiteral", NULL_LITERAL);
+        ctorNameToIndexMap.put("NumberLiteral", NUMBER_LITERAL);
+        ctorNameToIndexMap.put("ParenthesizedExpression", PARENTHESIZED_EXPRESSION);
+        ctorNameToIndexMap.put("PostfixExpression", POSTFIX_EXPRESSION);
+        ctorNameToIndexMap.put("PrefixExpression", PREFIX_EXPRESSION);
+        ctorNameToIndexMap.put("StringLiteral", STRING_LITERAL);
+        ctorNameToIndexMap.put("SuperFieldAccess", SUPER_FIELD_ACCESS);
+        ctorNameToIndexMap.put("ThisExpression", THIS_EXPRESSION);
+        ctorNameToIndexMap.put("VariableDeclarationExpression", VARIABLE_DECLARATION_EXPRESSION);
+        ctorNameToIndexMap.put("ImportDeclaration", IMPORT_DECLARATION);
+        ctorNameToIndexMap.put("MemberRef", MEMBER_REF);
+        ctorNameToIndexMap.put("MemberValuePair", MEMBER_VALUE_PAIR);
+        ctorNameToIndexMap.put("MethodRef", METHOD_REF);
+        ctorNameToIndexMap.put("MethodRefParameter", METHOD_REF_PARAMETER);
+        ctorNameToIndexMap.put("Modifier", MODIFIER);
+        ctorNameToIndexMap.put("ModifierKeyword", MODIFIER_KEYWORD);
+        ctorNameToIndexMap.put("PackageDeclaration", PACKAGE_DECLARATION);
+        ctorNameToIndexMap.put("PostfixExpressionOperator", POSTFIX_EXPRESSION_OPERATOR);
+        ctorNameToIndexMap.put("PrefixExpressionOperator", PREFIX_EXPRESSION_OPERATOR);
+        ctorNameToIndexMap.put("AssertStatement", ASSERT_STATEMENT);
+        ctorNameToIndexMap.put("Block", BLOCK);
+        ctorNameToIndexMap.put("ConstructorInvocation", CONSTRUCTOR_INVOCATION);
+        ctorNameToIndexMap.put("ContinueStatement", CONTINUE_STATEMENT);
+        ctorNameToIndexMap.put("DoStatement", DO_STATEMENT);
+        ctorNameToIndexMap.put("EmptyStatement", EMPTY_STATEMENT);
+        ctorNameToIndexMap.put("EnhancedForStatement", ENHANCED_FOR_STATEMENT);
+        ctorNameToIndexMap.put("ExpressionStatement", EXPRESSION_STATEMENT);
+        ctorNameToIndexMap.put("ForStatement", FOR_STATEMENT);
+        ctorNameToIndexMap.put("IfStatement", IF_STATEMENT);
+        ctorNameToIndexMap.put("LabeledStatement", LABELED_STATEMENT);
+        ctorNameToIndexMap.put("ReturnStatement", RETURN_STATEMENT);
+        ctorNameToIndexMap.put("SuperConstructorInvocation", SUPER_CONSTRUCTOR_INVOCATION);
+        ctorNameToIndexMap.put("SwitchCase", SWITCH_CASE);
+        ctorNameToIndexMap.put("SwitchStatement", SWITCH_STATEMENT);
+        ctorNameToIndexMap.put("SynchronizedStatement", SYNCHRONIZED_STATEMENT);
+        ctorNameToIndexMap.put("ThrowStatement", THROW_STATEMENT);
+        ctorNameToIndexMap.put("TryStatement", TRY_STATEMENT);
+        ctorNameToIndexMap.put("TypeDeclarationStatement", TYPE_DECLARATION_STATEMENT);
+        ctorNameToIndexMap.put("TypeLiteral", TYPE_LITERAL);
+        ctorNameToIndexMap.put("VariableDeclarationStatement", VARIABLE_DECLARATION_STATEMENT);
+        ctorNameToIndexMap.put("WhileStatement", WHILE_STATEMENT);
+        ctorNameToIndexMap.put("SuperMethodInvocation", SUPER_METHOD_INVOCATION);
+        ctorNameToIndexMap.put("TagElement", TAG_ELEMENT);
+        ctorNameToIndexMap.put("TextElement", TEXT_ELEMENT);
+        ctorNameToIndexMap.put("ArrayType", ARRAY_TYPE);
+        ctorNameToIndexMap.put("DoubleType", DOUBLE_TYPE);
+        ctorNameToIndexMap.put("FloatType", FLOAT_TYPE);
+        ctorNameToIndexMap.put("IntType", INT_TYPE);
+        ctorNameToIndexMap.put("LongType", LONG_TYPE);
+        ctorNameToIndexMap.put("ParameterizedType", PARAMETERIZED_TYPE);
+        ctorNameToIndexMap.put("PrimitiveType", PRIMITIVE_TYPE);
+        ctorNameToIndexMap.put("QualifiedType", QUALIFIED_TYPE);
+        ctorNameToIndexMap.put("SimpleType", SIMPLE_TYPE);
+        ctorNameToIndexMap.put("WildcardType", WILDCARD_TYPE);
+        ctorNameToIndexMap.put("TypeParameter", TYPE_PARAMETER);
+        ctorNameToIndexMap.put("SingleVariableDeclaration", SINGLE_VARIABLE_DECLARATION);
+        ctorNameToIndexMap.put("VariableDeclarationFragment", VARIABLE_DECLARATION_FRAGMENT);
+        ctorNameToIndexMap.put("None", NONE);
+        ctorNameToIndexMap.put("ImportReference", IMPORT_REFERENCE);
+        ctorNameToIndexMap.put("AnonymousClassDeclaration", ANONYMOUS_CLASS_DECLARATION);
+        ctorNameToIndexMap.put("AssignmentOperator", ASSIGNMENT_OPERATOR);
+    }
+    
+    @Override
+    public IStrategoTerm parseFromString(String text) {
+        if(text.equals("()")) {
+            return makeTuple();
+        } else if(text.charAt(0) == '"') {
+            return makeString(text.substring(1).substring(0, text.length() - 2));
+        }
+        throw new NotImplementedException();
+    }
+
+    private List<ASTNode> getAnnotations(IStrategoTerm term) {
+        return ((WrappedASTNodeList)term).getWrappee();
+    }
+
+    private Javadoc getJavadoc(IStrategoTerm term) {
+        return ((WrappedJavadoc)term).getWrappee();
+    }
+    
+    @Override
+    public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
+        throw new NotImplementedException();
+    }
+    
+    @Override
+    public IStrategoTerm annotateTerm(IStrategoTerm term, IStrategoList annotations) {
+    	if(term instanceof ECJAnnoWrapper) {
+    		return new ECJAnnoWrapper(((ECJAnnoWrapper)term).getWrappee(), annotations);
+    	} else {
+    		return new ECJAnnoWrapper(term, annotations);
+    	}
+    }
+
+    @Override
+    public IStrategoAppl makeAppl(IStrategoConstructor ctr, IStrategoTerm... kids) {
+        IStrategoAppl t = constructASTNode(ctr, kids);
+        if(t == null) {
+            if(DebugUtil.isDebugging()) {
+                System.err.println("Generic fallback for:");
+                System.err.println("Construct: " + ctr.getName() + "/" + ctr.getArity() + " with " + kids.length + " kids");
+                for(int i = 0; i < kids.length; i++) {
+                    if(kids[i] instanceof WrappedASTNodeList) {
+                        WrappedASTNodeList l = (WrappedASTNodeList)kids[i];
+                        if(!l.isEmpty()) 
+                            System.err.println("  [" + l.get(0) + "]");
+                        else
+                            System.err.println("  " + l + " - empty");
+                    } else
+                        System.err.println("  " + kids[i]);
+                }
+            }
+            return ctr.instantiate(this, kids);
+        }
+        return t;
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private IStrategoAppl constructASTNode(IStrategoConstructor ctr, IStrategoTerm[] kids) {
+        int index = ctorNameToIndex(ctr);
+        switch(index) {
+        case ANNOTATION_TYPE_DECLARATION: {
+            if((!isJavadoc(kids[0]) && !isNone(kids[0]))
+                    || !isExtendedModifierList(kids[1]) 
+                    || !isSimpleName(kids[2]) 
+                    || !isBodyDeclarationList(kids[3]))
+                return null;
+            AnnotationTypeDeclaration x = ast.newAnnotationTypeDeclaration();
+            if(isNone(kids[0]))
+                x.setJavadoc(null);
+            else
+                x.setJavadoc(asJavadoc(kids[0]));
+            x.modifiers().addAll(asExtendedModifierList(kids[1]));
+            x.setName(asSimpleName(kids[2]));
+            x.bodyDeclarations().addAll(asBodyDeclarationList(kids[3]));
+            return wrap(x);
+        }
+        case ANNOTATION_TYPE_MEMBER_DECLARATION: {
+            if((!isJavadoc(kids[0]) && !isNone(kids[0]))
+                    || !isModifierList(kids[1]) 
+                    || !isType(kids[2]) 
+                    || !isSimpleName(kids[3]) 
+                    || (!isExpression(kids[4]) && !isNone(kids[4])))
+                return null;
+            AnnotationTypeMemberDeclaration x = ast.newAnnotationTypeMemberDeclaration();
+            x.setJavadoc(asJavadoc(kids[0]));
+            x.modifiers().addAll(asModifierList(kids[1]));
+            x.setType(asType(kids[2]));
+            x.setName(asSimpleName(kids[3]));
+            if(isNone(kids[4]))
+                x.setDefault(null);
+            else
+                x.setDefault(asExpression(kids[4]));
+            return wrap(x);
+        }
+        case ANONYMOUS_CLASS_DECLARATION: {
+            if(!isBodyDeclarationList(kids[0]))
+                return null;
+            AnonymousClassDeclaration x = ast.newAnonymousClassDeclaration();
+            x.bodyDeclarations().addAll(asBodyDeclarationList(kids[0]));
+            return wrap(x);
+        }
+        case ARRAY_ACCESS: { 
+            if(!isExpression(kids[0]) || !isExpression(kids[1]))
+                return null;
+            ArrayAccess x = ast.newArrayAccess();
+            x.setArray(asExpression(kids[0]));
+            x.setIndex(asExpression(kids[1]));
+            return wrap(x);
+        }
+        case ARRAY_CREATION: {
+            if(!isArrayType(kids[0]) 
+                    || !isExpressionList(kids[1]) 
+                    || (!isArrayInitializer(kids[2]) && !isNone(kids[2])))
+                return null;
+            ArrayCreation x = ast.newArrayCreation();
+            x.setType(asArrayType(kids[0]));
+            x.dimensions().addAll(asExpressionList(kids[1]));
+            if(isNone(kids[2]))
+                x.setInitializer(null);
+            else
+                x.setInitializer(asArrayInitializer(kids[2]));
+            return wrap(x);
+        }
+        case ARRAY_INITIALIZER: {
+            if(!isExpressionList(kids[0]))
+                return null;
+            ArrayInitializer x = ast.newArrayInitializer();
+            x.expressions().addAll(asExpressionList(kids[0]));
+            return wrap(x);
+        }
+        case ARRAY_TYPE: {
+            if(!isType(kids[0]) 
+                    || !isInt(kids[1]) 
+                    || !isType(kids[2]))
+                return null;
+            ArrayType x = ast.newArrayType(asType(kids[2]), asInt(kids[1]));
+            x.setComponentType(asType(kids[0]));
+            return wrap(x);
+        }
+        case ASSERT_STATEMENT: {
+            if(!isExpression(kids[0]) || !(isExpression(kids[1]) || isNone(kids[1])))
+                return null;
+            AssertStatement x = ast.newAssertStatement();
+            x.setExpression(asExpression(kids[0]));
+            if(isNone(kids[1]))
+            	x.setMessage(null);
+            else 
+            	x.setMessage(asExpression(kids[1]));
+            return wrap(x);
+        }
+        case ASSIGNMENT: {
+            if(!isAssignmentOperator(kids[0])
+            		|| !isExpression(kids[1]) 
+            		|| !isExpression(kids[2]))
+                return null;
+            Assignment x = ast.newAssignment();
+            x.setOperator(asAssignmentOperator(kids[0]));
+            x.setLeftHandSide(asExpression(kids[1]));
+            x.setRightHandSide(asExpression(kids[2]));
+            return wrap(x);
+        }
+        case ASSIGNMENT_OPERATOR: {
+            if(!isString(kids[0]))
+                return null;
+            return wrap(Assignment.Operator.toOperator(asString(kids[0])));
+        }
+        case BLOCK: {
+            if(!isStatementList(kids[0]))
+                return null;
+            Block x = ast.newBlock();
+            x.statements().addAll(asStatementList(kids[0]));
+            return wrap(x);
+        }
+        case BLOCK_COMMENT: {
+            BlockComment x = ast.newBlockComment();
+            return wrap(x);
+        }
+        case BOOLEAN_LITERAL: {
+            if(!isInt(kids[0]))
+                return null;
+            return wrap(ast.newBooleanLiteral(asInt(kids[0]) == 1));
+        }
+        case BOOLEAN_TYPE: {
+            return wrap(ast.newPrimitiveType(PrimitiveType.BOOLEAN));
+        }
+        case BREAK_STATEMENT: {
+            if(!isSimpleName(kids[0]) && !isNone(kids[0]))
+                return null;
+            BreakStatement x = ast.newBreakStatement();
+            if(isNone(kids[0]))
+                x.setLabel(null);
+            else
+                x.setLabel(asSimpleName(kids[0]));
+            return wrap(x);
+        }
+        case BYTE_TYPE: {
+            return wrap(ast.newPrimitiveType(PrimitiveType.BYTE));
+        }
+        case CAST_EXPRESSION: {
+            if(!isType(kids[0]) || !isExpression(kids[1]))
+                return null;
+            CastExpression x = ast.newCastExpression();
+            x.setType(asType(kids[0]));
+            x.setExpression(asExpression(kids[1]));
+            return wrap(x);
+        }
+        case CATCH_CLAUSE: {
+            if(!isSingleVariableDeclaration(kids[0]) || !isBlock(kids[1]))
+                return null;
+            CatchClause x = ast.newCatchClause();
+            x.setException(asSingleVariableDeclaration(kids[0]));
+            x.setBody(asBlock(kids[1]));
+            return wrap(x);
+        }
+        case CHARACTER_LITERAL: {
+            if(!isInt(kids[0]))
+                return null;
+            CharacterLiteral x = ast.newCharacterLiteral();
+            x.setCharValue((char)asInt(kids[0]));
+            return wrap(x);
+        }
+        case CLASS_INSTANCE_CREATION: {
+            if((!isExpression(kids[0]) && !isNone(kids[0])) 
+                    || !isType(kids[1]) 
+                    || (!isAnonymousClassDeclaration(kids[2]) && !isNone(kids[2]))  
+                    || !isExpressionList(kids[3]))
+                return null;
+            ClassInstanceCreation x = ast.newClassInstanceCreation();
+            if(isNone(kids[0])) 
+                x.setExpression(null);
+            else 
+                x.setExpression(asExpression(kids[0]));
+            x.setType(asType(kids[1]));
+            if(isNone(kids[2]))
+                x.setAnonymousClassDeclaration(null);
+            else
+                x.setAnonymousClassDeclaration(asAnonymousClassDeclaration(kids[2]));
+            x.arguments().addAll(asExpressionList(kids[3]));
+            return wrap(x);
+        }
+        case COMPILATION_UNIT: {
+            if((!isPackageDeclaration(kids[0]) && !isNone(kids[0])) 
+                    || !isImportDeclarationList(kids[1]) 
+                    || !isAbstractTypeDeclarationList(kids[2]))
+                return null;
+            CompilationUnit x = ast.newCompilationUnit();
+            if(isNone(kids[0]))
+                x.setPackage(null);
+            else 
+                x.setPackage(asPackageDeclaration(kids[0]));
+            x.imports().addAll(asImportDeclarationList(kids[1]));
+            x.types().addAll(asAbstractTypeDeclarationList(kids[2]));
+            return wrap(x);
+        }
+        case CONDITIONAL_EXPRESSION: {
+            if(!isExpression(kids[0]) 
+                    || !isExpression(kids[1]) 
+                    || !isExpression(kids[2]))
+                return null;
+            ConditionalExpression x = ast.newConditionalExpression();
+            x.setExpression(asExpression(kids[0]));
+            x.setThenExpression(asExpression(kids[1]));
+            x.setElseExpression(asExpression(kids[2]));
+            return wrap(x);
+        }
+        case CONSTRUCTOR_INVOCATION: {
+            if(!isExpressionList(kids[0]))
+                return null;
+            ConstructorInvocation x = ast.newConstructorInvocation();
+            x.arguments().addAll(asExpressionList(kids[0]));
+            return wrap(x);
+        }
+        case CONTINUE_STATEMENT: {
+            if(!isSimpleName(kids[0]) && !isNone(kids[0]))
+                return null;
+            ContinueStatement x = ast.newContinueStatement();
+            if(isNone(kids[0]))
+                x.setLabel(null);
+            else
+                x.setLabel(asSimpleName(kids[0]));
+            return wrap(x);
+        }
+        case DO_STATEMENT: {
+            DoStatement x = ast.newDoStatement();
+            x.setExpression(asExpression(kids[0]));
+            x.setBody(asStatement(kids[1]));
+            return wrap(x);
+        }
+        case DOUBLE_TYPE: {
+            return wrap(ast.newPrimitiveType(PrimitiveType.DOUBLE));
+        }
+        case EMPTY_STATEMENT: {
+            return wrap(ast.newEmptyStatement());
+        }
+        case ENHANCED_FOR_STATEMENT: {
+            if(!isSingleVariableDeclaration(kids[0]) 
+                    || !isExpression(kids[1])
+                    || !isStatement(kids[2]))
+                return null;
+            EnhancedForStatement x = ast.newEnhancedForStatement();
+            x.setParameter(asSingleVariableDeclaration(kids[0]));
+            x.setExpression(asExpression(kids[1]));
+            x.setBody(asStatement(kids[2]));
+            return wrap(x);
+        }
+        case ENUM_CONSTANT_DECLARATION: {
+            if((!isJavadoc(kids[0]) && !isNone(kids[0]))
+                    || !isModifierList(kids[1]) 
+                    || !isSimpleName(kids[2]) 
+                    || !isExpressionList(kids[3]) 
+                    || !isAnonymousClassDeclaration(kids[4]))
+                return null;
+            EnumConstantDeclaration x = ast.newEnumConstantDeclaration();
+            if(isNone(kids[0]))
+                x.setJavadoc(null);
+            else
+                x.setJavadoc(asJavadoc(kids[0]));
+            x.modifiers().addAll(asModifierList(kids[1]));
+            x.setName(asSimpleName(kids[2]));
+            x.arguments().addAll(asExpressionList(kids[3]));
+            x.setAnonymousClassDeclaration(asAnonymousClassDeclaration(kids[4]));
+            return wrap(x);
+        }
+        case ENUM_DECLARATION: {
+            if((!isJavadoc(kids[0]) && !isNone(kids[0]))
+                    || !isModifierList(kids[1])
+                    || !isSimpleName(kids[2])
+                    || !isTypeList(kids[3])
+                    || !isEnumConstantDeclarationList(kids[4])
+                    || !isBodyDeclarationList(kids[5]))
+                return null;
+            EnumDeclaration x = ast.newEnumDeclaration();
+            if(isNone(kids[0]))
+                x.setJavadoc(null);
+            else
+                x.setJavadoc(asJavadoc(kids[0]));
+            x.modifiers().addAll(asModifierList(kids[1]));
+            x.setName(asSimpleName(kids[2]));
+            x.superInterfaceTypes().addAll(asTypeList(kids[3]));
+            x.enumConstants().addAll(asEnumConstantDeclarationList(kids[4]));
+            x.bodyDeclarations().addAll(asBodyDeclarationList(kids[5]));
+            return wrap(x);
+        }
+        case EXPRESSION_STATEMENT: {
+            if(!isExpression(kids[0]))
+                return null;
+            return wrap(ast.newExpressionStatement(asExpression(kids[0])));
+        }
+        case FIELD_ACCESS: {
+            if(!isExpression(kids[0]) || !isSimpleName(kids[1]))
+                return null;
+            FieldAccess x = ast.newFieldAccess();
+            x.setExpression(asExpression(kids[0]));
+            x.setName(asSimpleName(kids[1]));
+            return wrap(x);
+        }
+        case FIELD_DECLARATION: {
+            if((!isJavadoc(kids[0]) && !isNone(kids[0]))
+                    || !isModifierList(kids[1])
+                    || !isType(kids[2])
+                    || !isNonEmptyVariableDeclarationFragmentList(kids[3]))
+                return null;
+            List y = asFragmentList(kids[3]);
+            FieldDeclaration x = ast.newFieldDeclaration((VariableDeclarationFragment)y.remove(0));
+            if(isNone(kids[0]))
+                x.setJavadoc(null);
+            else
+                x.setJavadoc(asJavadoc(kids[0]));
+            x.modifiers().addAll(asModifierList(kids[1]));
+            x.setType(asType(kids[2]));
+            x.fragments().addAll(y);
+            return wrap(x);
+        }
+        case FLOAT_TYPE: {
+            return wrap(ast.newPrimitiveType(PrimitiveType.FLOAT));
+        }
+        case FOR_STATEMENT: {
+            if(!isExpressionList(kids[0]) 
+                    || (!isExpression(kids[1]) && !isNone(kids[1]))
+                    || !isExpressionList(kids[2])
+                    || !isStatement(kids[3]))
+                return null;
+            ForStatement x = ast.newForStatement();
+            x.initializers().addAll(asExpressionList(kids[0]));
+            if(isNone(kids[1]))
+                x.setExpression(null);
+            else
+                x.setExpression(asExpression(kids[1]));
+            x.updaters().addAll(asExpressionList(kids[2]));
+            x.setBody(asStatement(kids[3]));
+            return wrap(x);
+        }
+        case IF_STATEMENT: {
+            if(!isExpression(kids[0])
+                    || !isStatement(kids[1])
+                    || (!isStatement(kids[2]) && !isNone(kids[2])))
+                return null;
+            IfStatement x = ast.newIfStatement();
+            x.setExpression(asExpression(kids[0]));
+            x.setThenStatement(asStatement(kids[1]));
+            if(isNone(kids[2]))
+                x.setElseStatement(null);
+            else
+                x.setElseStatement(asStatement(kids[2]));
+            return wrap(x);
+        }
+        case IMPORT_DECLARATION: {
+            if(!isName(kids[0]) && !isInt(kids[1]) && !isInt(kids[2]))
+                return null;
+            ImportDeclaration x = ast.newImportDeclaration();
+            x.setName(asName(kids[0]));
+            x.setStatic(((IStrategoInt)kids[1]).intValue() > 0);
+            x.setOnDemand(((IStrategoInt)kids[2]).intValue() > 0);
+            return wrap(x);
+        }
+        case INFIX_EXPRESSION: {
+            if(!isOperator(kids[0])
+                    || !isExpression(kids[1])
+                    || !isExpression(kids[2])
+                    || !isExpressionList(kids[3]))
+                return null;
+            InfixExpression x = ast.newInfixExpression();
+            x.setOperator(asOperator(kids[0]));
+            x.setLeftOperand(asExpression(kids[1]));
+            x.setRightOperand(asExpression(kids[2]));
+            x.extendedOperands().addAll(asExpressionList(kids[3]));
+            return wrap(x);
+        }
+        case INITIALIZER: {
+            if(!isBlock(kids[0]))
+                return null;
+            Initializer x = ast.newInitializer();
+            x.setBody(asBlock(kids[0]));
+            return wrap(x);
+            
+        }
+        case INSTANCEOF_EXPRESSION: {
+            if(!isExpression(kids[0])
+                    || !isType(kids[1]))
+                return null;
+            InstanceofExpression x = ast.newInstanceofExpression();
+            x.setLeftOperand(asExpression(kids[0]));
+            x.setRightOperand(asType(kids[1]));
+            return wrap(x);
+        }
+        case INT_TYPE: {
+            return wrap(ast.newPrimitiveType(PrimitiveType.INT));
+        }
+        case JAVADOC: {
+            if(!isTagElementList(kids[0]))
+                return null;
+            Javadoc x = ast.newJavadoc();
+            x.tags().addAll(asTagElementList(kids[0]));
+            return wrap(x);
+        }
+        case LABELED_STATEMENT: {
+            if(!isSimpleName(kids[0]) 
+                    || !isStatement(kids[1]))
+                return null;
+            LabeledStatement x = ast.newLabeledStatement();
+            x.setLabel(asSimpleName(kids[0]));
+            x.setBody(asStatement(kids[1]));
+            return wrap(x);
+        }
+        case LINE_COMMENT: {
+            LineComment x = ast.newLineComment();
+            return wrap(x);
+        }
+        case LONG_TYPE: {
+            return wrap(ast.newPrimitiveType(PrimitiveType.INT));
+        }
+        case MARKER_ANNOTATION: {
+            if(!isName(kids[0]))
+                return null;
+            MarkerAnnotation x = ast.newMarkerAnnotation();
+            x.setTypeName(asName(kids[0]));
+            return wrap(x);
+            
+        }
+        case MEMBER_REF: {
+            if(!isSimpleName(kids[0]) || !isName(kids[1]))
+                return null;
+            MemberRef x = ast.newMemberRef();
+            x.setName(asSimpleName(kids[0]));
+            x.setQualifier(asName(kids[1]));
+            return wrap(x);
+        }
+        case MEMBER_VALUE_PAIR: {
+            if(!isSimpleName(kids[0]) || !isExpression(kids[1]))
+                return null;
+            MemberValuePair x = ast.newMemberValuePair();
+            x.setName(asSimpleName(kids[0]));
+            x.setValue(asExpression(kids[1]));
+            return wrap(x);
+        }
+        case METHOD_DECLARATION: {
+            if((!isJavadoc(kids[0]) && !isNone(kids[0]))
+                    || !isExtendedModifierList(kids[1])
+                    || (!isType(kids[2]) && !isNone(kids[2]))
+                    || !isTypeParameterList(kids[3])
+                    || !isSimpleName(kids[4])
+                    || !isSingleVariableDeclarationList(kids[5])
+                    || !isNameList(kids[6])
+                    || (!isBlock(kids[7]) && !isNone(kids[7])))
+                return null;
+            MethodDeclaration x = ast.newMethodDeclaration();
+            if(isNone(kids[0]))
+                x.setJavadoc(null);
+            else
+                x.setJavadoc(asJavadoc(kids[0]));
+            x.modifiers().addAll(asExtendedModifierList(kids[1]));
+            if(isNone(kids[2])) {
+                x.setReturnType2(null);
+                x.setConstructor(true);
+            } else
+                x.setReturnType2(asType(kids[2]));
+            x.typeParameters().addAll(asTypeParameterList(kids[3]));
+            x.setName(asSimpleName(kids[4]));
+            x.parameters().addAll(asSingleVariableDeclarationList(kids[5]));
+            x.thrownExceptions().addAll(asNameList(kids[6]));
+            if(isNone(kids[7]))
+                x.setBody(null);
+            else
+                x.setBody(asBlock(kids[7]));
+            return wrap(x);
+        }
+        case METHOD_INVOCATION: {
+            if((!isExpression(kids[0]) && !isNone(kids[0]))
+                    || !isSimpleName(kids[1])
+                    || !isTypeList(kids[2])
+                    || !isExpressionList(kids[3]))
+                return null;
+            MethodInvocation x = ast.newMethodInvocation();
+            if(isNone(kids[0]))
+                x.setExpression(null);
+            else 
+                x.setExpression(asExpression(kids[0]));
+            x.setName(asSimpleName(kids[1]));
+            x.typeArguments().addAll(asTypeList(kids[2]));
+            x.arguments().addAll(asExpressionList(kids[3]));
+            return wrap(x);
+        }
+        case METHOD_REF: {
+            if(!isSimpleName(kids[0])
+                    || !isName(kids[1])
+                    || !isMethodRefParameterList(kids[2]))
+                return null;
+            MethodRef x = ast.newMethodRef();
+            x.setName(asSimpleName(kids[0]));
+            x.setQualifier(asName(kids[1]));
+            x.parameters().addAll(asMethodRefParameterList(kids[2]));
+            return wrap(x);
+        }
+        case METHOD_REF_PARAMETER: {
+            if(!isType(kids[0])
+                    || !(isSimpleName(kids[1]) || isNone(kids[1])))
+                return null;
+            MethodRefParameter x = ast.newMethodRefParameter();
+            x.setType(asType(kids[0]));
+            if(isNone(kids[1]))
+            	x.setName(null);
+            else
+            	x.setName(asSimpleName(kids[1]));
+            return wrap(x);
+        }
+        case MODIFIER: {
+            if(!isModifierKeyword(kids[0]))
+                return null;
+            return wrap(ast.newModifier(asModifierKeyword(kids[0])));
+        }
+        case MODIFIER_KEYWORD: {
+            if(!isInt(kids[0]))
+                return null;
+            return wrap(Modifier.ModifierKeyword.fromFlagValue(asInt(kids[0])));
+        }
+        case NONE:
+            return None.INSTANCE;
+        case NORMAL_ANNOTATION: {
+            if(!isName(kids[0]) || !isMemberValuePairList(kids[1]))
+                return null;
+            NormalAnnotation x = ast.newNormalAnnotation();
+            x.setTypeName(asName(kids[0]));
+            x.values().addAll(asMemberValuePairList(kids[1]));
+            return wrap(x);
+        }
+        case NULL_LITERAL: {
+            return wrap(ast.newNullLiteral());
+        }
+        case NUMBER_LITERAL: {
+            if(!isString(kids[0]))
+                return null;
+            return wrap(ast.newNumberLiteral(asString(kids[0])));
+        }
+        case PACKAGE_DECLARATION: {
+            if((!isJavadoc(kids[0]) && !isNone(kids[0]))
+                    || !isAnnotations(kids[1])
+                    || !isName(kids[2]))
+                return null;
+            
+            PackageDeclaration pd = ast.newPackageDeclaration();
+            if(isNone(kids[0]))
+                pd.setJavadoc(null);
+            else
+                pd.setJavadoc(getJavadoc(kids[0]));
+            pd.annotations().addAll(getAnnotations(kids[1]));
+            pd.setName(asName(kids[2]));
+            return wrap(pd);
+        }
+        case PARAMETERIZED_TYPE: {
+            if(!isType(kids[0]) || !isTypeList(kids[1]))
+                return null;
+            ParameterizedType x = ast.newParameterizedType(asType(kids[0]));
+            x.typeArguments().addAll(asTypeList(kids[1]));
+            return wrap(x);
+        }
+        case PARENTHESIZED_EXPRESSION: {
+            if(!isExpression(kids[0]))
+                return null;
+            ParenthesizedExpression x = ast.newParenthesizedExpression();
+            x.setExpression(asExpression(kids[0]));
+            return wrap(x);
+        }
+        case POSTFIX_EXPRESSION: {
+            if(!isPostfixOperator(kids[0]) || !isExpression(kids[1]))
+                return null;
+            PostfixExpression x = ast.newPostfixExpression();
+            x.setOperator(asPostfixOperator(kids[0]));
+            x.setOperand(asExpression(kids[1]));
+            return wrap(x);
+        }
+        case POSTFIX_EXPRESSION_OPERATOR: {
+            if(!isString(kids[0]))
+                return null;
+            return wrap(PostfixExpression.Operator.toOperator(asString(kids[0])));
+        }
+        case PREFIX_EXPRESSION: {
+            if(!isPrefixOperator(kids[0]) || !isExpression(kids[1]))
+                return null;
+            PrefixExpression x = ast.newPrefixExpression();
+            x.setOperator(asPrefixOperator(kids[0]));
+            x.setOperand(asExpression(kids[1]));
+            return wrap(x);
+        }
+        case PREFIX_EXPRESSION_OPERATOR: {
+            if(!isString(kids[0]))
+                return null;
+            return wrap(PrefixExpression.Operator.toOperator(asString(kids[0])));
+        }
+        case PRIMITIVE_TYPE: {
+            if(!isString(kids[0]))
+                return null;
+            return wrap(ast.newPrimitiveType(asTypeCode(kids[0])));
+        }
+        case QUALIFIED_NAME: {
+            if(!isName(kids[0]) || !isSimpleName(kids[1]))
+                return null;
+            return wrap(ast.newQualifiedName(asName(kids[0]), asSimpleName(kids[1])));
+        }
+        case QUALIFIED_TYPE: {
+            if(!isType(kids[0]) || !isSimpleName(kids[1]))
+                return null;
+            return wrap(ast.newQualifiedType(asType(kids[0]), asSimpleName(kids[1])));
+        }
+        case RETURN_STATEMENT: {
+            if(!(isExpression(kids[0]) || isNone(kids[0])))
+                return null;
+            ReturnStatement x = ast.newReturnStatement();
+            if(isNone(kids[0]))
+            	x.setExpression(null);
+            else 
+            	x.setExpression(asExpression(kids[0]));
+            return wrap(x);
+        }
+        case SIMPLE_NAME: {
+            if(!isString(kids[0]))
+                return null;
+            return wrap(ast.newSimpleName(asString(kids[0])));
+        }
+        case SIMPLE_TYPE: {
+            if(!isName(kids[0]))
+                return null;
+            return wrap(ast.newSimpleType(asName(kids[0])));
+        }
+        case SINGLE_MEMBER_ANNOTATION: {
+            if(!isName(kids[0]) || !isExpression(kids[1]))
+                return null;
+            SingleMemberAnnotation x = ast.newSingleMemberAnnotation();
+            x.setTypeName(asName(kids[0]));
+            x.setValue(asExpression(kids[1]));
+            return wrap(x);
+        }
+        case SINGLE_VARIABLE_DECLARATION: {
+            if(!isModifierList(kids[0])
+                    || !isType(kids[1])
+                    || !isName(kids[2])
+                    || !isInt(kids[3])
+                    || (!isExpression(kids[4]) && !isNone(kids[4])))
+                return null;
+            SingleVariableDeclaration x = ast.newSingleVariableDeclaration();
+            x.modifiers().addAll(asModifierList(kids[0]));
+            x.setType(asType(kids[1]));
+            x.setName(asSimpleName(kids[2]));
+            x.setExtraDimensions(asInt(kids[3]));
+            if(isNone(kids[4])) 
+                x.setInitializer(null);
+            else
+                x.setInitializer(asExpression(kids[4]));
+            return wrap(x);
+        }
+        case STRING_LITERAL: {
+            if(!isString(kids[0]))
+                return null;
+            StringLiteral x = ast.newStringLiteral();
+            x.setLiteralValue(asString(kids[0]));
+            return wrap(x);
+        }
+        case SUPER_CONSTRUCTOR_INVOCATION: {
+            if((!isExpression(kids[0]) && !isNone(kids[0])) 
+                    || !isTypeList(kids[1]) 
+                    || !isExpressionList(kids[2]))
+                return null;
+            SuperConstructorInvocation x = ast.newSuperConstructorInvocation();
+            if(isNone(kids[0]))
+                x.setExpression(null);
+            else
+                x.setExpression(asExpression(kids[0]));
+            x.typeArguments().addAll(asTypeList(kids[1]));
+            x.arguments().addAll(asExpressionList(kids[2]));
+            return wrap(x);
+        }
+        case SUPER_FIELD_ACCESS: {
+            if((!isName(kids[0]) && !isNone(kids[0])) 
+                    || !isSimpleName(kids[1]))
+                return null;
+            SuperFieldAccess x = ast.newSuperFieldAccess();
+            if(isNone(kids[0]))
+                x.setQualifier(null);
+            else
+                x.setQualifier(asName(kids[0]));
+            x.setName(asSimpleName(kids[1]));
+            return wrap(x);
+        }
+        case SUPER_METHOD_INVOCATION: {
+            if((!isName(kids[0]) && !isNone(kids[0])) 
+                    || !isTypeList(kids[1])
+                    || !isSimpleName(kids[2])
+                    || !isExpressionList(kids[3]))
+                return null;
+            SuperMethodInvocation x = ast.newSuperMethodInvocation();
+            if(isNone(kids[0]))
+                x.setQualifier(null);
+            else
+                x.setQualifier(asName(kids[0]));
+            x.typeArguments().addAll(asTypeList(kids[1]));
+            x.setName(asSimpleName(kids[2]));
+            x.arguments().addAll(asExpressionList(kids[3]));
+            return wrap(x);
+        }
+        case SWITCH_CASE: {
+            if(!isExpression(kids[0]) && !isNone(kids[0]))
+                return null;
+            SwitchCase x = ast.newSwitchCase();
+            if(isNone(kids[0]))
+                x.setExpression(null);
+            else
+                x.setExpression(asExpression(kids[0]));
+            return wrap(x);
+        }
+        case SWITCH_STATEMENT: {
+            if(!isExpression(kids[0])
+                    || !isStatementList(kids[1]))
+                return null;
+            SwitchStatement x = ast.newSwitchStatement();
+            x.setExpression(asExpression(kids[0]));
+            x.statements().addAll(asStatementList(kids[1]));
+            return wrap(x);
+        }
+        case SYNCHRONIZED_STATEMENT: {
+            if(!isExpression(kids[0])
+                    || !isBlock(kids[1]))
+                return null;
+            SynchronizedStatement x = ast.newSynchronizedStatement();
+            x.setExpression(asExpression(kids[0]));
+            x.setBody(asBlock(kids[1]));
+            return wrap(x);
+        }
+        case TAG_ELEMENT: {
+            if((!isString(kids[0]) && !isNone(kids[0])) 
+                    || !isASTNodeList(kids[1]))
+                return null;
+            TagElement x = ast.newTagElement();
+            if(isNone(kids[0]))
+                x.setTagName(null);
+            else 
+                x.setTagName(asString(kids[0]));
+            x.fragments().addAll(asASTNodeList(kids[1]));
+            return wrap(x);
+        }
+        case TEXT_ELEMENT: {
+            if(!isString(kids[0]))
+                return null;
+            TextElement x = ast.newTextElement();
+            x.setText(asString(kids[0]));
+            return wrap(x);
+        }
+        case THIS_EXPRESSION: {
+            if(!isName(kids[0]) && !isNone(kids[0]))
+                return null;
+            ThisExpression x = ast.newThisExpression();
+            if(isNone(kids[0]))
+                x.setQualifier(null);
+            else 
+                x.setQualifier(asName(kids[0]));
+            return wrap(x);
+        }
+        case THROW_STATEMENT: {
+            if(!isExpression(kids[0]))
+                return null;
+            ThrowStatement x = ast.newThrowStatement();
+            x.setExpression(asExpression(kids[0]));
+            return wrap(x);
+        }
+        case TRY_STATEMENT: {
+            if(!isBlock(kids[0]) 
+                    || !isCatchClauseList(kids[1]) 
+                    || (!isBlock(kids[2]) && !isNone(kids[2])))
+                return null;
+            TryStatement x = ast.newTryStatement();
+            x.setBody(asBlock(kids[0]));
+            x.catchClauses().addAll(asCatchClauseList(kids[1]));
+            if(isNone(kids[2]))
+                x.setFinally(null);
+            else 
+                x.setFinally(asBlock(kids[2]));
+            return wrap(x);
+        }
+        case TYPE_DECLARATION: {
+            if((!isJavadoc(kids[0]) && !isNone(kids[0]))
+                    || !isModifierList(kids[1])
+                    || !isSimpleName(kids[2])
+                    || !isTypeParameterList(kids[3])
+                    || (!isType(kids[4]) && !isNone(kids[4]))
+                    || !isTypeList(kids[5])
+                    || !isBodyDeclarationList(kids[6])
+                    || !isInt(kids[7]))
+                return null;
+            TypeDeclaration x = ast.newTypeDeclaration();
+            if(isNone(kids[0]))
+                x.setJavadoc(null);
+            else
+                x.setJavadoc(asJavadoc(kids[0]));
+            x.modifiers().addAll(asModifierList(kids[1]));
+            x.setName(asSimpleName(kids[2]));
+            x.typeParameters().addAll(asTypeParameterList(kids[3]));
+            if(isNone(kids[4])) 
+                x.setSuperclassType(null);
+            else 
+                x.setSuperclassType(asType(kids[4]));
+            x.superInterfaceTypes().addAll(asTypeList(kids[5]));
+            x.bodyDeclarations().addAll(asBodyDeclarationList(kids[6]));
+            x.setInterface(asInt(kids[7]) == 1);
+            return wrap(x);
+        }
+        case TYPE_DECLARATION_STATEMENT: {
+            if(!isTypeDecl(kids[0]))
+                return null;
+            return wrap(ast.newTypeDeclarationStatement(asTypeDecl(kids[0])));
+        }
+        case TYPE_LITERAL: {
+            if(!isType(kids[0]))
+                return null;
+            TypeLiteral x = ast.newTypeLiteral();
+            x.setType(asType(kids[0]));
+            return wrap(x);
+        }
+        case TYPE_PARAMETER: {
+            if(!isSimpleName(kids[0]) || !isTypeList(kids[1]))
+                return null;
+            TypeParameter x = ast.newTypeParameter();
+            x.setName(asSimpleName(kids[0]));
+            x.typeBounds().addAll(asTypeList(kids[1]));
+            return wrap(x);
+        }
+        case VARIABLE_DECLARATION_EXPRESSION: {
+            if(!isModifierList(kids[0]) 
+                    || !isType(kids[1]) 
+                    || !isNonEmptyVariableDeclarationFragmentList(kids[2]))
+                return null;
+            List y = asFragmentList(kids[2]);
+            VariableDeclarationExpression x = ast.newVariableDeclarationExpression((VariableDeclarationFragment)y.remove(0));
+            x.modifiers().addAll(asModifierList(kids[0]));
+            x.setType(asType(kids[1]));
+            x.fragments().addAll(y);
+            return wrap(x);
+        }
+        case VARIABLE_DECLARATION_FRAGMENT: {
+            if(!isSimpleName(kids[0]) 
+                    || !isInt(kids[1]) 
+                    || (!isExpression(kids[2]) && !isNone(kids[2])))
+                return null;
+            VariableDeclarationFragment x = ast.newVariableDeclarationFragment();
+            x.setName(asSimpleName(kids[0]));
+            x.setExtraDimensions(asInt(kids[1]));
+            if(isNone(kids[2]))
+                x.setInitializer(null);
+            else
+                x.setInitializer(asExpression(kids[2]));
+            return wrap(x);
+        }
+        case VARIABLE_DECLARATION_STATEMENT: {
+            if(!isModifierList(kids[0]) 
+                    || !isType(kids[1]) 
+                    || !isNonEmptyVariableDeclarationFragmentList(kids[2]))
+                return null;
+            List y = asFragmentList(kids[2]);
+            VariableDeclarationStatement x = ast.newVariableDeclarationStatement((VariableDeclarationFragment)y.remove(0));
+            x.modifiers().addAll(asModifierList(kids[0]));
+            x.setType(asType(kids[1]));
+            x.fragments().addAll(y);
+            return wrap(x);
+        }
+        case WHILE_STATEMENT: {
+            if(!isExpression(kids[0]) || !isStatement(kids[1]))
+                return null;
+            WhileStatement x = ast.newWhileStatement();
+            x.setExpression(asExpression(kids[0]));
+            x.setBody(asStatement(kids[1]));
+            return wrap(x);
+        }
+        case WILDCARD_TYPE: {
+            if(!isType(kids[0]) && !isNone(kids[0]))
+                return null;
+            WildcardType x = ast.newWildcardType();
+            if(isNone(kids[0]))
+                x.setBound(null);
+            else
+                x.setBound(asType(kids[0]));
+            return wrap(x);
+        }
+        default:
+            return null;
+        }
+    }
+
+    private Javadoc asJavadoc(IStrategoTerm term) {
+        Javadoc x = ((WrappedJavadoc)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (Javadoc)ASTNode.copySubtree(ast, x);
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asExtendedModifierList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asExtendedModifier(k));
+        }
+        return r;    
+    }
+
+    private IExtendedModifier asExtendedModifier(IStrategoTerm term) {
+    	final IExtendedModifier x = ((IWrappedExtendedModifier)term).getModifierWrappee();
+    	final ASTNode an = ((ASTNode)x);
+    	if(an.getParent() == null && an.getAST() == ast)
+    		return x;
+    	else 
+    		return (IExtendedModifier)ASTNode.copySubtree(ast, an);
+    }
+
+    private boolean isExtendedModifierList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            if(list.size() > 0) 
+                return isExtendedModifier(list.head());
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isExtendedModifier(IStrategoTerm term) {
+        return term instanceof IWrappedExtendedModifier;
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asTypeParameterList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asTypeParameter(k));
+        }
+        return r;    
+    }
+
+    private TypeParameter asTypeParameter(IStrategoTerm term) {
+        TypeParameter x = ((WrappedTypeParameter)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (TypeParameter)ASTNode.copySubtree(ast, x);
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asTagElementList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asTagElement(k));
+        }
+        return r;    
+    }
+
+
+    private TagElement asTagElement(IStrategoTerm term) {
+    	TagElement x = ((WrappedTagElement)term).getWrappee(); 
+        return x.getParent() == null && x.getAST() == ast ? x : (TagElement)ASTNode.copySubtree(ast, x);
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asAbstractTypeDeclarationList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asAbstractTypeDeclaration(k));
+        }
+        return r;    
+        
+    }
+
+    private Operator asOperator(IStrategoTerm term) {
+        String s = ((IStrategoString)term).stringValue();
+        return InfixExpression.Operator.toOperator(s);
+    }
+
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asNameList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asName(k));
+        }
+        return r;    
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asSingleVariableDeclarationList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asSingleVariableDeclaration(k));
+        }
+        return r;    
+    }
+
+    private AbstractTypeDeclaration asAbstractTypeDeclaration(IStrategoTerm term) {
+        AbstractTypeDeclaration x = ((WrappedAbstractTypeDeclaration)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (AbstractTypeDeclaration)ASTNode.copySubtree(ast, x);
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asMethodRefParameterList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asMethodRefParameter(k));
+        }
+        return r;    
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asImportDeclarationList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asImportDeclaration(k));
+        }
+        return r;    
+    }
+
+    private ImportDeclaration asImportDeclaration(IStrategoTerm term) {
+        ImportDeclaration x = ((WrappedImportDeclaration)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (ImportDeclaration)ASTNode.copySubtree(ast, x);
+    }
+
+    private PackageDeclaration asPackageDeclaration(IStrategoTerm term) {
+        PackageDeclaration x = ((WrappedPackageDeclaration)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (PackageDeclaration)ASTNode.copySubtree(ast, x);
+    }
+
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asEnumConstantDeclarationList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asEnumConstantDeclaration(k));
+        }
+        return r;    
+    }
+
+    private EnumConstantDeclaration asEnumConstantDeclaration(IStrategoTerm term) {
+        EnumConstantDeclaration x = ((WrappedEnumConstantDeclaration)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (EnumConstantDeclaration)ASTNode.copySubtree(ast, x);
+    }
+
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asASTNodeList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asASTNode(k));
+        }
+        return r;    
+    }
+
+    private ASTNode asASTNode(IStrategoTerm term) {
+        ASTNode x = ((WrappedASTNode)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : ASTNode.copySubtree(ast, x);
+    }
+
+    private MethodRefParameter asMethodRefParameter(IStrategoTerm term) {
+        MethodRefParameter x = ((WrappedMethodRefParameter)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (MethodRefParameter)ASTNode.copySubtree(ast, x);
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asMemberValuePairList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asMemberValuePair(k));
+        }
+        return r;    
+    }
+
+    private MemberValuePair asMemberValuePair(IStrategoTerm term) {
+        MemberValuePair x = ((WrappedMemberValuePair)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (MemberValuePair)ASTNode.copySubtree(ast, x);
+    }
+
+    private Code asTypeCode(IStrategoTerm term) {
+        return PrimitiveType.toCode(((IStrategoString)term).stringValue());
+    }
+
+    private ModifierKeyword asModifierKeyword(IStrategoTerm term) {
+        return ((WrappedModifierKeyword)term).getWrappee();
+    }
+
+    private Name asName(IStrategoTerm term) {
+        Name x = ((WrappedName)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (Name)ASTNode.copySubtree(ast, x);
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asCatchClauseList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asCatchClause(k));
+        }
+        return r;    
+    }
+
+    private AbstractTypeDeclaration asTypeDecl(IStrategoTerm term) {
+        AbstractTypeDeclaration x = ((WrappedAbstractTypeDeclaration)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (AbstractTypeDeclaration)ASTNode.copySubtree(ast, x);
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private List asFragmentList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asVariableDeclarationFragment(k));
+        }
+        return r;    
+    }
+
+    private ArrayInitializer asArrayInitializer(IStrategoTerm term) {
+        ArrayInitializer x = ((WrappedArrayInitializer)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (ArrayInitializer)ASTNode.copySubtree(ast, x);
+    }
+
+    private ArrayType asArrayType(IStrategoTerm term) {
+        ArrayType x = ((WrappedArrayType)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (ArrayType)ASTNode.copySubtree(ast, x);
+    }
+
+    private Type asType(IStrategoTerm term) {
+        Type x = ((WrappedType)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (Type)ASTNode.copySubtree(ast, x);
+    }
+
+    private SingleVariableDeclaration asSingleVariableDeclaration(IStrategoTerm term) {
+        SingleVariableDeclaration x = ((WrappedSingleVariableDeclaration)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (SingleVariableDeclaration)ASTNode.copySubtree(ast, x);
+    }
+
+    private Block asBlock(IStrategoTerm term) {
+        Block x = ((WrappedBlock)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (Block)ASTNode.copySubtree(ast, x);
+    }
+
+    private PrefixExpression.Operator asPrefixOperator(IStrategoTerm term) {
+        return ((WrappedPrefixExpressionOperator)term).getWrappee();
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asTypeList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asType(k));
+        }
+        return r;    
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asBodyDeclarationList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asBodyDeclaration(k));
+        }
+        return r;
+    }
+
+    private Expression asExpression(IStrategoTerm term) {
+        Expression x = ((WrappedExpression) term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (Expression)ASTNode.copySubtree(ast, x);
+    }
+
+    private int asInt(IStrategoTerm term) {
+        return ((IStrategoInt)term).intValue();
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asExpressionList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asExpression(k));
+        }
+        return r;
+    }
+
+    private PostfixExpression.Operator asPostfixOperator(IStrategoTerm term) {
+        return ((WrappedPostfixExpressionOperator)term).getWrappee();
+    }
+
+    private Assignment.Operator asAssignmentOperator(IStrategoTerm term) {
+        return ((WrappedAssignmentOperator)term).getWrappee();
+    }
+
+    private BodyDeclaration asBodyDeclaration(IStrategoTerm k) {
+        BodyDeclaration x = ((WrappedBodyDeclaration)k).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (BodyDeclaration)ASTNode.copySubtree(ast, x);
+    }
+
+    private SimpleName asSimpleName(IStrategoTerm term) {
+        SimpleName x = ((WrappedSimpleName)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (SimpleName)ASTNode.copySubtree(ast, x);
+    }
+
+    private Modifier asModifier(IStrategoTerm term) {
+        Modifier x = ((WrappedModifier)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (Modifier)ASTNode.copySubtree(ast, x);
+    }
+
+    private VariableDeclarationFragment asVariableDeclarationFragment(IStrategoTerm term) {
+    	VariableDeclarationFragment x = ((WrappedVariableDeclarationFragment)term).getWrappee();
+    	return x.getParent() == null && x.getAST() == ast ? x : (VariableDeclarationFragment) ASTNode.copySubtree(ast, x);
+    }
+
+    private AnonymousClassDeclaration asAnonymousClassDeclaration(IStrategoTerm term) {
+        AnonymousClassDeclaration x = ((WrappedAnonymousClassDeclaration)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (AnonymousClassDeclaration) ASTNode.copySubtree(ast, x);
+    }
+
+    private CatchClause asCatchClause(IStrategoTerm term) {
+    	CatchClause x = ((WrappedCatchClause)term).getWrappee();
+    	return x.getParent() == null && x.getAST() == ast ? x : (CatchClause) ASTNode.copySubtree(ast, x);
+    }
+
+    private String asString(IStrategoTerm term) {
+        return ((IStrategoString)term).stringValue();
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asStatementList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asStatement(k));
+        }
+        return r;
+    }
+
+    private Statement asStatement(IStrategoTerm term) {
+        Statement x = ((WrappedStatement)term).getWrappee();
+        return x.getParent() == null && x.getAST() == ast ? x : (Statement)ASTNode.copySubtree(ast, x); 
+    }
+
+    private boolean isAbstractTypeDeclarationList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoTerm[] kids = ((IStrategoList)term).getAllSubterms();
+            for(IStrategoTerm k : kids) {
+                if(!isAbstractTypeDeclaration(k))
+                    return false;
+            }
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isAbstractTypeDeclaration(IStrategoTerm term) {
+        return term instanceof WrappedAbstractTypeDeclaration;
+    }
+
+    private boolean isNone(IStrategoTerm term) {
+        return term instanceof None;
+    }
+
+    private boolean isName(IStrategoTerm term) {
+        return term instanceof WrappedName;
+    }
+
+    private boolean isAnnotations(IStrategoTerm term) {
+        return term instanceof WrappedASTNodeList;
+    }
+
+    private boolean isJavadoc(IStrategoTerm term) {
+        return term instanceof WrappedJavadoc;
+    }
+
+    private boolean isMethodRefParameterList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoTerm[] kids = ((IStrategoList)term).getAllSubterms();
+            for(IStrategoTerm k : kids) { 
+                if(!isMethodRefParameter(k))
+                    return false;
+            }
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isMethodRefParameter(IStrategoTerm term) {
+        return term instanceof WrappedMethodRefParameter;
+    }
+
+    private boolean isNameList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            if(list.size() > 0) 
+                return isName(list.head());
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isSingleVariableDeclarationList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            if(list.size() > 0) 
+                return isSingleVariableDeclaration(list.head());
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isTypeParameterList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            if(list.size() > 0) 
+                return isTypeParameter(list.head());
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isTypeParameter(IStrategoTerm term) {
+        return term instanceof WrappedTypeParameter;
+    }
+
+    private boolean isTagElementList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoTerm[] kids = term.getAllSubterms();
+            for(int i = 0; i < kids.length; i++)
+                if(!isTagElement(kids[i]))
+                    return false;
+        }
+        return true;
+    }
+
+    private boolean isTagElement(IStrategoTerm term) {
+        return term instanceof WrappedTagElement;
+    }
+
+    private boolean isOperator(IStrategoTerm term) {
+        return term instanceof IStrategoString 
+        && InfixExpression.Operator.toOperator(((IStrategoString)term).stringValue()) != null;
+    }
+
+    private boolean isEnumConstantDeclarationList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            if(list.size() > 0) 
+                return isEnumConstantDeclaration(list.head());
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isEnumConstantDeclaration(IStrategoTerm term) {
+        return term instanceof WrappedEnumConstantDeclaration;
+    }
+
+    private boolean isImportDeclarationList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            if(list.size() > 0) 
+                return isImportDeclaration(list.head());
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isImportDeclaration(IStrategoTerm term) {
+        return term instanceof WrappedImportDeclaration;
+    }
+
+    private boolean isPackageDeclaration(IStrategoTerm term) {
+        return term instanceof WrappedPackageDeclaration;
+    }
+
+    private boolean isMemberValuePairList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            if(list.size() > 0) 
+                return isMemberValuePair(list.head());
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isMemberValuePair(IStrategoTerm term) {
+        return term instanceof WrappedMemberValuePair;
+    }
+   
+    private boolean isModifierKeyword(IStrategoTerm term) {
+        return term instanceof WrappedModifierKeyword;
+    }
+
+    private boolean isASTNodeList(IStrategoTerm term) {
+        return term instanceof WrappedASTNodeList;
+    }
+
+    private boolean isString(IStrategoTerm term) {
+        return term instanceof IStrategoString;
+    }
+
+    private boolean isCatchClauseList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            if(list.size() > 0) 
+                return isCatchClause(list.head());
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isCatchClause(IStrategoTerm term) {
+        return term instanceof WrappedCatchClause;
+    }
+
+    private boolean isBodyDeclarationList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoTerm[] kids = ((IStrategoList)term).getAllSubterms();
+            for(int i = 0; i < kids.length; i++)
+                if(!isBodyDeclaration(kids[i]))
+                    return false;
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isTypeDecl(IStrategoTerm term) {
+        return term instanceof WrappedAbstractTypeDeclaration;
+    }
+
+    private boolean isNonEmptyVariableDeclarationFragmentList(IStrategoTerm term) {
+        // Must contain at least one element
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            if(list.size() < 0)
+                return false;
+            return isVariableDeclarationFragment(list.head());
+            
+        }
+        return false;
+    }
+
+    private boolean isVariableDeclarationFragment(IStrategoTerm term) {
+        return term instanceof WrappedVariableDeclarationFragment;
+    }
+
+    private boolean isAnonymousClassDeclaration(IStrategoTerm term) {
+        return term instanceof WrappedAnonymousClassDeclaration;
+    }
+
+    private boolean isBlock(IStrategoTerm term) {
+        return term instanceof WrappedBlock;
+    }
+
+    private boolean isSingleVariableDeclaration(IStrategoTerm term) {
+        return term instanceof WrappedSingleVariableDeclaration;
+    }
+
+    private boolean isPrefixOperator(IStrategoTerm term) {
+        return term instanceof WrappedPrefixExpressionOperator;
+    }
+
+    private boolean isPostfixOperator(IStrategoTerm term) {
+        return term instanceof WrappedPostfixExpressionOperator;
+    }
+
+    private boolean isAssignmentOperator(IStrategoTerm term) {
+        return term instanceof WrappedAssignmentOperator;
+    }
+
+    private boolean isTypeList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+        	for(IStrategoTerm t : ((IStrategoList)term).getAllSubterms()) {
+        		if(!isType(t))
+        			return false;
+        	}
+        	return true;
+        }
+        return false;
+    }
+
+    private boolean isStatementList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoList list = (IStrategoList)term;
+            for(IStrategoTerm t : list.getAllSubterms()) { 
+                if(!isStatement(t))
+                    return false;
+            }
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isStatement(IStrategoTerm term) {
+        return term instanceof WrappedStatement;
+    }
+
+    private boolean isInt(IStrategoTerm term) {
+        return term instanceof IStrategoInt;
+    }
+
+
+    private boolean isExpressionList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoTerm[] kids = ((IStrategoList)term).getAllSubterms();
+            for(IStrategoTerm k : kids) {
+                if(!isExpression(k))
+                    return false;
+            }
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isArrayInitializer(IStrategoTerm term) {
+        return term instanceof WrappedArrayInitializer;
+    }
+
+
+    private boolean isArrayType(IStrategoTerm term) {
+        return term instanceof WrappedArrayType;
+    }
+
+    private boolean isSimpleName(IStrategoTerm term) {
+        return term instanceof WrappedSimpleName;
+    }
+
+    private boolean isType(IStrategoTerm term) {
+        return term instanceof WrappedType;
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    private Collection asModifierList(IStrategoTerm term) {
+        IStrategoTerm[] kids = term.getAllSubterms();
+        List r = new ArrayList(kids.length);
+        for(IStrategoTerm k : kids) {
+            r.add(asModifier(k));
+        }
+        return r;
+    }
+
+    private boolean isModifierList(IStrategoTerm term) {
+        if(term instanceof IStrategoList) {
+            IStrategoTerm[] kids = ((IStrategoList)term).getAllSubterms();
+            for(IStrategoTerm k : kids) {
+                if(!isModifier(k))
+                    return false;
+            }
+            return true;
+        }
+        return false;
+    }
+
+    private boolean isModifier(IStrategoTerm term) {
+        return term instanceof WrappedModifier;
+    }
+
+    private boolean isBodyDeclaration(IStrategoTerm term) {
+        return term instanceof WrappedBodyDeclaration;
+    }
+
+    private boolean isExpression(IStrategoTerm term) {
+        return term instanceof WrappedExpression;
+    }
+
+    private int ctorNameToIndex(IStrategoConstructor ctr) {
+        Integer x = ctorNameToIndexMap.get(ctr.getName());
+        return x == null ? -1 : x.intValue();
+    }
+
+    @Override
+    public IStrategoConstructor makeConstructor(String string, int arity) {
+        return new ASTCtor(string, arity);
+    }
+
+    @Override
+    public IStrategoInt makeInt(int i) {
+        return new ECJInt(i);
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    @Override
+    public IStrategoList makeList(IStrategoTerm... terms) {
+        
+        boolean mustUseGeneric = false;
+        for(IStrategoTerm t : terms)
+            if(!(t instanceof WrappedASTNode))
+                mustUseGeneric = true;
+        
+        if(mustUseGeneric) {
+            return new ECJGenericList(terms);
+        }
+        
+        List<ASTNode> r = new ArrayList();
+        for(IStrategoTerm t : terms)
+            r.add(((WrappedASTNode)t).getWrappee());
+        return new WrappedASTNodeList(r);
+    }
+    
+    @Override
+    public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail) {
+        // TODO: handle list prepending in ECJFactory
+        return tail.prepend(head);
+    }
+
+    @Override
+    public IStrategoReal makeReal(double d) {
+        return new ECJReal(d);
+    }
+
+    @Override
+    public IStrategoString makeString(String s) {
+        return new ECJString(s);
+    }
+
+    @Override
+    public IStrategoTuple makeTuple(IStrategoTerm... terms) {
+        return new ECJTuple(terms);
+    }
+
+    public static IStrategoAppl wrap(Javadoc javadoc) {
+        if(javadoc == null)
+            return None.INSTANCE;
+        else
+            return new WrappedJavadoc(javadoc);
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    public static IStrategoTerm wrap(List list) {
+        if(list == null)
+            return None.INSTANCE;
+        else
+            return new WrappedASTNodeList(list);
+    }
+
+    static IStrategoTerm wrapName(Name name) {
+        
+        if(name == null)
+            return None.INSTANCE;
+        
+        if(name instanceof QualifiedName)
+            return wrap((QualifiedName) name);
+        if(name instanceof SimpleName)
+            return wrap((SimpleName) name);
+        
+        throw new NotImplementedException("Unknown Name type: " + name.getClass());
+    }
+
+    static IStrategoAppl wrap(SimpleName name) {
+        if(name == null)
+            return None.INSTANCE;
+        else
+            return new WrappedSimpleName(name);
+    }
+
+    private static IStrategoAppl wrap(QualifiedName name) {
+        if(name == null)
+            return None.INSTANCE;
+        else
+            return new WrappedQualifiedName(name);
+    }
+
+	@SuppressWarnings("rawtypes")
+    public static IStrategoTerm genericWrap(ASTNode node) {
+        
+        if(node instanceof ImportDeclaration)
+            return wrap((ImportDeclaration) node);
+        if(node instanceof Name)
+            return wrapName((Name) node);
+        if(node instanceof List)
+            return wrap((List) node);
+        if(node instanceof Javadoc)
+            return wrap((Javadoc) node);
+        if(node instanceof CompilationUnit)
+            return wrap((CompilationUnit) node);
+        if(node instanceof PackageDeclaration)
+            return wrap((PackageDeclaration) node);
+        if(node instanceof TypeDeclaration)
+            return wrap((TypeDeclaration) node);
+        if(node instanceof MethodDeclaration)
+            return wrap((MethodDeclaration) node);
+        if(node instanceof SingleVariableDeclaration)
+            return wrap((SingleVariableDeclaration) node);
+        if(node instanceof Expression)
+            return wrapExpression((Expression) node);
+        if(node instanceof VariableDeclarationFragment)
+            return wrap((VariableDeclarationFragment) node);
+        if(node instanceof AnonymousClassDeclaration)
+            return wrap((AnonymousClassDeclaration) node);
+        if(node instanceof BodyDeclaration)
+            return wrapBody((BodyDeclaration) node);
+        if(node instanceof CatchClause)
+            return wrap((CatchClause) node);
+        if(node instanceof Comment) 
+            return wrapComment((Comment) node);
+        if(node instanceof MemberRef)
+            return wrap((MemberRef) node);
+        if(node instanceof MemberValuePair)
+            return wrap((MemberValuePair) node);
+        if(node instanceof MethodRef)
+            return wrap((MethodRef) node);
+        if(node instanceof MethodRefParameter)
+            return wrap((MethodRefParameter) node);
+        if(node instanceof Modifier)
+            return wrap((Modifier) node);
+        if(node instanceof PackageDeclaration)
+            return wrap((PackageDeclaration) node);
+        if(node instanceof Statement)
+            return wrapStatement((Statement) node);
+        if(node instanceof TagElement)
+            return wrap((TagElement) node);
+        if(node instanceof TextElement)
+            return wrap((TextElement) node);
+        if(node instanceof Type)
+            return wrapType((Type) node);
+        if(node instanceof TypeParameter)
+            return wrap((TypeParameter) node);
+        if(node instanceof VariableDeclaration)
+            return wrapVarDecl((VariableDeclaration) node);
+        
+        if(node == null)
+            return None.INSTANCE;
+        
+        throw new NotImplementedException("Unknown ASTNode type" + node.getClass());
+    }
+
+    private static IStrategoTerm wrapVarDecl(VariableDeclaration decl) {
+        if(decl instanceof SingleVariableDeclaration)
+            return wrap((SingleVariableDeclaration) decl);
+        if(decl instanceof VariableDeclarationFragment)
+            return wrap((VariableDeclarationFragment) decl);
+        
+        throw new NotImplementedException();
+    }
+
+    private static IStrategoTerm wrapComment(Comment comment) {
+        if(comment instanceof BlockComment)
+            return wrap((BlockComment) comment);
+        if(comment instanceof Javadoc)
+            return wrap((Javadoc) comment);
+        if(comment instanceof LineComment)
+            return wrap((LineComment) comment);
+        
+        throw new NotImplementedException();
+    }
+
+    private static IStrategoAppl wrap(LineComment comment) {
+        if(comment == null)
+            return None.INSTANCE;
+        else
+            return new WrappedLineComment(comment);
+    }
+
+    private static IStrategoAppl wrap(BlockComment comment) {
+        if(comment == null)
+            return None.INSTANCE;
+        else
+            return new WrappedBlockComment(comment);
+    }
+
+    private static IStrategoTerm wrapBody(BodyDeclaration decl) {
+       
+        if(decl instanceof AbstractTypeDeclaration)
+            return wrapTypeDecl((AbstractTypeDeclaration) decl);
+        if(decl instanceof AnnotationTypeMemberDeclaration)
+            return wrap((AnnotationTypeMemberDeclaration) decl);
+        if(decl instanceof EnumConstantDeclaration)
+            return wrap((EnumConstantDeclaration) decl);
+        if(decl instanceof FieldDeclaration)
+            return wrap((FieldDeclaration) decl);
+        if(decl instanceof Initializer)
+            return wrap((Initializer) decl);
+        if(decl instanceof MethodDeclaration)
+            return wrap((MethodDeclaration) decl);
+        
+        throw new NotImplementedException();
+    }
+
+    private static IStrategoAppl wrap(AnnotationTypeMemberDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedAnnotationTypeMemberDeclaration(declaration);
+    }
+
+    private static IStrategoAppl wrap(EnumConstantDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedEnumConstantDeclaration(declaration);
+    }
+
+    private static IStrategoAppl wrap(FieldDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedFieldDeclaration(declaration);
+    }
+
+    private static IStrategoAppl wrap(Initializer initializer) {
+        if(initializer == null)
+                return None.INSTANCE;
+        else
+            return new WrappedInitializer(initializer);
+    }
+
+    private static IStrategoAppl wrap(TypeParameter parameter) {
+        if(parameter == null)
+            return None.INSTANCE;
+        else
+            return new WrappedTypeParameter(parameter);
+    }
+
+    private static IStrategoAppl wrap(TextElement element) {
+        if(element == null)
+            return None.INSTANCE;
+        else
+            return new WrappedTextElement(element);
+    }
+
+    private static IStrategoAppl wrap(TagElement element) {
+        if(element == null)
+            return None.INSTANCE;
+        else
+            return new WrappedTagElement(element);
+    }
+
+    static IStrategoTerm wrapStatement(Statement stat) {
+        
+        if(stat == null)
+            return None.INSTANCE;
+        
+        if(stat instanceof ExpressionStatement)
+            return wrap((ExpressionStatement) stat);
+        if(stat instanceof VariableDeclarationStatement)
+            return wrap((VariableDeclarationStatement) stat);
+        if(stat instanceof AssertStatement)
+            return wrap((AssertStatement) stat);
+        if(stat instanceof Block)
+            return wrap((Block) stat);
+        if(stat instanceof BreakStatement)
+            return wrap((BreakStatement) stat);
+        if(stat instanceof ConstructorInvocation)
+            return wrap((ConstructorInvocation) stat);
+        if(stat instanceof ContinueStatement)
+            return wrap((ContinueStatement) stat);
+        if(stat instanceof DoStatement)
+            return wrap((DoStatement) stat);
+        if(stat instanceof EmptyStatement)
+            return wrap((EmptyStatement) stat);
+        if(stat instanceof EnhancedForStatement)
+            return wrap((EnhancedForStatement) stat);
+        if(stat instanceof ForStatement)
+            return wrap((ForStatement) stat);
+        if(stat instanceof IfStatement)
+            return wrap((IfStatement) stat);
+        if(stat instanceof LabeledStatement)
+            return wrap((LabeledStatement) stat);
+        if(stat instanceof ReturnStatement)
+            return wrap((ReturnStatement) stat);
+        if(stat instanceof SuperConstructorInvocation)
+            return wrap((SuperConstructorInvocation) stat);
+        if(stat instanceof SwitchCase)
+            return wrap((SwitchCase) stat);
+        if(stat instanceof SwitchStatement)
+            return wrap((SwitchStatement) stat);
+        if(stat instanceof SynchronizedStatement)
+            return wrap((SynchronizedStatement) stat);
+        if(stat instanceof ThrowStatement)
+            return wrap((ThrowStatement) stat);
+        if(stat instanceof TryStatement)
+            return wrap((TryStatement) stat);
+        if(stat instanceof TypeDeclarationStatement)
+            return wrap((TypeDeclarationStatement) stat);
+        if(stat instanceof WhileStatement)
+            return wrap((WhileStatement) stat);
+
+        throw new NotImplementedException();
+    }
+
+    private static IStrategoAppl wrap(IfStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedIfStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(SuperConstructorInvocation invocation) {
+        if(invocation == null)
+            return None.INSTANCE; 
+        else
+            return new WrappedSuperConstructorInvocation(invocation);
+    }
+
+    private static IStrategoAppl wrap(SwitchCase switchcase) {
+        if(switchcase == null)
+            return None.INSTANCE; 
+        else
+            return new WrappedSwitchCase(switchcase);
+    }
+
+    private static IStrategoAppl wrap(SwitchStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedSwitchStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(SynchronizedStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedSynchronizedStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(ThrowStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedThrowStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(TryStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedTryStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(TypeDeclarationStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedTypeDeclarationStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(WhileStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedWhileStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(ReturnStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedReturnStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(LabeledStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedLabeledStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(ForStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedForStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(EnhancedForStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedEnhancedForStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(EmptyStatement statement) {   
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedEmptyStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(DoStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedDoStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(ContinueStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedContinueStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(ConstructorInvocation invocation) {
+        if(invocation == null)
+            return None.INSTANCE;
+        else
+            return new WrappedConstructorInvocation(invocation);
+
+    }
+
+    private static IStrategoAppl wrap(BreakStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedBreakStatement(statement);
+    }
+
+    static IStrategoAppl wrap(Block block) {
+        if(block == null)
+            return None.INSTANCE;
+        else
+            return new WrappedBlock(block);
+    }
+
+    private static IStrategoAppl wrap(AssertStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedAssertStatement(statement);
+    }
+
+    private static IStrategoAppl wrap(Modifier modifier) {
+        if(modifier == null)
+            return None.INSTANCE;
+        else
+            return new WrappedModifier(modifier);
+    }
+
+    private static IStrategoAppl wrap(MethodRefParameter parameter) {
+        if(parameter == null)
+            return None.INSTANCE;
+        else
+            return new WrappedMethodRefParameter(parameter);
+    }
+
+    private static IStrategoAppl wrap(MethodRef ref) {
+        if(ref == null)
+            return None.INSTANCE;
+        else
+            return new WrappedMethodRef(ref);
+    }
+
+    private static IStrategoAppl wrap(MemberValuePair pair) {
+        if(pair == null)
+            return None.INSTANCE;
+        else
+            return new WrappedMemberValuePair(pair);
+    }
+
+    private static IStrategoAppl wrap(MemberRef ref) {
+        if(ref == null)
+            return None.INSTANCE;
+        else
+            return new WrappedMemberRef(ref);
+    }
+
+    private static IStrategoAppl wrap(CatchClause clause) {
+        if(clause == null)
+            return None.INSTANCE;
+        else
+            return new WrappedCatchClause(clause);
+    }
+
+    static IStrategoAppl wrap(AnonymousClassDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedAnonymousClassDeclaration(declaration);
+    }
+
+    private static IStrategoAppl wrap(VariableDeclarationFragment fragment) {
+        if(fragment == null)
+            return None.INSTANCE;
+        else
+            return new WrappedVariableDeclarationFragment(fragment);
+    }
+
+    private static IStrategoAppl wrap(VariableDeclarationStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedVariableDeclarationStatement(statement);
+    }
+
+    static IStrategoAppl wrap(ExpressionStatement statement) {
+        if(statement == null)
+            return None.INSTANCE;
+        else
+            return new WrappedExpressionStatement(statement);
+    }
+
+    static IStrategoAppl wrap(SingleVariableDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedSingleVariableDeclaration(declaration);
+    }
+
+    private static IStrategoAppl wrap(MethodDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedMethodDeclaration(declaration);
+    }
+
+    public static IStrategoAppl wrap(TypeDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedTypeDeclaration(declaration);
+    }
+
+    public static IStrategoAppl wrap(CompilationUnit unit) {
+        if(unit == null)
+            return None.INSTANCE;
+        else
+            return new WrappedCompilationUnit(unit);
+    }
+
+    public static IStrategoAppl wrap(PackageDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedPackageDeclaration(declaration);
+    }
+
+    static IStrategoAppl wrap(ImportDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedImportDeclaration(declaration);
+    }
+
+    public IStrategoTerm parseFromTree(ASTNode n) {
+        return genericWrap(n);
+    }
+
+    public static IStrategoTerm wrap(int val) {
+        return new ECJInt(val);
+    }
+
+    public static IStrategoAppl wrap(ArrayType type) {
+        if(type == null)
+            return None.INSTANCE;
+        else
+            return new WrappedArrayType(type);
+    }
+
+    public static IStrategoTerm wrap(String identifier) {
+        if(identifier == null)
+            return None.INSTANCE;
+        else
+            return new ECJString(identifier);
+    }
+
+    static IStrategoTerm wrapExpression(Expression expr) {
+
+        if(expr == null)
+            return None.INSTANCE;
+
+        if(expr instanceof Annotation)
+            return wrapAnnotation((Annotation) expr);
+        if(expr instanceof ArrayAccess)
+            return wrap((ArrayAccess) expr);
+        if(expr instanceof ArrayCreation)
+            return wrap((ArrayCreation) expr);
+        if(expr instanceof ArrayInitializer)
+            return wrap((ArrayInitializer) expr);
+        if(expr instanceof Assignment)
+            return wrap((Assignment) expr);
+        if(expr instanceof BooleanLiteral)
+            return wrap((BooleanLiteral) expr);
+        if(expr instanceof CastExpression)
+            return wrap((CastExpression) expr);
+        if(expr instanceof CharacterLiteral)
+            return wrap((CharacterLiteral) expr);
+        if(expr instanceof ClassInstanceCreation)
+            return wrap((ClassInstanceCreation) expr);
+        if(expr instanceof ConditionalExpression)
+            return wrap((ConditionalExpression) expr);
+        if(expr instanceof FieldAccess)
+            return wrap((FieldAccess) expr);
+        if(expr instanceof InfixExpression)
+            return wrap((InfixExpression) expr);
+        if(expr instanceof InstanceofExpression)
+            return wrap((InstanceofExpression) expr);
+        if(expr instanceof MethodInvocation)
+            return wrap((MethodInvocation) expr);
+        if(expr instanceof Name)
+            return wrapName((Name) expr);
+        if(expr instanceof NullLiteral)
+            return wrap((NullLiteral) expr);
+        if(expr instanceof NumberLiteral)
+            return wrap((NumberLiteral) expr);
+        if(expr instanceof ParenthesizedExpression)
+            return wrap((ParenthesizedExpression) expr);
+        if(expr instanceof PostfixExpression)
+            return wrap((PostfixExpression) expr);
+        if(expr instanceof PrefixExpression)
+            return wrap((PrefixExpression) expr);
+        if(expr instanceof StringLiteral)
+            return wrap((StringLiteral) expr);
+        if(expr instanceof SuperFieldAccess)
+            return wrap((SuperFieldAccess) expr);
+        if(expr instanceof SuperMethodInvocation)
+            return wrap((SuperMethodInvocation) expr);
+        if(expr instanceof ThisExpression)
+            return wrap((ThisExpression) expr);
+        if(expr instanceof TypeLiteral)
+            return wrap((TypeLiteral) expr);
+        if(expr instanceof VariableDeclarationExpression)
+            return wrap((VariableDeclarationExpression) expr);
+        
+        throw new NotImplementedException("Unknown Expression Type:" + expr.getClass());
+    }
+
+    private static IStrategoTerm wrapAnnotation(Annotation anno) {
+        
+        if(anno instanceof MarkerAnnotation)
+            return wrap((MarkerAnnotation) anno);
+        if(anno instanceof NormalAnnotation)
+            return wrap((NormalAnnotation) anno);
+        if(anno instanceof SingleMemberAnnotation)
+            return wrap((SingleMemberAnnotation) anno);
+
+        throw new NotImplementedException();
+    }
+
+    private static IStrategoAppl wrap(SingleMemberAnnotation annotation) {
+        if(annotation == null)
+            return None.INSTANCE;
+        else
+            return new WrappedSingleMemberAnnotation(annotation);
+    }
+
+    private static IStrategoAppl wrap(NormalAnnotation annotation) {
+        if(annotation == null)
+            return None.INSTANCE;
+        else
+            return new WrappedNormalAnnotation(annotation);
+    }
+
+    private static IStrategoAppl wrap(MarkerAnnotation annotation) {
+        if(annotation == null) 
+            return None.INSTANCE;
+        else
+            return new WrappedMarkerAnnotation(annotation);
+    }
+
+    private static IStrategoAppl wrap(VariableDeclarationExpression expression) {
+        if(expression == null)
+            return None.INSTANCE;
+        else
+            return new WrappedVariableDeclarationExpression(expression);
+    }
+
+    private static IStrategoAppl wrap(TypeLiteral literal) {
+        if(literal == null)
+            return None.INSTANCE;
+        else
+            return new WrappedTypeLiteral(literal);
+    }
+
+    private static IStrategoAppl wrap(ThisExpression expression) {
+        if(expression == null)
+            return None.INSTANCE;
+        else
+            return new WrappedThisExpression(expression);
+    }
+
+    private static IStrategoAppl wrap(SuperMethodInvocation invocation) {
+        if(invocation == null)
+            return None.INSTANCE;
+        else
+            return new WrappedSuperMethodInvocation(invocation);
+    }
+
+    private static IStrategoAppl wrap(SuperFieldAccess access) {
+        if(access == null)
+            return None.INSTANCE;
+        else
+            return new WrappedSuperFieldAccess(access);
+    }
+
+    private static IStrategoAppl wrap(StringLiteral literal) {
+        if(literal == null) 
+            return None.INSTANCE;
+        else
+            return new WrappedStringLiteral(literal);
+    }
+
+    private static IStrategoAppl wrap(PrefixExpression expression) {
+        if(expression == null)
+            return None.INSTANCE;
+        else
+            return new WrappedPrefixExpression(expression);
+    }
+
+    private static IStrategoAppl wrap(PostfixExpression expression) {
+        if(expression == null)
+            return None.INSTANCE;
+        else
+            return new WrappedPostfixExpression(expression);
+    }
+
+    private static IStrategoAppl wrap(ParenthesizedExpression expression) {
+        if(expression == null)
+            return None.INSTANCE;
+        else
+            return new WrappedParenthesizedExpression(expression);
+    }
+
+    private static IStrategoAppl wrap(NumberLiteral literal) {
+        if(literal == null)
+            return None.INSTANCE;
+        else
+            return new WrappedNumberLiteral(literal);
+    }
+
+    private static IStrategoAppl wrap(NullLiteral literal) {
+        if(literal == null)
+            return None.INSTANCE;
+        else
+            return new WrappedNullLiteral(literal);
+    }
+
+    private static IStrategoAppl wrap(MethodInvocation invocation) {
+        if(invocation == null)
+            return None.INSTANCE;
+        else
+            return new WrappedMethodInvocation(invocation);
+    }
+
+    private static IStrategoAppl wrap(InstanceofExpression expression) {
+        if(expression == null)
+            return None.INSTANCE;
+        else
+            return new WrappedInstanceofExpression(expression);
+    }
+
+    private static IStrategoAppl wrap(InfixExpression expression) {
+        
+        if(expression == null)
+            return None.INSTANCE;
+        else
+            return new WrappedInfixExpression(expression);
+
+/*
+        InfixExpression.Operator op = expression.getOperator();
+        
+        if(op == InfixExpression.Operator.PLUS)
+            return new WrappedPlus(expression); 
+        if(op == InfixExpression.Operator.MINUS)
+            return new WrappedMinus(expression); 
+        if(op == InfixExpression.Operator.TIMES)
+            return new WrappedTimes(expression); 
+        if(op == InfixExpression.Operator.DIVIDE)
+            return new WrappedDivide(expression); 
+
+        throw new NotImplementedException("Unknown InfixExpression Operator " + expression.getO);
+*/  
+    }
+
+    private static IStrategoAppl wrap(FieldAccess access) {
+        if(access == null)
+            return None.INSTANCE;
+        else
+            return new WrappedFieldAccess(access);
+    }
+
+    private static IStrategoAppl wrap(ConditionalExpression expression) {
+        if(expression == null)
+            return None.INSTANCE;
+        else
+            return new WrappedConditionalExpression(expression);
+    }
+
+    private static IStrategoAppl wrap(ClassInstanceCreation creation) {
+        if(creation == null)
+            return None.INSTANCE;
+        else
+            return new WrappedClassInstanceCreation(creation);
+    }
+
+    private static IStrategoAppl wrap(CharacterLiteral literal) {
+        if(literal == null)
+            return None.INSTANCE;
+        else
+            return new WrappedCharacterLiteral(literal);
+    }
+
+    private static IStrategoAppl wrap(CastExpression expression) {
+        if(expression == null)
+            return None.INSTANCE;
+        else
+            return new WrappedCastExpression(expression);
+    }
+
+    private static IStrategoAppl wrap(BooleanLiteral literal) {
+        if(literal == null)
+            return None.INSTANCE;
+        else
+            return new WrappedBooleanLiteral(literal);
+    }
+
+    private static IStrategoAppl wrap(Assignment assignment) {
+        if(assignment == null)
+            return None.INSTANCE;
+        else
+            return new WrappedAssignment(assignment);
+    }
+
+    private static IStrategoAppl wrap(ArrayInitializer initializer) {
+        if(initializer == null)
+            return None.INSTANCE;
+        else 
+            return new WrappedArrayInitializer(initializer);
+    }
+
+    private static IStrategoAppl wrap(ArrayCreation creation) {
+        if(creation == null)
+            return None.INSTANCE;
+        else
+            return new WrappedArrayCreation(creation);
+    }
+
+    private static IStrategoAppl wrap(ArrayAccess access) {
+        if(access == null)
+            return None.INSTANCE;
+        else
+            return new WrappedArrayAccess(access);
+    }
+
+    public static IStrategoTerm wrapType(Type type) {
+        
+        if(type instanceof ArrayType)
+            return wrap((ArrayType) type);
+        if(type instanceof ParameterizedType)
+            return wrap((ParameterizedType) type);
+        if(type instanceof PrimitiveType)
+            return wrap((PrimitiveType) type);
+        if(type instanceof QualifiedType)
+            return wrap((QualifiedType) type);
+        if(type instanceof SimpleType)
+            return wrap((SimpleType) type);
+        if(type instanceof WildcardType)
+            return wrap((WildcardType) type);
+        
+        if(type == null)
+            return None.INSTANCE;
+        
+        throw new NotImplementedException(" " + type.getClass());
+    }
+
+    private static IStrategoAppl wrap(WildcardType type) {
+        if(type == null)
+            return None.INSTANCE;
+        else
+            return new WrappedWildcardType(type);
+    }
+
+    private static IStrategoAppl wrap(SimpleType type) {
+        if(type == null)
+            return None.INSTANCE;
+        else
+            return new WrappedSimpleType(type);
+    }
+
+    private static IStrategoAppl wrap(QualifiedType type) {
+        if(type == null)
+            return None.INSTANCE;
+        else
+            return new WrappedQualifiedType(type);
+    }
+
+    private static IStrategoAppl wrap(PrimitiveType type) {
+        
+        if(type == null)
+            return None.INSTANCE;
+        else
+            return new WrappedPrimitiveType(type);
+        /*
+        if(type.getPrimitiveTypeCode() == PrimitiveType.INT)
+            return new WrappedIntType(type);
+        if(type.getPrimitiveTypeCode() == PrimitiveType.BOOLEAN)
+            return new WrappedBooleanType(type);
+        if(type.getPrimitiveTypeCode() == PrimitiveType.DOUBLE)
+            return new WrappedDoubleType(type);
+        if(type.getPrimitiveTypeCode() == PrimitiveType.FLOAT)
+            return new WrappedFloatType(type);
+        if(type.getPrimitiveTypeCode() == PrimitiveType.BYTE)
+            return new WrappedByteType(type);
+        if(type.getPrimitiveTypeCode() == PrimitiveType.LONG)
+            return new WrappedLongType(type);
+        
+        throw new NotImplementedException();
+        */
+    }
+
+    private static IStrategoAppl wrap(ParameterizedType type) {
+        if(type == null)
+            return None.INSTANCE;
+        else
+            return new WrappedParameterizedType(type); 
+    }
+
+    public static IStrategoAppl wrap(ModifierKeyword keyword) {
+        if(keyword == null)
+            return None.INSTANCE;
+        else 
+            return new WrappedModifierKeyword(keyword);
+    }
+
+    public static IStrategoAppl wrap(PostfixExpression.Operator operator) {
+        if(operator == null)
+            return None.INSTANCE;
+        else
+            return new WrappedPostfixExpressionOperator(operator);
+    }
+
+    public static IStrategoAppl wrap(PrefixExpression.Operator operator) {
+        if(operator == null)
+            return None.INSTANCE;
+        else
+            return new WrappedPrefixExpressionOperator(operator);
+    }
+
+    public static IStrategoTerm wrapTypeDecl(AbstractTypeDeclaration decl) {
+        if(decl instanceof AnnotationTypeDeclaration)
+            return wrap((AnnotationTypeDeclaration) decl);
+        if(decl instanceof EnumDeclaration)
+            return wrap((EnumDeclaration) decl);
+        if(decl instanceof TypeDeclaration)
+            return wrap((TypeDeclaration) decl);
+        
+        throw new NotImplementedException();
+    }
+
+    private static IStrategoAppl wrap(EnumDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedEnumDeclaration(declaration);
+    }
+
+    private static IStrategoAppl wrap(AnnotationTypeDeclaration declaration) {
+        if(declaration == null)
+            return None.INSTANCE;
+        else
+            return new WrappedAnnotationTypeDeclaration(declaration);
+    }
+
+    public static IStrategoTerm wrap(ITypeBinding binding) {
+        if(binding == null)
+            return None.INSTANCE;
+        else
+            return new WrappedITypeBinding(binding);
+    }
+
+    public static IStrategoTerm wrap(ITypeBinding[] bindings) {
+        IStrategoTerm[] terms = new IStrategoTerm[bindings.length];
+        for(int i = 0, sz = bindings.length; i < sz; i++)
+            terms[i] = ECJFactory.wrap(bindings[i]);
+        return new ECJGenericList(terms);
+    }
+
+    public static IStrategoTerm wrap(ITypeParameter[] parameters) {
+        final IStrategoTerm[] terms = new IStrategoTerm[parameters.length];
+        for(int i = 0, sz = parameters.length; i < sz; i++)
+            terms[i] = ECJFactory.wrap(parameters[i]);
+        return new ECJGenericList(terms);
+    }
+    
+    public static IStrategoTerm wrap(IField[] fields) {
+        IStrategoTerm[] terms = new IStrategoTerm[fields.length];
+        for(int i = 0, sz = fields.length; i < sz; i++)
+            terms[i] = ECJFactory.wrap(fields[i]);
+        return new ECJGenericList(terms);
+    }
+
+
+    private static IStrategoTerm wrap(IField field) {
+    	if(field == null)
+    		return None.INSTANCE;
+    	else
+    		return new WrappedIField(field);
+	}
+
+	public static IStrategoTerm wrap(ITypeParameter binding) {
+        if(binding == null)
+            return None.INSTANCE;
+        else
+            return new WrappedITypeParameter(binding);
+    }
+
+    public static IStrategoTerm wrap(IProject proj) {
+        if(proj == null)
+            return None.INSTANCE;
+        else
+            return new WrappedIProject(proj);
+    }
+
+    public static IStrategoTerm wrap(String[] strs) {
+        IStrategoTerm[] r = new IStrategoTerm[strs.length];
+        for(int i = 0; i < r.length; i++)
+            r[i] = wrap(strs[i]);
+        return new ECJGenericList(r);
+    }
+
+    public static IStrategoTerm wrap(IMethodBinding mb) {
+        if(mb == null)
+            return None.INSTANCE;
+        else
+            return new WrappedIMethodBinding(mb);
+    }
+
+    public void setAST(AST ast) {
+        this.ast = ast;
+    }
+
+    @Deprecated
+    public IStrategoAppl replaceAppl(IStrategoConstructor constructor, IStrategoTerm[] kids, IStrategoTerm old) {
+        return replaceAppl(constructor, kids, (IStrategoAppl)old);
+    }
+    
+    public IStrategoAppl replaceAppl(IStrategoConstructor constructor, IStrategoTerm[] kids, IStrategoAppl old) {
+        final IStrategoAppl r = makeAppl(constructor, kids);
+        // FIXME None should be in a different hierarchy than other WrappedASTNodes
+        if(r instanceof WrappedASTNode && old instanceof WrappedASTNode) {
+            final WrappedASTNode n = (WrappedASTNode)r;
+            final WrappedASTNode o = (WrappedASTNode)old;
+            final ASTNode nn = n.getWrappee();
+            final ASTNode on = o.getWrappee();
+            if(nn != null && on != null)
+                nn.setSourceRange(on.getStartPosition(), on.getLength());
+        }
+        return r;
+    }
+    
+    public IStrategoTuple replaceTuple(IStrategoTerm[] kids, IStrategoTuple old) {
+        return makeTuple(kids);
+    }
+    
+    public IStrategoList replaceList(IStrategoTerm[] kids, IStrategoList old) {
+        return makeList(kids);
+    }
+
+    public static IStrategoTerm wrap(IType t) {
+        if(t == null)
+            return None.INSTANCE;
+        else
+            return new WrappedIType(t);
+    }
+
+    public static IStrategoTerm wrap(IJavaProject jp) {
+        if(jp == null)
+            return None.INSTANCE;
+        else
+            return new WrappedIJavaProject(jp);
+    }
+
+    public static IStrategoTerm wrap(ICompilationUnit cu) {
+        if(cu == null)
+            return None.INSTANCE;
+        else
+            return new WrappedICompilationUnit(cu);
+    }
+
+    public static IStrategoTerm wrap(IFile file) {
+        if(file == null)
+            return None.INSTANCE;
+        else
+            return new WrappedIFile(file);
+    }
+
+    public static IStrategoTerm wrap(IBinding binding) {
+        if(binding == null)
+            return None.INSTANCE;
+        else
+            return new WrappedIBinding(binding);
+    }
+
+	public static IStrategoAppl wrap(Assignment.Operator operator) {
+		if(operator == null)
+			return None.INSTANCE;
+		else
+			return new WrappedAssignmentOperator(operator);
+	}
+
+	public static IStrategoTerm wrap(ITypeHierarchy th) {
+		if(th == null)
+			return None.INSTANCE;
+		else
+			return new WrappedITypeHierarchy(th);
+	}
+
+	public static IStrategoTerm wrapAmbName(String name) {
+		if(name == null)
+			return None.INSTANCE;
+		else 
+			return new AmbName(name);
+	}
+
+	public static IStrategoTerm wrapDottedName(String name) {
+		if(name == null)
+			return None.INSTANCE;
+		else 
+			return new DottedName(name);
+	}
+
+	public static IStrategoTerm fullyGenericWrap(Object o) {
+		if(o instanceof String)
+			return wrap((String)o);
+		if(o instanceof Integer)
+			return wrap((Integer)o);
+		if(o instanceof Boolean)
+			return wrap(((Boolean)o) ? 1 : 0);
+		if(o instanceof ASTNode)
+			return genericWrap((ASTNode)o);
+		if(o instanceof IType)
+			return wrap((IType)o);
+		
+		throw new NotImplementedException(" " + o.getClass());
+	}
+
+	public AST getAST() {
+		return ast;
+	}
+
+	public static IStrategoTerm wrap(IJavaElement el) {
+		if(el == null)
+			return None.INSTANCE;
+		else
+			return new WrappedIJavaElement(el);
+	}
+
+	public static IStrategoAppl wrapSignature(String s) {
+		if(s == null)
+			return None.INSTANCE;
+		else
+			return new WrappedActualTypeSignature(s);
+		
+	}
+
+	public static IStrategoTerm wrapSignatures(String[] signatures) {
+		if(signatures == null)
+			return None.INSTANCE;
+		else {
+			IStrategoAppl[] ws = new WrappedActualTypeSignature[signatures.length];
+			for(int i = 0; i < signatures.length; i++)
+				ws[i] = wrapSignature(signatures[i]);
+			return new ECJGenericList(ws);
+		}
+
+	}
+
+	public static ASTMatcher getMatcher() {
+		if(astMatcher == null)
+			astMatcher = new ASTMatcher();
+		return astMatcher;
+	}
+
+    @Override
+    public IStrategoList makeList() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoAppl makeAppl(IStrategoConstructor constructor,
+            IStrategoTerm[] kids, IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoList makeList(IStrategoTerm[] kids,
+            IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail,
+            IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoTuple makeTuple(IStrategoTerm[] kids,
+            IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoString tryMakeUniqueString(String name) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public int getDefaultStorageType() {
+        return IStrategoTerm.IMMUTABLE;
+    }
+
+    @Override
+    public IStrategoTerm copyAttachments(IStrategoTerm from, IStrategoTerm to) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoList replaceListCons(IStrategoTerm head,
+            IStrategoList tail, IStrategoTerm oldHead, IStrategoList oldTail) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoTerm replaceTerm(IStrategoTerm term, IStrategoTerm old) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermFactory getFactoryWithStorageType(int storageType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public IStrategoList makeList(Collection<? extends IStrategoTerm> terms) {
+        throw new NotImplementedException();
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java)
@@ -0,0 +1,149 @@
+/*
+ * Created on 4. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
+
+public class ECJGenericAppl implements IStrategoAppl {
+
+    private static final long serialVersionUID = 1L;
+    
+    private IStrategoConstructor ctor;
+    private IStrategoTerm[] children;
+    
+
+    ECJGenericAppl(IStrategoConstructor ctor, IStrategoTerm[] children) {
+        this.ctor = ctor;
+        this.children = children;
+    }
+    
+    @Override
+    public int getStorageType() {
+        return MUTABLE;
+    }
+    
+    @Override
+    public IStrategoList getAnnotations() {
+    	return TermFactory.EMPTY_LIST;
+    }
+
+    @Override
+    public IStrategoConstructor getConstructor() {
+        return ctor;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return children[index];
+    }
+    
+    @Override
+    public IStrategoTerm[] getAllSubterms() {
+        return children;
+    }
+
+    @Override
+    public int getSubtermCount() {
+        return children.length;
+    }
+
+    @Override
+    public int getTermType() {
+        return IStrategoTerm.APPL;
+    }
+
+    @Override
+    public boolean match(IStrategoTerm second) {
+        if(!(second instanceof IStrategoAppl))
+            return false;
+        
+        IStrategoAppl snd = (IStrategoAppl)second;
+        
+        if(!snd.getConstructor().equals(getConstructor()))
+            return false;
+        
+        for(int i = 0, sz = getConstructor().getArity(); i < sz; i++) {
+            if(!getSubterm(i).equals(snd.getSubterm(i)))
+                return false;
+        }
+        
+        return true;
+    }
+
+    @Override
+    public void prettyPrint(ITermPrinter pp) {
+        pp.print(ctor.getName());
+        
+        int arity = ctor.getArity();
+        if(arity > 0) {
+            pp.println("(", false);
+            pp.indent(ctor.getName().length() + 1);
+            pp.print("  ");
+            pp.nextIndentOff();
+            getSubterm(0).prettyPrint(pp);
+            pp.println("");
+            for(int i = 1; i < arity; i++) {
+                pp.print(", ");
+                pp.nextIndentOff();
+                getSubterm(i).prettyPrint(pp);
+                pp.println("");
+            }
+            pp.print(")");
+            pp.outdent(ctor.getName().length() + 1);
+            
+        }
+    }
+
+    @Override
+    public String toString(int maxDepth) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String getName() {
+        throw new NotImplementedException();
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java)
@@ -0,0 +1,138 @@
+/*
+ * Created on 4. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
+
+public class ECJGenericList implements IStrategoList {
+
+    private static final long serialVersionUID = 1L;
+    
+    private IStrategoTerm[] kids;
+
+    ECJGenericList(IStrategoTerm[] kids) {
+        this.kids = kids;
+    }
+    
+    @Override
+    public IStrategoList tail() {
+        return new ECJGenericList(doTail());
+    }
+    
+    @Override
+    public IStrategoList prepend(IStrategoTerm prefix) {
+        throw new NotImplementedException(); 
+    }
+    
+    private IStrategoTerm[] doTail() {
+        IStrategoTerm[] tail = new IStrategoTerm[kids.length - 1];
+        System.arraycopy(kids, 1, tail, 0, tail.length);
+        return tail;
+    }
+
+    @Override
+    public int getSubtermCount() {
+        return kids.length;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return kids[index];
+    }
+
+    @Override
+    public IStrategoTerm[] getAllSubterms() {
+        return kids;
+    }
+
+    @Override
+    public int getTermType() {
+        return IStrategoTerm.LIST;
+    }
+
+    @Override
+    public int getStorageType() {
+        return IStrategoTerm.IMMUTABLE;
+    }
+
+    @Override
+    public IStrategoList getAnnotations() {
+        return TermFactory.EMPTY_LIST;
+    }
+
+    @Override
+    public boolean match(IStrategoTerm second) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void prettyPrint(ITermPrinter pp) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String toString(int maxDepth) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        return true;
+    }
+
+    @Override
+    public IStrategoTerm get(int index) {
+        return kids[index];
+    }
+
+    @Override
+    public int size() {
+        return kids.length;
+    }
+
+    @Override
+    public IStrategoTerm head() {
+        return kids[0];
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return false;
+    }
+}
+

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJInt.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJInt.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJInt.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJInt.java)
@@ -0,0 +1,21 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoInt;
+import org.spoofax.terms.TermFactory;
+
+public class ECJInt extends StrategoInt {
+
+    private static final long serialVersionUID = 1L;
+
+    ECJInt(int value) {
+        super(value, TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJReal.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJReal.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJReal.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJReal.java)
@@ -0,0 +1,21 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoReal;
+import org.spoofax.terms.TermFactory;
+
+public class ECJReal extends StrategoReal {
+
+    private static final long serialVersionUID = 1L;
+
+    ECJReal(double value) {
+        super(value, TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJString.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJString.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJString.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJString.java)
@@ -0,0 +1,12 @@
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.terms.StrategoString;
+
+public class ECJString extends StrategoString {
+
+    private static final long serialVersionUID = 1L;
+
+    protected ECJString(String value) {
+        super(value);
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJTuple.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJTuple.java)
@@ -0,0 +1,22 @@
+/*
+ * Created on 4. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoTuple;
+import org.spoofax.terms.TermFactory;
+
+public class ECJTuple extends StrategoTuple {
+
+    private static final long serialVersionUID = 1L;
+
+    ECJTuple(IStrategoTerm[] kids) {
+        super(kids, TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/None.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/None.java)
@@ -0,0 +1,72 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import java.io.IOException;
+
+import org.eclipse.jdt.core.dom.ASTNode;
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class None extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final static IStrategoTerm[] EMPTY = new IStrategoTerm[0];
+    private final static IStrategoConstructor CTOR = new ASTCtor("None", 0); 
+    
+    final static None INSTANCE = new None();
+    
+    protected None() {
+        super(CTOR);
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ASTNode getWrappee() {
+        return null;
+    }
+
+/*    
+    @Override
+    public IStrategoTerm[] getArguments() {
+        return EMPTY;
+    }
+*/
+    
+    @Override
+    public IStrategoTerm[] getAllSubterms() {
+        return EMPTY;
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public String getName() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    protected int hashFunction() {
+        throw new NotImplementedException();
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNode.java)
@@ -0,0 +1,16 @@
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ASTNode;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedASTNode extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedASTNode(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+
+    public abstract ASTNode getWrappee();
+    
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java)
@@ -0,0 +1,202 @@
+/*
+ * Created on 27. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.eclipse.jdt.core.dom.ASTNode;
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.ITermAttachment;
+import org.spoofax.terms.attachments.TermAttachmentType;
+
+public class WrappedASTNodeList implements IStrategoList {
+
+    private static final long serialVersionUID = 1L;
+    
+    private List<ASTNode> wrappee;
+    
+    public WrappedASTNodeList(List<ASTNode> wrappee) {
+        
+        for(Object n : wrappee) 
+            if(!(n instanceof ASTNode) && n != null)
+                throw new ClassCastException();
+        this.wrappee = (List<ASTNode>)wrappee;
+    }
+    
+    @Override
+    public int getStorageType() {
+        return MUTABLE;
+    }
+    
+    @Override
+    public IStrategoTerm get(int i) {
+        return getSubterm(i);
+    }
+
+    @Override
+    public IStrategoTerm head() {
+        return ECJFactory.genericWrap(wrappee.get(0));
+    }
+
+    @Override
+    public IStrategoList prepend(IStrategoTerm prefix) {
+        
+        // Trying to build a hybrid list. Do on-the-fly conversion.
+        if(prefix instanceof WrappedASTNode) {
+            List<ASTNode> r = new ArrayList<ASTNode>();
+            ASTNode n = ((WrappedASTNode)prefix).getWrappee();
+            r.add(n);
+            r.addAll(wrappee);
+            return new WrappedASTNodeList(r);
+        } else { 
+            final int sz = wrappee.size();
+            IStrategoTerm[] r = new IStrategoTerm[sz + 1];
+            r[0] = prefix;
+            for(int i = 0; i < sz; i++) {
+                r[i + 1] = ECJFactory.genericWrap(wrappee.get(i));
+            }
+            return new ECJGenericList(r);
+        }
+    }
+
+    @Override
+    public int size() {
+        return wrappee.size();
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    @Override
+    public IStrategoList tail() {
+        List r = new ArrayList();
+        for(int i = 1; i < wrappee.size(); i++) {
+            r.add(wrappee.get(i));
+        }
+        return new WrappedASTNodeList(r);
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        Object o = wrappee.get(index);
+        if(o instanceof IStrategoTerm)
+            return (IStrategoTerm)o;
+        if(o instanceof ASTNode)
+            return ECJFactory.genericWrap((ASTNode)o);
+        if(o == null)
+            return None.INSTANCE;
+        
+        throw new NotImplementedException("Unsupported type : " + o.getClass());
+    }
+
+    @Override
+    public IStrategoTerm[] getAllSubterms() {
+        IStrategoTerm[] r = new IStrategoTerm[wrappee.size()];
+        ASTNode[] s = wrappee.toArray(new ASTNode[0]);
+        for(int i = 0; i< r.length; i++) {
+            r[i] = ECJFactory.genericWrap(s[i]);
+        }
+        return r;
+    }
+    
+    @Override
+    public int getSubtermCount() {
+        return wrappee.size();
+    }
+
+    @Override
+    public int getTermType() {
+        return IStrategoTerm.LIST;
+    }
+
+    @Override
+    public boolean match(IStrategoTerm second) {
+        if(second instanceof IStrategoList) {
+            IStrategoList snd = (IStrategoList) second;
+            if(size() != snd.size()) 
+                return false;
+            for(int i = 0; i < size(); i++) 
+                if(!get(i).match(snd.getSubterm(i)))
+                    return false;
+            return true;
+        } 
+        return false;
+    }
+
+    @Override
+    public void prettyPrint(ITermPrinter pp) {
+        int sz = size();
+        if(sz > 0) {
+            pp.println("[");
+            pp.indent(2);
+            get(0).prettyPrint(pp);
+            for(int i = 1; i < sz; i++) {
+                pp.print(", ");
+                pp.nextIndentOff();
+                get(i).prettyPrint(pp);
+                pp.println("");
+            }
+            pp.println("");
+            pp.print("]");
+            pp.outdent(2);
+
+        } else {
+            pp.print("[]");
+        }
+    }
+
+    public List<ASTNode> getWrappee() {
+        return wrappee;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return wrappee.isEmpty();
+    }
+    
+    @Override
+    public IStrategoList getAnnotations() {
+    	return TermFactory.EMPTY_LIST;
+    }
+
+    @Override
+    public String toString(int maxDepth) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void writeAsString(Appendable output, int maxDepth)
+            throws IOException {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public <T extends ITermAttachment> T getAttachment(
+            TermAttachmentType<T> type) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public void putAttachment(ITermAttachment resourceAttachment) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public boolean isList() {
+        return true;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java)
@@ -0,0 +1,22 @@
+/*
+ * Created on 25. des.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedAbstractTypeDeclaration extends WrappedBodyDeclaration {
+
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedAbstractTypeDeclaration(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+
+    public abstract AbstractTypeDeclaration getWrappee();
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java)
@@ -0,0 +1,40 @@
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.Signature;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedActualTypeSignature extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
+
+	private final String wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ActualTypeSignature", 4);
+
+	protected WrappedActualTypeSignature(String signature) {
+		super(CTOR);
+		wrappee = signature;
+
+	}
+
+	@Override
+	public IStrategoTerm getSubterm(int index) {
+		switch(index) {
+		case 0:
+			return ECJFactory.wrap(Signature.getSignatureQualifier(wrappee));
+		case 1: 
+			return ECJFactory.wrap(Signature.getSignatureSimpleName(wrappee));
+		case 2: {
+			final String te = Signature.getTypeErasure(wrappee);
+			final String p = Signature.getSignatureQualifier(te);
+			final String n = Signature.getSignatureSimpleName(te);
+			return ECJFactory.wrap(p.length() == 0 ? n : p + "." + n);
+		}
+		case 3:
+			return ECJFactory.wrapSignatures(Signature.getTypeArguments(wrappee));
+		default:
+			throw new ArrayIndexOutOfBoundsException();
+		}
+	}
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java)
@@ -0,0 +1,23 @@
+/*
+ * Created on 25. des.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Annotation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedAnnotation extends WrappedExpression implements IWrappedExtendedModifier {
+    
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedAnnotation(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+
+    @Override
+    public abstract Annotation getWrappee();
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedAnnotationTypeDeclaration extends WrappedAbstractTypeDeclaration {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final AnnotationTypeDeclaration wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("AnnotationTypeDeclaration", 3);
+    
+    WrappedAnnotationTypeDeclaration(AnnotationTypeDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 1:
+            return ECJFactory.wrap(wrappee.getName());
+        case 2:
+            return ECJFactory.wrap(wrappee.bodyDeclarations());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+    
+    @Override
+    public AnnotationTypeDeclaration getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java)
@@ -0,0 +1,46 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.AnnotationTypeMemberDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedAnnotationTypeMemberDeclaration extends WrappedBodyDeclaration {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final AnnotationTypeMemberDeclaration wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("AnnotationTypeMemberDeclaration", 4);
+    
+    WrappedAnnotationTypeMemberDeclaration(AnnotationTypeMemberDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 1:
+            return ECJFactory.wrapType(wrappee.getType());
+        case 2:
+            return ECJFactory.wrap(wrappee.getName());
+        case 3:
+            return ECJFactory.wrapExpression(wrappee.getDefault());
+    }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public AnnotationTypeMemberDeclaration getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java)
@@ -0,0 +1,39 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.AnonymousClassDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedAnonymousClassDeclaration extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final AnonymousClassDeclaration wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("AnonymousClassDeclaration", 1);
+    
+    WrappedAnonymousClassDeclaration(AnonymousClassDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.bodyDeclarations());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public AnonymousClassDeclaration getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ArrayAccess;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedArrayAccess extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ArrayAccess wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ArrayAccess", 2);
+    
+    WrappedArrayAccess(ArrayAccess wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getArray());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getIndex());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ArrayAccess getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java)
@@ -0,0 +1,45 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ArrayCreation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedArrayCreation extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ArrayCreation wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ArrayCreation", 3);
+    
+    WrappedArrayCreation(ArrayCreation wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getType());
+        case 1:
+            return ECJFactory.wrap(wrappee.dimensions());
+        case 2:
+            return ECJFactory.wrapExpression(wrappee.getInitializer());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ArrayCreation getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java)
@@ -0,0 +1,39 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ArrayInitializer;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedArrayInitializer extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ArrayInitializer wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ArrayInitializer", 1);
+    
+    WrappedArrayInitializer(ArrayInitializer wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.expressions());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ArrayInitializer getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ArrayType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedArrayType extends WrappedType {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ArrayType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ArrayType", 3);
+    
+    WrappedArrayType(ArrayType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapType(wrappee.getComponentType());
+        case 1:
+            return ECJFactory.wrap(wrappee.getDimensions());
+        case 2:
+            return ECJFactory.wrapType(wrappee.getElementType());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ArrayType getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.AssertStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedAssertStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final AssertStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("AssertStatement", 2);
+    
+    WrappedAssertStatement(AssertStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getMessage());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public AssertStatement getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java)
@@ -0,0 +1,45 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Assignment;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedAssignment extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final Assignment wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("Assignment", 3);
+    
+    WrappedAssignment(Assignment wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+        	return ECJFactory.wrap(wrappee.getOperator());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getLeftHandSide());
+        case 2:
+            return ECJFactory.wrapExpression(wrappee.getRightHandSide());
+        }
+
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public Assignment getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java)
@@ -0,0 +1,65 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Assignment;
+import org.eclipse.jdt.core.dom.Assignment.Operator;
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedAssignmentOperator extends AbstractWrappedECJNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final Assignment.Operator wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("AssignmentOperator", 1);
+    
+    WrappedAssignmentOperator(Assignment.Operator wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0) {
+            if(wrappee == Operator.ASSIGN)
+                return ECJFactory.wrap("=");
+            else if(wrappee == Operator.PLUS_ASSIGN)
+                return ECJFactory.wrap("+=");
+            else if(wrappee == Operator.MINUS_ASSIGN)
+                return ECJFactory.wrap("-=");
+            else if(wrappee == Operator.TIMES_ASSIGN)
+                return ECJFactory.wrap("*=");
+            else if(wrappee == Operator.DIVIDE_ASSIGN)
+                return ECJFactory.wrap("/=");
+            else if(wrappee == Operator.BIT_AND_ASSIGN)
+                return ECJFactory.wrap("&=");
+            else if(wrappee == Operator.BIT_OR_ASSIGN)
+                return ECJFactory.wrap("|=");
+            else if(wrappee == Operator.BIT_XOR_ASSIGN)
+                return ECJFactory.wrap("^=");
+            else if(wrappee == Operator.LEFT_SHIFT_ASSIGN)
+                return ECJFactory.wrap("<<=");
+            else if(wrappee == Operator.REMAINDER_ASSIGN)
+                return ECJFactory.wrap("%=");
+            else if(wrappee == Operator.RIGHT_SHIFT_SIGNED_ASSIGN)
+                return ECJFactory.wrap(">>=");
+            else if(wrappee == Operator.RIGHT_SHIFT_UNSIGNED_ASSIGN)
+                return ECJFactory.wrap(">>>=");
+            else
+                throw new NotImplementedException();
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public Assignment.Operator getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Block;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedBlock extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final Block wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("Block", 1); 
+    
+    WrappedBlock(Block wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.statements());
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public Block getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java)
@@ -0,0 +1,37 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.BlockComment;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedBlockComment extends WrappedComment {
+    
+    private static final long serialVersionUID = 1L;
+
+    // FIXME where's the content?
+    private final BlockComment wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("BlockComment", 0);
+    
+    WrappedBlockComment(BlockComment wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+	    throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public BlockComment getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java)
@@ -0,0 +1,22 @@
+/*
+ * Created on 25. des.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.BodyDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedBodyDeclaration extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedBodyDeclaration(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+
+    public abstract BodyDeclaration getWrappee();
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java)
@@ -0,0 +1,39 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.BooleanLiteral;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedBooleanLiteral extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final BooleanLiteral wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("BooleanLiteral", 1);
+    
+    WrappedBooleanLiteral(BooleanLiteral wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            // FIXME Translate to True/False 
+            return ECJFactory.wrap(wrappee.booleanValue() ? 1 : 0);
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public BooleanLiteral getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java)
@@ -0,0 +1,36 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PrimitiveType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedBooleanType extends WrappedType {
+
+    private static final long serialVersionUID = 1L;
+
+    private final PrimitiveType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("BooleanType", 0);
+    
+    WrappedBooleanType(PrimitiveType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return null;
+    }
+
+    @Override
+    public PrimitiveType getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java)
@@ -0,0 +1,39 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.BreakStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedBreakStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final BreakStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("BreakStatement", 1);
+    
+    WrappedBreakStatement(BreakStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapName(wrappee.getLabel());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public BreakStatement getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java)
@@ -0,0 +1,35 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PrimitiveType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedByteType extends WrappedType {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final PrimitiveType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ByteType", 0);
+    
+    WrappedByteType(PrimitiveType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return null;
+    }
+
+    @Override
+    public PrimitiveType getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.CastExpression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedCastExpression extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final CastExpression wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("CastExpression", 2);
+    
+    WrappedCastExpression(CastExpression wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapType(wrappee.getType());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        }
+         
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public CastExpression getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.CatchClause;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedCatchClause extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final CatchClause wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("CatchClause", 2);
+    
+    WrappedCatchClause(CatchClause wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getException());
+        case 1:
+            return ECJFactory.wrap(wrappee.getBody());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public CatchClause getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.CharacterLiteral;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedCharacterLiteral extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final CharacterLiteral wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("CharacterLiteral", 1);
+    
+    WrappedCharacterLiteral(CharacterLiteral wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.charValue());
+        
+        throw new ArrayIndexOutOfBoundsException(); 
+    }
+
+    @Override
+    public CharacterLiteral getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java)
@@ -0,0 +1,47 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ClassInstanceCreation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedClassInstanceCreation extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ClassInstanceCreation wrappee;
+
+    private final static IStrategoConstructor CTOR = new ASTCtor("ClassInstanceCreation", 4);
+
+    WrappedClassInstanceCreation(ClassInstanceCreation wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch (index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrapType(wrappee.getType());
+        case 2:
+            return ECJFactory.wrap(wrappee.getAnonymousClassDeclaration());
+        case 3:
+            return ECJFactory.wrap(wrappee.arguments());
+        }
+
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ClassInstanceCreation getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedComment.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedComment.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedComment.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedComment.java)
@@ -0,0 +1,19 @@
+/*
+ * Created on 25. des.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedComment extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedComment(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 27. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedCompilationUnit extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final CompilationUnit wrappee;
+    private static final IStrategoConstructor CTOR = new ASTCtor("CompilationUnit", 3); 
+    
+    public WrappedCompilationUnit(CompilationUnit wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getPackage());
+        case 1:
+            return ECJFactory.wrap(wrappee.imports());
+        case 2:
+            return ECJFactory.wrap(wrappee.types());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public CompilationUnit getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ConditionalExpression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedConditionalExpression extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ConditionalExpression wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ConditionalExpression", 3);
+    
+    WrappedConditionalExpression(ConditionalExpression wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0: 
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getThenExpression());
+        case 2:
+            return ECJFactory.wrapExpression(wrappee.getElseExpression());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ConditionalExpression getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ConstructorInvocation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedConstructorInvocation extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ConstructorInvocation wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ConstructorInvocation", 1);
+    
+    WrappedConstructorInvocation(ConstructorInvocation wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.arguments());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ConstructorInvocation getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ContinueStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedContinueStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ContinueStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ContinueStatement", 1);
+    
+    WrappedContinueStatement(ContinueStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.getLabel());
+            
+        throw new ArrayIndexOutOfBoundsException(); 
+    }
+
+    @Override
+    public ContinueStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.DoStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedDoStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final DoStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("DoStatement", 2);
+    
+    WrappedDoStatement(DoStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrapStatement(wrappee.getBody());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public DoStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java)
@@ -0,0 +1,34 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PrimitiveType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedDoubleType extends WrappedType {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final PrimitiveType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("DoubleType", 0);
+    
+    WrappedDoubleType(PrimitiveType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return null;
+    }
+
+    @Override
+    public PrimitiveType getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java)
@@ -0,0 +1,35 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.EmptyStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedEmptyStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final EmptyStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("EmptyStatement", 0);
+    
+    WrappedEmptyStatement(EmptyStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public EmptyStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java)
@@ -0,0 +1,45 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.EnhancedForStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedEnhancedForStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final EnhancedForStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("EnhancedForStatement", 3);
+    
+    WrappedEnhancedForStatement(EnhancedForStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getParameter());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 2:
+            return ECJFactory.wrapStatement(wrappee.getBody());
+        
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public EnhancedForStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java)
@@ -0,0 +1,46 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedEnumConstantDeclaration extends WrappedBodyDeclaration {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final EnumConstantDeclaration wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("EnumConstantDeclaration", 4);
+    
+    WrappedEnumConstantDeclaration(EnumConstantDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 1:
+            return ECJFactory.wrap(wrappee.getName());
+        case 2:
+            return ECJFactory.wrap(wrappee.arguments());
+        case 3:
+            return ECJFactory.wrap(wrappee.getAnonymousClassDeclaration());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public EnumConstantDeclaration getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java)
@@ -0,0 +1,49 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.EnumDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedEnumDeclaration extends WrappedAbstractTypeDeclaration {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final EnumDeclaration wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("EnumDeclaration", 5);
+    
+    WrappedEnumDeclaration(EnumDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 1:
+            return ECJFactory.wrap(wrappee.getName());
+        case 2:
+            return ECJFactory.wrap(wrappee.superInterfaceTypes());
+        case 3:
+            return ECJFactory.wrap(wrappee.enumConstants());
+        case 4:
+            return ECJFactory.wrap(wrappee.bodyDeclarations());
+
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public EnumDeclaration getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java)
@@ -0,0 +1,22 @@
+/*
+ * Created on 25. des.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Expression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedExpression extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedExpression(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+    
+    public abstract Expression getWrappee();
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java)
@@ -0,0 +1,37 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ExpressionStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedExpressionStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ExpressionStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ExpressionStatement", 1);
+    
+    public WrappedExpressionStatement(ExpressionStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ExpressionStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.FieldAccess;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedFieldAccess extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final FieldAccess wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("FieldAccess", 2); 
+    
+    WrappedFieldAccess(FieldAccess wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrap(wrappee.getName());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public FieldAccess getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java)
@@ -0,0 +1,46 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.FieldDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedFieldDeclaration extends WrappedBodyDeclaration {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final FieldDeclaration wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("FieldDeclaration", 4);
+    
+    WrappedFieldDeclaration(FieldDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getJavadoc());
+        case 1:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 2:
+            return ECJFactory.wrapType(wrappee.getType());
+        case 3:
+            return ECJFactory.wrap(wrappee.fragments());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public FieldDeclaration getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java)
@@ -0,0 +1,34 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PrimitiveType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedFloatType extends WrappedType {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final PrimitiveType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("FloatType", 0);
+    
+    WrappedFloatType(PrimitiveType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return null;
+    }
+
+    @Override
+    public PrimitiveType getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java)
@@ -0,0 +1,46 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ForStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedForStatement extends WrappedStatement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ForStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ForStatement", 4);
+    
+    WrappedForStatement(ForStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.initializers());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 2:
+            return ECJFactory.wrap(wrappee.updaters());
+        case 3:
+            return ECJFactory.wrapStatement(wrappee.getBody());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ForStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 10. mars. 2007
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.IBinding;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIBinding extends AbstractWrappedBinding {
+    
+    private static final long serialVersionUID = 1L;
+    
+    private final IBinding wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("Binding", 3);
+
+    protected WrappedIBinding(IBinding wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee; 
+    }
+
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getKind());
+        case 1:
+            return ECJFactory.wrap(wrappee.getModifiers());
+        case 2:
+            return ECJFactory.wrap(wrappee.getName());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public IBinding getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 28. feb.. 2007
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.ICompilationUnit;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedICompilationUnit extends AbstractWrappedECJNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final ICompilationUnit wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ICompilationUnit", 2);
+
+    WrappedICompilationUnit(ICompilationUnit wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getElementName());
+        case 1:
+            return ECJFactory.wrap(wrappee.hashCode());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    
+    @Override
+    public ICompilationUnit getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIField.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIField.java)
@@ -0,0 +1,52 @@
+/*
+ * Created on 15 oct. 2008
+ *
+ * Copyright (c) 2008, Karl Trygve Kalleberg <karltk at strategoxt.org>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.IField;
+import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.core.Signature;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIField extends AbstractWrappedECJNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final IField wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("IField", 3);
+
+    WrappedIField(IField wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapDottedName(wrappee.getElementName());
+        case 1:
+            return ECJFactory.wrap(wrappee.hashCode());
+        case 2:
+            try {
+            	return ECJFactory.wrap(Signature.getReturnType(wrappee.getTypeSignature()));
+            } catch (IllegalArgumentException e) {
+            	return None.INSTANCE;
+            } catch (JavaModelException e) {
+            	return None.INSTANCE;
+            }
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+	@Override
+    public IField getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java)
@@ -0,0 +1,40 @@
+/*
+ * Created on 10. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.core.resources.IFile;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIFile extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final IFile wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ECJFile", 2);
+    
+    WrappedIFile(IFile wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getName());
+        case 1:
+            return ECJFactory.wrap(wrappee.hashCode());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    public IFile getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.IJavaElement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIJavaElement extends AbstractECJAppl {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final IJavaElement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("IJavaElement", 1);
+    
+    WrappedIJavaElement(IJavaElement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    protected WrappedIJavaElement(IStrategoConstructor ctor, IJavaElement wrappee) {
+    	super(ctor);
+    	this.wrappee = wrappee;
+	}
+
+	public IJavaElement getWrappee() {
+        return wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0) {
+            return ECJFactory.wrap(wrappee.hashCode());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java)
@@ -0,0 +1,41 @@
+/*
+ * Created on 10. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.IJavaProject;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIJavaProject extends WrappedIJavaElement {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final IJavaProject wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ECJJavaProject", 2);
+    
+    WrappedIJavaProject(IJavaProject wrappee) {
+        super(CTOR, wrappee);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getElementName());
+        case 1:
+            return ECJFactory.wrap(wrappee.hashCode());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    public IJavaProject getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java)
@@ -0,0 +1,46 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.IMethodBinding;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIMethodBinding extends AbstractWrappedBinding {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final IMethodBinding wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("MethodBinding", 4);
+    
+    WrappedIMethodBinding(IMethodBinding wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    public IMethodBinding getWrappee() {
+        return wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            // FIXME should become a QualifiedName
+            return ECJFactory.wrap(wrappee.getDeclaringClass());
+        case 1:
+            return ECJFactory.wrap(wrappee.getName());
+        case 2:
+            return ECJFactory.wrap(wrappee.getReturnType());
+        case 3:
+            return ECJFactory.wrap(wrappee.getParameterTypes());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 10. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.core.resources.IProject;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIProject extends AbstractECJAppl {
+
+    private static final long serialVersionUID = 1L;
+
+    private final IProject wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ECJProject", 2);
+    
+    WrappedIProject(IProject wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getName());
+        case 1:
+            return ECJFactory.wrap(wrappee.hashCode());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    public IProject getWrappee() {
+        return wrappee;
+    }
+
+    // FIXME use hashtable instead -- preserves project equality tests
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIType.java)
@@ -0,0 +1,101 @@
+/*
+ * Created on 28. feb.. 2007
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.IType;
+import org.eclipse.jdt.core.JavaModelException;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIType extends AbstractWrappedECJNode {
+
+    private static final long serialVersionUID = 1L;
+
+    private final IType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("IType", 6);
+
+    WrappedIType(IType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapDottedName(wrappee.getFullyQualifiedName());
+        case 1:
+            return ECJFactory.wrap(wrappee.hashCode());
+        case 2:
+            return ECJFactory.wrap(wrappee.getDeclaringType());
+        case 3:
+            try {
+            	return resolveDottedName(wrappee.getSuperclassName());
+            } catch(JavaModelException e) {
+                e.printStackTrace();
+                return None.INSTANCE;
+            }
+        case 4:
+            try {
+                return resolveDottedNames(wrappee.getSuperInterfaceNames());
+            } catch(JavaModelException e) {
+                e.printStackTrace();
+                return None.INSTANCE;
+            }
+        case 5:
+        	try {
+        		return ECJFactory.wrap(wrappee.getTypeParameters());
+        	} catch(JavaModelException e) {
+        		e.printStackTrace();
+        		return None.INSTANCE;
+        	}
+/*        	
+        case 6:
+        	try {
+        		return ECJFactory.wrap(wrappee.getFields());
+        	} catch(JavaModelException e) {
+        		e.printStackTrace();
+        		return None.INSTANCE;
+        	}
+*/        	
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    
+    private IStrategoTerm resolveDottedNames(String[] names) throws JavaModelException {
+    	final IStrategoTerm[] resolved = new IStrategoTerm[names.length];
+    	for(int i = 0; i < names.length; i++)
+    		resolved[i] = resolveDottedName(names[i]);
+    	return new ECJGenericList(resolved);
+	}
+
+	private IStrategoTerm resolveDottedName(final String name) throws JavaModelException {
+    	if(name == null)
+    		return ECJFactory.wrap((String)name);
+    	String[][] candidates = wrappee.resolveType(name);
+    	if(candidates == null)
+    		return ECJFactory.wrap((String)null);
+    	if(candidates.length == 1 && candidates[0].length == 2)
+    		return ECJFactory.wrapDottedName(saneConcat(candidates[0][0], candidates[0][1]));
+    	return ECJFactory.wrapAmbName(saneConcat(candidates[0][0], candidates[0][1]));
+	}
+	
+	private static String saneConcat(final String prefix, final String name) {
+		if(prefix.length() > 0) {
+			return prefix + "." + name;
+		} else 
+			return name;
+	}
+
+	@Override
+    public IType getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java)
@@ -0,0 +1,61 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ITypeBinding;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedITypeBinding extends AbstractWrappedBinding {
+
+    private static final long serialVersionUID = 1L;
+
+    private final ITypeBinding wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("TypeBinding", 7);
+    
+    WrappedITypeBinding(ITypeBinding wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    public ITypeBinding getWrappee() {
+        return wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            if(wrappee.getPackage() == null)
+                return None.INSTANCE;
+            else 
+                return ECJFactory.wrap(wrappee.getPackage().getNameComponents());
+        case 1:
+            return ECJFactory.wrap(wrappee.getQualifiedName());
+        case 2:
+        	final ITypeBinding[] tb = wrappee.getTypeArguments();
+        	final String[] ss = new String[tb.length];
+        	for(int i = 0; i < tb.length; i++)
+        		ss[i] = tb[i].getQualifiedName();
+            return ECJFactory.wrap(ss);
+        case 3:
+            if(wrappee.getSuperclass() == null)
+                return None.INSTANCE;
+            else 
+                return ECJFactory.wrap(wrappee.getSuperclass());
+        case 4:
+            return ECJFactory.wrap(wrappee.getInterfaces());
+        case 5:
+            return ECJFactory.wrap(wrappee.getDimensions());
+        case 6:
+            return ECJFactory.wrap(wrappee.getElementType());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java)
@@ -0,0 +1,36 @@
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.IType;
+import org.eclipse.jdt.core.ITypeHierarchy;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedITypeHierarchy extends AbstractECJAppl {
+
+    private static final long serialVersionUID = 1L;
+
+    private final static IStrategoConstructor CTOR = new ASTCtor("ITypeHierarchy", 2);
+	private final ITypeHierarchy wrappee;
+	
+	protected WrappedITypeHierarchy(ITypeHierarchy wrappee) {
+		super(CTOR);
+		this.wrappee = wrappee;
+	}
+
+	@Override
+	public IStrategoTerm getSubterm(int index) {
+		switch(index) {
+		case 0: 
+			return new WrappedIType(wrappee.getType());
+		case 1:
+			final IType[] types = wrappee.getAllSubtypes(wrappee.getType());
+			final IStrategoTerm[] terms = new IStrategoTerm[types.length];
+			for(int i = 0; i < types.length; i++)
+				terms[i] = ECJFactory.wrap(types[i]);
+			return new ECJGenericList(terms);
+		default:
+			throw new ArrayIndexOutOfBoundsException();
+		}
+	}
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java)
@@ -0,0 +1,46 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.ITypeParameter;
+import org.eclipse.jdt.core.JavaModelException;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedITypeParameter extends AbstractECJAppl {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final ITypeParameter wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ITypeParameter", 2);
+    
+    WrappedITypeParameter(ITypeParameter wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    public ITypeParameter getWrappee() {
+        return wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+        	return ECJFactory.wrap(wrappee.getElementName());
+        case 1:
+        	try {
+        		return ECJFactory.wrap(wrappee.getBounds());
+        	} catch(JavaModelException e) {
+        		e.printStackTrace();
+        		return None.INSTANCE;
+        	}
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.IfStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIfStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final IfStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("IfStatement", 3); 
+    
+    WrappedIfStatement(IfStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrapStatement(wrappee.getThenStatement());
+        case 2:
+            return ECJFactory.wrapStatement(wrappee.getElseStatement());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public IfStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java)
@@ -0,0 +1,48 @@
+/*
+ * Created on 27. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ImportDeclaration;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedImportDeclaration extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    private ImportDeclaration wrappee;
+    public final static ASTCtor CTOR = new ASTCtor("ImportDeclaration", 3); 
+    
+    public WrappedImportDeclaration(ImportDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+        	return ECJFactory.wrapName(wrappee.getName());
+        case 1:
+        	return ECJFactory.wrap(wrappee.isStatic() ? 1 : 0);
+        case 2: 
+        	return ECJFactory.wrap(wrappee.isOnDemand() ? 1 : 0);
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public int getSubtermCount() {
+        return 3;
+    }
+
+    @Override
+    public ImportDeclaration getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java)
@@ -0,0 +1,48 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.InfixExpression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedInfixExpression extends WrappedExpression {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final InfixExpression wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("InfixExpression", 4);
+    
+    WrappedInfixExpression(InfixExpression wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            // FIXME should probably convert to Plus/Minus/Divide/Times/...
+            return ECJFactory.wrap(wrappee.getOperator().toString());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getLeftOperand());
+        case 2:
+            return ECJFactory.wrapExpression(wrappee.getRightOperand());
+        case 3: 
+        	return ECJFactory.wrap(wrappee.extendedOperands());
+            
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public InfixExpression getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java)
@@ -0,0 +1,39 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Initializer;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedInitializer extends WrappedBodyDeclaration {
+
+    private static final long serialVersionUID = 1L;
+
+    private final Initializer wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("Initializer", 1);
+    
+    WrappedInitializer(Initializer wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0) 
+            return ECJFactory.wrap(wrappee.getBody());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public Initializer getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java)
@@ -0,0 +1,41 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.InstanceofExpression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedInstanceofExpression extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final InstanceofExpression wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("InstanceofExpression", 2);
+    
+    WrappedInstanceofExpression(InstanceofExpression wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getLeftOperand());
+        case 1:
+            return ECJFactory.wrapType(wrappee.getRightOperand());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public InstanceofExpression getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java)
@@ -0,0 +1,35 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PrimitiveType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedIntType extends WrappedType {
+
+    private static final long serialVersionUID = 1L;
+
+    private final PrimitiveType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("IntType", 0);
+    
+    public WrappedIntType(PrimitiveType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return null;
+    }
+
+    @Override
+    public PrimitiveType getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Javadoc;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedJavadoc extends WrappedComment {
+
+    private static final long serialVersionUID = 1L;
+
+    private final Javadoc wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("Javadoc", 1);
+    
+    WrappedJavadoc(Javadoc wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.tags());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public Javadoc getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.LabeledStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedLabeledStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final LabeledStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("LabeledStatement", 2);
+    
+    WrappedLabeledStatement(LabeledStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getLabel());
+        case 1:
+            return ECJFactory.wrapStatement(wrappee.getBody());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public LabeledStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.LineComment;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedLineComment extends WrappedComment {
+
+    private static final long serialVersionUID = 1L;
+
+    // FIXME where is the content?
+    private final LineComment wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("LineComment", 0);
+    
+    WrappedLineComment(LineComment wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+	
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public LineComment getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java)
@@ -0,0 +1,34 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PrimitiveType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedLongType extends WrappedType {
+
+    private static final long serialVersionUID = 1L;
+
+    private final PrimitiveType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("LongType", 0);
+    
+    WrappedLongType(PrimitiveType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        return null;
+    }
+
+    @Override
+    public PrimitiveType getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java)
@@ -0,0 +1,45 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.IExtendedModifier;
+import org.eclipse.jdt.core.dom.MarkerAnnotation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedMarkerAnnotation extends WrappedAnnotation {
+
+    private static final long serialVersionUID = 1L;
+
+    // FIXME improve
+    private final MarkerAnnotation wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("MarkerAnnotation", 1);
+    
+    WrappedMarkerAnnotation(MarkerAnnotation wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapName(wrappee.getTypeName());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public MarkerAnnotation getWrappee() {
+        return wrappee;
+    }
+
+    public IExtendedModifier getModifierWrappee() {
+    	return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.MemberRef;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedMemberRef extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    private final MemberRef wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("MemberRef", 2);
+    
+    WrappedMemberRef(MemberRef wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getName());
+        case 1:
+            return ECJFactory.wrapName(wrappee.getQualifier());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public MemberRef getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.MemberValuePair;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedMemberValuePair extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    private final MemberValuePair wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("MemberValuePair", 2);
+    
+    WrappedMemberValuePair(MemberValuePair wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            ECJFactory.wrap(wrappee.getName());
+        case 1:
+            ECJFactory.wrapExpression(wrappee.getValue());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public MemberValuePair getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java)
@@ -0,0 +1,53 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedMethodDeclaration extends WrappedBodyDeclaration {
+
+    private static final long serialVersionUID = 1L;
+
+    private final MethodDeclaration wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("MethodDeclaration", 8); 
+    
+    WrappedMethodDeclaration(MethodDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getJavadoc());
+        case 1:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 2:
+            return ECJFactory.wrapType(wrappee.getReturnType2());
+        case 3:
+            return ECJFactory.wrap(wrappee.typeParameters());
+        case 4:
+            return ECJFactory.wrap(wrappee.getName());
+        case 5:
+            return ECJFactory.wrap(wrappee.parameters());
+        case 6:
+            return ECJFactory.wrap(wrappee.thrownExceptions());
+        case 7:
+            return ECJFactory.wrap(wrappee.getBody());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public MethodDeclaration getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java)
@@ -0,0 +1,46 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.MethodInvocation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedMethodInvocation extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final MethodInvocation wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("MethodInvocation", 4);
+    
+    WrappedMethodInvocation(MethodInvocation wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrap(wrappee.getName());
+        case 2:
+            return ECJFactory.wrap(wrappee.typeArguments());
+        case 3:
+            return ECJFactory.wrap(wrappee.arguments());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public MethodInvocation getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.MethodRef;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedMethodRef extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    private final MethodRef wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("MethodRef", 3);
+    
+    WrappedMethodRef(MethodRef wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getName());
+        case 1:
+            return ECJFactory.wrapName(wrappee.getQualifier());
+        case 2:
+            return ECJFactory.wrap(wrappee.parameters());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public MethodRef getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.MethodRefParameter;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedMethodRefParameter extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    private final MethodRefParameter wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("MethodRefParameter", 2);
+    
+    WrappedMethodRefParameter(MethodRefParameter wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapType(wrappee.getType());
+        case 1:
+            return ECJFactory.wrap(wrappee.getName());
+            // FIXME Varags
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public MethodRefParameter getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.IExtendedModifier;
+import org.eclipse.jdt.core.dom.Modifier;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedModifier extends WrappedASTNode implements IWrappedExtendedModifier {
+
+    private static final long serialVersionUID = 1L;
+
+    private final Modifier wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("Modifier", 1);
+    
+    WrappedModifier(Modifier wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.getKeyword());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public Modifier getWrappee() {
+        return wrappee;
+    }
+    
+    public IExtendedModifier getModifierWrappee() {
+    	return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Modifier;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedModifierKeyword extends AbstractWrappedECJNode {
+
+    private static final long serialVersionUID = 1L;
+
+    private final Modifier.ModifierKeyword wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ModifierKeyword", 1);
+    
+    WrappedModifierKeyword(Modifier.ModifierKeyword wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.toFlagValue());
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public Modifier.ModifierKeyword getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedName.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedName.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedName.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedName.java)
@@ -0,0 +1,22 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Name;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedName extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedName(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+    
+    public abstract Name getWrappee();
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java)
@@ -0,0 +1,47 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.IExtendedModifier;
+import org.eclipse.jdt.core.dom.NormalAnnotation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedNormalAnnotation extends WrappedAnnotation {
+
+    private static final long serialVersionUID = 1L;
+
+    private final NormalAnnotation wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("NormalAnnotation", 2);
+    
+    WrappedNormalAnnotation(NormalAnnotation wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapName(wrappee.getTypeName());
+        case 1:
+            return ECJFactory.wrap(wrappee.values());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public NormalAnnotation getWrappee() {
+        return wrappee;
+    }
+    
+    public IExtendedModifier getModifierWrappee() {
+    	return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java)
@@ -0,0 +1,35 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.NullLiteral;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedNullLiteral extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final NullLiteral wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("NullLiteral", 0);
+    
+    WrappedNullLiteral(NullLiteral wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public NullLiteral getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java)
@@ -0,0 +1,36 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.NumberLiteral;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedNumberLiteral extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final NumberLiteral wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("NumberLiteral", 1);
+    
+    WrappedNumberLiteral(NumberLiteral wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.getToken());
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public NumberLiteral getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PackageDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedPackageDeclaration extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    private static final IStrategoConstructor CTOR = new ASTCtor("PackageDeclaration", 3); 
+    private final PackageDeclaration wrappee;
+    
+    protected WrappedPackageDeclaration(PackageDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getJavadoc());
+        case 1:
+            return ECJFactory.wrap(wrappee.annotations());
+        case 2:
+            return ECJFactory.wrapName(wrappee.getName());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public PackageDeclaration getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ParameterizedType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedParameterizedType extends WrappedType {
+
+    private static final long serialVersionUID = 1L;
+
+    private final ParameterizedType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ParameterizedType", 2);
+    
+    
+    WrappedParameterizedType(ParameterizedType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapType(wrappee.getType());
+        case 1:
+            return ECJFactory.wrap(wrappee.typeArguments());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ParameterizedType getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ParenthesizedExpression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedParenthesizedExpression extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final ParenthesizedExpression wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ParenthesizedExpression", 1);
+    
+    WrappedParenthesizedExpression(ParenthesizedExpression wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ParenthesizedExpression getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PostfixExpression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedPostfixExpression extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final PostfixExpression wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("PostfixExpression", 2);
+    
+    WrappedPostfixExpression(PostfixExpression wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getOperator());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getOperand());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public PostfixExpression getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java)
@@ -0,0 +1,45 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PostfixExpression;
+import org.eclipse.jdt.core.dom.PostfixExpression.Operator;
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedPostfixExpressionOperator extends AbstractWrappedECJNode {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final PostfixExpression.Operator wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("PostfixExpressionOperator", 1);
+    
+    WrappedPostfixExpressionOperator(PostfixExpression.Operator wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0) {
+            if(wrappee == Operator.DECREMENT)
+                return ECJFactory.wrap("--");
+            else if(wrappee == Operator.INCREMENT)
+                return ECJFactory.wrap("++");
+            else
+                throw new NotImplementedException();
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public PostfixExpression.Operator getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PrefixExpression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedPrefixExpression extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final PrefixExpression wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("PrefixExpression", 2);
+    
+    WrappedPrefixExpression(PrefixExpression wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getOperator());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getOperand());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public PrefixExpression getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java)
@@ -0,0 +1,55 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PrefixExpression;
+import org.eclipse.jdt.core.dom.PrefixExpression.Operator;
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedPrefixExpressionOperator extends AbstractWrappedECJNode {
+
+    private static final long serialVersionUID = 1L;
+
+    private final PrefixExpression.Operator wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("PrefixExpressionOperator", 1);
+    
+    WrappedPrefixExpressionOperator(PrefixExpression.Operator wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0) {
+            // FIXME use constants
+            if(wrappee == Operator.COMPLEMENT)
+                return ECJFactory.wrap("~");
+            if(wrappee == Operator.DECREMENT)
+                return ECJFactory.wrap("--");
+            if(wrappee == Operator.INCREMENT)
+                return ECJFactory.wrap("++");
+            if(wrappee == Operator.MINUS)
+                return ECJFactory.wrap("-");
+            if(wrappee == Operator.NOT)
+                return ECJFactory.wrap("!");
+            if(wrappee == Operator.PLUS)
+                return ECJFactory.wrap("+");
+            else
+                throw new NotImplementedException();
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public PrefixExpression.Operator getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java)
@@ -0,0 +1,62 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.PrimitiveType;
+import org.eclipse.jdt.core.dom.PrimitiveType.Code;
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedPrimitiveType extends WrappedType {
+
+    private static final long serialVersionUID = 1L;
+
+    // FIXME should we even keep this?
+    
+    private final PrimitiveType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("PrimitiveType", 1);
+    
+    WrappedPrimitiveType(PrimitiveType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0) {
+            Code code = wrappee.getPrimitiveTypeCode();
+            if(code == PrimitiveType.DOUBLE)
+                return ECJFactory.wrap("double");
+            if(code == PrimitiveType.FLOAT)
+                return ECJFactory.wrap("float");
+            if(code == PrimitiveType.INT)
+                return ECJFactory.wrap("int");
+            if(code == PrimitiveType.BYTE)
+                return ECJFactory.wrap("byte");
+            if(code == PrimitiveType.BOOLEAN)
+                return ECJFactory.wrap("boolean");
+            if(code == PrimitiveType.CHAR)
+                return ECJFactory.wrap("char");
+            if(code == PrimitiveType.LONG)
+                return ECJFactory.wrap("long");
+            if(code == PrimitiveType.SHORT)
+                return ECJFactory.wrap("short");
+            if(code == PrimitiveType.VOID)
+                return ECJFactory.wrap("void");
+            else
+                throw new NotImplementedException("Unknown primitive type: " + code.getClass() + " " + code.toString());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public PrimitiveType getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.QualifiedName;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedQualifiedName extends WrappedName {
+
+    private static final long serialVersionUID = 1L;
+
+    private final QualifiedName wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("QualifiedName", 2);
+    
+    WrappedQualifiedName(QualifiedName wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapName(wrappee.getQualifier());
+        case 1:
+            return ECJFactory.wrap(wrappee.getName());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public QualifiedName getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.QualifiedType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedQualifiedType extends WrappedType {
+
+    private static final long serialVersionUID = 1L;
+
+    private final QualifiedType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("QualifiedType", 2);
+    
+    WrappedQualifiedType(QualifiedType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getName());
+        case 1:
+            return ECJFactory.wrapType(wrappee.getQualifier());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public QualifiedType getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ReturnStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedReturnStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final ReturnStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ReturnStatement", 1);
+    
+    WrappedReturnStatement(ReturnStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ReturnStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java)
@@ -0,0 +1,37 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.SimpleName;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSimpleName extends WrappedName {
+
+    private static final long serialVersionUID = 1L;
+
+    private final SimpleName wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SimpleName", 1); 
+
+    WrappedSimpleName(SimpleName wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.getIdentifier());
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SimpleName getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.SimpleType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSimpleType extends WrappedType {
+
+    private static final long serialVersionUID = 1L;
+
+    private final SimpleType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SimpleType", 1);
+    
+    WrappedSimpleType(SimpleType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapName(wrappee.getName());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SimpleType getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java)
@@ -0,0 +1,47 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.IExtendedModifier;
+import org.eclipse.jdt.core.dom.SingleMemberAnnotation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSingleMemberAnnotation extends WrappedAnnotation {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final SingleMemberAnnotation wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SingleMemberAnnotation", 2);
+    
+    WrappedSingleMemberAnnotation(SingleMemberAnnotation wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapName(wrappee.getTypeName());
+        case 1:
+            return ECJFactory.wrapExpression(wrappee.getValue());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SingleMemberAnnotation getWrappee() {
+        return wrappee;
+    }
+    
+    public IExtendedModifier getModifierWrappee() {
+    	return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java)
@@ -0,0 +1,47 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSingleVariableDeclaration extends WrappedVariableDeclaration {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final SingleVariableDeclaration wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SingleVariableDeclaration", 5);
+    
+    WrappedSingleVariableDeclaration(SingleVariableDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 1:
+            return ECJFactory.wrapType(wrappee.getType());
+        case 2:
+            return ECJFactory.wrap(wrappee.getName());
+        case 3:
+            return ECJFactory.wrap(wrappee.getExtraDimensions());
+        case 4:
+            return ECJFactory.wrapExpression(wrappee.getInitializer());
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SingleVariableDeclaration getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java)
@@ -0,0 +1,22 @@
+/*
+ * Created on 25. des.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Statement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedStatement extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedStatement(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+    
+    public abstract Statement getWrappee();
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java)
@@ -0,0 +1,39 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.StringLiteral;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedStringLiteral extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final StringLiteral wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("StringLiteral", 1); 
+        
+    WrappedStringLiteral(StringLiteral wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.getLiteralValue());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public StringLiteral getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java)
@@ -0,0 +1,45 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.SuperConstructorInvocation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSuperConstructorInvocation extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final SuperConstructorInvocation wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SuperConstructorInvocation", 3);
+    
+    WrappedSuperConstructorInvocation(SuperConstructorInvocation wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrap(wrappee.typeArguments());
+        case 2:
+            return ECJFactory.wrap(wrappee.arguments());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SuperConstructorInvocation getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.SuperFieldAccess;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSuperFieldAccess extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final SuperFieldAccess wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SuperFieldAccess", 2);
+    
+    WrappedSuperFieldAccess(SuperFieldAccess wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapName(wrappee.getQualifier());
+        case 1:
+            return ECJFactory.wrap(wrappee.getName());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SuperFieldAccess getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java)
@@ -0,0 +1,46 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.SuperMethodInvocation;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSuperMethodInvocation extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final SuperMethodInvocation wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SuperMethodInvocation", 4);
+    
+    WrappedSuperMethodInvocation(SuperMethodInvocation wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapName(wrappee.getQualifier());
+        case 1:
+            return ECJFactory.wrap(wrappee.typeArguments());
+        case 2:
+            return ECJFactory.wrap(wrappee.getName());
+        case 3:
+            return ECJFactory.wrap(wrappee.arguments());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SuperMethodInvocation getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java)
@@ -0,0 +1,40 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.SwitchCase;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSwitchCase extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    // FIXME default
+    
+    private final SwitchCase wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SwitchCase", 1);
+    
+    WrappedSwitchCase(SwitchCase wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SwitchCase getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.SwitchStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSwitchStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final SwitchStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SwitchStatement", 2);
+    
+    WrappedSwitchStatement(SwitchStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrap(wrappee.statements());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SwitchStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.SynchronizedStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedSynchronizedStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final SynchronizedStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("SynchronizedStatement", 2);
+    
+    WrappedSynchronizedStatement(SynchronizedStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrap(wrappee.getBody());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public SynchronizedStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.TagElement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedTagElement extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    // FIXME nested
+    
+    private final TagElement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("TagElement", 2);
+    
+    WrappedTagElement(TagElement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getTagName());
+        case 1:
+            return ECJFactory.wrap(wrappee.fragments());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public TagElement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.TextElement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedTextElement extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    private final TextElement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("TextElement", 1);
+    
+    WrappedTextElement(TextElement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrap(wrappee.getText());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public TextElement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ThisExpression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedThisExpression extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+    
+    private final ThisExpression wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ThisExpression", 1);
+    
+    WrappedThisExpression(ThisExpression wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapName(wrappee.getQualifier());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ThisExpression getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.ThrowStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedThrowStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final ThrowStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("ThrowStatement", 1);
+    
+    WrappedThrowStatement(ThrowStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0) 
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public ThrowStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.TryStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedTryStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final TryStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("TryStatement", 3);
+    
+    WrappedTryStatement(TryStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getBody());
+        case 1:
+            return ECJFactory.wrap(wrappee.catchClauses());
+        case 2:
+            return ECJFactory.wrap(wrappee.getFinally());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public TryStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedType.java)
@@ -0,0 +1,22 @@
+/*
+ * Created on 25. des.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.Type;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedType extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedType(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+    
+    public abstract Type getWrappee();
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java)
@@ -0,0 +1,54 @@
+/*
+ * Created on 29. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.TypeDeclaration;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedTypeDeclaration extends WrappedAbstractTypeDeclaration {
+
+    private static final long serialVersionUID = 1L;
+
+    private final TypeDeclaration wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("TypeDeclaration", 8); 
+    
+    protected WrappedTypeDeclaration(TypeDeclaration wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getJavadoc());
+        case 1:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 2:
+            return ECJFactory.wrap(wrappee.getName());
+        case 3:
+            return ECJFactory.wrap(wrappee.typeParameters());
+        case 4:
+            return ECJFactory.wrapType(wrappee.getSuperclassType());
+        case 5:
+            return ECJFactory.wrap(wrappee.superInterfaceTypes());
+        case 6:
+            return ECJFactory.wrap(wrappee.bodyDeclarations());
+        case 7:
+        	return ECJFactory.wrap(wrappee.isInterface() ? 1 : 0);
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public TypeDeclaration getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java)
@@ -0,0 +1,38 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.TypeDeclarationStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedTypeDeclarationStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final TypeDeclarationStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("TypeDeclarationStatement", 1);
+    
+    WrappedTypeDeclarationStatement(TypeDeclarationStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapTypeDecl(wrappee.getDeclaration());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public TypeDeclarationStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java)
@@ -0,0 +1,39 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.TypeLiteral;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedTypeLiteral extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final TypeLiteral wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("TypeLiteral", 1);
+    
+    WrappedTypeLiteral(TypeLiteral wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapType(wrappee.getType());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public TypeLiteral getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.TypeParameter;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedTypeParameter extends WrappedASTNode {
+    
+    private static final long serialVersionUID = 1L;
+
+    private final TypeParameter wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("TypeParameter", 2);
+    
+    WrappedTypeParameter(TypeParameter wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getName());
+        case 1:
+            return ECJFactory.wrap(wrappee.typeBounds());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public TypeParameter getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java)
@@ -0,0 +1,19 @@
+/*
+ * Created on 25. des.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+
+public abstract class WrappedVariableDeclaration extends WrappedASTNode {
+
+    private static final long serialVersionUID = 1L;
+
+    protected WrappedVariableDeclaration(IStrategoConstructor constructor) {
+        super(constructor);
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java)
@@ -0,0 +1,45 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.VariableDeclarationExpression;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedVariableDeclarationExpression extends WrappedExpression {
+
+    private static final long serialVersionUID = 1L;
+
+    private final VariableDeclarationExpression wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("VariableDeclarationExpression", 3);
+
+    WrappedVariableDeclarationExpression(VariableDeclarationExpression wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 1:
+            return ECJFactory.wrapType(wrappee.getType());
+        case 2:
+            return ECJFactory.wrap(wrappee.fragments());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public VariableDeclarationExpression getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedVariableDeclarationFragment extends WrappedVariableDeclaration {
+
+    private static final long serialVersionUID = 1L;
+
+    private final VariableDeclarationFragment wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("VariableDeclarationFragment", 3); 
+    
+    WrappedVariableDeclarationFragment(VariableDeclarationFragment wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.getName());
+        case 1:
+            return ECJFactory.wrap(wrappee.getExtraDimensions());
+        case 2:
+            return ECJFactory.wrapExpression(wrappee.getInitializer());
+        
+        }
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public VariableDeclarationFragment getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java)
@@ -0,0 +1,44 @@
+/*
+ * Created on 1. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedVariableDeclarationStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final VariableDeclarationStatement wrappee;  
+    private final static IStrategoConstructor CTOR = new ASTCtor("VariableDeclarationStatement", 3); 
+        
+    public WrappedVariableDeclarationStatement(VariableDeclarationStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0:
+            return ECJFactory.wrap(wrappee.modifiers());
+        case 1:
+            return ECJFactory.wrapType(wrappee.getType());
+        case 2:
+            return ECJFactory.wrap(wrappee.fragments());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public VariableDeclarationStatement getWrappee() {
+        return wrappee;
+    }
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java)
@@ -0,0 +1,43 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.WhileStatement;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedWhileStatement extends WrappedStatement {
+
+    private static final long serialVersionUID = 1L;
+
+    private final WhileStatement wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("WhileStatement", 2);
+    
+    WrappedWhileStatement(WhileStatement wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        switch(index) {
+        case 0: 
+            return ECJFactory.wrapExpression(wrappee.getExpression());
+        case 1:
+            return ECJFactory.wrapStatement(wrappee.getBody());
+        }
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public WhileStatement getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java)
@@ -0,0 +1,42 @@
+/*
+ * Created on 2. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.adapter.ecj;
+
+import org.eclipse.jdt.core.dom.WildcardType;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class WrappedWildcardType extends WrappedType {
+
+    /**
+     * 
+     */
+    private static final long serialVersionUID = 1L;
+    // FIXME isUpperBound()
+    private final WildcardType wrappee;
+    private final static IStrategoConstructor CTOR = new ASTCtor("WildcardType", 1);
+    
+    WrappedWildcardType(WildcardType wrappee) {
+        super(CTOR);
+        this.wrappee = wrappee;
+    }
+    
+    @Override
+    public IStrategoTerm getSubterm(int index) {
+        if(index == 0)
+            return ECJFactory.wrapType(wrappee.getBound());
+        
+        throw new ArrayIndexOutOfBoundsException();
+    }
+
+    @Override
+    public WildcardType getWrappee() {
+        return wrappee;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java)
@@ -0,0 +1,62 @@
+package org.spoofax.interpreter.library.ecj;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IWorkspace;
+import org.eclipse.core.resources.IWorkspaceRoot;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.jdt.core.ICompilationUnit;
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTParser;
+import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/*
+ * Created on 27. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+
+public class ECJParseAndResolveFile {
+
+    static void parse(String prg, String fileName) throws FileNotFoundException, IOException, InterpreterException, CoreException {
+
+        IWorkspace workspace = ResourcesPlugin.getWorkspace();
+        IWorkspaceRoot root = workspace.getRoot();
+        IProject project  = root.getProject("demo1");
+        IFile file = (IFile) project.findMember(fileName);
+        if (!project.isOpen()) project.open(null);
+        ICompilationUnit cu = JavaCore.createCompilationUnitFrom(file);
+        ASTParser parser = ASTParser.newParser(AST.JLS3);
+        parser.setResolveBindings(true);
+        parser.setSource(cu);
+        CompilationUnit n = (CompilationUnit)parser.createAST(null);
+
+        ECJFactory wef = new ECJFactory();
+        Interpreter itp = new Interpreter(wef);
+        itp.addOperatorRegistry(new ECJLibrary());
+        itp.load(prg);
+        IStrategoTerm t = wef.parseFromTree(n);
+        itp.setCurrent(t);
+        itp.invoke("main_0_0");
+
+    }
+    
+    
+    public static void main(String[] args) throws FileNotFoundException, IOException, InterpreterException, CoreException {
+       if(args.length > 1)
+            parse(args[0], args[1]);
+        else
+            parse("str/parse-and-dump.rtree", args[0]);
+    }
+    
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseFile.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseFile.java)
@@ -0,0 +1,62 @@
+package org.spoofax.interpreter.library.ecj;
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTParser;
+import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/*
+ * Created on 27. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+
+public class ECJParseFile {
+
+    private static char[] getBytes(String fileName) throws FileNotFoundException, IOException {
+
+        BufferedReader r = new BufferedReader(new FileReader(fileName));
+        StringBuilder sb = new StringBuilder();
+        String s = r.readLine();
+        while(s != null) {
+            sb.append(s);
+            s = r.readLine();
+        }
+            
+        return sb.toString().toCharArray();
+    }
+
+    static void parse(String prg, String file) throws FileNotFoundException, IOException, InterpreterException {
+
+        Interpreter itp = new Interpreter(new ECJFactory());
+        itp.addOperatorRegistry(new ECJLibrary());
+        itp.load(prg);
+        ASTParser parser = ASTParser.newParser(AST.JLS3);
+        parser.setSource(getBytes(file));
+        CompilationUnit cu = (CompilationUnit) parser.createAST(null);
+        //System.out.println(cu);
+        ECJFactory wef = new ECJFactory();
+        IStrategoTerm t = wef.parseFromTree(cu);
+        itp.setCurrent(t);
+        itp.invoke("main_0_0");
+
+    }
+    
+    
+    public static void main(String[] args) throws FileNotFoundException, IOException, InterpreterException {
+       if(args.length > 1)
+            parse(args[0], args[1]);
+        else
+            parse("str/parse-and-dump.rtree", args[0]);
+    }
+    
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseTest.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJParseTest.java)
@@ -0,0 +1,76 @@
+package org.spoofax.interpreter.library.ecj;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTParser;
+import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/*
+ * Created on 27. sep.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+
+public class ECJParseTest {
+
+    private static char[] getBytes(String fileName) throws FileNotFoundException, IOException {
+
+        BufferedReader r = new BufferedReader(new FileReader(fileName));
+        StringBuilder sb = new StringBuilder();
+        String s = r.readLine();
+        while(s != null) {
+            sb.append(s);
+            s = r.readLine();
+        }
+            
+        return sb.toString().toCharArray();
+    }
+
+    static void parse(String file) throws FileNotFoundException, IOException, InterpreterException {
+
+        Interpreter itp = new Interpreter(new ECJFactory());
+        itp.addOperatorRegistry(new ECJLibrary());
+        itp.load("deconstructor.rtree");
+        ASTParser parser = ASTParser.newParser(AST.JLS3);
+        parser.setSource(getBytes(file));
+        CompilationUnit cu = (CompilationUnit) parser.createAST(null);
+        System.out.println(cu);
+        ECJFactory wef = new ECJFactory();
+        IStrategoTerm t = wef.parseFromTree(cu);
+        itp.setCurrent(t);
+        itp.invoke("main_0_0");
+
+    }
+    
+    static void recurse(File base) throws FileNotFoundException, IOException, InterpreterException {
+        for(String s : base.list()) {
+            if(s.endsWith(".java"))
+                parse(base.getAbsolutePath() + "/" + s);
+            else {
+                File x = new File(base.getAbsolutePath() + "/" + s);
+                if(x.isDirectory())
+                    recurse(x);
+            }
+            //System.out.println(s);
+        }
+        
+    }
+    
+    public static void main(String[] args) throws FileNotFoundException, IOException, InterpreterException {
+        File f = new File(args[0]);
+        
+        recurse(f);
+        System.out.println("Finished");
+    }
+    
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java)
@@ -0,0 +1,60 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.library.ecj;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.CoreException;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class ECJ_create_compilation_unit_buffer extends ECJPrimitive {
+
+    public ECJ_create_compilation_unit_buffer() {
+        super("ECJ_create_compilation_unit_buffer", 0, 2);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+            throws InterpreterException {
+
+        if (!Tools.isTermString(tvars[0]))
+            return false;
+        if (!ECJTools.isASTNode(tvars[1]))
+            return false;
+
+        IProject project = getLibrary(env).getCurrentProject();
+        
+        IFile file = project.getFile(Tools.asJavaString(tvars[0]));
+
+        final String text = ECJTools.asASTNode(tvars[1]).toString();
+        InputStream source = new ByteArrayInputStream(text.getBytes());
+        try {
+            if (!file.exists()) {
+                file.create(source, IResource.NONE, null);
+            } else {
+                file.setContents(source, IFile.FORCE, null);
+            }
+        } catch (CoreException e) {
+            e.printStackTrace();
+            return false;
+        }
+
+        env.setCurrent(ECJFactory.wrap(file));
+        return true;
+    }
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_compilation_unit.java)
@@ -0,0 +1,97 @@
+package org.spoofax.interpreter.library.ecj;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.eclipse.jdt.core.IBuffer;
+import org.eclipse.jdt.core.ICompilationUnit;
+import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTParser;
+import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.eclipse.jdt.core.dom.TypeDeclaration;
+import org.eclipse.jface.text.BadLocationException;
+import org.eclipse.jface.text.Document;
+import org.eclipse.text.edits.TextEdit;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.adapter.ecj.WrappedASTNode;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.CallT;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class ECJ_rewrite_compilation_unit extends AbstractPrimitive {
+
+	public ECJ_rewrite_compilation_unit() {
+		super("ECJ_rewrite_compilation_unit", 1, 1);
+	}
+
+	@SuppressWarnings({ "unchecked", "rawtypes" })
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+	throws InterpreterException {
+
+		if(!ECJTools.isICompilationUnit(tvars[0]))
+			return false;
+
+		final ICompilationUnit cu = ECJTools.asICompilationUnit(tvars[0]);
+		final ECJLibrary ecj = (ECJLibrary) env.getOperatorRegistry(ECJLibrary.REGISTRY_NAME);
+		final ECJFactory factory = (ECJFactory)env.getFactory();
+
+		AST oldAST = factory.getAST();
+
+		ecj.setCurrentProject(cu.getJavaProject().getProject());
+		ecj.setCurrentJavaProject(cu.getJavaProject());
+
+		try {
+			final IBuffer buffer = cu.getBuffer();
+			final boolean previouslyModified = buffer.hasUnsavedChanges();
+
+			Document document= new Document(buffer.getContents());
+			ASTParser p = ecj.getParser();
+			p.setSource(cu);
+			CompilationUnit root = (CompilationUnit) p.createAST(null);
+			factory.setAST(root.getAST());
+
+			//System.out.println("before: " + root);
+			root.recordModifications();
+			List newTds = new ArrayList();
+			for(Object ob : root.types()) {
+				TypeDeclaration td = (TypeDeclaration) ob;
+
+				CallT s = (CallT)svars[0];
+				env.setCurrent(ECJFactory.wrap(td));
+				if(s.evaluate(env)) {
+					final IStrategoTerm term = env.current();
+					if(term instanceof WrappedASTNode)
+						newTds.add(((WrappedASTNode)term).getWrappee());
+					else 
+						ecj.log("Rewriting resulted in an invalid tree");
+				} else {
+					newTds.add(td);
+				}
+			}
+			root.types().clear();
+			root.types().addAll(newTds);
+			//System.out.println("after: " + root);
+			TextEdit te = root.rewrite(document, cu.getJavaProject().getOptions(true));
+			te.apply(document);
+			cu.getBuffer().setContents(document.get());
+			if(!previouslyModified)
+				cu.getBuffer().save(null, false);
+		}
+		catch(JavaModelException e) {
+			e.printStackTrace();
+			ecj.log("Model exception");
+		}
+		catch(BadLocationException e) {
+			e.printStackTrace();
+			ecj.log("Bad location exception");
+		}
+		factory.setAST(oldAST);
+		return true;
+	}
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_rewrite_file.java)
@@ -0,0 +1,100 @@
+package org.spoofax.interpreter.library.ecj;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.jdt.core.IBuffer;
+import org.eclipse.jdt.core.ICompilationUnit;
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTParser;
+import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.eclipse.jdt.core.dom.TypeDeclaration;
+import org.eclipse.jface.text.BadLocationException;
+import org.eclipse.jface.text.Document;
+import org.eclipse.text.edits.TextEdit;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.adapter.ecj.WrappedASTNode;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.CallT;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class ECJ_rewrite_file extends AbstractPrimitive {
+
+	public ECJ_rewrite_file() {
+		super("ECJ_rewrite_file", 1, 1);
+	}
+
+	@SuppressWarnings({ "unchecked", "rawtypes" })
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+	throws InterpreterException {
+
+		if(!ECJTools.isIFile(tvars[0]))
+			return false;
+
+		final IFile file = ECJTools.asIFile(tvars[0]);
+		final ICompilationUnit cu = JavaCore.createCompilationUnitFrom(file);
+		final ECJLibrary ecj = (ECJLibrary) env.getOperatorRegistry(ECJLibrary.REGISTRY_NAME);
+		final ECJFactory factory = (ECJFactory)env.getFactory();
+
+		AST oldAST = factory.getAST();
+
+		ecj.setCurrentProject(cu.getJavaProject().getProject());
+		ecj.setCurrentJavaProject(cu.getJavaProject());
+
+		try {
+			final IBuffer buffer = cu.getBuffer();
+			final boolean previouslyModified = buffer.hasUnsavedChanges();
+
+			Document document= new Document(buffer.getContents());
+			ASTParser p = ecj.getParser();
+			p.setSource(cu);
+			CompilationUnit root = (CompilationUnit) p.createAST(null);
+			factory.setAST(root.getAST());
+
+			//System.out.println("before: " + root);
+			root.recordModifications();
+			List newTds = new ArrayList();
+			for(Object ob : root.types()) {
+				TypeDeclaration td = (TypeDeclaration) ob;
+
+				CallT s = (CallT)svars[0];
+				env.setCurrent(ECJFactory.wrap(td));
+				if(s.evaluate(env)) {
+					final IStrategoTerm term = env.current();
+					if(term instanceof WrappedASTNode)
+						newTds.add(((WrappedASTNode)term).getWrappee());
+					else 
+						ecj.log("Rewriting resulted in an invalid tree");
+				} else {
+					newTds.add(td);
+				}
+			}
+			root.types().clear();
+			root.types().addAll(newTds);
+			//System.out.println("after: " + root);
+			TextEdit te = root.rewrite(document, cu.getJavaProject().getOptions(true));
+			te.apply(document);
+			cu.getBuffer().setContents(document.get());
+			if(!previouslyModified)
+				cu.getBuffer().save(null, false);
+		}
+		catch(JavaModelException e) {
+			e.printStackTrace();
+			ecj.log("Model exception");
+		}
+		catch(BadLocationException e) {
+			e.printStackTrace();
+			ecj.log("Bad location exception");
+		}
+		factory.setAST(oldAST);
+		return true;
+	}
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java)
@@ -0,0 +1,110 @@
+/*
+ * Created on 9. sep. 2008
+ *
+ * Copyright (c) 2005-2008, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.library.ecj;
+
+import java.util.Collection;
+import java.util.LinkedList;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.jdt.core.IType;
+import org.eclipse.jdt.core.search.IJavaSearchConstants;
+import org.eclipse.jdt.core.search.IJavaSearchScope;
+import org.eclipse.jdt.core.search.SearchEngine;
+import org.eclipse.jdt.core.search.SearchMatch;
+import org.eclipse.jdt.core.search.SearchParticipant;
+import org.eclipse.jdt.core.search.SearchPattern;
+import org.eclipse.jdt.core.search.SearchRequestor;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class ECJ_search_for_supertype_type_refs_in_hierarchy extends AbstractPrimitive {
+
+	public ECJ_search_for_supertype_type_refs_in_hierarchy() {
+		super("ECJ_search_for_supertype_type_refs_in_hierarchy", 1, 2);
+	}
+
+	@Override
+	public boolean call(final IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+	throws InterpreterException {
+
+		if(!ECJTools.isIType(tvars[0]))
+			return false;
+		if(!Tools.isTermString(tvars[1]))
+			return false;
+
+	// TODO: This only works in 3.4, what to do for other versions? 
+
+		// FIXME this method will currently only return exact type matches.
+		//       it is unclear whether searches for the supertype Foo<Object>
+		//       should also allow Foo<Bar> to be returned; for now, it's explicitly
+		//       forbidden
+
+		final Strategy acceptor = svars[0];
+		final String className = Tools.asJavaString(tvars[1]);
+		final SearchPattern sp = SearchPattern.createPattern(
+				className, 
+				IJavaSearchConstants.TYPE, 
+				IJavaSearchConstants.IMPLEMENTORS, //SUPERTYPE_TYPE_REFERENCE, 
+				SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);
+
+
+		try { 
+			final IJavaSearchScope ss = SearchEngine.createHierarchyScope(ECJTools.asIType(tvars[0]));
+			final Collection<IType> results = new LinkedList<IType>();
+			final SearchRequestor requestor = new SearchRequestor() {
+
+				@Override
+				public void acceptSearchMatch(SearchMatch match) throws CoreException {
+					//System.out.println(match.getElement() + "/" + match.getClass().toString() + "/" + match.getElement().getClass().toString());
+					IType t = (IType)match.getElement();
+					//System.out.println(" * " + t.getFullyQualifiedName());
+					for(String s : t.getSuperInterfaceTypeSignatures()) {
+						IStrategoAppl a = ECJFactory.wrapSignature(s);
+						try {
+							env.setCurrent(a);
+							if(acceptor.evaluate(env)) {
+								results.add(t);
+							}
+						} catch(InterpreterException e) {
+							// FIXME: log
+						}
+						
+					}
+				}
+
+			};
+
+			final SearchEngine se = new SearchEngine();
+	        final ECJLibrary ecj = (ECJLibrary)env.getOperatorRegistry(ECJLibrary.REGISTRY_NAME);
+
+
+			se.search(sp, 
+					new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() },
+					ss, 
+					requestor,
+					ecj.getNullProgressMonitor());
+			final IStrategoTerm[] r = new IStrategoTerm[results.size()];
+			int pos = 0;
+			for(IType t : results)
+				r[pos++] = ECJFactory.wrap(t);
+			env.setCurrent(env.getFactory().makeList(r));
+		} catch(CoreException e) {
+			e.printStackTrace();
+			return false;
+		}
+
+		return true;
+	}
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java)
@@ -0,0 +1,104 @@
+/*
+ * Created on 9. sep. 2008
+ *
+ * Copyright (c) 2005-2008, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.library.ecj;
+
+import java.util.Collection;
+import java.util.LinkedList;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.jdt.core.IType;
+import org.eclipse.jdt.core.Signature;
+import org.eclipse.jdt.core.search.IJavaSearchConstants;
+import org.eclipse.jdt.core.search.IJavaSearchScope;
+import org.eclipse.jdt.core.search.SearchEngine;
+import org.eclipse.jdt.core.search.SearchMatch;
+import org.eclipse.jdt.core.search.SearchParticipant;
+import org.eclipse.jdt.core.search.SearchPattern;
+import org.eclipse.jdt.core.search.SearchRequestor;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class ECJ_search_for_supertype_type_refs_no_generics extends AbstractPrimitive {
+
+	public ECJ_search_for_supertype_type_refs_no_generics() {
+		super("ECJ_search_for_supertype_type_refs_no_generics", 0, 2);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+	throws InterpreterException {
+
+		if(!ECJTools.isIType(tvars[0]))
+			return false;
+		if(!Tools.isTermString(tvars[1]))
+			return false;
+
+		// TODO: This only works in 3.4, what to do for other versions? 
+
+		// FIXME this method will currently only return exact type matches.
+		//       it is unclear whether searches for the supertype Foo<Object>
+		//       should also allow Foo<Bar> to be returned; for now, it's explicitly
+		//       forbidden
+
+		final String className = Tools.asJavaString(tvars[1]).replaceAll("*", "[^,]+");
+		final SearchPattern sp = SearchPattern.createPattern(
+				className, 
+				IJavaSearchConstants.TYPE, 
+				IJavaSearchConstants.IMPLEMENTORS, //SUPERTYPE_TYPE_REFERENCE, 
+				SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);
+
+
+		try { 
+			final IJavaSearchScope ss = SearchEngine.createHierarchyScope(ECJTools.asIType(tvars[0]));
+			final Collection<IType> results = new LinkedList<IType>();
+			final SearchRequestor requestor = new SearchRequestor() {
+
+				@Override
+				public void acceptSearchMatch(SearchMatch match) throws CoreException {
+					//System.out.println(match.getElement() + "/" + match.getClass().toString() + "/" + match.getElement().getClass().toString());
+					IType t = (IType)match.getElement();
+					//System.out.println(" * " + t.getFullyQualifiedName());
+					for(String s : t.getSuperInterfaceTypeSignatures()) {
+						final String p = Signature.toString(s);
+						if(p.equals(className)) {
+							results.add(t);
+							return;
+						}
+					}
+				}
+
+			};
+
+			final SearchEngine se = new SearchEngine();
+	        final ECJLibrary ecj = (ECJLibrary)env.getOperatorRegistry(ECJLibrary.REGISTRY_NAME);
+
+
+			se.search(sp, 
+					new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() },
+					ss, 
+					requestor,
+					ecj.getNullProgressMonitor());
+			final IStrategoTerm[] r = new IStrategoTerm[results.size()];
+			int pos = 0;
+			for(IType t : results)
+				r[pos++] = ECJFactory.wrap(t);
+			env.setCurrent(env.getFactory().makeList(r));
+		} catch(CoreException e) {
+			e.printStackTrace();
+			return false;
+		}
+
+		return true;
+	}
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java)
@@ -0,0 +1,63 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.library.ecj;
+
+import org.eclipse.jdt.core.Signature;
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.Name;
+import org.eclipse.jdt.core.dom.ParameterizedType;
+import org.eclipse.jdt.core.dom.Type;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class ECJ_signature_to_type extends ECJPrimitive {
+
+    public ECJ_signature_to_type() {
+        super("ECJ_signature_to_type", 0, 1);
+    }
+    
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+            throws InterpreterException {
+    	
+    	if(!Tools.isTermString(tvars[0]))
+    		return false;
+    	
+    	final ECJFactory factory = (ECJFactory)env.getFactory();
+    	final Type t = signatureStringToType(
+    			factory.getAST(), 
+    			Signature.createTypeSignature(Tools.asJavaString(tvars[0]), false));
+    	env.setCurrent(ECJFactory.wrapType(t));
+    	return true;
+    	
+    }
+    
+	private Type signatureStringToType(final AST ast, final String signatureName) {
+		final String[] args = Signature.getTypeArguments(signatureName);
+		final String qual = Signature.getQualifier(signatureName);
+		final String base = Signature.getSignatureSimpleName(Signature.getTypeErasure(signatureName));
+		final Name n = qual.length() == 0 ? ast.newName(base) : ast.newName(qual + "." + base);
+
+		final Type bt = ast.newSimpleType(n);
+		if(args.length == 0) 
+			return bt;
+		else {
+			ParameterizedType pt = ast.newParameterizedType(bt);
+			for(String s : args) {
+				pt.typeArguments().add(signatureStringToType(ast, s));
+			}
+			return pt;
+		}
+	}
+
+
+}

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/TestECJAdapter.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java	Tue Nov  8 12:56:52 2011	(r23574, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/library/ecj/TestECJAdapter.java)
@@ -0,0 +1,98 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * 
+ * Licensed under the GNU General Public License, v2
+ */
+package org.spoofax.interpreter.library.ecj;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import junit.framework.TestCase;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IWorkspace;
+import org.eclipse.core.resources.IWorkspaceRoot;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.spoofax.interpreter.core.Interpreter;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class TestECJAdapter extends TestCase {
+    
+    protected InputStream findFile(String name) throws CoreException {
+        IWorkspace workspace = ResourcesPlugin.getWorkspace();
+        IWorkspaceRoot root = workspace.getRoot();
+        IProject project  = root.getProject("demo1");
+        project.open(null);
+        project.refreshLocal(IProject.DEPTH_INFINITE, null);
+        IFile file = (IFile) project.findMember("str/" + name + ".rtree");
+        return file.getContents();
+    }
+    
+    public void testTest1() throws IOException, InterpreterException, CoreException {
+        interpTest("test1", "()", "()");
+    }
+
+    public void testTest2() throws IOException, InterpreterException, CoreException {
+        interpTest("test2", "\"src/org/spoofax/interpreter/demo/ECJ.java\"", "()");
+    }
+
+    public void testTest3() throws IOException, InterpreterException, CoreException {
+        interpTest("test3", "()", "()");
+    }
+
+    public void testTest4() throws IOException, InterpreterException, CoreException {
+        interpTest("test4", "\"HelloWorld.java\"", "()");
+    }
+
+    public void testTest5() throws IOException, InterpreterException, CoreException {
+        interpTest("test5", "\"HelloWorld.java\"", "()");
+    }
+
+    public void testTest6() throws IOException, InterpreterException, CoreException {
+        interpTest("test6", "\"HelloWorld.java\"", "()");
+    }
+
+    public void testSWTCheck() throws IOException, InterpreterException, CoreException {
+        interpTest("swt-check", "\"examples/SWTTest.java\"", "()");
+    }
+
+    public void testArrayFields() throws IOException, InterpreterException, CoreException {
+        interpTest("arrayfields-check", "\"examples/FieldTest.java\"", "()");
+    }
+
+    public void testFor() throws IOException, InterpreterException, CoreException {
+        interpTest("for-check", "\"examples/ForTest.java\"", "()");
+    }
+
+    protected void interpTestFail(String string, String in) throws IOException, InterpreterException {
+        ECJFactory f = new ECJFactory();
+        Interpreter itp = new Interpreter(f);
+        itp.addOperatorRegistry(new ECJLibrary());
+        itp.load("str/" + string + ".rtree");
+        IStrategoTerm inTerm = f.parseFromString(in);
+        itp.setCurrent(inTerm);
+        assertTrue(!itp.invoke("main_0_0"));
+    }
+
+    private void interpTest(String string, String in, String out) throws IOException, InterpreterException, CoreException {
+        ECJFactory f = new ECJFactory();
+        Interpreter itp = new Interpreter(f);
+        //DebugUtil.debugging = true;
+        itp.addOperatorRegistry(new ECJLibrary());
+        itp.load(findFile(string));
+        IStrategoTerm inTerm = f.parseFromString(in);
+        IStrategoTerm outTerm = f.parseFromString(out);
+        itp.setCurrent(inTerm);
+        assertTrue(itp.invoke("main_0_0"));
+        System.err.println("Want: " + outTerm);
+        System.err.println("Got : " + itp.current());
+        assertTrue(itp.current().match(outTerm));
+    }
+}

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/ParseTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/ParseTest.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java	Tue Nov  8 12:56:52 2011	(r23574)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.adapter.ecj.tests;
+package org.spoofax.interpreter.adapter.ecj;
 
 import java.io.BufferedReader;
 import java.io.File;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/RecursiveScriptTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/RecursiveScriptTest.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java	Tue Nov  8 12:56:52 2011	(r23574)
@@ -5,7 +5,7 @@
  * 
  * Licensed under the GNU General Public License, v2
  */
-package org.spoofax.interpreter.adapter.ecj.tests;
+package org.spoofax.interpreter.adapter.ecj;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -16,12 +16,12 @@
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.spoofax.interpreter.adapter.aterm.WrappedATermFactory;
 import org.spoofax.interpreter.adapter.ecj.ECJFactory;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.ecj.ECJLibrary;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.TermFactory;
 
 public class RecursiveScriptTest {
 
@@ -81,15 +81,15 @@
     }
 
     private ECJFactory dataFactory;
-    private WrappedATermFactory programFactory;
+    private TermFactory programFactory;
     private Interpreter interp;
     private ASTParser parser; 
     
     RecursiveScriptTest(String script) {
-        programFactory = new WrappedATermFactory();
+        programFactory = new TermFactory();
         dataFactory = new ECJFactory();
         interp = new Interpreter(dataFactory, programFactory);
-        interp.addOperatorRegistry(ECJLibrary.REGISTRY_NAME, new ECJLibrary());
+        interp.addOperatorRegistry(new ECJLibrary());
         parser = ASTParser.newParser(AST.JLS3);
         try {
             interp.load(script);

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/ScriptTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/ScriptTest.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java	Tue Nov  8 12:56:52 2011	(r23574)
@@ -5,7 +5,7 @@
  * 
  * Licensed under the GNU General Public License, v2
  */
-package org.spoofax.interpreter.adapter.ecj.tests;
+package org.spoofax.interpreter.adapter.ecj;
 
 import java.io.IOException;
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SimpleTest.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/SimpleTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/SimpleTest.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SimpleTest.java	Tue Nov  8 12:56:52 2011	(r23574)
@@ -1,4 +1,4 @@
-package org.spoofax.interpreter.adapter.ecj.tests;
+package org.spoofax.interpreter.adapter.ecj;
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTParser;

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SpoofaxDemo.java (from r23572, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/SpoofaxDemo.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/tests/SpoofaxDemo.java	Mon Nov  7 11:20:29 2011	(r23572, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SpoofaxDemo.java	Tue Nov  8 12:56:52 2011	(r23574)
@@ -5,7 +5,7 @@
  * 
  * Licensed under the GNU General Public License, v2
  */
-package org.spoofax.interpreter.adapter.ecj.tests;
+package org.spoofax.interpreter.adapter.ecj;
 
 //import org.eclipse.core.resources.IFile;
 //import org.eclipse.core.resources.IProject;

From karltk at strategoxt.org  Tue Nov  8 13:58:46 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 12:58:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23575 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/org
Message-ID: <20111108125846.8F6CBCC058@mx4.tudelft.nl>

Author: karltk
Date: Tue Nov  8 12:58:46 2011
New Revision: 23575
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23575&sc=1

Log:
Removed spurious directory.

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/org/

From karltk at strategoxt.org  Tue Nov  8 17:14:18 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 16:14:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23576 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj:
	scripts/spoofax/bindings/eclipse
	src/main/java/org/spoofax/interpreter/adapter/ecj
	src/test/java/org/...
Message-ID: <20111108161418.EB66C7F8044@mx1.tudelft.nl>

Author: karltk
Date: Tue Nov  8 16:14:18 2011
New Revision: 23576
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23576&sc=1

Log:
Slowly restoring the concept of basic terms as skeleton terms. Refactoring ECJ terms to use StrategoTerm, SkeletonStrategoTerm or custom term logic, in that order. Incremental license fixes.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/EclipseJava.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AmbName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/DottedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SimpleTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SpoofaxDemo.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/EclipseJava.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/EclipseJava.str	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/EclipseJava.str	Tue Nov  8 16:14:18 2011	(r23576)
@@ -3,7 +3,7 @@
  *
  * Licensed under the GNU Lesser General Public License, v2.1
  *
- * @author Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * @author Karl Trygve Kalleberg <karltk near strategoxt dot org>
  */
 
 module spoofax/bindings/eclipse/EclipseJava

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Tue Nov  8 16:14:18 2011	(r23576)
@@ -3,7 +3,7 @@
  *
  * Licensed under the GNU Lesser General Public License, v2.1
  *
- * @author Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * @author Karl Trygve Kalleberg <karltk near strategoxt dot org>
  */
 
 module spoofax/bindings/eclipse/eclipse-compiler-ffi

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -8,72 +8,30 @@
 package org.spoofax.interpreter.adapter.ecj;
 
 import org.spoofax.NotImplementedException;
-import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.adapter.ecj.skeleton.SkeletonStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.terms.TermFactory;
 
-public abstract class AbstractECJAppl extends AbstractECJNode implements IStrategoAppl {
+public abstract class AbstractECJAppl extends SkeletonStrategoAppl {
 
     private static final long serialVersionUID = 1L;
-    
+
     private final IStrategoConstructor constructor;
     
     protected AbstractECJAppl(IStrategoConstructor constructor) {
         super(TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
+    
         this.constructor = constructor;
     }
-
-    @Override
-    public int getTermType() {
-        return IStrategoTerm.APPL;
-    }
-
+    
     @Override
     public IStrategoConstructor getConstructor() {
         return constructor;
     }
 
     @Override
-    public int getSubtermCount() {
-        return constructor.getArity();
-    }
- 
-/*
-    @Override
-    public IStrategoTerm[] getArguments() {
-        IStrategoTerm[] r = new IStrategoTerm[constructor.getArity()];
-        for(int i = 0; i < r.length; i++) {
-            r[i] = getSubterm(i);
-        }
-        return r;
-    }
-*/    
-    @Override
-    public void prettyPrint(ITermPrinter pp) {
-        pp.print(constructor.getName());
-        
-        int arity = constructor.getArity();
-        if(arity > 0) {
-            pp.println("(", false);
-            pp.indent(constructor.getName().length() + 1);
-            pp.print("  ");
-            pp.nextIndentOff();
-            getSubterm(0).prettyPrint(pp);
-            pp.println("");
-            for(int i = 1; i < arity; i++) {
-                pp.print(", ");
-                pp.nextIndentOff();
-                getSubterm(i).prettyPrint(pp);
-                pp.println("");
-            }
-            pp.print(")");
-            pp.outdent(constructor.getName().length() + 1);
-            
-        }
-    }
-    
     public abstract IStrategoTerm getSubterm(int index);
 
     @Override
@@ -85,19 +43,9 @@
         }
         return r;
     }
-
-    @Override
-    protected int hashFunction() {
-        throw new NotImplementedException();
-    }
-    
-    @Override
-    public String getName() {
-        return constructor.getName();
-    }
     
     @Override
-    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+    public void prettyPrint(ITermPrinter pp) {
         throw new NotImplementedException();
     }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -7,9 +7,6 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
-import java.io.IOException;
-
-import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.terms.StrategoTerm;
 
@@ -21,9 +18,4 @@
         super(annotations, storageType);
     }
 
-    @Override
-    public void writeAsString(Appendable output, int maxDepth)
-            throws IOException {
-        throw new NotImplementedException();
-    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AmbName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AmbName.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AmbName.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -4,6 +4,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.StrategoAppl;
 import org.spoofax.terms.StrategoConstructor;
+import org.spoofax.terms.TermFactory;
 
 public class AmbName extends StrategoAppl {
 
@@ -12,7 +13,10 @@
     private static IStrategoConstructor CTOR = new StrategoConstructor("AmbName", 1);
 	
 	public AmbName(String name) {
-		super(CTOR, new IStrategoTerm[] { new ECJString(name) });
+		super(CTOR, 
+		        new IStrategoTerm[] { new ECJString(name) },
+		        TermFactory.EMPTY_LIST,
+		        IStrategoTerm.IMMUTABLE);
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/DottedName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/DottedName.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/DottedName.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -4,6 +4,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.StrategoAppl;
 import org.spoofax.terms.StrategoConstructor;
+import org.spoofax.terms.TermFactory;
 
 public class DottedName extends StrategoAppl {
     
@@ -12,7 +13,10 @@
     private final static IStrategoConstructor CTOR = new StrategoConstructor("DottedName", 1);
 	
 	protected DottedName(String name) {
-		super(CTOR, new IStrategoTerm[] { new ECJString(name) });
+		super(CTOR, 
+		        new IStrategoTerm[] { new ECJString(name) },
+		        TermFactory.EMPTY_LIST,
+		        IStrategoTerm.IMMUTABLE);
 	}
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -48,25 +48,4 @@
     public IStrategoTerm[] getAllSubterms() {
         return EMPTY;
     }
-
-    @Override
-    public void writeAsString(Appendable output, int maxDepth)
-            throws IOException {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public String getName() {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    protected int hashFunction() {
-        throw new NotImplementedException();
-    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -13,6 +13,7 @@
 
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.adapter.ecj.skeleton.SkeletonStrategoList;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermPrinter;
@@ -20,29 +21,22 @@
 import org.spoofax.terms.attachments.ITermAttachment;
 import org.spoofax.terms.attachments.TermAttachmentType;
 
-public class WrappedASTNodeList implements IStrategoList {
+public class WrappedASTNodeList extends SkeletonStrategoList {
 
     private static final long serialVersionUID = 1L;
     
     private List<ASTNode> wrappee;
     
     public WrappedASTNodeList(List<ASTNode> wrappee) {
+        super(TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
         
-        for(Object n : wrappee) 
+        for(Object n : wrappee) {
             if(!(n instanceof ASTNode) && n != null)
-                throw new ClassCastException();
+                throw new ClassCastException("Cannot convert " + n.getClass() + " to ASTNode");
+        }
+        
         this.wrappee = (List<ASTNode>)wrappee;
     }
-    
-    @Override
-    public int getStorageType() {
-        return MUTABLE;
-    }
-    
-    @Override
-    public IStrategoTerm get(int i) {
-        return getSubterm(i);
-    }
 
     @Override
     public IStrategoTerm head() {
@@ -70,11 +64,6 @@
         }
     }
 
-    @Override
-    public int size() {
-        return wrappee.size();
-    }
-
     @SuppressWarnings({ "unchecked", "rawtypes" })
     @Override
     public IStrategoList tail() {
@@ -114,43 +103,17 @@
     }
 
     @Override
-    public int getTermType() {
-        return IStrategoTerm.LIST;
-    }
-
-    @Override
-    public boolean match(IStrategoTerm second) {
+    public boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
         if(second instanceof IStrategoList) {
             IStrategoList snd = (IStrategoList) second;
             if(size() != snd.size()) 
                 return false;
             for(int i = 0; i < size(); i++) 
-                if(!get(i).match(snd.getSubterm(i)))
+                if(!getSubterm(i).match(snd.getSubterm(i)))
                     return false;
             return true;
-        } 
-        return false;
-    }
-
-    @Override
-    public void prettyPrint(ITermPrinter pp) {
-        int sz = size();
-        if(sz > 0) {
-            pp.println("[");
-            pp.indent(2);
-            get(0).prettyPrint(pp);
-            for(int i = 1; i < sz; i++) {
-                pp.print(", ");
-                pp.nextIndentOff();
-                get(i).prettyPrint(pp);
-                pp.println("");
-            }
-            pp.println("");
-            pp.print("]");
-            pp.outdent(2);
-
         } else {
-            pp.print("[]");
+            return super.doSlowMatch(second, commonStorageType);
         }
     }
 
@@ -162,11 +125,6 @@
     public boolean isEmpty() {
         return wrappee.isEmpty();
     }
-    
-    @Override
-    public IStrategoList getAnnotations() {
-    	return TermFactory.EMPTY_LIST;
-    }
 
     @Override
     public String toString(int maxDepth) {
@@ -174,12 +132,6 @@
     }
 
     @Override
-    public void writeAsString(Appendable output, int maxDepth)
-            throws IOException {
-        throw new NotImplementedException();
-    }
-
-    @Override
     public <T extends ITermAttachment> T getAttachment(
             TermAttachmentType<T> type) {
         throw new NotImplementedException();
@@ -194,9 +146,4 @@
     public ITermAttachment removeAttachment(TermAttachmentType<?> attachmentType) {
         throw new NotImplementedException();
     }
-
-    @Override
-    public boolean isList() {
-        return true;
-    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -36,11 +36,6 @@
     }
 
     @Override
-    public int getSubtermCount() {
-        return 3;
-    }
-
-    @Override
     public ImportDeclaration getWrappee() {
         return wrappee;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -1,28 +1,41 @@
+/*
+ * Created on 27. sep.. 2006
+ *
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.adapter.ecj;
 
+import static org.junit.Assert.*;
+import static org.junit.Assert.assertTrue;
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.io.IOException;
+import java.io.StringWriter;
+import java.util.ArrayList;
+import java.util.Collection;
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.spoofax.interpreter.adapter.ecj.ECJFactory;
+import org.junit.Before;
+import org.junit.Test;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.PrettyPrinter;
 
-/*
- * Created on 27. sep.. 2006
- *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
- * 
- * Licensed under the GNU General Public License, v2
- */
 
 public class ParseTest {
 
+    private ECJFactory wef;
+
+    @Before
+    public void setUp() {
+        wef = new ECJFactory();
+    }
+    
     private static char[] getBytes(String fileName) throws FileNotFoundException, IOException {
 
         BufferedReader r = new BufferedReader(new FileReader(fileName));
@@ -36,38 +49,58 @@
         return sb.toString().toCharArray();
     }
 
-    static void parse(String file) throws FileNotFoundException, IOException {
+    private static CompilationUnit parseCompilationUnit(String fileName) throws FileNotFoundException, IOException {
+        //  System.out.println("Reading " + file);
         ASTParser parser = ASTParser.newParser(AST.JLS3);
-        System.out.println("Reading " + file);
-        parser.setSource(getBytes(file));
-        CompilationUnit cu = (CompilationUnit) parser.createAST(null);
-        System.out.println(cu);
-        ECJFactory wef = new ECJFactory();
-        IStrategoTerm t = wef.parseFromTree(cu);
-        PrettyPrinter pp = new PrettyPrinter();
-        t.prettyPrint(pp);
-        //System.out.println(pp.getString());
+        parser.setSource(getBytes(fileName));
+        return (CompilationUnit) parser.createAST(null);
+    }
+      
+    private IStrategoTerm parse(String fileName) throws FileNotFoundException, IOException {
+        return wef.parseFromTree(parseCompilationUnit(fileName));
+    }
+
+    private String asString(IStrategoTerm t) throws IOException {
+        StringWriter sw = new StringWriter();
+        t.writeAsString(sw, IStrategoTerm.INFINITE);
+        return sw.toString();
     }
     
-    static void recurse(File base) throws FileNotFoundException, IOException {
+    private void findAllFiles(File base, Collection<String> acc) throws FileNotFoundException, IOException {
         for(String s : base.list()) {
             if(s.endsWith(".java"))
-                parse(base.getAbsolutePath() + "/" + s);
+                acc.add(base.getAbsolutePath() + "/" + s);
             else {
                 File x = new File(base.getAbsolutePath() + "/" + s);
                 if(x.isDirectory())
-                    recurse(x);
+                    findAllFiles(x, acc);
             }
-            //System.out.println(s);
         }
         
     }
     
-    public static void main(String[] args) throws FileNotFoundException, IOException {
-        File f = new File(args[0]);
-        
-        recurse(f);
-        System.out.println("Finished");
+    private Collection<String> findAllFiles(File base) throws FileNotFoundException, IOException {
+        ArrayList<String> r = new ArrayList<String>();
+        findAllFiles(base, r);
+        return r;
     }
     
+    @Test
+    public void test_parse_all_ecj_source_code() throws FileNotFoundException, IOException {
+        for(String file : findAllFiles(new File("src/main/java")))
+            assertTrue(asString(parse(file)).length() > 0);
+    }
+
+    @Test
+    public void test_term_equality() throws FileNotFoundException, IOException {
+        for(String file : findAllFiles(new File("src/main/java")))
+            assertEquals(parse(file), parse(file));
+    }
+
+    @Test
+    public void test_term_matching() throws FileNotFoundException, IOException {
+        for(String file : findAllFiles(new File("src/main/java")))
+            assertTrue(parse(file).match(parse(file)));
+    }
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/RecursiveScriptTest.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -1,9 +1,9 @@
 /*
  * Created on 24. jan.. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -1,9 +1,9 @@
 /*
  * Created on 24. jan.. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SimpleTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SimpleTest.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SimpleTest.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -1,3 +1,10 @@
+/*
+ * Created on 27. sep.. 2006
+ *
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
 package org.spoofax.interpreter.adapter.ecj;
 
 import org.eclipse.jdt.core.dom.AST;
@@ -7,14 +14,6 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.PrettyPrinter;
 
-/*
- * Created on 27. sep.. 2006
- *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
- * 
- * Licensed under the GNU General Public License, v2
- */
-
 public class SimpleTest {
 
     public static void main(String[] args) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SpoofaxDemo.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SpoofaxDemo.java	Tue Nov  8 12:58:46 2011	(r23575)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/SpoofaxDemo.java	Tue Nov  8 16:14:18 2011	(r23576)
@@ -1,9 +1,9 @@
 /*
- * Created on 10. okt.. 2006
+ * Created on 10. okt. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser General Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

From karltk at strategoxt.org  Tue Nov  8 17:18:23 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 16:18:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23577 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax:
	ecjadapter interpreter/adapter/ecj interpreter/library/ecj
Message-ID: <20111108161823.622CE7F8037@mx1.tudelft.nl>

Author: karltk
Date: Tue Nov  8 16:18:23 2011
New Revision: 23577
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23577&sc=1

Log:
More license fixes. Added AUTHORS and LICENSE.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/ParseJava.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJInt.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJReal.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/IWrappedExtendedModifier.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_add_jar.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_add_source_folder.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_ast_for_compilation_unit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_name.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_compilation_unit_for_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_package.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_project.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_java_project.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_project.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_file_exists.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_hierarchy_for_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_icompilation_unit_for_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_binding_primitive_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_cast_compatible.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_subtype_compatible.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_valid_ast_node.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_valid_ast_nodelist.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_methoddecl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_methodinvoc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_superctorinvoc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_supermethodinvoc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_open_project.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_and_resolve.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_path_of_compilationunit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_project_get_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_project_for_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_expr.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_typedecl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_typeparameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_unbacked_compilation_unit_for_type.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/Main.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 27. jan.. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.ecjadapter;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/ParseJava.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/ParseJava.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/ecjadapter/ParseJava.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 27. jan.. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.ecjadapter;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 29. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJAppl.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractECJNode.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedBinding.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/AbstractWrappedECJNode.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 24. jan.. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 27. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 4. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericList.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 4. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJInt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJInt.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJInt.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 29. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJReal.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJReal.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJReal.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 29. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 4. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/IWrappedExtendedModifier.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/IWrappedExtendedModifier.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/IWrappedExtendedModifier.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 25. jan.. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 29. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 27. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAbstractTypeDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 25. des.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 25. des.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 29. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBodyDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 25. des.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedComment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedComment.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedComment.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 25. des.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 27. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 25. des.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 10. mars. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 28. feb.. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -3,7 +3,7 @@
  *
  * Copyright (c) 2008, Karl Trygve Kalleberg <karltk at strategoxt.org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 10. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 10. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 10. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 28. feb.. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 27. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 29. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedName.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedName.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 29. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 29. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 25. des.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 25. des.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 29. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclaration.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 25. des.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 1. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 2. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.adapter.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJLibrary.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,8 +1,8 @@
 /*
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseAndResolveFile.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -21,9 +21,9 @@
 /*
  * Created on 27. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 
 public class ECJParseAndResolveFile {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseFile.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -15,9 +15,9 @@
 /*
  * Created on 27. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 
 public class ECJParseFile {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJParseTest.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -16,9 +16,9 @@
 /*
  * Created on 27. sep.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 
 public class ECJParseTest {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJPrimitive.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJPrimitive.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 6. mars. 2007
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJTools.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 10. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_add_jar.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_add_jar.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_add_jar.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_add_source_folder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_add_source_folder.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_add_source_folder.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_ast_for_compilation_unit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_ast_for_compilation_unit.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_ast_for_compilation_unit.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_name.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_name.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_binding_of_name.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_compilation_unit_for_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_compilation_unit_for_type.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_compilation_unit_for_type.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_compilation_unit_buffer.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_package.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_package.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_package.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_project.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_project.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_create_project.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_java_project.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_java_project.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_java_project.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_project.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_project.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_current_project.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_file_exists.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_file_exists.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_file_exists.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_hierarchy_for_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_hierarchy_for_type.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_hierarchy_for_type.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_icompilation_unit_for_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_icompilation_unit_for_type.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_icompilation_unit_for_type.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_binding_primitive_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_binding_primitive_type.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_binding_primitive_type.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_cast_compatible.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_cast_compatible.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_cast_compatible.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_subtype_compatible.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_subtype_compatible.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_subtype_compatible.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,8 +1,8 @@
 /*
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_valid_ast_node.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_valid_ast_node.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_valid_ast_node.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_valid_ast_nodelist.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_valid_ast_nodelist.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_is_valid_ast_nodelist.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_methoddecl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_methoddecl.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_methoddecl.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_methodinvoc.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_methodinvoc.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_methodinvoc.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_superctorinvoc.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_superctorinvoc.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_superctorinvoc.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_supermethodinvoc.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_supermethodinvoc.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_method_of_supermethodinvoc.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_open_project.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_open_project.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_open_project.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_and_resolve.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_and_resolve.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_and_resolve.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_parse_only.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_path_of_compilationunit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_path_of_compilationunit.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_path_of_compilationunit.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_project_get_file.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_project_get_file.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_project_get_file.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. sep. 2008
  *
- * Copyright (c) 2005-2008, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2008, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_in_hierarchy.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. sep. 2008
  *
- * Copyright (c) 2005-2008, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2008, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_supertype_type_refs_no_generics.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. sep. 2008
  *
- * Copyright (c) 2005-2008, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2008, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_type.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_for_type.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_project_for_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_project_for_type.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_search_project_for_type.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_signature_to_type.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_expr.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_expr.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_expr.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_type.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_type.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_typedecl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_typedecl.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_typedecl.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_typeparameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_typeparameter.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_type_of_typeparameter.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_unbacked_compilation_unit_for_type.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_unbacked_compilation_unit_for_type.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/ECJ_unbacked_compilation_unit_for_type.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java	Tue Nov  8 16:14:18 2011	(r23576)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/library/ecj/TestECJAdapter.java	Tue Nov  8 16:18:23 2011	(r23577)
@@ -1,9 +1,9 @@
 /*
  * Created on 9. okt.. 2006
  *
- * Copyright (c) 2005, Karl Trygve Kalleberg <karltk at ii.uib.no>
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt dot org>
  * 
- * Licensed under the GNU General Public License, v2
+ * Licensed under the GNU Lesser Public License, v2.1
  */
 package org.spoofax.interpreter.library.ecj;
 


From karltk at strategoxt.org  Tue Nov  8 17:18:38 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 16:18:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23578 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj
Message-ID: <20111108161838.291D52B8031@mx2.tudelft.nl>

Author: karltk
Date: Tue Nov  8 16:18:37 2011
New Revision: 23578
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23578&sc=1

Log:
More license fixes. Added AUTHORS and LICENSE.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/AUTHORS
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/LICENSE

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/AUTHORS
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/AUTHORS	Tue Nov  8 16:18:37 2011	(r23578)
@@ -0,0 +1 @@
+Karl Trygve Kalleberg <karltk near strategoxt dot org>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/LICENSE
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/LICENSE	Tue Nov  8 16:18:37 2011	(r23578)
@@ -0,0 +1 @@
+GNU Lesser General Public License v2.1

From karltk at strategoxt.org  Tue Nov  8 17:19:01 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 16:19:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23579 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton
Message-ID: <20111108161901.8733A7F803E@mx1.tudelft.nl>

Author: karltk
Date: Tue Nov  8 16:19:01 2011
New Revision: 23579
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23579&sc=1

Log:
Added initial implementations for skeleton terms.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/SkeletonStrategoAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/SkeletonStrategoList.java

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/SkeletonStrategoAppl.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/SkeletonStrategoAppl.java	Tue Nov  8 16:19:01 2011	(r23579)
@@ -0,0 +1,119 @@
+package org.spoofax.interpreter.adapter.ecj.skeleton;
+
+import java.io.IOException;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StrategoTerm;
+
+public abstract class SkeletonStrategoAppl extends StrategoTerm implements IStrategoAppl {
+
+  private static final long serialVersionUID = -2522680523775044390L;
+
+    public SkeletonStrategoAppl(IStrategoList annotations, int storageType) {
+        super(annotations, storageType);
+    }
+    
+    @Deprecated
+    final public IStrategoTerm[] getArguments() {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    public abstract IStrategoConstructor getConstructor();
+    
+    @Override
+    public abstract IStrategoTerm[] getAllSubterms();
+
+    @Override
+    public abstract IStrategoTerm getSubterm(int index);
+
+    @Override
+    final public String getName() {
+        return getConstructor().getName();
+    }
+
+    @Override
+    final public int getSubtermCount() {
+        return getConstructor().getArity();
+    }
+
+    @Override
+    final public int getTermType() {
+        return IStrategoTerm.APPL;
+    }
+
+    @Override
+    final protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        if (second.getTermType() != IStrategoTerm.APPL)
+            return false;
+        IStrategoAppl o = (IStrategoAppl)second;
+        if (getConstructor() != o.getConstructor())
+            return false;
+        
+        IStrategoTerm[] kids = getAllSubterms();
+        IStrategoTerm[] secondKids = o.getAllSubterms();
+        if (kids != secondKids) {
+            for (int i = 0, sz = kids.length; i < sz; i++) {
+                IStrategoTerm kid = kids[i];
+                IStrategoTerm secondKid = secondKids[i];
+                if (kid != secondKid && !kid.match(secondKid)) {
+                    if (commonStorageType == SHARABLE && i != 0)
+                        System.arraycopy(secondKids, 0, kids, 0, i);
+                    return false;
+                }
+            }
+  
+// FIXME should update sharing when possible            
+//            if (commonStorageType == SHARABLE)
+//                this.kids = secondKids;
+        }
+        
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        if (annotations == secondAnnotations) {
+            return true;
+        } else if (annotations.match(secondAnnotations)) {
+            if (commonStorageType == SHARABLE) internalSetAnnotations(secondAnnotations);
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    final public void writeAsString(Appendable output, int maxDepth) throws IOException {
+        output.append(getName());
+        IStrategoTerm[] kids = getAllSubterms();
+        if(kids.length > 0) {
+            output.append('(');
+            if (maxDepth == 0) {
+            	output.append("...");
+            } else {
+	            kids[0].writeAsString(output, maxDepth - 1);
+	            for(int i = 1; i < kids.length; i++) {
+	                output.append(',');
+	                kids[i].writeAsString(output, maxDepth - 1);
+	            }
+            }
+            output.append(')');
+        }
+        appendAnnotations(output, maxDepth);
+    }
+
+    @Override
+    final protected int hashFunction() {
+        long r = getConstructor().hashCode();
+        int accum = 6673;
+        IStrategoTerm[] kids = getAllSubterms();
+        for(int i = 0; i < kids.length; i++) {
+            r += kids[i].hashCode() * accum;
+            accum *= 7703;
+        }
+        return (int)(r >> 12);
+    }
+    
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/SkeletonStrategoList.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/SkeletonStrategoList.java	Tue Nov  8 16:19:01 2011	(r23579)
@@ -0,0 +1,177 @@
+/*
+ * Created on 9. okt.. 2006
+ *
+ * Copyright (c) 2005-2011, Karl Trygve Kalleberg <karltk near strategoxt.org>
+ * 
+ * Licensed under the GNU Lesser General Public License, v2.1
+ */
+package org.spoofax.interpreter.adapter.ecj.skeleton;
+
+import java.io.IOException;
+import java.util.Iterator;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermPrinter;
+import org.spoofax.terms.StrategoListIterator;
+import org.spoofax.terms.StrategoTerm;
+import org.spoofax.terms.TermFactory;
+
+/**
+ * A basic stratego list implementation using a linked-list data structure.
+ */
+public abstract class SkeletonStrategoList extends StrategoTerm implements IStrategoList, Iterable<IStrategoTerm> {
+    
+    private static final long serialVersionUID = 624120573663698628L;
+
+    private static final int UNKNOWN_SIZE = -1;
+    
+    /**
+     * @see #hashFunction()
+     * @see TermFactory#EMPTY_LIST  The singleton maximally shared empty list instance.
+     */
+    static final int EMPTY_LIST_HASH = 1 * 71 * 71;
+    
+    private IStrategoTerm head;
+    
+    private IStrategoList tail;
+    
+    private int size = UNKNOWN_SIZE;
+
+    /**
+     * Creates a new list.
+     * 
+     * @see #prepend(IStrategoTerm) Adds a new head element to a list.
+     */
+    public SkeletonStrategoList(IStrategoList annotations, int storageType) {
+        super(annotations, storageType);
+    }
+    
+    @Override
+    public abstract IStrategoTerm head();
+    
+    @Override
+    public abstract boolean isEmpty();
+    
+    @Override
+    public abstract IStrategoList tail();
+
+    @Override
+    public abstract IStrategoTerm[] getAllSubterms();
+
+    @Override
+    public abstract IStrategoTerm getSubterm(int index);
+
+    @Override
+    public abstract int getSubtermCount();
+
+    @Deprecated
+    public IStrategoList prepend(IStrategoTerm prefix) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    @Deprecated
+    public final IStrategoTerm get(int index) {
+        throw new NotImplementedException();
+    }
+    
+    @Override
+    public final int size() {
+        return getSubtermCount();
+    }
+
+    @Override
+    public final int getTermType() {
+        return IStrategoTerm.LIST;
+    }
+
+    @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        if (second.getTermType() != IStrategoTerm.LIST)
+            return false;
+        
+        final IStrategoList snd = (IStrategoList) second;
+        if (size() != snd.size())
+            return false;
+        
+        if (!isEmpty()) {
+            IStrategoTerm head = head();
+            IStrategoTerm head2 = snd.head();
+            if (head != head2 && !head.match(head2))
+                return false;
+            
+            IStrategoList tail = tail();
+            IStrategoList tail2 = snd.tail();
+        
+            // TODO: test equality of annos on cons nodes (see BasicStrategoList)
+            for (IStrategoList cons = tail, cons2 = tail2; !cons.isEmpty(); cons = cons.tail(), cons2 = cons2.tail()) {
+                IStrategoTerm consHead = cons.head();
+                IStrategoTerm cons2Head = cons2.head();
+                if (consHead != cons2Head && !consHead.match(cons2Head))
+                    return false;
+            }
+            
+            if (commonStorageType == SHARABLE) {
+                this.head = head2;
+                this.tail = tail2;
+            }
+        }
+        
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        if (annotations == secondAnnotations) {
+            return true;
+        } else if (annotations.match(secondAnnotations)) {
+            if (commonStorageType == SHARABLE) internalSetAnnotations(secondAnnotations);
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    public final void prettyPrint(ITermPrinter pp) {
+        throw new NotImplementedException();
+    }
+    
+    @Override
+    public final void writeAsString(Appendable output, int maxDepth) throws IOException {
+        output.append('[');
+        if(!isEmpty()) {
+            if (maxDepth == 0) {
+                output.append("...");
+            } else {
+                IStrategoTerm[] kids = getAllSubterms();
+                kids[0].writeAsString(output, maxDepth - 1);
+                for(int i = 1; i < kids.length; i++) {
+                    output.append(',');
+                    kids[0].writeAsString(output, maxDepth - 1);
+                }
+            }
+        }
+        output.append(']');
+        appendAnnotations(output, maxDepth);
+    }
+
+    @Override
+    public int hashFunction() {
+        /* UNDONE: BasicStrategoTerm hash; should use cons/nil hash instead
+        long hc = 4787;
+        for (IStrategoList cur = this; !cur.isEmpty(); cur = cur.tail()) {
+            hc *= cur.head().hashCode();
+        }
+        return (int)(hc >> 2);
+        */
+        final int prime = 71;
+        int result = 1;
+        result = prime * result + ((head == null) ? 0 : head.hashCode());
+        result = prime * result + ((tail == null) ? 0 : tail.hashCode());
+        return result;
+    }
+
+    public final Iterator<IStrategoTerm> iterator() {
+        return new StrategoListIterator(this);
+    }
+}

From karltk at strategoxt.org  Tue Nov  8 17:22:17 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 16:22:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23580 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj:
	scripts src/main/stratego src/main/stratego/spoofax
	src/main/stratego/spoofax/bindings/eclipse src/te...
Message-ID: <20111108162217.6E10ECC0FA@mx4.tudelft.nl>

Author: karltk
Date: Tue Nov  8 16:22:17 2011
New Revision: 23580
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23580&sc=1

Log:
Split scripts directory into src/main/stratego and src/test/stratego.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/
      - copied from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/allid.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/deconstructor.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/deconstructor.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/parse-and-dump.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/parse-and-dump.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/rewrite-return.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test1.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test1.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test2.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test2.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test3.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test3.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test4.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test4.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test5.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test5.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test6.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test6.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test7.str
      - copied unchanged from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test7.str
Replaced:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/EclipseJava.str
      - copied unchanged from r23576, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/EclipseJava.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
      - copied unchanged from r23576, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/eclipse-compiler-ffi.str
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/EclipseJava.str (from r23576, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/EclipseJava.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/EclipseJava.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23576, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/EclipseJava.str)
@@ -0,0 +1,128 @@
+/**
+ * Signature for the Eclipse JDT Abstract Syntax Tree.
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ *
+ * @author Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ */
+
+module spoofax/bindings/eclipse/EclipseJava
+signature
+  sorts
+   AbstractTypeDeclaration
+   Annotation
+   ASTNode
+   BodyDeclaration
+   Expression 
+   Modifier
+   Statement
+   Type
+   TypeParameter
+   VariableDeclarationFragment
+   Comment
+   BodyDeclaration
+  constructors
+                                    : Expression -> ASTNode
+                                    : Javadoc -> Comment
+                                    : AbstractTypeDeclaration -> BodyDeclaration
+    AnnotationTypeDeclaration       : Javadoc * Term * Term * Term -> AbstractTypeDeclaration
+    AnnotationTypeMemberDeclaration : Javadoc * Term * Term * Term * Term -> Term
+    AnonymousClassDeclaration       : Term -> ASTNode
+    ArrayAccess                     : Expression * Expression -> Expression
+    ArrayCreation                   : Term * Term * Term -> Expression
+    ArrayInitializer                : Term -> Expression
+    ArrayType                       : Type * Int * Type -> Type
+    AssertStatement                 : Term * Term -> Statement
+    Assignment                      : AssignmentOperator * Expression * Expression -> Expression
+    AssignmentOperator              : String -> AssignmentOperator
+    BlockComment                    : Comment
+    Block                           : List(Statement) -> Statement 
+    BooleanLiteral                  : Term -> Expression
+    BooleanType                     : Type
+    BreakStatement                  : Term -> Statement
+    ByteType                        : Type
+    CastExpression                  : Term * Term -> Expression
+    CatchClause                     : Term * Term -> ASTNode
+    CharacterLiteral                : Term -> Expression
+    ClassInstanceCreation           : Term * Term * Term * Term -> Expression
+    CompilationUnit                 : PackageDeclaration * List(ImportDeclaration) * List(AbstractTypeDeclaration) -> ASTNode
+    ConditionalExpression           : Term * Term * Term -> Expression
+    ConstructorInvocation           : Term -> Statement
+    ContinueStatement               : Term -> Statement
+    DoStatement                     : Term * Term -> Statement
+    DoubleType                      : Type
+    EmptyStatement                  : Statement
+    EnhancedForStatement            : Term * Term * Term -> Statement
+    EnumConstantDeclaration         : Javadoc * Term * Term * Term * Term -> BodyDeclaration
+    EnumDeclaration                 : Javadoc * Term * Term * Term * Term * Term -> AbstractTypeDeclaration
+    ExpressionStatement             : Term -> Statement
+    FieldAccess                     : Term * Term -> Expression
+    FieldDeclaration                : Javadoc * List(Modifier) * Type * List(VariableDeclarationFragment) -> BodyDeclaration
+    FloatType                       : Type
+    ForStatement                    : Term * Term * Term * Term -> Statement
+    IfStatement                     : Term * Term * Term -> Statement
+    ImportDeclaration               : Name * Int * Int -> ASTNode
+    InfixExpression                 : String * Expression * Expression * List(Expresssion) -> Expression
+    Initializer                     : Term -> BodyDeclaration
+    InstanceofExpression            : Term * Term -> Expression
+    IntType                         : Type
+    Javadoc                         : Term -> Comment
+    LabeledStatement                : Term * Term -> Statement
+    LineComment                     : Comment
+    LongType                        : Type
+    MarkerAnnotation                : Name -> Annotation
+    MemberRef                       : Term * Term -> ASTNode
+    MemberValuePair                 : Term * Term -> ASTNode
+    MethodDeclaration               : Javadoc * List(Modifier) * Type * List(TypeParameter) * SimpleName * List(SingleVariableDeclaration) * List(Name) * Block -> BodyDeclaration
+    MethodInvocation                : Expression * Name * List(Type) * List(Expression) -> Expression
+    MethodRef                       : Term * Term * Term -> ASTNode
+    MethodRefParameter              : Type * SimpleName -> ASTNode
+    Modifier                        : Term -> Modifier
+    ModifierKeyword                 : Term -> ModifierKeyword
+/*    Name                            : Term -> Term*/
+    NormalAnnotation                : Term * Term -> Annotation
+    NullLiteral                     : Expression
+    NumberLiteral                   : String -> Expression
+    PackageDeclaration              : Javadoc * List(Annotation) * Name -> ASTNode
+    ParameterizedType               : Term * Term -> Term
+    ParenthesizedExpression         : Term -> Expression
+    Plus                            : Term * Term -> Term 
+    PostfixExpression               : Term * Term -> Term
+    PostfixExpressionOperator       : Term -> Term
+    PrefixExpression                : Term * Term -> Expression
+    PrefixExpressionOperator        : Term -> Term
+    PrimitiveType                   : Term -> Term
+    QualifiedName                   : Term * Term -> Term
+    QualifiedType                   : Term * Term -> Term
+    ReturnStatement                 : Expression -> Statement
+    SimpleName                      : Term -> Term 
+    SimpleType                      : Term -> Term
+    SingleMemberAnnotation          : Term * Term -> Term
+    SingleVariableDeclaration       : List(Modifier) * Type * SimpleName * Int * Expression -> SingleVariableDeclaration
+    StringLiteral                   : Term -> Term 
+    SuperConstructorInvocation      : Term * Term * Term -> Term
+    SuperFieldAccess                : Term * Term -> Term
+    SuperMethodInvocation           : Term * Term * Term * Term -> Term
+    SwitchCase                      : Term -> Term
+    SwitchStatement                 : Term * Term -> Term
+    SynchronizedStatement           : Term * Term -> Term
+    TagElement                      : Term * Term -> Term
+    TextElement                     : Term -> Term
+    ThisExpression                  : Term -> Expression
+    ThrowStatement                  : Term -> Statement
+    Times                           : Term * Term -> Term
+    TryStatement                    : Term * Term * Term -> Statement
+    TypeDeclaration                 : Javadoc * List(Modifier) * Name * List(TypeParameter) * Type * List(Type) * List(BodyDeclaration) * Int -> AbstractTypeDeclaration
+    TypeDeclarationStatement        : Term -> Term
+    TypeLiteral                     : Term -> Term
+    TypeParameter                   : Term * Term -> Term
+    VariableDeclarationExpression   : Term * Term * Term -> Term
+    VariableDeclarationFragment     : Term * Term * Term -> Term 
+    VariableDeclarationStatement    : Term * Term * Term -> Term 
+    WhileStatement                  : Term * Term -> Term
+    WildcardType                    : Term -> Type
+  
+overlays
+
+    Interface = 1
+    Class = 0
\ No newline at end of file

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str (from r23576, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/eclipse-compiler-ffi.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/stratego/spoofax/bindings/eclipse/eclipse-compiler-ffi.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23576, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/spoofax/bindings/eclipse/eclipse-compiler-ffi.str)
@@ -0,0 +1,543 @@
+/**
+ * Foreign function interface to the Eclipse Compiler for Java.
+ *
+ * Licensed under the GNU Lesser General Public License, v2.1
+ *
+ * @author Karl Trygve Kalleberg <karltk near strategoxt dot org>
+ */
+
+module spoofax/bindings/eclipse/eclipse-compiler-ffi
+imports
+  stratego-lib
+  spoofax/bindings/eclipse/EclipseJava
+
+signature
+  constructors
+  FILE : Term -> FILE
+  
+  Project        : Term -> Project
+  Binding        : Int * Int * String -> Binding
+  TypeBinding    : List(String) * String * List(TypeBinding) * TypeBinding * List(TypeBinding) * Int * ITypeBinding -> TypeBinding
+  TypeParameter  : List(String) -> TypeParameter
+  ITypeParameter : String * List(String) -> ITypeParameter
+  DottedName     : String -> DottedName
+  IType          : DottedName * Int * IType * DottedName * List(DottedName) * List(TypeParameter) -> IType
+  ITypeHierarchy : IType * List(IType) -> ITypeHierarchy
+  PrimitiveName  : String -> Name
+  ActualTypeSignature : String * String * String * ActualTypeSignature -> ActualTypeSignature
+  
+strategies
+
+  /** @type FILE -> ASTNode */
+  ecj-parse-only = ?FILE(name) ; prim("ECJ_parse_only", name)
+
+  /** @type String -> ECJProject */
+  ecj-open-project = ?path ; prim("ECJ_open_project", path)
+  
+  ecj-create-project = ?path ; prim("ECJ_create_project", path)
+
+  ecj-add-source-folder(|project) = ?path ; prim("ECJ_add_source_folder", project, path)
+  
+  ecj-add-jar(|project) = ?path ; prim("ECJ_add_jar", path, project)
+    
+  ecj-parse-and-resolve(|project) = ?FILE(name) ; prim("ECJ_parse_and_resolve", project, name) 
+  
+  ecj-is-valid-ast-node = 
+       (?t ; prim("ECJ_is_valid_ast_node", t))
+    <+ (?t ; prim("ECJ_is_valid_ast_nodelist", t))
+    <+ is-string
+    <+ is-int
+  
+  /** @type Name -> TypeBinding */
+  ecj-binding-of =
+     ecj-is-Name
+   ; ?name
+   ; prim("ECJ_binding_of_name", name)
+   
+  /** @type Name -> TypeBinding */
+  ecj-binding-of = 
+     ecj-is-TypeDeclaration
+   ; ?type
+   ; prim("ECJ_type_of_typedecl", type) // FIXME ECJ_binding_of_typedecl
+
+  /** @type Type -> TypeBinding */
+  ecj-binding-of =
+      ecj-is-Type
+    ; ?expr
+    ; prim("ECJ_type_of_type", expr) // FIXME ECJ_binding_of_type
+
+  /** @type Name -> TypeBinding */
+  ecj-binding-of =
+     ?TypeDeclarationStatement(_)
+   ; ?stmt
+   ; prim("ECJ_type_of_typedeclstmt", stmt)
+  
+  /** @type Name -> TypeBinding */
+  ecj-binding-of =
+     ?TypeParameter(_,_)
+   ; ?param
+   ; prim("ECJ_type_of_typeparameter", param)
+
+  /** @type Name -> TypeBinding */
+  ecj-binding-of =
+      ecj-is-Expression
+    ; ?expr
+    ; prim("ECJ_type_of_expr", expr)
+
+
+strategies
+
+  /**
+   * @param target - TypeBinding
+   * @type TypeBinding -> TypeBinding 
+   */
+  ecj-is-cast-compatible(|target) =
+     ?source
+   ; prim("ECJ_is_cast_compatible", target, source)
+
+  /**
+   * @param target - TypeBinding
+   * @type TypeBinding -> TypeBinding 
+   */
+  ecj-is-subtype-compatible(|target) =
+     ?source
+   ; prim("ECJ_is_subtype_compatible", target, source)
+
+    
+strategies
+
+  /** @type MethodInvocation -> MethodBinding */
+  ecj-method-of =
+      ?MethodInvocation(_, _, _, _)
+    ; ?meth
+    ; prim("ECJ_method_of_methodinvoc", meth)
+
+  /** @type SuperMethodInvocation -> MethodBinding */
+  ecj-method-of =
+      ?SuperMethodInvocation(_, _, _, _)
+    ; ?meth
+    ; prim("ECJ_method_of_supermethodinvoc", meth)
+
+  /** @type SuperConstructorInvocation -> MethodBinding */
+  ecj-method-of =
+      ?SuperConstructorInvocation(_, _, _)
+    ; ?meth
+    ; prim("ECJ_method_of_superctorinvoc", meth)
+    
+strategies
+
+  ecj-is-TypeDeclaration = 
+      ?AnnotationTypeDeclaration(_, _, _, _)
+    + ?EnumDeclaration(_, _, _, _, _, _)
+    + ?TypeDeclaration(_, _, _, _, _, _ ,_,_)
+      
+  ecj-is-IType = ?"IType"#(_)
+  
+  ecj-is-Type = 
+      ?ArrayType(_, _, _)
+    + ?ParameterizedType(_, _)
+    + ?PrimitiveType(_)
+    + ?QualifiedType(_, _)
+    + ?SimpleType(_)
+    + ?WildcardType(_)
+
+  ecj-is-Name =
+      ?SimpleName(_)
+    + ?QualifiedName(_, _)
+    + ?PrimitiveName(_)
+   
+  ecj-is-Expression =
+      ?MarkerAnnotation(_)
+    + ?NormalAnnotation(_,_)
+    + ?SingleMemberAnnotation(_,_)
+    + ?ArrayAccess(_, _)
+    + ?ArrayCreation(_, _, _)
+    + ?ArrayInitializer(_)
+    + ?Assignment(_, _, _)
+    + ?BooleanLiteral(_)
+    + ?CastExpression(_, _)
+    + ?CharacterLiteral(_)
+    + ?ClassInstanceCreation(_, _, _, _)
+    + ?ConditionalExpression(_, _, _)
+    + ?FieldAccess(_, _)
+    + ?InfixExpression(_, _, _, _)
+    + ?InstanceofExpression(_, _)
+    + ?MethodInvocation(_, _, _, _)
+    + ?QualifiedName(_, _)
+    + ?SimpleName(_)
+    + ?NullLiteral()
+    + ?NumberLiteral(_)
+    + ?ParenthesizedExpression(_)
+    + ?PostfixExpression(_, _)
+    + ?StringLiteral(_)
+    + ?SuperFieldAccess(_, _)
+    + ?SuperMethodInvocation(_, _, _, _)
+    + ?ThisExpression(_)
+    + ?TypeLiteral(_)
+    + ?VariableDeclarationExpression(_, _, _)     
+
+  ecj-is-CompilationUnit = ?CompilationUnit(_, _, _)
+
+  ecj-is-DottedName = ?DottedName(_)
+  
+  ecj-is-MethodDeclaration = ?MethodDeclaration(_, _, _, _, _, _, _, _)
+
+  ecj-is-FieldDeclaration = ?FieldDeclaration(_, _, _, _)
+
+  ecj-is-SimpleName = ?SimpleName(_)    
+  
+  ecj-is-Javadoc = ?Javadoc(_)
+  
+  ecj-is-TypeBinding = ?TypeBinding(_, _, _, _, _, _, _)
+  
+strategies
+
+  /** @type Term -> ECJProject */
+  ecj-current-project =
+      prim("ECJ_current_project")
+
+  /** @type Term -> ECJJavaProject */
+  ecj-current-java-project =
+      prim("ECJ_current_java_project")
+
+  /** @type DottedName -> IType */
+  ecj-search-for-type(|scope) = 
+      DottedName(?typename)
+    ; prim("ECJ_search_for_type", scope, typename)      
+
+  /** @param scope - IJavaElement
+    * @type DottedName -> List(IType) 
+    */
+  ecj-search-for-supertype-type-refs(|scope) = 
+      DottedName(?typename)
+    ; prim("ECJ_search_for_supertype_type_refs", scope, typename)      
+
+  /** @param scope - IJavaElement
+    * @type DottedName -> List(IType) 
+    */
+  ecj-search-for-supertype-type-refs-no-generics(|scope) = 
+      DottedName(?typename)
+    ; prim("ECJ_search_for_supertype_type_refs_no_generics", scope, typename)      
+
+  /** Search for a given type name (type erasure) in the parent type hierarchy
+    * of the parameter 'scope'.
+    * 
+    * @param accept - Signature -> _ 
+    * @param scope - IType
+    * @type DottedName -> List(IType) 
+    */
+  ecj-search-for-supertype-type-refs-in-hierarchy(accept|scope) = 
+      DottedName(?typename)
+    ; prim("ECJ_search_for_supertype_type_refs_in_hierarchy", accept | scope, typename)      
+
+  /** 
+   * Check compilation units with the given type name for the presence of a type
+   * with the given name. This is a shallow check.
+   * @param project : IProject
+   * @type DottedName -> IType 
+   *
+   * @see ecj-search-project-for-type-deep
+   */
+  ecj-search-project-for-type(|project) = 
+      DottedName(?typename)
+    ; prim("ECJ_search_project_for_type", project, typename, 0)      
+
+  /** 
+   * Check all compilation units for the given type name, also those with different
+   * names than the type name. This takes longer than a shallow check.
+   *
+   * @param project : IProject
+   * @type DottedName -> IType
+   */
+  ecj-search-project-for-type-deep(|project) = 
+      DottedName(?typename)
+    ; prim("ECJ_search_project_for_type", project, typename, 1)      
+
+  /** @type IType -> ITypeHierarchy */
+  ecj-hierarchy-for-type = 
+    ?type
+    ; prim("ECJ_hierarchy_for_type", type)
+    
+  /** @type IType -> ICompilationUnit */    
+  ecj-icompilation-unit-for-type =
+    ?type
+    ; prim("ECJ_icompilation_unit_for_type", type)
+
+  /** @type IType -> CompilationUnit */    
+  ecj-unbacked-compilation-unit-for-type =
+    ?type
+    ; prim("ECJ_unbacked_compilation_unit_for_type", type)
+
+  /** @type ICompilationUnit -> CompilationUnit */   
+  ecj-ast-for-compilation-unit =
+    ?cu
+    ; prim("ECJ_ast_for_compilation_unit", cu, 0)
+
+  /** @type ICompilationUnit -> CompilationUnit */
+  ecj-typed-ast-for-compilation-unit =
+    ?cu
+    ; prim("ECJ_ast_for_compilation_unit", cu, 1)
+
+  /** @type CompilationUnit -> CompilationUnit */
+  ecj-rewrite-compilation-unit(s) = 
+    ?cu
+    ; prim("ECJ_rewrite_compilation_unit", s | cu)
+
+  /** @type IFile -> IFile */
+  ecj-rewrite-file(s) = 
+    ?cu
+    ; prim("ECJ_rewrite_file", s | cu)
+    
+strategies
+
+  /** 
+   * Compute the fully qualified, dotted name as a string.
+   *
+   * @type SimpleName -> String
+   */
+  ecj-as-dotted-string = ?SimpleName(<id>)
+
+  /** @type QualifiedName -> String */
+  ecj-as-dotted-string = 
+      ?QualifiedName(<ecj-as-dotted-string>, SimpleName(n)) => rest
+    ; <concat-strings> [rest, ".", n]
+
+  /** @type PrimitiveName -> String */
+  ecj-as-dotted-string = ?PrimitiveName(<id>)
+  
+  /** @type _ -> SimpleName / QualifiedName */
+  ecj-name-of = ?TypeDeclaration(_, _, <id>, _, _, _, _, _)   
+
+  /** @type _ -> SimpleName / QualifiedName */
+  ecj-name-of = ?SimpleType(<id>)
+
+  /** @type _ -> SimpleName / QualifiedName */
+  ecj-name-of = ?MethodDeclaration(_, _, _, _, <id>, _, _, _)
+
+  /** @type _ -> SimpleName / QualifiedName */
+  ecj-name-of = ?VariableDeclarationFragment(<id>, _, _)
+
+  /** @type _ -> SimpleName / QualifiedName */
+  ecj-name-of = ?ArrayType(_, _, <ecj-name-of>)
+  
+  /** @type _ -> SimpleName / QualifiedName */
+  ecj-name-of = ?PackageDeclaration(_, _, <id>)
+
+  /** @type _ -> SimpleName / QualifiedName */
+  ecj-name-of = ?SingleVariableDeclaration(_, _, <id>, _, _)
+  
+  /** @type -> PrimitiveName */
+  ecj-name-of = ?PrimitiveType(<id>) ; !PrimitiveName(<id>)
+  
+  /** @type -> SimpleName / QualifiedName */
+  ecj-name-of = ?IType(<id>, _, _, _, _, _) ; ecj-as-qualified-name
+  
+  /** @type ParameterizedType -> SimpleName / QualifiedName */
+  ecj-name-of = ?ParameterizedType(<id>, _)
+  
+  /**
+   * Computes the dotted name of an AST node, if this is possible
+   * 
+   * @type ASTNode -> DottedName
+   */
+  ecj-dotted-name-of = !DottedName(<ecj-name-of ; ecj-as-dotted-string>)
+   
+  /** @type ASTNode -> DottedName */
+  ecj-dotted-name-of = ?TypeBinding(_, <!DottedName(<id>)>, _, _, _, _, _)
+
+  /** @type ASTNode -> DottedName */
+  ecj-dotted-name-of = ?IType(<id>, _, _, _, _, _)
+  
+  /** @type PrimitiveType -> DottedName  */
+  ecj-dotted-name-of = ?PrimitiveType(x); !DottedName(x)
+  
+  /** @type ParameterizedType -> DottedName  */
+  ecj-dotted-name-of = ?ParameterizedType(<ecj-dotted-name-of>, _)
+  
+  /** @type */    
+  ecj-package-of = ?CompilationUnit(<id>, _, _)
+  
+  /** @type CompilationUnit -> List(TypeDeclaration) */    
+  ecj-types-of = ?CompilationUnit(_, _, <id>)
+  
+  /** @type CompilationUnit -> List(ImportDeclaration) */    
+  ecj-imports-of = ?CompilationUnit(_, <id>, _)
+
+  /** 
+   * Obtain the fully qualified name of a type. The AST must have been
+   * constructed with full type information.
+   *
+   * @type Type -> Name 
+   */
+  ecj-qualified-name-of = 
+      ecj-binding-of 
+    ; ecj-dotted-name-of 
+    ; ecj-as-qualified-name
+  
+strategies
+  
+  /**
+   * Obtain the project-relative path for a compilation unit.
+   *
+   * @type CompilationUnit -> String
+   */
+  ecj-project-path-of = ?node ; prim("ECJ_path_of_compilationunit", node)
+  
+  /**
+   * @param IProject - project
+   * @type Tuple(IProject, String) -> IFile 
+   */
+  ecj-project-get-file(|project) =
+      ?filename
+    ; prim("ECJ_project_get_file", project, filename)
+
+  /**
+   * @type IFile -> IFile 
+   */
+  ecj-file-exists =
+      ?file
+    ; prim("ECJ_file_exists", file)
+
+  
+  /** @type SimpleName -> SimpleName */
+  ecj-simplename-of = ?SimpleName(_)
+
+  /** @type QualifiedName -> SimpleName */
+  ecj-simplename-of = ?QualifiedName(_, <ecj-simplename-of>)
+  
+  /** @type DottedName -> SimpleName */
+  ecj-simplename-of = ?DottedName(<id>) ; string-tokenize(|['.']) ; last ; !SimpleName(<id>)
+  
+  /** @type DottedName -> SimpleName */
+  ecj-simplename-of = is-string ; string-tokenize(|['.']) ; last ; !SimpleName(<id>)
+  
+  /** @type ASTNode -> SimpleName */
+  ecj-simplename-of = ecj-name-of ; ecj-simplename-of
+
+  /** @type Name -> String */
+  ecj-simplename-of-as-string = ?PrimitiveType(<id>) <+ ecj-simplename-of ; ?SimpleName(<id>)
+    
+  /** @type DottedName -> Name */
+  ecj-as-qualified-name =  ?DottedName(<ecj-as-qualified-name>)
+
+  /** @type String -> Name */      
+  ecj-as-qualified-name =
+      is-string
+    ; string-tokenize(|['.'])
+    ; let f = \ (el, tl) -> QualifiedName(tl, SimpleName(el)) \
+          g = \ (el, 0) -> SimpleName(el) \
+      in 
+        <foldl(g <+ f)> (<id>, 0)
+      end
+    ; not(is-int)
+
+  /**
+   * Returns true iff the supplied Type is a primitive type
+   * @type ASTNode -> PrimitiveType
+   */
+  ecj-is-primitive-type = ?PrimitiveType(_)
+
+  /** @type ASTNode -> PrimitiveType */
+  ecj-is-PrimitiveType = ?PrimitiveType(_)
+
+  /** @type ASTNode -> ParameterizedType */
+  ecj-is-ParameterizedType = ?ParameterizedType(_, _)
+
+  /** @type ASTNode -> ASTNode */
+  ecj-is-valid-ast = 
+    bottomup(
+      ecj-is-valid-ast-node 
+      <+ where(<debug> ("Not an ECJ appl: ", <id>)))
+  
+  /** @type MethodDeclaration -> MethodDeclaration */
+  ecj-is-constructor =
+    ?MethodDeclaration(_, _, None(), _, _, _ ,_ ,_)
+        
+  /** 
+   * @type MethodDeclaration -> MethodDeclaration
+   */
+  ecj-is-static = 
+    where(?MethodDeclaration(_, <not(filter(?Modifier(ModifierKeyword(8))) => [])>, _, _, _, _, _, _))
+
+  /** 
+   * @type MethodDeclaration -> MethodDeclaration
+   */
+  ecj-is-public = 
+    where(?MethodDeclaration(_, <not(filter(?Modifier(ModifierKeyword(1))) => [])>, _, _, _, _, _, _))
+
+  /** @type TypeBinding -> TypeBinding */
+  ecj-is-binding-for-primitive = 
+    ?tb
+    ; prim("ECJ_is_binding_primitive_type", tb)
+    
+  /**
+   * Create a new file containing an ugly printed string of the given
+   * AST node. First member of the tuple is the project relative path.
+   * Second argument is the AST node to print. Result is the project
+   * relative path.
+   *
+   * @type Tuple(String,ASTNode) -> String
+   */
+  ecj-create-compilation-unit-buffer =
+      ?(filename, typedecl) 
+    ; where(<ecj-is-valid-ast> typedecl)
+    ; prim("ECJ_create_compilation_unit_buffer", filename, typedecl)
+
+  /**
+   * Creates a given dotted package name in the currently active project, in
+   * inside the given base path.
+   *
+   * @type Tuple(String, String) -> ()
+   */
+  ecj-create-package =
+      ?(basepath, packagename)
+    ; prim("ECJ_create_package", basepath, packagename)
+    ; !()
+
+  /** 
+   * Compute all named types implemented by superclasses and interfaces of this
+   * this. This set is all superclasses, and all interfaces, transitively,
+   * but not the type itself.
+   *
+   * @type TypeBinding -> List(DottedName)
+   */
+  ecj-all-supertypes-of = 
+      ?TypeBinding(_,_,_,superclass, superifaces,_,_)
+    ; <collect-all(?TypeBinding(_,<id>,_,_,_,_,_))> [ superclass | superifaces ]
+    ; map(!DottedName(<id>))
+  
+  /** 
+   * Compute all named types implemented by the type of this typebinding.
+   * This is the type itself, all superclasses, and all interfaces, 
+   * transitively.
+   *
+   * @type TypeBinding -> List(DottedName)
+   */
+  ecj-all-types-of = 
+      collect-all(\ TypeBinding(_,x,_,_,_,_,_) -> x \)
+    ; map(!DottedName(<id>))
+
+strategies
+
+  /**
+   * @type ASTNode -> String
+   */
+  ecj-string-name-of = ecj-dotted-name-of ; ?DottedName(<id>)
+  
+   /** 
+    * @type String -> Type
+    */
+  ecj-signature-to-type =
+    ?x
+    ; prim("ECJ_signature_to_type", x)
+  
+overlays
+
+  PublicMod    = Modifier(ModifierKeyword(1))
+  PrivateMod   = Modifier(ModifierKeyword(2))
+  ProtectedMod = Modifier(ModifierKeyword(4))
+  StaticMod    = Modifier(ModifierKeyword(8))
+  FinalMod     = Modifier(ModifierKeyword(16))
+  TransientMod = Modifier(ModifierKeyword(128))
+  
+  
\ No newline at end of file

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/allid.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/allid.str)
@@ -0,0 +1,9 @@
+module allid
+imports
+  stratego-lib
+  ecj-adapter
+
+strategies
+
+
+  main = topdown(id)

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/deconstructor.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/deconstructor.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/deconstructor.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/deconstructor.str)
@@ -0,0 +1,9 @@
+module deconstructor
+imports
+  stratego-lib
+
+strategies
+
+  main = topdown(deconstruct) ; debug
+
+  deconstruct = where(?x#(y) ; <debug> x)

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/parse-and-dump.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/parse-and-dump.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/parse-and-dump.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/parse-and-dump.str)
@@ -0,0 +1,8 @@
+module parse-and-dump
+imports
+  stratego-lib
+  spoofax/bindings/eclipse/eclipse-compiler-ffi
+ 
+strategies
+
+  main = debug
\ No newline at end of file

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/rewrite-return.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/rewrite-return.str)
@@ -0,0 +1,19 @@
+module rewrite-return
+imports
+  stratego-lib
+  EclipseJava
+  
+strategies
+
+  main = where(not(collect(is-datainvariant-method) => [])) ; bottomup(try(RewriteReturn))
+  
+  is-datainvariant-method =
+   ?MethodDeclaration(_,_,_,_,SimpleName("dataInvariant"),_,_,_)
+   
+  RewriteReturn:
+  r at ReturnStatement(_) -> Block([ExpressionStatement(MethodInvocation(
+                                             None()
+                                           , SimpleName("dataInvariant")                                                                                                           
+                                           , []                                                                                                           
+                                           , []))
+                               , r])
\ No newline at end of file

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test1.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test1.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test1.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test1.str)
@@ -0,0 +1,8 @@
+module test1
+imports
+  lib
+  EclipseJava
+  
+strategies
+
+  main = debug ; topdown(try(?TypeDeclaration(_, _, _, _, _, _) ; debug))

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test2.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test2.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test2.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test2.str)
@@ -0,0 +1,14 @@
+module test2
+imports
+  lib
+  EclipseJava
+  ecj-adapter
+
+strategies
+  
+  main = where(
+      !FILE(<id>) 
+    ; debug 
+    ; ecj-parse-only
+    ; topdown(try(?TypeDeclaration(_, _, _, _, _, _) ; debug))
+    ) ; !()

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test3.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test3.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test3.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test3.str)
@@ -0,0 +1,9 @@
+module test3
+imports
+  lib
+  EclipseJava
+  ecj-adapter
+
+strategies
+  
+  main = where(!CompilationUnit(PackageDeclaration(None, [], SimpleName("foo")), [], []) ; debug)

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test4.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test4.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test4.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test4.str)
@@ -0,0 +1,17 @@
+module test4
+imports
+  lib
+  EclipseJava
+  ecj-adapter
+
+strategies
+  
+  main =  
+      where(<ecj-open-project> "demo1" => p)
+    ;!FILE(<id>)
+    ; ecj-parse-and-resolve(|p)
+    ; topdown(try(?TypeDeclaration(_, _, _, _, _, _) 
+                  ; where(ecj-type-of  ; debug)
+                 )
+             )
+    ;!()

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test5.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test5.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test5.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test5.str)
@@ -0,0 +1,18 @@
+module test5
+imports
+  lib
+  EclipseJava
+  ecj-adapter
+
+strategies
+  
+  main =  
+      where(<ecj-open-project> "demo1" => p)
+    ;!FILE(<id>)
+    ; ecj-parse-and-resolve(|p)
+    ; debug
+    ; topdown(try(?MethodDeclaration(_, _, _, _, _, _) 
+                  ; where(ecj-method-of  ; debug)
+                 )
+             )
+    ;!()

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test6.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test6.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test6.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test6.str)
@@ -0,0 +1,19 @@
+module test6
+imports
+  lib
+  EclipseJava
+  ecj-adapter
+
+strategies
+  
+  main =  
+      where(<ecj-open-project> "demo1" => p)
+    ;!FILE(<id>)
+    ; ecj-parse-and-resolve(|p)
+    ; debug
+    ; topdown(try(?MethodInvocation(_, _, _, _) 
+                  ; where(debug ; ecj-method-of ; debug)
+                  ; where(debug ; ecj-type-of ; debug)
+                 )
+             )
+    ;!()

Copied: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test7.str (from r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test7.str)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test7.str	Tue Nov  8 16:22:17 2011	(r23580, copy of r23573, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/scripts/test7.str)
@@ -0,0 +1,7 @@
+module test7
+imports
+  stratego-lib
+
+strategies
+
+  main = topdown(id)

From karltk at strategoxt.org  Tue Nov  8 17:48:33 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 16:48:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23581 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src:
	main/java/org/spoofax/interpreter/adapter/ecj
	test/java/org/spoofax/interpreter/adapter/ecj test/...
Message-ID: <20111108164833.5FD422B804F@mx2.tudelft.nl>

Author: karltk
Date: Tue Nov  8 16:48:31 2011
New Revision: 23581
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23581&sc=1

Log:
Test class names now begin with Test*. Added simple structure test to see that term deconstruction works. Hooked up interpreter to do full-term generic traversal. Traversal seems to terminate early.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestParsing.java
      - copied, changed from r23579, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
      - copied, changed from r23579, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Tue Nov  8 16:22:17 2011	(r23580)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Tue Nov  8 16:48:31 2011	(r23581)
@@ -38,6 +38,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.TermFactory;
 
 public class ECJFactory implements ITermFactory {
 
@@ -3071,7 +3072,7 @@
 
     @Override
     public IStrategoList makeList() {
-        throw new NotImplementedException();
+        return TermFactory.EMPTY_LIST;
     }
 
     @Override

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestParsing.java (from r23579, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ParseTest.java	Tue Nov  8 16:19:01 2011	(r23579, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestParsing.java	Tue Nov  8 16:48:31 2011	(r23581)
@@ -24,10 +24,11 @@
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.junit.Before;
 import org.junit.Test;
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 
-public class ParseTest {
+public class TestParsing {
 
     private ECJFactory wef;
 
@@ -103,4 +104,17 @@
             assertTrue(parse(file).match(parse(file)));
     }
 
+    @Test
+    public void test_term_structure() throws FileNotFoundException, IOException {
+        IStrategoTerm cu = parse("src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java");
+        System.out.println(cu);
+
+        assertEquals(3, cu.getSubtermCount());
+        assertEquals("CompilationUnit", ((IStrategoAppl)cu).getName());
+        
+        IStrategoAppl pkg = (IStrategoAppl) cu.getSubterm(0);
+        assertEquals(3, pkg.getSubtermCount());
+        assertEquals("PackageDeclaration", pkg.getName());
+    }
+
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java (from r23579, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/ScriptTest.java	Tue Nov  8 16:19:01 2011	(r23579, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Nov  8 16:48:31 2011	(r23581)
@@ -7,59 +7,54 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
+import static org.junit.Assert.assertTrue;
+
 import java.io.IOException;
 
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.spoofax.interpreter.adapter.ecj.ECJFactory;
-import org.spoofax.interpreter.adapter.ecj.WrappedASTNode;
+import org.junit.Before;
+import org.junit.Test;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
-import org.spoofax.interpreter.terms.PrettyPrinter;
+import org.spoofax.terms.TermFactory;
+
+public class TestScripting {
+
+    private ECJFactory wef;
+    private Interpreter interp;
 
-public class ScriptTest {
+    @Before
+    public void setUp() {
+        wef = new ECJFactory();
+        interp = new Interpreter(wef, new TermFactory());
+    }
 
-    private static void setupData(ECJFactory wef, Interpreter intp) {
+    private CompilationUnit parseCompilationUnit() {
         ASTParser parser = ASTParser.newParser(AST.JLS3);
         parser.setSource("class Foo { /** foo */ void dataInvariant() {} int f() { return 0; } }".toCharArray());
-        CompilationUnit cu = (CompilationUnit) parser.createAST(null);
-        System.out.println(cu);
-        wef.setAST(cu.getAST());
-        IStrategoTerm t = wef.parseFromTree(cu);
-        ITermPrinter pp = new PrettyPrinter();
-        t.prettyPrint(pp);
-        System.out.println(t.getClass());
-        System.out.println(pp.getString());
-        intp.setCurrent(t);
+        return (CompilationUnit) parser.createAST(null);
     }
     
-    public static void main(String[] args) {
-        
-        ECJFactory factory = new ECJFactory();
-        Interpreter interp = new Interpreter(factory);
-        try {
-            interp.load("scripts/rewrite-return.ctree");
-            //deconstructor.ctree");
-            setupData(factory, interp);
-            if(interp.invoke("main_0_0") == false) {
-                System.err.println("Rewriting failed");
-                return;
-            }
-            
-            IStrategoTerm t = interp.current();
-            ITermPrinter pp = new PrettyPrinter();
-            t.prettyPrint(pp);
-            System.out.println(t.getClass());
-            System.out.println(pp.getString());
-            System.out.println(((WrappedASTNode)interp.current()).getWrappee().toString());
-        } catch(IOException e) {
-            e.printStackTrace();
-        } catch (InterpreterException e) {
-            e.printStackTrace();
-        }
+    private void setupData() {
+        CompilationUnit cu = parseCompilationUnit();
+        wef.setAST(cu.getAST());
+        interp.setCurrent(wef.parseFromTree(cu));
     }
-    
+
+    @Test
+    public void test_traversal_allid() throws IOException, InterpreterException {
+        interp.load("bin/allid.ctree");
+        setupData();
+        assertTrue(interp.invoke("main_0_0"));
+    }
+
+    @Test
+    public void test_traversal_all_ctor_debug() throws IOException, InterpreterException {
+        interp.load("bin/all-ctor-debug.ctree");
+        setupData();
+        assertTrue(interp.invoke("main_0_0"));
+    }
+
 }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str	Tue Nov  8 16:48:31 2011	(r23581)
@@ -0,0 +1,7 @@
+module all-ctor-debug
+imports
+  stratego-lib	  
+strategies
+
+
+  main = topdown(where(try(?c#(xs) ; <debug> (c, <length> xs))))

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str	Tue Nov  8 16:22:17 2011	(r23580)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str	Tue Nov  8 16:48:31 2011	(r23581)
@@ -1,8 +1,6 @@
 module allid
 imports
-  stratego-lib
-  ecj-adapter
-
+  stratego-lib	  
 strategies
 
 

From karltk at strategoxt.org  Tue Nov  8 17:49:24 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 16:49:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23582 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj: .
	src/test/stratego
Message-ID: <20111108164924.44980108C00E@mx3.tudelft.nl>

Author: karltk
Date: Tue Nov  8 16:49:23 2011
New Revision: 23582
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23582&sc=1

Log:
Added simple makefile for compiling the Stratego parts of the tests.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile	Tue Nov  8 16:49:23 2011	(r23582)
@@ -0,0 +1,8 @@
+wanted := \
+	bin/allid.ctree \
+	bin/all-ctor-debug.ctree
+
+all : $(wanted)
+
+bin/%.ctree : src/test/stratego/%.str
+	strc -F -I src/main/stratego -i $< -o $@

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str	Tue Nov  8 16:48:31 2011	(r23581)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str	Tue Nov  8 16:49:23 2011	(r23582)
@@ -4,4 +4,4 @@
 strategies
 
 
-  main = topdown(where(try(?c#(xs) ; <debug> (c, <length> xs))))
+  main = topdown(debug) //where(try(?c#(xs) ; <debug> (c, <length> xs))))

From karltk at strategoxt.org  Tue Nov  8 18:34:12 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 17:34:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23583 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src:
	main/java/org/spoofax/interpreter/adapter/ecj
	main/java/org/spoofax/interpreter/adapter/ecj/skele...
Message-ID: <20111108173412.BAAAB7F8026@mx1.tudelft.nl>

Author: karltk
Date: Tue Nov  8 17:34:12 2011
New Revision: 23583
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23583&sc=1

Log:
Attempt to reuse more of the term logic provided by the Spoofax term library by letting ECJFactory inherit SkeletonTermFactory that inherits AbstractTermFactory. Moving towards ECJ*-prefix for all 'primitive' terms, leaving the actual Eclipse AST nodes with the Wrapped*-prefix.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJConstructor.java
      - copied, changed from r23579, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/SkeletonTermFactory.java
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJConstructor.java (from r23579, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ASTCtor.java	Tue Nov  8 16:19:01 2011	(r23579, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJConstructor.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -19,14 +19,14 @@
 import org.spoofax.terms.attachments.ITermAttachment;
 import org.spoofax.terms.attachments.TermAttachmentType;
 
-public class ASTCtor implements IStrategoConstructor {
+public class ECJConstructor implements IStrategoConstructor {
 
     private static final long serialVersionUID = 1L;
     
     private final String name;
     private final int arity;
 
-    ASTCtor(String name, int arity) {
+    ECJConstructor(String name, int arity) {
         this.name = name;
         this.arity = arity;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -28,19 +28,18 @@
 import org.eclipse.jdt.core.dom.PrimitiveType.Code;
 import org.spoofax.DebugUtil;
 import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.adapter.ecj.skeleton.SkeletonTermFactory;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoList;
-import org.spoofax.interpreter.terms.IStrategoPlaceholder;
-import org.spoofax.interpreter.terms.IStrategoReal;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
-import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.StrategoConstructor;
+import org.spoofax.terms.StrategoList;
 
-public class ECJFactory implements ITermFactory {
+public class ECJFactory extends SkeletonTermFactory {
 
     private static final int ARRAY_ACCESS = 1;
     private static final int PACKAGE_DECLARATION = 2;
@@ -143,11 +142,13 @@
     private AST ast;
     
     public ECJFactory(AST ast) {
+        super(IStrategoTerm.IMMUTABLE);
         this.ast = ast;
         initCtorMap();
     }
     
     public ECJFactory() {
+        super(IStrategoTerm.IMMUTABLE);
         initCtorMap();
     }
     
@@ -250,7 +251,8 @@
         ctorNameToIndexMap.put("AnonymousClassDeclaration", ANONYMOUS_CLASS_DECLARATION);
         ctorNameToIndexMap.put("AssignmentOperator", ASSIGNMENT_OPERATOR);
     }
-    
+
+    /*
     @Override
     public IStrategoTerm parseFromString(String text) {
         if(text.equals("()")) {
@@ -260,6 +262,7 @@
         }
         throw new NotImplementedException();
     }
+    */
 
     private List<ASTNode> getAnnotations(IStrategoTerm term) {
         return ((WrappedASTNodeList)term).getWrappee();
@@ -268,12 +271,8 @@
     private Javadoc getJavadoc(IStrategoTerm term) {
         return ((WrappedJavadoc)term).getWrappee();
     }
-    
-    @Override
-    public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
-        throw new NotImplementedException();
-    }
-    
+
+    /*    
     @Override
     public IStrategoTerm annotateTerm(IStrategoTerm term, IStrategoList annotations) {
     	if(term instanceof ECJAnnoWrapper) {
@@ -282,26 +281,30 @@
     		return new ECJAnnoWrapper(term, annotations);
     	}
     }
+*/
 
     @Override
-    public IStrategoAppl makeAppl(IStrategoConstructor ctr, IStrategoTerm... kids) {
-        IStrategoAppl t = constructASTNode(ctr, kids);
+    public IStrategoAppl makeAppl(IStrategoConstructor ctor, IStrategoTerm[] kids, IStrategoList annotations) {
+        IStrategoAppl t = constructASTNode(ctor, kids);
+        // FIXME add support for annos
+        if(annotations != null && !annotations.isEmpty())
+            throw new UnsupportedOperationException("cannot make appl with annos yet");
         if(t == null) {
             if(DebugUtil.isDebugging()) {
                 System.err.println("Generic fallback for:");
-                System.err.println("Construct: " + ctr.getName() + "/" + ctr.getArity() + " with " + kids.length + " kids");
+                System.err.println("Construct: " + ctor.getName() + "/" + ctor.getArity() + " with " + kids.length + " kids");
                 for(int i = 0; i < kids.length; i++) {
                     if(kids[i] instanceof WrappedASTNodeList) {
                         WrappedASTNodeList l = (WrappedASTNodeList)kids[i];
                         if(!l.isEmpty()) 
-                            System.err.println("  [" + l.get(0) + "]");
+                            System.err.println("  [" + l.getSubterm(0) + "]");
                         else
                             System.err.println("  " + l + " - empty");
                     } else
                         System.err.println("  " + kids[i]);
                 }
             }
-            return ctr.instantiate(this, kids);
+            return new ECJGenericAppl(ctor, kids);
         }
         return t;
     }
@@ -1879,18 +1882,19 @@
     }
 
     @Override
-    public IStrategoConstructor makeConstructor(String string, int arity) {
-        return new ASTCtor(string, arity);
-    }
-
-    @Override
-    public IStrategoInt makeInt(int i) {
-        return new ECJInt(i);
+    public StrategoConstructor makeConstructor(String string, int arity) {
+        return new StrategoConstructor(string, arity);
     }
 
+    /*
+*/
+    
     @SuppressWarnings({ "unchecked", "rawtypes" })
     @Override
-    public IStrategoList makeList(IStrategoTerm... terms) {
+    public IStrategoList makeList(IStrategoTerm[] terms, IStrategoList annotations) {
+        
+        if(annotations != null && !annotations.isEmpty())
+            throw new UnsupportedOperationException("Cannot make list with annos");
         
         boolean mustUseGeneric = false;
         for(IStrategoTerm t : terms)
@@ -1907,26 +1911,42 @@
         return new WrappedASTNodeList(r);
     }
     
+    
+    
     @Override
-    public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail) {
-        // TODO: handle list prepending in ECJFactory
-        return tail.prepend(head);
+    public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail, IStrategoList annos) {
+        if(tail instanceof WrappedASTNodeList && head instanceof WrappedASTNode) {
+            List<ASTNode> r = new ArrayList<ASTNode>();
+            r.add(((WrappedASTNode)head).getWrappee());
+            for(IStrategoTerm t : tail.getAllSubterms())
+                r.add(((WrappedASTNode)t).getWrappee());
+            return new WrappedASTNodeList(r);
+        }
+        return new StrategoList(head,  tail, annos, IStrategoTerm.IMMUTABLE);
     }
 
-    @Override
+    /*
+     *     @Override
     public IStrategoReal makeReal(double d) {
         return new ECJReal(d);
     }
+*/
 
     @Override
     public IStrategoString makeString(String s) {
         return new ECJString(s);
     }
 
+    
     @Override
-    public IStrategoTuple makeTuple(IStrategoTerm... terms) {
-        return new ECJTuple(terms);
+    public IStrategoInt makeInt(int value) {
+        return new ECJInt(value);
     }
+    @Override
+    public IStrategoTuple makeTuple(IStrategoTerm[] terms, IStrategoList annos) {
+        return new ECJTuple(terms, annos);
+    }
+
 
     public static IStrategoAppl wrap(Javadoc javadoc) {
         if(javadoc == null)
@@ -2927,7 +2947,7 @@
     public void setAST(AST ast) {
         this.ast = ast;
     }
-
+/*    
     @Deprecated
     public IStrategoAppl replaceAppl(IStrategoConstructor constructor, IStrategoTerm[] kids, IStrategoTerm old) {
         return replaceAppl(constructor, kids, (IStrategoAppl)old);
@@ -2946,7 +2966,7 @@
         }
         return r;
     }
-    
+
     public IStrategoTuple replaceTuple(IStrategoTerm[] kids, IStrategoTuple old) {
         return makeTuple(kids);
     }
@@ -2954,7 +2974,8 @@
     public IStrategoList replaceList(IStrategoTerm[] kids, IStrategoList old) {
         return makeList(kids);
     }
-
+*/
+    
     public static IStrategoTerm wrap(IType t) {
         if(t == null)
             return None.INSTANCE;
@@ -3069,70 +3090,4 @@
 			astMatcher = new ASTMatcher();
 		return astMatcher;
 	}
-
-    @Override
-    public IStrategoList makeList() {
-        return TermFactory.EMPTY_LIST;
-    }
-
-    @Override
-    public IStrategoAppl makeAppl(IStrategoConstructor constructor,
-            IStrategoTerm[] kids, IStrategoList annotations) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public IStrategoList makeList(IStrategoTerm[] kids,
-            IStrategoList annotations) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail,
-            IStrategoList annotations) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public IStrategoTuple makeTuple(IStrategoTerm[] kids,
-            IStrategoList annotations) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public IStrategoString tryMakeUniqueString(String name) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public int getDefaultStorageType() {
-        return IStrategoTerm.IMMUTABLE;
-    }
-
-    @Override
-    public IStrategoTerm copyAttachments(IStrategoTerm from, IStrategoTerm to) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public IStrategoList replaceListCons(IStrategoTerm head,
-            IStrategoList tail, IStrategoTerm oldHead, IStrategoList oldTail) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public IStrategoTerm replaceTerm(IStrategoTerm term, IStrategoTerm old) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public ITermFactory getFactoryWithStorageType(int storageType) {
-        throw new NotImplementedException();
-    }
-
-    @Override
-    public IStrategoList makeList(Collection<? extends IStrategoTerm> terms) {
-        throw new NotImplementedException();
-    }
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJGenericAppl.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -24,12 +24,12 @@
     private static final long serialVersionUID = 1L;
     
     private IStrategoConstructor ctor;
-    private IStrategoTerm[] children;
+    private IStrategoTerm[] kids;
     
 
-    ECJGenericAppl(IStrategoConstructor ctor, IStrategoTerm[] children) {
+    ECJGenericAppl(IStrategoConstructor ctor, IStrategoTerm[] kids) {
         this.ctor = ctor;
-        this.children = children;
+        this.kids = kids;
     }
     
     @Override
@@ -49,17 +49,17 @@
 
     @Override
     public IStrategoTerm getSubterm(int index) {
-        return children[index];
+        return kids[index];
     }
     
     @Override
     public IStrategoTerm[] getAllSubterms() {
-        return children;
+        return kids;
     }
 
     @Override
     public int getSubtermCount() {
-        return children.length;
+        return kids.length;
     }
 
     @Override

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/ECJTuple.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -7,16 +7,16 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.StrategoTuple;
-import org.spoofax.terms.TermFactory;
 
 public class ECJTuple extends StrategoTuple {
 
     private static final long serialVersionUID = 1L;
 
-    ECJTuple(IStrategoTerm[] kids) {
-        super(kids, TermFactory.EMPTY_LIST, IStrategoTerm.IMMUTABLE);
+    ECJTuple(IStrategoTerm[] kids, IStrategoList annos) {
+        super(kids, annos, IStrategoTerm.IMMUTABLE);
     }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/None.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -19,7 +19,7 @@
     private static final long serialVersionUID = 1L;
     
     private final static IStrategoTerm[] EMPTY = new IStrategoTerm[0];
-    private final static IStrategoConstructor CTOR = new ASTCtor("None", 0); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("None", 0); 
     
     final static None INSTANCE = new None();
     

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedASTNodeList.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -127,11 +127,6 @@
     }
 
     @Override
-    public String toString(int maxDepth) {
-        throw new NotImplementedException();
-    }
-
-    @Override
     public <T extends ITermAttachment> T getAttachment(
             TermAttachmentType<T> type) {
         throw new NotImplementedException();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedActualTypeSignature.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -9,7 +9,7 @@
     private static final long serialVersionUID = 1L;
 
 	private final String wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ActualTypeSignature", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ActualTypeSignature", 4);
 
 	protected WrappedActualTypeSignature(String signature) {
 		super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final AnnotationTypeDeclaration wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("AnnotationTypeDeclaration", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("AnnotationTypeDeclaration", 3);
     
     WrappedAnnotationTypeDeclaration(AnnotationTypeDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnnotationTypeMemberDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final AnnotationTypeMemberDeclaration wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("AnnotationTypeMemberDeclaration", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("AnnotationTypeMemberDeclaration", 4);
     
     WrappedAnnotationTypeMemberDeclaration(AnnotationTypeMemberDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAnonymousClassDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final AnonymousClassDeclaration wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("AnonymousClassDeclaration", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("AnonymousClassDeclaration", 1);
     
     WrappedAnonymousClassDeclaration(AnonymousClassDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayAccess.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ArrayAccess wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ArrayAccess", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ArrayAccess", 2);
     
     WrappedArrayAccess(ArrayAccess wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayCreation.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ArrayCreation wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ArrayCreation", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ArrayCreation", 3);
     
     WrappedArrayCreation(ArrayCreation wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayInitializer.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ArrayInitializer wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ArrayInitializer", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ArrayInitializer", 1);
     
     WrappedArrayInitializer(ArrayInitializer wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedArrayType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ArrayType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ArrayType", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ArrayType", 3);
     
     WrappedArrayType(ArrayType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssertStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final AssertStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("AssertStatement", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("AssertStatement", 2);
     
     WrappedAssertStatement(AssertStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignment.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final Assignment wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("Assignment", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("Assignment", 3);
     
     WrappedAssignment(Assignment wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedAssignmentOperator.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -18,7 +18,7 @@
     private static final long serialVersionUID = 1L;
 
     private final Assignment.Operator wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("AssignmentOperator", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("AssignmentOperator", 1);
     
     WrappedAssignmentOperator(Assignment.Operator wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlock.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final Block wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("Block", 1); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("Block", 1); 
     
     WrappedBlock(Block wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBlockComment.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -17,7 +17,7 @@
 
     // FIXME where's the content?
     private final BlockComment wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("BlockComment", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("BlockComment", 0);
     
     WrappedBlockComment(BlockComment wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanLiteral.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final BooleanLiteral wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("BooleanLiteral", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("BooleanLiteral", 1);
     
     WrappedBooleanLiteral(BooleanLiteral wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBooleanType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final PrimitiveType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("BooleanType", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("BooleanType", 0);
     
     WrappedBooleanType(PrimitiveType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedBreakStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final BreakStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("BreakStatement", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("BreakStatement", 1);
     
     WrappedBreakStatement(BreakStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedByteType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final PrimitiveType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ByteType", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ByteType", 0);
     
     WrappedByteType(PrimitiveType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCastExpression.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final CastExpression wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("CastExpression", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("CastExpression", 2);
     
     WrappedCastExpression(CastExpression wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCatchClause.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final CatchClause wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("CatchClause", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("CatchClause", 2);
     
     WrappedCatchClause(CatchClause wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCharacterLiteral.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final CharacterLiteral wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("CharacterLiteral", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("CharacterLiteral", 1);
     
     WrappedCharacterLiteral(CharacterLiteral wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedClassInstanceCreation.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -17,7 +17,7 @@
 
     private final ClassInstanceCreation wrappee;
 
-    private final static IStrategoConstructor CTOR = new ASTCtor("ClassInstanceCreation", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ClassInstanceCreation", 4);
 
     WrappedClassInstanceCreation(ClassInstanceCreation wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedCompilationUnit.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final CompilationUnit wrappee;
-    private static final IStrategoConstructor CTOR = new ASTCtor("CompilationUnit", 3); 
+    private static final IStrategoConstructor CTOR = new ECJConstructor("CompilationUnit", 3); 
     
     public WrappedCompilationUnit(CompilationUnit wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConditionalExpression.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ConditionalExpression wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ConditionalExpression", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ConditionalExpression", 3);
     
     WrappedConditionalExpression(ConditionalExpression wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedConstructorInvocation.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ConstructorInvocation wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ConstructorInvocation", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ConstructorInvocation", 1);
     
     WrappedConstructorInvocation(ConstructorInvocation wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedContinueStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ContinueStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ContinueStatement", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ContinueStatement", 1);
     
     WrappedContinueStatement(ContinueStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final DoStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("DoStatement", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("DoStatement", 2);
     
     WrappedDoStatement(DoStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedDoubleType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final PrimitiveType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("DoubleType", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("DoubleType", 0);
     
     WrappedDoubleType(PrimitiveType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEmptyStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final EmptyStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("EmptyStatement", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("EmptyStatement", 0);
     
     WrappedEmptyStatement(EmptyStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnhancedForStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final EnhancedForStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("EnhancedForStatement", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("EnhancedForStatement", 3);
     
     WrappedEnhancedForStatement(EnhancedForStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumConstantDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final EnumConstantDeclaration wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("EnumConstantDeclaration", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("EnumConstantDeclaration", 4);
     
     WrappedEnumConstantDeclaration(EnumConstantDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedEnumDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final EnumDeclaration wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("EnumDeclaration", 5);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("EnumDeclaration", 5);
     
     WrappedEnumDeclaration(EnumDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedExpressionStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ExpressionStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ExpressionStatement", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ExpressionStatement", 1);
     
     public WrappedExpressionStatement(ExpressionStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldAccess.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final FieldAccess wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("FieldAccess", 2); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("FieldAccess", 2); 
     
     WrappedFieldAccess(FieldAccess wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFieldDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final FieldDeclaration wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("FieldDeclaration", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("FieldDeclaration", 4);
     
     WrappedFieldDeclaration(FieldDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedFloatType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final PrimitiveType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("FloatType", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("FloatType", 0);
     
     WrappedFloatType(PrimitiveType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedForStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ForStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ForStatement", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ForStatement", 4);
     
     WrappedForStatement(ForStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIBinding.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
     
     private final IBinding wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("Binding", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("Binding", 3);
 
     protected WrappedIBinding(IBinding wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedICompilationUnit.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ICompilationUnit wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ICompilationUnit", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ICompilationUnit", 2);
 
     WrappedICompilationUnit(ICompilationUnit wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIField.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -18,7 +18,7 @@
     private static final long serialVersionUID = 1L;
 
     private final IField wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("IField", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("IField", 3);
 
     WrappedIField(IField wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIFile.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final IFile wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ECJFile", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ECJFile", 2);
     
     WrappedIFile(IFile wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaElement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final IJavaElement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("IJavaElement", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("IJavaElement", 1);
     
     WrappedIJavaElement(IJavaElement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIJavaProject.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final IJavaProject wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ECJJavaProject", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ECJJavaProject", 2);
     
     WrappedIJavaProject(IJavaProject wrappee) {
         super(CTOR, wrappee);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIMethodBinding.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final IMethodBinding wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("MethodBinding", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("MethodBinding", 4);
     
     WrappedIMethodBinding(IMethodBinding wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIProject.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final IProject wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ECJProject", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ECJProject", 2);
     
     WrappedIProject(IProject wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -17,7 +17,7 @@
     private static final long serialVersionUID = 1L;
 
     private final IType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("IType", 6);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("IType", 6);
 
     WrappedIType(IType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeBinding.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ITypeBinding wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("TypeBinding", 7);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("TypeBinding", 7);
     
     WrappedITypeBinding(ITypeBinding wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeHierarchy.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -9,7 +9,7 @@
 
     private static final long serialVersionUID = 1L;
 
-    private final static IStrategoConstructor CTOR = new ASTCtor("ITypeHierarchy", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ITypeHierarchy", 2);
 	private final ITypeHierarchy wrappee;
 	
 	protected WrappedITypeHierarchy(ITypeHierarchy wrappee) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedITypeParameter.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -17,7 +17,7 @@
     private static final long serialVersionUID = 1L;
     
     private final ITypeParameter wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ITypeParameter", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ITypeParameter", 2);
     
     WrappedITypeParameter(ITypeParameter wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIfStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final IfStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("IfStatement", 3); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("IfStatement", 3); 
     
     WrappedIfStatement(IfStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedImportDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -15,7 +15,7 @@
     private static final long serialVersionUID = 1L;
 
     private ImportDeclaration wrappee;
-    public final static ASTCtor CTOR = new ASTCtor("ImportDeclaration", 3); 
+    public final static ECJConstructor CTOR = new ECJConstructor("ImportDeclaration", 3); 
     
     public WrappedImportDeclaration(ImportDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInfixExpression.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final InfixExpression wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("InfixExpression", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("InfixExpression", 4);
     
     WrappedInfixExpression(InfixExpression wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInitializer.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final Initializer wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("Initializer", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("Initializer", 1);
     
     WrappedInitializer(Initializer wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedInstanceofExpression.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final InstanceofExpression wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("InstanceofExpression", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("InstanceofExpression", 2);
     
     WrappedInstanceofExpression(InstanceofExpression wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedIntType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final PrimitiveType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("IntType", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("IntType", 0);
     
     public WrappedIntType(PrimitiveType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedJavadoc.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final Javadoc wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("Javadoc", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("Javadoc", 1);
     
     WrappedJavadoc(Javadoc wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLabeledStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final LabeledStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("LabeledStatement", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("LabeledStatement", 2);
     
     WrappedLabeledStatement(LabeledStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLineComment.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -17,7 +17,7 @@
 
     // FIXME where is the content?
     private final LineComment wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("LineComment", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("LineComment", 0);
     
     WrappedLineComment(LineComment wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedLongType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final PrimitiveType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("LongType", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("LongType", 0);
     
     WrappedLongType(PrimitiveType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMarkerAnnotation.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -18,7 +18,7 @@
 
     // FIXME improve
     private final MarkerAnnotation wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("MarkerAnnotation", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("MarkerAnnotation", 1);
     
     WrappedMarkerAnnotation(MarkerAnnotation wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberRef.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final MemberRef wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("MemberRef", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("MemberRef", 2);
     
     WrappedMemberRef(MemberRef wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMemberValuePair.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final MemberValuePair wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("MemberValuePair", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("MemberValuePair", 2);
     
     WrappedMemberValuePair(MemberValuePair wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final MethodDeclaration wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("MethodDeclaration", 8); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("MethodDeclaration", 8); 
     
     WrappedMethodDeclaration(MethodDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodInvocation.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final MethodInvocation wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("MethodInvocation", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("MethodInvocation", 4);
     
     WrappedMethodInvocation(MethodInvocation wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRef.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final MethodRef wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("MethodRef", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("MethodRef", 3);
     
     WrappedMethodRef(MethodRef wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedMethodRefParameter.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final MethodRefParameter wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("MethodRefParameter", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("MethodRefParameter", 2);
     
     WrappedMethodRefParameter(MethodRefParameter wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifier.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -17,7 +17,7 @@
     private static final long serialVersionUID = 1L;
 
     private final Modifier wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("Modifier", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("Modifier", 1);
     
     WrappedModifier(Modifier wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedModifierKeyword.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final Modifier.ModifierKeyword wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ModifierKeyword", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ModifierKeyword", 1);
     
     WrappedModifierKeyword(Modifier.ModifierKeyword wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNormalAnnotation.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -17,7 +17,7 @@
     private static final long serialVersionUID = 1L;
 
     private final NormalAnnotation wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("NormalAnnotation", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("NormalAnnotation", 2);
     
     WrappedNormalAnnotation(NormalAnnotation wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNullLiteral.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final NullLiteral wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("NullLiteral", 0);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("NullLiteral", 0);
     
     WrappedNullLiteral(NullLiteral wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedNumberLiteral.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final NumberLiteral wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("NumberLiteral", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("NumberLiteral", 1);
     
     WrappedNumberLiteral(NumberLiteral wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPackageDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -15,7 +15,7 @@
 
     private static final long serialVersionUID = 1L;
 
-    private static final IStrategoConstructor CTOR = new ASTCtor("PackageDeclaration", 3); 
+    private static final IStrategoConstructor CTOR = new ECJConstructor("PackageDeclaration", 3); 
     private final PackageDeclaration wrappee;
     
     protected WrappedPackageDeclaration(PackageDeclaration wrappee) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParameterizedType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ParameterizedType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ParameterizedType", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ParameterizedType", 2);
     
     
     WrappedParameterizedType(ParameterizedType wrappee) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedParenthesizedExpression.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ParenthesizedExpression wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ParenthesizedExpression", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ParenthesizedExpression", 1);
     
     WrappedParenthesizedExpression(ParenthesizedExpression wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpression.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
     
     private final PostfixExpression wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("PostfixExpression", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("PostfixExpression", 2);
     
     WrappedPostfixExpression(PostfixExpression wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPostfixExpressionOperator.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -18,7 +18,7 @@
     private static final long serialVersionUID = 1L;
     
     private final PostfixExpression.Operator wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("PostfixExpressionOperator", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("PostfixExpressionOperator", 1);
     
     WrappedPostfixExpressionOperator(PostfixExpression.Operator wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpression.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final PrefixExpression wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("PrefixExpression", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("PrefixExpression", 2);
     
     WrappedPrefixExpression(PrefixExpression wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrefixExpressionOperator.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -18,7 +18,7 @@
     private static final long serialVersionUID = 1L;
 
     private final PrefixExpression.Operator wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("PrefixExpressionOperator", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("PrefixExpressionOperator", 1);
     
     WrappedPrefixExpressionOperator(PrefixExpression.Operator wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedPrimitiveType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -20,7 +20,7 @@
     // FIXME should we even keep this?
     
     private final PrimitiveType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("PrimitiveType", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("PrimitiveType", 1);
     
     WrappedPrimitiveType(PrimitiveType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedName.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final QualifiedName wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("QualifiedName", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("QualifiedName", 2);
     
     WrappedQualifiedName(QualifiedName wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedQualifiedType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final QualifiedType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("QualifiedType", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("QualifiedType", 2);
     
     WrappedQualifiedType(QualifiedType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedReturnStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ReturnStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ReturnStatement", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ReturnStatement", 1);
     
     WrappedReturnStatement(ReturnStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleName.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final SimpleName wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SimpleName", 1); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SimpleName", 1); 
 
     WrappedSimpleName(SimpleName wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSimpleType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final SimpleType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SimpleType", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SimpleType", 1);
     
     WrappedSimpleType(SimpleType wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleMemberAnnotation.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -17,7 +17,7 @@
     private static final long serialVersionUID = 1L;
     
     private final SingleMemberAnnotation wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SingleMemberAnnotation", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SingleMemberAnnotation", 2);
     
     WrappedSingleMemberAnnotation(SingleMemberAnnotation wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSingleVariableDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
     
     private final SingleVariableDeclaration wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SingleVariableDeclaration", 5);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SingleVariableDeclaration", 5);
     
     WrappedSingleVariableDeclaration(SingleVariableDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedStringLiteral.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final StringLiteral wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("StringLiteral", 1); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("StringLiteral", 1); 
         
     WrappedStringLiteral(StringLiteral wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperConstructorInvocation.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
     
     private final SuperConstructorInvocation wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SuperConstructorInvocation", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SuperConstructorInvocation", 3);
     
     WrappedSuperConstructorInvocation(SuperConstructorInvocation wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperFieldAccess.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final SuperFieldAccess wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SuperFieldAccess", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SuperFieldAccess", 2);
     
     WrappedSuperFieldAccess(SuperFieldAccess wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSuperMethodInvocation.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final SuperMethodInvocation wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SuperMethodInvocation", 4);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SuperMethodInvocation", 4);
     
     WrappedSuperMethodInvocation(SuperMethodInvocation wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchCase.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -18,7 +18,7 @@
     // FIXME default
     
     private final SwitchCase wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SwitchCase", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SwitchCase", 1);
     
     WrappedSwitchCase(SwitchCase wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSwitchStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final SwitchStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SwitchStatement", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SwitchStatement", 2);
     
     WrappedSwitchStatement(SwitchStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedSynchronizedStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final SynchronizedStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("SynchronizedStatement", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("SynchronizedStatement", 2);
     
     WrappedSynchronizedStatement(SynchronizedStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTagElement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -18,7 +18,7 @@
     // FIXME nested
     
     private final TagElement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("TagElement", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("TagElement", 2);
     
     WrappedTagElement(TagElement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTextElement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final TextElement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("TextElement", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("TextElement", 1);
     
     WrappedTextElement(TextElement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThisExpression.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
     
     private final ThisExpression wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ThisExpression", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ThisExpression", 1);
     
     WrappedThisExpression(ThisExpression wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedThrowStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final ThrowStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("ThrowStatement", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("ThrowStatement", 1);
     
     WrappedThrowStatement(ThrowStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTryStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final TryStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("TryStatement", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("TryStatement", 3);
     
     WrappedTryStatement(TryStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclaration.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final TypeDeclaration wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("TypeDeclaration", 8); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("TypeDeclaration", 8); 
     
     protected WrappedTypeDeclaration(TypeDeclaration wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeDeclarationStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final TypeDeclarationStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("TypeDeclarationStatement", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("TypeDeclarationStatement", 1);
     
     WrappedTypeDeclarationStatement(TypeDeclarationStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeLiteral.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final TypeLiteral wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("TypeLiteral", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("TypeLiteral", 1);
     
     WrappedTypeLiteral(TypeLiteral wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedTypeParameter.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final TypeParameter wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("TypeParameter", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("TypeParameter", 2);
     
     WrappedTypeParameter(TypeParameter wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationExpression.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final VariableDeclarationExpression wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("VariableDeclarationExpression", 3);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("VariableDeclarationExpression", 3);
 
     WrappedVariableDeclarationExpression(VariableDeclarationExpression wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationFragment.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final VariableDeclarationFragment wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("VariableDeclarationFragment", 3); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("VariableDeclarationFragment", 3); 
     
     WrappedVariableDeclarationFragment(VariableDeclarationFragment wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedVariableDeclarationStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final VariableDeclarationStatement wrappee;  
-    private final static IStrategoConstructor CTOR = new ASTCtor("VariableDeclarationStatement", 3); 
+    private final static IStrategoConstructor CTOR = new ECJConstructor("VariableDeclarationStatement", 3); 
         
     public WrappedVariableDeclarationStatement(VariableDeclarationStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWhileStatement.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -16,7 +16,7 @@
     private static final long serialVersionUID = 1L;
 
     private final WhileStatement wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("WhileStatement", 2);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("WhileStatement", 2);
     
     WrappedWhileStatement(WhileStatement wrappee) {
         super(CTOR);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/WrappedWildcardType.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -19,7 +19,7 @@
     private static final long serialVersionUID = 1L;
     // FIXME isUpperBound()
     private final WildcardType wrappee;
-    private final static IStrategoConstructor CTOR = new ASTCtor("WildcardType", 1);
+    private final static IStrategoConstructor CTOR = new ECJConstructor("WildcardType", 1);
     
     WrappedWildcardType(WildcardType wrappee) {
         super(CTOR);

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/SkeletonTermFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/main/java/org/spoofax/interpreter/adapter/ecj/skeleton/SkeletonTermFactory.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -0,0 +1,45 @@
+package org.spoofax.interpreter.adapter.ecj.skeleton;
+
+import org.spoofax.NotImplementedException;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoPlaceholder;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.AbstractTermFactory;
+
+public abstract class SkeletonTermFactory extends AbstractTermFactory {
+
+    public SkeletonTermFactory(int defaultStorageType) {
+        super(defaultStorageType);
+    }
+
+    @Override
+    final public ITermFactory getFactoryWithStorageType(int storageType) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    final public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    final public IStrategoReal makeReal(double d) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    final public IStrategoTerm annotateTerm(IStrategoTerm term,
+            IStrategoList annotations) {
+        throw new NotImplementedException();
+    }
+
+    @Override
+    final public IStrategoString tryMakeUniqueString(String name) {
+        throw new NotImplementedException();
+    }
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Nov  8 17:34:12 2011	(r23583)
@@ -18,6 +18,7 @@
 import org.junit.Test;
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.terms.TermFactory;
 
 public class TestScripting {
@@ -55,6 +56,9 @@
         interp.load("bin/all-ctor-debug.ctree");
         setupData();
         assertTrue(interp.invoke("main_0_0"));
+        IStrategoList t = (IStrategoList) interp.current();
+        System.out.println(t);
+        assertTrue(t.getSubtermCount() > 10);
     }
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str	Tue Nov  8 16:49:23 2011	(r23582)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str	Tue Nov  8 17:34:12 2011	(r23583)
@@ -4,4 +4,4 @@
 strategies
 
 
-  main = topdown(debug) //where(try(?c#(xs) ; <debug> (c, <length> xs))))
+  main = debug ; collect-all(\ c#(xs) -> (c, <length> xs) \)

From karltk at strategoxt.org  Tue Nov  8 18:36:28 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 17:36:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23584 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj
Message-ID: <20111108173628.A8B5D108C00F@mx3.tudelft.nl>

Author: karltk
Date: Tue Nov  8 17:36:28 2011
New Revision: 23584
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23584&sc=1

Log:
Gave tests slightly more decriptive names.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestParsing.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestParsing.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestParsing.java	Tue Nov  8 17:34:12 2011	(r23583)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestParsing.java	Tue Nov  8 17:36:28 2011	(r23584)
@@ -87,25 +87,25 @@
     }
     
     @Test
-    public void test_parse_all_ecj_source_code() throws FileNotFoundException, IOException {
+    public void parse_all_ecj_source_code() throws FileNotFoundException, IOException {
         for(String file : findAllFiles(new File("src/main/java")))
             assertTrue(asString(parse(file)).length() > 0);
     }
 
     @Test
-    public void test_term_equality() throws FileNotFoundException, IOException {
+    public void apply_term_equals_against_self_for_all_source_files() throws FileNotFoundException, IOException {
         for(String file : findAllFiles(new File("src/main/java")))
             assertEquals(parse(file), parse(file));
     }
 
     @Test
-    public void test_term_matching() throws FileNotFoundException, IOException {
+    public void term_match_against_self_for_all_source_files() throws FileNotFoundException, IOException {
         for(String file : findAllFiles(new File("src/main/java")))
             assertTrue(parse(file).match(parse(file)));
     }
 
     @Test
-    public void test_term_structure() throws FileNotFoundException, IOException {
+    public void validate_top_level_term_structure() throws FileNotFoundException, IOException {
         IStrategoTerm cu = parse("src/main/java/org/spoofax/interpreter/adapter/ecj/ECJFactory.java");
         System.out.println(cu);
 

From karltk at strategoxt.org  Tue Nov  8 18:54:50 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 17:54:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23585 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj: .
	src/test/java/org/spoofax/interpreter/adapter/ecj src/test/stratego
Message-ID: <20111108175450.90BA12B8031@mx2.tudelft.nl>

Author: karltk
Date: Tue Nov  8 17:54:49 2011
New Revision: 23585
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23585&sc=1

Log:
Gave rest of unit tests more descriptive names. Fixed imports for most tests. Added two new tests to interpreter test suite: collect_all_typedeclarations and topdown_deconstruct.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str
      - copied, changed from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test6.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str
      - copied, changed from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test5.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str
      - copied, changed from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test4.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str
      - copied, changed from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test2.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str
      - copied, changed from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test3.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-ctors.str
      - copied, changed from r23583, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-typedeclarations.str
      - copied, changed from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test1.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/just-debug.str
      - copied, changed from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/parse-and-dump.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-deconstruct.str
      - copied, changed from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/deconstructor.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-id.str
      - copied, changed from r23581, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str
Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/deconstructor.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/parse-and-dump.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test1.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test2.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test3.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test4.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test5.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test6.str
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test7.str
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile	Tue Nov  8 17:36:28 2011	(r23584)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,6 +1,8 @@
 wanted := \
-	bin/allid.ctree \
-	bin/all-ctor-debug.ctree
+	bin/topdown-id.ctree \
+    bin/topdown-deconstruct.ctree \
+	bin/collect-all-ctors.ctree \
+    bin/collect-all-typedeclarations.ctree \
 
 all : $(wanted)
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Nov  8 17:36:28 2011	(r23584)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Nov  8 17:54:49 2011	(r23585)
@@ -45,20 +45,38 @@
     }
 
     @Test
-    public void test_traversal_allid() throws IOException, InterpreterException {
-        interp.load("bin/allid.ctree");
+    public void traverse_topdown_id() throws IOException, InterpreterException {
+        interp.load("bin/topdown-id.ctree");
         setupData();
         assertTrue(interp.invoke("main_0_0"));
     }
 
     @Test
-    public void test_traversal_all_ctor_debug() throws IOException, InterpreterException {
-        interp.load("bin/all-ctor-debug.ctree");
+    public void traverse_topdown_deconstruct() throws IOException, InterpreterException {
+        interp.load("bin/topdown-deconstruct.ctree");
         setupData();
         assertTrue(interp.invoke("main_0_0"));
+    }
+
+    @Test
+    public void collect_all_typedeclarations() throws IOException, InterpreterException {
+        interp.load("bin/collect-all-typedeclarations.ctree");
+        setupData();
+        assertTrue(interp.invoke("main_0_0"));
+        assertListLongerThan(0);
+    }
+
+    private void assertListLongerThan(int minLength) {
         IStrategoList t = (IStrategoList) interp.current();
-        System.out.println(t);
-        assertTrue(t.getSubtermCount() > 10);
+        assertTrue(t.getSubtermCount() > minLength);
+    }
+
+    @Test
+    public void collect_all_ctors() throws IOException, InterpreterException {
+        interp.load("bin/collect-all-ctors.ctree");
+        setupData();
+        assertTrue(interp.invoke("main_0_0"));
+        assertListLongerThan(10);
     }
 
 }

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str (from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test6.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test6.str	Tue Nov  8 16:22:17 2011	(r23580, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method-and-type.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,6 +1,6 @@
-module test6
+module api-open-parse-match-resolve-method-and-type
 imports
-  lib
+  stratego-lib
   EclipseJava
   ecj-adapter
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str (from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test5.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test5.str	Tue Nov  8 16:22:17 2011	(r23580, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-parse-match-resolve-method.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,8 +1,8 @@
-module test5
+module api-open-parse-match-resolve-method
 imports
-  lib
-  EclipseJava
-  ecj-adapter
+  stratego-lib
+  spoofax/bindings/ecj/EclipseJava
+  spoofax/bindings/ecj/ecj-adapter
 
 strategies
   

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str (from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test4.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test4.str	Tue Nov  8 16:22:17 2011	(r23580, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-open-project-parse-match-resolve-type.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,8 +1,8 @@
-module test4
+module api-open-project-parse-match-resolve-type
 imports
-  lib
-  EclipseJava
-  ecj-adapter
+  stratego-lib
+  spoofax/bindings/ecj/EclipseJava
+  spoofax/bindings/ecj/ecj-adapter
 
 strategies
   

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str (from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test2.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test2.str	Tue Nov  8 16:22:17 2011	(r23580, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/api-parse-then-topdown-match-typedeclaration.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,8 +1,8 @@
-module test2
+module api-parse-then-topdown-match-typedeclaration
 imports
-  lib
-  EclipseJava
-  ecj-adapter
+  stratego-lib
+  spoofax/bindings/ecj/EclipseJava
+  spoofax/bindings/ecj/ecj-adapter
 
 strategies
   

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str (from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test3.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test3.str	Tue Nov  8 16:22:17 2011	(r23580, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,8 +1,8 @@
 module test3
 imports
-  lib
-  EclipseJava
-  ecj-adapter
+  stratego-lib
+  spoofax/bindings/ecj/EclipseJava
+  spoofax/bindings/ecj/ecj-adapter
 
 strategies
   

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-ctors.str (from r23583, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/all-ctor-debug.str	Tue Nov  8 17:34:12 2011	(r23583, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-ctors.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,4 +1,4 @@
-module all-ctor-debug
+module collect-all-ctors
 imports
   stratego-lib	  
 strategies

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-typedeclarations.str (from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test1.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/test1.str	Tue Nov  8 16:22:17 2011	(r23580, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/collect-all-typedeclarations.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,8 +1,8 @@
-module test1
+module collect-all-typedeclarations
 imports
-  lib
-  EclipseJava
+  stratego-lib
+  spoofax/bindings/eclipse/EclipseJava
   
 strategies
 
-  main = debug ; topdown(try(?TypeDeclaration(_, _, _, _, _, _) ; debug))
+  main = collect-all(?TypeDeclaration(_, _, _, _, _, _, _, _))

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/just-debug.str (from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/parse-and-dump.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/parse-and-dump.str	Tue Nov  8 16:22:17 2011	(r23580, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/just-debug.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,7 +1,6 @@
-module parse-and-dump
+module just-debug
 imports
   stratego-lib
-  spoofax/bindings/eclipse/eclipse-compiler-ffi
  
 strategies
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str	Tue Nov  8 17:36:28 2011	(r23584)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/rewrite-return.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,7 +1,7 @@
 module rewrite-return
 imports
   stratego-lib
-  EclipseJava
+  spoofax/bindings/ecj/EclipseJava
   
 strategies
 

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-deconstruct.str (from r23580, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/deconstructor.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/deconstructor.str	Tue Nov  8 16:22:17 2011	(r23580, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-deconstruct.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,9 +1,9 @@
-module deconstructor
+module topdown-deconstruct
 imports
   stratego-lib
 
 strategies
 
-  main = topdown(deconstruct) ; debug
+  main = topdown(deconstruct)
 
-  deconstruct = where(?x#(y) ; <debug> x)
+  deconstruct = where(?x#(y))

Copied and modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-id.str (from r23581, spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str)
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/allid.str	Tue Nov  8 16:48:31 2011	(r23581, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/topdown-id.str	Tue Nov  8 17:54:49 2011	(r23585)
@@ -1,7 +1,7 @@
-module allid
+module topdown-id
 imports
-  stratego-lib	  
+  stratego-lib	 
+   
 strategies
 
-
   main = topdown(id)

From karltk at strategoxt.org  Tue Nov  8 19:23:39 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 18:23:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23586 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj: .
	src/test/java/org/spoofax/interpreter/adapter/ecj src/test/stratego
Message-ID: <20111108182339.545577F8026@mx1.tudelft.nl>

Author: karltk
Date: Tue Nov  8 18:23:39 2011
New Revision: 23586
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23586&sc=1

Log:
Added unit test for term construction; can construct minimal compilation units again.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile	Tue Nov  8 17:54:49 2011	(r23585)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/Makefile	Tue Nov  8 18:23:39 2011	(r23586)
@@ -3,6 +3,7 @@
     bin/topdown-deconstruct.ctree \
 	bin/collect-all-ctors.ctree \
     bin/collect-all-typedeclarations.ctree \
+    bin/build-minimal-cu.ctree
 
 all : $(wanted)
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Nov  8 17:54:49 2011	(r23585)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Nov  8 18:23:39 2011	(r23586)
@@ -19,6 +19,7 @@
 import org.spoofax.interpreter.core.Interpreter;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.TermFactory;
 
 public class TestScripting {
@@ -79,4 +80,15 @@
         assertListLongerThan(10);
     }
 
+    @Test
+    public void build_minimal_cu() throws IOException, InterpreterException {
+        ASTParser parser = ASTParser.newParser(AST.JLS3);
+        parser.setSource("".toCharArray());
+        wef.setAST(parser.createAST(null).getAST());
+        interp.setCurrent(wef.makeInt(0));
+        interp.load("bin/build-minimal-cu.ctree");
+        assertTrue(interp.invoke("main_0_0"));
+        IStrategoTerm t = interp.current();
+        assertTrue(t instanceof WrappedCompilationUnit);
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str	Tue Nov  8 17:54:49 2011	(r23585)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/stratego/build-minimal-cu.str	Tue Nov  8 18:23:39 2011	(r23586)
@@ -1,9 +1,8 @@
-module test3
+module build-minimal-cu
 imports
   stratego-lib
-  spoofax/bindings/ecj/EclipseJava
-  spoofax/bindings/ecj/ecj-adapter
-
+  spoofax/bindings/eclipse/EclipseJava
+  
 strategies
   
-  main = where(!CompilationUnit(PackageDeclaration(None, [], SimpleName("foo")), [], []) ; debug)
+  main = !CompilationUnit(PackageDeclaration(None(), [], SimpleName("foo")), [], [])

From karltk at strategoxt.org  Tue Nov  8 19:25:59 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Tue, 08 Nov 2011 18:25:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23587 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj
Message-ID: <20111108182559.B98C9CC06C@mx4.tudelft.nl>

Author: karltk
Date: Tue Nov  8 18:25:59 2011
New Revision: 23587
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23587&sc=1

Log:
Added ASTNode type check to construction result.

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Nov  8 18:23:39 2011	(r23586)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/test/java/org/spoofax/interpreter/adapter/ecj/TestScripting.java	Tue Nov  8 18:25:59 2011	(r23587)
@@ -7,11 +7,13 @@
  */
 package org.spoofax.interpreter.adapter.ecj;
 
+import static org.junit.Assert.*;
 import static org.junit.Assert.assertTrue;
 
 import java.io.IOException;
 
 import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.junit.Before;
@@ -90,5 +92,6 @@
         assertTrue(interp.invoke("main_0_0"));
         IStrategoTerm t = interp.current();
         assertTrue(t instanceof WrappedCompilationUnit);
+        assertEquals(ASTNode.COMPILATION_UNIT, ((WrappedCompilationUnit)t).getWrappee().getNodeType());
     }
 }

From M.A.Akhter at student.tudelft.nl  Wed Nov  9 11:29:58 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 09 Nov 2011 10:29:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23588 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. index index/tests
Message-ID: <20111109102958.2977F2B800B@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Nov  9 10:29:57 2011
New Revision: 23588
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23588&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Tue Nov  8 18:25:59 2011	(r23587)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Wed Nov  9 10:29:57 2011	(r23588)
@@ -71,7 +71,7 @@
 				facade = registry.getFacade(projectPath);
 				if(facade!=null){
 					facade.clearCache();
-					facade.close();
+					facade.close(false);
 				}
 			} catch (Exception e) {
 				logMessage( agent, "Cleanup Failed due to error :"+ e.getMessage() );

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Tue Nov  8 18:25:59 2011	(r23587)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Wed Nov  9 10:29:57 2011	(r23588)
@@ -142,7 +142,7 @@
 				if(idxFacade!= null){
 					idxFacade.persistChanges();
 					idxFacade.clearCache();
-					idxFacade.close();
+					idxFacade.close(false);
 				} 	
 			}
 		};

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Tue Nov  8 18:25:59 2011	(r23587)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxModuleLookupTable.java	Wed Nov  9 10:29:57 2011	(r23588)
@@ -216,6 +216,7 @@
 		return this;
 	}
 	
+	//TODO : save it as binary serialized format
 	private SpxModuleLookupTable addAnalyzedModuleDefinition(SpxSemanticIndexFacade f, IStrategoList id, IStrategoAppl moduleDefinition) throws IOException{
 		_moduleAnalyzedDefinition.put(id, Utils.serializeToString(f.getTermAttachmentSerializer(), moduleDefinition));
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Nov  8 18:25:59 2011	(r23587)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Wed Nov  9 10:29:57 2011	(r23588)
@@ -90,6 +90,17 @@
 		//Setting IntializedOn Flag for incremental Compilation	
 		_initializedOn  = System.currentTimeMillis();
 	}
+	
+	protected void finalize() throws Throwable {
+		try {
+			close(false);
+		} catch (Exception e) {
+		}
+		finally {
+			super.finalize();
+		}
+	}
+	
 	public SpxConstructors getCons(){ return _spxConstructors;}
 	
 	public TermAttachmentSerializer getTermAttachmentSerializer() {
@@ -656,7 +667,7 @@
 		return result;
 	}
 
-	public IStrategoList getPackageDeclarations(IStrategoString filePath) {
+	public IStrategoList getPackageDeclarations(IStrategoString filePath){
 		logMessage("getPackageDeclarationsByUri | Arguments : " + filePath);
 		
 		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
@@ -960,7 +971,6 @@
 	 */
 	public void persistChanges() throws IOException {
 		_persistenceManager.commit();
-
 		if (Utils.DEBUG)
 			try {
 				_persistenceManager.spxSymbolTable().printSymbols(this,
@@ -968,12 +978,14 @@
 			} catch (SpxSymbolTableException e) {
 			}
 	}	
+
 	/**
 	 * Closes any underlying open connection. 
+	 * @param shouldCommit TODO
 	 *  
 	 * @throws IOException
 	 */
-	public void close() throws IOException {
+	public void close(boolean shouldCommit) throws IOException {
 		if (!isPersistenceManagerClosed()) {
 			logMessage("close | closing underlying persistence manager instance.");
 			_persistenceManager.close();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Tue Nov  8 18:25:59 2011	(r23587)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Wed Nov  9 10:29:57 2011	(r23588)
@@ -85,7 +85,7 @@
 		SpxSemanticIndexFacade facade = _registry.get(projectPath);
 		
 		if((facade != null) &&  !facade.isPersistenceManagerClosed())
-			facade.close();
+			facade.close(false);
 		
 		
 		return facade;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Nov  8 18:25:59 2011	(r23587)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Wed Nov  9 10:29:57 2011	(r23588)
@@ -66,7 +66,7 @@
 
 	@Override 
 	protected void tearDown() throws Exception { 
-		_facade.close(); 
+		_facade.close(false); 
 	}
 	
 	private void indexCompilationUnit() throws IOException

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Tue Nov  8 18:25:59 2011	(r23587)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Wed Nov  9 10:29:57 2011	(r23588)
@@ -49,7 +49,7 @@
 	}
 	
 	@Override 
-	protected void tearDown() throws Exception { _facade.close(); }
+	protected void tearDown() throws Exception { _facade.close(false); }
 	
 	public void testGetModuleDeclarationsByFileUri() throws IOException
 	{
@@ -133,7 +133,7 @@
 		
 	}
 
-	public void testGetPackageDeclarationsByUri()
+	public void testGetPackageDeclarationsByUri() throws IOException
 	{
 		String packageName1 =  	"\"languages\", \"entitylang\"" ;
 

From tobivollebregt at gmail.com  Wed Nov  9 15:42:43 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 09 Nov 2011 14:42:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23589 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental
Message-ID: <20111109144243.E1C1C2B8054@mx2.tudelft.nl>

Author: tvo
Date: Wed Nov  9 14:42:43 2011
New Revision: 23589
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23589&sc=1

Log:
allow IncrementalSortSet to be used to calculate injections

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSortSet.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSortSet.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSortSet.java	Wed Nov  9 10:29:57 2011	(r23588)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSortSet.java	Wed Nov  9 14:42:43 2011	(r23589)
@@ -10,6 +10,7 @@
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
 
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -43,28 +44,40 @@
 	private final Set<String> incrementalSorts;
 	
 	private final Set<String> incrementalContainerSorts;
-
+	
+	public Set<String> getIncrementalSorts() {
+		return Collections.unmodifiableSet(incrementalSorts);
+	}
+	
 	/**
 	 * @param expand
 	 *            Whether to expand the set of sorts with injections to those
 	 *            sorts (e.g., add MethodDec if ClassBodyDec was specified.)
 	 */
-	private IncrementalSortSet(ParseTable table, boolean expand, Set<String> sorts) {
+	private IncrementalSortSet(ParseTable table, boolean expand, boolean expandReverse, Set<String> sorts) {
 		sortFun = table.getFactory().makeConstructor("sort", 1);
 		cfFun = table.getFactory().makeConstructor("cf", 1);
 		lexFun = table.getFactory().makeConstructor("lex", 1);
 		incrementalSorts = expand ? getInjectionsTo(table, sorts, false) : sorts;
-		incrementalContainerSorts = getInjectionsTo(table, incrementalSorts, true);
+		incrementalContainerSorts = expandReverse ? getInjectionsTo(table, incrementalSorts, true) : incrementalSorts;
 	}
 	
 	public static IncrementalSortSet create(ParseTable table, boolean expand, String... sorts) {
-		return new IncrementalSortSet(table, expand, asSet(sorts));
+		return new IncrementalSortSet(table, expand, true, asSet(sorts));
 	}
 	
 	public static IncrementalSortSet create(ParseTable table, boolean expand, Set<String> sorts) {
-		return new IncrementalSortSet(table, expand, sorts);
+		return new IncrementalSortSet(table, expand, true, sorts);
 	}
-	
+
+	public static IncrementalSortSet create(ParseTable table, boolean expand, boolean expandReverse, String... sorts) {
+		return new IncrementalSortSet(table, expand, expandReverse, asSet(sorts));
+	}
+
+	public static IncrementalSortSet create(ParseTable table, boolean expand, boolean expandReverse, Set<String> sorts) {
+		return new IncrementalSortSet(table, expand, expandReverse, sorts);
+	}
+
 	public static IncrementalSortSet read(ParseTable table) {
 		IStrategoConstructor incrementalFun = table.getFactory().makeConstructor("incremental", 0);
 		ProductionAttributeReader reader = new ProductionAttributeReader(table.getFactory());

From tobivollebregt at gmail.com  Wed Nov  9 15:49:14 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 09 Nov 2011 14:49:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23590 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20111109144914.6EB5ECC119@mx4.tudelft.nl>

Author: tvo
Date: Wed Nov  9 14:49:14 2011
New Revision: 23590
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23590&sc=1

Log:
show completion templates for injections into sort of placeholder with sort (completion templates)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Nov  9 14:42:43 2011	(r23589)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Nov  9 14:49:14 2011	(r23590)
@@ -11,7 +11,9 @@
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Comparator;
+import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Random;
 import java.util.Set;
 import java.util.concurrent.ArrayBlockingQueue;
@@ -39,6 +41,8 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.ParseTable;
+import org.spoofax.jsglr.client.incremental.IncrementalSortSet;
 import org.spoofax.terms.TermFactory;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.ast.AstSortInspector;
@@ -57,6 +61,9 @@
 
 	private static final boolean IGNORE_TEMPLATE_PREFIX_CASE = false;
 
+	// cached mapping from sort to all sorts injecting into that sort
+	private final Map<String, Set<String>> injections;
+
 	private final StrategoObserver observer;
 
 	private final String completionFunction;
@@ -89,6 +96,7 @@
 	private final BlockingQueue<ICompletionProposal[]> resultsQueue = new ArrayBlockingQueue<ICompletionProposal[]>(1);
 
 	public ContentProposer(StrategoObserver observer, String completionFunction, Pattern identifierLexical, Set<Completion> templates) {
+		this.injections = new HashMap<String, Set<String>>();
 		this.observer = observer;
 		this.completionFunction = completionFunction;
 		this.identifierLexical = identifierLexical;
@@ -241,12 +249,26 @@
 	}
 
 	public ICompletionProposal[] getTemplateProposalsForSort(String wantedSort, ITextViewer viewer) {
-		Set<ICompletionProposal> results = new HashSet<ICompletionProposal>();
+		// Add templates for sorts injected into wantedSort.
+		//  `sort -> wantedSort' => add templates for sort
+		//  `sub -> sort' => add templates for sub too
+
+		final Set<ICompletionProposal> results = new HashSet<ICompletionProposal>();
+		Set<String> wantedSorts = injections.get(wantedSort);
+
+		if (wantedSorts == null) {
+			final ParseTable pt = parser.getParser().getParser().getParseTable();
+			final IncrementalSortSet iss = IncrementalSortSet.create(pt, true, false, wantedSort);
+			wantedSorts = iss.getIncrementalSorts();
+			injections.put(wantedSort, wantedSorts);
+		}
+
 		for (Completion proposal : templates) {
-			if (wantedSort.equals(proposal.getSort())) {
+			if (wantedSorts.contains(proposal.getSort())) {
 				results.add(new ContentProposal(this, proposal, viewer));
 			}
 		}
+
 		return toSortedArray(results);
 	}
 

From tobivollebregt at gmail.com  Wed Nov  9 15:51:26 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 09 Nov 2011 14:51:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23591 - in
	spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections:
	. src/org/strategoxt/imp/runtime/services
	src/org/strategoxt/imp/runtime/stratego
Message-ID: <20111109145126.DF06BCC05F@mx4.tudelft.nl>

Author: tvo
Date: Wed Nov  9 14:51:26 2011
New Revision: 23591
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23591&sc=1

Log:
merge

Added:
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/TermPathPrimitive.java
      - copied unchanged from r23590, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TermPathPrimitive.java
Modified:
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/   (props changed)
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java   (contents, props changed)
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/StrategoObserver.java   (contents, props changed)
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Nov  9 14:49:14 2011	(r23590)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Nov  9 14:51:26 2011	(r23591)
@@ -11,7 +11,9 @@
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Comparator;
+import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Random;
 import java.util.Set;
 import java.util.concurrent.ArrayBlockingQueue;
@@ -39,6 +41,8 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.ParseTable;
+import org.spoofax.jsglr.client.incremental.IncrementalSortSet;
 import org.spoofax.terms.TermFactory;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.ast.AstSortInspector;
@@ -57,6 +61,9 @@
 
 	private static final boolean IGNORE_TEMPLATE_PREFIX_CASE = false;
 
+	// cached mapping from sort to all sorts injecting into that sort
+	private final Map<String, Set<String>> injections;
+
 	private final StrategoObserver observer;
 
 	private final String completionFunction;
@@ -89,6 +96,7 @@
 	private final BlockingQueue<ICompletionProposal[]> resultsQueue = new ArrayBlockingQueue<ICompletionProposal[]>(1);
 
 	public ContentProposer(StrategoObserver observer, String completionFunction, Pattern identifierLexical, Set<Completion> templates) {
+		this.injections = new HashMap<String, Set<String>>();
 		this.observer = observer;
 		this.completionFunction = completionFunction;
 		this.identifierLexical = identifierLexical;
@@ -248,12 +256,26 @@
 	}
 
 	public ICompletionProposal[] getTemplateProposalsForSort(String wantedSort, ITextViewer viewer) {
-		Set<ICompletionProposal> results = new HashSet<ICompletionProposal>();
+		// Add templates for sorts injected into wantedSort.
+		//  `sort -> wantedSort' => add templates for sort
+		//  `sub -> sort' => add templates for sub too
+
+		final Set<ICompletionProposal> results = new HashSet<ICompletionProposal>();
+		Set<String> wantedSorts = injections.get(wantedSort);
+
+		if (wantedSorts == null) {
+			final ParseTable pt = parser.getParser().getParser().getParseTable();
+			final IncrementalSortSet iss = IncrementalSortSet.create(pt, true, false, wantedSort);
+			wantedSorts = iss.getIncrementalSorts();
+			injections.put(wantedSort, wantedSorts);
+		}
+
 		for (Completion proposal : templates) {
-			if (wantedSort.equals(proposal.getSort())) {
+			if (wantedSorts.contains(proposal.getSort())) {
 				results.add(new ContentProposal(this, proposal, viewer));
 			}
 		}
+
 		return toSortedArray(results);
 	}
 

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Wed Nov  9 14:49:14 2011	(r23590)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Wed Nov  9 14:51:26 2011	(r23591)
@@ -6,6 +6,7 @@
 import static org.spoofax.terms.Term.tryGetConstructor;
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
 import static org.spoofax.terms.attachments.ParentAttachment.getRoot;
+import static org.spoofax.terms.attachments.OriginAttachment.tryGetOrigin;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -224,15 +225,15 @@
 			return getParent(oNode);
 		
 		IStrategoTerm result = oNode;
-		IToken left = getLeftToken(result);
+		IToken left = getLeftToken(tryGetOrigin(result));
 		if (left == null) return oNode;
 		int startOffset = left.getStartOffset();
-		int endOffset = getRightToken(result).getEndOffset();
+		int endOffset = getRightToken(tryGetOrigin(result)).getEndOffset();
 		while (getParent(result) != null
 				&& !getParent(result).isList()
 				&& (getParent(result).getSubtermCount() <= 1 
-						|| (getLeftToken(getParent(result)).getStartOffset() >= startOffset
-							&& getRightToken(getParent(result)).getEndOffset() <= endOffset)))
+						|| (getLeftToken(tryGetOrigin(getParent(result))).getStartOffset() >= startOffset
+							&& getRightToken(tryGetOrigin(getParent(result))).getEndOffset() <= endOffset)))
 			result = getParent(result);
 		return result;
 	}

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Wed Nov  9 14:49:14 2011	(r23590)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Wed Nov  9 14:51:26 2011	(r23591)
@@ -250,7 +250,6 @@
 	
 	/**
 	 * Returns the Spoofax language descript project this observer is associated with.
-	 * @return
 	 */
 	public IProject getProject()
 	{
@@ -469,7 +468,8 @@
 		IStrategoTerm ast = (IStrategoTerm) parseController.getCurrentAst();
 		if (ast == null /* UNDONE: || tryGetConstructor(ast) == null*/ || feedbackFunction == null
 				|| isRecoveryFailed(parseController)) {
-			messages.clearMarkers(((SGLRParseController) parseController).getResource());
+			if (parseController instanceof SGLRParseController)
+				messages.clearMarkers(((SGLRParseController) parseController).getResource());
 			messages.commitAllChanges();
 			return;
 		}

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Wed Nov  9 14:49:14 2011	(r23590)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Wed Nov  9 14:51:26 2011	(r23591)
@@ -12,6 +12,7 @@
 	public IMPLibrary() {
 		add(new NameDialogPrimitive());
 		add(new SubtermPrimitive());
+		add(new TermPathPrimitive());
 		add(new ProjectPathPrimitive());
 		add(new PluginPathPrimitive());
 		add(new RefreshResourcePrimitive());

Modified: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java
==============================================================================
--- spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java	Wed Nov  9 14:49:14 2011	(r23590)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/SourceAttachment.java	Wed Nov  9 14:51:26 2011	(r23591)
@@ -52,6 +52,11 @@
 	public static IResource getResource(ISimpleTerm term) {
 		SourceAttachment resource = ParentAttachment.getRoot(term).getAttachment(TYPE);
 		if (resource == null) {
+			while (term.getAttachment(ImploderAttachment.TYPE) == null && term.getSubtermCount() > 0)
+				term = term.getSubterm(0);
+			if (term.getAttachment(ImploderAttachment.TYPE) == null)
+				return null;
+			
 			String file = ImploderAttachment.getFilename(term);
 			try {
 				return file == null ? null : EditorIOAgent.getResource(new File(file));

Copied: spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/TermPathPrimitive.java (from r23590, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TermPathPrimitive.java)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/branches/org.strategoxt.imp.runtime-candidate-sort-injections/src/org/strategoxt/imp/runtime/stratego/TermPathPrimitive.java	Wed Nov  9 14:51:26 2011	(r23591, copy of r23590, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/TermPathPrimitive.java)
@@ -0,0 +1,27 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Maartje de Jonge
+ */
+public class TermPathPrimitive extends AbstractPrimitive {
+
+	public TermPathPrimitive() {
+		super("SSL_EXT_term_path", 0, 1);
+	}
+	
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		
+		if (tvars.length != 1) return false;
+		env.setCurrent(StrategoTermPath.createPath(tvars[0]));		
+		return true;
+	}
+
+}

From karltk at strategoxt.org  Thu Nov 10 13:45:33 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 10 Nov 2011 12:45:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23592 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego: . editor
	editor/java/org/strategoxt/imp/editors/stratego/strategies lib trans
Message-ID: <20111110124533.14F072B805C@mx2.tudelft.nl>

Author: karltk
Date: Thu Nov 10 12:45:31 2011
New Revision: 23592
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23592&sc=1

Log:
Added support for using a properties file for specifying extract include directories to the analyzer.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_interpolate_environment_variables_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_load_properties_0_0.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project	Wed Nov  9 14:51:26 2011	(r23591)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project	Thu Nov 10 12:45:31 2011	(r23592)
@@ -35,4 +35,11 @@
 		<nature>org.eclipse.pde.PluginNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+	<linkedResources>
+		<link>
+			<name>lib-org.strategoxt.strj_0.17.92.201111091047</name>
+			<type>2</type>
+			<location>/home/karltk/apps/eclipse-3.7-webapps/plugins/org.strategoxt.strj_0.17.92.201111091047</location>
+		</link>
+	</linkedResources>
 </projectDescription>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	Wed Nov  9 14:51:26 2011	(r23591)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	Thu Nov 10 12:45:31 2011	(r23592)
@@ -37,5 +37,5 @@
         <import file="build.generated.xml"/>
     
         <!-- Main target -->
-        <target name="all" depends="utils-files,sdf2table,ppgen.helper.fallback,pppack.helper.fallback,stratego.jar,sdf2imp"/>
+        <target name="all" depends="java.jar,utils-files,sdf2table,ppgen.helper.fallback,pppack.helper.fallback,stratego.jar,sdf2imp"/>
     </project>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Wed Nov  9 14:51:26 2011	(r23591)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Thu Nov 10 12:45:31 2011	(r23592)
@@ -10,6 +10,7 @@
   // See the imported file for a brief introduction and examples.                     
                                                                                        
   provider : include/stratego_sugar.jar
+  provider : include/stratego_sugar-java.jar
 
   observer : editor-analyze
 

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/InteropRegisterer.java	Thu Nov 10 12:45:31 2011	(r23592)
@@ -0,0 +1,17 @@
+package org.strategoxt.imp.editors.stratego.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+  public InteropRegisterer() {
+    super(new Strategy[] { 
+    		java_load_properties_0_0.instance,
+    		java_interpolate_environment_variables_0_0.instance
+    		});
+  }
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/Main.java	Thu Nov 10 12:45:31 2011	(r23592)
@@ -0,0 +1,11 @@
+package org.strategoxt.imp.editors.stratego.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_interpolate_environment_variables_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_interpolate_environment_variables_0_0.java	Thu Nov 10 12:45:31 2011	(r23592)
@@ -0,0 +1,53 @@
+package org.strategoxt.imp.editors.stratego.strategies;
+
+import java.util.Properties;
+
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class java_interpolate_environment_variables_0_0 extends Strategy {
+
+	public static java_interpolate_environment_variables_0_0 instance = new java_interpolate_environment_variables_0_0();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		
+		if(current.getTermType() != IStrategoTerm.STRING)
+			return null;
+
+		Properties props = System.getProperties();
+		String text = ((IStrategoString)current).stringValue();
+		StringBuffer res = new StringBuffer();
+
+		int cursor = 0;
+		
+		for(int i = 0; i < text.length()-2; i++) {
+			if(text.charAt(i) == '$' && text.charAt(i + 1) == '{') {
+				int start = i;
+				int end = -1;
+				for(int j = start; j < text.length(); j++)
+					if(text.charAt(j) == '}') {
+						end = j;
+						break;
+					}
+				if(end > start) {
+					res.append(text.substring(cursor, start));
+					String key = text.substring(start + 2, end);
+					if(props.containsKey(key)) 
+						res.append(props.getProperty(key));
+					else if("HOME".equals(key)) {
+						res.append(props.getProperty("user.home"));
+					}
+					cursor = end + 1;
+				}
+			}
+		}
+		
+		res.append(text.substring(cursor));
+		
+		return context.getFactory().makeString(res.toString());
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_load_properties_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_load_properties_0_0.java	Thu Nov 10 12:45:31 2011	(r23592)
@@ -0,0 +1,49 @@
+package org.strategoxt.imp.editors.stratego.strategies;
+
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.util.Properties;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class java_load_properties_0_0 extends Strategy {
+
+	public static java_load_properties_0_0 instance = new java_load_properties_0_0();
+
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+
+		if (current.getTermType() != IStrategoTerm.STRING)
+			return null;
+
+		IStrategoString path = (IStrategoString) current;
+
+		Properties prop = new Properties();
+		try {
+			prop.load(new FileReader(path.stringValue()));
+		} catch (FileNotFoundException e) {
+			return null;
+		} catch (IOException e) {
+			return null;
+		}
+
+		ITermFactory factory = context.getFactory();
+		IStrategoList els = factory.makeList();
+		for (String key : prop.stringPropertyNames()) {
+			IStrategoString k = factory.makeString(key);
+			IStrategoString v = factory.makeString(prop.getProperty(key));
+			IStrategoTuple tup = factory.makeTuple(k, v);
+			els = factory.makeListCons(tup, els);
+		}
+
+		return els;
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str	Wed Nov  9 14:51:26 2011	(r23591)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.generated.str	Thu Nov 10 12:45:31 2011	(r23592)
@@ -125,6 +125,7 @@
   
   origin-term      = prim("SSL_EXT_origin_term", <id>)
   origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-offset    = prim("SSL_EXT_origin_offset", <id>)
   origin-location  = prim("SSL_EXT_origin_location", <id>)
   origin-line      = origin-location => (<id>, _, _, _)
   origin-column    = origin-location => (_, <id>, _, _)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Wed Nov  9 14:51:26 2011	(r23591)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Thu Nov 10 12:45:31 2011	(r23592)
@@ -6,9 +6,9 @@
   desugar
   lib/editor-common.generated
   sourcedir
-
+      
 strategies
-
+ 
   analyze-ast:
     (ast, path, project-path) -> ast'
     with
@@ -216,11 +216,42 @@
      <+
        full-path := <resolve-import-path> $[[x].rtree]
 
+   external java-load-properties(|)
+   external java-interpolate-environment-variables(|)
+   
+   load-include-properties =
+   	   MemoizeIncludeProperties
+   	 <+ 
+         paths := <java-load-properties <+ ![]> $[[<ProjectDir>]/.spoofax/stratego.properties]
+       ; rules(MemoizeIncludeProperties: paths)
+
+   load-include-paths =
+      load-include-properties 
+    ; fetch-elem(\ ("stratego.include", paths) -> paths \)
+    ; string-tokenize(|[' '])
+      
+   default-include-paths =
+      <map(\ x -> $[[<ProjectDir>]/[x]] \)> [ "", "trans", "lib", "src", "syntax", "syn", "src/syntax" ]
+    ; if SourceDir then 
+        ![ <SourceDir> | <id> ] 
+      else 
+        id 
+      end
+  	   
+   expand-relative-path :
+     x -> $[[<ProjectDir>]/[x]]
+   where
+     explode-string ; Hd ; not(?'/')
+
    resolve-import-path:
      x -> full-path
      where
+       <conc> (<load-include-paths <+ ![]>, <default-include-paths>)
+     ; includes := <map(java-interpolate-environment-variables ; try(expand-relative-path))>
+     ; full-path := <fetch-elem(\ path -> <file-exists> $[[path]/[x]] \)> includes
+        
         // FIXME: fetch true import paths from someplace
-        full-path := <file-exists> $[[<SourceDir>]/[x]]
+/*        full-path := <file-exists> $[[<SourceDir>]/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/trans/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/lib/[x]]
@@ -228,7 +259,7 @@
      <+ full-path := <file-exists> $[[<ProjectDir>]/syntax/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/syn/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/src/syntax/[x]]
-
+*/
   read-stratego-signatures:
     str -> <to-signatures> file
     where

From karltk at strategoxt.org  Thu Nov 10 15:05:57 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 10 Nov 2011 14:05:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23593 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20111110140557.A13CACC085@mx4.tudelft.nl>

Author: karltk
Date: Thu Nov 10 14:05:56 2011
New Revision: 23593
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23593&sc=1

Log:
The settings file is now called .settings/org.strategoxt.imp.editors.stratego.prefs, to be more compliant with the Eclipse preferences system. For now, we use the Java Properties class to parse the file. Will replace with the Eclipse preferences API later.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Thu Nov 10 12:45:31 2011	(r23592)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Thu Nov 10 14:05:56 2011	(r23593)
@@ -6,9 +6,10 @@
   desugar
   lib/editor-common.generated
   sourcedir
-      
+    
 strategies
  
+  
   analyze-ast:
     (ast, path, project-path) -> ast'
     with
@@ -222,7 +223,7 @@
    load-include-properties =
    	   MemoizeIncludeProperties
    	 <+ 
-         paths := <java-load-properties <+ ![]> $[[<ProjectDir>]/.spoofax/stratego.properties]
+         paths := <java-load-properties <+ ![]> $[[<ProjectDir>]/.settings/org.strategoxt.imp.editors.stratego.prefs]
        ; rules(MemoizeIncludeProperties: paths)
 
    load-include-paths =

From karltk at strategoxt.org  Thu Nov 10 16:52:46 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 10 Nov 2011 15:52:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23594 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego
Message-ID: <20111110155246.8A2E4108C021@mx3.tudelft.nl>

Author: karltk
Date: Thu Nov 10 15:52:45 2011
New Revision: 23594
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23594&sc=1

Log:
Unhacked a build-hack trick to trick Tycho.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	Thu Nov 10 14:05:56 2011	(r23593)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	Thu Nov 10 15:52:45 2011	(r23594)
@@ -37,5 +37,5 @@
         <import file="build.generated.xml"/>
     
         <!-- Main target -->
-        <target name="all" depends="java.jar,utils-files,sdf2table,ppgen.helper.fallback,pppack.helper.fallback,stratego.jar,sdf2imp"/>
+        <target name="all" depends="utils-files,sdf2table,ppgen.helper.fallback,pppack.helper.fallback,stratego.jar,sdf2imp"/>
     </project>

From karltk at strategoxt.org  Thu Nov 10 19:00:58 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Thu, 10 Nov 2011 18:00:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23595 -
	spoofax-imp/trunk/org.strategoxt.imp.testing
Message-ID: <20111110180058.AEF1F2B801F@mx2.tudelft.nl>

Author: karltk
Date: Thu Nov 10 18:00:58 2011
New Revision: 23595
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23595&sc=1

Log:
Try syntax/ instead of include/, since Stratego-Sugar.def guaranteed to be there if org.strategoxt.imp.editors.stratego is checked out.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.main.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.main.xml	Thu Nov 10 15:52:45 2011	(r23594)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.main.xml	Thu Nov 10 18:00:58 2011	(r23595)
@@ -19,7 +19,7 @@
         
         <!-- Imports -->
         <property name="build.sdf.imports" value="
-        	              -Idef &quot;${basedir}/../org.strategoxt.imp.editors.stratego/include/Stratego-Sugar.def&quot;
+        	              -Idef &quot;${basedir}/../org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def&quot;
         	              -Idef &quot;${basedir}/../org.strategoxt.imp.editors.aterm/include/ATerm.def&quot;"/>
         <property name="build.stratego.args" value="
                         --library

From L.C.L.Kats at tudelft.nl  Fri Nov 11 16:06:57 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 11 Nov 2011 15:06:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23596 -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
Message-ID: <20111111150657.B0BA4CC0B9@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Nov 11 15:06:57 2011
New Revision: 23596
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23596&sc=1

Log:
updated akefile for newer Aster version

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile
==============================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	Thu Nov 10 18:00:58 2011	(r23595)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/Makefile	Fri Nov 11 15:06:57 2011	(r23596)
@@ -2,7 +2,7 @@
 ASTRS=$(wildcard *.astr) \
       $(wildcard */*.astr)
 
-STRS=$(ASTRS:.astr=.str)
+RTREES=$(ASTRS:.astr=.rtree)
 
 STRCFLAGS=\
   -I . \
@@ -17,17 +17,17 @@
   
 all : make-permissive # jar
 
-make-permissive : make-permissive.str $(STRS)
+make-permissive : make-permissive.rtree $(RTREES)
 	strc -i $< -m main-make-permissive $(STRCFLAGS)
 
-java bin/org/strategoxt/permissivegrammars/make_permissive.java : make-permissive.str $(STRS)
+java bin/org/strategoxt/permissivegrammars/make_permissive.java : make-permissive.rtree $(RTREES)
 	[ -e bin/org/strategoxt/permissivegrammars ] || mkdir -p bin/org/strategoxt/permissivegrammars
 	strj -clean -i $< -o bin/org/strategoxt/permissivegrammars/make_permissive.java -m main-make-permissive -p org.strategoxt.permissivegrammars -la stratego-sdf $(STRCFLAGS)
 
 jar bin/make_permissive.jar : bin/org/strategoxt/permissivegrammars/make_permissive.java
 	strj-jar -i $< -o bin/make_permissive.jar -cp bin
 	     
-make-permissive.str : $(ASTRS) syntax/Stratego-Attributes-Sdf2.tbl syntax/Comments.pp.af
+make-permissive.rtree : $(ASTRS) syntax/Stratego-Attributes-Sdf2.tbl syntax/Comments.pp.af
 	aster --verbose 2 -i $(ASTRS) -I syntax
 
 %.tbl : %.def
@@ -40,7 +40,7 @@
 	         -Idef $(STRATEGOXT)/share/sdf/sdf-front/Stratego-Sdf2.def
 
 clean :
-	rm -f $(STRS) syntax/*.tbl
+	rm -f $(RTREES) syntax/*.tbl
 
 %.pp.af : %.pp
 	parse-pp-table -i $< -o $@

From tobivollebregt at gmail.com  Fri Nov 11 17:57:03 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 11 Nov 2011 16:57:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23597 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax
Message-ID: <20111111165703.49EFACC165@mx4.tudelft.nl>

Author: tvo
Date: Fri Nov 11 16:57:02 2011
New Revision: 23597
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23597&sc=1

Log:
* fix ambiguity when mixing BNF-order productions with SDF-order productions
  (now only one type can be in each section)
* change double brackets to single brackets to delimit templates

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Fri Nov 11 15:06:57 2011	(r23596)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Fri Nov 11 16:57:02 2011	(r23597)
@@ -8,10 +8,6 @@
     SdfProduction TemplateProduction Template
 
   context-free syntax
-    %% testing language does not accept parameterized sorts
-    Production[[SDF]] -> SdfProduction
-
-  context-free syntax
     %% tweaks for content completion
     CONTENTCOMPLETE -> TemplateProduction {recover, cons("WATER")}
     CONTENTCOMPLETE -> PlaceholderOption  {recover, cons("WATER")}
@@ -40,12 +36,19 @@
     %% "grammars"
     "templates" TemplateProduction* -> Section {cons("TemplateSection")}
 
+    %% BNF order and SDF order can't go together in the same section,
+    %% because of ambiguity. "X = Y -> Z": is it "X = Y" "Z" or "X =" "Y -> Z"?
+    "lexical" "syntax"      SdfProduction* -> Grammar[[SDF]] {cons("lexical-syntax")}
+    "context-free" "syntax" SdfProduction* -> Grammar[[SDF]] {cons("context-free-syntax")}
+
+    %% syntactic sugar for SDF
+    ID "=" Symbols[[SDF]] Attributes[[SDF]] -> SdfProduction {cons("SdfProduction")}
+    SortCons "=" Symbols[[SDF]] Attributes[[SDF]] -> SdfProduction {cons("SdfProductionWithCons")}
+
     %% template productions
-    ID "=" Symbols[[SDF]] Attributes[[SDF]] -> Production[[SDF]] {cons("SdfProduction")}
     ID "=" Template Attributes[[SDF]] -> TemplateProduction {cons("TemplateProduction")}
 
     %% template productions `sort.cons = ...'
-    SortCons "=" Symbols[[SDF]] Attributes[[SDF]] -> Production[[SDF]] {cons("SdfProductionWithCons")}
     SortCons "=" Template Attributes[[SDF]] -> TemplateProduction {cons("TemplateProductionWithCons")}
 
     ID "." ID -> SortCons {cons("SortCons")}
@@ -78,20 +81,19 @@
     "[" <PlaceholderText2-LEX> ":" -> <PlaceholderPrefix2-CF> {cons("Text")}
 
     %% template parts
-    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF> {cons("Template")}
-    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF> {cons("Template")}
+    "<" {<TemplateLine1-CF> "\n"}+ ">" -> <Template-CF> {cons("Template")}
+    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF> {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
     <TemplatePart1-CF>* -> <TemplateLine1-CF> {cons("Line")}
     <TemplateString1-LEX> -> <TemplatePart1-CF> {cons("String")}
     <TemplateEscape1-LEX> -> <TemplatePart1-CF> {cons("Escape")}
     <TemplateLayout-LEX>  -> <TemplatePart1-CF> {cons("Layout")}
-    %% <TemplateNewline-LEX> -> <TemplatePart1-CF> {cons("Newline")}
 
-    "[[" {<TemplateLine2-CF> "\n"}+ "]]" -> <Template-CF> {cons("Template")}
+    "[" {<TemplateLine2-CF> "\n"}+ "]" -> <Template-CF> {cons("Template")}
+    "[[" {<TemplateLine2-CF> "\n"}+ "]]" -> <Template-CF> {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
     <TemplatePart2-CF>* -> <TemplateLine2-CF> {cons("Line")}
     <TemplateString2-LEX> -> <TemplatePart2-CF> {cons("String")}
     <TemplateEscape2-LEX> -> <TemplatePart2-CF> {cons("Escape")}
     <TemplateLayout-LEX>  -> <TemplatePart2-CF> {cons("Layout")}
-    %% <TemplateNewline-LEX> -> <TemplatePart2-CF> {cons("Newline")}
 
     %% special: no placeholders, no newlines
     '"' <TemplatePartQ-CF>* '"' -> <Template-CF> {cons("SingleLineTemplate")}

From m.dejonge at tudelft.nl  Sat Nov 12 10:36:59 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 12 Nov 2011 09:36:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23598 - in
	spoofax/trunk/spoofax/org.spoofax.jsglr:
	src/org/spoofax/jsglr/client test/org/spoofax/jsglr/tests
Message-ID: <20111112093700.11F362B8002@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Nov 12 09:36:58 2011
New Revision: 23598
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23598&sc=1

Log:
removed some warning messages

Deleted:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoverDisambiguator.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RangeList.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/ParseTestCase.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Fri Nov 11 16:57:02 2011	(r23597)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Sat Nov 12 09:36:58 2011	(r23598)
@@ -1,7 +1,6 @@
 package org.spoofax.jsglr.client;
 
 import java.util.ArrayList;
-import java.util.List;
 
 public class FineGrainedOnRegion {
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Fri Nov 11 16:57:02 2011	(r23597)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseNode.java	Sat Nov 12 09:36:58 2011	(r23598)
@@ -33,7 +33,8 @@
 
     private int cachedHashCode; //should be set only after parsing 
 
-    public int getLabel() {
+    @Override
+	public int getLabel() {
     	if(isAmbNode() || label == AMB_LABEL)
     		throw new UnsupportedOperationException();
     	return label;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RangeList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RangeList.java	Fri Nov 11 16:57:02 2011	(r23597)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RangeList.java	Sat Nov 12 09:36:58 2011	(r23598)
@@ -1,9 +1,7 @@
 package org.spoofax.jsglr.client;
 
 import java.io.Serializable;
-import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.List;
 
 /**
  * A series of character ranges.

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java	Fri Nov 11 16:57:02 2011	(r23597)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java	Sat Nov 12 09:36:58 2011	(r23598)
@@ -220,10 +220,6 @@
         }
     }
 
-    private String getInputFragment(StructureSkipSuggestion aSkip) {
-        return getHistory().getFragment(aSkip.getStartSkip().getTokensSeen(), aSkip.getEndSkip().getTokensSeen()-1, myParser.currentInputStream);
-    }
-
     private boolean successCriterion() {
         return myParser.activeStacks.size() > 0 || myParser.acceptingStack!=null;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/ParseTestCase.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/ParseTestCase.java	Fri Nov 11 16:57:02 2011	(r23597)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/ParseTestCase.java	Sat Nov 12 09:36:58 2011	(r23598)
@@ -33,7 +33,6 @@
 import org.spoofax.jsglr.io.FileTools;
 import org.spoofax.jsglr.io.ParseTableManager;
 import org.spoofax.jsglr.shared.SGLRException;
-import org.spoofax.jsglr.shared.Tools;
 import org.spoofax.terms.ParseError;
 import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.ParentTermFactory;

From m.dejonge at tudelft.nl  Sun Nov 13 10:49:05 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sun, 13 Nov 2011 09:49:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23599 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20111113094905.ECC31CC10C@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Sun Nov 13 09:49:04 2011
New Revision: 23599
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23599&sc=1

Log:
clean up of fine grained algorithm
-  heuristic settings are made explicit and configurable
-  explored region can be restricted (used in case erroneous region is known)
- recovery line can be set as the central location of the expanding search space
(may be interesting to set the cursor line instead of failure line in some case)

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java   (contents, props changed)
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java   (contents, props changed)
Deleted:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/BacktrackPosition.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Sun Nov 13 09:49:04 2011	(r23599)
@@ -0,0 +1,318 @@
+package org.spoofax.jsglr.client;
+
+import java.util.ArrayList;
+
+import org.spoofax.jsglr.client.SGLR;
+
+/**
+ * @author maartje
+ *
+ */
+public class FineGrainedRecovery {
+	
+	// safety guard: > 1000 recover branches seem to cause performance problems
+	private static final int MAX_NUMBER_OF_RECOVER_BRANCHES = 1000;  	
+	//minimum number of characters that must be parsed error-free before recovery is accepted 
+	//(safety guard against false accepts after some empty lines)
+	private static final int ACCEPT_DISTANCE_CHARACTERS = 100; 
+
+	/*
+	 * Settings that control the heuristics applied to find a recover branch
+	 */
+	private final int timeLimit; //fine-grained recovery is stopped in case time limit expired
+	private final int acceptDistanceLines; //number of lines that must be parsed error-free before recovery is accepted
+	private final int backtrackDistanceLines; //maximum number of (non-empty) lines that is fully backtracked
+	private final int backtrackDistanceLinesSingleToken; //maximum number of (non-empty) lines that is explored for single token recoveries
+	private final double backwardFactor; //increase explored left context with x lines at each loop 
+	private final double forwardFactor; //increase explored right context with x lines at each loop (for example: 0.5 then extend one line after two loops)
+	//TODO: cut off branches that exceeds these maximums
+	private final int maxNumberOfRecoverApplicationsLocal; //branches with more then x recoveries after backtrack offset are cut off in FG mode
+	private final int maxNumberOfRecoverApplicationsGlobal; //branches with more then x recoveries are cut off (IS USED FOR ANALYSIS)
+	
+	/*
+	 * Properties of the current error
+	 */
+	private int exploredRegionStartOffset; //recoveries at the left of the region start are not explored
+	private int exploredRegionEndOffset; //recoveries at the right of the region end are not explored
+	private int lineIndexRecovery; //line index where recovery search starts (parse failure line, region end line, cursor line(?!))
+	private int failureOffset; //location where parser failed
+	private long recoverStartTime; //start time
+
+	private void checkAssertionsForSettings() {
+    	assert(timeLimit > 0);
+    	assert(acceptDistanceLines > 0);
+    	assert(backtrackDistanceLines < backtrackDistanceLinesSingleToken);
+    	assert(backwardFactor >= 0);
+    	assert(forwardFactor >= 0);
+    	assert(maxNumberOfRecoverApplicationsGlobal >= 1);
+    	assert(maxNumberOfRecoverApplicationsLocal >= 1);
+    	assert(maxNumberOfRecoverApplicationsGlobal >= maxNumberOfRecoverApplicationsLocal);
+	}
+
+	private void checkAssertionsForErrorProperties() {
+    	assert(exploredRegionStartOffset < exploredRegionEndOffset);
+    	assert(exploredRegionStartOffset < failureOffset);
+		assert(lineIndexRecovery <= getHistory().getIndexLastLine());
+		assert(getHistory().getLine(lineIndexRecovery).getStackNodes().size() > 0);
+		assert(getTokensSeenAtLine(lineIndexRecovery) <= failureOffset);
+		assert(failureOffset >= getTokensSeenAtLine(lineIndexRecovery));
+	}
+
+	private void checkAssertionsUnexploredBranches(ArrayList<RecoverNode> unexplored_branches, int bwIndex) {
+		for (RecoverNode recoverNode : unexplored_branches) {
+			assert(exploredRegionStartOffset <= recoverNode.tokensSeen);
+			assert(getTokensSeenAtLine(bwIndex) <= recoverNode.tokensSeen);
+			assert(recoverNode.tokensSeen <= exploredRegionEndOffset);
+		}
+	}
+
+	/*
+	 * Parser instance
+	 */
+    private final SGLR mySGLR;
+    
+	private ParserHistory getHistory() {
+		return mySGLR.getHistory();
+	}
+	
+	/**
+	 * Correcting recovery technique for SGLR parser
+	 * Applies recover productions (which simulate token insertions and deletions) 
+	 * using a expanding search space heuristic over an untrusted source fragment  
+	 * @param SGLR parser
+	 */
+	public FineGrainedRecovery(SGLR parser) {
+		this(parser, FineGrainedSetting.createDefaultSetting());
+	}
+
+	/**
+	 * Correcting recovery technique for SGLR.
+	 * @param SGLR parser
+	 * @param Setting that determines the expanding search space heuristics applied to find a suitable recovery
+	 */
+	public FineGrainedRecovery(SGLR parser, FineGrainedSetting fgSetting) {
+		this.acceptDistanceLines = fgSetting.getAcceptDistanceLines();
+		this.backtrackDistanceLines = fgSetting.getBacktrackDistanceLines();
+		this.backtrackDistanceLinesSingleToken = fgSetting.getBacktrackDistanceLinesSingleToken();
+		this.backwardFactor = fgSetting.getBackwardFactor();
+		this.forwardFactor = fgSetting.getForwardFactor();
+		this.maxNumberOfRecoverApplicationsGlobal = fgSetting.getMaxNumberOfRecoverApplicationsGlobal();
+		this.maxNumberOfRecoverApplicationsLocal = fgSetting.getMaxNumberOfRecoverApplicationsLocal();
+		this.timeLimit = fgSetting.getTimeLimit();
+		checkAssertionsForSettings();
+		this.mySGLR = parser;
+	}
+	
+	
+    /**
+     * Constructs a recover branch for SGLR
+     * @param failureOffset location where the parser fails
+     * @param recoverIndex line index (from parser history) where recover search starts
+     * (typically: region-end index, failure index, or: index of cursor line if nearby and at the left of failure index)
+     * @param regionStartOffset restricts the search space to the left
+     * @param regionEndOffset restricts the search space to the right
+     * @return true iff suitable recover branch is constructed
+     */
+    public boolean recover(int failureOffset, int recoverIndex, int regionStartOffset, int regionEndOffset){
+    	this.exploredRegionStartOffset = regionStartOffset; 
+    	this.exploredRegionEndOffset = regionEndOffset;
+    	return finegrainedRecover(failureOffset, recoverIndex);
+    }
+
+    /**
+     * Constructs a recover branch for SGLR
+     * @param failureOffset location where the parser fails
+     * @param recoverIndex line index (from parser history) where recover search starts
+     * (typically: failure index, or: index of cursor line if nearby and at the left of failure index)
+     * @return true iff suitable recover branch is constructed
+     */
+	public boolean recover(int failureOffset, int recoverIndex){
+    	this.exploredRegionStartOffset = -1;
+    	this.exploredRegionEndOffset = Integer.MAX_VALUE;
+    	return finegrainedRecover(failureOffset, recoverIndex);
+    }
+
+	private boolean finegrainedRecover(int failureOffset, int recoverIndex) {
+		this.failureOffset = failureOffset;
+    	this.lineIndexRecovery = recoverIndex; 
+    	this.recoverStartTime = System.currentTimeMillis();
+    	checkAssertionsForErrorProperties();
+    	return recoverFrom(0, new ArrayList<RecoverNode>());
+	}
+
+	private boolean recoverFrom(int loopIndex, ArrayList<RecoverNode> unexplored_branches) {
+		int backwardIndexPrev = Math.max(0,lineIndexRecovery - (int)(backwardFactor * (loopIndex - 1)));
+		int backwardIndex = Math.max(0,lineIndexRecovery - (int)(backwardFactor * loopIndex));
+		int forwardLinesMax = (int)(forwardFactor * loopIndex);
+		assert(0 <= backwardIndex);
+		assert(backwardIndex <= lineIndexRecovery);
+		assert(backwardIndex <= backwardIndexPrev);
+		assert(forwardLinesMax >= 0);		
+		unexplored_branches.addAll(getBackwardRecoverCandidates(backwardIndex, backwardIndexPrev));
+		checkAssertionsUnexploredBranches(unexplored_branches, backwardIndex);
+		resetSGLR(backwardIndex, false);
+		ArrayList<RecoverNode> newCandidates = recoverParse(forwardLinesMax, this.exploredRegionEndOffset, unexplored_branches);
+		if(!acceptParse()){
+			if(timelimitExpired()){
+				return false;
+			}			
+			if(continueBacktracking(backwardIndex)){
+				if(newCandidates.size() > MAX_NUMBER_OF_RECOVER_BRANCHES)
+					newCandidates = new ArrayList<RecoverNode>(); //too much branches causes performance problems
+				recoverFrom(loopIndex + 1, newCandidates);
+			}
+			else if (continueSingleTokenBacktracking(backwardIndex)){
+				recoverFrom(loopIndex + 1, new ArrayList<RecoverNode>());
+			}
+			else{
+				return false;
+			}
+		}
+		return true;
+	}
+
+	/**
+	 * Collects recover branches between current parser location and fwTokensSeenMax. 
+	 * Either from a previously unexplored line,
+	 * or from a set of unexplored branches.
+	 * Stops in case more then fwLineMax newlines are parsed after the line where recovery started
+	 * @param fwLineMax restricts search space to the right: max number of lines that may be explored after recover line
+	 * @param fwTokensSeenMax restricts search space to the right, exploration within erroneous region
+	 * @param candidates candidate branches that are explored
+	 * @return new candidate branches
+	 */
+	private ArrayList<RecoverNode> recoverParse(int fwLineMax, int fwTokensSeenMax, ArrayList<RecoverNode> candidates) {
+		// Backtracking is not combined with exploration because that creates
+		// duplicates
+		assert (mySGLR.activeStacks.size() == 0 || candidates.size() == 0);
+
+		ArrayList<RecoverNode> newCandidates = new ArrayList<RecoverNode>();
+		int curTokIndex;
+		int exploredLinesForward = 0;
+		do {
+			curTokIndex = getHistory().getTokenIndex();
+			addCurrentCandidates(candidates, curTokIndex);
+			getHistory().readRecoverToken(mySGLR, false);
+			if (mySGLR.getCurrentToken() == '\n' && curTokIndex > getTokensSeenAtLine(lineIndexRecovery)){
+				exploredLinesForward++;
+			}
+			// System.out.print((char)mySGLR.currentToken);
+			mySGLR.setFineGrainedOnRegion(exploredRegionStartOffset <= curTokIndex);
+			mySGLR.doParseStep();
+			newCandidates.addAll(collectNewRecoverCandidates(curTokIndex));
+			mySGLR.getRecoverStacks().clear();
+		} while (
+				exploredLinesForward <= fwLineMax
+				&& getHistory().getTokenIndex() <= exploredRegionEndOffset
+				&& getHistory().getTokenIndex() <= fwTokensSeenMax
+				&& mySGLR.acceptingStack == null
+				&& mySGLR.getCurrentToken() != SGLR.EOF);
+		mySGLR.setFineGrainedOnRegion(false);
+		return newCandidates;
+	}
+
+    private void addCurrentCandidates(ArrayList<RecoverNode> candidates, int tokenPosition) {
+        for (RecoverNode recoverNode : candidates) {
+            if(tokenPosition==recoverNode.tokensSeen){
+            	Frame st =mySGLR.findStack(mySGLR.activeStacks, recoverNode.recoverStack.state);
+                if(st != null) {
+                	for (Link ln : recoverNode.recoverStack.getAllLinks()) {
+                		st.addLink(ln);
+					}                	
+                }
+                else
+                	mySGLR.addStack(recoverNode.recoverStack);
+            }
+        }
+    }
+
+	private void resetSGLR(int btIndex, boolean keepStacks) {
+    	mySGLR.activeStacks.clear();
+		if(keepStacks){
+	        mySGLR.activeStacks.addAll(getHistory().getLine(btIndex).getStackNodes());
+		}
+        getHistory().setTokenIndex(getHistory().getLine(btIndex).getTokensSeen());
+	}
+
+    private ArrayList<RecoverNode> collectNewRecoverCandidates(int tokenIndex) {
+    	assert(tokenIndex >= exploredRegionStartOffset || mySGLR.getRecoverStacks().isEmpty());
+    	assert(tokenIndex <= exploredRegionEndOffset || mySGLR.getRecoverStacks().isEmpty());
+        ArrayList<RecoverNode> results=new ArrayList<RecoverNode>();
+        for (Frame recoverStack : mySGLR.getRecoverStacks()) {
+            RecoverNode rn = new RecoverNode(recoverStack, tokenIndex);
+            results.add(rn);
+        }
+        return results;
+    }
+
+	private boolean timelimitExpired() {
+		return System.currentTimeMillis() - this.recoverStartTime > timeLimit;
+	}
+
+	private ArrayList<RecoverNode> getBackwardRecoverCandidates(int bwIndex, int bwIndexPrev) {
+		assert(bwIndex <= bwIndexPrev);
+		if (bwIndex == bwIndexPrev || preceedsErroneousRegion(bwIndexPrev)){
+			return new ArrayList<RecoverNode>();
+		}
+		resetSGLR(bwIndex, true);
+		int fwTokensSeenMax = Integer.MAX_VALUE;
+		if(bwIndexPrev <= getHistory().getIndexLastLine()){
+			fwTokensSeenMax = getTokensSeenAtLine(bwIndexPrev);
+		}
+		ArrayList<RecoverNode> newBranches = recoverParse(0, fwTokensSeenMax, new ArrayList<RecoverNode>());
+		return newBranches;
+	}
+
+	private boolean preceedsErroneousRegion(int lineIndex) {
+		return 
+			lineIndex <= getHistory().getIndexLastLine() &&
+			getTokensSeenAtLine(lineIndex) <= exploredRegionStartOffset;
+	}
+
+	private int getTokensSeenAtLine(int lineIndex) {
+		return getHistory().getLine(lineIndex).getTokensSeen();
+	}
+
+	private boolean continueBacktracking(int backwardIndex) {
+		assert(backwardIndex <= lineIndexRecovery);
+		return lineIndexRecovery - backwardIndex < backtrackDistanceLines;
+	}
+
+	private boolean continueSingleTokenBacktracking(int backwardIndex) {
+		return lineIndexRecovery - backwardIndex < backtrackDistanceLinesSingleToken;
+	}
+	
+	/**
+	 * recovery is accepted in case a minimal number of characters and lines
+	 * are parsed error free after failure location (and last recovery location).
+	 * Or in case accepting stack is constructed
+	 * @return true iff suitable recover stack constructed
+	 */
+	private boolean acceptParse() {
+		String parsedFragment = "";
+		while (mySGLR.activeStacks.size() > 0 && !acceptRecovery(parsedFragment)) {
+			getHistory().readRecoverToken(mySGLR, false);
+			if(getHistory().getTokenIndex() > failureOffset){
+				parsedFragment += ((char)mySGLR.getCurrentToken());
+			}
+			// System.out.print((char)mySGLR.currentToken);
+			mySGLR.doParseStep();
+		}
+		return acceptRecovery(parsedFragment);
+	}
+
+	/**
+	 * Recovery is accepted if:
+	 * - Parser has accepting stack at EOF
+	 * - sufficiently large fragment is parsed without a recover application 
+	 */
+	private boolean acceptRecovery(String parsedFragmentSinceLastRecovery){
+		if(mySGLR.acceptingStack != null)
+			return true;
+		return 
+			mySGLR.activeStacks.size() > 0
+		&&	parsedFragmentSinceLastRecovery.split("\n").length > acceptDistanceLines
+		&&	parsedFragmentSinceLastRecovery.length() > ACCEPT_DISTANCE_CHARACTERS
+		&&  getHistory().getTokenIndex() > exploredRegionEndOffset;
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Sun Nov 13 09:49:04 2011	(r23599)
@@ -0,0 +1,217 @@
+package org.spoofax.jsglr.client;
+
+public class FineGrainedSetting {
+
+	private int acceptDistanceLines; //number of lines that must be parsed error-free before recovery is accepted
+	private int backtrackDistanceLines; //maximum number of (non-empty) lines that is fully backtracked
+	private int backtrackDistanceLinesSingleToken; //maximum number of (non-empty) lines that is explored for single token recoveries
+	private double backwardFactor; //increase explored left context with x lines at each loop 
+	private double forwardFactor; //increase explored right context with x lines at each loop (for example: 0.5 then extend one line after two loops)
+	private int maxNumberOfRecoverApplicationsLocal; //branches with more then x recoveries after backtrack offset are cut off in FG mode
+	private int maxNumberOfRecoverApplicationsGlobal; //branches with more then x recoveries are cut off (IS USED FOR ANALYSIS)
+
+	/*
+	 * Settings that control the heuristics applied to find a recover branch
+	 */
+	private int timeLimit; //finegrained is stopped in case time limit expired
+	
+	public int getTimeLimit() {
+		return timeLimit;
+	}
+
+	public FineGrainedSetting setTimeLimit(int timeLimit) {
+		this.timeLimit = timeLimit;
+		return this;
+	}
+
+	public int getAcceptDistanceLines() {
+		return acceptDistanceLines;
+	}
+
+	public FineGrainedSetting setAcceptDistanceLines(int acceptDistanceLines) {
+		this.acceptDistanceLines = acceptDistanceLines;
+		return this;
+	}
+
+	public int getBacktrackDistanceLines() {
+		return backtrackDistanceLines;
+	}
+
+	public FineGrainedSetting setBacktrackDistanceLines(int backtrackDistanceLines) {
+		this.backtrackDistanceLines = backtrackDistanceLines;
+		return this;
+	}
+
+	public int getBacktrackDistanceLinesSingleToken() {
+		return backtrackDistanceLinesSingleToken;
+	}
+
+	public FineGrainedSetting setBacktrackDistanceLinesSingleToken(
+			int backtrackDistanceLinesSingleToken) {
+		this.backtrackDistanceLinesSingleToken = backtrackDistanceLinesSingleToken;
+		return this;
+	}
+
+	public double getBackwardFactor() {
+		return backwardFactor;
+	}
+
+	public FineGrainedSetting setBackwardFactor(double backwardFactor) {
+		this.backwardFactor = backwardFactor;
+		return this;
+	}
+
+	public double getForwardFactor() {
+		return forwardFactor;
+	}
+
+	public FineGrainedSetting setForwardFactor(double forwardFactor) {
+		this.forwardFactor = forwardFactor;
+		return this;
+	}
+
+	public int getMaxNumberOfRecoverApplicationsLocal() {
+		return maxNumberOfRecoverApplicationsLocal;
+	}
+
+	public FineGrainedSetting setMaxNumberOfRecoverApplicationsLocal(
+			int maxNumberOfRecoverApplicationsLocal) {
+		this.maxNumberOfRecoverApplicationsLocal = maxNumberOfRecoverApplicationsLocal;
+		return this;
+	}
+
+	public int getMaxNumberOfRecoverApplicationsGlobal() {
+		return maxNumberOfRecoverApplicationsGlobal;
+	}
+
+	public FineGrainedSetting setMaxNumberOfRecoverApplicationsGlobal(
+			int maxNumberOfRecoverApplicationsGlobal) {
+		this.maxNumberOfRecoverApplicationsGlobal = maxNumberOfRecoverApplicationsGlobal;
+		return this;
+	}
+
+	private FineGrainedSetting() {
+		this.setTimeLimit(1000);
+		this.setAcceptDistanceLines(5);
+		this.setBacktrackDistanceLines(8);
+		this.setBacktrackDistanceLinesSingleToken(80);
+		this.setBackwardFactor(1);
+		this.setForwardFactor(0.5);
+		this.setMaxNumberOfRecoverApplicationsLocal(6);
+		this.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+		
+	}
+	
+	/**
+	 * Setting that is fine tuned for interactive editing.
+	 * Both the left- and the right- context of the failure location are explored
+	 * using an expanding search space.
+	 * Recovery fails or succeeds within 1 second
+	 * @return Standard setting for fine grained recovery in an interactive environment
+	 */
+	public static FineGrainedSetting createDefaultSetting(){
+		return new FineGrainedSetting()
+			.setTimeLimit(1000)
+			.setAcceptDistanceLines(5)
+			.setBacktrackDistanceLines(8)
+			.setBacktrackDistanceLinesSingleToken(80)
+			.setBackwardFactor(1)
+			.setForwardFactor(0.5)
+			.setMaxNumberOfRecoverApplicationsLocal(6)
+			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+	}
+
+	/**
+	 * Setting is used for error analysis to find out how many files
+	 * can be recovered with a single token insertion/deletion/replacement 
+	 * Search heuristic: try all recover-count = 1 branches in the left context
+	 * @return Setting that globally searches for a single token recovery
+	 */
+	public static FineGrainedSetting createSingleTokenSetting(){
+		return new FineGrainedSetting()
+			.setTimeLimit(2500)
+			.setAcceptDistanceLines(15)
+			.setBacktrackDistanceLines(0)
+			.setBacktrackDistanceLinesSingleToken(500)
+			.setBackwardFactor(1)
+			.setForwardFactor(0)
+			.setMaxNumberOfRecoverApplicationsLocal(1)
+			.setMaxNumberOfRecoverApplicationsGlobal(1);
+	}
+
+	/**
+	 * Setting is used for error analysis, to find out
+	 * how many recover actions are required to recover from an error.
+	 * Search heuristic: regionally try all recover-count = 1 branches,
+	 * then continue with recover-count = 2, and so on. 
+	 * @return Setting that globally searches for a recover branch 
+	 * by modifying the left and right context
+	 */
+	public static FineGrainedSetting createMultipleTokensSetting(){
+		return new FineGrainedSetting()
+			.setTimeLimit(4000)
+			.setAcceptDistanceLines(5)
+			.setBacktrackDistanceLines(20)
+			.setBacktrackDistanceLinesSingleToken(0)
+			.setBackwardFactor(20)
+			.setForwardFactor(20)
+			.setMaxNumberOfRecoverApplicationsLocal(10)
+			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+	}
+
+	/**
+	 * Setting is used for error analysis to find out how well
+	 * a local approach performs, only modifications on a single line are explored. 
+	 * Search heuristic: try all recover-count = 1, 2, 3, ... branches on the failure (or other) line,
+	 * @return Setting that locally searches for a recover branch
+	 */
+	public static FineGrainedSetting createLocalContextSetting(){
+		return new FineGrainedSetting()
+			.setTimeLimit(2500)
+			.setAcceptDistanceLines(5)
+			.setBacktrackDistanceLines(0)
+			.setBacktrackDistanceLinesSingleToken(0)
+			.setBackwardFactor(0)
+			.setForwardFactor(0)
+			.setMaxNumberOfRecoverApplicationsLocal(10)
+			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+	}
+
+	/**
+	 * Setting is used for error analysis to find out how 
+	 * well a left context approach performs, only modifications at the (inclusive) 
+	 * left of the error location are explored 
+	 * Search heuristic: find recover branches at the left of the failure location using an expanding search space
+	 * @return Setting that searches for a recover branch by modifying the left context
+	 */
+	public static FineGrainedSetting createLeftContextSetting(){
+		return new FineGrainedSetting()
+			.setTimeLimit(2500)
+			.setAcceptDistanceLines(5)
+			.setBacktrackDistanceLines(20)
+			.setBacktrackDistanceLinesSingleToken(80)
+			.setBackwardFactor(1)
+			.setForwardFactor(0)
+			.setMaxNumberOfRecoverApplicationsLocal(6)
+			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+	}
+
+	/**
+	 * Setting is used for error analysis to find out how 
+	 * well a right context approach performs, only modifications at the (inclusive) 
+	 * right of the error location are explored 
+	 * Search heuristic: find recover branches at the right of the failure location using an expanding search space
+	 * @return Setting that searches for a recover branch by modifying the right context
+	 */
+	public static FineGrainedSetting createRightContextSetting(){
+		return new FineGrainedSetting()
+			.setTimeLimit(2500)
+			.setAcceptDistanceLines(5)
+			.setBacktrackDistanceLines(0)
+			.setBacktrackDistanceLinesSingleToken(0)
+			.setBackwardFactor(0)
+			.setForwardFactor(1)
+			.setMaxNumberOfRecoverApplicationsLocal(6)
+			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java	Sat Nov 12 09:36:58 2011	(r23598)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java	Sun Nov 13 09:49:04 2011	(r23599)
@@ -97,6 +97,7 @@
         if (skipSucceeded) { 
             getHistory().resetRecoveryIndentHandler(skipRecovery.getStartLineErrorFragment().getIndentValue());
             parseErrorFragmentAsWhiteSpace(false);
+            getHistory().setTokenIndex(skipRecovery.getEndPositionErrorFragment());
             boolean rsSucceeded=parseRemainingTokens(true);
             if(!rsSucceeded)
             	combinedRecover();
@@ -113,15 +114,18 @@
     private void addSkipOption(boolean skipSucceeded) {
         ArrayDeque<Frame> fgStacks=new ArrayDeque<Frame>();
         fgStacks.addAll(mySGLR.activeStacks);
-        if(skipSucceeded && parseErrorFragmentAsWhiteSpace(false) && parseRemainingTokens(false)){
-            for (Frame frame : mySGLR.activeStacks) {
-                for (Link l : frame.getAllLinks()) {
-                    l.recoverCount = 5;
-                }
-            }                        
-            for (Frame frame : fgStacks) {
-                mySGLR.addStack(frame);
-            } 
+        if(skipSucceeded && parseErrorFragmentAsWhiteSpace(false)){
+        	getHistory().setTokenIndex(skipRecovery.getEndPositionErrorFragment());
+        	if(parseRemainingTokens(false)){
+	            for (Frame frame : mySGLR.activeStacks) {
+	                for (Link l : frame.getAllLinks()) {
+	                    l.recoverCount = 5;
+	                }
+	            }                        
+	            for (Frame frame : fgStacks) {
+	                mySGLR.addStack(frame);
+	            } 
+            }
         }
     }
     
@@ -130,7 +134,23 @@
     }
 
     private boolean tryFineGrainedRepair(int tokensSeen, int lastIndex, boolean useRegion) {
-        FineGrainedOnRegion fgRepair=new FineGrainedOnRegion(mySGLR); 
+    	FineGrainedRecovery fgRecovery = new FineGrainedRecovery(mySGLR);
+    	if(useRegion){
+    		StructureSkipSuggestion erroneousRegion = skipRecovery.getErroneousRegion();
+    		fgRecovery.recover(
+    			tokensSeen, 
+    			Math.min(erroneousRegion.getIndexHistoryEnd(), lastIndex), 
+    			erroneousRegion.getStartSkip().getTokensSeen(),
+    			erroneousRegion.getEndSkip().getTokensSeen()
+    		);
+    	}
+    	else{
+    		fgRecovery.recover(tokensSeen, lastIndex); //TODO: cursor location (if near but close to failure) as recover mid? 
+    	}
+    	return parseRemainingTokens(true);
+
+    	/*
+    	FineGrainedOnRegion fgRepair=new FineGrainedOnRegion(mySGLR); 
         if(useRegion){
             fgRepair.setRegionInfo(skipRecovery.getErroneousRegion(), skipRecovery.getAcceptPosition());
         }
@@ -140,6 +160,7 @@
         fgRepair.recover();
         fgRepair.parseRemainingTokens();
         return recoverySucceeded();
+        */
     }
 
     private boolean tryBridgeRepair(String errorFragment) {
@@ -147,6 +168,7 @@
         if(repairedFragment.trim().equals(errorFragment.trim()))
         	return false;
         mySGLR.activeStacks.addAll(skipRecovery.getStartLineErrorFragment().getStackNodes());   
+        getHistory().setTokenIndex(skipRecovery.getEndPositionErrorFragment());
         tryParsing(repairedFragment, false);      
         return parseRemainingTokens(true);
     }
@@ -198,7 +220,6 @@
     public boolean parseRemainingTokens(boolean keepHistory) {
         //System.out.println("------------- REMAINING CHARACTERS --------------- ");
         //System.out.println();
-        getHistory().setTokenIndex(skipRecovery.getEndPositionErrorFragment());
         while(
         		(!getHistory().hasFinishedRecoverTokens()) 
         		&& mySGLR.activeStacks.size()>0 

From m.dejonge at tudelft.nl  Sun Nov 13 12:46:12 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sun, 13 Nov 2011 11:46:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23600 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20111113114612.4E471108C02A@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Sun Nov 13 11:46:11 2011
New Revision: 23600
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23600&sc=1

Log:
use configurable settings

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Sun Nov 13 09:49:04 2011	(r23599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Sun Nov 13 11:46:11 2011	(r23600)
@@ -19,15 +19,7 @@
 	/*
 	 * Settings that control the heuristics applied to find a recover branch
 	 */
-	private final int timeLimit; //fine-grained recovery is stopped in case time limit expired
-	private final int acceptDistanceLines; //number of lines that must be parsed error-free before recovery is accepted
-	private final int backtrackDistanceLines; //maximum number of (non-empty) lines that is fully backtracked
-	private final int backtrackDistanceLinesSingleToken; //maximum number of (non-empty) lines that is explored for single token recoveries
-	private final double backwardFactor; //increase explored left context with x lines at each loop 
-	private final double forwardFactor; //increase explored right context with x lines at each loop (for example: 0.5 then extend one line after two loops)
-	//TODO: cut off branches that exceeds these maximums
-	private final int maxNumberOfRecoverApplicationsLocal; //branches with more then x recoveries after backtrack offset are cut off in FG mode
-	private final int maxNumberOfRecoverApplicationsGlobal; //branches with more then x recoveries are cut off (IS USED FOR ANALYSIS)
+	private final FineGrainedSetting settings;
 	
 	/*
 	 * Properties of the current error
@@ -38,17 +30,6 @@
 	private int failureOffset; //location where parser failed
 	private long recoverStartTime; //start time
 
-	private void checkAssertionsForSettings() {
-    	assert(timeLimit > 0);
-    	assert(acceptDistanceLines > 0);
-    	assert(backtrackDistanceLines < backtrackDistanceLinesSingleToken);
-    	assert(backwardFactor >= 0);
-    	assert(forwardFactor >= 0);
-    	assert(maxNumberOfRecoverApplicationsGlobal >= 1);
-    	assert(maxNumberOfRecoverApplicationsLocal >= 1);
-    	assert(maxNumberOfRecoverApplicationsGlobal >= maxNumberOfRecoverApplicationsLocal);
-	}
-
 	private void checkAssertionsForErrorProperties() {
     	assert(exploredRegionStartOffset < exploredRegionEndOffset);
     	assert(exploredRegionStartOffset < failureOffset);
@@ -90,20 +71,11 @@
 	 * @param SGLR parser
 	 * @param Setting that determines the expanding search space heuristics applied to find a suitable recovery
 	 */
-	public FineGrainedRecovery(SGLR parser, FineGrainedSetting fgSetting) {
-		this.acceptDistanceLines = fgSetting.getAcceptDistanceLines();
-		this.backtrackDistanceLines = fgSetting.getBacktrackDistanceLines();
-		this.backtrackDistanceLinesSingleToken = fgSetting.getBacktrackDistanceLinesSingleToken();
-		this.backwardFactor = fgSetting.getBackwardFactor();
-		this.forwardFactor = fgSetting.getForwardFactor();
-		this.maxNumberOfRecoverApplicationsGlobal = fgSetting.getMaxNumberOfRecoverApplicationsGlobal();
-		this.maxNumberOfRecoverApplicationsLocal = fgSetting.getMaxNumberOfRecoverApplicationsLocal();
-		this.timeLimit = fgSetting.getTimeLimit();
-		checkAssertionsForSettings();
+	public FineGrainedRecovery(SGLR parser, FineGrainedSetting fgSettings) {
+		this.settings = fgSettings;		
 		this.mySGLR = parser;
 	}
 	
-	
     /**
      * Constructs a recover branch for SGLR
      * @param failureOffset location where the parser fails
@@ -141,9 +113,9 @@
 	}
 
 	private boolean recoverFrom(int loopIndex, ArrayList<RecoverNode> unexplored_branches) {
-		int backwardIndexPrev = Math.max(0,lineIndexRecovery - (int)(backwardFactor * (loopIndex - 1)));
-		int backwardIndex = Math.max(0,lineIndexRecovery - (int)(backwardFactor * loopIndex));
-		int forwardLinesMax = (int)(forwardFactor * loopIndex);
+		int backwardIndexPrev = Math.max(0,lineIndexRecovery - (int)(settings.getBackwardFactor() * (loopIndex - 1)));
+		int backwardIndex = Math.max(0,lineIndexRecovery - (int)(settings.getBackwardFactor() * loopIndex));
+		int forwardLinesMax = (int)(settings.getForwardFactor() * loopIndex);
 		assert(0 <= backwardIndex);
 		assert(backwardIndex <= lineIndexRecovery);
 		assert(backwardIndex <= backwardIndexPrev);
@@ -246,7 +218,7 @@
     }
 
 	private boolean timelimitExpired() {
-		return System.currentTimeMillis() - this.recoverStartTime > timeLimit;
+		return System.currentTimeMillis() - this.recoverStartTime > settings.getTimeLimit();
 	}
 
 	private ArrayList<RecoverNode> getBackwardRecoverCandidates(int bwIndex, int bwIndexPrev) {
@@ -275,11 +247,11 @@
 
 	private boolean continueBacktracking(int backwardIndex) {
 		assert(backwardIndex <= lineIndexRecovery);
-		return lineIndexRecovery - backwardIndex < backtrackDistanceLines;
+		return lineIndexRecovery - backwardIndex < settings.getBacktrackDistanceLines();
 	}
 
 	private boolean continueSingleTokenBacktracking(int backwardIndex) {
-		return lineIndexRecovery - backwardIndex < backtrackDistanceLinesSingleToken;
+		return lineIndexRecovery - backwardIndex < settings.getBacktrackDistanceLinesSingleToken();
 	}
 	
 	/**
@@ -311,7 +283,7 @@
 			return true;
 		return 
 			mySGLR.activeStacks.size() > 0
-		&&	parsedFragmentSinceLastRecovery.split("\n").length > acceptDistanceLines
+		&&	parsedFragmentSinceLastRecovery.split("\n").length > settings.getAcceptDistanceLines()
 		&&	parsedFragmentSinceLastRecovery.length() > ACCEPT_DISTANCE_CHARACTERS
 		&&  getHistory().getTokenIndex() > exploredRegionEndOffset;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Sun Nov 13 09:49:04 2011	(r23599)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Sun Nov 13 11:46:11 2011	(r23600)
@@ -110,7 +110,7 @@
 	 * @return Standard setting for fine grained recovery in an interactive environment
 	 */
 	public static FineGrainedSetting createDefaultSetting(){
-		return new FineGrainedSetting()
+		FineGrainedSetting fgSetting = new FineGrainedSetting()
 			.setTimeLimit(1000)
 			.setAcceptDistanceLines(5)
 			.setBacktrackDistanceLines(8)
@@ -119,6 +119,8 @@
 			.setForwardFactor(0.5)
 			.setMaxNumberOfRecoverApplicationsLocal(6)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+		fgSetting.checkAssertionsForSettings();
+		return fgSetting;
 	}
 
 	/**
@@ -128,7 +130,7 @@
 	 * @return Setting that globally searches for a single token recovery
 	 */
 	public static FineGrainedSetting createSingleTokenSetting(){
-		return new FineGrainedSetting()
+		FineGrainedSetting fgSetting = new FineGrainedSetting()
 			.setTimeLimit(2500)
 			.setAcceptDistanceLines(15)
 			.setBacktrackDistanceLines(0)
@@ -137,6 +139,8 @@
 			.setForwardFactor(0)
 			.setMaxNumberOfRecoverApplicationsLocal(1)
 			.setMaxNumberOfRecoverApplicationsGlobal(1);
+		fgSetting.checkAssertionsForSettings();
+		return fgSetting;
 	}
 
 	/**
@@ -148,7 +152,7 @@
 	 * by modifying the left and right context
 	 */
 	public static FineGrainedSetting createMultipleTokensSetting(){
-		return new FineGrainedSetting()
+		FineGrainedSetting fgSetting = new FineGrainedSetting()
 			.setTimeLimit(4000)
 			.setAcceptDistanceLines(5)
 			.setBacktrackDistanceLines(20)
@@ -157,6 +161,8 @@
 			.setForwardFactor(20)
 			.setMaxNumberOfRecoverApplicationsLocal(10)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+		fgSetting.checkAssertionsForSettings();
+		return fgSetting;
 	}
 
 	/**
@@ -166,7 +172,7 @@
 	 * @return Setting that locally searches for a recover branch
 	 */
 	public static FineGrainedSetting createLocalContextSetting(){
-		return new FineGrainedSetting()
+		FineGrainedSetting fgSetting = new FineGrainedSetting()
 			.setTimeLimit(2500)
 			.setAcceptDistanceLines(5)
 			.setBacktrackDistanceLines(0)
@@ -175,6 +181,8 @@
 			.setForwardFactor(0)
 			.setMaxNumberOfRecoverApplicationsLocal(10)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+		fgSetting.checkAssertionsForSettings();
+		return fgSetting;
 	}
 
 	/**
@@ -185,7 +193,7 @@
 	 * @return Setting that searches for a recover branch by modifying the left context
 	 */
 	public static FineGrainedSetting createLeftContextSetting(){
-		return new FineGrainedSetting()
+		FineGrainedSetting fgSetting = new FineGrainedSetting()
 			.setTimeLimit(2500)
 			.setAcceptDistanceLines(5)
 			.setBacktrackDistanceLines(20)
@@ -194,6 +202,8 @@
 			.setForwardFactor(0)
 			.setMaxNumberOfRecoverApplicationsLocal(6)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+		fgSetting.checkAssertionsForSettings();
+		return fgSetting;
 	}
 
 	/**
@@ -204,7 +214,7 @@
 	 * @return Setting that searches for a recover branch by modifying the right context
 	 */
 	public static FineGrainedSetting createRightContextSetting(){
-		return new FineGrainedSetting()
+		FineGrainedSetting fgSetting = new FineGrainedSetting()
 			.setTimeLimit(2500)
 			.setAcceptDistanceLines(5)
 			.setBacktrackDistanceLines(0)
@@ -213,5 +223,19 @@
 			.setForwardFactor(1)
 			.setMaxNumberOfRecoverApplicationsLocal(6)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+		fgSetting.checkAssertionsForSettings();
+		return fgSetting;
 	}
+	
+	private void checkAssertionsForSettings() {
+    	assert(timeLimit > 0);
+    	assert(acceptDistanceLines > 0);
+    	assert(backtrackDistanceLines < backtrackDistanceLinesSingleToken);
+    	assert(backwardFactor >= 0);
+    	assert(forwardFactor >= 0);
+    	assert(maxNumberOfRecoverApplicationsGlobal >= 1);
+    	assert(maxNumberOfRecoverApplicationsLocal >= 1);
+    	assert(maxNumberOfRecoverApplicationsGlobal >= maxNumberOfRecoverApplicationsLocal);
+	}
+
 }

From m.dejonge at tudelft.nl  Sun Nov 13 13:01:47 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sun, 13 Nov 2011 12:01:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23601 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20111113120147.65DD5108C009@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Sun Nov 13 12:01:47 2011
New Revision: 23601
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23601&sc=1

Log:
search heuristic settings: configurable forward line limit

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Sun Nov 13 11:46:11 2011	(r23600)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Sun Nov 13 12:01:47 2011	(r23601)
@@ -115,11 +115,12 @@
 	private boolean recoverFrom(int loopIndex, ArrayList<RecoverNode> unexplored_branches) {
 		int backwardIndexPrev = Math.max(0,lineIndexRecovery - (int)(settings.getBackwardFactor() * (loopIndex - 1)));
 		int backwardIndex = Math.max(0,lineIndexRecovery - (int)(settings.getBackwardFactor() * loopIndex));
-		int forwardLinesMax = (int)(settings.getForwardFactor() * loopIndex);
+		int forwardLinesMax = Math.min(settings.getForwardDistanceLines(), (int)(settings.getForwardFactor() * loopIndex));
 		assert(0 <= backwardIndex);
 		assert(backwardIndex <= lineIndexRecovery);
 		assert(backwardIndex <= backwardIndexPrev);
 		assert(forwardLinesMax >= 0);		
+		assert(forwardLinesMax <= settings.getForwardDistanceLines());		
 		unexplored_branches.addAll(getBackwardRecoverCandidates(backwardIndex, backwardIndexPrev));
 		checkAssertionsUnexploredBranches(unexplored_branches, backwardIndex);
 		resetSGLR(backwardIndex, false);
@@ -174,7 +175,8 @@
 			newCandidates.addAll(collectNewRecoverCandidates(curTokIndex));
 			mySGLR.getRecoverStacks().clear();
 		} while (
-				exploredLinesForward <= fwLineMax
+				   exploredLinesForward <= fwLineMax
+				&& exploredLinesForward <= settings.getForwardDistanceLines()
 				&& getHistory().getTokenIndex() <= exploredRegionEndOffset
 				&& getHistory().getTokenIndex() <= fwTokensSeenMax
 				&& mySGLR.acceptingStack == null

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Sun Nov 13 11:46:11 2011	(r23600)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Sun Nov 13 12:01:47 2011	(r23601)
@@ -4,6 +4,7 @@
 
 	private int acceptDistanceLines; //number of lines that must be parsed error-free before recovery is accepted
 	private int backtrackDistanceLines; //maximum number of (non-empty) lines that is fully backtracked
+	private int forwardDistanceLines; //maximum number of (non-empty) lines that is explored at the right context
 	private int backtrackDistanceLinesSingleToken; //maximum number of (non-empty) lines that is explored for single token recoveries
 	private double backwardFactor; //increase explored left context with x lines at each loop 
 	private double forwardFactor; //increase explored right context with x lines at each loop (for example: 0.5 then extend one line after two loops)
@@ -33,6 +34,14 @@
 		return this;
 	}
 
+	public int getForwardDistanceLines() {
+		return forwardDistanceLines;
+	}
+
+	public FineGrainedSetting setForwardDistanceLines(int forwardDistanceLines) {
+		this.forwardDistanceLines = forwardDistanceLines;
+		return this;
+	}
 	public int getBacktrackDistanceLines() {
 		return backtrackDistanceLines;
 	}
@@ -96,6 +105,7 @@
 		this.setBacktrackDistanceLines(8);
 		this.setBacktrackDistanceLinesSingleToken(80);
 		this.setBackwardFactor(1);
+		this.setForwardDistanceLines(Integer.MAX_VALUE);
 		this.setForwardFactor(0.5);
 		this.setMaxNumberOfRecoverApplicationsLocal(6);
 		this.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
@@ -116,6 +126,7 @@
 			.setBacktrackDistanceLines(8)
 			.setBacktrackDistanceLinesSingleToken(80)
 			.setBackwardFactor(1)
+			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(0.5)
 			.setMaxNumberOfRecoverApplicationsLocal(6)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
@@ -124,6 +135,27 @@
 	}
 
 	/**
+	 * Setting is used for error analysis to find out how well
+	 * a local approach performs, only modifications on a single line are explored. 
+	 * Search heuristic: try all recover-count = 1, 2, 3, ... branches on the failure (or other) line,
+	 * @return Setting that locally searches for a recover branch
+	 */
+	public static FineGrainedSetting createCursorLineSetting(){
+		FineGrainedSetting fgSetting = new FineGrainedSetting()
+			.setTimeLimit(250)
+			.setAcceptDistanceLines(5)
+			.setBacktrackDistanceLines(1)
+			.setBacktrackDistanceLinesSingleToken(0)
+			.setBackwardFactor(1)
+			.setForwardDistanceLines(1)
+			.setForwardFactor(1)
+			.setMaxNumberOfRecoverApplicationsLocal(5)
+			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+		fgSetting.checkAssertionsForSettings();
+		return fgSetting;
+	}
+
+	/**
 	 * Setting is used for error analysis to find out how many files
 	 * can be recovered with a single token insertion/deletion/replacement 
 	 * Search heuristic: try all recover-count = 1 branches in the left context
@@ -136,6 +168,7 @@
 			.setBacktrackDistanceLines(0)
 			.setBacktrackDistanceLinesSingleToken(500)
 			.setBackwardFactor(1)
+			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(0)
 			.setMaxNumberOfRecoverApplicationsLocal(1)
 			.setMaxNumberOfRecoverApplicationsGlobal(1);
@@ -158,6 +191,7 @@
 			.setBacktrackDistanceLines(20)
 			.setBacktrackDistanceLinesSingleToken(0)
 			.setBackwardFactor(20)
+			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(20)
 			.setMaxNumberOfRecoverApplicationsLocal(10)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
@@ -178,6 +212,7 @@
 			.setBacktrackDistanceLines(0)
 			.setBacktrackDistanceLinesSingleToken(0)
 			.setBackwardFactor(0)
+			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(0)
 			.setMaxNumberOfRecoverApplicationsLocal(10)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
@@ -199,6 +234,7 @@
 			.setBacktrackDistanceLines(20)
 			.setBacktrackDistanceLinesSingleToken(80)
 			.setBackwardFactor(1)
+			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(0)
 			.setMaxNumberOfRecoverApplicationsLocal(6)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
@@ -220,6 +256,7 @@
 			.setBacktrackDistanceLines(0)
 			.setBacktrackDistanceLinesSingleToken(0)
 			.setBackwardFactor(0)
+			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(1)
 			.setMaxNumberOfRecoverApplicationsLocal(6)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);

From M.A.Akhter at student.tudelft.nl  Mon Nov 14 10:00:33 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 14 Nov 2011 09:00:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23602 -
	spoofax-imp/branches/spoofaxlang-with-traditional-index
Message-ID: <20111114090033.6FACD2B800F@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Nov 14 09:00:31 2011
New Revision: 23602
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23602&sc=1

Log:
creating a branch with the latest version of spoofaxlang before merging Spoofaxlang with new Index/SymbolTable infrastructure

Added:
   spoofax-imp/branches/spoofaxlang-with-traditional-index/   (props changed)
      - copied from r23597, spoofax-imp/trunk/

From m.dejonge at tudelft.nl  Tue Nov 15 09:14:23 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 15 Nov 2011 08:14:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23603 - in
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr:
	client io
Message-ID: <20111115081423.6F25B7F800D@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Nov 15 08:14:21 2011
New Revision: 23603
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23603&sc=1

Log:
- settings for Integrated recovery
- cursor location optionally used as likely location of the error

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IntegratedRecoverySettings.java   (contents, props changed)
Replaced:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java   (contents, props changed)
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryPerformance.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/io/SGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Mon Nov 14 09:00:31 2011	(r23602)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Tue Nov 15 08:14:21 2011	(r23603)
@@ -34,7 +34,7 @@
     	assert(exploredRegionStartOffset < exploredRegionEndOffset);
     	assert(exploredRegionStartOffset < failureOffset);
 		assert(lineIndexRecovery <= getHistory().getIndexLastLine());
-		assert(getHistory().getLine(lineIndexRecovery).getStackNodes().size() > 0);
+		//assert(getHistory().getLine(lineIndexRecovery).getStackNodes().size() > 0);
 		assert(getTokensSeenAtLine(lineIndexRecovery) <= failureOffset);
 		assert(failureOffset >= getTokensSeenAtLine(lineIndexRecovery));
 	}
@@ -113,15 +113,13 @@
 	}
 
 	private boolean recoverFrom(int loopIndex, ArrayList<RecoverNode> unexplored_branches) {
-		int backwardIndexPrev = Math.max(0,lineIndexRecovery - (int)(settings.getBackwardFactor() * (loopIndex - 1)));
-		int backwardIndex = Math.max(0,lineIndexRecovery - (int)(settings.getBackwardFactor() * loopIndex));
+		int bwLoopIndex = lineIndexRecovery - (int)(settings.getBackwardFactor() * loopIndex);
+		int backwardIndex = Math.max(0, bwLoopIndex);
 		int forwardLinesMax = Math.min(settings.getForwardDistanceLines(), (int)(settings.getForwardFactor() * loopIndex));
-		assert(0 <= backwardIndex);
-		assert(backwardIndex <= lineIndexRecovery);
-		assert(backwardIndex <= backwardIndexPrev);
 		assert(forwardLinesMax >= 0);		
 		assert(forwardLinesMax <= settings.getForwardDistanceLines());		
-		unexplored_branches.addAll(getBackwardRecoverCandidates(backwardIndex, backwardIndexPrev));
+				
+		unexplored_branches.addAll(getBackwardRecoverCandidates(loopIndex));
 		checkAssertionsUnexploredBranches(unexplored_branches, backwardIndex);
 		resetSGLR(backwardIndex, false);
 		ArrayList<RecoverNode> newCandidates = recoverParse(forwardLinesMax, this.exploredRegionEndOffset, unexplored_branches);
@@ -129,17 +127,26 @@
 			if(timelimitExpired()){
 				return false;
 			}			
-			if(continueBacktracking(backwardIndex)){
+			if(continueBacktracking(bwLoopIndex)){
 				if(newCandidates.size() > MAX_NUMBER_OF_RECOVER_BRANCHES)
 					newCandidates = new ArrayList<RecoverNode>(); //too much branches causes performance problems
-				recoverFrom(loopIndex + 1, newCandidates);
+				return recoverFrom(loopIndex + 1, newCandidates);
 			}
-			else if (continueSingleTokenBacktracking(backwardIndex)){
-				recoverFrom(loopIndex + 1, new ArrayList<RecoverNode>());
-			}
-			else{
-				return false;
+			int exploreDepth = 1;
+			do {
+				resetSGLR(backwardIndex, false);
+				newCandidates = recoverParse(forwardLinesMax, this.exploredRegionEndOffset, newCandidates);
+				exploreDepth ++;
+				if(acceptParse())
+					return true;
+			} while(exploreDepth < settings.getMaxNumberOfRecoverApplicationsLocal() && 
+					!timelimitExpired() && 
+					newCandidates.size() < MAX_NUMBER_OF_RECOVER_BRANCHES &&
+					newCandidates.size() > 0);
+			if (continueSingleTokenBacktracking(bwLoopIndex)){
+				return recoverFrom(loopIndex + 1, new ArrayList<RecoverNode>());
 			}
+			return false;
 		}
 		return true;
 	}
@@ -170,18 +177,18 @@
 				exploredLinesForward++;
 			}
 			// System.out.print((char)mySGLR.currentToken);
-			mySGLR.setFineGrainedOnRegion(exploredRegionStartOffset <= curTokIndex);
+			mySGLR.setFinegrainedRecoverMode(exploredRegionStartOffset <= curTokIndex);
 			mySGLR.doParseStep();
 			newCandidates.addAll(collectNewRecoverCandidates(curTokIndex));
 			mySGLR.getRecoverStacks().clear();
 		} while (
-				   exploredLinesForward <= fwLineMax
-				&& exploredLinesForward <= settings.getForwardDistanceLines()
+				   (exploredLinesForward <= fwLineMax || RecoveryConnector.isLayoutCharacter((char)mySGLR.getCurrentToken()))
+				&& (exploredLinesForward <= settings.getForwardDistanceLines() || RecoveryConnector.isLayoutCharacter((char)mySGLR.getCurrentToken()))
 				&& getHistory().getTokenIndex() <= exploredRegionEndOffset
 				&& getHistory().getTokenIndex() <= fwTokensSeenMax
 				&& mySGLR.acceptingStack == null
 				&& mySGLR.getCurrentToken() != SGLR.EOF);
-		mySGLR.setFineGrainedOnRegion(false);
+		mySGLR.setFinegrainedRecoverMode(false);
 		return newCandidates;
 	}
 
@@ -223,9 +230,15 @@
 		return System.currentTimeMillis() - this.recoverStartTime > settings.getTimeLimit();
 	}
 
-	private ArrayList<RecoverNode> getBackwardRecoverCandidates(int bwIndex, int bwIndexPrev) {
+	private ArrayList<RecoverNode> getBackwardRecoverCandidates(int loopIndex) {
+
+		int bwIndexPrev = Math.max(0,lineIndexRecovery - (int)(settings.getBackwardFactor() * (loopIndex - 1)));
+		int bwIndex = Math.max(0, lineIndexRecovery - (int)(settings.getBackwardFactor() * loopIndex));
+
+		assert(0 <= bwIndex);
+		assert(bwIndex <= lineIndexRecovery);
 		assert(bwIndex <= bwIndexPrev);
-		if (bwIndex == bwIndexPrev || preceedsErroneousRegion(bwIndexPrev)){
+		if (loopIndex > 0 && bwIndex == bwIndexPrev || preceedsErroneousRegion(bwIndexPrev)){
 			return new ArrayList<RecoverNode>();
 		}
 		resetSGLR(bwIndex, true);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Mon Nov 14 09:00:31 2011	(r23602)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Tue Nov 15 08:14:21 2011	(r23603)
@@ -107,7 +107,7 @@
 		this.setBackwardFactor(1);
 		this.setForwardDistanceLines(Integer.MAX_VALUE);
 		this.setForwardFactor(0.5);
-		this.setMaxNumberOfRecoverApplicationsLocal(6);
+		this.setMaxNumberOfRecoverApplicationsLocal(5);
 		this.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
 		
 	}
@@ -123,12 +123,12 @@
 		FineGrainedSetting fgSetting = new FineGrainedSetting()
 			.setTimeLimit(1000)
 			.setAcceptDistanceLines(5)
-			.setBacktrackDistanceLines(8)
+			.setBacktrackDistanceLines(10)
 			.setBacktrackDistanceLinesSingleToken(80)
 			.setBackwardFactor(1)
 			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(0.5)
-			.setMaxNumberOfRecoverApplicationsLocal(6)
+			.setMaxNumberOfRecoverApplicationsLocal(5)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
@@ -144,12 +144,12 @@
 		FineGrainedSetting fgSetting = new FineGrainedSetting()
 			.setTimeLimit(250)
 			.setAcceptDistanceLines(5)
-			.setBacktrackDistanceLines(1)
+			.setBacktrackDistanceLines(0)
 			.setBacktrackDistanceLinesSingleToken(0)
-			.setBackwardFactor(1)
-			.setForwardDistanceLines(1)
-			.setForwardFactor(1)
-			.setMaxNumberOfRecoverApplicationsLocal(5)
+			.setBackwardFactor(0)
+			.setForwardDistanceLines(0)
+			.setForwardFactor(0)
+			.setMaxNumberOfRecoverApplicationsLocal(2)
 			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
@@ -267,11 +267,12 @@
 	private void checkAssertionsForSettings() {
     	assert(timeLimit > 0);
     	assert(acceptDistanceLines > 0);
-    	assert(backtrackDistanceLines < backtrackDistanceLinesSingleToken);
+    	assert(backtrackDistanceLines <= backtrackDistanceLinesSingleToken);
     	assert(backwardFactor >= 0);
     	assert(forwardFactor >= 0);
     	assert(maxNumberOfRecoverApplicationsGlobal >= 1);
     	assert(maxNumberOfRecoverApplicationsLocal >= 1);
+    	assert(maxNumberOfRecoverApplicationsLocal <= 10);
     	assert(maxNumberOfRecoverApplicationsGlobal >= maxNumberOfRecoverApplicationsLocal);
 	}
 

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IntegratedRecoverySettings.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IntegratedRecoverySettings.java	Tue Nov 15 08:14:21 2011	(r23603)
@@ -0,0 +1,44 @@
+package org.spoofax.jsglr.client;
+
+public class IntegratedRecoverySettings {
+	private boolean useFineGrained;
+	private boolean useRegionSelection;
+	private boolean useRegionRecovery;
+	private boolean useCursorLocation;
+	
+	public boolean useFineGrained() {
+		return useFineGrained;
+	}
+	public void setUseFineGrained(boolean useFineGrained) {
+		this.useFineGrained = useFineGrained;
+	}
+	public boolean useRegionSelection() {
+		return useRegionSelection;
+	}
+	public void setUseRegionSelection(boolean useRegionSelection) {
+		this.useRegionSelection = useRegionSelection;
+	}
+	public boolean useCursorLocation() {
+		return useCursorLocation;
+	}
+	public void setUseCursorLocation(boolean useCursorLocation) {
+		this.useCursorLocation = useCursorLocation;
+	}
+	public boolean useRegionRecovery() {
+		return useRegionRecovery;
+	}
+	public void setUseRegionRecovery(boolean useRegionRecovery) {
+		this.useRegionRecovery = useRegionRecovery;
+	}
+	
+	private IntegratedRecoverySettings(){
+		useFineGrained = true;
+		useRegionSelection = true;
+		useRegionRecovery = true;
+		useCursorLocation = true;
+	}
+	
+	public static IntegratedRecoverySettings createDefaultSettings(){
+		return new IntegratedRecoverySettings();
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java	Tue Nov 15 08:14:21 2011	(r23603)
@@ -0,0 +1,170 @@
+package org.spoofax.jsglr.client;
+
+public class RecoveryConnector {
+	private SGLR mySGLR;
+	private IntegratedRecoverySettings settings;
+	private RegionRecovery regionSelector;
+	private FineGrainedRecovery fgRegionalRecovery; // used on errorneous region (or on region near failure line)
+	private FineGrainedRecovery fgCursorLineRecovery; // intended for recovery near cursor
+
+	public void setFgRegionalRecovery(FineGrainedRecovery fgRegionalRecovery) {
+		this.fgRegionalRecovery = fgRegionalRecovery;
+	}
+
+	private ParserHistory getHistory() {
+		return mySGLR.getHistory();
+	}
+
+	public RecoveryConnector(SGLR parser){
+		this(parser, IntegratedRecoverySettings.createDefaultSettings(), FineGrainedSetting.createDefaultSetting());
+	}
+	
+	public RecoveryConnector(SGLR parser, IntegratedRecoverySettings settings) {
+		this(parser, settings, FineGrainedSetting.createDefaultSetting());
+	}
+
+	public RecoveryConnector(SGLR parser, IntegratedRecoverySettings settings, FineGrainedSetting fgSettings) {
+		this.mySGLR = parser;
+		this.regionSelector = new RegionRecovery(mySGLR);
+		this.settings = settings;
+		this.fgCursorLineRecovery = new FineGrainedRecovery(mySGLR, FineGrainedSetting.createCursorLineSetting());		
+		this.fgRegionalRecovery = new FineGrainedRecovery(mySGLR, fgSettings);
+	}
+	
+	public void recover() {
+		mySGLR.getPerformanceMeasuring().startRecovery();
+		boolean recoverySucceeded = combinedRecover();
+		mySGLR.getPerformanceMeasuring().endRecovery(recoverySucceeded);
+	}
+
+	private boolean combinedRecover() {
+		int failureOffset = mySGLR.getParserLocation();
+		int failureLineIndex = getHistory().getLineOfTokenPosition(failureOffset - 1);
+		int cursorLineIndex = getHistory().getLineOfTokenPosition(mySGLR.getCursorLocation());
+				
+		if (settings.useFineGrained() && settings.useCursorLocation()) {
+			if(tryFineGrainedOnCursorLine(failureOffset, failureLineIndex, cursorLineIndex)){
+				System.out.println("FG on cursor line succeeded!");
+				return true;
+			}
+		}
+		boolean skipSucceeded = false;
+		if (settings.useRegionSelection() || settings.useRegionRecovery()) {
+			skipSucceeded = trySelectErroneousRegion(failureOffset, failureLineIndex, cursorLineIndex);
+		}
+		if (settings.useFineGrained()) {
+			boolean fgSucceeded = tryFineGrainedRecovery(failureOffset, failureLineIndex, skipSucceeded);
+			if (parseRemainingTokens(true)) {
+				return true;
+			} else if (fgSucceeded) {
+				return combinedRecover();
+			}
+		}
+		if (settings.useRegionRecovery() && skipSucceeded) {
+			parseErrorFragmentAsWhiteSpace();
+			if (parseRemainingTokens(true))
+				return true;
+			else
+				return combinedRecover();
+		}
+		return false;
+	}
+
+	private boolean tryFineGrainedOnCursorLine(int failureOffset, int failureLineIndex, int cursorLineIndex) {
+		if(isLikelyErrorLocation(failureLineIndex, cursorLineIndex)){
+						
+			int startTok = getHistory().getLine(Math.max(0, cursorLineIndex - 1)).getTokensSeen();		
+			int endTok = failureOffset;
+			System.out.println(getHistory().getFragment(startTok, endTok, mySGLR.currentInputStream));
+
+			mySGLR.getPerformanceMeasuring().startFGOnCursor();
+			boolean fgSucceededOnCursor = fgCursorLineRecovery.recover(failureOffset, cursorLineIndex);
+			mySGLR.getPerformanceMeasuring().endFGOnCursor(fgSucceededOnCursor);
+			if (fgSucceededOnCursor && parseRemainingTokens(true)) {
+				return true;
+			}
+		}
+		System.out.println("FG on cursor line failed!");
+		return false;
+	}
+
+	private boolean trySelectErroneousRegion(int failureOffset, int failureLineIndex, int cursorLineIndex) {
+		boolean skipSucceeded;
+		mySGLR.getPerformanceMeasuring().startCG();
+		if(settings.useCursorLocation() && isPossibleErrorLocation(failureLineIndex, cursorLineIndex))
+			skipSucceeded = regionSelector.selectErroneousFragment(failureOffset, failureLineIndex, cursorLineIndex); 
+		else
+			skipSucceeded = regionSelector.selectErroneousFragment(failureOffset, failureLineIndex);
+		mySGLR.getPerformanceMeasuring().endCG(skipSucceeded);
+		return skipSucceeded;
+	}
+
+	private boolean tryFineGrainedRecovery(int failureOffset, int failureLineIndex, boolean skipSucceeded) {
+		mySGLR.getPerformanceMeasuring().startFG();
+		boolean fgSucceeded = false;
+		if (skipSucceeded && settings.useRegionSelection()) {
+			StructureSkipSuggestion erroneousRegion = regionSelector.getErroneousRegion();
+			fgSucceeded = fgRegionalRecovery.recover(
+				failureOffset, 
+				Math.min(erroneousRegion.getIndexHistoryEnd(), failureLineIndex), 
+				erroneousRegion.getStartSkip().getTokensSeen(), 
+				erroneousRegion.getEndSkip().getTokensSeen()
+			);
+		} else {
+			fgSucceeded = fgRegionalRecovery.recover(failureOffset, failureLineIndex);
+		}
+		mySGLR.getPerformanceMeasuring().endFG(fgSucceeded);
+		return fgSucceeded;
+	}
+
+	private boolean isLikelyErrorLocation(int failureLineIndex, int cursorLineIndex) {
+		return 
+			isPossibleErrorLocation(failureLineIndex, cursorLineIndex) && 
+			failureLineIndex - cursorLineIndex <= 10;
+	}
+
+	private boolean isPossibleErrorLocation(int failureLineIndex, int cursorLineIndex) {
+		return mySGLR.isSetCursorLocation() && failureLineIndex >= cursorLineIndex;
+	}
+
+	public boolean parseRemainingTokens(boolean keepHistory) {
+		while ((!getHistory().hasFinishedRecoverTokens())
+				&& mySGLR.activeStacks.size() > 0
+				&& mySGLR.acceptingStack == null) {
+			getHistory().readRecoverToken(mySGLR, keepHistory);
+			mySGLR.doParseStep();
+		}
+		return recoverySucceeded();
+	}
+
+	private boolean recoverySucceeded() {
+		return (mySGLR.activeStacks.size() > 0 || mySGLR.acceptingStack != null);
+	}
+
+	public boolean parseErrorFragmentAsWhiteSpace() {
+		mySGLR.activeStacks.clear();
+		mySGLR.activeStacks.addAll(regionSelector.getStartLineErrorFragment().getStackNodes());
+		getHistory().setTokenIndex(regionSelector.getStartPositionErrorFragment());
+		getHistory().resetRecoveryIndentHandler(regionSelector.getStartLineErrorFragment().getIndentValue());
+		while ((getHistory().getTokenIndex() < regionSelector.getEndPositionErrorFragment())
+				&& mySGLR.activeStacks.size() > 0
+				&& mySGLR.acceptingStack == null) {
+			getHistory().readRecoverToken(mySGLR, false);
+			parseAsLayout();
+		}
+		return recoverySucceeded();
+	}
+
+	private void parseAsLayout() {
+		if (!isLayoutCharacter((char) mySGLR.getCurrentToken()) && mySGLR.getCurrentToken() != SGLR.EOF) {
+			mySGLR.setCurrentToken(' ');
+		}
+		mySGLR.doParseStep();
+	}
+
+	public static boolean isLayoutCharacter(char aChar) {
+		// TODO: Move this to the parse table class; only it truly can know
+		// layout characters
+		return aChar == ' ' || aChar == '\t' || aChar == '\n';
+	}
+}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryPerformance.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryPerformance.java	Mon Nov 14 09:00:31 2011	(r23602)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryPerformance.java	Tue Nov 15 08:14:21 2011	(r23603)
@@ -9,6 +9,8 @@
     private long startCG;
     private ArrayList<Integer> CGTimes;
     private long startFG;
+    private ArrayList<Integer> FGOnCursorTimes;
+    private long startFGOnCursor;
     private ArrayList<Integer> FGTimes;
     private long startBP;
     private ArrayList<Integer> BPTimes;
@@ -17,6 +19,7 @@
     
     private ArrayList<Boolean> CGResults;
     private ArrayList<Boolean> FGResults;
+    private ArrayList<Boolean> FGOnCursorResults;
     private ArrayList<Boolean> BPResults;
     private ArrayList<Boolean> recoveryResults;
     private boolean parseResult;
@@ -24,11 +27,13 @@
     public RecoveryPerformance(){
         CGTimes=new ArrayList<Integer>();
         FGTimes=new ArrayList<Integer>();
+        FGOnCursorTimes=new ArrayList<Integer>();
         BPTimes=new ArrayList<Integer>();
         recoveryTimes=new ArrayList<Integer>();
         
         CGResults=new ArrayList<Boolean>();
         FGResults=new ArrayList<Boolean>();
+        FGOnCursorResults=new ArrayList<Boolean>();
         BPResults=new ArrayList<Boolean>();
         recoveryResults=new ArrayList<Boolean>();
     }
@@ -101,7 +106,17 @@
         FGTimes.add((int)FGTime);
         FGResults.add(succeeded);
     }
-    
+
+	public void startFGOnCursor() {
+        startFGOnCursor = System.currentTimeMillis();
+	}
+
+	public void endFGOnCursor(boolean succeeded) {
+        long FGTime=System.currentTimeMillis()-startFGOnCursor;
+        FGOnCursorTimes.add((int)FGTime);
+        FGOnCursorResults.add(succeeded);
+	}
+
     void startBP(){
         startBP=System.currentTimeMillis();
     }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java	Mon Nov 14 09:00:31 2011	(r23602)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RegionRecovery.java	Tue Nov 15 08:14:21 2011	(r23603)
@@ -74,52 +74,72 @@
         return getHistory().getLinesFromTo(erroneousRegion.getIndexHistoryStart(), getEndPositionErrorFragment());
     }      
 
+    public boolean selectErroneousFragment(int failureOffset, int failureLineIndex){
+    	return selectErroneousFragment(failureOffset, failureLineIndex, -1);
+    }
+
     /**
      * Selects erroneous region based on layout 
      */
-    public boolean selectErroneousFragment() { 
+    public boolean selectErroneousFragment(int failureOffset, int failureLineIndex, int cursorLineIndex) { 
         boolean eofReached=myParser.getCurrentToken()==SGLR.EOF;
         acceptPosition=-1;
         NewStructureSkipper newRegionSelector=new NewStructureSkipper(myParser);
-        errorDetectionLocation = myParser.getParserLocation()-1;
-        int failureIndex=getHistory().getLineOfTokenPosition(errorDetectionLocation);
-        assert(failureIndex >= 0);
-        ArrayList<StructureSkipSuggestion> prevRegions=newRegionSelector.getPreviousSkipSuggestions(failureIndex);
+        errorDetectionLocation = failureOffset - 1;
+        assert(failureLineIndex >= 0);
+                
+        ArrayList<StructureSkipSuggestion> prevRegions=newRegionSelector.getPreviousSkipSuggestions(failureLineIndex);
         //System.out.println("PREVIOUS REGION");        
         if(trySetErroneousRegion(prevRegions)){
             ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
             trySetErroneousRegion(decomposedRegions);
             return true;
         }        
-        ArrayList<StructureSkipSuggestion> currentRegions=newRegionSelector.getCurrentSkipSuggestions(failureIndex);
+        ArrayList<StructureSkipSuggestion> currentRegions=newRegionSelector.getCurrentSkipSuggestions(failureLineIndex);
         //System.out.println("CURRENT REGION");
         if(trySetErroneousRegion(currentRegions)){            
             return true;
         }
+
+        if(0 <= cursorLineIndex && cursorLineIndex < failureLineIndex){
+	        ArrayList<StructureSkipSuggestion> cursorRegions=newRegionSelector.getCurrentSkipSuggestions(cursorLineIndex);
+	        //System.out.println("CURSOR REGION");
+	        if(trySetErroneousRegion(cursorRegions)){
+				//System.out.println("Region Selection on cursor line succeeded!");
+	            return true;
+	        }
+	        //System.out.println("CURSOR PARENT REGION");
+	        ArrayList<StructureSkipSuggestion> cursorParentRegion=newRegionSelector.getParentSkipSuggestions(cursorLineIndex);
+	        if(trySetErroneousRegion(cursorParentRegion)){            
+				//System.out.println("Region Selection on cursor line succeeded!");
+	            return true;
+	        }
+        }
+
         //System.out.println("PRIOR REGIONS");
-        ArrayList<StructureSkipSuggestion> priorRegions=newRegionSelector.getPriorSkipSuggestions(failureIndex);
+        ArrayList<StructureSkipSuggestion> priorRegions=newRegionSelector.getPriorSkipSuggestions(failureLineIndex);
         if(trySetErroneousRegion(priorRegions)){
             ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
             trySetErroneousRegion(decomposedRegions);
             return true;
         }
         //System.out.println("FW-SIB REGIONS");
-        ArrayList<StructureSkipSuggestion> siblingForWardRegions=newRegionSelector.getSibblingForwardSuggestions(failureIndex);
+        ArrayList<StructureSkipSuggestion> siblingForWardRegions=newRegionSelector.getSibblingForwardSuggestions(failureLineIndex);
         if(trySetErroneousRegion(siblingForWardRegions)){            
             return true;
         }
         //System.out.println("BW-SIB REGIONS");
-        ArrayList<StructureSkipSuggestion> siblingBackWardRegions=newRegionSelector.getSibblingBackwardSuggestions(failureIndex);
+        ArrayList<StructureSkipSuggestion> siblingBackWardRegions=newRegionSelector.getSibblingBackwardSuggestions(failureLineIndex);
         if(trySetErroneousRegion(siblingBackWardRegions)){            
             return true;
         }
         //System.out.println("SURROUNDING-SIB REGIONS");        
-        ArrayList<StructureSkipSuggestion> siblingSurroundingRegions=newRegionSelector.getSibblingSurroundingSuggestions(failureIndex);
+        ArrayList<StructureSkipSuggestion> siblingSurroundingRegions=newRegionSelector.getSibblingSurroundingSuggestions(failureLineIndex);
         if(trySetErroneousRegion(siblingSurroundingRegions)){            
             return true;
         }
         //System.out.println("PARENT REGION");
-        ArrayList<StructureSkipSuggestion> parentRegion=newRegionSelector.getParentSkipSuggestions(failureIndex);
+        ArrayList<StructureSkipSuggestion> parentRegion=newRegionSelector.getParentSkipSuggestions(failureLineIndex);
         if(trySetErroneousRegion(parentRegion)){            
             return true;
         }
@@ -128,7 +148,7 @@
         //if(trySetErroneousRegion(parentRegion)){            
           //  return true;
         //}
-        erroneousRegion=newRegionSelector.getErroneousPrefix(failureIndex);
+        erroneousRegion=newRegionSelector.getErroneousPrefix(failureLineIndex);
         ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
         boolean findSmallerPart=trySetErroneousRegion(decomposedRegions);
         if(!findSmallerPart){
@@ -145,8 +165,8 @@
             }
             
             int indexAccept;
-            if(getHistory().getIndexLastLine()>=failureIndex+NR_OF_LINES_TILL_SUCCESS)
-                indexAccept=failureIndex+NR_OF_LINES_TILL_SUCCESS;
+            if(getHistory().getIndexLastLine()>=failureLineIndex+NR_OF_LINES_TILL_SUCCESS)
+                indexAccept=failureLineIndex+NR_OF_LINES_TILL_SUCCESS;
             else
                 indexAccept=getHistory().getIndexLastLine();            
             acceptPosition=getHistory().getLine(indexAccept).getTokensSeen();

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Mon Nov 14 09:00:31 2011	(r23602)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Nov 15 08:14:21 2011	(r23603)
@@ -98,6 +98,18 @@
 	private ITreeBuilder treeBuilder;
 
 	protected boolean useIntegratedRecovery;
+
+	public void setUseStructureRecovery(boolean useRecovery) {
+		this.useIntegratedRecovery = useRecovery;
+		this.recoverIntegrator = new RecoveryConnector(this);
+	}
+
+	public void setUseStructureRecovery(boolean useRecovery, IntegratedRecoverySettings settings, FineGrainedSetting fgSettings) {
+		this.useIntegratedRecovery = useRecovery;
+		this.recoverIntegrator = new RecoveryConnector(this, settings, fgSettings);
+	}
+
+	private boolean isCompletionMode;
 	
 	public ParserHistory getHistory() {
 		return history;
@@ -107,11 +119,17 @@
 		return this.getHistory().getTokenIndex(); //should also work in recover mode
 	}
 
-	private boolean fineGrainedOnRegion;
+	private boolean isFineGrainedMode;
 
 	private int cursorLocation;
 
-	private boolean isCompletionMode;
+	public int getCursorLocation() {
+		return cursorLocation;
+	}
+	
+	public boolean isSetCursorLocation() {
+		return 0 < cursorLocation && cursorLocation != Integer.MAX_VALUE;
+	}
 	
 	private void setCompletionParse(boolean isCompletionMode, int cursorLocation){
 		this.isCompletionMode = isCompletionMode;
@@ -155,7 +173,6 @@
 		assert parseTable != null;
 		// Init with a new factory for both serialized or BAF instances.
 		this.parseTable = parseTable;
-
 		activeStacks = new ArrayDeque<Frame>();
 		forActor = new ArrayDeque<Frame>();
 		forActorDelayed = new ArrayDeque<Frame>();
@@ -164,44 +181,15 @@
 		useIntegratedRecovery = false;
 		recoverIntegrator = null;
 		history = new ParserHistory();
+    	setCompletionParse(false, Integer.MAX_VALUE);
 		setTreeBuilder(treeBuilder);
 	}
-
-	public void setUseStructureRecovery(boolean useRecovery, IRecoveryParser parser) {
-		useIntegratedRecovery = useRecovery;
-		recoverIntegrator = new RecoveryConnector(this, parser);
-	}
-
-	/**
-	 * Enables error recovery based on region recovery and, if available, recovery rules.
-	 * Does not enable bridge parsing.
-	 *
-	 * @see ParseTable#hasRecovers()   Determines if the parse table supports recovery rules
-	 */
-	public final void setUseStructureRecovery(boolean useRecovery) {
-		setUseStructureRecovery(useRecovery, null);
-	}
 	
-    protected void setFineGrainedOnRegion(boolean fineGrainedMode) {
-        fineGrainedOnRegion = fineGrainedMode;
+    protected void setFinegrainedRecoverMode(boolean fineGrainedMode) {
+        this.isFineGrainedMode = fineGrainedMode;
         recoverStacks = new ArrayDeque<Frame>();
     }
 
-    @Deprecated
-    protected void setUseFineGrained(boolean useFG) {
-        recoverIntegrator.setUseFineGrained(useFG);
-    }
-
-    // FIXME: we have way to many of these accessors; does this have to be public?
-    //        if not for normal use, it should at least be 'internalSet....'
-    @Deprecated
-    public void setCombinedRecovery(boolean useBP, boolean useFG,
-            boolean useOnlyFG) {
-        recoverIntegrator.setOnlyFineGrained(useOnlyFG);
-        recoverIntegrator.setUseBridgeParser(useBP);
-        recoverIntegrator.setUseFineGrained(useFG);
-    }
-
     public RecoveryPerformance getPerformanceMeasuring() {
         return performanceMeasuring;
     }
@@ -622,7 +610,7 @@
 
 	private boolean recoverModeOk(Frame st, Production prod) {
 		if(!prod.isCompletionProduction()){
-			return !prod.isRecoverProduction() || fineGrainedOnRegion;
+			return !prod.isRecoverProduction() || isFineGrainedMode;
 		}
 		return inCompletionMode(prod);
 	}
@@ -672,7 +660,6 @@
 	private boolean isReductionOverCursorLocation(final Path path) {
 		return getParserLocation() - path.getLength() < cursorLocation;
 	}
-
 	
 	private void reducer(Frame st0, State s, Production prod, AbstractParseNode[] kids, Path path) {
 		assert(!prod.isRecoverProduction());
@@ -783,7 +770,7 @@
 	 */
 	private void addNewRecoverStack(Frame st0, State s, Production prod, int length,
 			int numberOfRecoveries, AbstractParseNode t) {
-		if (!(fineGrainedOnRegion && !prod.isRejectProduction())) {
+		if (!(isFineGrainedMode && !prod.isRejectProduction())) {
 			return;
 		}
 		final Frame st1 = newStack(s);
@@ -1294,4 +1281,5 @@
 		assert(currentToken >= 0);
 		return currentToken;
 	}
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/io/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/io/SGLR.java	Mon Nov 14 09:00:31 2011	(r23602)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/io/SGLR.java	Tue Nov 15 08:14:21 2011	(r23603)
@@ -123,5 +123,4 @@
 		String input = FileTools.loadFileAsString(in);
 		return parse(input, filename, startSymbol);
 	}
-
 }

From m.dejonge at tudelft.nl  Tue Nov 15 11:39:46 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 15 Nov 2011 10:39:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23604 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20111115103946.BCCD87F8068@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Nov 15 10:39:44 2011
New Revision: 23604
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23604&sc=1

Log:
recoverCount: used to cut branches if they exceed a maximum
recoverWeight: used for disambiguations (prefers insertions over deletions)

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IntegratedRecoverySettings.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Link.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Path.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Tue Nov 15 08:14:21 2011	(r23603)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Tue Nov 15 10:39:44 2011	(r23604)
@@ -109,6 +109,7 @@
     	this.lineIndexRecovery = recoverIndex; 
     	this.recoverStartTime = System.currentTimeMillis();
     	checkAssertionsForErrorProperties();
+    	mySGLR.setFineGrainedRecoverMax(settings.getMaxNumberOfRecoverApplicationsLocal());
     	return recoverFrom(0, new ArrayList<RecoverNode>());
 	}
 
@@ -169,6 +170,7 @@
 		ArrayList<RecoverNode> newCandidates = new ArrayList<RecoverNode>();
 		int curTokIndex;
 		int exploredLinesForward = 0;
+		mySGLR.setFineGrainedStartLocation(getHistory().getTokenIndex());
 		do {
 			curTokIndex = getHistory().getTokenIndex();
 			addCurrentCandidates(candidates, curTokIndex);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Tue Nov 15 08:14:21 2011	(r23603)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Tue Nov 15 10:39:44 2011	(r23604)
@@ -9,7 +9,6 @@
 	private double backwardFactor; //increase explored left context with x lines at each loop 
 	private double forwardFactor; //increase explored right context with x lines at each loop (for example: 0.5 then extend one line after two loops)
 	private int maxNumberOfRecoverApplicationsLocal; //branches with more then x recoveries after backtrack offset are cut off in FG mode
-	private int maxNumberOfRecoverApplicationsGlobal; //branches with more then x recoveries are cut off (IS USED FOR ANALYSIS)
 
 	/*
 	 * Settings that control the heuristics applied to find a recover branch
@@ -89,16 +88,6 @@
 		return this;
 	}
 
-	public int getMaxNumberOfRecoverApplicationsGlobal() {
-		return maxNumberOfRecoverApplicationsGlobal;
-	}
-
-	public FineGrainedSetting setMaxNumberOfRecoverApplicationsGlobal(
-			int maxNumberOfRecoverApplicationsGlobal) {
-		this.maxNumberOfRecoverApplicationsGlobal = maxNumberOfRecoverApplicationsGlobal;
-		return this;
-	}
-
 	private FineGrainedSetting() {
 		this.setTimeLimit(1000);
 		this.setAcceptDistanceLines(5);
@@ -107,9 +96,7 @@
 		this.setBackwardFactor(1);
 		this.setForwardDistanceLines(Integer.MAX_VALUE);
 		this.setForwardFactor(0.5);
-		this.setMaxNumberOfRecoverApplicationsLocal(5);
-		this.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
-		
+		this.setMaxNumberOfRecoverApplicationsLocal(5);		
 	}
 	
 	/**
@@ -128,8 +115,7 @@
 			.setBackwardFactor(1)
 			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(0.5)
-			.setMaxNumberOfRecoverApplicationsLocal(5)
-			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+			.setMaxNumberOfRecoverApplicationsLocal(5);		
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
 	}
@@ -144,13 +130,12 @@
 		FineGrainedSetting fgSetting = new FineGrainedSetting()
 			.setTimeLimit(250)
 			.setAcceptDistanceLines(5)
-			.setBacktrackDistanceLines(0)
-			.setBacktrackDistanceLinesSingleToken(0)
-			.setBackwardFactor(0)
-			.setForwardDistanceLines(0)
-			.setForwardFactor(0)
-			.setMaxNumberOfRecoverApplicationsLocal(2)
-			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+			.setBacktrackDistanceLines(1)
+			.setBacktrackDistanceLinesSingleToken(1)
+			.setBackwardFactor(1)
+			.setForwardDistanceLines(1)
+			.setForwardFactor(1)
+			.setMaxNumberOfRecoverApplicationsLocal(2);
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
 	}
@@ -170,8 +155,7 @@
 			.setBackwardFactor(1)
 			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(0)
-			.setMaxNumberOfRecoverApplicationsLocal(1)
-			.setMaxNumberOfRecoverApplicationsGlobal(1);
+			.setMaxNumberOfRecoverApplicationsLocal(1);
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
 	}
@@ -193,8 +177,7 @@
 			.setBackwardFactor(20)
 			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(20)
-			.setMaxNumberOfRecoverApplicationsLocal(10)
-			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+			.setMaxNumberOfRecoverApplicationsLocal(10);
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
 	}
@@ -214,8 +197,7 @@
 			.setBackwardFactor(0)
 			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(0)
-			.setMaxNumberOfRecoverApplicationsLocal(10)
-			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+			.setMaxNumberOfRecoverApplicationsLocal(10);
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
 	}
@@ -236,8 +218,7 @@
 			.setBackwardFactor(1)
 			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(0)
-			.setMaxNumberOfRecoverApplicationsLocal(6)
-			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+			.setMaxNumberOfRecoverApplicationsLocal(6);
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
 	}
@@ -258,8 +239,7 @@
 			.setBackwardFactor(0)
 			.setForwardDistanceLines(Integer.MAX_VALUE)
 			.setForwardFactor(1)
-			.setMaxNumberOfRecoverApplicationsLocal(6)
-			.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);
+			.setMaxNumberOfRecoverApplicationsLocal(6);
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
 	}
@@ -270,10 +250,7 @@
     	assert(backtrackDistanceLines <= backtrackDistanceLinesSingleToken);
     	assert(backwardFactor >= 0);
     	assert(forwardFactor >= 0);
-    	assert(maxNumberOfRecoverApplicationsGlobal >= 1);
     	assert(maxNumberOfRecoverApplicationsLocal >= 1);
     	assert(maxNumberOfRecoverApplicationsLocal <= 10);
-    	assert(maxNumberOfRecoverApplicationsGlobal >= maxNumberOfRecoverApplicationsLocal);
 	}
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Tue Nov 15 08:14:21 2011	(r23603)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Frame.java	Tue Nov 15 10:39:44 2011	(r23604)
@@ -295,20 +295,20 @@
         }
     }
     
-    //mj debug info function
+    /*mj debug info function
     public int minAvoidValue()
     {
         int result = 0;
         for (int i = 0; i < stepsCount; i++) {
             if(i==0){
-                result = steps[i].recoverCount;
-            result = Math.min(result, steps[i].recoverCount);
+                result = steps[i].recoverWeight;
+            result = Math.min(result, steps[i].recoverWeight);
             }            
         }
         return result;
     }
     
-  //mj debug info function
+    //mj debug info function
     public List<String> getStackPaths(String frontEnd, boolean avoidFree)
     {
         String front = this.state.stateNumber + frontEnd;
@@ -320,11 +320,11 @@
         for (int i = 0; i < stepsCount; i++) {
             Link ln = steps[i];
             List<String> childColl;
-            if(ln.recoverCount ==0 || (avoidFree==false)) {
-                if(ln.recoverCount ==0)
+            if(ln.recoverWeight ==0 || (avoidFree==false)) {
+                if(ln.recoverWeight ==0)
                     childColl= ln.parent.getStackPaths(" - "+front, avoidFree); 
                 else {
-                    String frnt = "-$"+ ln.recoverCount +"$-" + front;
+                    String frnt = "-$"+ ln.recoverWeight +"$-" + front;
                     childColl=ln.parent.getStackPaths(frnt, avoidFree);
                 }
                 stackStrings.addAll(childColl);
@@ -337,5 +337,5 @@
     public String[] getStackRepresentation(boolean avoidFree){
         List<String> stackStrings=this.getStackPaths("", avoidFree);
         return stackStrings.toArray(new String[stackStrings.size()]);
-    }      
+    }*/      
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IntegratedRecoverySettings.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IntegratedRecoverySettings.java	Tue Nov 15 08:14:21 2011	(r23603)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IntegratedRecoverySettings.java	Tue Nov 15 10:39:44 2011	(r23604)
@@ -5,6 +5,7 @@
 	private boolean useRegionSelection;
 	private boolean useRegionRecovery;
 	private boolean useCursorLocation;
+	private int maxNumberOfRecoverApplicationsGlobal; //branches with more then x recoveries are cut off (IS USED FOR ANALYSIS)
 	
 	public boolean useFineGrained() {
 		return useFineGrained;
@@ -31,11 +32,22 @@
 		this.useRegionRecovery = useRegionRecovery;
 	}
 	
+	public int getMaxNumberOfRecoverApplicationsGlobal() {
+		return maxNumberOfRecoverApplicationsGlobal;
+	}
+
+	public void setMaxNumberOfRecoverApplicationsGlobal(
+			int maxNumberOfRecoverApplicationsGlobal) {
+		this.maxNumberOfRecoverApplicationsGlobal = maxNumberOfRecoverApplicationsGlobal;
+	}
+
+	
 	private IntegratedRecoverySettings(){
 		useFineGrained = true;
 		useRegionSelection = true;
 		useRegionRecovery = true;
 		useCursorLocation = true;
+		this.setMaxNumberOfRecoverApplicationsGlobal(Integer.MAX_VALUE);		
 	}
 	
 	public static IntegratedRecoverySettings createDefaultSettings(){

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Link.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Link.java	Tue Nov 15 08:14:21 2011	(r23603)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Link.java	Tue Nov 15 10:39:44 2011	(r23604)
@@ -23,14 +23,17 @@
     
     public int length; //mj: private final (see sglr.reducer: replace link by link with less avoids)
     
-    public int recoverCount;
+    public int recoverWeight; //Weighted count used for disambiguation: Deletions are more expensive then Insertions
+
+    public int recoverCount; //number of recover actions (used for cutting branches and error analysis)
 
     public Link(Frame destination, AbstractParseNode t, int length) {
         this.parent = destination;
         label = t;
         rejected = false;
         this.length = length;
-        recoverCount =0;
+        recoverWeight =0;
+        recoverCount = 0;
         linksCreated +=1;
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Path.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Path.java	Tue Nov 15 08:14:21 2011	(r23603)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Path.java	Tue Nov 15 10:39:44 2011	(r23604)
@@ -16,25 +16,30 @@
 	private int parentCount;
 	private Link link;
 
-	public int getRecoverCount()
+	public int getRecoverWeight()
 	{
 		int result = 0;
 		if(link != null) {
-			result += link.recoverCount;           
+			result += link.recoverWeight;           
 		}
 		if(parent != null) {
-			result += parent.getRecoverCount();
+			result += parent.getRecoverWeight();
 		}
 		return result;        
 	}
 
-	public int getRecoverCount(int maxCharLength)
+	public int getRecoverCount()
 	{
-		if(parent == null || this.length <= maxCharLength)
-			return getRecoverCount();
-		return parent.getRecoverCount(maxCharLength);
+		int result = 0;
+		if(link != null) {
+			result += link.recoverCount;           
+		}
+		if(parent != null) {
+			result += parent.getRecoverCount();
+		}
+		return result;        
 	}
-
+	
 	public Path reuse(Path parent, Link link, Frame frame, int length, int parentCount) {
 		this.parent = parent;
 		this.link = link;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java	Tue Nov 15 08:14:21 2011	(r23603)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java	Tue Nov 15 10:39:44 2011	(r23604)
@@ -23,6 +23,10 @@
 		this(parser, settings, FineGrainedSetting.createDefaultSetting());
 	}
 
+	public int getMaxNumberOfRecoverApplicationsGlobal(){
+		return this.settings.getMaxNumberOfRecoverApplicationsGlobal();
+	}
+	
 	public RecoveryConnector(SGLR parser, IntegratedRecoverySettings settings, FineGrainedSetting fgSettings) {
 		this.mySGLR = parser;
 		this.regionSelector = new RegionRecovery(mySGLR);
@@ -44,7 +48,7 @@
 				
 		if (settings.useFineGrained() && settings.useCursorLocation()) {
 			if(tryFineGrainedOnCursorLine(failureOffset, failureLineIndex, cursorLineIndex)){
-				System.out.println("FG on cursor line succeeded!");
+				//System.out.println("FG on cursor line succeeded!");
 				return true;
 			}
 		}
@@ -72,11 +76,12 @@
 
 	private boolean tryFineGrainedOnCursorLine(int failureOffset, int failureLineIndex, int cursorLineIndex) {
 		if(isLikelyErrorLocation(failureLineIndex, cursorLineIndex)){
-						
+			/*			
 			int startTok = getHistory().getLine(Math.max(0, cursorLineIndex - 1)).getTokensSeen();		
 			int endTok = failureOffset;
 			System.out.println(getHistory().getFragment(startTok, endTok, mySGLR.currentInputStream));
-
+			*/
+			
 			mySGLR.getPerformanceMeasuring().startFGOnCursor();
 			boolean fgSucceededOnCursor = fgCursorLineRecovery.recover(failureOffset, cursorLineIndex);
 			mySGLR.getPerformanceMeasuring().endFGOnCursor(fgSucceededOnCursor);
@@ -84,7 +89,7 @@
 				return true;
 			}
 		}
-		System.out.println("FG on cursor line failed!");
+		//System.out.println("FG on cursor line failed!");
 		return false;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Nov 15 08:14:21 2011	(r23603)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Nov 15 10:39:44 2011	(r23604)
@@ -120,6 +120,10 @@
 	}
 
 	private boolean isFineGrainedMode;
+	
+	private int fineGrainedStartLocation;
+	
+	private int fineGrainedRecoverMax;
 
 	private int cursorLocation;
 
@@ -189,6 +193,14 @@
         this.isFineGrainedMode = fineGrainedMode;
         recoverStacks = new ArrayDeque<Frame>();
     }
+    
+	public void setFineGrainedStartLocation(int fineGrainedStartLocation) {
+		this.fineGrainedStartLocation = fineGrainedStartLocation;
+	}
+
+	public void setFineGrainedRecoverMax(int fineGrainedRecoverMax) {
+		this.fineGrainedRecoverMax = fineGrainedRecoverMax;
+	}
 
     public RecoveryPerformance getPerformanceMeasuring() {
         return performanceMeasuring;
@@ -327,7 +339,8 @@
 		}
 
 		logParseResult(s);
-		Tools.debug("avoids: ", s.recoverCount);
+		//System.out.println("recoveries: " + s.recoverCount);
+		Tools.debug("recoveries: ", s.recoverCount);
 		//Tools.debug(s.label.toParseTree(parseTable));
 
 		if (getTreeBuilder() instanceof NullTreeBuilder) {
@@ -644,10 +657,12 @@
 			final State next = parseTable.go(st0.state, prod.label);
 			logReductionPath(prod, path, st0, next);
 			if(!prod.isCompletionProduction() || isReductionOverCursorLocation(path)){
-				if(!prod.isRecoverProduction())
-					reducer(st0, next, prod, kids, path);
-				else
-					reducerRecoverProduction(st0, next, prod, kids, path);
+				if(checkMaxRecoverCount(prod, path)){
+					if(!prod.isRecoverProduction())
+						reducer(st0, next, prod, kids, path);
+					else
+						reducerRecoverProduction(st0, next, prod, kids, path);
+				}
 			}
 		}
 
@@ -657,6 +672,20 @@
 		}
 	}
 
+	private boolean checkMaxRecoverCount(Production prod, final Path path) {
+		return checkRecoverCountLocal(prod, path) && checkRecoverCountGlobal(prod, path);
+	}
+
+	private boolean checkRecoverCountLocal(Production prod, final Path path) {
+		return !isFineGrainedMode || 
+			calcRecoverCount(prod, path) <= fineGrainedRecoverMax || 
+			getHistory().getTokenIndex() - path.getLength() < fineGrainedStartLocation; //large reduction
+	}
+
+	private boolean checkRecoverCountGlobal(Production prod, final Path path) {
+		return calcRecoverCount(prod, path) <= this.recoverIntegrator.getMaxNumberOfRecoverApplicationsGlobal();
+	}
+
 	private boolean isReductionOverCursorLocation(final Path path) {
 		return getParserLocation() - path.getLength() < cursorLocation;
 	}
@@ -668,12 +697,13 @@
 
 		final int length = path.getLength();
 		final int numberOfRecoveries = calcRecoverCount(prod, path);
+		final int recoverWeight = calcRecoverWeight(prod, path);
 		final AbstractParseNode t = prod.apply(kids);
 		final Frame st1 = findStack(activeStacks, s);
 
 		if (st1 == null) {
 			// Found no existing stack with for state s; make new stack
-			addNewStack(st0, s, prod, length, numberOfRecoveries, t);
+			addNewStack(st0, s, prod, length, numberOfRecoveries, recoverWeight, t);
 		} else {
 			/* A stack with state s exists; check for ambiguities */
 			Link nl = st1.findDirectLink(st0);
@@ -683,17 +713,19 @@
 				if (prod.isRejectProduction()) {
 					nl.reject();
 				} 
-				if(numberOfRecoveries == 0 && nl.recoverCount == 0 || nl.isRejected()) {
+				if(recoverWeight == 0 && nl.recoverWeight == 0 || nl.isRejected()) {
 					createAmbNode(t, nl);
-				} else if (numberOfRecoveries < nl.recoverCount) {
+				} else if (recoverWeight < nl.recoverWeight) {
 					nl.label = t;
 					nl.recoverCount = numberOfRecoveries;
+					nl.recoverWeight = recoverWeight;
 					actorOnActiveStacksOverNewLink(nl);
-				} else if (numberOfRecoveries == nl.recoverCount) {
+				} else if (recoverWeight == nl.recoverWeight) {
 					nl.label = t;
 				}
 			} else {
 				nl = st1.addLink(st0, t, length);
+				nl.recoverWeight = recoverWeight;
 				nl.recoverCount = numberOfRecoveries;
 				if (prod.isRejectProduction()) {
 					nl.reject();
@@ -713,6 +745,7 @@
 		assert(prod.isRecoverProduction());
 		final int length = path.getLength();
 		final int numberOfRecoveries = calcRecoverCount(prod, path);
+		final int recoverWeight = calcRecoverWeight(prod, path);
 		final AbstractParseNode t = prod.apply(kids);
 		final Frame stActive = findStack(activeStacks, s);
 		if(stActive!=null){
@@ -724,14 +757,15 @@
 		final Frame stRecover = findStack(recoverStacks, s);
 		if(stRecover!=null){
 			Link nlRecover = stRecover.findDirectLink(st0);
-			if(nlRecover!=null){
+			if(nlRecover != null){
 				return; //TODO: ambiguity
 			}
 			nlRecover = stRecover.addLink(st0, t, length);
 			nlRecover.recoverCount = numberOfRecoveries;
+			nlRecover.recoverWeight = recoverWeight;
 			return;
 		}
-		addNewRecoverStack(st0, s, prod, length, numberOfRecoveries, t);
+		addNewRecoverStack(st0, s, prod, length, numberOfRecoveries, recoverWeight, t);
 	}
 
 	private void createAmbNode(AbstractParseNode t, Link nl) {
@@ -743,12 +777,13 @@
 	 * Found no existing stack with for state s; make new stack
 	 */
 	private void addNewStack(Frame st0, State s, Production prod, int length,
-			int numberOfRecoveries, AbstractParseNode t) {
+			int numberOfRecoveries, int recoverWeight, AbstractParseNode t) {
 
 		final Frame st1 = newStack(s);
 		final Link nl = st1.addLink(st0, t, length);
 
 		nl.recoverCount = numberOfRecoveries;
+		nl.recoverWeight = recoverWeight;
 		addStack(st1);
 		forActorDelayed.addFirst(st1);
 
@@ -769,13 +804,14 @@
 	 *  Found no existing stack with for state s; make new stack
 	 */
 	private void addNewRecoverStack(Frame st0, State s, Production prod, int length,
-			int numberOfRecoveries, AbstractParseNode t) {
+			int numberOfRecoveries, int recoverWeight, AbstractParseNode t) {
 		if (!(isFineGrainedMode && !prod.isRejectProduction())) {
 			return;
 		}
 		final Frame st1 = newStack(s);
 		final Link nl = st1.addLink(st0, t, length);
 		nl.recoverCount = numberOfRecoveries;
+		nl.recoverWeight = recoverWeight;
 		recoverStacks.addFirst(st1);
 	}
 
@@ -820,6 +856,14 @@
 		int result = path.getRecoverCount();
 		if (prod.isRecoverProduction() || prod.isCompletionProduction()){
 			result += 1;
+		}
+		return result;
+	}
+
+	private int calcRecoverWeight(Production prod, Path path) {
+		int result = path.getRecoverWeight();
+		if (prod.isRecoverProduction() || prod.isCompletionProduction()){
+			result += 1;
 			if (path.getLength() > 0 && !prod.isCompletionProduction())
 				result += 1; //Hack: insertion rules (length 0) should be preferred above water rules.
 		}

From m.dejonge at tudelft.nl  Tue Nov 15 18:15:51 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 15 Nov 2011 17:15:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23605 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20111115171551.84263108C045@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Nov 15 17:15:51 2011
New Revision: 23605
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23605&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Nov 15 10:39:44 2011	(r23604)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Nov 15 17:15:51 2011	(r23605)
@@ -194,11 +194,11 @@
         recoverStacks = new ArrayDeque<Frame>();
     }
     
-	public void setFineGrainedStartLocation(int fineGrainedStartLocation) {
+    protected void setFineGrainedStartLocation(int fineGrainedStartLocation) {
 		this.fineGrainedStartLocation = fineGrainedStartLocation;
 	}
 
-	public void setFineGrainedRecoverMax(int fineGrainedRecoverMax) {
+    protected void setFineGrainedRecoverMax(int fineGrainedRecoverMax) {
 		this.fineGrainedRecoverMax = fineGrainedRecoverMax;
 	}
 

From m.dejonge at tudelft.nl  Wed Nov 16 10:34:59 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 16 Nov 2011 09:34:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23606 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20111116093459.90382108C017@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Nov 16 09:34:59 2011
New Revision: 23606
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23606&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryPerformance.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Tue Nov 15 17:15:51 2011	(r23605)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedRecovery.java	Wed Nov 16 09:34:59 2011	(r23606)
@@ -200,6 +200,7 @@
             	Frame st =mySGLR.findStack(mySGLR.activeStacks, recoverNode.recoverStack.state);
                 if(st != null) {
                 	for (Link ln : recoverNode.recoverStack.getAllLinks()) {
+                		assert(ln.recoverCount > 0 && ln.recoverWeight > 0);
                 		st.addLink(ln);
 					}                	
                 }
@@ -211,6 +212,7 @@
 
 	private void resetSGLR(int btIndex, boolean keepStacks) {
     	mySGLR.activeStacks.clear();
+    	mySGLR.acceptingStack = null;
 		if(keepStacks){
 	        mySGLR.activeStacks.addAll(getHistory().getLine(btIndex).getStackNodes());
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Tue Nov 15 17:15:51 2011	(r23605)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedSetting.java	Wed Nov 16 09:34:59 2011	(r23606)
@@ -94,7 +94,7 @@
 		this.setBacktrackDistanceLines(8);
 		this.setBacktrackDistanceLinesSingleToken(80);
 		this.setBackwardFactor(1);
-		this.setForwardDistanceLines(Integer.MAX_VALUE);
+		this.setForwardDistanceLines(8);
 		this.setForwardFactor(0.5);
 		this.setMaxNumberOfRecoverApplicationsLocal(5);		
 	}
@@ -111,10 +111,10 @@
 			.setTimeLimit(1000)
 			.setAcceptDistanceLines(5)
 			.setBacktrackDistanceLines(10)
-			.setBacktrackDistanceLinesSingleToken(80)
+			.setBacktrackDistanceLinesSingleToken(15)
 			.setBackwardFactor(1)
-			.setForwardDistanceLines(Integer.MAX_VALUE)
-			.setForwardFactor(0.5)
+			.setForwardDistanceLines(5)
+			.setForwardFactor(0.4)
 			.setMaxNumberOfRecoverApplicationsLocal(5);		
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
@@ -148,12 +148,12 @@
 	 */
 	public static FineGrainedSetting createSingleTokenSetting(){
 		FineGrainedSetting fgSetting = new FineGrainedSetting()
-			.setTimeLimit(2500)
-			.setAcceptDistanceLines(15)
+			.setTimeLimit(2000)
+			.setAcceptDistanceLines(5)
 			.setBacktrackDistanceLines(0)
-			.setBacktrackDistanceLinesSingleToken(500)
-			.setBackwardFactor(1)
-			.setForwardDistanceLines(Integer.MAX_VALUE)
+			.setBacktrackDistanceLinesSingleToken(25)
+			.setBackwardFactor(2)
+			.setForwardDistanceLines(0)
 			.setForwardFactor(0)
 			.setMaxNumberOfRecoverApplicationsLocal(1);
 		fgSetting.checkAssertionsForSettings();
@@ -170,14 +170,14 @@
 	 */
 	public static FineGrainedSetting createMultipleTokensSetting(){
 		FineGrainedSetting fgSetting = new FineGrainedSetting()
-			.setTimeLimit(4000)
+			.setTimeLimit(2000)
 			.setAcceptDistanceLines(5)
 			.setBacktrackDistanceLines(20)
-			.setBacktrackDistanceLinesSingleToken(0)
-			.setBackwardFactor(20)
-			.setForwardDistanceLines(Integer.MAX_VALUE)
-			.setForwardFactor(20)
-			.setMaxNumberOfRecoverApplicationsLocal(10);
+			.setBacktrackDistanceLinesSingleToken(20)
+			.setBackwardFactor(4)
+			.setForwardDistanceLines(20)
+			.setForwardFactor(4)
+			.setMaxNumberOfRecoverApplicationsLocal(8);
 		fgSetting.checkAssertionsForSettings();
 		return fgSetting;
 	}
@@ -195,7 +195,7 @@
 			.setBacktrackDistanceLines(0)
 			.setBacktrackDistanceLinesSingleToken(0)
 			.setBackwardFactor(0)
-			.setForwardDistanceLines(Integer.MAX_VALUE)
+			.setForwardDistanceLines(0)
 			.setForwardFactor(0)
 			.setMaxNumberOfRecoverApplicationsLocal(10);
 		fgSetting.checkAssertionsForSettings();
@@ -216,7 +216,7 @@
 			.setBacktrackDistanceLines(20)
 			.setBacktrackDistanceLinesSingleToken(80)
 			.setBackwardFactor(1)
-			.setForwardDistanceLines(Integer.MAX_VALUE)
+			.setForwardDistanceLines(0)
 			.setForwardFactor(0)
 			.setMaxNumberOfRecoverApplicationsLocal(6);
 		fgSetting.checkAssertionsForSettings();

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java	Tue Nov 15 17:15:51 2011	(r23605)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryConnector.java	Wed Nov 16 09:34:59 2011	(r23606)
@@ -45,7 +45,9 @@
 		int failureOffset = mySGLR.getParserLocation();
 		int failureLineIndex = getHistory().getLineOfTokenPosition(failureOffset - 1);
 		int cursorLineIndex = getHistory().getLineOfTokenPosition(mySGLR.getCursorLocation());
-				
+
+		mySGLR.getPerformanceMeasuring().addFailureLocation(failureOffset);
+
 		if (settings.useFineGrained() && settings.useCursorLocation()) {
 			if(tryFineGrainedOnCursorLine(failureOffset, failureLineIndex, cursorLineIndex)){
 				//System.out.println("FG on cursor line succeeded!");
@@ -101,6 +103,8 @@
 		else
 			skipSucceeded = regionSelector.selectErroneousFragment(failureOffset, failureLineIndex);
 		mySGLR.getPerformanceMeasuring().endCG(skipSucceeded);
+		mySGLR.acceptingStack = null;
+		mySGLR.activeStacks.clear();
 		return skipSucceeded;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryPerformance.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryPerformance.java	Tue Nov 15 17:15:51 2011	(r23605)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/RecoveryPerformance.java	Wed Nov 16 09:34:59 2011	(r23606)
@@ -23,6 +23,13 @@
     private ArrayList<Boolean> BPResults;
     private ArrayList<Boolean> recoveryResults;
     private boolean parseResult;
+    private int recoverCount; 
+
+    private ArrayList<Integer> failureLocations;
+    
+    public ArrayList<Integer> getFailureLocations() {
+		return failureLocations;
+	}
     
     public RecoveryPerformance(){
         CGTimes=new ArrayList<Integer>();
@@ -36,6 +43,7 @@
         FGOnCursorResults=new ArrayList<Boolean>();
         BPResults=new ArrayList<Boolean>();
         recoveryResults=new ArrayList<Boolean>();
+        failureLocations = new ArrayList<Integer>();
     }
     
     public boolean isParseSucceeded() {
@@ -136,4 +144,16 @@
         recoveryTimes.add((int)recoveryTime);
         recoveryResults.add(succeeded);
     }
+
+    public void addFailureLocation(int tokensSeen) {
+		failureLocations.add(tokensSeen);		
+	}
+    
+	public void setRecoverCount(int recoverCount) {
+		this.recoverCount = recoverCount;
+	}
+    
+	public int getRecoverCount() {
+		return recoverCount;
+	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Nov 15 17:15:51 2011	(r23605)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Wed Nov 16 09:34:59 2011	(r23606)
@@ -337,6 +337,10 @@
 		if (s == null) {
 			throw new ParseException(this, "Accepting stack has no link");
 		}
+		//System.out.println(s.recoverCount);
+		assert(s.recoverCount <= s.recoverWeight);
+
+		performanceMeasuring.setRecoverCount(s.recoverCount);
 
 		logParseResult(s);
 		//System.out.println("recoveries: " + s.recoverCount);
@@ -748,14 +752,14 @@
 		final int recoverWeight = calcRecoverWeight(prod, path);
 		final AbstractParseNode t = prod.apply(kids);
 		final Frame stActive = findStack(activeStacks, s);
-		if(stActive!=null){
+		if(stActive != null){
 			Link lnActive=stActive.findDirectLink(st0);
 			if(lnActive!=null){
 				return; //TODO: ambiguity
 			}
 		}
 		final Frame stRecover = findStack(recoverStacks, s);
-		if(stRecover!=null){
+		if(stRecover != null){
 			Link nlRecover = stRecover.findDirectLink(st0);
 			if(nlRecover != null){
 				return; //TODO: ambiguity

From M.A.Akhter at student.tudelft.nl  Wed Nov 16 10:38:08 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 16 Nov 2011 09:38:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23607 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language:
	. spxlang spxlang/index spxlang/index/data
Message-ID: <20111116093808.B9B7B108C017@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Nov 16 09:38:08 2011
New Revision: 23607
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23607&sc=1

Log:
added forward imports resolving(i.e., where a package is imported to). if A imports B i.e., B is using A. So, when A is changed, during separate compilation, it is verified that the changes in A is consistent with its usage in B.

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imported_to_references.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LanguageLibrary.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -38,6 +38,7 @@
 		add(new SPX_index_module_definition(spxIndex));
 		add(new SPX_index_import_references(spxIndex));
 		
+		
 		add(new SPX_index_get_language_descriptor(spxIndex));
 		add(new SPX_index_get_package_declaration(spxIndex));
 		add(new SPX_index_get_module_declaration(spxIndex));
@@ -47,6 +48,7 @@
 		add(new SPX_index_get_package_declarations_by_LanguageName(spxIndex));
 		
 		add(new SPX_index_get_imports(spxIndex));
+		add(new SPX_index_get_imported_to_references(spxIndex));
 		add(new SPX_index_get_related_files_of_packages(spxIndex));
 		add(new SPX_index_equal_resource_uri(spxIndex));
 		

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imported_to_references.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_index_get_imported_to_references.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -0,0 +1,41 @@
+/**
+ * 
+ */
+package org.spoofax.interpreter.library.language.spxlang;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Md. Adil Akhter
+ *
+ */
+public class SPX_index_get_imported_to_references extends SpxAbstractPrimitive {
+
+	private final static String NAME = "SPX_index_get_imported_to_references";
+	private final static int NAMESPACE_ID_INDEX = 1;
+	private final static int NO_ARGS = 2;
+	
+	public SPX_index_get_imported_to_references(SpxSemanticIndex index) {
+		super(index, NAME, 0, NO_ARGS);
+	}
+	
+	@Override
+	protected SpxPrimitiveValidator validateArguments(IContext env, Strategy[] svars, IStrategoTerm[] tvars){
+		return super.validateArguments(env, svars, tvars)
+					.validateApplTermAt(NAMESPACE_ID_INDEX);
+	}
+
+
+	@Override
+	protected boolean executePrimitive(IContext env, Strategy[] svars, IStrategoTerm[] tvars) throws Exception {
+		IStrategoAppl namespaceID   = (IStrategoAppl) tvars[NAMESPACE_ID_INDEX];
+		IStrategoTerm t =  index.getImportedToReferences(getProjectPath(tvars), namespaceID);
+		env.setCurrent(t);
+		return true;
+	}
+		
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -10,6 +10,7 @@
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacade;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndexFacadeRegistry;
+import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -50,8 +51,11 @@
 			successStatement = executePrimitive(env, svars, tvars) ;
 		}
 		catch (Exception ex) {
-			if( ex instanceof IOException ||  ex instanceof IllegalStateException){
+			
+			if (!( ex instanceof SpxSymbolTableException)) 
 				logException(agent , ex);
+			
+			if( ex instanceof IOException ||  ex instanceof IllegalStateException){
 				tryCleanupResources( index.getFacadeRegistry() ,  getProjectPath(tvars) , agent);
 			}
 		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -57,6 +57,7 @@
 			
 		symbols = new HashMap<SpxSymbolKey, List<SpxSymbol>>();
 	}
+	
 	public INamespace define(SpxSymbolTableEntry entry, SpxSemanticIndexFacade f){
 		entry.value.setNamespace(_currentNamespaceId);
 		
@@ -65,6 +66,7 @@
 		//f.persistenceManager().spxSymbolTable().commit();
 		return this;
 	}
+	
 	public Set<SpxSymbol> undefineSymbols(IStrategoTerm searchingFor, IStrategoTerm type , SpxSemanticIndexFacade  facade){
 		SpxSymbolKey key = new SpxSymbolKey(searchingFor);
 		Set<SpxSymbol> undefinedSymbols = new HashSet<SpxSymbol>();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ISpxPersistenceManager.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -2,8 +2,6 @@
 
 import java.io.IOException;
 
-import org.spoofax.interpreter.terms.IStrategoTerm;
-
 import jdbm.PrimaryHashMap;
 import jdbm.PrimaryStoreMap;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxCompilationUnitTable.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -19,6 +19,7 @@
 	
 	private final String SRC  = this.getClass().getSimpleName();
 	private final PrimaryHashMap<String , SpxCompilationUnitInfo> _infoMap;
+	
 	private final PrimaryStoreMap<Long,String> _spxUnitStoreMap;
 	
     /**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxConstructors.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -40,7 +40,7 @@
 		ConstructorDef.newInstance("Module" , 0).index(_knownCons, _termFactory);
 		
 		ConstructorDef.newInstance("ToCompile"  , 0).index(_knownCons, _termFactory);
-		ConstructorDef.newInstance("ToGenerate" , 0).index(_knownCons, _termFactory);
+		ConstructorDef.newInstance("ToCodeGenerate" , 0).index(_knownCons, _termFactory);
 	}
 	
 	IStrategoConstructor indexConstructor(IStrategoConstructor ctor){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -31,6 +31,7 @@
 	
 	private final SpxSemanticIndexFacade _facade;
 	private final PrimaryMap <NamespaceUri,INamespace> namespaces;
+	private final PrimaryMap <String,Long> timestamps;
 	private final SecondaryHashMap <IStrategoList,NamespaceUri,INamespace> namespaceByStrategoId;
 	private transient INamespace _activeNamespace ;
 	
@@ -42,6 +43,8 @@
 
 		String tableName = facade.persistenceManager().getIndexId() + "primary_symbol_table.idx";
 		
+		timestamps = facade.persistenceManager().loadHashMap(tableName + "timestamps.idx");
+		
 		namespaces  = facade.persistenceManager().loadHashMap(tableName + "namespaces.idx");
 		namespaceByStrategoId = namespaces.secondaryHashMap(tableName+ ".namespaceByStrategoId.idx", 
 				new SecondaryKeyExtractor<IStrategoList,NamespaceUri,INamespace>(){
@@ -51,6 +54,38 @@
 				});
 	}
 	
+	
+	private final static String INITIALIZED_ON_KEY = "INITIALIZED_ON";
+	private final static String LAST_CODEGEN_ON_KEY = "LAST_CODEGEN_ON";
+	
+	long getIntializedOn(){ 
+		Long initializedOn = timestamps.get(INITIALIZED_ON_KEY);
+		
+		if(initializedOn ==null) return System.currentTimeMillis();
+		
+		return initializedOn;
+	}
+	
+	void setCompileSessionEndedOn(){ 
+		timestamps.put(INITIALIZED_ON_KEY, System.currentTimeMillis());
+				
+	}
+	
+	
+	long getLastCodeGeneratedOn(){ 
+		Long lastCodeGenOn = timestamps.get(LAST_CODEGEN_ON_KEY);
+		
+		if(lastCodeGenOn ==null) 
+			return 0;
+		
+		return lastCodeGenOn;
+	}
+	
+	void setLastCodeGeneratedOn(long timestap){ 
+		timestamps.put(LAST_CODEGEN_ON_KEY, timestap);
+				
+	}
+	
 	/**
 	 * Adding Global Namespace in symbol-table by default.
 	 * @param facade

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -45,6 +45,8 @@
 		return idx.executeIndexer(projectPath, importReferences);
 	}
 	
+	
+	
 	public boolean indexSymbolDefinition(IStrategoString projectPath, final IStrategoAppl symbolDef)  throws Exception{
 		
 		SpxIndexer idx = new SpxIndexer() {
@@ -181,6 +183,19 @@
 			}
 		}.executeWith(projectPath, namespaceID);
 	}
+	
+	
+	public IStrategoTerm getImportedToReferences(IStrategoString projectPath, final IStrategoAppl namespaceID) throws Exception{
+		return new SpxResolver() {
+			@Override
+			public IStrategoTerm resolve(IStrategoString projectPath, IStrategoTerm namespaceID)
+					throws Exception {	
+					
+					SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
+					return idxFacade.getImportedToReferences((IStrategoAppl)namespaceID);
+			}
+		}.executeWith(projectPath, namespaceID);
+	}
 	
 	public IStrategoTerm getModuleDeclarations(IStrategoString projectPath, IStrategoTerm searchQuery) throws Exception {
 		return new SpxResolver() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -53,9 +53,6 @@
 	private final TermConverter _converter;
 	private final SpxConstructors _spxConstructors;
 	
-	private long _initializedOn;
-	
-	private long _previousSuccessfulCodeGenerationDoneOn;
 	private long _currentCodeGenerationStratedOn;
 
 	
@@ -87,13 +84,12 @@
 		_persistenceManager.initializeSymbolTables(this._projectPath, this);
 		_indexId = _persistenceManager.getIndexId();
 		
-		//Setting IntializedOn Flag for incremental Compilation	
-		_initializedOn  = System.currentTimeMillis();
+		
 	}
 	
 	protected void finalize() throws Throwable {
 		try {
-			close(false);
+			close(true);
 		} catch (Exception e) {
 		}
 		finally {
@@ -130,9 +126,13 @@
 	 */
 	public ISpxPersistenceManager persistenceManager(){	return _persistenceManager; }
 
-	public void onInitCodeGeneration(){ this._currentCodeGenerationStratedOn = System.currentTimeMillis(); }
+	public void onInitCodeGeneration(){
+		this._currentCodeGenerationStratedOn = System.currentTimeMillis(); 
+	}
 	
-	public void onCompleteCodeGeneration() { this._previousSuccessfulCodeGenerationDoneOn = this._currentCodeGenerationStratedOn;}
+	public void onCompleteCodeGeneration() { 
+		this.persistenceManager().spxSymbolTable().setLastCodeGeneratedOn(this._currentCodeGenerationStratedOn);
+	}
 	
 	/**
 	 * Returns CompilationUnit located in {@code spxCompilationUnitPath} as {@link IStrategoTerm}
@@ -430,8 +430,16 @@
 	    IStrategoList namespaceID = this.getNamespaceId(Tools.applAt(searchCriteria, 0));
 	    IStrategoTerm symbolID = Tools.termAt(searchCriteria, 1);
 	    IStrategoAppl typeAppl =  Tools.applAt(searchCriteria, 2);
-	    IStrategoConstructor typeCtor = getCons().getConstructor( typeAppl.getConstructor().getName(), typeAppl.getConstructor().getArity()) ;
-	    
+	    IStrategoConstructor typeCtor = null; 
+		try{
+			typeCtor = verifyKnownContructorExists(typeAppl);
+		}catch(IllegalArgumentException ex){
+			// It seems like the constructor does not exist in local type declarations. 
+			// Hence, defining it to be used further.
+			IStrategoConstructor ctor = (IStrategoConstructor)typeAppl.getConstructor();
+			typeCtor = _spxConstructors.indexConstructor(ctor);
+		}
+		
 	    Set<SpxSymbol> spxSymbols = this.persistenceManager().spxSymbolTable()
 	    					.undefineSymbols(namespaceID, 
 	    									 symbolID,
@@ -575,6 +583,7 @@
 		persistenceManager().spxPackageTable().definePackageDeclaration(packageDeclaration);
 	}
 	
+	
 	/**
 	 * @param mDecl
 	 */
@@ -614,6 +623,37 @@
 		return ns.getImports(this);
 	}
 	
+	
+
+	/**
+	 * Returning all the imported to reference of the current package / module construct. Package/ Module  
+	 * are the scoped symbol for the current implementation of the spoofaxlang. Whenever 
+	 * looking for a importto reference of a module, it returns the import refernece of it enclosing 
+	 * namespace , i.e. package. 
+	 * 
+	 * Currently this lookup is hard-coded . Later , plan is to move to more generic and dynamic 
+	 * lookup environment. 
+	 * 
+	 * @param namespaceId
+	 * @return {@link IStrategoTerm} 
+	 * @throws SpxSymbolTableException 
+	 */
+	public IStrategoTerm getImportedToReferences(IStrategoAppl namespaceId) throws SpxSymbolTableException {
+		PackageDeclaration ns; 
+
+		if (namespaceId.getConstructor() == getCons().getModuleQNameCon()) {
+			IStrategoList packageId = persistenceManager()
+					.spxModuleTable()
+					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
+			ns = lookupPackageDecl(packageId);
+		} else if (namespaceId.getConstructor() == getCons().getPackageQNameCon()) {
+			ns = this.lookupPackageDecl(namespaceId);
+		} else
+			throw new IllegalArgumentException("Unknown Namespace "	+ namespaceId.toString());
+		
+		return ns.getImportedToReferences(this);
+	}
+	
 	/**
 	 * Returns the package declaration indexed with {@code packageIdAppl} typed qualified name.
 	 * 
@@ -831,12 +871,11 @@
 		logMessage("getDirtyModuleDeclarations | Found following result from SymbolTable : " + decls);
 		
 		long ts = 0;
-		if( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCompileCon())){
-			ts = this._initializedOn;
-		}
-		else if ( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCodeGenerateCon())){
-			ts = this._previousSuccessfulCodeGenerationDoneOn;
-		}
+	
+		if( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCompileCon()))
+			ts = _persistenceManager.spxSymbolTable().getIntializedOn();
+		else if ( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCodeGenerateCon()))
+			ts = this.persistenceManager().spxSymbolTable().getLastCodeGeneratedOn();
 		else
 			throw new SpxSymbolTableException("Illegal qualifiedFor constructor at getDirtyModuleDeclarations");
 		
@@ -971,12 +1010,12 @@
 	 */
 	public void persistChanges() throws IOException {
 		_persistenceManager.commit();
-		if (Utils.DEBUG)
+		if (Utils.DEBUG){
 			try {
-				_persistenceManager.spxSymbolTable().printSymbols(this,
-						"commit", this.getProjectPath(), this.indexId());
+				_persistenceManager.spxSymbolTable().printSymbols(this, "commit", this.getProjectPath(), this.indexId());
 			} catch (SpxSymbolTableException e) {
 			}
+		}
 	}	
 
 	/**
@@ -988,8 +1027,13 @@
 	public void close(boolean shouldCommit) throws IOException {
 		if (!isPersistenceManagerClosed()) {
 			logMessage("close | closing underlying persistence manager instance.");
+			if(shouldCommit)
+				_persistenceManager.commit();
+			
+			_persistenceManager.spxSymbolTable().setCompileSessionEndedOn();
 			_persistenceManager.close();
 			_persistenceManager = null;
+			
 		}else {
 			logMessage("close | underlying persistence manager is already closed. ");
 		}	

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -72,7 +72,7 @@
 			throw new NotImplementedException("Unknown Import Reference. Not implemented for : " + packageRef.toString());
 	}
 	
-	private IStrategoTerm tranformToSpxImport(SpxSemanticIndexFacade idxFacade, IStrategoTerm i){
+	protected IStrategoTerm tranformToSpxImport(SpxSemanticIndexFacade idxFacade, IStrategoTerm i){
 		IStrategoTerm retTerm = i ; 
 		if( i instanceof IStrategoList)
 			retTerm = PackageDeclaration.toPackageQNameAppl(idxFacade, (IStrategoList)i);
@@ -100,6 +100,8 @@
 		return termConverter.convert(result);
 	}
 	
+
+	
 	protected IStrategoTerm forceImploderAttachment(IStrategoTerm term) {
 		ImploderAttachment attach = ImploderAttachment.get(term);
 		if (attach != null) {
@@ -195,4 +197,5 @@
 		return true;
 	}
 
+
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Wed Nov 16 09:34:59 2011	(r23606)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/PackageDeclaration.java	Wed Nov 16 09:38:08 2011	(r23607)
@@ -13,6 +13,7 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.TermConverter;
 
 public class PackageDeclaration extends IdentifiableConstruct implements INamespaceFactory
 {
@@ -53,6 +54,24 @@
 		importedToReferences.add(packageId);
 	}
 	
+	
+
+	public IStrategoTerm getImportedToReferences(
+			SpxSemanticIndexFacade idxFacade) {
+		ITermFactory termFactory = idxFacade.getTermFactory();
+		TermConverter termConverter = idxFacade.getTermConverter();
+		
+		HashSet<IStrategoTerm> importedTo = new HashSet<IStrategoTerm>();
+		importedTo.addAll(this.importedToReferences);
+		
+		IStrategoList result = termFactory.makeList();
+		for (IStrategoTerm t: importedTo){
+			result = idxFacade.getTermFactory().makeListCons(tranformToSpxImport(idxFacade,t), result);
+		}	
+		return termConverter.convert(result);
+	
+	}
+	
 	/* (non-Javadoc)
 	 * @see java.lang.Object#equals(java.lang.Object)
 	 */
@@ -158,9 +177,12 @@
 		
 		PackageDeclaration newDecl = new PackageDeclaration(decl.getId());
 		for( String str : decl.getAllFilePaths())
-		{
 			newDecl.addFileUri(str); 
-		}
+		
+		newDecl.importedToReferences.addAll(decl.importedToReferences);
+		newDecl.importReferences.addAll(decl.importReferences);
+		newDecl.legacyImportReferences.addAll(decl.legacyImportReferences);
+		
 		return newDecl;
 	}
 

From tobivollebregt at gmail.com  Wed Nov 16 13:07:34 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 16 Nov 2011 12:07:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23608 -
	spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template
Message-ID: <20111116120734.C3E58108C065@mx3.tudelft.nl>

Author: tvo
Date: Wed Nov 16 12:07:34 2011
New Revision: 23608
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23608&sc=1

Log:
TemplateLang: useful pp semantics for placeholder
with multi-line value on line with literal text.

(all except the first line of the placeholder substitute
are indented with the indent of the line)

Modified:
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Nov 16 09:38:08 2011	(r23607)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Nov 16 12:07:34 2011	(r23608)
@@ -32,7 +32,7 @@
 
   template-sections-to-stratego-string:
     section* ->
-    $[module prettyprinter
+    ${module prettyprinter
       imports
         libstratego-lib
 
@@ -43,12 +43,27 @@
         // ih = indent helper, t = indent string
         pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
         pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
+        pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
 
-      [section''*]
+        all-lines-except-first(s) =
+            is-string
+          ; string-tokenize-keep-empty(|['\n'])
+          ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
+                   < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
+                   + where(![] => laststring))    // ... or not.
+          ; ([id | map(s)] + [])
+          ; <separate-by> ("\n", <id>)
+          ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
+          ; concat-strings
+
+        prefix-lines-except-first(|p) =
+          all-lines-except-first(<conc-strings> (p, <id>))
+
+      {section''*}
 
       strategies // all other sorts used in placeholders
 
-        [strategy*]]
+        {strategy*}}
     with
       section'*  := <templatelang-desugar-top> section*;
       section''* := <filter(template-section-to-stratego-string);
@@ -123,7 +138,7 @@
       not(!elem* => [Placeholder(_, _, _, _)])
     with
       (elem'*, _)    := <thread-map(try(rename-template-element))> (elem*, 0);
-      elem''*        := <map(template-element-to-stratego)> elem'*;
+      elem''*        := <map(template-element-to-stratego(|""))> elem'*;
       arg*           := <filter(template-element-to-cons-arg)> elem'*;
       let*           := <filter(template-element-to-prettyprint)> elem'*;
       (input, let'*) := <template-common> (let*, elem''*, attrs, arg*)
@@ -216,29 +231,35 @@
       ([$[<pp-ih-1(|"[indent]")> [name]']], 0)
 
   template-line-to-stratego:
-    (Line(elem*), 0) -> (elem'*, 1)
+    (Line([Layout(indent) | elem*]), 0) -> (elem'*, 1)
     where
-      not(!elem* => [Layout(_), Placeholder(_, _, _, _)]);
-      elem'* := <map(template-element-to-stratego)> elem*
+      not(!elem* => [Placeholder(_, _, _, _)]);
+      elem'* := <map(template-element-to-stratego(|indent))> elem*
 
   template-line-to-stratego:
     (Line([Layout(indent), Placeholder(_, _, _, _){name}]), 1) ->
       ([$[<pp-ih-2(|"[indent]")> [name]']], 1)
 
   template-line-to-stratego:
-    (Line(elem*), 1) -> ([String("\n") | elem'*], 1)
+    (Line([Layout(indent) | elem*]), 1) -> ([String("\n") | elem'*], 1)
     where
-      not(!elem* => [Layout(_), Placeholder(_, _, _, _)]);
-      elem'* := <map(template-element-to-stratego)> elem*
+      not(!elem* => [Placeholder(_, _, _, _)]);
+      elem'* := <map(template-element-to-stratego(|indent))> elem*
 
-  template-element-to-stratego:
+  template-element-to-stratego(|indent):
     String(t) -> <id>
 
-  template-element-to-stratego:
+  template-element-to-stratego(|indent):
     Layout(t) -> String(t)
 
-  template-element-to-stratego:
-    Placeholder(_, _, _, _){name} -> $[[name]']
+  template-element-to-stratego(|indent):
+    Placeholder(_, _, _, _){name} -> $[[s][name]']
+      where
+        if !indent => "" then
+          s := ""
+        else
+          s := $[<pp-ih-3(|"[indent]")> ]
+        end
 
 rules
 

From tobivollebregt at gmail.com  Wed Nov 16 15:18:16 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 16 Nov 2011 14:18:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23609 -
	spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template
Message-ID: <20111116141817.0288C2B8044@mx2.tudelft.nl>

Author: tvo
Date: Wed Nov 16 14:18:16 2011
New Revision: 23609
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23609&sc=1

Log:
TemplateLang: fix for special case of template with only multiple line-placeholders

Modified:
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Nov 16 12:07:34 2011	(r23608)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Nov 16 14:18:16 2011	(r23609)
@@ -1,3 +1,13 @@
+// FIXME: Refactor to use lists, and separate-by(|"\n") to insert newlines.
+//        Then we can get rid of the four (!) pp-ih-* strategies.
+//        [Layout, Placeholder] could just generate an empty tuple for an
+//        empty substitute, which could be filtered out later on...
+//
+// 1. template-line-to-stratego
+// 2. filter(not(?()))
+// 3. separate-by(|"\n")
+// 4. concat
+
 module to-str
 
 imports
@@ -41,6 +51,7 @@
         pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
         pp-list(s|t) = map(s); separate-by(|t); concat-strings
         // ih = indent helper, t = indent string
+        pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
         pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
         pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
         pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
@@ -127,6 +138,24 @@
         input := "a"
       end
 
+  // Generalized injection: a list of placeholder lines only.
+  // This means that there is no place where
+  template-to-prettyprint-strategy:
+    TemplateProduction(sort, Template(line*), attrs) ->
+    $[prettyprint-[sort]:
+        [input] -> zz
+        where
+          [let'*]]
+    where
+      <all(?Line([Layout(_), Placeholder(_, _, _, _)]))> line*;
+      not(!line* => [_]) // normal injection
+    with
+      (line'*, _)    := <thread-map(rename-template-line)> (line*, 0);
+      (line''*, _)   := <thread-map(template-line-to-stratego)> (line'*, -1);
+      arg*           := <mapconcat(template-line-to-cons-arg)> line'*;
+      let*           := <mapconcat(template-line-to-prettyprint)> line'*;
+      (input, let'*) := <template-common> (let*, <separate-by(|["\"\\n\""]); concat> line''*, attrs, arg*)
+
   template-to-prettyprint-strategy:
     TemplateProduction(sort, SingleLineTemplate(elem*), attrs) ->
     $[prettyprint-[sort]:
@@ -226,6 +255,13 @@
   // The thread starts at 0 and is set to 1 once we passed the first line.
   // It is used to determine whether we already generated the initial newline.
 
+  // Or: it is set to -1 and stays at -1, this means there are only
+  //     placeholders in the template, so none needs to add a newline.
+
+  template-line-to-stratego:
+    (Line([Layout(indent), Placeholder(_, _, _, _){name}]), -1) ->
+      ([$[<pp-ih-0(|"[indent]")> [name]']], -1)
+
   template-line-to-stratego:
     (Line([Layout(indent), Placeholder(_, _, _, _){name}]), 0) ->
       ([$[<pp-ih-1(|"[indent]")> [name]']], 0)

From tobivollebregt at gmail.com  Wed Nov 16 17:38:10 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 16 Nov 2011 16:38:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23610 - in
	spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax:
	syntax trans/codegen/template trans/context/sdf
	trans/context/templa...
Message-ID: <20111116163810.B50B8CC20D@mx4.tudelft.nl>

Author: tvo
Date: Wed Nov 16 16:38:10 2011
New Revision: 23610
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23610&sc=1

Log:
TemplateLang: streamline syntax; `prefix' is placeholder option now

Modified:
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Nov 16 14:18:16 2011	(r23609)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Wed Nov 16 16:38:10 2011	(r23610)
@@ -54,11 +54,9 @@
     ID "." ID -> SortCons {cons("SortCons")}
 
     %% placeholders
-    PlaceholderPrefix1 PlaceholderSort PlaceholderSuffix PlaceholderOptions ">" -> TemplatePart1 {cons("Placeholder")}
-    PlaceholderPrefix2 PlaceholderSort PlaceholderSuffix PlaceholderOptions "]" -> TemplatePart2 {cons("Placeholder")}
-
-    "<" -> PlaceholderPrefix1 {cons("None")}
-    "[" -> PlaceholderPrefix2 {cons("None")}
+    "<" Placeholder ">" -> TemplatePart1 {bracket}
+    "[" Placeholder "]" -> TemplatePart2 {bracket}
+    PlaceholderSort PlaceholderSuffix PlaceholderOptions -> Placeholder {cons("Placeholder")}
 
     %% constructor identical to SDF sort to simplify some transformations
     ID -> PlaceholderSort {cons("sort")}
@@ -74,12 +72,9 @@
     "wrap"                 -> PlaceholderOption {cons("Wrap")}
     "anchor"               -> PlaceholderOption {cons("Anchor")}
     "separator" "=" STRING -> PlaceholderOption {cons("Separator")}
+    "text" "=" STRING      -> PlaceholderOption {cons("Placeholder")}
 
   syntax
-    %% placeholders (layout between "<", the text and ":" should be captured)
-    "<" <PlaceholderText1-LEX> ":" -> <PlaceholderPrefix1-CF> {cons("Text")}
-    "[" <PlaceholderText2-LEX> ":" -> <PlaceholderPrefix2-CF> {cons("Text")}
-
     %% template parts
     "<" {<TemplateLine1-CF> "\n"}+ ">" -> <Template-CF> {cons("Template")}
     "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF> {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
@@ -102,14 +97,6 @@
     <TemplateLayout-LEX>  -> <TemplatePartQ-CF> {cons("Layout")}
 
   lexical syntax
-    ~[\<\>\:]+ -> PlaceholderText1
-    ~[\[\]\:]+ -> PlaceholderText2
-
-  lexical restrictions
-    PlaceholderText1 -/- ~[\:]
-    PlaceholderText2 -/- ~[\:]
-
-  lexical syntax
   	[\r][\n] -> "\n"
     [\ \t]+  -> TemplateLayout
 

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Nov 16 14:18:16 2011	(r23609)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Wed Nov 16 16:38:10 2011	(r23610)
@@ -143,13 +143,17 @@
 rules
 
   template-line-to-esv:
-    Line([Layout(x), Placeholder(None(), _, <Option() + Star()>, _)]) ->
+    Line([Layout(x), Placeholder(_, <Option() + Star()>, option*)]) ->
       <spaces-to-tabs> [String(x), Cursor()]
+      where
+        <not(one(?Placeholder(_)))> option*
 
   template-line-to-esv:
-    line @ Line([Layout(_), Placeholder(None(), _, <None() + Plus()>, _)]) ->
+    line @ Line([Layout(_), Placeholder(_, <None() + Plus()>, option*)]) ->
       // ?t and not(?t) are cycle breaker
       <?t; expand-template-line; not(?t); map(template-line-to-esv)> [line]
+      where
+        <not(one(?Placeholder(_)))> option*
 
   template-line-to-esv:
     Line(elem*) -> <map(template-element-to-esv); spaces-to-tabs> elem*
@@ -159,14 +163,18 @@
 
   // Any placeholder with title results in a placeholder with that title.
   template-element-to-esv:
-    Placeholder(Text(name), sort(sort), _, _) ->
-      PlaceholderWithSort($[<[name]:], sort)
+    Placeholder(sort(sort), _, option*) ->
+      PlaceholderWithSort($[<[text]:], sort)
+      where
+        <one(?Placeholder(text))> option*
 
   // A and A+ result in a placeholder containing the shortest expansion of A.
   template-element-to-esv:
-    placeholder @ Placeholder(None(), sort(sort), <None() + Plus()>, _) ->
+    placeholder @ Placeholder(sort(sort), <None() + Plus()>, option*) ->
       PlaceholderWithSort($[<[text]:], sort)
     where
+      <not(one(?Placeholder(_)))> option*
+    where
       text := <expand-template-element;
                map(template-element-to-string);
                concat-strings
@@ -174,7 +182,7 @@
 
   // A? and A* result in a 0-length placeholder.
   template-element-to-esv:
-    Placeholder(None(), sort(sort), <Option() + Star()>, _) ->
+    Placeholder(sort(sort), <Option() + Star()>, _) ->
       PlaceholderWithSort("<:", sort)
 
   template-element-to-esv:
@@ -192,13 +200,19 @@
 rules // TemplateLang / completion template element to string
 
   template-element-to-string:
-    Placeholder(Text(t), _, _, _) -> t
+    Placeholder(_, _, option*) -> text
+    where
+      <one(?Placeholder(text))> option*
 
   template-element-to-string:
-    Placeholder(None(), sort(sort), <None() + Plus()>, _) -> sort
+    Placeholder(sort(sort), <None() + Plus()>, option*) -> sort
+    where
+      <not(one(?Placeholder(_)))> option*
 
   template-element-to-string:
-    Placeholder(None(), _, <Option() + Star()>, _) -> ""
+    Placeholder(_, <Option() + Star()>, option*) -> ""
+    where
+      <not(one(?Placeholder(_)))> option*
 
   template-element-to-string:
     Placeholder(t) -> t
@@ -265,7 +279,7 @@
       line'* := <listbu(expand-template-line)> line*
 
   is-template-placeholder:
-    Placeholder(_, sort(x), _, _) -> <id>
+    Placeholder(sort(x), _, _) -> <id>
     where
       <setof-Declaration; one(?TemplateProduction(_, _, _))> x
 
@@ -275,10 +289,10 @@
       <setof-Declaration; one(?TemplateProduction(_, _, _))> x
 
   // expand-template-line covers exactly all valid input terms except:
-  //  Line([indent @ Layout(_), Placeholder(_, sort(x), <None() + Plus()>, _)]) where <Expanded> x
+  //  Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) where <Expanded> x
 
   expand-template-line:
-    [t @ Line([indent @ Layout(_), Placeholder(_, sort(x), <None() + Plus()>, _)]) | tail] -> [line* | tail]
+    [t @ Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) | tail] -> [line* | tail]
     where
       <not(Expanded)> x
     where
@@ -287,7 +301,7 @@
   expand-template-line:
     [t @ Line(elem*) | tail] -> [Line(elem'*) | tail]
     where
-      not(!elem* => [Layout(_), Placeholder(_, _, <None() + Plus()>, _)])
+      not(!elem* => [Layout(_), Placeholder(_, <None() + Plus()>, _)])
     where
       elem'* := <listbu(expand-template-element)> elem*
 
@@ -295,10 +309,10 @@
     [] -> <id>
 
   // expand-template-element covers exactly all valid input terms except:
-  //  Placeholder(_, sort(x), <None() + Plus()>, _) where <Expanded> x
+  //  Placeholder(sort(x), <None() + Plus()>, _) where <Expanded> x
 
   expand-template-element:
-    [t @ Placeholder(_, sort(x), <None() + Plus()>, _) | tail] -> [elem* | tail]
+    [t @ Placeholder(sort(x), <None() + Plus()>, _) | tail] -> [elem* | tail]
     where
       <not(Expanded)> x
     where
@@ -307,7 +321,7 @@
   expand-template-element:
     [t | tail] -> [t | tail]
     where
-      not(!t => Placeholder(_, sort(x), <None() + Plus()>, _))
+      not(!t => Placeholder(sort(x), <None() + Plus()>, _))
 
   expand-template-element:
     [] -> <id>
@@ -344,7 +358,7 @@
   template-character-count =
     ?String(<string-length>)
     <+ ?Layout(<string-length>)
-    <+ ?Text(<string-length>)
+    <+ ?Placeholder(<string-length>)
     <+ crush(!0, addi, template-character-count)
 
   lti = not(gti)

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Nov 16 14:18:16 2011	(r23609)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Wed Nov 16 16:38:10 2011	(r23610)
@@ -108,7 +108,7 @@
   // The placeholder is at the start AND at the end of the template!
   template-to-sdf:
     < ?SingleLineTemplate(elem*)
-    + ?Template([Line(elem* @ [Layout(_), Placeholder(_, _, _, _)])]) > -> A*
+    + ?Template([Line(elem* @ [Layout(_), Placeholder(_, _, _)])]) > -> A*
     with
       A* := <maybe-separating(
       	       filter(template-element-to-sdf-sep <+ template-element-to-sdf),
@@ -133,7 +133,7 @@
 rules
 
   template-line-to-sdf-sep:
-    (Line([Layout(_), p @ Placeholder(_, sort(S), mult, Options(option*))]), state) ->
+    (Line([Layout(_), p @ Placeholder(sort(S), mult, option*)]), state) ->
       (result, state)
     where
       <one(Separator("\n"))> option*
@@ -158,22 +158,22 @@
       ([ A|[ "\"\\n\"" ]| | <template-line-to-sdf-sep-helper> elem*], 1)
 
   template-line-to-sdf-sep-helper =
-    not(?[Layout(_), Placeholder(_, _, _, Options(<one(Separator("\n"))>))]);
+    not(?[Layout(_), Placeholder(_, _, <one(Separator("\n"))>)]);
     filter(template-element-to-sdf-sep <+ template-element-to-sdf)
 
   template-element-to-sdf-sep:
-    Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ {S "\"\\n\""}* ]|
+    Placeholder(sort(S), Star(), option*) -> A|[ {S "\"\\n\""}* ]|
     where <one(Separator("\n"))> option*
 
   template-element-to-sdf-sep:
-    Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ {S "\"\\n\""}+ ]|
+    Placeholder(sort(S), Plus(), option*) -> A|[ {S "\"\\n\""}+ ]|
     where <one(Separator("\n"))> option*
 
 rules
 
   template-line-to-sdf =
     ?Line(<id>);
-    if not(?[Layout(_), Placeholder(_, _, _, _)]) then
+    if not(?[Layout(_), Placeholder(_, _, _)]) then
       switch <Options> Newlines()
         case ?None()     : id
         case ?Leading()  : ![String("\n") | <id>]
@@ -186,26 +186,26 @@
     String(x) -> <string-to-sdf> x
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), None(), _) -> A|[ S ]|
+    Placeholder(sort(S), None(), _) -> A|[ S ]|
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Option(), _) -> A|[ S? ]|
+    Placeholder(sort(S), Option(), _) -> A|[ S? ]|
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ S* ]|
+    Placeholder(sort(S), Star(), option*) -> A|[ S* ]|
     where <not(one(Separator(not(string-is-layout))))> option*
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ { S L }* ]|
+    Placeholder(sort(S), Star(), option*) -> A|[ { S L }* ]|
     where <one(Separator(not(string-is-layout)))> option*
     with L := <separator-to-literal> option*
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ S+ ]|
+    Placeholder(sort(S), Plus(), option*) -> A|[ S+ ]|
     where <not(one(Separator(not(string-is-layout))))> option*
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ { S L }+ ]|
+    Placeholder(sort(S), Plus(), option*) -> A|[ { S L }+ ]|
     where <one(Separator(not(string-is-layout)))> option*
     with L := <separator-to-literal> option*
 

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Nov 16 14:18:16 2011	(r23609)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Wed Nov 16 16:38:10 2011	(r23610)
@@ -106,7 +106,7 @@
     TemplateProduction(sort, _, _) -> sort
 
   sort-used-in-prettyprinting:
-    Placeholder(_, sort(sort), _, _) -> sort
+    Placeholder(sort(sort), _, _) -> sort
 
 rules
 
@@ -129,8 +129,8 @@
         where
           [<template-element-to-prettyprint> p{"a"}]]
     where
-      < ?SingleLineTemplate([p @ Placeholder(_, _, _, _)])
-      + ?Template([Line([Layout(_), p @ Placeholder(_, _, _, _)])]) > template
+      < ?SingleLineTemplate([p @ Placeholder(_, _, _)])
+      + ?Template([Line([Layout(_), p @ Placeholder(_, _, _)])]) > template
     with
       if cons := <fetch-cons-name> attrs then
         input := $[[cons](a)]
@@ -147,7 +147,7 @@
         where
           [let'*]]
     where
-      <all(?Line([Layout(_), Placeholder(_, _, _, _)]))> line*;
+      <all(?Line([Layout(_), Placeholder(_, _, _)]))> line*;
       not(!line* => [_]) // normal injection
     with
       (line'*, _)    := <thread-map(rename-template-line)> (line*, 0);
@@ -164,7 +164,7 @@
           [let'*]]
     where
       not(<map(?Layout(_) + ?String(_))> elem*);
-      not(!elem* => [Placeholder(_, _, _, _)])
+      not(!elem* => [Placeholder(_, _, _)])
     with
       (elem'*, _)    := <thread-map(try(rename-template-element))> (elem*, 0);
       elem''*        := <map(template-element-to-stratego(|""))> elem'*;
@@ -219,10 +219,10 @@
   //     not(<fetch-cons-name> attrs);
   //     FIXME <getfirst(?bracket())> attr*
   //   where
-  //     <length> <filter(?Placeholder(_, _, _, _))> elem* => 1
+  //     <length> <filter(?Placeholder(_, _, _))> elem* => 1
   //     <+ debug(!"Bracket production must have exactly one placeholder: "); fail
   //   with
-  //     (before, placeholder, after) := <split-fetch-keep(?Placeholder(_, _, _, _))> elem*
+  //     (before, placeholder, after) := <split-fetch-keep(?Placeholder(_, _, _))> elem*
   //   where
   //     [String(open)]  := <map(template-element-to-stratego'); concatenate-consecutive-strings> before;
   //     [String(close)] := <map(template-element-to-stratego'); concatenate-consecutive-strings> after
@@ -236,7 +236,7 @@
       (elem'*, index') := <thread-map(try(rename-template-element))> (elem*, index)
 
   rename-template-element:
-    (Placeholder(a, b, c, d), index) -> (Placeholder(a, b, c, d){name'}, index')
+    (Placeholder(a, b, c), index) -> (Placeholder(a, b, c){name'}, index')
     with
       name'  := <implode-string> [<addi> ('a', index)];
       index' := <inc> index
@@ -247,7 +247,7 @@
     Line(elem*) -> <filter(template-element-to-cons-arg)> elem*
 
   template-element-to-cons-arg:
-    Placeholder(_, _, _, _){name} -> name
+    Placeholder(_, _, _){name} -> name
 
 rules
 
@@ -259,27 +259,27 @@
   //     placeholders in the template, so none needs to add a newline.
 
   template-line-to-stratego:
-    (Line([Layout(indent), Placeholder(_, _, _, _){name}]), -1) ->
+    (Line([Layout(indent), Placeholder(_, _, _){name}]), -1) ->
       ([$[<pp-ih-0(|"[indent]")> [name]']], -1)
 
   template-line-to-stratego:
-    (Line([Layout(indent), Placeholder(_, _, _, _){name}]), 0) ->
+    (Line([Layout(indent), Placeholder(_, _, _){name}]), 0) ->
       ([$[<pp-ih-1(|"[indent]")> [name]']], 0)
 
   template-line-to-stratego:
     (Line([Layout(indent) | elem*]), 0) -> (elem'*, 1)
     where
-      not(!elem* => [Placeholder(_, _, _, _)]);
+      not(!elem* => [Placeholder(_, _, _)]);
       elem'* := <map(template-element-to-stratego(|indent))> elem*
 
   template-line-to-stratego:
-    (Line([Layout(indent), Placeholder(_, _, _, _){name}]), 1) ->
+    (Line([Layout(indent), Placeholder(_, _, _){name}]), 1) ->
       ([$[<pp-ih-2(|"[indent]")> [name]']], 1)
 
   template-line-to-stratego:
     (Line([Layout(indent) | elem*]), 1) -> ([String("\n") | elem'*], 1)
     where
-      not(!elem* => [Placeholder(_, _, _, _)]);
+      not(!elem* => [Placeholder(_, _, _)]);
       elem'* := <map(template-element-to-stratego(|indent))> elem*
 
   template-element-to-stratego(|indent):
@@ -289,7 +289,7 @@
     Layout(t) -> String(t)
 
   template-element-to-stratego(|indent):
-    Placeholder(_, _, _, _){name} -> $[[s][name]']
+    Placeholder(_, _, _){name} -> $[[s][name]']
       where
         if !indent => "" then
           s := ""
@@ -303,24 +303,24 @@
     Line(elem*) -> <filter(template-element-to-prettyprint)> elem*
 
   template-element-to-prettyprint:
-    Placeholder(_, sort(x), None(), _){name} -> $[[name]' := <prettyprint-[x]> [name]]
+    Placeholder(sort(x), None(), _){name} -> $[[name]' := <prettyprint-[x]> [name]]
 
   template-element-to-prettyprint:
-    Placeholder(_, sort(x), <Star() + Plus()>, Options(opt*)){name} -> t
+    Placeholder(sort(x), <Star() + Plus()>, option*){name} -> t
     with
-      if sep := <getfirst(?Separator(<id>))> opt* then
+      if sep := <getfirst(?Separator(<id>))> option* then
         t := $[[name]' := <pp-list(prettyprint-[x]|"[<templatelang-escape> sep]")> [name]]
       else
         t := $[[name]' := <pp-list(prettyprint-[x]|" ")> [name]]
       end
 
   template-element-to-prettyprint:
-    Placeholder(_, sort(x), Option(), _){name} -> $[[name]' := <pp-option(prettyprint-[x])> [name]]
+    Placeholder(sort(x), Option(), _){name} -> $[[name]' := <pp-option(prettyprint-[x])> [name]]
 
 rules
 
 //   template-element-to-parenthesize(|conflicts):
-//     (i0, Placeholder(_, sort(x), None(), _){name}) -> $[[name]' := <parenthesize-[x]([na])> [name]]
+//     (i0, Placeholder(sort(x), None(), _){name}) -> $[[name]' := <parenthesize-[x]([na])> [name]]
 //     where
 //       not(<filter(?(i0, <id>))> conflicts => conflicts' => [])
 //     with
@@ -332,9 +332,9 @@
 //       end
 //
 //   template-element-to-parenthesize(|conflicts):
-//     (i0, p@ Placeholder(_, sort(x), None(), _){name}) -> <template-element-to-prettyprint> p
+//     (i0, p@ Placeholder(sort(x), None(), _){name}) -> <template-element-to-prettyprint> p
 //     where
 //       <filter(?(i0, _))> conflicts => []
 //
 //   template-element-to-parenthesize(|conflicts):
-//     (i0, p@ Placeholder(_, sort(x), <not(?None())>, _){name}) -> <template-element-to-prettyprint> p
+//     (i0, p@ Placeholder(sort(x), <not(?None())>, _){name}) -> <template-element-to-prettyprint> p

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Wed Nov 16 14:18:16 2011	(r23609)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Wed Nov 16 16:38:10 2011	(r23610)
@@ -227,15 +227,15 @@
 
   // TemplateLang
   get-sort-decl:
-    Placeholder(_, sort(x), None(), _) -> <id>
+    Placeholder(sort(x), None(), _) -> <id>
     with rules( lhs-sort :+ _ -> x )
 
   get-sort-decl:
-    Placeholder(_, sort(x), <?Plus() + ?Star()>, _) -> <id>
+    Placeholder(sort(x), <?Plus() + ?Star()>, _) -> <id>
     with rules( lhs-sort :+ _ -> $[List([x])] )
 
   get-sort-decl:
-    Placeholder(_, sort(x), Option(), _) -> <id>
+    Placeholder(sort(x), Option(), _) -> <id>
     with rules( lhs-sort :+ _ -> $[Option([x])] )
 
 strategies

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Wed Nov 16 14:18:16 2011	(r23609)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Wed Nov 16 16:38:10 2011	(r23610)
@@ -46,7 +46,7 @@
 
   // Invoked by declare-sdf-definition-internal
   declare-sdf-usage:
-    Placeholder(_, sort(x), _, _) -> <id>
+    Placeholder(sort(x), _, _) -> <id>
     with
       rules(Usage: x -> x)
 

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Wed Nov 16 14:18:16 2011	(r23609)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Wed Nov 16 16:38:10 2011	(r23610)
@@ -112,11 +112,17 @@
     alltd(origin-track-forced(templatelang-element-desugar))
 
   templatelang-element-desugar:
-    NoOptions() -> Options([])
+    NoOptions() -> []
 
   templatelang-element-desugar:
+    Options(x) -> <alltd(origin-track-forced(templatelang-option-desugar))> x
+
+  templatelang-option-desugar:
     Separator(x) -> Separator(<origin-track-forced(un-double-quote; unescape)> x)
 
+  templatelang-option-desugar:
+    Placeholder(x) -> Placeholder(<origin-track-forced(un-double-quote; unescape)> x)
+
   templatelang-element-desugar:
     Escape(t) -> String(t')
     with

From tobivollebregt at gmail.com  Wed Nov 16 21:10:01 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 16 Nov 2011 20:10:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23611 -
	spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang
Message-ID: <20111116201001.5432BCC290@mx4.tudelft.nl>

Author: tvo
Date: Wed Nov 16 20:10:00 2011
New Revision: 23611
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23611&sc=1

Log:
fix tests

Modified:
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
   spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -4,7 +4,7 @@
 start symbol SdfProduction
 
 test transform SdfProductionWithCons without attrs into prod [[ X.Y = ]]
-run templatelang-desugar-sdf-top to 
+run templatelang-desugar-sdf-top to
   prod([], sort("X"), attrs([term(default(appl(unquoted("cons"),[fun(quoted("\"Y\""))])))]))
 
 test transform SdfProductionWithCons with attrs into prod [[ X.Y = {left} ]]

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -3,70 +3,74 @@
 language SpoofaxLang
 start symbol Template
 
-test transform NoOptions() into Options(...) [[ <<<Z>>> ]]
+test transform NoOptions() into empty list [[ <<Z>> ]]
 run templatelang-template-desugar to
-  SingleLineTemplate([Placeholder(_, _, _, Options([]))])
+  SingleLineTemplate([Placeholder(_, _, [])])
+
+test transform Options(...) into ... [[ <<Z; anchor, wrap>> ]]
+run templatelang-template-desugar to
+  SingleLineTemplate([Placeholder(_, _, [Anchor(), Wrap()])])
 
 // NOTE: Do not replace the tab in the next line with a space!
-test replace tabs with two spaces [[ <<c  d>> ]]
+test replace tabs with two spaces [[ <c  d> ]]
 run templatelang-template-desugar to SingleLineTemplate([
   String("c"), Layout("  "), String("d")
 ])
 
 // FIXME: Add tab char, see also spoofax-431.spt
-test unescape common escape chars (1) [[ <<<\ \'\"\r\n>>> ]]
+test unescape common escape chars (1) [[ <<\ \'\"\r\n>> ]]
 run templatelang-template-desugar to SingleLineTemplate([String(" '\"\r\n")])
 
 test unescape common escape chars (2) [[ "\ \'\"\r\n" ]]
 run templatelang-template-desugar to SingleLineTemplate([String(" '\"\r\n")])
 
-test unescape escaped brackets (1) [[ <<\<\>\\>> ]]
+test unescape escaped brackets (1) [[ <\<\>\\> ]]
 run templatelang-template-desugar to SingleLineTemplate([String("<>\\")])
 
-test unescape escaped brackets (2) [[[ [[\[\]\\]] ]]]
+test unescape escaped brackets (2) [[[ [\[\]\\] ]]]
 run templatelang-template-desugar to SingleLineTemplate([String("[]\\")])
 
-test unescape line ending (1) [[ <<<\\>  
->> ]]
+test unescape line ending (1) [[ <<\\>  
+> ]]
 run templatelang-template-desugar to SingleLineTemplate([String("")])
 
-test unescape line ending (2) [[[ [[[\\]  
-]] ]]]
+test unescape line ending (2) [[[ [[\\]  
+] ]]]
 run templatelang-template-desugar to SingleLineTemplate([String("")])
 
-test unescape unicode codepoints [[ <<<\u41\u61>>> ]]
+test unescape unicode codepoints [[ <<\u41\u61>> ]]
 run templatelang-template-desugar to SingleLineTemplate([String("Aa")])
 
-test unescape separators [[ <<<Z*; separator="\n">>> ]]
+test unescape separators [[ <<Z*; separator="\n">> ]]
 run templatelang-template-desugar to SingleLineTemplate([
-  Placeholder(_, _, _, Options([Separator("\n")]))
+  Placeholder(_, _, [Separator("\n")])
 ])
 
-test remove first and last line [[ <<
-  >> ]]
+test remove first and last line [[ <
+  > ]]
 run templatelang-template-desugar to Template([])
 
-test don't remove middle line [[ <<
+test don't remove middle line [[ <
 
-  >> ]]
+  > ]]
 run templatelang-template-desugar to Template([_])
 
-test remove indentation [[ <<
+test remove indentation [[ <
     one
 
        two
-  >> ]]
+  > ]]
 run templatelang-template-desugar to Template([
   Line([Layout(""), String("one")]),
   Line(_),
   Line([Layout("   "), String("two")])
 ])
 
-test don't remove leading layout in single line template [[ << x>> ]]
+test don't remove leading layout in single line template [[ < x> ]]
 run templatelang-template-desugar to SingleLineTemplate([Layout(_), String(_)])
 
-test don't remove trailing layout in single line template [[ <<x >> ]]
+test don't remove trailing layout in single line template [[ <x > ]]
 run templatelang-template-desugar to SingleLineTemplate([String(_), Layout(_)])
 
-test don't put leading layout in single line template [[ <<x>> ]]
+test don't put leading layout in single line template [[ <x> ]]
 run templatelang-template-desugar to SingleLineTemplate([String(_)])

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -3,31 +3,40 @@
 language SpoofaxLang
 start symbol Template
 
-test empty [[ <<>> ]]
+test empty [[ <> ]]
 parse to Template([Line([])])
 
-test parse common escape chars [[ <<<\ \'\"\t\r\n>>> ]]
+test parse common escape chars [[ <<\ \'\"\t\r\n>> ]]
 parse to Template([Line([Escape("<\\ \\'\\\"\\t\\r\\n>")])])
 
-test parse escaped brackets (1) [[ <<\<\>\\>> ]]
+test parse escaped brackets (1) [[ <\<\>\\> ]]
 parse to Template([Line([Escape("\\<\\>\\\\")])])
 
-test parse escaped brackets (2) [[[ [[\[\]\\]] ]]]
+test parse escaped brackets (2) [[ [\[\]\\] ]]
 parse to Template([Line([Escape("\\[\\]\\\\")])])
 
-test parse line ending (1) [[ <<<\\>
->> ]]
+test parse line ending (1) [[ <<\\>
+> ]]
 parse to Template([Line([Escape("<\\\\>\n")])])
 
-test parse line ending (2) [[[ [[[\\]
-]] ]]]
+test parse line ending (2) [[[ [[\\]
+] ]]]
 parse to Template([Line([Escape("[\\\\]\n")])])
 
-test parse separator (1) [[ <<<X; separator="\n">>> ]]
-parse to Template([Line([Placeholder(_, _, _, Options([Separator("\"\\n\"")]))])])
+test parse separator (1) [[ <<X; separator="\n">> ]]
+parse to Template([Line([Placeholder(_, _, Options([Separator("\"\\n\"")]))])])
 
-test parse separator (2) [[ <<<X; separator=",">>> ]]
-parse to Template([Line([Placeholder(_, _, _, Options([Separator("\",\"")]))])])
+test parse separator (2) [[ <<X; separator=",">> ]]
+parse to Template([Line([Placeholder(_, _, Options([Separator("\",\"")]))])])
 
-test parse separator (3) [[ <<<X; separator="x y">>> ]]
-parse to Template([Line([Placeholder(_, _, _, Options([Separator("\"x y\"")]))])])
+test parse separator (3) [[ <<X; separator="x y">> ]]
+parse to Template([Line([Placeholder(_, _, Options([Separator("\"x y\"")]))])])
+
+test parse anchor option [[ <<X; anchor>> ]]
+parse to Template([Line([Placeholder(_, _, Options([Anchor()]))])])
+
+test parse wrap option [[ <<X; wrap>> ]]
+parse to Template([Line([Placeholder(_, _, Options([Wrap()]))])])
+
+test parse text option [[ <<X; text="x y">> ]]
+parse to Template([Line([Placeholder(_, _, Options([Placeholder("\"x y\"")]))])])

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -7,20 +7,20 @@
 language SpoofaxLang
 
 // this test succeeds
-test tab char (1) [[ <<	>> ]] // tab char!
+test tab char (1) [[ <	> ]] // tab char!
 parse to Template([Line([Layout("	")])]) // tab char!
 
 // this test fails
-// test tab char (2) [[ <<	>> ]] // tab char!
+// test tab char (2) [[ <	> ]] // tab char!
 // parse to Template([Layout("\t")])
 
 // but this test fails(!)
-// test newline char (1) [[ <<
-// >> ]]
+// test newline char (1) [[ <
+// > ]]
 // parse to Template([Newline("
 // ")])
 
 // and this test succeeds(!)
-// test newline char (2) [[ <<
-// >> ]]
+// test newline char (2) [[ <
+// > ]]
 // parse to Template([Newline("\n")])

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -14,54 +14,54 @@
   completions
 ]]
 
-test empty [[ X.Y = <<>> ]]
+test empty [[ X.Y = <> ]]
 run test-templatelang-to-esv to [[ ]]
 
-test placeholder [[ X.Y = <<foo <Z> bar>> ]]
+test placeholder [[ X.Y = <foo <Z> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo Z bar" = "foo " <Z:Z> " bar"
 ]]
 
-test placeholder (text) [[ X.Y = <<foo < display text : Z> bar>> ]]
+test placeholder (text) [[ X.Y = <foo <Z; text=" display text "> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo display text bar" = "foo " < display text :Z> " bar"
 ]]
 
-test placeholder (option) [[ X.Y = <<foo <Z?> bar>> ]]
+test placeholder (option) [[ X.Y = <foo <Z?> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo bar" = "foo " <:Z> " bar"
 ]]
 
-test placeholder (plus) [[ X.Y = <<foo <Z+> bar>> ]]
+test placeholder (plus) [[ X.Y = <foo <Z+> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo Z bar" = "foo " <Z:Z> " bar"
 ]]
 
-test placeholder (star) [[ X.Y = <<foo <Z*> bar>> ]]
+test placeholder (star) [[ X.Y = <foo <Z*> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo bar" = "foo " <:Z> " bar"
 ]]
 
 test n placeholders => one (cursor)-directive [[
-  X.Y = <<
+  X.Y = <
     foo
       <A?>
       <B?>
       <C?>
     bar
-  >>
+  >
 ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo bar" = "foo\n\t" (cursor) "\nbar" (blank)
 ]]
 
 test if then statement [[
-  Statement.IfThen = <<
+  Statement.IfThen = <
     <MetaAnno*; separator="\n">
     if <Exp> then
       <Statement*; separator="\n">
     end
-  >>
+  >
 ]]
 run test-templatelang-to-esv to [[
   completion template Statement: "if Exp then end" =

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -17,7 +17,7 @@
 test directed expansion (prefer) [[
   A.F = "foo"
   A.B = "bar" {completion(prefer)}
-  B = <<x: <A>>>
+  B = <x: <A>>
 ]]
 run test-templatelang-to-esv to [[
   completion template A: "foo" = "foo"
@@ -28,7 +28,7 @@
 test directed expansion (avoid) [[
   A.F = "foo" {completion(avoid)}
   A.B = "bar"
-  B = <<x: <A>>>
+  B = <x: <A>>
 ]]
 run test-templatelang-to-esv to [[
   completion template A: "foo" = "foo"
@@ -40,7 +40,7 @@
   A.F = "foo" {deprecated}
   A.FF = "ffoo" {deprecated("don't panic")}
   A.B = "bar"
-  B = <<x: <A>>>
+  B = <x: <A>>
 ]]
 run test-templatelang-to-esv to [[
   // WRONG: completion template A: "foo" = "foo"
@@ -51,13 +51,13 @@
 ]]
 
 test Mobl module [[
-  QId = <<<ID>>>
-  QId.QId = <<<QId>::<ID>>>
-  Start.Module = <<
+  QId = <<ID>>
+  QId.QId = <<QId>::<ID>>
+  Start.Module = <
     module <QId>
 
     <Definition*; separator="\n">
-  >>
+  >
 ]]
 run test-templatelang-to-esv to [[
   completion template QId: "ID::ID" = <ID:QId> "::" <ID:ID>
@@ -66,22 +66,22 @@
 ]]
 
 test Mobl types [[[[
-  QId = <<<ID>>>
-  QId.QId = <<<QId>::<ID>>>
-  NFType.SimpleType = <<<QId>>>
-  NFType.GenericType = [[[QId]<[Type*; separator=", "]>]]
-  NFType.TupleType = <<(<Type*; separator=", ">)>>
-  NFType.ArrayType = <<[<Type>]>>
-  NFType.DynamicType = <<?>>
-  Type = <<<NFType>>>
-  Type.FunctionType = [[[NFType+; separator=" * "] -> [NFType]]] {avoid}
+  QId = <<ID>>
+  QId.QId = <<QId>::<ID>>
+  NFType.SimpleType = <<QId>>
+  NFType.GenericType = [[QId]<[Type*; separator=", "]>]
+  NFType.TupleType = <(<Type*; separator=", ">)>
+  NFType.ArrayType = <[<Type>]>
+  NFType.DynamicType = <?>
+  Type = <<NFType>>
+  Type.FunctionType = [[NFType+; separator=" * "] -> [NFType]] {avoid}
 
-  FunctionDef.Function = <<
+  FunctionDef.Function = <
     <MetaAnno*; separator="\n">
     function <QId>(<FArg*; separator=", ">) : <Type> {
       <Statement*; separator="\n">
     }
-  >>
+  >
 ]]]]
 run test-templatelang-to-esv to [[
   completion template QId: "ID::ID" = <ID:QId> "::" <ID:ID>
@@ -95,7 +95,7 @@
 ]]
 
 test template-character-count
-  !(String("foo"), Placeholder(Text("f"), "Sort", None(), Options([])), [Layout("bar"), String("baz")]);
+  !(String("foo"), Placeholder("Sort", None(), Options([Placeholder("f")])), [Layout("bar"), String("baz")]);
   template-character-count => 10
 
 test substring(1, -1)

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -15,28 +15,28 @@
 ]]
 
 test stuff [[
-  Statement.IfThen = <<
+  Statement.IfThen = <
     <MetaAnno*; separator="\n">
     if <Exp> then
       <Statement*; separator="\n">
     end
-  >>
-  Statement.For = <<
+  >
+  Statement.For = <
     <MetaAnno*; separator="\n">
     for (<Exp>; <Exp>; <Exp>) do
       <Statement*; separator="\n">
     end
-  >>
+  >
 
-  Exp = <<<Term>>>
+  Exp = <<Term>>
 
-  Term = <<<Factor>>>
-  Term.BinOp = <<<Term> <TermOp> <Factor>>>
+  Term = <<Factor>>
+  Term.BinOp = <<Term> <TermOp> <Factor>>
 
-  Factor = <<<Var>>>
-  Factor.BinOp = <<<Factor> <FactorOp> <Var>>>
+  Factor = <<Var>>
+  Factor.BinOp = <<Factor> <FactorOp> <Var>>
 
-  Var.Var = <<$<ID>$>>
+  Var.Var = <$<ID>$>
 
   TermOp.Plus = "+"
   TermOp.Minus = "-"

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -33,7 +33,7 @@
   lexical syntax
     BoolMethodId = "||"
   templates
-    Exp.BinOp = <<<Exp> <BoolMethodId> <Exp>>>
+    Exp.BinOp = <<Exp> <BoolMethodId> <Exp>>
 ]]
 run test-templatelang-to-esv to [[
   completion template BoolMethodId: "||" = "||"
@@ -51,7 +51,7 @@
   lexical syntax
     "if" -> ID {reject}
   templates
-    Exp.Var = <<*<ID>>>
+    Exp.Var = <*<ID>>
 ]]
 run test-templatelang-to-esv to [[
 	completion template Exp: "*ID" = "*" <ID:ID>

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -24,34 +24,31 @@
   -> X {cons("Y")}
 ]]
 
-test placeholder [[ X.Y = <<<Z>>> ]]
+test placeholder [[ X.Y = <<Z>> ]]
 run test-templatelang-to-sdf to [[ Z -> X {cons("Y")} ]]
 
-test placeholder (text) [[ X.Y = <<<this text is ignored : Z>>> ]]
-run test-templatelang-to-sdf to [[ Z -> X {cons("Y")} ]]
-
-test placeholder (option) [[ X.Y = <<<Z?>>> ]]
+test placeholder (option) [[ X.Y = <<Z?>> ]]
 run test-templatelang-to-sdf to [[ Z? -> X {cons("Y")} ]]
 
-test placeholder (plus) [[ X.Y = <<<Z+>>> ]]
+test placeholder (plus) [[ X.Y = <<Z+>> ]]
 run test-templatelang-to-sdf to [[ Z+ -> X {cons("Y")} ]]
 
-test placeholder (star) [[ X.Y = <<<Z*>>> ]]
+test placeholder (star) [[ X.Y = <<Z*>> ]]
 run test-templatelang-to-sdf to [[ Z* -> X {cons("Y")} ]]
 
-test placeholder (plus, separator) [[ X.Y = <<<Z+; separator=", ">>> ]]
+test placeholder (plus, separator) [[ X.Y = <<Z+; separator=", ">> ]]
 run test-templatelang-to-sdf to [[ {Z ","}+ -> X {cons("Y")} ]]
 
-test placeholder (star, separator) [[ X.Y = <<<Z*; separator=" + ">>> ]]
+test placeholder (star, separator) [[ X.Y = <<Z*; separator=" + ">> ]]
 run test-templatelang-to-sdf to [[ {Z "+"}* -> X {cons("Y")} ]]
 
-test escaped chars in literal [[ X.Y = <<<\"\t\n><Z>>> ]]
+test escaped chars in literal [[ X.Y = <<\"\t\n><Z>> ]]
 run test-templatelang-to-sdf to [[ "\"\t\n" Z -> X {cons("Y")} ]]
 
-test escaped chars in separator [[ X.Y = <<<Z*; separator="\"">>> ]]
+test escaped chars in separator [[ X.Y = <<Z*; separator="\"">> ]]
 run test-templatelang-to-sdf to [[ {Z "\""}* -> X {cons("Y")} ]]
 
-test completion(...) attribute is erased [[ X.Y = <<<Z>>> {completion(prefer) }]]
+test completion(...) attribute is erased [[ X.Y = <<Z>> {completion(prefer) }]]
 run test-templatelang-to-sdf to [[ Z -> X {cons("Y")} ]]
 
 target setup footer [[

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -9,23 +9,23 @@
   templates
     // multi line template
     // placeholder @ (start, middle, end)
-    Statement.IfThen = <<
+    Statement.IfThen = <
       <MetaAnno*; separator="\n">
       if <Exp> then
         <Statement*; separator="\n">
       else
         <Statement*; separator="\n">
-    >>
+    >
     // placeholder @ start & end
-    Statements = <<
+    Statements = <
       <Statement*; separator="\n">
-    >>
+    >
     // single line template
-    Exp.Plus = <<<Exp> + <Exp>>>
+    Exp.Plus = <<Exp> + <Exp>>
     // injection (1)
-    Statement = <<<Comment>>>
+    Statement = <<Comment>>
     // injection (2)
-    Statement.Comment = <<<Comment>>>
+    Statement.Comment = <<Comment>>
 ]]
 
 target setup header [[

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -20,40 +20,54 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
+    pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
     pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
     pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
+    pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
+
+    all-lines-except-first(s) =
+        is-string
+      ; string-tokenize-keep-empty(|['
+'])
+      ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
+               < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
+               + where(![] => laststring))    // ... or not.
+      ; ([id | map(s)] + [])
+      ; <separate-by> ("\n", <id>)
+      ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
+      ; concat-strings
+
+    prefix-lines-except-first(|p) =
+      all-lines-except-first(<conc-strings> (p, <id>))
   strategies
     prettyprint-X: Y(a) -> a'
       // The strategies invoked here differ per test
       // The footer contains a last, common line.
 ]]
 
-test placeholder (single line, injection) [[ X.Y = <<<Z>>> ]]
+test placeholder (single line, injection) [[ X.Y = <<Z>> ]]
 run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
 
 test placeholder (multi line, injection) [[
-  X.Y = <<
+  X.Y = <
     <Z>
-  >>
+  >
 ]]
 run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
 
-test placeholder (text) [[ X.Y = <<<this text is ignored : Z>>> ]]
-run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
-
-test placeholder (plus) [[ X.Y = <<<Z+>>> ]]
+test placeholder (plus) [[ X.Y = <<Z+>> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" ")> a ]]
 
-test placeholder (star) [[ X.Y = <<<Z*>>> ]]
+test placeholder (star) [[ X.Y = <<Z*>> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" ")> a ]]
 
-test placeholder (plus, separator) [[ X.Y = <<<Z+; separator=", ">>> ]]
+test placeholder (plus, separator) [[ X.Y = <<Z+; separator=", ">> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|", ")> a ]]
 
-test placeholder (star, separator) [[ X.Y = <<<Z*; separator=" + ">>> ]]
+test placeholder (star, separator) [[ X.Y = <<Z*; separator=" + ">> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" + ")> a ]]
 
-test escaped chars in separator [[ X.Y = <<<Z*; separator="\"\t">>> ]]
+test escaped chars in separator [[ X.Y = <<Z*; separator="\"\t">> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|"\"\t")> a ]]
 
 target setup footer [[

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -11,12 +11,12 @@
   package example
   module example
   templates
-    Statement.IfThen = <<
+    Statement.IfThen = <
       <MetaAnno*; separator="\n">
       if <Exp> then
         <Statement*; separator="\n">
       end
-    >>
+    >
 ]]
 run test-templatelang-to-str to [[
   module prettyprinter
@@ -25,8 +25,25 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
+    pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
     pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
     pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
+    pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
+
+    all-lines-except-first(s) =
+        is-string
+      ; string-tokenize-keep-empty(|['
+'])
+      ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
+               < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
+               + where(![] => laststring))    // ... or not.
+      ; ([id | map(s)] + [])
+      ; <separate-by> ("\n", <id>)
+      ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
+      ; concat-strings
+
+    prefix-lines-except-first(|p) =
+      all-lines-except-first(<conc-strings> (p, <id>))
   strategies
     prettyprint-Statement: IfThen(a, b, c) -> zz
       where

Modified: spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt
==============================================================================
--- spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt	Wed Nov 16 16:38:10 2011	(r23610)
+++ spoofax-imp/branches/spoofaxlang-with-traditional-index/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt	Wed Nov 16 20:10:00 2011	(r23611)
@@ -16,27 +16,44 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
+    pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
     pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
     pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
+    pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
+
+    all-lines-except-first(s) =
+        is-string
+      ; string-tokenize-keep-empty(|['
+'])
+      ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
+               < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
+               + where(![] => laststring))    // ... or not.
+      ; ([id | map(s)] + [])
+      ; <separate-by> ("\n", <id>)
+      ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
+      ; concat-strings
+
+    prefix-lines-except-first(|p) =
+      all-lines-except-first(<conc-strings> (p, <id>))
 ]]
 
-test injection (1) [[ QId = <<<ID>>> ]]
+test injection (1) [[ QId = <<ID>> ]]
 run test-templatelang-to-str
 
-test injection (2) [[ QId = <<#<ID>#>> ]]
+test injection (2) [[ QId = <#<ID>#> ]]
 run test-templatelang-to-str
 
-test keyword injection (1) [[ Expression.SomeKeyword = <<somekeyword>> ]]
+test keyword injection (1) [[ Expression.SomeKeyword = <somekeyword> ]]
 run test-templatelang-to-str
 
-test keyword injection (2) [[ Expression.SomeKeyword = << somekeyword >> ]]
+test keyword injection (2) [[ Expression.SomeKeyword = < somekeyword > ]]
 run test-templatelang-to-str
 
 test indentation of placeholder at end of template [[
-  Start.Configuration = <<
+  Start.Configuration = <
     configuration
       <Setting*; separator="\n">
-  >>
+  >
 ]]
 run test-templatelang-to-str to [[
   strategies
@@ -50,10 +67,10 @@
 
 // silly test; there might be a real use case though
 test indentation of placeholder at start of template [[
-  Start.Configuration = <<
+  Start.Configuration = <
       <Setting*; separator="\n">
     configuration
-  >>
+  >
 ]]
 run test-templatelang-to-str to [[
   strategies
@@ -65,7 +82,7 @@
     prettyprint-Setting = is-string
 ]]
 
-test escaped chars in literal (1) [[ X.Y = <<<\"\t>>> ]]
+test escaped chars in literal (1) [[ X.Y = <<\"\t>> ]]
 run test-templatelang-to-str to [[
   strategies
     prettyprint-X :
@@ -73,7 +90,7 @@
   strategies
 ]]
 
-test escaped chars in literal (2) [[ X.Y = <<<\"\t><Z>>> ]]
+test escaped chars in literal (2) [[ X.Y = <<\"\t><Z>> ]]
 run test-templatelang-to-str to [[
   strategies
     prettyprint-X :

From M.A.Akhter at student.tudelft.nl  Thu Nov 17 10:52:58 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 17 Nov 2011 09:52:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23612 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax:
	lib/Configuration syntax
Message-ID: <20111117095258.E765C2B800E@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Nov 17 09:52:56 2011
New Revision: 23612
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23612&sc=1

Log:
merging changes in syntax

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.generated.pp.af
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.tbl
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.generated.pp.af
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.generated.pp.af	Wed Nov 16 20:10:00 2011	(r23611)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.generated.pp.af	Thu Nov 17 09:52:56 2011	(r23612)
@@ -1 +1 @@
-PP-Table([PP-Entry(Path1("Configuration"),V([],[H([],[FBOX(KW,S("\"configuration\""))]),Arg("1")])),PP-Entry(Path("Configuration",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Includes"),V([],[H([],[FBOX(KW,S("\"src\"")),FBOX(KW,S("\":\""))]),Arg("1")])),PP-Entry(Path("Includes",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("Source"),[Arg("1"),Arg("2")]),PP-Entry(Path1("SpxProjects"),V([],[H([],[FBOX(KW,S("\"projectreferences\"")),FBOX(KW,S("\":\""))]),Arg("1")])),PP-Entry(Path("SpxProjects",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("CodeGeneration"),V([],[H([],[FBOX(KW,S("\"codegen:\""))]),Arg("1")])),PP-Entry(Path("CodeGeneration",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("OutputDirectory"),[FBOX(KW,S("\"todir\"")),FBOX(KW,S("\":\"")),Arg("1")]),PP-Entry(Path1("STROutputMode"),[FBOX(KW,S("\"stroutputmode\"")),FBOX(KW,S("\":\"")),Arg("1")]),PP-Entry(Path1("CTree"),[FBOX(KW,S("\"ctree\""))]),PP-Entry(Path1("Jar"),[FBOX(KW,S("\"jar\
 ""))]),PP-Entry(Path1("All"),[FBOX(KW,S("\"|\"")),FBOX(KW,S("\"**\""))]),PP-Entry(Path1("ThisOnly"),[FBOX(KW,S("\"|\"")),FBOX(KW,S("\".\""))])])
\ No newline at end of file
+PP-Table([PP-Entry(Path1("Configuration"),V([],[H([],[FBOX(KW,S("\"configuration\""))]),Arg("1")])),PP-Entry(Path("Configuration",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Includes"),V([],[H([],[FBOX(KW,S("\"src\"")),FBOX(KW,S("\":\""))]),Arg("1")])),PP-Entry(Path("Includes",[selector("1","iter")]),[Arg("1")]),PP-Entry(Path1("Source"),[Arg("1"),Arg("2")]),PP-Entry(Path1("SpxProjects"),V([],[H([],[FBOX(KW,S("\"projectreferences\"")),FBOX(KW,S("\":\""))]),Arg("1")])),PP-Entry(Path("SpxProjects",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Debug"),V([],[H([],[FBOX(KW,S("\"log\"")),FBOX(KW,S("\":\""))]),Arg("1")])),PP-Entry(Path("Debug",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("TemplateLang"),[FBOX(KW,S("\"templatelang\"")),FBOX(KW,S("\":\"")),Arg("1")]),PP-Entry(Path1("TemplatelangEnabled"),[FBOX(KW,S("\"enabled\""))]),PP-Entry(Path1("TemplatelangDisabled"),[FBOX(KW,S("\"disabled\""))]),PP-Entry(Path1("DebugCompi
 ler"),[FBOX(KW,S("\"compiler\""))]),PP-Entry(Path1("DebugDeclaration"),[FBOX(KW,S("\"declaration\""))]),PP-Entry(Path1("DebugAnalysis"),[FBOX(KW,S("\"analysis\""))]),PP-Entry(Path1("DebugSymbolTable"),[FBOX(KW,S("\"symboltable\""))]),PP-Entry(Path1("DebugAll"),[FBOX(KW,S("\"all\""))]),PP-Entry(Path1("DebugNone"),[FBOX(KW,S("\"none\""))]),PP-Entry(Path1("CodeGeneration"),V([],[H([],[FBOX(KW,S("\"codegen:\""))]),Arg("1")])),PP-Entry(Path("CodeGeneration",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("OutputDirectory"),[FBOX(KW,S("\"todir\"")),FBOX(KW,S("\":\"")),Arg("1")]),PP-Entry(Path1("STROutputMode"),[FBOX(KW,S("\"stroutputmode\"")),FBOX(KW,S("\":\"")),Arg("1")]),PP-Entry(Path1("CTree"),[FBOX(KW,S("\"ctree\""))]),PP-Entry(Path1("Jar"),[FBOX(KW,S("\"jar\""))]),PP-Entry(Path1("All"),[FBOX(KW,S("\"|\"")),FBOX(KW,S("\"**\""))]),PP-Entry(Path1("ThisOnly"),[FBOX(KW,S("\"|\"")),FBOX(KW,S("\".\""))])])
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.str	Wed Nov 16 20:10:00 2011	(r23611)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.str	Thu Nov 17 09:52:56 2011	(r23612)
@@ -2,19 +2,29 @@
 
 signature
   constructors
-    ThisOnly        : IncludeOption
-    All             : IncludeOption
-    Jar             : STROutputMode
-    CTree           : STROutputMode
-    STROutputMode   : STROutputMode -> CodeGenDefinition
-    OutputDirectory : RelativePath -> CodeGenDefinition
-    Source          : RelativePath * IncludeOption -> IncludeDefinition
-    CodeGeneration  : List(CodeGenDefinition) -> ConfigSection
-    SpxProjects     : List(ProjectName) -> ConfigSection
-    Includes        : List(IncludeDefinition) -> ConfigSection
-    Configuration   : List(ConfigSection) -> Start
-                    : String -> RelativePath
-                    : String -> ProjectName
+    ThisOnly             : IncludeOption
+    All                  : IncludeOption
+    Jar                  : STROutputMode
+    CTree                : STROutputMode
+    STROutputMode        : STROutputMode -> CodeGenDefinition
+    OutputDirectory      : RelativePath -> CodeGenDefinition
+    DebugNone            : DebugOption
+    DebugAll             : DebugOption
+    DebugSymbolTable     : DebugOption
+    DebugAnalysis        : DebugOption
+    DebugDeclaration     : DebugOption
+    DebugCompiler        : DebugOption
+    TemplatelangDisabled : TemplateLangOption
+    TemplatelangEnabled  : TemplateLangOption
+    Source               : RelativePath * IncludeOption -> IncludeDefinition
+    CodeGeneration       : List(CodeGenDefinition) -> ConfigSection
+    TemplateLang         : TemplateLangOption -> ConfigSection
+    Debug                : List(DebugOption) -> ConfigSection
+    SpxProjects          : List(ProjectName) -> ConfigSection
+    Includes             : List(IncludeDefinition) -> ConfigSection
+    Configuration        : List(ConfigSection) -> Start
+                         : String -> RelativePath
+                         : String -> ProjectName
 
 
 signature

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Configuration/SpoofaxConfiguration.tbl
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Wed Nov 16 20:10:00 2011	(r23611)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Thu Nov 17 09:52:56 2011	(r23612)
@@ -123,9 +123,11 @@
     "cons" "(" Constructor ")"  -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"cons\"), [fun(quoted(<1>))])))")}
     StrCon[[SDF]]               -> Constructor
 
-
-
   %% for testing only. playing with code-contracts in spoofax lang.
   context-free syntax
+    
+    "internal" "strategies" Def[[STR]]*     -> Decl[[STR]] {cons("InternalStrategies")}
+    "internal" "rules"      Def[[STR]]*     -> Decl[[STR]]{cons("InternalRules")}
+    
 		Var[[STR]] "as" ID -> Var[[STR]] {avoid, cons("VarWithType")}
 

From M.A.Akhter at student.tudelft.nl  Thu Nov 17 11:13:16 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 17 Nov 2011 10:13:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23613 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms
Message-ID: <20111117101316.717412B800E@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Nov 17 10:13:16 2011
New Revision: 23613
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23613&sc=1

Log:
making strategosublist serializable. adding serialVersionUID

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java	Thu Nov 17 09:52:56 2011	(r23612)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoSubList.java	Thu Nov 17 10:13:16 2011	(r23613)
@@ -11,6 +11,8 @@
 public class StrategoSubList extends StrategoWrapped implements IStrategoList {
 
 
+	private static final long serialVersionUID = -2495148050199572355L;
+
 	private final IStrategoList completeList;
 
 	private int indexStart;

From m.dejonge at tudelft.nl  Thu Nov 17 11:58:49 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 17 Nov 2011 10:58:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23614 -
	sglr-recovery/trunk/ErrorScenarios
Message-ID: <20111117105849.A1C14CC0FC@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov 17 10:58:49 2011
New Revision: 23614
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23614&sc=1

Log:
Share project "ErrorScenarios" into "https://svn.strategoxt.org/repos/StrategoXT/sglr-recovery/trunk"

Added:
   sglr-recovery/trunk/ErrorScenarios/

From m.dejonge at tudelft.nl  Thu Nov 17 12:02:03 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 17 Nov 2011 11:02:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23615 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111117110203.A7C1B2B800E@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov 17 11:02:03 2011
New Revision: 23615
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23615&sc=1

Log:


Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str	Thu Nov 17 10:58:49 2011	(r23614)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str	Thu Nov 17 11:02:03 2011	(r23615)
@@ -121,7 +121,7 @@
 		err-string-prefix := <map(Snd); concat-strings> prefix; //debug(!3);
 		err-string-suffix := <map(Snd); concat-strings> suffix; //debug(!4);
 		err-string := <concat-strings> [err-string-prefix, new-token-text, err-string-suffix]; //debug(!5);
-		prefix-length := <string-length> err-string-prefix //;debug(!6)
+		prefix-length := <origin-text; string-length; inc> trm  //;debug(!6) //TODO: Distinct length for error region and length for cursor loc
 
 find-parent-of-token(|token):
 	ast -> trm

From m.dejonge at tudelft.nl  Thu Nov 17 12:48:56 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 17 Nov 2011 11:48:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23616 - in
	sglr-recovery/trunk/ErrorScenarios/src: . evaluation_runs
	fileprocessing
Message-ID: <20111117114856.62FE0CC2C1@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov 17 11:48:55 2011
New Revision: 23616
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23616&sc=1

Log:
code for classifying edit scenarios using a set of permissive grammars and SGLR with configurable finegrained recovery

Added:
   sglr-recovery/trunk/ErrorScenarios/src/
   sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/
   sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Classification.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Completion.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/RunBigTestset.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Scalability.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Testing.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ClassificationRun.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/Directories.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ErrorClassifier.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileProcessing.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileUtils.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FilenameFilters.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/Results.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/TestFile.java   (contents, props changed)
   sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/TestRun.java   (contents, props changed)

Added: sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Classification.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Classification.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,51 @@
+package evaluation_runs;
+
+
+import org.junit.Test;
+
+import fileprocessing.ClassificationRun;
+import fileprocessing.ClassificationRun.ParserSetting;
+
+public class Classification {
+	
+	/*
+	@Test
+	public void test_classification_xxx() throws Exception {
+		final String sourceDirName = "unclassified_students";
+		ClassificationRun run = new ClassificationRun("stratego");
+		run.addClassifier(sourceDirName, "4_Delete_Terminal", "Stratego-Sugar-Delete_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);	
+		//run.addClassifier(sourceDirName, "7_Multiple", "Stratego-Sugar-Permissive.tbl", ParserSetting.MULTIPLE_ERRORS, false);	
+		run.classifyEditScenarios("ErrorCategories_XXX");
+	}*/
+	
+	@Test
+	public void test_classification() throws Exception {
+		
+		//final String sourceDirName = "unclassified_test";
+		//final String sourceDirName = "unclassified_researchers";
+		final String sourceDirName = "unclassified_students";
+		
+		ClassificationRun noErrorRun = new ClassificationRun("stratego");
+		noErrorRun.addClassifier(sourceDirName, "1_NoErrors", "Stratego-Sugar.tbl", ParserSetting.NO_ERRORS, false);
+		//noErrorRun.classifyEditScenarios("NoError_students");
+
+		ClassificationRun completionRun = new ClassificationRun("stratego");
+		completionRun.addClassifier(sourceDirName, "_Completion", "Stratego-Sugar-Completion.tbl", ParserSetting.COMPLETION, true);
+		//completionRun.classifyEditScenarios("Completion_students");
+		
+
+		ClassificationRun run = new ClassificationRun("stratego");
+		//run.addClassifier("unclassified", "1_NoErrors", "Stratego-Sugar.tbl", ParserSetting.NO_ERRORS, false);
+		//run.addClassifier("unclassified", "_Completion", "Stratego-Sugar-Completion.tbl", ParserSetting.COMPLETION, true);
+		//run.addClassifier(sourceDirName, "2_Insert_Terminal", "Stratego-Sugar-Insert_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);
+		//run.addClassifier(sourceDirName, "3_Insert_ID", "Stratego-Sugar-Insert_ID.tbl", ParserSetting.SINGLE_ERROR, false);
+		//run.addClassifier(sourceDirName, "4_Delete_Terminal", "Stratego-Sugar-Delete_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);
+		//run.addClassifier(sourceDirName, "5_Delete_ID", "Stratego-Sugar-Delete_ID.tbl", ParserSetting.SINGLE_ERROR, false);
+		//run.addClassifier(sourceDirName, "6_Replace_Terminal", "Stratego-Sugar-Replace_Terminal.tbl", ParserSetting.SINGLE_ERROR, false);
+		//run.addClassifier(sourceDirName, "7_Multiple", "Stratego-Sugar-Multiple.tbl", ParserSetting.MULTIPLE_ERRORS, false);
+		run.addClassifier(sourceDirName, "8_Single", "Stratego-Sugar-Multiple.tbl", ParserSetting.MULTIPLE_ERRORS_HEURISTIC, false);
+		//run.addClassifier(sourceDirName, "_Completion", "Stratego-Sugar-Completion.tbl", ParserSetting.COMPLETION, false);
+		//run.addClassifier(sourceDirName, sourceDirName, null, ParserSetting.ACCEPT_ALL, true); //unclassified category in classification statistics
+		run.classifyEditScenarios("ErrorCategories_students_Single");
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Completion.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Completion.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,52 @@
+package evaluation_runs;
+
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import org.junit.Test;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+
+import fileprocessing.Directories;
+import fileprocessing.FilenameFilters;
+import fileprocessing.TestRun;
+import fileprocessing.TestRun.Permissive;
+import fileprocessing.TestRun.Technique;
+
+public class Completion {
+	
+	private static final String TESTRUN_NAME = null; //name of result files, default is <technique>_<grammar>
+	private static final String TESTSUITE = "stratego-java-completions";
+
+	@Test
+	public void test_Completion() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun(TESTSUITE);
+		run.setTechnique(Technique.NO_RECOVERY_SUPPORT);
+		run.setPermissive(Permissive.COMPLETIONS);
+		run.setSuiteName(TESTRUN_NAME);
+		processFiles(run);
+	}
+
+	@Test
+	public void test_WC() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun(TESTSUITE);
+		run.setTechnique(Technique.RS_FG);
+		run.setPermissive(Permissive.WC);
+		run.setSuiteName(TESTRUN_NAME);
+		processFiles(run);
+	}
+
+	private void processFiles(TestRun run) throws IOException,
+			InvalidParseTableException, InterruptedException,
+			TokenExpectedException, BadTokenException, ParseException,
+			SGLRException, FileNotFoundException {
+		//run.correctInputFiles();
+		Directories.clearAllDirectories();
+		run.warmup();
+		run.processFilesCompletion(0, null);
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/RunBigTestset.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/RunBigTestset.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,63 @@
+package evaluation_runs;
+
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import org.junit.Test;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+
+import fileprocessing.Directories;
+import fileprocessing.FilenameFilters;
+import fileprocessing.TestRun;
+import fileprocessing.TestRun.Permissive;
+import fileprocessing.TestRun.Technique;
+
+public class RunBigTestset {
+	
+	
+	@Test
+	public void test_StrategoJava() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun("stratego-java");
+		processFiles(run);
+	}
+
+	@Test
+	public void test_StrategoJavaDetails() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun("stratego-java-details");
+		processFiles(run);
+	}
+
+	@Test
+	public void test_WebDsl() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun("webdsl");
+		processFiles(run);
+	}
+	
+	@Test
+	public void test_javaSQL() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun("java-sql");
+		processFiles(run);
+	}
+
+	@Test
+	public void test_java() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun("java-jdt");
+		processFiles(run);
+	}
+
+	private void processFiles(TestRun run) throws IOException,
+			InvalidParseTableException, InterruptedException,
+			TokenExpectedException, BadTokenException, ParseException,
+			SGLRException, FileNotFoundException {
+		//run.correctInputFiles();
+		Directories.clearAllDirectories();
+		run.setTechnique(Technique.RS_FG);
+		run.setPermissive(Permissive.WC);
+		run.processErrorFiles(0, null);
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Scalability.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Scalability.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,84 @@
+package evaluation_runs;
+
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import org.junit.Test;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+
+import fileprocessing.Directories;
+import fileprocessing.FilenameFilters;
+import fileprocessing.TestRun;
+import fileprocessing.TestRun.Permissive;
+import fileprocessing.TestRun.Technique;
+
+public class Scalability {
+	
+	private static final String TESTRUN_NAME = null; //name of result files, default is <technique>_<grammar>
+	private static final String TESTSUITE = "stratego-java-scalability";
+
+	@Test
+	public void test_Scalability_NonError_NoPG() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun(TESTSUITE);
+		run.setPermissive(Permissive.NoRecovery);
+		run.setSuiteName("err0_NoPermissive");
+		run.setTechnique(Technique.NO_RECOVERY_SUPPORT);
+		run.setFilenameFilter(FilenameFilters.getNameFilter("err0"));
+		processFiles(run);
+	}
+
+	@Test
+	public void test_Scalability_NonError_WC() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun(TESTSUITE);
+		run.setPermissive(Permissive.WC);
+		run.setSuiteName("err0_WC");
+		run.setTechnique(Technique.NO_RECOVERY_SUPPORT);
+		run.setFilenameFilter(FilenameFilters.getNameFilter("err0"));
+		processFiles(run);
+	}
+
+	@Test
+	public void test_Scalability_NonError_Completions() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun(TESTSUITE);
+		run.setPermissive(Permissive.COMPLETIONS);
+		run.setSuiteName("err0_Completions");
+		run.setTechnique(Technique.NO_RECOVERY_SUPPORT);
+		run.setFilenameFilter(FilenameFilters.getNameFilter("err0"));
+		processFiles(run);
+	}
+
+	@Test
+	public void test_Scalability_NonError_WC_Completions() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun(TESTSUITE);
+		run.setPermissive(Permissive.WC_COMPLETIONS);
+		run.setSuiteName("err0_WC_Completions");
+		run.setTechnique(Technique.NO_RECOVERY_SUPPORT);
+		run.setFilenameFilter(FilenameFilters.getNameFilter("err0"));
+		processFiles(run);
+	}
+
+	@Test
+	public void test_Scalability_Error_WC() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
+		TestRun run=new TestRun(TESTSUITE);
+		run.setPermissive(Permissive.WC);
+		run.setSuiteName("err5_WC");
+		run.setTechnique(Technique.RS_FG);
+		run.setFilenameFilter(FilenameFilters.getNameFilter("err5"));
+		processFiles(run);
+	}
+
+	private void processFiles(TestRun run) throws IOException,
+			InvalidParseTableException, InterruptedException,
+			TokenExpectedException, BadTokenException, ParseException,
+			SGLRException, FileNotFoundException {
+		//run.correctInputFiles();
+		Directories.clearAllDirectories();
+		run.warmup();
+		run.processErrorFiles(10, null);
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Testing.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/evaluation_runs/Testing.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,34 @@
+package evaluation_runs;
+
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import org.junit.Test;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+
+import fileprocessing.Directories;
+import fileprocessing.FilenameFilters;
+import fileprocessing.TestRun;
+import fileprocessing.TestRun.Permissive;
+import fileprocessing.TestRun.Technique;
+
+public class Testing {
+
+	@Test
+	public void test_Java() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException, InterpreterException {
+		TestRun run=new TestRun("java-jdt");
+		Directories.clearAllDirectories();
+		run.setTechnique(Technique.RS_FG);
+		run.setPermissive(Permissive.WC);
+		run.setSuiteName("test-failures");
+		run.setFilenameFilter(FilenameFilters.getNameFilter(new String[]{".107"})); //107
+		//run.setFilenameFilter(FilenameFilters.getNameFilter(new String[]{"second","first-last"}));
+		run.processErrorFiles(-1);
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ClassificationRun.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ClassificationRun.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,149 @@
+package fileprocessing;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.text.DecimalFormat;
+import java.util.ArrayList;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+
+public class ClassificationRun {
+	
+	private static final String ERROR_CLASSIFICATION_SUITES_DIR = "error-classification-suites";
+	private String suite;
+	ArrayList<ErrorClassifier> classifiers;
+
+	public ClassificationRun(String suite){
+		this.suite = suite;
+		this.classifiers = new ArrayList<ErrorClassifier>();
+	}
+	
+	public enum ParserSetting {
+		NO_ERRORS,
+		SINGLE_ERROR,
+		MULTIPLE_ERRORS,
+		MULTIPLE_ERRORS_HEURISTIC,
+		COMPLETION,
+		ACCEPT_ALL //for unclassified category
+	}
+
+	public void addClassifier(String sourceDirName, String targetDirName, String parseTableName, ParserSetting sglrSetting, boolean keepSourceFile) throws IOException, InvalidParseTableException{
+		ErrorClassifier classifier = new ErrorClassifier(
+			getPathToClassificationDir(sourceDirName),
+			getPathToClassificationDir(targetDirName), 
+			getPathToParseTable(parseTableName), 
+			sglrSetting, 
+			keepSourceFile);
+		classifiers.add(classifier);
+	}	
+
+	private String getPathToSuiteDir() {
+		return ERROR_CLASSIFICATION_SUITES_DIR+File.separator+this.suite+File.separator;
+	}
+
+	private String getPathToParseTable(String ptName) {
+		return ERROR_CLASSIFICATION_SUITES_DIR+File.separator+this.suite+File.separator + "grammars-gen" + File.separator + ptName;
+	}
+	private String getPathToClassificationDir(String dirName) {
+		return getPathToSuiteDir() + File.separator + "classification" + File.separator + dirName;
+	}
+
+	
+	public void classifyEditScenarios(String nameOfRun) throws IOException, InvalidParseTableException{
+		PrintStream prs = new PrintStream(getPathToSuiteDir() +nameOfRun + "_clasification");
+		int classifiedErrors = 0;
+		for (ErrorClassifier errorClassifier : classifiers) {
+			errorClassifier.classifyEditScenarios();
+			classifiedErrors +=errorClassifier.getNrOfClassifiedErrors();
+		}
+		DecimalFormat df = new DecimalFormat("#.#");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			double classifiedPercentage = 100.0*errorClassifier.getNrOfClassifiedErrors()/classifiedErrors;
+			prs.println(errorClassifier.getCategoryName()+": " + df.format(classifiedPercentage)+"%");
+		}
+		
+		PrintStream prsCursorDistances = new PrintStream(getPathToSuiteDir() + nameOfRun + "_cursor_dist_lines");
+		ArrayList<Integer> totalCL = new ArrayList<Integer>();
+		prsCursorDistances.println("DISTANCES TO CURSOR (LINES)");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			totalCL.addAll(errorClassifier.getDistancesToCursor());
+			Results.writeErrorDistanceStats(errorClassifier.getDistancesToCursor(), errorClassifier.getCategoryName(), prsCursorDistances);
+		}
+		Results.writeErrorDistanceStats(totalCL, "TOTAL: ", prsCursorDistances);
+		
+		PrintStream prsCursorDistancesTokens = new PrintStream(getPathToSuiteDir() + nameOfRun + "_cursor_dist_tokens");
+		ArrayList<Integer> totalCT = new ArrayList<Integer>();
+		prsCursorDistancesTokens.println("DISTANCES TO CURSOR (NON LO TOKENS)");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			totalCT.addAll(errorClassifier.getDistancesToCursorTokens());
+			Results.writeErrorDistanceStats(errorClassifier.getDistancesToCursorTokens(), errorClassifier.getCategoryName(), prsCursorDistancesTokens);
+		}
+		Results.writeErrorDistanceStats(totalCT, "TOTAL: ", prsCursorDistancesTokens);
+		
+		PrintStream prsFailureDistances = new PrintStream(getPathToSuiteDir() + nameOfRun + "_failure_dist_lines");
+		prsFailureDistances.println("DISTANCES TO FAILURE (LINES)");
+		ArrayList<Integer> totalFL = new ArrayList<Integer>();
+		for (ErrorClassifier errorClassifier : classifiers) {
+			totalFL.addAll(errorClassifier.getDistancesToNearbyFailure());
+			Results.writeErrorDistanceStats(errorClassifier.getDistancesToNearbyFailure(), errorClassifier.getCategoryName(), prsFailureDistances);
+		}
+		Results.writeErrorDistanceStats(totalFL, "TOTAL: ", prsFailureDistances);
+		
+		PrintStream prsFailureDistancesTokens = new PrintStream(getPathToSuiteDir() + nameOfRun + "_failure_dist_tokens");
+		prsFailureDistancesTokens.println("DISTANCES TO FAILURE (NON LO TOKENS)");
+		ArrayList<Integer> totalFT = new ArrayList<Integer>();
+		for (ErrorClassifier errorClassifier : classifiers) {
+			totalFT.addAll(errorClassifier.getDistancesToNearbyFailureTokens());
+			Results.writeErrorDistanceStats(errorClassifier.getDistancesToNearbyFailureTokens(), errorClassifier.getCategoryName(), prsFailureDistancesTokens);
+		}
+		Results.writeErrorDistanceStats(totalFT, "TOTAL: ", prsFailureDistancesTokens);
+		
+		PrintStream prsErrorDistances = new PrintStream(getPathToSuiteDir() + nameOfRun + "_error_dist_lines");
+		prsErrorDistances.println("DISTANCES BETWEEN ERRORS (LINES)");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			Results.writeErrorDistanceStats(errorClassifier.getDistancesBetweenErrors(), errorClassifier.getCategoryName(), prsErrorDistances);
+		}
+
+		PrintStream prsErrorDistancesTokens = new PrintStream(getPathToSuiteDir() + nameOfRun + "_error_dist_tokens");
+		prsErrorDistancesTokens.println("DISTANCES BETWEEN ERRORS (TOKENS)");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			Results.writeErrorDistanceStats(errorClassifier.getDistancesBetweenErrorsTokens(), errorClassifier.getCategoryName(), prsErrorDistancesTokens);
+		}
+
+		PrintStream prsNrOfClusters = new PrintStream(getPathToSuiteDir() + nameOfRun + "_nr_of_clusters");
+		prsNrOfClusters.println("NUMBER OF ERROR CLUSTERS RER FILE");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			Results.writeErrorDistanceStats(errorClassifier.getNrsOfErrorClustersPerFile(), errorClassifier.getCategoryName(), prsNrOfClusters);
+		}
+		PrintStream prsNrOfIsolatedErrors = new PrintStream(getPathToSuiteDir() + nameOfRun + "_nr_of_isolated");
+		prsNrOfIsolatedErrors.println("NUMBER OF UNRELATED ERRORS PER FILE ");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			Results.writeErrorDistanceStats(errorClassifier.getNrsOfIsolatedErrorsPerFile(), errorClassifier.getCategoryName(), prsNrOfIsolatedErrors);
+		}
+
+		ArrayList<Integer> totalCW = new ArrayList<Integer>();
+		PrintStream prsClusterWidths = new PrintStream(getPathToSuiteDir() + nameOfRun + "_cluster_widths");
+		prsClusterWidths.println("Number of Recover Operations per Cluster");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			totalCW.addAll(errorClassifier.getClusterWidths());
+			Results.writeErrorDistanceStats(errorClassifier.getClusterWidths(), errorClassifier.getCategoryName(), prsClusterWidths);
+		}
+		Results.writeErrorDistanceStats(totalCW, "TOTAL: ", prsClusterWidths);
+		
+		ArrayList<Integer> totalRC = new ArrayList<Integer>();
+		PrintStream prsRecoverCounts = new PrintStream(getPathToSuiteDir() + nameOfRun + "_recover_count");
+		prsRecoverCounts.println("Number of Recover Operations");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			totalRC.addAll(errorClassifier.getRecoveryDistances());
+			Results.writeErrorDistanceStats(errorClassifier.getRecoveryDistances(), errorClassifier.getCategoryName(), prsRecoverCounts);
+		}
+		Results.writeErrorDistanceStats(totalRC, "TOTAL: ", prsRecoverCounts);
+
+		PrintStream prsErrorMessages = new PrintStream(getPathToSuiteDir() + nameOfRun + "_error_messages");
+		for (ErrorClassifier errorClassifier : classifiers) {
+			prsErrorMessages.println("- " + errorClassifier.getCategoryName());
+			prsErrorMessages.println(errorClassifier.getErrorMessages());
+		}
+	
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/Directories.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/Directories.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,39 @@
+package fileprocessing;
+
+import java.io.File;
+
+public class Directories {
+	public static final String TEMP_DIR = "temp";
+	public static final String DIR_INTENDED_AST = "intended_ast_files";
+	public static final String DIR_ERROR_AST = "error_ast_files";
+	public static final String DIR_DIFFS_AST = "ast_diffs";
+	public static final String DIR_ERROR_PP = "error_ppresult_files";
+	public static final String DIR_INTENDED_PP = "intended_ppresult_files";
+	public static final String DIR_DIFFS_PP = "pp_diffs";
+	
+	public static void clearAllDirectories(){
+		deleteFilesInDir(TEMP_DIR);
+		deleteFilesInDir(DIR_INTENDED_AST);
+		deleteFilesInDir(DIR_ERROR_AST);
+		deleteFilesInDir(DIR_DIFFS_AST);
+		deleteFilesInDir(DIR_ERROR_PP);
+		deleteFilesInDir(DIR_INTENDED_PP);
+		deleteFilesInDir(DIR_DIFFS_PP);
+	}
+	
+	public static void deleteFilesInDir(String dirPath) {
+		File dir = new File(dirPath);
+		if (dir.exists()) {
+			String[] children = dir.list(FilenameFilters.getFilterAll());
+			for (int i = 0; i < children.length; i++) {
+				File file = new File(dirPath + File.separator + children[i]);
+				file.delete();
+				if(file.isDirectory()){
+					deleteFilesInDir(file.getPath());
+					file.delete();
+				}
+			}
+		}
+	}
+
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ErrorClassifier.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/ErrorClassifier.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,497 @@
+package fileprocessing;
+
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Dictionary;
+import java.util.Hashtable;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.FineGrainedSetting;
+import org.spoofax.jsglr.client.IntegratedRecoverySettings;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+import org.spoofax.jsglr.client.imploder.Token;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+import fileprocessing.ClassificationRun.ParserSetting;
+
+public class ErrorClassifier {
+		
+	private static final int CLUSTER_WIDTH_IN_TOKEN_DISTANCE = 50;
+	private final String parseTablePath;
+	private final ParserSetting settings;
+	
+	public ParserSetting getSettings() {
+		return settings;
+	}
+
+	private final String targetDir;
+	private final String sourceDir;
+	private final Dictionary<String, Integer> errorMessages;
+	
+	public Dictionary<String, Integer> getErrorMessages() {
+		return errorMessages;
+	}
+
+	public String getTargetDir() {
+		return targetDir;
+	}
+
+	private final boolean keepSourceFile;
+
+	private int numberOfProcessedFiles;
+	private int numberOfClassifiedFiles;
+	private ArrayList<Integer> distancesToCursor;
+	private ArrayList<Integer> distancesToCursorTokens;
+	private ArrayList<Integer> distancesToNearbyFailure;
+	private ArrayList<Integer> distancesToNearbyFailureTokens;
+	private ArrayList<Integer> distancesBetweenErrors;
+	private ArrayList<Integer> distancesBetweenErrorsTokens;
+	private ArrayList<Integer> nrsOfErrorClustersPerFile;
+	private ArrayList<Integer> nrsOfIsolatedErrorsPerFile;
+	private ArrayList<Integer> clusterWidths;
+	private ArrayList<Integer> recoveryCounts;
+
+	public ArrayList<Integer> getDistancesBetweenErrors() {
+		return distancesBetweenErrors;
+	}
+	
+	public ArrayList<Integer> getRecoveryDistances() {
+		return recoveryCounts;
+	}
+
+	public ArrayList<Integer> getClusterWidths() {
+		return clusterWidths;
+	}
+
+	public int getNrOfClassifiedErrors() {
+		if(settings == ParserSetting.ACCEPT_ALL){
+			return this.numberOfClassifiedFiles;
+		}
+		int totalNumberOfErrors = 0;
+		for (int i = 0; i < nrsOfErrorClustersPerFile.size(); i++) {
+			totalNumberOfErrors+=nrsOfErrorClustersPerFile.get(i);
+		}
+		for (int i = 0; i < nrsOfIsolatedErrorsPerFile.size(); i++) {
+			totalNumberOfErrors+=nrsOfIsolatedErrorsPerFile.get(i);
+		}
+		return totalNumberOfErrors;
+	}
+	
+	public ArrayList<Integer> getNrsOfIsolatedErrorsPerFile() {
+		return nrsOfIsolatedErrorsPerFile;
+	}
+
+	public ArrayList<Integer> getNrsOfErrorClustersPerFile() {
+		return nrsOfErrorClustersPerFile;
+	}
+
+	public ArrayList<Integer> getDistancesBetweenErrorsTokens() {
+		return distancesBetweenErrorsTokens;
+	}
+
+	public ArrayList<Integer> getDistancesToCursorTokens() {
+		return distancesToCursorTokens;
+	}
+
+	public ArrayList<Integer> getDistancesToNearbyFailureTokens() {
+		return distancesToNearbyFailureTokens;
+	}
+	
+	public ArrayList<Integer> getDistancesToNearbyFailure() {
+		return distancesToNearbyFailure;
+	}
+
+	public ArrayList<Integer> getDistancesToCursor() {
+		return distancesToCursor;
+	}
+
+	public int getNumberOfClassifiedFiles() {
+		return numberOfClassifiedFiles;
+	}
+	
+	public ErrorClassifier(String sourceDir, String targetDir, String parseTablePath, ParserSetting settings, boolean keepSourceFiles) {
+		this.parseTablePath = parseTablePath;
+		this.settings = settings;
+		this.targetDir = targetDir;
+		this.sourceDir = sourceDir;
+		this.keepSourceFile = keepSourceFiles;
+		this.errorMessages = new Hashtable<String, Integer>();
+		init();
+	}
+
+	public void init() {
+		this.numberOfClassifiedFiles = 0;
+		this.numberOfProcessedFiles = 0;
+		this.distancesToCursor = new ArrayList<Integer>();
+		this.distancesToNearbyFailure = new ArrayList<Integer>();
+		this.distancesToCursorTokens = new ArrayList<Integer>();
+		this.distancesToNearbyFailureTokens = new ArrayList<Integer>();
+		this.distancesBetweenErrors = new ArrayList<Integer>();
+		this.distancesBetweenErrorsTokens = new ArrayList<Integer>();
+		this.nrsOfErrorClustersPerFile = new ArrayList<Integer>();
+		this.nrsOfIsolatedErrorsPerFile = new ArrayList<Integer>();
+		this.clusterWidths = new ArrayList<Integer>();
+		this.recoveryCounts = new ArrayList<Integer>();
+	}
+	
+	public void classifyEditScenarios() throws FileNotFoundException, IOException, InvalidParseTableException{
+		init();
+		ArrayList<TestFile> testcases = getEditScenarios();
+		if(settings == ParserSetting.ACCEPT_ALL){
+			for (TestFile testFile : testcases) {
+				handleClassifiedFile(testFile);
+			}
+			return;
+		}
+		FileProcessing fp = getFileProcessing();		
+		long timeStart = System.currentTimeMillis();
+		for (TestFile test : testcases) {
+			try {
+				if(new File(test.getPathToErrorFile()).exists()){
+					numberOfProcessedFiles +=1;
+					int cursorLoc = getCursorLocation(test.getFilename());
+					if(settings == ParserSetting.COMPLETION){
+						fp.setNoRecovery();
+						fp.setCompletionParse(cursorLoc);
+					}
+					IStrategoTerm parseResult = null;
+					try{
+						//if(test.getFilename().contains("edit_00002_err_1_dist_1_cursor_1284"))
+						parseResult = fp.parseNoOutput(test, test.getPathToErrorFile());
+					}
+					catch (StackOverflowError e) {
+						FileUtils.copyFile(test.getPathToErrorFile(), getPathToStackOverFlowFile(test));
+						new File(test.getPathToErrorFile()).delete();
+					}
+					if(test.isRecoverySucceeded() && checkRecoverCount(test)){
+						if(settings == ParserSetting.COMPLETION){
+							recoveryCounts.add(test.getRecoverCount()-1); //compensate for -> #$%@ {recover}
+						}
+						else
+							recoveryCounts.add(test.getRecoverCount());
+						locateErrors(parseResult, cursorLoc, test.getFailureLocations());
+						handleClassifiedFile(test);
+					}
+				}
+			} catch (TokenExpectedException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			} catch (BadTokenException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			} catch (ParseException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			} catch (SGLRException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+		}
+		System.out.println(getCategoryName() + ": ");
+		System.out.println("- timespan: "+(System.currentTimeMillis() - timeStart));
+		System.out.println("- Classified: " + numberOfClassifiedFiles);
+		System.out.println("- Remaining: " + (numberOfProcessedFiles - numberOfClassifiedFiles));
+		System.out.println();
+	}
+
+	private FileProcessing getFileProcessing() throws FileNotFoundException,
+			IOException, InvalidParseTableException {
+		FileProcessing fp = new FileProcessing(parseTablePath);
+		switch (settings) {
+		case MULTIPLE_ERRORS:
+			fp.setMultiTokenRecovery();
+			break;
+		case MULTIPLE_ERRORS_HEURISTIC:
+			IntegratedRecoverySettings s = IntegratedRecoverySettings.createDefaultSettings();
+			s.setUseRegionRecovery(false);
+			s.setUseCursorLocation(false);
+			fp.setIntegratedRecovery(s, FineGrainedSetting.createDefaultSetting());
+			break;
+		case COMPLETION:
+			fp.setNoRecovery();
+			fp.setCompletionParse(-1);
+			break;
+		case NO_ERRORS:
+			fp.setNoRecovery();
+			break;
+		case SINGLE_ERROR:
+			fp.setSingleTokenRecovery(); //single token recoveries
+			break;
+		default:
+			fp.setNoRecovery();
+			break;
+		}
+		return fp;
+	}
+
+	protected void handleClassifiedFile(TestFile test) throws IOException {
+		if(!test.getPathToErrorFile().equals(getPathToClassifiedErrorFile(test)))
+			FileUtils.copyFile(test.getPathToErrorFile(), getPathToClassifiedErrorFile(test));
+		if(!keepSourceFile){
+			new File(test.getPathToErrorFile()).delete();
+		}
+		numberOfClassifiedFiles +=1;
+	}
+
+	private boolean checkRecoverCount(TestFile test) {
+		switch (settings) {
+		case MULTIPLE_ERRORS:
+			return test.getRecoverCount()>1;
+		case MULTIPLE_ERRORS_HEURISTIC:
+			if(test.getRecoverCount() <= 1)
+				System.err.println(test.getFilename());
+			return test.getRecoverCount()>=1;
+		case COMPLETION:
+			return test.getRecoverCount() > 0;
+		case NO_ERRORS:
+			return test.getRecoverCount() == 0;
+		case SINGLE_ERROR:
+			return test.getRecoverCount() == 1; //single token recoveries
+		default:
+			System.err.println("Unknown Resovery Setting");
+			return false;
+		}
+	}
+	
+	private int getCursorLocation(String filename) {
+		Pattern cursorPattern = Pattern.compile("cursor_[0-9]+");
+		Matcher cursorMatcher =  cursorPattern.matcher(filename);
+		if (cursorMatcher.find()){
+			String cursorString = cursorMatcher.group(0);
+			return Integer.parseInt(cursorString.substring("cursor_".length()));	
+		}
+		return -1;
+	}
+
+	private String getPathToStackOverFlowFile(TestFile test) {
+		String dir = targetDir + File.separator + "STACK_OVERFLOW";
+		if(!new File(dir).exists()) {new File(dir).mkdir();}
+		return dir + File.separator + test.getFilename();
+	}
+
+	private String getPathToClassifiedErrorFile(TestFile t) {
+		return targetDir + File.separator + t.getFilename();
+	}
+
+	/**
+	 * Find error location 
+	 */
+	public void locateErrors(IStrategoTerm top, int cursorLoc, ArrayList<Integer> failureLocs) {
+		//System.err.println("-----------------");
+		if(top == null){
+			return;
+		}
+		ITokenizer tokenizer = getTokenizer(top);
+		if(tokenizer==null){
+			System.err.println("no tokenizer: " + top); 
+			return;
+		}
+		//ArrayList<Point> errorLocations = new ArrayList<Point>();
+		String prevErrorMessage = "xxx";
+		int prevErrorEndLine = -1;
+		int count = distancesToCursor.size();
+		int tokenIndexPreviousError = -1;
+		int nrOfClusters = 0;
+		int nrOfIsolatedErrors = 0;
+		int clusterWidth = 0;
+		boolean clusterDetected = false;
+		for (int i = 0, max = tokenizer.getTokenCount(); i < max; i++) {
+			IToken token = tokenizer.getTokenAt(i);
+			String error = token.getError();
+			if (error != null) {
+				if (!error.startsWith(ITokenizer.ERROR_WARNING_PREFIX)) {	
+					//System.err.println(error);
+					if(token.getLine() > prevErrorEndLine || !error.equals(prevErrorMessage)){ //Different Error
+						countErrorMessage(error);
+						if(tokenIndexPreviousError == -1){
+							tokenIndexPreviousError = i;
+							clusterWidth = 1;
+						}
+						else {
+							int wsCount = countWhitespaceTokens(tokenizer, i, tokenIndexPreviousError);
+							int tokenDistanceWithPrevError = i - tokenIndexPreviousError - wsCount;
+							this.distancesBetweenErrorsTokens.add(tokenDistanceWithPrevError);
+							int lineDistanceWithPrevErr = 
+								tokenizer.getTokenAt(i).getLine()-tokenizer.getTokenAt(tokenIndexPreviousError).getLine();
+							this.distancesBetweenErrors.add(lineDistanceWithPrevErr);
+							if(tokenDistanceWithPrevError > CLUSTER_WIDTH_IN_TOKEN_DISTANCE){
+								if(!clusterDetected){
+									nrOfIsolatedErrors +=1;
+								}
+								assert(clusterWidth < recoveryCounts.get(recoveryCounts.size()-1));
+								clusterWidths.add(clusterWidth);
+								clusterWidth = 1;
+								clusterDetected = false;
+							}
+							else{
+								clusterDetected = true;
+								clusterWidth +=1;
+								nrOfClusters +=1;
+							}
+						}
+						if(settings == ParserSetting.COMPLETION){ // multiple tokens (prefix) involved, but we know the error location
+							distancesToCursor.add(0);
+							distancesToCursorTokens.add(0);
+							//failure locations: no failure location set. (location where parser stack does not contain paths without recover anno)
+						}
+						else {
+							setDistancesToFailure(tokenizer, failureLocs, token);
+							//if(failureLocs.size() == 1)
+							setDistancesToCursor(cursorLoc,	tokenizer, token);
+						}
+						prevErrorEndLine = token.getEndLine();
+						prevErrorMessage = error;
+					}
+				}
+			}
+		}
+		if(clusterWidth > 0){
+			clusterWidths.add(clusterWidth);
+		}
+		if(!clusterDetected){
+			nrOfIsolatedErrors +=1;
+		}
+		if(settings == ParserSetting.COMPLETION && nrOfClusters > 1){
+			nrOfClusters = 1;
+		}
+		this.nrsOfErrorClustersPerFile.add(nrOfClusters);
+		this.nrsOfIsolatedErrorsPerFile.add(nrOfIsolatedErrors);
+		/*
+		if(
+			distancesToCursor.size()==count && 
+			settings != ParserSetting.NO_ERRORS && 
+			settings != ParserSetting.COMPLETION
+		){
+			distancesToCursor.add(Integer.MAX_VALUE); //error with unknown location
+			System.out.println("unknown location?!");
+		}*/
+	}
+
+	protected void countErrorMessage(String error) {
+		Integer oldValue = errorMessages.get(error);
+		if(oldValue == null || oldValue.intValue() <=0){
+			oldValue = 0;
+		}
+		if(getSettings() != ParserSetting.COMPLETION)
+			errorMessages.put(error, oldValue + 1);
+	}
+
+	public void setDistancesToCursor(int cursorLoc, ITokenizer tokenizer, IToken token) {
+		int lineDistance = getLineDistance(tokenizer, token, cursorLoc);
+		//set line and token relative locations
+		if(token.getStartOffset() <= cursorLoc){
+			distancesToCursor.add(-1*lineDistance);
+			distancesToCursorTokens.add(-1*getTokenDistance(tokenizer, token, cursorLoc));
+		}
+		else {
+			distancesToCursor.add(lineDistance);
+			distancesToCursorTokens.add(getTokenDistance(tokenizer, token, cursorLoc));
+		}
+	}
+
+	private int countWhitespaceTokens(ITokenizer tokenizer, int errorTokenIndex, int cursorTokenIndex) { 
+		int wsCount = 0;
+		int min = Math.min(errorTokenIndex, cursorTokenIndex);
+		int max = Math.max(errorTokenIndex, cursorTokenIndex);
+		for (int i = min; i <= max; i++) {
+			if(Token.isWhiteSpace(tokenizer.getTokenAt(i))){
+				wsCount++;
+			}
+		}
+		return wsCount;
+	}
+
+	private void setDistancesToFailure(ITokenizer tokens, ArrayList<Integer> failureLocs, IToken token) {
+		assert(failureLocs.size() > 0);
+		
+		//Line Distances		
+		int distanceLines = Integer.MAX_VALUE;
+		int locRelativeToFailure = Integer.MAX_VALUE;
+		for (int i = 0; i < failureLocs.size(); i++) {
+			int failureOffset = failureLocs.get(i);
+			int d = getLineDistance(tokens, token, failureOffset);
+			if(d < distanceLines){
+				distanceLines = d;
+				locRelativeToFailure = -d;
+				if(failureOffset < token.getStartOffset()){
+					locRelativeToFailure = d;
+				}
+			}		
+		}
+		distancesToNearbyFailure.add(locRelativeToFailure);
+		
+		//Token Distances
+		int distanceTokens = Integer.MAX_VALUE;
+		int locRelativeToFailureTokens = Integer.MAX_VALUE;
+		for (int i = 0; i < failureLocs.size(); i++) {
+			int offset = failureLocs.get(i);
+			int dTokens = getTokenDistance(tokens, token, offset);
+			if(dTokens < distanceTokens){
+				distanceTokens = dTokens;
+				locRelativeToFailureTokens = - dTokens;
+				if(offset < token.getStartOffset()){
+					locRelativeToFailureTokens = dTokens;
+				}
+			}
+		}
+		distancesToNearbyFailureTokens.add(locRelativeToFailureTokens);
+	}
+
+	public int getTokenDistance(ITokenizer tokens, IToken token, int offset) {
+		int tokenIndexAtOffset = tokens.getTokenCount()-1;
+		if(tokens.getTokenAt(tokenIndexAtOffset).getStartOffset() > offset){
+			tokenIndexAtOffset = tokens.getTokenAtOffset(offset).getIndex();
+		}
+		int errorTokenIndex = token.getIndex();
+		int loTokenCount = countWhitespaceTokens(tokens, errorTokenIndex, tokenIndexAtOffset);
+		int dTokens = Math.abs(errorTokenIndex-tokenIndexAtOffset)-loTokenCount;
+		return dTokens;
+	}
+
+	public int getLineDistance(ITokenizer tokens, IToken errorToken, int offset) {
+		int errorLine = errorToken.getLine();
+		int errorEndLine = errorToken.getEndLine();
+		int lineAtOffset;
+		if(tokens.getTokenAt(tokens.getTokenCount() - 1).getEndOffset() <= offset){
+			lineAtOffset = tokens.getTokenAt(tokens.getTokenCount() - 1).getEndLine();
+		}
+		else{
+			lineAtOffset = tokens.getLineAtOffset(offset);
+		}
+		return Math.min(Math.abs(lineAtOffset-errorLine), Math.abs(lineAtOffset-errorEndLine));
+	}
+
+	public String getCategoryName() {
+		return new File(targetDir).getName();
+	}
+	
+	private ArrayList<TestFile> getEditScenarios()
+			throws IOException {
+		ArrayList<TestFile> testcases = new ArrayList<TestFile>();
+		File dir = new File(sourceDir);
+		if (!dir.exists())
+			throw new IOException("Directory: " + dir + "does not exist");
+		String[] children = dir.list(FilenameFilters.getFilterAll());
+		Arrays.sort(children);
+		for (int i = children.length - 1; i >= 0; i--) {
+			String fileName = children[i];
+			String editScenario = sourceDir + File.separator + fileName;
+			TestFile t = new TestFile(fileName, editScenario, null);
+			//t.setPathToTestSuiteDir(getPathToSuiteDir());
+			testcases.add(t);
+		}
+		return testcases;
+	}
+
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileProcessing.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileProcessing.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,323 @@
+package fileprocessing;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.io.Writer;
+
+import org.omg.CORBA.Environment;
+import org.spoofax.interpreter.terms.ISimpleTerm;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.Asfix2TreeBuilder;
+import org.spoofax.jsglr.client.FineGrainedSetting;
+import org.spoofax.jsglr.client.IRecoveryParser;
+import org.spoofax.jsglr.client.IntegratedRecoverySettings;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.client.ParseTable;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.jsglr.client.imploder.ImploderOriginTermFactory;
+import org.spoofax.jsglr.client.imploder.TermTreeFactory;
+import org.spoofax.jsglr.client.imploder.TreeBuilder;
+import org.spoofax.jsglr.io.FileTools;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.spoofax.jsglr.client.SGLR;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.ParentTermFactory;
+import org.spoofax.terms.io.binary.TermReader;
+import org.strategoxt.lang.compat.NativeCallHelper;
+
+public class FileProcessing {
+	private SGLR sglr;
+	public SGLR getSglr() {
+		return sglr;
+	}
+
+	private int cursorLocation;
+	private boolean completionMode;
+		
+	public FileProcessing(String parseTableLocation) throws FileNotFoundException, IOException, InvalidParseTableException{
+		setSGLR(parseTableLocation);
+		this.completionMode = false;
+		this.cursorLocation = Integer.MAX_VALUE;
+	}
+	
+	/**
+	 * Use setIntegratedRecovery instead
+	 * @param bp does not do anything
+	 * @param fg
+	 * @param only_fg
+	 */
+	@Deprecated 
+	public void setCombinedRecovery(boolean bp, boolean fg, boolean only_fg){
+		IntegratedRecoverySettings settings = IntegratedRecoverySettings.createDefaultSettings();
+		settings.setUseCursorLocation(false);
+		settings.setUseFineGrained(fg);
+		settings.setUseRegionSelection(!only_fg);
+		settings.setUseRegionRecovery(!only_fg);		
+		sglr.setUseStructureRecovery(true, settings, FineGrainedSetting.createDefaultSetting());
+	}
+	
+	public void setIntegratedRecovery(IntegratedRecoverySettings settings, FineGrainedSetting fgSettings) {
+		sglr.setUseStructureRecovery(true, settings, fgSettings);
+	}
+	
+	public void setNoRecovery() {
+		sglr.setUseStructureRecovery(false);
+	}
+	
+	public void setMultiTokenRecovery(){
+		IntegratedRecoverySettings settings = IntegratedRecoverySettings.createDefaultSettings();
+		settings.setUseCursorLocation(false);
+		settings.setUseFineGrained(true);
+		settings.setUseRegionSelection(true);
+		settings.setUseRegionRecovery(false);		
+		sglr.setUseStructureRecovery(true, settings, FineGrainedSetting.createMultipleTokensSetting());		
+	}
+
+	public void setSingleTokenRecovery() {
+		IntegratedRecoverySettings settings = IntegratedRecoverySettings.createDefaultSettings();
+		settings.setUseCursorLocation(false);
+		settings.setUseFineGrained(true);
+		settings.setUseRegionSelection(false);
+		settings.setUseRegionRecovery(false);		
+		settings.setMaxNumberOfRecoverApplicationsGlobal(1);
+		sglr.setUseStructureRecovery(true, settings, FineGrainedSetting.createSingleTokenSetting());
+	}
+	
+	public void setCompletionParse(int cursorLocation){
+		this.completionMode = true;
+		this.cursorLocation = cursorLocation;
+	}
+	
+	public void setSGLR(String parseTableLocation) throws FileNotFoundException, IOException, InvalidParseTableException{		
+		ITermFactory termFactory = new ImploderOriginTermFactory(new ParentTermFactory(new TermFactory()));
+		TermTreeFactory factoryX = new TermTreeFactory(termFactory);
+		final IStrategoTerm tableTerm = new TermReader(termFactory).parseFromFile(parseTableLocation);
+		final ParseTable pt = new ParseTable(tableTerm, termFactory);	
+		
+		sglr = new SGLR(new TreeBuilder(factoryX), pt);
+		
+		
+		
+		//sglr = new SGLR(new Asfix2TreeBuilder(), pt);//new TreeBuilder(true)
+		sglr.getDisambiguator().setDefaultFilters();
+		sglr.getDisambiguator().setHeuristicFilters(true);
+		//sglr.setTreeBuilder(new TreeBuilder(true));
+		sglr.setUseStructureRecovery(true);		
+	}
+
+	
+	public void processErrorFile(TestFile test) throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, SGLRException{
+		processErrorFile(test, null);
+	}
+
+	/**
+	 * Generates the AST in the output dir
+	 * @throws SGLRException 
+	 * @throws ParseException 
+	 * @throws BadTokenException 
+	 * @throws TokenExpectedException 
+	 */
+	public void processErrorFile(TestFile test, String ppTable)
+			throws FileNotFoundException, IOException,
+			InvalidParseTableException,
+			InterruptedException, TokenExpectedException, BadTokenException, ParseException, SGLRException {
+		System.gc();
+		createRecoveredAst(test);	
+		createIntendedAst(test);			
+		createDiffs(test, ppTable);
+		if(test.getExtension().equals("java"))
+			generatePPJavaResults(test); //TODO if java file ..
+	}
+
+	private void createDiffs(TestFile test, String ppTable)
+			throws InterruptedException, IOException {
+		if(test.isRecoverySucceeded() && new File(test.getPathToErrorAST()).exists()){
+			diff(test.getPathToErrorAST(), test.getPathToIntendedAST(), test.getPathToASTDiff());
+			int treeDistance = -1;
+			///* EMMA*/System.out.println("Starting tree distance check");
+			// treeDistance = compareTrees(test.getIntendedAST(), test.getRecoveredAST());
+			///* EMMA*/System.out.println("Tree edit distance: " + treeDistance);
+			test.setTreeDistance(treeDistance);
+			test.setAstDiffLines(Results.getLineCount(test.getPathToASTDiff()));
+			if(ppTable!=null && new File(ppTable).exists()){
+				prettyPrint(test.getPathToErrorAST(), test.getPathToErrorPP(), ppTable);
+				prettyPrint(test.getPathToIntendedAST(), test.getPathToIntendedPP(), ppTable);
+				diff(test.getPathToErrorPP(), test.getPathToIntendedPP(), test.getPathToPPDiff());
+			}
+		}
+	}
+
+	private void createIntendedAst(TestFile test) throws FileNotFoundException,
+			IOException, InvalidParseTableException, TokenExpectedException,
+			BadTokenException, ParseException, SGLRException {
+		String tempFilePath=Directories.TEMP_DIR+ File.separator+test.getFilename();
+		this.completionMode = false;
+		this.cursorLocation = Integer.MAX_VALUE;
+		if (!new File(test.getPathToIntendedAST()).exists()) {
+			IStrategoTerm intendedAST = writeParseTree(test.getPathToIntendedFile(), tempFilePath + ".intended.ast");
+			test.setIntendedAST(intendedAST);
+		} else {
+			IStrategoTerm intendedAST = parseNoOutput(test, test.getPathToIntendedFile());
+			test.setIntendedAST(intendedAST);
+		}
+		test.setParsetimeIntended(sglr.getPerformanceMeasuring().getParseTime());
+		try {
+			//implodeAsfix(tempFilePath+".intended.pt", tempFilePath+".intended.ast");
+			pp_aterm(tempFilePath + ".intended.ast", test.getPathToIntendedAST());
+		} catch (Exception e) {
+			System.err.println("Error during implode: " + test.getPathToIntendedFile());
+			e.printStackTrace();
+		}
+	}
+
+	public void createRecoveredAst(TestFile test)
+			throws FileNotFoundException, IOException,
+			InvalidParseTableException {
+		String tempFilePath=Directories.TEMP_DIR+ File.separator+test.getFilename();
+		IStrategoTerm recoveredAST = writeParseTree(test.getPathToErrorFile(), tempFilePath+".err.ast");
+		test.setRecoveredAST(recoveredAST);
+		setRecoveryResults(test);
+		try {
+			//implodeAsfix(tempFilePath+".err.pt", tempFilePath+".err.ast");
+			pp_aterm(tempFilePath+".err.ast", test.getPathToErrorAST());
+		} catch (Exception e) {
+			System.err.println("Error during implode: "+test.getPathToErrorFile());
+			e.printStackTrace();
+		}
+	}
+		
+	public IStrategoTerm parseNoOutput(TestFile test, String fname) throws FileNotFoundException, IOException, TokenExpectedException, BadTokenException, ParseException, SGLRException{
+		String inputChars = FileTools.loadFileAsString(new BufferedReader(new FileReader(fname)));
+		try{
+			Object t = sglr.parse(inputChars, fname, null, completionMode, cursorLocation);
+			setRecoveryResults(test);
+			return (IStrategoTerm) t;
+		}
+		catch(Exception e){
+			//System.out.println("parse failure: "+fname);
+			test.setRecoverySucceeded(false);
+			return null;
+		}
+	}
+
+	public void setRecoveryResults(TestFile test) {
+		test.setRecoverySucceeded(sglr.getPerformanceMeasuring().isParseSucceeded());
+		test.setRecoverCount(sglr.getPerformanceMeasuring().getRecoverCount());
+		test.setParsetimeError(sglr.getPerformanceMeasuring().getParseTime());
+		test.setFailureLocations(sglr.getPerformanceMeasuring().getFailureLocations());
+	}
+	
+	private IStrategoTerm writeParseTree(String testFile, String parseTreeFile) throws FileNotFoundException,
+			IOException, InvalidParseTableException
+			 {
+		String inputChars = FileTools.loadFileAsString(new BufferedReader(new FileReader(testFile)));
+		return writeParseTree(testFile, parseTreeFile, inputChars);
+	}
+
+	private IStrategoTerm writeParseTree(String testFile, String parseTreeFile,
+			String inputChars) {
+		try {
+			Object t = sglr.parse(inputChars, testFile, null, completionMode, cursorLocation);
+			if(t != null) {
+				Writer out = new BufferedWriter(new FileWriter(parseTreeFile));
+				TermReader termIO = new TermReader(sglr.getParseTable().getFactory());
+				termIO.unparseToFile((IStrategoTerm) t, out);
+				out.close();
+				return (IStrategoTerm) t;
+			}
+		} catch (Exception e) {
+			System.err.println(e.getMessage());
+			e.printStackTrace();
+		}
+		return null;
+	}
+		
+	private static void pp_aterm(String inputFile, String outputFile) throws InterruptedException, IOException {
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"pp-aterm", 
+				"-i", inputFile,
+				"-o", outputFile
+		};
+		caller.call(commandArgs, new String[0], null, System.out, System.err);			
+	}
+	
+	private void prettyPrint(String inputFile, String outputFile, String pp_table) throws InterruptedException, IOException {
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"ast2text",
+				"-p", pp_table, 
+				"-i", inputFile,
+				"-o", outputFile
+		};
+		caller.call(commandArgs, new String[0], null, System.out, System.err);			
+	}
+
+	
+	public static void diff(String inputFile1, String inputFile2, String diffFile) throws InterruptedException, IOException {
+		if(!new File(inputFile1).exists()){
+			System.out.println("No Result: "+inputFile1);
+			return;
+		}
+		if(!new File(inputFile2).exists()){
+			System.out.println("No Result: "+inputFile2);
+			return;
+		}
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"diff", 
+				"-w",
+				"-y", 
+				"--suppress-common-lines",
+				"--width=250",
+				inputFile1,
+				inputFile2
+		};
+		PrintStream pt=new PrintStream(new File(diffFile));
+		caller.call(commandArgs, new String[0], null, pt, System.err);
+	}
+
+
+	public static void generatePPJavaResults(TestFile test) throws InterruptedException, IOException {
+		assert(new File(test.getPathToIntendedAST()).exists());
+		if(new File(test.getPathToErrorAST()).exists()){
+			ppJava(test.getPathToErrorAST(), test.getPathToErrorPP());
+			ppJava(test.getPathToIntendedAST(), test.getPathToIntendedPP());
+			diff(test.getPathToErrorPP(), test.getPathToIntendedPP(), test.getPathToPPDiff());
+			test.setPPDiffLines(Results.getLineCount(test.getPathToPPDiff()));
+		}
+	}
+
+	private static void ppJava(String inputFile, String outputFile)
+			throws InterruptedException, IOException {
+		NativeCallHelper caller=new NativeCallHelper();
+		String[] commandArgs = {
+				"pp-java", 
+				"-i",
+				inputFile, 
+				"-o",
+				outputFile
+		};
+		//PrintStream pt=new PrintStream(new File(diffFile));
+		caller.call(commandArgs, new String[0], null, System.out, System.err);
+	}
+
+	public void warmup(String fname, int warmup) throws FileNotFoundException, IOException, TokenExpectedException, BadTokenException, ParseException, SGLRException {
+		String inputChars = FileTools.loadFileAsString(new BufferedReader(new FileReader(fname)));
+		long time = System.currentTimeMillis();
+		while (System.currentTimeMillis() < time + warmup * 1000) {
+			sglr.parse(inputChars, fname, null);
+		}
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileUtils.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FileUtils.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,25 @@
+package fileprocessing;
+import java.io.*;
+import java.nio.channels.*;
+
+
+public class FileUtils {
+	
+	public static void copyFile(File in, File out) throws IOException {
+		FileChannel inChannel = new FileInputStream(in).getChannel();
+		FileChannel outChannel = new FileOutputStream(out).getChannel();
+		try {
+			inChannel.transferTo(0, inChannel.size(), outChannel);
+		} catch (IOException e) {
+			throw e;
+		} finally {
+			if (inChannel != null)
+				inChannel.close();
+			if (outChannel != null)
+				outChannel.close();
+		}
+	}
+	public static void copyFile(String in, String out) throws IOException {
+		 FileUtils.copyFile(new File(in),new File(out));
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FilenameFilters.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/FilenameFilters.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,89 @@
+package fileprocessing;
+
+import java.io.File;
+import java.io.FilenameFilter;
+
+public class FilenameFilters {
+	
+	public static FilenameFilter getNameFilter(final String[] substrings){
+		return new FilenameFilter() {
+			
+			@Override
+			public boolean accept(File dir, String name) {
+				if(name.endsWith(".svn"))
+					return false;
+				for (int i = 0; i < substrings.length; i++) {
+					String substring = substrings[i];
+					if(name.contains(substring))
+						return true;
+				}
+				return false;
+			}
+		};
+		
+	}
+
+	public static FilenameFilter getNameFilter(final String substring){
+		return new FilenameFilter() {
+			
+			@Override
+			public boolean accept(File dir, String name) {
+				if(name.endsWith(".svn"))
+					return false;
+				if(name.contains(substring))
+					return true;
+				return false;
+			}
+		};
+		
+	}
+
+	public static FilenameFilter getFilterLiteralErrors(){
+		return new FilenameFilter() {
+			
+			@Override
+			public boolean accept(File dir, String name) {
+				if(name.endsWith(".svn"))
+					return false;
+				if(
+					name.contains("missing") ||
+					name.contains("incorrect") ||
+					name.contains("superfluous")
+				){
+					return true;
+				}
+				return false;
+			}
+		};		
+	}
+	
+	public static FilenameFilter getFilterExcludeCombined(){
+		return new FilenameFilter() {
+			
+			@Override
+			public boolean accept(File dir, String name) {
+				if(name.endsWith(".svn"))
+					return false;
+				if(
+					name.contains("combined") 
+				){
+					return false;
+				}
+				return true;
+			}
+		};
+		
+	}
+	
+	public static FilenameFilter getFilterAll(){
+		return new FilenameFilter() {			
+			@Override
+			public boolean accept(File dir, String name) {
+				if(name.endsWith(".svn"))
+					return false;
+				return true;
+			}
+		};
+		
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/Results.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/Results.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,158 @@
+package fileprocessing;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.LineNumberReader;
+import java.io.PrintStream;
+import java.text.DecimalFormat;
+import java.util.ArrayList;
+import java.util.Collections;
+
+public class Results {
+	private static int RANGE_PERFORMANCE_DATA=50;
+	private static int UPPERBOUND_PERFORMANCE_DATA=1000;
+	private static int RANGE_DIFF_DATA=10;
+	private static int UPPERBOUND_DIFF_DATA=50;
+
+
+
+	private static void writeStatistics(ArrayList<Integer> data, String label, PrintStream prs,
+			int range, int uppBound) {
+		writeStatistics(data, label, prs, range, TestFile.PARSE_FAILURE, uppBound);
+	}
+	
+	private static void writeStatistics(ArrayList<Integer> data, String label, PrintStream prs,
+			int range, int unterBound, int uppBound) {
+		if(data.isEmpty())
+			return;
+		prs.println(label);
+		Collections.sort(data);
+		int rangeCount=0;
+		int min_range=unterBound -1;
+		int max_range=unterBound -1;
+		DecimalFormat df = new DecimalFormat("#.#");
+		double cumPercentage = 0.0;
+		for (int i = 0; i < data.size(); i++) {
+			int time = data.get(i);
+			if(time > unterBound && min_range < unterBound){
+				double rangeCountPercentage = 100.0*rangeCount/data.size();
+				cumPercentage += rangeCountPercentage;
+				prs.println("\t"+"< " + unterBound + ": " + rangeCount +" ("+ df.format(rangeCountPercentage) +"%)"+" ("+ df.format(cumPercentage) +"%)");
+				rangeCount = 0;
+				min_range = unterBound;
+				max_range = unterBound;
+			}
+			if(time > max_range){
+				if(rangeCount>0){
+					double rangeCountPercentage = 100.0*rangeCount/data.size();
+					cumPercentage += rangeCountPercentage;
+					prs.println("\t"+min_range+" - " + max_range+": " + rangeCount +" ("+ df.format(rangeCountPercentage) +"%)"+" ("+ df.format(cumPercentage) +"%)");
+				}
+				rangeCount=0;
+				while(time > max_range && min_range<uppBound){
+					min_range=max_range;
+					max_range+=range;
+				}
+				if(min_range>=uppBound){
+					int remaining = data.size()-i;
+					double rangeCountPercentage = 100.0*remaining/data.size();
+					cumPercentage += rangeCountPercentage;
+					prs.println("\t"+"> "+min_range+": " + (data.size()-i) +" ("+ df.format(rangeCountPercentage) +"%)"+" ("+ df.format(cumPercentage) +"%)");
+					break;
+				}
+			}
+			rangeCount++;
+			if(i==data.size()-1){
+				double rangeCountPercentage = 100.0*rangeCount/data.size();
+				cumPercentage += rangeCountPercentage;
+				prs.println("\t"+min_range+" - " + max_range+": " + rangeCount +" ("+ df.format(rangeCountPercentage) +"%)"+" ("+ df.format(cumPercentage) +"%)");
+			}
+		}
+		prs.println();
+	}
+
+	public static void writeErrorDistanceStats(ArrayList<Integer> distances, String label, PrintStream prs) {
+		writeStatistics(distances, label, prs, 1, -10, 10);
+		writeStatistics(distances, label+" (Coarse) ", prs, 10, -50, 50);
+	}
+
+	public static void writeTimeStats(ArrayList<TestFile> testfiles, PrintStream prs) {
+		ArrayList<Integer> overheadTimes=new ArrayList<Integer>();
+        for (TestFile test : testfiles) {
+			overheadTimes.add(test.getParsetimeErrorOverhead());
+		}
+        writeStatistics(overheadTimes, "Recovery overhead times (ms)", prs, RANGE_PERFORMANCE_DATA, UPPERBOUND_PERFORMANCE_DATA);
+	}
+	public static void writeDiffStats(ArrayList<TestFile> testfiles, PrintStream prs) {
+		ArrayList<Integer> lineCounts=new ArrayList<Integer>();
+        for (TestFile test : testfiles) {
+			lineCounts.add(test.getAstDiffLines());
+		}
+		writeStatistics(lineCounts, "Ast-Diffs (line count)", prs, RANGE_DIFF_DATA, UPPERBOUND_DIFF_DATA);
+
+		ArrayList<Integer> ppLineCounts=new ArrayList<Integer>();
+        for (TestFile test : testfiles) {
+			ppLineCounts.add(test.getPPDiffLines());
+		}
+		writeStatistics(ppLineCounts, "PP-Diffs (line count)", prs, 5, UPPERBOUND_DIFF_DATA);
+
+//		ArrayList<Integer> lineDiffs = new ArrayList<Integer>();
+//		for (TestFile test : testfiles) {
+//			try {
+//				int errorLines = Results.getLineCount(test.getPathToErrorAST());
+//				int intendedLines = Results.getLineCount(test.getPathToIntendedAST());
+//				int lostLinesPercentage = 100 - 100*errorLines/intendedLines;
+//				/*
+//				System.out.println(test.getFilename() +": " + 
+//						errorLines + " (err) ," + 
+//						intendedLines + " (int) ," +
+//						lostLinesPercentage + "% lost. "
+//				);*/
+//				lineDiffs.add(lostLinesPercentage);
+//			} catch (IOException e) {
+//				// TODO Auto-generated catch block
+//				e.printStackTrace();
+//			}
+//		}		
+//		writeStatistics(lineDiffs, "Skipped Lines (%)", prs, 5, 200);
+	}
+
+	public static void writeDistanceStats(ArrayList<TestFile> testfiles, PrintStream prs) {
+		ArrayList<Integer> lineCounts=new ArrayList<Integer>();
+        for (TestFile test : testfiles) {
+			lineCounts.add(test.getTreeDistance());
+		}
+		writeStatistics(lineCounts, "Tree-dist. (tree edit)", prs, 0, 0); // TODO: What should go at the end here? (last two arguments)
+	}
+
+
+	public static void removeEmptyDiffFiles(String diffDir) throws IOException{
+		File dir=new File(diffDir);
+        String[] children = dir.list(FilenameFilters.getFilterAll());
+        for (String diffFile : children) {
+			int lnCount=getLineCount(diffDir+File.separator+diffFile);
+			if(lnCount==0){
+				new File(diffDir+File.separator+diffFile).delete();
+			}
+		}
+	}
+
+	public static int getLineCount(String filePath) throws IOException{
+		LineNumberReader lineCounter = new LineNumberReader(
+				new InputStreamReader(new FileInputStream(filePath)));
+		while ((lineCounter.readLine()) != null) {}
+		assert lineCounter.getLineNumber()>=0;
+		return lineCounter.getLineNumber();
+	}
+	
+	public static void writeParseTimes(ArrayList<TestFile> testfiles, PrintStream prs) {
+		prs.println("Parse times in milli-seconds: ");
+		for (TestFile test : testfiles) {
+			prs.println(test.getFilename() + ": " + test.getParsetimeError());
+		}
+	}
+
+
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/TestFile.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/TestFile.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,231 @@
+package fileprocessing;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.nio.MappedByteBuffer;
+import java.nio.channels.FileChannel;
+import java.nio.charset.Charset;
+import java.util.ArrayList;
+
+import org.spoofax.interpreter.terms.ISimpleTerm;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+public class TestFile {
+	
+	public static final int PARSE_FAILURE = -10;
+	private String filename;
+	private String pathToIntendedFile;
+	private String pathToErrorFile;
+	private String pathToClassifiedErrorFile;
+	private String pathToTestSuiteDir;
+	
+	// ASTs
+	private IStrategoTerm recoveredAST;
+	private IStrategoTerm intendedAST;
+	
+	//results
+	private int treeDistance;
+	private int astDiffLines;
+	private int ppDiffLines;
+	private long parsetimeIntended;
+	private long parsetimeError;
+	private boolean recoverySucceeded;
+	private int recoverCount;
+	private ArrayList<Integer> failureLocations;
+	
+	private String extension;
+	
+	public String getExtension() {
+		return extension;
+	}
+
+	public void setExtension(String ext) {
+		this.extension = ext;
+	}
+
+	
+	public String getFilename() {
+		return filename;
+	}
+
+	public int getTreeDistance() {
+		return treeDistance;
+	}
+
+	public void setTreeDistance(int treeDistance) {
+		this.treeDistance = treeDistance;
+	}
+
+	public int getAstDiffLines() {
+		return astDiffLines;
+	}
+
+	public void setAstDiffLines(int astDiffLines) {
+		this.astDiffLines = astDiffLines;
+	}
+
+	public long getParsetimeIntended() {
+		return parsetimeIntended;
+	}
+
+	public void setParsetimeIntended(long parsetimeIntended) {
+		this.parsetimeIntended = parsetimeIntended;
+	}
+
+	public long getParsetimeError() {
+		if(!this.recoverySucceeded)
+			return Integer.MAX_VALUE;
+		return parsetimeError;
+	}
+	
+	public int getParsetimeErrorOverhead() {
+		if(!recoverySucceeded){
+			return PARSE_FAILURE;
+		}
+		if (parsetimeError > parsetimeIntended)
+			return (int)(parsetimeError-parsetimeIntended);
+		return 0;
+	}
+
+	public void setParsetimeError(long parsetimeError) {
+		this.parsetimeError = parsetimeError;
+	}
+
+	public boolean isRecoverySucceeded() {
+		return recoverySucceeded;
+	}
+
+	public void setRecoverySucceeded(boolean parseSucceeded) {
+		this.recoverySucceeded = parseSucceeded;
+	}
+	
+	public String getPathToIntendedFile() {
+		return pathToIntendedFile;
+	}
+
+	public String getPathToErrorFile() {
+		return pathToErrorFile;
+	}
+	
+	public String getPathToClassifiedErrorFile() {
+		return pathToClassifiedErrorFile;
+	}
+	
+	public void setPathToClassifiedErrorFile(String pathToClassifiedErrorFile) {
+		this.pathToClassifiedErrorFile = pathToClassifiedErrorFile;
+	}
+	
+	public String getPathToErrorAST() {
+		return Directories.DIR_ERROR_AST+File.separator+filename+".aterm";
+	}
+	
+	public String getPathToIntendedAST() {
+		return Directories.DIR_INTENDED_AST+File.separator+filename+".aterm";
+	}
+	
+	public String getPathToASTDiff() {
+		return Directories.DIR_DIFFS_AST+File.separator+filename+".txt";
+	}
+
+
+	public String getPathToErrorPP() {
+		return Directories.DIR_ERROR_PP+File.separator+filename;
+	}
+	
+	public String getPathToIntendedPP() {
+		return Directories.DIR_INTENDED_PP+File.separator+filename;
+	}
+	
+	public String getPathToPPDiff() {
+		return Directories.DIR_DIFFS_PP+File.separator+filename+".txt";
+	}
+
+	
+	public TestFile(String fname, String pathToErrorFile, String pathToIntendedFile){
+		filename=fname;
+		this.pathToErrorFile=pathToErrorFile;
+		this.pathToIntendedFile=pathToIntendedFile;
+		treeDistance=PARSE_FAILURE;
+		astDiffLines=PARSE_FAILURE;
+		ppDiffLines = PARSE_FAILURE;
+		parsetimeIntended=PARSE_FAILURE;
+		parsetimeError=PARSE_FAILURE;
+		recoverySucceeded=false;
+		extension = "txt";
+		failureLocations = new ArrayList<Integer>();
+	}
+
+	public void setRecoveredAST(IStrategoTerm ast) {
+		recoveredAST = ast;
+	}
+	public IStrategoTerm getRecoveredAST() {
+		return recoveredAST;
+	}
+	
+	public void setIntendedAST(IStrategoTerm ast) {
+		intendedAST = ast;
+	}
+	public IStrategoTerm getIntendedAST() {
+		return intendedAST;
+	}
+
+	public int getCursorLocation() {
+		String content = "";
+		try {
+			// Read the entire contents of sample.txt
+			content = readFile(getPathToErrorFile());
+		} catch (IOException e) {
+			e.printStackTrace();
+			return Integer.MAX_VALUE;
+		}
+		int startIndex = content.indexOf("xxxCOMPLETION");
+		System.out.println("completion at: " + startIndex);
+		return startIndex + "xxxCOMPLETION".length() - 1;
+	}
+	
+	private static String readFile(String path) throws IOException {
+		FileInputStream stream = new FileInputStream(new File(path));
+		try {
+			FileChannel fc = stream.getChannel();
+			MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0,
+					fc.size());
+			/* Instead of using default, pass in a decoder. */
+			return Charset.defaultCharset().decode(bb).toString();
+		} finally {
+			stream.close();
+		}
+	}
+
+	public void setPPDiffLines(int lineCount) {
+		ppDiffLines = lineCount;
+	}
+
+	public int getPPDiffLines() {
+		return ppDiffLines;
+	}
+
+	public void setPathToTestSuiteDir(String pathToTestSuiteDir) {
+		this.pathToTestSuiteDir = pathToTestSuiteDir;
+	}
+
+	public String getPathToTestSuiteDir() {
+		return pathToTestSuiteDir;
+	}
+
+	public void setRecoverCount(int recoverCount) {
+		this.recoverCount = recoverCount;
+	}
+
+	public int getRecoverCount() {
+		return recoverCount;
+	}
+
+	public void setFailureLocations(ArrayList<Integer> failureLocations) {
+		this.failureLocations = failureLocations;		
+	}
+
+	public ArrayList<Integer> getFailureLocations() {
+		return failureLocations;
+	}
+}

Added: sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/TestRun.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/ErrorScenarios/src/fileprocessing/TestRun.java	Thu Nov 17 11:48:55 2011	(r23616)
@@ -0,0 +1,358 @@
+package fileprocessing;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FilenameFilter;
+import java.io.IOException;
+import java.io.PrintStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+
+public class TestRun {
+	
+	public enum Technique{
+		NO_RECOVERY_SUPPORT,
+		FG,
+		RS,
+		RS_FG,
+	}
+	
+	public enum Permissive{
+		NoRecovery,
+		C,
+		CO,
+		W,
+		WC,
+		WCO,
+		WC_COMPLETIONS,
+		WC_COMPLETIONS_WELLFORMED,
+		COMPLETIONS,
+		COMPLETIONS_WELLFORMED, 
+	}
+	
+	private String suite;
+	private Technique technique;
+	private Permissive permissive;
+	private static Map<String, String> parseTableBaseNames=getPTBaseNames();	
+	private FilenameFilter filter;
+	private String suiteName;
+	
+	public void setFilenameFilter(FilenameFilter filter) {
+		this.filter=filter;
+	}
+
+	public void setTechnique(Technique technique) {
+		this.technique = technique;
+	}
+
+	public void setPermissive(Permissive permissive) {
+		this.permissive = permissive;
+	}
+
+	private static HashMap<String, String> getPTBaseNames(){
+		HashMap<String, String> parseTableBaseNames=new HashMap<String, String>();
+		parseTableBaseNames.put("stratego-java", "StrategoJava");
+		parseTableBaseNames.put("stratego-java-details", "StrategoJava");
+		parseTableBaseNames.put("stratego-java-test", "StrategoJava");
+		parseTableBaseNames.put("stratego-java-completions", "StrategoJava");
+		parseTableBaseNames.put("stratego-java-scalability", "StrategoJava");
+		parseTableBaseNames.put("java", "Java");
+		parseTableBaseNames.put("java-jdt", "Java");
+		parseTableBaseNames.put("java-sql", "Java-SQL");
+		parseTableBaseNames.put("webdsl", "WebDSL");
+		return parseTableBaseNames;
+	}
+
+	public TestRun(String suite){
+		this.suite=suite;
+		technique=Technique.RS_FG;
+		permissive=Permissive.WC;
+		filter=FilenameFilters.getFilterAll();
+	}
+
+	public TestRun(String suite, Technique combined, Permissive grammarVariant){
+		this.suite=suite;
+		technique=combined;
+		permissive=grammarVariant;
+		filter=FilenameFilters.getFilterAll();
+	}
+	
+	public String getDirErrorFiles() {
+		return getDirSuite() + "error-files";
+	}
+
+	public String getDirSuite() {
+		return "testsuites"+File.separator+this.suite+File.separator;
+	}
+	
+	public String getDirIntendedFiles() {
+		return getDirSuite() + "intended-files";
+	}
+
+	public String getDirBaseFiles() {
+		return getDirSuite() + "base-files";
+	}
+	
+	public String getParseTable() {
+		String parsetable=getDirSuite()+"grammars-gen"+File.separator+parseTableBaseNames.get(suite);
+		switch (permissive) {
+		case C:
+			parsetable+="-C";
+			break;
+		case COMPLETIONS:
+			parsetable+="-Completions";
+			break;
+		case COMPLETIONS_WELLFORMED:
+			parsetable+="-wfCompletions";
+			break;
+		case CO:
+			parsetable+="-CO";
+			break;
+		case NoRecovery:
+			parsetable+="";
+			break;
+		case W:
+			parsetable+="-W";
+			break;
+		case WC:
+			parsetable+="-WC";
+			break;
+		case WC_COMPLETIONS:
+			parsetable+="-WC-Completions";
+			break;
+		case WC_COMPLETIONS_WELLFORMED:
+			parsetable+="-WC-wfCompletions";
+			break;
+		case WCO:
+			parsetable+="-WCO";
+			break;
+		default:
+			System.err.println("unexpected permissive grammar variant");
+			assert(false);
+			break;
+		}
+		return parsetable+".tbl";
+	}	
+	
+	public ArrayList<TestFile> getErrorFileList() throws IOException{
+		ArrayList<TestFile> testcases=new ArrayList<TestFile>();
+		File dir = new File(getDirErrorFiles());
+        if(!dir.exists())
+        	throw new IOException("Directory: "+dir + "does not exist");
+        String[] children = dir.list(filter);
+        Arrays.sort(children);
+        for (int i = children.length-1; i >= 0; i--) {
+        //for (int i = 0; i < children.length; i++) {
+        	String fileName=children[i];
+        	String errorFile=getDirErrorFiles()+File.separator+fileName;
+        	String intendedFile=getDirIntendedFiles()+File.separator+fileName;
+        	if(!new File(intendedFile).exists())
+        		intendedFile=getDirBaseFiles()+File.separator+getBaseFileName(fileName);
+        	TestFile t = new TestFile(fileName, errorFile, intendedFile);
+        	if(this.suite == "java-jdt" || this.suite == "java")
+        		t.setExtension("java");
+        	testcases.add(t);
+		}	
+        return testcases;
+	}	
+	
+	private String getBaseFileName(String fileName) {
+		String fname=fileName.substring(0, fileName.indexOf('.'));
+		String extension=fileName.substring(fileName.lastIndexOf("."));
+		return fname+extension;
+	}
+	
+	public void correctInputFiles() throws IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, SGLRException{
+		//errorfiles must contain errors
+		ArrayList<TestFile> testcases=getErrorFileList();
+		setFilenameFilter(FilenameFilters.getFilterAll());	
+		String nonErrorParsetable=getDirSuite()+"grammars-gen"+File.separator+parseTableBaseNames.get(suite)+".tbl";
+		FileProcessing fp = new FileProcessing(nonErrorParsetable);
+		fp.setNoRecovery();
+		for (TestFile test : testcases) {
+			fp.parseNoOutput(test, test.getPathToErrorFile());
+			if(test.isRecoverySucceeded()){
+				new File(test.getPathToErrorFile()).delete();
+			}
+			if(new File(test.getPathToIntendedFile()).exists()){
+				fp.parseNoOutput(test, test.getPathToIntendedFile());
+				if(!test.isRecoverySucceeded()){
+					System.err.println(test.getPathToIntendedFile()+" unexpectedly contains errors!");
+				}
+			}
+		}
+		//intended files must be error free
+		
+	}
+	
+	public void warmup() throws FileNotFoundException, IOException, InvalidParseTableException, TokenExpectedException, BadTokenException, ParseException, SGLRException{
+		FileProcessing fp = getFileProcessing();
+		fp.warmup(getErrorFileList().get(0).getPathToIntendedFile(), 60);
+	}
+	
+	public void processErrorFiles(int warmup) throws TokenExpectedException, FileNotFoundException, BadTokenException, ParseException, IOException, InvalidParseTableException, InterruptedException, SGLRException{
+		 processErrorFiles(warmup, null);
+	}
+	
+	public void processErrorFiles(int warmup, String ppTable) throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, SGLRException{
+		ArrayList<TestFile> testcases = getErrorFileList();
+		FileProcessing fp = getFileProcessing();
+		if(testcases.size()>0 && warmup > 0)
+			fp.warmup(testcases.get(0).getPathToIntendedFile(),warmup);
+		TestFile currentFile=null;
+		
+			for (TestFile test : testcases) {
+				currentFile=test;
+				try{
+					fp.processErrorFile(test, ppTable);
+					System.out.println(currentFile.getFilename());
+				}
+				catch (Error e)
+			    {
+					System.err.println("Error while parsing: "+currentFile.getFilename());
+					//System.err.println(e.getMessage());
+			        e.printStackTrace(); 
+					//Log error
+			    }
+			}
+		PrintStream prsDiff=new PrintStream(getDirSuite()+"results" +File.separator+"quality"+File.separator+getTestRunName());
+		Results.writeDiffStats(testcases, prsDiff);
+		//Results.writeDistanceStats(testcases, prsDiff);
+		printPerformanceResults(testcases);
+		printParseTimeResults(testcases);		
+		Results.removeEmptyDiffFiles(Directories.DIR_DIFFS_AST);
+		Results.removeEmptyDiffFiles(Directories.DIR_DIFFS_PP);
+	}
+
+	public void processFilesCompletion(int warmup, String ppTable) throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, SGLRException{
+		ArrayList<TestFile> testcases = getErrorFileList();
+		FileProcessing fp = getFileProcessing();
+		if(testcases.size()>0)
+			fp.warmup(testcases.get(0).getPathToErrorFile(),warmup);
+		TestFile currentFile=null;		
+		for (TestFile test : testcases) {
+			currentFile=test;
+			try{
+				fp.setCompletionParse(test.getCursorLocation());
+				//fp.createRecoveredAst(test);
+				fp.processErrorFile(test);
+				//System.out.println(currentFile.getFilename());
+			}
+			catch (Error e)
+		    {
+				System.err.println("Error while parsing: "+currentFile.getFilename());
+				//System.err.println(e.getMessage());
+		        e.printStackTrace(); 
+				//Log error
+		    }
+		}
+		printCompletionQualityResults(testcases);		
+		PrintStream prsDiff=new PrintStream(getDirSuite()+"results" +File.separator+"quality"+File.separator+getTestRunName());
+		Results.writeDiffStats(testcases, prsDiff);
+		//Results.writeDistanceStats(testcases, prsDiff);
+		printPerformanceResults(testcases);
+		printParseTimeResults(testcases);		
+	}
+	
+	
+	private void printPerformanceResults(ArrayList<TestFile> testcases)
+			throws FileNotFoundException {
+		PrintStream prsTime = new PrintStream(getDirSuite() + "results"
+				+ File.separator + "performance" + File.separator
+				+ getTestRunName());
+		Results.writeTimeStats(testcases, prsTime);
+	}
+
+	private void printParseTimeResults(ArrayList<TestFile> testcases)
+			throws FileNotFoundException {
+		String prsTimeDirPath = getDirSuite() + "results" + File.separator
+				+ "parsetimes";
+		File prsTimeDir = new File(prsTimeDirPath);
+		if (!prsTimeDir.exists())
+			prsTimeDir.mkdir();
+		PrintStream prsParseTimes = new PrintStream(prsTimeDirPath
+				+ File.separator + getTestRunName());
+		Results.writeParseTimes(testcases, prsParseTimes);
+	}
+
+	private void printCompletionQualityResults(ArrayList<TestFile> testcases)
+			throws FileNotFoundException {
+		PrintStream prs = new PrintStream(getDirSuite()+"results" + File.separator+"quality-context"+File.separator+getTestRunName());
+		int contextPreservedWellFormed = 0;
+		int contextPreservedMalFormed = 0;
+		int contextLost = 0;
+		int parsingFailed = 0;
+		for (TestFile test : testcases) {
+			String astString = "";
+			if(test.isRecoverySucceeded()){
+				if(test.getRecoveredAST() != null)
+					astString = test.getRecoveredAST().toString();
+				else {
+					parsingFailed ++;
+					prs.println("no recovered ast: " + test.getFilename());
+				}
+			}
+			else{
+				parsingFailed ++;
+				prs.println("parsing-failed: " + test.getFilename());
+			}
+			if(astString.contains("COMPLETION")){
+				if(astString.contains("DUMMY") || astString.contains("MISSING_LEXICAL"))
+					contextPreservedMalFormed ++;
+				else
+					contextPreservedWellFormed ++;
+			}
+			else if (test.isRecoverySucceeded()){
+				contextLost++;
+				prs.println("context lost: " + test.getFilename());
+			}			
+		}
+		prs.println("wellformed context: "+ contextPreservedWellFormed);
+		prs.println("malformed context: "+ contextPreservedMalFormed);
+		prs.println("context lost: "+ contextLost);
+		prs.println("parsing failed: "+ parsingFailed);
+	}
+
+	private String getTestRunName() {
+		if(suiteName !=null && suiteName!="")
+			return suiteName;
+		return this.technique.toString()+"-"+this.permissive.toString();
+	}
+
+	private FileProcessing getFileProcessing() throws FileNotFoundException,
+			IOException, InvalidParseTableException {
+		FileProcessing fp=new FileProcessing(getParseTable());
+		switch (technique) {
+		case FG:
+			fp.setCombinedRecovery(false, true, true);
+			break;
+		case RS:
+			fp.setCombinedRecovery(false, false, false);
+			break;
+		case RS_FG:
+			fp.setCombinedRecovery(false, true, false);
+			break;
+		case NO_RECOVERY_SUPPORT:
+			fp.setNoRecovery();
+			break;
+		default:
+			System.err.println("unexpected technique");
+			assert(false);		
+			break;
+		}
+		return fp;
+	}
+
+	public void setSuiteName(String suiteName) {
+		this.suiteName = suiteName;
+	}
+
+}

From m.dejonge at tudelft.nl  Thu Nov 17 16:54:01 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 17 Nov 2011 15:54:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23617 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111117155401.24288CC28F@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov 17 15:54:00 2011
New Revision: 23617
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23617&sc=1

Log:
statistics about token occurrences

Added:
   sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str
Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/builders.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/builders.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/builders.str	Thu Nov 17 11:48:55 2011	(r23616)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/builders.str	Thu Nov 17 15:54:00 2011	(r23617)
@@ -2,6 +2,7 @@
 
 imports 
 	workflow
+	occurrences
 	configuration-stratego
 
 strategies //builders
@@ -12,3 +13,8 @@
       filename := <guarantee-extension(|"txt")> path;
       result   :=  <evaluate-edit-scenarios(|<stratego-language-name>)>
 
+token-occurrences-stratego:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"stat.txt")> path;
+      result   :=  <run-statistics(|<stratego-language-name>)>

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Thu Nov 17 11:48:55 2011	(r23616)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Thu Nov 17 15:54:00 2011	(r23617)
@@ -10,8 +10,16 @@
 
 bracket-pairs = fail
 
+quote-pairs = fail
+
 operators = fail
 
+separators = fail
+
+misc-symbols = fail
+
+keywords = fail
+
 replacement-pairs = fail
 
 bracket-pairs-stochast = !65

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str	Thu Nov 17 11:48:55 2011	(r23616)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/error-rules-stratego.str	Thu Nov 17 15:54:00 2011	(r23617)
@@ -2,10 +2,81 @@
 
 rules
 
-bracket-pairs = ![("(", ")"), ("[", "]"), ("{", "}"), ("<", ">"), ("|[", "]|"), ("\"", "\"")]
+bracket-pairs = ![("(", ")"), ("[", "]"), ("{", "}"), ("<", ">"), ("{|", "|}")]
 
-operators = ![";", "<+", "+>", "+", "=", ":=", ":", "->", "=>", "<=" ]
+quote-pairs = ![("\"", "\""), ("'", "'")]
+
+operators = ![";", "<+", "+>", "+", "=", ":=", "=>", "<=", "!", "?" ]
 
 replacement-pairs = 
 	![("|[", "[|"), ("]|", "|]"), ("|[", "["), ("]|", "]"), (",", "."), (".", ","),("/","\\"), 
-	(":=","="), (":","="),("=",":"), ("_","-"),	("rules", "rule"), ("imports", "import")]
\ No newline at end of file
+	(":=","="), (":","="),("=",":"), ("_","-"),	("rules", "rule"), ("imports", "import")]
+
+separators =![","]
+
+keywords = 
+![
+	"if",
+	"in",
+	"end",
+	"rec",
+	"let",
+	"with",
+	"case",
+	"else",
+	"then",
+	"prim",
+	"rules",
+	"sorts",
+	"where",
+	"extend",
+	"sealed",
+	"switch",
+	"module",
+	"script",
+	"depends",
+	"proceed",
+	"imports",
+	"override",
+	"internal",
+	"external",
+	"overlays",
+	"otherwise",
+	"signature",
+	"extensible",
+	"strategies",
+	"overridable",
+	"import-term",
+	"constructors",
+	"specification"		
+]
+
+misc-symbols =
+![
+	".",
+	"~",
+	"#",
+	"@",
+	":",
+	"|",
+	"-",
+	"$",
+	"/",
+	"_",
+	"'",
+	"*",
+	":-",
+	":+",
+	"\\\\",
+	"**",
+	"->",
+	"{^",
+	"\\\"",
+	"//",
+	"/*",
+	"*/",
+	":+=",
+	"/*",
+	"\\\\*"
+]
+

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str	Thu Nov 17 11:48:55 2011	(r23616)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-errors-incomplete.str	Thu Nov 17 15:54:00 2011	(r23617)
@@ -109,7 +109,7 @@
 		end
 
 lookup-closing:
-	open-br -> <lookup> (open-br, <bracket-pairs>) 
+	open-br -> <lookup> (open-br, <conc>(<bracket-pairs>, <quote-pairs>)) 
 
 update-closings(|br) =
 	remove-closing(|br) <+

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str	Thu Nov 17 11:48:55 2011	(r23616)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/generate-token-errors.str	Thu Nov 17 15:54:00 2011	(r23617)
@@ -10,10 +10,17 @@
 
 rules
 
-missing-tokens = <conc> (<operators>, <bracket-pairs; map(Fst)>, <bracket-pairs; map(Snd)>)
+missing-tokens = <concat> [<operators>, <bracket-pairs; map(Fst)>, <bracket-pairs; map(Snd)>, <misc-symbols>] 
 
 duplication-tokens = missing-tokens
 
+replacement-token-pairs = <conc> (<replacement-pairs>, <keyword-misspellings>)
+
+keyword-misspellings =
+	keywords;
+	filter(where(<gt> (<string-length>, 4))); 
+	map(!(<id>, $[[<id>]xxx]))
+
 strategies
 
 ast-to-replaced-token-error-specification:
@@ -50,12 +57,12 @@
 create-replacement-token-errors:
 	ast -> replacement-errors
 	where
-		replaced-tokens := <replacement-pairs; map(Fst)>;
+		replaced-tokens := <replacement-token-pairs; map(Fst)>;
 		weighted-tokens := <tokens-specification(lookup-replace-token|replaced-tokens)> ast;
 		replacement-errors := <map(create-token-error-replaced(|ast))> weighted-tokens
 
 lookup-replace-token:
-	(_, txt, _) -> <lookup> (txt, <replacement-pairs>) 
+	(_, txt, _) -> <lookup> (txt, <replacement-token-pairs>) 
 	
 duplicate-token-string:
 	token -> <concat>[token, " ", token]

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str	Thu Nov 17 11:48:55 2011	(r23616)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/helpers.str	Thu Nov 17 15:54:00 2011	(r23617)
@@ -5,7 +5,6 @@
   signatures-error-gen
   configuration
 
-
 rules //error creation helpers
 
 make-testcase-specification-for-terms(term-to-error-specs):

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str	Thu Nov 17 15:54:00 2011	(r23617)
@@ -0,0 +1,97 @@
+module occurrences
+
+imports
+	helpers
+	configuration
+
+rules //for statistics
+
+run-statistics(|language-name):
+	_ -> <print-token-kind-statistics> token-statistics
+	where
+		dir := <basefile-dir(|language-name)>; 
+		asts := <readdir; filter(not(string-ends-with(|".svn")); !$[[dir]/[<id>]]; parse-source-file(|language-name))> dir; 
+		token-statistics := <foldr(empty-token-kind-statistics, add-token-kind-statistics)> asts
+
+empty-token-kind-statistics =
+	![[], [], [], [], [], [], [], [], []]
+
+add-token-kind-statistics:
+	(ast, [separators, operators, br-open, br-close, keywords, identifiers, block-comments, string-literals, misc-symbols]) -> 
+	[<conc> (separators, separators'),
+	<conc> (operators, operators'), 
+	<conc> (br-open, br-open'), 
+	<conc> (br-close, br-close'), 
+	<conc> (keywords, keywords'),
+	<conc> (identifiers, identifiers'), 
+	<conc> (block-comments, block-comments'), 
+	<conc> (string-literals, string-literals'), 
+	<conc> (misc-symbols, misc-symbols')
+	]
+	where 
+		tokenstream := <origin-token-stream> ast;
+		separators' := <filter(is-separator-token; ?(_,<id>,_))> tokenstream;
+		operators' := <filter(is-stratego-operator-token; debug; ?(_,<id>,_))> tokenstream; debug;
+		br-open' := <filter(is-bracket-open-token; ?(_,<id>,_))> tokenstream;
+		br-close' := <filter(is-bracket-close-token; ?(_,<id>,_))> tokenstream;
+		keywords' := <filter(is-keyword-token; ?(_,<id>,_))> tokenstream;
+		identifiers' := <filter(is-identifier-token; ?(_,<id>,_))> tokenstream;
+		block-comments' := <filter(is-block-comment-token; ?(_,<id>,_))> tokenstream;
+		string-literals' := <filter(is-string-token; ?(_,<id>,_))> tokenstream;
+		misc-symbols' := <filter(is-misc-token; ?(_,<id>,_))> tokenstream
+
+
+print-token-kind-statistics:
+	[separators, operators, br-open, br-close, keywords, identifiers, block-comments, string-literals, misc-symbols] -> 
+	$[
+		separators: [<length> separators]
+		operators: [<length> operators]
+		br-open: [<length> br-open]
+		br-close: [<length> br-close]
+		keywords: [<length> keywords]
+		identifiers: [<length> identifiers]
+		block-comments: [<length> block-comments]
+		string-literals: [<length> string-literals]
+		misc-symbols: [<length> misc-symbols]
+
+		----------------------------------------------------
+
+		separators: [<make-set; separate-by(|" "); concat-strings> separators]
+		operators: [<make-set; separate-by(|" "); concat-strings> operators]
+		br-open: [<make-set; separate-by(|" "); concat-strings> br-open]
+		br-close: [<make-set; separate-by(|" "); concat-strings> br-close]
+		keywords: [<make-set; separate-by(|" "); concat-strings> keywords]
+		identifiers: [<make-set; separate-by(|" "); concat-strings> identifiers]
+		block-comments: [<make-set; separate-by(|" "); concat-strings> block-comments]
+		string-literals: [<make-set; separate-by(|" "); concat-strings> string-literals]
+		misc-symbols: [<make-set; separate-by(|" "); concat-strings> misc-symbols]
+	]
+
+is-separator-token = ?(_, token, 5); where(separators; fetch(equal(|token)))
+
+is-stratego-operator-token = ?(_, token, 5); where(operators; fetch(equal(|token)))
+
+is-bracket-open-token = ?(_, token, 5); where(bracket-pairs; fetch(?(token, _)))
+
+is-bracket-close-token = ?(_, token, 5); where(bracket-pairs; fetch(?(_, token)))
+
+is-misc-token = 
+	?(_, token, 5); 
+	not(is-separator-token);
+	not(is-stratego-operator-token);
+	not(is-bracket-open-token);
+	not(is-bracket-close-token)
+
+rules
+
+is-block-comment-token =
+	?(_, txt, 7); where(<string-ends-with(|"*/")> txt)
+
+is-keyword-token =
+	?(_,_,4)
+	
+is-string-token =
+	?(_,_,3)
+
+is-identifier-token =
+	?(_,_,1)
\ No newline at end of file

From m.dejonge at tudelft.nl  Thu Nov 17 16:54:58 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 17 Nov 2011 15:54:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23618 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111117155458.AE6DD108C00B@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov 17 15:54:58 2011
New Revision: 23618
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23618&sc=1

Log:
statistics about token occurrences

Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str	Thu Nov 17 15:54:00 2011	(r23617)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str	Thu Nov 17 15:54:58 2011	(r23618)
@@ -31,7 +31,7 @@
 	where 
 		tokenstream := <origin-token-stream> ast;
 		separators' := <filter(is-separator-token; ?(_,<id>,_))> tokenstream;
-		operators' := <filter(is-stratego-operator-token; debug; ?(_,<id>,_))> tokenstream; debug;
+		operators' := <filter(is-stratego-operator-token; ?(_,<id>,_))> tokenstream;
 		br-open' := <filter(is-bracket-open-token; ?(_,<id>,_))> tokenstream;
 		br-close' := <filter(is-bracket-close-token; ?(_,<id>,_))> tokenstream;
 		keywords' := <filter(is-keyword-token; ?(_,<id>,_))> tokenstream;

From m.dejonge at tudelft.nl  Thu Nov 17 18:11:34 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 17 Nov 2011 17:11:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23619 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111117171134.2637F7F801C@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Nov 17 17:11:33 2011
New Revision: 23619
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23619&sc=1

Log:
percentages

Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Thu Nov 17 15:54:58 2011	(r23618)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Thu Nov 17 17:11:33 2011	(r23619)
@@ -57,6 +57,9 @@
       
 strategies //file paths
 	
+file-dir(|lang-name) = 
+	!$[[<project-path>]/testsuites/[lang-name]/files]
+
 basefile-dir(|lang-name) = 
 	!$[[<project-path>]/testsuites/[lang-name]/basefiles]
 

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str	Thu Nov 17 15:54:58 2011	(r23618)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str	Thu Nov 17 17:11:33 2011	(r23619)
@@ -9,7 +9,7 @@
 run-statistics(|language-name):
 	_ -> <print-token-kind-statistics> token-statistics
 	where
-		dir := <basefile-dir(|language-name)>; 
+		dir := <file-dir(|language-name)>; 
 		asts := <readdir; filter(not(string-ends-with(|".svn")); !$[[dir]/[<id>]]; parse-source-file(|language-name))> dir; 
 		token-statistics := <foldr(empty-token-kind-statistics, add-token-kind-statistics)> asts
 
@@ -42,17 +42,18 @@
 
 
 print-token-kind-statistics:
-	[separators, operators, br-open, br-close, keywords, identifiers, block-comments, string-literals, misc-symbols] -> 
+	result@[separators, operators, br-open, br-close, keywords, identifiers, block-comments, string-literals, misc-symbols] -> 
 	$[
-		separators: [<length> separators]
-		operators: [<length> operators]
-		br-open: [<length> br-open]
-		br-close: [<length> br-close]
-		keywords: [<length> keywords]
-		identifiers: [<length> identifiers]
-		block-comments: [<length> block-comments]
-		string-literals: [<length> string-literals]
-		misc-symbols: [<length> misc-symbols]
+		separators: [<print-stat-line(|total)> separators]
+		operators: [<print-stat-line(|total)> operators]
+		br-open: [<print-stat-line(|total)> br-open]
+		br-close: [<print-stat-line(|total)> br-close]
+		keywords: [<print-stat-line(|total)> keywords]
+		identifiers: [<print-stat-line(|total)> identifiers]
+		block-comments: [<print-stat-line(|total)> block-comments]
+		string-literals: [<print-stat-line(|total)> string-literals]
+		misc-symbols: [<print-stat-line(|total)> misc-symbols]
+		total: [total]
 
 		----------------------------------------------------
 
@@ -66,6 +67,13 @@
 		string-literals: [<make-set; separate-by(|" "); concat-strings> string-literals]
 		misc-symbols: [<make-set; separate-by(|" "); concat-strings> misc-symbols]
 	]
+	where
+		total := <concat; length> result
+
+print-stat-line(|total):
+	tokens -> $[[<length> tokens] ([percentage]%)]
+	where
+		percentage := (<div> (<mul>(<length> tokens, 100), total))
 
 is-separator-token = ?(_, token, 5); where(separators; fetch(equal(|token)))
 

From M.A.Akhter at student.tudelft.nl  Thu Nov 17 19:32:32 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 17 Nov 2011 18:32:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23620 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	analyze analyze/esv analyze/sdf analyze/str codegen
	codegen/esv codegen/sdf codegen/str codegen/te...
Message-ID: <20111117183232.BA4B1CC1AF@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Nov 17 18:32:31 2011
New Revision: 23620
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23620&sc=1

Log:
merging + adapting semantic index/symbol-table in spoofaxlang(inprogress)

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.aterm.desugared
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.spx
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-import.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-module.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-package.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-contracts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/esv/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-symbols.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-types.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/store-imports.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/resolve/imports.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/signatures.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/to-spx.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/parse.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/path.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resolve-symbol.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/symboltable.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sdf2conflicts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-import.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-import.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-import.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -2,7 +2,7 @@
 
 imports
 	context/-
-	
+	context/symboltable
 imports 
 	include/SpoofaxLang
 	utils/debug
@@ -13,19 +13,19 @@
 	analyze-section: 
 		Imports(ast) -> (errors, [], [])
 		where
-  		<debug-analysis>$[ErrorChecking | Imports Section : [<pp-aterm>]]
-		with 
-			errors   := <collect-om(imports-constraint-error)> ast
+  		dbg-analysis(!$[ErrorChecking | Imports Section : [<print-as-string>]] | "analyze-section" , <debug-level-INFO>)
+			; errors   := <collect-om(imports-constraint-error)> ast
 rules
+	
 	imports-constraint-error:
 		 ImportLegacyArtifact(Name(m at modulename)) -> ( m, $[Failed to import '[m]'. Module is not found. Please verify it exist at [directory-path] directory.])
 		 where
 		 	!modulename;
-		 	not-declared-legacy-artifact 
+		 	not(is-declared-legacy-artifact) 
 		 where
 		 	directory-path := <concat-strings;dirname> [<get-project-path>, "/", m]
 	
-	imports-constraint-error: 
+	imports-constraint-error:
 		ImportPackage(package-qname at QName(_)) -> (package-qname , $[Failed to resolve '[package-qname-string]'. Please check spx.config for configured SPX sources. ])
 		where
 			!package-qname;
@@ -39,7 +39,7 @@
 			require(
 				<is-declared-package>QName([package-name])
 			+		
-				<is-declared-legacy-artifact<+is-declared-global-artifact>package-name
+				<is-declared-legacy-artifact>package-name
 			) 	
 	
 	imports-constraint-error:
@@ -53,19 +53,4 @@
 				is-declared-module
 			)	
 		where
-			module-qname-string :=  <convert-qname(|".")>module-qname
-
-rules
-	 not-declared-legacy-artifact = is-not-declared-global-artifact; is-not-declared-legacy-artifact 
-	 
-	 is-declared-package = where(DeclaredPackage)
-    
-   is-declared-module = where(DeclaredModule)
-    
-   is-not-declared-legacy-artifact = where(not(is-declared-legacy-artifact))
-    
-   is-declared-legacy-artifact = ?name; where(<UsedLegacyArtifacts>(<GetEnclosingPackageName> , name))
-    
-   is-declared-global-artifact = ?name ;  where(<UsedLegacyArtifacts>(Globals(), name)  => Resolved())
-   
-   is-not-declared-global-artifact = where(not(is-declared-global-artifact)) 		
\ No newline at end of file
+			module-qname-string :=  <convert-qname(|".")>module-qname
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-module.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-module.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-module.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -10,6 +10,7 @@
 	common
 	utils/annotations
 	utils/debug	
+	context/resolve-declarations
 imports 
 	analyze/sdf/check 
 	analyze/esv/check
@@ -19,58 +20,77 @@
 imports 
 	utils/contract 	
 	spoofaxlang
+	
 
 rules	
+  
 	//module specific semantic error checking 	
+	
 	module-constraint-error : 
-		Module(attrb* , s at SPXModuleName(modname) , section*) -> (modname, $[Multiple declaration of module '[modname]' ])
-			with
-				package-typed-qname := <get-annotation(get-package-annotation)> s
-				;Module(module-qname)  := <get-module-typed-qname>(package-typed-qname, s)
-			where 
-				require(<bagof-DeclaredModule>module-qname => [_])
-
-
+		def at Module(attrb* , s at SPXModuleName(m) , section*) -> (s, $[Multiple declaration of module '[m]' ])
+		where
+			module-qname := <GetEnclosingModuleName> ;
+			<get-enclosed-modules-of-package><GetEnclosingPackageName>
+			; filter(?module-qname)
+			; is-not-empty-list 
+			; require(ensure-is-unique) // if declaration is not unique, it means that module with this names is declared multiple times in the current package scope
+	
 rules 
 	//analyzes module errors returns it as a touple of errors , warnings and infos 
-	analyze-module-semantics : m at Module(attrb* , modname , section*)  -> (merrors',[],[]) 
-	where 
-		<collect-all(module-constraint-error, conc)>m  => merrors'
+	analyze-module-semantics : 
+		m at Module(attrb* , modname , section*)  -> (merrors',[],[]) 
+		where 
+			<collect-all(
+				module-constraint-error, 
+				conc)
+			> m  => merrors'
 
 		
 	// analyzes module errors and appened it with the existing problems  
-	append-semantic-problems(s|unziped-issues*):  m at Module(attrb* , modname , section*)  -> semantic-problems*
-	with 
-		<merge-semantic-problems>( <s> m , unziped-issues*) => semantic-problems*
-		
+	append-semantic-problems(s|unziped-issues*):  
+		m at Module(attrb* , modname , section*)  -> semantic-problems*
+		where with-spxverify( 
+			<merge-semantic-problems>( 
+				<s> m , 
+				unziped-issues*
+			)=> semantic-problems*
+		)
 rules
 	
 	analyze-module-definition: 
 		m at Module(attrb* , modname , section*) -> m
-		with
-				package-typed-qname := <GetEnclosingPackageName> 
-				;module-typed-qname  := <GetEnclosingModuleName>
-			<+ 
-				 debug(!"ErrorChecking | Failed to create current scope.")
-				;fail
-		with
-				<debug-analysis>$[ErrorChecking | Analyzing Semantic Problems of [<pp-aterm-forced> (package-typed-qname,module-typed-qname)]]	 
-				;issues* := <map(analyze-section)>section*
-				;unziped-issues* := <unzip-semantic-issuses>issues*
+		where
+		  dbg-analysis(! $[Currently Analyzing : [<print-as-string>m]] | "analyze-module-definition" , <debug-level-INFO>) 
+			; with-spxverify(
+				  	package-typed-qname := <GetEnclosingPackageName> 
+				  ; module-typed-qname  := <GetEnclosingModuleName>
+				  , !"Failed to create current scope @analyze-module-definition"  	
+				  )
+			; dbg-analysis(!$[ErrorChecking | Analyzing Semantic Problems of [<print-as-string> (package-typed-qname,module-typed-qname)]] | "analyze-module-definition" , <debug-level-INFO>)
+			; with-spxverify(
+			  	issues* := <map(analyze-section)>section*
+					; unziped-issues* := <unzip-semantic-issuses>issues*	
+			  )
 		where		 
 				<append-semantic-problems(analyze-module-semantics|unziped-issues*)> m  => unziped-issues'*
-				;current-scope := (package-typed-qname ,module-typed-qname)
-				;rules(
-						GetSemanticProblems :  current-scope  ->unziped-issues'*  
-				)	
+				; current-scope := (package-typed-qname ,module-typed-qname)
+				; with-spxverify(  
+						rules( GetSemanticProblems :  current-scope  ->unziped-issues'*)
+					)	
 		where
-			<debug-compiler>$[ErrorChecking | Found semantic problems for [<pp-aterm-forced> (package-typed-qname,module-typed-qname)]  
-			                                  Problems :[<pp-aterm-forced> unziped-issues*]]
+			dbg-analysis(! $[ErrorChecking | Found semantic problems for [<print-as-string> (package-typed-qname,module-typed-qname)]  
+			                                  Problems :[<print-as-string> unziped-issues*]] |  "analyze-module-definition" , <debug-level-WARNING>)
 							
 rules 
-			 
 	analyze-section = 
-		where(not(?Imports(_)+?SDFSection(_) + ?ESVSection(_) + ?STRSection(_) + ?SDFSectionEH(_, _)))
-		;<debug-analysis>$[ErrorChecking | Ignoring Section: [<pp-aterm>]] 
-		;!([], [], [])		
+		where(
+			not(
+				?Imports(_)
+			+ ?SDFSection(_) 
+			+ ?ESVSection(_) 
+			+ ?STRSection(_) 
+			+ ?SDFSectionEH(_, _))
+			)
+		; dbg-analysis(! $[ErrorChecking | Ignoring Section: [<print-as-string>]]| "analyze-section" , <debug-level-INFO>) 
+		; !([], [], [])		
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-package.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-package.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/check-package.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -26,7 +26,7 @@
 			not(<get-language-name>package-typed-qname)
 	
 	package-constraint-error :
-		package-typed-qname at Package(untyped-qname) -> (package-typed-qname , $[Multple definitions of Language Name in the Package. Following definition is found : [<pp-aterm>configure-lang-names]])
+		package-typed-qname at Package(untyped-qname) -> (package-typed-qname , $[Multple definitions of Language Name in the Package. Following definition is found : [<print-as-string>configure-lang-names]])
 		where 
 			<get-all-language-name>package-typed-qname => configure-lang-names;
 			is-not-empty-list;
@@ -42,8 +42,8 @@
 		warnings* := <collect-all(package-constraint-warning, conc)>p  ;
 		infos*    := []
 	where 	
-		rules(GetSemanticProblems :  current-scope  ->  ( errors* , warnings*, infos*))
-	where
-			<debug-compiler>$[ErrorChecking | Found semantic problems for ([<pp-aterm-forced> current-scope])  
-			                                  Problems :[<pp-aterm-forced> ( errors* , warnings*, infos*)]]
+		rules(
+			GetSemanticProblems :  current-scope  ->  ( errors* , warnings*, infos*)
+		)
+		; dbg-compiler(!$[ErrorChecking | Found semantic problems for ([<print-as-string> current-scope]) Problems :[<print-as-string> ( errors* , warnings*, infos*)]])
 		 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/esv/check.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -17,40 +17,40 @@
 	analyze-section: 
 		ESVSection(ast) -> (error-esv*, warning-esv* , info-esv*)
   	where
-  		<debug-analysis>$[ErrorChecking | ESV Section : [<pp-aterm>]]
+  		dbg-analysis(! $[ErrorChecking | ESV Section : [<print-as-string>]] | "analyze-section" , <debug-level-INFO>)
 		where
   		error-esv*   := <collect-all(constraint-esv-error, conc)> ast;
   		warning-esv* := <flatten-list><collect-all(constraint-esv-warning, conc)> ast;
   		info-esv*    := []
 
-
 rules
 	constraint-esv-error:
     Sort(x) -> (x, $[Unknown sort "[x]"])
     where
-      require(<resolve-sdf-sort-declaration> x)
-  
+    	require(<verify-sdf-sort-declaration-exists> x)
+    
+ 
   constraint-esv-error:
     Strategy(x) -> (x, $[Unknown strategy "[x]"])
     where
-      require(<is-declared-stratego> x)
-      
+      require(<verify-declared-stratego> x)
+     
   constraint-esv-error:
     SemanticProvider(x) -> (x, $[Must be a generated .ctree or .jar file])
     where
       require(<string-ends-with(|".jar") + string-ends-with(|".ctree")> x)
    		
   constraint-esv-error: 
-   	LanguageName( name ) -> (name, $[ Multiple declarations of language name. Declared in following packages : [<pp-aterm>packages*]])
+   	LanguageName( name ) -> (name, $[ Multiple declarations of language name. Declared in following packages : [<print-as-string>packages*]])
    	where
-   			<get-languagename-declaration-sites> name =>packages*;
-   			is-not-empty-list;
-   			make-set;
-				not(ensure-is-unique)
+   			<get-languagename-declaration-sites> name  		 => packages*
+   			; is-not-empty-list
+   			; not(ensure-is-unique)
 					
 rules
+	
 	constraint-esv-warning:  
-		StartSymbols(sorts*) -> err-messages*
+		sSym at StartSymbols(sorts*) -> err-messages*
 		where
 			s* := <get-sdf-start-symbols> <GetEnclosingPackageName>; // getting all the context-free-start-symbols for the package   	
 			<filter(unknown-start-symbol-error(|s*))>sorts* => err-messages*;
@@ -72,4 +72,4 @@
 				ensure-is-unique
 		where		
 				not(!packages* => [_])
-   	 		 
\ No newline at end of file
+  
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/main.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -3,6 +3,7 @@
 imports 
 	context/sdf/declare
 	context/-
+	codegen/compile
 	normalize/signatures
 imports 
 	include/SpoofaxLang
@@ -10,6 +11,7 @@
 	common
 	utils/annotations
 	utils/debug	
+	codegen/main
 imports 
 	analyze/sdf/check 
 	analyze/esv/check
@@ -24,24 +26,27 @@
 	utils/debug
 	utils/contract
 	spoofaxlang
-
+	common
+	
 rules 
 	// performs static analysis and semantic checking 
-	analyze-main = 
-		?list-of-package-qnames
-		;<analyze-global>()
-		;<list-loop(analyze-spx-package)>list-of-package-qnames
-
+	analyze-main= 
+		with-spxverify(
+			?list-of-package-qnames
+			; <analyze-global>()
+			; <list-loop(analyze-spx-package)>list-of-package-qnames
+			, !"analyze-main failed"
+		)
 	
 rules	// Package specific semantic error checking 
 
 	// verify whether this package will be analyzed or not
-	should-analyze-this-package = 
-		?package-qname;
-		where(not(<AnalyzedPackage>package-qname))
+	should-analyze-this-package = not(is-in-analyzed-packages-queue) 
+		
 	
 	// Fails if there is any semantic problems 
-	fail-if-has-errors : problems@(errors, warning, infos*) -> problems
+	fail-if-has-errors : 
+		problems@(errors, warning, infos*) -> problems
 		where 
 			if not(!errors => []) then 
 		 		fail	
@@ -51,123 +56,116 @@
 	analyze-spx-package: 
 		package-typed-qname at Package(untyped-qname) -> <id>
 		where 
-			<debug-analysis> $[Analyze| Analyze-spx-package| Planning to Analyze : [<pp-aterm>]] 
+			 dbg-analysis(! $[Analyze| Analyze-spx-package| Planning to Analyze : [<print-as-string>]]| "analyze-spx-package" , <debug-level-INFO>)
 		where
-				if should-analyze-this-package  then //FOR handling circular referneces   
-					{|GetEnclosingPackageName:
-							rules ( GetEnclosingPackageName      := package-typed-qname);
-							<analyze>package-typed-qname;
-							<list-loop(
-									analyze-spx-module
-								)
-							><get-enclosed-modules>package-typed-qname
-					|};		
-				package-abs-path := <DeclaredPackage>untyped-qname;
-				where(
-					rules(
-						AnalyzedPackage: package-typed-qname -> package-typed-qname
-						AnalyzedPackageDeclaredIn:+ package-abs-path -> package-typed-qname
-					)
-				)
-				<+
-				<debug-analysis> $[Analyze| analyze-spx-package > [<pp-aterm>package-typed-qname] Failed. ];
-				fail
-			end
+			if should-analyze-this-package  then //FOR handling circular referneces   
+				{| GetEnclosingPackageName 
+				 : rules ( 
+		 			 	GetEnclosingPackageName:= package-typed-qname
+		 			 )
+	 			 ; <analyze>package-typed-qname // analyzing current package's declaration
+				 ; with-spxverify ( // analyzing all the enclosed module definition
+		   				<list-loop(analyze-spx-module)><get-enclosed-modules>package-typed-qname
+					 )		
+				 |}		
+        ; with-spxverify( <add-to-analyzed-packages-queue>package-typed-qname )
+		  <+
+		    dbg-analysis(! $[Analyze| analyze-spx-package > [<print-as-string>package-typed-qname] Failed. ] | "analyze-spx-package" , <debug-level-ERROR>);
+		    fail
+      end
 			
-	// Perform analysis on module definition 
 	analyze-spx-module: 
-		module-typed-qname at Module(untyped-qname) -> <id>
+		module-typed-qname at Module(_) -> <id>
 		where 
-			<debug-analysis> $[Analyze|  analyze-spx-module> Planning to analyze module for semantic problems: [<pp-aterm>]] 
+			dbg-analysis(! $[Analyze|  analyze-spx-module> Planning to analyze module for semantic problems: [<print-as-string>]] | "analyze-spx-module" , <debug-level-INFO>)    
 		where 
-			if not(<AnalyzedModule>module-typed-qname) then
-					<debug-analysis> $[Analyze| analyze-spx-module> Currently Analyzing : [<pp-aterm>]]; 
-					module-decl* := <get-module-declarations>module-typed-qname;
-					{|GetEnclosingModuleName:
-							rules( GetEnclosingModuleName := module-typed-qname);
-							<list-loop(
-									analyze-module-definition
-							 )>module-decl* 
-					|};
-					module-abs-path := <DeclaredModule>untyped-qname;
-					where(
-						rules(
-							AnalyzedModule:     module-typed-qname -> module-typed-qname 
-							AnalyzedModulesDeclaredIn:+ module-abs-path -> module-typed-qname
-						)
-					)
+			
+			if not(<is-a-analyzed-module>module-typed-qname) then
+				<get-module-definition-with-location>module-typed-qname => (module-decl,location);
+				{| GetEnclosingModuleName
+			   : rules( GetEnclosingModuleName := module-typed-qname)
+				 ; <analyze-module-definition>module-decl
+			   |}
+				 ; with-spxverify(<add-to-analyzed-modules>(module-typed-qname,location))	   
 				<+ 
-					<debug-analysis> $[Analyze| analyze-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
-					;fail
-			else
-				<debug-analysis> $[Analyze| analyze-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
-			end		
-	
-
+				dbg-analysis(!$[Analyze| analyze-spx-module| [<print-as-string>module-typed-qname] Failed. ] | "analyze-spx-module" , <debug-level-ERROR>)
+				; fail
+			end	
+			 
 rules
-	
 	//lookups for the analyzed problems
 	get-all-analyzed-problems =  all-keys-GetSemanticProblems ; map(GetSemanticProblems); unzip-semantic-issuses 
 	
-	
-	get-semantic-problmes-by-file : file-abs-path ->problems
+	get-semantic-problmes-by-file: 
+		file-abs-path ->problems
 		where
-			problems-at-modules*  := <get-semantic-problems(get-semantic-problmes-at-module-level)><bagof-AnalyzedModulesDeclaredIn>file-abs-path;
-			problems-at-packages* := <get-semantic-problems(get-semantic-problmes-at-package-level)><bagof-AnalyzedPackageDeclaredIn>file-abs-path;
-			problems := <merge-semantic-problems> ( problems-at-modules*   , problems-at-packages*) 
-			
+			verify(String | <id> , "String @get-semantic-problmes-by-file")  
+			; get-declared-modules-qname
+			; get-semantic-problems(
+					get-semantic-problmes-at-module-level
+			  ) 
+		  => problems-at-modules*
+		where	
+			get-declared-packages-qname
+			; get-semantic-problems(
+					get-semantic-problmes-at-package-level
+				) 
+			=> problems-at-packages* 
+		where	
+			problems := <merge-semantic-problems>(problems-at-modules* , problems-at-packages*) 
 	
-	get-semantic-problems(s): scopes* -> problems
-	where
+		
+	get-semantic-problems(s): 
+		scopes* -> problems
+		where
 			<map(s)>scopes* => problmes-zipped* ;  
 			<unzip-semantic-issuses>problmes-zipped* => problems
 	
-	get-semantic-problmes-at-package-level : p at Package(QName(_)) -> problems-package-level
+	get-semantic-problmes-at-package-level : 
+		p at Package(QName(_)) -> problems-package-level
 		where
 			<GetSemanticProblems>p => problems-package-level 
+			<+
+			problems-package-level := ([] , [] , [])
 	
-	get-semantic-problmes-at-module-level : module-typed-qname -> problems-module-level
-	where
-			<debug-compiler>$[ErrorChecking | Caching semantic issues for module [<pp-aterm>]]
-	where
-		<GetEnclosingScope> module-typed-qname => package-typed-qname;
-		<get-analyzed-problems-of> (package-typed-qname,module-typed-qname)=>problems-module-level
+	get-semantic-problmes-at-module-level : 
+		module-typed-qname at Module(_) -> problems-module-level
+		where
+			<get-enclosing-package-qname> module-typed-qname => package-typed-qname;
+			<get-analyzed-problems-of> (package-typed-qname,module-typed-qname)=>problems-module-level
+		<+
+			problems-module-level := ([] , [] , [])
 		
-	<+
-		problems-module-level := ([] , [] , [])
-	where
-		<debug-compiler>$[ErrorChecking | Found Problems for this module : [<pp-aterm>problems-module-level]]	
- 
- 
-	get-analyzed-problems-of: scope@(package-typed-qname, module-typed-qname) -> problems
+	get-analyzed-problems-of: 
+		scope@(package-typed-qname, module-typed-qname) -> problems
 		where 
 			contracts (
 					contract-requires(?Package(QName(_)) |package-typed-qname);
 					contract-requires(?Module(QName(_))  |module-typed-qname)
 			)	
-			;<GetSemanticProblems>scope 							=> problems
-		where
-			<debug-compiler> $[ErrorChecking |  Problmes found [<pp-aterm-forced>scope] :  [<pp-aterm-forced>problems]]
+			; <GetSemanticProblems>scope => problems
 				
 rules 
 			
-	merge-semantic-problems : (unziped-issues1 , unzipped-issues2)-> semantic-problems*
-	with 
-		!unziped-issues1  =>(merrors,mwarnings,minfos);
-		!unzipped-issues2 =>(err, warning, info);
-		combined-problmes* := [(merrors,mwarnings,minfos),(err, warning, info)]
-	where		
-		<unzip-semantic-issuses>combined-problmes* => semantic-problems* 
+	merge-semantic-problems : 
+		(unziped-issues1 , unzipped-issues2)-> semantic-problems*
+		where 
+			with-spxverify( 
+				!unziped-issues1  =>(merrors,mwarnings,minfos);
+				!unzipped-issues2 =>(err, warning, info);
+				combined-problmes* := [(merrors,mwarnings,minfos),(err, warning, info)]
+			)	
+		where		
+			<unzip-semantic-issuses>combined-problmes* => semantic-problems* 
 
-	/* Converts a list as following 
-					[([a1] , [b1] , [c1])
-					([a2] , [b2] , [c2])
-					([a3] , [b3] , [c3])
-					] 
-		to:
-				([a1,a2,a3] , [b1,b2,b3] , [c1,c2,c3])
-				
-	*/
+	// Following strategy unzips semantic issues and combines them 
+	// together. Example : Converts a list as following 
+	//				[([a1] , [b1] , [c1])
+	//				([a2] , [b2] , [c2])
+	//				([a3] , [b3] , [c3])
+	//				] 
+	//	to:
+	//			([a1,a2,a3] , [b1,b2,b3] , [c1,c2,c3])
 	unzip-semantic-issuses:
 		list-of-semantic-issues -> unziped-list
 		where
@@ -175,35 +173,18 @@
 			<+
 				debug(!"unzip semantic issues failed : ");fail
 	
-	//unziping list of semantic issues
+	// unziping list of semantic issues
 	unzip-semantic-issuse(|errors, warnings, infos) =
 		?[hd-issue|rest-issues];
 		(
-				(!hd-issue => (errs', warns' , infos') <+ <debug> $["Illegal Argument in unzip-semantic-issues : [<pp-aterm>hd-issue]"];fail)
+				(!hd-issue => (errs', warns' , infos') <+ <debug> $["Illegal Argument in unzip-semantic-issues : [<print-as-string>hd-issue]"];fail)
 				;err1 := <concat>[errs', errors]
 				;war1 := <concat>[warns', warnings]
 				;inf1 := <concat>[infos', infos]
-				;<unzip-semantic-issuse(|err1, war1, inf1)>rest-issues
+				;<unzip-semantic-issuse(|err1, war1, inf1)>rest-issues 
 			 <+
 			  !hd-issue => [];
 			  <unzip-semantic-issuse(|errors, warnings, infos)>rest-issues
 		)
 		
 	unzip-semantic-issuse(|errors, warning, infos) : [] -> (errors, warning, infos)		
-
-	
-rules			// Caching Resulting Semantic Errors 	
-
-	cache-semantic-problems: () -> ()
-	where
-		all-keys-AnalyzedModulesDeclaredIn => list-file*;
-	 	<map(store-semantic-problmes)> list-file*
-	
-	store-semantic-problmes : filepath -> filepath
-	where
-		<debug-compiler>$[Caching | Caching semantic issues : [<pp-aterm>]]
-	where 
-		<get-semantic-problmes-by-file> filepath=> problmes-to-save*
-	where
-		<debug-compiler>$[Caching | Saving problems: [<pp-aterm>problmes-to-save*]];
-		<cache-semantic-issues>( filepath , problmes-to-save*)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/sdf/check.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -9,26 +9,32 @@
   context/-
   include/SpoofaxLang
   utils/attributes
-
+rules
+	verify-sdf-symbol-declaration-exists =
+		<verify-symbol-exists>( <id>, SDFDeclaration())
+  <+
+    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<print-as-string>]] 
+                 | "verify-sdf-symbol-declaration-exists" ,<debug-level-WARNING>)
+    ; fail 
+      
 rules
 	analyze-section: SDFSectionEH(_, ast) -> <analyze-sdf-errors>ast
 
 	analyze-section:
 		SDFSection(ast) -> <analyze-sdf-errors>ast
 		where
-			<debug-analysis>$[ErrorChecking | SDF Section : [<pp-aterm>]]
+			dbg-analysis(! $[ErrorChecking | SDF Section : [<print-as-string>]] | "analyze-section", <debug-level-INFO>)
 
   analyze-section:
     TemplateSection(ast) -> <analyze-sdf-errors>
     where
-      <debug-analysis>$[ErrorChecking | Template Section : [<pp-aterm>]]
+      dbg-analysis(!$[ErrorChecking | Template Section : [<print-as-string>]] | "analyze-section" , <debug-level-INFO>)
 
 	analyze-sdf-errors :
 		ast -> (error'*, warning'*, [])
 		where
-			<debug-analysis>$[ErrorChecking | SDF  : [<pp-aterm>]]
-		with
-	    // We only collect-om since we don't want inner warning dupes
+			  dbg-analysis(! $[ErrorChecking | SDF  : [<print-as-string>]] | "analyze-sdf-errors" , <debug-level-INFO>) ; 
+			// We only collect-om since we don't want inner warning dupes
 	    error*   := <flatten-list><collect-om( ?context-free-syntax       (<collect-om(context-free-syntax-error)>)
                                            + ?lexical-syntax            (<collect-om(lexical-syntax-error)>)
 	    																		 + ?context-free-start-symbols(<collect-om(context-free-start-symbols-error)>)
@@ -48,6 +54,7 @@
 	    error'*   := <conc;flatten-list> (serror*, error*);
 	    warning'* := <flatten-list> warning*
 
+				
 	
 strategies
 	
@@ -75,7 +82,7 @@
   context-free-syntax-warning:
     sort(x) -> (x, $[No definition for [x]])
     where
-      not(<resolve-sdf-declarations> x)
+      not(<verify-sdf-symbol-declaration-exists> x)
 
   context-free-syntax-sort-error:
     parameterized-sort(_, _) -> [] // not supported

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/analyze/str/check.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -1,94 +1,81 @@
 module analyze/str/check
 
 imports
-	 libstratego-lib
- 	 libstrc
+   libstratego-lib
+   libstrc
 imports 
-	common
-	lib/editor-common.generated
-	include/SpoofaxLang
+  common
+  lib/editor-common.generated
+  include/SpoofaxLang
 imports
-	utils/debug 
+  utils/debug 
 imports  
-	context/sdf/declare-signature
-	context/str/declare
-	context/str/signature-generator
+  context/sdf/declare-signature
+  context/str/declare
+  context/str/signature-generator
 
 rules
   analyze-section: 
-		STRSection(ast) -> ( errors, warnings, [])
-		where
-  		<debug-analysis>$[ErrorChecking | STR Section : [<pp-aterm>]]
-		with
-    	errors   := <collect-all(stratego-global-constraint-error + stratego-constraint-error, conc)> ast;
-      warnings := <collect-all(stratego-constraint-warning, conc)> ast
-      
+    STRSection(ast) -> ( errors, warnings, [])
+    where
+       dbg-analysis(! $[ErrorChecking | STR Section : [<print-as-string>]] | "analyze-section" , <debug-level-INFO>) 
+	     ; with-spxverify(
+			       {|IsNoConflict
+			       : errors   := <collect-all(stratego-global-constraint-error + stratego-constraint-error, conc)> ast
+			       ; warnings := <collect-all(stratego-constraint-warning, conc)> ast 
+			       |}
+	       )
+	     
 rules 
-	//TODO : Use new Is-declared in other cases where needed. 		
-  is-declared( |actual-no-of-arguments)=
-  	one(
-    		(?opName + ?SVar(opName))
-    		;candidate-op-signatures := <getOperationSignatures>opName
-    		;<debug-analysis>$[operation name : [<pp-aterm>opName] . Associated Signatures Found :  [<pp-aterm> candidate-op-signatures]]
-    		;<assert-eq-opname-arity(|opName, actual-no-of-arguments)>candidate-op-signatures
-    		;!opName 
-      )
-  	   
   is-declared =
-    	one(?_{cookie} + ?SVar(_{cookie}))
-	
-	assert-eq-opname-arity(|actual-opname , actual-no-of-arguments)= 
-			?[hd|tl]
-			;((expected-op-name , expected-no-of-arguments) := hd 
-				;	actual-opname := expected-op-name 
-				; actual-no-of-arguments := expected-no-of-arguments
-			  <+ <assert-eq-opname-arity(|actual-opname , actual-no-of-arguments)>tl
-				)	  
+      one(?_{cookie} + ?SVar(_{cookie}))
        
 rules // Constraints
 
   stratego-global-constraint-error:
     CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' not defined])
     where
-      //require(is-declared)
-			require(
-				 is-declared 
-			<+ is-declared(|<length> t*))
-			
+      require(
+         is-declared 
+      )
+      
   stratego-global-constraint-error:
     Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
     where
-    	require(
-    		 is-declared 
-    	<+ is-declared(|<length> t*))
+      require(
+         is-declared 
+      <+ is-declared-signature(|<length> t*)
+    	)
 
-  constraint-error:
-    Var(x) -> (x, $[Variable '[x]' is not declared])
-    where
-      require(is-declared)
-      
   stratego-global-constraint-error:
-    Import(x) -> (x, $[Unable to import '[x]'])
+    Var(x) -> (x, $[Variable '[x]' is not declared])
     where
-      require(not(<IsImportedFailed> x))
-
+      require(
+    	   is-declared
+    	)
+   
   stratego-global-constraint-error:
     DynRuleScopeId(x) -> (x, $[Dynamic rule '[x]' not defined])
     where
-      require(is-declared)
+      require(
+    	   is-declared
+    	)
 
   stratego-global-constraint-error:
     LabeledDynRuleId(x, _) -> (x, $[Dynamic rule '[x]' not defined])
     where
-      require(is-declared)
+      require(
+      	 is-declared
+    	)
 
   stratego-constraint-error:
     AnnoDef(a*, sdef @ SDefT(x, _, _, _)) -> (a*, $[No external strategy or rule '[x]'])
-    with
+    where with-spxverify(
       if not(!a* => []) then
         sig := <signature-of> sdef;
         rules(IsNoConflict: sdef)
       end
+    )  
     where
       require(
         !a* => []
@@ -100,16 +87,20 @@
     SDefT(x{cookie}, s*, t*, s) -> (x, $[Conflicts with external definition of '[x]'])
     where
       require(
-         <getStrDeclaration> cookie => SDefT(_, _, _, _)
+         <resolve-str-declaration> cookie => SDefT(_, _, _, _)
       <+ IsNoConflict
       )
-
+	
+	
+	//signature-of => str-sig ; is-declared-stratego(?str-sig)
+	
+	
   // FIXME: name sdefs after constructors to fix constructor conflict errors 
   stratego-constraint-error:
     OpDecl(x{cookie}, s*) -> [(x, $[Conflicts with strategy '[y_name]']),
                               (y, $[Conflicts with constructor [x]/[<length> s*]])]
     where
-      require(not(<getStrDeclaration> cookie => y @ SDefT(y_name, _, _, _)))
+      require(not(<resolve-str-declaration> cookie => y @ SDefT(y_name, _, _, _)))
 
   stratego-constraint-error:
     Build(t) -> <stratego-constraint-error-bad-build> t
@@ -154,13 +145,15 @@
       map(!(<id>, "Build symbol in match pattern")) => builds;
       require([])
   
-  //TODO FIX : origin tracking is not working 
+  //TODO FIX : origin-equal
+  /*
   stratego-constraint-warning:
-    Assign(v @ Var(x), _) -> (x, $[Variable '[x]' may be bound already])
+    a at Assign(v @ Var(x), _) -> (x, $[Variable '[x]' may be bound already])
     where
       Var(x') := <declaration-of> v;
-      require(<origin-equal(|x)> x')
-
+      require(<origin-equal(|x)> x');
+    */
+	
   stratego-constraint-warning:
     Var(x) -> (x, $[Unparenthesized constructor: use '[x]()' instead])
     where
@@ -174,23 +167,6 @@
   stratego-constraint-warning:
     Import("Java-15") -> (<id>, "Use 'import libjava-front' instead")
 
-  /*
-  stratego-constraint-warning:
-    Module(x, _) -> (x, $[Module name should be qualified with a path relative to the import path])
-    where
-      not(NoAnalysis);
-      {| SourceDir:
-        rules(SourceDir :- _);
-        <eq> (<base-filename> x, <remove-extension> <base-filename> <CurrentFileFullPath>);
-        require(<resolve-import-path> $[[x].str] + <resolve-import-path> $[[x].rtree])
-      |}
-  */
-
-  stratego-constraint-warning:
-    Module(x, _) -> (x, $[Module name does not correspond to file name])
-    where
-      require(<eq> (<base-filename> x, <remove-extension> <base-filename> <CurrentFileFullPath>))
-
   stratego-constraint-warning:
     Import(f) -> (f, $[Relative path in import])
     where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -13,27 +13,77 @@
 	normalize/-
 	context/-
 	codegen/-
-	
+	utils/contract
+
+					
 rules
-	emit-build-script: package-qnames* -> package-qnames*  
-		with 
- 			 project-path             := <ProjectPath>
- 		with 
-			 main-ant-output-file-name    := "build.spx.main.generated"
-			;autogen-ant-output-file-name := "build.spx.packages.generated"
-		  ;autogen-ant-output-path      := <concat-strings>[project-path  , "/.build/" ,  autogen-ant-output-file-name , ".xml"]
-			;main-ant-output-path         := <concat-strings>[project-path  , "/.build/" ,  main-ant-output-file-name    , ".xml"]
-		with
-			 <dirname; ensure-directory-exists>autogen-ant-output-path  
-			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>())
-			;<refresh-file>autogen-ant-output-path   
-		with
-			packages-specific-ant-string := <packages-specific-ant>(package-qnames*, main-ant-output-file-name ,autogen-ant-output-file-name);
-			<dirname; ensure-directory-exists>main-ant-output-path;  
-			<save-to-file>(main-ant-output-path,packages-specific-ant-string);
-			<refresh-file>main-ant-output-path
-			 
-	
+	emit-build-script: 
+		package-qnames* -> package-qnames*  
+		where
+ 			with-spxverify(
+	 			 project-path             := <ProjectPath>
+	 			 ; main-ant-output-file-name    := "build.spx.main.generated"
+				 ; autogen-ant-output-file-name := "build.spx.packages.generated"
+			   ; autogen-ant-output-path      := <concat-strings>[project-path  , "/.build/" ,  autogen-ant-output-file-name , ".xml"]
+				 ; main-ant-output-path         := <concat-strings>[project-path  , "/.build/" ,  main-ant-output-file-name    , ".xml"]
+			 	 , !"Failed to initialize properties"
+			);  
+			<generate-autogenerated-build-file> ( autogen-ant-output-path, autogen-ant-output-file-name);   
+			<generate-main-build-spx-file> (package-qnames* , main-ant-output-file-name, main-ant-output-path, autogen-ant-output-file-name)
+			
+		generate-main-build-spx-file =
+			?(package-qnames* , main-ant-output-file-name, main-ant-output-path, autogen-ant-output-file-name);
+			cache-path := <spx-cache-path(|"cache.buid.xml")>main-ant-output-path;
+			<dirname; ensure-directory-exists> main-ant-output-path; // ensures the directory exists
+			if not(<file-exists>cache-path) <+ not(<packages-not-modified>package-qnames*) then 
+				with-spxverify(
+					packages-specific-ant-string := <packages-specific-ant>(package-qnames*, main-ant-output-file-name ,autogen-ant-output-file-name);
+					<save-to-file>(cache-path ,packages-specific-ant-string);
+					<refresh-file>cache-path;
+					<index-generated-package-ids>package-qnames* 
+					, !$[Failed to create autogen build script - [main-ant-output-file-name]]  	
+				);
+				ensure-build-file-is-upto-date( id |cache-path , main-ant-output-path)
+			end;
+			ensure-build-file-is-upto-date( not(<file-exists> main-ant-output-path) <+ <is-newer> (main-ant-output-path, cache-path) |cache-path , main-ant-output-path) 
+		
+		 packages-not-modified : 
+			new-package-qnames*  -> <id>
+		 	 where 
+		 	 	old-package-qnames* := <get-generated-package-ids>;  
+		 		if <eq>(<length>new-package-qnames* , <length>old-package-qnames*) then 
+		 			!new-package-qnames* ;
+		 			list-loop(
+		 				<elem>(<id> , old-package-qnames*)
+		 			) 
+		 		else
+		 			fail
+	 			end	   
+		
+		ensure-build-file-is-upto-date ( s |cache-path , main-path) =
+			if s then
+				with-spxverify( 
+					<copy-file>(cache-path ,main-path);
+					<refresh-file>main-path
+					, !$[Failed to copy build script from cache to the build directory]
+					)  
+			end 
+			
+		
+		generate-autogenerated-build-file = 		
+			?(autogen-ant-output-path ,autogen-ant-output-file-name);
+			<dirname; ensure-directory-exists> autogen-ant-output-path; // ensures the directory exists 
+			cache-path := <spx-cache-path(|"cache.buid.xml")>autogen-ant-output-path;
+			if not(<file-exists>cache-path) then 
+				with-spxverify(
+			 		<save-to-file>(cache-path , <get-ant-autogeneratedscript>())
+					, !$[Failed to create autogen build script - [autogen-ant-output-file-name]]
+			 	);
+			 	ensure-build-file-is-upto-date( id |cache-path , autogen-ant-output-path)
+			end;
+		 	ensure-build-file-is-upto-date(  not(<file-exists>autogen-ant-output-path) <+ <is-newer>(autogen-ant-output-path , cache-path)  |cache-path , autogen-ant-output-path)
+		 	
+		
 		packages-specific-ant: (pakage-qname*, main-ant-output-file-name ,autogen-ant-output-file-name)  ->
 $[<?xml version="1.0" encoding="UTF-8" ?>
 		
@@ -51,10 +101,11 @@
     </target>
   	
 </project>] 
-	with 
-		packages-root                :=	<Autogenerated-Artifacts-Dir>;
-		build-package-dependencies   :=	<map(get-package-target-name);concat-strings>pakage-qname*
-	
+	where 
+		with-spxverify( 
+			packages-root                :=	<get-autogenerated-artifacts-dir>;
+			build-package-dependencies   :=	<map(get-package-target-name);concat-strings>pakage-qname*
+		)
 	
 	emit-package-specific-ant : p at Package(package-untyped-qname at QName(qname-parts*)) -> $[ 
   <target name="[package-target-name]">
@@ -85,16 +136,18 @@
     </antcall>
   </target>	
 	]
-	with 
-		relative-autogen-path         :=  <qname-to-path>package-untyped-qname
-		;package-directory		        := $[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
- 		;language-name						 	  := <get-language-name>p
- 		;language-id-directory			  := <get-language-id; language-id-to-file-path>p
- 		;package-target-name				  := <get-package-target-name>package-untyped-qname  
- 		;package-qname-string				  :=  <package-qname-to-string>p
- 		;language-sdf-specific-params := <get-idef-args>p 
- 		;language-str-specific-params := ""	 
- 		 
+	where 
+		with-spxverify(
+			relative-autogen-path         :=  <qname-to-path>package-untyped-qname
+			; package-directory		        := $[[<get-autogenerated-artifacts-dir>]/[relative-autogen-path]]
+	 		; language-name						 	  := <get-language-name>p
+	 		; language-id-directory			  := <get-language-id<+get-default-language-id; language-id-to-file-path>p
+	 		; package-target-name				  := <get-package-target-name>package-untyped-qname  
+	 		; package-qname-string			  :=  <package-qname-to-string>p
+	 		; language-sdf-specific-params  := <get-idef-args>p 
+	 		; language-str-specific-params  := ""	 
+	 		, !"Failed emit-package-specific-ant" 
+ 		) 
 
 rules
 	
@@ -117,7 +170,7 @@
 			separate-by(|"/");
 			concat-strings
 	
-	get-idef-args = get-all-imported-defs ; map(\s -> $[ -Idef &quot;${basedir}/[s].def&quot; ]\) 		
+	get-idef-args = get-imported-defs-of-package  ; map(\s -> $[ -Idef &quot;${basedir}/[s].def&quot; ]\) 		
 		
 rules
 			
@@ -573,9 +626,9 @@
   </target>
 </project>
 ]
-where
-	if <eq>(Jar() , <STROutputStrategy> ) then 
-		default-spx-target := "spx.default.jar"
-	else
-		default-spx-target := "spx.default.ctree"
-	end		
\ No newline at end of file
+	where
+		if <eq>(Jar() , <get-str-output-strategy> ) then 
+			default-spx-target := "spx.default.jar"
+		else
+			default-spx-target := "spx.default.ctree"
+		end		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -8,7 +8,11 @@
 	analyze/-
 	context/-
 	context/str/-
+	context/symboltable
+	context/scope-tree
+	context/esv/declare
 	codegen/-
+	utils/contract
 imports
 	common
 	config
@@ -18,51 +22,43 @@
 	analyze/main
 	lib/editor-common.generated
 
-
 //TODO : refactor : move it to declare all when handling all types of legacy artifacts. Currently only considering STR Libs
-
-
 rules
 	// Starting a new compilation session
 	new-compile-session(s) =
-			{| 	CompiledPackage,currently-compiling-package,CompiledModule,
-			 		UsedBy,Using,
-			 		UsedLegacyArtifacts,UsingLegacyArtifacts,
-			 		GetSemanticProblems,
-			 		AnalyzedModulesDeclaredIn,
-					PackagesDeclaredIn,
-					DeclaredModule,
-					DeclaredPackage,
-					GetEnclosingScope,
-					GetEnclosedScope:
-					  with(
-							where(
-								<debug-compiler>$[============Starting new compiler session ==============]
-							);
-							compiler-init; // initializing compiler session
-							where(<debug-compiler>$[============Initialization is done  ==============]);
-							(s <+ <debug-compiler>$[============Compile session FAILED ==============]; fail);
-				      ?x
-				    ); !x
-			|}
-
+      {| 	GetSemanticProblems, Declared
+			 		
+			 :  dbg-compiler(!$[-----------------::new-compile-session::-----------------]);
+					with-spxverify(
+				  	compile-init  // initializing compiler session
+				  	; s 
+				    ; compile-unload
+				    , !" new compile session failed unexpectedly. "  
+	        )  
+	   |}
 
-rules
+rules				
 	// Compiler initialization
-	compiler-init =
+	compile-init =
+		index-init;
 		// Getting Source directory to start parsing files if needed.
 		// Otherwise, it reads from the cache
 		where(
-			bagof-SPX-Source-Dir => spx-sources
+			get-all-spx-sources  => spx-sources
 		);
 		//Iterating all the configured source directory
 		<list-loop(parse-spx-sources)> spx-sources;
 		//Initializes global symbols / default primitives
-		init-declaration
-
+		init-declarations
+	
+	// save state of current compile session
+	compile-save-state = index-save
+	  
+	//closes any underlying connection 
+	compile-unload = 
+	  //closes and saves current state of symbol table.
+    index-close  
 
-
-strategies
 	// Pre-compilation before starting up actual compilation
 	// Before starting primary compilation,
 	// pre-compile normalize the parsed tree
@@ -70,136 +66,154 @@
 	// performing further compilation.
 	pre-compile-compilation-unit =
 		origin-track-forced(normalize-all) // normalize and builds scope-tree and  partial symbol table with the local information availble
-		//normalize-all
-
-strategies
-
-	// Main compilation events
+	
+rules
+	
+	// compiling all the package 
 	compile-all =
-		?current-term ;
-		new-compile-session(
-			list-of-package-qname := <get-package-list>
-			;<compile-internal>list-of-package-qname
-			;<debug>$[=========Getting list of errors============]
-			;<get-all-analyzed-problems>()
-			;debug(!"Errors : " ) // Get all errors
-		)
-		;!current-term //restoring current term to avoid side effects
-
-
-	// compiles all the packages stored at the filepath specified
-	compile-packages-of: file-abs-path -> issues*
-	where
-		<debug-compiler>$[Compiling packages of  [<pp-aterm-forced>file-abs-path]]
-	where
-			Enable-Caching;
-			<debug-compiler>$[=========Try Getting  Semantic Problems From cache============];
-			<get-cached-semantic-issues> file-abs-path => issues*
-		<+
-			//enable-compiler-debugging;
-			new-compile-session(
-			 	list-of-package-qname:= <get-packages-of-file> file-abs-path
-				;<compile-internal>list-of-package-qname
-				;<debug-compiler>$[=========Getting list of errors============]
-				;<get-semantic-problmes-by-file>file-abs-path => issues*
+		? (file-abs-path, ast)
+		; new-compile-session(
+		  	get-package-list => list-of-package-qname  
+				; <compile-internal>list-of-package-qname
+				; <get-all-analyzed-modules-locations>()
+				; mark-issues-of-file
 			)
-			//find out the semantic errors
-			//;disable-compiler-debugging
+	
+	compile-packages-of: (ast, file-abs-path) -> <compile-packages-of(fail, id , id)>(ast, file-abs-path) 
+		 	
+	// compiles all the packages stored at the filepath specified
+	compile-packages-of(should-compile-forward-refs, get-forward-references, generate-code): 
+		(ast, file-abs-path) -> (ast', issues*)
 		where
-			if not(<fail-if-has-errors>issues*) then
-				  <debug(!"Errors : ")>issues* 	  // get errors for this file only
-			end
-
-
+			new-compile-session(
+			 	<get-declared-packages-qname> file-abs-path => list-of-package-qname 
+				; <compile-internal>list-of-package-qname // Compiling
+				; <get-semantic-problmes-by-file>file-abs-path => issues*// getting list of errors
+				; if not(<fail-if-has-errors>issues*) then
+				  	// if there is error, setting flag that foud errors 
+				  	with-spxverify ( 
+				  		rules(HasErrors :=  True())
+						);
+						additional-qnames* := [];
+						<debug(!"----Errors in current AST: ")>issues* 	  // get errors for this file only
+					else
+						// compiling additional packages 
+						// where current packages are imported to ( forward references) 
+						// Lazy/Incremental compilation is employed.
+						// only compiling following packages if 
+						// there is no error from compiling current packages and all its depending packages
+						if should-compile-forward-refs then 
+							<mapconcat(get-forward-references)>list-of-package-qname => additional-qnames*;
+							where(<debug>$[Compiling following additional packages :[<print-as-string>additional-qnames*]]);
+							compile-internal
+						else
+							additional-qnames* := []	
+						end	
+					end
+				;	<get-analyzed-ast>ast => ast'
+				; <get-related-files-of-packages><conc>(list-of-package-qname , additional-qnames*)
+				; mark-issues-of-file
+				; generate-code		
+				; <debug>$[ ------------------------------------------------
+		    ]  
+  
+		 )
+		 
 	// internal strategy of compilation used by different main compile strategies
-	compile-internal : list-of-package-qname* -> list-of-package-qname*
-	where
-		<debug-compiler>$[=========Compiling packages===============
-		 				 [<pp-aterm-forced>list-of-package-qname* ]
-		 				 ]
-	where
-		<compile-main>list-of-package-qname*;
-		<analyze-main>list-of-package-qname*;
-		<debug-compiler>$[=========Compilation is done===============]
-	where
-		if Enable-Caching then
-			<debug-compiler>$[=========Caching Semantic Problems============];
-			<cache-semantic-problems>()
-		end
-
-
+	compile-internal: 
+		list-of-package-qname* -> list-of-package-qname*
+		where
+			<debug>$[Compiling packages :[<print-as-string><map(?Package(<id>);convert-qname(|"."))>list-of-package-qname*]]
+		where
+		  debug-time(
+			  	compile-main
+			  	| "--Compilation Done"
+		  )
+		where    
+			debug-time(
+			  	analyze-main
+			  	| "--Error Analyses Done"
+		  )
+		   			
+		   				 	
+	mark-issues-of-file = 
+		verify(List | <id> , "List of files path (absolute)@mark-issues-of-file")
+		; list-loop(
+	  		{
+					?file-path
+					; (e, w, n) := <get-semantic-problmes-by-file>file-path
+					;	if !e ; ?[_|_] then   
+				 	  		  <debug(!"----FileName : ")><base-filename>file-path
+						  	; <debug> $[----Errors  [<print-as-string>(e, w, n)] ]
+					  		; with-spxverify ( 
+				  				 rules(HasErrors :=  True() )
+								  )
+						end
+					; spx-compilation-unit-ast := <get-indexed-compilation-unit> file-path 
+	  			; !(spx-compilation-unit-ast ,  e, w, n)
+	  			;	set-markers(|spx-compilation-unit-ast) 	 //setting error markers	
+		  	}	
+			)	
 
+	
 rules
-
-	// Compiler main : Compiles provided list of packages and stores semantic problems
 	compile-main =
-		?list-of-package-qnames;
-		where(
-			<debug-compiler>$[Compile-main | compiling packages : [<pp-aterm>] with modules:
-																		[<pp-aterm><all-keys-Declared;filter(?(Modules(),_) )>]
-			]
-		)
+		? list-of-package-qnames
+		; dbg-compiler(!$[compile-main:: compiling packages : [<print-as-string>] with modules:
+																		[<print-as-string><get-declared-modules-qname>])
+			 ])
+		  
 		//Phase 1:  Resolve-all-import-reference for the listed packaged
 		//				  in this way => dependecy list will be created automatically for
 		//				  efficient analysis
-		;where(<debug-compiler>$[compile-main | resolving-package-reference:])
-		;where( resolve-package-references )
+		; dbg-compiler(!$[compile-main:: resolving-package-reference:])
+		; resolve-package-references
 		//Phase 2:  Compile all the legacy artifacts referred by Spx Packages
 		//				  and make them accessible in the Global Scope
-		;where(<debug-compiler>$[compile-main | compile-legacy-artifacts:])
-		;where(compile-legacy-artifacts)
+		; dbg-compiler(!$[compile-main:: compile-legacy-artifacts:])
+		; compile-legacy-artifacts 
 		//Phase 3:  Compile Packagesand make them accessible in the different package
 		//					namespace.
 		//					Use the dependency graph to first compile the depending on packages.
 		//					TODO : Optimize. Phase 2 and Phase 3 can be compiled together.
-		;list-loop(compile-spx-package)
+		; list-loop(compile-spx-package)  
+		  
 
-
-
-	//During analyze-package , just call this strategy
 	compile-spx-package:
 		package-typed-qname at Package(untyped-qname) -> <id>
 		where
-			<debug-compiler>$[compile-spx-package| Planning to compile : [<pp-aterm>]]
-		where
 			if should-compile-this-package  then //For handling circular referneces of packages marking this package as currently being compiled
-				where(
-					rules(
-						currently-compiling-package : package-typed-qname -> package-typed-qname
-					)
-				);
+				
+				dbg-compiler(!$[--Compiling SPX Packages:: [<print-as-string>package-typed-qname]]);
+				with-spxverify( <add-to-compile-queue> package-typed-qname  , ! "failed to add in compile queue")
+				
 				// Getting List of Packages/Modules that this package is depending on.
 				// Idea is to analyze/compile the dependent package first.
-				<get-all-usings>untyped-qname => depending-typedqname*
-			  ;<debug-compiler>$[	compile-spx-package | List of dependending-on packages/modules : [<pp-aterm>depending-typedqname*]]
-				// Start Compiling the dependent Spx Artifacts
-				;<list-loop(compile-depending-spx)>depending-typedqname*
-
-				;{|GetEnclosingPackageName:
-						<declare-current-package-scope> package-typed-qname;
+				; <get-all-usings>package-typed-qname=> depending-typedqname*
+				; dbg-compiler(!$[--Compiling SPX Packages:: List of dependending-on packages/modules : [<print-as-string>depending-typedqname*]  ])
+			  
+			  // Start Compiling the dependent Spx Artifacts
+				; <list-loop(compile-depending-spx)>depending-typedqname*
+				;{| GetEnclosingPackageName 
+				  : <declare-current-package-scope> package-typed-qname
 						// Now, since all the depending-on artifacts are compiled
 						// start compiling the enclosing modules of this package.
 						// Note: currently we are not considering any nested packages.
-						<declare-spx-global-symbols>package-typed-qname;
-						<list-loop(compile-spx-module)><get-enclosed-modules>package-typed-qname
-
-				|};
-				// Making this package as compiled.
-				// TODO : consider keeping only 1 DR as a marker for compiled package.
-				where(
-					rules(
-						CompiledPackage : package-typed-qname -> package-typed-qname
-					)
-				)
-			else
-				<debug-compiler>$[compile-spx-package| Ignored as already in the queue : [<pp-aterm>]]
+						; modules-to-compile* := <get-enclosed-dirty-modules>package-typed-qname
+						; <declare-spx-global-symbols>modules-to-compile* 
+						; dbg-compiler(!$[--Compiling SPX Packages:: compiling following modules(dirty) : [<print-as-string>modules-to-compile*]])
+						; <list-loop(compile-spx-module)>modules-to-compile*
+        |}
+		  else
+				dbg-compiler(!$[--Compiling SPX Packages:: Ignored as already in the queue : [<print-as-string>]])
 			end
 
+
 	// Compiles imported spx packages/modules
 	compile-depending-spx:
 		typed-qname -> typed-qname
 		where
-			<debug-compiler> $[compile-depending-spx > Compiling depending-on spx package/module :[<pp-aterm>]]
+			dbg-compiler(! $[----Compiling Depending SPX:: Compiling depending-on spx package/module :[<print-as-string>]])
 		where
 			if !typed-qname => Package(QName(_)) then
 				<compile-spx-package>typed-qname
@@ -211,100 +225,136 @@
 						// In later step , when look up is performed, any symbol other than
 						// symbols that consist in this particular module are marked/realized
 						// as private symbols.
-						enclosing-package-typed-qname := <GetEnclosingScope>typed-qname;
+						enclosing-package-typed-qname := <get-enclosing-package-qname>typed-qname;
 						<compile-spx-package>enclosing-package-typed-qname
 				else
-					<debug-compiler> $[compile-depending-spx | Illegenal depending spx artifact: [<pp-aterm> typed-qname]];
+					dbg-compiler(!$[----Compiling Depending SPX:: Illegal depending spx artifact: [<print-as-string> typed-qname]]);
 					fail
 				end
-
 			end
 
 	// Compiles Spx Modules
 	compile-spx-module:
 		module-typed-qname at Module(untyped-qname) -> <id>
 		where
-			<debug-compiler>$[compile-spx-module| Planning to Compile module: [<pp-aterm>]]
-		where
-			if not(<CompiledModule>module-typed-qname) then
-				<debug-compiler>$[compile-spx-module| Currently Compiling : [<pp-aterm>]]; //this package is not compiled before
-				module-decl := <get-module-declaration>module-typed-qname;
+			if not(<is-a-compiled-module>module-typed-qname) then
+				dbg-compiler(!$[----Compiling module:: [<print-as-string>]]);
+				
+				<get-module-definition-with-location>module-typed-qname => (module-decl,location) ;
+				
 				{|GetEnclosingModuleName:
 						<declare-current-module-scope> module-typed-qname;
 						<delcare-spx-scoped-symbols>module-decl
-				|};
-				where(rules(CompiledModule: module-typed-qname -> module-typed-qname))
+				|}
+				
+				; with-spxverify(
+				  	<add-to-compiled-modules>(module-typed-qname,location)
+			  	  // Indexing langauge descriptor for this package if it does exists 
+        		; try(<index-language-descriptor><get-declared-language-definition>module-typed-qname)
+    		  	)
 			else
-				<debug-compiler>$[compile-spx-module| Ignored as already in the queue : [<pp-aterm>]] //this package is not compiled before
+				dbg-compiler(!$[----Compiling module:: Ignored as already in the queue : [<print-as-string>]]) //this package is not compiled before
 			end
-
-
-	//TODO : append additional checks . compilation should be incremental and if source not changed, show the cached errors/warnings/infos
-	should-compile-this-package =
-		?package-qname;
-		where(not(<currently-compiling-package>package-qname))
-
-
+			
 rules
 
-
 	// Compile sdf, str, esv modules which are imported in the global nameepsace
-	compile-legacy-artifacts: package-tqnames* -> package-tqnames*
-	where
-		<make-set>package-tqnames* => upackages;
-		<debug-compiler>$[compile-main | compile-legacy-artifacts | List:[<pp-aterm>upackages]]
-	where
-		{| Resolved-ExternalArtifact:
-					//TODO : Make it configurable which lib to include by default. Hence remove following hardcoding.
-					<compile-legacy-artifact>(Globals() , Module(Name("libstratego-lib")) ,Unresolved());
-					<list-loop(compile-legacy-artifact-package)>upackages
-
-		|}
-
+	compile-legacy-artifacts: 
+		package-tqnames* -> package-tqnames*
+		where
+			<make-set>package-tqnames* => upackages
+			; dbg-compiler(!$[compile-legacy-artifacts:: List: [<print-as-string>upackages]])
+		where
+			//TODO : Make it configurable which lib to include by default. Hence remove following hardcoding.
+	    <compile-legacy-artifact>(Globals() , Module(Name("libstratego-lib")) ,Unresolved())
+	    ; <list-loop(
+	      	compile-legacy-artifact-package
+	      	)>upackages
+	
 	//Compile  a particular legacy SDF + STR Artifacts . Currently it only supports STR legacy artifacts . TODO  : add others
-	compile-legacy-artifact-package : p at Package(qname) ->p
-	with
-		 <debug-compiler>$[compile-main | compile-legacy-artifacts | Current Package:[<pp-aterm>]]
-		;<bagof-UsingLegacyArtifacts>qname=> legacy-artifact-details*
-		;<debug-compiler>$[compile-main | compile-legacy-artifacts | Artifact List:[<pp-aterm>legacy-artifact-details*]]
-	with
-			{|GetEnclosingPackageName:
-						<declare-current-package-scope> p;
-						<map(compile-legacy-artifact)>legacy-artifact-details*
-			|}
-
+	compile-legacy-artifact-package : 
+	  p at Package(qname) -> p
+	  where
+	    dbg-compiler(! $[compile-legacy-artifact-package:: Current Package: [<print-as-string>]])
+			; with-spxverify(
+				 <get-all-enclosed-legacy-artifacts> p => legacy-artifact-details*
+			  )
+			; dbg-compiler(!$[compile-legacy-artifact-package:: Artifact List:[<print-as-string>legacy-artifact-details*]])
+			; with-spxverify(
+					!legacy-artifact-details* 
+					; list-loop({
+					  	verify(?(Package(QName(_)) , Module(_) ,_) 
+											|<id> ,"Illegal Argument ::compile-legacy-artifact-package. Expected : ?(Package(QName(_)) , Module(_) ,_) ")
+							
+							; compile-legacy-artifact
+						<+
+							dbg-compiler(!$[compile-legacy-artifact-package:: Failed to resolve legacy artifact [<print-as-string>]]) 
+						}
+						)
+			 )	
+rules
+	
 	compile-legacy-artifact:
 		legacy-artifact-details@(namespace, m at Module(Name(modulename)) , resolving-path) -> legacy-artifact-details
-		where
-			<debug-compiler>$[compile-main | compile-legacy-artifact | planning to compile following legacy artifact: [<pp-aterm>]]
-		where
-			if not(<Resolved-ExternalArtifact>(namespace, modulename,resolving-path)) then // check to see if already taken care off.
-				if (!resolving-path => Unresolved()) then
-					  // we are only supporting legacy STR lib at this moment which are not located in the file system .
-					  // Hence, it is unresolved , we are giving it a try to resolve it as a lib
-						( <get-cached-lib-ast(read-stratego-signatures);declare-stratego-globals-top>modulename
-						 <+
-						  <read-stratego-signatures;declare-stratego-globals-top> modulename
-						);
-						<record-legeacy-global-import-is-resolved>(namespace , modulename)
-				  <+
-						<debug-compiler>$[compile-main | compile-legacy-artifact | Error :  failed to resolve]
-				else
-					// Verify that the resource has a known extension.
-					<has-known-extensions>resolving-path ;
-					{|GetEnclosingModuleName, LegacyModuleResolvedPath:
-							<declare-current-module-scope> <get_internal_module_qtname> <GetEnclosingPackageName>;
-							with( rules(LegacyModuleResolvedPath := resolving-path));
-
-							// Known Extension found. Handling it.
-							// Parsing the legacy content.
-							// Recoding the declarations for further analysis.
-							<debug-compiler>$[compile-main | compile-legacy-artifact | Compiling following legacy artifacts : [<pp-aterm>resolving-path] for package : [<GetEnclosingPackageName;pp-aterm>]];
-							<declare-legacy-artifact(|resolving-path)><parse-legacy-artifact>resolving-path
-					|}
-				<+
-					<debug-compiler>$[compile-main | compile-legacy-artifact > Error occured in handling [<pp-aterm>resolving-path]. Hence, it is ignored.]
+		where 
+			not(!resolving-path => Unresolved())
+		where	
+			dbg-compiler(!$[compile-legacy-artifact:: planning to compile following legacy artifact: [<print-as-string>]])
+			// check to see if already taken care off.
+			; if not( <is-legacy-artifact-resolved>(namespace, modulename, resolving-path)) then 
+					with-spxverify(
+						{| GetEnclosingPackageName
+						 : <declare-current-package-scope> namespace;
+							 // Verify that the resource has a known extension.
+									<is-string>resolving-path
+								;	<has-known-extensions>resolving-path 
+								; {| GetEnclosingModuleName 
+			    				 : 	<declare-current-module-scope> <get_internal_module_qtname> <GetEnclosingPackageName>;
+											// Known Extension found. Handling it.
+											// Parsing the legacy content.
+											// Recoding the declarations for further analysis.
+											dbg-compiler(!$[compile-legacy-artifact:: Compiling following legacy artifacts : [<print-as-string>resolving-path] for package:[<GetEnclosingPackageName;print-as-string>]]);
+											<declare-legacy-artifact(|resolving-path)><parse-legacy-artifact>resolving-path;
+											<add-legacy-artifact-as-resolved> (namespace, modulename,resolving-path)
+				 					|}
+						|} 
+					 	<+
+						dbg-compiler(!$[compile-legacy-artifact:: Error occured in handling [<print-as-string>resolving-path]. Hence, it is ignored.])
+					)
 				end
-			end
+						
+	compile-legacy-artifact:
+		legacy-artifact-details@(namespace, m at Module(Name(modulename)) , Unresolved()) -> legacy-artifact-details
+		where
+			dbg-compiler(!$[compile-legacy-artifact:: planning to compile following legacy artifact: [<print-as-string>]])
 		where
-			rules ( Resolved-ExternalArtifact : (namespace, modulename,resolving-path) ->resolving-path)
+			// check to see if already taken care off.
+			if not( <is-legacy-artifact-resolved>(namespace, modulename, Unresolved())) then 
+				// we are only supporting legacy STR lib at this moment which are not located in the file system .
+	      // Hence, it is unresolved , we are giving it a try to resolve it as a lib and store its symbols 
+	      // in global namespace so that it can be used by all  other packages in the project.
+        // checking whether lib exists in cache. If it is , that means it is there in symbol-table. 
+        // hence, it is not required to read and declare all the symbols again.
+          
+        //Design Decision : Symbols of legacy str libs are stored in the global namespace. It is decided to increase 
+        // performance of indexing. Since, legacy STR libs do not changes frequently, if we store it in global-cache
+        // it could be reused for a long time.   
+        dbg-compiler(!$[compile-legacy-artifact:: Declaring Legacy ModuleName  [<print-as-string>modulename]]) 
+  			; if not(<lib-exists-in-cache>modulename) then
+	          // checking whether lib exists in global namespace. if it is, then doing nothing. 
+	          // invalidate global cache is possible via clearing whole index or calling invalidate primitive
+	          // hence, if lib changes which is quite unlikely, clearing index will re-read it back  
+	         	if not(<is-lib-exists-in-global-cache>modulename ) then 
+		          	with-spxverify(
+		          			<get-cached-lib-ast(read-stratego-signatures); declare-legacy-str-imports> modulename // storing legacy import declaration
+	 					 			 , !"Failed to import legacy artifact(lib)"
+	 					 		)
+	 					 		; <index-lib-in-global-cache> modulename 
+	 					end
+ 					end  
+	    		// Setting flag to denote that lib with modulename is resolved
+					; <record-legacy-global-import-is-resolved>(namespace , modulename)
+					; <add-legacy-artifact-as-resolved> (namespace, modulename,Unresolved())  
+  			 <+
+					dbg-compiler(!$[compile-legacy-artifact::  Error :  failed to resolve])
+			end
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/esv/to-esv.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -7,6 +7,7 @@
   config
   utils/debug
   utils/path
+  utils/contract
 imports
   normalize/main
 	normalize/signatures
@@ -23,6 +24,30 @@
 signature constructors
   Module : ID * Imports * List(Section) -> Module
 
+rules 
+
+	get-esv-sections =
+		verify(?p at Package(QName(_)) | <id> , "Package(QName(_)) @get-esv-sections"); 
+		esv-sections-of-current-package* := <resolve-all-symbol-definitions>(<id> , ESVSection()) ;
+		<get-all-usings> p ;  
+		filter(?Package(_)); //getting all the imported packages
+		mapconcat(
+			{ ?package-qname;
+				activate-scope(
+					<resolve-all-symbol-definitions>(<id> , ESVSection())  
+			  	| package-qname 
+			  );
+			  // not adding following sections in ESV 
+			  filter(
+			  	not( 
+			  		?Language(_,_)  
+		  		+ ?Builders(_,_) 
+	  			+ ?References(_,_))
+			  	)
+		  }
+		) => esv-sections-from-imported-package*;
+		<conc>( esv-sections-of-current-package*  ,  esv-sections-from-imported-package*)
+	
 rules
 
 	/**
@@ -32,64 +57,64 @@
 	* OPTIMIZATION : If we allow arbitary order of different sections of ESV ,
 	*								then we can avoid store-esv-definitions .
 	*/
-	generate-esv-main: module-qname'* -> <id>
-		with
- 			 project-path             := <ProjectPath>;
- 			 Package(package-qname)   := <GetEnclosingPackageName>
- 		where
-			<debug-compiler>$[CodeGen | ESV | Generate-esv-main  : [<pp-aterm>package-qname]]
-		with
- 			 relative-autogen-path := <qname-to-path>package-qname
- 			;package-esv-main-name := $[[<get-main-file-name>()].main.packed]
- 			;autogen-dir           := $[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
- 			;root-directory 			 := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
- 		where
+	generate-esv-main: 
+		module-qname'* -> <id>
+		where
+			with-spxverify(	
+		 		project-path             := <ProjectPath>
+		 		; Package(package-qname)   := <GetEnclosingPackageName>
+		 		, !" Failed to get current-project-path or enclosing package name @generate-esv-main"
+		 	)
+ 			; dbg-compiler(!$[CodeGen | ESV | Generate-esv-main  : [<print-as-string>package-qname]])
+			; with-spxverify(
+		 			 relative-autogen-path := <qname-to-path>package-qname
+		 			; package-esv-main-name := $[[<get-main-file-name><GetEnclosingPackageName> ].main.packed]
+		 			; autogen-dir           := $[[<get-autogenerated-artifacts-dir>]/[relative-autogen-path]]
+		 			; root-directory 			 := $[[project-path]/[<get-autogenerated-artifacts-dir>]]
+ 			 	)
+ 		where with-spxverify(
+ 			// getting all the indexed esv sections from the semantic index for the current package 
  			// During Esv generation, imported packages is also packed.
- 			// Note: transitive imports is not supported.
- 			<get-all-imported-modules>Package(package-qname) => imported-modules*;
- 			<conc;make-set>( module-qname'* , imported-modules*) => module-qname*; 
- 			{|  //TODO : consider removing DR and use collect instead
- 					Declared-Language-Description,Declared-Builders-Description,Declared-Colorer-Description,
- 					Declared-Folding-Description,Declared-Outliner-Description,Declared-References-Description,
- 					Declared-Completions-Description:
- 						<map(store-module-esv-definition)>module-qname*
- 						;sections := <conc>
- 						 					(	 <inject-package-ctree><get-main-file-name>(),   // adding ctree import by default
-	 						 					 <inject-table-definition><get-main-file-name>(),   // default table definition
-	 						 					 //<inject-language-id><get-language-id> Package(package-qname),
-	 						 					 <all-keys-Declared-Language-Description>,
-	 			 								 <all-keys-Declared-Builders-Description> ,
-	 			 								 <all-keys-Declared-Colorer-Description> ,
-	 			 								 <all-keys-Declared-Folding-Description>,
-	 			 								 <all-keys-Declared-Outliner-Description>,
-	 			 								 <all-keys-Declared-References-Description>,
-	 			 								 <all-keys-Declared-Completions-Description>,
-	 			 								 <map(get-original-module-declaration; template-module-to-esv)> module-qname*
- 			 							   )
- 			|};
- 			// Adding language Id if not already added with language description
- 			if <oncetd(?LanguageId(langid))>sections then
- 				sections' := <filter(not(?[]))>sections 
+ 			// Design Issue: transitive imports is not supported.
+ 			//--------------------------------------------------------------------
+ 			<get-esv-sections>Package(package-qname) => esv-sections*;
+ 			<conc>(	 
+ 				<inject-package-ctree><get-main-file-name><GetEnclosingPackageName>,   // adding ctree import by default
+	 			<inject-table-definition><get-main-file-name><GetEnclosingPackageName>,   // default table definition
+	 			esv-sections*
+	 	 	)
+	 	 	; get-templatelang-specific-esv-sections(|<GetEnclosingPackageName>,module-qname'*)// Performing templatelang related transformations   
+ 			; ensure-lang-id-added(|<GetEnclosingPackageName>)
+ 			; esv-aterm := Module(package-esv-main-name, Import([]), <id>) // Final esv-aterm
+ 			; <save-artifact(WriteToBinaryFile | package-qname , root-directory , <get-main-output-path(|$[[<get-main-file-name><GetEnclosingPackageName>].main], "esv")>(root-directory , package-qname))>esv-aterm
+			; dbg-compiler(!$[$[$Codegen | ESV |$]$ Finished generation of packed esv for [<print-as-string>package-qname]])
+			, !"Failed to generate ESV main"
+		)
+	
+	
+	get-templatelang-specific-esv-sections(|package-id,module-qname'*) =
+			?sections;
+			if templatelang-enabled then
+ 				//modules to consider for creating packed.esv
+				<get-all-imported-modules>package-id  => imported-modules*;
+				<conc;make-set>( module-qname'* , imported-modules*) => module-qname*; 
+ 				<conc>(<map(get-original-module-definition; template-module-to-esv)> module-qname* ,  sections)
  			else
- 				sections' := <conc;filter(not(?[]))>(sections , <inject-language-id><get-language-id> Package(package-qname))
- 			end
- 			;esv-aterm := Module(package-esv-main-name, Import([]), sections')
- 			;<debug-compiler> $[$[$ Codegen | Packed ESV |$]$ [<pp-aterm>esv-aterm]]  
- 			;<save-artifact(WriteToBinaryFile | package-qname , root-directory , <get-main-output-path(|$[[<get-main-file-name>()].main], "esv")>(root-directory , package-qname))>esv-aterm
-		where
-			<debug-compiler>$[$[$Codegen | ESV |$]$ Finished generation of packed esv for [<pp-aterm>package-qname].]
-
-	store-module-esv-definition : Module(QName(untyped-module-qname)) -> <id>
-	where
-		<debug> $[CodeGen | ESV |  Packing following module : [<pp-aterm>QName(untyped-module-qname)]] 
-	where 
-		get-original-module-declaration;
- 		store-esv-defintions
- 		
-	inject-language-id : 
-		lang-id -> [Language("Language Id Definition" , [LanguageId(lang-id)])]
-		
-	//Adding package ctree as the default semantic provider0
+ 				!sections
+ 			end	  
+		 	
+	ensure-lang-id-added(|package-id) =
+		?sections;
+		// Adding language Id if not already added with language description
+		if <get-language-id>package-id then 
+			<filter(not(?[]))>sections 
+		else
+			default-lang-id := <get-default-language-id> package-id;
+			lang-id-esv-section := [Language("Language Id Definition" , [LanguageId(default-lang-id)])];
+			<conc;filter(not(?[]))>(sections , lang-id-esv-section)
+		end
+ 	
+ 	//Adding package ctree as the default semantic provider0
 	inject-package-ctree :
 		lang-name -> [Builders("",[SemanticProvider(lang-output-ctree)])]
 		where
@@ -102,13 +127,6 @@
 		where
 			default-table-def := Table($[include/[lang-name].tbl])
 
-
-	//Returns all the imports for the current namespace.
- 	get-all-imports =
- 		?mod-qname*
- 		;import-decl* := <map(to-esv-import) ; flatten-list ;	make-set> mod-qname*
- 		;!Imports(import-decl* )
-
 rules
 
 	/**
@@ -121,89 +139,4 @@
 		where
 			esv-import:= <qname-to-path>q
 
-
-rules
-
- 	/**
- 	* Storing different Esv language definitions so that it can be
- 	* combined in *.main.packed.esv in a particular order
- 	*/
- 	store-esv-defintions:
- 		 m at Module(attrb* , modname , section*) -> m
-		 with
-		 	<alltd(store-esv-def)> section*
-
-
- 	// Storing Esv Definitions that specifies Langauge
- 	store-esv-def :
- 		l at Language(_,_) -> l
- 		with
- 			rules ( Declared-Language-Description :+ l -> l)
-
-
-
- 	/**
- 	* Storing Esv Definitions that specifies the builders for the
- 	* language definition.
- 	*/
- 	store-esv-def: 
- 		b at Builders(_,_) -> b
- 		with
- 			rules ( Declared-Builders-Description :+ b -> b)
-
- 	/**
- 	* Storing Esv Definitions that specifies the colorer for the
- 	* language definition.
- 	*/
- 	store-esv-def : c at Colorer(_,[_|_]) -> c
- 		with
- 			rules ( Declared-Colorer-Description :+ c -> c)
-
- 	/**
- 	* Storing Esv Definitions that specifies the folding semantics for the
- 	* language definition.
- 	*/
- 	store-esv-def: 
- 		f at Folding(_,_) -> f
- 		with
- 			rules ( Declared-Folding-Description :+ f -> f)
-
- 	/**
- 	* Storing Esv Definitions that specifies the outliner for the
- 	* language definition.
- 	*/
- 	store-esv-def : 
- 		o at Outliner(_,_) -> o
- 		with
- 			rules ( Declared-Outliner-Description :+ o -> o)
- 	/**
- 	* Storing Esv Definitions that specifies the code completion
- 	* for the language definition.
- 	*/
- 	store-esv-def : 
- 		c at Completions(_,_) -> c
- 		with
- 			rules ( Declared-Completions-Description:+ c -> c)
-
- 	/**
- 	* Storing Esv Definitions that specifies the refencen resolving constructs
- 	* for the language definition.
- 	*/
- 	store-esv-def : 
- 		r at References(_,_) -> r
- 		with
- 			rules ( Declared-References-Description :+ r -> r)
-
- 	/*
- 	* optimization - ignores following section that are not relevant to the current computations.
- 	*		a] str sections
- 	*		b] sdf sections
- 	*   c] template sections
- 	*/
- 	store-esv-def : s at SDFSection (_) -> s //Do nothing
-
- 	store-esv-def : s at SDFSectionEH (_,_) -> s //Do nothing
-
- 	store-esv-def : s at STRSection (_) -> s //Do nothing
-
-  store-esv-def : s at TemplateSection(_) -> s //Do nothing
+ 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -1,5 +1,4 @@
 module codegen/generate
-
 imports 
 	codegen/compile
 	codegen/sdf/to-sdf
@@ -7,12 +6,11 @@
 	codegen/str/to-stratego
 	codegen/esv/to-esv
 	codegen/buildscripts
-
 imports 
 	config 
 	common
 imports	
-	lib/editor-common.generated
+	lib/editor-common.generated 
 	include/SpoofaxLang
 imports	
 	context/-
@@ -25,207 +23,171 @@
 	utils/cache
 	analyze/main
 	codegen/generate
-			
-		
-strategies 
-	build-spoofaxlang = build-all(generate-artifacts-all)
 	
-	build-spoofaxlang' = build-all'(generate-artifacts-all)  // for testing purpose. remove it when it is no longer needed. 
-	
-	build-spoofaxlang-incrementally = build-all(generate-artifacts-incrementally)
+
+rules
+	build-all' = 
+		?current-term		
+		; build-all
+		; if HasErrors then 
+		  	error-msg := $[Build Failed! ];
+				fatal-err-msg(|error-msg )
+			end  	
+		; !current-term //restoring current term to avoid side effects
 		 
-	build-all(gen-code) = 
-		?current-term
-		;new-compile-session(
-			list-of-package-qname* := <get-package-list> 
-			;<compile-internal>list-of-package-qname*
-			;<debug>$[-------------------Getting list of errors-------------------]
-			;<get-all-analyzed-problems>() => problems  
-			;if <fail-if-has-errors>problems then
-			 	<debug>$[Compilation succeeded.];
-			 	{| ImportedDef : 
-							<gen-code>() 
-				|}
-			else
-				error-msg := $[Compilation Failed.Please fix the errors before building the artifacts:  [<pp-aterm-forced>problems]];		
-				<debug>error-msg
-			end		 
+	build-all = 
+		new-compile-session(
+				list-of-package-qname* := <get-package-list> 
+				; <compile-internal> list-of-package-qname*
+				; generate-spx-artifacts
 		)
-		;!current-term //restoring current term to avoid side effects  
-
 	
-	build-all'(gen-code) = 
-		?current-term
-		;new-compile-session(
-			list-of-package-qname* := <get-package-list> 
-			;<compile-internal>list-of-package-qname*
-			;<debug>$[-------------------Getting list of errors-------------------]
-			;<get-all-analyzed-problems>() => problems  
-			;if <fail-if-has-errors>problems then
-			 	<debug>$[Compilation succeeded.];
-			 	{| ImportedDef : 
-							<gen-code>() 
-				|}
-				
-			else
-				(errors, warnings , notes) := problems;
-				 error-msg := $[Compilation Failed.Please fix the following [<length>errors] error(s) before building the artifacts:  [<pp-aterm-forced>errors]];		
-			 	fatal-err-msg(|error-msg )
-			 	
-			end		 
-		)
-		;!current-term //restoring current term to avoid side effects
-		 
-	generate-artifacts-all : () -> ()
-		where
-			<debug>$[-------------------Generating artifacts-------------------]
-			;init-code-generation
-		  ;list-of-package-qname* := <get-package-list>   
-			;<debug>$[-------------------Generating artifacts for following ALL spx -------------------]
-			;<list-loop(generate-spx-package)>list-of-package-qname*
-			;<debug>$[-------------------------Generating Build Scipt---------------------]
-			;<emit-build-script> <filter(has-language-name-configured)>list-of-package-qname*
-			;<debug>$[-------------------------Code Generation is done-------------------------] 
-
-
-	generate-artifacts-incrementally : () -> ()
-		where
-			<debug>$[-------------------Generating artefacts-------------------]
-			;init-code-generation
-		  ;seperate-compilable-spx-files := <get-all-modified-compilation-units>
-		  ;if !seperate-compilable-spx-files => [] then 
-		  	<debug>$[-------------------------No Changes found-------------------------] 
-		  else	 
-			  list-of-package-qname* := <get-packages-of-file>seperate-compilable-spx-files   
-				;<debug>$[-------------------Generating artifacts for following spx : [<pp-aterm>seperate-compilable-spx-files]-------------------]
-				;<list-loop(generate-spx-package)>list-of-package-qname*
-				;<debug>$[-------------------------Generating Build Scipt---------------------]
-				;<emit-build-script> <filter(has-language-name-configured)>list-of-package-qname*
-		 	end
-		 	;<debug>$[-------------------------Code Generation is done-------------------------] 
-
-		 			
-	get-packages-of-file = mapconcat(get-packages-of-file) ; make-set 
-				
+	build-spx-incrementally =
+		verify(?(ast, abs-path) |<id> , "?(ast, abs-path) ::build-spx-incrementally" );   
+		compile-packages-of(
+			id, 
+			get-used-by, 
+			generate-spx-artifacts
+		) 
+	
+	generate-spx-artifacts = 
+		if not(HasErrors) then
+			list-of-package-qname* := <get-package-list>
+	 		; debug-time( 
+			  	new-code-generate-session(
+ 					  init-code-generation
+	 				  ; debug-time(
+		  			  	<list-loop(
+			  					generate-spx-package)>list-of-package-qname*
+				  	  | $[--Generating the artifacts for all the modified spx])
+					  ;<filter(
+					    		has-language-name-configured)>list-of-package-qname*
+		    		; emit-build-script 
+					)
+	  		| "--Code Generation done"
+ 		  	) 
+		else
+			<debug>$[Compilation Failed.Please fix the errors before building the artifacts.]		
+		end			
+					
 rules 
+	new-code-generate-session(s) =
+  	dbg-compiler(!$[-----------------::new-code-generate-session::-----------------]);
+		with-spxverify(
+			index-on-init-code-generation;
+  		s;
+  		index-on-complete-code-generation 
+    	, !" new code generated session failed unexpectedly. "  
+    )  
 	
 	refresh-file = is-in-command-line-mode  < id + refresh-workspace-file 
 
-//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
-//TODO: OPTIMIZE : DR can be used to construct this imports  
-rules 
-	
-	init-code-generation = where(<emit-default-signatures>()) 
-	
-	generate-all = emit-sdf;emit-signatures ; emit-str <+ debug(!" Failed in Generate-all. "); fail
+	//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
+	//TODO: OPTIMIZE : DR can be used to construct this imports  
 
-	generate-main = 
-			?module-qname* ;generate-sdf-main;generate-str-main ; generate-esv-main 
-		<+ 
-			debug(!" Failed in Main Generation. "); fail    
-
-rules
-
-	should-generate-code-this-package = 
-		?package-qname;
-		where(not(<PackageCodeGenerated>package-qname))
-		
 	// generates artifact for spx packages 
 	generate-spx-package: 
 		package-typed-qname at Package(untyped-qname) -> <id>
 		where 
-			<debug-compiler> $[Generate| Generate code for spx-package| Generating Artifacts for following package: [<pp-aterm>]] 
-		with 
-			enclosed-module-typed-qnames := <get-enclosed-modules>package-typed-qname
-		where
-			if should-generate-code-this-package  then 
-				{|GetEnclosingPackageName,GeneratedSignature:
-					 	rules (GetEnclosingPackageName := package-typed-qname);
-						// Generates artifacts from all the modules 	
-						<list-loop(generate-spx-module)>enclosed-module-typed-qnames;
-						<emit-internal-signatures>package-typed-qname;
-						if (language-name  := <get-language-name> package-typed-qname) then
+			dbg-compiler(!$[Generate| Generate code for spx-package| Generating Artifacts for following package: [<print-as-string>]]); 
+			with-spxverify(
+				if not(<get-declared(|CodeGenerated())>package-typed-qname)  then 
+					{|GetEnclosingPackageName:
+							with-spxverify(
+						 		rules (GetEnclosingPackageName := package-typed-qname)
+								, !"Setting GetEnclosingPackageName failed"
+							);  
+							enclosed-module-typed-qnames := <get-enclosed-dirty-modules-to-generate>package-typed-qname;
+							
+							<list-loop(
+									generate-spx-module)>enclosed-module-typed-qnames;// Generates artifacts from all the modules 	
+							
+							<emit-internal-signatures>package-typed-qname;// generating internal signatures 
+							
 							// Since, the language-name is defined for this language 
 							// generate all the main artifacts  for this package
 							// if Language name is not defined for certain packaged, they will not be considered 
 							// as a language , rather will be treated as a langauge library to be reused by other 
 							// languages.
-							
-							{| GetLanguageName : 
-										<debug>$[-------------------------Generating Main Artifacts ---------------------];
-										<debug>$[------------------------------------------------------------------------];
-										rules( GetLanguageName  := language-name);
-										<emit-package-signature-main>();
-										<generate-main> enclosed-module-typed-qnames 
-							|}  
-						end	  
-				|};		
-				where(rules(PackageCodeGenerated: package-typed-qname -> package-typed-qname)) // TODO : delete this rules. probably , it is reduntant 
-			<+
-				<debug-compiler> $[Generate| generate-spx-package > [<pp-aterm>package-typed-qname] Failed. ]
-				;fail
-			end
+							if (<get-language-name> package-typed-qname) then
+									<emit-package-signature-main>();
+									<generate-main> package-typed-qname
+							end
+						|};		
+						with-spxverify( <store-declared(|CodeGenerated())>package-typed-qname , "failed to store CodeGenerated()")
+					end
+					, ! $[Generate| generate-spx-package |[<print-as-string>package-typed-qname] Failed. ]
+				)
 	
-	// generates artifacts fro spx module
 	generate-spx-module: 
 		module-typed-qname at Module(untyped-qname) -> <id>
 		where 
-			<debug-compiler> $[Generate|  generate-spx-module> Planning to generate module for semantic problems: [<pp-aterm>]] 
+			dbg-compiler(!$[generate-spx-module::Planning to generate module for semantic problems: [<print-as-string>]]) 
 		where 
-			if not(<ModuleCodeGenerated>module-typed-qname) then
-				<debug-compiler> $[Generate| generate-spx-module| Currently Generating : [<pp-aterm>]]; 
-				module-decl* := <get-original-module-declaration>module-typed-qname;
+			with-spxverify(
+				dbg-compiler (! $[generate-spx-module::Currently Generating : [<print-as-string>]]);
 				{|GetEnclosingModuleName:
-						rules( GetEnclosingModuleName := module-typed-qname);
-						
-								<generate-all> module-decl* 	// generating all the artifacts for the specified module
-				|};
-				module-abs-path := <DeclaredModule>untyped-qname;
-				where(
-					rules(
-						ModuleCodeGenerated:     module-typed-qname -> module-typed-qname
-					)
-				)
-				<+
-				<debug-compiler> $[Generate| generate-spx-module| [<pp-aterm>module-typed-qname] Failed. ]
-				;fail
-			else
-				<debug-compiler> $[Generate| generate-spx-module| Ignored as already in the queue :[<pp-aterm>]] //this package is not compiled before
-			end		
+							// setting the current scope 
+							rules( GetEnclosingModuleName := module-typed-qname);
+					
+							// generating code for the module id
+							<generate-all>module-typed-qname	// generating all the artifacts for the specified module
+				|}
+				, !$[generate-spx-module:: [<print-as-string>module-typed-qname] Failed. ]
+			)
 			
-	get-main-file-name : () ->lang-name 
-	with 
-		lang-name := <GetLanguageName> <+ debug(!"GetLanguageName encountered error. Please verify it is called within the scope defined for the DR")
-
 	
-		
-rules
-	to-generated-artifact-block(adapter, post-coversion-adapter) : list-stmt* -> resultant-block* 
-	with contracts( 
-		contract-requires(is-list |list-stmt*)
-	)
-	where 
-		<adapter>list-stmt*  => adapted-result*; // results are  adapted using the specified adapter
-		<post-coversion-adapter>adapted-result*  => resultant-block*
+	init-code-generation = with-spxverify(<emit-default-signatures>() , "Failed to emit default signatures") 
+	
+	generate-all =
+		with-spxverify( 
+			verify(?m at Module(QName(_)) |<id> , "?Module(QName(_))  ::generate-main")
+			; get-original-module-definition
+			; emit-sdf
+			; emit-signatures 
+		  ; emit-str
+		  , !$[Failed to generate artifacts for module [<print-as-string>]]   
+	  )  
+
+	generate-main =
+		with-spxverify(
+			verify(?Package(QName(_)) |<id> , "?Package(QName(_))  @generate-main")
+			;	get-enclosed-modules
+			; generate-sdf-main
+			; generate-str-main 
+			; generate-esv-main
+			, !$[Failed to generate artifacts for package [<print-as-string>]]
+		)
+	
+	get-main-file-name : p at Package(QName(_)) -> <get-language-name>p
 
 rules
+	to-generated-artifact-block(adapter, post-coversion-adapter) : 
+		list-stmt* -> resultant-block* 
+		where 
+			verify( List | list-stmt* , "List ::to-generated-artifact-block")
+		where 
+			<adapter>list-stmt*  => adapted-result*; // results are  adapted using the specified adapter
+			<post-coversion-adapter>adapted-result*  => resultant-block*
+	
 	// generates the import declaration for the artifacts .  
 	// s is a artifact specific adapted strategy applied to all the import declaration 
 	// to get the artifact-specific import declaration. 
 	to-generated-artifacts-import-declarations(s) =
-		?imports*;	map(to-import-declaration(s)); flatten-list;	make-set; 	where(<debug-compiler>$[Codegen | Imports | Resultant imports :  [<pp-aterm>]]) 
+		?imports*;	map(to-import-declaration(s)); flatten-list;	make-set
+		; dbg-compiler(!$[Codegen | Imports | Resultant imports :  [<print-as-string>]]) 
 		
 	to-import-declaration(s): 
 		i at ImportPackage(package-qname at QName(_)) -> results
 		where 
-			if not(<DeclaredPackage>package-qname) then
+			if not(<get-package-declaration>package-qname) then
 				results := [] // unresolved imports. ignore. 
 			else
 				<get-enclosed-modules>Package(package-qname) => modules*;
 				<map(?Module(<id>) ; qname-to-path ; s)> modules* => results
 			end
 		where
-			<debug-compiler>$[ Codegen | Imports Conversion |  import package Result : [<pp-aterm>results] ]
+			dbg-compiler(!$[Codegen | Imports Conversion |  import package Result : [<print-as-string>results] ])
 	
 	to-import-declaration(s):		
 		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <to-import-declaration(s)>ImportSpxModule(QName([package-name]), SPXModuleName(modname))
@@ -234,7 +196,7 @@
 		ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
 		where
 			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
-			;if(not(<DeclaredModule>module-qname))  then
+			;if(not(<get-module-uri>Module(module-qname)))   then
 				result := [] // unresolved imports. ignore. 
 			else
 				module-name-path    := <qname-to-path>module-qname
@@ -242,12 +204,12 @@
 				;result := [result']  
 			end
 		where 
-			<debug-compiler>$[ Codegen | Imports Conversion  | import module Result:  [<pp-aterm>result]] 
+			dbg-compiler(!$[Codegen | Imports Conversion  | import module Result:  [<print-as-string>result]]) 
 		 
 	to-import-declaration(s): 
 		ImportPackage(Name(package-name)) -> result
 		where
-			if <DeclaredPackage>QName([package-name]) then
+			if <get-package-declaration>QName([package-name]) then
 				<get-enclosed-modules>Package(QName([package-name])) => modules*
 				;<map(?Module(<id>) ; qname-to-path ; s)> modules*   => result
 			else
@@ -255,16 +217,14 @@
 				 result := <to-import-declaration(s)>ImportLegacyArtifact(Name(package-name))
 			end
 		where 
-			<debug-compiler>$[ Codegen | Imports Conversion  | import pcakage/legacy artifact Result :  [<pp-aterm>result]] 
+			dbg-compiler(!$[Codegen | Imports Conversion  | import pcakage/legacy artifact Result :  [<print-as-string>result]]) 
 	
 	to-import-declaration(s): 
 		ImportLegacyArtifact(Name(modulename)) -> result
 		where 
 				<s>Name(modulename) => result
 		where 
-			<debug-compiler>$[Codegen | Imports Conversion |  import legacy artifact Result : [<pp-aterm>result].]
-	
-	
+			dbg-compiler(!$[Codegen | Imports Conversion |  import legacy artifact Result : [<print-as-string>result].])
 
 rules 
 	save-artifact(s | package-untyped-qname, root-directory,output-path) : 
@@ -279,17 +239,53 @@
 	save-artifact( | package-untyped-qname, root-directory,output-path) : 
 		content -> <save-artifact( save-to-file | package-untyped-qname, root-directory,output-path)>content 
 
-
 rules
 	
 	// Verifies wheter a particular list is empty or not.
-	ensure-list-is-not-empty =  contracts(contract-requires (is-list| <id>)); is-not-empty-list
-		
-	has-language-name-configured = ?Package(QName(_)) ; where(get-language-name)
-	
-	get-all-imported-defs = bagof-ImportedDef
-		
+	ensure-list-is-not-empty =  verify(is-list| <id> , "List ::ensure-list-is-not-empty"); is-not-empty-list
 		
+	has-language-name-configured = verify(?Package(QName(_)) | <id> , "Package(QName(_)) ::has-language-name-configured") ; where(get-language-name)
+
 	
+signature constructors
+	GeneratedPackages : Type 	
+	ImportedDef   : Type
+	CodeGenerated : Flag 
+	 
+rules 
+	index-generated-package-ids = 
+			with-spxverify(
+				? package-qnames 
+				; <get-constructor> GeneratedPackages() => cons-name
+				; activate-global-scope( 
+				  	<undefine-symbol-definitions>(cons-name, GeneratedPackages()); 
+				  	<index-symbol-definition>(cons-name, GeneratedPackages() , package-qnames)
+			  	)
+				, !"Failed index-generated-package-ids"  
+			)  
+			
+		get-generated-package-ids = 
+			<get-constructor>  GeneratedPackages() => key ;  
+			activate-global-scope( 
+				<resolve-symbol-definition>(key,  GeneratedPackages()) => package-qnames*
+			);
+			!package-qnames*
+			
+rules 
 	
-				 
\ No newline at end of file
+	index-imported-def-of-package =
+			verify(
+				?(key at Package(QName(_)) , value)
+				|<id> , "?(key at Package(QName(_)) , value) ::index-imported-package-def"
+			); 
+			with-spxverify(
+				<index-symbol-definition>(key, ImportedDef() , value)
+			)  
+			
+	get-imported-defs-of-package = 
+		verify(
+			?p at Package(QName(_)) 
+			|<id> , "?Package(QName(_)) ::get-generated-package-ids"
+		);
+		activate-scope(<resolve-all-symbol-definitions>(<id>,  ImportedDef()) => package-qnames*|p);  
+		!package-qnames*				 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -19,9 +19,12 @@
 	include/SpoofaxLang
 	utils/path
 	utils/debug
+	utils/contract
+	common
 imports 	
 	libstratego-gpp
 	libstratego-xtc 
+
 rules 
 		
 	build-spoofax-console:
@@ -39,90 +42,166 @@
 				//<override-configured-source-directories><abspath>arg;
 				enable-command-line-mode;  
 				<show-configuration;debug>();     //show configuration for this spx project
-				<build-spoofaxlang>();                     //building all the spx files in the sources directory
-				<debug>$[".................Build-all succeeds................."];
+				build-all;                     //building all the spx files in the sources directory
+				<debug>$["----------------------Build-all succeeds----------------------"];
 				!FILE($[[input]/.shadowdir/Globals/Signatures.str])	 //HACK : just to ensure this strategy is not failing ...
 			<+
 				prim("SSL_stacktrace_get_all_frame_names") ; report-failure
 		)
 	
-	
+	report-failure-with-stacktrace = prim("SSL_stacktrace_get_all_frame_names") ; report-failure
+	 
 	//TODO : Improve error reporting. 
   build-spoofaxlang-jvm:
     current-project-location -> <id>
-    with 
-    	<debug(!"current-project-directory : ")>current-project-location 
-    with	
-	  	editor-init; 						         // cleaning up and initializing editors
-			rules(NoDebugInfo: _);           // HACK: disable origin use for now
-			rules(
-				ProjectPath := current-project-location
-				previous-working-dir := <getcwd>
+    where 
+    	<debug(!"current-project-directory : ")>current-project-location; 
+    	with-spxverify(	
+	  		editor-init; 						         // cleaning up and initializing editors
+				rules(NoDebugInfo: _);           // HACK: disable origin use for now
+				previous-working-dir := <getcwd>;
+				rules(
+					ProjectPath := current-project-location
+				);
+				<chdir>current-project-location				// setting current directory to the project location
+			<+
+				report-failure-with-stacktrace 
 			);
-			<chdir>current-project-location				// setting current directory to the project location
-		<+
-			prim("SSL_stacktrace_get_all_frame_names") ; report-failure
-	
-		with	
-			<debug>$[Activating Project Configuration : ];
-			initialize-configuration;        	// initializes configuration and setting up enviroment variables
-			enable-command-line-mode;  
-			<show-configuration;debug>()     //show configuration for this spx project
-		<+
-			prim("SSL_stacktrace_get_all_frame_names") ; report-failure
+			with-spxverify(	
+				<debug>$[Activating Project Configuration : ];
+				initialize-configuration;        	// initializes configuration and setting up enviroment variables
+				enable-command-line-mode;  
+				<show-configuration;debug>()     //show configuration for this spx project
+			<+
+				report-failure-with-stacktrace 
+			);
+			with-spxverify(
+				<debug>$[SPXLang Build: ];
+				with-spxverify(
+						build-all' //building all the spx files in the sources directory
+						, !"Failed to build all the artifacts"
+				);  
+				<chdir>previous-working-dir; 			// resetting working directory
+				<debug>$[Intermediate artefacts have been generated successfully.]
+			<+
+				report-failure-with-stacktrace 
+			)
 
-		with
-			<debug>$[SPXLang Build: ];
-			<build-spoofaxlang'>(); //building all the spx files in the sources directory
-			<chdir><previous-working-dir> 			// resetting working directory
-			<debug>$[Intermediate artefacts have been generated successfully.]
-		<+
-			prim("SSL_stacktrace_get_all_frame_names") ; report-failure
+			
+rules
+	
+	editor-build-all-after-cleanup:
+		(selected, position, ast, path, project-path) -> None()
+		where
+	 		<debug>$[----------------------------starting compile + build all----------------------------];
+			with-spxverify(	
+				editor-init	
+		 		;rules(ProjectPath := project-path)
+		 		;initialize-configuration
+		 		, "Failed to initialize editor" 
+ 		  );
+ 		  clean-spx;
+			with-spxverify(
+				abs-path := <concat-strings>[project-path, "/" ,path]
+				;	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
+	  		; build-all
+	  	)  
 
-	  
-	build-all-service:
+	    //TODO delete all the folder from spxcache
+  editor-clean-and-compile-spx-all : 
+  	(selected, position, ast, path, project-path) -> None()
+  	where 
+  		with-spxverify(
+  			editor-init;
+  			rules(ProjectPath := project-path);
+  			initialize-configuration;
+  			compile-init 
+  			, !$[ Compiler-init is failed.]
+  		)
+  		; clean-spx 
+  	where	
+  		abs-path := <concat-strings>[project-path, "/" ,path]
+	   	; with-spxverify( 
+	  	 	 	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path , ast)	 
+					; <compile-all>(abs-path , ast)
+					, !"compile-spx failed due to error in complile-all"
+			 	) 
+  
+	editor-compile-spx-all-incrementally:
 		(selected, position, ast, path, project-path) -> None()
 		where
-			 <debug>$[.................starting compile + build all ..........................]
-		with
-			editor-init	
-		 ;rules(ProjectPath := project-path)
-		 ;initialize-configuration
-		with
-			 enable-compiler-debugging
-	  	;<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
-	  	;<build-spoofaxlang>()
-	  	;disable-compiler-debugging
-	
+			 <debug>$[------Starting Compile Incrementally------]
+			 ; editor-init
+			 ; rules(ProjectPath := project-path)
+			 ; initialize-configuration
+		   ; abs-path := <concat-strings>[project-path, "/" ,path]
+		   ; with-spxverify( 
+		   	 	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path , ast)	 
+					; <compile-all>(abs-path , ast)
+					, !"compile-spx failed due to error in complile-all"
+				 )
 	
-	build-incrementally-service:
+	editor-clean-spx:  
 		(selected, position, ast, path, project-path) -> None()
 		where
-			 <debug>$[.................starting compile + build all ..........................]
-		with
-			editor-init	
-		 ;rules(ProjectPath := project-path)
-		 ;initialize-configuration
-		with
-	  	 enable-compiler-debugging
-	  	;<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
-	  	;<build-spoofaxlang-incrementally>()
-	  	;disable-compiler-debugging
+      compile-init; 
+      clean-spx 
 
-		
-		
+rules 
+		clean-spx = 
+			with-spxverify(
+	  			index-clearall;
+	      	<debug>$[------Index Cleanup is done ------]
+	  	)
+	
+	
 rules
-	//Intregation Test of the compile-all is working as expected 
-	compile-spx:
+	
+	build-incrementally-service:
+		(selected, position, ast, path, project-path) -> None()
+		where
+			not(HasErrors);
+			with-spxverify(
+				editor-init	
+		 		; rules(ProjectPath := project-path)
+		 		; initialize-configuration
+		 		, "Failed to initialized editor "  
+	  	);
+			with-spxverify(
+  			abs-path := <concat-strings>[project-path, "/" ,path]
+				; <store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
+	  		; <build-spx-incrementally>(ast, abs-path) 
+	   )
+  	  
+	build-incrementally-service:
+		(selected, position, ast, path, project-path) -> None()
+		where
+			HasErrors
+		where 
+			<debug> $[Compilation Failed.Please fix the errors before building the artifacts]		
+			
+	
+	editor-build-all:
+		(selected, position, ast, path, project-path) -> None()
+		where
+			not(HasErrors) 
+		where
+	 		<debug>$[----------------------------starting compile + build all----------------------------];
+			with-spxverify(	
+				editor-init	
+		 		;rules(ProjectPath := project-path)
+		 		;initialize-configuration
+		 		, "Failed to initialize editor" 
+ 		  );
+			with-spxverify(
+				abs-path := <concat-strings>[project-path, "/" ,path]
+				;	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
+	  		; build-all
+	  	)  
+	
+	editor-build-all:
 		(selected, position, ast, path, project-path) -> None()
 		where
-			<debug>$[.................starting compile-all ..........................]
-		with 
-			 editor-init
-			;rules(ProjectPath := project-path)
-		  ;initialize-configuration
-		with 
-			 enable-compiler-debugging
-	  	;<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
-			;<compile-all>()
-	  	;disable-compiler-debugging
+			HasErrors
+		where 
+			<debug> $[Compilation Failed.Please fix the errors before building the artifacts]			  					 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-name-analysis.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -7,6 +7,7 @@
   include/SpoofaxLang
   analyze/sdf/check
   utils/attributes
+  common
 
 rules
 
@@ -26,12 +27,14 @@
       , annotate-names-rules
       ])
     ])
-    with
-      namespaces           := <collect-all(fetch-namespace); flatten-list> sdf;
-      namespace-sigs       := <map(namespace-to-signature)> namespaces;
-      scope-rules          := <collect-all(fetch-scope-rule)> sdf;
-      get-def-rules        := <collect-all(fetch-get-def-rules)> sdf;
-      annotate-names-rules := <collect-all(fetch-annotate-names-rule)> sdf
+    where with-spxverify(
+      namespaces           := <collect-all(fetch-namespace); flatten-list> sdf
+      ; namespace-sigs       := <map(namespace-to-signature)> namespaces
+      ; scope-rules          := <collect-all(fetch-scope-rule)> sdf
+      ; get-def-rules        := <collect-all(fetch-get-def-rules)> sdf
+      ; annotate-names-rules := <collect-all(fetch-annotate-names-rule)> sdf
+      , ! "failed @ generate-name-analysis" 
+    )
 
 rules
 
@@ -62,10 +65,11 @@
       scopes := <collect-all(fetch-scope-names)> a*;
       not(!scopes => []);
       cons := <getfirst(fetch-cons-name)> a*
-    with
-      scopes'     := <make-set> <flatten-list> scopes;
-      p'*         := <filter(non-terminal-to-wld)> p*;
-      scope-terms := <map(![NoAnnoList(Op(<id>, []))])> scopes'
+    	; with-spxverify(
+		      scopes'     := <make-set> <flatten-list> scopes;
+		      p'*         := <filter(non-terminal-to-wld)> p*;
+		      scope-terms := <map(![NoAnnoList(Op(<id>, []))])> scopes'
+      )
 
   fetch-get-def-rules:
     prod(p*, _, attrs(a*)) ->
@@ -105,10 +109,11 @@
     )
     where
       cons := <getfirst(fetch-cons-name)> a*
-    with
-      p'*            := <filter(is-non-terminal)> p*;
-      vars           := <map(non-terminal-to-new-var)> p'*;
-      annotated-vars := <zip(add-namespace-anno-1 <+ add-namespace-anno-2)> (p'*, vars)
+    	; with-spxverify(
+	      p'*            := <filter(is-non-terminal)> p*;
+	      vars           := <map(non-terminal-to-new-var)> p'*;
+	      annotated-vars := <zip(add-namespace-anno-1 <+ add-namespace-anno-2)> (p'*, vars)
+      )
 
 rules
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -33,46 +33,61 @@
 
 rules
 
-	 emit-sdf:m at Module(attrb* , modname , section*) -> m
- 		with
- 			project-path := <ProjectPath>
- 			;package-typed-qname := <GetEnclosingPackageName>
-			;module-typed-qname  := <GetEnclosingModuleName>
-			<+
-			<debug-compiler>$[ Codegen | SDF | Failed to create current scope.];fail
+	 emit-sdf:
+	 	m at Module(attrb* , modname , section*) -> m
+ 		where
+ 			with-spxverify(
+ 				project-path := <ProjectPath>
+ 				; package-typed-qname := <GetEnclosingPackageName>
+				; module-typed-qname  := <GetEnclosingModuleName>
+				, !"Failed to create current scope @emit-sdf"
+			)	
 		where
 			 !module-typed-qname  => Module(module-untyped-qname)
-			;!package-typed-qname => Package(package-untyped-qname)
-			; Module(_, _ , section') := <get-module-declaration>module-typed-qname
+			 ; !package-typed-qname => Package(package-untyped-qname)
+			 ;  Module(_, _ , section') := <get-desugared-module-ast>module-typed-qname
 		where
-			root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
-   		;output-path     := <get-output-path(|"sdf")>(root-directory , module-untyped-qname)
-    	;<debug-compiler>$[ Codegen | SDF | Found Section + Imports for the following module [<pp-aterm> module-untyped-qname].]
+			root-directory := $[[project-path]/[<get-autogenerated-artifacts-dir>]]
+   		; output-path   := <get-output-path(|"sdf")>(root-directory , module-untyped-qname)
+    	; dbg-compiler(!$[ Codegen | SDF | Found Section + Imports for the following module [<print-as-string> module-untyped-qname]])
     where
       // sdf2conflicts here collects information for the parenthesation in the prettyprinter
-    	sdf-string       := <pp-sdf-string'> 'module(<qname-to-path>module-untyped-qname, <to-sdf-imports-block>section* , <to-sdf-section-block;sdf2conflicts-store-sdf>section* )
-    	;<debug-compiler>$[ Codegen | SDF | Saving the artifacts of [<pp-aterm> module-untyped-qname].]
-		where
-			<save-artifact(| package-untyped-qname , root-directory, output-path)>sdf-string;
-			<debug-compiler>$[ Codegen | SDF | Finishing generation of SDF for [<pp-aterm> module-untyped-qname].]
-
+    	sdf-string := <pp-sdf-string'> 'module(
+    																		<qname-to-path>module-untyped-qname, 
+    																		<to-sdf-imports-block>section* , 
+    																		<to-sdf-section-block;sdf2conflicts-store-sdf>section* 
+    																		)
+    	; dbg-compiler(!$[ Codegen | SDF | Saving the artifacts of [<print-as-string> module-untyped-qname].])
+			; <save-artifact(| package-untyped-qname , root-directory, output-path)>sdf-string 
+			; dbg-compiler(!$[ Codegen | SDF | Finishing generation of SDF for [<print-as-string> module-untyped-qname].])
+
+	
+	
+rules	
+	
 	generate-sdf-main:  module-qname* -> <id>
-		with
- 			 project-path             := <ProjectPath>;
- 			 Package(package-qname)   := <GetEnclosingPackageName>;
- 			 relative-autogen-path :=  <qname-to-path>package-qname;
- 			 autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]];
-			 root-directory := $[[project-path]/[<Autogenerated-Artifacts-Dir>]];
-			 main-sdf-module-name :=<get-main-file-name>();
-			 output-path := <get-main-output-path(|main-sdf-module-name, "sdf")>(root-directory, package-qname);
-			<debug-compiler>$[ Codegen | SDF | Generating main for the following package : [<pp-aterm> package-qname].]
- 		with
- 			resultant-sorts := <get-sdf-start-symbols-to-sync ; is-not-empty-list <+ ![]>;
- 			if not(!resultant-sorts => []) then
- 				start-symbol-syntax := [exports(context-free-start-symbols(resultant-sorts))]
- 			else
- 				start-symbol-syntax := []
- 			end
+		where 
+			Package(package-qname)   := <GetEnclosingPackageName>
+			; dbg-compiler(!$[Codegen | SDF | Generating main failed for the following package : [<print-as-string> package-qname].])
+		where 		
+			with-spxverify(
+		 			project-path             := <ProjectPath> 
+ 			 		; relative-autogen-path :=  <qname-to-path>package-qname
+ 			 		; autogen-dir :=$[[<get-autogenerated-artifacts-dir>]/[relative-autogen-path]]
+			 		; root-directory := $[[project-path]/[<get-autogenerated-artifacts-dir>]]
+			 		; main-sdf-module-name :=<get-main-file-name><GetEnclosingPackageName> 
+			 		; output-path := <get-main-output-path(|main-sdf-module-name, "sdf")>(root-directory, package-qname) 
+			 		, ! $[ Codegen | SDF | Generating main failed for the following package : [<print-as-string> package-qname].]
+			 )  
+ 			; with-spxverify(
+	 				resultant-sorts := <get-sdf-start-symbols-to-sync ; is-not-empty-list <+ ![]>;
+	 				if not(!resultant-sorts => []) then
+		 				start-symbol-syntax := [exports(context-free-start-symbols(resultant-sorts))]
+	 				else
+	 					start-symbol-syntax := []
+	 				end
+	 				, !"getting & syncing start symbols failed"
+			)
  		where
  			sdf-string :=
 				<pp-sdf-string'>
@@ -81,73 +96,75 @@
 					, [imports(<map(pp-sdf-import;!'module(unparameterized(<id>)))>module-qname*)]
 					, start-symbol-syntax
 					)
-	  where
-	  	<debug-compiler>$[Codegen | SDF | Content of the main SDF is generated for the package : [<pp-aterm> package-qname].]
-		where
-			<save-artifact(| package-qname , root-directory, output-path)>sdf-string;
-			<debug-compiler>$[Codegen | SDF | Finishing generation of Main SDF Module of package : [<pp-aterm> package-qname].]
-
+	  	; with-spxverify(
+					<save-artifact(| package-qname , root-directory, output-path)>sdf-string
+					, ! $[Save failed for Main SDF Module of package : [<print-as-string> package-qname]]
+				)	
+			
 rules
 
-	to-sdf-section-block : sections* -> sdf-section-block
-	with contracts(
-		contract-requires ( is-list |sections*)
-	)
-	where
-		sdf-section* := <conc> (
-		  <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> sections*,
-		  <collect-om(?TemplateSection(_)); template-sections-to-sdf> sections*
-		);
-		if <ensure-list-is-not-empty>sdf-section* then
-			sdf-section-block := <to-generated-artifact-block(list-to-conc-grammars; topdown(repeat(desugar-sdf-redux)), \s -> [exports(s)]\)>sdf-section*
-		else
-			sdf-section-block := []
-		end
-
-
-	to-sdf-imports-block : sections*  -> sdf-import-block
-	with contracts(
-		contract-requires ( is-list |sections*)
-	)
-	where
-		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
-		if <ensure-list-is-not-empty>spx-import-stmt*  then
-			sdf-import-block := <to-generated-artifact-block(to-generated-artifacts-import-declarations(sdf-import-adapter), \s -> ['imports(s)]\)>spx-import-stmt*
-		else
-			sdf-import-block := []
-		end
+	to-sdf-section-block : 
+		sections* -> sdf-section-block
+		where with-spxverify(
+			verify( List |sections* , "List expected")
+		)
+		where
+			sdf-section* := <conc> (
+			  <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> sections*,
+			  <collect-om(?TemplateSection(_)); template-sections-to-sdf> sections*
+			);
+			if <ensure-list-is-not-empty>sdf-section* then
+				sdf-section-block := <to-generated-artifact-block(list-to-conc-grammars; topdown(repeat(desugar-sdf-redux)), \s -> [exports(s)]\)>sdf-section*
+			else
+				sdf-section-block := []
+			end
+
+	to-sdf-imports-block : 
+		sections*  -> sdf-import-block
+		where with-spxverify(
+			verify( List |sections* , "List expected")
+		)
+		where
+			spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
+			if <ensure-list-is-not-empty>spx-import-stmt*  then
+				sdf-import-block := <to-generated-artifact-block(to-generated-artifacts-import-declarations(sdf-import-adapter), \s -> ['imports(s)]\)>spx-import-stmt*
+			else
+				sdf-import-block := []
+			end
 
  	// Resolved Imports are alraedy filtered out in the previous step.
  	// Hence, native spx imports are added without any further
  	// verifications.
- 	sdf-import-adapter : name  -> 	'module(unparameterized(name))
- 	where
- 		<is-string>name
+ 	sdf-import-adapter : 
+ 		name  -> 	'module(unparameterized(name))
+ 		where
+ 			<is-string>name
 
 	// Additional verification is done during importing legacy artifacts.
 	// Here, both Unresolved libraries and Stratego Libs are Ignored.
 	// Basically anything Unresolved is not added as a import statment in
 	// generated SDF definition.
- 	sdf-import-adapter : legacy-artifact at Name(name)  -> 	result
- 	where
- 		if <has-extension(|"sdf")+has-extension(|"def")><UsedLegacyArtifacts>(<GetEnclosingPackageName> , name)then
-				// Importing Legacy artifact only if it is a SDF or DEF file
-				// Assumption : resolved global imports refers to stratego lib and declared in global scope.
-				result :=  'module(unparameterized(name)) ;
-				<record-def-import-reference>name
-		else
-				result :=  []
-		end
+ 	sdf-import-adapter : 
+ 		legacy-artifact at Name(name)  -> 	result
+	 	where
+	 		if <has-extension(|"sdf")+has-extension(|"def")><get-enclosed-legacy-artifact-details> then
+					// Importing Legacy artifact only if it is a SDF or DEF file
+					// Assumption : resolved global imports refers to stratego lib and declared in global scope.
+					result :=  'module(unparameterized(name)) ;
+					<record-def-import-reference>name
+			else
+					result :=  []
+			end
 
 	// Recoding references of def file so that we can specify -Idef arguments in pack-sdf
 	// It would have been much cleaner if Pack-SDF by defult supports it without specifying this extra arguments.
 	record-def-import-reference =
 		where(
-			?def-import-path;
+			?qualified-def-name;
 			// Verifying whether it is indeed a def file.
-			if (<has-extension(|"def")><UsedLegacyArtifacts>(<GetEnclosingPackageName> , def-import-path)) then
+			if (<has-extension(|"def")> <get-enclosed-legacy-artifact-details>) then
 				package-typed-qname := <GetEnclosingPackageName> ;
-				rules(ImportedDef :+ package-typed-qname  ->  def-import-path)
+				<index-imported-def-of-package>(package-typed-qname  ,qualified-def-name) 
 			end
 		)
 
@@ -172,8 +189,7 @@
 
   // HACK: remove scope from output
   desugar-sdf-redux:
-    term(default(appl(unquoted("scope"), [s]))) ->
-    term(default(appl(unquoted("scope"), [])))
+    term(default(appl(unquoted("scope"), [s]))) ->  term(default(appl(unquoted("scope"), [])))
 
   desugar-sdf-redux:
     namespacedef(_, s) -> s
@@ -200,7 +216,8 @@
 rules
 
 	//pretty printing as sdf imports
-	pp-sdf-import: Module(q at QName(qnameparts*))-> result
+	pp-sdf-import: 
+		Module(q at QName(qnameparts*))-> result
 		where
 				result := $[[<qname-to-path >q]
 									 ]
@@ -220,11 +237,18 @@
   desugar-sdf-redux:
     assoc-ref-group(a, ref*) -> assoc-group(a, <map(SortCons-to-prod)> ref*)
 
-  // FIXME: Declaration contains scoped names ((Package(QName(...)), Module(QName(...))), consOrSort)
   SortCons-to-prod:
     SortCons(sort, cons) -> t
-    with t := <( Declaration <+ debug(!"Undeclared SortCons"); <debug(!"all-keys-Declaration: ")> <all-keys-Declaration>; fail )
-               ; try(template-production-to-sdf-no-attrs)> (<to-package-scoped-symbol>sort, <to-package-scoped-symbol>cons)
-
+    where 
+    	with-spxverify(
+				<(  resolve-atleast-one-sdf-declaration <+  
+  		 	 	  debug(!"Undeclared SortCons"); 
+    		 	  debug(!"all-keys-Declaration is not available at this moment: "); 
+    		 	  fail
+    		 	)
+				  ; try(template-production-to-sdf-no-attrs)
+		   >(sort, cons) => t 
+			)
+  
   // Hook desugar-sdf-redux to templatelang-desugar-sdf
   desugar-sdf-redux = templatelang-desugar-sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-signature.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -2,12 +2,9 @@
 	codegen/sdf/to-signature
 imports 
 	libstratego-sglr
-imports
 	lib/editor-common.generated
-imports 
 	config
 	common
-imports 
 	context/sdf/declare-signature
 	context/sdf/declare
 	context/-
@@ -23,131 +20,189 @@
 imports 
 	utils/path
 	utils/debug	
+	utils/contract
 	
+// TODO : generalize several  strategies that are doing a common function 	
 rules
+	to-signature-as-rtree = parse-stratego-string
 	
-	to-signature-as-rtree =   
-		parse-stratego-string
-			
-rules
+	ensure-valid-generated-signature-relative-path(|project-path):
+		m at Module(QName(_)) -> $[[rel-path]
+		]
+		where 
+			rel-path:= $[[<get-generated-signature-relative-path>m]];
+			with-spxverify( 
+				<file-exists>$[[project-path]/[rel-path].str]
+				, !$[ Signature does not exists : [project-path]/[rel-path]]
+			)
+
+	get-global-signatures = 
+		activate-global-scope(
+			<resolve-all-symbol-definitions-by-type>OperationDeclaration() => result*
+		);
+		!result*;
+		operation-decl-to-string
 	
+	
+	get-all-enclosed-module-signature =
+		verify(?m at Module(QName(_)) | <id> , "Module(QName(_)) @get-all-signatures "); 
+		activate-scope(
+			<resolve-all-symbol-definitions-by-type>OperationDeclaration() => result*
+			| m
+		);
+		! result*;
+		operation-decl-to-string
+  			 		
+rules
 	// Temporarily needed  for the lwc project
 	// TODO : consider whether we need this rules for spx framework 
-	emit-package-signature-main : () -> ()
-	with 
- 			project-path := <ProjectPath>
- 			;Package(package-qname)   := <GetEnclosingPackageName>
- 			;language-name-string			:= <get-main-file-name>()
- 	where 
-			<debug-compiler>$[Codegen|Generating main signature for the packagees]
-			;generated-signatures-string := $[module [language-name-string]-signatures 
-			 	imports 
-					[<map(\s -> $[[s]
-				]\)	><all-keys-GeneratedSignature>]	
-			]
-			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
-	where
-		 autogen-dir := $[[project-path]/include]
-	 	;output-path-str 		:=   $[[autogen-dir]/[language-name-string]-signatures.str]
-	 	;output-path-rtree 		:= $[[autogen-dir]/[language-name-string]-signatures.rtree]
-	 	;<ensure-path-exists>(project-path, "include") 
-   	;chdir-to-project-path 
-	where
-		 <save-to-file>( output-path-str, generated-signatures-string)
-		;<WriteToBinaryFile>(output-path-rtree, signatures-as-aterm-string)
-		;<refresh-file>output-path-str
-		;<refresh-file>output-path-rtree
-	
+	emit-package-signature-main : 
+		() -> ()
+		where 
+			with-spxverify( 
+	 			project-path := <ProjectPath>
+	 			; Package(package-qname)   := <GetEnclosingPackageName>
+	 			; language-name-string			:= <get-main-file-name><GetEnclosingPackageName>
+	 			, !" failed to initialize properties e.g., project-path , enclosing package name and language-name string" 
+	 		)	 
+	 	where 
+			dbg-compiler(!$[Codegen|Generating main signature for the packagees])
+			; <get-enclosed-modules> <GetEnclosingPackageName> => enclosedModules
+			; generated-signatures-string := $[module [language-name-string]-signatures 
+			 	 imports 
+					[<map(
+							ensure-valid-generated-signature-relative-path(|project-path))
+						>enclosedModules
+					]
+				 imports 
+					[<get-generated-signature-relative-path><get_internal_module_qtname> Package(package-qname)
+				  ]
+				 imports 
+					[$[[<get-autogenerated-artifacts-dir>]/Globals/Signatures]
+				  ]	 	 	
+			 ]
+			; signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+		where
+			 autogen-dir := $[[project-path]/include]
+		 	; output-path-str 		:=   $[[autogen-dir]/[language-name-string]-signatures.str]
+		 	; output-path-rtree 		:= $[[autogen-dir]/[language-name-string]-signatures.rtree]
+		 	; <ensure-path-exists>(project-path, "include") 
+	   	; chdir-to-project-path 
+		where
+			<save-to-file>( output-path-str, generated-signatures-string);
+			<WriteToBinaryFile>(output-path-rtree, signatures-as-aterm-string);
+			<refresh-file>output-path-str;
+			<refresh-file>output-path-rtree
+		
 rules 
 		
 	// Emits default signatures in Global\ directory 
 	emit-default-signatures:
 		() -> ()
-		with 
- 			project-path := <ProjectPath>;
- 			sig-file-name := "Globals/Signatures";
- 			sig-file-rel-path := $[[<Autogenerated-Artifacts-Dir>]/[sig-file-name]]
-		where 
-			<debug-compiler>$[Codegen | SDF | Generating deafult signatures]			
-			;generated-signatures-string :=  <get-signature-contents(|sig-file-name,"")><get-all-signatures-as-string(?(Globals(), _))>
-			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+		where 
+			with-spxverify( 
+	 			project-path := <ProjectPath>
+	 			; sig-file-name := "Globals/Signatures"
+	 			; sig-file-rel-path := $[[<get-autogenerated-artifacts-dir>]/[sig-file-name]]
+	 			, !" failed to setup properties e.g., project-path , enclosing package name and language-name string"
+ 			)
+		where 
+			dbg-compiler(! $[Codegen | SDF | Generating deafult signatures])			
+			; generated-signatures-string :=  <get-signature-contents(|sig-file-name,"")><get-global-signatures>
+			; signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
 		where  
-			 autogen-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
+			 autogen-dir := $[[project-path]/[<get-autogenerated-artifacts-dir>]]
 			;output-path-str 		:=   $[[autogen-dir]/[sig-file-name].str]
 			;output-path-rtree 		:= $[[autogen-dir]/[sig-file-name].rtree]
-			;<ensure-path-exists>(project-path, $[[<Autogenerated-Artifacts-Dir>]/Globals]) 
+			;<ensure-path-exists>(project-path, $[[<get-autogenerated-artifacts-dir>]/Globals]) 
 			;chdir-to-project-path  
 		where
 			<save-to-file>( output-path-str, generated-signatures-string)
 			;<WriteToBinaryFile>(output-path-rtree, signatures-as-aterm-string)
 			;<refresh-file>output-path-str
 			;<refresh-file>output-path-rtree
-		where
-			rules( GeneratedSignature : sig-file-rel-path );    
-			<debug-compiler>$[ Codegen | SDF | Finishing generation of default signature]
+			; dbg-compiler(! $[ Codegen | SDF | Finishing generation of default signature])
 	
 rules 
+	
+	get-generated-signature-relative-path :
+		Module(qname) -> 	$[[<get-autogenerated-artifacts-dir>]/[<qname-to-path>qname]-signature]
 		
-	emit-internal-signatures: package-typed-qname at Package(QName(_))  -> <id>
-		with 
- 			project-path := <ProjectPath>;
- 			root-directory:= $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
- 		where
- 			module-typed-qname := <get_internal_module_qtname>package-typed-qname  ;
-			!module-typed-qname => Module(module-untyped-qname);
-			!package-typed-qname => Package(package-untyped-qname);
-			 modulename-string := <internal_module_name_string>
-		where 
-			sig-file-name     :=  <get-signature-file-name><qname-to-path>module-untyped-qname;
-			sig-file-rel-path := $[[<Autogenerated-Artifacts-Dir>]/[<qname-to-path>module-untyped-qname]-signature]
-		where 
-			<debug-compiler>$[Codegen| SDF | Generating signature for the following module: [<pp-aterm>module-typed-qname]]			
-			;imports-string := $[imports 
-				Globals/Signatures
-			]
-			;generated-signatures-string :=  <get-signature-contents(|sig-file-name,imports-string)> <get-all-signatures-as-string(?(package-typed-qname, module-typed-qname, _))>
-			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+	emit-internal-signatures: 
+		package-typed-qname at Package(QName(_))  -> <id>
+	 	where
+	 		with-spxverify(  
+	 			project-path := <ProjectPath> 
+	 			; root-directory:= $[[project-path]/[<get-autogenerated-artifacts-dir>]]
+	 			, ! "Failed to initialize @emit-internal-signatures "
+ 			)  
+ 			; module-typed-qname := <get_internal_module_qtname>package-typed-qname 
+ 			; !module-typed-qname => Module(module-untyped-qname) 
+		  ; !package-typed-qname => Package(package-untyped-qname) 
+	    ; modulename-string := <internal_module_name_string>
+		where 
+			  sig-file-name     :=  <get-signature-file-name><qname-to-path>module-untyped-qname
+			; sig-file-rel-path := <get-generated-signature-relative-path>module-typed-qname
+		where 
+			dbg-compiler(! $[Codegen| SDF | Generating signature for the following module: [<print-as-string>module-typed-qname]])			
+			; imports-string := $[imports 
+				  Globals/Signatures
+			  ]
+			; generated-signatures-string :=  <get-signature-contents(|sig-file-name,imports-string)> <get-all-enclosed-module-signature> module-typed-qname
+			; signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
 		where  
-			<save-artifact(save-to-file| package-untyped-qname, root-directory, <get-output-path(|"signature", "str")>(root-directory, module-untyped-qname))>generated-signatures-string;
-			<save-artifact(WriteToBinaryFile| package-untyped-qname, root-directory, <get-output-path(|"signature", "rtree")>(root-directory, module-untyped-qname))>signatures-as-aterm-string;
-			rules( GeneratedSignature : sig-file-rel-path )
-		where
-			<debug-compiler>$[ Codegen | SDF | Finishing generation of Signature for [<pp-aterm> module-untyped-qname].]
+			<save-artifact(save-to-file| package-untyped-qname, root-directory, <get-output-path(|"signature", "str")>(root-directory, module-untyped-qname))>generated-signatures-string
+			; <save-artifact(
+			  	WriteToBinaryFile | 
+			  	package-untyped-qname, 
+			  	root-directory, 
+			  	<get-output-path(|"signature", "rtree")>(root-directory, module-untyped-qname)
+			  	)> signatures-as-aterm-string
+		  ; dbg-compiler(!$[Codegen | SDF | Finishing generation of Signature for [<print-as-string> module-untyped-qname]])
 			
 rules				 
 	
 	// Emits signatures for the specified module definition		
 	emit-signatures:
 		m at Module(attrb* , modname , section*) -> m
-		with 
- 			project-path  := <ProjectPath>;
- 			root-directory:= $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
- 		with
- 			 package-typed-qname := <GetEnclosingPackageName> 
-			;module-typed-qname  := <GetEnclosingModuleName> 
-			<+ 
-			<debug-compiler>$[Codegen | SDF | Failed to create current scope.]
-			;fail
+		where
+			with-spxverify (  
+	 			project-path  := <ProjectPath>
+	 			; root-directory:= $[[project-path]/[<get-autogenerated-artifacts-dir>]] 
+		  );   
+	    with-spxverify (
+				package-typed-qname := <GetEnclosingPackageName>
+				; module-typed-qname  := <GetEnclosingModuleName>
+				, !$[Codegen | SDF | Failed to create current scope @emit-signatures ] 
+	  	)  
 		where
-			 !module-typed-qname  => Module(module-untyped-qname)
-			;!package-typed-qname => Package(package-untyped-qname)
-			;!modname => SPXModuleName(modulename-string)
-		where 
-			sig-file-name     :=  <get-signature-file-name><qname-to-path>module-untyped-qname;
-			sig-file-rel-path := $[[<Autogenerated-Artifacts-Dir>]/[<qname-to-path>module-untyped-qname]-signature]
+	   		!module-typed-qname  => Module(module-untyped-qname)
+	 		; !package-typed-qname => Package(package-untyped-qname)
+			; !modname => SPXModuleName(modulename-string)
+			; sig-file-name     :=  <get-signature-file-name><qname-to-path>module-untyped-qname
+			; sig-file-rel-path := <get-generated-signature-relative-path>module-typed-qname
 		where 
-			<debug-compiler>$[Codegen| SDF | Generating signature for the following module: [<pp-aterm>module-typed-qname]]			
-			;imports-string := $[imports 
-				Globals/Signatures
-			]
-			;generated-signatures-string :=  <get-signature-contents(|sig-file-name,imports-string)> <get-all-signatures-as-string(?(package-typed-qname, module-typed-qname, _))>
-			;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
-		where  
-			<save-artifact(save-to-file| package-untyped-qname, root-directory, <get-output-path(|"signature", "str")>(root-directory, module-untyped-qname))>generated-signatures-string;
-			<save-artifact(WriteToBinaryFile| package-untyped-qname, root-directory, <get-output-path(|"signature", "rtree")>(root-directory, module-untyped-qname))>signatures-as-aterm-string;
-			rules( GeneratedSignature : sig-file-rel-path )
-		where
-			<debug-compiler>$[ Codegen | SDF | Finishing generation of Signature for [<pp-aterm> module-untyped-qname].]
+			  dbg-compiler(!$[Codegen| SDF | Generating signature for the following module: [<print-as-string>module-typed-qname]])			
+			; imports-string := $[imports 
+				  Globals/Signatures
+			  ]
+			; generated-signatures-string :=  <get-signature-contents(|sig-file-name,imports-string)> <get-all-enclosed-module-signature> module-typed-qname
+			; signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+		where  
+			with-spxverify(
+				<save-artifact(
+					save-to-file| 
+					package-untyped-qname, 
+					root-directory, 
+					<get-output-path(|"signature", "str")>(root-directory, module-untyped-qname))> generated-signatures-string;
+			  <save-artifact(
+			  	WriteToBinaryFile| 
+			  	package-untyped-qname, 
+			  	root-directory, 
+			  	<get-output-path(|"signature", "rtree")>(root-directory, module-untyped-qname))> signatures-as-aterm-string
+  		  , !$[Saving [<get-output-path(|"signature", "str")>(root-directory, module-untyped-qname)] failed]	
+	  	)
+			; dbg-compiler(!$[Codegen | SDF | Finishing generation of Signature for [<print-as-string> module-untyped-qname]])
 			
 	
 rules 
@@ -170,9 +225,6 @@
        [<concat-strings>signatures-string*]
 ]  
 	
-    	
-	get-all-signatures-as-string(s) = all-keys-Get-Operation-Signature; filter(s); mapconcat(bagof-Get-Operation-Declaration);operation-decl-to-string
-  
   operation-decl-to-string : [] -> []
   
   operation-decl-to-string : 
@@ -185,28 +237,26 @@
   		else
   			current-op-decl-string := $[[<opname-to-string>opname]: [<lhs-operands-to-string>operands*] -> [resultant-sort]
   			]
-  			
   		end		 
   		;rest-op-decl-string* := <operation-decl-to-string> rest-op-decl* 
  	
  	
- 	opname-to-string : opname -> opname-string
- 	where 
- 		if (!opname => "") then 
- 			opname-string := $[]
-		else
-			opname-string  := opname
-		end
-				
+ 	opname-to-string : 
+ 		opname -> opname-string
+	 	where 
+	 		if (!opname => "") then opname-string := $[]
+			else opname-string  := opname
+			end
+					
   //TODO : generalize following strategies. 
   lhs-operands-to-string : [] -> $[]
   
   lhs-operands-to-string : [last] -> $[[last]]
    
-  lhs-operands-to-string : [hd-operand|rest*] -> $[[hd-operand-string] * [rest-operand-string]]
-  where
-  	not (![] => rest*) 
-  where 
-  	 hd-operand-string := hd-operand 
-  	;rest-operand-string := <lhs-operands-to-string>rest*
+  lhs-operands-to-string : 
+  	[hd-operand|rest*] -> $[[hd-operand-string] * [rest-operand-string]]
+  	where
+  		not (!rest* => []) 
+  		; hd-operand-string := hd-operand 
+	  	; rest-operand-string := <lhs-operands-to-string>rest*
   	  
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-contracts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-contracts.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-contracts.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -4,15 +4,17 @@
   lib/editor-common.generated
   context/str/declare
   include/SpoofaxLang 
-  
+  common
+
 rules
-  
   generate-code-contracts:
     (selected, position, ast, path, project-path) -> (filename, result)
-    with
-      filename := <guarantee-extension(|"contracts.str")> path;
-      result   := <generate-contracts-analysis; pp-stratego-string> selected
-    
+    where 
+    	with-spxverify(
+      	filename := <guarantee-extension(|"contracts.str")> path;
+      	result   := <generate-contracts-analysis; pp-stratego-string> selected
+    	)
+  
   generate-contracts-analysis:
     ast ->  Module( "codecontract-generated", <conc>( imports , str-with-code-contracts))
 		where
@@ -24,16 +26,16 @@
 	inject-code-contracts:  
 		Rule(t1, t2,c) ->  Rule(t1', t2' , condition*)
 		where
-			t1* := <convert-to-list>t1;
-			t2* := <convert-to-list>t2;
-			c*  := <convert-to-list>c  
-		with 
-			t1' := <alltd(convert-to-untyped-var)>t1* ;
-			t2' := <alltd(convert-to-untyped-var)>t2* ;
-			condition* := <conc>(<flatten-list><collect-all(fetch-contracts)>t1* , c* , <flatten-list><collect-all(fetch-contracts)>t2* )  
+			t1* := <convert-to-list>t1
+			; t2* := <convert-to-list>t2
+			; c*  := <convert-to-list>c  
+			; with-spxverify( 
+					t1' := <alltd(convert-to-untyped-var)>t1* ;
+					t2' := <alltd(convert-to-untyped-var)>t2* ;
+					condition* := <conc>(<flatten-list><collect-all(fetch-contracts)>t1* , c* , <flatten-list><collect-all(fetch-contracts)>t2* )
+				)  
 			
-	inject-code-contracts:  
-		RuleNoCond(t1, t2) -> <inject-code-contracts>Rule(t1, t2,[])  
+	inject-code-contracts: RuleNoCond(t1, t2) -> <inject-code-contracts>Rule(t1, t2,[])  
 		
 rules
 			
@@ -55,10 +57,9 @@
 											)
 										)	
 										
-   convert-to-list : arg -> arg*
-   where 
-   	if <not(is-list)>arg then 
-			arg* := [arg]
-		else
-			arg* := arg
-		end          												
\ No newline at end of file
+   convert-to-list : 
+   	arg -> arg*
+   	where 
+   		if <not(is-list)>arg then arg* := [arg]
+			else arg* := arg
+			end          												
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/str/to-stratego.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -25,130 +25,140 @@
 	normalize/signatures
 	utils/contract
 	utils/sdf2conflicts
-
+	common
 
 
 rules
 	// emit STR definition for the specified SPX module.
  	emit-str:
 		m at Module(attrb* , modname , section*) -> m
-		with
- 			 project-path := <ProjectPath>
- 			;root-dir := $[[project-path]/[<Autogenerated-Artifacts-Dir>]]
- 		with
- 			package-typed-qname := <GetEnclosingPackageName>
-			;module-typed-qname  := <GetEnclosingModuleName>
-			<+
-			<debug-compiler>$[ Codegen | STR | Failed to create current scope.]
-			;fail
 		where
-			 !module-typed-qname  => Module(module-untyped-qname)
-			;!package-typed-qname => Package(package-untyped-qname)
-			;!modname             => SPXModuleName(modulename-string)
-			;<debug-compiler> $[CodeGen | STR | generating code for the following module : [<pp-aterm>module-untyped-qname]]
-		where
-			emit-str-rtree(| package-untyped-qname, module-untyped-qname, root-dir);
-			emit-str-concrte-syntax (|package-untyped-qname, module-untyped-qname, root-dir)
-	 	 ;<debug-compiler>$[ Codegen | STR | Finishing generation of following module: [<pp-aterm> module-untyped-qname].]
+			with-spxverify(
+	 			 project-path := <ProjectPath>
+	 			 ; root-dir := $[[project-path]/[<get-autogenerated-artifacts-dir>]]
+	 			 ; package-typed-qname := <GetEnclosingPackageName>
+				 ; module-typed-qname  := <GetEnclosingModuleName>
+				 , !$[ Codegen | STR | Failed to create current scope.]
+			)	  
+		where
+	 		!module-typed-qname  => Module(module-untyped-qname)
+			; !package-typed-qname => Package(package-untyped-qname)
+		 	; !modname             => SPXModuleName(modulename-string)
+		 	; dbg-compiler(!$[CodeGen | STR | generating code for the following module : [<print-as-string>module-untyped-qname]])
+		where
+			emit-str-rtree(| package-untyped-qname, module-untyped-qname, root-dir)
+			; emit-str-concrte-syntax (|package-untyped-qname, module-untyped-qname, root-dir)
+	 	  ; dbg-compiler(!$[ Codegen | STR | Finishing generation of following module: [<print-as-string> module-untyped-qname].])
 
 
 	// emit stratego concrete syntax
-	emit-str-concrte-syntax (|package-untyped-qname, module-untyped-qname , root-dir) :
+	emit-str-concrte-syntax(| package-untyped-qname, module-untyped-qname , root-dir) :
 		str-rtree -> str-concrete-syntax
-		with
+		where
 			output-path-str 	    := <get-output-path(|"str")>(root-dir, module-untyped-qname)
-   	where
-			 str-concrete-syntax := <to-str-string>str-rtree
-			;<save-artifact(|package-untyped-qname, root-dir,output-path-str)> str-concrete-syntax
+   		; str-concrete-syntax := <to-str-string>str-rtree
+			; <save-artifact(|package-untyped-qname, root-dir,output-path-str)> str-concrete-syntax
 
 	// emit stratego rtree
 	emit-str-rtree (|package-untyped-qname, module-untyped-qname , root-dir):
 		Module(attrb* , modname , section*) -> str-aterm
-		with
-			output-path-rtree    := <get-output-path(|"rtree")>(root-dir, module-untyped-qname)
 		where
-			 str-section-def := <conc>(<collect-om(?STRSection(<id>), conc)> section* ,<get-name-analysis>section*)
-			;str-aterm := Module(
+			with-spxverify(
+				output-path-rtree    := <get-output-path(|"rtree")>(root-dir, module-untyped-qname)
+				; ! " failed to get output-path-rtree @emit-str-rtree"
+			)
+			; str-section-def := <conc>(<collect-om(?STRSection(<id>), conc)> section* ,<get-name-analysis>section*)
+			; str-aterm := Module(
 			 										 <qname-to-path>module-untyped-qname,
 			 										 <conc>(<to-str-imports-block(|module-untyped-qname)>section*,
 			 											  		str-section-def
 			 													 )
 			 										)
-			;<save-artifact(WriteToBinaryFile | package-untyped-qname, root-dir,output-path-rtree)> str-aterm
+			; <save-artifact(WriteToBinaryFile | package-untyped-qname, root-dir,output-path-rtree)> str-aterm
 
+rules
 	// Generates main stratego module for the specified package-name
-	generate-str-main:  module-qname* -> <id>
-		with
- 			 project-path             := <ProjectPath>;
- 			 Package(package-qname)   := <GetEnclosingPackageName>;
- 			 root-directory 					:= $[[project-path]/[<Autogenerated-Artifacts-Dir>]];
- 		   <debug-compiler> $[CodeGen | STR | Generate-str-main from package-name: [<pp-aterm>package-qname]]
- 		with
- 			 main-str-module-name :=  <get-main-file-name>();
-       pp-module-name := <conc-strings>(main-str-module-name, "-prettyprinter");
-			 str-aterm := Module(main-str-module-name, [
-			   Imports(<get-str-imports(|<GetEnclosingPackageName>)>module-qname*),
-			   Imports([Import(pp-module-name)])
-			 ]);
-			 str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
-		with
-			<save-artifact(save-to-file      | package-qname , root-directory, <get-main-output-path(|main-str-module-name, "str")>(root-directory, package-qname))>str-string;
-			<save-artifact(WriteToBinaryFile | package-qname , root-directory, <get-main-output-path(|main-str-module-name, "rtree")>(root-directory, package-qname))>str-aterm;
-			<debug-compiler>$[ Codegen | STR | Generation of Main STR Module for package : [<pp-aterm> package-qname] is done.]
-	  with
-	    <debug-compiler>$[ Codegen | STR | Generating prettyprinter from package-name: [<pp-aterm>package-qname]];
-	    {|DeclaredModule, GetEnclosingModuleName, SubtermConflicts:
-	      <sdf2conflicts> [];
-	      // HACK: this lacks any sanity wrt the original modules in which the SDF was placed ...
-	      rules(
-	        DeclaredModule :+ "__prettyprinter" -> "__prettyprinter"
-	        GetEnclosingModuleName := Module("__prettyprinter")
-	      );
-        section* := <map(get-original-module-declaration; ?Module(_, _, <id>)); concat> module-qname*;
-        section'* := <filter(?SDFSection(_) + ?SDFSectionEH(_, _) + ?TemplateSection(_))> section*;
-        // this uses information collected by sdf2conflicts
-        pp-aterm := <template-sections-to-stratego> section'*
-	    |};
-      pp-string := <pp-stratego-string> <parenthesize-Stratego> pp-aterm;
-      pp-qname := <QName(at-last([<conc-strings>(<id>, "-prettyprinter")]))> package-qname;
-      <save-artifact(save-to-file      | pp-qname , root-directory, <get-main-output-path(|pp-module-name, "str")>(root-directory, pp-qname))> pp-string;
-      <save-artifact(WriteToBinaryFile | pp-qname , root-directory, <get-main-output-path(|pp-module-name, "rtree")>(root-directory, pp-qname))> pp-aterm;
-	    <debug-compiler>$[ Codegen | STR | Generation of prettyprinter : [<pp-aterm>package-qname] is done.]
-
-
+	generate-str-main:  
+		module-qname* -> <id>
+		where
+			with-spxverify(
+			 project-path             := <ProjectPath>
+ 			 ; Package(package-qname)   := <GetEnclosingPackageName>
+ 			 ; root-directory 					:= $[[project-path]/[<get-autogenerated-artifacts-dir>]]
+ 		  )
+ 		  ; dbg-compiler(!$[CodeGen | STR | Generate-str-main from package-name: [<print-as-string>package-qname]])
+ 		  ; with-spxverify(
+	 			 main-str-module-name :=  <get-main-file-name><GetEnclosingPackageName>
+	       ; pp-module-name := <conc-strings>(main-str-module-name, "-prettyprinter")
+				 ; str-aterm := Module(main-str-module-name, [
+				   	Imports(<get-str-imports(|<GetEnclosingPackageName>)>module-qname*),
+				    Imports([Import(pp-module-name)])
+		 		   ]
+			     )
+	 			 ; str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
+		    )
+		  ; with-spxverify(
+			 		  <save-artifact(save-to-file      | package-qname , root-directory, <get-main-output-path(|main-str-module-name, "str")>(root-directory, package-qname))>str-string
+					; <save-artifact(WriteToBinaryFile | package-qname , root-directory, <get-main-output-path(|main-str-module-name, "rtree")>(root-directory, package-qname))>str-aterm
+		  	)
+			; dbg-compiler(!$[ Codegen | STR | Generation of Main STR Module for package : [<print-as-string> package-qname] is done])
+			// Generating pretty-printer if templatelang is enabled 
+			; if templatelang-enabled then    
+					 with-spxverify(
+				    	dbg-compiler(!$[Codegen | STR | Generating prettyprinter from package-name: [<print-as-string> package-qname]]);
+				    	{|SubtermConflicts:
+					      <sdf2conflicts> []
+					      // HACK: this lacks any sanity wrt the original modules in which the SDF was placed ...
+					      ; section* := <map(get-original-module-definition; ?Module(_, _, <id>)); concat> module-qname*
+				        ; section'* := <filter(?SDFSection(_) + ?SDFSectionEH(_, _) + ?TemplateSection(_))> section*
+				        ; activate-internal-scope(  
+				        	// this uses information collected by sdf2conflicts
+				        	pp-aterm := <template-sections-to-stratego> section'*
+				        )  
+				   	 |}
+			       ; pp-string := <pp-stratego-string> <parenthesize-Stratego> pp-aterm
+				     ; pp-qname := <QName(at-last([<conc-strings>(<id>, "-prettyprinter")]))> package-qname
+				     ; <save-artifact(save-to-file      | pp-qname , root-directory, <get-main-output-path(|pp-module-name, "str")>(root-directory, pp-qname))> pp-string
+				     ; <save-artifact(WriteToBinaryFile | pp-qname , root-directory, <get-main-output-path(|pp-module-name, "rtree")>(root-directory, pp-qname))> pp-aterm
+					   ; dbg-compiler(!$[ Codegen | STR | Generation of prettyprinter : [<print-as-string>package-qname] is done.])
+						)
+				end
 rules
 
 	// get name analysis for  the specified sections
-	get-name-analysis : sections* -> result
-	where
-		sdf-section* := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)>sections*;
-		Module(_, result) := <generate-name-analysis>sdf-section*
-	<+
-		<debug-compiler>$[ Codegen | STR | Failed name analysis.]
+	get-name-analysis :  
+		sections* -> result
+		where
+			sdf-section* := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)>sections*;
+			Module(_, result) := <generate-name-analysis>sdf-section*
+		<+
+			dbg-compiler(!$[ Codegen | STR | Failed name analysis.])
 
 
 
 rules
 
-	to-str-string: sections* -> str-section-block
-	where
-		str-section-block := <parenthesize-Stratego; pp-stratego-string>sections*
-
-	to-str-imports-block(|module-qname): sections*  ->str-import-block
-	with
-		contracts(
-			contract-requires ( is-list |sections*);
-			contract-requires ( ?QName(_)|module-qname)
-		)
-	where
-		spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
-		if <ensure-list-is-not-empty>spx-import-stmt*  then
-			str-import-block' := <to-generated-artifact-block(to-generated-artifacts-import-declarations(to-str-import), \s -> [Imports(s)]\)>spx-import-stmt*
-		else
-			str-import-block' := []
-		end;
-		module-qualified-path := <qname-to-path>module-qname ;
-		str-import-block := <flatten-list>[[Imports([Import(<get-signature-file-name>module-qualified-path)])], str-import-block']
+	to-str-string: 
+		sections* -> str-section-block
+		where
+			str-section-block := <parenthesize-Stratego; pp-stratego-string>sections*
+
+	to-str-imports-block(|module-qname): 
+		sections*  ->str-import-block
+		where
+			with-spxverify(
+				verify( is-list |sections* , "expected List")
+				; verify( ?QName(_)|module-qname , "expected:QName(_)")
+				, !"to-str-imports-block failed in contracts validations" 
+			)
+			; spx-import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> sections*;
+			if <ensure-list-is-not-empty>spx-import-stmt*  then
+				str-import-block' := <to-generated-artifact-block(to-generated-artifacts-import-declarations(to-str-import), \s -> [Imports(s)]\)>spx-import-stmt*
+			else
+				str-import-block' := []
+			end;
+			module-qualified-path := <qname-to-path>module-qname ;
+			str-import-block := <flatten-list>[[Imports([Import(<get-signature-file-name>module-qualified-path)])], str-import-block']
 
 
 rules
@@ -156,12 +166,13 @@
 	// Returns the import statements for this package.
 	// In addition, it imports Internal Signatures for this package
 	// And by default add reference to libstratego-lib
-	get-str-imports(|package-qname): module-qnames* -> result
-	where
-		result' := <map(to-str-import);flatten-list>module-qnames*
-	where
-		<to-str-import><get_internal_module_qtname>package-qname => [_, sig-import];
-		result := <conc>([Import("libstratego-lib"),sig-import] , result')
+	get-str-imports(|package-qname): 
+		module-qnames* -> result
+		where
+			result' := <map(to-str-import);flatten-list>module-qnames*
+		where
+			<to-str-import><get_internal_module_qtname>package-qname => [_, sig-import];
+			result := <conc>([Import("libstratego-lib"),sig-import] , result')
 
 rules
 
@@ -174,9 +185,9 @@
 		legacy-artifact at Name(name)  -> 	result
  		where
 			if(
-				<UsedLegacyArtifacts>(Globals() , name) => Resolved()
+				<is-declared-legacy-artifact> name
 			<+
-				<has-extension(|"str")+	has-extension(|"rtree")><UsedLegacyArtifacts>(<GetEnclosingPackageName> , name)
+				<has-extension(|"str")+	has-extension(|"rtree")><get-enclosed-legacy-artifact-details>
 			)
 			then
 				// Importing legacy artifact. Please note that , for legacy artifact, signatrue is not included

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -11,7 +11,11 @@
   utils/attributes
   utils/contract
   utils/templatelang
-
+	common
+	context/symboltable
+	context/sdf/declare
+	context/declare 
+	
 strategies
 
   test-templatelang-to-esv:
@@ -29,35 +33,33 @@
   /** @type List(TemplateSection) -> List(Completions) */
   template-sections-to-esv:
     section* -> completion*
-    with
-      contracts(
-        contract-requires(List | section*)
-      )
-    with
+    where with-spxverify(
+      verify(List | section* , "List ::template-sections-to-esv")
+    )
+    where with-spxverify(
       completion* := <filter(template-section-to-esv); concat> section*
-    with
-      contracts(
-        contract-requires(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion*)
-      )
-
+    )
+    where with-spxverify(
+      verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  ::template-module-to-esv")
+    )
+    
   /** @type TemplateSection -> List(CompletionTemplate) */
   template-section-to-esv:
     TemplateSection(prod*) -> completion*
-    with
-      contracts(
-        // FIXME: remove TemplateProductionWithCons/3 when desugaring is performed before code generation.
-        contract-requires(ListOf(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _)) | prod*)
-      )
-    with
+    where 
+    	with-spxverify(
+        verify( ListOf(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _)) | prod* , "ListOf(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _))  ::template-section-to-esv")
+    	)
+    where with-spxverify(
       // FIXME: desugaring should have been performed before the current strategy is invoked.
       // FIXME: declaring is here for unit testing only ???
       completion* := <templatelang-desugar-top;
                       declare-template-definition-main;
                       filter(template-to-completion-template)> prod*
-    with
-      contracts(
-        contract-requires(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion*)
-      )
+    )
+    where with-spxverify(
+      verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  ::template-section-to-esv")
+   	)  
 
   template-section-to-esv:
     SDFSection(lexical-syntax(prod*)) ->
@@ -69,22 +71,22 @@
 
   sdf-productions-to-completion-templates:
     prod* -> completion*
-    with
-      contracts(
+    where with-spxverify(
         // FIXME: remove SdfProduction/3 and SdfProductionWithCons/3 when desugaring is performed before code generation.
-        contract-requires(ListOf(?prod(_, _, _) + ?SdfProduction(_, _, _) + ?SdfProductionWithCons(_, _, _)) | prod*)
-      )
-    with
+        verify(ListOf(?prod(_, _, _) + ?SdfProduction(_, _, _) + ?SdfProductionWithCons(_, _, _)) | prod* , "ListOf(?prod(_, _, _) + ?SdfProduction(_, _, _) + ?SdfProductionWithCons(_, _, _))  ::sdf-productions-to-completion-templates")
+    )  
+   where 
+   	with-spxverify(
       // FIXME: desugaring should have been performed before the current strategy is invoked.
       // FIXME: declaring is here for unit testing only ???
       completion* := <templatelang-desugar-sdf-top;
                       declare-sdf-definition-main;
                       filter(sdf-production-to-template;
                              template-to-completion-template)> prod*
-    with
-      contracts(
-        contract-requires(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion*)
-      )
+		 )
+		where with-spxverify(
+			verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  ::sdf-productions-to-completion-templates " )
+    )  
 
 /*internal*/ strategies
 
@@ -97,11 +99,13 @@
       |[ completion template ~sort : ~prefix = ~*part* ]|
     where
       not(<is-deprecated + is-reject> attrs)
-    with {|Expanded:
-      part* := <map(template-element-to-esv);
+    where with-spxverify( 
+    	{|Expanded:
+      	part* := <map(template-element-to-esv);
                 template-to-completion-template-helper> elem*;
-      prefix := <build-prefix> part*
-    |}
+      	prefix := <build-prefix> part*
+    	|}
+    )	
     where
       <accept-template-parts(|sort)> part*
 
@@ -110,14 +114,16 @@
       |[ completion template ~sort : ~prefix = ~*part* (blank) ]|
     where
       not(<is-deprecated + is-reject> attrs)
-    with {|Expanded:
-      part* := <map(template-line-to-esv);
+    where with-spxverify( 
+    	{|Expanded:
+      	part* := <map(template-line-to-esv);
                 try(\[[_, Cursor()] | tail] -> tail\); // HACK for Mobl <MetaAnno*>
                 remove-cursor-except-first;
                 separate-by(|String("\n"));
                 template-to-completion-template-helper> line*;
-      prefix := <build-prefix> part*
-    |}
+      	prefix := <build-prefix> part*
+    	|}
+  	)
     where
       <accept-template-parts(|sort)> part*
 
@@ -267,12 +273,12 @@
   is-template-placeholder:
     Placeholder(_, sort(x), _, _) -> <id>
     where
-      <setof-Declaration; one(?TemplateProduction(_, _, _))> x
+      <setof-Declaration ; one(?TemplateProduction(_, _, _))> x
 
   is-template-placeholder:
     PlaceholderWithSort(_, x) -> <id>
     where
-      <setof-Declaration; one(?TemplateProduction(_, _, _))> x
+      <setof-Declaration ; one(?TemplateProduction(_, _, _))> x
 
   // expand-template-line covers exactly all valid input terms except:
   //  Line([indent @ Layout(_), Placeholder(_, sort(x), <None() + Plus()>, _)]) where <Expanded> x
@@ -315,13 +321,13 @@
   // helpers
 
   get-template-lines(|indent) =
-    setof-Declaration;
+    setof-Declaration ;
     filter(expand-multi-line-template-production);
     choose-one-expansion;
     map(Line(![indent | <id>]))
 
   get-template-elements =
-    setof-Declaration;
+    setof-Declaration ;
     filter(expand-single-line-template-production);
     choose-one-expansion
 
@@ -349,8 +355,10 @@
 
   lti = not(gti)
 
-  setof-Declaration =
-    to-package-scoped-symbol;
-    bagof-Declaration; nub; is-not-empty
 
-  is-not-empty = ?[_ | _]
+  setof-Declaration =
+  	activate-scope(
+  		setof-sdf-declarations 
+  		|<GetEnclosingPackageName>
+  	);
+    is-not-empty-list
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -18,31 +18,32 @@
 
   test-templatelang-to-sdf:
     ast -> 'module(unparameterized(modulename), [], [exports(grammars)])
-    with
+    where with-spxverify(
       init-template-options;
       <?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), sections)])])> ast;
       (options, t-sections) := <partition(?TemplateOptions(<id>))> sections;
       <try([declare-template-options-main])> options;
       <template-sections-to-sdf /*;alltd(quoted(double-quote))*/> t-sections;
       (\[x] -> x\ + \[x, y] -> conc-grammars(x, y)\) => grammars
+    )
 
 strategies
 
   /** @type List(TemplateSection) -> List(grammar) */
   template-sections-to-sdf:
     section* -> sdf-section'*
-    with
-      contracts(
-        contract-requires(ListOf(?TemplateSection(_)) | section*)
+    where 
+    	with-spxverify(
+    		verify(ListOf(?TemplateSection(_)) | section* , "ListOf(?TemplateSection(_)) ::template-sections-to-sdf")
       )
-    with
+    where with-spxverify ( 
       // FIXME: desugaring should have been performed before the current strategy is invoked.
       sdf-section*  := <templatelang-desugar-top; map(template-section-to-sdf)> section*;
       sdf-section'* := <add-contentcomplete; add-lexical-restrictions> sdf-section*
-    with
-      contracts(
-        contract-requires(ListOf(?context-free-syntax(_) + ?lexical-restrictions(_)) | sdf-section'*)
-      )
+    )
+    where with-spxverify ( 
+      verify(ListOf(?context-free-syntax(_) + ?lexical-restrictions(_)) | sdf-section'* , "ListOf(?context-free-syntax(_) + ?lexical-restrictions(_)) ::template-sections-to-sdf")
+    )	
 
 /*internal*/ strategies
 
@@ -52,15 +53,16 @@
       context-free syntax
         p*
     ]|
-    with
+    where with-spxverify ( 
       // main productions
       // FIXME: declaring should have been performed before the current strategy is invoked.
       p* := <declare-template-definition-main; map(template-production-to-sdf)> prod*
+    )
 
   /** @type List(grammar) -> List(grammar) */
   add-contentcomplete:
     sdf-section* -> [sdf-section*, injections*]
-    with
+    where with-spxverify ( 
       A* := <collect-om(?sort(_)); nub; string-sort-ex> sdf-section*;
       p* := <map(sort-to-contentcomplete)> A*;
       if !p* => [] then
@@ -68,11 +70,12 @@
       else
         injections* := [context-free-syntax(p*)]
       end
+    )
 
   /** @type List(grammar) -> List(grammar) */
   add-lexical-restrictions:
     sdf-section* -> [sdf-section*, restrictions*]
-    with
+    where with-spxverify(
       let ends-with-identifier-char =
             where(
               explode-string;
@@ -82,53 +85,57 @@
             )
       in
         A* := <collect-om(lit(ends-with-identifier-char)); nub; string-sort-ex> sdf-section*;
-        r  := <Options> KeywordFollowRestriction();
+        r  := <get-keyword-follow-restriction>;
         if (!A* => []) + (!r => None()) then
           restrictions* := []
         else
           restrictions* := [lexical-restrictions([follow(A*, r)])]
         end
       end
+     ) 
 
   // Used when rewriting `Sort.Cons' in priority sections to a production.
   template-production-to-sdf-no-attrs:
     TemplateProduction(S', t, _) -> p|[ A* -> S' ]|
-    with
+    where with-spxverify ( 
       A* := <template-to-sdf> t
+    )
 
   template-production-to-sdf:
     TemplateProduction(S', t, attrs) -> p|[ A* -> S' attrs' ]|
-    with
+    where with-spxverify ( 
       A* := <template-to-sdf> t;
       attrs' := <attrs(filter(not(?sdf-completion(_)))) <+ no-attrs()> attrs
+    )
 
-  // Single line template.
+	// Single line template.
   //  -OR-
   // Template with only a placeholder. (i.e., injection)
   // The placeholder is at the start AND at the end of the template!
   template-to-sdf:
     < ?SingleLineTemplate(elem*)
     + ?Template([Line(elem* @ [Layout(_), Placeholder(_, _, _, _)])]) > -> A*
-    with
+    where with-spxverify ( 
       A* := <maybe-separating(
       	       filter(template-element-to-sdf-sep <+ template-element-to-sdf),
       	       filter(template-element-to-sdf)
       	     );
              flatten-list> elem*
-
+		)
+		
   // Multi line template.
   template-to-sdf:
     Template(line*) -> A*
-    with
+    where with-spxverify ( 
       A* := <filter(?Line([Layout(_), _ | _]));
              maybe-separating(
              	 !(<id>, 0); thread-map(template-line-to-sdf-sep); ?(<id>, _),
              	 map(template-line-to-sdf)
              );
              flatten-list> line*
-
+		)
   maybe-separating(yes, no) =
-    if <Options> Newlines() => Separating() then yes else no end
+    if <get-template-option> Newlines() => Separating() then yes else no end
 
 rules
 
@@ -174,7 +181,7 @@
   template-line-to-sdf =
     ?Line(<id>);
     if not(?[Layout(_), Placeholder(_, _, _, _)]) then
-      switch <Options> Newlines()
+      switch <get-template-option> Newlines()
         case ?None()     : id
         case ?Leading()  : ![String("\n") | <id>]
         case ?Trailing() : (elem* -> [elem*, String("\n")])
@@ -198,7 +205,7 @@
   template-element-to-sdf:
     Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ { S L }* ]|
     where <one(Separator(not(string-is-layout)))> option*
-    with L := <separator-to-literal> option*
+    where with-spxverify ( L := <separator-to-literal> option*)
 
   template-element-to-sdf:
     Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ S+ ]|
@@ -207,7 +214,7 @@
   template-element-to-sdf:
     Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ { S L }+ ]|
     where <one(Separator(not(string-is-layout)))> option*
-    with L := <separator-to-literal> option*
+    where with-spxverify( L := <separator-to-literal> option*  )
 
   char-is-layout =
     ' ' + '\t' + '\r' + '\n'

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -11,6 +11,7 @@
   utils/attributes
   utils/sdf2conflicts
   utils/templatelang
+	common
 
 strategies
 
@@ -40,7 +41,7 @@
 
         pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
         pp-list(s|t) = map(s); separate-by(|t); concat-strings
-        // ih = indent helper, t = indent string
+ 				// ih = indent helper, t = indent string
         pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
         pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
 
@@ -49,27 +50,35 @@
       strategies // all other sorts used in placeholders
 
         [strategy*]]
-    with
-      section'*  := <templatelang-desugar-top> section*;
-      section''* := <filter(template-section-to-stratego-string);
-                     separate-by(|"\n\n")> section'*
-    with
-      // All sorts used in pp minus all sorts for which a pp strategy has been
-      // created will get a `prettyprint-sort = is-string' default strategy.
-      sorts-used-in-pp := <collect-om(sort-used-in-prettyprinting); nub> section'*; // FIXME: global data
-      sorts-decl-in-pp := <collect-om(sort-decl-in-prettyprinting); nub> section'*; // FIXME: global data
-      sorts-without-pp := <diff> (sorts-used-in-pp, sorts-decl-in-pp);
-      strategy* := <map(sort-to-prettyprint-strategy); separate-by(|"\n\n")> sorts-without-pp
+    where
+    	with-spxverify(
+	      section'*  := <templatelang-desugar-top> section*;
+	      section''* := <filter(template-section-to-stratego-string);
+	                     separate-by(|"\n\n")> section'*
+     		, !"Failed to desugar "
+     	);
+    	with-spxverify(
+	      // All sorts used in pp minus all sorts for which a pp strategy has been
+	      // created will get a `prettyprint-sort = is-string' default strategy.
+	      sorts-used-in-pp := <collect-om(sort-used-in-prettyprinting); nub> section'*; // FIXME: global data
+ 	      sorts-decl-in-pp := <collect-om(sort-decl-in-prettyprinting); nub> section'*; // FIXME: global data
+              sorts-without-pp := <diff> (sorts-used-in-pp, sorts-decl-in-pp);
+	      strategy* := <map(sort-to-prettyprint-strategy); separate-by(|"\n\n")> sorts-without-pp
+	      , !"Failed to generate sort-to-pretty-print strategy"
+      )
 
   template-section-to-stratego-string:
     TemplateSection(prod*) ->
     $[strategies
 
         [strategy*]]
-    with
-      strategy* := <declare-template-definition-main;
-                    map(template-to-prettyprint-strategy);
-                    separate-by(|"\n\n")> prod*
+    where 
+    	with-spxverify(
+	      strategy* := <declare-template-definition-main;
+	                    map(template-to-prettyprint-strategy);
+	                    separate-by(|"\n\n")> prod*
+      	, !"Failed to pretty-print template to strategy"
+      )
 
 /*internal*/ strategies
 
@@ -77,14 +86,14 @@
     sort -> $[prettyprint-[sort] = is-string]
 
   sort-decl-in-prettyprinting:
-    TemplateProduction(sort, _, _) -> sort
+	  TemplateProduction(sort, _, _) -> sort
 
   sort-used-in-prettyprinting:
     Placeholder(_, sort(sort), _, _) -> sort
 
 rules
 
-  // Single line template with only Layout and String elements.
+ // Single line template with only Layout and String elements.
   template-to-prettyprint-strategy:
     TemplateProduction(sort, SingleLineTemplate(elem*), attrs) ->
     $[prettyprint-[sort]:
@@ -104,13 +113,14 @@
           [<template-element-to-prettyprint> p{"a"}]]
     where
       < ?SingleLineTemplate([p @ Placeholder(_, _, _, _)])
-      + ?Template([Line([Layout(_), p @ Placeholder(_, _, _, _)])]) > template
-    with
-      if cons := <fetch-cons-name> attrs then
-        input := $[[cons](a)]
-      else
-        input := "a"
-      end
+      + ?Template([Line([Layout(_), p @ Placeholder(_, _, _, _)])]) > template;
+    	with-spxverify(
+	      if cons := <fetch-cons-name> attrs then
+	        input := $[[cons](a)]
+	      else
+	        input := "a"
+	      end
+      )
 
   template-to-prettyprint-strategy:
     TemplateProduction(sort, SingleLineTemplate(elem*), attrs) ->
@@ -121,12 +131,14 @@
     where
       not(<map(?Layout(_) + ?String(_))> elem*);
       not(!elem* => [Placeholder(_, _, _, _)])
-    with
-      (elem'*, _)    := <thread-map(try(rename-template-element))> (elem*, 0);
-      elem''*        := <map(template-element-to-stratego)> elem'*;
-      arg*           := <filter(template-element-to-cons-arg)> elem'*;
-      let*           := <filter(template-element-to-prettyprint)> elem'*;
-      (input, let'*) := <template-common> (let*, elem''*, attrs, arg*)
+    where 
+    	with-spxverify(
+	      (elem'*, _)    := <thread-map(try(rename-template-element))> (elem*, 0);
+	      elem''*        := <map(template-element-to-stratego)> elem'*;
+	      arg*           := <filter(template-element-to-cons-arg)> elem'*;
+	      let*           := <filter(template-element-to-prettyprint)> elem'*;
+	      (input, let'*) := <template-common> (let*, elem''*, attrs, arg*)
+      )
 
   template-to-prettyprint-strategy:
     TemplateProduction(sort, Template(line*), attrs) ->
@@ -134,12 +146,13 @@
         [input] -> zz
         where
           [let'*]]
-    with
+    where with-spxverify(
       (line'*, _)    := <thread-map(rename-template-line)> (line*, 0);
       (line''*, _)   := <thread-map(template-line-to-stratego)> (line'*, 0);
       arg*           := <mapconcat(template-line-to-cons-arg)> line'*;
       let*           := <mapconcat(template-line-to-prettyprint)> line'*;
       (input, let'*) := <template-common> (let*, <concat> line''*, attrs, arg*)
+    )
 
   template-common:
     (let*, elem*, attrs, arg*) -> (input, let'*)
@@ -188,14 +201,16 @@
 
   rename-template-line:
     (Line(elem*), index) -> (Line(elem'*), index')
-    with
+    where with-spxverify(
       (elem'*, index') := <thread-map(try(rename-template-element))> (elem*, index)
+    )
 
   rename-template-element:
     (Placeholder(a, b, c, d), index) -> (Placeholder(a, b, c, d){name'}, index')
-    with
+    where with-spxverify(
       name'  := <implode-string> [<addi> ('a', index)];
       index' := <inc> index
+    )
 
 rules
 
@@ -250,12 +265,13 @@
 
   template-element-to-prettyprint:
     Placeholder(_, sort(x), <Star() + Plus()>, Options(opt*)){name} -> t
-    with
+    where with-spxverify(
       if sep := <getfirst(?Separator(<id>))> opt* then
         t := $[[name]' := <pp-list(prettyprint-[x]|"[<templatelang-escape> sep]")> [name]]
       else
         t := $[[name]' := <pp-list(prettyprint-[x]|" ")> [name]]
       end
+   )   
 
   template-element-to-prettyprint:
     Placeholder(_, sort(x), Option(), _){name} -> $[[name]' := <pp-option(prettyprint-[x])> [name]]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -16,20 +16,34 @@
 imports 
 	utils/debug
 	utils/path
+	utils/contract
+	codegen/main
+	codegen/compile
+	context/symboltable
 	config
 	editor/main
 
+
+rules 
+  //several events regarding the current compiler session. 
+  with-spxverify(s) = with-verify( s ,  compile-unload <+ fail)  
+  
+  //with-spxverify(s, get-msg) = with-verify( s ,compile-unload<+ fail|msg )
+  
+  with-spxverify(s , msg) = with-verify( s ,(compile-unload <+ fail) ,  msg)
 	
 rules 
 	get-project-path = (ProjectPath <+ project-path)
 
+	get-project-name = get-project-path ;  base-filename
+	
 	package-qname-to-string : Package(untyped-qname) ->  <convert-qname(|".");string-replace(|"-", ".")> 	untyped-qname
 	
 strategies 
-	//pretty printing aterm 
-	pp-aterm = disable-pp-aterm < !"N/A" + pp-aterm-forced
 	
-	pp-aterm-forced = pp-aterm-box ; box2text-string(|100)
+	ppterm = pp-aterm-box ; box2text-string(|100)
+
+	print-as-string = is-string <+ write-to-string
 
 strategies
 	/*internal*/ require(s) = not(s)
@@ -37,133 +51,19 @@
 strategies 
 	
 	//After ensuring result is unique i.e. list contains only one element, it returns the unique result
-	ensure-is-unique = ?[<id>] <+ where(<debug-symboltable>$[SymbolTable| Failed to resolve unique declaration.]);fail
+	ensure-is-unique = ?[<id>] <+ dbg-symboltable(!$[SymbolTable| Failed to resolve unique declaration.] | "ensure-is-unique" , "Info");fail
 	
 	// Verifies that the current term is not a empty list 
 	is-not-empty-list = ?[_|_] 
 	
-			
-rules
- 	
- 	/**
- 	* Creates a namespace reference table. It stores following in the reference table . 
- 	* key : (package-name , concept-name) | value : def
- 	*
- 	*	@type a -> a 
- 	*/
- 	store-definition(|resolved-path): 
-			def at definition -> def
-			with
-				(package-name, package-gen-relative-path)  := 	<find-spoofax-module-name-string>(resolved-path, def)
-				;concept-name := <base-filename>package-name //TODO : get concept-name 
-			with 
-				if not(<is-declared>(package-name, concept-name)) then 
-					rules
-					( 
-							DeclaredConcept :+ (package-name, concept-name ) -> def
-							FilePath-of-DeclaredConcept:+ (package-name, concept-name ) -> resolved-path //TODO: not sure yet whether we need it.
-							Package-Gen-Root-of-DeclaredConcept:+(package-name, concept-name )  -> package-gen-relative-path
-					)
-					  
-					;<debug>$[SymbolTable|Storing following declaration - DeclaredConcept : ([package-name],[concept-name]) -> [<pp-aterm>def]]
-				else
-					<debug>$[ SymbolTable|Already exists in the namespace table : ([package-name],[concept-name])]	
-				end 
-	
-	is-declared = get-declarations ; ?[_|_]
-	
-	get-declarations = ?(namespace, conceptname);bagof-DeclaredConcept
-	
-	get-unique-declaration = get-declarations; ?[<id>]
-	  
-	get-declarations-by-namespace= ?namespace ; get-all-declared-entries ; filter(?(namespace, _)); mapconcat(bagof-DeclaredConcept)
-	
-	get-all-declared-entries = all-keys-DeclaredConcept ; filter(?(_,_))
-	
-	get-all-declared-entries-by-namespace = ?namespace ; all-keys-DeclaredConcept ; filter(?(namespace,_))
-	
-	get-all-declared-concept = get-all-declared-entries ; filter(?(namespace, _)); mapconcat(bagof-DeclaredConcept)
-	
-	map-declarations(declaration-adapter): 
-		list* -> result
-		where 
-			result :=<map(project-declaration(declaration-adapter))>list*
-				
-	project-declaration(declaration-adapter):
-		n@(namespace, conceptname) -> result
- 		where 
-		 	concept := <get-unique-declaration> n
-		  ;result := <declaration-adapter>(namespace,conceptname , concept)  
-		
-	project-allkeys-declared(adapter): 
-		list* -> result
-		where 
-			result :=<map(project-key-declared(adapter))>list*
-	
-	project-key-declared (key-adapter):
-		n@(namespace, conceptname) -> result
- 		where 
-		  result := <key-adapter>(namespace,conceptname)  
-	
-rules 
-	
-	find-spoofax-module-name:
-    (path, def) -> name
-   	 with
-   	 		Module(name, _) := def
- 	 		<+
-   	 		if not(!path => "") then
-      		name := <remove-extension> <base-filename> path
-    		end
-  
-  
-  //TODO : improve its performance by adding caching  		
- 	find-spoofax-module-name-string: 
-		(path,def) ->(package-name, relative-autogen-path)
-	  with
-				name := <find-spoofax-module-name> (path,def);
-	      if !name => ParamName(n, p) then
-	      	name' := parameterized(n, p)
-      	else
-   				(Name(name') := name) 
-	      	<+ 
-     			(name' := name) 
-  	    end;
-  	  	modname-part* := <string-tokenize> (['/'], name');
-  	 		if <eq>(<length>modname-part* , 1) then
-  	 		 		package-name  := name';
-  	 		 		relative-autogen-path := ""
-  	 		else
-  	 		 	 package-name   := <last>modname-part*;
-  	 		 	 relative-autogen-path := <dirname>name'  
-  	 		end
-
-rules	
-  get-qualified-spxmodulename: 
-  	(namespace-name,module-name) -> result
-		where
-			result := namespace-name//TODO : when there is a concept-name added in spx , result will be package-name/conceptname 
-  
-  //TODO : remove followind temp fix  
-  get-qualified-importpath: 
-  	(package-name,module-name) -> result
-	where
-		autogen-dir := <Package-Gen-Root-of-DeclaredConcept>(package-name,module-name)
-		;<append-if-not-empty(|autogen-dir , "/")>package-name => result //TODO : when there is a module-name added in spx , result will be package-name/conceptname
-	
- 
-  
-  get-fullyqualified-autogen-path(|extension): 
-  	(project-path, base-dir,spx-modulename) -> $[[project-path]/[base-dir]/[spx-modulename].[extension]]  
- 
 rules 
 	save-to-file:(fileName, fileContent) -> None()  
   	where
     	not(<eq>("", fileContent))
     where
-    	<debug-compiler> $[Writing to the following file : [fileName] the following content: 
-      							[fileContent] 
-    	]
+    	dbg-compiler(!$[Writing to the following file : [fileName] the following content: 
+      							[<print-as-string>fileContent] 
+    	])
     with
     	filedescr := <fopen> (fileName, "w+")
       ;<fputs>(fileContent , filedescr)
@@ -184,7 +84,7 @@
 	new-scope(s) :
 		x -> y
 		where 
-			<debug-compiler> $[Entering scope [<pp-aterm> x].]
+			dbg-compiler(!$[Entering scope [<print-as-string> x].])
 		where
 			<newname> x => scope ;
 			{| Renamed, RenamedInScope, CurrentScope:
@@ -192,7 +92,7 @@
 				<s> x => y
 			|} 
 		where 
-			<debug-compiler> $[Leaving scope [<pp-aterm> x].]
+			dbg-compiler(!$[Leaving scope [<print-as-string> x].])
 			
 	/**
 	* annotates the current term with a fresh name
@@ -218,7 +118,7 @@
 			Renamed: (namespace, x) -> x'
 		)
 		where 
-			<debug-compiler> $[Renamed declaration [<pp-aterm> x] to [<pp-aterm> x'] in namespace [<pp-aterm> namespace].]
+			dbg-compiler(!$[Renamed declaration [<print-as-string> x] to [<print-as-string> x'] in namespace [<print-as-string> namespace].])
 	
 	/**
 	* annotates the current term with a new name
@@ -233,6 +133,6 @@
 		where
 			<Renamed> (namespace, x) => x'
 		where 
-			<debug-compiler> $[Renamed reference [<pp-aterm> x] to [<pp-aterm> x'] in namespace [<pp-aterm> namespace].]
+			dbg-compiler(!$[Renamed reference [<print-as-string> x] to [<print-as-string> x'] in namespace [<print-as-string> namespace].])
 
  			 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/config.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -15,7 +15,23 @@
 	normalize/signatures
 	context/signatures
 	include/SpoofaxLang
+	utils/path
+	context/scope-tree
 	
+signature constructors 
+	ConfigFlag : Flag 
+	
+	EnableCommandLineConfig : ConfigFlag 
+	
+	IgnoredSpxSourceConfig : ConfigFlag
+	
+	SpxSourceConfig : ConfigFlag
+	
+	AutogenDirConfig : ConfigFlag
+	
+	StrOutputStrategyConfig : ConfigFlag
+	
+	TemplateLangOptionConfig : ConfigFlag
 	
 rules 
 	default_package_name = !"__default"
@@ -31,130 +47,107 @@
 	internal_module_name_string = !"__internal"
 	
 	get-known-legacy-extensions = !["sdf" , "def" , "str" , "rtree"] 
-		
+	
+	
+	
 rules 
 	
 	fallback-configuration = 
 		!Configuration(
 		  [ Includes([Source(<root_directory> , All())])
 		  , CodeGeneration([OutputDirectory(<default_output_directory>),STROutputMode(<default_stroutput_strategy>)])
+		  , Debug([DebugNone()])  
+		  , SpxProjects([])
+		  , TemplateLang(TemplatelangEnabled())    
 		  ]
 		)	
 	
-	initialize-configuration = 
-		?current-term 
-		;(
-		 	<parse-spoofaxconfiguration-file
-	 	<+
-	 		<debug>$[Failed to Load Configuration.Loading Default Configuration. Please check spx.config]; fallback-configuration>"spx.config" => config-aterms
-	 	)
-	 	;normalize-config
-		;init-output-directory
-		;init-source-directory
-		;init-str-output-strategy     		
-		;<init-ignored-directories>[".svn"]
-		;enable-caching
-		;enable-lib-cache-invalidation
-		;enable-pretty-printing
-		;enable-command-line-mode  
-		;disable-command-line-mode       
-		;disable-caching
-		;disable-pretty-printing 
-		    
-		;!current-term
-
+	initialize-configuration =
+		where( 
+			parse-spoofaxconfiguration-file
+			; normalize-config
+			; init-output-directory
+			; init-source-directory
+			; init-str-output-strategy     		
+			; set-debug-options
+			; set-templatelang-options  
+			; <init-ignored-directories>[".svn"]
+		  )
+		
 	//TODO  Refactor : Resuse <show-configuration>()
 	show-configuration: 
 		(selected, position, ast, path, project-path) -> (filename, result)
-		with 
+		with
 			editor-init;
 			initialize-configuration 		
 		where 
-			if Enable-Caching then 
-				enabled-caching-string := "Caching of Semantic Errors is Enabled"  
-			else
-				enabled-caching-string := "Caching of Semantic Errors is Disabled"
-			end
-		where
 			filename := <guarantee-extension(|"config.resolved")> path;
 			result := $[ Spoofax-lang|Configuration  - [project-path]/spx.config
 		
 			Resolved Source Directories:  
-				[<pp-aterm><bagof-SPX-Source-Dir>]
+				[<print-as-string><get-all-declared-by-type(|SpxSourceConfig())>] 
 			
 			Ignored Subdirectories : 
-				[<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]
+				[<print-as-string><get-all-declared-by-type(|IgnoredSpxSourceConfig())>]
+			
+			Output Directory : [<print-as-string><get-all-declared-by-type(|AutogenDirConfig())>]
+		
+			STR Output Strategy: [<print-as-string><get-all-declared-by-type(|StrOutputStrategyConfig())>]
 			
-			Output Directory : [<pp-aterm><Autogenerated-Artifacts-Dir>]
+			Debug Options : [<print-as-string> <get-debug-options>]
 			
-			STR Output Strategy: [<pp-aterm><STROutputStrategy>]
+			TemplateLang enable/disabled Option: [<print-as-string><get-declared(|TemplateLangOptionConfig())><get-constructor>TemplateLangOptionConfig() ]
 			
-			[enabled-caching-string] 
-					
 			]
 	//TODO Refactor 					
 	show-configuration : ()-> result
-	where 
-		if Enable-Caching then 
-			enabled-caching-string := "Caching of Semantic Errors is Enabled"  
-		else
-			enabled-caching-string := "Caching of Semantic Errors is Disabled"
-		end
 	where
 		result := $[ Spoofax-lang|Configuration  - [<getcwd>]/spx.config
 	
 		Resolved Source Directories:  
-			[<pp-aterm><bagof-SPX-Source-Dir>]
+			[<print-as-string><get-all-spx-sources>]
 		
 		Ignored Subdirectories : 
-			[<pp-aterm><all-keys-Ignored-Spx-Souce-Dir>]
+			[<print-as-string><get-all-declared-by-type(|IgnoredSpxSourceConfig())>]
 		
-		Output Directory : [<pp-aterm><Autogenerated-Artifacts-Dir>]
+		Output Directory : [<print-as-string><get-all-declared-by-type(|AutogenDirConfig())>]
 		
-		STR Output Strategy: [<pp-aterm><STROutputStrategy>]
+		STR Output Strategy: [<print-as-string><get-all-declared-by-type(|StrOutputStrategyConfig())>]
 		
-		[enabled-caching-string] 
-				
-		] 
-rules		
-	// enables library cache invalidation 
-	enable-lib-cache-invalidation = with( rules(invalidate-lib-cache: _ ) )
+		TemplateLang enable/disabled Option: [<print-as-string> <get-templatelang-enable-or-disable-option>]
+	]
+	 
+rules
+	get-all-spx-sources =  get-all-declared-by-type(|SpxSourceConfig())  ; (not(?[]) <+ get-project-path) 	
 	
-	disable-lib-cache-invalidation = with( rules(invalidate-lib-cache:- _ ) )
 rules	
 	//enable command line mode
-	enable-command-line-mode =  with (rules(Enable-CommandLine-Mode : _ ))
-	
-	disable-command-line-mode = with(rules(Enable-CommandLine-Mode:- _ ))
-	
-	is-in-command-line-mode = where ( Enable-CommandLine-Mode )
+	// EnableCommandLineConfig
+	enable-command-line-mode =  where(<store-declared(|EnableCommandLineConfig())>("commandline" ,"commandline")) 
 	
-rules	
-	//enable caching 
-	enable-caching =  with (rules(Enable-Caching : _ ))
-	
-	disable-caching = with(rules(Enable-Caching :- _ ))
+	disable-command-line-mode = where(<undef-declared(|EnableCommandLineConfig())>"commandline") 
 	
-rules	
-	// enable pp-aterm
-	enable-pretty-printing = with (rules(disable-pp-aterm : _ ))
-	 
-	disable-pretty-printing = with (rules(disable-pp-aterm :- _ ))
-		
+	is-in-command-line-mode = where (<get-declared(|EnableCommandLineConfig())>"commandline" )
+
 rules	
 	init-ignored-directories : [] -> [] 
 	
-	init-ignored-directories: [current-dir | rest] ->[current-dir | <init-ignored-directories>rest]    
+	init-ignored-directories: 
+		[current-dir | rest] ->[current-dir | <init-ignored-directories>rest]    
 		where
-			not(?[])
-		where
-			rules(Ignored-Spx-Souce-Dir :+ current-dir -> current-dir) 	
-	
+			<store-declared(|IgnoredSpxSourceConfig())>(current-dir ,current-dir)
 	
-	init-output-directory : config-aterm -> config-aterm 
-	where
-  	 (get-code-output-directory <+ default_output_directory); 
-  	 setup-autogen-root-directory  			
+	is-ignored-spx-directory  = get-declared(|IgnoredSpxSourceConfig()) 
+			
+	init-output-directory : 
+		config-aterm -> config-aterm 
+		where
+  	  	(
+	  	  	get-code-output-directory 
+	  	 		<+ 
+	  	 		default_output_directory
+  	 		)
+  	 		; setup-autogen-root-directory  			
 	
 	
 	init-str-output-strategy : 
@@ -164,10 +157,11 @@
 			setup-str-output-strategy
 			
 	//intializes the source directories . Compiler will only consider this directory as a valid spx sources .
-	init-source-directory : config-aterm -> config-aterm 
-	where 
-		get-all-includes ; 
-		setup-source-directories			
+	init-source-directory : 
+		config-aterm -> config-aterm 
+		where 
+			get-all-includes ; 
+			setup-source-directories			
 
 
 	override-configured-source-directories : localsoucedir -> localsoucedir
@@ -175,45 +169,66 @@
 		remove-existing-configuration-sourcedirs;
 		<setup-source-directories>[(localsoucedir,All())]
 	
-	remove-existing-configuration-sourcedirs= with( rules(	SPX-Source-Dir :- _)) // removing all the configured source directory 
+	setup-source-directories: [] -> []	 
+	setup-source-directories: 
+		[configured-directory-setting|rest*] -> [configured-directory-setting|<setup-source-directories>rest*]  
+		where 
+			<store-declared(|SpxSourceConfig())>(configured-directory-setting,configured-directory-setting)
+
 
+	 
+	remove-existing-configuration-sourcedirs=  where(<undef-declared(|SpxSourceConfig())>()) // removing all the configured source directory 
 
 rules
 	setup-str-output-strategy = 
 		?stroutputstrategy;
-		with 
-		(
-			rules(
-				STROutputStrategy := stroutputstrategy
-			) 
-		)
-			
+		where(
+			<store-declared(|StrOutputStrategyConfig())> ( stroutputstrategy , stroutputstrategy)
+		) 
+	
+	
+	get-str-output-strategy = get-all-declared-by-type(|StrOutputStrategyConfig())  ; ?[<id>|_] <+ default_stroutput_strategy
+				
+	get-autogenerated-artifacts-dir =
+    if not(autogen-dir) then (   
+        get-all-declared-by-type(|AutogenDirConfig()) 
+        ; ?[autogen-directory-name|_]
+    <+ 
+        autogen-directory-name := <default_output_directory>
+        )
+        ; rules(autogen-dir := autogen-directory-name)
+    end	 
+    ; autogen-dir 
+		
 	setup-autogen-root-directory = 
 		?codegen-output-dir;
-		with(
-				rules(
-					Autogenerated-Artifacts-Dir := codegen-output-dir
-				)
+		where(
+				<store-declared(|AutogenDirConfig())> ( codegen-output-dir, codegen-output-dir)
 		) 
 
-	setup-source-directories: [] -> []	 
-	setup-source-directories: 
-		[configured-directory-setting|rest*] -> [configured-directory-setting|<setup-source-directories>rest*]  
-		where 
-			not(?[])
-		where 
-			rules(
-				SPX-Source-Dir :+ _ -> configured-directory-setting
-			)
-				  			 	
-		
+				
 rules  
 	
 	parse-spoofaxconfiguration-file =
-    parse-file(
-      strsglr-perror, strsglr-report-parse-error
-    | <import-term(lib/Configuration/SpoofaxConfiguration.tbl)>
-    )
+		config-path := "spx.config";
+		config-full-path := <concat-strings>[<get-project-path>, "//" , config-path];
+		cache-path := <spx-cache-path(|"sig")>config-full-path;
+		if <is-newer> (cache-path, config-full-path) then 
+			 config-ast := <ReadFromFile> cache-path
+		else
+		  !config-full-path;
+		  parse-file(
+	      strsglr-perror, strsglr-report-parse-error
+	    | <import-term(lib/Configuration/SpoofaxConfiguration.tbl)>
+	    )
+	    ; ?config-ast
+	    ; <WriteToBinaryFile> (cache-path, config-ast)
+	  end ;
+	  ! config-ast
+	<+
+		<debug>$[Failed to Load Configuration.Loading Default Configuration. Please check spx.config]
+		; fallback-configuration
+	  
 	
 	//Returns output directory for the code generation
 	get-code-output-directory = collect-one(?OutputDirectory(<id>))
@@ -221,57 +236,51 @@
 	get-str-output-mode = collect-one(?STROutputMode(<id>))
 
 	// Returns all the resolved directories 	
-	get-all-includes  = 
- 	<conc>(
- 		<get-all-sources(|<get-project-path>)> ,   
- 		<get-sources-from-external-projects> 
-	)
- 	;make-set
+	get-all-includes= 
+		?config-ast
+	 	; <conc>(
+		 		<get-all-sources(|<get-project-path>)> config-ast,   
+		 		<get-sources-from-external-projects>config-ast
+	 		)
+	 	; make-set
  
  
 	convert-abs-path(|project-path) : 
 		(s, o) -> (s' , o)
 		where
-		 if root_directory => s  then
+		 if !s => <root_directory>()   then
 		 		s' := $[[project-path]] 
 		 else
 		 		s' := $[[project-path]/[s]]
 		 end
 	
-	
 	get-all-sources(|project-path) =
  		collect-all(?Source(_, _));
  		get-local-sources;
  		map(convert-abs-path(|project-path))
  	<+ 
-		debug(!"Failed to get list of source directory.") ; fail
+		debug(!"Failed to get list of source directory.") 
+		; fail
  
 	get-local-sources: [] -> []
  
 	get-local-sources: 
  	[Source(dir , include-option)|rest] -> result
- 	with
- 		![(dir,include-option)] => result';
- 		<conc>(<get-local-sources>rest, result') => result	 	
- 			 	
-	get-local-sources: 
- 	[Source(dir , include-option)|rest] -> result
- 	with
+ 	where
  		![(dir,include-option)] => result';
  		<conc>(<get-local-sources>rest, result') => result	 	
- 	
- 
+ 		
 rules 
  	
- 	// Resolving project References 
+  	// Resolving project References 
 	get-sources-from-external-projects = 
   	get-all-project-refernces; 
-		if  ?[_|_]  then
+  	if  ?[_|_]  then
   		get-external-sources
-  	end
-  	
-  	// Returns all the external sournce collected from the project references 
- 		get-external-sources: spx-projects* -> result
+		end
+		
+	// Returns all the external sournce collected from the project references 
+ 	get-external-sources: spx-projects* -> result
 		where 
 			not (?[])
 	  	;!spx-projects* => [current-project-path|rest*]
@@ -281,9 +290,11 @@
 	 		end
 	 		;result := <conc>( ref , <get-external-sources>rest* )
 	 	
-		get-external-sources: []  -> []
+	get-external-sources: []  -> []
 	 
- 	// Resolves External Project Refernces and returns the directories configured in that configuration file
+	 
+	
+	// Resolves External Project Refernces and returns the directories configured in that configuration file
 	// Transitive imports/inclusion is not allowed. If a->b , b->c != a->c
 	resolve-external-sources =
 		 // not started wtih  ..
@@ -295,7 +306,7 @@
   	fail-if-no-config-found;   
   	<parse-spoofaxconfiguration-file>$[[current-project-path]/spx.config];
   	get-all-sources(|current-project-path)
-  	
+	
 	  	
 	resolve-external-sources =
 		?current-project-path;
@@ -315,9 +326,43 @@
 	  	<+
 	  		<chdir>current-dir  
 		)
-
 	
- 
+	get-templatelang-enable-or-disable-option = 
+		  collect-all(?TemplateLang(<id>), conc) 
+		;	flatten-list 
+	 	; if ?[] then 
+	 	  	 ![TemplatelangEnabled()]
+	 	  end	 
+ 	
+	set-templatelang-options =
+		get-templatelang-enable-or-disable-option; 
+		?[<id>|_] ;  
+		<store-declared(|TemplateLangOptionConfig())>(<get-constructor>TemplateLangOptionConfig() ,<id>) 
+	
+	templatelang-enabled = <get-declared(|TemplateLangOptionConfig())><get-constructor>TemplateLangOptionConfig() ;  ?TemplatelangEnabled() 	
+ 	
+ 	get-debug-options = collect-all(?Debug(<id>), conc) ;	flatten-list
+	 	
+	set-debug-options =
+		where(
+			get-debug-options;  
+			if not(id => []) then
+				list-loop(set-debug-option)
+			end	 
+		)
+	
+	set-debug-option : dbg-option -> <id>
+		where
+			switch !dbg-option
+				case ?DebugCompiler()    : enable-compiler-debugging
+				case ?DebugDeclaration() : enable-declaration-debugging
+				case ?DebugSymbolTable() : enable-symboltable-debugging
+				case ?DebugAnalysis()    : enable-semantic-analysis-debugging
+				case ?DebugAll()         : enable-debug-all
+				otherwise : id
+			end 
+	
+	
 	get-all-project-refernces = 
   	collect-all(?SpxProjects(<id>), conc) ; 
   	flatten-list;
@@ -325,9 +370,6 @@
   <+ 
   	debug(!"Failed to retrieve list of projects.");
   	fail 
-  			
-rules 
-
 	// Utility strategies  
 		// verifies whether current directory exists 
 	fail-if-no-directory-found  = is-dir-exist   <+ throw-directory-not-found-exception(fail) 
@@ -338,7 +380,8 @@
 	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
 	
 	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy
-	
+
+rules	
 	
 	// verifies whether current directory exists 
 	verify-directory-exists  = is-dir-exist   <+ throw-directory-not-found-exception(fail) 
@@ -350,16 +393,13 @@
 	
 	is-dir-exist =  where(file-exists ; filemode ; isdir)
 
-	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
+rules
 	
-	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy
-	   	 		 		
-rules 
 	normalize-config: ast -> <alltd(normalized-spxproject-reference)>ast 
 		
 	normalized-spxproject-reference: 
 		SpxProjects(projectrefs*) -> SpxProjects(result) 
-		with
+		where
 			result := <map(annotate-project-location)>projectrefs*
 			
 			
@@ -372,4 +412,4 @@
 				projectlocation := ""
 			end;
 			annotatedProjectName := projectname{projectlocation}
-				
\ No newline at end of file
+					

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -17,62 +17,49 @@
 	utils/contract
 	config
 	common
+	codegen/main
 
-rules
-	declare-spx-global-symbols =
-		contracts(
-			contract-requires(
-				?Package(QName(_))
-			)
-		);
-		get-enclosed-modules;
-		list-loop(
-			{|GetEnclosingModuleName:
-					declare-current-module-scope;
-					get-module-declaration;
-					declare-internal(declare-global-symbols-main)
-			|}	
-		)
-
-	
-	delcare-spx-scoped-symbols =  
-		declare-internal(declare-local-symbols-main)
-	
-	declare-local-symbols-main = 
-		declare-spxmodules-all(declare-local-symbols); 
-		update-modified-module-declaration
-
-	declare-global-symbols-main = 
-		declare-spxmodules-all(declare-global-symbols) ;  
-		update-modified-module-declaration
-
-	declare-internal(s) = 
-		origin-track-forced(s)
+rules 
 	
-	init-declaration = 
-		init-record-signatures ; 
+	init-declarations = 
+		init-record-signatures;
 		init-template-options
-
-
+    
 rules
-
+  declare-spx-global-symbols =
+  		list-loop(
+				{| GetEnclosingModuleName
+				 : 	declare-current-module-scope
+				 		; with-spxverify(
+								get-desugared-module-ast
+								; declare-internal( declare-spxmodules-all( declare-global-symbols))
+						  )
+				|}	
+		  )
+	
+	delcare-spx-scoped-symbols = declare-internal( declare-spxmodules-all(declare-local-symbols))
+	
+	declare-internal(declare-symbols) =  
+			origin-track-forced(declare-symbols) => annotated-moduleDef
+		  ; !annotated-moduleDef => Module(attrb* , modname , section*)  // updating module definitions
+		  ; with-spxverify(
+					 <get-annotation(get-package-annotation)>modname => Package( package-qname)
+				  ; mId := <get-module-typed-qname>(package-qname, modname)
+			  	; <index-update-existing-module-definition>(mId  ,  annotated-moduleDef)
+	    )  
+	
+rules 
 	declare-spxmodules-all(s):
 		Module(attrb* , modname , section*) -> Module(attrb* , modname , m-sections*)
 		where
 			<alltd(s)>section* => m-sections*
 
-	update-modified-module-declaration:
-		m at Module(attrb* , modname , section*) -> m
-		with
-				Package( package-qname) := <get-annotation(get-package-annotation)>modname
-		with
-			<store-declaration(|Modules())>(<get-module-untyped-qname>(package-qname, modname),  m)
-
-rules
+	
 	declare-local-symbols:
 		SDFSection(definition*) -> SDFSection(declared-definition*)
 		where
-			declared-definition* := <declare-sdf-definition-main>definition*
+			<declare-sdf-definition-main>definition* => declared-definition*  
+				 
 
 	declare-local-symbols:
 		SDFSectionEH(_,definition*) -><declare-local-symbols>SDFSection(definition*)
@@ -80,22 +67,23 @@
 	declare-local-symbols:
 	  STRSection(def*) -> STRSection(m-definition*)
     where
-      m-definition* := <declare-str-definition-main>def*
-
+    	<declare-str-local-definition-main>def* => m-definition*
+       
+      
   declare-local-symbols: ESVSection(def*) -> <id>
 
   // TemplateLang
   declare-local-symbols:
     TemplateSection(definition*) -> TemplateSection(declared-definition*)
     with
-      declared-definition* := <declare-template-definition-main> definition*
+     <declare-template-definition-main> definition* => declared-definition* 
 
   // TemplateLang
   // FIXME: move to spoofax.configuration?
   declare-local-symbols:
   	TemplateOptions(option*) -> TemplateOptions(declared-option*)
   	with
-  	  declared-option* := <declare-template-options-main> option*
+  	  <declare-template-options-main> option* => declared-option* 
 
 rules
 
@@ -106,10 +94,18 @@
 	declare-global-symbols: s at STRSection(def*) -> STRSection(m-definition*)
 	where
 		m-definition* := <declare-stratego-globals-top>def*
-
-	declare-global-symbols: ESVSection(def*) -> ESVSection(declared-definition*)
-	where 
-		declared-definition* := <declare-esv-globals-top>def*
+	
+	
+	declare-global-symbols: 
+		ESVSection(def*) -> ESVSection(declared-definition*)
+		where 
+			declared-definition* := <declare-esv-globals-top>def*;
+			current-package-name := <GetEnclosingPackageName>;
+			with-spxverify(
+				//storing esv section
+				<index-symbol-definition>(current-package-name, ESVSection() ,  declared-definition*)
+				, !$[Failed to index esv section of [current-package-name]] 
+			) 
 	
   // TemplateLang
   declare-global-symbols: TemplateSection(def*) -> <id>
@@ -121,29 +117,42 @@
 
 	// Declaring current scope for further analyze
 	declare-current-scope(| package-typed-qname , module-typed-qname)=
-		with(
-			<declare-current-package-scope>package-typed-qname;
-			<declare-current-module-scope>module-typed-qname
-		)
+		with-spxverify(
+		    <declare-current-package-scope>package-typed-qname
+		   ;<declare-current-module-scope>module-typed-qname 
+    )
 
 	declare-current-package-scope :
 		package-typed-qname -> <id>
-		with
-			rules ( GetEnclosingPackageName      := package-typed-qname)
+		where
+      with-spxverify(
+        rules(GetEnclosingPackageName := package-typed-qname )
+        , !"Failed to declare-current-package-scope"
+      )
 
 	declare-current-module-scope:
 			module-typed-qname -> <id>
-			with
-				rules ( GetEnclosingModuleName      := module-typed-qname)
+			where
+				with-spxverify(
+			 		rules( GetEnclosingModuleName := module-typed-qname)   
+					, !"Failed to declare-current-module-scope"
+				) 
+			
 
 rules
+	declare-legacy-artifact(|resolved-path) : 
+		legacy-content -> legacy-content
+		where
+		   < has-extension(|"sdf") 
+			 + has-extension(|"def")
+			 > resolved-path
+		   ; <alltd(
+		   	   declare-sdf-definition-main) >legacy-content
 
-	declare-legacy-artifact(|resolved-path) : legacy-content -> legacy-content
-	where
-		<has-extension(|"sdf") + has-extension(|"def")>resolved-path;
-		<alltd(declare-sdf-definition-main)>legacy-content
-
-	declare-legacy-artifact(|resolved-path) : legacy-content -> legacy-content
-	where
-		<has-extension(|"str") + has-extension(|"rtree")>resolved-path;
-		<alltd(declare-str-definition-main)>legacy-content
+	declare-legacy-artifact(|resolved-path) : 
+		legacy-content -> legacy-content
+		where
+			 < has-extension(|"str") 
+			 + has-extension(|"rtree")
+			 > resolved-path
+		   ; <declare-legacy-str-imports> legacy-content
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/esv/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/esv/declare.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/esv/declare.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -7,35 +7,95 @@
 	utils/debug
 	utils/path
 	common
+	utils/contract
+	normalize/signatures
 
 rules 
-	resolve-sdf-sort-declaration = 
- 		?symbol; 
- 		<resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol 
- 	<+
- 		<debug-analysis> $[ErrorChecking|Failed to retrive SDF Sort for symbol [<pp-aterm>]];
- 		fail
 
+  verify-sdf-sort-declaration-exists =
+  	<verify-symbol-exists> (<id>,SortDeclaration())
+  <+
+    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive Sort declaration for symbol [<print-as-string>]] | "resolve-sdf-sort-declaration" ,<debug-level-WARNING>); 
+    fail
 
 rules
 	declare-esv-globals-top = 
-		alltd(declare-esv-definition);
-		if <not(get-language-id)>  <GetEnclosingPackageName> then
-			<declare-esv-definition>LanguageId(<package-qname-to-string> <GetEnclosingPackageName>)   
-		end
-			 
+		alltd(declare-esv-definition)
 		
 	declare-esv-definition : 
 		LanguageName(name)  -> <id>
-		with 
-			store-langauge-properties(|<GetEnclosingPackageName>)
-	 
+		where
+			with-spxverify( 
+				store-langauge-properties(|<GetEnclosingModuleName>)
+	 		)
+	 		
 	declare-esv-definition : 
 		LanguageId(id-string)  -> <id>
-		with 
-			store-langauge-properties(|<GetEnclosingPackageName>)
+		where
+			with-spxverify( 
+				store-langauge-properties(|<GetEnclosingModuleName>)
+			)
 	 
 	declare-esv-definition : 
 		StartSymbols(sorts*)  -> <id>
-		with 
-			store-context-free-start-symbols(|<GetEnclosingPackageName>)
+		where with-spxverify(
+			store-context-free-start-symbols(|<GetEnclosingModuleName>)
+		)
+
+signature constructors 
+
+	LanguageDefinition : Type
+
+rules
+			
+	store-language-definition = verify((?Module(QName(_)) ,?LanguageDescriptor(_,_,_,_,_))|<id>  , "(Module(QName(_)) ,LanguageDescriptor(_,_,_,_,_)) @store-language-definition") ;    store-declared(|LanguageDefinition())
+
+	get-declared-language-definition = verify(?Module(QName(_)) | <id> , "Module(QName(_))  @get-declared-language-definition") ; get-declared(| LanguageDefinition()) 
+	
+	get-existing-langauge-descriptor  = verify(?Module(QName(_)) | <id> , "Module(QName(_))  @get-existing-langauge-descriptor") ;  get-declared-language-definition <+ !LanguageDescriptor( <id>, [] , [], [], [] )
+	  
+	// Stores langauge name. It keeps mapping of package name and its defined language-names.
+	// extended dynamic rules are used to verify that language name is not declare multple times 
+	// in a package scope. Additional checks will be added to verify a language-name is unique 
+	// in a project scope. 
+	store-langauge-properties(|module-typed-qname) : 
+		LanguageName(name) -> <id>
+		where
+			verify(?Module(QName(_))| module-typed-qname , "Module(QName(_)) @store-langauge-properties") 
+		  ; <get-existing-langauge-descriptor>module-typed-qname => LanguageDescriptor( package-typed-qname, langNames , langIds, esvStartSymbols, sdfStartSymbols)
+		  ; langDef' := LanguageDescriptor( package-typed-qname, [name|langNames] , langIds, esvStartSymbols, sdfStartSymbols)
+      ; <store-language-definition> (module-typed-qname , langDef')
+      ;	dbg-symboltable(! $[ ScopeTree| [<print-as-string>package-typed-qname] storing  following language name : [<print-as-string>name]] | "store-langauge-properties" , <debug-level-INFO>)
+
+	// Stores Language ID. 
+	store-langauge-properties(|module-typed-qname) : 
+		LanguageId(id-string) -> <id> 
+		where 
+			verify(?Module(QName(_))| module-typed-qname , "Module(QName(_)) @store-langauge-properties");
+		  <get-existing-langauge-descriptor>module-typed-qname => LanguageDescriptor( package-typed-qname, langNames , langIds, esvStartSymbols, sdfStartSymbols);
+		  langDef' := LanguageDescriptor( package-typed-qname, langNames , [id-string|langIds], esvStartSymbols, sdfStartSymbols); 
+      <store-language-definition> (module-typed-qname , langDef')
+     where
+    	dbg-symboltable(! $[ ScopeTree| [<print-as-string>package-typed-qname] storing  following language Id : [<print-as-string>id-string]] | "store-langauge-properties" , <debug-level-INFO>)  
+	 
+	store-context-free-start-symbols(|module-typed-qname) : 
+	 	StartSymbols(sorts*) -> <id>
+	 	where
+	 	  verify(?Module(QName(_))| module-typed-qname , "Module(QName(_)) @store-langauge-properties");
+	 	  <get-existing-langauge-descriptor>module-typed-qname => LanguageDescriptor( package-typed-qname, langNames , langIds, esvStartSymbols, sdfStartSymbols);       
+      langDef' := LanguageDescriptor( package-typed-qname, langNames , langIds, <conc>(esvStartSymbols,sorts*), sdfStartSymbols); 
+      <store-language-definition> (module-typed-qname , langDef')
+    where	
+    	dbg-symboltable(!  $[ ScopeTree| [<print-as-string>package-typed-qname] storing  following start symbols found from ESV language description: [<print-as-string>sorts*]] | "store-context-free-start-symbols" , <debug-level-INFO>)
+	 	 
+	store-context-free-start-symbols(|module-typed-qname) : 
+	 	context-free-start-symbols(sorts*) -> <id>
+	 	where
+	 		verify(?Module(QName(_))| module-typed-qname , "Module(QName(_)) @store-langauge-properties");
+      <get-existing-langauge-descriptor>module-typed-qname => LanguageDescriptor( package-typed-qname, langNames , langIds, esvStartSymbols, sdfStartSymbols);
+      langDef' := LanguageDescriptor( package-typed-qname, langNames , langIds, esvStartSymbols, <conc>(sdfStartSymbols,sorts*)); 
+      <store-language-definition> (module-typed-qname , langDef')
+    where	
+    	dbg-symboltable(! $[ ScopeTree| [<print-as-string>package-typed-qname] storing  following start symbols : [<print-as-string>sorts*]] | "store-context-free-start-symbols" , <debug-level-INFO>)
+   
+   				 				
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/parse-adapter.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -23,34 +23,40 @@
 	parse-spx-sources :
 		(sourcedir , searchOption) -> <id>
 		where
-			{| current-working-root-dir :
-					rules(
-						current-working-root-dir  := <get-project-path>
-					);
-					if run-strategy( <chdir>sourcedir , fail | $[Warning | Failed to change current directory to : [<pp-aterm>sourcedir]]) then
-						<parse-spx-compilationUnits(|searchOption)> <getcwd>;
-						run-strategy( <chdir> <current-working-root-dir> , fail | $[Warning | Failed  to change current directory to : [<pp-aterm><current-working-root-dir>]])
-					end
-			|}
-
+			with-spxverify(
+				current-working-root-dir  := <get-project-path>
+				, !"Failed to initialize current-working-root-directory ::parse-spx-sources"
+			);	
+			if run-strategy( 
+					<chdir>sourcedir 
+					, fail 
+				  | $[Warning | Failed to change current directory to : [<print-as-string>sourcedir]]
+	  	) then
+					<parse-spx-compilationUnits(|searchOption)> <getcwd>;
+					run-strategy( 
+						<chdir> current-working-root-dir  
+						, fail 
+					  | $[Warning | Failed  to change current directory to : [<print-as-string>current-working-root-dir]])
+			end
+		
 	parse-spx-compilationUnits(|search-option) =
 		readdir;
 		list-loop(
     	if <isdir> <filemode> then  //FIXME : filemode / isdir contains bug. Common folder is not considered as directory which is a bug
-    		if not(Ignored-Spx-Souce-Dir); !search-option => All()  then
+    		if not(is-ignored-spx-directory); !search-option => All()  then
        		 chdir;
         	 <parse-spx-compilationUnits(|search-option)<+ throw-unable-read-exception(|"Failed to read this directory : ")><getcwd>;
            <chdir> ".."
         end
       else
-        where(parse-spx-compilationUnit) <+ throw-unable-read-file
+        where(parse-and-precompile-if-needed) <+ throw-unable-read-file
       end
     )
 
- 	parse-spx-compilationUnit: filename -> <id>
+ 	parse-and-precompile-if-needed: filename -> <id>
  		where
  			if has-extension(|"spx") then
-	 			where (<debug-compiler>$[Pre-Compiling| Parsing following file : [<pp-aterm>]]);
+	 			dbg-compiler(! $[Pre-Compiling| Parsing following file : [<print-as-string>]]);
 	 			open-spx-compilation-unit(
 					spx-compilation-unit-path,
 					spx-precompiled-cache-path,

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -5,10 +5,12 @@
 	lib/editor-common.generated
 imports 
 	context/-
-	context/str/-
+	context/str/declare
+	context/template/declare
 imports  
-  normalize/signatures
+  	normalize/signatures
 	codegen/compile
+	codegen/main
 imports 	
 	common
 	config
@@ -16,116 +18,260 @@
 	utils/path
 	utils/debug 
 	utils/contract
-
-
+	
 rules 
+	is-eq-sorts : (Sort(y),sort(x)) -> <eq>(x,y)
+
+rules
 	get-sdf-start-symbols-to-sync = 
 		where ( 
-			<get-esv-start-symbols;debug><GetEnclosingPackageName> => esv-start-symbols; 
-			<get-sdf-start-symbols;debug><GetEnclosingPackageName> => sdf-start-symbols
+			<get-esv-start-symbols><GetEnclosingPackageName> => esv-start-symbols; 
+			<get-sdf-start-symbols><GetEnclosingPackageName> => sdf-start-symbols
 		)
 		;<diff(is-eq-sorts)>(esv-start-symbols,sdf-start-symbols)
 		; make-set
 		; map(\Sort(x) -> sort(x)\)  
-		
-	is-eq-sorts : (Sort(y),sort(x)) -> <eq>(x,y)
-	
-rules 
-	
-	get-esv-start-symbols =
-		contracts(
-			contract-requires(
-				?Package(QName(_))
-			)
-		);
-		bagof-DeclaredESVStartSymbols;
-		flatten-list 
-
-
-	get-sdf-start-symbols =
-		contracts(
-			contract-requires(
-				?Package(QName(_))
-			)
-		); 
-		bagof-DeclaredSDFStartSymbols;
-		flatten-list 
-
-	get-language-id = 
-		contracts(
-			contract-requires(
-				?Package(QName(_))
-			)
-		); 
-		DeclaredLangaugeId
-		
-	get-language-name  = 
-		contracts(
-			contract-requires(
-				?Package(QName(_))
-			)
-		); 
-		DeclaredLangaugeName
-	 
-	get-unique-language-name = get-all-language-name; ?[<id>]
-	
-	get-all-language-name = where(?Package(QName(_))) ; bagof-DeclaredLangaugeName	
-	
-	get-languagename-declaration-sites = where (is-string) ; bagof-DeclaredLangaugeNameInScope
-	
-	get-languagename-unique-declaration-site = get-languagename-declaration-sites ; ?[<id>]  
-	
-	
+
 rules 
-	// TODO refactor : reduce the duplicate codes.
-	get-package-declaration = ?package-qname; get-declaration(|Packages())
-	
-	// Given a Module's Qualified Typed name , it returns the module declaration 
-	get-module-declarations = where(?Module(QName(_)));get-untyped-qname ; !(Modules() , <id>); bagof-Declared
-	
-	get-module-declaration = where(?Module(QName(_)));	get-untyped-qname ; !(Modules() , <id>); Declared		
+	get-language-descriptor-of-package = 
+		verify(?Package(QName(_)) | <id> , "Package(QName(_))  @get-language-descriptor-of-package") 
+		; get-indexed-language-descriptor
+	  <+ 
+  	  dbg-symboltable(! $[get-language-descriptor-of-package| Package ID : [<print-as-string>] | Failed]
+											| "resolve-declarations" ,"FAIL")
 	
-	get-original-module-declaration = 	where(?Module(QName(_)));	get-untyped-qname ; !(Modules() , <id>); DeclaredOriginal
+	get-esv-start-symbols =	get-language-descriptor-of-package ; ?LanguageDescriptor(_, _, _, <id>, _)   
+
+	get-sdf-start-symbols = get-language-descriptor-of-package ; ?LanguageDescriptor(_, _, _, _, <id>)   
+
+	get-language-id = get-language-descriptor-of-package ; ?LanguageDescriptor(_, _, <id>, _, _) ; ?[<id>|_] 
 	
-	get-module-and-verfity-unique = where(?Module(QName(_)));	get-untyped-qname ;	!(Modules() , <id>); bagof-Declared; ?[<id>]		  	
+	get-default-language-id  = verify(?Package(qname) | <id> , "?Package(QName(<id>)) @get-default-language-id");<qname-to-string-as-qualified-path>qname  
 		
-	// Given a List of Modules' Qualified Type name, it returns the list of module declaration 
-	get-module-declarations =  mapconcat(	get-module-declarations	)	<+	debug(!"Failed to get module declarations: ") ;fail
+	get-language-name  = get-language-descriptor-of-package ; ?LanguageDescriptor(_, <id>, _, _, _); ?[<id>|_] 
 
-	get-declaration(|ScopedSymbol)= !(ScopedSymbol, <id>); Declared
+	get-all-language-name = get-language-descriptor-of-package ; ?LanguageDescriptor(_, <id>, _, _, _)
 	
-	get-enclosed-declarations(s) =?package-qname ; !Package(package-qname);	bagof-GetEnclosedScope;filter(s)
+	get-unique-language-name = get-all-language-name; ?[<id>]
 	
-	// Get a list of Package declared in the current Project
-	// Retunrs: List of Packages' Typed-QName , i.e. , Package(QName(_))						  
-	get-package-list = all-keys-DeclaredPackage; get-typed-qnames(|PackageType())
-	
-	get-packages-of-file: file-abs-path -> result
-	with 
-		<has-extension(|"spx")>file-abs-path 
-		;<file-exists>  file-abs-path
-	where
-		<bagof-PackagesDeclaredIn>file-abs-path; get-typed-qnames(|PackageType()) => result
-	
-	// Given Typed-QName of Package, it returns list of enclosed Modules in the Package
-	// Returns:  List of Modules' Typed-QName, i.e. Module(QName(_))
-	get-enclosed-modules =  where (?Package(uqname));	bagof-GetEnclosedScope;	filter(?Module(_)) <+ debug(!"Failed to get enclosed modules: ") ;fail
+	// TODO FIX : temporary turning it off since current index does not support it. 
+	get-languagename-declaration-sites = get-package-qnames-by-langname
+
+rules
+  get-declared-packages-qname = 	
+  		dbg-symboltable(! $[Index | get-all-declared-packages-qname [<print-as-string>]] | "get-declared-packages-qname" , <debug-level-INFO>);  
+			project-package-declarations(package-typed-qname)   
+  
+  get-all-declared-packages-qname =   
+  		dbg-symboltable(! $[Index | get-all-declared-packages-qname [<print-as-string>]] | "get-all-declared-packages-qname" , <debug-level-INFO>);
+  		project-all-package-declarations(package-typed-qname)
 
-	// Returns a list of package/modules that <id> is depeding on. 
-	// Requires the <ID> to be untyped QName to look it up in the symbol tree.
+rules 
+	get-package-declaration = where(?Package(QName(_))) ; get-indexed-package-declaration
+  
+	get-package-declaration = where(?QName(_)) ; !Package(<id>) ;get-package-declaration 
+	
+	get-package-uris = where(?Package(QName(_))) ;  project-package-declarations(package-uris)  
+	
+	get-package-uris = where(?QName(_)); !Package(<id>) ; get-package-uris    
+	
+  /**
+  * Get a list of Package declared in the current Project
+  *
+  * @param None()
+  * @returns List of Packages' Typed-QName , i.e. , Package(QName(_))
+  */              
+  get-package-list = get-all-declared-packages-qname
+  
+rules 
+
+  get-declared-modules-qname =  dbg-symboltable(!$[get-declared-modules-qname [<print-as-string>]]|"get-declared-modules-qname" ,<debug-level-INFO>); project-module-declarations(module-typed-qname)   
+  
+  get-all-declared-modules-qname = dbg-symboltable(!$[get-all-declared-modules-qname]|"resolve-declarations" ,<debug-level-INFO>); project-all-module-declarations(module-typed-qname)
+  
+	get-analyzed-module-ast = get-desugared-module-ast
+  /**
+  * Gets desugared/annotated module ast for the given module qualified name. For the provided   
+  * module qualified name as the current term, it tires to resolve in the local cache. If not found 
+  * in the local cache , it is searched in the semantic index.  
+  * 
+  * @param None()
+  * @type module-qname-> Module(_,SPXModuleName(_),_)
+  */              
+  get-desugared-module-ast  = (get-cached-annotated-module-ast <+ get-indexed-module-definition(module-annotated-ast)); verify(?Module(_,SPXModuleName(_),_) | <id> , "Module(_,SPXModuleName(_),_)  @get-desugared-module-ast" )
+  /**
+  * Returns the original module ast given module qualified name. For the provided   
+  * module qualified name as the current term, it tires to resolve in the local cache. If not found 
+  * in the local cache, the module definition is looked up in the semantic index.  
+  * 
+  * @param None()
+  * @type module-qname-> Module(_,SPXModuleName(_),_)
+  */              
+  get-module-ast  = (get-cached-module-ast <+ get-indexed-module-definition(module-original-ast)); verify(?Module(_,SPXModuleName(_),_) | <id> , "Module(_,SPXModuleName(_),_) @get-module-ast")
+  // TODO : rename it to get-initial-module-definition 
+  /**
+  * Returns the original module definition for the given module qualified name.  
+  * 
+  * @param None()
+  * @type module-qname-> Module(_,SPXModuleName(_),_)
+  */
+	get-original-module-definition = verify(?Module(QName(_)) | <id> , "Module(QName(_)) @get-original-module-definition"); get-module-ast
+  /**
+  * Returns the uri of the specified module id as the current term.   
+  * 
+  * @param None()
+  * @type module-qname-> String
+  */ 
+  get-module-uri = 
+    get-indexed-module-declaration(
+    	modulde-uri
+  	); 
+    verify(String | <id> , "String @get-module-uri") 
+  <+ 
+    dbg-symboltable(!$[get-module-uri| Failed to get the following uri for [<id>]]|"resolve-declarations" ,<debug-level-WARNING>)
+     
+  /**
+  * Returns the enclosing package of the specified module package-qname   
+  * 
+  * @param None()
+  * @type module-qname-> Package(QName(_))
+  */
+  get-enclosing-package-qname = 
+    get-indexed-module-declaration(
+    	module-enclosing-package
+		)
+  	; verify(?Package(QName(_)) | <id> , "Package(QName(_)) @get-enclosing-package-qname") 
+    
+rules
+   
+	// Given a List of Modules' Qualified Type name, 
+	// it returns the list of module declaration 
+  get-module-definitions =   
+    verify( List  | <id> , "List @get-module-definitions");
+    dbg-symboltable(!$[get-module-definitions [<print-as-string>]] |"resolve-declarations" ,<debug-level-INFO>);
+    map(get-module-definition) 
+  <+
+  	dbg-symboltable(!$[Fail to get module declaration]| "resolve-declarations" ,"Error");  
+    fail
+     
+	get-module-definition  = 
+	  verify(
+	  	? Module(QName(_)) 
+	  	| <id> , "Module(QName(_)) @get-module-definition"
+	  	)
+	 	; dbg-symboltable(!$[getting module declaration from symbol table | moduleID : [<print-as-string>]] |"resolve-declarations" ,<debug-level-INFO>)
+    ; get-desugared-module-ast
+    	
+	get-module-definition-with-location  =  
+		verify(
+	  	? m at Module(QName(_)) 
+	  	| <id> , "Module(QName(_)) @get-module-definition-with-location"
+	  	)
+	 	  ; <get-desugared-module-ast>m => module-annotated-ast   
+	 	  ; <get-module-uri> m => module-uri 
+	 	  ; !(module-annotated-ast , module-uri)  
+	 	  
+	
+	/** 
+	* Given enclosing scope i.e. Typed-QName of Package, it returns list of enclosed Modules in the Package
+	*
+	* @param typed qualified name of the enclosing package 
+	* @returns List of Modules' Typed-QName, i.e. Module(QName(_))
+	*/ 
+	get-enclosed-modules =  verify (?Package(uqname) | <id> , "Package(uqname) @get-enclosed-modules");	get-declared-modules-qname
+
+	/**
+	*
+	* @type Package(QName(_)) -> List(Module(QName(_)))
+	*/
+  get-enclosed-dirty-modules = verify (?Package(QName(_)) | <id> , "Package(uqname) @get-enclosed-modules");	 get-indexed-dirty-module-declaration; map(module-typed-qname)
+  
+ 	get-enclosed-dirty-modules-to-generate = verify (?Package(QName(_)) | <id> , "Package(uqname) @get-enclosed-modules");	 get-indexed-dirty-module-declaration-to-generate; map(module-typed-qname)
+   
+  
+  /**
+  * Given absolute path of the compilation unit , it returns 
+  * the packages enclosed inside it. 
+  * 
+  * @param file-abs-path  absolute path of the compilation unit 
+  * @returns List of Typed Package QName i.e. Package(QName(_))
+  */
+  get-modules-of-file: 
+    file-abs-path -> result
+    with 
+      <has-extension(|"spx")>file-abs-path;
+      <file-exists>  file-abs-path
+    where
+      get-declared-modules-qname => result
+  
+rules 
+  
+	// Returns a list of modules that current package is imported . 
+	// Requires the <ID> to be typed QName to look it up in the symbol tree.
 	// Otherwise, it throws <illegal argument exception>
 	get-all-imported-modules = 
-		where(?Package(_)); 
+		verify(?Package(_) | <id> , "Package(_)  @get-all-imported-modules"); 
 		get-all-usings ; 
-		filter( ?Package(_)) ; 
-		mapconcat( get-enclosed-modules )
-	  
-	get-all-usings =  ?Package(<id>); debug(!"4 : ") ; get-all-usings 
-	
-	get-all-usings =  where(?QName(_));	?package-untyped-qname; all-keys-Using;	filter(?(package-untyped-qname, _)); mapconcat(bagof-Using)	
-	
-	get-all-usings : (package-untyped-qname , module-untyped-qname) -> lstUsings*
-	where 
-		<bagof-Using>(package-untyped-qname , module-untyped-qname) => lstUsings* 			
-	
-	
\ No newline at end of file
+		?all-imported-scope; 
+		// getting all the modules of imported packages 
+		filter(?Package(_)) ; 
+		mapconcat(get-enclosed-modules);
+		// concating it with the existing imported modules
+		<conc>( <id> ,  // modules enclosed in the referred packages 
+		        <filter(?Module(_))>all-imported-scope // references to the modules 
+          )
+	
+	get-used-by =  
+	  verify(?Package(_) | <id> , "Package(_) @get-all-usings");
+	  get-indexed-imported-to-refernces(?Package(QName(_)))  // returning all the packaged where this package is imported to  
+		  
+	get-all-usings =  
+	  verify(?Package(_) | <id> , "Package(_) @get-all-usings");
+	  get-indexed-import-refernces(?Package(QName(_)) + ?Module(QName(_)))  // returning all the import references of current packageId 
+	
+	get-all-usings =
+	  ?(package-untyped-qname , module-untyped-qname) 
+    ;<get-typed-qname>(ModuleType() , module-untyped-qname) =>  moduleID
+		;<get-indexed-import-refernces(?Package(QName(_)) + ?Module(QName(_)))> moduleID
+		    
+		    
+rules
+    
+	record-legacy-global-import-is-resolved =
+    ?(ns,  modulename);
+    if <get-legacy-artifact-details'>(ns,modulename) => Unresolved() then
+      qualifiedModuleName := Module(Name(modulename))
+      ; dbg-symboltable(! $[updating import reference to [<print-as-string>(ns ,  qualifiedModuleName , Resolved())]]|"Index" , <debug-level-INFO>)
+      ; <index-import>(ns, [(ns ,  qualifiedModuleName , Resolved())])
+    end
+  
+	get-all-enclosed-legacy-artifacts =  
+  	verify(?Package(QName(_)) | <id>, "Package(QName(_)) @get-all-enclosed-legacy-artifacts");  
+   	get-indexed-import-refernces(?(_,_,_))
+  
+	get-enclosed-legacy-artifact-details = verify(String |<id> , "String @get-enclosed-legacy-artifact-details" ) ; ?name;  !(<GetEnclosingPackageName>, name); get-legacy-artifact-details'
+   
+	is-declared-legacy-artifact = where(get-enclosed-legacy-artifact-details => Resolved())
+   
+	get-legacy-artifact-details' =
+		verify(?(ns,name) | <id> , $[(ns,name)  @get-legacy-artifact-details'])
+		; verify((?Package(QName(_))) | ns , " Package(QName(_)) as ns @get-legacy-artifact-details" )
+		; <get-indexed-import-refernces(?(_,_,_))>ns
+	  ; filter(?(ns, Module(Name(name)) , Resolved())) 
+    ; ( verify(is-not-empty-list | <id> , $[non-empty list @get-legacy-artifact-details']) ; ?[<id> | _] ; ?(ns, Module(Name(name)) , <id>) //// checks whether any resolved import  found . 
+      <+ 
+        !Unresolved() // not found . Hence, marking it unresolved 
+      )
+rules 
+	/**
+	* Indexes module qualified names of a particular package.  
+	*
+	* @example : <index-enclosed-modules>(packageqname, module-qname)
+	*/
+	index-enclosed-modules = verify(?(p at Package(QName(_)) , m at Module(QName(_)))|<id> , "(PackageQName, ModuleQName) @index-enclosed-modules") ; <index-symbol-definition>(p,DeclaredEnclosedModuleQName(),m) 	
+	/**
+	* Returns the enclosed module names of the specified package id .  
+	*
+	* @type package-qualified-name -> List( Module(QName(_)) 
+	*/
+	get-enclosed-modules-of-package = verify(?Package(QName(_)) | <id> , "Package(QName(_))  @get-enclosed-modules") ; <resolve-all-symbol-definitions-with-duplicates>(<id>, DeclaredEnclosedModuleQName())  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-symbols.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-symbols.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-symbols.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -18,36 +18,17 @@
 	utils/debug
 
 rules
-
 	get_internal_module_qtname =
 		?package-qt-name;
 		where(!package-qt-name => Package(QName(package-name-part*)));
 		!Module(QName([package-name-part*| [<internal_module_name_string>]]))
 
-	get_internal_module_qtname(|package-qt-name)  = <get_internal_module_qtname>package-qt-name
-
-
-rules
-
-	get-module-abs-filepath : Module(qname) -> result
-	where
-			result := <DeclaredModule>qname
-			<+
-			<debug-symboltable>$[SymbolTable| Failed to retrieve module's abs file path.];fail
-
-	get-package-abs-filepath : Module(qname) -> result
-	where
-			result := <DeclaredPackage>qname
-			<+
-			<debug-symboltable>$[SymbolTable| Failed to retrieve package's abs file path.];fail
-
 rules
 	// Add scopes for the symbol
-
 	to-global-symbol =
 		!(Globals(), <id>)
 	<+
-		<debug> $[Type| FAIL | Failed to convert it to Global symbol. <symbol> [<pp-aterm-forced>]]
+		dbg-symboltable(! $[Type| FAIL | Failed to convert it to Global symbol. <symbol> [<print-as-string>]] | "to-global-symbol" , "Warning") 
 		;fail
 
 	to-intenal-scoped-symbol =
@@ -55,8 +36,8 @@
 		<+
 		to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global
 		<+
-		<debug> $[Type| FAIL | Failed to convert it to scoped symbol.
-										<enclosing package> [<pp-aterm><GetEnclosingPackageName>] <enclosing module>[<pp-aterm-forced><GetEnclosingModuleName>] <symbol> [<pp-aterm-forced>]]
+		dbg-symboltable(! $[Type| Failed to convert it to scoped symbol.
+										<enclosing package> [<print-as-string><GetEnclosingPackageName>] <enclosing module>[<print-as-string><GetEnclosingModuleName>] <symbol> [<print-as-string>]] | "to-intenal-scoped-symbol" , "Warning")
 		;fail
 
 
@@ -65,8 +46,8 @@
 	<+
 		to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global
 	<+
-		<debug> $[Type| FAIL | Failed to convert it to scoped symbol.
-										<enclosing package> [<pp-aterm><GetEnclosingPackageName>] <enclosing module>[<pp-aterm-forced><GetEnclosingModuleName>] <symbol> [<pp-aterm-forced>]]
+		dbg-symboltable(! $[Type| Failed to convert it to scoped symbol.
+										<enclosing package> [<print-as-string><GetEnclosingPackageName>] <enclosing module>[<print-as-string><GetEnclosingModuleName>] <symbol> [<print-as-string>]] | "to-scoped-symbol" , "Warning")
 		;fail
 
   to-package-scoped-symbol =
@@ -74,25 +55,29 @@
   <+
     to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global
   <+
-    <debug> $[Type| FAIL | Failed to convert it to scoped symbol.
-                    <enclosing package> [<pp-aterm><GetEnclosingPackageName>] <symbol> [<pp-aterm-forced>]]
+    dbg-symboltable(!  $[Type| FAIL | Failed to convert it to scoped symbol.
+                    <enclosing package> [<print-as-string><GetEnclosingPackageName>] <symbol> [<print-as-string>]] | "to-package-scoped-symbol" , "Warning") 
     ;fail
 
 	// Strip Scope and retuns the symbol
-	remove-scope-from-symbol = ?(_,_, <id>) + ?(Globals(), <id>)
-
+	remove-scope-from-symbol = ?(Package(_), Module(_), <id>) + ?(Globals(), <id>) <+ id
+  
+  get-scope-from-symbol = ?(_,<id>,_) + ?(<id> ,_)
+  
+  
+  
 rules
 	//resolving symbol in global scope and returing list of result
 	resolve-symbol-global-declarations(key-resolver, value-resolver)=
 		?symbol; // NOTE : symbol does not contain any scope information
 		where(not(?(_,_) <+ ?(_,_,_)));
 		// Looking for the symbol in the Globals() Scope
-		where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Global Scope.]);
+		dbg-symboltable(! $[SymbolResolver| Resoving Symbol in Global Scope.] | "resolve-symbol-global-declarations" , <debug-level-INFO>);
 		<resolve-symbol-declarations-internal(key-resolver, value-resolver,?(Globals() , symbol))>symbol;
-		where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Global Scope. Result: [<pp-aterm>]]);
+		dbg-symboltable(! $[SymbolResolver| Resoving Symbol in Global Scope. Result: [<print-as-string>]] |  "resolve-symbol-global-declarations" , <debug-level-INFO>);
 		is-not-empty-list
 	<+
-		<debug-symboltable>$[SymbolTable| FAIL| Failed to resolve following symbol [<pp-aterm>] in Global Scope];
+		dbg-symboltable(! $[SymbolTable| Failed to resolve following symbol [<print-as-string>] in Global Scope] |  "resolve-symbol-global-declarations" , "Warning");
 		fail
 
 	//resolving symbol in global scope only and ensuring result is unique
@@ -101,13 +86,19 @@
 		;<resolve-symbol-global-declarations(key-resolver, value-resolver)> symbol
 		;ensure-is-unique // verify as resolved unique declaration
 	<+
-		<debug-symboltable>$[SymbolTable| FAIL| Failed to retrieve uniqe declaration in global scope."];fail
+		dbg-symboltable(! $[SymbolTable| FAIL| Failed to retrieve uniqe declaration in global scope."] | "resolve-symbol-unique-declaration" , "Warning")
+		; fail
+
 
 	// Resolving unique declaration of symbol in the scope (current-package, current-module)
 	// Symbol is resolved using the specified strategy parameter, i.e. using key-resolved and value-resolved
 	resolve-symbol-unique-declaration(key-resolver, value-resolver)=
 		?( current-package , current-module, symbol )
-		;<resolve-symbol-unique-declaration(key-resolver, value-resolver|current-package , current-module)>symbol
+		;<resolve-symbol-unique-declaration(
+		 		key-resolver, 
+		 		value-resolver
+	 		| current-package , 
+	 		  current-module)>symbol
 
 
 	// resolving unique declaration - generic implementation
@@ -115,7 +106,8 @@
 		resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)
 		;ensure-is-unique // verify as resolved unique declaration
 	<+
-		<debug-symboltable>$[SymbolTable| Failed to retrieve unique declaration.];fail
+		dbg-symboltable(! $[SymbolTable| Failed to retrieve unique declaration.] | "resolve-symbol-unique-declaration" , "Warning") 
+		; fail
 
 	// resolving declaration in global scope
 	resolve-symbol-declarations(key-resolver, value-resolver) =
@@ -133,36 +125,35 @@
 		?symbol; // NOTE : symbol does not contain any scope information
 		(
 				// Looking for the symbol in the current Module Scope
-				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Current Scope [<pp-aterm>(current-package , current-module)].]);
 				<value-resolver>(current-package , current-module, symbol);
-				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Current Scope. Result: [<pp-aterm>]]);
 				is-not-empty-list
 			<+
-				// Looking for the symbol in the parent enclosing scope => Package Scope
-				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Enclosing Package Scope ([<pp-aterm>current-package],_)  or in Global Scope]);
+				// Looking for the symbol in the parent or enclosing scope => Package Scope
 				<resolve-symbol-declarations-internal(
 					key-resolver,
 					value-resolver,
-					?(current-package , _ , symbol) + ?(Globals() , symbol) // NOTE : Currently we combined Globals() + Enclosing package search in ONE loopup.
+					?(current-package , _ , symbol) + ?(Globals() , symbol) // NOTE : Currently we combined Globals() + Enclosing package search in ONE lookup.
 				)>symbol;
-				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Enclosing Package + Global Scope. Result: [<pp-aterm>]]);
-		 	 	is-not-empty-list
+			 	is-not-empty-list
 			<+
-				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Imported Scopes.]);
 				where(
 					// current package and module's untyped QName to create the scope
 					!current-package => Package(untyped-package-qname);
 					!current-module  => Module(untyped-module-qname)
-					// getting all the using packages
-					;<get-all-usings>( untyped-package-qname , untyped-module-qname) => imported-typedqname*
-					;<debug-symboltable>$[SymbolResolver| Getting List of dependening-on packages/modules : [<pp-aterm>]]
 
+					// getting all the packages used by current module  untyped-module-qname
+                    // design decision: 
+                    // hence, it is required to specify import stmt in every module definition. 
+                    // plus : analysis faster since dont need to lookup in all the imported scopes by   untyped-package-qname     
+                    // minus : need to specify import in evey module 
+                    //-----------------------------------------------------
+					;<get-all-usings>( untyped-package-qname , untyped-module-qname) => imported-typedqname*
+			
 				);
 				<resolve-imported-symbol-declarations(key-resolver  , value-resolver)>(symbol, imported-typedqname*);
-				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Imported Scopes. Result: [<pp-aterm>]]);
 				is-not-empty-list
 			<+
-				<debug-symboltable>$[SymbolTable| FAIL| Failed to resolve following symbol [<pp-aterm>] in namespace [<pp-aterm>(current-package , current-module)]];
+				dbg-symboltable(! $[SymbolTable| FAIL| Failed to resolve following symbol [<print-as-string>] in namespace [<print-as-string>(current-package , current-module)]] |  "resolve-symbol-declarations" , <debug-level-INFO>);
 				fail
 		)
 
@@ -194,25 +185,23 @@
 					resolved* := <is-not-empty-list><resolve-symbol-declarations-internal(key-resolver, value-resolver,?(_ , currentscope , symbol))>symbol
 				end
 			end;
-			where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Imported Scopes. Result: [<pp-aterm>resolved*]. Found in :[<pp-aterm>currentscope] ])
+			dbg-symboltable(! $[SymbolResolver| Resoving Symbol in Imported Scopes. Result: [<print-as-string>resolved*]. Found in :[<print-as-string>currentscope] ] | "resolve-imported-symbol-declarations" ,"Warning")
 		<+
 			resolved* := <resolve-imported-symbol-declarations(key-resolver  , value-resolver)> rest*
 
-
-
 	// Resolving Symbol in the imported scopes
 	resolve-imported-symbol-declarations(key-resolver,value-resolver):
 		(symbol, scopes*) -> resolved*
 		where
 			if !scopes* => [] then
-				<debug-symboltable> $[SymbolTable| FAIL| Failed to resolve following symbol: [<pp-aterm>symbol] as there is no scope specified. ];
+				dbg-symboltable(! $[Failed to resolve following symbol: [<print-as-string>symbol] as there is no scope specified. ] | "resolve-imported-symbol-declarations" , <debug-level-WARNING>);
 				fail
 			else
 				!scopes* => [currentscope|rest*]
 			end
 		where
 			if !currentscope => Package(_) then
-				internal_module_qname := <get_internal_module_qtname>currentscope;
+				internal_module_qname := <get_internal_module_qtname>currentscope; //getting internal module name of the current package
 				resolved* := <is-not-empty-list>
 												<resolve-symbol-declarations-internal(
 														key-resolver,
@@ -228,7 +217,7 @@
 					resolved* := <is-not-empty-list><resolve-symbol-declarations-internal(key-resolver, value-resolver,?(_ , currentscope , symbol))>symbol
 				end
 			end;
-			where(<debug-symboltable>$[SymbolResolver| Resoving Symbol in Imported Scopes. Result: [<pp-aterm>resolved*]. Found in :[<pp-aterm>currentscope] ])
+			dbg-symboltable(!$[SymbolResolver| Resoving Symbol in Imported Scopes. Result: [<print-as-string>resolved*]. Found in :[<print-as-string>currentscope] ] | "resolve-imported-symbol-declarations" , <debug-level-INFO>)
 		<+
 			resolved* := <resolve-imported-symbol-declarations(key-resolver  , value-resolver)> ( symbol, rest*)
 
@@ -236,10 +225,10 @@
 
 	// Internal strategy to resolve symbol using a matcher
 	resolve-symbol-declarations-internal(key-resolver,value-resolver,namespace-filter) =
-		key-resolver;
-		filter(namespace-filter);
-		mapconcat(value-resolver)
+		key-resolver
+		; filter(namespace-filter)
+		; mapconcat(value-resolver)
 
 	<+
-		<debug-symboltable>$[SymbolTable| FAIL | resolve-symbol-declarations | Failed to resolve following symbol [<pp-aterm>]]
-		;fail
+		dbg-symboltable(! $[SymbolTable| FAIL | resolve-symbol-declarations | Failed to resolve following symbol [<print-as-string>]] | "resolve-symbol-declarations-internal" , <debug-level-WARNING>) 
+		; fail

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-types.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-types.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-types.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -18,48 +18,58 @@
 			
 rules
 	//TODO : better handling of Typed and Untyped QName
-	
 	//Strongly typing/untyping qname
-	get-untyped-qname : typed-qname -> u-qname
+	
+	get-untyped-qname : 
+		typed-qname -> u-qname
 		where
 			!typed-qname => Package(u-qname)
-			<+ 
-			 !typed-qname => Module(u-qname)
+		<+ 
+		  	!typed-qname => Module(u-qname)
 
-	get-typed-qnames(|Type) : list-qname -> result
+	get-typed-qnames(|Type) : 
+		list-qname -> result
 		where 
 			<is-list>list-qname
-		where
-			 <map(get-typed-qname(|Type))>list-qname => result
+		 	; <map(get-typed-qname(|Type))>list-qname => result
 		
 	get-typed-qname(|Type) = 
-		?QName(q-name-parts*); where(<is-list>q-name-parts*);<get-typed-qname>(Type , <id>)
-		<+
-		<debug>$[Type| FAIL | Failed to cast  [<pp-aterm-forced>] to [<pp-aterm-forced>Type]]; fail 	
+		?QName(q-name-parts*)
+		; where(<is-list>q-name-parts*)
+		;<get-typed-qname>(Type , <id>)
+	<+
+		dbg-symboltable(!$[Type| Failed to cast  [<print-as-string>] to [<print-as-string>Type]] | "get-typed-qname" ,<debug-level-WARNING>)
+		; fail 	
 	
-	get-typed-qname: (ModuleType() , qname) -> Module(qname)
+	get-typed-qname: 
+		(ModuleType() , qname) -> Module(qname)
 	
-	get-typed-qname: (PackageType() , qname) -> Package(qname)
+	get-typed-qname: 
+		(PackageType() , qname) -> Package(qname)
 
-	get-module-typed-qname: (Package(QName(package-qname-parts*)), spxmodulename) -> <get-typed-qname(|ModuleType())> <get-module-untyped-qname>(QName(package-qname-parts*), spxmodulename)
+	get-module-typed-qname: 
+		(Package(QName(package-qname-parts*)), spxmodulename) -> <get-typed-qname(|ModuleType())> <get-module-untyped-qname>(QName(package-qname-parts*), spxmodulename)
 	
-	get-module-typed-qname: (QName(package-qname-parts*), spxmodulename) -> <get-typed-qname(|ModuleType())>(<get-module-untyped-qname><id>)
+	get-module-typed-qname: 
+		(QName(package-qname-parts*), spxmodulename) -> <get-typed-qname(|ModuleType())>(<get-module-untyped-qname><id>)
 		  
-	get-module-untyped-qname: 
+	get-module-untyped-qname : 
 		p@(package-qname-parts*, spxmodulename) ->QName(<conc>( package-qname-parts* , [modname]))
-		 where 
-		 	<is-list>package-qname-parts* 	
-		 where 
-				if <is-string>spxmodulename then 
-		 			modname := spxmodulename
-		 		else
-		 			!spxmodulename => SPXModuleName(modname-string);
-		 			 modname := modname-string 
-		 			<+ 
-		 			debug(!"Type| Illegal <spxmodulename> argument in get-module-untyped-qname ");fail
-				end		 				
-			<+
-				<debug>$[Type| FAIL |get-module-untyped-qname failed to cast  [<pp-aterm-forced>p] to [<pp-aterm-forced>ModuleType()]]; fail 	
+		where 
+	 		<is-list>package-qname-parts* 	
+			; if <is-string>spxmodulename then 
+	 				modname := spxmodulename 
+ 			  else 
+ 			  	!spxmodulename => SPXModuleName(modname-string)
+	 			  ; modname := modname-string 
+ 			  <+ 
+	 		    dbg-symboltable(!"Type| Illegal <spxmodulename> argument in get-module-untyped-qname " | "get-module-untyped-qname" , <debug-level-ERROR>)
+	 		    ; fail
+			  end		 				
+		<+
+			dbg-symboltable(! $[Type| FAIL |get-module-untyped-qname failed to cast  [<print-as-string>p] to [<print-as-string>ModuleType()]] | "get-module-untyped-qname" , <debug-level-WARNING>)
+			; fail 	
 
-	get-module-untyped-qname: (QName(package-qname-parts*), spxmodulename) -> <get-module-untyped-qname>(package-qname-parts*, spxmodulename)
+	get-module-untyped-qname: 
+		(QName(package-qname-parts*), spxmodulename) -> <get-module-untyped-qname>(package-qname-parts*, spxmodulename)
 	 					
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/scope-tree.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -4,99 +4,82 @@
 imports 
 	context/signatures 
 	context/resolve-symbols
+	context/symboltable
 	normalize/signatures
 imports 	
 	common
-	utils/debug 
+	utils/debug
+	utils/contract
 
+rules
+	store-declared (| namespace) = where(not(?(_,_))) ; <store-declared(|namespace)>(<id> ,<id>)
 	
-//TODO OPTIMIZE : eliminate redundant dynamic rules. Declared with package definition most likely is a redundant DR
-
-rules 
-
-	// Scope Tree implementation using Dynamic Rules
-	store-package-abspath: 
-		(package-untyped-qname , abspath) -> <id>
-		with 
-			rules( 
-				DeclaredPackage   :+ package-untyped-qname -> abspath
-				PackagesDeclaredIn:+ abspath -> package-untyped-qname 
-			)
-		where 
-			<debug-symboltable>$[ScopeTree|storing abs path | DeclaredPackage: [<pp-aterm>package-untyped-qname]-> [<pp-aterm>abspath]]
-	
-	store-module-abspath: 
-		(module-untyped-qname, abspath) -> <id>
-		with 
-			rules(
-				DeclaredModule:+ module-untyped-qname -> abspath
-			)
-		where 
-			<debug-symboltable>$[ScopeTree|storing abs path| DeclaredModule: [<pp-aterm>module-untyped-qname]-> [<pp-aterm>abspath]]
-	
-	store-declaration(|ScopedSymbol): ( untyped-qname , definition) -> <id>
-		with 
-			rules( Declared : (ScopedSymbol, untyped-qname ) -> definition) 
-		where	
-			<debug-symboltable>$[ScopeTree|storing declaration| Declared: [<pp-aterm>untyped-qname]-> [<pp-aterm>definition]] 
-	
-	store-original-declaration(|ScopedSymbol): ( untyped-qname , definition) -> <id>
-		with 
-			rules( DeclaredOriginal : (ScopedSymbol, untyped-qname ) -> definition) 
-		where	
-			<debug-symboltable>$[ScopeTree|storing declaration| Declared: [<pp-aterm>untyped-qname]-> [<pp-aterm>definition]] 
-	
-	
-	store-scope-reference: (typed-qname, typed-qname-ofparent) -> <id>
-		with 
-			rules( 
-				GetEnclosingScope :+  typed-qname 				 -> typed-qname-ofparent
-				GetEnclosedScope  :+  typed-qname-ofparent -> typed-qname 
-			)				
-		where	
-			<debug-symboltable>$[ScopeTree|storing enclosing namespace reference| GetEnclosingNamespace: [<pp-aterm>typed-qname]-> [<pp-aterm>typed-qname-ofparent]]
+	store-declared(| namespace) : 
+		(x,d) -> <id>
+		where
+			rules( Declared :+ (namespace,x) -> d )
+			
+	get-declared(|namespace) = !(namespace, <id>);  Declared  		 
 	
+	get-all-declared(|namespace) = !(namespace, <id>);  bagof-Declared
 	
-	store-declaration(|Type): 
+	get-all-declared-by-type(|namespace) = all-keys-Declared ; filter(?(namespace, _));	mapconcat(bagof-Declared)
+
+	undef-declared (|namespace) :
 		x -> x
 		where
-			scoped-x := <to-scoped-symbol>x;
-			// DR fails if this tuple is placed in-line ...
-			tuple := (Type, scoped-x);
-			rules( Declaration :+ tuple -> x)
+			all-keys-Declared;
+			filter(?(namespace, x));
+			map(\y -> <rules(Declared :- y)>\)
+
+	undef-declared (|namespace) :
+		() -> ()
 		where
-			<debug-symboltable>$[ScopeTree|Storing Declaration [<pp-aterm>(Type, scoped-x)] -> [<pp-aterm>x]]	
+			all-keys-Declared;
+			filter(?(namespace, _));
+			map(\y -> <rules(Declared :- y)>\)
 	
-	// Stores langauge name. It keeps mapping of package name and its defined language-names
-	// extended dynamic rules are used to verify that language name is not declare multple times 
-	// in a package scope. Additional checks will be added to verify a language-name is unique 
-	// in a project scope. 
-	store-langauge-properties(|package-typed-qname) : 
-		LanguageName(name) -> <id>
-		with 
-			rules( DeclaredLangaugeName :+ package-typed-qname -> name);
-			rules( DeclaredLangaugeNameInScope :+ name -> package-typed-qname )
-		where
-			<debug-symboltable> $[ ScopeTree| [<pp-aterm>package-typed-qname] storing  following language name : [<pp-aterm>name]]
+rules
 	
-	// Stores Language ID. 
-	store-langauge-properties(|package-typed-qname) : 
-		LanguageId(id-string) -> <id> 
-		with 
-			rules( DeclaredLangaugeId :+ package-typed-qname -> id-string)
-			;<debug-symboltable> $[ ScopeTree| [<pp-aterm>package-typed-qname] storing  following language Id : [<pp-aterm>id-string]]
-	 
-	 
-	store-context-free-start-symbols(|package-typed-qname) : 
-	 	StartSymbols(sorts*) -> <id>
-	 	with 
-			rules( DeclaredESVStartSymbols :+ package-typed-qname -> sorts*)
-			;<debug-symboltable> $[ ScopeTree| [<pp-aterm>package-typed-qname] storing  following start symbols found from ESV language description: [<pp-aterm>sorts*]]
-	 	
-	 	 
-	store-context-free-start-symbols(|package-typed-qname) : 
-	 	context-free-start-symbols(sorts*) -> <id>
-	 	with 
-			rules( DeclaredSDFStartSymbols :+ package-typed-qname -> sorts*)
-			;<debug-symboltable> $[ ScopeTree| [<pp-aterm>package-typed-qname] storing  following start symbols : [<pp-aterm>sorts*]]
-	 		 		
\ No newline at end of file
+	add-to-compile-queue = verify(?Package(QName(_))  |<id> , "Package(QName(_)) @add-to-compile-queue ") ; store-declared(|CurrentlyCompilingFlag())
+	
+	is-in-compile-queue = verify(?Package(QName(_))  |<id> , "Package(QName(_)) @is-in-compile-queue") ;  get-declared(|CurrentlyCompilingFlag())
+	
+	should-compile-this-package = not(is-in-compile-queue)
+	
+	add-to-compiled-modules = verify((?Module(QName(_)) , String)  |<id> , "Module(QName(_)) @add-to-compiled-modules") ;   store-declared(|CompiledModuleFlag() )	
+
+	is-a-compiled-module = verify(?Module(QName(_))  |<id> , "Module(QName(_)) @is-a-compiled-module") ;  get-declared(|CompiledModuleFlag())
+	
+	add-to-analyzed-modules = verify((?Module(QName(_)) , String)  |<id> , "Module(QName(_)) @add-to-analyzed-modules") ;   store-declared(|AnalyzedModuleFlag() )	
+
+	is-a-analyzed-module = verify(?Module(QName(_))  |<id> , "Module(QName(_)) @is-a-analyzed-module") ;  get-declared(|AnalyzedModuleFlag())
+
+	get-all-analyzed-modules-locations =  get-all-declared-by-type(|AnalyzedModuleFlag()) ; make-set
+	
+	add-to-analyzed-packages-queue = 	verify(?Package(QName(_))  |<id> , "Package(QName(_)) @add-to-compile-queue ") ; store-declared(|AnalyzedPackageFlag())
+	
+	is-in-analyzed-packages-queue  = verify(?Package(QName(_))  |<id> , "Package(QName(_)) @is-in-compile-queue") ;  get-declared(|AnalyzedPackageFlag())
+	
+	set-already-reinitialized =  <store-declared(|ReinitCompileSessionFlage())> <get-constructor>ReinitCompileSessionFlage()
+	
+	is-already-reinitialized =  <get-declared(|ReinitCompileSessionFlage())> <get-constructor>ReinitCompileSessionFlage()	
+	
+	is-legacy-artifact-resolved = verify( ?(ns,modulename,resolved-path) | <id> , "(ns,modulename,resolved-path) @is-legacy-artifact-resolved");  !(modulename,resolved-path) ; get-declared(|ResolvedExternalArtifactFlag(ns))
+	
+	add-legacy-artifact-as-resolved = verify( ?(ns , modulename, path) | <id> , "(ns , modulename, path)  @add-legacy-artifact-as-resolved") ; !((modulename,path), path) ; store-declared(|ResolvedExternalArtifactFlag(ns)) 
+
+signature constructors 
+	LibInGlobalNamespace : Flag 
+
+rules 
+	index-lib-in-global-cache = 
+		? module-name
+		; <index-symbol-definition>(module-name, LibInGlobalNamespace(),  module-name)
+	  
+	  
+	is-lib-exists-in-global-cache= 
+		? module-name
+		; <resolve-symbol-definition>(module-name, LibInGlobalNamespace())
+
+

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -7,31 +7,61 @@
 	libstrc
 	utils/attributes
 	utils/debug
+	utils/contract
+	
 imports
 	context/-
 imports
 	context/sdf/declare
 	context/signatures
+	
 
 
 // TODO : refactor common functionily in seperate rules/strategy
 // FIXME: DON'T like several things about this implementation. Need to refactor/re-implement.
 // TODO : write a pretty printer to convert Get-Operation-Declaration to Signatures' Aterm
+rules 
+	  
+  is-declared-signature(|actual-arity)=
+    one(
+        ( ?<id>
+        + ?SVar(<id>))
+        ; verify-declared-constructor(|actual-arity)
+    )
+
+  verify-declared-constructor(| arity) = 
+  	?opName
+  	;	candidate-op-signatures := <getOperationSignatures>opName
+    ;	dbg-analysis(! $[operation name : [<print-as-string>opName] . Associated Signatures Found :  [<print-as-string> candidate-op-signatures]] | "verify-declared-constructor" , <debug-level-WARNING>)
+    ;	<assert-eq-opname-arity(|opName, arity)>candidate-op-signatures
+    ; !opName
+  
+      
+  assert-eq-opname-arity(|actual-opname , actual-no-of-arguments)= 
+    ?[hd|tl]
+    ;((expected-op-name , expected-no-of-arguments) := hd 
+      ; actual-opname := expected-op-name 
+      ; actual-no-of-arguments := expected-no-of-arguments
+  	<+ 
+    	<assert-eq-opname-arity(|actual-opname , actual-no-of-arguments)>tl
+    )   
 
 rules
+
 	getOperationSignatures =
-		?opname;
- 		<resolve-symbol-declarations(all-keys-Get-Operation-Signature, bagof-Get-Operation-Signature)><to-scoped-symbol>opname
- 	<+
- 		<debug-declaration(|"Signature" , "Warning")> $[Failed to retrive OperationSignatures for opname[<pp-aterm>]. Returning  empty list . ];
- 		![]
+	  ?opsig-key
+	  ;<resolve-all-symbol-definitions>( <id>, OperationSignature())
+	 	<+
+ 		dbg-declaration(!$[Failed to retrive OperationSignatures for opname[<print-as-string>]. Returning  empty list . ]|"Signature" , "Warning") 
+ 		; ![]
+ 		
 
  	get-operation-declarations =
-		?opname;
- 		<resolve-symbol-declarations(all-keys-Get-Operation-Declaration, bagof-Get-Operation-Declaration)><to-scoped-symbol>opname
+ 	  ?opdecl-key
+ 	  ; <resolve-all-symbol-definitions>(<id>, OperationDeclaration())
  	<+
- 		<debug-declaration(|"Signature" , "Warning")> $[Failed to retrive OperationDeclarations for opname[<pp-aterm>]. Returning  empty list . ];
- 		![]
+ 		dbg-declaration(!$[Failed to retrive OperationDeclaration for opname[<print-as-string>]. Returning  empty list ] | "Signature" , "Warning") 
+ 		; ![]
 
 strategies
 	// Returns right hand side of the production. In case of A -> B, it retunrs B.
@@ -69,7 +99,7 @@
   	with
 			rules (get-op-name: _ -> opname)
   	where
-  		<debug-declaration(|"Signature" , "Info")> $[Operation Name :  [opname]]
+  		dbg-declaration(! $[Operation Name :  [opname]] |"Signature" , <debug-level-INFO>) 
 
 
 	store-operation-declaration:
@@ -104,7 +134,7 @@
   						lhs-operands-types := <reverse><bagof-lhs-sort>
   						;create-opname2opdecl-mapping(|operation-name , lhs-operands-types, rhs-sort-name , p)
   					else
-  						<debug-declaration(|"Signature" , "Warning")> $[Failed to retrive Operation Name . Hence Ignoring : [<pp-aterm> p].]
+  						dbg-declaration(!$[Failed to retrive Operation Name . Hence Ignoring : [<print-as-string> p].] |"Signature" , "Warning")
   					end
   		  |}
 
@@ -188,68 +218,84 @@
 
  	get-sort-decl:
  		p at parameterized-sort(x, _) ->p
-		with
-			rules( lhs-sort :+ _ -> x)
+		where 
+			with-spxverify(
+  			rules( lhs-sort :+ _ -> x)
+			)
 
   get-sort-decl:
   	s at sort(x) -> s
-  	with
-  		rules( lhs-sort :+ _ -> x)
+  	where 
+  		with-spxverify(
+  			rules( lhs-sort :+ _ -> x)
+			)
 
 	get-sort-decl:
 		o at opt(parameterized-sort(x, _)) -> o
-  	with rules( lhs-sort :+ _ -> $[Option([x])])
+  	where 
+  		with-spxverify(
+  			rules( lhs-sort :+ _ -> $[Option([x])])
+			)
 
 	get-sort-decl:
 		opt(sort(x)) -> opt(sort(x))
-  	with rules( lhs-sort :+ _ -> $[Option([x])])
+  	where 
+  		with-spxverify(
+  			rules( lhs-sort :+ _ -> $[Option([x])])
+			)
 
 	get-sort-decl:
 		i at iter-star-sep(operand1, operand2) -> i
- 		with {|lhs-sort:
-			 					 <find-sorts>operand1
-		 					  ;<find-sorts>operand2
-		 					  ; inner-sorts-tostring := <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>
-				  |}
-				 	;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
-  				;rules ( lhs-sort :+ _ -> ret-string)
-
+ 		where 
+ 			with-spxverify( 
+				{|lhs-sort:
+ 					 <find-sorts>operand1
+ 					  ;<find-sorts>operand2
+ 					  ; inner-sorts-tostring := <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>
+			  |}
+			 	;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
+				;rules ( lhs-sort :+ _ -> ret-string)
+			)
+			
 	get-sort-decl:
 		i at iter-sep(operand1, operand2) -> i
-		with {|lhs-sort:
-			 					 <find-sorts>operand1
-		 					  ;<find-sorts>operand2
-		 					  ;inner-sorts-tostring
-		 					   		:= <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>
-				  |}
-				 	;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
-  				;rules ( lhs-sort :+ _ -> ret-string)
+		where 
+			with-spxverify(
+				{|lhs-sort:
+	 					 <find-sorts>operand1
+ 					  ;<find-sorts>operand2
+ 					  ;inner-sorts-tostring
+				   		:= <reverse;separate-by(|"_");concat-strings><bagof-lhs-sort>
+			  |}
+			 	;ret-string := $[List([<string-replace(|"(", "_Of_");string-replace(|")", "")>inner-sorts-tostring])]
+				;rules ( lhs-sort :+ _ -> ret-string)
+		 )
 
   // TemplateLang
   get-sort-decl:
     Placeholder(_, sort(x), None(), _) -> <id>
-    with rules( lhs-sort :+ _ -> x )
+    where with-spxverify (rules( lhs-sort :+ _ -> x ))
 
   get-sort-decl:
     Placeholder(_, sort(x), <?Plus() + ?Star()>, _) -> <id>
-    with rules( lhs-sort :+ _ -> $[List([x])] )
+    where with-spxverify( rules( lhs-sort :+ _ -> $[List([x])] ))
 
   get-sort-decl:
     Placeholder(_, sort(x), Option(), _) -> <id>
-    with rules( lhs-sort :+ _ -> $[Option([x])] )
+    where with-spxverify (rules( lhs-sort :+ _ -> $[Option([x])] ))
 
 strategies
 
 	assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)=
-			?[hd|tl]
-			;(expected-op-name , expected-op-sorts*, ex-resultant-sort) := hd
-			;(
-			 			 operation-name := expected-op-name
-						;opernand-sorts* := expected-op-sorts*
-						;resultant-sort := ex-resultant-sort
-				  <+
-						<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>tl
-				)
+		? [hd|tl]
+		; (expected-op-name , expected-op-sorts*, ex-resultant-sort) := hd
+		; (
+				operation-name := expected-op-name
+				;opernand-sorts* := expected-op-sorts*
+				;resultant-sort := ex-resultant-sort
+		  <+
+				<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>tl
+			)
 
 	/**
 	* Creates a dynamic rule that mapes operation name to the operation declaration.
@@ -262,21 +308,20 @@
 	*
 	*/
 	create-opname2opdecl-mapping(|operation-name, opernand-sorts*, resultant-sort , production) =
-		where (<debug-declaration(|"DeclareSignature" , "Info")> $[Storing Signature for following production: [<pp-aterm> production]])
-		;available-opdecl* := <get-operation-declarations>operation-name
-		;scoped-operation-name := <to-scoped-symbol>operation-name
-		;if( (!available-opdecl* => []) <+ not(<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>available-opdecl*) )then
-			record-operation-definition(|scoped-operation-name  , operation-name  , opernand-sorts* , resultant-sort)
- 		else
- 			//enable-declaration-debugging;
+		dbg-declaration(!$[Storing Signature for following production: [<print-as-string> production]] |"DeclareSignature" , <debug-level-INFO>) 
+		; available-opdecl*     := <get-operation-declarations>operation-name
+		; scoped-operation-name := <to-scoped-symbol>operation-name
+		; if( (!available-opdecl* => []) <+ not(<assert-equal-signature(|operation-name, opernand-sorts*, resultant-sort)>available-opdecl*) )then
+		   	record-operation-definition(|scoped-operation-name  , operation-name  , opernand-sorts* , resultant-sort)
+ 		  else
  		 	record-duplicate-operation-definition(|scoped-operation-name  , operation-name  , opernand-sorts* , resultant-sort);
- 		 	<debug-declaration(|"Signature" , "Warning")>
+ 		 		dbg-declaration(!
  		 			$[
- 		 				There is an existing operation declaration of production: [<pp-aterm> production] as the following : [<pp-aterm>(operation-name, opernand-sorts* , resultant-sort)]
- 		 				--scoped-op-name [<pp-aterm>scoped-operation-name].
+ 		 				There is an existing operation declaration of production: [<print-as-string> production] as the following : [<print-as-string>(operation-name, opernand-sorts* , resultant-sort)]
+ 		 				--scoped-op-name [<print-as-string>scoped-operation-name].
  		 			 ]
- 		 	//;disable-declaration-debugging
-		end
+ 		 			 | "Signature" , "Warning")
+ 		  end
 
 
 	create-opname2opdecl-mapping(|operation-name, resultant-sort , production): alt-sort -> alt-sort
@@ -287,19 +332,20 @@
 
 	record-operation-definition ( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort) =
 		where (
-			arg-length := <length>operand-sort*;
-			rules(
-					Get-Operation-Signature  :+  scoped-op-name   -> (opname  , arg-length )
-				 	Get-Operation-Declaration:+  scoped-op-name   -> (opname  , operand-sort* , resultant-sort)
-				)
-
-			;<debug-declaration(|"Signature" , "Info")> $[Stored operation declaration : [<pp-aterm> ( opname , operand-sort* ,  resultant-sort) ].]
-			;<debug-declaration(|"Signature" , "Info")> $[Stored operation signature   : [<pp-aterm> scoped-op-name] -> [<pp-aterm> (opname, <length>operand-sort*)].]
-	)
+	  	arg-length := <length>operand-sort*
+			;<index-symbol-definition>(scoped-op-name  , OperationSignature(),(opname  , arg-length ))
+      ;<index-symbol-definition>(scoped-op-name  , OperationDeclaration(),(opname  , operand-sort* , resultant-sort)) 
+      ;dbg-declaration(!$[Stored operation declaration : [<print-as-string> ( opname , operand-sort* ,  resultant-sort) ].]
+       		             |"Signature" , <debug-level-INFO>) 
+			;dbg-declaration(! $[Stored operation signature   : [<print-as-string> scoped-op-name] -> [<print-as-string> (opname, <length>operand-sort*)].] 
+			                 | "Signature" , <debug-level-INFO>) 
+		)
 
 	record-operation-definition-at-global-scope ( | opname , operand-sort* ,  resultant-sort) =
-		where ( <to-global-symbol> opname => scoped-op-name);
-		record-operation-definition( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort)
+		activate-global-scope(
+			<to-global-symbol> opname => scoped-op-name;
+			record-operation-definition( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort)
+		)
 
 
 	record-duplicate-operation-definition( |scoped-op-name ,  opname , operand-sort* ,  resultant-sort) =
@@ -309,13 +355,30 @@
 			rules(
 					has-duplicate-opeartion-definition:+ scoped-rhs-sort   -> (opname  , arg-length, resultant-sort)
 			)
-			;<debug-declaration(|"Signature" , "Info")> $[Stored duplicate  operation signature  : [<pp-aterm> scoped-op-name].]
+			;dbg-declaration(! $[Stored duplicate  operation signature  : [<print-as-string> scoped-op-name].]
+			                  | "Signature" , <debug-level-INFO>) 
 		)
 
-rules
 	init-record-signatures =
+		if not(is-operation-signature-initialized) then 
 			record-operation-definition-at-global-scope ( |"None", [] 		,"Option(a)");
 			record-operation-definition-at-global-scope ( |"Some", ["a"] ,"Option(a)");
 			record-operation-definition-at-global-scope ( |"Cons", ["a","List(a)"] ,"List(a)");
 			record-operation-definition-at-global-scope ( |"Nil", [] ,"List(a)");
-			record-operation-definition-at-global-scope ( |"Conc", ["List(a)" , "List(a)"] ,"List(a)")
+			record-operation-definition-at-global-scope ( |"Conc", ["List(a)" , "List(a)"] ,"List(a)");
+			index-operation-signature-flag	
+		end
+
+signature constructors 
+	OperationSignatureFlag : Flag 
+
+rules 
+	
+	index-operation-signature-flag = 
+		<get-constructor> OperationSignatureFlag() => cons-name;
+		<index-symbol-definition>(cons-name, OperationSignatureFlag(),  cons-name)
+		
+	is-operation-signature-initialized = 
+		<get-constructor> OperationSignatureFlag() => key ;  
+		<resolve-symbol-definition>(key, OperationSignatureFlag())   
+		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -1,47 +1,72 @@
 module context/sdf/declare
 imports
-  libstratego-sdf
+	libstratego-sdf
   lib/editor-common.generated
-  include/SpoofaxLang
+	include/SpoofaxLang
 imports
-  context/-
-  codegen/-
-  analyze/main
-  normalize/signatures
+	context/-
+	context/esv/declare
+	codegen/-
+	analyze/main
+	normalize/signatures
+	context/sdf/declare-signature
 imports
-  common
-  utils/debug
-  utils/annotations
-  utils/attributes
+	common
+	utils/debug
+	utils/annotations
+	utils/attributes
+	utils/contract
 imports
-  context/sdf/declare-signature
-imports
-  libstratego-sdf
+	libstratego-sdf
   lib/editor-common.generated
-  include/SpoofaxLang
+	include/SpoofaxLang
+	
 
 rules
+  index-sdf-usage: 
+  	(key, value)  -> <id> 
+  	where
+  		with-spxverify(
+  			verify( ?Module(QName(_)) | <GetEnclosingModuleName> , "Module(QName(_))  ::index-sdf-usage")
+  			,!"Error : ModuleScope is expected to define sdf usage."
+  		);
+	  	with-spxverify(
+	  		<index-symbol-definition>( key, SDFUsage() , value)
+	  		,!"Indexing SDF Usage"
+	  	)
+  
+  get-sdf-usages = <resolve-all-symbol-definitions>( <id>, SDFUsage() )
+
+rules
+	
+	setof-sdf-declarations = resolve-sdf-declarations
+	
+	bagof-sdf-declarations = <resolve-all-symbol-definitions-with-duplicates>(<id>, SDFDeclaration())
+			  		
   resolve-sdf-declarations =
-    ?symbol;
-     <resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol
-   <+
-     <debug-analysis> $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<pp-aterm>]];
-     fail
-
-  resolve-unique-sdf-declaration =
-     ?symbol;
-     <resolve-symbol-unique-declaration(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol
-   <+
-     <debug-analysis> $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<pp-aterm>]];
-     fail
+    <resolve-all-symbol-definitions>(<id>, SDFDeclaration())
+    
+  <+
+    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<print-as-string>]] | "resolve-sdf-declarations" ,<debug-level-WARNING>); 
+    fail
+	
+	
+       
+  resolve-atleast-one-sdf-declaration =
+    <resolve-symbol-definition>( <id>, SDFDeclaration())
+  <+
+    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<print-as-string>]] 
+                 | "resolve-atleast-one-sdf-declaration" ,<debug-level-WARNING>)
+    ; fail
 
   resolve-NamespaceSort-declaration =
-     ?symbol;
-     <resolve-symbol-unique-declaration(all-keys-NamespaceSort , bagof-NamespaceSort)><to-scoped-symbol>symbol
-   <+
-     <debug-analysis> $[ErrorChecking| FAIL| Failed to retrive NamespaceSort declaration for symbol [<pp-aterm>]];
-     fail
+    <resolve-symbol-definition>( <to-scoped-symbol>, NamespaceSortDeclaration())
+  <+
+    dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive NamespaceSort declaration for symbol [<print-as-string>]] 
+                 | "resolve-NamespaceSort-declaration" , <debug-level-WARNING>)
+    ; fail
 
+     
 
 rules
  // Traverse AST and declare sdf definition
@@ -49,24 +74,24 @@
  // now it is declared in a particular Scope.
  // Here scope is defined by (Package-QName, Module-QName)
  declare-sdf-definition-main=
-      alltd(declare-sdf-definition)
+    	alltd(declare-sdf-definition)
 
 rules
-  declare-sdf-definition :
-    context-free-start-symbols(s*) -> <id>
-    with
-      <declare-sdf-definition-main>s*
-    with
-      store-context-free-start-symbols(|<GetEnclosingPackageName>)
+	declare-sdf-definition :
+		context-free-start-symbols(s*) -> <id>
+		with
+			<declare-sdf-definition-main>s*
+		with
+			store-context-free-start-symbols(|<GetEnclosingModuleName>)
 
 rules
-  declare-sdf-definition:
+	declare-sdf-definition:
     renamings(y) -> <id>
     where
       <all(try(?symbol(_, <id>); declare-sdf-simple-definition))> y
 
 
-  declare-sdf-definition:
+	declare-sdf-definition:
     parameterized(x, y) -> parameterized(x, y)
     where
       <declare-sdf-definition> unparameterized(x);
@@ -77,123 +102,134 @@
   declare-sdf-definition:
     prod @ prod(lhs, sort, attrs) -> <id>
     where
-      <declare-sdf-definition-internal> (prod, lhs, sort, attrs)
+    	<declare-sdf-definition-internal> (prod, lhs, sort, attrs)
 
+  
   declare-sdf-definition-internal:
-    (prod, lhs, sort, attrs) -> <id>
+    p@(prod, lhs, sort, attrs) -> <id>
     where
-      x:= <get-rhs-sort-name>sort;
-      qualified-sort-name := <to-scoped-symbol> x;
-      package-qualified-sort-name := <to-package-scoped-symbol> x
-     with
-       // enable-declaration-debugging;
-      // reject productions shouldn't generate signatures ever
-      if not(<attrs(fetch(?reject()))> attrs) then
-        <store-operation-declaration>prod
-      end
-    with
-      <topdown(try(store-namespace-def))> lhs
-    with
-      if <fetch-cons-name> attrs => cons then
-        package-qualified-cons-name := <to-package-scoped-symbol> cons;
-        // DR fails if this tuple is placed in-line ...
-        tuple := (package-qualified-sort-name, package-qualified-cons-name);
-        rules(
-          // Needed for Sort.Cons references to the production.
-          Declaration :+ tuple -> prod
-        )
-      end
-    with
-      // in SPT tests, file may be unavailable
-      if (GetEnclosingModuleName;get-module-abs-filepath <+ LegacyModuleResolvedPath) => file then
-        rules( DeclarationFile: qualified-sort-name -> file )
-      end;
-      rules(
-        Declaration :+ qualified-sort-name -> prod
-        Declaration :+ package-qualified-sort-name -> prod
+  	  dbg-declaration(! $[declaring sdf : [<print-as-string>p]]| "SDF" , <debug-level-INFO> ); 
+      x:= <get-rhs-sort-name>sort
+    where  
+      with-spxverify(
+	   		// reject productions shouldn't generate signatures ever
+	      if not(<attrs(fetch(?reject()))> attrs) then
+	        <store-operation-declaration>prod
+	      end
+      , !$[declare-sdf-definition-internal | Failed while trying to store operation declaration with following production [<print-as-string> prod]]
+      )
+  	where
+  	  with-spxverify(
+        <topdown(try(store-namespace-def))> lhs
+       ,!"declare-sdf-definition-internal | Failed while storing namespace-def "
       );
-      <debug-declaration(| "SDF" , "Info" )> $[Storing Declaration : [<pp-aterm>qualified-sort-name]  -> [<pp-aterm>prod]]
-    with
-      <alltd(declare-sdf-usage)> lhs
-     // ;disable-declaration-debugging
-
+      with-spxverify(
+	      if <fetch-cons-name> attrs => cons then
+	      	// DR fails if this tuple is placed in-line ...
+          tuple := (x, cons);
+	       	//TODO : check why it is needed 
+          // Needed for Sort.Cons references to the production.
+          <index-symbol-definition>(tuple , SDFDeclaration() , prod )
+	      end
+	    	, !"declare-sdf-definition-internal | Failed while storing sort.cons references "      
+      )
+    where
+      with-spxverify(
+        	<index-symbol-definition>(x , SortDeclaration(),x );
+    	  	<index-symbol-definition>(x, SDFDeclaration(),prod );
+    	  	dbg-declaration(! $[Storing Declaration : [<print-as-string>x]  -> [<print-as-string>prod]]
+      	                     | "SDF" , <debug-level-INFO> ) 
+        , !"declare-sdf-definition-internal | Failed while storing production in symbol table"
+      ) 
+   where
+     <alltd(declare-sdf-usage)> lhs      
+    
 
   store-namespace-def:
     namespacedef(name, sort) -> <id>
-    with
-      scoped-name  := <to-scoped-symbol> name
+    where with-spxverify(
+    	scoped-name  := <to-scoped-symbol> name
+  	)
     where
-      rules(NamespaceSort: scoped-name  -> sort)
+      <index-symbol-definition>(scoped-name, NamespaceSortDeclaration(),sort)
 
   declare-sdf-definition:
-    lex-syntax at lexical-syntax(lex-defintions) ->lex-syntax
-    with{| IsInsideLexicalSyntaxBlock:
-              mark-as-lexical-syntax-block;
-              <declare-sdf-definition-main> lex-defintions
-        |}
-
-
-  declare-sdf-definition:
-    parameterized(x, y) -> parameterized(x, y)
-    where
-      <declare-sdf-definition> unparameterized(x);
-      <alltd(declare-sdf-simple-definition)> y
-
-  declare-sdf-definition:
-    'sorts(_) -> <id>
-    with
-       alltd(declare-sdf-usage)
-
-  declare-sdf-definition:
-    context-free-start-symbols(_) -> <id>
-    with
-      alltd(declare-sdf-usage)
+		lex-syntax at lexical-syntax(lex-defintions) ->lex-syntax
+		where 
+			with-spxverify(
+				{| IsInsideLexicalSyntaxBlock:
+								mark-as-lexical-syntax-block;
+								<declare-sdf-definition-main> lex-defintions
+				|}
+			)
+
+
+	declare-sdf-definition:
+		parameterized(x, y) -> parameterized(x, y)
+  	where
+			<declare-sdf-definition> unparameterized(x);
+  		<alltd(declare-sdf-simple-definition)> y
+
+	declare-sdf-definition:
+		'sorts(_) -> <id>
+		where with-spxverify(alltd(declare-sdf-usage))
+
+	declare-sdf-definition:
+		context-free-start-symbols(_) -> <id>
+		where with-spxverify(
+    	alltd(declare-sdf-usage)
+    )	
+
+  declare-sdf-definition:
+		lexical-start-symbols(_) -> <id>
+	  where with-spxverify(
+	  	alltd(declare-sdf-usage)
+  	)
 
-  declare-sdf-definition:
-    lexical-start-symbols(_) -> <id>
-    with
-      alltd(declare-sdf-usage)
-
-  declare-sdf-definition:
+	declare-sdf-definition:
     kernel-start-symbols(_) -> <id>
-    with
-      alltd(declare-sdf-usage)
+    where with-spxverify(
+      alltd(declare-sdf-usage)
+    )
+
+	declare-sdf-simple-definition:
+		sort(x) -> <id>
+		where with-spxverify(
+	  	scoped-x:= <to-scoped-symbol>x;
+	  	<index-symbol-definition>(scoped-x , SDFDeclaration(),x )
+  	)
+		where
+			dbg-declaration(!$[Storing Declaration [<print-as-string>scoped-x] -> [<print-as-string>x]] | "SDF" , <debug-level-INFO> )
 
-  declare-sdf-simple-definition:
-    sort(x) -> <id>
-    with
-      scoped-x:= <to-scoped-symbol>x;
-      rules(Declaration :+ scoped-x -> x)
-    where
-      <debug-declaration(| "SDF" , "Info" )>$[Storing Declaration [<pp-aterm>scoped-x] -> [<pp-aterm>x]]
 
 rules
 
-  declare-sdf-usage:
+	declare-sdf-usage:
     sort(x) -> <id>
-    with
-      x-with-scope := <to-scoped-symbol>x
-      ;rules(Usage: (scope, x)-> x)
+    where with-spxverify(
+    	<index-sdf-usage>( x , x)
+  	)
 
-  declare-sdf-usage:
+	declare-sdf-usage:
     parameterized-sort(x, y) -> <id>
     where
       if !y => [sort(y')]; <is-string> x; <is-string> y' then
         text := ${{x}[[{y'}]]};
-        text-with-scope := <to-scoped-symbol>text;
-        rules(Usage: text-with-scope -> text)
+       	<index-sdf-usage>( text , text)
       end
 
 rules
 
-  propose-completion:
+	propose-completion:
     sort(COMPLETION(x)) -> [decl*, use*]
-    with
-      decl* := <all-keys-Declaration> <to-scoped-symbol> x;
-      use*  := <all-keys-Usage> <to-scoped-symbol>x
+    where with-spxverify(
+      decl* := <setof-sdf-declarations> x;
+      use*  := <get-sdf-usages> x
+    )
 
-  propose-completion:
+	propose-completion:
     NOCONTEXT(COMPLETION(x)) -> [decl*, use*]
-    with
-      decl* := <all-keys-Declaration> <to-scoped-symbol>x;
-      use*  := <all-keys-Usage> <to-scoped-symbol> x
+    where with-spxverify(
+      decl* := <setof-sdf-declarations> x;
+      use*  := <get-sdf-usages> x
+    )
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/signatures.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -26,8 +26,58 @@
 	SDFSection								: Symbol
 	
 	Unresolved								: Symbol
-	Resolved									: Symbol
+	Resolved								: Symbol
+
+
+signature constructors 
+
+    OperationSignature : Type 
+    OperationDeclaration : Type 
+    
+ 
+signature constructors
+	DeclaredEnclosedModuleQName : Type
+ 	   
+signature constructors 
+	// symbol types
+		
+	ModuleType				: Type
+	PackageType				: Type
+	SDFType				  	: Type
+	 
 	
-	ModuleType								: Type
-	PackageType								: Type
-	SDFType										: Type
\ No newline at end of file
+	
+	STRDef                    : Type
+	STRCookie                 : Type
+	STRSignature              : Type
+	SortDeclaration           : Type
+
+	SDFDeclaration            : Type  
+	NamespaceSortDeclaration  : Type
+	SDFUsage 									:	Type
+	//templatelang 
+	TemplateOptions   : Type
+	CanNotBeBlankFlag : Type   
+	
+	BooleanType : Type
+	True : BooleanType
+	False : BooleanType
+	
+	Flag : Type  
+
+signature constructors 
+
+	CompileFlag : Flag 
+	
+	CurrentlyCompilingFlag : CompileFlag
+	
+	CompiledModuleFlag : CompileFlag 
+	
+	AnalyzedPackageFlag : CompileFlag
+	
+	AnalyzedModuleFlag : CompileFlag
+	
+	ReinitCompileSessionFlage : CompileFlag
+	
+	ResolvedExternalArtifactFlag : Namespace ->  CompileFlag 		 
+		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/store-imports.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/store-imports.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/store-imports.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -11,92 +11,113 @@
 	utils/annotations
 	utils/path
 	utils/debug  
+	utils/contract
 
 rules 			
 	
 	// Reference Resolving 
-	resolve-package-references = 
+	resolve-package-references =
 		?list-of-package-tqnames;
 		<list-loop(
-			// Get the list of enclosed modules
-			// and then get module declarations
+			// Get the list of enclosed modules	and gets module definitions
 			// Afterwards, from the declarations, import references are resolved.
-			where(<debug-compiler>$[ resolve-package-references |  Currently working on package : [<pp-aterm>]]);
-			get-enclosed-modules; 
-			get-module-declarations;
-			origin-track-forced(map(store-import-references))
+			dbg-compiler(!$[resolve-package-references |  Currently working on package : [<print-as-string>]]);
+			get-enclosed-dirty-modules; 
+			get-module-definitions;
+			with-spxverify(
+				map(
+				 verify(?Module(_,_,_) | <id> , "Module(_,_,_) @resolve-package-references") 
+				 ; store-module-import-references
+			  )
+			  , !"store-module-import-references failed"
+		  )
 		<+
-			where(<debug-compiler>$[resolve-package-references | Failed to resolve package refernece:[<pp-aterm>]]);fail
+			dbg-compiler(!$[resolve-package-references | Failed to resolve package refernece : [<print-as-string>]])
+			; fail
 		)>list-of-package-tqnames
 		<+ 
-		<debug-compiler>$[resolve-package-references | Failed to resolve package referneces:[<pp-aterm>]];fail
-		
+		dbg-compiler(! $[resolve-package-references | Failed to resolve package referneces:[<print-as-string>]])
+		; fail
 
 
+// TODO IMPROVE : Merge it with normalize-all 
 rules
-	store-import-references: m at Module(attrb*,modname,section*) -> Module(attrb*,modname,resulting-section*)
-		with 
-			!modname => SPXModuleName(<id>);
-			 <debug-symboltable>$[ImportReferenceResolver| store-import-references|Resolving import references for module : [<pp-aterm>]] 
+  store-module-import-references: 
+    m at Module(attr,modname,section*) -> Module(attr,modname,resulting-section*)
+		where 
+			with-spxverify( 
+				!modname => SPXModuleName(<id>)
+				; dbg-symboltable(! $[store-import-declaration| store-import-references|Resolving import references for module : [<print-as-string>]] |"Index" , <debug-level-INFO>) 
+				, !$[Failed to initialize ::store-module-import-references]
+		  )			
 		where
 			Package(package-qname) :=<get-annotation(get-package-annotation)>modname// get package-name from the modname
 		where 
 			{| GetEnclosingPackageName, current-source-directory, GetEnclosingModuleName:
-					rules(
-						GetEnclosingPackageName      := package-qname //TODO refactor: most likely it is no longer needed 
-						GetEnclosingModuleName			 := modname 				
-						current-source-directory     := <get-module-untyped-qname;
-																					   DeclaredModule;
-																					   dirname
-																				    >(package-qname, modname)
+					with-spxverify(
+						rules(
+							GetEnclosingPackageName      := package-qname //TODO refactor: most likely it is no longer needed 
+							GetEnclosingModuleName			 := modname 				
+							current-source-directory     := <get-module-typed-qname; get-module-uri; dirname> (package-qname, modname) 
+						)
 					)
-					;<alltd(store-import-declaration(|<GetEnclosingPackageName>))> section* => resulting-section*
-					;!Module(attrb*,modname,resulting-section*) => modifiedModuleDescription
-					;<store-declaration(|Modules())>(<get-module-untyped-qname>(package-qname, modname),  modifiedModuleDescription) //updating with import reference annotation	 
+					; <alltd(store-import-declaration(|<GetEnclosingPackageName>))> section* => resulting-section*
+					; !Module(attr,modname,resulting-section*) => modifiedModuleDescription
 			|}
 			
 	store-import-declaration(|enclosing-namespace-qname): 
 		i at ImportPackage(qname at QName(package-qname-parts*)) -> annotated-import-decl
 		where
-			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing package reference :[<pp-aterm>]]
+			dbg-symboltable(!$[store-import-declaration| store-import-declaration|storing package reference :[<print-as-string>]] | "Index" , <debug-level-INFO> )
 		where 
-			if <DeclaredPackage>qname then
+			if <get-package-declaration> qname then
 				<store-spx-import-declaration(|enclosing-namespace-qname)> Package(qname)
 				;annotated-import-decl:= i
 			else
 				annotated-import-decl:= <add-annotation(|Unresolved())>i
-				;<debug-symboltable>$[ImportReferenceResolver| store-import-declaratio|Failed to resolve following import : [<pp-aterm>]]	
-	 		end
+				; dbg-symboltable(!$[store-import-declaration|Failed to resolve following import : [<print-as-string>]] | "Index" , <debug-level-WARNING> )
+			end
 	
 	store-import-declaration(|enclosing-namespace-qname) :
 		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <store-import-declaration(|enclosing-namespace-qname)>ImportSpxModule(QName([package-name]), SPXModuleName(modname)) 
+	
 		 
 	store-import-declaration(|enclosing-namespace-qname) :
 		i at ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> annotated-import-decl 
 		where 
-			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing module reference : [<pp-aterm>]]
-		with
-			module-qname := <get-module-untyped-qname> (package-qname-parts , modname)			//TODO: construct modules qualified name
-		where 
-			if <DeclaredModule>module-qname then
-					<store-spx-import-declaration(|enclosing-namespace-qname)> Module(module-qname)
+			dbg-symboltable(!$[store-import-declaration|storing module reference : [<print-as-string>]] | "Index" , <debug-level-INFO> )
+			; with-spxverify(
+					 moduleId:= <get-module-typed-qname> (package-qname-parts , modname)
+			 		, "failed to get the module id @store-import-declaration"
+			 	)
+		where 
+			if <get-module-uri>moduleId then
+			  
+			     // TODO : Remove module import references
+			     // instead, use Package typed qualified name 
+			     //------------------------------------------------------------------------------
+			     // DESIGN ISSUE : initial designed to support more finer grained imports 
+			     // so that language composition conflicts is reduced. But current implementation
+			     // so far does not support it due to simplifying the analysis.   
+			     //-----------------------------------------------------------------------------
+					<store-spx-import-declaration(|enclosing-namespace-qname)> moduleId
 					;annotated-import-decl:= i
 			else
 					annotated-import-decl:= <add-annotation(|Unresolved())>i
-					;<debug-symboltable> $[Store-import-declaration| Warning |Failed to resolve following import : [<pp-aterm>]]	
+					; dbg-symboltable(! $[Store-import-declaration| Warning | Failed to resolve following import : [<print-as-string>]] |"Index" , <debug-level-WARNING>)	
 		 	end		
 		 
 		// Store import references in the 2nd pass of the traversals
 	store-import-declaration(|enclosing-namespace-qname):
 		i at ImportPackage(Name(package-name)) -> annotated-import-decl
 		where 
-			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing reference : [<pp-aterm>]]
+			dbg-symboltable(! $[store-import-declaration| store-import-declaration|storing reference : [<print-as-string>]] |"Index" , <debug-level-INFO>)
 		where 
-			if <DeclaredPackage>QName([package-name]) then
+			if <get-package-declaration> QName([package-name]) then
 				<store-spx-import-declaration(|enclosing-namespace-qname)> Package(QName([package-name]))
 				;annotated-import-decl:= i 			
 			else
-				// Seems like package-name is not declared as a SPX package 
+				// It seems like package-name is not declared as a SPX package 
 				// Hence, looking for it in the file system as any external/legacy
 				// artifact.   
 				result:= <store-import-declaration(|enclosing-namespace-qname)>ImportLegacyArtifact(Name(package-name))
@@ -110,46 +131,37 @@
 				end	  
 			end 
 
-	store-import-declaration(|enclosing-namespace):
+  // All the legacy imports are scoped to pacakge level . With one exception for libstratego-lib which is included in global level. I.e. 
+  // all the packaged in the current project can use it without even importing it . 
+  // To specify more such global imports , mention it in compile-legacy-artifacts in compile.str
+  // Todo : plan is to make it configurable in config file so that user can also configure it. 
+  store-import-declaration(|enclosing-namespace):
 		i at ImportLegacyArtifact(Name(modulename))  -> annotated-import-decl 
 		where 
-			<debug-symboltable>$[ImportReferenceResolver| store-import-declaration|storing leagacy/external artifact reference : [<pp-aterm>]]
+			dbg-symboltable(! $[store-import-declaration| store-import-declaration|storing leagacy/external artifact reference : [<print-as-string>]] |"Index" , <debug-level-INFO>)
 		where 
 			resolved-path := <resolve-legacy-import-path(|<current-source-directory>)>modulename
-			;if (!resolved-path => Unresolved()) then 
-				<debug-symboltable>$[SymbolTable|storing enclosing imports reference| FAIL <UsingLegacyArtifacts>: [<pp-aterm>i]]
-				;annotated-import-decl :=  <add-annotation(|Unresolved())>i
-				;ns := Globals() // TODO :  Make it consistent. currently some DR is using Typed QName , others using UnTyped 
+			; if (!resolved-path => Unresolved()) then 
+			 		dbg-symboltable(! $[SymbolTable|storing enclosing imports reference| FAIL <UsingLegacyArtifacts>: [<print-as-string>i]] |"Index" , <debug-level-WARNING>)
+			  	; annotated-import-decl :=  <add-annotation(|Unresolved())>i
+					; ns := Package(enclosing-namespace)  
 			else
-				ns := Package(enclosing-namespace); // TODO :  Make it consistent. currently some DR is using Typed QName , others using UnTyped
-				annotated-import-decl :=  i
+				ns := Package(enclosing-namespace) 
+				; annotated-import-decl :=  i
 			end	
-		with
-			rules(
-					UsedLegacyArtifacts:   (ns , modulename) -> resolved-path
-					UsingLegacyArtifacts:+  enclosing-namespace	   -> (ns, Module(Name(modulename)), resolved-path)    
-				)
-			;<debug-symboltable>$[ImportReferenceResolver| storing enclosing imports reference| <UsingLegacyArtifacts>: [<pp-aterm>enclosing-namespace]-> [<pp-aterm>(Globals(), Module(Name(modulename)), resolved-path)]]
+			; with-spxverify(
+			  	<index-import>(ns,[(ns, Module(Name(modulename)), resolved-path)])
+			  	; dbg-symboltable(! $[store-import-declaration| storing enclosing imports reference| <UsingLegacyArtifacts>: [<print-as-string>enclosing-namespace]-> [<print-as-string>(Globals(), Module(Name(modulename)), resolved-path)]] |"Index" , <debug-level-INFO>)
+	    	)
+		    
 			
 	store-spx-import-declaration(|importedby-package): 
-		imported -> imported
+		imported-typed-namespace -> imported-typed-namespace
 		where 
-			!importedby-package => QName(_)
-		where 
-			module-untyped-qname := <get-module-untyped-qname>(importedby-package , <GetEnclosingModuleName>);
-			rules (
-				UsedBy:+ imported   -> importedby-package  
-				Using :+ (importedby-package, module-untyped-qname) -> imported 
-			)
+			!importedby-package => QName(_);
+			ns := <get-module-typed-qname> (importedby-package , <GetEnclosingModuleName>) ;
+		  <index-import>(ns, [imported-typed-namespace])
 		where
-			<debug-symboltable>$[ImportReferenceResolver| storing enclosing imports reference| <Using>: ([<pp-aterm>importedby-package] , [<pp-aterm>module-untyped-qname])-> [<pp-aterm>imported]]
-		
-rules 
-	record-legeacy-global-import-is-resolved =
-		?(ns,  modulename);
-		if  <UsedLegacyArtifacts>(ns,  modulename) => Unresolved() then
-			with(
-				rules( UsedLegacyArtifacts:(ns, modulename) -> Resolved())
-			)				
-		end
-	
\ No newline at end of file
+			dbg-symboltable(! $[store-import-declaration| storing enclosing imports reference| <Using>: ([<print-as-string>importedby-package] , [<print-as-string><GetEnclosingModuleName>])-> [<print-as-string>]]|"Index" , <debug-level-INFO>)
+
+

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -1,156 +1,286 @@
-module context/str/declare
-
-imports
-	libstrc		
-	libstratego-lib
- 	libstratego-gpp
-	libstratego-aterm
-imports
-	lib/editor-common.generated
-	include/SpoofaxLang
-imports	
-	utils/sourcedir
- 	utils/debug
- 	common 
-	config 
-imports 
-	context/-
-	normalize/-
-	context/str/signature-generator
-	spoofaxlang  
-
-
-
-rules 
-	is-declared-stratego: x -> <id>
-	where
-		is-string; 
-		(x-signature-name,  _ , _) := <signature-of> x;
-		package-qt-name := <GetEnclosingPackageName>
-	where
-		resolve-symbol-declarations-internal(all-keys-DeclareCookie, 
-																				 bagof-DeclareCookie,
-																				 (?( package-qt-name  , _ , _) ;?(_, _ , (x-signature-name,_,_)) + (?(Globals() ,  _) ; ?(_, (x-signature-name,_,_)))) 
-																				)
-	  ;is-not-empty-list
-	<+
-		GetEnclosingPackageName => Package(untyped-package-qname);
-		GetEnclosingModuleName  => Module(untyped-module-qname);
-		<get-all-usings>( untyped-package-qname , untyped-module-qname) => imported-typedqname*;		
-		<resolve-imported-symbol-declarations'(all-keys-DeclareCookie  , bagof-DeclareCookie, ?(_, _ , (x-signature-name,_,_)))>imported-typedqname*
-		
-rules 
-	getStrDeclaration = 
- 		?cookie; 
- 		<to-scoped-symbol;resolve-symbol-declarations(all-keys-STRDeclaration, bagof-STRDeclaration);last>cookie 
- 	<+
- 		<debug-declaration(| "STR" , "Warning" )> $[Failed to retrive STRDeclaration for cookie [<pp-aterm-forced><to-scoped-symbol>]];
- 		fail
-	
-	getCookie =
-			?sig; 
- 			<to-scoped-symbol;resolve-symbol-declarations(all-keys-DeclareCookie, bagof-DeclareCookie);last>sig
- 		<+
- 			<debug-declaration(| "STR" , "Warning" )> $[Failed to retrive DeclareCookie for signature [<pp-aterm>]];
- 			fail
-	 
-rules 
-	
-	is-constructor =
-    (?(_, _); getCookie; getStrDeclaration <+ declaration-of);
-    (?OpDecl(_, _) + ?ExtOpDecl(_, _))
-
-  
-  is-congruence-signature:
-    (x, s, 0) -> (x, s, [])
-    where
-      <getCookie> (x, s)   
+module context/str/declare
+
+imports
+	libstrc		
+	libstratego-lib
+ 	libstratego-gpp
+	libstratego-aterm
+imports
+	lib/editor-common.generated
+	include/SpoofaxLang
+imports	
+	utils/sourcedir
+ 	utils/debug
+ 	utils/contract
+ 	common 
+	config 
+imports 
+	context/-
+	normalize/-
+	context/str/signature-generator
+	spoofaxlang  
+
+rules 
+	verify-declared-stratego = 
+		verify(String | <id> , "String @is-declared-stratego"); 
+		<verify-symbol-exists>(<id> , STRSignature())
+	<+
+    dbg-analysis(! $[Failed verify-declared-stratego  id [<print-as-string>]] 
+                      | "STR|verify-declared-stratego" , "Warning" )  
+    ; fail
+	
+	is-declared-stratego(s) = 	
+		 one(
+        ( ?<id>
+        + ?SVar(<id>))
+        ; resolve-str-signatures
+        ; filter(s)
+        ; is-not-empty-list  
+     )
  
+rules 
+	//TODO fix : also check derieved signatures 
+	is-constructor =
+    (?(_, _); resolve-str-cookie; resolve-str-declaration <+ declaration-of);
+    (?OpDecl(_, _) + ?ExtOpDecl(_, _))
+    
+    //TODO FIX: 
+    //<+ ?(name, #of arguments) ; gets signature contructor from declare - signature ; verify it has the same arity 
+  
+  is-congruence-signature:
+    (x, s, 0) -> (x, s, [])
+    where
+      <resolve-str-cookie> (x, s)   
+  
   declare-cookie-of =
-    signature-of; getCookie
-
+    signature-of
+    ; resolve-str-cookie
+    
   declaration-of =
-    signature-of; (?_{<getStrDeclaration>} <+ ?(_{<getStrDeclaration>}, _) <+ ?(_{<getStrDeclaration>}, _, _))
-
+    signature-of 
+    ; (  ?_{<resolve-str-declaration>} 
+  	 	<+ ?(_{<resolve-str-declaration>}, _) 
+  	 	<+ ?(_{<resolve-str-declaration>}, _, _)
+ 	  )
+ 	 
+ 
 rules 
   
+  // TODO : get-rid of scoping symbol as it is automatically handle in new symboltable structure  
   declare-definition:
     def -> cookie
     with
-      sig := <signature-of>
-      ;if not(<getCookie> sig) then
-         cookie := <newterm>
-        ;scoped-cookie :=<to-scoped-symbol> cookie
-        ;scoped-sig    :=<to-scoped-symbol> sig
-        ;rules(
-          DeclareCookie:  scoped-sig  -> cookie
-          STRDeclaration: scoped-cookie  -> def
-        )
-        ;<debug-declaration(| "STR|declare-definition" , "Info" )> $[Storing DeclareCookie : [<pp-aterm>scoped-sig] -> [<pp-aterm>cookie]]
-				;<debug-declaration(| "STR|declare-definition" , "Info" )> $[Storing STRDeclaration : [<pp-aterm>scoped-cookie] -> [<pp-aterm>def]]      
-      else
-       	cookie := <getCookie> sig 
+      sig := <signature-of>
+      ; scoped-sig    :=<to-scoped-symbol> sig
+      ; if not(<DeclareCookie>scoped-sig  <+ <resolve-str-cookie> sig) then
+          cookie := <newterm>
+          ; scoped-cookie :=<to-scoped-symbol> cookie
+          ; rules(
+              DeclareCookie:  scoped-sig  -> cookie
+              STRDeclaration: scoped-cookie  -> def
+            )
+		      ; dbg-declaration(! $[Storing DeclareCookie : [<print-as-string>scoped-sig] -> [<print-as-string>cookie]]
+		                        | "STR|declare-definition" , <debug-level-INFO> ) 
+				  ; dbg-declaration(! $[Storing STRDeclaration : [<print-as-string>scoped-cookie] -> [<print-as-string>def]]  
+				    								| "STR|declare-definition" , <debug-level-INFO> )      
+      else
+       	  cookie := <resolve-str-cookie> sig 
       end
-		
+		
 
   redeclare-definition:
     def -> cookie
-    with
-    	 sig := <signature-of>
-      ;cookie := <newterm>
-      ;scoped-cookie :=<to-scoped-symbol> cookie
-      ;scoped-sig    :=<to-scoped-symbol> sig
-      ;rules(
-        DeclareCookie:  scoped-sig    -> cookie
-        STRDeclaration: scoped-cookie -> def
-      )
-		where
-			<debug-declaration(| "STR|redeclare-definition" , "Info" )> $[Storing DeclareCookie : [<pp-aterm>scoped-sig] -> [<pp-aterm>cookie]]
-			;<debug-declaration(| "STR|redeclare-definition" , "Info" ) >$[Storing STRDeclaration : [<pp-aterm>scoped-cookie] -> [<pp-aterm>def]]      
-  
+    with sig := <signature-of>
+      ; cookie := <newterm>
+      ; scoped-cookie :=<to-scoped-symbol> cookie
+      ; scoped-sig    :=<to-scoped-symbol> sig
+      ; rules(
+         DeclareCookie:  scoped-sig    -> cookie
+         STRDeclaration: scoped-cookie -> def
+       )
+   where
+   	dbg-declaration(! $[Storing DeclareCookie : [<print-as-string>scoped-sig] ->    [<print-as-string>cookie]]  
+				    								| "STR|redeclare-definition" , <debug-level-INFO> )
+		; dbg-declaration(! $[Storing STRDeclaration : [<print-as-string>scoped-cookie] -> [<print-as-string>def]]  
+				    								| "STR|redeclare-definition" , <debug-level-INFO> )
+				    										    						       
+  
   external SRTS-EXT-newint(|)
+
+
+rules 
+  
+  index-str-declarations = 
+    dbg-declaration(! $[indexing Stratego Declarations : [<print-as-string><all-keys-STRDeclaration>]]  
+    								| "STR|index-str-declarations " , <debug-level-INFO> );
+		<list-loop(
+        { 
+          ?cookie
+          // Indexing (cookie, STRDef) -> StrDefinition
+          ; dbg-declaration(! $[Indexing: [<print-as-string>cookie] -> STRDef()  ->  [<print-as-string><STRDeclaration>cookie]] | "STR|index-str-declarations " , <debug-level-INFO> ) 
+          ; <index-symbol-definition>(cookie, STRDef() ,  <STRDeclaration>cookie)
+        } 
+      )><all-keys-STRDeclaration>
+      
+  
+  //TODO FIX : strip all the scope . Better not to enclode it with scope.
+  index-str-cookies =      
+  	dbg-declaration(! $[indexing Stratego cookies  : [<print-as-string><all-keys-DeclareCookie>]]  
+    								| "STR|index-str-cookies" , <debug-level-INFO> );
+    <list-loop(
+	    { ?sig
+	      // Indexing (sig, StrCookie) -> cookie 
+	      ; dbg-declaration(! $[Indexing: [<print-as-string>sig] -> STRCookie() ->  [<print-as-string><DeclareCookie>sig]] | "STR|index-str-cookies" , <debug-level-INFO>)  
+	      ; <index-symbol-definition>(sig, STRCookie() ,  <DeclareCookie>sig)
+	      ; <remove-scope-from-symbol; ?sig'; signature-to-declaration-id>sig => str-id
+	      ; dbg-declaration(! $[Indexing: [<print-as-string>str-id] -> STRSignature() ->  [<print-as-string>sig]] | "STR|index-str-cookies" , <debug-level-INFO>)
+        ; <index-symbol-definition>(str-id, STRSignature() , sig')  
+	    }
+    )><all-keys-DeclareCookie>  
+ 
+  resolve-str-declaration =
+    ? cookie
+  	; ( <STRDeclaration> <to-scoped-symbol> cookie
+	  	<+
+    		<resolve-symbol-definition>( <id>, STRDef())
+    		; dbg-declaration(!$[[<print-as-string>cookie] -> STRDef() ->  [<print-as-string><id>]] | "STR|resolve-str-declaration" , <debug-level-INFO> )
+    	)	   
+  <+
+    dbg-declaration(!$[Failed to retrive STRDef for cookie [<print-as-string><to-scoped-symbol>]]| "STR|resolve-str-declaration" , "Warning" ) 
+    ; fail
+    
+  resolve-str-cookie =
+    ?sig ;
+    (	<DeclareCookie> <to-scoped-symbol> sig 
+    	<+	
+    	<resolve-symbol-definition>( <id>, STRCookie())
+    	; dbg-declaration(! $[resolve-str-cookie: [<print-as-string>sig] -> STRCookie() ->  [<print-as-string><id>]] | "STR|resolve-str-cookie" , <debug-level-INFO>)
+    )  
+  <+
+    dbg-declaration(!$[Failed to retrive STRCookie for signature [<print-as-string><to-scoped-symbol>]]| "STR|resolve-str-cookie" , "Warning") 
+    ; fail
+  
+  resolve-str-signatures =
+    ?key
+    ; verify(String | key , "String @resolve-str-signatures")
+    ; <resolve-all-symbol-definitions>( <id>, STRSignature())
+    ; dbg-declaration(! $[[<print-as-string>key] -> STRSignature() ->  [<print-as-string><id>]] 
+                      | "STR|resolve-str-signatures" , <debug-level-INFO> )
+  <+
+    dbg-declaration(! $[Failed to retrive STRSignatures* for id [<print-as-string><to-scoped-symbol>]] 
+                      | "STR|resolve-str-signatures" , "Warning" )
+    ; fail
+      
+  resolve-str-signature =
+    ?key
+    ; verify(String | key , "String @resolve-str-signatures")
+		; <resolve-symbol-definition>( <id>, STRSignature())
+  	; dbg-declaration(! $[resolve-str-signature: [<print-as-string>key] -> STRSignature() ->  [<print-as-string><id>]] 
+	                      | "STR|resolve-str-signature" , <debug-level-INFO> )  
+  <+
+    dbg-declaration(! $[Failed to retrive STRSignature for id [<print-as-string><to-scoped-symbol>]] 
+                      | "STR|resolve-str-signature" , "Warning" )  
+    ; fail 
+  
+rules
+  declare-legacy-str-imports = 
+    activate-global-scope(
+      declare-rules(declare-stratego-globals-top)
+    )
+     
+  // declare all the strategy the rule definition inside 
+  // current rules or strategies block. 
+  // inaddition it also stores it in the symbol table.
+  declare-rules(s) = 
+    ?list-str-def*
+    ; dbg-declaration(! "------------new str analysis" | "STR" , <debug-level-INFO>) 
+    ; with-spxverify(
+	     {| DeclareCookie,  STRDeclaration
+	      : <s>list-str-def* => analyzed-str-defs*
+	      ; index-str-declarations
+	      ; index-str-cookies
+	      |} 
+      )
+  	; !analyzed-str-defs*
   
-rules 
+  // Activating internal scope for the current enclosing package 
+  // it actually overrides current module scope and activate 
+  // internal scope to store internal strategies and rules 
+  activate-stratego-internal-scope(s) =
+    with-spxverify(
+    	activate-internal-scope( 
+        declare-rules(s)
+      ) 
+    )
+      
+strategies 
 	
-	declare-str-definition-main =  declare-bodies-top
-		
-		 
-	declare-stratego-globals-top =
-    if not(NoAnalysis) then
-    		alltd(declare-str-definition)
-    end
+	declare-stratego-globals-top = alltd(declare-str-definition) 
+   
+rules
+
+  // Analyzing all the rules and strategies block and store the Declarations  
+  // in symbol table.
+  declare-str-definition : 
+    InternalStrategies(str-defs*) -> InternalStrategies(analyzed-str-defs*)
+    where 
+      <activate-stratego-internal-scope(
+          declare-stratego-globals-top
+        )
+      >str-defs*  =>analyzed-str-defs*
+
+  declare-str-definition : 
+    InternalRules(str-defs*) -> InternalRules(analyzed-str-defs*)
+    where 
+      <activate-stratego-internal-scope(
+          declare-stratego-globals-top
+        )
+      >str-defs*  =>analyzed-str-defs*
+
+  declare-str-definition : 
+    Rules(str-defs*) -> Rules(analyzed-str-defs*)
+    where 
+      <declare-rules(declare-stratego-globals-top)>str-defs*  =>analyzed-str-defs* 
+
+  declare-str-definition : 
+    Strategies(str-defs*) -> Strategies(analyzed-str-defs*)
+    where 
+      <declare-rules(declare-stratego-globals-top)>str-defs*  =>analyzed-str-defs*
 
+       
+rules
+  
   declare-str-definition:
     SDefT(x, s*, t*, s) -> SDefT(x', s*, t*, s')
-    with
-    	x' := x{<declare-definition>};
-      s' := <topdown(try(declare-dynrule))> s
-	
-	declare-str-definition:
-    OpDecl(x, t) -> OpDecl(x', t)
-    with
-      cookie := <redeclare-definition>;
-      x'     := x{cookie}
-    with
-      // Declare congruence
-      (x'', n) := <signature-of>;
-      sig'     := (x'', n, 0);
-      scoped-sig'  :=<to-scoped-symbol> sig';
-      rules(
-        DeclareCookie: scoped-sig' -> cookie
-      )
-    where
-    	<debug-declaration(| "STR" , "Info" )>$[declare-str-definition [<pp-aterm>]| Storing DeclareCookie : [<pp-aterm>scoped-sig'] -> [<pp-aterm>cookie]]  
-  
+    with
+    	x' := x{<declare-definition>};
+      s' := <topdown(try(declare-dynrule))> s
+	
+	declare-str-definition:
+    OpDecl(x, t) -> OpDecl(x', t)
+    with
+      cookie := <redeclare-definition>;
+      x'     := x{cookie}
+    with
+      // Declare congruence
+      (x'', n) := <signature-of>;
+      sig'     := (x'', n, 0);
+      scoped-sig'  :=<to-scoped-symbol> sig';
+      rules(
+        DeclareCookie: scoped-sig' -> cookie
+      )
+    where
+    	dbg-declaration(! $[declare-str-definition [<print-as-string>]| Storing DeclareCookie : [<print-as-string>scoped-sig'] -> [<print-as-string>cookie]] | "STR" , <debug-level-INFO> )  
+  
    declare-str-definition:
     ExtSDef(x, s*, t*) -> <id>
     with
       redeclare-definition
-	
-  declare-str-definition:
-    ExtOpDecl(x, t) -> <id>
-    with
-     redeclare-definition
+	
+  declare-str-definition:
+    ExtOpDecl(x, t) -> <id>
+    with
+     redeclare-definition
 	
   declare-str-definition:
     Overlay(x, t, d) -> Overlay(x', t, d)
@@ -160,20 +290,20 @@
     with
       // Declare congruence
       (x'', n)     := <signature-of>;
-      sig'         := (x'', n, 0);
+      sig'         := (x'', n, 0);
       scoped-sig'  :=<to-scoped-symbol> sig';
       rules(
         DeclareCookie: scoped-sig'   -> cookie
-      )
-    where
-    	<debug-declaration(| "STR" , "Info" )>$[declare-str-definition [<pp-aterm>] | Storing DeclareCookie : [<pp-aterm>scoped-sig'] -> [<pp-aterm>cookie]]  
-    
+      )
+    where
+    	dbg-declaration(!$[declare-str-definition [<print-as-string>] | Storing DeclareCookie : [<print-as-string>scoped-sig'] -> [<print-as-string>cookie]] | "STR" , <debug-level-INFO> )
+    	
     
   declare-dynrule:
     dec @ RDecT(x, s*, t*) -> RDecT(x', s*, t*)
     where
       not(!x => COMPLETION(_))
-    with
+    with
     	x' := x{<declare-cookie-of>}
     <+
       cookie := <newterm>;
@@ -181,58 +311,74 @@
       s'* := <length> s*;
       t'* := <length> t*;
       sig := (x, s'*, t'*);
-      scoped-cookie :=<to-scoped-symbol> cookie;
-      scoped-sig    :=<to-scoped-symbol> sig;
-      scoped-x      :=<to-scoped-symbol> x;
+      scoped-cookie :=<to-scoped-symbol> cookie;
+      scoped-sig    :=<to-scoped-symbol> sig;
+      scoped-x      :=<to-scoped-symbol> x;
       rules(
         DeclareCookie:  scoped-sig    -> cookie
         DeclareCookie:  scoped-x      -> cookie
         STRDeclaration: scoped-cookie -> dec
       );
       // See https://svn.strategoxt.org/repos/StrategoXT/strategoxt/trunk/strc-core/lib/stratego/strc/front/lift-dynamic-rules.str
-      <declare-dr-rule(|x, cookie, 0, 2)> "new";
-      <declare-dr-rule(|x, cookie, 0, 1)> "undefine";
-      <declare-dr-rule(|x, cookie, s'*, <inc> t'*)> "aux";   // FIXME: dependent on number of free variables in lhs
-      <declare-dr-rule(|x, cookie, <inc> s'*, t'*)> "reverse-bagof";
-      <declare-dr-rule(|x, cookie, 1, 0)> "innermost-scope";
-      <map(declare-dr-rule(|x, cookie, s'*, <inc> t'*))>
-        ["break-to-label","continue-to-label"];
-      <declare-dr-rule(|x, cookie, <inc> s'*, <inc> t'*)> "throw";
-      <map(declare-dr-rule(|x, cookie, <inc> s'*, t'*))>
-        ["fold", "bigfold"];
-      <map(declare-dr-rule(|x, cookie, s'*, t'*))>
+      <declare-dr-rule(|x, cookie, 0, 2)> "new";
+      <declare-dr-rule(|x, cookie, 0, 1)> "undefine";
+      <declare-dr-rule(|x, cookie, s'*, <inc> t'*)> "aux";   // FIXME: dependent on number of free variables in lhs
+      <declare-dr-rule(|x, cookie, <inc> s'*, t'*)> "reverse-bagof";
+      <declare-dr-rule(|x, cookie, 1, 0)> "innermost-scope";
+      <map(declare-dr-rule(|x, cookie, s'*, <inc> t'*))>
+        ["break-to-label","continue-to-label"];
+      <declare-dr-rule(|x, cookie, <inc> s'*, <inc> t'*)> "throw";
+      <map(declare-dr-rule(|x, cookie, <inc> s'*, t'*))>
+        ["fold", "bigfold"];
+      <map(declare-dr-rule(|x, cookie, s'*, t'*))>
         ["once", "bagof", "bigbagof", "all-keys", "innermost-scope", "break", "break-bp", "continue", "chain", "bigchain"]
 
-   declare-dr-rule(|x,cookie,s,t) =
-    ?prefix;
-    sig := ($[[prefix]-[x]], s, t);
-    scoped-sig := <to-scoped-symbol> sig;
-    rules(DeclareCookie: scoped-sig -> cookie);
-		where(<debug-declaration(| "STR" , "Info" )>$[declare-dr-rule [<pp-aterm>prefix]| Storing DeclareCookie : [<pp-aterm>scoped-sig] -> [<pp-aterm>cookie]])  
-  
-
-  dr-scope-declare-cookies(defs, s):
-    t -> t'
-    with
-      defs        := <defs>;
-      old-cookies := <map(!(<signature-of>, <declare-cookie-of <+ !()>))>;
-      t'          := <s> t;
-      <list-loop({
-        ?(sig, cookie);
-        if !cookie => () then
-        	scoped-sig    :=<to-scoped-symbol> sig;
-          rules(DeclareCookie :- scoped-sig)
-        else
-        	scoped-sig    :=<to-scoped-symbol> sig;
-          rules(DeclareCookie : scoped-sig -> cookie)
-        end
-       })> old-cookies
-
-rules // Declarations inside definition bodies
+   declare-dr-rule(|x,cookie,s,t) =
+   	?prefix
+    ; sig := ($[[prefix]-[x]], s, t)
+    ; scoped-sig := <to-scoped-symbol> sig
+    ; rules(DeclareCookie: scoped-sig -> cookie)
+		; dbg-declaration(! $[declare-dr-rule [<print-as-string>prefix]| Storing DeclareCookie : [<print-as-string>scoped-sig] -> [<print-as-string>cookie]]
+		                  | "STR" , <debug-level-INFO> )  
+  
+strategies 
+  
+  // Declarations inside definition bodies , i.e., analyzing strategies local declarations
+  declare-str-local-definition-main =  declare-bodies-top 
+  
+  declare-bodies-top = alltd(declare-bodies)
 
-  declare-bodies-top =
-    alltd(propose-completion <+ declare-bodies)
+rules
+    
+  declare-bodies: 
+    InternalRules(str-defs*) -> InternalRules(analyzed-str-defs*)
+    where 
+      <activate-stratego-internal-scope(
+          declare-bodies-top
+        )
+      >str-defs*  =>analyzed-str-defs*
+       
+
+  declare-bodies: 
+    InternalStrategies(str-defs*) -> InternalStrategies(analyzed-str-defs*)
+    where
+	    <activate-stratego-internal-scope(
+          declare-bodies-top
+        )
+      >str-defs*  =>analyzed-str-defs*
+             
+  declare-bodies: 
+    Rules(str-defs*) -> InternalRules(analyzed-str-defs*)
+    where 
+      <declare-rules(declare-bodies-top)>str-defs*  =>analyzed-str-defs* 
+
+  declare-bodies: 
+    Strategies(str-defs*) -> Strategies(analyzed-str-defs*)
+    where 
+      <declare-rules(declare-bodies-top)>str-defs*  =>analyzed-str-defs*
 
+rules
+        
   declare-bodies:
     SDefT(x, s*, t*, s) -> SDefT(x, s'*, t'*, s')
     with
@@ -288,9 +434,13 @@
       {| DeclareCookie:
         with(
           tvars;
-          list-loop({
-            sig := (<id>, 0); scoped-sig := <to-scoped-symbol>sig; rules(DeclareCookie :- scoped-sig)
-          })
+          list-loop(
+            {
+              sig := (<id>, 0)
+              ; scoped-sig := <to-scoped-symbol>sig
+              ; rules(DeclareCookie :- scoped-sig)
+            }
+          )
         );
         s' := <declare-bodies-top> s
       |}
@@ -299,10 +449,16 @@
     Scope(v*, s) -> Scope(v*, s')
     with
       {| DeclareCookie:
-        <list-loop({ sig := (<id>, 0);scoped-sig:=<to-scoped-symbol> sig;  rules(DeclareCookie :- scoped-sig)})> v*;
-        s' := <declare-bodies-top> s
+        <list-loop(
+	          { 
+	            sig := (<id>, 0)
+	            ; scoped-sig:=<to-scoped-symbol> sig
+	            ; rules(DeclareCookie :- scoped-sig)
+	          }
+          )> v*
+          ;s' := <declare-bodies-top> s
       |}
-
+        
   declare-bodies:
     Match(t) -> Match(t')
     with
@@ -338,7 +494,7 @@
   declare-bodies:
     LabeledDynRuleScopeId(x, t) -> LabeledDynRuleScopeId(x', t')
     where
-      x' := x{<signature-of; getCookie>}; 
+      x' := x{<signature-of; resolve-str-cookie>}; 
       t' := <declare-bodies-top> t
 
   declare-bodies:
@@ -369,14 +525,28 @@
     dec @ VarDec(x, t) -> VarDec(x', t)
     with
       cookie := <newterm>;
-      x'     := x{cookie};
-      scoped-cookie :=<to-scoped-symbol> cookie;
-      //TODO FIX : possibly will result in a bug 
-      scoped-sig    := <to-scoped-symbol><signature-of>x; // getting scoped symbol of x  
+      x'     := x{cookie};
+      scoped-cookie := <to-scoped-symbol> cookie;
+      scoped-sig    := <to-scoped-symbol><signature-of>x;   
       rules(
 	    	DeclareCookie:   scoped-sig -> cookie
-	      STRDeclaration: scoped-cookie  -> dec
-	    )
+	      STRDeclaration:  scoped-cookie  -> dec
+	    );
+	    // HACK: a higher-order strategy can be passed as an argument, 
+      // as in s1(s2), where s2 has arguments.
+      // We overwrite (in local scope) global strategies with signature ?(x,_,_)
+      // Fixes Bug: a{1} = fail; foo(a{2}) = a{2} //NOT a{1}
+      <resolve-str-signatures> x; 
+      filter(declare-svar-signatures(|cookie, x))
+    
+  
+  declare-svar-signatures(|cookie, svar-name):
+    key@(svar-name,_ ,_) -> key
+    where 
+      scoped-sig    := <to-scoped-symbol>key
+    where
+      rules (DeclareCookie: scoped-sig -> cookie)
+   
 	    
   declare-tvar:
     x -> x'
@@ -388,9 +558,8 @@
   declare-tvar:
     VarDec(x, t) -> VarDec(x', t)
     with
-      x' := x{<declare-definition>}
-      
-	//TODO : Check why this rule is failing for var(x)
+      x' := x{<declare-definition>}
+  
   declare-var:
     Var(x) -> Var(x')
     with
@@ -400,9 +569,8 @@
     Var(x{}) -> Var(x')
     where
       x' := x{<declare-cookie-of>}
-
-rules // Uses inside definition bodies
-
+rules 
+  // Uses inside definition bodies
   declare-bodies:
     CallT(SVar(x), s*, t*) -> CallT(SVar(x'), s'*, t'*)
     with
@@ -418,113 +586,139 @@
     where
       x' := x{<declare-cookie-of>}
     <+
-      fail // TODO: special exception for higher-order args
+      // HACK: a higher-order strategy can be passed as an argument, 
+      // as in s1(s2), where s2 has arguments. We can only check if there
+      // is a strategy called s2, independent of the number of
+      // (strategy/term) arguments to s2.
+      // map(to-java) => Call(SVar("map"), [CallNoArgs(SVar("to-java"))])
+      <resolve-str-signatures>x
+      ; filter(?(x,_,_))
+      ; fetch-elem(\key@(x, s*, t*) -> <resolve-str-cookie>\)
+      ; x' := x{<id>}
+      
 
   declare-bodies:
     Op(x, t*) -> Op(x', t'*)
     where
-      x' := x{<declare-cookie-of>}
+      x' := x{<declare-cookie-of>}
     with
       t'* := <declare-bodies-top> t*
-rules 
-
-	// TODO IMPLEMENT IMPORT handling => needs to be moved to the compile-legacy-artifacts
-	// and declare them in GLobal Scope for the furthur analysis
-  open-import(to-signatures):
-    full-path -> ast
-    with
-      ast := <id>
-  
-  declare-str-definition:
-    Import(x) -> Import(x)
-  	with
-	  	if (!x => Name(mName)) then
-  			moduleName := mName 
-  		else
-  			moduleName :=  x 
-  		end
-  	with 
-  		<get-all-declared-entries-by-namespace; map-declarations(declare-stratego-globals-top)>moduleName 
-  	<+	
-  		<open-import(resolve-import-decl, read-stratego-signatures, declare-stratego-globals-top)> moduleName
-    <+
-      rules(IsImportedFailed: moduleName)
-       
-
-  declare-str-definition:
-    ImportWildcard(x) -> ImportWildcard(x)
-   	with
-	  	if (!x => Name(mName)) then
-  			moduleName := mName 
-  		else
-  			moduleName :=  x 
-  		end
-  	with 
-  		<get-declarations-by-namespace; map-declarations(declare-stratego-globals-top)>moduleName 
-  	<+	
-  	  <open-wildcard-import(file-exists <+ resolve-import-path, read-stratego-signatures, declare-stratego-globals-top, has-extension(|"str") + has-extension(|"rtree"))> x
-    <+
-      rules(IsImportedFailed: x)
-
-   resolve-import-decl:
-     x -> full-path
-     where
-       fetch-library-ast; 
-       full-path := x 
-     <+
-       full-path := <resolve-import-path> $[[x].spx]
-     <+
-       full-path := <resolve-import-path> $[[x].str]
-     <+
-       full-path := <resolve-import-path> $[[x].rtree]
-
-   resolve-import-path:
-     x -> full-path
-     where
-        // FIXME: fetch true import paths from someplace
-   			full-path := <file-exists> $[[<get-project-path>]/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/trans/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/lib/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/src/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/syntax/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/syn/[x]]
-     <+ full-path := <file-exists> $[[<get-project-path>]/src/syntax/[x]]
- 
-  fetch-library-ast:
-    x -> <pack-stratego-parse-stratego> (IncludeFromPath(x), [])
-
-	
-  read-stratego-signatures:
-    str -> <to-signatures> file
-    where
-      file := <fetch-library-ast>str
-    <+
-      rtree := <guarantee-extension(|"rtree")>;
-      if <is-newer> (rtree, str) + not(<file-exists> str) + <has-extension(|"rtree")> str then
-        file := <file-exists; ReadFromFile> rtree
-      else
-        file := <parse-stratego-file> str
-      end
-	
-	to-signatures =
-    basic-stratego-desugar-top;
-    topdown(try(remove-stratego-bodies))
-
-
-  remove-stratego-bodies:
-    SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
-    with
-      s' := <collect-all(?RDecT(_, _, _))> s
-   
-  remove-stratego-bodies:
-    Import(_) -> ()
-   
-  remove-stratego-bodies:
-    ImportWildcard(_) -> ()
-
-
-rules 
-
+
+rules 
+  dr-scope-declare-cookies(defs, s):
+    t -> t'
+    with
+      defs        := <defs>;
+      old-cookies := <map(!(<signature-of>, <declare-cookie-of <+ !()>))>;
+      t'          := <s> t;
+      <list-loop(
+        { ?(sig, cookie);
+          if !cookie => () then
+            scoped-sig    :=<to-scoped-symbol> sig;
+            rules(DeclareCookie :- scoped-sig)
+          else
+            scoped-sig    :=<to-scoped-symbol> sig;
+            rules(DeclareCookie : scoped-sig -> cookie)
+          end
+        })
+      >old-cookies
+rules 
+
+	// TODO IMPLEMENT IMPORT handling => needs to be moved to the compile-legacy-artifacts
+	// and declare them in GLobal Scope for the furthur analysis
+  open-import(to-signatures):
+    full-path -> ast
+    with
+      ast := <id>
+  
+  //TODO fix : remove obsolete constructs imports . In legacy str , we dont support transitive imports
+  //hence, in declare str , we dont require to handle imports .
+  declare-str-definition:
+    Import(x) -> Import(x)
+ 	with
+	  	if (!x => Name(mName)) then
+  			moduleName := mName 
+  		else
+  			moduleName :=  x 
+  		end
+  	with 
+  		<open-import(resolve-import-decl, read-stratego-signatures, declare-stratego-globals-top)> moduleName
+    <+
+      rules(IsImportedFailed: moduleName)
+ 
+  declare-str-definition:
+    ImportWildcard(x) -> ImportWildcard(x)
+   	with
+	  	if (!x => Name(mName)) then
+  			moduleName := mName 
+  		else
+  			moduleName :=  x 
+  		end
+  	with 
+  	  <open-wildcard-import(file-exists <+ resolve-import-path, read-stratego-signatures, declare-stratego-globals-top, has-extension(|"str") + has-extension(|"rtree"))> x
+    <+
+      rules(IsImportedFailed: x)
+
+   
+   resolve-import-decl:
+     x -> full-path
+     where
+       fetch-library-ast; 
+       full-path := x 
+     <+
+       full-path := <resolve-import-path> $[[x].spx]
+     <+
+       full-path := <resolve-import-path> $[[x].str]
+     <+
+       full-path := <resolve-import-path> $[[x].rtree]
+
+   resolve-import-path:
+     x -> full-path
+     where
+        // FIXME: fetch true import paths from someplace
+   			full-path := <file-exists> $[[<get-project-path>]/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/trans/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/lib/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/src/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/syntax/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/syn/[x]]
+     <+ full-path := <file-exists> $[[<get-project-path>]/src/syntax/[x]]
+ 
+  fetch-library-ast:
+    x -> <pack-stratego-parse-stratego> (IncludeFromPath(x), [])
+
+	
+  read-stratego-signatures:
+    str -> <to-signatures> file
+    where
+      file := <fetch-library-ast>str
+    <+
+      rtree := <guarantee-extension(|"rtree")>;
+      if <is-newer> (rtree, str) + not(<file-exists> str) + <has-extension(|"rtree")> str then
+        file := <file-exists; ReadFromFile> rtree
+      else
+        file := <parse-stratego-file> str
+      end
+	
+	to-signatures =
+    basic-stratego-desugar-top;
+    topdown(try(remove-stratego-bodies))
+
+
+  remove-stratego-bodies:
+    SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
+    with
+      s' := <collect-all(?RDecT(_, _, _))> s
+   
+  remove-stratego-bodies:
+    Import(_) -> ()
+   
+  remove-stratego-bodies:
+    ImportWildcard(_) -> ()
+
+
+rules 
+
 	// Content completion
   propose-completion:
     completion -> proposals
@@ -544,10 +738,7 @@
         otherwise: // unknown context
           all-signatures' := <filter(not(is-congruence-signature))> all-signatures
       end;
-      proposals := <map(signature-to-proposal)> all-signatures';
-      rules(
-        ContentProposals := proposals
-      )
+      proposals := <map(signature-to-proposal)> all-signatures'
   
   propose-completion:
     Rule(lhs, rhs @ Var(COMPLETION(_)), _) -> proposals
@@ -555,14 +746,14 @@
       <not(oncetd(?RootApp(_) + ?App(_, _)))> lhs
     with
       lhs'      := <topdown(try(\As(_, e) -> e\))> lhs;
-      proposals := [([<pp-stratego-string> lhs'], "") | <propose-completion> rhs];
-      rules(
-        ContentProposals := proposals
-      )
+      proposals := [([<pp-stratego-string> lhs'], "") | <propose-completion> rhs]
+      
   
   filter-by-prefix(|prefix) =
     filter(one(string-starts-with(|prefix); not(?"")))
   
+  //TODO fix for spoofaxlang
+  
   signature-to-proposal:
     (x, 0) -> [x | parentheses]
     with
@@ -600,30 +791,4 @@
   signature-to-proposal:
     (x, [DR_DUMMY()], [DR_DUMMY()]) -> x // strategy param (wildcard arity)
 
-	
-rules 
-	// Projections and lookup
-	analyze-str-ast:
-		(ast, path, project-path) -> ast'
-		with
-			enable-stratego-debugging
-			;rules(
-        		CurrentFileFullPath := $[[project-path]/[path]]
-        )
-      ;<try(get-source-base-dir)>ast
-   		;if <file-exists> $[[project-path]/.disable-global-analysis] then
-    		rules(NoAnalysis: _)
-    	end
-   		;if <file-exists> $[[project-path]/.warn-global-analysis] then
-    		rules(WarnAnalysis: _)
-    	end
-    with
-    	declare-stratego-globals-top //TODO  : Refactor globals-top. Rewriting of the tree is done here.
-     	;ast' := <declare-bodies-top>;
-      rules(
-        DecoratedAst := ast'
-      )
-    where 
-    	disable-stratego-debugging
-    	;<debug-str> $[AST after analysis : [<pp-aterm>ast']]
-   
+	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/signature-generator.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -2,6 +2,7 @@
 
 imports 
 	include/SpoofaxLang
+	utils/contract
 imports
 	lib/editor-common.generated
 
@@ -62,4 +63,21 @@
       else
         s' := s
       end
+rules 
+  
+  signature-to-declaration-id = 
+      ?(<id> ,_ ,_)
+    + ?(<id> ,_ )  
+    + ?<id>
+    ; verify(String | <id> , "String @signature-to-declaration-id")     
+  
+  
+  signature-to-str-args-length = 
+    ?(_ ,<id> ,_)    <+  !0
+  
+  
+  signature-to-term-args-length = 
+    ?(_ ,_ ,<id>) + ?(_ , <id>) <+ !0
+  
+    
   
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -0,0 +1,685 @@
+module context/symboltable
+ 
+imports 
+  include/spoofaxlang
+
+imports 
+  common
+  utils/contract
+  utils/debug
+	context/scope-tree
+imports  
+  normalize/signatures
+  context/signatures
+  context/declare
+  context/resolve-symbols
+  codegen/main
+  
+signature 
+    
+  constructors
+  
+    // Package Declaration 
+    PackageDecl : Package * String -> Def
+    
+    PackageDecl : Package * List(String) -> Def
+    
+    // Module Definition . Includes Ast and Analyzed AST 
+    ModuleDef :  Module * String * Package * Module * Module -> Def 
+    
+    // Module Declaration 
+    ModuleDecl :  Module * String * Package -> Def
+   
+    ImportDecl : Namespace *  List(Term) -> Def
+      
+  constructors 
+    
+    // Defines LangaugeProperties Constructor
+    // packageqname * languagenames * langaugeIds * esvStartSymbols * sdfStartSymbols  
+    LanguageDescriptor : Package * List(String) * List(String) * List(Sort) * List(sort) -> Def
+  
+
+  constructors
+    SymbolDef : Namespace * Term * Type   * Term -> Def
+    
+    //TODO : when the problem with the serialization of IstrategoAppl solved, 
+    //move Import Symbol in the respective the scoped Symbols
+
+  constructors 
+    ToCodeGenerate : SymTableCommand
+
+    ToCompile  : SymTableCommand
+
+    
+rules 
+    // constant terms 
+    ALL = !"*"    
+    
+    ALL_WITH_DUPLICATES = !"**"   
+    
+    ONLY_ONE   = !"."
+		
+    DIRTY = !"-"
+	
+rules 
+
+  //several lookup definitions 
+	module-typed-qname   = ?ModuleDecl( <id> ,_ ,_ )
+      
+	modulde-uri = ?ModuleDecl(_ ,<id> , _)
+      
+	module-enclosing-package = ?ModuleDecl(_ ,_, <id> )
+      
+	package-uris = ?PackageDecl(_, <id>)
+      
+	package-typed-qname  = ?PackageDecl( <id> ,_ ) ; verify(?Package(QName(_)) | <id> , "Package(QName(_)) @package-typed-qname ")
+      
+	module-annotated-ast = ?ModuleDef( _  , _,_,_,<id>)
+      
+  module-original-ast  = ?ModuleDef( _  , _,_, <id>,_ )  
+  
+  //module-annotated-ast-and-location = ?ModuleDef( _ , location,_, _,anno-ast) ; !(anno-ast, location)
+     
+rules 
+// Index Manage Commands 
+    
+	index-init      = prim("SPX_exec_index_manage_command"  , <get-project-path> , "INIT")
+	  
+	index-close     = prim("SPX_exec_index_manage_command", <get-project-path>,  "CLOSE")
+	
+	index-save      = prim("SPX_exec_index_manage_command" , <get-project-path>,  "SAVE")
+	  
+	index-clearall  = prim("SPX_exec_index_manage_command" , <get-project-path> ,"CLEAR")
+      
+	index-rollback  = prim("SPX_exec_index_manage_command" , <get-project-path> , "ROLLBACK")
+    
+	index-invalidate-global-cache     = prim("SPX_exec_index_manage_command" , <get-project-path> , "INVALIDATE_GLOBAL_CACHE")
+	
+	index-on-init-code-generation     = prim("SPX_exec_index_manage_command" , <get-project-path> , "ON_INIT_CODEGEN")
+	
+	index-on-complete-code-generation = prim("SPX_exec_index_manage_command" , <get-project-path> , "ON_COMPLETE_CODEGEN")
+	  
+	index-lang-desc =  prim( "SPX_index_language_descriptor" , <get-project-path> , <id>)
+
+	
+  index-language-descriptor:
+  	l at LanguageDescriptor(Module(QName(_)) ,_ ,_,_,_) -> <id>
+		where
+     	index-lang-desc 
+		<+
+			dbg-symboltable(!$[Failed to index language descriptor: [<print-as-string>]]|"Index" , <debug-level-WARNING>)
+			
+	index-compilation-unit =  
+		verify(
+			?(full-path, ast)
+			| <id> , "(full-path, ast) @index-compilation-unit " 
+			)
+    ; prim( "SPX_index_compilation_unit" , <get-project-path> , full-path ,ast)
+  <+
+		dbg-symboltable(!$[Failed to index compilation unit: [<print-as-string>]]|"Index" , <debug-level-WARNING>)  
+
+rules
+    
+  project-from-symboldef-to-symbol: SymbolDef(_,_ ,_, symbol) -> symbol
+  
+  resolve-all-symbol-definitions-with-duplicates: (scoped-symbol-key , typeCtor) -> <resolve-all-symbol-definitions(project-from-symboldef-to-symbol |<ALL_WITH_DUPLICATES>) >(scoped-symbol-key , typeCtor)
+     
+  resolve-all-symbol-definitions: (scoped-symbol-key , typeCtor) -> <resolve-all-symbol-definitions(project-from-symboldef-to-symbol |<ALL>) >(scoped-symbol-key , typeCtor) 
+  
+  resolve-all-symbol-definitions-by-type:  typeCtor -> <resolve-all-symbol-definitions>( <ALL> ,  typeCtor)  
+  
+  resolve-symbol-definition:(scoped-symbol-key , typeCtor) -> <resolve-symbol-definition(project-from-symboldef-to-symbol)>(scoped-symbol-key , typeCtor)
+  
+  
+  // Resolving all symbol definition with the specified search criteria
+  // Following Strategy try to find all the symbol definitions that 
+  // have the same properties as the specified search criteria. 
+  // It also resolves symbol from the imported scopes/namespace. Please
+  // note that: during symbol resolve in the imported scopes, Internal 
+  // scopes are avoided due to visibility rules
+  resolve-all-symbol-definitions(post-processor | filter-type): 
+    (symbol-key , typeCtor) -> result 
+    where
+      dbg-symboltable(!$[with following search criteria: [<print-as-string>(symbol-key , typeCtor) ]]|"resolve-all-symbol-definitions(s)" ,<debug-level-INFO>)
+    where
+      with-spxverify(
+        result' := <resolve-symbol-definitions-internal>  ( symbol-key , typeCtor , filter-type)
+        , !"Error occured at symboltable.resolve-all-symbol-definitions(post-processor)"
+      )
+    where
+      with-spxverify(
+        result := <map(post-processor)>result'
+        ; verify(List|result , "List @resolve-all-symbol-definitions")
+        , !"Error occured at symboltable.resolve-all-symbol-definitions(post-processor) during post-processing and $[$result$]$ verification . expected list.")
+    where
+      dbg-symboltable(!$[Found following symbols: [<print-as-string>result]]|"resolve-all-symbol-definitions(s)" , <debug-level-INFO>)
+
+  // Resolving symbol definition with the specified search criteria
+  // Following Strategy try to find only one symbol definition 
+  // if multiple symbols exists with the specified criteria
+  resolve-symbol-definition(post-processor): 
+    (symbol-key , typeCtor) -> result
+    where
+      dbg-symboltable(!$[with following search criteria: [<print-as-string>(symbol-key , typeCtor) ]]|"resolve-symbol-definition" , <debug-level-INFO>)
+    where
+      with-spxverify(
+        result' := <resolve-symbol-definitions-internal>  ( symbol-key , typeCtor , <ONLY_ONE>)
+      )
+    where
+    	<map(post-processor) 
+    	; ?[<id>]>result'  =>result 
+    <+  
+    	dbg-symboltable(!$[No symbol found with the specified search criteria[<print-as-string>(symbol-key , typeCtor) ]]|"resolve-symbol-definition" , <debug-level-INFO>)
+    	; fail
+    where
+      dbg-symboltable(!$[Found following symbols: [<print-as-string>result]]|"resolve-symbol-definition" , <debug-level-INFO> )
+
+  verify-symbol-exists:
+    (symbol-key , typeCtor) -> <id>
+    where
+      with-spxverify(
+        if CurrentScope then 
+          namespace := <CurrentScope>
+        else  
+          namespace := <get-current-scope>
+        end
+        , !"Failed to retrieve current namespace identifier @verify-symbol-exists."  
+      )
+    where  
+      // symbol-key is can be scoped key. Hence, trying removing scope
+      // from the key. If it fail to remove key , considering it 
+      // symbol-key without scope.  
+      with-spxverify(
+        (<remove-scope-from-symbol <+ id > symbol-key ) => key
+        , !"Failed to get the symbol-key @verify-symbol-exists."
+      )
+    where 
+      dbg-symboltable(!$[ with : [<print-as-string>(namespace, key,typeCtor)]] |"verify-symbol-exists" ,<debug-level-INFO>)
+      ; !(namespace, key,typeCtor)
+      ; prim( "SPX_symtab_verify_symbol_exists" , <get-project-path> , <id>)
+      ; dbg-symboltable(!$[Found following symbols: [<print-as-string>]] |"verify-symbol-exists" , <debug-level-INFO>)  
+  
+  
+  resolve-symbol-definitions-internal:
+    (symbol-key , typeCtor, search-mode) -> resolved-symbols
+    where
+      with-spxverify(
+        if CurrentScope then 
+          namespace := <CurrentScope>
+        else  
+          namespace := <get-current-scope>
+        end
+        , !"Failed to retrieve current namespace identifier."  
+      )
+    where  
+      // symbol-key is can be scoped key. Hence, trying removing scope
+      // from the key. If it fail to remove key , considering it 
+      // symbol-key without scope.  
+      with-spxverify(
+        (<remove-scope-from-symbol <+ id > symbol-key ) => key
+        , !"Failed to get the symbol-key."
+      )
+    where 
+      dbg-symboltable(!$[ with : [<print-as-string>(namespace, key,typeCtor,search-mode)]] |"resolve-symbol-definitions-internal" ,<debug-level-INFO>)
+    where
+      !(namespace, key,typeCtor,search-mode)
+      ; with-spxverify(
+        	prim( "SPX_symtab_resolve_symbols" , <get-project-path> , <id>)
+      	; ?resolved-symbols
+  	  	, !$[SPX_symtab_resolve_symbols failed unexpectedly. argument [<print-as-string>]]
+  	  	)
+    where
+      dbg-symboltable(!$[Found following symbols: [<print-as-string>resolved-symbols]] |"resolve-symbol-definitions-internal" , <debug-level-INFO>)  
+  
+  
+	undefine-symbol-definitions: 
+    (symbol-key , typeCtor) -> <id>
+    where
+      with-spxverify(
+        if CurrentScope then 
+          namespace := <CurrentScope>
+        else  
+          namespace := <get-current-scope>
+        end
+        , !"Failed to retrieve current namespace identifier."  
+      )
+    where  
+      // symbol-key is can be scoped key. Hence, trying removing scope
+      // from the key. If it fail to remove key , considering it 
+      // symbol-key without scope.  
+      with-spxverify(
+        (<remove-scope-from-symbol <+ id >symbol-key ) => key
+        , !"Failed to get the symbol-key."
+      )
+    where 
+      dbg-symboltable(!$[undefine-symbol-definitions with : [<print-as-string>(namespace, key, typeCtor)]] |"undefine-symbol-definitions" , "info")
+    where
+      !(namespace,key,typeCtor)
+      ; prim( "SPX_symtab_undefine_symbols" , <get-project-path> , <id>)
+      ; ?undefined-symbols
+    where
+      dbg-symboltable(!$[Found following symbols: [<print-as-string>undefined-symbols]]|"undefine-symbol-definitions" , "info")  
+        
+  index-symbol-definition:
+  	(symbol-key , symbol-type , symbol) -> <id>
+    where
+        dbg-symboltable(!$[with: [<print-as-string>(symbol-key , symbol-type , symbol)].]|"index-symbol-definition" , "info")
+    where
+    	with-spxverify(
+        if CurrentScope then 
+          namespace := <CurrentScope>
+        else  
+          namespace := <get-current-scope>
+        end
+        , !"Failed to retrieve current namespace identifier."  
+      )
+      where    
+        with-spxverify(
+          (<remove-scope-from-symbol <+ id >symbol-key ) => key
+          , !"Failed to get the symbol-key."
+        )
+        ; dbg-symboltable(!$[Invoking SPX_index_symbol_definition with : [<print-as-string>(namespace, key , symbol-type , symbol)]]|"index-symbol-definition" , "info")    
+      where
+        with-spxverify(
+          !SymbolDef(namespace , key , symbol-type  , symbol);
+          prim( "SPX_symtab_define_symbol" , <get-project-path> , <id>)
+      	 	, !"Index Symbol failed."
+        )          
+ 
+rules
+  
+  enable-scope-with-spx-verify( s ) = with-spxverify(s)
+  
+  activate-internal-scope(s):
+    x -> y
+    where 
+        dbg-symboltable(!$[Entering new-internal-scope [<print-as-string> x].]|"activate-internal-scope(s)" , "info")
+    where
+      with-spxverify(
+         {| CurrentScope :
+              with-spxverify(
+                if not(GetEnclosingPackageName) then
+                  fail 
+                end
+              , !$[ Could not find any enclosing package to create an internal scope]  
+              )
+              ; scope_id :=  <get_internal_module_qtname><GetEnclosingPackageName> 
+              ; rules (CurrentScope: _ -> scope_id) 
+              
+              ; <s>x => y // performing transformation
+        |}
+        , !$[Failed to create an internal scope.]  
+       )
+    where 
+        dbg-symboltable(!$[Exiting new-internal-scope [<print-as-string> x].]|"activate-internal-scope(s)" , "info") 
+          
+  
+  activate-global-scope(s):
+    x -> y 
+    where 
+    	dbg-symboltable(!$[enter global-scope with [<print-as-string>x].]|"activate-global-scope(s)" , "info")
+    where
+    	with-spxverify(
+        activate-scope(s|Globals()) => y 
+        , !"Failed to activate global scope"
+      )
+    where 
+        dbg-symboltable(!$[exit global-scope [<print-as-string> x].]|"activate-global-scope(s)" , "info") 
+        
+  	
+   activate-scope(s|scope):
+    x -> y 
+    where 
+    	dbg-symboltable(!$[enter scope [<print-as-string>scope] with [<print-as-string>x].]|"activate-scope(s)" , "info")
+    where
+        {| CurrentScope :
+           	scope_id := scope
+            ; rules (CurrentScope: _ -> scope_id) 
+            ; <s>x => y // performing transformation
+        |}
+    where 
+        dbg-symboltable(!$[exit global-scope [<print-as-string> x].]|"activate-global-scope(s)" , "info") 
+        	
+  
+  
+  // Creates a new local scope . Local scope and enclosed symbols 
+  // get deleted while exiting scope.
+  new-local-scope(s):
+    x -> y 
+    where 
+        dbg-symboltable(!$[Entering new-local-scope [<print-as-string> x].]|"new-local-scope(s)" , "info")
+    where
+        {| CurrentScope :
+            get-current-scope => parent-namespace;
+            
+            // defining a new scope 
+            scope_id := <symtab_new_scope(|parent-namespace)>;
+            rules (CurrentScope: _ -> scope_id) ;
+            
+            // performing transformation
+            <s> x => y;
+            
+            // destrorying newly created scope 
+            symtab_destroy_scope(|scope_id)
+        |}
+  	where 
+        dbg-symboltable(!$[Exiting new-local-scope [<print-as-string> x].]|"new-local-scope(s)" , "info")
+  
+   symtab_new_scope(|parent-namespace) = prim("SPX_symtab_new_scope" ,  <get-project-path>  , parent-namespace)
+   
+   symtab_destroy_scope(|scope-id) = prim("SPX_symtab_destroy_scope", <get-project-path>  , scope-id)
+        
+   get-current-scope = GetEnclosingModuleName <+ GetEnclosingPackageName  <+ !Globals()     
+
+rules
+  
+   /**
+   * Inserts a new PackageDeclaration into spxlang semantic-index. 
+   * 
+   * @type (Package(QName(package-id-list)) , absolute-path-to-the-package-decl) ->  (Package(QName(package-id-list)) , absolute-path-to-the-package-decl) 
+   */
+	index-package-declaration:
+  	(package-typed-qname , fullpath) -> <id>
+    where 
+    	package-decl := PackageDecl(package-typed-qname , fullpath)
+      ; index-package-declaration' 
+			   
+  
+   /**
+   * Internal rule to inserts a new PackageDeclaration into spxlang semantic-index. 
+   * 
+   * @type PackageDeclaration(packageid, abspath)->  PackageDeclaration(packageid, abspath) 
+   */
+	index-package-declaration' = 
+  	verify(
+  		?PackageDecl( _ , _) 
+  		| <id> , $[PackageDecl( _ , _) @index-package-declaration' ]
+  		)  
+    ; dbg-symboltable(! $[index package declaration: [<print-as-string><id>]] |"Index" , "info")
+    ; prim("SPX_index_package_declaration" , <get-project-path> , <id>)
+
+rules 
+   /**
+   * Inserts a new module-definition into spxlang semantic-index. 
+   * 
+   * @type (module'squalifiedid , filepath, enclosing-package-id, modules-original-ast, modules-desugared-ast)->  <id> 
+   */
+	index-module-definition:   
+  	(module-typed-qname  , module-path, enclosing-package-typed-qname , module-ast, annotaed-ast )  -> <id>
+		where 
+	  	!ModuleDef( 
+	        module-typed-qname , 
+	        module-path , 
+	        enclosing-package-typed-qname , 
+	        module-ast,
+	        annotaed-ast
+	      )
+	      ; with-spxverify(index-module-definition'  , "failed to index module definition")
+	   		; <cache-original-module-ast> ( module-typed-qname, module-ast)
+	   		; <cache-annotated-module-ast>( module-typed-qname, annotaed-ast)    
+  
+  // Updates existing module definiiton
+  // TODO IMPLEMENT : implement differential module definition updates
+	index-update-existing-module-definition: 
+    (module-typed-qname , updated-annotaed-ast ) -> <id>
+    where 
+     dbg-symboltable(! $[index-update-existing-module-definition| Re-Index module definition : [<print-as-string><id>]] |"Index" , "info")
+    where
+      <get-indexed-module-declaration>module-typed-qname  => ModuleDecl(mId, absPath, pId);   // Overhead getting whole moduleDef ?? 
+      !ModuleDef( 
+        module-typed-qname , 
+        absPath,   
+        pId, 
+        // creating a dummy module AST . 
+        // This has not significant in this operation, since, only thing that will be reindexed
+        // is the annotated-ast
+        Module(None(), SPXModuleName("___dummy____"), []), 
+        updated-annotaed-ast 
+      );
+      with-spxverify(index-module-definition'  , "failed to index module definition")
+   		; <cache-annotated-module-ast>( module-typed-qname, updated-annotaed-ast)
+        
+  /**
+   * Internal rule to index module-definition into spxlang semantic-index. 
+   * 
+   * @type ModuleDef( id, filepath, packageid, ast, desugared-ast') -> ModuleDef( id, filepath, packageid, ast, desugared-ast')   
+   */    
+  index-module-definition' = 
+  	verify(?mdef at ModuleDef(_ , _ ,_ ,_ ,_)|<id>, "ModuleDef(_,_,_,_,_)")
+    ; dbg-symboltable(!$[index-module-definition| Index module definition : [<print-as-string><id>]] |"Index" , <debug-level-INFO>) 
+    ; prim("SPX_index_module_definition" , <get-project-path> , <id>)
+		
+
+
+signature constructors
+	OriginalModuleAST : Type
+	
+	AnnotatedModuleAST : Type 
+
+rules
+
+	cache-original-module-ast = 
+		verify( ?(mid at Module(QName(_)), ast)| <id> , "(Module(QName(_)), _)@cache-orignal-module-ast")
+	  ; with-spxverify(rules(SPXModuleAST:(OriginalModuleAST(),mid) -> ast))
+	
+	cache-annotated-module-ast	= 
+		verify( ?(mQname at Module(QName(_)), annotatedAst)| <id> , "(Module(QName(_)), _)@cache-annotated-module-ast"); 
+		with-spxverify(
+			rules(SPXModuleAST:(AnnotatedModuleAST(),mQname) -> annotatedAst)
+		)  
+	
+	
+	get-cached-module-ast = 
+		verify(?mid at Module(QName(_)) | <id> , "Module(QName(_))  @get-cached-module-ast" )
+		; <SPXModuleAST>(OriginalModuleAST() , mid)
+	
+	get-cached-annotated-module-ast = 
+		verify(?mid at Module(QName(_)) | <id> , "Module(QName(_))  @get-cached-annotated-module-ast" )
+		; <SPXModuleAST>(AnnotatedModuleAST() , mid)
+
+rules
+  
+  /**
+   * Gets CompilationUnit located at the sepcified absoluted path from the SPX Semantic Index   
+   * 
+   * @type abspath-compilation-unit -> compilation-unit-ast   
+   */     
+  get-indexed-compilation-unit =  verify(is-string|<id>, "Full-path String @get-indexed-compilation-unit"); prim("SPX_index_get_compilation_unit" , <get-project-path> , <id>)
+  
+  /**
+   * Gets PackageDeclaration indexed by the packageId. It also returns all the
+   * absolute path where the Package is declared.     
+   * 
+   * @type Package-Typed-Qualified-ID-> PackageDecl( packageid , List(abspath))   
+   */
+  get-indexed-package-declaration = verify(?Package(QName(_)) | <id> , "Package(QName(_)) @get-indexed-package-declaration") ; prim("SPX_index_get_package_declaration", <get-project-path> , <id>) 
+
+	
+  /**
+  * Returns all the PackageDeclarations located in the specified file uri.
+  * If absolute path is specified , it returns all the PackageDeclarate 
+  * located in that path. However, if * is specified as current-term , it
+  * returns all the indexed PackageDeclarations for the current project.
+  *
+  * @type uri -> List(PackageDeclaration) 
+  */
+  get-indexed-package-declarations = 
+  	verify(String| <id> , "String @get-indexed-package-declarations")
+  	; prim("SPX_index_get_package_declarations_of", <get-project-path> , <id>) 
+	  <+
+  	debug(!"Please check spx.config for verifying configured sources: ")
+	  ;fail	 	
+  
+  /**
+  * Returns all the PackageDeclarations located in the current project.
+  *
+  * @type _ -> List(PackageDeclaration) 
+  */  
+  get-all-indexed-package-declarations = prim("SPX_index_get_package_declarations_of", <get-project-path> , <ALL>)
+  
+  /**
+  * Returns all related files of the specified package 
+  *
+  * @type package-qname -> List(String) 
+  */  
+  get-related-files-of-packages = prim("SPX_index_get_related_files_of_packages", <get-project-path> , <id>)
+  
+  
+  /**
+  * Returns langauge Descriptor of the specified package  
+  *
+  * @type package-qname -> LanguageDescriptor(_,_,_,_,_)
+  */  
+  get-indexed-language-descriptor =  verify(?Package(QName(_)) | <id>, "Package(QName(_)) @get-indexed-language-descriptor "); prim("SPX_index_get_language_descriptor", <get-project-path> , <id>) 
+
+rules 
+
+  get-indexed-module-definition(adapter) =   get-indexed-module-definition ; dbg-symboltable(!$[Following definition found : [<print-as-string>]] |"Index" , <debug-level-INFO>) ; adapter 
+  
+  get-indexed-module-declaration = verify(?Module(QName(_)) |<id> , "Module(QName(_)) @get-indexed-module-declaration ") ; prim("SPX_index_get_module_declaration", <get-project-path> , <id>) 
+ 
+  get-indexed-module-definition = 
+  	verify(?Module(QName(_)) | <id> , "Module(QName(_)) @get-indexed-module-definition") 
+  	; prim("SPX_index_get_module_definition", <get-project-path> , <id>) 
+  	; verify(?ModuleDef(moduleQName ,_ ,_ ,ast ,annotatedast) | <id> , "ModuleDef(_ ,_ ,_ ,_ ,_) @get-indexed-module-definition")
+	  ; with-spxverify(
+  		  <cache-original-module-ast> ( moduleQName , ast)
+  		; <cache-annotated-module-ast>( moduleQName , annotatedast) 
+  		, !"failed to cache module-ast"	
+  	  )
+  	<+ 
+  		dbg-symboltable(! $[failed to get module definition [<print-as-string>]] |"Index" , <debug-level-WARNING>)
+  		
+  get-indexed-module-declaration(s) = get-indexed-module-declaration; s
+  
+  get-indexed-module-declarations = verify(List| <id> , "List @get-indexed-module-declarations"); mapconcat(get-indexed-module-declarations)
+  
+  get-all-indexed-module-declarations =  ALL ; get-indexed-module-declarations
+  
+  get-indexed-module-declarations' = prim("SPX_index_get_module_declarations_of", <get-project-path> , <id> )
+  	; verify(
+  	  	List 
+  	  	| <id> , "List @get-indexed-module-declarations"
+  	  	) 
+  
+  get-indexed-module-declarations = 
+  	verify(
+  		String
+  		|<id> , "String @get-indexed-module-declarations"
+  		)
+  	; !(<id> , <ALL>) 
+  	; get-indexed-module-declarations'   
+  	  
+  get-indexed-module-declarations = 
+  	verify(
+  		?Package(QName(_)) 
+  		| <id> , "Package(QName(_)) @get-indexed-module-declarations"
+  		)
+		; !(<id> , <ALL>) 
+  	; get-indexed-module-declarations'   
+
+  get-indexed-dirty-module-declaration = 
+  	verify(
+  		?Package(QName(_)) 
+  		| <id> , "Package(QName(_)) @get-indexed-dirty-module-declaration"
+  		)
+  	; !(<id>, <DIRTY>,ToCompile())	
+    ; get-indexed-module-declarations'
+  
+  
+  get-indexed-dirty-module-declaration-to-generate = 
+  	verify(
+  		?Package(QName(_)) 
+  		| <id> , "Package(QName(_)) @get-indexed-dirty-module-declaration"
+  		)
+  	; !(<id>, <DIRTY>, ToCodeGenerate())	
+    ; get-indexed-module-declarations'
+    
+  
+  get-indexed-language-descriptor = 
+  	verify(
+  		?Package(QName(name)) 
+  		| <id> , "Package(QName(_)) @get-indexed-language-descriptor"				
+			)
+		; prim("SPX_index_get_language_descriptor", <get-project-path> , <id>)
+	  ; verify( 
+  			?LanguageDescriptor(_,_,_,_,_) 
+  			| <id> , "LanguageDescriptor(_,_,_,_,_)  @get-indexed-language-descriptor"
+				)  
+    	 
+  get-package-qnames-by-langname = verify( String | <id> , "langname(String) @get-package-qnames-by-langname ") ; prim("SPX_index_get_package_declarations_by_LanguageName" ,<get-project-path> ,<id> )  
+rules
+  
+  index-import: 
+    (Namespace , imports*) -> <id>
+    where
+    	dbg-symboltable(! $[Indexing following import reference :  [<print-as-string>]] |"Index" , <debug-level-INFO>)
+    where  
+	    with-spxverify( 
+	      verify(List|imports* , "List @index-import") ;
+	      !ImportDecl( Namespace, imports*) ;  
+	      prim("SPX_index_import_references" , <get-project-path> , <id>)
+	    )
+	    
+  get-indexed-import-refernces = get-indexed-import-refernces(id)  
+  
+  get-indexed-import-refernces(s) : 
+    Namespace -> result
+    where 
+    	dbg-symboltable(! $[getting indexed import for following namespace : [<print-as-string>Namespace]] |"Index" , "info")
+    where  
+	    with-spxverify( 
+      	prim("SPX_index_get_imports" , <get-project-path> , <id>)
+      	; verify(List | <id> , "List @get-indexed-import-refernces")
+    	  ; filter(s) => result
+	      , !"Error occured at symboltable.get-indexed-import-refernces"
+	    )
+	  where 
+	    dbg-symboltable(! $[Found following import references : [<print-as-string>result]] |"Index" , "info")
+	    
+	 get-indexed-imported-to-refernces(s) : 
+    Namespace -> result
+    where 
+    	dbg-symboltable(! $[getting indexed import-to references for following namespace : [<print-as-string>Namespace]] |"Index" , "info")
+    where  
+	    with-spxverify( 
+      	prim("SPX_index_get_imported_to_references" , <get-project-path> , <id>)
+      	; verify(List | <id> , "List @get-indexed-import-refernces")
+    	  ; filter(s) => result
+	      , !"Error occured at symboltable.get-indexed-import-refernces"
+	    )
+	  where 
+	    dbg-symboltable(! $[Found following imported-to references : [<print-as-string>result]] |"Index" , "info")
+	    
+	       
+	      
+      
+rules
+  
+  project-symbols(resolve , s) = resolve ; filter(s)
+    
+  project-module-declarations(s) = get-indexed-module-declarations ; filter(s)
+
+  project-package-declarations(s) = get-indexed-package-declarations; filter(s)
+  
+  project-all-module-declarations(s) = project-symbols( get-all-indexed-module-declarations, s)
+
+  project-all-package-declarations(s) = project-symbols(get-all-indexed-package-declarations, s)  
+
+ 
+ rules 
+   
+ is-declared-package =  ?t ; where(?QName(_)) ; !Package(<id>) ; is-declared-package ; !t
+ 
+ is-declared-package =  where(?Package(QName(_))) ; where(get-indexed-package-declaration)
+  
+ is-declared-module = ?t ;  where(?QName(_)) ; !Module(<id>) ;  is-declared-module ; !t
+ 
+ is-declared-module = where(?Module(QName(_))) ;  where(get-indexed-module-declaration)
+ 
+
+rules 
+	// utils
+	equal-resource-uris = verify(?(_,_) |<id> , "?(_,_) @equal-resource-uris" ) ; prim( "SPX_index_equal_resource_uri" ,<get-project-path> , <id>)
+	
+	 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -4,12 +4,15 @@
   context/sdf/declare
   include/SpoofaxLang
   utils/annotations
-
+  context/symboltable
+  context/signatures
+  common
+	
 signature
   constructors
     // Options
     Newlines : X
-    KeywordFollowRestriction : X
+    KeywordFollowRestriction : X 
 
 strategies
 
@@ -19,45 +22,90 @@
   /** @type List(TemplateOption) -> List(TemplateOption) */
   declare-template-options-main = map(declare-template-option)
 
-  init-template-options =
-    // defaults
-    rules(
-      Options :+ Newlines() -> None()
-      Options :+ KeywordFollowRestriction() -> None()
-    )
+ 	init-template-options =
+ 		activate-global-scope(
+	    if not(is-template-option-initialized) then
+	    	  <index-template-option>(Newlines() ,None())
+	    	; <index-template-option>(KeywordFollowRestriction() ,None())
+	    	; index-template-option-flag
+	  	end
+  	)  
 
 rules
-
   // Declarations are shared with SDF (same DR)
   // The sorts and cons declared using templates are in exactly the same
   // namespace as if they would be declared using an equivalent piece of SDF.
 
   declare-template-definition:
     prod @ TemplateProduction(sort, template, attrs) -> <id>
-    with
-      <declare-sdf-definition-internal> (prod, template, sort, attrs)
-    // with
-    //   if not(<collect-one(?sdf-cons(<un-double-quote>))> attrs);
-    //      <collect-one(?bracket())> attrs then
-    //     rules(BracketTemplateProduction :+ sort -> template)
-    //   end
+    where 
+    	with-spxverify(
+    		<declare-sdf-definition-internal> (prod, template, sort, attrs)
+			)
+		// with
+		//   if not(<collect-one(?sdf-cons(<un-double-quote>))> attrs);
+		//      <collect-one(?bracket())> attrs then
+	    	//    rules(BracketTemplateProduction :+ sort -> template)
+		//  end
 
 rules
 
   // Invoked by declare-sdf-definition-internal
   declare-sdf-usage:
     Placeholder(_, sort(x), _, _) -> <id>
-    with
-      rules(Usage: x -> x)
+    where with-spxverify(
+      <index-sdf-usage>( x , x)
+    )  
+
+
 
 rules // Options
 
   declare-template-option:
     Newlines(t) -> <id>
-    with
-      rules(Options :+ Newlines() -> t)
+    where 
+    	with-spxverify(
+    			<index-template-option>(Newlines() , t)
+  		)
 
   declare-template-option:
   	KeywordFollowRestriction(t) -> <id>
-  	with
-  		rules(Options :+ KeywordFollowRestriction() -> t)
+  	where 
+    	with-spxverify(
+      		<index-template-option>(KeywordFollowRestriction(), t)
+  		)
+rules 
+	//resolve templatelang options 
+	get-template-option =  
+		? key
+		; with-spxverify( 
+		  	activate-global-scope(
+		  		result := <resolve-symbol-definition>(key, TemplateOptions()) 
+	  		)
+	  		, !"Failed to get template option"
+		  )
+	  ; !result 
+	    
+	index-template-option = 
+		? (key, value)
+		; with-spxverify(  
+		  	<index-symbol-definition>(key, TemplateOptions() ,  value) 
+		  	, !"Failed to index template option"
+  	  )
+	
+signature constructors 
+	HasTemplateOptionFlag : Flag 
+
+rules 
+	
+	get-keyword-follow-restriction = <get-template-option> KeywordFollowRestriction()
+	 
+	index-template-option-flag = 
+			<get-constructor>HasTemplateOptionFlag() => cons-name
+			; <index-symbol-definition>(cons-name, HasTemplateOptionFlag(),  cons-name)
+	  
+	is-template-option-initialized = 
+		<get-constructor>HasTemplateOptionFlag() => key ; 
+		<resolve-symbol-definition>(key, HasTemplateOptionFlag())   
+		
+	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -1,24 +1,24 @@
 module editor/main
 
 imports
-  lib/editor-common.generated
-  codegen/compile
-imports
-  common
-  config
-  utils/cache
-  utils/debug
-  editor/resolve/-
+	lib/editor-common.generated
+	codegen/compile
+imports 
+	common
+	config
+	utils/cache	
+	utils/debug
+	editor/resolve/-
+	normalize/main
 
 rules
-  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+	// Resolves a reference when the user control-clicks or presses F3 in the editor.
   editor-resolve:
     (node, position, ast, path, project-path) -> elem
+    where 
+    	debug(!"inside editor resolve : ")
     where
-      <editor-resolve> node => elem
-
-
-
+    	<editor-resolve> node => elem	
 
   // Returns "hover help" information for a particular node in the editor.
   // For references, this rule is invoked using the resolved term.
@@ -30,23 +30,27 @@
   // (the completion identifier in the AST provides additional context information)
   editor-complete:
     (node, position, ast, path, project-path) ->[]
-
+  
 
 rules
-  // editor-analyze
-  editor-analyze:
-    (ast, path, project-path) -> (ast, errors, warnings, infos) // TODO : ast -> get the analyzed AST
-    with
-       editor-init
-      ;rules(ProjectPath := project-path)
-      ;if <string-ends-with(|".spt")> path then
-         // executed when testing
-         !([], [], []) => (errors, warnings, infos)
-       else
-         // not executed when testing
-         initialize-configuration
-        ;abs-path := <concat-strings;string-replace(|"\\", "/")>[project-path, "/" ,path]
-        ;<debug>$[Compiling following SPX file: [<pp-aterm>abs-path]]
-        ;<cache-currently-analyzing-ast>(abs-path  , ast)
-        ;<compile-packages-of> abs-path  => ( errors, warnings, infos)
-      end
+	editor-analyze: 
+ 		(ast, path, project-path) -> (analyzed-ast, errors, warnings, infos) 
+    where
+    	with-spxverify(
+				editor-init
+				; rules(ProjectPath := project-path)
+				; initialize-configuration
+				, !"Failed to initialize. "  
+		  )
+		where
+			abs-path := <concat-strings>[project-path, "/" ,path];
+			dbg-compiler(!$[ ------------------------------------------------
+			  	Compiling following SPX file: [<print-as-string>abs-path]
+		  	]); 
+			with-spxverify(
+	    	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path  , ast);
+	    	<compile-packages-of> (ast, abs-path)  => (analyzed-ast , issues)
+	    	, !"Failed to compile-package-of"
+	    );  
+		  !issues => ( errors, warnings, infos)
+		  
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/resolve/imports.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/resolve/imports.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/resolve/imports.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -15,12 +15,12 @@
 	editor-resolve : 
 		(ImportPackage(qname at QName(package-qname-parts*)) , position, ast, path, project-path) -> <parse-file>x
 		where
-			[x|_] := <DeclaredPackage;debug>qname
+			[x|_] := <get-package-uris;debug>qname
 	
 	editor-resolve : 
 		(ImportPackage(Name(n)) , position, ast, path, project-path)  -> <parse-file>x
 		where
-			[x|_] := <DeclaredPackage;debug>QName([n])
+			[x|_] := <get-package-uris;debug>QName([n])
 	
 	editor-resolve : 
 		(ImportLegacyArtifact(Name(m at modulename)), position, ast, path, project-path)  -> r

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -3,6 +3,7 @@
 imports
   libstratego-lib
   libstrc
+  lib/editor-common.generated
 imports
 	normalize/stratego
 	normalize/signatures
@@ -13,15 +14,15 @@
 	utils/annotations
 	utils/debug
 	utils/cache
-imports
-	common
+imports 
+	common 
 	config
 imports
 	context/-
-
+	utils/contract
+	context/signatures
 
 rules 
-
 	 normalize:
     (selected, position, ast, path, project-path) -> (filename, result)
     with 
@@ -31,144 +32,177 @@
    				filename := <guarantee-extension(|"aterm.desugared")> path;
     		  result   := <normalize-all> ast // returning desugared AST
 	  |}
-       
-
-	
-strategies
-
-//TODO FIX :
-// Design issues :
-//	1. Package Common Imports are only for the current spx file at this moment
-//		 It could be kept as it is or make it common in the whole package. 
-//	2. When done with fixing origin tracking , normalize Import Statements
-
-	normalize-all = desugar-compilation-unit
-
+	 
+	 normalize-all = desugar-compilation-unit
 rules
-
+	
 	desugar-compilation-unit:
 		CompilationUnit(moduledef*) -> 	<desugar-compilation-unit>CompilationUnit([] , [appended-default-package-declaration])
 		where
 			 appended-default-package-declaration :=  Package(Name(<default_package_name>) , moduledef*)
 
-
-
 	desugar-compilation-unit:
-		CompilationUnit(import* , package*) -> 	CompilationUnit( import* , modified-packages)
-		with
+		c at CompilationUnit(import* , package*) -> 	CompilationUnit( import* , modified-packages)
+		where 
+				with-spxverify(
+					<index-compilation-unit>(<currently-precompiling-spx-abspath>, c)
+					, !" Failed to index compilation unit"
+				)
+		where
 			{| PackageCommonImports:
-						<alltd(desugar-imports)> import*;
-						<alltd(desugar-spx-package)> package* => modified-packages
+						<alltd(origin-track-forced(desugar-imports))> import*;
+						<alltd(origin-track-forced(desugar-spx-package))> package* => modified-packages
 			|}
 
-	// desugaring package-wide imports
-	// TODO  :  Consider as  Deprecate 
+	//TODO Implement : update desugared compilation unit in the index . 
+	// TODO  FIX : mark deprecated. remove it from existing implementation
 	desugar-imports:
 		i at Imports(import*) -> i
-		with
-			rules(
-				PackageCommonImports:+ _ -> i
-			)
-
+		where	
+			rules( PackageCommonImports:+ _ -> i )
+			
+			
 rules
-
+	
 	desugar-spx-package:
-		Package(Name(package-name) , modules* ) -> normalized-package-definition
-		with
-			<debug-compiler>$[Desugaring Packages [<pp-aterm>package-name]]
+		Package(Name(package-name) , modules* ) -> 
+			normalized-package-definition
 		where
-			!QName([package-name]) 																=> package-qname;
+			dbg-compiler(!$[Desugaring Packages [<print-as-string>package-name]])
+		where 
+			!QName([package-name]) => package-qname;
 			<desugar-spx-package>Package(package-qname, modules*) => normalized-package-definition
 
-
 	desugar-spx-package:
-		p at Package(package-qname , modules* ) -> modifiedPackageDescription
-		with
+		p at Package(package-qname , modules* ) -> 
+			modifiedPackageDescription
+		where
 			!package-qname => QName(_);
-				<debug-compiler>$[Desugaring Packages [<pp-aterm>package-qname]]
-		with
-			{| EnclosingNamespace :
-			   	rules(
-						EnclosingNamespace := Package(package-qname)
-			   	);
-			   	<alltd(desugar-spx)> modules*  => desugared-modules*
+			dbg-compiler(!$[Desugaring Packages [<print-as-string>package-qname]]);
+			with-spxverify(
+				<index-package-declaration>(Package(package-qname) , <currently-precompiling-spx-abspath>)
+				, !"Indexing Package Declaration failed"
+			)			
+		where
+			{| GetEnclosingPackageName:
+			   	rules(GetEnclosingPackageName := Package(package-qname));
+			   	<alltd(origin-track-forced(desugar-spx))> modules*  => desugared-modules*
 			|}
-		with
+		where
 			currently-precompiling-spx-abspath  					=> package-abs-path;
 			!Package( package-qname , desugared-modules*) => modifiedPackageDescription
-		where
-        <store-package-abspath>(package-qname ,package-abs-path)
-
-		/* it seems not to be needed at this moment. hence, commenting this code.
-		where
-			if <get-package-declaration> package-qname => Package(package-qname, module-def*) then
-				modifiedPackageDescription' 						 := Package(package-qname, <conc>(module-def* , desugared-modules*))
-			else
-				modifiedPackageDescription' 						 := modifiedPackageDescription
-			end;
-			<store-declaration(|Packages())>	(package-qname,  modifiedPackageDescription')
-		*/
-
+	  
 rules
 
 	desugar-spx:
 		m at Module(attrb* , modname , section*) -> modifiedModuleDescription
-		with
-			<debug-compiler>$[Desugaring Modules : [<pp-aterm>modname]]
 		where
-			EnclosingNamespace      								=>  package;
-			modname-with-annotation 					      :=  <add-annotation(|package)>modname;
-		  !modname-with-annotation				      	=>  SPXModuleName(mod-name-string);
-		  !package							  								=>  Package(QName( package-name-part*));
-		  enclosing-module-name   								:=  [package-name-part*| [mod-name-string]];
-		  enclosing-module-qname   								:=  QName(enclosing-module-name)
-		where
-			{| EnclosingNamespace, EnclosingParentNamespace:
-			  	rules(
-						EnclosingNamespace 								:= 	Module(enclosing-module-qname)
-						EnclosingParentNamespace					:= package
-					);
-					sections' := <conc>(<reverse><bagof-PackageCommonImports>, <alltd(desugar-spx)>section*)
-					;<debug-symboltable> $[ Storing enclosing namespace : [<pp-aterm>enclosing-module-qname]]
+			dbg-compiler(!$[Desugaring Module [<print-as-string>m]])
+		where
+			with-spxverify(
+				GetEnclosingPackageName      								=>  package;
+				modname-with-annotation 					      :=  <add-annotation(|package)>modname;
+				!modname-with-annotation				      	=>  SPXModuleName(mod-name-string);
+				!package							  								=>  Package(QName(package-name-part*));
+				enclosing-module-name   								:=  [package-name-part*| [mod-name-string]];
+				enclosing-module-qname   								:=  QName(enclosing-module-name)
+		  	, !"Failed to initialize desugar-spx at Module level"
+		  )
+		where 
+			{| GetEnclosingModuleName : 	
+				 	with-spxverify(
+						 	rules(GetEnclosingModuleName := Module(enclosing-module-qname))
+							, !"Failed to create GetEnclosingModuleName rule"
+					)
+					; sections' := <conc>(<reverse><bagof-PackageCommonImports>, <alltd( origin-track-forced(desugar-spx))>section*)
+					; dbg-symboltable(! $[ Storing enclosing namespace : [<print-as-string>enclosing-module-qname]] | "desugar-spx" , "Info")
+					; with-spxverify(
+							currently-precompiling-spx-abspath  	=> package-abs-path
+							; !Module(attrb* , modname-with-annotation , sections') => modifiedModuleDescription
+							; <index-module-definition>(
+									Module(enclosing-module-qname), 
+									<currently-precompiling-spx-abspath>,
+									package,
+									m,
+									modifiedModuleDescription
+								)
+								, !"Indexing Module Declaration failed . " 		
+							)
+					  ; with-spxverify( <index-enclosed-modules>(package , Module(enclosing-module-qname)), !" Failed to index enclosed moduled")   
 			|}
-		with
-			currently-precompiling-spx-abspath  												=> package-abs-path;
-			!Module(attrb* , modname-with-annotation , sections')				=> modifiedModuleDescription
-		where
-			<store-module-abspath> (enclosing-module-qname, package-abs-path);
-			<store-declaration(|Modules())>(enclosing-module-qname,  modifiedModuleDescription);
-			<store-scope-reference>(Module(enclosing-module-qname),  package);
-			<store-original-declaration(|Modules())>(enclosing-module-qname,  m) // also storing original AST.
+				
 rules
 
 	//Desugaring SDF Sections
 	desugar-spx : 
-		SDFSection ( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> SDFSection( sectionDef' )
-		with
+		SDFSection ( sectionDef ) -> <add-annotation(|<GetEnclosingModuleName>)> SDFSection( sectionDef' )
+		where
 			<templatelang-desugar-sdf-top> sectionDef => sectionDef'
 	
 		
   // TODO: Maybe SDFSectionEH can be desugared into SDFSection.
 	desugar-spx : 
-		SDFSectionEH ( eh, sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> SDFSectionEH( eh, sectionDef' )
-		with
+		SDFSectionEH ( eh, sectionDef ) -> <add-annotation(|<GetEnclosingModuleName>)> SDFSectionEH( eh, sectionDef' )
+		where
     	<templatelang-desugar-sdf-top> sectionDef => sectionDef'
   
 rules
 	//Desugaring STR sections
 	desugar-spx : 
-		STRSection ( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> STRSection ( sectionDef' )
-		with
+		STRSection ( sectionDef ) -> <add-annotation(|<GetEnclosingModuleName>)> STRSection ( sectionDef' )
+		where
 			<basic-stratego-desugar-top> sectionDef => sectionDef'
 				
 rules
 	//Desugaring ESV Sections
 	desugar-spx : 
-		ESVSection ( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> <id>
+		ESVSection ( sectionDef ) -> <add-annotation(|<GetEnclosingModuleName>)> <id>
 		
 rules
 	//Desugaring template sections
   desugar-spx : 
-  	TemplateSection( sectionDef ) -> <add-annotation(|<EnclosingNamespace>)> TemplateSection( sectionDef' )
-  	with
-  		<templatelang-desugar-top> sectionDef => sectionDef'
\ No newline at end of file
+  	TemplateSection( sectionDef ) -> <add-annotation(|<GetEnclosingModuleName>)> TemplateSection( sectionDef' )
+  	where
+  		<templatelang-desugar-top> sectionDef => sectionDef'
+  		
+  		
+strategies 
+	
+	get-analyzed-ast = origin-track-forced(analyzed-ast)
+	
+rules
+	analyzed-ast:
+		CompilationUnit(moduledef*) -> 	
+			<analyzed-ast>CompilationUnit([] , [appended-default-package-declaration])
+		where
+			 appended-default-package-declaration :=  Package(Name(<default_package_name>) , moduledef*)
+
+	analyzed-ast:
+		c at CompilationUnit(import* , package*) -> 	
+			CompilationUnit( import* , modified-packages)
+		where
+				<alltd(origin-track-forced(analyzed-package-ast))> package* => modified-packages
+			
+	analyzed-package-ast:
+    Package(Name(package-name) , modules* ) -> result
+    where
+        !QName([package-name]) => package-qname;
+        <analyzed-package-ast>Package( package-qname , modules* ) => result            
+        
+	analyzed-package-ast:
+    p at Package(package-qname at QName(_) , modules* ) -> 
+    	Package(package-qname, modulesdef' )
+    where
+        !package-qname => QName(_);
+        {| GetEnclosingPackageName
+         :	rules(GetEnclosingPackageName := Package(package-qname))
+         		; <alltd(origin-track-forced(analyze-module-ast))>modules* => modulesdef'
+        |}
+	analyze-module-ast:
+			m at Module(attrb* , modname , section*) -> 
+				modifiedModuleDescription
+      where
+        GetEnclosingPackageName  =>  Package(QName(package-name-part*))
+        ; !modname => SPXModuleName(mod-name-string)
+        ; enclosing-module-qualified-typed-name :=  Module(QName([package-name-part*| [mod-name-string]]))
+      	; <get-analyzed-module-ast>enclosing-module-qualified-typed-name  => modifiedModuleDescription                      		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/signatures.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/signatures.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/signatures.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -19,4 +19,11 @@
 		Package					 : Namepace 
 		Package					 : QName -> Namespace
 		Module					 : QName -> Namespace
+	
+	
+	constructors
+		
+		PackageDef : Package * String  -> Def
+		 
+		ModuleDef : Module * String * Package * Term * Term -> Def
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -5,7 +5,7 @@
   include/SpoofaxLang
   utils/attributes
   utils/templatelang
-
+	common
 strategies
 
   templatelang-desugar-sdf-top =
@@ -22,49 +22,55 @@
   templatelang-desugar-sdf:
     SdfProductionWithCons(SortCons(sort, cons), symbol*, attrs(attr*)) ->
       prod(symbol*, sort(sort), attrs(attr'*))
-    with
+    where with-spxverify(
       attr'* := [sdf-cons(<double-quote> cons) | attr*]
+    )
 
   templatelang-desugar-sdf:
     SdfProductionWithCons(SortCons(sort, cons), symbol*, no-attrs()) ->
       prod(symbol*, sort(sort), attrs(attr'*))
-    with
+    where with-spxverify(
       attr'* := [sdf-cons(<double-quote> cons)]
+    )
 
 rules
 
   templatelang-desugar:
     TemplateProduction(sort, template, a) ->
       TemplateProduction(sort, template', attrs(attr*))
-    with
-      template' := <origin-track-forced(templatelang-template-desugar)> template;
-      attr*     := <templatelang-get-attrs> a
+    where 
+    	with-spxverify(
+					template' := <origin-track-forced(templatelang-template-desugar)> template;
+	        attr*     := <templatelang-get-attrs> a
+			)	
 
   templatelang-desugar:
     TemplateProductionWithCons(SortCons(sort, cons), template, a) ->
       TemplateProduction(sort, template', attrs(attr*))
-    with
-      template' := <origin-track-forced(templatelang-template-desugar)> template;
-      attr*     := [sdf-cons(<double-quote> cons) | <templatelang-get-attrs> a]
+    where 
+    	with-spxverify(
+	      template' := <origin-track-forced(templatelang-template-desugar)> template;
+	      attr*     := [sdf-cons(<double-quote> cons) | <templatelang-get-attrs> a]
+			)      
 
   templatelang-get-attrs =
     (no-attrs() -> []) + ?attrs(<id>)
 
   templatelang-template-desugar:
     SingleLineTemplate(elem*) -> SingleLineTemplate(elem'*)
-    with
-      elem'* := <templatelang-element-desugar-top> elem*
+    where with-spxverify(
+      elem'* := <templatelang-element-desugar-top> elem* )
 
   templatelang-template-desugar:
     Template([Line(elem*)]) -> SingleLineTemplate(elem'*)
-    with
-      elem'* := <templatelang-element-desugar-top> elem*
+    where with-spxverify(
+      elem'* := <templatelang-element-desugar-top> elem* )
 
   templatelang-template-desugar:
     Template(line*) -> Template(line'*)
     where
       not(!line* => [_])
-    with
+    where with-spxverify(
       let line-is-empty =
             ?Line([]) + ?Line([Layout(_)])
 
@@ -106,7 +112,7 @@
         map(line-remove-trailing-layout; line-ensure-leading-layout);
         unindent;
         ?line'*
-      end
+      end )
 
   templatelang-element-desugar-top =
     alltd(origin-track-forced(templatelang-element-desugar))
@@ -119,7 +125,7 @@
 
   templatelang-element-desugar:
     Escape(t) -> String(t')
-    with
+    where with-spxverify(
       let parse-unicode =
             {before*, mid, after*:
                split-fetch-keep(not(is-hexnum)) => (before*, mid, after*);
@@ -149,8 +155,10 @@
       in
         t' := <origin-track-forced(unescape)> t
       end
+      )
 
   templatelang-element-desugar:
     Layout(t) -> Layout(t')
-    with
+    where with-spxverify(
       t' := <origin-track-forced(string-replace(|"\t", "  "))> t
+     ) 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/to-spx.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/to-spx.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/to-spx.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -1,6 +1,5 @@
 module normalize/to-spx
 
-
 imports 
 	include/SpoofaxLang
 	utils/contract
@@ -15,15 +14,12 @@
 	to-spx-main-internal : legacy-artifact-details@(namespace, Module(Name(modulename)) , resolving-path) -> spx-content
 	where 
 		spx-content := ""
-	
-	
-	
 	sdf-to-spx(| package-type-qname, resolved-path) : sdf-content -> <id>	
-	with 
-		<has-extension(|"sdf") + has-extension(|"def")>resolved-path
-	with 
-		<contracts(
-			contract-requires(?Package(QName(_)))
-		)>package-type-qname
+		where with-spxverify( 
+			<has-extension(|"sdf") + has-extension(|"def")>resolved-path;
+
+			<contracts(
+				contract-requires(?Package(QName(_)))
+			)>package-type-qname
 		
-		 
\ No newline at end of file
+		)		 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -17,32 +17,30 @@
   context/sdf/declare
   context/str/declare
 imports
-  codegen/buildscripts
+	codegen/buildscripts
 	codegen/compile
 	codegen/esv/to-esv
 	codegen/sdf/to-sdf
 	codegen/sdf/to-name-analysis
-  codegen/sdf/to-signature
-  codegen/main
-
+ 	codegen/sdf/to-signature
+  	codegen/main
+   	codegen/template/-
 imports
 	normalize/main
 	normalize/signatures
-imports
 	context/-
 imports
 	utils/cache
 	common
-  config
-  /*
-	unit-tests/-
-	unit-tests/utils/-
-	*/
+	config
 imports
 	 editor/main
 	 codegen/main
-imports
-  codegen/template/-
+/*
+	unit-tests/templatelang/-
+	unit-tests/utils/-
+	unit-tests/-
+*/
 
 rules
 
@@ -54,7 +52,7 @@
   editor-resolve:
     (sort(x), position, ast, path, project-path) -> target
     where
-      target := <Declaration> x
+      target := <resolve-atleast-one-sdf-declaration> x
 
  /*  TODO : Fix Editor Resolve
   editor-resolve:
@@ -69,7 +67,7 @@
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"aterm")> path;
-      result   := ast // we just return the input term
+      result   := selected // we just return the input term
 
 strategies
 
@@ -81,4 +79,4 @@
     test-templatelang-to-sdf;
     test-templatelang-to-str;
     build-spoofaxlang-jvm;
-    compile-spx
+    editor-clean-and-compile-spx-all

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/compile.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/compile.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -21,7 +21,7 @@
 			editor-init;
 		  initialize-configuration
 		with 
-			<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
+			<store-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
 		with 
 			compile-all
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/parse.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/parse.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/parse.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -27,7 +27,7 @@
 		where
 			<debug> $[Verifying Expectaions .... ];
 			not(!actual => "");
-			<debug>$[SUCCESS.... ParsedContent : [<pp-aterm>actual]]
+			<debug>$[SUCCESS.... ParsedContent : [<print-as-string>actual]]
 		<+ 
 			<debug>$[FAILED...]
 			
@@ -41,7 +41,7 @@
 		where
 			<debug> $[Verifying Expectaions .... ];
 			not(!actual => "");
-			<debug>$[SUCCESS.... ParsedContent : [<pp-aterm>actual]]
+			<debug>$[SUCCESS.... ParsedContent : [<print-as-string>actual]]
 		<+ 
 			<debug>$[FAILED...]		
 				
@@ -56,7 +56,7 @@
 		where
 			<debug> $[Verifying Expectaions .... ];
 			not(!actual => "");
-			<debug>$[SUCCESS.... ParsedContent : [<pp-aterm>actual]]
+			<debug>$[SUCCESS.... ParsedContent : [<print-as-string>actual]]
 		<+ 
 			<debug>$[FAILED...]		
 			
@@ -70,7 +70,7 @@
 		where
 			<debug> $[Verifying Expectaions .... ];
 			not(!actual => "");
-			<debug>$[SUCCESS.... ParsedContent : [<pp-aterm>actual]]
+			<debug>$[SUCCESS.... ParsedContent : [<print-as-string>actual]]
 		<+ 
 			<debug>$[FAILED...]			
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/path.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/path.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/path.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -27,37 +27,33 @@
 		<+ 
 			<debug>$[FAILED...]	
 	
-
-	
-	
 	test-path:
 		(selected, position, ast, path, project-path) -> selected
 		where
 			<debug>$[=============Test 1: Get-Output-Path ============]
 			;result := <get-output-path(|"sdf")>( "c:/test" , QName(["a" , "b" , "c"]))
-			;<debug>$[[<pp-aterm-forced>result]] 
+			;<debug>$[[<print-as-string>result]] 
 		where
 			<debug>$[=============Test 2: Get-Output-Path with empty qname ============]
 			;result2 := <get-output-path(|"sdf")>( "c:/test" , QName([]))
-			;<debug>$[[<pp-aterm-forced>result2]] 	 
+			;<debug>$[[<print-as-string>result2]] 	 
 		where
 			<debug>$[=============Test 3: convert-qname ============]
 			;result3 := <convert-qname(|"-")>QName([])
-			;<debug>$[[<pp-aterm-forced>result3]] 	 
+			;<debug>$[[<print-as-string>result3]] 	 
 		where
 			<debug>$[=============Test 4: convert-qname ============]
 			;result4 := <convert-qname(|"-")>QName(["package" , "Name"])
-			;<debug>$[[<pp-aterm-forced>result4]] 	 
+			;<debug>$[[<print-as-string>result4]] 	 
 		where 
 			<debug>$[=============Test 5: get-main-file-name ============]
 			;result5 := <get-main-file-name>QName(["package" , "Name"])
-			;<debug>$[[<pp-aterm-forced>result5]]
+			;<debug>$[[<print-as-string>result5]]
 		where 
 			<debug>$[=============Test 6: get-main-file-path ============]
 			;result6 := <get-main-output-path(|"sdf")> ("c:/test" , QName(["package" , "Name"]))
-			;<debug>$[[<pp-aterm-forced>result6]]	
+			;<debug>$[[<print-as-string>result6]]	
 		where 
 			<debug>$[=============Test 7: get-output-path with prefix ============]
 			;result7 := <get-output-path(|"main", "sdf")> ("c:/test" , QName(["package" , "Name" , "A"]))
-			;<debug>$[[<pp-aterm-forced>result7]]	
-				 
\ No newline at end of file
+			;<debug>$[[<print-as-string>result7]]	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resolve-symbol.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resolve-symbol.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resolve-symbol.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -18,14 +18,15 @@
 			expected 		 := Module( QName(["Test" , "A" , <internal_module_name_string>] ))
 		where 
 			<debug>$[Running Test .... ];
-			actual :=  <get_internal_module_qtname(|package-name)>
+			actual :=  <get_internal_module_qtname>package-name
 		where
 			<debug> $[Verifying Expectaions .... ];
 			!expected  => actual;
 			<debug(!"SUCCESS. Actual and Expected :  ")> [actual, expected]
 		<+ 
 			<debug(!"FAILED. ")> [actual, expected]	
-				
+	
+			        
 	resolving-in-imported-scope-internal-symbol-fail:
 		(selected, position, ast, path, project-path) -> None()
 		where 
@@ -80,7 +81,7 @@
 					);
 					<debug>$[Test1: Resolve Declaration in imported scopes:-----------------];
 					if (result := <resolve-symbol-declarations(all-keys-Declaration , bagof-Declaration)><to-scoped-symbol>symbol1) then 
-						<debug>$[ Resolve Successful. Test Successful . Resolved Symbol : [<pp-aterm>result]]
+						<debug>$[ Resolve Successful. Test Successful . Resolved Symbol : [<print-as-string>result]]
 					end	
 			 |}
 	
@@ -223,7 +224,7 @@
 		scoped-symbol := <to-scoped-symbol>x
 		;rules(Declaration:+  scoped-symbol  -> scoped-symbol)
 	where
-		<debug>$[storing Global declaration [<pp-aterm>scoped-symbol]]
+		<debug>$[storing Global declaration [<print-as-string>scoped-symbol]]
 				
 	setup-declaration: x@(p , m , symbol) ->x
 	with
@@ -235,5 +236,5 @@
 				rules(Declaration:+ scoped-symbol  -> symbol)
 		|} 
 	where
-		<debug>$[storing declaration [<pp-aterm>scoped-symbol]]
+		<debug>$[storing declaration [<print-as-string>scoped-symbol]]
 			
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.aterm.desugared
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.aterm.desugared	Thu Nov 17 18:32:31 2011	(r23620)
@@ -0,0 +1,21 @@
+[ ModuleDecl(
+    Module(QName(["test", "lang", "Layout"]))
+  , "C:\\work\\projects\\spoofax\\spx-imp\\source-codes\\trunk\\org.strategoxt.imp.editors.spoofax\\trans\\unit-tests\\resources\\test.spx"
+  , Package(QName(["test", "lang"]))
+  )
+, ModuleDecl(
+    Module(QName(["test", "lang", "Keywords"]))
+  , "C:\\work\\projects\\spoofax\\spx-imp\\source-codes\\trunk\\org.strategoxt.imp.editors.spoofax\\trans\\unit-tests\\resources\\test.spx"
+  , Package(QName(["test", "lang"]))
+  )
+, ModuleDecl(
+    Module(QName(["test", "lang", "Literals"]))
+  , "C:\\work\\projects\\spoofax\\spx-imp\\source-codes\\trunk\\org.strategoxt.imp.editors.spoofax\\trans\\unit-tests\\resources\\test.spx"
+  , Package(QName(["test", "lang"]))
+  )
+, ModuleDecl(
+    Module(QName(["test", "lang", "Identifier"]))
+  , "C:\\work\\projects\\spoofax\\spx-imp\\source-codes\\trunk\\org.strategoxt.imp.editors.spoofax\\trans\\unit-tests\\resources\\test.spx"
+  , Package(QName(["test", "lang"]))
+  )
+]
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.spx	Thu Nov 17 18:32:31 2011	(r23620)
@@ -0,0 +1,106 @@
+package test.lang 
+	
+//test-new-spx-index
+module langconstructs-test 
+	context-free syntax   
+	  "module" ID Definition*        -> Start      {"Module"} 
+    "entity" ID "{" Property* "}"   -> Definition {"Entity"}
+	  ID  ":" Type -> Property   {"Property"} 
+	rules 
+	  pp-entitylang: Property(x, type) -> Property(x, type)
+    rules
+    // generate java codes from entitylang
+    to-java: Module(x, d*) ->
+    $[ package [x];    
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+        
+    to-java: Entity(x, p*) ->      
+    $[ class [x] {   
+           [p'*] 
+       }
+     ]
+    with
+      p'* := <to-java1> p*
+
+    to-java: Property(x, type) -> $[
+      private [<to-java>type] [x];
+      
+      public [<to-java>type] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([<to-java>type] [x]) { 
+          this.[x] = [x];    
+      }
+     ]     
+    
+     to-java: t* -> <map(to-java)> t*
+
+module Identifier
+		lexical syntax 
+	  	[a-zA-Z][a-zA-Z0-9]* -> ID
+		   INTE IN -> ID
+	 
+module Literals 
+		lexical syntax 
+			"-"? [0-9]+          -> INT 
+	    
+	    "\"" StringChar* "\"" -> STRING
+	    ~[\"\n]               -> StringChar 
+	    "\\\""                -> StringChar
+	    
+	    BackSlashChar         -> StringChar
+	    "\\"                  -> BackSlashChar  
+	    
+		lexical restrictions       
+  
+	    //Ensure greedy matching for lexicals
+	  
+	    CommentChar   -/- [\/]
+	    INT           -/- [0-9]
+	    ID            -/- [a-zA-Z0-9\_]
+	    
+			//Backslash chars in strings may not be followed by " 
+	    
+	    BackSlashChar -/- [\"]
+		
+module Keywords
+	
+	lexical syntax 
+ 		"int"					  			-> RESERVED 
+ 		"string"			  			-> RESERVED
+ 		 RESERVED 						-> ID{reject}
+
+	lexical restrictions
+		 //Ensure greedy matching for lexicals
+		"int" 
+		"string"  -/- [A-Za-z0-9\_]
+	    
+	
+module Layout
+    lexical syntax
+	    [\ \t\n\r] -> LAYOUT
+	    
+	    [\*]                             -> CommentChar
+	    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+	    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT   
+	    
+	    -> EOF
+	  
+	 lexical restrictions 
+      //Ensure greedy matching for lexicals
+	    //EOF may not be followed by any char
+	
+	    EOF           -/- ~[]
+	
+	 context-free restrictions 
+  
+  		  //Ensure greedy matching for comments
+
+		    LAYOUT? -/- [\ \t\n\r]
+		    LAYOUT? -/- [\/].[\/] 
+		    LAYOUT? -/- [\/].[\*]
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/resources/test.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -50,7 +50,7 @@
   editor-resolve:
     (sort(x), position, ast, path, project-path) -> target
     where
-      target := <Declaration> x
+      target := <resolve-atleast-one-sdf-declaration> x
  
  /*  TODO : Fix Editor Resolve 
   editor-resolve:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/symboltable.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/symboltable.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/symboltable.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -1,20 +1,24 @@
-module unit-tests/symboltable
+	module unit-tests/symboltable
 
 imports 
 	normalize/-
 	include/spoofaxlang
 	lib/editor-common.generated
-	
-signature constructors
-
+	context/symboltable
+	common
+	context/-
+	utils/debug
+imports 
+  context/str/signature-generator
 
+signature constructors
 
 rules 
 	
 	test-constructors1: 	
 		(selected, position, ast, path, project-path) -> None()
 		where
-				packageDef := PackageDef(Package( ["test" , "A"]) , "String Path ");
+				packageDef := PackageDecl(Package( ["test" , "A"]) , "String Path ");
 				<debug(!"Test PackageDef : ")>packageDef
 
 	test-constructors2: 	
@@ -23,19 +27,17 @@
 				moduleDef := ModuleDef(Module( ["test" , "A"]) , "String Path 2" , Package(["test"]) , Module(None(), SPXModuleName("Outliner"), []) , Module(None(), SPXModuleName("Outliner"), []));
 				<debug(!"Test ModuleDef : ")>moduleDef
 		where		
-				packageDef := PackageDef(Package( ["test" , "A"]) , "String Path ");
-				prim(
-				  "SPX_index_add_module" , 
+				packageDef := PackageDecl(Package( ["test" , "A"]) , "String Path ");
+				<index-module-definition'>
 				  ModuleDef(
-			      Module( ["test" , "A"]) ,  // name of the module 
+			      Module(QName(["test" , "A"])) ,  // name of the module 
 			      "StringPath2" ,  // path 
 			      Package(["test"]) , // package name  
 			      Module(None(), SPXModuleName("Outliner"), []) , // ast  
 			      Module(None(), SPXModuleName("Outliner"), [])  // annotated ast 
 		      )
-	      )
+	      
 rules 
-
 	test-spx-index-init:
     (selected, position, ast, path, project-path) -> None()
     where
@@ -52,43 +54,183 @@
       	
 
 rules 
-	
+	test-spx-packagedeclaration-save: 
+		(selected, position, ast, path, project-path) ->(filename, result) 
+		where 
+		  project-name := "test";
+		  result := "";
+	    filename := <guarantee-extension(|"test.aterm")> path
+    where
+      index-init
 	
 	test-spx-index-compilation-unit-save: 
 		(selected, position, ast, path, project-path) ->(filename, result) 
-		
 		where 
 		  project-name := "test";
 		   filename := <guarantee-extension(|"test.aterm")> path
     where
-      prim("SPX_index_init" , project-name);
+      index-init;
     	full-path := <concat-strings>[project-path, "/" , path];
  		  parsedAST := <parse-file>full-path  ;
  		  <debug(!"Storing AST : ")>parsedAST ;
- 		  prim("SPX_index_compilation_unit" , project-name , full-path , parsedAST);
+ 		  <index-compilation-unit>(full-path , parsedAST);
  		  debug(!"Saving!");
- 		  prim("SPX_index_save" , project-name);
+ 		  index-close;
  		  debug(!"Now reading it!");
- 		  prim("SPX_index_init" , project-name);
+ 		  index-init;
  		  debug(!"Init is done!");
  		  debug(!"getting comp unit ? !");
- 		  prim("SPX_index_compilation_unit_get" , project-name , full-path);
+ 		  <get-indexed-compilation-unit>full-path;
       ?result
 rules 
-	
   // Initializes index  with the project name specifed  
   test-spx-index-init:
     (selected, position, ast, path, project-path) -> None()
-    where
+     where
     	debug(!"Invoking : SPX_index_init");
-      prim("SPX_index_init" , "test");
+      index-init;
       debug(!"SPX_index_init is ok!")
  
  
  	// TODO : add more real-life tests 
-  test-spx-index-save:   (selected, position, ast, path, project-path) -> None()
-    where
+  test-spx-index-save:   
+  	(selected, position, ast, path, project-path) -> None()
+     where
     	debug(!"Invoking : SPX_index_save");
-      prim("SPX_index_save" , "test");
+      index-close;
       debug(!"SPX_index_save is ok!")
-      
\ No newline at end of file
+
+
+rules 
+	test-new-spx-index:
+    (selected, position, ast', path, project-path) -> (filename, result'')
+	 with  
+      file-path := <concat-strings> [project-path , "/trans/" , "unit-tests/resources/test.spx"];
+      ast := <parse-spoofaxlang-file> file-path 
+    with index-init ; index-clearall
+    with {|currently-precompiling-spx-abspath   
+    		  : current-spx-file-path := file-path; 
+	    			rules( currently-precompiling-spx-abspath :=  current-spx-file-path );    		
+	   				filename := <guarantee-extension(|"aterm.desugared")> path;
+	    		  result'   := <normalize-all> ast // returning desugared AST
+		     |};
+		     index-init;
+         packageQName    := Package(QName(["test" , "lang"]));
+         moduleQName     := Module(QName(["test" , "lang" , "Identifier"]));
+         package-decl    := <get-indexed-package-declaration>packageQName
+         where(<debug> $[Test Get Package Declaration  with : [<print-as-string>packageQName] , [<print-as-string>package-decl]]);
+         
+         module-def      := <get-indexed-module-definition>moduleQName 
+         where(<debug> $[Test Get Module Definition with : [<print-as-string>moduleQName ] , [<print-as-string>module-def]]);
+         result          :=   <get-indexed-module-declarations>file-path;
+         result''        :=  <get-indexed-module-declarations>packageQName ;
+         
+         where(<debug> $[Testing get-declared-modules-qname]);
+         list-modules-qanme := <get-declared-modules-qname> packageQName;
+         where(<debug> $[ length of the list should be 4 . actual : [<print-as-string> <length>list-modules-qanme]]);
+         where(<debug> $[Testing get-declared-modules-qname with list of package]);
+         
+         list-modules-qanme' := <get-declared-modules-qname> [packageQName];
+         where(<debug> $[ length of the list should be 4 . actual : [<print-as-string> <length>list-modules-qanme']]);
+         
+         where(<debug> $[Testing get-all-declared-modules-qname]);
+         list-modules-qanme-all := <get-all-declared-modules-qname>;
+         where(<debug> $[ length of the list should be 4 . actual : [<print-as-string> <length>list-modules-qanme-all]]);
+         
+         where(<debug> $[Testing get-all-declared-package-qname]);
+         list-package-qanme-all := <get-all-declared-packages-qname>;
+         where(<debug> $[ length of the list should be 1 . actual : [<print-as-string> <length>list-package-qanme-all ]]);
+         
+         where(<debug> $[Testing get-declared-package-qname  of file ]);
+         list-package-qanme := <get-declared-packages-qname> file-path;
+         where(<debug> $[ length of the list should be 1 . actual : [<print-as-string> <length>list-package-qanme]]);
+         
+         index-close;
+         index-init; 
+         
+         where(<debug> $[Testing get (desugared) module definition of : [<print-as-string>moduleQName]]);
+         moduleAST := <get-desugared-module-ast> moduleQName     ;
+         where(<debug> $[Found Following Module AST : [<print-as-string>moduleAST]]);
+         
+         where(<debug> $[Testing get module definition of : [<print-as-string>moduleQName]]);
+         moduleAST' := <get-module-ast> moduleQName     ;
+         where(<debug> $[Found Following Module AST : [<print-as-string>moduleAST']]);
+
+         index-close;   
+         index-init
+         
+             
+         
+    <+
+        where(<debug> $[Error Occured during Indexing. Closing underlying connection...]);
+        index-close; // if any error occurs , it tries to close the connection
+        fail 
+	  
+	    
+  
+ test-new-spx-index1:
+    (selected, position, ast', path, project-path) -> None()
+    with index-init ; index-clearall
+    with enable-symboltable-debugging
+    with 
+      [moduledef|_] := <collect-all-module-definition; debug(!"moduledefs :")> ast';
+      <debug(!"module def :" )>moduledef;
+      moduleID      := Module(QName(["test" , "lang" , "testM"]));
+      scopedModuleID := <to-scoped-symbol>moduleID;
+      <index-symbol-definition> ( scopedModuleID  ,ModuleType() , moduledef);
+      debug(!"Indexing done!.Found following module def in index lookup :");
+      namespace := <get-scope-from-symbol> scopedModuleID;
+      key := <remove-scope-from-symbol> scopedModuleID;
+      <debug(!"Trying to resolve symbol definition: ")>(namespace , key , ModuleType());  
+      <resolve-all-symbol-definitions>(key , ModuleType());
+      <debug(!" Results found ... with STRSections :  ")> <collect-all-str-sections>;
+      index-close   
+    <+
+        where(<debug> $[Error Occured during Indexing. Closing underlying connection...]);
+        index-close; // if any error occurs , it tries to close the connection
+        fail 
+    
+
+  	
+  collect-all-module-definition =  collect-om(?Module(_,_,_))
+    
+  collect-all-str-sections = collect-om(?STRSection(_))
+          
+  debug-symboltable-test :
+    (selected, position, ast', path, project-path) -> None()
+    where
+      editor-init;
+      dbg-symboltable(! "test" | "debug-symboltable-test" , "Info");
+      debug(!"id :")
+
+
+rules 
+  // signature explode testing 
+ test-str-signature:
+    (selected, position, ast', path, project-path) -> None()
+    where
+     {  
+      sig1 := ("strategoName" , 1 , 1)
+      ;<debug(!"id : ")><signature-to-declaration-id>sig1
+      ;<debug(!"sname : ")><signature-to-str-args-length>sig1
+      ;<debug(!"tname : ")><signature-to-term-args-length>sig1
+     } 
+   where
+     {
+      sig1 := ("strategoName" , 1)
+      ;<debug(!"id : ")><signature-to-declaration-id>sig1
+      ;<debug(!"sname : ")><signature-to-str-args-length>sig1
+      ;<debug(!"tname : ")><signature-to-term-args-length>sig1
+     }
+   where
+     {
+      sig1 := "strategoName"
+      ;<debug(!"id : ")><signature-to-declaration-id>sig1
+      ;<debug(!"sname : ")><signature-to-str-args-length>sig1
+      ;<debug(!"tname : ")><signature-to-term-args-length>sig1
+     }  
+      
+      
+      
+      
+               
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -4,111 +4,104 @@
 	lib/editor-common.generated 
 	utils/path
 	utils/debug
+	context/signatures
+	context/scope-tree
 	config
+	utils/contract
 	
 rules
   open-spx-compilation-unit(resolve-spx-path, resolve-cache-path, parse-file, precompile):
-    path -> spx-compilation-unit
-    with
+    path -> <id>
+    where with-spxverify(
     	full-path := <resolve-spx-path>path;
     	cache-path := <resolve-cache-path> full-path;
-    	path' := <get-normalized-path> full-path;
-    	if not(<CachedCompilationUnit> full-path) then
-      	if not( spx-compilation-unit:=  <CachedParseAst> <string-replace(|"\\", "/")>full-path) then
-					if <is-newer> (cache-path, path) then
-          	// Cache is still valid. 
-          	spx-compilation-unit := <ReadFromFile> cache-path
-          else
-          	// Invalid cache. So reading it from actual source and parsing it. 
-          	spx-compilation-unit := <parse-file> full-path;
-            if <file-exists> full-path then
-            	// Only cache if on filesystem (e.g., ignore libstratego-lib)
-              <WriteToBinaryFile> (cache-path, spx-compilation-unit)
-              // Marking this compilation unit for 
-          		// seperate compilation.
-          		;rules ( 
- 			  				modified-compilation-units: path'    
- 			  			)
-            end
-          end
- 				end;
- 				//TODO : delete the following dynamic rules since it is no longer used
- 				rules (
- 			  	CachedCompilationUnit: path' -> (cache-path,spx-compilation-unit)
- 			  );
- 			  {| currently-precompiling-spx-abspath:
- 			  			rules ( 
- 			  				currently-precompiling-spx-abspath := path'  
- 			  			); 
- 			  			
- 			  			<precompile <+ throw-precompile-exception>spx-compilation-unit	
- 			  |}
- 			end
-  	where 
-  		<debug-compiler>$[Caching |Storing CompilationUnit: [<pp-aterm>full-path]]
+    	path' := <get-normalized-path> full-path
+    	//TODO : Take the following whole logic in indexing structure based on cached path and actual path.
+    	//For example  - 
+    	//if <verify-indexing-needed> (cache-path, path) then
+    	//   ast := read it from file
+    	//   index-compilation-init ( path , ast) 
+    	//   <precompile> ast
+    	//else
+    	//   ast : = get-compilation-unit 
+    	//end     
+  	)
+  	where with-spxverify(
+		  if <is-newer> (cache-path, path) ; not(<get-currently-analyzing-ast-from-cache> full-path)then
+      	// spx-compilation-unit := <ReadFromFile> cache-path;
+      	dbg-compiler(! $[Cache | Already updated . Hence, doing nothing]) 
+      	// since cache is updated , it is assumed that index is updated as well
+      else
+        
+        //1. getting the cached AST to precompile it due to the recent changes.
+        if not( spx-compilation-unit:=  <get-currently-analyzing-ast-from-cache>full-path) then
+          dbg-compiler(! $[Cache | Reading it from actual source!]) ;
+          spx-compilation-unit := <parse-file> full-path
+        else
+          dbg-compiler(! $[Cache | Reading it from cached source(or currently analzing ast)]) 
+        end;
+        
+        //2. precomiling it so update the index and related artifacts 
+        {| currently-precompiling-spx-abspath:
+            rules ( 
+              currently-precompiling-spx-abspath := path'  
+            ); 
+            dbg-compiler(! $[Cache | Precompiling [path']]);
+            // precompiling modified source to update the cache 
+            <precompile <+ throw-precompile-exception>spx-compilation-unit  
+        |};
+        
+        //3. precomile is successful . Hence updating the existing cache. 
+        //   cache acts as a market to indicate whether compilation and 
+        //   code generation is needed. 
+        //   if it is in cache it means the precompilation is not needed.
+        if <file-exists>full-path then
+          // updating cache if on filesystem (e.g., ignore libstratego-lib)
+          <WriteToBinaryFile> (cache-path, spx-compilation-unit);
+          dbg-compiler(!$[Caching |Updating cache for following CompilationUnit: [<print-as-string>full-path]])
+        end;
+        <index-modified-compilation-units-path> path'
+    	end
+  	)		
 
+    
 rules 
-	get-normalized-path = string-replace(|"\\", "/")
+	lib-exists-in-cache  = where(spx-lib-cache-path ; file-exists)
+	 
+	get-cached-lib-ast(read-lib) : 
+		name -> ast
+		where 
+			with-spxverify(
+				<spx-lib-cache-path> name => cache-path
+				; if <file-exists> cache-path then
+				 	 	<ReadFromFile> cache-path => ast
+				 		; dbg-compiler(! $[Caching | Found ast [name].] |"get-cached-lib-ast","info")
+					else
+						<read-lib>name => ast
+						; <WriteToBinaryFile> (cache-path, ast) 
+					end
+			, !"Failed to get cached lib-ast"
+			)
+			     
+signature constructors 
+	CachedParseAstDef : Def
+	ModifiedCompilationUnit: Def
 	
-	cache-lib-ast : a@( name , ast) -> a
-	where
-		<spx-lib-cache-path> name => lib-cache-path
-	where
-		<WriteToBinaryFile> (lib-cache-path, ast)
-	
-	get-cached-lib-ast(read-lib) : name -> ast
-		with
-			<spx-lib-cache-path> name => cache-path
-		where
-			if not(invalidate-lib-cache) then
-			 	<debug-compiler>$[Caching | Cache is invalidated for [name]. read it.];
-	     	fail	 
-	     else
-				if <file-exists> cache-path then
-				 	<debug-compiler>$[Caching | lib Cache is still valid  for [name]]
-				 	;<ReadFromFile> cache-path => ast
-				 	;<debug-compiler>$[Caching | Found ast [name].]
-				else
-					<read-lib>name => ast
-					;<cache-lib-ast>( name , ast) 		 
-				end
-			 end     
-rules
-	cache-semantic-issues: (abs-path ,issues) ->(abs-path ,issues)
-	where
-		<debug-compiler>$[Caching | Storing in Cache : [<pp-aterm>]]
-	where 	
-		<spx-semantic-issues-cache-path> abs-path => cache-path;
-		<debug-compiler>$[Caching | Cache Path  :[<pp-aterm>]]
-	where 	 
-	  <WriteToBinaryFile> (cache-path, issues)
-  
-	get-cached-semantic-issues : abs-path ->issues
-		where
-			<spx-semantic-issues-cache-path> abs-path => cache-path 
-			;if <is-newer> (cache-path, abs-path)then
-			 	<debug-compiler>$[Caching | Cache is still valid  :[<pp-aterm>]]
-			 	;<ReadFromFile> cache-path => issues
-			 	;<debug-compiler>$[Caching | Found Issues:[<pp-aterm>]]
-	     else
-				<debug-compiler>$[Caching | Cache is invalidated. Going in the hard way.];
-	     	fail		
-	     end     
-		
-	    
 rules
 	// caching currently analyzing AST so that we don't have to read it again from the file and to use it later on. 
-	cache-currently-analyzing-ast = 
-		(?(path, compilation-unit-ast) <+ throw-invalid-argument-exception(|"utils.cache.cache-currently-analyzing-ast")); 
-		path' := <string-replace(|"\\", "/")>path;
-		rules(
-	      CachedParseAst: path' -> compilation-unit-ast
-	  );
-	  where ( <debug-compiler> $[Cache| storing currently analyzing AST in the cache with following key :  [<pp-aterm> path']] ) 
-
-
+	store-currently-analyzing-ast = 
+		where(
+			(?(path, compilation-unit-ast) <+ throw-invalid-argument-exception(|"utils.cache.cache-currently-analyzing-ast")); 
+			path' := <get-normalized-path>path;
+			with-spxverify(
+				<store-declared(|CachedParseAstDef())>(path' ,compilation-unit-ast)
+			, !"Failed to store store-currently-analyzing-ast "
+			)
+	  )
 	
-rules 
+	get-currently-analyzing-ast-from-cache  = get-normalized-path ; get-declared(|CachedParseAstDef()) 
+	
+	get-all-modified-compilation-units = 	get-all-declared-by-type(|ModifiedCompilationUnit())
 	
-	get-all-modified-compilation-units = 	all-keys-modified-compilation-units
-					
\ No newline at end of file
+	index-modified-compilation-units-path = verify(String | <id> , "String"); store-declared(|ModifiedCompilationUnit()) 
+	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/contract.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -3,8 +3,35 @@
 	common
 	utils/debug
 
+rules 
+  
+  with-verify(s, on-fail-exec , msg) = where(verify-stratego(s, on-fail-exec, !$["Internal error: with clause failed unexpectedly. More : [<msg>]]))
+  
+  with-verify(s, on-fail-exec) = where(verify-stratego(s, on-fail-exec, !"Internal error: with clause failed unexpectedly"))
+  
+  verify-stratego(s,on-fail-exec,message) =
+    s
+  <+
+    on-fail-exec;
+    log(|Critical(), <as-string(message)>, <id>);
+    prim("SSL_stacktrace_get_all_frame_names");
+    report-failure
 
+  
+  as-string(s) = s; as-string <+ !"<?>"
+
+  as-string = is-string <+ write-to-string
+
+
+    
 //Draft of code contracts for stratego
+rules 
+  verify(s | arg , expected) = contracts(contract-requires(s| arg , expected))
+  
+  verify(s | arg) = contracts(contract-requires(s| arg))
+  
+  verify(s) = contracts(contract-requires(s))
+ 
 rules
 
 	contract-requires ( s , on-fail | arg , expected) =
@@ -14,10 +41,10 @@
 
 
 	contract-requires ( s | arg , expected) =
-			where(<s>arg)
+			where(<s> arg)
 		<+
-			<debug> $[Contract | Requires Failed - actual :[<pp-aterm>arg] expected : [expected]]
-			;fail
+			dbg-analysis(! $[Requires Failed. Reason : actual :[<print-as-string>arg] expected : [expected]] | "Contract" , <debug-level-WARNING> ) 
+			; fail
 
 
 	contract-requires ( s | arg ) = <contract-requires (s)> arg
@@ -26,8 +53,8 @@
 	contract-requires (s) =
 			where(s)
 		<+
-			<debug> $[Contract | Requires Failed - argument :[<pp-aterm>] ]
-			;fail
+			dbg-analysis(! $[Requires Failed - argument :[<print-as-string>] ]  | "Contact" , <debug-level-WARNING>) 
+			; fail
 
 
 	contracts ( s ) =  where(s) <+ fail

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -2,63 +2,97 @@
 
 imports
 	common
+	context/signatures
+	context/symboltable
+	context/scope-tree
+	
+signature 
+	constructors 
+		DegugAllFlag               : Flag 
+		DebugStrFlag               : Flag 
+		DebugSDFFlag               : Flag 
+		DebugDeclarationFlag       : Flag   
+		DebugSymbolTableFlag       : Flag
+		DebugCompilerFlag          : Flag  
+		DebugSemanticAnalysisFlag  : Flag
+
+
+rules
+	debug-level-INFO = !"Info"
+	
+	debug-level-WARNING = !"Warning"
+	
+	debug-level-ERROR  = !"Error" 
+			
+rules 
+	
+	is-debug-enabled : 
+		flag -> <id>
+		where
+				to-index := <get-constructor>flag;
+				<get-declared(|flag)> to-index 
+					  
+	enable-debug-flag : 
+		flag -> <id>
+		where
+			with-spxverify(
+				to-index := <get-constructor>flag;
+				<store-declared(| flag)> ( to-index, to-index)
+		  )   	
+	
+	disable-debug-flag :
+		flag -> <id>
+		where
+			with-spxverify(
+				to-index := <get-constructor>flag;
+				<undef-declared(| flag)> to-index
+		  )
+ 	 
+rules
+	
+	enable-debug-all   = where(!DegugAllFlag() ;  enable-debug-flag)
 
-strategies
-	enable-debug-all  = rules ( DebugAll: _ )
+	disable-debug-all  = where(!DegugAllFlag() ;  disable-debug-flag) 
 
-	disable-debug-all  = rules ( DebugAll:- _ )
-
-strategies
+	DebugAll = where(!DegugAllFlag() ; is-debug-enabled)
+rules
 
-	enable-stratego-debugging  = rules(DebugStr: x -> x)
+		// Debug switches
+	enable-declaration-debugging  = where(!DebugDeclarationFlag() ;  enable-debug-flag)
 
-	disable-stratego-debugging = rules(DebugStr:- _ )
+	disable-declaration-debugging = where(!DebugDeclarationFlag() ;  disable-debug-flag)
 
-	debug-str = not(DebugStr) <+ debug
+	dbg-declaration(msg|site, type) = where(not(<is-debug-enabled>DebugDeclarationFlag() <+ DebugAll) <+   <debug>$[ $[$Declaration | [site] | [type] $]$ [<msg>]])
 
-strategies
+rules
+		
+	enable-symboltable-debugging  = where(!DebugSymbolTableFlag() ;  enable-debug-flag)
 
-	enable-sdf-debugging  = rules(DebugSDF: _)
+	disable-symboltable-debugging = where(!DebugSymbolTableFlag() ;  disable-debug-flag)
 
-	disable-sdf-debugging = rules(DebugSDF:- _ )
+  dbg-symboltable(msg|site, type)  = where(not(<is-debug-enabled>DebugSymbolTableFlag() <+ DebugAll) <+  <debug>$[$[$SymbolTable | [site] | [type] $]$  [<msg>]])
 
-	// Debug switches
-	enable-declaration-debugging  = rules(DebugDeclaration: x -> x)
-
-	disable-declaration-debugging = rules(DebugDeclaration:- _ )
-
-	debug-declaration(| site, type) = not(DebugDeclaration <+ DebugAll)  <+ <debug>$[ $[$ Declaration | [site] | [type] $]$ [<id>]]
-
-
-
-	// Debug switches  for symbol table
-	enable-symboltable-debugging  = rules(DebugSymbolTable: x -> x)
+rules  
+  enable-semantic-analysis-debugging  = where(!DebugSemanticAnalysisFlag() ;  enable-debug-flag)
 
-	disable-symboltable-debugging = rules(DebugSymbolTable:- _ )
-
-	debug-symboltable = not(DebugSymbolTable <+ DebugAll)  <+ debug(!"[ SymbolTable | ")
-
+	disable-semantic-analysis-debugging  = where(!DebugSemanticAnalysisFlag() ;  disable-debug-flag)
 
-  // Debug switches for semantic analysis
-	enable-semantic-analysis-debugging = rules(DebugSemanticAnalysis: x -> x)
-
-	disable-semantic-analysis-debugging = rules(DebugSemanticAnalysis:- _ )
-
-	debug-analysis = not(DebugSemanticAnalysis <+ DebugAll)  <+ debug(!"[ SemanticAnalysis | ")
+  dbg-analysis(msg|site, type)  = where(not(<is-debug-enabled>DebugSemanticAnalysisFlag() <+ DebugAll) <+  <debug>$[$[$semantic analysis | [site] | [type] $]$  [<msg>]])
 
+rules
 
- 	// Debug switches for compile
-	enable-compiler-debugging  = rules(DebugCompiler: x -> x)
+	enable-compiler-debugging    = where(!DebugCompilerFlag() ;  enable-debug-flag)
 
-	disable-compiler-debugging = rules(DebugCompiler:- _ )
+	disable-compiler-debugging   = where(!DebugCompilerFlag() ;  disable-debug-flag)
 
-	debug-compiler = not(DebugCompiler <+ DebugAll)  <+ debug(!"[ Compiler | ")
+  debug-compiler(msg) = where(not(<is-debug-enabled>DebugCompilerFlag() <+ DebugAll)<+   <debug>$[ $[$Compiler $]$ [<msg>]])  
 
+	dbg-compiler(s) = debug-compiler(s)
+	
+	dbg-compiler(msg|site, type) =  where(not(<is-debug-enabled>DebugCompilerFlag() <+ DebugAll)<+   <debug>$[ $[$Compiler | [site] | [type] $]$ [<msg>]])  
 
-  // Debug switches for TemplateLang
-  debug-templatelang = debug(!"[ TemplateLang | ")
-
- rules
+	
+rules
 
  	debug-time(s|msg) =
       where(starttime := <times>)
@@ -71,11 +105,11 @@
       )
 
 rules
-	throw-unable-read-exception(|message) = debug(!message);fail
+	throw-unable-read-exception(|message) = debug(!message);fail
+	
 	throw-unable-read-file = debug(!"unable to read file : ")
 
 rules
-	throw-precompile-exception = debug(!"Could not precompile: "); fail
-	throw-invalid-argument-exception(|strategy-name) = <debug>$[invalid argument at [strategy-name] : [<pp-aterm><id>]]; fail
-
-
+	throw-precompile-exception = debug(!"Could not precompile: "); fail
+	
+	throw-invalid-argument-exception(|strategy-name) = <debug>$[invalid argument at [strategy-name] : [<print-as-string><id>]]; fail

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/path.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -11,6 +11,8 @@
 	spoofaxlang
 
 rules 
+		get-normalized-path = string-replace(|"\\", "/")			
+rules 
 	
 	has-known-extensions  =
 		?file-path ;
@@ -19,17 +21,17 @@
 		is-not-empty-list;
 		!file-path
 	<+
-		<debug> $[Unknown File Type found at :[<pp-aterm>] . Supported File Extensions are : [<get-known-legacy-extensions;pp-aterm>]];
+		<debug> $[ERROR::  Unknown File Type found at :[<print-as-string>] . Supported File Extensions are : [<get-known-legacy-extensions;print-as-string>]];
 		fail
 		
 
 rules 
 	
-	qname-to-path = 
-		convert-qname(|"/")
+	qname-to-string-as-qualified-path = convert-qname(|".")
+	 
+	qname-to-path = 	convert-qname(|"/")
 	
-	qname-to-string = 
-		convert-qname(|"-")
+	qname-to-string =	convert-qname(|"-")
 		
 	convert-qname(|seperator) =
 		?QName(qname-parts*)
@@ -113,10 +115,12 @@
 	
 	create-folder(|directory-to-create) = <file-exists<+mkdir(|"w")> directory-to-create;<chdir>directory-to-create  
 	
-  create-folder: folder-name -> None() 
-		with 
+  create-folder: 
+  	folder-name -> None() 
+		where with-spxverify(
     	<file-exists<+mkdir(|"w")> folder-name 
-      ;<chdir>folder-name 		    
+      ;<chdir>folder-name
+   	) 		    
   
   chdir-to-project-path =  
   <chdir><get-project-path>   
@@ -134,68 +138,60 @@
 		
 	spx-cache-path(|extension-prefix):
     full-path -> cache-path
-    with
-      project-path := <get-project-path>;
-      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.spxcache];
-      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
-      cache-path   := $[[cache-dir]/[full-path'].[extension-prefix]]
-	
-	spx-compilation-unit-path=
-		where(is-string);
-		abspath
+    where 
+    	with-spxverify(
+	      project-path := <get-project-path>;
+	      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.spxcache];
+	      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+	      cache-path   := $[[cache-dir]/[full-path'].[extension-prefix]]
+    	)
+	
+	spx-compilation-unit-path = where(is-string); abspath
 		
 rules 
 	resolve-legacy-import-path(|sourcedir) =
 		 where (is-string);
-		 {| SourceDir, ProjectDir:
-		 		rules( 
-		 			ProjectDir  := <get-project-path>
-		 			SourceDir		:= sourcedir 
-		 		);	
-			 		 try-resolve-as-sdf
-				<+ try-resolve-as-str
-				<+ try-resolve-as-esv
-		 |}
-		<+ 
-		 <debug-symboltable> $[PathResolving | resolve-legacy-import-path|Failed to resolve import path for : [<pp-aterm>]]
-		 ;!Unresolved() 
+		 try-resolve-as-sdf(|sourcedir )
+	<+ try-resolve-as-str(|sourcedir )
+	<+ try-resolve-as-esv(|sourcedir )
+	<+ 
+		 dbg-compiler(! $[PathResolving | resolve-legacy-import-path|Failed to resolve import path for : [<print-as-string>]])
+		 ; !Unresolved() 
 	
 			
-	try-resolve-as-str = 
+	try-resolve-as-str(|source-dir) = 
 		?importname; 
 		where (
-			full-path := <resolve-import-path> $[[importname].str]
+			full-path := <resolve-import-path'(|source-dir)> $[[importname].str]
   	<+
-  		full-path := <resolve-import-path> $[[importname].rtree]
+  		full-path := <resolve-import-path'(|source-dir)> $[[importname].rtree]
 		);
 		!full-path
 	
 	
-	try-resolve-as-sdf = 
+	try-resolve-as-sdf(|source-dir) = 
 		?importname; 
 		where (
-			full-path := <resolve-import-path> $[[importname].sdf]
+			full-path := <resolve-import-path'(|source-dir)> $[[importname].sdf]
   	<+
-  		full-path := <resolve-import-path> $[[importname].def]
+  		full-path := <resolve-import-path'(|source-dir)> $[[importname].def]
 		);
 		!full-path
 		
 		
-	try-resolve-as-esv = 
+	try-resolve-as-esv(|source-dir) = 
 		fail
 	
-	
-	
 	//TODO refactor : fetch the folders from the config.str 
-	resolve-import-path:
+	resolve-import-path'(|source-dir):
   x -> full-path
   where
-  	full-path := <file-exists> $[[<SourceDir>]/[x]]
- <+ full-path := <file-exists> $[[<ProjectDir>]/[x]]
- <+ full-path := <file-exists> $[[<ProjectDir>]/trans/[x]]
- <+ full-path := <file-exists> $[[<ProjectDir>]/lib/[x]]
- <+ full-path := <file-exists> $[[<ProjectDir>]/src/[x]]
- <+ full-path := <file-exists> $[[<ProjectDir>]/syntax/[x]]
- <+ full-path := <file-exists> $[[<ProjectDir>]/syn/[x]]
- <+ full-path := <file-exists> $[[<ProjectDir>]/src/syntax/[x]]
+  	full-path := <file-exists> $[[source-dir]/[x]]
+ <+ full-path := <file-exists> $[[<get-project-path>]/[x]]
+ <+ full-path := <file-exists> $[[<get-project-path>]/trans/[x]]
+ <+ full-path := <file-exists> $[[<get-project-path>]/lib/[x]]
+ <+ full-path := <file-exists> $[[<get-project-path>]/src/[x]]
+ <+ full-path := <file-exists> $[[<get-project-path>]/syntax/[x]]
+ <+ full-path := <file-exists> $[[<get-project-path>]/syn/[x]]
+ <+ full-path := <file-exists> $[[<get-project-path>]/src/syntax/[x]]
    		
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sdf2conflicts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sdf2conflicts.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sdf2conflicts.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -5,11 +5,17 @@
 
 // This is slightly inspired by sdftools/trans/sdf2ast-conflicts.str
 
+//TODO : Calculate SubTerm Conflicts incrementally. Currently, it is getting  
+// SDF definitions of the whole package and calculating it while it is highly 
+// probable that only few modules has been changed during current session.  
+
 module sdf2conflicts
 imports
   libstratego-lib
   libstratego-sglr
-
+	common
+	utils/debug
+	
 signature
   constructors
     Symbol : String * Int -> Symbol
@@ -21,10 +27,11 @@
 
   sdf2conflicts-store-sdf:
     ast -> ast
-    with
+    where with-spxverify(
     	rules(
     		Sdf2Conflicts-SdfSection :+= ast
     	)
+    )	
 
   /*
    * sdf2conflicts: Calculate set of conflicts that are filtered out using
@@ -41,20 +48,21 @@
    */
   sdf2conflicts:
     ast -> ast
-    with
+    where with-spxverify(
       prod-hash := <new-hashtable> // (sym*, sort) => attr*
-    with
+    )
+    where with-spxverify(
       let err(|msg) = debug(!<conc-strings> (msg, ": ")); fail
 
           // push the attributes of a production into prod-hash
           declare-prod =
             \ p@ prod(sym*, sort, attrs(attr*)) -> p
-              with <hashtable-pushlist(|(sym*, sort), attr*)> prod-hash \
+              where with-spxverify(<hashtable-pushlist(|(sym*, sort), attr*)> prod-hash) \
 
           // add all attributes defined anywhere to a production
           lookup-prod = {attr*:
             \ p@ prod(sym*, sort, _) -> prod(sym*, sort, attrs(attr*))
-              with attr* := <hashtable-get(|(sym*, sort)) <+ ![]> prod-hash \
+              where with-spxverify(attr* := <hashtable-get(|(sym*, sort)) <+ ![]> prod-hash) \
           }
 
           priority-section =
@@ -145,13 +153,13 @@
             ?(lhs, rhs);
             Symbol(_, n) := <Prod2Symbol> lhs;
             <range> (0, n);
-            map(\ arg -> arg with <add-prio(|arg)> (lhs, rhs) \)
+            map(\ arg -> arg where with-spxverify( <add-prio(|arg)> (lhs, rhs) )\)
           }
 
           add-arg-gtr-prio(|indices) = {lhs, rhs:
             ?(lhs, rhs);
             !indices;
-            map(\ arg -> arg with <add-prio(|<arg-for-symbol(|lhs)> arg)> (lhs, rhs) \)
+            map(\ arg -> arg where with-spxverify (<add-prio(|<arg-for-symbol(|lhs)> arg)> (lhs, rhs)) \)
           }
 
           add-left-assoc = {lhs, rhs, n:
@@ -214,7 +222,7 @@
           }
 
           add-self-associativities =
-            with(
+            with-spxverify(
               <hashtable-getlist> prod-hash;
               list-loop(
                 \ ((sym*, sort), attr*) -> prod(sym*, sort, attrs(attr*)) \;
@@ -241,14 +249,18 @@
             })
 
           make-transitive =
-            with( \SubtermConflicts/* make-transitive-step )
+            with-spxverify( \SubtermConflicts/* make-transitive-step )
 
           // Debug
           print-SubtermConflicts(|msg) =
-            with(
-              <debug> msg;
-              all-keys-SubtermConflicts;
-              list-loop(debug(!"key: "); bagof-SubtermConflicts; debug(!"values: "))
+            with-spxverify(
+            	dbg-compiler(!$[msg [<print-as-string>]]);
+            	all-keys-SubtermConflicts;
+              list-loop(
+              	dbg-compiler(!$[keys: [<print-as-string>]])
+              	; bagof-SubtermConflicts
+            	  ; dbg-compiler(! $[values: [<print-as-string>]])
+        	    )
             )
 
       in
@@ -263,8 +275,9 @@
         add-non-transitives;
         add-associativities;
         add-self-associativities
-
         ;print-SubtermConflicts(|"=== FINAL ===")
       end
-    with
+    )
+    where with-spxverify(
       <hashtable-destroy> prod-hash
+	  )
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str	Thu Nov 17 17:11:33 2011	(r23619)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/sourcedir.str	Thu Nov 17 18:32:31 2011	(r23620)
@@ -15,7 +15,6 @@
         ; explode-string(|'/')
         ; take(|<subt> (<length>, ndirs))
         ; implode-string(|'/') => basedir
-        ; rules(SourceDir := basedir)
         
   get-soure-base-dir = get-project-path
           

From M.A.Akhter at student.tudelft.nl  Thu Nov 17 19:38:39 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 17 Nov 2011 18:38:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23621 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor
Message-ID: <20111117183839.9502B7F8025@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Nov 17 18:38:39 2011
New Revision: 23621
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23621&sc=1

Log:
builder + on save event-handler

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Thu Nov 17 18:32:31 2011	(r23620)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Builders.esv	Thu Nov 17 18:38:39 2011	(r23621)
@@ -15,30 +15,33 @@
 
 	observer                  : editor-analyze
 
-	builder : "Build-All" =
-    build-all (openeditor) (realtime) (meta)
+  builder : "Compile" = editor-compile-spx-all-incrementally
+  
+  builder : "Clean Compile" = editor-clean-and-compile-spx-all 
 
-  builder : "Abstract Syntax" =
-    generate-aterm (openeditor) (realtime) (meta) (source)  
+	builder : "Build All" = editor-build-all(openeditor) 
 
-  builder : "Normalize-All" =
-  		normalize(openeditor) (realtime) (meta) (source)
-  
-  
-  builder : "Name Analysis (for selection)" =
-    generate-name-analysis (openeditor) (realtime) (meta) (source)
-  
-  builder : "Compile-All" =
-    compile-spx(openeditor) (realtime) (meta)
+	builder : "Clean Build" = editor-build-all-after-cleanup(openeditor)
+
+	builder : "Clean Project" = editor-clean-spx
 
+  builder : "Show SPXConfiguration" =    show-configuration(openeditor) 
 
-  builder : "Show-Config" =
-    show-configuration(openeditor) (realtime) (meta)
+	builder : "Abstract Syntax" = generate-aterm (openeditor) (realtime) (meta) (source)  
 
-  /*
+  builder : "Normalize-All" =  normalize(openeditor) (realtime) (meta) (source)
+  
+  builder : "Name Analysis (for selection)" = generate-name-analysis (openeditor) (realtime) (meta) (source)
+  
+	  /*
   builder : "test-resolve" =
     test-resolving-symbol (openeditor) (realtime) (meta)
   */
 
-  builder : "Test TemplateLang" =
-    run-templatelang-tests (meta)
+  builder : "Test TemplateLang" = run-templatelang-tests (meta)
+  
+  
+  on save		: build-incrementally-service
+
+
+

From M.A.Akhter at student.tudelft.nl  Thu Nov 17 19:39:03 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 17 Nov 2011 18:39:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23622 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax
Message-ID: <20111117183903.69015CC0D5@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Nov 17 18:39:03 2011
New Revision: 23622
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23622&sc=1

Log:
new spoofaxconfig and readme

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/Readme
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/Readme
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/Readme	Thu Nov 17 18:39:03 2011	(r23622)
@@ -0,0 +1,13 @@
+readme:
+
+
+Indexing and Resolving symbol:
+===================================
+
+
+1. It is no longer required to annotate scope with symbols . While adding to the symbol-table, additional information such as, origin is already stored. 
+
+2. While resolving symbol, one should specify the search origin. Resolving symbols starts from the specified search origin and traverse the enclosing namespace 
+until it reaches the root of the symbol-table. 
+
+3. In addition, all the enclosed namespaces inside Search-origin namespace are taken into consideration during symbol-resolving. 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config	Thu Nov 17 18:38:39 2011	(r23621)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/spx.config	Thu Nov 17 18:39:03 2011	(r23622)
@@ -17,8 +17,9 @@
 	// By default, it includes all the directories ( and their subdirectories) of the project during build. Hence, It is  
 	// always recommended to explicitly specify the sources to include. 							  
 	src:
-		test|**
+		test | **
 		
+	
 				
 	codegen:
 		// todir refers to the project directory where intermediate generated 
@@ -32,5 +33,9 @@
 	
 	// Other project references are specified in this configuration section.
 	//projectreferences:
-	//	org.strategoxt.imp.editors.stratego  
-	
\ No newline at end of file
+	//		org.strategoxt.imp.editors.spoofax.configuration   
+	
+	// options : compiler , analysis , symboltable,  declaration, none, all 
+	log : none
+	
+	templatelang : disabled 
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Thu Nov 17 19:40:05 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 17 Nov 2011 18:40:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23623 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration:
	editor syntax test trans
Message-ID: <20111117184005.1445ACC1BB@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Nov 17 18:40:04 2011
New Revision: 23623
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23623&sc=1

Log:
changes in spx configlang

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv	Thu Nov 17 18:39:03 2011	(r23622)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/editor/SpoofaxConfiguration-Colorer.esv	Thu Nov 17 18:40:04 2011	(r23623)
@@ -6,8 +6,11 @@
   //                                                                  
   // See the imported file for a brief introduction and examples.
   colorer 
+  	
   	DebugOption._ : 0 0 0  italic
   	STROutputMode._: 0 0 0  italic
+  	TemplateLangOption._: 0 0 0  italic
+  	
   colorer Default, token-based highlighting
                                   
 	  keyword    : 255 69 0         

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf	Thu Nov 17 18:39:03 2011	(r23622)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/syntax/SpoofaxConfiguration.sdf	Thu Nov 17 18:40:04 2011	(r23623)
@@ -18,7 +18,13 @@
 	    
 	    "projectreferences" ":" ProjectName* 	-> ConfigSection {cons("SpxProjects")}
 	    
-	    "debug" ":" {DebugOption ","}* 	-> ConfigSection {cons("Debug")}
+	    "log" ":" {DebugOption ","}* 	-> ConfigSection {cons("Debug")}
+	    
+	    "templatelang" ":" TemplateLangOption 	-> ConfigSection {cons("TemplateLang")}
+	    
+	    "enabled"																	-> TemplateLangOption{cons("TemplatelangEnabled")}
+  		"disabled"																-> TemplateLangOption{cons("TemplatelangDisabled")}	
+	    
 	    
 	    "compiler" -> DebugOption{cons("DebugCompiler")}
 	    "declaration" -> DebugOption{cons("DebugDeclaration")}
@@ -33,6 +39,7 @@
 
 	    "ctree"																	-> STROutputMode{cons("CTree")}
 	    "jar"																		-> STROutputMode{cons("Jar")}	
+	    
 	    "|" "**"	 															->   IncludeOption{cons("All")}
 	    "|" "."												  				->   IncludeOption{cons("ThisOnly")}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config	Thu Nov 17 18:39:03 2011	(r23622)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/test/example.config	Thu Nov 17 18:40:04 2011	(r23623)
@@ -19,8 +19,10 @@
 	src:
 		test | **
 		test | .
+	
+	templatelang : enabled
 		
-	debug-switch: compiler , declaration , symboltable
+	log: none
 	
 	//Todo dependency :  
 	//imports:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str	Thu Nov 17 18:39:03 2011	(r23622)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax.configuration/trans/spoofaxconfiguration.str	Thu Nov 17 18:40:04 2011	(r23623)
@@ -35,6 +35,12 @@
     with
       filename := <guarantee-extension(|"aterm")> path;
       result   := <normalize>selected	// we just return the input term;
+  		; get-templatelang-options
+  		; debug 	
+  
+  get-templatelang-options
+		= collect-all(?TemplateLang(<id>), conc) ;	flatten-list
+	
         
   // Resolves a reference when the user control-clicks or presses F3 in the editor.
   // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.

From L.C.L.Kats at tudelft.nl  Fri Nov 18 13:40:01 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 18 Nov 2011 12:40:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23624 -
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt
Message-ID: <20111118124002.01CAECC119@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Nov 18 12:40:01 2011
New Revision: 23624
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23624&sc=1

Log:
added a copy of the inner exception message because people never read it

Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/IncompatibleJarException.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/IncompatibleJarException.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/IncompatibleJarException.java	Thu Nov 17 18:40:04 2011	(r23623)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/IncompatibleJarException.java	Fri Nov 18 12:40:01 2011	(r23624)
@@ -16,7 +16,7 @@
 	}
 
 	public IncompatibleJarException(URL jar, Throwable cause) {
-		super("Incompatible Stratego jar: " + jar, cause);
+		super("Incompatible Stratego jar: " + jar + " (" + cause.getMessage() + ")", cause);
 		this.jar = jar;
 	}
 

From L.C.L.Kats at tudelft.nl  Sun Nov 20 20:47:49 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 20 Nov 2011 19:47:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23625 -
	strategoxt-java-backend/trunk/trans
Message-ID: <20111120194749.DC1BFCC0F1@mx4.tudelft.nl>

Author: LennartKats
Date: Sun Nov 20 19:47:48 2011
New Revision: 23625
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23625&sc=1

Log:
Spoofax/460: Generated Stratego programs call new makeList() method

Modified:
   strategoxt-java-backend/trunk/trans/s2j.str

Modified: strategoxt-java-backend/trunk/trans/s2j.str
==============================================================================
--- strategoxt-java-backend/trunk/trans/s2j.str	Fri Nov 18 12:40:01 2011	(r23624)
+++ strategoxt-java-backend/trunk/trans/s2j.str	Sun Nov 20 19:47:48 2011	(r23625)
@@ -1240,7 +1240,7 @@
       args' := <map(java-construct-term)> args
     
   java-ConstructTerm :
-    Op("Nil", []) -> expr|[ (IStrategoTerm) termFactory.makeList() ]|
+    Op("Nil", []) -> expr|[ (IStrategoTerm) termFactory.makeList(Term.NO_TERMS) ]|
 
   java-ConstructTerm :
     Op("Cons", [t1, t2]) -> 

From L.C.L.Kats at tudelft.nl  Mon Nov 21 13:09:45 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 21 Nov 2011 12:09:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23626 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/syntax
Message-ID: <20111121120945.2E09A108C00D@mx3.tudelft.nl>

Author: LennartKats
Date: Mon Nov 21 12:09:43 2011
New Revision: 23626
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23626&sc=1

Log:
Fixed ambiguity when testing for more than 9 errors (reported by Bob de Vos)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Sun Nov 20 19:47:48 2011	(r23625)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Mon Nov 21 12:09:43 2011	(r23626)
@@ -100,4 +100,13 @@
       a : [[A]]
     }
   ]] complete to "Alpha"
-]]]
\ No newline at end of file
+]]]
+
+test Two-digit errors [[[
+  module x
+  test [[
+    module y
+  ]] 10 errors
+]]] parse succeeds
+
+

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Sun Nov 20 19:47:48 2011	(r23625)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Mon Nov 21 12:09:43 2011	(r23626)
@@ -67,7 +67,7 @@
     "(" {Strategy ","}* ")"              -> TestStratego {reject}
     Strategy "=>" Term                   -> TestStratego {reject}
     ID                                   -> TestStratego {reject}
-    INT                                  -> TestStratego {reject}
+    Int                                  -> TestStratego {reject}
     
     "parse"                              -> TestKeyword
     "fails"                              -> TestKeyword

From tobivollebregt at gmail.com  Mon Nov 21 14:32:58 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 21 Nov 2011 13:32:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23627 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: .
	syntax trans/codegen/template trans/context/sdf
	trans/context/template trans/normalize trans/unit-tests/...
Message-ID: <20111121133258.E23087F8034@mx1.tudelft.nl>

Author: tvo
Date: Mon Nov 21 13:32:57 2011
New Revision: 23627
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23627&sc=1

Log:
merge spoofaxlang-with-traditional-index

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/   (props changed)
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/TemplateLang.sdf	Mon Nov 21 13:32:57 2011	(r23627)
@@ -54,11 +54,9 @@
     ID "." ID -> SortCons {cons("SortCons")}
 
     %% placeholders
-    PlaceholderPrefix1 PlaceholderSort PlaceholderSuffix PlaceholderOptions ">" -> TemplatePart1 {cons("Placeholder")}
-    PlaceholderPrefix2 PlaceholderSort PlaceholderSuffix PlaceholderOptions "]" -> TemplatePart2 {cons("Placeholder")}
-
-    "<" -> PlaceholderPrefix1 {cons("None")}
-    "[" -> PlaceholderPrefix2 {cons("None")}
+    "<" Placeholder ">" -> TemplatePart1 {bracket}
+    "[" Placeholder "]" -> TemplatePart2 {bracket}
+    PlaceholderSort PlaceholderSuffix PlaceholderOptions -> Placeholder {cons("Placeholder")}
 
     %% constructor identical to SDF sort to simplify some transformations
     ID -> PlaceholderSort {cons("sort")}
@@ -74,12 +72,9 @@
     "wrap"                 -> PlaceholderOption {cons("Wrap")}
     "anchor"               -> PlaceholderOption {cons("Anchor")}
     "separator" "=" STRING -> PlaceholderOption {cons("Separator")}
+    "text" "=" STRING      -> PlaceholderOption {cons("Placeholder")}
 
   syntax
-    %% placeholders (layout between "<", the text and ":" should be captured)
-    "<" <PlaceholderText1-LEX> ":" -> <PlaceholderPrefix1-CF> {cons("Text")}
-    "[" <PlaceholderText2-LEX> ":" -> <PlaceholderPrefix2-CF> {cons("Text")}
-
     %% template parts
     "<" {<TemplateLine1-CF> "\n"}+ ">" -> <Template-CF> {cons("Template")}
     "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF> {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
@@ -102,14 +97,6 @@
     <TemplateLayout-LEX>  -> <TemplatePartQ-CF> {cons("Layout")}
 
   lexical syntax
-    ~[\<\>\:]+ -> PlaceholderText1
-    ~[\[\]\:]+ -> PlaceholderText2
-
-  lexical restrictions
-    PlaceholderText1 -/- ~[\:]
-    PlaceholderText2 -/- ~[\:]
-
-  lexical syntax
   	[\r][\n] -> "\n"
     [\ \t]+  -> TemplateLayout
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-esv.str	Mon Nov 21 13:32:57 2011	(r23627)
@@ -149,13 +149,17 @@
 rules
 
   template-line-to-esv:
-    Line([Layout(x), Placeholder(None(), _, <Option() + Star()>, _)]) ->
+    Line([Layout(x), Placeholder(_, <Option() + Star()>, option*)]) ->
       <spaces-to-tabs> [String(x), Cursor()]
+      where
+        <not(one(?Placeholder(_)))> option*
 
   template-line-to-esv:
-    line @ Line([Layout(_), Placeholder(None(), _, <None() + Plus()>, _)]) ->
+    line @ Line([Layout(_), Placeholder(_, <None() + Plus()>, option*)]) ->
       // ?t and not(?t) are cycle breaker
       <?t; expand-template-line; not(?t); map(template-line-to-esv)> [line]
+      where
+        <not(one(?Placeholder(_)))> option*
 
   template-line-to-esv:
     Line(elem*) -> <map(template-element-to-esv); spaces-to-tabs> elem*
@@ -165,14 +169,18 @@
 
   // Any placeholder with title results in a placeholder with that title.
   template-element-to-esv:
-    Placeholder(Text(name), sort(sort), _, _) ->
-      PlaceholderWithSort($[<[name]:], sort)
+    Placeholder(sort(sort), _, option*) ->
+      PlaceholderWithSort($[<[text]:], sort)
+      where
+        <one(?Placeholder(text))> option*
 
   // A and A+ result in a placeholder containing the shortest expansion of A.
   template-element-to-esv:
-    placeholder @ Placeholder(None(), sort(sort), <None() + Plus()>, _) ->
+    placeholder @ Placeholder(sort(sort), <None() + Plus()>, option*) ->
       PlaceholderWithSort($[<[text]:], sort)
     where
+      <not(one(?Placeholder(_)))> option*
+    where
       text := <expand-template-element;
                map(template-element-to-string);
                concat-strings
@@ -180,7 +188,7 @@
 
   // A? and A* result in a 0-length placeholder.
   template-element-to-esv:
-    Placeholder(None(), sort(sort), <Option() + Star()>, _) ->
+    Placeholder(sort(sort), <Option() + Star()>, _) ->
       PlaceholderWithSort("<:", sort)
 
   template-element-to-esv:
@@ -198,13 +206,19 @@
 rules // TemplateLang / completion template element to string
 
   template-element-to-string:
-    Placeholder(Text(t), _, _, _) -> t
+    Placeholder(_, _, option*) -> text
+    where
+      <one(?Placeholder(text))> option*
 
   template-element-to-string:
-    Placeholder(None(), sort(sort), <None() + Plus()>, _) -> sort
+    Placeholder(sort(sort), <None() + Plus()>, option*) -> sort
+    where
+      <not(one(?Placeholder(_)))> option*
 
   template-element-to-string:
-    Placeholder(None(), _, <Option() + Star()>, _) -> ""
+    Placeholder(_, <Option() + Star()>, option*) -> ""
+    where
+      <not(one(?Placeholder(_)))> option*
 
   template-element-to-string:
     Placeholder(t) -> t
@@ -271,7 +285,7 @@
       line'* := <listbu(expand-template-line)> line*
 
   is-template-placeholder:
-    Placeholder(_, sort(x), _, _) -> <id>
+    Placeholder(sort(x), _, _) -> <id>
     where
       <setof-Declaration ; one(?TemplateProduction(_, _, _))> x
 
@@ -281,10 +295,10 @@
       <setof-Declaration ; one(?TemplateProduction(_, _, _))> x
 
   // expand-template-line covers exactly all valid input terms except:
-  //  Line([indent @ Layout(_), Placeholder(_, sort(x), <None() + Plus()>, _)]) where <Expanded> x
+  //  Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) where <Expanded> x
 
   expand-template-line:
-    [t @ Line([indent @ Layout(_), Placeholder(_, sort(x), <None() + Plus()>, _)]) | tail] -> [line* | tail]
+    [t @ Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) | tail] -> [line* | tail]
     where
       <not(Expanded)> x
     where
@@ -293,7 +307,7 @@
   expand-template-line:
     [t @ Line(elem*) | tail] -> [Line(elem'*) | tail]
     where
-      not(!elem* => [Layout(_), Placeholder(_, _, <None() + Plus()>, _)])
+      not(!elem* => [Layout(_), Placeholder(_, <None() + Plus()>, _)])
     where
       elem'* := <listbu(expand-template-element)> elem*
 
@@ -301,10 +315,10 @@
     [] -> <id>
 
   // expand-template-element covers exactly all valid input terms except:
-  //  Placeholder(_, sort(x), <None() + Plus()>, _) where <Expanded> x
+  //  Placeholder(sort(x), <None() + Plus()>, _) where <Expanded> x
 
   expand-template-element:
-    [t @ Placeholder(_, sort(x), <None() + Plus()>, _) | tail] -> [elem* | tail]
+    [t @ Placeholder(sort(x), <None() + Plus()>, _) | tail] -> [elem* | tail]
     where
       <not(Expanded)> x
     where
@@ -313,7 +327,7 @@
   expand-template-element:
     [t | tail] -> [t | tail]
     where
-      not(!t => Placeholder(_, sort(x), <None() + Plus()>, _))
+      not(!t => Placeholder(sort(x), <None() + Plus()>, _))
 
   expand-template-element:
     [] -> <id>
@@ -350,7 +364,7 @@
   template-character-count =
     ?String(<string-length>)
     <+ ?Layout(<string-length>)
-    <+ ?Text(<string-length>)
+    <+ ?Placeholder(<string-length>)
     <+ crush(!0, addi, template-character-count)
 
   lti = not(gti)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Mon Nov 21 13:32:57 2011	(r23627)
@@ -114,7 +114,7 @@
   // The placeholder is at the start AND at the end of the template!
   template-to-sdf:
     < ?SingleLineTemplate(elem*)
-    + ?Template([Line(elem* @ [Layout(_), Placeholder(_, _, _, _)])]) > -> A*
+    + ?Template([Line(elem* @ [Layout(_), Placeholder(_, _, _)])]) > -> A*
     where with-spxverify ( 
       A* := <maybe-separating(
       	       filter(template-element-to-sdf-sep <+ template-element-to-sdf),
@@ -140,7 +140,7 @@
 rules
 
   template-line-to-sdf-sep:
-    (Line([Layout(_), p @ Placeholder(_, sort(S), mult, Options(option*))]), state) ->
+    (Line([Layout(_), p @ Placeholder(sort(S), mult, option*)]), state) ->
       (result, state)
     where
       <one(Separator("\n"))> option*
@@ -165,22 +165,22 @@
       ([ A|[ "\"\\n\"" ]| | <template-line-to-sdf-sep-helper> elem*], 1)
 
   template-line-to-sdf-sep-helper =
-    not(?[Layout(_), Placeholder(_, _, _, Options(<one(Separator("\n"))>))]);
+    not(?[Layout(_), Placeholder(_, _, <one(Separator("\n"))>)]);
     filter(template-element-to-sdf-sep <+ template-element-to-sdf)
 
   template-element-to-sdf-sep:
-    Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ {S "\"\\n\""}* ]|
+    Placeholder(sort(S), Star(), option*) -> A|[ {S "\"\\n\""}* ]|
     where <one(Separator("\n"))> option*
 
   template-element-to-sdf-sep:
-    Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ {S "\"\\n\""}+ ]|
+    Placeholder(sort(S), Plus(), option*) -> A|[ {S "\"\\n\""}+ ]|
     where <one(Separator("\n"))> option*
 
 rules
 
   template-line-to-sdf =
     ?Line(<id>);
-    if not(?[Layout(_), Placeholder(_, _, _, _)]) then
+    if not(?[Layout(_), Placeholder(_, _, _)]) then
       switch <get-template-option> Newlines()
         case ?None()     : id
         case ?Leading()  : ![String("\n") | <id>]
@@ -193,26 +193,26 @@
     String(x) -> <string-to-sdf> x
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), None(), _) -> A|[ S ]|
+    Placeholder(sort(S), None(), _) -> A|[ S ]|
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Option(), _) -> A|[ S? ]|
+    Placeholder(sort(S), Option(), _) -> A|[ S? ]|
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ S* ]|
+    Placeholder(sort(S), Star(), option*) -> A|[ S* ]|
     where <not(one(Separator(not(string-is-layout))))> option*
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Star(), Options(option*)) -> A|[ { S L }* ]|
+    Placeholder(sort(S), Star(), option*) -> A|[ { S L }* ]|
     where <one(Separator(not(string-is-layout)))> option*
     where with-spxverify ( L := <separator-to-literal> option*)
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ S+ ]|
+    Placeholder(sort(S), Plus(), option*) -> A|[ S+ ]|
     where <not(one(Separator(not(string-is-layout))))> option*
 
   template-element-to-sdf:
-    Placeholder(_, sort(S), Plus(), Options(option*)) -> A|[ { S L }+ ]|
+    Placeholder(sort(S), Plus(), option*) -> A|[ { S L }+ ]|
     where <one(Separator(not(string-is-layout)))> option*
     where with-spxverify( L := <separator-to-literal> option*  )
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-str.str	Mon Nov 21 13:32:57 2011	(r23627)
@@ -1,3 +1,13 @@
+// FIXME: Refactor to use lists, and separate-by(|"\n") to insert newlines.
+//        Then we can get rid of the four (!) pp-ih-* strategies.
+//        [Layout, Placeholder] could just generate an empty tuple for an
+//        empty substitute, which could be filtered out later on...
+//
+// 1. template-line-to-stratego
+// 2. filter(not(?()))
+// 3. separate-by(|"\n")
+// 4. concat
+
 module to-str
 
 imports
@@ -33,7 +43,7 @@
 
   template-sections-to-stratego-string:
     section* ->
-    $[module prettyprinter
+    ${module prettyprinter
       imports
         libstratego-lib
 
@@ -42,14 +52,30 @@
         pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
         pp-list(s|t) = map(s); separate-by(|t); concat-strings
  				// ih = indent helper, t = indent string
+        pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
         pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
         pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
+        pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
+
+        all-lines-except-first(s) =
+            is-string
+          ; string-tokenize-keep-empty(|['\n'])
+          ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
+                   < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
+                   + where(![] => laststring))    // ... or not.
+          ; ([id | map(s)] + [])
+          ; <separate-by> ("\n", <id>)
+          ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
+          ; concat-strings
 
-      [section''*]
+        prefix-lines-except-first(|p) =
+          all-lines-except-first(<conc-strings> (p, <id>))
+
+      {section''*}
 
       strategies // all other sorts used in placeholders
 
-        [strategy*]]
+        {strategy*}}
     where
     	with-spxverify(
 	      section'*  := <templatelang-desugar-top> section*;
@@ -89,7 +115,7 @@
 	  TemplateProduction(sort, _, _) -> sort
 
   sort-used-in-prettyprinting:
-    Placeholder(_, sort(sort), _, _) -> sort
+    Placeholder(sort(sort), _, _) -> sort
 
 rules
 
@@ -112,8 +138,9 @@
         where
           [<template-element-to-prettyprint> p{"a"}]]
     where
-      < ?SingleLineTemplate([p @ Placeholder(_, _, _, _)])
-      + ?Template([Line([Layout(_), p @ Placeholder(_, _, _, _)])]) > template;
+      < ?SingleLineTemplate([p @ Placeholder(_, _, _)])
+      + ?Template([Line([Layout(_), p @ Placeholder(_, _, _)])]) > template
+    where
     	with-spxverify(
 	      if cons := <fetch-cons-name> attrs then
 	        input := $[[cons](a)]
@@ -122,6 +149,26 @@
 	      end
       )
 
+  // Generalized injection: a list of placeholder lines only.
+  // This means that there is no place where
+  template-to-prettyprint-strategy:
+    TemplateProduction(sort, Template(line*), attrs) ->
+    $[prettyprint-[sort]:
+        [input] -> zz
+        where
+          [let'*]]
+    where
+      <all(?Line([Layout(_), Placeholder(_, _, _)]))> line*;
+      not(!line* => [_]) // normal injection
+    where
+      with-spxverify(
+        (line'*, _)    := <thread-map(rename-template-line)> (line*, 0);
+        (line''*, _)   := <thread-map(template-line-to-stratego)> (line'*, -1);
+        arg*           := <mapconcat(template-line-to-cons-arg)> line'*;
+        let*           := <mapconcat(template-line-to-prettyprint)> line'*;
+        (input, let'*) := <template-common> (let*, <separate-by(|["\"\\n\""]); concat> line''*, attrs, arg*)
+      )
+
   template-to-prettyprint-strategy:
     TemplateProduction(sort, SingleLineTemplate(elem*), attrs) ->
     $[prettyprint-[sort]:
@@ -130,11 +177,11 @@
           [let'*]]
     where
       not(<map(?Layout(_) + ?String(_))> elem*);
-      not(!elem* => [Placeholder(_, _, _, _)])
-    where 
-    	with-spxverify(
+      not(!elem* => [Placeholder(_, _, _)])
+    where
+      with-spxverify(
 	      (elem'*, _)    := <thread-map(try(rename-template-element))> (elem*, 0);
-	      elem''*        := <map(template-element-to-stratego)> elem'*;
+	      elem''*        := <map(template-element-to-stratego(|""))> elem'*;
 	      arg*           := <filter(template-element-to-cons-arg)> elem'*;
 	      let*           := <filter(template-element-to-prettyprint)> elem'*;
 	      (input, let'*) := <template-common> (let*, elem''*, attrs, arg*)
@@ -188,10 +235,10 @@
   //     not(<fetch-cons-name> attrs);
   //     FIXME <getfirst(?bracket())> attr*
   //   where
-  //     <length> <filter(?Placeholder(_, _, _, _))> elem* => 1
+  //     <length> <filter(?Placeholder(_, _, _))> elem* => 1
   //     <+ debug(!"Bracket production must have exactly one placeholder: "); fail
   //   with
-  //     (before, placeholder, after) := <split-fetch-keep(?Placeholder(_, _, _, _))> elem*
+  //     (before, placeholder, after) := <split-fetch-keep(?Placeholder(_, _, _))> elem*
   //   where
   //     [String(open)]  := <map(template-element-to-stratego'); concatenate-consecutive-strings> before;
   //     [String(close)] := <map(template-element-to-stratego'); concatenate-consecutive-strings> after
@@ -206,7 +253,7 @@
     )
 
   rename-template-element:
-    (Placeholder(a, b, c, d), index) -> (Placeholder(a, b, c, d){name'}, index')
+    (Placeholder(a, b, c), index) -> (Placeholder(a, b, c){name'}, index')
     where with-spxverify(
       name'  := <implode-string> [<addi> ('a', index)];
       index' := <inc> index
@@ -218,7 +265,7 @@
     Line(elem*) -> <filter(template-element-to-cons-arg)> elem*
 
   template-element-to-cons-arg:
-    Placeholder(_, _, _, _){name} -> name
+    Placeholder(_, _, _){name} -> name
 
 rules
 
@@ -226,34 +273,47 @@
   // The thread starts at 0 and is set to 1 once we passed the first line.
   // It is used to determine whether we already generated the initial newline.
 
+  // Or: it is set to -1 and stays at -1, this means there are only
+  //     placeholders in the template, so none needs to add a newline.
+
+  template-line-to-stratego:
+    (Line([Layout(indent), Placeholder(_, _, _){name}]), -1) ->
+      ([$[<pp-ih-0(|"[indent]")> [name]']], -1)
+
   template-line-to-stratego:
-    (Line([Layout(indent), Placeholder(_, _, _, _){name}]), 0) ->
+    (Line([Layout(indent), Placeholder(_, _, _){name}]), 0) ->
       ([$[<pp-ih-1(|"[indent]")> [name]']], 0)
 
   template-line-to-stratego:
-    (Line(elem*), 0) -> (elem'*, 1)
+    (Line([Layout(indent) | elem*]), 0) -> (elem'*, 1)
     where
-      not(!elem* => [Layout(_), Placeholder(_, _, _, _)]);
-      elem'* := <map(template-element-to-stratego)> elem*
+      not(!elem* => [Placeholder(_, _, _)]);
+      elem'* := <map(template-element-to-stratego(|indent))> elem*
 
   template-line-to-stratego:
-    (Line([Layout(indent), Placeholder(_, _, _, _){name}]), 1) ->
+    (Line([Layout(indent), Placeholder(_, _, _){name}]), 1) ->
       ([$[<pp-ih-2(|"[indent]")> [name]']], 1)
 
   template-line-to-stratego:
-    (Line(elem*), 1) -> ([String("\n") | elem'*], 1)
+    (Line([Layout(indent) | elem*]), 1) -> ([String("\n") | elem'*], 1)
     where
-      not(!elem* => [Layout(_), Placeholder(_, _, _, _)]);
-      elem'* := <map(template-element-to-stratego)> elem*
+      not(!elem* => [Placeholder(_, _, _)]);
+      elem'* := <map(template-element-to-stratego(|indent))> elem*
 
-  template-element-to-stratego:
+  template-element-to-stratego(|indent):
     String(t) -> <id>
 
-  template-element-to-stratego:
+  template-element-to-stratego(|indent):
     Layout(t) -> String(t)
 
-  template-element-to-stratego:
-    Placeholder(_, _, _, _){name} -> $[[name]']
+  template-element-to-stratego(|indent):
+    Placeholder(_, _, _){name} -> $[[s][name]']
+      where
+        if !indent => "" then
+          s := ""
+        else
+          s := $[<pp-ih-3(|"[indent]")> ]
+        end
 
 rules
 
@@ -261,12 +321,12 @@
     Line(elem*) -> <filter(template-element-to-prettyprint)> elem*
 
   template-element-to-prettyprint:
-    Placeholder(_, sort(x), None(), _){name} -> $[[name]' := <prettyprint-[x]> [name]]
+    Placeholder(sort(x), None(), _){name} -> $[[name]' := <prettyprint-[x]> [name]]
 
   template-element-to-prettyprint:
-    Placeholder(_, sort(x), <Star() + Plus()>, Options(opt*)){name} -> t
+    Placeholder(sort(x), <Star() + Plus()>, option*){name} -> t
     where with-spxverify(
-      if sep := <getfirst(?Separator(<id>))> opt* then
+      if sep := <getfirst(?Separator(<id>))> option* then
         t := $[[name]' := <pp-list(prettyprint-[x]|"[<templatelang-escape> sep]")> [name]]
       else
         t := $[[name]' := <pp-list(prettyprint-[x]|" ")> [name]]
@@ -274,12 +334,12 @@
    )   
 
   template-element-to-prettyprint:
-    Placeholder(_, sort(x), Option(), _){name} -> $[[name]' := <pp-option(prettyprint-[x])> [name]]
+    Placeholder(sort(x), Option(), _){name} -> $[[name]' := <pp-option(prettyprint-[x])> [name]]
 
 rules
 
 //   template-element-to-parenthesize(|conflicts):
-//     (i0, Placeholder(_, sort(x), None(), _){name}) -> $[[name]' := <parenthesize-[x]([na])> [name]]
+//     (i0, Placeholder(sort(x), None(), _){name}) -> $[[name]' := <parenthesize-[x]([na])> [name]]
 //     where
 //       not(<filter(?(i0, <id>))> conflicts => conflicts' => [])
 //     with
@@ -291,9 +351,9 @@
 //       end
 //
 //   template-element-to-parenthesize(|conflicts):
-//     (i0, p@ Placeholder(_, sort(x), None(), _){name}) -> <template-element-to-prettyprint> p
+//     (i0, p@ Placeholder(sort(x), None(), _){name}) -> <template-element-to-prettyprint> p
 //     where
 //       <filter(?(i0, _))> conflicts => []
 //
 //   template-element-to-parenthesize(|conflicts):
-//     (i0, p@ Placeholder(_, sort(x), <not(?None())>, _){name}) -> <template-element-to-prettyprint> p
+//     (i0, p@ Placeholder(sort(x), <not(?None())>, _){name}) -> <template-element-to-prettyprint> p

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare-signature.str	Mon Nov 21 13:32:57 2011	(r23627)
@@ -273,15 +273,15 @@
 
   // TemplateLang
   get-sort-decl:
-    Placeholder(_, sort(x), None(), _) -> <id>
+    Placeholder(sort(x), None(), _) -> <id>
     where with-spxverify (rules( lhs-sort :+ _ -> x ))
 
   get-sort-decl:
-    Placeholder(_, sort(x), <?Plus() + ?Star()>, _) -> <id>
+    Placeholder(sort(x), <?Plus() + ?Star()>, _) -> <id>
     where with-spxverify( rules( lhs-sort :+ _ -> $[List([x])] ))
 
   get-sort-decl:
-    Placeholder(_, sort(x), Option(), _) -> <id>
+    Placeholder(sort(x), Option(), _) -> <id>
     where with-spxverify (rules( lhs-sort :+ _ -> $[Option([x])] ))
 
 strategies

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/template/declare.str	Mon Nov 21 13:32:57 2011	(r23627)
@@ -52,7 +52,7 @@
 
   // Invoked by declare-sdf-definition-internal
   declare-sdf-usage:
-    Placeholder(_, sort(x), _, _) -> <id>
+    Placeholder(sort(x), _, _) -> <id>
     where with-spxverify(
       <index-sdf-usage>( x , x)
     )  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/templatelang.str	Mon Nov 21 13:32:57 2011	(r23627)
@@ -118,11 +118,17 @@
     alltd(origin-track-forced(templatelang-element-desugar))
 
   templatelang-element-desugar:
-    NoOptions() -> Options([])
+    NoOptions() -> []
 
   templatelang-element-desugar:
+    Options(x) -> <alltd(origin-track-forced(templatelang-option-desugar))> x
+
+  templatelang-option-desugar:
     Separator(x) -> Separator(<origin-track-forced(un-double-quote; unescape)> x)
 
+  templatelang-option-desugar:
+    Placeholder(x) -> Placeholder(<origin-track-forced(un-double-quote; unescape)> x)
+
   templatelang-element-desugar:
     Escape(t) -> String(t')
     where with-spxverify(

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-sdf.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -4,7 +4,7 @@
 start symbol SdfProduction
 
 test transform SdfProductionWithCons without attrs into prod [[ X.Y = ]]
-run templatelang-desugar-sdf-top to 
+run templatelang-desugar-sdf-top to
   prod([], sort("X"), attrs([term(default(appl(unquoted("cons"),[fun(quoted("\"Y\""))])))]))
 
 test transform SdfProductionWithCons with attrs into prod [[ X.Y = {left} ]]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/desugar-template.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -3,70 +3,74 @@
 language SpoofaxLang
 start symbol Template
 
-test transform NoOptions() into Options(...) [[ <<<Z>>> ]]
+test transform NoOptions() into empty list [[ <<Z>> ]]
 run templatelang-template-desugar to
-  SingleLineTemplate([Placeholder(_, _, _, Options([]))])
+  SingleLineTemplate([Placeholder(_, _, [])])
+
+test transform Options(...) into ... [[ <<Z; anchor, wrap>> ]]
+run templatelang-template-desugar to
+  SingleLineTemplate([Placeholder(_, _, [Anchor(), Wrap()])])
 
 // NOTE: Do not replace the tab in the next line with a space!
-test replace tabs with two spaces [[ <<c  d>> ]]
+test replace tabs with two spaces [[ <c  d> ]]
 run templatelang-template-desugar to SingleLineTemplate([
   String("c"), Layout("  "), String("d")
 ])
 
 // FIXME: Add tab char, see also spoofax-431.spt
-test unescape common escape chars (1) [[ <<<\ \'\"\r\n>>> ]]
+test unescape common escape chars (1) [[ <<\ \'\"\r\n>> ]]
 run templatelang-template-desugar to SingleLineTemplate([String(" '\"\r\n")])
 
 test unescape common escape chars (2) [[ "\ \'\"\r\n" ]]
 run templatelang-template-desugar to SingleLineTemplate([String(" '\"\r\n")])
 
-test unescape escaped brackets (1) [[ <<\<\>\\>> ]]
+test unescape escaped brackets (1) [[ <\<\>\\> ]]
 run templatelang-template-desugar to SingleLineTemplate([String("<>\\")])
 
-test unescape escaped brackets (2) [[[ [[\[\]\\]] ]]]
+test unescape escaped brackets (2) [[[ [\[\]\\] ]]]
 run templatelang-template-desugar to SingleLineTemplate([String("[]\\")])
 
-test unescape line ending (1) [[ <<<\\>  
->> ]]
+test unescape line ending (1) [[ <<\\>  
+> ]]
 run templatelang-template-desugar to SingleLineTemplate([String("")])
 
-test unescape line ending (2) [[[ [[[\\]  
-]] ]]]
+test unescape line ending (2) [[[ [[\\]  
+] ]]]
 run templatelang-template-desugar to SingleLineTemplate([String("")])
 
-test unescape unicode codepoints [[ <<<\u41\u61>>> ]]
+test unescape unicode codepoints [[ <<\u41\u61>> ]]
 run templatelang-template-desugar to SingleLineTemplate([String("Aa")])
 
-test unescape separators [[ <<<Z*; separator="\n">>> ]]
+test unescape separators [[ <<Z*; separator="\n">> ]]
 run templatelang-template-desugar to SingleLineTemplate([
-  Placeholder(_, _, _, Options([Separator("\n")]))
+  Placeholder(_, _, [Separator("\n")])
 ])
 
-test remove first and last line [[ <<
-  >> ]]
+test remove first and last line [[ <
+  > ]]
 run templatelang-template-desugar to Template([])
 
-test don't remove middle line [[ <<
+test don't remove middle line [[ <
 
-  >> ]]
+  > ]]
 run templatelang-template-desugar to Template([_])
 
-test remove indentation [[ <<
+test remove indentation [[ <
     one
 
        two
-  >> ]]
+  > ]]
 run templatelang-template-desugar to Template([
   Line([Layout(""), String("one")]),
   Line(_),
   Line([Layout("   "), String("two")])
 ])
 
-test don't remove leading layout in single line template [[ << x>> ]]
+test don't remove leading layout in single line template [[ < x> ]]
 run templatelang-template-desugar to SingleLineTemplate([Layout(_), String(_)])
 
-test don't remove trailing layout in single line template [[ <<x >> ]]
+test don't remove trailing layout in single line template [[ <x > ]]
 run templatelang-template-desugar to SingleLineTemplate([String(_), Layout(_)])
 
-test don't put leading layout in single line template [[ <<x>> ]]
+test don't put leading layout in single line template [[ <x> ]]
 run templatelang-template-desugar to SingleLineTemplate([String(_)])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/parse-template.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -3,31 +3,40 @@
 language SpoofaxLang
 start symbol Template
 
-test empty [[ <<>> ]]
+test empty [[ <> ]]
 parse to Template([Line([])])
 
-test parse common escape chars [[ <<<\ \'\"\t\r\n>>> ]]
+test parse common escape chars [[ <<\ \'\"\t\r\n>> ]]
 parse to Template([Line([Escape("<\\ \\'\\\"\\t\\r\\n>")])])
 
-test parse escaped brackets (1) [[ <<\<\>\\>> ]]
+test parse escaped brackets (1) [[ <\<\>\\> ]]
 parse to Template([Line([Escape("\\<\\>\\\\")])])
 
-test parse escaped brackets (2) [[[ [[\[\]\\]] ]]]
+test parse escaped brackets (2) [[ [\[\]\\] ]]
 parse to Template([Line([Escape("\\[\\]\\\\")])])
 
-test parse line ending (1) [[ <<<\\>
->> ]]
+test parse line ending (1) [[ <<\\>
+> ]]
 parse to Template([Line([Escape("<\\\\>\n")])])
 
-test parse line ending (2) [[[ [[[\\]
-]] ]]]
+test parse line ending (2) [[[ [[\\]
+] ]]]
 parse to Template([Line([Escape("[\\\\]\n")])])
 
-test parse separator (1) [[ <<<X; separator="\n">>> ]]
-parse to Template([Line([Placeholder(_, _, _, Options([Separator("\"\\n\"")]))])])
+test parse separator (1) [[ <<X; separator="\n">> ]]
+parse to Template([Line([Placeholder(_, _, Options([Separator("\"\\n\"")]))])])
 
-test parse separator (2) [[ <<<X; separator=",">>> ]]
-parse to Template([Line([Placeholder(_, _, _, Options([Separator("\",\"")]))])])
+test parse separator (2) [[ <<X; separator=",">> ]]
+parse to Template([Line([Placeholder(_, _, Options([Separator("\",\"")]))])])
 
-test parse separator (3) [[ <<<X; separator="x y">>> ]]
-parse to Template([Line([Placeholder(_, _, _, Options([Separator("\"x y\"")]))])])
+test parse separator (3) [[ <<X; separator="x y">> ]]
+parse to Template([Line([Placeholder(_, _, Options([Separator("\"x y\"")]))])])
+
+test parse anchor option [[ <<X; anchor>> ]]
+parse to Template([Line([Placeholder(_, _, Options([Anchor()]))])])
+
+test parse wrap option [[ <<X; wrap>> ]]
+parse to Template([Line([Placeholder(_, _, Options([Wrap()]))])])
+
+test parse text option [[ <<X; text="x y">> ]]
+parse to Template([Line([Placeholder(_, _, Options([Placeholder("\"x y\"")]))])])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/spoofax-431.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -7,20 +7,20 @@
 language SpoofaxLang
 
 // this test succeeds
-test tab char (1) [[ <<	>> ]] // tab char!
+test tab char (1) [[ <	> ]] // tab char!
 parse to Template([Line([Layout("	")])]) // tab char!
 
 // this test fails
-// test tab char (2) [[ <<	>> ]] // tab char!
+// test tab char (2) [[ <	> ]] // tab char!
 // parse to Template([Layout("\t")])
 
 // but this test fails(!)
-// test newline char (1) [[ <<
-// >> ]]
+// test newline char (1) [[ <
+// > ]]
 // parse to Template([Newline("
 // ")])
 
 // and this test succeeds(!)
-// test newline char (2) [[ <<
-// >> ]]
+// test newline char (2) [[ <
+// > ]]
 // parse to Template([Newline("\n")])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-1.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -14,54 +14,54 @@
   completions
 ]]
 
-test empty [[ X.Y = <<>> ]]
+test empty [[ X.Y = <> ]]
 run test-templatelang-to-esv to [[ ]]
 
-test placeholder [[ X.Y = <<foo <Z> bar>> ]]
+test placeholder [[ X.Y = <foo <Z> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo Z bar" = "foo " <Z:Z> " bar"
 ]]
 
-test placeholder (text) [[ X.Y = <<foo < display text : Z> bar>> ]]
+test placeholder (text) [[ X.Y = <foo <Z; text=" display text "> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo display text bar" = "foo " < display text :Z> " bar"
 ]]
 
-test placeholder (option) [[ X.Y = <<foo <Z?> bar>> ]]
+test placeholder (option) [[ X.Y = <foo <Z?> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo bar" = "foo " <:Z> " bar"
 ]]
 
-test placeholder (plus) [[ X.Y = <<foo <Z+> bar>> ]]
+test placeholder (plus) [[ X.Y = <foo <Z+> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo Z bar" = "foo " <Z:Z> " bar"
 ]]
 
-test placeholder (star) [[ X.Y = <<foo <Z*> bar>> ]]
+test placeholder (star) [[ X.Y = <foo <Z*> bar> ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo bar" = "foo " <:Z> " bar"
 ]]
 
 test n placeholders => one (cursor)-directive [[
-  X.Y = <<
+  X.Y = <
     foo
       <A?>
       <B?>
       <C?>
     bar
-  >>
+  >
 ]]
 run test-templatelang-to-esv to [[
   completion template X: "foo bar" = "foo\n\t" (cursor) "\nbar" (blank)
 ]]
 
 test if then statement [[
-  Statement.IfThen = <<
+  Statement.IfThen = <
     <MetaAnno*; separator="\n">
     if <Exp> then
       <Statement*; separator="\n">
     end
-  >>
+  >
 ]]
 run test-templatelang-to-esv to [[
   completion template Statement: "if Exp then end" =

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-2.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -17,7 +17,7 @@
 test directed expansion (prefer) [[
   A.F = "foo"
   A.B = "bar" {completion(prefer)}
-  B = <<x: <A>>>
+  B = <x: <A>>
 ]]
 run test-templatelang-to-esv to [[
   completion template A: "foo" = "foo"
@@ -28,7 +28,7 @@
 test directed expansion (avoid) [[
   A.F = "foo" {completion(avoid)}
   A.B = "bar"
-  B = <<x: <A>>>
+  B = <x: <A>>
 ]]
 run test-templatelang-to-esv to [[
   completion template A: "foo" = "foo"
@@ -40,7 +40,7 @@
   A.F = "foo" {deprecated}
   A.FF = "ffoo" {deprecated("don't panic")}
   A.B = "bar"
-  B = <<x: <A>>>
+  B = <x: <A>>
 ]]
 run test-templatelang-to-esv to [[
   // WRONG: completion template A: "foo" = "foo"
@@ -51,13 +51,13 @@
 ]]
 
 test Mobl module [[
-  QId = <<<ID>>>
-  QId.QId = <<<QId>::<ID>>>
-  Start.Module = <<
+  QId = <<ID>>
+  QId.QId = <<QId>::<ID>>
+  Start.Module = <
     module <QId>
 
     <Definition*; separator="\n">
-  >>
+  >
 ]]
 run test-templatelang-to-esv to [[
   completion template QId: "ID::ID" = <ID:QId> "::" <ID:ID>
@@ -66,22 +66,22 @@
 ]]
 
 test Mobl types [[[[
-  QId = <<<ID>>>
-  QId.QId = <<<QId>::<ID>>>
-  NFType.SimpleType = <<<QId>>>
-  NFType.GenericType = [[[QId]<[Type*; separator=", "]>]]
-  NFType.TupleType = <<(<Type*; separator=", ">)>>
-  NFType.ArrayType = <<[<Type>]>>
-  NFType.DynamicType = <<?>>
-  Type = <<<NFType>>>
-  Type.FunctionType = [[[NFType+; separator=" * "] -> [NFType]]] {avoid}
+  QId = <<ID>>
+  QId.QId = <<QId>::<ID>>
+  NFType.SimpleType = <<QId>>
+  NFType.GenericType = [[QId]<[Type*; separator=", "]>]
+  NFType.TupleType = <(<Type*; separator=", ">)>
+  NFType.ArrayType = <[<Type>]>
+  NFType.DynamicType = <?>
+  Type = <<NFType>>
+  Type.FunctionType = [[NFType+; separator=" * "] -> [NFType]] {avoid}
 
-  FunctionDef.Function = <<
+  FunctionDef.Function = <
     <MetaAnno*; separator="\n">
     function <QId>(<FArg*; separator=", ">) : <Type> {
       <Statement*; separator="\n">
     }
-  >>
+  >
 ]]]]
 run test-templatelang-to-esv to [[
   completion template QId: "ID::ID" = <ID:QId> "::" <ID:ID>
@@ -95,7 +95,7 @@
 ]]
 
 test template-character-count
-  !(String("foo"), Placeholder(Text("f"), "Sort", None(), Options([])), [Layout("bar"), String("baz")]);
+  !(String("foo"), Placeholder("Sort", None(), Options([Placeholder("f")])), [Layout("bar"), String("baz")]);
   template-character-count => 10
 
 test substring(1, -1)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-3.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -15,28 +15,28 @@
 ]]
 
 test stuff [[
-  Statement.IfThen = <<
+  Statement.IfThen = <
     <MetaAnno*; separator="\n">
     if <Exp> then
       <Statement*; separator="\n">
     end
-  >>
-  Statement.For = <<
+  >
+  Statement.For = <
     <MetaAnno*; separator="\n">
     for (<Exp>; <Exp>; <Exp>) do
       <Statement*; separator="\n">
     end
-  >>
+  >
 
-  Exp = <<<Term>>>
+  Exp = <<Term>>
 
-  Term = <<<Factor>>>
-  Term.BinOp = <<<Term> <TermOp> <Factor>>>
+  Term = <<Factor>>
+  Term.BinOp = <<Term> <TermOp> <Factor>>
 
-  Factor = <<<Var>>>
-  Factor.BinOp = <<<Factor> <FactorOp> <Var>>>
+  Factor = <<Var>>
+  Factor.BinOp = <<Factor> <FactorOp> <Var>>
 
-  Var.Var = <<$<ID>$>>
+  Var.Var = <$<ID>$>
 
   TermOp.Plus = "+"
   TermOp.Minus = "-"

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-esv-4.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -33,7 +33,7 @@
   lexical syntax
     BoolMethodId = "||"
   templates
-    Exp.BinOp = <<<Exp> <BoolMethodId> <Exp>>>
+    Exp.BinOp = <<Exp> <BoolMethodId> <Exp>>
 ]]
 run test-templatelang-to-esv to [[
   completion template BoolMethodId: "||" = "||"
@@ -51,7 +51,7 @@
   lexical syntax
     "if" -> ID {reject}
   templates
-    Exp.Var = <<*<ID>>>
+    Exp.Var = <*<ID>>
 ]]
 run test-templatelang-to-esv to [[
 	completion template Exp: "*ID" = "*" <ID:ID>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-1.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -24,34 +24,31 @@
   -> X {cons("Y")}
 ]]
 
-test placeholder [[ X.Y = <<<Z>>> ]]
+test placeholder [[ X.Y = <<Z>> ]]
 run test-templatelang-to-sdf to [[ Z -> X {cons("Y")} ]]
 
-test placeholder (text) [[ X.Y = <<<this text is ignored : Z>>> ]]
-run test-templatelang-to-sdf to [[ Z -> X {cons("Y")} ]]
-
-test placeholder (option) [[ X.Y = <<<Z?>>> ]]
+test placeholder (option) [[ X.Y = <<Z?>> ]]
 run test-templatelang-to-sdf to [[ Z? -> X {cons("Y")} ]]
 
-test placeholder (plus) [[ X.Y = <<<Z+>>> ]]
+test placeholder (plus) [[ X.Y = <<Z+>> ]]
 run test-templatelang-to-sdf to [[ Z+ -> X {cons("Y")} ]]
 
-test placeholder (star) [[ X.Y = <<<Z*>>> ]]
+test placeholder (star) [[ X.Y = <<Z*>> ]]
 run test-templatelang-to-sdf to [[ Z* -> X {cons("Y")} ]]
 
-test placeholder (plus, separator) [[ X.Y = <<<Z+; separator=", ">>> ]]
+test placeholder (plus, separator) [[ X.Y = <<Z+; separator=", ">> ]]
 run test-templatelang-to-sdf to [[ {Z ","}+ -> X {cons("Y")} ]]
 
-test placeholder (star, separator) [[ X.Y = <<<Z*; separator=" + ">>> ]]
+test placeholder (star, separator) [[ X.Y = <<Z*; separator=" + ">> ]]
 run test-templatelang-to-sdf to [[ {Z "+"}* -> X {cons("Y")} ]]
 
-test escaped chars in literal [[ X.Y = <<<\"\t\n><Z>>> ]]
+test escaped chars in literal [[ X.Y = <<\"\t\n><Z>> ]]
 run test-templatelang-to-sdf to [[ "\"\t\n" Z -> X {cons("Y")} ]]
 
-test escaped chars in separator [[ X.Y = <<<Z*; separator="\"">>> ]]
+test escaped chars in separator [[ X.Y = <<Z*; separator="\"">> ]]
 run test-templatelang-to-sdf to [[ {Z "\""}* -> X {cons("Y")} ]]
 
-test completion(...) attribute is erased [[ X.Y = <<<Z>>> {completion(prefer) }]]
+test completion(...) attribute is erased [[ X.Y = <<Z>> {completion(prefer) }]]
 run test-templatelang-to-sdf to [[ Z -> X {cons("Y")} ]]
 
 target setup footer [[

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-sdf-2.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -9,23 +9,23 @@
   templates
     // multi line template
     // placeholder @ (start, middle, end)
-    Statement.IfThen = <<
+    Statement.IfThen = <
       <MetaAnno*; separator="\n">
       if <Exp> then
         <Statement*; separator="\n">
       else
         <Statement*; separator="\n">
-    >>
+    >
     // placeholder @ start & end
-    Statements = <<
+    Statements = <
       <Statement*; separator="\n">
-    >>
+    >
     // single line template
-    Exp.Plus = <<<Exp> + <Exp>>>
+    Exp.Plus = <<Exp> + <Exp>>
     // injection (1)
-    Statement = <<<Comment>>>
+    Statement = <<Comment>>
     // injection (2)
-    Statement.Comment = <<<Comment>>>
+    Statement.Comment = <<Comment>>
 ]]
 
 target setup header [[

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-1.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -20,40 +20,54 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
+    pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
     pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
     pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
+    pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
+
+    all-lines-except-first(s) =
+        is-string
+      ; string-tokenize-keep-empty(|['
+'])
+      ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
+               < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
+               + where(![] => laststring))    // ... or not.
+      ; ([id | map(s)] + [])
+      ; <separate-by> ("\n", <id>)
+      ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
+      ; concat-strings
+
+    prefix-lines-except-first(|p) =
+      all-lines-except-first(<conc-strings> (p, <id>))
   strategies
     prettyprint-X: Y(a) -> a'
       // The strategies invoked here differ per test
       // The footer contains a last, common line.
 ]]
 
-test placeholder (single line, injection) [[ X.Y = <<<Z>>> ]]
+test placeholder (single line, injection) [[ X.Y = <<Z>> ]]
 run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
 
 test placeholder (multi line, injection) [[
-  X.Y = <<
+  X.Y = <
     <Z>
-  >>
+  >
 ]]
 run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
 
-test placeholder (text) [[ X.Y = <<<this text is ignored : Z>>> ]]
-run test-templatelang-to-str to [[ where a' := <prettyprint-Z> a ]]
-
-test placeholder (plus) [[ X.Y = <<<Z+>>> ]]
+test placeholder (plus) [[ X.Y = <<Z+>> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" ")> a ]]
 
-test placeholder (star) [[ X.Y = <<<Z*>>> ]]
+test placeholder (star) [[ X.Y = <<Z*>> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" ")> a ]]
 
-test placeholder (plus, separator) [[ X.Y = <<<Z+; separator=", ">>> ]]
+test placeholder (plus, separator) [[ X.Y = <<Z+; separator=", ">> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|", ")> a ]]
 
-test placeholder (star, separator) [[ X.Y = <<<Z*; separator=" + ">>> ]]
+test placeholder (star, separator) [[ X.Y = <<Z*; separator=" + ">> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|" + ")> a ]]
 
-test escaped chars in separator [[ X.Y = <<<Z*; separator="\"\t">>> ]]
+test escaped chars in separator [[ X.Y = <<Z*; separator="\"\t">> ]]
 run test-templatelang-to-str to [[ where a' := <pp-list(prettyprint-Z|"\"\t")> a ]]
 
 target setup footer [[

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-2.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -11,12 +11,12 @@
   package example
   module example
   templates
-    Statement.IfThen = <<
+    Statement.IfThen = <
       <MetaAnno*; separator="\n">
       if <Exp> then
         <Statement*; separator="\n">
       end
-    >>
+    >
 ]]
 run test-templatelang-to-str to [[
   module prettyprinter
@@ -25,8 +25,25 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
+    pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
     pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
     pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
+    pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
+
+    all-lines-except-first(s) =
+        is-string
+      ; string-tokenize-keep-empty(|['
+'])
+      ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
+               < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
+               + where(![] => laststring))    // ... or not.
+      ; ([id | map(s)] + [])
+      ; <separate-by> ("\n", <id>)
+      ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
+      ; concat-strings
+
+    prefix-lines-except-first(|p) =
+      all-lines-except-first(<conc-strings> (p, <id>))
   strategies
     prettyprint-Statement: IfThen(a, b, c) -> zz
       where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt	Mon Nov 21 12:09:43 2011	(r23626)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/unit-tests/templatelang/to-str-3.spt	Mon Nov 21 13:32:57 2011	(r23627)
@@ -16,27 +16,44 @@
   strategies
     pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
     pp-list(s|t) = map(s); separate-by(|t); concat-strings
+    pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
     pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
     pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
+    pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)
+
+    all-lines-except-first(s) =
+        is-string
+      ; string-tokenize-keep-empty(|['
+'])
+      ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
+               < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
+               + where(![] => laststring))    // ... or not.
+      ; ([id | map(s)] + [])
+      ; <separate-by> ("\n", <id>)
+      ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
+      ; concat-strings
+
+    prefix-lines-except-first(|p) =
+      all-lines-except-first(<conc-strings> (p, <id>))
 ]]
 
-test injection (1) [[ QId = <<<ID>>> ]]
+test injection (1) [[ QId = <<ID>> ]]
 run test-templatelang-to-str
 
-test injection (2) [[ QId = <<#<ID>#>> ]]
+test injection (2) [[ QId = <#<ID>#> ]]
 run test-templatelang-to-str
 
-test keyword injection (1) [[ Expression.SomeKeyword = <<somekeyword>> ]]
+test keyword injection (1) [[ Expression.SomeKeyword = <somekeyword> ]]
 run test-templatelang-to-str
 
-test keyword injection (2) [[ Expression.SomeKeyword = << somekeyword >> ]]
+test keyword injection (2) [[ Expression.SomeKeyword = < somekeyword > ]]
 run test-templatelang-to-str
 
 test indentation of placeholder at end of template [[
-  Start.Configuration = <<
+  Start.Configuration = <
     configuration
       <Setting*; separator="\n">
-  >>
+  >
 ]]
 run test-templatelang-to-str to [[
   strategies
@@ -50,10 +67,10 @@
 
 // silly test; there might be a real use case though
 test indentation of placeholder at start of template [[
-  Start.Configuration = <<
+  Start.Configuration = <
       <Setting*; separator="\n">
     configuration
-  >>
+  >
 ]]
 run test-templatelang-to-str to [[
   strategies
@@ -65,7 +82,7 @@
     prettyprint-Setting = is-string
 ]]
 
-test escaped chars in literal (1) [[ X.Y = <<<\"\t>>> ]]
+test escaped chars in literal (1) [[ X.Y = <<\"\t>> ]]
 run test-templatelang-to-str to [[
   strategies
     prettyprint-X :
@@ -73,7 +90,7 @@
   strategies
 ]]
 
-test escaped chars in literal (2) [[ X.Y = <<<\"\t><Z>>> ]]
+test escaped chars in literal (2) [[ X.Y = <<\"\t><Z>> ]]
 run test-templatelang-to-str to [[
   strategies
     prettyprint-X :

From M.A.Akhter at student.tudelft.nl  Mon Nov 21 14:59:46 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 21 Nov 2011 13:59:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23628 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context
Message-ID: <20111121135946.A2F8FCC073@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Nov 21 13:59:45 2011
New Revision: 23628
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23628&sc=1

Log:
fixing build error due to case-sensitive include path

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Mon Nov 21 13:32:57 2011	(r23627)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Mon Nov 21 13:59:45 2011	(r23628)
@@ -1,8 +1,6 @@
 module context/symboltable
- 
 imports 
-  include/spoofaxlang
-
+	include/SpoofaxLang
 imports 
   common
   utils/contract

From tobivollebregt at gmail.com  Mon Nov 21 15:17:08 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 21 Nov 2011 14:17:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23629 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego
Message-ID: <20111121141708.287A57F8011@mx1.tudelft.nl>

Author: tvo
Date: Mon Nov 21 14:17:07 2011
New Revision: 23629
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23629&sc=1

Log:
made Stratego editor buildable by Eclipse / ant again

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
      - copied unchanged from r23591, spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project	Mon Nov 21 13:59:45 2011	(r23628)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project	Mon Nov 21 14:17:07 2011	(r23629)
@@ -35,11 +35,4 @@
 		<nature>org.eclipse.pde.PluginNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
-	<linkedResources>
-		<link>
-			<name>lib-org.strategoxt.strj_0.17.92.201111091047</name>
-			<type>2</type>
-			<location>/home/karltk/apps/eclipse-3.7-webapps/plugins/org.strategoxt.strj_0.17.92.201111091047</location>
-		</link>
-	</linkedResources>
 </projectDescription>

Copied: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml (from r23591, spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Mon Nov 21 14:17:07 2011	(r23629, copy of r23591, spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml)
@@ -0,0 +1,631 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${src-gen}/org/strategoxt/imp/editors/stratego/strategies/Main.java" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.strategoxt.imp.editors.stratego.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport1" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="externaljarimport2" value=":${externaljarx}" else="">
+            <isset property="externaljarx"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/*.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- begin: targets used for adding debugging instrumentation to stratego -->
+        
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- value determines which target will be executed.
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
+        -->
+        <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
+            <available file=".debugmode"/>
+        </condition>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac destdir="${build}" source="1.5" target="1.5" debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information"/>
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}"/>
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}"/>
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;"/>
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+        
+        
+        <!-- end: targets used for adding debugging instrumentation to stratego -->
+
+
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

From tobivollebregt at gmail.com  Mon Nov 21 15:32:25 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 21 Nov 2011 14:32:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23630 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego
Message-ID: <20111121143225.87ABFCC07B@mx4.tudelft.nl>

Author: tvo
Date: Mon Nov 21 14:32:25 2011
New Revision: 23630
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23630&sc=1

Log:
made Stratego editor buildable by Eclipse / ant again (2)

(reverts r23594)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	Mon Nov 21 14:17:07 2011	(r23629)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	Mon Nov 21 14:32:25 2011	(r23630)
@@ -37,5 +37,5 @@
         <import file="build.generated.xml"/>
     
         <!-- Main target -->
-        <target name="all" depends="utils-files,sdf2table,ppgen.helper.fallback,pppack.helper.fallback,stratego.jar,sdf2imp"/>
+        <target name="all" depends="utils-files,sdf2table,ppgen.helper.fallback,pppack.helper.fallback,java.jar,stratego.jar,sdf2imp"/>
     </project>

From karltk at strategoxt.org  Mon Nov 21 18:55:35 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 21 Nov 2011 17:55:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23631 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego: . trans
Message-ID: <20111121175535.51BDD7F800E@mx1.tudelft.nl>

Author: karltk
Date: Mon Nov 21 17:55:35 2011
New Revision: 23631
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23631&sc=1

Log:
Spoofax/462. Use is-relpath instead of my own concoction. Hopefully fixed some of the Windows path issues.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Mon Nov 21 14:32:25 2011	(r23630)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	Mon Nov 21 17:55:35 2011	(r23631)
@@ -257,10 +257,12 @@
             </dependset>
             <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
             <antcall target="sdf2parenthesize.helper"/>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper.fallback"/>
         </target>
 
         <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
-            <java classname="run" failonerror="true">
+            <java classname="run" failonerror="false">
                 <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
                 <arg value="-i"/>
                 <arg value="${include}/${sdfmodule}.def"/>
@@ -280,6 +282,10 @@
                 <arg value="include/${sdfmodule}"/>
             </java>
         </target>
+
+    	<target name="sdf2parenthesize.helper.fallback" unless="sdf2parenthesize.available">
+        	<echo file="${include}/${sdfmodule}-parenthesize.str" message="module include/${sdfmodule}-parenthesize rules parenthesize-${sdfmodule} = id"/>
+    	</target>
         
         <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Mon Nov 21 14:32:25 2011	(r23630)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Mon Nov 21 17:55:35 2011	(r23631)
@@ -242,7 +242,7 @@
    expand-relative-path :
      x -> $[[<ProjectDir>]/[x]]
    where
-     explode-string ; Hd ; not(?'/')
+     <is-relpath> x
 
    resolve-import-path:
      x -> full-path

From karltk at strategoxt.org  Mon Nov 21 19:04:33 2011
From: karltk at strategoxt.org (Karl Trygve Kalleberg)
Date: Mon, 21 Nov 2011 18:04:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23632 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies
Message-ID: <20111121180433.573C5108C015@mx3.tudelft.nl>

Author: karltk
Date: Mon Nov 21 18:04:33 2011
New Revision: 23632
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23632&sc=1

Log:
Spoofax/461. Replaced calls to Java 1.6 Properties methods with 1.5 equivalents.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_load_properties_0_0.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_load_properties_0_0.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_load_properties_0_0.java	Mon Nov 21 17:55:35 2011	(r23631)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/strategies/java_load_properties_0_0.java	Mon Nov 21 18:04:33 2011	(r23632)
@@ -1,8 +1,9 @@
 package org.strategoxt.imp.editors.stratego.strategies;
 
+import java.io.FileInputStream;
 import java.io.FileNotFoundException;
-import java.io.FileReader;
 import java.io.IOException;
+import java.util.Collections;
 import java.util.Properties;
 
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -27,7 +28,7 @@
 
 		Properties prop = new Properties();
 		try {
-			prop.load(new FileReader(path.stringValue()));
+			prop.load(new FileInputStream(path.stringValue()));
 		} catch (FileNotFoundException e) {
 			return null;
 		} catch (IOException e) {
@@ -36,7 +37,10 @@
 
 		ITermFactory factory = context.getFactory();
 		IStrategoList els = factory.makeList();
-		for (String key : prop.stringPropertyNames()) {
+		for (Object o : Collections.list(prop.propertyNames())) {
+			if(!(o instanceof String))
+				continue;
+			String key = (String)o;
 			IStrategoString k = factory.makeString(key);
 			IStrategoString v = factory.makeString(prop.getProperty(key));
 			IStrategoTuple tup = factory.makeTuple(k, v);

From tobivollebregt at gmail.com  Mon Nov 21 20:08:23 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 21 Nov 2011 19:08:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23633 - in
	strategoxt/trunk/stratego-libraries/lib: spec/system/io tests
Message-ID: <20111121190823.DB1AA108C015@mx3.tudelft.nl>

Author: tvo
Date: Mon Nov 21 19:08:22 2011
New Revision: 23633
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23633&sc=1

Log:
* is-abspath accepts windows-style path with forward slashes too (c:/bla)
* is-abspath now *really* checks that drive part of a windows path is a letter

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str
   strategoxt/trunk/stratego-libraries/lib/tests/system-posix-test.str

Modified: strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str
==============================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str	Mon Nov 21 18:04:33 2011	(r23632)
+++ strategoxt/trunk/stratego-libraries/lib/spec/system/io/file.str	Mon Nov 21 19:08:22 2011	(r23633)
@@ -185,14 +185,14 @@
    * Succeeds if the input pathname is an absolute path.
    *
    * A pathname is considered absolute if it starts with a /, a \,
-   * or X:\ for any letter X.
+   * X:/ or X:\ for any letter X.
    *
    * @type  String -> String
    * @since 0.9.4
    * @inc   is-abs-path
    */
   is-abspath =
-    where(explode-string; (?['/'  | _] + ?[is-alpha, ':', '\' | _] + ?['\' | _]))
+    where(explode-string; (?[<'/' + '\'> | _] + ?[<is-alpha>, ':', <'/' + '\'> | _]))
 
   /**
    * Succeeds if the input pathname is a relative path.

Modified: strategoxt/trunk/stratego-libraries/lib/tests/system-posix-test.str
==============================================================================
--- strategoxt/trunk/stratego-libraries/lib/tests/system-posix-test.str	Mon Nov 21 18:04:33 2011	(r23632)
+++ strategoxt/trunk/stratego-libraries/lib/tests/system-posix-test.str	Mon Nov 21 19:08:22 2011	(r23633)
@@ -78,6 +78,14 @@
     ; apply-test(!"is-abspath -- 2", is-abspath, !"/bla", !"/bla")
     ; apply-and-fail(!"is-abspath -- 3", is-abspath, !"bla")
     ; apply-and-fail(!"is-abspath -- 4", is-abspath, !"./bla")
+      // Windows paths
+    ; apply-test(!"is-abspath -- 5", is-abspath, !"C:\\", !"C:\\")
+    ; apply-test(!"is-abspath -- 6", is-abspath, !"C:/", !"C:/")
+    ; apply-test(!"is-abspath -- 7", is-abspath, !"a:\\bla", !"a:\\bla")
+      // only letters are allowed before the colon according to the documentation
+      // (though colon isn't allowed anywhere on Windows, so strictly speaking,
+      // the next path is neither absolute nor relative...)
+    ; apply-and-fail(!"is-abspath -- 8", is-abspath, !"!:/")
 
   getcwd-tests =
       apply-test(!"getcwd -- 1", getcwd, !())

From tobivollebregt at gmail.com  Tue Nov 22 09:47:27 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 22 Nov 2011 08:47:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23634 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20111122084727.2D177CC0C8@mx4.tudelft.nl>

Author: tvo
Date: Tue Nov 22 08:47:26 2011
New Revision: 23634
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23634&sc=1

Log:
whitespace (to trigger build)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Mon Nov 21 19:08:22 2011	(r23633)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Tue Nov 22 08:47:26 2011	(r23634)
@@ -6,10 +6,10 @@
   desugar
   lib/editor-common.generated
   sourcedir
-    
+
 strategies
- 
-  
+
+
   analyze-ast:
     (ast, path, project-path) -> ast'
     with
@@ -219,26 +219,26 @@
 
    external java-load-properties(|)
    external java-interpolate-environment-variables(|)
-   
+
    load-include-properties =
-   	   MemoizeIncludeProperties
-   	 <+ 
+        MemoizeIncludeProperties
+      <+
          paths := <java-load-properties <+ ![]> $[[<ProjectDir>]/.settings/org.strategoxt.imp.editors.stratego.prefs]
        ; rules(MemoizeIncludeProperties: paths)
 
    load-include-paths =
-      load-include-properties 
+      load-include-properties
     ; fetch-elem(\ ("stratego.include", paths) -> paths \)
     ; string-tokenize(|[' '])
-      
+
    default-include-paths =
       <map(\ x -> $[[<ProjectDir>]/[x]] \)> [ "", "trans", "lib", "src", "syntax", "syn", "src/syntax" ]
-    ; if SourceDir then 
-        ![ <SourceDir> | <id> ] 
-      else 
-        id 
+    ; if SourceDir then
+        ![ <SourceDir> | <id> ]
+      else
+        id
       end
-  	   
+
    expand-relative-path :
      x -> $[[<ProjectDir>]/[x]]
    where
@@ -250,7 +250,7 @@
        <conc> (<load-include-paths <+ ![]>, <default-include-paths>)
      ; includes := <map(java-interpolate-environment-variables ; try(expand-relative-path))>
      ; full-path := <fetch-elem(\ path -> <file-exists> $[[path]/[x]] \)> includes
-        
+
         // FIXME: fetch true import paths from someplace
 /*        full-path := <file-exists> $[[<SourceDir>]/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/[x]]
@@ -405,7 +405,7 @@
     Scope(v*, s) -> Scope(v', s')
     with
       (v', s') := <scope-variables(declare-bodies-top)> (v*, s)
-      
+
   scope-variables(s): (vars, x) -> (vars', x')
     with
       // Temporarely undeclare vars for redeclaration errors
@@ -416,7 +416,7 @@
           try({cookie: DeclareCookie; ?cookie; rules(OuterCookie : sig -> cookie)});
           rules(DeclareCookie :- sig)})> vars;
         x' := <declare-bodies-top> x;
-        vars' := <map(!Var(<id>); try(declare-bodies); ?Var(<id>))> vars; 
+        vars' := <map(!Var(<id>); try(declare-bodies); ?Var(<id>))> vars;
         // Re-declare
         all-keys-OuterCookie; map({cookie: \key -> <OuterCookie; ?cookie; rules(DeclareCookie : key -> cookie)> \})
       |}
@@ -432,7 +432,7 @@
       t1' := <declare-match> t1;
       w'  := <declare-bodies-top> w;
       t2' := <declare-bodies-top> t2
-  
+
   declare-bodies:
     SetDynRule(x, r) -> SetDynRule(x', r')
     with
@@ -485,17 +485,17 @@
         DeclareCookie: (x, _, _) -> cookie
         Declaration: cookie -> dec
       );
-      // HACK: a higher-order strategy can be passed as an argument, 
+      // HACK: a higher-order strategy can be passed as an argument,
       // as in s1(s2), where s2 has arguments.
       // We overwrite (in local scope) global strategies with signature ?(x,_,_)
       // Fixes Bug: a{1} = fail; foo(a{2}) = a{2} //NOT a{1}
-      all-keys-DeclareCookie; 
+      all-keys-DeclareCookie;
       filter(declare-svar-signatures(|cookie, x))
-  
+
   declare-svar-signatures(|cookie, svar-name):
-  	key@(svar-name,_,_) -> key
-  	where
-  	  rules (DeclareCookie: key -> cookie)
+    key@(svar-name,_,_) -> key
+    where
+      rules (DeclareCookie: key -> cookie)
 
   declare-tvar:
     x -> x'
@@ -536,7 +536,7 @@
     where
       x' := x{<declare-cookie-of>}
     <+
-      // HACK: a higher-order strategy can be passed as an argument, 
+      // HACK: a higher-order strategy can be passed as an argument,
       // as in s1(s2), where s2 has arguments. We can only check if there
       // is a strategy called s2, independent of the number of
       // (strategy/term) arguments to s2.
@@ -544,7 +544,7 @@
       all-keys-DeclareCookie;
       fetch-elem(\key@(x, s*, t*) -> <?sig; !key; DeclareCookie> (x, 0, 0)\);
       x' := x{<id>}
-  
+
   declare-bodies:
     Op(x, t*) -> Op(x', t'*)
     where
@@ -751,15 +751,15 @@
       map(!(<id>, "Build symbol in match pattern")) => builds;
       require([])
 
-  constraint-warning: elem -> (x, $[Variable '[x]' may be bound already]) 
-    where v at Var(x) := <get-assign-var> elem; 
+  constraint-warning: elem -> (x, $[Variable '[x]' may be bound already])
+    where v at Var(x) := <get-assign-var> elem;
           Var(x') := <declaration-of> v;
           require(<origin-equal(|x)> x')
-        
+
   get-assign-var =
     ?Assign(<id>, _)
     <+ ?AM(_, <id>)
-        
+
   constraint-warning:
     Var(x) -> (x, $[Unparenthesized constructor: use '[x]()' instead])
     where

From M.A.Akhter at student.tudelft.nl  Tue Nov 22 14:17:02 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 22 Nov 2011 13:17:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23635 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: . META-INF
Message-ID: <20111122131702.35F35CC120@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov 22 13:17:00 2011
New Revision: 23635
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23635&sc=1

Log:
changed package name of generated sources due to a conflict with a strategy

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Tue Nov 22 08:47:26 2011	(r23634)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/META-INF/MANIFEST.MF	Tue Nov 22 13:17:00 2011	(r23635)
@@ -20,4 +20,4 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Export-Package: org.strategoxt.imp.editors.spoofax,
- org.strategoxt.imp.editors.spoofax.trans
+ org.strategoxt.imp.editors.spoofax.generated

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml	Tue Nov 22 08:47:26 2011	(r23634)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/build.main.xml	Tue Nov 22 13:17:00 2011	(r23635)
@@ -7,7 +7,7 @@
         <property name="metasdfmodule" value="Stratego-SpoofaxLang"/>
         <property name="esvmodule" value="SpoofaxLang"/>
         <property name="strmodule" value="spoofaxlang"/>
-				<property name="str.package-name" value="org.strategoxt.imp.editors.spoofax.trans"/>
+		<property name="str.package-name" value="org.strategoxt.imp.editors.spoofax.generated"/>
         
 				<!-- Project directories -->
         <property name="trans" location="trans"/>
@@ -100,78 +100,77 @@
           <antcall target="meta-sdf2table.helper" />
         </target>
 	
-  			<!-- Target Stratego to Java compiler -->
+		<!-- Target Stratego to Java compiler -->
         <target name="spx.stratego.jar" depends="rtg2sig,utils-files">
-        	<mkdir dir= "${src-gen}/org/strategoxt/imp/editors/spoofax/trans" />
-      		<property name="src-gen2" location="${src-gen}/org/strategoxt/imp/editors/spoofax/trans"/>
+        	<mkdir dir= "${src-gen}/org/strategoxt/imp/editors/spoofax/generated" />
+      		<property name="src-gen2" location="${src-gen}/org/strategoxt/imp/editors/spoofax/generated"/>
                 	
       		<dependset>
-  	        <srcfileset dir="${basedir}">
-	            <include name="**/*.str"/>
-              <include name="**/*.astr"/>
-              <exclude name="lib/*.generated.str"/>
-            </srcfileset>
-            <targetfileset file="${src-gen2}/${strmodule}.java"/>
+  	        	<srcfileset dir="${basedir}">
+	            	<include name="**/*.str"/>
+              		<include name="**/*.astr"/>
+              		<exclude name="lib/*.generated.str"/>
+            	</srcfileset>
+            	<targetfileset file="${src-gen2}/${strmodule}.java"/>
 	        </dependset>
-          <antcall target="copy-jar"/>
-        	<antcall target="spx.stratego.jvm.helper">
-	          <param name="build.stratego.outputfile" value="${src-gen2}/${strmodule}.java"/>
-            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
-          </antcall>
+        	
+          	<antcall target="copy-jar"/>
+        		<antcall target="spx.stratego.jvm.helper">
+	          	<param name="build.stratego.outputfile" value="${src-gen2}/${strmodule}.java"/>
+            	<param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+          	</antcall>
         
-	    		<javac 
-	        	classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" 
+			<javac 
+        		classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" 
 	        	srcdir="${src-gen}" 
-	        	includes="org/strategoxt/imp/editors/spoofax/trans/**" 
+	        	includes="org/strategoxt/imp/editors/spoofax/generated/**" 
 	        	destdir="${build}" 
 	        	source="1.5" 
 	        	target="1.5" 
 	        	debug="on"/>
         	
-          <!-- copy imported terms -->
-          <copy todir="${build}/org/strategoxt/imp/editors/spoofax/trans/">
-  	        <fileset dir="${src-gen2}" excludes="**/*.java"/>
-          </copy>
+  			<!-- copy imported terms -->
+  			<copy todir="${build}/org/strategoxt/imp/editors/spoofax/generated/">
+				<fileset dir="${src-gen2}" excludes="**/*.java"/>
+  			</copy>
           
-      		<jar basedir="${build}" includes="org/strategoxt/imp/editors/spoofax/trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+			<jar basedir="${build}" includes="org/strategoxt/imp/editors/spoofax/generated/**" destfile="${include}/${strmodule}.tmp.jar"/>
         	
-      	  <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
-          <delete>
-          	<fileset dir="${build}" includes="org/strategoxt/imp/editors/spoofax/trans/**"/>
-          </delete>
-        </target>
+  	  		<move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+      		<delete>
+    	  		<fileset dir="${build}" includes="org/strategoxt/imp/editors/spoofax/generated/**"/>
+      		</delete>
+    </target>
 	 			
 				
-				<target name="spx.stratego.jar.deletehelper">
-  	      <delete>
-	          <fileset dir="${src-gen}" includes="org/strategoxt/imp/editors/spoofax/trans/**"/>
-            <fileset dir="${build}" includes="org/strategoxt/imp/editors/spoofax/trans/**"/>
-	        </delete>
-        </target>
+	<target name="spx.stratego.jar.deletehelper">
+	  <delete>
+        	<fileset dir="${src-gen}" includes="org/strategoxt/imp/editors/spoofax/generated/**"/>
+	    	<fileset dir="${build}" includes="org/strategoxt/imp/editors/spoofax/generated/**"/>
+		</delete>
+    </target>
 	
-				<target name="spx.stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
-  	      <echo> Main Class  : ${build.stratego.outputfile}</echo>
-					<echo> PackageName : ${str.package-name}</echo>
-					
-					<antcall target="spx.stratego.jar.deletehelper"/>
-					
-					<delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-          <java classname="org.strategoxt.strj.Main" failonerror="true">
-            <arg value="-i"/>
-            <arg value="${trans}/${strmodule}.str"/>
-            <arg value="-o"/>
-            <arg value="${build.stratego.outputfile}"/>
-            <arg value="-p"/>
-            <arg value="${str.package-name}"/> <!-- Added package Name. TODO: Consider to persist this changes for all the Spoofax projects -->
-            <arg value="--library"/>
-            <arg value="--clean"/>
-            <arg line="${build.stratego.args}"/>
-            <arg line="${build.stratego.extraargs}"/>
-            <arg line="${externaljarflags}"/>
-            <arg line="${externaldefimport}"/>
-            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
-          </java>
-          <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-          <mkdir dir="${build}/org/strategoxt/imp/editors/spoofax/trans"/>
-        </target>
+	<target name="spx.stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+        <echo> Main Class  : ${build.stratego.outputfile}</echo>
+		<echo> PackageName : ${str.package-name}</echo>
+		<antcall target="spx.stratego.jar.deletehelper"/>
+		<delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+  		<java classname="org.strategoxt.strj.Main" failonerror="true">
+			<arg value="-i"/>
+			<arg value="${trans}/${strmodule}.str"/>
+			<arg value="-o"/>
+			<arg value="${build.stratego.outputfile}"/>
+			<arg value="-p"/>
+			<arg value="${str.package-name}"/> <!-- Added package Name. TODO: Consider to persist this changes for all the Spoofax projects -->
+			<arg value="--library"/>
+			<arg value="--clean"/>
+			<arg line="${build.stratego.args}"/>
+			<arg line="${build.stratego.extraargs}"/>
+			<arg line="${externaljarflags}"/>
+			<arg line="${externaldefimport}"/>
+			<arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+		</java>
+  		<delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+  		<mkdir dir="${build}/org/strategoxt/imp/editors/spoofax/generated"/>
+	</target>
 </project>

From M.A.Akhter at student.tudelft.nl  Tue Nov 22 14:18:04 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 22 Nov 2011 13:18:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23636 - in
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling:
	building wizards
Message-ID: <20111122131804.7D6EC108C00E@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov 22 13:18:04 2011
New Revision: 23636
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23636&sc=1

Log:
updating references of org...spoofaxlang.generated

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizard.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Tue Nov 22 13:17:00 2011	(r23635)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntSpxGenerateArtefacts.java	Tue Nov 22 13:18:04 2011	(r23636)
@@ -11,8 +11,8 @@
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
 import org.spoofax.interpreter.terms.IStrategoString;
-import org.strategoxt.imp.editors.spoofax.trans.spoofaxlang;
-import org.strategoxt.imp.editors.spoofax.trans.build_spoofaxlang_jvm_0_0;
+import org.strategoxt.imp.editors.spoofax.generated.build_spoofaxlang_jvm_0_0;
+import org.strategoxt.imp.editors.spoofax.generated.spoofaxlang;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizard.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizard.java	Tue Nov 22 13:17:00 2011	(r23635)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewSpxEditorWizard.java	Tue Nov 22 13:18:04 2011	(r23636)
@@ -30,7 +30,7 @@
 import org.strategoxt.imp.metatooling.building.AntSpxGenerateArtefacts;
 import org.strategoxt.imp.metatooling.loading.DynamicDescriptorLoader;
 import org.strategoxt.imp.runtime.EditorState;
-import org.strategoxt.imp.editors.spoofax.trans.*;
+import org.strategoxt.imp.editors.spoofax.*;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.lang.Context;

From M.A.Akhter at student.tudelft.nl  Tue Nov 22 14:21:22 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 22 Nov 2011 13:21:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23637 - in
	spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator: lib
	src/sdf2imp/project
Message-ID: <20111122132122.C4CFA7F8046@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov 22 13:21:22 2011
New Revision: 23637
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23637&sc=1

Log:
updating configuration changes

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/lib/spoofaxgenerator.jar
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/lib/spoofaxgenerator.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str	Tue Nov 22 13:18:04 2011	(r23636)
+++ spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str	Tue Nov 22 13:21:22 2011	(r23637)
@@ -29,8 +29,9 @@
 	// By default, it includes all the directories ( and their subdirectories) of the project during build. Hence, It is  
 	// always recommended to explicitly specify the sources to include. 							  
 	src:
-		src|**
+		src | **
 		
+	
 				
 	codegen:
 		// todir refers to the project directory where intermediate generated 
@@ -43,9 +44,11 @@
 		//stroutputmode : jar
 	
 	// Other project references are specified in this configuration section.
-	// Specify the name of the project from current workspace to include 
-	// Tested only with projects located in the local file system. 
 	//projectreferences:
-	//	 
-	//		<project-name>* 
+	//		org.strategoxt.imp.editors.spoofax.configuration   
+	
+	// options : compiler , analysis , symboltable,  declaration, none, all 
+	log : none
+	
+	templatelang : enabled 
 ]
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Tue Nov 22 16:40:13 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 22 Nov 2011 15:40:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23638 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen context context/sdf
Message-ID: <20111122154013.8FDA82B8055@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov 22 15:40:13 2011
New Revision: 23638
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23638&sc=1

Log:
refactoring + removing additional checks and todo comments

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Tue Nov 22 13:21:22 2011	(r23637)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Tue Nov 22 15:40:13 2011	(r23638)
@@ -50,7 +50,13 @@
 		)
 	
 	report-failure-with-stacktrace = prim("SSL_stacktrace_get_all_frame_names") ; report-failure
-	 
+	
+	editor-build-spoofaxlang-jvm :
+		(selected, position, ast, path, project-path) -> None()
+		where
+			 <build-spoofaxlang-jvm>project-path
+			 
+			 
 	//TODO : Improve error reporting. 
   build-spoofaxlang-jvm:
     current-project-location -> <id>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Tue Nov 22 13:21:22 2011	(r23637)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-declarations.str	Tue Nov 22 15:40:13 2011	(r23638)
@@ -54,7 +54,6 @@
 	
 	get-unique-language-name = get-all-language-name; ?[<id>]
 	
-	// TODO FIX : temporary turning it off since current index does not support it. 
 	get-languagename-declaration-sites = get-package-qnames-by-langname
 
 rules

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Tue Nov 22 13:21:22 2011	(r23637)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Tue Nov 22 15:40:13 2011	(r23638)
@@ -27,10 +27,6 @@
   	(key, value)  -> <id> 
   	where
   		with-spxverify(
-  			verify( ?Module(QName(_)) | <GetEnclosingModuleName> , "Module(QName(_))  ::index-sdf-usage")
-  			,!"Error : ModuleScope is expected to define sdf usage."
-  		);
-	  	with-spxverify(
 	  		<index-symbol-definition>( key, SDFUsage() , value)
 	  		,!"Indexing SDF Usage"
 	  	)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Tue Nov 22 13:21:22 2011	(r23637)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/symboltable.str	Tue Nov 22 15:40:13 2011	(r23638)
@@ -523,13 +523,7 @@
   get-related-files-of-packages = prim("SPX_index_get_related_files_of_packages", <get-project-path> , <id>)
   
   
-  /**
-  * Returns langauge Descriptor of the specified package  
-  *
-  * @type package-qname -> LanguageDescriptor(_,_,_,_,_)
-  */  
-  get-indexed-language-descriptor =  verify(?Package(QName(_)) | <id>, "Package(QName(_)) @get-indexed-language-descriptor "); prim("SPX_index_get_language_descriptor", <get-project-path> , <id>) 
-
+  
 rules 
 
   get-indexed-module-definition(adapter) =   get-indexed-module-definition ; dbg-symboltable(!$[Following definition found : [<print-as-string>]] |"Index" , <debug-level-INFO>) ; adapter 
@@ -593,7 +587,6 @@
   	; !(<id>, <DIRTY>, ToCodeGenerate())	
     ; get-indexed-module-declarations'
     
-  
   get-indexed-language-descriptor = 
   	verify(
   		?Package(QName(name)) 

From L.C.L.Kats at tudelft.nl  Tue Nov 22 18:50:08 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 22 Nov 2011 17:50:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23639 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: editor syntax trans
Message-ID: <20111122175008.A8DCA7F804A@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Nov 22 17:50:08 2011
New Revision: 23639
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23639&sc=1

Log:
Relaxed the "Combination of test conditions is not supported" warning and added a "notes" condition for future use

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Tue Nov 22 15:40:13 2011	(r23638)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Completions.esv	Tue Nov 22 17:50:08 2011	(r23639)
@@ -16,7 +16,7 @@
     "start symbol " <Start>
                                          
   completion template Header TestDecl Result :
-    "test" " " <description> " [[\n\t" <> "\n]] " <succeeds:Result> (blank)
+    "test" " " <description> " [[\n\t" <> "\n]] " <0 errors:Result> (blank)
                                          
   completion template Header TestDecl Result :
     "setup" " [[\n\t" <> "\n]]" (blank)

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Nov 22 15:40:13 2011	(r23638)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Nov 22 17:50:08 2011	(r23639)
@@ -121,6 +121,9 @@
     INT "warning"       -> Result    {cons("Warning")}
     INT "warnings"      -> Result    {cons("Warnings")}
 
+    INT "note"          -> Result    {cons("Note")}
+    INT "notes"         -> Result    {cons("Notes")}
+
     INT "fatal" "error" -> Result    {cons("Fatal")}
     INT "fatal" "errors"-> Result    {cons("Fatals")}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Nov 22 15:40:13 2011	(r23638)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Nov 22 17:50:08 2011	(r23639)
@@ -26,6 +26,9 @@
     Warning(n) -> Warnings(n)
 
   spt-desugar:
+    Note(n) -> Notes(n)
+
+  spt-desugar:
     Fatal(n) -> Fatals(n)
 
   spt-desugar-refactoring-conditions =
@@ -43,19 +46,40 @@
   
   check-error:
     Test(_, d, _, c*) -> (d, "Combination of test conditions is not supported")
-    with
-      c'* := <filter(not(is-composable-semantic-condition))> c*
     where
-      <all(not(is-parse-only-test))> c*;
-      <gt> (<length> c'*, 1)
+      // Base case: can never have > 1 condition
+      <gt> (<length> c*, 1)
+    where
+      // Exception: composable conditions (doesn't apply to combination of errors/warnings/notes)
+      if not(<is-combined-errors-condition> c*) then
+        not(<all(is-composable-semantic-condition)> c*)
+      end
+    where
+      // Exception: completion conditions compose together
+      not(<all(is-completion-test)> c*)
+    where
+      // Exception: parse conditions compose together
+      not(<all(is-parse-only-test)> c*)
     where
       // Exception: we allow conditions like '1 error refactor ... 2 errors'
-      not(one(?Refactor(_, _, _)));
-      all(not(is-parse-only-test))
+      not(<one(?Refactor(_, _, _))> c*)
+
+  // Errors and warnings don't work together ... yet
+  is-combined-errors-condition =
+    one(?Errors(_));
+    one(?Warnings(_))
+  <+
+    one(?Errors(_) + ?Warnings(_));
+    one(?Notes(_))
+         
 
   is-composable-semantic-condition =
     ?RegexPattern(_) + ?Refactor(_, _, _) + ?Build(_, _, _) + ?Run(_, _, _)
-  + ?Resolve(_) + ?Complete(_) + ?ResolveTo(_, _)
+  + ?Resolve(_) + ?ResolveTo(_, _)
+  + ?Errors(_) + ?Warnings(_) + ?Notes(_) 
+
+  is-completion-test =
+    ?Complete(_) + ?CompleteTo(_, _)
 
   check-warning:
     Test(_, d, _, [r @ Refactor(_,_,(wildcard(), [_ | _]))]) ->
@@ -63,6 +87,9 @@
     // (avoid confusion: conditions after refactoring apply to output pattern)
   
   check-error:
+    Notes(_) -> (<id>, "Not implemented")
+  
+  check-error:
     TestEmpty(_, d) -> (<id>, "Empty test case")
   
   check-error:

From L.C.L.Kats at tudelft.nl  Tue Nov 22 18:51:36 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 22 Nov 2011 17:51:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23640 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.test/test
Message-ID: <20111122175136.B52B27F8044@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Nov 22 17:51:36 2011
New Revision: 23640
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23640&sc=1

Log:
cleaned up self-application tests; more tests for "combination of test conditions is not supported"

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Nov 22 17:50:08 2011	(r23639)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Nov 22 17:51:36 2011	(r23640)
@@ -2,70 +2,58 @@
 
 language Spoofax-Testing
 
-test Basic
-  [[[ module x
-     language TestingTesting
-     test Testing TestingTesting [[
-       module x
-     ]]
-  ]]]
-
-test Builder
-  [[[ module x
-      language TestingTesting
-      test builder
-      [[ module x
-         entity Y {
-           
-         }
-      ]] build generate-java fails
-  ]]] 1 warning /eXpected to/ /fail/
+setup [[
+	module x
+  language TestingTesting
+     
+]]
+
+test Basic [[[
+	test Testing TestingTesting [[
+    module x
+  ]]
+]]]
+
+test Builder [[[
+	test builder [[
+		module x
+    entity Y {
+    }
+   ]] build generate-java fails
+]]] 1 warning /eXpected to/ /fail/
   
 
-test Refactoring
-  [[[ module x
-      language TestingTesting
-      test builder
-      [[ module x
-         entity Y {
-           
-         }
-      ]] build generate-java fails
-  ]]] 1 warning
+test Refactoring [[[
+	test builder [[
+		module x
+    entity Y {
+    }
+  ]] build generate-java fails
+]]] 1 warning
 
 test Simple runner [[[
-  module x
-  language TestingTesting
   test runner [[
     module y
   ]] run debug to Module("y", [])
 ]]]
 
 test Square brackets not allowed in test description [[[
-  module x
-  language TestingTesting
   test the [] is bad!!
 ]]] parse fails
 
 test Simple parse test [[[
-  module x
-  language TestingTesting
   test parse [[
     module x
   ]] parse succeeds
 ]]]
 
 test Simple parse test [[[
-  module x
-  language TestingTesting
   test parse [[
     no module
   ]] parse to Module(_, _)
 ]]] 1 warning
 
 test Simple reference resolving [[[
-  module x
-  language TestingTesting
   test resolve me not [[
     module x
     [[ entity y {} ]]
@@ -74,8 +62,6 @@
 
 
 test More reference resolving [[[
-  module x
-  language TestingTesting
   test resolve me not [[
     module x
     [[entity x {}]] [[entity y {}]]
@@ -83,8 +69,6 @@
 ]]] 1 error /selection/
 
 test [[[
-  module x
-  language TestingTesting
   test y [[
     module [[z]]
   ]] complete to "z" 1 error
@@ -92,8 +76,6 @@
 
 
 test Content completion [[[
-  module x
-  language TestingTesting
   test [[
     module x
     entity Alpha {
@@ -103,10 +85,52 @@
 ]]]
 
 test Two-digit errors [[[
-  module x
   test [[
     module y
   ]] 10 errors
 ]]] parse succeeds
 
+test Errors and parsing doesn't work together (1) [[[
+  test [[
+    module y
+    entity Z { z : Q }
+  ]] 1 errors parse to _
+]]] /Combination of test conditions is not supported/
+
+test Errors and parsing doesn't work together (2) [[[
+  test [[
+    module y
+    entity Z { z : Q }
+  ]] 1 errors 2 errors parse to _
+]]] /Combination of test conditions is not supported/
+
+test Errors and errors work together [[[
+  test [[
+    module y
+    entity Z { z : Q }
+  ]] 1 error 1 error
+]]]
 
+test Errors and warnings don't work together ... yet [[[
+  test [[
+    module y
+    entity Z { z : Q }
+  ]] 1 error 1 warning
+]]] /Combination of test conditions is not supported/
+
+test Reference resolving and completion don't work together (hides errors) [[[
+  test [[
+    module y
+    entity [[Z]] { z : [[Z]] }
+  ]] complete #2 to "Z"
+     resolve #2 to #1
+]]] /Combination of test conditions is not supported/
+
+test Multiple completion conditions [[[
+  test [[
+    module y
+    entity z { z : [[z]] }
+  ]] complete to "z"
+     complete to "String"
+     complete to "Int"
+]]] 0 warnings

From L.C.L.Kats at tudelft.nl  Tue Nov 22 18:56:53 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 22 Nov 2011 17:56:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23641 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/trans
Message-ID: <20111122175653.474B6CC148@mx4.tudelft.nl>

Author: LennartKats
Date: Tue Nov 22 17:56:53 2011
New Revision: 23641
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23641&sc=1

Log:
failing tests are now reported as errors: apparently people tend to ignore warnings...

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Nov 22 17:51:36 2011	(r23640)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Nov 22 17:56:53 2011	(r23641)
@@ -20,7 +20,7 @@
     entity Y {
     }
    ]] build generate-java fails
-]]] 1 warning /eXpected to/ /fail/
+]]] 1 error /eXpected to/ /fail/
   
 
 test Refactoring [[[
@@ -29,7 +29,7 @@
     entity Y {
     }
   ]] build generate-java fails
-]]] 1 warning
+]]] 1 error
 
 test Simple runner [[[
   test runner [[
@@ -51,14 +51,14 @@
   test parse [[
     no module
   ]] parse to Module(_, _)
-]]] 1 warning
+]]] 1 error
 
 test Simple reference resolving [[[
   test resolve me not [[
     module x
     [[ entity y {} ]]
   ]] resolve
-]]] 1 warning
+]]] 1 error
 
 
 test More reference resolving [[[

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Nov 22 17:51:36 2011	(r23640)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Nov 22 17:56:53 2011	(r23641)
@@ -104,7 +104,7 @@
     MarkedPlaceholder(_, _, _) -> (<id>, ${Placeholders of the form [[...]] are not yet supported; 
                                            place a 'footer' setup block at the end of the file instead})
   
-  check-warning:
+  check-error:
     Test(_,description(d), i, expectations) -> (d, warnings)
     where
       (input, selections) := <Test-get-input <+ !(FailsParsing(), [])> i
@@ -301,7 +301,7 @@
 
   external plugin-strategy-evaluate(print-trace |language, strategy)
 
-  check-warning:
+  check-error:
     TestStratego(_, description(d), s, expectation) -> (d, warning)
     where
       plugin-strategy-invoke(|<Language>, "editor-init")

From L.C.L.Kats at tudelft.nl  Tue Nov 22 19:17:19 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 22 Nov 2011 18:17:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23642 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.stratego/META-INF
	org.strategoxt.imp.nativebundle/META-INF
Message-ID: <20111122181719.AF0832B804C@mx2.tudelft.nl>

Author: LennartKats
Date: Tue Nov 22 18:17:18 2011
New Revision: 23642
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23642&sc=1

Log:
added Bundle-Vendor headers to hopefully improve binary imports in development mode

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF/MANIFEST.MF	Tue Nov 22 17:56:53 2011	(r23641)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/META-INF/MANIFEST.MF	Tue Nov 22 18:17:18 2011	(r23642)
@@ -18,3 +18,4 @@
   org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.editors.stratego
+Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	Tue Nov 22 17:56:53 2011	(r23641)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/META-INF/MANIFEST.MF	Tue Nov 22 18:17:18 2011	(r23642)
@@ -11,3 +11,4 @@
  org.eclipse.core.runtime,
  org.strategoxt.imp.runtime
 Export-Package: org.strategoxt.imp.nativebundle
+Bundle-Vendor: Spoofax.org

From M.A.Akhter at student.tudelft.nl  Thu Nov 24 11:03:29 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Thu, 24 Nov 2011 10:03:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23643 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang:
	. index index/data index/tests
Message-ID: <20111124100329.C3A8A7F807D@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Thu Nov 24 10:03:29 2011
New Revision: 23643
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23643&sc=1

Log:
+ converted Registry to singleton so that it does not require to  reinitialize IndexFacade of a particular project during the life-time of Registry.
+ Made relevant changes to adapt the singleton registry.
+ printing stack-trace to get a more overview about the exception

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SPX_exec_index_manage_command.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -1,16 +1,11 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.core.InterpreterException;
-import org.spoofax.interpreter.core.Tools;
-import org.spoofax.interpreter.library.AbstractPrimitive;
-import org.spoofax.interpreter.library.language.spxlang.SpxAbstractPrimitive.SpxPrimitiveValidator;
 import org.spoofax.interpreter.library.language.spxlang.index.IIndexManageCommand;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxIndexManager;
 import org.spoofax.interpreter.library.language.spxlang.index.SpxSemanticIndex;
 import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.stratego.Strategy;
-import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/SpxAbstractPrimitive.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -1,6 +1,9 @@
 package org.spoofax.interpreter.library.language.spxlang;
 
 import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.Writer;
 
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
@@ -92,9 +95,21 @@
 	void logException(IOAgent agent , Throwable ex){
 		agent.printError("[" + this.getName() + "]  Invocation failed . "
 									+ ex.getClass().getSimpleName()
-									+ " | error message: " + ex.getMessage());
+									+ " | error message: " + ex.getMessage()
+									+ " | stack track : "+ getStackTrace(ex));
 	}
 	
+	
+	 public static String getStackTrace(Throwable aThrowable) {
+		    final Writer result = new StringWriter();
+		    final PrintWriter printWriter = new PrintWriter(result);
+		    if(aThrowable == null) 
+		    	return "";
+		    
+		    aThrowable.printStackTrace(printWriter);
+		    return result.toString();
+		  }
+
 	static class SpxPrimitiveValidator{
 		IContext env;
 		IStrategoTerm[] tvars;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/BaseNamespace.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -155,7 +155,7 @@
 	}
 	
 	public SpxSymbol resolve(IStrategoTerm searchingFor, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade  facade) throws SpxSymbolTableException{
-		facade.persistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
+		facade.getPersistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		assert type instanceof IStrategoConstructor : "Type is expected to be IStrategoConstructor" ;
 			
@@ -167,7 +167,7 @@
 		// Hence, searching any enclosing(parent) scope if it is not 
 		// null. After searching global scope, it is not searching
 		// anymore.
-		INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
+		INamespace namespace = getEnclosingNamespace(facade.getPersistenceManager().spxSymbolTable());
 		if( namespace  != null) {
 			//checks whether searching to the enclosing scope is allowed.
 			if( shouldSearchInEnclosingNamespace( searchedBy))
@@ -179,7 +179,7 @@
 	
 	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade  facade, IStrategoTerm searchingFor, IStrategoTerm ofType, INamespace searchedBy, boolean returnDuplicate) throws SpxSymbolTableException {
 		
-		facade.persistenceManager().logMessage(this.src, "resolveAll(Base) | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
+		facade.getPersistenceManager().logMessage(this.src, "resolveAll(Base) | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + searchingFor + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		Collection<SpxSymbol> retResult = null;
 		
@@ -192,7 +192,7 @@
 		List<SpxSymbol> lookupResult = lookupSymbols(getMembers() , searchingFor , ofType);
 		retResult.addAll(lookupResult);
 		
-		INamespace namespace = getEnclosingNamespace(facade.persistenceManager().spxSymbolTable());
+		INamespace namespace = getEnclosingNamespace(facade.getPersistenceManager().spxSymbolTable());
 		//checking whether resolved namespace is Null. In that case, all the scopes are covered.
 		//also checking that the resolved namespace is not equal to the current namespace 
 		//that we already have searched - to avoid any cycle in the hierarchy.

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/GlobalNamespace.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -26,7 +26,7 @@
 	 * @return
 	 */
 	public static INamespace createInstance(SpxSemanticIndexFacade facade){
-		SpxPrimarySymbolTable  symbol_table = facade.persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable  symbol_table = facade.getPersistenceManager().spxSymbolTable();
 		IStrategoList spoofaxNamespaceUri = getGlobalNamespaceId(facade);
 		INamespace gns = symbol_table.resolveNamespace(spoofaxNamespaceUri); 
 		if(gns != null)
@@ -34,7 +34,7 @@
 		else{
 			return new GlobalNamespace(symbol_table.toNamespaceUri(spoofaxNamespaceUri), 
 					facade.getCons().getGlobalNamespaceTypeCon(), 
-					facade.persistenceManager()
+					facade.getPersistenceManager()
 			);
 		}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/LocalNamespace.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -39,7 +39,7 @@
 		UUID uniqueId= UUID.randomUUID();
 		NamespaceUri localNamespaceUri = new NamespaceUri(termFactory.makeList(termFactory.makeString("anonymous_"+uniqueId.toString())) , uniqueId);
 
-		return new LocalNamespace(localNamespaceUri , facade.getCons().getLocalNamespaceTypeCon(), facade.persistenceManager(), enclosingNamespace.namespaceUri());
+		return new LocalNamespace(localNamespaceUri , facade.getCons().getLocalNamespaceTypeCon(), facade.getPersistenceManager(), enclosingNamespace.namespaceUri());
 	}
 
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/ModuleNamespace.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -41,12 +41,12 @@
 	 * @return
 	 */
 	public static INamespace createInstance(NamespaceUri id, NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade facade) {
-		SpxPrimarySymbolTable  symbol_table = facade.persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable  symbol_table = facade.getPersistenceManager().spxSymbolTable();
 		INamespace ns = symbol_table.resolveNamespace(id); 
 		if(ns != null)
 			return ns;
 		else
-			return new ModuleNamespace(id, facade.getCons().getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.persistenceManager());
+			return new ModuleNamespace(id, facade.getCons().getModuleNamespaceTypeCon(), enclosingNamespaceId, facade.getPersistenceManager());
 	}
 
 	@Override

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/PackageNamespace.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -89,7 +89,7 @@
 			
 			importedNamespaceUris= new HashSet<NamespaceUri>();
 			
-			SpxPrimarySymbolTable symTable =  facade.persistenceManager().spxSymbolTable();
+			SpxPrimarySymbolTable symTable =  facade.getPersistenceManager().spxSymbolTable();
 			
 			//getting the package declaration and retrieving it imported references 
 			PackageDeclaration assiciatedPackageDeclaration = facade.lookupPackageDecl(this.namespaceUri().id());
@@ -131,7 +131,7 @@
 	 */
 	@Override
 	public SpxSymbol resolve(IStrategoTerm id, IStrategoTerm type, INamespace searchedBy, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
-		facade.persistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
+		facade.getPersistenceManager().logMessage(this.src, "resolve | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + id + " origin Namespace: " + searchedBy.namespaceUri().id() );
 		
 		ensureEnclosedNamespaceUrisLoaded(facade);
 		SpxSymbol retSymbol = resolveSymbolinNamespaces(this.enclosedNamespaceUris, id, type, searchedBy, facade);
@@ -159,7 +159,7 @@
 	 */
 	@Override
 	public Collection<SpxSymbol> resolveAll(SpxSemanticIndexFacade facade,IStrategoTerm key, IStrategoTerm type, INamespace originNamespace, boolean returnDuplicate) throws SpxSymbolTableException{
-		facade.persistenceManager().logMessage(this.src, "resolveAll | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + key + " origin Namespace: " + originNamespace.namespaceUri().id() );
+		facade.getPersistenceManager().logMessage(this.src, "resolveAll | Resolving Symbol in " + this.namespaceUri().id() +  " . Key :  " + key + " origin Namespace: " + originNamespace.namespaceUri().id() );
 		
 		Collection<SpxSymbol> retResult = null;
 		
@@ -212,7 +212,7 @@
 	private SpxSymbol resolveSymbolinNamespaces(Iterable<NamespaceUri> resolvableUris  ,IStrategoTerm key, IStrategoTerm type, INamespace searchedOrigin, SpxSemanticIndexFacade facade) throws SpxSymbolTableException {
 		
 		SpxSymbol retSymbol = null;
-		INamespaceResolver namespaceResolver = facade.persistenceManager().spxSymbolTable();
+		INamespaceResolver namespaceResolver = facade.getPersistenceManager().spxSymbolTable();
 		 
 		for( NamespaceUri uri : resolvableUris){
 
@@ -242,7 +242,7 @@
 		else
 			retSymbol =	new HashSet<SpxSymbol>();
 		
-		INamespaceResolver namespaceResolver = facade.persistenceManager().spxSymbolTable();
+		INamespaceResolver namespaceResolver = facade.getPersistenceManager().spxSymbolTable();
 		 
 		for( NamespaceUri uri : resolvableUris){
 
@@ -276,7 +276,7 @@
 	 */
 	public static Iterable<INamespace> createInstances(IStrategoList id, SpxSemanticIndexFacade facade){
 		
-		SpxPrimarySymbolTable  table =  facade.persistenceManager().spxSymbolTable() ;
+		SpxPrimarySymbolTable  table =  facade.getPersistenceManager().spxSymbolTable() ;
 		List<INamespace> namespaces = new ArrayList<INamespace>();
 		INamespace ns = table.resolveNamespace(id); 
 		if(ns == null)
@@ -284,7 +284,7 @@
 			NamespaceUri globalNsUri =  table.toNamespaceUri(GlobalNamespace.getGlobalNamespaceId(facade));
 			NamespaceUri currentPackageUri = table.toNamespaceUri(id);
 	
-			ns = new PackageNamespace(currentPackageUri, facade.getCons().getPackageNamespaceTypeCon(), globalNsUri,facade.persistenceManager());
+			ns = new PackageNamespace(currentPackageUri, facade.getCons().getPackageNamespaceTypeCon(), globalNsUri,facade.getPersistenceManager());
 		}
 		
 		namespaces.add(ns);
@@ -301,7 +301,7 @@
 	 */
 	private static INamespace createInternalNamespace( NamespaceUri enclosingNamespaceId , SpxSemanticIndexFacade facade)
 	{
-		SpxPrimarySymbolTable  table =  facade.persistenceManager().spxSymbolTable() ;
+		SpxPrimarySymbolTable  table =  facade.getPersistenceManager().spxSymbolTable() ;
 		
 		NamespaceUri internalNamespaceUri = packageInternalNamespace(enclosingNamespaceId, facade);
 		INamespace ns = table.resolveNamespace(internalNamespaceUri) ;
@@ -321,7 +321,7 @@
 	public static NamespaceUri packageInternalNamespace(
 			NamespaceUri enclosingNamespaceId, SpxSemanticIndexFacade idxFacade) {
 		
-		SpxPrimarySymbolTable  table =  idxFacade.persistenceManager().spxSymbolTable() ;
+		SpxPrimarySymbolTable  table =  idxFacade.getPersistenceManager().spxSymbolTable() ;
 		
 		IStrategoList internalModuleID  = packageInternalModuleId(enclosingNamespaceId.id() , idxFacade);
 		NamespaceUri internalModuleUri  = table.toNamespaceUri(internalModuleID);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -140,7 +140,7 @@
 			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
 				SpxSemanticIndexFacade idxFacade = idx.getFacadeRegistry().getFacade(projectPath);
 				if(idxFacade!= null){
-					idxFacade.persistChanges();
+					idxFacade.commit();
 					idxFacade.clearCache();
 					idxFacade.close(false);
 				} 	
@@ -178,7 +178,7 @@
 			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
 				SpxSemanticIndexFacade idxFacade = idx.getFacadeRegistry().getFacade(projectPath);
 				if(idxFacade!= null){
-					idxFacade.persistChanges();
+					idxFacade.commit();
 				}	
 			}
 		};

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -36,6 +36,7 @@
 	
 	private SpxPrimarySymbolTable _spxSymbolTable;// Symbol Table for storing program symbols 
 
+	private Properties options;
 	/**
 	 * Instantiates a new instance of SpxPersistenceManager. Main Responsibility of this class  
 	 * is to store symbol table in disk and manage it . 
@@ -43,19 +44,7 @@
 	 * @param spxSemanticIndexFacade
 	 * @throws IOException
 	 */
-	public SpxPersistenceManager(SpxSemanticIndexFacade spxSemanticIndexFacade) throws IOException{
-		this(spxSemanticIndexFacade, null);
-	}
-	
-	
-	/**
-	 * @param projectName
-	 * @param indexDirectory
-	 * @param ioAgent
-	 * @param options
-	 * @throws IOException
-	 */
-	private SpxPersistenceManager (SpxSemanticIndexFacade spxSemanticIndexFacade,Properties options) throws IOException {
+	public SpxPersistenceManager (SpxSemanticIndexFacade spxSemanticIndexFacade) throws IOException {
 		assert spxSemanticIndexFacade != null : "SpxSemanticIndexFacade is expected to be nonnull" ;
 
 		this._agent = spxSemanticIndexFacade.getIOAgent();
@@ -71,39 +60,8 @@
 		options.put(RecordManagerOptions.CACHE_TYPE, "soft");
 		options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "false");
 		
-		tryInitRecordManager(spxSemanticIndexFacade,options);
-		
 		logMessage(SRC + ".ctor" , "Instantiation of PersistenceManager is done. Index Directory : ["+ BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX  + "] indexid : "+ getIndexId());
 	}
-
-
-	/**
-	 * Tries to initialise record manager
-	 * 
-	 * @param options
-	 * @throws IOException
-	 */
-	private void tryInitRecordManager(SpxSemanticIndexFacade spxSemanticIndexFacade, Properties options) throws IOException {
-		int noOfTries = Utils.NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER;
-		
-		while(true){
-			try {
-				_recordManager = RecordManagerFactory.createRecordManager(_indexId , options);
-				break;
-			}catch(IOException ex) {
-				logMessage(SRC + ".tryInitRecordManager" , "Failed to create recordmanager with arg : " + _indexId +". exception : "+ ex);
-				if(noOfTries == 0){ 
-					logMessage(SRC + ".tryInitRecordManager" , "RecordManager creation is failed. Reason : "+ ex);
-					throw ex;
-				}else{
-					_indexId  = _indexId+ "[" + UUID.randomUUID().toString() +"]";
-					this.clearCache();
-					spxSemanticIndexFacade.invalidateSpxCacheDirectory();
-					noOfTries--;
-				}
-			}
-		}
-	}
 	
 	/**
 	 * Initializes Symbol Tables for {@code projectName} Project
@@ -112,6 +70,8 @@
 	 */
 	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade) throws Exception {
 		
+		tryInitRecordManager(facade,options);
+		
 		_spxUnitsTable   = new SpxCompilationUnitTable(this);
 		_spxPackageTable = new SpxPackageLookupTable(this);
 		_spxModuleTable  = new SpxModuleLookupTable(this);
@@ -127,6 +87,38 @@
 		*/	
 	}
 	
+
+
+	/**
+	 * Tries to initialise record manager
+	 * 
+	 * @param options
+	 * @throws IOException
+	 */
+	private void tryInitRecordManager(SpxSemanticIndexFacade spxSemanticIndexFacade, Properties options) throws IOException {
+		int noOfTries = Utils.NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER;
+		if(isClosed()){
+			while(true){
+				try {
+					_recordManager = RecordManagerFactory.createRecordManager(_indexId , options);
+					break;
+				}catch(IOException ex) {
+					logMessage(SRC + ".tryInitRecordManager" , "Failed to create recordmanager with arg : " + _indexId +". exception : "+ ex);
+					if(noOfTries == 0){ 
+						logMessage(SRC + ".tryInitRecordManager" , "RecordManager creation is failed. Reason : "+ ex);
+						throw ex;
+					}else{
+						_indexId  = _indexId+ "[" + UUID.randomUUID().toString() +"]";
+						this.clearCache();
+						noOfTries--;
+					}
+				}
+			}
+		}
+	}
+	
+	
+	
 	
 	/**
 	 * Initializes RecordListeners i.e. chain record listeners among the tables 
@@ -161,10 +153,7 @@
 	 * @param mapName
 	 * @return
 	 */
-	public <K,V> PrimaryHashMap<K,V> loadHashMap ( String mapName){
-		return _recordManager.hashMap(mapName) ;
-		
-	}
+	public <K,V> PrimaryHashMap<K,V> loadHashMap ( String mapName){ return _recordManager.hashMap(mapName) ; }
 	
 	/**
 	 * Instantiates a new StoreHashMap
@@ -264,4 +253,4 @@
 		if( _recordManager instanceof CacheRecordManager)
 			_recordManager.clearCache();
 	}
-}
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -35,17 +35,24 @@
 	private final SecondaryHashMap <IStrategoList,NamespaceUri,INamespace> namespaceByStrategoId;
 	private transient INamespace _activeNamespace ;
 	
-	public ISpxPersistenceManager persistenceManager(){ return _facade.persistenceManager(); }
+
+	private final static String INITIALIZED_ON_KEY = "INITIALIZED_ON";
+	private final static String LAST_CODEGEN_ON_KEY = "LAST_CODEGEN_ON";
+	
+	
+	public ISpxPersistenceManager persistenceManager(){ return _facade.getPersistenceManager(); }
+
+	
 	public SpxPrimarySymbolTable (SpxSemanticIndexFacade facade) throws SecurityException, IOException{
 		assert facade != null  : "SpxSemanticIndexFacade  is expected to non-null" ;
 
 		_facade = facade;
 
-		String tableName = facade.persistenceManager().getIndexId() + "primary_symbol_table.idx";
+		String tableName = facade.getPersistenceManager().getIndexId() + "primary_symbol_table.idx";
 		
-		timestamps = facade.persistenceManager().loadHashMap(tableName + "timestamps.idx");
+		timestamps = facade.getPersistenceManager().loadHashMap(tableName + "timestamps.idx");
 		
-		namespaces  = facade.persistenceManager().loadHashMap(tableName + "namespaces.idx");
+		namespaces  = facade.getPersistenceManager().loadHashMap(tableName + "namespaces.idx");
 		namespaceByStrategoId = namespaces.secondaryHashMap(tableName+ ".namespaceByStrategoId.idx", 
 				new SecondaryKeyExtractor<IStrategoList,NamespaceUri,INamespace>(){
 					public IStrategoList extractSecondaryKey(NamespaceUri k,INamespace v) {
@@ -55,35 +62,34 @@
 	}
 	
 	
-	private final static String INITIALIZED_ON_KEY = "INITIALIZED_ON";
-	private final static String LAST_CODEGEN_ON_KEY = "LAST_CODEGEN_ON";
-	
-	long getIntializedOn(){ 
+	long getCodeCompilationFinishedOn(){ 
 		Long initializedOn = timestamps.get(INITIALIZED_ON_KEY);
 		
-		if(initializedOn ==null) return System.currentTimeMillis();
+		if(initializedOn ==null) 
+			return 0;
 		
 		return initializedOn;
 	}
 	
-	void setCompileSessionEndedOn(){ 
-		timestamps.put(INITIALIZED_ON_KEY, System.currentTimeMillis());
-				
+	void setCompileSessionEndedOn(long timestamp){ 
+		timestamps.put(INITIALIZED_ON_KEY, timestamp);
 	}
 	
-	
 	long getLastCodeGeneratedOn(){ 
 		Long lastCodeGenOn = timestamps.get(LAST_CODEGEN_ON_KEY);
-		
 		if(lastCodeGenOn ==null) 
 			return 0;
-		
 		return lastCodeGenOn;
 	}
 	
 	void setLastCodeGeneratedOn(long timestap){ 
 		timestamps.put(LAST_CODEGEN_ON_KEY, timestap);
-				
+	}
+	
+	void reinitFlags(){
+		setLastCodeGeneratedOn(0); 
+		setCompileSessionEndedOn(0);
+		
 	}
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -7,9 +7,10 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 
+import static org.spoofax.interpreter.library.language.spxlang.index.Utils.assertIsNotNull;
 
 /**
- * Semantic Index to store the symbols of SPXlang projects. 
+ * Semantic Index to store the symbols of Spoofaxlang projects. 
  *  
  * @author Md. Adil Akhter
  * Created On : Aug 20, 2011
@@ -25,7 +26,7 @@
 	private final SpxSemanticIndexFacadeRegistry _facadeRegistry;
 		
 	public SpxSemanticIndex(){
-		_facadeRegistry = new SpxSemanticIndexFacadeRegistry();
+		_facadeRegistry = SpxSemanticIndexFacadeRegistry.instance;
 	}
 	
 	public SpxSemanticIndexFacadeRegistry getFacadeRegistry() {
@@ -82,6 +83,9 @@
 	}
 
 	public boolean indexLanguageDescriptor(IStrategoString projectPath,	final IStrategoAppl languageDescriptor) throws Exception {
+		assertIsNotNull(languageDescriptor, "languageDescriptor is Null.");
+		
+		
 		return new SpxIndexer() {
 			public void index(IStrategoString projectPath, IStrategoAppl appl)
 					throws Exception {
@@ -93,6 +97,9 @@
 
 	public boolean indexCompilationUnit(IStrategoString projectPath, IStrategoString spxCompilationUnitPath, IStrategoAppl spxCompilationUnitAST) throws IllegalStateException, Exception{
 
+		assertIsNotNull(spxCompilationUnitPath, "spxCompilationUnitPath is Null.");
+		assertIsNotNull(spxCompilationUnitPath, "spxCompilationUnitAST is Null.");
+		
 		SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 		idxFacade.indexCompilationUnit( spxCompilationUnitPath, spxCompilationUnitAST);
 		return true;
@@ -291,7 +298,6 @@
 	
 	
 	public boolean removeCompilationUnit(IStrategoString projectPath,IStrategoString spxCompilationUnitPath) throws Exception{
-	
 			SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 			idxFacade.removeCompilationUnit(spxCompilationUnitPath);
 			
@@ -326,9 +332,4 @@
 	}
 
 
-
-	
-
-	
-
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -1,7 +1,7 @@
 package org.spoofax.interpreter.library.language.spxlang.index;
 
-import static org.spoofax.interpreter.core.Tools.asJavaString;
 import static org.spoofax.interpreter.core.Tools.applAt;
+import static org.spoofax.interpreter.core.Tools.asJavaString;
 import static org.spoofax.interpreter.core.Tools.stringAt;
 
 import java.io.File;
@@ -9,7 +9,6 @@
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -42,7 +41,7 @@
 //TODO FIXME : combine symbol table and index
 public class SpxSemanticIndexFacade {
 	
-	private ISpxPersistenceManager _persistenceManager;
+	ISpxPersistenceManager persistenceManager;
 	
 	private final String _projectPath ;
 	private String _indexId;
@@ -79,12 +78,25 @@
 		_spxConstructors = new SpxConstructors(_termFactory);
 	}
 	
-	public synchronized void initializePersistenceManager() throws Exception {
-		_persistenceManager = new SpxPersistenceManager(this);
-		_persistenceManager.initializeSymbolTables(this._projectPath, this);
-		_indexId = _persistenceManager.getIndexId();
-		
-		
+	private void initializePersistenceManager() throws Exception {
+		ISpxPersistenceManager persistenceManager = getPersistenceManager();
+		persistenceManager.initializeSymbolTables(this._projectPath, this);
+		_indexId = persistenceManager.getIndexId();
+	}
+	
+	public synchronized void tryReInitializePersistenceManager() throws Exception{
+		if( isPersistenceManagerClosed()){
+			initializePersistenceManager();
+			onInitCodeCompilation();
+		}
+	}
+	
+	public static SpxSemanticIndexFacade getInstance(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent) throws Exception{
+		SpxSemanticIndexFacade fac  = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
+		fac.persistenceManager = new SpxPersistenceManager(fac); // initializing persistence manager and reusing it throughout the session
+		fac.initializePersistenceManager();
+		fac.cleanIndex();
+		return fac;
 	}
 	
 	protected void finalize() throws Throwable {
@@ -124,14 +136,29 @@
 	 * Returns an instance of the Persistence Manager active for the current Facade
 	 * @return
 	 */
-	public ISpxPersistenceManager persistenceManager(){	return _persistenceManager; }
+	public ISpxPersistenceManager getPersistenceManager(){
+		if(persistenceManager == null)
+			throw new IllegalArgumentException("Error : PersistenceManage is null");
+		
+		return persistenceManager; 
+	}
 
 	public void onInitCodeGeneration(){
 		this._currentCodeGenerationStratedOn = System.currentTimeMillis(); 
 	}
 	
 	public void onCompleteCodeGeneration() { 
-		this.persistenceManager().spxSymbolTable().setLastCodeGeneratedOn(this._currentCodeGenerationStratedOn);
+		ISpxPersistenceManager mangager= this.getPersistenceManager();
+		mangager.spxSymbolTable().setLastCodeGeneratedOn(this._currentCodeGenerationStratedOn);
+	}
+	
+	private long currentCodeCompilationStartedOn;
+	
+	public void onInitCodeCompilation(){ 	this.currentCodeCompilationStartedOn = System.currentTimeMillis(); }
+	
+	public void onCompleteCodeCompilation(){ 	
+		ISpxPersistenceManager mangager= this.getPersistenceManager();
+		mangager.spxSymbolTable().setCompileSessionEndedOn(currentCodeCompilationStartedOn) ;
 	}
 	
 	/**
@@ -146,7 +173,7 @@
 		
 		logMessage("SpxSemanticIndexFacade.getCompilationUnit . Arguments : " + spxCompilationUnitPath);
 		
-		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+		SpxCompilationUnitTable table = getPersistenceManager().spxCompilcationUnitTable();
 		
 		IStrategoAppl term = (IStrategoAppl)table.get(this, resUri);
 		
@@ -161,7 +188,7 @@
 	public SpxCompilationUnitInfo getCompilationUnitInfo(String absUriPath){
 		URI resUri = Utils.getAbsolutePathUri(absUriPath ,_agent);
 		
-		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+		SpxCompilationUnitTable table = getPersistenceManager().spxCompilcationUnitTable();
 		return table.getInfo(this, resUri);
 	}
 
@@ -174,7 +201,7 @@
 	public void removeCompilationUnit( IStrategoString spxCompilationUnitPath ) throws IOException{
 		URI resUri = toFileURI(spxCompilationUnitPath);
 		
-		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+		SpxCompilationUnitTable table = getPersistenceManager().spxCompilcationUnitTable();
 		
 		table.remove(resUri);
 	}
@@ -187,12 +214,12 @@
 	 * @throws IOException 
 	 */
 	public void indexCompilationUnit( IStrategoString spxCompilationUnitPath, IStrategoAppl spxCompilationUnitAST) throws IOException {
-
+		
 		URI resUri = toFileURI(spxCompilationUnitPath); // Converting IStrategoString to File URI 
 		
 		IStrategoTerm astTerm = toCompactPositionInfo(spxCompilationUnitAST);
 
-		SpxCompilationUnitTable table = _persistenceManager.spxCompilcationUnitTable();
+		SpxCompilationUnitTable table = getPersistenceManager().spxCompilcationUnitTable();
 	
 		logMessage("Storing following compilation unit. Path : ["+  spxCompilationUnitPath +"]");
 		
@@ -234,12 +261,12 @@
 			IStrategoAppl ast, 
 			IStrategoAppl analyzedAst) throws IOException {
 
-		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 
 		IStrategoList moduleId = ModuleDeclaration.getModuleId( this, moduleQName);
 		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageQName);
 		
-		_persistenceManager.spxPackageTable().verifyPackageIDExists(packageId) ;
+		getPersistenceManager().spxPackageTable().verifyPackageIDExists(packageId) ;
 		
 		moduleId = (IStrategoList) strip(moduleId);
 		packageId = (IStrategoList) strip(packageId);
@@ -282,8 +309,10 @@
 	 */
 	public void indexPackageDeclaration(IStrategoAppl packageIdAppl, IStrategoString spxCompilationUnitPath){
 		
-		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
-		SpxCompilationUnitTable spxTable = _persistenceManager.spxCompilcationUnitTable();
+		ISpxPersistenceManager persistenceManager = getPersistenceManager();
+		
+		SpxPackageLookupTable table = persistenceManager.spxPackageTable();
+		SpxCompilationUnitTable spxTable = persistenceManager.spxCompilcationUnitTable();
 		
 		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageIdAppl);
 		
@@ -314,7 +343,7 @@
 		
 		IStrategoList parentId = getNamespaceId(namespaceAppl);
 		
-		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		INamespace ns = symbolTable.newAnonymousNamespace(parentId);
 		
 		return this.getTermFactory().makeAppl(getCons().getLocalNamespaceTypeCon(), ns.namespaceUri().id());
@@ -325,7 +354,7 @@
 		
 		IStrategoList id = getNamespaceId(namespaceAppl);
 		
-		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		INamespace deletedLocalNs = symbolTable.destroyNamespace(id);
 		
 		return _termFactory.makeAppl(getCons().getLocalNamespaceTypeCon(), deletedLocalNs.namespaceUri().id());
@@ -360,7 +389,7 @@
 					      .build();
 					   		
 		
-		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		symbolTable.defineSymbol(getNamespaceId((IStrategoAppl)symbolDefinition.getSubterm(NAMESPACE_ID_INDEX)), entry);
 	}
 	
@@ -380,7 +409,7 @@
 		}
 		
 		IStrategoList namespaceID = this.getNamespaceId((IStrategoAppl)searchCriteria.get(0));
-		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		
 		return symbolTable.resolveSymbol(namespaceID, strip(searchCriteria.get(1)), typeCtor);
 	}
@@ -440,7 +469,7 @@
 			typeCtor = _spxConstructors.indexConstructor(ctor);
 		}
 		
-	    Set<SpxSymbol> spxSymbols = this.persistenceManager().spxSymbolTable()
+	    Set<SpxSymbol> spxSymbols = this.getPersistenceManager().spxSymbolTable()
 	    					.undefineSymbols(namespaceID, 
 	    									 symbolID,
     										 typeCtor);
@@ -449,7 +478,7 @@
 	}  
 	
 	public void invalidateGlobalNamespace() {
-		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		
 		symbolTable.clearGlobalNamespce(this);
 		
@@ -470,7 +499,7 @@
 	public Collection<SpxSymbol> resolveSymbols(IStrategoAppl namespaceToStartSearchWith, IStrategoTerm symbolId, IStrategoConstructor  symbolType, boolean returnDuplicates) throws SpxSymbolTableException {
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
 
-		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		
 		Collection<SpxSymbol> resolvedSymbols = symbolTable.resolveSymbols(namespaceID, strip(symbolId), symbolType, returnDuplicates);
 		return resolvedSymbols;
@@ -480,7 +509,7 @@
 		Set<SpxSymbol> resolvedSymbols= new HashSet<SpxSymbol>();
 		
 		IStrategoList namespaceID = this.getNamespaceId(namespaceToStartSearchWith);
-		SpxPrimarySymbolTable  symbolTable = persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		
 		SpxSymbol sym = symbolTable.resolveSymbol(namespaceID, strip(symbolId), symbolType);
 		if(sym != null)
@@ -538,7 +567,7 @@
 		verifyConstructor(languageDescriptor.getConstructor(), getCons().getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
 
 		IStrategoList moduleId = ModuleDeclaration.getModuleId(this, (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
-		SpxModuleLookupTable table = _persistenceManager.spxModuleTable();
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 
 		table.verifyModuleIDExists(moduleId);
 
@@ -567,7 +596,7 @@
 		IStrategoList packageId; 
 		
 		if (namespaceId.getConstructor() == getCons().getModuleQNameCon()) {
-			packageId = persistenceManager()
+			packageId = getPersistenceManager()
 					.spxModuleTable()
 					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
 			
@@ -580,7 +609,7 @@
 		PackageDeclaration packageDeclaration= this.lookupPackageDecl(packageId);
 		
 		packageDeclaration.addImportRefernces(this, imports);
-		persistenceManager().spxPackageTable().definePackageDeclaration(packageDeclaration);
+		getPersistenceManager().spxPackageTable().definePackageDeclaration(packageDeclaration);
 	}
 	
 	
@@ -588,7 +617,7 @@
 	 * @param mDecl
 	 */
 	private void defineNamespace(INamespaceFactory nsFactory) {
-		SpxPrimarySymbolTable symTable =  this.persistenceManager().spxSymbolTable();
+		SpxPrimarySymbolTable symTable =  this.getPersistenceManager().spxSymbolTable();
 		
 		for( INamespace ns : nsFactory.newNamespaces(this) ) {  symTable.defineNamespace(ns) ; }
 	}
@@ -611,7 +640,7 @@
 		IdentifiableConstruct ns; 
 
 		if (namespaceId.getConstructor() == getCons().getModuleQNameCon()) {
-			IStrategoList packageId = persistenceManager()
+			IStrategoList packageId = getPersistenceManager()
 					.spxModuleTable()
 					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
 			ns = lookupPackageDecl(packageId);
@@ -642,7 +671,7 @@
 		PackageDeclaration ns; 
 
 		if (namespaceId.getConstructor() == getCons().getModuleQNameCon()) {
-			IStrategoList packageId = persistenceManager()
+			IStrategoList packageId = getPersistenceManager()
 					.spxModuleTable()
 					.packageId(ModuleDeclaration.getModuleId(this, namespaceId));
 			ns = lookupPackageDecl(packageId);
@@ -687,7 +716,7 @@
 		
 		HashSet<String> resourcePaths = new HashSet<String>();
 		
-		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
+		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
 		for (IStrategoTerm packageName: StrategoListIterator.iterable(packageList)) {
 			IStrategoAppl packageTypedQName = (IStrategoAppl)packageName;
 			IStrategoList packageId = PackageDeclaration.getPackageId(this, packageTypedQName);
@@ -710,7 +739,7 @@
 	public IStrategoList getPackageDeclarations(IStrategoString filePath){
 		logMessage("getPackageDeclarationsByUri | Arguments : " + filePath);
 		
-		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
+		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
 		String filepathString = asJavaString(filePath);
 		
 		Set<PackageDeclaration> decls; 
@@ -732,14 +761,19 @@
 	public IStrategoList getPackageDeclarationsByLanguageName(IStrategoString langName) {
 		logMessage("getPackageDeclarationsByLanguageName | Arguments : " + langName);
 		
-		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 		
 		Set<IStrategoList> decls  = new HashSet<IStrategoList>(); 
 		
 		Iterable<IStrategoList> mdecls = table.getModuleIdsByLangaugeName(langName);
 		
-		for ( IStrategoList mId: mdecls){
-			decls.add(table.getModuleDeclaration(mId).enclosingPackageID);
+		//TODO : there is no way that mdecls can be null unless langName is invalid.
+		//Debug more to reproduce why mdecls is found null? 
+		if(mdecls!=null)
+		{
+			for ( IStrategoList mId: mdecls){
+				decls.add(table.getModuleDeclaration(mId).enclosingPackageID);
+			}
 		}
 		
 		IStrategoList result = getTermFactory().makeList();
@@ -774,7 +808,7 @@
 	 */
 	public ModuleDeclaration lookupModuleDecl(IStrategoAppl moduleTypeQName) throws SpxSymbolTableException {
 		
-		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 		
 		IStrategoList moduleId = ModuleDeclaration.getModuleId(this, moduleTypeQName);
 		
@@ -822,7 +856,7 @@
 	public IStrategoList getModuleDeclarations (IStrategoString filePath){
 		logMessage("getModuleDeclarations | Arguments : " + filePath);
 		
-		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 		String filepathString = asJavaString(filePath);
 		
 		Iterable<ModuleDeclaration> decls; 
@@ -873,9 +907,9 @@
 		long ts = 0;
 	
 		if( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCompileCon()))
-			ts = _persistenceManager.spxSymbolTable().getIntializedOn();
+			ts = getPersistenceManager().spxSymbolTable().getCodeCompilationFinishedOn();
 		else if ( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCodeGenerateCon()))
-			ts = this.persistenceManager().spxSymbolTable().getLastCodeGeneratedOn();
+			ts = this.getPersistenceManager().spxSymbolTable().getLastCodeGeneratedOn();
 		else
 			throw new SpxSymbolTableException("Illegal qualifiedFor constructor at getDirtyModuleDeclarations");
 		
@@ -893,8 +927,8 @@
 	
 	public Iterable<ModuleDeclaration> getModuleDeclarations(IStrategoList pacakgeID) throws SpxSymbolTableException
 	{
-		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
-		_persistenceManager.spxPackageTable().verifyPackageIDExists(pacakgeID) ;
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		getPersistenceManager().spxPackageTable().verifyPackageIDExists(pacakgeID) ;
 		
 		return table.getModuleDeclarationsByPackageId(pacakgeID);
 	}
@@ -910,7 +944,7 @@
 	{
 		ModuleDeclaration decl = lookupModuleDecl(moduleTypedQName);
 
-		SpxModuleLookupTable table = persistenceManager().spxModuleTable();
+		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
 		
 		IStrategoList qualifiedModuleId = ModuleDeclaration.getModuleId(this, moduleTypedQName);
 		IStrategoTerm moduleAterm =table.getModuleDefinition(this, qualifiedModuleId) ;
@@ -930,7 +964,7 @@
 	public IStrategoTerm getLanguageDescriptor ( IStrategoAppl packageTypedQName) throws IllegalArgumentException, Exception{
 		IStrategoList  packageId = PackageDeclaration.getPackageId(this, packageTypedQName);
 		
-		SpxPackageLookupTable packageTable = persistenceManager().spxPackageTable();
+		SpxPackageLookupTable packageTable = getPersistenceManager().spxPackageTable();
 		packageTable.verifyPackageIDExists(packageId) ;
 		
 		LanguageDescriptor desc = getLangaugeDescriptorByPackageId(packageId);
@@ -948,7 +982,7 @@
 	 */
 	LanguageDescriptor getLangaugeDescriptorByPackageId(IStrategoList packageId) throws SpxSymbolTableException {
 		
-		SpxModuleLookupTable moduleLookupTable = persistenceManager().spxModuleTable();
+		SpxModuleLookupTable moduleLookupTable = getPersistenceManager().spxModuleTable();
 		
 		LanguageDescriptor ret = LanguageDescriptor.newInstance(getTermFactory(), packageId);
 		Iterable<ModuleDeclaration> moduleDeclarations = this.getModuleDeclarations(packageId);
@@ -972,7 +1006,7 @@
 	public void removePackageDeclaration(
 			IStrategoString spxCompilationUnitPath , 
 			IStrategoAppl namespaceID){
-		SpxPackageLookupTable table = _persistenceManager.spxPackageTable();
+		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
 		
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
 		IStrategoList packageId = (IStrategoList)toCompactPositionInfo(PackageDeclaration.getPackageId(this, namespaceID));
@@ -994,7 +1028,7 @@
 	 */
 	public PackageDeclaration lookupPackageDecl(IStrategoList packageId) throws SpxSymbolTableException {
 		
-		SpxPackageLookupTable table = persistenceManager().spxPackageTable();
+		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
 		PackageDeclaration decl = table.getPackageDeclaration(packageId);
 		
 		if (decl == null)
@@ -1008,32 +1042,33 @@
 	 *  
 	 * @throws IOException
 	 */
-	public void persistChanges() throws IOException {
-		_persistenceManager.commit();
-		if (Utils.DEBUG){
-			try {
-				_persistenceManager.spxSymbolTable().printSymbols(this, "commit", this.getProjectPath(), this.indexId());
-			} catch (SpxSymbolTableException e) {
+	public void commit() throws IOException {
+		if (!isPersistenceManagerClosed()) {
+			ISpxPersistenceManager persistenceManager = getPersistenceManager();
+			persistenceManager.commit();
+			if (Utils.DEBUG){
+				try {
+					persistenceManager.spxSymbolTable().printSymbols(this, "commit", this.getProjectPath(), this.indexId());
+				} catch (SpxSymbolTableException e) {
+				}
 			}
 		}
 	}	
 
 	/**
 	 * Closes any underlying open connection. 
-	 * @param shouldCommit TODO
-	 *  
+	 * @param shouldCommit Should commit triggers 
 	 * @throws IOException
 	 */
-	public void close(boolean shouldCommit) throws IOException {
+	public synchronized void close(boolean shouldCommit) throws IOException {
+		ISpxPersistenceManager persistenceManager = getPersistenceManager(); 
 		if (!isPersistenceManagerClosed()) {
 			logMessage("close | closing underlying persistence manager instance.");
 			if(shouldCommit)
-				_persistenceManager.commit();
-			
-			_persistenceManager.spxSymbolTable().setCompileSessionEndedOn();
-			_persistenceManager.close();
-			_persistenceManager = null;
+				commit();
 			
+			this.onCompleteCodeCompilation();
+			persistenceManager.close();
 		}else {
 			logMessage("close | underlying persistence manager is already closed. ");
 		}	
@@ -1044,36 +1079,27 @@
 	 * symbol tables.
 	 * @throws Exception 
 	 */
-	public void reinitSymbolTable() throws Exception {	
+	public void reinitSymbolTable() throws Exception {
 		if (!isPersistenceManagerClosed()){
-			persistenceManager().clear(); // cleaning persistence manager.
-			persistenceManager().commitAndClose();
-			//tryCleanupIndexDirectory();
-			invalidateSpxCacheDirectory(); //cleaning the SpxCache as well.
+			cleanIndex();
+			
+			getPersistenceManager().clear(); // cleaning persistence manager.
+			getPersistenceManager().commitAndClose();
+			
 		}
 		initializePersistenceManager();
 	}
 
-	/**
-	 * Deletes the Spx Cache directory configured in Utils. By this way, the Spx cache will 
-	 * be invalidated and all the symbols will be indexed again. 
-	 */
-	void invalidateSpxCacheDirectory() {
+	private void cleanIndex(){
 		Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_CACHE_DIRECTORY));
-	}
-	
-	private void tryCleanupIndexDirectory(){
-		try{
-			Utils.tryDeleteSpxIndexDir( new File( _projectPath + "/" + Utils.SPX_INDEX_DIRECTORY));
-		}catch(Exception ex){
-			// In case of SecurityException , Do nothing
-		}
-	}
+		Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_SHADOWDIR_DIRECTORY));
+		
+		getPersistenceManager().spxSymbolTable().reinitFlags();
+	} 
 	
 	public void rollbackChanges() throws IOException{	
-		
 		if (! isPersistenceManagerClosed())
-			persistenceManager().rollback();
+			getPersistenceManager().rollback();
 	}
 
 	
@@ -1082,7 +1108,7 @@
 	 * 
 	 * @return true if PersistenceManage is open. Otherwise returns false.
 	 */
-	boolean isPersistenceManagerClosed() { 	return (_persistenceManager == null) || _persistenceManager.isClosed(); }
+	boolean isPersistenceManagerClosed() { 	return getPersistenceManager().isClosed(); }
 
 
 	/**
@@ -1127,7 +1153,7 @@
 	 * 
 	 * @param message
 	 */
-	private void logMessage(String message) { _persistenceManager.logMessage("SpxSemanticIndexFacade", message); }
+	private void logMessage(String message) { getPersistenceManager().logMessage("SpxSemanticIndexFacade", message); }
 	
 	
 	String fromFileURI(URI uri) {
@@ -1166,7 +1192,7 @@
 		return term;
 	}
 
-	public void clearCache() throws IOException{ persistenceManager().clearCache();	}
+	public void clearCache() throws IOException{ getPersistenceManager().clearCache();	}
 
 	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -3,7 +3,9 @@
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.Map;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
@@ -14,9 +16,31 @@
 //project name to the IndexFactory . Current Implementation 
 //will still work in multiproject situation - but will be 
 //using only one SemanticIndexFactory and require initialization. 
-public class SpxSemanticIndexFacadeRegistry
+public final class SpxSemanticIndexFacadeRegistry
 {
-	final HashMap<String, SpxSemanticIndexFacade> _registry = new HashMap<String, SpxSemanticIndexFacade>();
+	public static final SpxSemanticIndexFacadeRegistry instance = new SpxSemanticIndexFacadeRegistry();
+	private final static Map<String, SpxSemanticIndexFacade> _registry;
+	
+	static{
+		_registry = Collections.synchronizedMap(new HashMap<String, SpxSemanticIndexFacade>());
+	}
+	
+	private SpxSemanticIndexFacadeRegistry(){
+	} 
+	
+	protected void finalize() throws Throwable {
+		try {
+			if (_registry != null){
+				for( SpxSemanticIndexFacade r : _registry.values()){
+					r.close(true);
+				}
+			}
+		} catch (Exception e) {
+		}
+		finally {
+			super.finalize();
+		}
+	}
 	
 	/**
 	 * Initializes the SemanticIndexFactory if the registry does not contain any mapping of existing Facade, or it 
@@ -30,27 +54,31 @@
 	{	
 		SpxSemanticIndexFacade fac = null;
 		String projectNameString  =  Utils.toAbsPathString(asJavaString(projectPath));
+		boolean updateMap = true;
 		
 		if ( !containsFacade(projectPath)) {
-			
-			fac = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
-			fac.initializePersistenceManager();
+			fac = SpxSemanticIndexFacade.getInstance(projectPath, termFactory, agent) ;
 		}	
 		else {
 			fac = _registry.get(projectNameString);
-			// Checks to verify whether the persistence manager is closed. 
-			// If it is , creating a new instance of PersistenceManager.
-			if( (fac != null) && fac.isPersistenceManagerClosed()){
-				fac.initializePersistenceManager();
-			}else if ( fac == null){
-				fac = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
-				fac.initializePersistenceManager();
-			}	
+			
+			if( fac == null){
+				fac = SpxSemanticIndexFacade.getInstance(projectPath, termFactory, agent) ;
+			}
+			else
+			{
+				if(fac.isPersistenceManagerClosed())
+					fac.tryReInitializePersistenceManager();
+				else
+					updateMap = false;
+			}
 		}
 		
-		if(fac != null){
+		if(updateMap)
 			_registry.put(fac.getProjectPath(), fac);
-		}	
+		
+		Utils.assertIsNotNull(fac, "Unexpected error . Facade is null for "+ projectNameString );
+		
 		return fac;
 	}
 
@@ -68,11 +96,12 @@
 		SpxSemanticIndexFacade facade =  _registry.get(key);
 		
 		if(facade == null) {
-			throw new SpxSymbolTableException("Symbol Table is not initialized for project : " + projectPath + " . Invoke SPX_index_init. ");
+			throw new IllegalStateException("Symbol Table is not initialized for project : " + projectPath + " . Invoke SPX_index_init. ");
 		}	
-		else if( (facade != null) && facade.isPersistenceManagerClosed()){
-			facade.initializePersistenceManager();
+		else{
+			facade.tryReInitializePersistenceManager();
 		}	
+		
 		return facade;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -29,18 +29,24 @@
 	
 	
 	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
+	public static final String SPX_SHADOWDIR_DIRECTORY = ".shadowdir"; //TODO : get rid off this hardcoding of shadowdir
 	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
 	
 	
 	static boolean DEBUG = false;
 	
+	
+	public static void assertIsNotNull( Object arg , String meesage){
+		if( arg == null)
+			throw new IllegalArgumentException(meesage);
+	}
 	/**
 	 * Constructs {@link IStrategoList} from {@code decls}  
 	 * 
 	 * @param idxFacade an instance of {@link SpxSemanticIndexFacade }
 	 * @param decls A collection of ModuleDeclataions 
 	 * @return {@link IStrategoList}
-	 */
+ 	 */
 	public static <T extends IdentifiableConstruct> IStrategoList toTerm( SpxSemanticIndexFacade idxFacade , Iterable<T> decls){
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		IStrategoList result = termFactory.makeList();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/IdentifiableConstruct.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -65,7 +65,7 @@
 			if((decl != null) && (!SpxSymbol.verifyEquals(this.id, id))){	
 				this.importReferences.add(id);
 				decl.addImportedTo(this.getId());
-				idxFacade.persistenceManager().spxPackageTable().definePackageDeclaration(decl);
+				idxFacade.getPersistenceManager().spxPackageTable().definePackageDeclaration(decl);
 			}
 		}
 		else 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/ModuleDeclaration.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -94,7 +94,7 @@
 		
 		List<INamespace> namespaces = new ArrayList<INamespace>();
 		
-		SpxPrimarySymbolTable  table =  idxFacade.persistenceManager().spxSymbolTable() ;
+		SpxPrimarySymbolTable  table =  idxFacade.getPersistenceManager().spxSymbolTable() ;
 		
 		NamespaceUri namespaceUri = table.toNamespaceUri(id) ;
 		NamespaceUri packageUri = table.toNamespaceUri(enclosingPackageID) ;
@@ -106,7 +106,7 @@
 	
 	public  NamespaceUri getNamespaceUri(SpxSemanticIndexFacade idxFacade)
 	{
-		return idxFacade.persistenceManager().spxSymbolTable().toNamespaceUri(id) ;
+		return idxFacade.getPersistenceManager().spxSymbolTable().toNamespaceUri(id) ;
 	}
 
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -90,7 +90,7 @@
 		
 		//Enclosing Namespace 
 		IStrategoConstructor qnameCons = facade.getCons().getQNameCon();
-		IStrategoAppl nsQNameAppl = this.namespaceUri().resolve(facade.persistenceManager().spxSymbolTable()).toTypedQualifiedName(facade);
+		IStrategoAppl nsQNameAppl = this.namespaceUri().resolve(facade.getPersistenceManager().spxSymbolTable()).toTypedQualifiedName(facade);
 		
 		//ID/Key 
 		IStrategoTerm id = this.Id(termFactory); //TODO : It might require term conversion.

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -60,7 +60,7 @@
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
-		_registry = new SpxSemanticIndexFacadeRegistry();
+		_registry = SpxSemanticIndexFacadeRegistry.instance;
 		
 		projectNameTerm = termFactory().makeString(System.getProperty("user.dir")+ "/"+_projectName);
 	
@@ -68,10 +68,10 @@
 		_facade = _registry.getFacade(projectNameTerm);
 		_facade.reinitSymbolTable();
 		
-		symtable = _facade.persistenceManager().spxPackageTable();
-		mSymTable= _facade.persistenceManager().spxModuleTable();
+		symtable = _facade.getPersistenceManager().spxPackageTable();
+		mSymTable= _facade.getPersistenceManager().spxModuleTable();
 		
-		manager = _facade.persistenceManager();
+		manager = _facade.getPersistenceManager();
 		
 		mSymTable.clear();
 		symtable.clear();
@@ -81,7 +81,7 @@
 		symtable.clear();
 		mSymTable.clear();
 		
-		_facade.persistChanges();
+		_facade.commit();
 	}
 	
 	public void testShouldReturngPackageDeclarationbyUri() throws IOException 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -52,7 +52,7 @@
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
-		_registry = new SpxSemanticIndexFacadeRegistry();
+		_registry = SpxSemanticIndexFacadeRegistry.instance;
 		
 		projectNameTerm = termFactory().makeString(System.getProperty("user.dir")+ "/"+_projectName);
 	
@@ -61,7 +61,7 @@
 		_facade.reinitSymbolTable();
 		
 		
-		symbol_table = _facade.persistenceManager().spxSymbolTable();
+		symbol_table = _facade.getPersistenceManager().spxSymbolTable();
 	}
 
 	@Override 
@@ -111,16 +111,16 @@
 		
 		setupScopeTree();
 		
-		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace(packageDeclaration1.getId());
+		INamespace ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace(packageDeclaration1.getId());
 		assertNotNull(ns);
 		
 		IStrategoString uriTerm = termFactory().makeString(absPathString1) ;
-		_facade.persistenceManager().spxPackageTable().removePackageDeclarationLocation(
+		_facade.getPersistenceManager().spxPackageTable().removePackageDeclarationLocation(
 				packageDeclaration1.getId(), 
 				_facade.toAbsulatePath(uriTerm) 
 			);
 
-		ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace(packageDeclaration1.getId());
+		ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace(packageDeclaration1.getId());
 		assertNull(ns);
 	}
 	
@@ -128,12 +128,12 @@
 		
  		setupScopeTree();
 		
-		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace(moduleDeclarationP1M1.getId());
+		INamespace ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace(moduleDeclarationP1M1.getId());
 		assertNotNull(ns);
 		
-		_facade.persistenceManager().spxModuleTable().remove(moduleDeclarationP1M1.getId());
+		_facade.getPersistenceManager().spxModuleTable().remove(moduleDeclarationP1M1.getId());
 
-		ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace(moduleDeclarationP1M1.getId());
+		ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace(moduleDeclarationP1M1.getId());
 		assertNull(ns);
 	}
 	
@@ -675,7 +675,7 @@
 		
 		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
 		
-		_facade.persistChanges();
+		_facade.commit();
 		_registry.closePersistenceManager(this.projectNameTerm);
 		
 		_registry.initFacade(projectNameTerm, termFactory(), ioAgent());
@@ -719,7 +719,7 @@
 		
 		assertEquals(_facade.getCons().getLocalNamespaceTypeCon(), nsAppl.getConstructor());
 		
-		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		INamespace ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		
 		assertNotNull(ns);
 		
@@ -734,7 +734,7 @@
 		
 		assertEquals(_facade.getCons().getLocalNamespaceTypeCon(), nsAppl.getConstructor());
 		
-		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		INamespace ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		assertNotNull(ns);
 		
 		try{
@@ -745,7 +745,7 @@
 		nsAppl = (IStrategoAppl)_facade.destroyScope(nsAppl);
 		assertNotNull(ns);
 		
-		ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		assertNull(ns);
 	}
 	
@@ -792,7 +792,7 @@
 		//Creating anonymous scope
 		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(moduleQnameAppl1);
 		assertEquals(_facade.getCons().getLocalNamespaceTypeCon(), nsAppl.getConstructor());
-		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		INamespace ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		assertNotNull(ns);
 		
 		//Resolving Symbol from ModuleP1M1. It will not find any symbol defined in localScope. Hence, 
@@ -855,7 +855,7 @@
 		//Creating anonymous scope
 		IStrategoAppl nsAppl = (IStrategoAppl)_facade.insertNewScope(globalNsAppl);
 		assertEquals(_facade.getCons().getLocalNamespaceTypeCon(), nsAppl.getConstructor());
-		INamespace ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		INamespace ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		assertNotNull(ns);
 		
 		_facade.indexSymbol(createEntry(nsAppl , symbolId1 , typeAppl1  , data1));
@@ -878,7 +878,7 @@
 		assertTrue(SpxSymbol.verifyEquals( (IStrategoList)nsAppl.getSubterm(0) , actual.namespaceUri().id()) );
 		
 		_facade.destroyScope(nsAppl);
-		ns = _facade.persistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
+		ns = _facade.getPersistenceManager().spxSymbolTable().resolveNamespace((IStrategoList) nsAppl.getSubterm(0));
 		assertNull(ns);
 	}
 	
@@ -909,7 +909,7 @@
 		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId3 , typeAppl3 , data3));
 		
 		
-		_facade.persistChanges();
+		_facade.commit();
 		
 		// closing persistence manager
 		_registry.closePersistenceManager(this.projectNameTerm);
@@ -919,7 +919,7 @@
 		SpxSemanticIndexFacade tfacade = _registry.getFacade(this.projectNameTerm);
 		
 		Set<SpxSymbol> resolvedSymbols = tfacade
-				.persistenceManager()
+				.getPersistenceManager()
 				.spxSymbolTable()
 				.undefineSymbols(this.moduleDeclarationP1M1.getId(), symbolId1,
 						typeAppl1.getConstructor());
@@ -930,7 +930,7 @@
 			assertTrue(sym.equalType(typeAppl1.getConstructor())); 
 		}
 		
-		List<SpxSymbol> resolvedSymbols1 = tfacade.persistenceManager().spxSymbolTable()
+		List<SpxSymbol> resolvedSymbols1 = tfacade.getPersistenceManager().spxSymbolTable()
 				.resolveNamespace(this.moduleDeclarationP1M1.getId())
 				.getMembers()
 				.get(new SpxSymbolKey(symbolId1));
@@ -970,7 +970,7 @@
 		
 		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
 		
-		_facade.persistChanges();
+		_facade.commit();
 		
 		// closing persistence manager
 		_registry.closePersistenceManager(this.projectNameTerm);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Tue Nov 22 18:17:18 2011	(r23642)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Thu Nov 24 10:03:29 2011	(r23643)
@@ -37,7 +37,7 @@
 	protected void setUp() throws Exception {
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
-		_registry = new SpxSemanticIndexFacadeRegistry();
+		_registry = SpxSemanticIndexFacadeRegistry.instance;
 		
 		projectNameTerm = termFactory().makeString(System.getProperty("user.dir")+ "/"+_projectName);
 	
@@ -79,7 +79,7 @@
 		
 		
 		//Test Namespaces 
-		_facade.persistenceManager().spxSymbolTable().getAllNamespaces();
+		_facade.getPersistenceManager().spxSymbolTable().getAllNamespaces();
 	}
 	
 	public void testGetModuleDeclarationsByPackageId() throws SpxSymbolTableException, IOException

From tobivollebregt at gmail.com  Thu Nov 24 17:00:17 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 24 Nov 2011 16:00:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23644 -
	strategoxt/trunk/stratego-libraries/lib/spec
Message-ID: <20111124160017.1DB4A2B8027@mx2.tudelft.nl>

Author: tvo
Date: Thu Nov 24 16:00:15 2011
New Revision: 23644
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23644&sc=1

Log:
push

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/Makefile.am

Modified: strategoxt/trunk/stratego-libraries/lib/spec/Makefile.am
==============================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/Makefile.am	Thu Nov 24 10:03:29 2011	(r23643)
+++ strategoxt/trunk/stratego-libraries/lib/spec/Makefile.am	Thu Nov 24 16:00:15 2011	(r23644)
@@ -101,3 +101,4 @@
   $(wildcard strategy/general*.str) \
   $(wildcard util/*.str) \
   $(wildcard util/config/*.str)
+

From tobivollebregt at gmail.com  Fri Nov 25 12:07:38 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 25 Nov 2011 11:07:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23645 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego
Message-ID: <20111125110738.25BFC2B8015@mx2.tudelft.nl>

Author: tvo
Date: Fri Nov 25 11:07:36 2011
New Revision: 23645
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23645&sc=1

Log:
push

(to see if Spoofax/462 is now fixed)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	Thu Nov 24 16:00:15 2011	(r23644)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml	Fri Nov 25 11:07:36 2011	(r23645)
@@ -35,7 +35,7 @@
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
     
         <import file="build.generated.xml"/>
-    
+
         <!-- Main target -->
         <target name="all" depends="utils-files,sdf2table,ppgen.helper.fallback,pppack.helper.fallback,java.jar,stratego.jar,sdf2imp"/>
     </project>

From tobivollebregt at gmail.com  Fri Nov 25 15:12:25 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 25 Nov 2011 14:12:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23646 -
	strategoxt-java-backend/trunk
Message-ID: <20111125141225.F1C8ECC0D0@mx4.tudelft.nl>

Author: tvo
Date: Fri Nov 25 14:12:25 2011
New Revision: 23646
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23646&sc=1

Log:
push

(to see if Spoofax/462 is now fixed)

Modified:
   strategoxt-java-backend/trunk/Makefile.am

Modified: strategoxt-java-backend/trunk/Makefile.am
==============================================================================
--- strategoxt-java-backend/trunk/Makefile.am	Fri Nov 25 11:07:36 2011	(r23645)
+++ strategoxt-java-backend/trunk/Makefile.am	Fri Nov 25 14:12:25 2011	(r23646)
@@ -20,3 +20,4 @@
 
 new-libs :
 	$(MAKE) -C java new-libs
+

From M.A.Akhter at student.tudelft.nl  Sat Nov 26 22:55:12 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 26 Nov 2011 21:55:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23647 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. tests
Message-ID: <20111126215512.3AA037F8006@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Nov 26 21:55:10 2011
New Revision: 23647
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23647&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -140,8 +140,7 @@
 			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
 				SpxSemanticIndexFacade idxFacade = idx.getFacadeRegistry().getFacade(projectPath);
 				if(idxFacade!= null){
-					idxFacade.commit();
-					idxFacade.clearCache();
+					idxFacade.commitChanges();
 					idxFacade.close(false);
 				} 	
 			}
@@ -178,7 +177,7 @@
 			public void executeCommnad(SpxSemanticIndex idx, IStrategoTerm projectPath, Object... objects) throws Exception{
 				SpxSemanticIndexFacade idxFacade = idx.getFacadeRegistry().getFacade(projectPath);
 				if(idxFacade!= null){
-					idxFacade.commit();
+					idxFacade.commitChanges();
 				}	
 			}
 		};

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -36,7 +36,6 @@
 	
 	private SpxPrimarySymbolTable _spxSymbolTable;// Symbol Table for storing program symbols 
 
-	private Properties options;
 	/**
 	 * Instantiates a new instance of SpxPersistenceManager. Main Responsibility of this class  
 	 * is to store symbol table in disk and manage it . 
@@ -44,7 +43,19 @@
 	 * @param spxSemanticIndexFacade
 	 * @throws IOException
 	 */
-	public SpxPersistenceManager (SpxSemanticIndexFacade spxSemanticIndexFacade) throws IOException {
+	public SpxPersistenceManager(SpxSemanticIndexFacade spxSemanticIndexFacade) throws IOException{
+		this(spxSemanticIndexFacade, null);
+	}
+	
+	
+	/**
+	 * @param projectName
+	 * @param indexDirectory
+	 * @param ioAgent
+	 * @param options
+	 * @throws IOException
+	 */
+	private SpxPersistenceManager (SpxSemanticIndexFacade spxSemanticIndexFacade,Properties options) throws IOException {
 		assert spxSemanticIndexFacade != null : "SpxSemanticIndexFacade is expected to be nonnull" ;
 
 		this._agent = spxSemanticIndexFacade.getIOAgent();
@@ -60,8 +71,39 @@
 		options.put(RecordManagerOptions.CACHE_TYPE, "soft");
 		options.put(RecordManagerOptions.DISABLE_TRANSACTIONS, "false");
 		
+		tryInitRecordManager(spxSemanticIndexFacade,options);
+		
 		logMessage(SRC + ".ctor" , "Instantiation of PersistenceManager is done. Index Directory : ["+ BaseRecordManager.DEFAULT_RELATIVE_PATH_INDEX  + "] indexid : "+ getIndexId());
 	}
+
+
+	/**
+	 * Tries to initialise record manager
+	 * 
+	 * @param options
+	 * @throws IOException
+	 */
+	private void tryInitRecordManager(SpxSemanticIndexFacade spxSemanticIndexFacade, Properties options) throws IOException {
+		int noOfTries = Utils.NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER;
+		
+		while(true){
+			try {
+				_recordManager = RecordManagerFactory.createRecordManager(_indexId , options);
+				break;
+			}catch(IOException ex) {
+				logMessage(SRC + ".tryInitRecordManager" , "Failed to create recordmanager with arg : " + _indexId +". exception : "+ ex);
+				if(noOfTries == 0){ 
+					logMessage(SRC + ".tryInitRecordManager" , "RecordManager creation is failed. Reason : "+ ex);
+					throw ex;
+				}else{
+					_indexId  = _indexId+ "[" + UUID.randomUUID().toString() +"]";
+					this.clearCache();
+					spxSemanticIndexFacade.invalidateSpxCacheDirectory();
+					noOfTries--;
+				}
+			}
+		}
+	}
 	
 	/**
 	 * Initializes Symbol Tables for {@code projectName} Project
@@ -70,8 +112,6 @@
 	 */
 	public void initializeSymbolTables(String projectName , SpxSemanticIndexFacade facade) throws Exception {
 		
-		tryInitRecordManager(facade,options);
-		
 		_spxUnitsTable   = new SpxCompilationUnitTable(this);
 		_spxPackageTable = new SpxPackageLookupTable(this);
 		_spxModuleTable  = new SpxModuleLookupTable(this);
@@ -87,38 +127,6 @@
 		*/	
 	}
 	
-
-
-	/**
-	 * Tries to initialise record manager
-	 * 
-	 * @param options
-	 * @throws IOException
-	 */
-	private void tryInitRecordManager(SpxSemanticIndexFacade spxSemanticIndexFacade, Properties options) throws IOException {
-		int noOfTries = Utils.NO_OF_ATTEMPT_TO_INIT_RECORDMANAGER;
-		if(isClosed()){
-			while(true){
-				try {
-					_recordManager = RecordManagerFactory.createRecordManager(_indexId , options);
-					break;
-				}catch(IOException ex) {
-					logMessage(SRC + ".tryInitRecordManager" , "Failed to create recordmanager with arg : " + _indexId +". exception : "+ ex);
-					if(noOfTries == 0){ 
-						logMessage(SRC + ".tryInitRecordManager" , "RecordManager creation is failed. Reason : "+ ex);
-						throw ex;
-					}else{
-						_indexId  = _indexId+ "[" + UUID.randomUUID().toString() +"]";
-						this.clearCache();
-						noOfTries--;
-					}
-				}
-			}
-		}
-	}
-	
-	
-	
 	
 	/**
 	 * Initializes RecordListeners i.e. chain record listeners among the tables 
@@ -153,7 +161,10 @@
 	 * @param mapName
 	 * @return
 	 */
-	public <K,V> PrimaryHashMap<K,V> loadHashMap ( String mapName){ return _recordManager.hashMap(mapName) ; }
+	public <K,V> PrimaryHashMap<K,V> loadHashMap ( String mapName){
+		return _recordManager.hashMap(mapName) ;
+		
+	}
 	
 	/**
 	 * Instantiates a new StoreHashMap
@@ -253,4 +264,4 @@
 		if( _recordManager instanceof CacheRecordManager)
 			_recordManager.clearCache();
 	}
-}
\ No newline at end of file
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -35,14 +35,7 @@
 	private final SecondaryHashMap <IStrategoList,NamespaceUri,INamespace> namespaceByStrategoId;
 	private transient INamespace _activeNamespace ;
 	
-
-	private final static String INITIALIZED_ON_KEY = "INITIALIZED_ON";
-	private final static String LAST_CODEGEN_ON_KEY = "LAST_CODEGEN_ON";
-	
-	
 	public ISpxPersistenceManager persistenceManager(){ return _facade.getPersistenceManager(); }
-
-	
 	public SpxPrimarySymbolTable (SpxSemanticIndexFacade facade) throws SecurityException, IOException{
 		assert facade != null  : "SpxSemanticIndexFacade  is expected to non-null" ;
 
@@ -62,34 +55,35 @@
 	}
 	
 	
-	long getCodeCompilationFinishedOn(){ 
+	private final static String INITIALIZED_ON_KEY = "INITIALIZED_ON";
+	private final static String LAST_CODEGEN_ON_KEY = "LAST_CODEGEN_ON";
+	
+	long getIntializedOn(){ 
 		Long initializedOn = timestamps.get(INITIALIZED_ON_KEY);
 		
-		if(initializedOn ==null) 
-			return 0;
+		if(initializedOn ==null) return System.currentTimeMillis();
 		
 		return initializedOn;
 	}
 	
-	void setCompileSessionEndedOn(long timestamp){ 
-		timestamps.put(INITIALIZED_ON_KEY, timestamp);
+	void setCompileSessionEndedOn(){ 
+		timestamps.put(INITIALIZED_ON_KEY, System.currentTimeMillis());
+				
 	}
 	
+	
 	long getLastCodeGeneratedOn(){ 
 		Long lastCodeGenOn = timestamps.get(LAST_CODEGEN_ON_KEY);
+		
 		if(lastCodeGenOn ==null) 
 			return 0;
+		
 		return lastCodeGenOn;
 	}
 	
 	void setLastCodeGeneratedOn(long timestap){ 
 		timestamps.put(LAST_CODEGEN_ON_KEY, timestap);
-	}
-	
-	void reinitFlags(){
-		setLastCodeGeneratedOn(0); 
-		setCompileSessionEndedOn(0);
-		
+				
 	}
 	
 	/**

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndex.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -7,10 +7,9 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 
-import static org.spoofax.interpreter.library.language.spxlang.index.Utils.assertIsNotNull;
 
 /**
- * Semantic Index to store the symbols of Spoofaxlang projects. 
+ * Semantic Index to store the symbols of SPXlang projects. 
  *  
  * @author Md. Adil Akhter
  * Created On : Aug 20, 2011
@@ -26,7 +25,7 @@
 	private final SpxSemanticIndexFacadeRegistry _facadeRegistry;
 		
 	public SpxSemanticIndex(){
-		_facadeRegistry = SpxSemanticIndexFacadeRegistry.instance;
+		_facadeRegistry = new SpxSemanticIndexFacadeRegistry();
 	}
 	
 	public SpxSemanticIndexFacadeRegistry getFacadeRegistry() {
@@ -83,9 +82,6 @@
 	}
 
 	public boolean indexLanguageDescriptor(IStrategoString projectPath,	final IStrategoAppl languageDescriptor) throws Exception {
-		assertIsNotNull(languageDescriptor, "languageDescriptor is Null.");
-		
-		
 		return new SpxIndexer() {
 			public void index(IStrategoString projectPath, IStrategoAppl appl)
 					throws Exception {
@@ -97,9 +93,6 @@
 
 	public boolean indexCompilationUnit(IStrategoString projectPath, IStrategoString spxCompilationUnitPath, IStrategoAppl spxCompilationUnitAST) throws IllegalStateException, Exception{
 
-		assertIsNotNull(spxCompilationUnitPath, "spxCompilationUnitPath is Null.");
-		assertIsNotNull(spxCompilationUnitPath, "spxCompilationUnitAST is Null.");
-		
 		SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 		idxFacade.indexCompilationUnit( spxCompilationUnitPath, spxCompilationUnitAST);
 		return true;
@@ -298,6 +291,7 @@
 	
 	
 	public boolean removeCompilationUnit(IStrategoString projectPath,IStrategoString spxCompilationUnitPath) throws Exception{
+	
 			SpxSemanticIndexFacade idxFacade = getFacade(projectPath);
 			idxFacade.removeCompilationUnit(spxCompilationUnitPath);
 			
@@ -332,4 +326,9 @@
 	}
 
 
+
+	
+
+	
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -41,7 +41,7 @@
 //TODO FIXME : combine symbol table and index
 public class SpxSemanticIndexFacade {
 	
-	ISpxPersistenceManager persistenceManager;
+	private ISpxPersistenceManager _persistenceManager;
 	
 	private final String _projectPath ;
 	private String _indexId;
@@ -78,25 +78,12 @@
 		_spxConstructors = new SpxConstructors(_termFactory);
 	}
 	
-	private void initializePersistenceManager() throws Exception {
-		ISpxPersistenceManager persistenceManager = getPersistenceManager();
-		persistenceManager.initializeSymbolTables(this._projectPath, this);
-		_indexId = persistenceManager.getIndexId();
-	}
-	
-	public synchronized void tryReInitializePersistenceManager() throws Exception{
-		if( isPersistenceManagerClosed()){
-			initializePersistenceManager();
-			onInitCodeCompilation();
-		}
-	}
-	
-	public static SpxSemanticIndexFacade getInstance(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent) throws Exception{
-		SpxSemanticIndexFacade fac  = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
-		fac.persistenceManager = new SpxPersistenceManager(fac); // initializing persistence manager and reusing it throughout the session
-		fac.initializePersistenceManager();
-		fac.cleanIndex();
-		return fac;
+	public synchronized void initializePersistenceManager() throws Exception {
+		_persistenceManager = new SpxPersistenceManager(this);
+		_persistenceManager.initializeSymbolTables(this._projectPath, this);
+		_indexId = _persistenceManager.getIndexId();
+		
+		
 	}
 	
 	protected void finalize() throws Throwable {
@@ -136,29 +123,14 @@
 	 * Returns an instance of the Persistence Manager active for the current Facade
 	 * @return
 	 */
-	public ISpxPersistenceManager getPersistenceManager(){
-		if(persistenceManager == null)
-			throw new IllegalArgumentException("Error : PersistenceManage is null");
-		
-		return persistenceManager; 
-	}
+	public ISpxPersistenceManager getPersistenceManager(){	return _persistenceManager; }
 
 	public void onInitCodeGeneration(){
 		this._currentCodeGenerationStratedOn = System.currentTimeMillis(); 
 	}
 	
 	public void onCompleteCodeGeneration() { 
-		ISpxPersistenceManager mangager= this.getPersistenceManager();
-		mangager.spxSymbolTable().setLastCodeGeneratedOn(this._currentCodeGenerationStratedOn);
-	}
-	
-	private long currentCodeCompilationStartedOn;
-	
-	public void onInitCodeCompilation(){ 	this.currentCodeCompilationStartedOn = System.currentTimeMillis(); }
-	
-	public void onCompleteCodeCompilation(){ 	
-		ISpxPersistenceManager mangager= this.getPersistenceManager();
-		mangager.spxSymbolTable().setCompileSessionEndedOn(currentCodeCompilationStartedOn) ;
+		this.getPersistenceManager().spxSymbolTable().setLastCodeGeneratedOn(this._currentCodeGenerationStratedOn);
 	}
 	
 	/**
@@ -173,7 +145,7 @@
 		
 		logMessage("SpxSemanticIndexFacade.getCompilationUnit . Arguments : " + spxCompilationUnitPath);
 		
-		SpxCompilationUnitTable table = getPersistenceManager().spxCompilcationUnitTable();
+		SpxCompilationUnitTable table = this.getPersistenceManager().spxCompilcationUnitTable();
 		
 		IStrategoAppl term = (IStrategoAppl)table.get(this, resUri);
 		
@@ -188,7 +160,7 @@
 	public SpxCompilationUnitInfo getCompilationUnitInfo(String absUriPath){
 		URI resUri = Utils.getAbsolutePathUri(absUriPath ,_agent);
 		
-		SpxCompilationUnitTable table = getPersistenceManager().spxCompilcationUnitTable();
+		SpxCompilationUnitTable table = this.getPersistenceManager().spxCompilcationUnitTable();
 		return table.getInfo(this, resUri);
 	}
 
@@ -201,7 +173,7 @@
 	public void removeCompilationUnit( IStrategoString spxCompilationUnitPath ) throws IOException{
 		URI resUri = toFileURI(spxCompilationUnitPath);
 		
-		SpxCompilationUnitTable table = getPersistenceManager().spxCompilcationUnitTable();
+		SpxCompilationUnitTable table = this.getPersistenceManager().spxCompilcationUnitTable();
 		
 		table.remove(resUri);
 	}
@@ -214,12 +186,12 @@
 	 * @throws IOException 
 	 */
 	public void indexCompilationUnit( IStrategoString spxCompilationUnitPath, IStrategoAppl spxCompilationUnitAST) throws IOException {
-		
+
 		URI resUri = toFileURI(spxCompilationUnitPath); // Converting IStrategoString to File URI 
 		
 		IStrategoTerm astTerm = toCompactPositionInfo(spxCompilationUnitAST);
 
-		SpxCompilationUnitTable table = getPersistenceManager().spxCompilcationUnitTable();
+		SpxCompilationUnitTable table = this.getPersistenceManager().spxCompilcationUnitTable();
 	
 		logMessage("Storing following compilation unit. Path : ["+  spxCompilationUnitPath +"]");
 		
@@ -261,12 +233,12 @@
 			IStrategoAppl ast, 
 			IStrategoAppl analyzedAst) throws IOException {
 
-		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		SpxModuleLookupTable table = this.getPersistenceManager().spxModuleTable();
 
 		IStrategoList moduleId = ModuleDeclaration.getModuleId( this, moduleQName);
 		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageQName);
 		
-		getPersistenceManager().spxPackageTable().verifyPackageIDExists(packageId) ;
+		this.getPersistenceManager().spxPackageTable().verifyPackageIDExists(packageId) ;
 		
 		moduleId = (IStrategoList) strip(moduleId);
 		packageId = (IStrategoList) strip(packageId);
@@ -309,10 +281,8 @@
 	 */
 	public void indexPackageDeclaration(IStrategoAppl packageIdAppl, IStrategoString spxCompilationUnitPath){
 		
-		ISpxPersistenceManager persistenceManager = getPersistenceManager();
-		
-		SpxPackageLookupTable table = persistenceManager.spxPackageTable();
-		SpxCompilationUnitTable spxTable = persistenceManager.spxCompilcationUnitTable();
+		SpxPackageLookupTable table = this.getPersistenceManager().spxPackageTable();
+		SpxCompilationUnitTable spxTable = this.getPersistenceManager().spxCompilcationUnitTable();
 		
 		IStrategoList packageId = PackageDeclaration.getPackageId(this, packageIdAppl);
 		
@@ -567,7 +537,7 @@
 		verifyConstructor(languageDescriptor.getConstructor(), getCons().getLanguageDescriptorCon(), "Invalid LanguageDescriptor argument : "+ languageDescriptor.toString());
 
 		IStrategoList moduleId = ModuleDeclaration.getModuleId(this, (IStrategoAppl)languageDescriptor.getSubterm(0)) ;
-		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
+		SpxModuleLookupTable table = this.getPersistenceManager().spxModuleTable();
 
 		table.verifyModuleIDExists(moduleId);
 
@@ -767,13 +737,8 @@
 		
 		Iterable<IStrategoList> mdecls = table.getModuleIdsByLangaugeName(langName);
 		
-		//TODO : there is no way that mdecls can be null unless langName is invalid.
-		//Debug more to reproduce why mdecls is found null? 
-		if(mdecls!=null)
-		{
-			for ( IStrategoList mId: mdecls){
-				decls.add(table.getModuleDeclaration(mId).enclosingPackageID);
-			}
+		for ( IStrategoList mId: mdecls){
+			decls.add(table.getModuleDeclaration(mId).enclosingPackageID);
 		}
 		
 		IStrategoList result = getTermFactory().makeList();
@@ -907,7 +872,7 @@
 		long ts = 0;
 	
 		if( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCompileCon()))
-			ts = getPersistenceManager().spxSymbolTable().getCodeCompilationFinishedOn();
+			ts = this.getPersistenceManager().spxSymbolTable().getIntializedOn();
 		else if ( getCons().hasEqualConstructor( qualifiedFor , getCons().getToCodeGenerateCon()))
 			ts = this.getPersistenceManager().spxSymbolTable().getLastCodeGeneratedOn();
 		else
@@ -928,7 +893,7 @@
 	public Iterable<ModuleDeclaration> getModuleDeclarations(IStrategoList pacakgeID) throws SpxSymbolTableException
 	{
 		SpxModuleLookupTable table = getPersistenceManager().spxModuleTable();
-		getPersistenceManager().spxPackageTable().verifyPackageIDExists(pacakgeID) ;
+		this.getPersistenceManager().spxPackageTable().verifyPackageIDExists(pacakgeID) ;
 		
 		return table.getModuleDeclarationsByPackageId(pacakgeID);
 	}
@@ -1006,7 +971,7 @@
 	public void removePackageDeclaration(
 			IStrategoString spxCompilationUnitPath , 
 			IStrategoAppl namespaceID){
-		SpxPackageLookupTable table = getPersistenceManager().spxPackageTable();
+		SpxPackageLookupTable table = this.getPersistenceManager().spxPackageTable();
 		
 		spxCompilationUnitPath  = (IStrategoString)toCompactPositionInfo((IStrategoTerm)spxCompilationUnitPath);
 		IStrategoList packageId = (IStrategoList)toCompactPositionInfo(PackageDeclaration.getPackageId(this, namespaceID));
@@ -1042,33 +1007,38 @@
 	 *  
 	 * @throws IOException
 	 */
-	public void commit() throws IOException {
-		if (!isPersistenceManagerClosed()) {
-			ISpxPersistenceManager persistenceManager = getPersistenceManager();
-			persistenceManager.commit();
-			if (Utils.DEBUG){
-				try {
-					persistenceManager.spxSymbolTable().printSymbols(this, "commit", this.getProjectPath(), this.indexId());
-				} catch (SpxSymbolTableException e) {
-				}
+	public void commitChanges() throws IOException {
+		
+		ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
+		
+		persistenceManager.commit();
+		if (Utils.DEBUG){
+			try {
+				persistenceManager.spxSymbolTable().printSymbols(this, "commit", this.getProjectPath(), this.indexId());
+			} catch (SpxSymbolTableException e) {
 			}
 		}
 	}	
 
 	/**
 	 * Closes any underlying open connection. 
-	 * @param shouldCommit Should commit triggers 
+	 * @param shouldCommit TODO
+	 *  
 	 * @throws IOException
 	 */
-	public synchronized void close(boolean shouldCommit) throws IOException {
-		ISpxPersistenceManager persistenceManager = getPersistenceManager(); 
+	public void close(boolean shouldCommit) throws IOException {
 		if (!isPersistenceManagerClosed()) {
 			logMessage("close | closing underlying persistence manager instance.");
+			ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
 			if(shouldCommit)
-				commit();
+				persistenceManager.commit();
 			
-			this.onCompleteCodeCompilation();
+			persistenceManager.spxSymbolTable().setCompileSessionEndedOn();
 			persistenceManager.close();
+			persistenceManager = null;
+			
+			this.clearCache();
+			
 		}else {
 			logMessage("close | underlying persistence manager is already closed. ");
 		}	
@@ -1079,25 +1049,34 @@
 	 * symbol tables.
 	 * @throws Exception 
 	 */
-	public void reinitSymbolTable() throws Exception {
+	public void reinitSymbolTable() throws Exception {	
 		if (!isPersistenceManagerClosed()){
-			cleanIndex();
-			
 			getPersistenceManager().clear(); // cleaning persistence manager.
 			getPersistenceManager().commitAndClose();
-			
+			//tryCleanupIndexDirectory();
+			invalidateSpxCacheDirectory(); //cleaning the SpxCache as well.
 		}
 		initializePersistenceManager();
 	}
 
-	private void cleanIndex(){
+	/**
+	 * Deletes the Spx Cache directory configured in Utils. By this way, the Spx cache will 
+	 * be invalidated and all the symbols will be indexed again. 
+	 */
+	void invalidateSpxCacheDirectory() {
 		Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_CACHE_DIRECTORY));
-		Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_SHADOWDIR_DIRECTORY));
-		
-		getPersistenceManager().spxSymbolTable().reinitFlags();
-	} 
+	}
+	
+	private void tryCleanupIndexDirectory(){
+		try{
+			Utils.tryDeleteSpxIndexDir( new File( _projectPath + "/" + Utils.SPX_INDEX_DIRECTORY));
+		}catch(Exception ex){
+			// In case of SecurityException , Do nothing
+		}
+	}
 	
 	public void rollbackChanges() throws IOException{	
+		
 		if (! isPersistenceManagerClosed())
 			getPersistenceManager().rollback();
 	}
@@ -1108,7 +1087,7 @@
 	 * 
 	 * @return true if PersistenceManage is open. Otherwise returns false.
 	 */
-	boolean isPersistenceManagerClosed() { 	return getPersistenceManager().isClosed(); }
+	boolean isPersistenceManagerClosed() { 	return (this.getPersistenceManager() == null) || this.getPersistenceManager().isClosed(); }
 
 
 	/**
@@ -1153,7 +1132,7 @@
 	 * 
 	 * @param message
 	 */
-	private void logMessage(String message) { getPersistenceManager().logMessage("SpxSemanticIndexFacade", message); }
+	private void logMessage(String message) { this.getPersistenceManager().logMessage("SpxSemanticIndexFacade", message); }
 	
 	
 	String fromFileURI(URI uri) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -3,9 +3,7 @@
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 
 import java.io.IOException;
-import java.util.Collections;
 import java.util.HashMap;
-import java.util.Map;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
@@ -16,31 +14,9 @@
 //project name to the IndexFactory . Current Implementation 
 //will still work in multiproject situation - but will be 
 //using only one SemanticIndexFactory and require initialization. 
-public final class SpxSemanticIndexFacadeRegistry
+public class SpxSemanticIndexFacadeRegistry
 {
-	public static final SpxSemanticIndexFacadeRegistry instance = new SpxSemanticIndexFacadeRegistry();
-	private final static Map<String, SpxSemanticIndexFacade> _registry;
-	
-	static{
-		_registry = Collections.synchronizedMap(new HashMap<String, SpxSemanticIndexFacade>());
-	}
-	
-	private SpxSemanticIndexFacadeRegistry(){
-	} 
-	
-	protected void finalize() throws Throwable {
-		try {
-			if (_registry != null){
-				for( SpxSemanticIndexFacade r : _registry.values()){
-					r.close(true);
-				}
-			}
-		} catch (Exception e) {
-		}
-		finally {
-			super.finalize();
-		}
-	}
+	final HashMap<String, SpxSemanticIndexFacade> _registry = new HashMap<String, SpxSemanticIndexFacade>();
 	
 	/**
 	 * Initializes the SemanticIndexFactory if the registry does not contain any mapping of existing Facade, or it 
@@ -54,31 +30,27 @@
 	{	
 		SpxSemanticIndexFacade fac = null;
 		String projectNameString  =  Utils.toAbsPathString(asJavaString(projectPath));
-		boolean updateMap = true;
 		
 		if ( !containsFacade(projectPath)) {
-			fac = SpxSemanticIndexFacade.getInstance(projectPath, termFactory, agent) ;
+			
+			fac = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
+			fac.initializePersistenceManager();
 		}	
 		else {
 			fac = _registry.get(projectNameString);
-			
-			if( fac == null){
-				fac = SpxSemanticIndexFacade.getInstance(projectPath, termFactory, agent) ;
-			}
-			else
-			{
-				if(fac.isPersistenceManagerClosed())
-					fac.tryReInitializePersistenceManager();
-				else
-					updateMap = false;
-			}
+			// Checks to verify whether the persistence manager is closed. 
+			// If it is , creating a new instance of PersistenceManager.
+			if( (fac != null) && fac.isPersistenceManagerClosed()){
+				fac.initializePersistenceManager();
+			}else if ( fac == null){
+				fac = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
+				fac.initializePersistenceManager();
+			}	
 		}
 		
-		if(updateMap)
+		if(fac != null){
 			_registry.put(fac.getProjectPath(), fac);
-		
-		Utils.assertIsNotNull(fac, "Unexpected error . Facade is null for "+ projectNameString );
-		
+		}	
 		return fac;
 	}
 
@@ -96,12 +68,11 @@
 		SpxSemanticIndexFacade facade =  _registry.get(key);
 		
 		if(facade == null) {
-			throw new IllegalStateException("Symbol Table is not initialized for project : " + projectPath + " . Invoke SPX_index_init. ");
+			throw new SpxSymbolTableException("Symbol Table is not initialized for project : " + projectPath + " . Invoke SPX_index_init. ");
 		}	
-		else{
-			facade.tryReInitializePersistenceManager();
+		else if( (facade != null) && facade.isPersistenceManagerClosed()){
+			facade.initializePersistenceManager();
 		}	
-		
 		return facade;
 	}
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -29,24 +29,18 @@
 	
 	
 	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
-	public static final String SPX_SHADOWDIR_DIRECTORY = ".shadowdir"; //TODO : get rid off this hardcoding of shadowdir
 	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
 	
 	
 	static boolean DEBUG = false;
 	
-	
-	public static void assertIsNotNull( Object arg , String meesage){
-		if( arg == null)
-			throw new IllegalArgumentException(meesage);
-	}
 	/**
 	 * Constructs {@link IStrategoList} from {@code decls}  
 	 * 
 	 * @param idxFacade an instance of {@link SpxSemanticIndexFacade }
 	 * @param decls A collection of ModuleDeclataions 
 	 * @return {@link IStrategoList}
- 	 */
+	 */
 	public static <T extends IdentifiableConstruct> IStrategoList toTerm( SpxSemanticIndexFacade idxFacade , Iterable<T> decls){
 		ITermFactory termFactory = idxFacade.getTermFactory();
 		IStrategoList result = termFactory.makeList();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -60,7 +60,7 @@
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
-		_registry = SpxSemanticIndexFacadeRegistry.instance;
+		_registry = new SpxSemanticIndexFacadeRegistry();
 		
 		projectNameTerm = termFactory().makeString(System.getProperty("user.dir")+ "/"+_projectName);
 	
@@ -81,7 +81,7 @@
 		symtable.clear();
 		mSymTable.clear();
 		
-		_facade.commit();
+		_facade.commitChanges();
 	}
 	
 	public void testShouldReturngPackageDeclarationbyUri() throws IOException 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -52,7 +52,7 @@
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
 		
-		_registry = SpxSemanticIndexFacadeRegistry.instance;
+		_registry = new SpxSemanticIndexFacadeRegistry();
 		
 		projectNameTerm = termFactory().makeString(System.getProperty("user.dir")+ "/"+_projectName);
 	
@@ -675,7 +675,7 @@
 		
 		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
 		
-		_facade.commit();
+		_facade.commitChanges();
 		_registry.closePersistenceManager(this.projectNameTerm);
 		
 		_registry.initFacade(projectNameTerm, termFactory(), ioAgent());
@@ -909,7 +909,7 @@
 		_facade.indexSymbol(createEntry(moduleQnameAppl1 , symbolId3 , typeAppl3 , data3));
 		
 		
-		_facade.commit();
+		_facade.commitChanges();
 		
 		// closing persistence manager
 		_registry.closePersistenceManager(this.projectNameTerm);
@@ -970,7 +970,7 @@
 		
 		_facade.indexSymbol(createEntry(moduleQnameAppl3 , symbolId3 , typeAppl3 , data3));
 		
-		_facade.commit();
+		_facade.commitChanges();
 		
 		// closing persistence manager
 		_registry.closePersistenceManager(this.projectNameTerm);

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Fri Nov 25 14:12:25 2011	(r23646)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Sat Nov 26 21:55:10 2011	(r23647)
@@ -37,7 +37,7 @@
 	protected void setUp() throws Exception {
 		super.setUp("C:/work/projects/spoofax/spx-imp/source-codes/trunk/org.strategoxt.imp.editors.spoofax/include");
 		interpreter().addOperatorRegistry(new LanguageLibrary());
-		_registry = SpxSemanticIndexFacadeRegistry.instance;
+		_registry = new SpxSemanticIndexFacadeRegistry();
 		
 		projectNameTerm = termFactory().makeString(System.getProperty("user.dir")+ "/"+_projectName);
 	

From M.A.Akhter at student.tudelft.nl  Sun Nov 27 01:32:44 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 27 Nov 2011 00:32:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23648 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index
Message-ID: <20111127003244.55D197F8006@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Nov 27 00:32:43 2011
New Revision: 23648
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23648&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sat Nov 26 21:55:10 2011	(r23647)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Sun Nov 27 00:32:43 2011	(r23648)
@@ -1037,8 +1037,6 @@
 			persistenceManager.close();
 			persistenceManager = null;
 			
-			this.clearCache();
-			
 		}else {
 			logMessage("close | underlying persistence manager is already closed. ");
 		}	

From M.A.Akhter at student.tudelft.nl  Sun Nov 27 02:17:26 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 27 Nov 2011 01:17:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23649 - in
	spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator: lib
	src/sdf2imp/project
Message-ID: <20111127011726.D3734108C004@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Nov 27 01:17:26 2011
New Revision: 23649
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23649&sc=1

Log:
updates in SPXlang Buildfile

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/lib/spoofaxgenerator.jar
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/lib/spoofaxgenerator.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-build-xml.str	Sun Nov 27 00:32:43 2011	(r23648)
+++ spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-build-xml.str	Sun Nov 27 01:17:26 2011	(r23649)
@@ -51,9 +51,19 @@
 		 	<arg value="${basedir}"/>
 	  </java>
   </target>
-	
+  
+  <target name="refresh-src" if="eclipse.running">        
+		<eclipse.convertPath fileSystemPath="${basedir}" 			property="projectdir"/>
+        <eclipse.convertPath fileSystemPath="${basedir}/src"  		property="projectdir.src"/>
+  
+        <eclipse.refreshLocal resource="${projectdir}"     depth="infinite"/>
+        <eclipse.refreshLocal resource="${projectdir.src}" depth="infinite"/>
+  </target>
+
+
   <!-- Main target -->
   <target name="all" depends="buildinit">
+  	<antcall target = "refresh-src"/>
   	<antcall target = "build-spx-packages"/>
   </target>
 </project>]

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str	Sun Nov 27 00:32:43 2011	(r23648)
+++ spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/project/create-spxlang-config-file.str	Sun Nov 27 01:17:26 2011	(r23649)
@@ -36,7 +36,7 @@
 	codegen:
 		// todir refers to the project directory where intermediate generated 
 		// output is stored for further processing. 
-		todir			 		: .shawdowdir
+		todir			 		: .shadowdir
 		
 		// STR outputmode can be configured as follows : jar | ctree.
 		// Based on this value, ctree or jar file generated for the packages

From M.A.Akhter at student.tudelft.nl  Mon Nov 28 12:27:05 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 28 Nov 2011 11:27:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23650 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen utils
Message-ID: <20111128112705.C01BC7F801A@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Nov 28 11:27:04 2011
New Revision: 23650
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23650&sc=1

Log:
fixing issue with get-cached-lib. It seems like it was failing due to changes in code and due to an addition of a with clause.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Sun Nov 27 01:17:26 2011	(r23649)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Mon Nov 28 11:27:04 2011	(r23650)
@@ -178,8 +178,8 @@
 		() -> $[<?xml version="1.0" encoding="UTF-8" ?>
 <project name="build.spx.generated">
   <target name="spx.default" depends="[default-spx-target]"/>
-  <target name="spx.default.ctree" depends="setup-params,check-classpath,init,sdf2table,meta-sdf2table, ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp, refresh"/>
-  <target name="spx.default.jar"   depends="setup-params,check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,java.jar,sdf2imp,refresh"/>
+  <target name="spx.default.ctree" depends="refresh,setup-params,check-classpath,init,sdf2table,meta-sdf2table, ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp, refresh"/>
+  <target name="spx.default.jar"   depends="refresh,setup-params,check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,java.jar,sdf2imp,refresh"/>
 	
   <!-- Initialization -->
   <fail unless="build" message="Please use build.spx.main.xml to build this project or configure the required properties manually"/>
@@ -246,17 +246,23 @@
     <!--lots of redundant steps. TODO : remove the redundant build steps-->
     <target name="refresh" if="eclipse.running">
         <eclipse.convertPath fileSystemPath="${basedir}" 			  property="projectdir"/>
-        <eclipse.convertPath fileSystemPath="${packages.root}"  property="packagesroot.dir"/>
+        
+        <eclipse.convertPath fileSystemPath="${packages.root}"        property="packages.root.dir"/>
+        <eclipse.convertPath fileSystemPath="${package.path}" 	      property="package.root.dir"/>
+        
         <eclipse.convertPath fileSystemPath="${include}" 			  property="includedir"/>
         <eclipse.convertPath fileSystemPath="${src-gen}" 			  property="eclipse.path.src-gen"/>
-        <eclipse.convertPath fileSystemPath="${build}" 				  property="eclipse.path.build"/>	
+        
+        <eclipse.convertPath fileSystemPath="${build}" 				  property="eclipse.path.build"/>	
         <eclipse.convertPath fileSystemPath="${basedir}/.build" property="builddir"/>
         
-        <eclipse.refreshLocal resource="${package.path}" depth="infinite"/>
-        <eclipse.refreshLocal resource="${packages.root}" depth="infinite"/>
+        <eclipse.refreshLocal resource="${package.path}" depth="infinite"/>
+        <eclipse.refreshLocal resource="${packages.root.dir}" depth="infinite"/>
+        <eclipse.refreshLocal resource="${package.root.dir}" depth="infinite"/>
+      
         <eclipse.refreshLocal resource="${builddir}" depth="infinite"/>
-        <eclipse.refreshLocal resource="${packagesroot.dir}" depth="infinite"/>
         <eclipse.refreshLocal resource="${includedir}" depth="infinite"/>
+        
         <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
         <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
     </target>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Sun Nov 27 01:17:26 2011	(r23649)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Mon Nov 28 11:27:04 2011	(r23650)
@@ -324,37 +324,35 @@
 				end
 						
 	compile-legacy-artifact:
-		legacy-artifact-details@(namespace, m at Module(Name(modulename)) , Unresolved()) -> legacy-artifact-details
+		legacy-artifact-details@(namespace, m at Module(Name(modulename)) , Unresolved()) -> <id>
 		where
+			debug(!"Test");
 			dbg-compiler(!$[compile-legacy-artifact:: planning to compile following legacy artifact: [<print-as-string>]])
 		where
 			// check to see if already taken care off.
 			if not( <is-legacy-artifact-resolved>(namespace, modulename, Unresolved())) then 
 				// we are only supporting legacy STR lib at this moment which are not located in the file system .
-	      // Hence, it is unresolved , we are giving it a try to resolve it as a lib and store its symbols 
-	      // in global namespace so that it can be used by all  other packages in the project.
-        // checking whether lib exists in cache. If it is , that means it is there in symbol-table. 
-        // hence, it is not required to read and declare all the symbols again.
+	      		// Hence, it is unresolved , we are giving it a try to resolve it as a lib and store its symbols 
+	      		// in global namespace so that it can be used by all  other packages in the project.
+        		// checking whether lib exists in cache. If it is , that means it is there in symbol-table. 
+        		// hence, it is not required to read and declare all the symbols again.
           
-        //Design Decision : Symbols of legacy str libs are stored in the global namespace. It is decided to increase 
-        // performance of indexing. Since, legacy STR libs do not changes frequently, if we store it in global-cache
-        // it could be reused for a long time.   
-        dbg-compiler(!$[compile-legacy-artifact:: Declaring Legacy ModuleName  [<print-as-string>modulename]]) 
-  			; if not(<lib-exists-in-cache>modulename) then
-	          // checking whether lib exists in global namespace. if it is, then doing nothing. 
-	          // invalidate global cache is possible via clearing whole index or calling invalidate primitive
-	          // hence, if lib changes which is quite unlikely, clearing index will re-read it back  
-	         	if not(<is-lib-exists-in-global-cache>modulename ) then 
-		          	with-spxverify(
-		          			<get-cached-lib-ast(read-stratego-signatures); declare-legacy-str-imports> modulename // storing legacy import declaration
-	 					 			 , !"Failed to import legacy artifact(lib)"
-	 					 		)
-	 					 		; <index-lib-in-global-cache> modulename 
-	 					end
- 					end  
-	    		// Setting flag to denote that lib with modulename is resolved
-					; <record-legacy-global-import-is-resolved>(namespace , modulename)
-					; <add-legacy-artifact-as-resolved> (namespace, modulename,Unresolved())  
-  			 <+
-					dbg-compiler(!$[compile-legacy-artifact::  Error :  failed to resolve])
+	    		//Design Decision : Symbols of legacy str libs are stored in the global namespace. It is decided to increase 
+	    		// performance of indexing. Since, legacy STR libs do not changes frequently, if we store it in global-cache
+	    		// it could be reused for a long time.   
+    			dbg-compiler(!$[compile-legacy-artifact:: Declaring Legacy ModuleName  [<print-as-string>modulename]]) 
+  				; if not(<lib-exists-in-cache>modulename) then
+	          	// checking whether lib exists in global namespace. if it is, then doing nothing. 
+	          	// invalidate global cache is possible via clearing whole index or calling invalidate primitive
+	          	// hence, if lib changes which is quite unlikely, clearing index will re-read it back  
+	         		if not(<is-lib-exists-in-global-cache>modulename ) then 
+	          			<get-cached-lib-ast(read-stratego-signatures); declare-legacy-str-imports>modulename // storing legacy import declaration
+			 			; <index-lib-in-global-cache> modulename 
+					end
+			  	end  
+    			// Setting flag to denote that lib with modulename is resolved
+				; <record-legacy-global-import-is-resolved>(namespace , modulename)
+				; <add-legacy-artifact-as-resolved> (namespace, modulename,Unresolved())  
+		 	<+
+				dbg-compiler(!$[compile-legacy-artifact::  Error :  failed to resolve folloiwng import ast : [<print-as-string>legacy-artifact-details]])
 			end
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Sun Nov 27 01:17:26 2011	(r23649)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Mon Nov 28 11:27:04 2011	(r23650)
@@ -71,17 +71,20 @@
 	get-cached-lib-ast(read-lib) : 
 		name -> ast
 		where 
-			with-spxverify(
-				<spx-lib-cache-path> name => cache-path
-				; if <file-exists> cache-path then
-				 	 	<ReadFromFile> cache-path => ast
-				 		; dbg-compiler(! $[Caching | Found ast [name].] |"get-cached-lib-ast","info")
-					else
-						<read-lib>name => ast
-						; <WriteToBinaryFile> (cache-path, ast) 
-					end
-			, !"Failed to get cached lib-ast"
-			)
+			<spx-lib-cache-path> name => cache-path;
+			if <file-exists> cache-path then
+		 	 	<ReadFromFile> cache-path => ast ;
+		 		dbg-compiler(! $[Caching | Found ast [name].] |"get-cached-lib-ast","info")
+			else
+				<read-lib>name => ast ;
+				<WriteToBinaryFile> (cache-path, ast) ;
+				dbg-compiler(! $[Caching | Not Found in Cache. Caching & processing [name] legacy artifact.] |"get-cached-lib-ast","info") 
+			end
+		<+
+			// Gracefully failing this strategy if it is not found in cache and in the library. 
+			// It is considered as invalid import during error analysis.
+			dbg-compiler(! $[Caching | Failed to get (& read) [name].] |"get-cached-lib-ast",<debug-level-WARNING>) ;
+			fail
 			     
 signature constructors 
 	CachedParseAstDef : Def

From M.A.Akhter at student.tudelft.nl  Mon Nov 28 14:09:35 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Mon, 28 Nov 2011 13:09:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23651 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. data tests
Message-ID: <20111128130935.2D8E5108C022@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Mon Nov 28 13:09:34 2011
New Revision: 23651
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23651&sc=1

Log:
fixed a bug related to Global NS cleanup of SymbolTable

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxIndexManager.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -126,7 +126,7 @@
 				if(idxFacade == null)
 					idxFacade = idx.getFacadeRegistry().initFacade(projectPath, (ITermFactory)objects[0], (IOAgent)objects[1]) ;
 				
-				idxFacade.reinitSymbolTable();
+				idxFacade.cleanIndexAndSymbolTable();
 			}
 		};
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -98,7 +98,7 @@
 				}else{
 					_indexId  = _indexId+ "[" + UUID.randomUUID().toString() +"]";
 					this.clearCache();
-					spxSemanticIndexFacade.invalidateSpxCacheDirectory();
+					spxSemanticIndexFacade.invalidateSpxCacheDirectories();
 					noOfTries--;
 				}
 			}
@@ -196,10 +196,9 @@
 		// checking in the changes before closing the connection 
 		spxSymbolTable().commit();
 		
-		if(!this.isClosed()){ 
+		if(!this.isClosed()) 
 			_recordManager.close();
-		}	
-		// setting all the symboltable to null
+		
 		this._spxModuleTable = null;
 		this._spxPackageTable = null;
 		this._spxUnitsTable = null;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -4,6 +4,7 @@
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -71,7 +72,6 @@
 				
 	}
 	
-	
 	long getLastCodeGeneratedOn(){ 
 		Long lastCodeGenOn = timestamps.get(LAST_CODEGEN_ON_KEY);
 		
@@ -126,8 +126,7 @@
 		return namespaces.get(id); 
 	}
 	
-	public INamespace removeNamespace(IStrategoList id){
-		INamespace nsToRemove  = resolveNamespace(id) ;
+	private INamespace removeNamespace(INamespace nsToRemove){
 		if(nsToRemove != null){
 			// Removing the internal namespace associate with the PackageNamespace
 			if(nsToRemove instanceof PackageNamespace){
@@ -150,6 +149,18 @@
 		return nsToRemove;
 	}
 	
+	private INamespace removeNamespaceByUri(NamespaceUri id){
+		INamespace nsToRemove  = resolveNamespace(id) ;
+		
+		return removeNamespace(nsToRemove);
+	}
+	
+	public INamespace removeNamespaceById(IStrategoList id){
+		INamespace nsToRemove  = resolveNamespace(id) ;
+		
+		return removeNamespace(nsToRemove);
+	}
+	
 	public NamespaceUri getNamespaceUri(IStrategoList id) {
 		Iterable<NamespaceUri> uriIterator = namespaceByStrategoId.get(id);
 		if(uriIterator != null)
@@ -166,7 +177,17 @@
 	public boolean containsNamespace(INamespace namespace) { return this.containsNamespace(namespace.namespaceUri());}
 
 	public void clear(){  
-		namespaces.clear();  
+		Set<NamespaceUri> keys = namespaces.keySet();
+		
+		List<NamespaceUri> namespacesToRemove = new ArrayList<NamespaceUri>();
+		for(NamespaceUri u : keys){ namespacesToRemove.add(u);} 
+			
+		for(NamespaceUri uriToRemove : namespacesToRemove){
+			removeNamespaceByUri(uriToRemove);
+		}	
+		
+		this._activeNamespace =null;
+		timestamps.clear();
 	}
 	
 	public int size() { return namespaces.size();}
@@ -275,7 +296,7 @@
 	public INamespace destroyNamespace(IStrategoList namespaceId) throws SpxSymbolTableException{
 		persistenceManager().logMessage(SRC, "destroyNamespace | Removing the following namespace : "  + namespaceId);
 		
-		INamespace ns = this.removeNamespace(namespaceId);
+		INamespace ns = this.removeNamespaceById(namespaceId);
 		ensureActiveNamespaceUnloaded(namespaceId);
 		persistenceManager().logMessage(SRC, "destroyNamespace | Folloiwng namesapce is removed : "  + ns);
 		
@@ -301,7 +322,7 @@
 			public void recordRemoved(IStrategoList packageID,
 					PackageDeclaration value) throws IOException {
 				
-				removeNamespace(packageID) ;
+				removeNamespaceById(packageID) ;
 			}};
 	}
 
@@ -321,14 +342,14 @@
 
 			public void recordRemoved(IStrategoList moduleId, ModuleDeclaration value)
 					throws IOException {
-				removeNamespace(moduleId) ;
+				removeNamespaceById(moduleId) ;
 				
 			}
 			
 		};
 	}
 
-	public void clearGlobalNamespce(SpxSemanticIndexFacade spxSemanticIndexFacade) {
+	public void cleanGlobalNamespace(SpxSemanticIndexFacade spxSemanticIndexFacade) {
 		persistenceManager().logMessage(SRC, "clearGlobalNamespce | Remove all the entries stored currently in GlobalNamespace" );
 		
 		IStrategoList gnsId = GlobalNamespace.getGlobalNamespaceId(spxSemanticIndexFacade);
@@ -348,7 +369,7 @@
 	 */
 	public void printSymbols(SpxSemanticIndexFacade f, String state , String projectPath , String indexId) throws IOException, SpxSymbolTableException{
 		new File(projectPath + "/.log").mkdirs();
-		FileWriter fstream = new FileWriter(projectPath + "/.log/"+indexId+"_symbols_"+Utils.now("yyyy-MM-dd HH.mm")+".txt" , true);
+		FileWriter fstream = new FileWriter(projectPath + "/.log/"+indexId+"_symbols_"+Utils.now("yyyy-MM-dd HH.mm.ss")+".txt" , true);
 		BufferedWriter out = new BufferedWriter(fstream);
 		out.write("---Logging [" +state+ "] state of Symbol-Table at :" + Utils.now("yyyy-MM-dd HH.mm.ss")+":----\n");
 		try
@@ -376,14 +397,14 @@
 			for(NamespaceUri uri : ns.enclosedNamespaceUris ){
 				logger.write( "\t\t"+uri +"\n");
 			}
-			logger.write("\n");
+			logger.write("---------------------------\n");
 			
 
 			logger.write("\tImported Namespace Uris"+"\n");
 			for(NamespaceUri uri : ns.importedNamespaceUris ){
 				logger.write("\t\t"+uri +"\n");
 			}
-			logger.write("\n");
+			logger.write("---------------------------\n");
 		}
 		
 		if( namespace instanceof ModuleNamespace){
@@ -391,7 +412,7 @@
 		}
 		
 		for( SpxSymbolKey k : members.keySet()) {
-			logger.write("\t\t"+k.toString()  + "  ----> \n");
+			logger.write("\t\t"+k.toString()  + "  ----> \t");
 			for( SpxSymbol s : members.get(k) ){
 				logger.write( s.printSymbol());
 			}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacade.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -450,7 +450,7 @@
 	public void invalidateGlobalNamespace() {
 		SpxPrimarySymbolTable  symbolTable = getPersistenceManager().spxSymbolTable();
 		
-		symbolTable.clearGlobalNamespce(this);
+		symbolTable.cleanGlobalNamespace(this);
 		
 		
 	}
@@ -1008,18 +1008,21 @@
 	 * @throws IOException
 	 */
 	public void commitChanges() throws IOException {
-		
 		ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
-		
 		persistenceManager.commit();
-		if (Utils.DEBUG){
+		printSymbolTable(!Utils.DEBUG, "commit");
+		//printSymbolTable(true, "commit");
+	}	
+
+	private void printSymbolTable(boolean printIfDebug, String stageName) throws IOException {
+		ISpxPersistenceManager persistenceManager = this.getPersistenceManager();
+		if (printIfDebug){
 			try {
-				persistenceManager.spxSymbolTable().printSymbols(this, "commit", this.getProjectPath(), this.indexId());
+				persistenceManager.spxSymbolTable().printSymbols(this, stageName, this.getProjectPath(), this.indexId());
 			} catch (SpxSymbolTableException e) {
 			}
 		}
-	}	
-
+	}
 	/**
 	 * Closes any underlying open connection. 
 	 * @param shouldCommit TODO
@@ -1047,22 +1050,29 @@
 	 * symbol tables.
 	 * @throws Exception 
 	 */
-	public void reinitSymbolTable() throws Exception {	
+	public void cleanIndexAndSymbolTable() throws Exception {
+		ISpxPersistenceManager manager = getPersistenceManager();
 		if (!isPersistenceManagerClosed()){
-			getPersistenceManager().clear(); // cleaning persistence manager.
-			getPersistenceManager().commitAndClose();
-			//tryCleanupIndexDirectory();
-			invalidateSpxCacheDirectory(); //cleaning the SpxCache as well.
+			invalidateSpxCacheDirectories(); //cleaning the SpxCache as well.
+			
+			manager.clearCache();
+			manager.clear(); // cleaning persistence manager.
+			
+			manager.commitAndClose();
 		}
+		
 		initializePersistenceManager();
+		printSymbolTable(!Utils.DEBUG, "clean");
+		
 	}
 
 	/**
 	 * Deletes the Spx Cache directory configured in Utils. By this way, the Spx cache will 
 	 * be invalidated and all the symbols will be indexed again. 
 	 */
-	void invalidateSpxCacheDirectory() {
+	void invalidateSpxCacheDirectories() {
 		Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_CACHE_DIRECTORY));
+		Utils.deleteSpxCacheDir( new File(  _projectPath +"/" + Utils.SPX_SHADOW_DIR));
 	}
 	
 	private void tryCleanupIndexDirectory(){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/Utils.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -30,6 +30,7 @@
 	
 	public static final String SPX_CACHE_DIRECTORY = ".spxcache";
 	public static final String SPX_INDEX_DIRECTORY = ".spxindex";
+	public static final String SPX_SHADOW_DIR = ".shadowdir";
 	
 	
 	static boolean DEBUG = false;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -18,6 +18,7 @@
 import org.spoofax.terms.attachments.TermAttachmentSerializer;
 
 public class SpxSymbol extends SpxBaseSymbol implements Serializable{
+	
 	private static final long serialVersionUID = -5293805213473800423L;
 	
 	private String _data;
@@ -168,7 +169,7 @@
 	}
 	
 	public String printSymbol(){
-		return "\t\tId =  " + this.getId() + "| Type = " + _type + "| Namespace = "+ _namespace+"\n";
+		return "\t\tId =  " + this.getId() + "| Type = " + _type + "| value = "+ this._data +"\n";
 	}
 	
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbolKey.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -12,6 +12,6 @@
 
 	@Override
 	public String toString() {
-		return "SpxIndexKey {_id=" + this.getId() +"}";
+		return "Key = [" + this.getId() +"]";
 	}
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxLookupTableUnitTests.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -66,7 +66,7 @@
 	
 		_registry.initFacade(projectNameTerm, termFactory(), ioAgent()); 
 		_facade = _registry.getFacade(projectNameTerm);
-		_facade.reinitSymbolTable();
+		_facade.cleanIndexAndSymbolTable();
 		
 		symtable = _facade.getPersistenceManager().spxPackageTable();
 		mSymTable= _facade.getPersistenceManager().spxModuleTable();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -58,7 +58,7 @@
 	
 		_registry.initFacade(projectNameTerm, termFactory(), ioAgent()); 
 		_facade = _registry.getFacade(projectNameTerm);
-		_facade.reinitSymbolTable();
+		_facade.cleanIndexAndSymbolTable();
 		
 		
 		symbol_table = _facade.getPersistenceManager().spxSymbolTable();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSemanticIndexFacadeTest.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -43,7 +43,7 @@
 	
 		_registry.initFacade(projectNameTerm, termFactory(), ioAgent()); 
 		_facade = _registry.getFacade(projectNameTerm);
-		_facade.reinitSymbolTable();
+		_facade.cleanIndexAndSymbolTable();
 	
 		indexCompilationUnit();
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java	Mon Nov 28 11:27:04 2011	(r23650)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxSymbolTableEntryTests.java	Mon Nov 28 13:09:34 2011	(r23651)
@@ -37,7 +37,7 @@
 		
 	
 		_facade = new SpxSemanticIndexFacade(projectNameTerm , termFactory() , ioAgent());
-		_facade.reinitSymbolTable();
+		_facade.cleanIndexAndSymbolTable();
 	}
 	
 	public void testSpoofaxSymbolTableEntryBuilder() throws IOException{

From seba at informatik.uni-marburg.de  Mon Nov 28 23:06:42 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 28 Nov 2011 22:06:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23652 -
	sugarj/trunk/update-site
Message-ID: <20111128220642.D56937F8005@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Mon Nov 28 22:06:41 2011
New Revision: 23652
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23652&sc=1

Log:
latest sugarj version

Modified:
   sugarj/trunk/update-site/site.xml

Modified: sugarj/trunk/update-site/site.xml
==============================================================================
--- sugarj/trunk/update-site/site.xml	Mon Nov 28 13:09:34 2011	(r23651)
+++ sugarj/trunk/update-site/site.xml	Mon Nov 28 22:06:41 2011	(r23652)
@@ -3,7 +3,7 @@
    <description name="SugarJ" url="sugarj.org/update">
       SugarJ
    </description>
-   <feature url="features/org.sugarj.editor_1.3.1.201110131555.jar" id="org.sugarj.editor" version="1.3.1.201110131555">
+   <feature url="features/org.sugarj.editor_1.3.1.201111161843.jar" id="org.sugarj.editor" version="1.3.1.201111161843">
       <category name="SugarJ"/>
    </feature>
    <category-def name="SugarJ" label="SugarJ">

From seba at informatik.uni-marburg.de  Mon Nov 28 23:09:45 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 28 Nov 2011 22:09:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23653 - in
	sugarj/trunk: case-studies/oneoone compiler/org/sugarj/util
	update-site
Message-ID: <20111128220945.92B807F8005@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Mon Nov 28 22:09:45 2011
New Revision: 23653
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23653&sc=1

Log:
some older changes

Added:
   sugarj/trunk/case-studies/oneoone/
   sugarj/trunk/case-studies/oneoone/Company.java
   sugarj/trunk/case-studies/oneoone/Department.java
   sugarj/trunk/case-studies/oneoone/Employee.java
   sugarj/trunk/case-studies/oneoone/Example.sugj
   sugarj/trunk/case-studies/oneoone/Manager.java
   sugarj/trunk/case-studies/oneoone/Sugar.sugj
   sugarj/trunk/compiler/org/sugarj/util/LoggingOutputStream.java
   sugarj/trunk/compiler/org/sugarj/util/PrintStreamWriter.java
   sugarj/trunk/update-site/copy-to-server.sh

Added: sugarj/trunk/case-studies/oneoone/Company.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/oneoone/Company.java	Mon Nov 28 22:09:45 2011	(r23653)
@@ -0,0 +1,14 @@
+package oneoone;
+
+import java.util.List;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class Company {
+  public List<Department> departments;
+
+  public Company(List<Department> departments) {
+    this.departments = departments;
+  }
+}

Added: sugarj/trunk/case-studies/oneoone/Department.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/oneoone/Department.java	Mon Nov 28 22:09:45 2011	(r23653)
@@ -0,0 +1,19 @@
+package oneoone;
+
+import java.util.List;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class Department {
+  public Manager manager;
+  public List<Employee> employees;
+  public List<Department> subunits;
+
+  public Department(Manager manager, List<Employee> employees, List<Department> subunits) {
+    this.manager = manager;
+    this.employees = employees;
+    this.subunits = subunits;
+  }
+
+}

Added: sugarj/trunk/case-studies/oneoone/Employee.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/oneoone/Employee.java	Mon Nov 28 22:09:45 2011	(r23653)
@@ -0,0 +1,16 @@
+package oneoone;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class Employee {
+  public String name;
+  public String address;
+  public int salaray;
+
+  public Employee(String name, String address, int salaray) {
+    this.name = name;
+    this.address = address;
+    this.salaray = salaray;
+  }
+}

Added: sugarj/trunk/case-studies/oneoone/Example.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/oneoone/Example.sugj	Mon Nov 28 22:09:45 2011	(r23653)
@@ -0,0 +1,21 @@
+package oneoone;
+
+import oneoone.Sugar;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class Example {
+  public static void main(String[] args) {
+    Company comp = 
+      company meganalysis {
+        department Research {
+          manager Craig {
+            address "Redmond"
+            salary 123456
+          }
+        }
+      };
+  }
+  
+}

Added: sugarj/trunk/case-studies/oneoone/Manager.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/oneoone/Manager.java	Mon Nov 28 22:09:45 2011	(r23653)
@@ -0,0 +1,10 @@
+package oneoone;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class Manager extends Employee {
+  public Manager(String name, String address, int salaray) {
+    super(name, address, salaray);
+  }
+}

Added: sugarj/trunk/case-studies/oneoone/Sugar.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/case-studies/oneoone/Sugar.sugj	Mon Nov 28 22:09:45 2011	(r23653)
@@ -0,0 +1,55 @@
+package oneoone;
+
+import concretesyntax.Java;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public sugar Sugar {
+  context-free syntax
+    "company" JavaId "{" Department* "}" -> Company {cons("Company")}
+    "department" JavaId "{" Manager Employee* Subunit* "}" -> Department {cons("Department")}
+    Department -> Subunit {cons("Subunit")}
+    "employee" Person -> Employee {cons("Employee")}
+    "manager" Person -> Manager {cons("Manager")}
+    JavaId "{" "address" JavaStringLiteral "salary" JavaDeciLiteral "}" -> Person {cons("Person") }
+
+
+  context-free syntax
+    Company -> JavaExpr
+    
+  desugarings
+    des
+
+  rules
+    des-list : (t, l) -> <list-exp> (TypeName(Id(t)), ArrayInit(<map(des)> l)) 
+    list-exp :
+      (t, init) ->
+      |[ java.util.Arrays.asList(new ~t[] ~init)) ]|
+
+
+    des :
+      Company(name, depts) ->
+      |[ new Company(~id:name, java_e) ]|
+     where <des-list> ("Department", depts) => java_e
+    
+    des :
+      Department(name, mgr, empls, subs) ->
+      |[ new Department(~id:name, java_e1, java_e2, java_e3) ]|
+     where <des> mgr => java_e1;
+           <des-list> ("Employee", empls) => java_e2;
+           <des-list> ("Department", subs) => java_e3
+
+    des :
+      Subunit(dept) -> <des> dept
+
+    des :
+      Employee(Person(name, addr, java_i)) ->
+      |[ new Employee(~id:name, java_e, java_i) ]|
+     where <!Lit(<id>)> addr => java_e 
+
+    des :
+      Manager(Person(name, addr, java_i)) ->
+      |[ new Manager(~id:name, java_e, java_i) ]|
+     where <!Lit(<id>)> addr => java_e 
+}
\ No newline at end of file

Added: sugarj/trunk/compiler/org/sugarj/util/LoggingOutputStream.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/org/sugarj/util/LoggingOutputStream.java	Mon Nov 28 22:09:45 2011	(r23653)
@@ -0,0 +1,53 @@
+package org.sugarj.util;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+/*
+ * from: https://svn.strategoxt.org/repos/StrategoXT/spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/LoggingIOAgent.java
+ */
+public class LoggingOutputStream extends OutputStream {
+  ByteArrayOutputStream bytes = new ByteArrayOutputStream();
+  
+  OutputStream stream;
+
+  public LoggingOutputStream(OutputStream stream) {
+    this.stream = stream;
+  }
+  
+  public String getLog() {
+    return bytes.toString();
+  }
+
+  @Override
+  public void write(int b) throws IOException {
+    stream.write(b);
+    bytes.write(b);
+  }
+
+  @Override
+  public void write(byte[] b) throws IOException {
+    stream.write(b);
+    bytes.write(b);
+  }
+
+  @Override
+  public void write(byte[] b, int off, int len) throws IOException {
+    stream.write(b, off, len);
+    bytes.write(b, off, len);
+  }
+
+  @Override
+  public void flush() throws IOException {
+    stream.flush();
+  }
+
+  @Override
+  public void close() throws IOException {
+    // UNDONE: closing console streams is asking for trouble
+    // if (stream != System.out && stream != System.err)
+    // stream.close();
+    stream.flush();
+  }
+}
\ No newline at end of file

Added: sugarj/trunk/compiler/org/sugarj/util/PrintStreamWriter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/compiler/org/sugarj/util/PrintStreamWriter.java	Mon Nov 28 22:09:45 2011	(r23653)
@@ -0,0 +1,46 @@
+package org.sugarj.util;
+
+import java.io.IOException;
+import java.io.PrintStream;
+import java.io.Writer;
+import java.nio.CharBuffer;
+
+/**
+ * from: https://svn.strategoxt.org/repos/StrategoXT/spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
+ * 
+ * A class for writing to a PrintStream.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class PrintStreamWriter extends Writer {
+
+  private final PrintStream stream;
+
+  public PrintStreamWriter(PrintStream stream) {
+    this.stream = stream;
+  }
+
+  @Override
+  public void close() throws IOException {
+    stream.close();
+  }
+
+  @Override
+  public void flush() throws IOException {
+    stream.flush();
+  }
+
+  @Override
+  public void write(char[] cbuf, int off, int len) throws IOException {
+    if (off == 0 && len == cbuf.length)
+      stream.print(cbuf);
+    else
+      stream.append(CharBuffer.wrap(cbuf, off, len));
+  }
+
+  @Override
+  public void write(String str, int off, int len) throws IOException {
+    stream.append(str, off, len);
+  }
+
+}
\ No newline at end of file

Added: sugarj/trunk/update-site/copy-to-server.sh
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/trunk/update-site/copy-to-server.sh	Mon Nov 28 22:09:45 2011	(r23653)
@@ -0,0 +1,12 @@
+#!/bin/sh
+
+DESTDIR=/Volumes/seba\@login/public_html/projects/sugarj/update
+
+cp -Rn features/* $DESTDIR/features
+cp -Rn plugins/* $DESTDIR/plugins
+cp -Rn web/* $DESTDIR/web
+cp -f *.jar $DESTDIR
+cp -f *.html $DESTDIR
+cp -f *.xml $DESTDIR
+
+

From L.C.L.Kats at tudelft.nl  Tue Nov 29 12:49:37 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 29 Nov 2011 11:49:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23654 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/trans
Message-ID: <20111129114937.F0C2F108C012@mx3.tudelft.nl>

Author: LennartKats
Date: Tue Nov 29 11:49:36 2011
New Revision: 23654
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23654&sc=1

Log:
Spoofax/465: Support selection markers for expected (error) messages for tests

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Mon Nov 28 22:09:45 2011	(r23653)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/self-application.spt	Tue Nov 29 11:49:36 2011	(r23654)
@@ -2,11 +2,10 @@
 
 language Spoofax-Testing
 
-setup [[
+setup [[[
 	module x
   language TestingTesting
-     
-]]
+]]]
 
 test Basic [[[
 	test Testing TestingTesting [[
@@ -134,3 +133,30 @@
      complete to "String"
      complete to "Int"
 ]]] 0 warnings
+
+test Test error at location [[[
+  test Test [[
+    module x
+    entity A {
+      a : [[B]]
+    }
+  ]] 1 error
+]]]
+
+test Test error at other location [[[
+  test Test [[
+    module x
+    entity [[A]] {
+      a : B
+    }
+  ]] 1 error
+]]] 2 errors /marker expected at selection/
+
+test Test error at only one location [[[
+  test Test [[
+    module x
+    entity [[A]] {
+      a : [[B]]
+    }
+  ]] 1 error
+]]] /marker expected at selection/

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Mon Nov 28 22:09:45 2011	(r23653)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Nov 29 11:49:36 2011	(r23654)
@@ -76,7 +76,7 @@
   is-composable-semantic-condition =
     ?RegexPattern(_) + ?Refactor(_, _, _) + ?Build(_, _, _) + ?Run(_, _, _)
   + ?Resolve(_) + ?ResolveTo(_, _)
-  + ?Errors(_) + ?Warnings(_) + ?Notes(_) 
+  + ?Errors(_) + ?Warnings(_) + ?Notes(_) + ?Fails() + ?Success()
 
   is-completion-test =
     ?Complete(_) + ?CompleteTo(_, _)
@@ -233,6 +233,19 @@
     Warnings(n) -> $[No error(s) expected: [<grab-errors> messages]]
     where
       !messages => ([_ | _], _, _)
+  
+  check-expectation(|ast, selections, messages) :
+    <?Errors(_) + ?Warnings(_) + ?Notes(_) + ?RegexPattern(_)> -> $[Error/warning/note marker expected at selection(s)]
+    with
+      !messages => (errors, warnings, notes);
+      all-messages := <conc> (errors, warnings, notes)
+    where
+      bad-selections := <filter(not(is-grabbed-message(|all-messages)))> selections;
+      not(!bad-selections => [])
+    with
+      bad-selections' := <map(!(<id>, $[No error/warning/note marker]))> bad-selections;
+      <grab-messages> messages; // show messages in editor
+      rules(GrabbedNotes :+= bad-selections')
 
   check-error :
     Stratego(_) -> (<id>, $[Not implemented: [<write-to-string>]])
@@ -291,6 +304,14 @@
     where
       rules(GrabbedWarnings :+= warnings)
 
+  is-grabbed-message(|grabbed):
+    selection -> selection
+    where
+      <oncetd(origin-equal(|selection))> grabbed
+    <+
+      grabbed-terms := <map(try(Fst))> grabbed; 
+      <one(\g -> <oncetd(origin-equal(|g))> selection\)> grabbed-terms
+
 signature constructors
   
   Fail : String -> Term

From m.dejonge at tudelft.nl  Tue Nov 29 12:52:35 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 29 Nov 2011 11:52:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23655 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111129115235.C2C547F8036@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Nov 29 11:52:35 2011
New Revision: 23655
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23655&sc=1

Log:
block + line commemts

Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str	Tue Nov 29 11:49:36 2011	(r23654)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/occurrences.str	Tue Nov 29 11:52:35 2011	(r23655)
@@ -50,7 +50,7 @@
 		br-close: [<print-stat-line(|total)> br-close]
 		keywords: [<print-stat-line(|total)> keywords]
 		identifiers: [<print-stat-line(|total)> identifiers]
-		block-comments: [<print-stat-line(|total)> block-comments]
+		comments: [<print-stat-line(|total)> block-comments]
 		string-literals: [<print-stat-line(|total)> string-literals]
 		misc-symbols: [<print-stat-line(|total)> misc-symbols]
 		total: [total]
@@ -63,7 +63,7 @@
 		br-close: [<make-set; separate-by(|" "); concat-strings> br-close]
 		keywords: [<make-set; separate-by(|" "); concat-strings> keywords]
 		identifiers: [<make-set; separate-by(|" "); concat-strings> identifiers]
-		block-comments: [<make-set; separate-by(|" "); concat-strings> block-comments]
+		comments: [<make-set; separate-by(|" "); concat-strings> block-comments]
 		string-literals: [<make-set; separate-by(|" "); concat-strings> string-literals]
 		misc-symbols: [<make-set; separate-by(|" "); concat-strings> misc-symbols]
 	]
@@ -93,7 +93,7 @@
 rules
 
 is-block-comment-token =
-	?(_, txt, 7); where(<string-ends-with(|"*/")> txt)
+	?(_, txt, 7); where(<string-ends-with(|"*/") <+ string-starts-with(|"//")> txt)
 
 is-keyword-token =
 	?(_,_,4)

From m.dejonge at tudelft.nl  Tue Nov 29 15:14:50 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 29 Nov 2011 14:14:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23656 -
	sglr-recovery/trunk/SyntaxErrorGen/trans
Message-ID: <20111129141450.176437F8011@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Nov 29 14:14:49 2011
New Revision: 23656
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23656&sc=1

Log:


Added:
   sglr-recovery/trunk/SyntaxErrorGen/trans/generate-clustered-errors.str
Modified:
   sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
   sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Tue Nov 29 11:52:35 2011	(r23655)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/configuration.str	Tue Nov 29 14:14:49 2011	(r23656)
@@ -67,7 +67,7 @@
 	!$[[<project-path>]/testsuites/[lang-name]/errorfiles]
 
 region-oracle-dir(|lang-name) =
-	!$[[<project-path>]/testsuites/[lang-name]/region-oracle-asts]
+	!$[[<project-path>]/testsuites/[lang-name]/oracle-asts]
 
 results-failure-dir(|lang-name) = 
 	!$[[<project-path>]/testsuites/[lang-name]/results/recoveryfailed]

Added: sglr-recovery/trunk/SyntaxErrorGen/trans/generate-clustered-errors.str
==============================================================================

Modified: sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str
==============================================================================
--- sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Tue Nov 29 11:52:35 2011	(r23655)
+++ sglr-recovery/trunk/SyntaxErrorGen/trans/workflow.str	Tue Nov 29 14:14:49 2011	(r23656)
@@ -75,17 +75,22 @@
 		filename := <get-fpath(|error-cat, weight, counter)> term; 
 		modified-text := <get-modified-text> (ast, error-string, <origin-offset; Fst> term, <origin-offset; Snd> term);
 		cursor-loc := <get-cursor-location> (ast, term, error-offset);
-		not(<parse-source-string(|lang)> modified-text) //sanity check: modified text must contain errors
+		not(<parse-source-string(|lang)> modified-text); //sanity check: modified text must contain errors
+		error-file-path := $[[<errorfile-dir(|lang)>]/[filename]_cursor_[cursor-loc].[<get-extension(|lang)>]];
+		<save> (error-file-path, modified-text)
 	with
 		if (recovered-ast, SUCCEEDED()) := <process-testcase-failure-oracle(|lang, filename, cursor-loc)> modified-text then 
 			base-pp-ast := <try(pp(|lang); parse-source-string(|lang))> ast; 
 			err-region := <construct-error-region(|cursor-loc, error-string)> term; 
 			error-region-ast := <construct-error-region-ast(|term, err-region)> base-pp-ast; 
-			eval := <process-testcase-region-oracle(|lang, filename, error-string)> (modified-text, recovered-ast, error-region-ast)
+			eval := <process-testcase-region-oracle(|lang, filename, error-string)> (modified-text, recovered-ast, error-region-ast);
+			oracle-ast-path := $[[<region-oracle-dir(|lang)>]/[filename]_cursor_[cursor-loc].aterm];
+			<save-formatted-aterm> (oracle-ast-path, error-region-ast)
 		else
 			eval := FAILED()
 		end
 		
+		
 process-testcase-failure-oracle(|lang, filename, cursor-loc):
 	modified-text -> (recovered-ast, SUCCEEDED())
 	where
@@ -95,7 +100,7 @@
 	modified-text -> <fail>
 	where
 		(recovered-ast, FAILED()) := <apply-success-failure-oracle(parse-source-string-recover-mode(|lang, cursor-loc))> modified-text;
-		filepath := <get-fpath-result(|lang, FAILED())> (filename, $[error.[<get-extension(|lang)>]]); //TODO: get-extension => str
+		filepath := <get-fpath-result(|lang, FAILED())> (filename, $[error.[<get-extension(|lang)>]]); 
 		<save> (filepath, modified-text)
 
 process-testcase-region-oracle(|lang, filename, err-string):

From L.C.L.Kats at tudelft.nl  Tue Nov 29 15:18:58 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 29 Nov 2011 14:18:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23657 -
	spoofax-imp/trunk
Message-ID: <20111129141858.237067F8020@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Nov 29 14:18:57 2011
New Revision: 23657
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23657&sc=1

Log:
memory bump in case javac is used instead of ecj...

Modified:
   spoofax-imp/trunk/Makefile

Modified: spoofax-imp/trunk/Makefile
==============================================================================
--- spoofax-imp/trunk/Makefile	Tue Nov 29 14:14:49 2011	(r23656)
+++ spoofax-imp/trunk/Makefile	Tue Nov 29 14:18:57 2011	(r23657)
@@ -19,7 +19,7 @@
 	@exit 1
 	
 %.ant : .PHONY
-	cd $* && ANT_OPTS="-Xss8m -Xmx768m" CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar \
+	cd $* && ANT_OPTS="-Xss8m -Xmx1500m" CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:utils/aster.jar \
 	    ant -f build.main.xml -Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib \
 	                          -Declipse.spoofaximp.strategojar=utils/strategoxt.jar
 

From L.C.L.Kats at tudelft.nl  Tue Nov 29 15:21:35 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 29 Nov 2011 14:21:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23658 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice/editor
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/syntax org...
Message-ID: <20111129142135.8A5777F8055@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Nov 29 14:21:35 2011
New Revision: 23658
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23658&sc=1

Log:
added a stupid hack for unicode in literals

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/services/create-completions-descriptor.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Tue Nov 29 14:18:57 2011	(r23657)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Tue Nov 29 14:21:35 2011	(r23658)
@@ -129,3 +129,12 @@
 
   completion template : SemanticRule =
     "on save" ": " <s> (blank)
+
+  completion template : LanguageProperty =
+    "unicode flatten" " : " <true:TrueOrFalse> (blank)
+
+  completion template : TrueOrFalse =
+    "true"
+
+  completion template : TrueOrFalse =
+    "false"
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Tue Nov 29 14:18:57 2011	(r23657)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-completions-descriptor.str	Tue Nov 29 14:21:35 2011	(r23658)
@@ -40,7 +40,7 @@
           completion template Definition :
             "entity " <e> " {" (cursor) "}"  (blank)
           ~~
-          completion template Property : "property" =
+          completion template Property : "property : Type" =
             <x> " : " <T>  (blank)
           ~~
         completions

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	Tue Nov 29 14:18:57 2011	(r23657)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/LanguageDescription.sdf	Tue Nov 29 14:21:35 2011	(r23658)
@@ -47,6 +47,7 @@
     "aliases"         ":" PropertyValues -> LanguageProperty {cons("Aliases")} %% deprecated
     "unmanaged" "table" ":" Id "*"       -> LanguageProperty {cons("UnmanagedTablePrefix")}
     "disambiguator"   ":" StrategoCall   -> LanguageProperty {cons("Disambiguator")}
+    "unicode" "flatten" ":" TrueOrFalse  -> LanguageProperty {cons("FlattenUnicode")}
    
      %% Syntax properties
      
@@ -72,3 +73,5 @@
      "block"      -> PropertyValue {reject}
      "unmanaged"  -> Sort {reject}
      
+     "true"  -> TrueOrFalse {cons("True")}
+     "false" -> TrueOrFalse {cons("False")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Tue Nov 29 14:18:57 2011	(r23657)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Tue Nov 29 14:21:35 2011	(r23658)
@@ -30,6 +30,7 @@
 import org.eclipse.imp.parser.IParseController;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.terms.Term;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
@@ -313,6 +314,11 @@
 		}
 	}
 	
+	public boolean isUnicodeFlattened() {
+		ArrayList<IStrategoAppl> flattened = TermReader.collectTerms(document, "FlattenUnicode");
+		return !flattened.isEmpty() && !"False".equals(Term.tryGetName(flattened.get(0).getSubterm(0)));
+	}
+	
 	public void setDynamicallyLoaded(boolean dynamicallyLoaded) {
 		this.dynamicallyLoaded = dynamicallyLoaded;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Tue Nov 29 14:18:57 2011	(r23657)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Tue Nov 29 14:21:35 2011	(r23658)
@@ -5,6 +5,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.UnsupportedEncodingException;
 import java.util.Iterator;
 import java.util.concurrent.locks.ReentrantLock;
 
@@ -281,6 +282,8 @@
 			processMetaFile();
 			
 			if (monitor.isCanceled()) return null;
+			if (Environment.getDescriptor(language).isUnicodeFlattened())
+				input = flattenUnicode(input);
 			currentTokenizer = new NullTokenizer(input, filename);
 			IStrategoTerm result = doParse(input, filename);
 			currentTokenizer = getTokenizer(result);
@@ -326,6 +329,14 @@
 		return monitor.isCanceled() ? null : currentAst;
 	}
 	
+	private static String flattenUnicode(String s) {
+		try {
+			return new String(s.getBytes("UTF-8"), "ISO-8859-1");
+		} catch (UnsupportedEncodingException e) {
+			throw new RuntimeException(e);
+		} 
+	}
+	
 	public void scheduleParserUpdate(long delay, boolean abortFirst) {
 		if (abortFirst && parseLock.isLocked()) {
 			isAborted = true;

Modified: spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/services/create-completions-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/services/create-completions-descriptor.str	Tue Nov 29 14:18:57 2011	(r23657)
+++ spoofax-imp/trunk/org.strategoxt.imp.spoofax.generator/src/sdf2imp/services/create-completions-descriptor.str	Tue Nov 29 14:21:35 2011	(r23658)
@@ -29,7 +29,7 @@
           completion template Definition :
             "entity " <e> " {" (cursor) "}"  (blank)
           ~~
-          completion template Property : "property" =
+          completion template Property : "property : Type" =
             <x> " : " <T>  (blank)
           ~~
       ]|

From R.B.Vermaas at tudelft.nl  Tue Nov 29 16:39:04 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 29 Nov 2011 15:39:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23659 - hydra/jobs
Message-ID: <20111129153904.EDE6A2B8008@mx2.tudelft.nl>

Author: rob
Date: Tue Nov 29 15:39:04 2011
New Revision: 23659
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23659&sc=1

Log:
add tarball of site to build products

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Nov 29 14:21:35 2011	(r23658)
+++ hydra/jobs/spoofax-imp.nix	Tue Nov 29 15:39:04 2011	(r23659)
@@ -272,7 +272,10 @@
         ensureDir $out/nix-support
         cp -Rv org.strategoxt.imp.updatesite/target/site $out/
         touch $out/site/index.html
+        cd $out
+        tar cvzf $out/${name}.tar.gz site
         echo "file site $out/site" >> $out/nix-support/hydra-build-products
+        echo "file tar $out/$out/${name}.tar.gz" >> $out/nix-support/hydra-build-products
       '';
 
        __noChroot = true;

From R.B.Vermaas at tudelft.nl  Tue Nov 29 17:14:10 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 29 Nov 2011 16:14:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23660 - hydra/jobs
Message-ID: <20111129161410.36DBE2B8041@mx2.tudelft.nl>

Author: rob
Date: Tue Nov 29 16:14:09 2011
New Revision: 23660
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23660&sc=1

Log:
typo

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Nov 29 15:39:04 2011	(r23659)
+++ hydra/jobs/spoofax-imp.nix	Tue Nov 29 16:14:09 2011	(r23660)
@@ -275,7 +275,7 @@
         cd $out
         tar cvzf $out/${name}.tar.gz site
         echo "file site $out/site" >> $out/nix-support/hydra-build-products
-        echo "file tar $out/$out/${name}.tar.gz" >> $out/nix-support/hydra-build-products
+        echo "file tar $out/${name}.tar.gz" >> $out/nix-support/hydra-build-products
       '';
 
        __noChroot = true;

From L.C.L.Kats at tudelft.nl  Tue Nov 29 17:16:10 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 29 Nov 2011 16:16:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23661 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor
Message-ID: <20111129161610.F10D77F8017@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Nov 29 16:16:10 2011
New Revision: 23661
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23661&sc=1

Log:
removed experimental Stratego formatting feature

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Tue Nov 29 16:14:09 2011	(r23660)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Tue Nov 29 16:16:10 2011	(r23661)
@@ -47,8 +47,9 @@
   input
     identifier : "New Name"
   	
-  refactoring: "Pretty-Print (Warning: Looses Comments in Selection!)" = format-refactoring (source) 
-  shortcut: "org.eclipse.jdt.ui.edit.text.java.format"
+  // UNDONE: experimental formatting
+  // refactoring: "Pretty-Print (Warning: Looses Comments in Selection!)" = format-refactoring (source) 
+  // shortcut: "org.eclipse.jdt.ui.edit.text.java.format"
   
   refactoring: "Remove debug" = remove-debug-refactoring
 

From M.A.Akhter at student.tudelft.nl  Wed Nov 30 00:56:04 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 29 Nov 2011 23:56:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23662 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen context context/str editor
Message-ID: <20111129235604.C4FCB2B8022@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov 29 23:56:04 2011
New Revision: 23662
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23662&sc=1

Log:
* fixed issues with internal scope

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Tue Nov 29 16:16:10 2011	(r23661)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Tue Nov 29 23:56:04 2011	(r23662)
@@ -26,18 +26,19 @@
 rules
 	// Starting a new compilation session
 	new-compile-session(s) =
-      {| 	GetSemanticProblems, Declared
-			 		
-			 :  dbg-compiler(!$[-----------------::new-compile-session::-----------------]);
-					with-spxverify(
-				  	compile-init  // initializing compiler session
-				  	; s 
-				    ; compile-unload
-				    , !" new compile session failed unexpectedly. "  
+  		{| 	GetSemanticProblems, Declared:  
+			dbg-compiler(!$[-----------------::new-compile-session::-----------------]);
+			with-spxverify(
+				compile-init  
+		  		; s 
+		    	; compile-unload
+		    	, !" new compile session failed unexpectedly. "  
 	        )  
 	   |}
 
 rules				
+	
+		
 	// Compiler initialization
 	compile-init =
 		index-init;
@@ -56,8 +57,8 @@
 	  
 	//closes any underlying connection 
 	compile-unload = 
-	  //closes and saves current state of symbol table.
-    index-close  
+  		//closes and saves current state of symbol table.
+		index-close
 
 	// Pre-compilation before starting up actual compilation
 	// Before starting primary compilation,
@@ -96,7 +97,7 @@
 						);
 						additional-qnames* := [];
 						<debug(!"----Errors in current AST: ")>issues* 	  // get errors for this file only
-					else
+				else
 						// compiling additional packages 
 						// where current packages are imported to ( forward references) 
 						// Lazy/Incremental compilation is employed.
@@ -109,8 +110,8 @@
 						else
 							additional-qnames* := []	
 						end	
-					end
-				;	<get-analyzed-ast>ast => ast'
+				end
+				; <get-analyzed-ast>ast => ast'
 				; <get-related-files-of-packages><conc>(list-of-package-qname , additional-qnames*)
 				; mark-issues-of-file
 				; generate-code		
@@ -192,16 +193,16 @@
 				; <get-all-usings>package-typed-qname=> depending-typedqname*
 				; dbg-compiler(!$[--Compiling SPX Packages:: List of dependending-on packages/modules : [<print-as-string>depending-typedqname*]  ])
 			  
-			  // Start Compiling the dependent Spx Artifacts
+			  	// Start Compiling the dependent Spx Artifacts
 				; <list-loop(compile-depending-spx)>depending-typedqname*
 				;{| GetEnclosingPackageName 
-				  : <declare-current-package-scope> package-typed-qname
+				  : 	<declare-current-package-scope> package-typed-qname
 						// Now, since all the depending-on artifacts are compiled
 						// start compiling the enclosing modules of this package.
 						// Note: currently we are not considering any nested packages.
 						; modules-to-compile* := <get-enclosed-dirty-modules>package-typed-qname
-						; <declare-spx-global-symbols>modules-to-compile* 
 						; dbg-compiler(!$[--Compiling SPX Packages:: compiling following modules(dirty) : [<print-as-string>modules-to-compile*]])
+						; <declare-spx-global-symbols>modules-to-compile* 
 						; <list-loop(compile-spx-module)>modules-to-compile*
         |}
 		  else
@@ -263,7 +264,7 @@
 		package-tqnames* -> package-tqnames*
 		where
 			<make-set>package-tqnames* => upackages
-			; dbg-compiler(!$[compile-legacy-artifacts:: List: [<print-as-string>upackages]])
+			; dbg-compiler(!$[compile-legacy-artifacts of :: [<print-as-string>upackages]])
 		where
 			//TODO : Make it configurable which lib to include by default. Hence remove following hardcoding.
 	    <compile-legacy-artifact>(Globals() , Module(Name("libstratego-lib")) ,Unresolved())
@@ -309,13 +310,15 @@
 									<is-string>resolving-path
 								;	<has-known-extensions>resolving-path 
 								; {| GetEnclosingModuleName 
-			    				 : 	<declare-current-module-scope> <get_internal_module_qtname> <GetEnclosingPackageName>;
-											// Known Extension found. Handling it.
-											// Parsing the legacy content.
-											// Recoding the declarations for further analysis.
-											dbg-compiler(!$[compile-legacy-artifact:: Compiling following legacy artifacts : [<print-as-string>resolving-path] for package:[<GetEnclosingPackageName;print-as-string>]]);
-											<declare-legacy-artifact(|resolving-path)><parse-legacy-artifact>resolving-path;
-											<add-legacy-artifact-as-resolved> (namespace, modulename,resolving-path)
+								  
+			    				   : 	internal-module-qualified-name := <get_internal_module_qtname> <GetEnclosingPackageName>;
+			    				   		<declare-current-module-scope>internal-module-qualified-name ;
+										// Known Extension found. Handling it.
+										// Parsing the legacy content.
+										// Recoding the declarations for further analysis.
+										dbg-compiler(!$[compile-legacy-artifact:: Compiling following legacy artifacts : [<print-as-string>resolving-path] for package:[<GetEnclosingPackageName;print-as-string>]]);
+										<declare-legacy-artifact(|resolving-path)><parse-legacy-artifact>resolving-path;
+										<add-legacy-artifact-as-resolved> (namespace, modulename,resolving-path)
 				 					|}
 						|} 
 					 	<+
@@ -326,7 +329,6 @@
 	compile-legacy-artifact:
 		legacy-artifact-details@(namespace, m at Module(Name(modulename)) , Unresolved()) -> <id>
 		where
-			debug(!"Test");
 			dbg-compiler(!$[compile-legacy-artifact:: planning to compile following legacy artifact: [<print-as-string>]])
 		where
 			// check to see if already taken care off.

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Tue Nov 29 16:16:10 2011	(r23661)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Tue Nov 29 23:56:04 2011	(r23662)
@@ -42,10 +42,12 @@
 				; generate-spx-artifacts
 		)
 	
+	should-compile-forward-references = id
+	
 	build-spx-incrementally =
 		verify(?(ast, abs-path) |<id> , "?(ast, abs-path) ::build-spx-incrementally" );   
 		compile-packages-of(
-			id, 
+			should-compile-forward-references, 
 			get-used-by, 
 			generate-spx-artifacts
 		) 
@@ -75,9 +77,9 @@
   	dbg-compiler(!$[-----------------::new-code-generate-session::-----------------]);
 		with-spxverify(
 			index-on-init-code-generation;
-  		s;
-  		index-on-complete-code-generation 
-    	, !" new code generated session failed unexpectedly. "  
+  			s;
+  			index-on-complete-code-generation 
+    		, !" new code generated session failed unexpectedly. "  
     )  
 	
 	refresh-file = is-in-command-line-mode  < id + refresh-workspace-file 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Tue Nov 29 16:16:10 2011	(r23661)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Tue Nov 29 23:56:04 2011	(r23662)
@@ -166,16 +166,17 @@
 	build-incrementally-service:
 		(selected, position, ast, path, project-path) -> None()
 		where
-			not(HasErrors);
+			not(HasErrors)
+		where 
 			with-spxverify(
 				editor-init	
 		 		; rules(ProjectPath := project-path)
 		 		; initialize-configuration
-		 		, "Failed to initialized editor "  
-	  	);
+		 		, !"Failed to initialized editor "  
+	  		);
 			with-spxverify(
   			abs-path := <concat-strings>[project-path, "/" ,path]
-				; <store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
+			; <store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
 	  		; <build-spx-incrementally>(ast, abs-path) 
 	   )
   	  

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Tue Nov 29 16:16:10 2011	(r23661)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Tue Nov 29 23:56:04 2011	(r23662)
@@ -27,26 +27,34 @@
     
 rules
   declare-spx-global-symbols =
-  		list-loop(
-				{| GetEnclosingModuleName
-				 : 	declare-current-module-scope
-				 		; with-spxverify(
-								get-desugared-module-ast
-								; declare-internal( declare-spxmodules-all( declare-global-symbols))
-						  )
-				|}	
-		  )
+	dbg-compiler(!$[----Declaring global Symbols for: [<print-as-string>]]);
+	list-loop(
+			{| GetEnclosingModuleName
+			 : 	declare-current-module-scope;
+		 		with-spxverify(
+					get-desugared-module-ast;
+					declare-internal( declare-spxmodules-all( declare-global-symbols))
+			  	)
+			|}	
+	)
+	
+	delcare-spx-scoped-symbols = 
+		dbg-compiler(!$[----Declaring local Symbols for: [<print-as-string>]]);
+		declare-internal(
+			declare-spxmodules-all(
+				declare-local-symbols
+			)
+		)
 	
-	delcare-spx-scoped-symbols = declare-internal( declare-spxmodules-all(declare-local-symbols))
 	
 	declare-internal(declare-symbols) =  
-			origin-track-forced(declare-symbols) => annotated-moduleDef
-		  ; !annotated-moduleDef => Module(attrb* , modname , section*)  // updating module definitions
-		  ; with-spxverify(
-					 <get-annotation(get-package-annotation)>modname => Package( package-qname)
-				  ; mId := <get-module-typed-qname>(package-qname, modname)
-			  	; <index-update-existing-module-definition>(mId  ,  annotated-moduleDef)
-	    )  
+		origin-track-forced(declare-symbols) => annotated-moduleDef
+		; !annotated-moduleDef => Module(attrb* , modname , section*)  // updating module definitions
+		; with-spxverify(
+			 <get-annotation(get-package-annotation)>modname => Package( package-qname)
+			  ; mId := <get-module-typed-qname>(package-qname, modname)
+			  ; <index-update-existing-module-definition>(mId  ,  annotated-moduleDef)
+    	  )  
 	
 rules 
 	declare-spxmodules-all(s):
@@ -131,12 +139,12 @@
       )
 
 	declare-current-module-scope:
-			module-typed-qname -> <id>
-			where
-				with-spxverify(
-			 		rules( GetEnclosingModuleName := module-typed-qname)   
-					, !"Failed to declare-current-module-scope"
-				) 
+		module-typed-qname -> <id>
+		where
+			with-spxverify(
+		 		rules( GetEnclosingModuleName := module-typed-qname)   
+				, !"Failed to declare-current-module-scope"
+			) 
 			
 
 rules

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Tue Nov 29 16:16:10 2011	(r23661)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/str/declare.str	Tue Nov 29 23:56:04 2011	(r23662)
@@ -207,11 +207,9 @@
   // it actually overrides current module scope and activate 
   // internal scope to store internal strategies and rules 
   activate-stratego-internal-scope(s) =
-    with-spxverify(
-    	activate-internal-scope( 
-        declare-rules(s)
-      ) 
-    )
+	activate-internal-scope( 
+    	declare-rules(s)
+  	) 
       
 strategies 
 	
@@ -224,18 +222,12 @@
   declare-str-definition : 
     InternalStrategies(str-defs*) -> InternalStrategies(analyzed-str-defs*)
     where 
-      <activate-stratego-internal-scope(
-          declare-stratego-globals-top
-        )
-      >str-defs*  =>analyzed-str-defs*
+      <activate-stratego-internal-scope(declare-stratego-globals-top)>str-defs*  =>analyzed-str-defs*
 
   declare-str-definition : 
     InternalRules(str-defs*) -> InternalRules(analyzed-str-defs*)
     where 
-      <activate-stratego-internal-scope(
-          declare-stratego-globals-top
-        )
-      >str-defs*  =>analyzed-str-defs*
+      <activate-stratego-internal-scope(declare-stratego-globals-top)>str-defs*  =>analyzed-str-defs*
 
   declare-str-definition : 
     Rules(str-defs*) -> Rules(analyzed-str-defs*)
@@ -360,7 +352,7 @@
        
 
   declare-bodies: 
-    InternalStrategies(str-defs*) -> InternalStrategies(analyzed-str-defs*)
+    InternalStrategies(str-defs*) -> InternalStrategies(analyzed-str-defs*)
     where
 	    <activate-stratego-internal-scope(
           declare-bodies-top
@@ -368,7 +360,7 @@
       >str-defs*  =>analyzed-str-defs*
              
   declare-bodies: 
-    Rules(str-defs*) -> InternalRules(analyzed-str-defs*)
+    Rules(str-defs*) -> Rules(analyzed-str-defs*)
     where 
       <declare-rules(declare-bodies-top)>str-defs*  =>analyzed-str-defs* 
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Tue Nov 29 16:16:10 2011	(r23661)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/editor/main.str	Tue Nov 29 23:56:04 2011	(r23662)
@@ -33,15 +33,16 @@
   
 
 rules
+	
 	editor-analyze: 
- 		(ast, path, project-path) -> (analyzed-ast, errors, warnings, infos) 
-    where
-    	with-spxverify(
-				editor-init
-				; rules(ProjectPath := project-path)
-				; initialize-configuration
-				, !"Failed to initialize. "  
-		  )
+ 		(ast, path, project-path) -> (analyzed-ast, errors, warnings, infos)
+ 		where
+	    	with-spxverify(
+					editor-init
+					; rules(ProjectPath := project-path)
+					; initialize-configuration
+					, !"Failed to initialize. "  
+			  )
 		where
 			abs-path := <concat-strings>[project-path, "/" ,path];
 			dbg-compiler(!$[ ------------------------------------------------

From M.A.Akhter at student.tudelft.nl  Wed Nov 30 00:59:36 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 29 Nov 2011 23:59:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23663 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index:
	. data tests
Message-ID: <20111129235936.EC0117F8004@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Nov 29 23:59:36 2011
New Revision: 23663
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23663&sc=1

Log:
* Fixed issues with internal scope. 
* Changing Registry's map  to static synchronized HashMap. 
* thread-safe _activenamespace in SpxPrimarySymbolTable

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Tue Nov 29 23:56:04 2011	(r23662)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPersistenceManager.java	Tue Nov 29 23:59:36 2011	(r23663)
@@ -180,7 +180,7 @@
 	 * @throws IOException
 	 */
 	public void commit() throws IOException {
-		this.spxSymbolTable().commit();
+		this.spxSymbolTable().commitChanges();
 		if(!this.isClosed()){
 			_recordManager.commit();
 		}	
@@ -194,7 +194,7 @@
 	public void close() throws IOException { 
 		// Since, spxSymbolTable uses internal caching
 		// checking in the changes before closing the connection 
-		spxSymbolTable().commit();
+		spxSymbolTable().commitChanges();
 		
 		if(!this.isClosed()) 
 			_recordManager.close();

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Tue Nov 29 23:56:04 2011	(r23662)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxPrimarySymbolTable.java	Tue Nov 29 23:59:36 2011	(r23663)
@@ -6,7 +6,6 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -30,14 +29,19 @@
 public class SpxPrimarySymbolTable implements INamespaceResolver , IPackageDeclarationRecordListener,IModuleDeclarationRecordListener {
 	private final String SRC = this.getClass().getSimpleName();
 	
+	private transient INamespace _activeNamespace ;
+	
 	private final SpxSemanticIndexFacade _facade;
+	
 	private final PrimaryMap <NamespaceUri,INamespace> namespaces;
 	private final PrimaryMap <String,Long> timestamps;
 	private final SecondaryHashMap <IStrategoList,NamespaceUri,INamespace> namespaceByStrategoId;
-	private transient INamespace _activeNamespace ;
 	
-	public ISpxPersistenceManager persistenceManager(){ return _facade.getPersistenceManager(); }
-	public SpxPrimarySymbolTable (SpxSemanticIndexFacade facade) throws SecurityException, IOException{
+	
+	private final static String INITIALIZED_ON_KEY = "INITIALIZED_ON";
+	private final static String LAST_CODEGEN_ON_KEY = "LAST_CODEGEN_ON";
+	
+	public SpxPrimarySymbolTable(SpxSemanticIndexFacade facade) throws SecurityException, IOException{
 		assert facade != null  : "SpxSemanticIndexFacade  is expected to non-null" ;
 
 		_facade = facade;
@@ -55,35 +59,8 @@
 				});
 	}
 	
-	
-	private final static String INITIALIZED_ON_KEY = "INITIALIZED_ON";
-	private final static String LAST_CODEGEN_ON_KEY = "LAST_CODEGEN_ON";
-	
-	long getIntializedOn(){ 
-		Long initializedOn = timestamps.get(INITIALIZED_ON_KEY);
-		
-		if(initializedOn ==null) return System.currentTimeMillis();
-		
-		return initializedOn;
-	}
-	
-	void setCompileSessionEndedOn(){ 
-		timestamps.put(INITIALIZED_ON_KEY, System.currentTimeMillis());
-				
-	}
-	
-	long getLastCodeGeneratedOn(){ 
-		Long lastCodeGenOn = timestamps.get(LAST_CODEGEN_ON_KEY);
-		
-		if(lastCodeGenOn ==null) 
-			return 0;
-		
-		return lastCodeGenOn;
-	}
-	
-	void setLastCodeGeneratedOn(long timestap){ 
-		timestamps.put(LAST_CODEGEN_ON_KEY, timestap);
-				
+	private ISpxPersistenceManager persistenceManager(){ 
+		return _facade.getPersistenceManager(); 
 	}
 	
 	/**
@@ -111,14 +88,28 @@
 	public INamespace resolveNamespace(IStrategoList id){
 		if(_activeNamespace != null && _activeNamespace.namespaceUri().equalSpoofaxId(id))
 			return _activeNamespace;
-		
-		Iterator<INamespace> resolvedNamespaces = namespaceByStrategoId.getPrimaryValues(id).iterator();
-		if(resolvedNamespaces.hasNext())
-			return resolvedNamespaces.next();
-		else
-			return null;
+
+		boolean alreadyFoundNamespace = false;
+		int foundNamespaces = 0;
+		INamespace toReturn = null;
+
+		Iterable<INamespace> resolvedNamespaces = namespaceByStrategoId.getPrimaryValues(id);
+
+		if(resolvedNamespaces !=null){
+			for( INamespace n : resolvedNamespaces) {
+				if(!alreadyFoundNamespace){
+					alreadyFoundNamespace = true;
+					toReturn = n;
+				}
+				foundNamespaces = foundNamespaces + 1;  
+			}
+			if(foundNamespaces > 1 ){
+				throw new IllegalStateException(String.format("More than one Namespace found with the following spoofax Id : %s", id.toString()));
+			}
+		}
+		return toReturn;
 	}
-	
+
 	public INamespace resolveNamespace(NamespaceUri id) {
 		if(_activeNamespace != null  && _activeNamespace.namespaceUri().equals(id))
 			return _activeNamespace;
@@ -128,10 +119,12 @@
 	
 	private INamespace removeNamespace(INamespace nsToRemove){
 		if(nsToRemove != null){
+			
 			// Removing the internal namespace associate with the PackageNamespace
 			if(nsToRemove instanceof PackageNamespace){
 				NamespaceUri internalNamespaceUri = PackageNamespace.packageInternalNamespace(nsToRemove.namespaceUri(), _facade);
 				INamespace internalNS = this.namespaces.remove(internalNamespaceUri);	
+				
 				if(internalNS  != null)
 					persistenceManager().logMessage(SRC, "removenamespace | removed internal namespace: " + internalNS);
 				else
@@ -186,7 +179,7 @@
 			removeNamespaceByUri(uriToRemove);
 		}	
 		
-		this._activeNamespace =null;
+		this.ensureActiveNamespaceUnloaded(this._activeNamespace);
 		timestamps.clear();
 	}
 	
@@ -201,58 +194,29 @@
 	public Set<NamespaceUri> getAllNamespaces() { return namespaces.keySet() ; }
 
 	public void defineSymbol(IStrategoList namespaceId, SpxSymbolTableEntry symTableEntry) throws SpxSymbolTableException {
-		persistenceManager().logMessage(SRC, "defineSymbol | defining symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symTableEntry.key + " Value : "+ symTableEntry.value);	
-		ensureActiveNamespaceLoaded(namespaceId);
-	
-		_activeNamespace = _activeNamespace.define(symTableEntry, _facade); 
+		INamespace currentNamespace = activateNamespace(namespaceId);
+		
+		persistenceManager().logMessage(SRC, "defineSymbol (Thread Id :"+Thread.currentThread().getId() +")| defining symbols with the following criteria :  namespace " + namespaceId +  " with Key : "+ symTableEntry.key + " Value : "+ symTableEntry.value);
+		currentNamespace.define(symTableEntry, _facade);
 	}
 	
 	public Set<SpxSymbol> undefineSymbols(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType) throws SpxSymbolTableException {
 		persistenceManager().logMessage(SRC, "undefineSymbol | undefineSymbol symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
 			
-	    ensureActiveNamespaceLoaded(namespaceId);
-		Set<SpxSymbol> undefinedSymbols = _activeNamespace.undefineSymbols(
-				symbolId, symbolType, _facade);
+		INamespace currentNamespace =  activateNamespace(namespaceId);
+		Set<SpxSymbol> undefinedSymbols = currentNamespace.undefineSymbols(symbolId, symbolType, _facade);
 	
 		persistenceManager().logMessage(SRC, "undefineSymbol | undefineSymbol Symbols : " + undefinedSymbols );
-			
-	    return undefinedSymbols;
-	}
-	
-	private void ensureActiveNamespaceUnloaded(IStrategoList namespaceId){
-		if(_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
-			_activeNamespace = null;
-		}
+
+		return undefinedSymbols;
 	}
 	
-	public void commit() {
-		if(_activeNamespace != null) {
-			this.namespaces.put(_activeNamespace.namespaceUri(), _activeNamespace);
-		}
-	}
 	
-	private void ensureActiveNamespaceLoaded(IStrategoList namespaceId) throws SpxSymbolTableException{
-		if(_activeNamespace == null ||!_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
-			commit(); 
-			
-			//Keeping a transient reference to the current/active Namespace
-			//More likely that there are other symbols to be defined in the
-			//current and active namespace. In that case, it will imporve 
-			//performance as namespace resolving avoided by means of extra 
-			//caching
-			_activeNamespace = this.resolveNamespace(namespaceId);
-			if(_activeNamespace ==null){
-				throw new SpxSymbolTableException("Unknown namespaceId: "+ namespaceId+". Namespace can not be resolved from symbol-table") ;
-			}
-		}
-		
-	}
-
 	public Collection<SpxSymbol> resolveSymbols(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType, boolean returnDuplicates) throws SpxSymbolTableException {
 		persistenceManager().logMessage(SRC, "resolveSymbols | Resolving symbols with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + " of Type : "+ symbolType.getName());
 		
-		ensureActiveNamespaceLoaded(namespaceId);
-		Collection<SpxSymbol> resolvedSymbols = _activeNamespace.resolveAll(_facade, symbolId ,symbolType, returnDuplicates);
+		INamespace namespace = activateNamespace(namespaceId);
+		Collection<SpxSymbol> resolvedSymbols = namespace.resolveAll(_facade, symbolId ,symbolType, returnDuplicates);
 		
 		persistenceManager().logMessage(SRC, "resolveSymbols | Resolved Symbols : " + resolvedSymbols);
 		return resolvedSymbols;
@@ -262,9 +226,9 @@
 	public SpxSymbol resolveSymbol(IStrategoList namespaceId, IStrategoTerm symbolId, IStrategoConstructor symbolType) throws SpxSymbolTableException {
 		persistenceManager().logMessage(SRC, "resolveSymbol | Resolving symbol with the following criteria :  search origin " + namespaceId +  " with Key : "+ symbolId + "of Type : "+ symbolType.getName());
 		
-		ensureActiveNamespaceLoaded(namespaceId);
+		INamespace namespace =  activateNamespace(namespaceId);
 		
-		SpxSymbol  resolvedSymbol = _activeNamespace.resolve(symbolId, symbolType ,_activeNamespace ,_facade);
+		SpxSymbol  resolvedSymbol = namespace.resolve(symbolId, symbolType ,_activeNamespace ,_facade);
 		
 		persistenceManager().logMessage(SRC, "resolveSymbol | Resolved Symbol : " + resolvedSymbol );
 		
@@ -273,17 +237,17 @@
 	
 	public INamespace newAnonymousNamespace(IStrategoList enclosingNamespaceId) throws SpxSymbolTableException{
 		persistenceManager().logMessage(SRC, "newAnonymousNamespace | Inserting a Anonymous Namespace in following enclosing namespace : "  + enclosingNamespaceId);
-		ensureActiveNamespaceLoaded(enclosingNamespaceId);
 		
-		INamespace localNamespace = LocalNamespace.createInstance(_facade, _activeNamespace); 
+		INamespace currentNamespace = activateNamespace(enclosingNamespaceId);
+		
+		// creating and defining a new local namesapce 
+		INamespace localNamespace = LocalNamespace.createInstance(_facade, currentNamespace); 
 		this.defineNamespace(localNamespace);
-	
-		persistenceManager().logMessage(SRC, "newAnonymousNamespace | Folloiwng namesapce is created : "  + localNamespace);
+		this.commitChanges(); // committing the unsaved chagnes in to save changes regarding its enclosed namespaces 
 		
-		this.commit();
-		_activeNamespace = localNamespace;
+		persistenceManager().logMessage(SRC, "newAnonymousNamespace | Folloiwng namesapce is created : "  + localNamespace);
 		
-		return _activeNamespace ;
+		return localNamespace ;
 	}
 
 	/**
@@ -298,8 +262,8 @@
 		
 		INamespace ns = this.removeNamespaceById(namespaceId);
 		ensureActiveNamespaceUnloaded(namespaceId);
-		persistenceManager().logMessage(SRC, "destroyNamespace | Folloiwng namesapce is removed : "  + ns);
 		
+		persistenceManager().logMessage(SRC, "destroyNamespace | Folloiwng namesapce is removed : "  + ns);
 		
 		return ns;
 	} 
@@ -349,6 +313,11 @@
 		};
 	}
 
+	/**
+	 * Removes all the entries from the Global Namespace
+	 * 
+	 * @param spxSemanticIndexFacade
+	 */
 	public void cleanGlobalNamespace(SpxSemanticIndexFacade spxSemanticIndexFacade) {
 		persistenceManager().logMessage(SRC, "clearGlobalNamespce | Remove all the entries stored currently in GlobalNamespace" );
 		
@@ -361,6 +330,12 @@
 		persistenceManager().logMessage(SRC, "clearGlobalNamespce | Successfully removed all the entries." );
 	}
 	
+	public synchronized void commitChanges() {
+		if(_activeNamespace != null) {
+			this.namespaces.put(_activeNamespace.namespaceUri(), _activeNamespace);
+		}
+	}
+		
 	/**
 	 * Printing all the symbols current hashmap 
 	 * 
@@ -421,4 +396,59 @@
 		logger.write("\n");
 	}
 	
+	private void ensureActiveNamespaceUnloaded(INamespace namespace){
+		if(namespace!=null)
+			this.ensureActiveNamespaceUnloaded(namespace.namespaceUri().id());
+	}
+	
+	private synchronized void ensureActiveNamespaceUnloaded(IStrategoList namespaceId){
+		if( (_activeNamespace !=null) && _activeNamespace.namespaceUri().equalSpoofaxId(namespaceId)){
+			_activeNamespace = null;
+		}
+	}
+	
+	
+	private synchronized INamespace activateNamespace(IStrategoList namespaceId) throws SpxSymbolTableException{
+		if((_activeNamespace == null) ||(!_activeNamespace.namespaceUri().equalSpoofaxId(namespaceId))){
+			// changing active namespace
+			// hence, committing the changes 
+			commitChanges(); 
+			
+			//Keeping a transient reference to the current/active Namespace
+			//More likely that there are other symbols to be defined in the
+			//current and active namespace. In that case, it will improve 
+			//performance as namespace resolving avoided by means of extra 
+			//caching
+			_activeNamespace = this.resolveNamespace(namespaceId);
+			if(_activeNamespace ==null){
+				throw new RuntimeException("Unknown namespaceId: "+ namespaceId+". Namespace can not be resolved from symbol-table") ;
+			}
+		}
+		return _activeNamespace;
+	}
+	
+	long getIntializedOn(){ 
+		Long initializedOn = timestamps.get(INITIALIZED_ON_KEY);
+		
+		if(initializedOn ==null) return System.currentTimeMillis();
+		
+		return initializedOn;
+	}
+	
+	void setCompileSessionEndedOn(){ 
+		timestamps.put(INITIALIZED_ON_KEY, System.currentTimeMillis());
+	}
+	
+	long getLastCodeGeneratedOn(){ 
+		Long lastCodeGenOn = timestamps.get(LAST_CODEGEN_ON_KEY);
+		
+		if(lastCodeGenOn ==null) 
+			return 0;
+		
+		return lastCodeGenOn;
+	}
+	
+	void setLastCodeGeneratedOn(long timestap){ 
+		timestamps.put(LAST_CODEGEN_ON_KEY, timestap);
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Tue Nov 29 23:56:04 2011	(r23662)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/SpxSemanticIndexFacadeRegistry.java	Tue Nov 29 23:59:36 2011	(r23663)
@@ -3,7 +3,10 @@
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 
 import java.io.IOException;
+import java.lang.management.ManagementFactory;
 import java.util.HashMap;
+import java.util.Map;
+import java.util.Collections;
 
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.library.language.spxlang.index.data.SpxSymbolTableException;
@@ -16,7 +19,11 @@
 //using only one SemanticIndexFactory and require initialization. 
 public class SpxSemanticIndexFacadeRegistry
 {
-	final HashMap<String, SpxSemanticIndexFacade> _registry = new HashMap<String, SpxSemanticIndexFacade>();
+	final static Map<String, SpxSemanticIndexFacade> _registry;
+	
+	static {
+		_registry = Collections.synchronizedMap(new HashMap<String, SpxSemanticIndexFacade>());
+	}
 	
 	/**
 	 * Initializes the SemanticIndexFactory if the registry does not contain any mapping of existing Facade, or it 
@@ -26,13 +33,14 @@
 	 * @param termFactory
 	 * @throws Exception 
 	 */
-	public SpxSemanticIndexFacade initFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent) throws Exception
+	public synchronized SpxSemanticIndexFacade initFacade(IStrategoTerm projectPath , ITermFactory termFactory , IOAgent agent) throws Exception
 	{	
 		SpxSemanticIndexFacade fac = null;
 		String projectNameString  =  Utils.toAbsPathString(asJavaString(projectPath));
 		
+		agent.getWriter(IOAgent.CONST_STDOUT).write( "Initializing at " + Thread.currentThread().getId() + " at process : " + ManagementFactory.getRuntimeMXBean().getName()+"\n\n\n");
+		
 		if ( !containsFacade(projectPath)) {
-			
 			fac = new SpxSemanticIndexFacade(projectPath, termFactory, agent);
 			fac.initializePersistenceManager();
 		}	
@@ -76,7 +84,7 @@
 		return facade;
 	}
 
-	public void clearAll() throws IOException{
+	public synchronized void clearAll() throws IOException{
 		for(String fname : _registry.keySet())
 			removeFacade(Utils.toAbsPathString(fname));
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Tue Nov 29 23:56:04 2011	(r23662)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/data/SpxSymbol.java	Tue Nov 29 23:59:36 2011	(r23663)
@@ -165,7 +165,7 @@
 	 */
 	@Override
 	public String toString() {
-		return "SpxSymbol [ Id : " + this.getId() + " Type= " + _type + ", Namespace=" + _namespace + "]";
+		return "SpxSymbol [ Id : " + this.getId() + " Type= " + _type + ", Namespace=" + _namespace + "value = "+ this._data +"]";
 	}
 	
 	public String printSymbol(){

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java	Tue Nov 29 23:56:04 2011	(r23662)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/JdbmApiTests.java	Tue Nov 29 23:59:36 2011	(r23663)
@@ -74,27 +74,7 @@
 	public void setAddresses() ;
 }
 
-class Employee extends PersonBase implements Serializable, IPerson{
 
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = -2742987981816165179L;
-	public Employee(String name, Address adress,String fatherName) {
-		super(name, adress, fatherName);
-	}
-	@Override
-	public void setAddresses() 
-	{
-		addAddress(new Address("First street1"+ctr++, "Athlone","Ireland"));
-	}
-	
-	private void addAddress( Address address){
-		this.getMembers().define("address", address);
-		
-	}
-	
-}
 
 class PersonBase  implements Serializable, IPerson
 {
@@ -136,7 +116,27 @@
 	}
 }
 
+class Employee extends PersonBase implements Serializable, IPerson{
 
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = -2742987981816165179L;
+	public Employee(String name, Address adress,String fatherName) {
+		super(name, adress, fatherName);
+	}
+	@Override
+	public void setAddresses() 
+	{
+		addAddress(new Address("First street1"+ctr++, "Athlone","Ireland"));
+	}
+	
+	private void addAddress( Address address){
+		this.getMembers().define("address", address);
+		
+	}
+	
+}
 class Person extends PersonBase implements Serializable{
 	
 	/**
@@ -210,33 +210,23 @@
 		if(personsByName.size() > 0)
 			personsByName.clear();
 		
-		//create a few persons
-		Person patrick = new Person("Patrick Moore", 
-				new Address("First street", "Athlone","Ireland"),
-				null);
-		patrick.setAddresses(); 
-		personsByName.put(patrick.name, patrick);
-		recman.commit();
-		patrick = new Person("Patrick Moore2", 
-				new Address("First street", "Athlone","Ireland"),
-				null);
-		patrick.setAddresses();
-		recman.commit();
-		
 		Employee emp = new Employee("Patrick EMP", 
 				new Address("First street", "Athlone","NL"),
 				null);
 		emp.setAddresses();
 		emp.setAddresses();
+		
 		personsByName.put(emp.getName(), emp);
 		
 		personsByName.get("Patrick EMP").setAddresses();
 		emp.setAddresses();
 		
-		//personsByName.put(emp.getName(), emp);
+		personsByName.get("Patrick EMP").getMembers().logEntries();
+		
+		personsByName.put(emp.getName(), emp);
 		recman.commit();
 		
-		//personsByName.get("Patrick Moore").getMembers().logEntries();
+		personsByName.get("Patrick EMP").getMembers().logEntries();
 		recman.close();
 		recman = null;
 		

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Nov 29 23:56:04 2011	(r23662)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/spxlang/index/tests/SpxPrimarySymbolTableTest.java	Tue Nov 29 23:59:36 2011	(r23663)
@@ -205,7 +205,7 @@
 		assertEquals( 1 + 2 + 2 + 2 + 1 ,symbol_table.size());
 	}
 	
-	public void testUnknownNamespaceShouldThrowSpxSymbolTableException() throws IOException{
+	public void testUnknownNamespaceShouldThrowRuntimeException() throws RuntimeException, SpxSymbolTableException, IOException{
 			
 		// defining following composite ID :  (Global() , "TestId")
 		IStrategoAppl namespaceAppl = termFactory().makeAppl(_facade.getCons().getGlobalNamespaceTypeCon());
@@ -222,7 +222,7 @@
 						termFactory().makeString("*")
 					));
 			
-		}catch(SpxSymbolTableException ex) { }
+		}catch(RuntimeException ex) { }
 	}
 	
 	public void testDefiningGlobalSymbol() throws IOException, SpxSymbolTableException {

