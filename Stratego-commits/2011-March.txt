From R.B.Vermaas at tudelft.nl  Tue Mar  1 10:39:06 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 09:39:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22233 - hydra/jobs
Message-ID: <20110301093906.AC21B2B801B@mx2.tudelft.nl>

Author: rob
Date: Tue Mar  1 09:39:06 2011
New Revision: 22233
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22233&sc=1

Log:
add debug projects

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Mon Feb 28 16:06:12 2011	(r22232)
+++ hydra/jobs/spoofax-imp.nix	Tue Mar  1 09:39:06 2011	(r22233)
@@ -96,7 +96,13 @@
 	                 ${spoofaxImp}/org.strategoxt.imp.metatooling \
 	                 ${spoofaxImp}/org.strategoxt.imp.nativebundle \
 	                 ${spoofaxImp}/org.strategoxt.imp.runtime \
-	                 ${spoofaxImp}/org.strategoxt.imp.updatesite 
+	                 ${spoofaxImp}/org.strategoxt.imp.updatesite \
+                         ${spoofaxImp}/org.strategoxt.imp.debug.core \
+                         ${spoofaxImp}/org.strategoxt.imp.debug.stratego.core \
+                         ${spoofaxImp}/org.strategoxt.imp.debug.stratego.runtime \
+                         ${spoofaxImp}/org.strategoxt.imp.debug.stratego.test \
+                         ${spoofaxImp}/org.strategoxt.imp.debug.stratego.transformer \
+                         ${spoofaxImp}/org.strategoxt.imp.debug.ui
 	        do
 	            header "Copying $d"
 	                cp -R $d .


From R.B.Vermaas at tudelft.nl  Tue Mar  1 10:50:01 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 09:50:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22234 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF
Message-ID: <20110301095001.E7BA42B8030@mx2.tudelft.nl>

Author: rob
Date: Tue Mar  1 09:50:01 2011
New Revision: 22234
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22234&sc=1

Log:
remove specific version require

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF	Tue Mar  1 09:39:06 2011	(r22233)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF	Tue Mar  1 09:50:01 2011	(r22234)
@@ -3,7 +3,7 @@
 Bundle-Name: org.strategoxt.imp.debug.stratego.test
 Bundle-SymbolicName: org.strategoxt.imp.debug.stratego.test
 Bundle-Version: 1.0.0.qualifier
-Require-Bundle: org.strategoxt.imp.debug.stratego.core;bundle-version="1.1.0",
+Require-Bundle: org.strategoxt.imp.debug.stratego.core,
  org.junit4;bundle-version="4.5.0",
  org.strategoxt.strj,
  org.eclipse.core.runtime


From R.B.Vermaas at tudelft.nl  Tue Mar  1 11:11:00 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 10:11:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22235 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF
Message-ID: <20110301101100.842F7CC302@mx4.tudelft.nl>

Author: rob
Date: Tue Mar  1 10:11:00 2011
New Revision: 22235
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22235&sc=1

Log:
add org.strategoxt.imp.debug.stratego.runtime to deps of org.strategoxt.imp.debug.stratego.core

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Tue Mar  1 09:50:01 2011	(r22234)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Tue Mar  1 10:11:00 2011	(r22235)
@@ -43,6 +43,7 @@
 Require-Bundle: org.eclipse.jdt.debug,
  org.eclipse.jdt.core;bundle-version="3.5.2",
  org.eclipse.core.runtime,
- org.strategoxt.strj
+ org.strategoxt.strj,
+ org.strategoxt.imp.debug.stratego.runtime
 Bundle-Activator: org.strategoxt.debug.core.Activator
 Bundle-ActivationPolicy: lazy


From R.B.Vermaas at tudelft.nl  Tue Mar  1 11:19:47 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 10:19:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22236 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF
Message-ID: <20110301101947.496332B8006@mx2.tudelft.nl>

Author: rob
Date: Tue Mar  1 10:19:46 2011
New Revision: 22236
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22236&sc=1

Log:
used wrong name

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Tue Mar  1 10:11:00 2011	(r22235)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Tue Mar  1 10:19:46 2011	(r22236)
@@ -44,6 +44,6 @@
  org.eclipse.jdt.core;bundle-version="3.5.2",
  org.eclipse.core.runtime,
  org.strategoxt.strj,
- org.strategoxt.imp.debug.stratego.runtime
+ strjdbgruntimelib
 Bundle-Activator: org.strategoxt.debug.core.Activator
 Bundle-ActivationPolicy: lazy


From R.B.Vermaas at tudelft.nl  Tue Mar  1 11:38:52 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 10:38:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22237 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.stratego.core/META-INF
	org.strategoxt.imp.debug.stratego.runtime/META-INF
Message-ID: <20110301103852.C79CC2B8010@mx2.tudelft.nl>

Author: rob
Date: Tue Mar  1 10:38:52 2011
New Revision: 22237
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22237&sc=1

Log:
add transformer to deps of debug.stratego.core, export package *.strategies for org.strategoxt.imp.debug.stratego.runtime

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Tue Mar  1 10:19:46 2011	(r22236)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Tue Mar  1 10:38:52 2011	(r22237)
@@ -44,6 +44,7 @@
  org.eclipse.jdt.core;bundle-version="3.5.2",
  org.eclipse.core.runtime,
  org.strategoxt.strj,
- strjdbgruntimelib
+ strjdbgruntimelib,
+ strj_dbg_transformer
 Bundle-Activator: org.strategoxt.debug.core.Activator
 Bundle-ActivationPolicy: lazy

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Tue Mar  1 10:19:46 2011	(r22236)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Tue Mar  1 10:38:52 2011	(r22237)
@@ -18,4 +18,5 @@
   org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: org.strategoxt.imp.debug.stratego.runtime
+Export-Package: org.strategoxt.imp.debug.stratego.runtime,
+  org.strategoxt.imp.debug.stratego.runtime.strategies


From R.B.Vermaas at tudelft.nl  Tue Mar  1 11:54:17 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 10:54:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22238 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF
Message-ID: <20110301105417.43D51108C02C@mx3.tudelft.nl>

Author: rob
Date: Tue Mar  1 10:54:16 2011
New Revision: 22238
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22238&sc=1

Log:
export package

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Tue Mar  1 10:38:52 2011	(r22237)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Tue Mar  1 10:54:16 2011	(r22238)
@@ -18,4 +18,4 @@
  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: test
+Export-Package: org.strategoxt.imp.debug.stratego.transformer.strategies


From R.B.Vermaas at tudelft.nl  Tue Mar  1 12:52:58 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 11:52:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22239 - hydra/jobs
Message-ID: <20110301115258.CA8217F80D5@mx1.tudelft.nl>

Author: rob
Date: Tue Mar  1 11:52:58 2011
New Revision: 22239
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22239&sc=1

Log:
prebuilt debug projects

Modified:
   hydra/jobs/org.spoofax.jsglr.nix
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/org.spoofax.jsglr.nix
==============================================================================
--- hydra/jobs/org.spoofax.jsglr.nix	Tue Mar  1 10:54:16 2011	(r22238)
+++ hydra/jobs/org.spoofax.jsglr.nix	Tue Mar  1 11:52:58 2011	(r22239)
@@ -1,6 +1,6 @@
 { nixpkgs ? ../../nixpkgs
 , spoofaxJsglr ? { outPath = ../../org.spoofax.jsglr ; rev = 1234; }
-, spoofaxATerm ? (import ./org.spoofax.aterm.nix { }).build
+, spoofaxTerms ? (import ./org.spoofax.terms { }).build
 }:
 let 
   pkgs = import nixpkgs { system = "i686-linux"; };
@@ -27,7 +27,7 @@
 
     antTargets = ["compile" "jar" "check"];
 
-    antBuildInputs = [spoofaxATerm jars.junit jars.antjunit];
+    antBuildInputs = [spoofaxTerms jars.junit jars.antjunit];
 
     buildfile = "build.ant.xml";
     buildInputs = [pkgs.ant];
@@ -37,7 +37,7 @@
     '';
 
     jarWrappers = [
-      { name = "jsglr"; classPath = "${spoofaxATerm}/lib/java/*"; mainClass = "org.spoofax.jsglr.Main"; }
+      { name = "jsglr"; classPath = "${spoofaxTerms}/lib/java/*"; mainClass = "org.spoofax.jsglr.Main"; }
     ];
   };
 

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Mar  1 10:54:16 2011	(r22238)
+++ hydra/jobs/spoofax-imp.nix	Tue Mar  1 11:52:58 2011	(r22239)
@@ -160,7 +160,7 @@
 
             mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e || true
 
-            for e in *.editors.* # TODO: org.strategoxt.imp.testing
+            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer  # TODO: org.strategoxt.imp.testing
             do
                 mkdir -p $e/utils/
                 cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/


From R.B.Vermaas at tudelft.nl  Tue Mar  1 13:13:43 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 12:13:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22240 - hydra/jobs
Message-ID: <20110301121343.7A8532B8030@mx2.tudelft.nl>

Author: rob
Date: Tue Mar  1 12:13:42 2011
New Revision: 22240
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22240&sc=1

Log:
hack for eclipse.home, ignore for now

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Mar  1 11:52:58 2011	(r22239)
+++ hydra/jobs/spoofax-imp.nix	Tue Mar  1 12:13:42 2011	(r22240)
@@ -148,6 +148,11 @@
             export STRATEGOXT=${pkgs.strategoPackages.strategoxt}
             export JAVA_FRONT=${pkgs.strategoPackages.javafront}
             export SDF=${pkgs.strategoPackages.sdf}
+
+            #hack
+            mkdir -p plugins
+            export eclipsefakehome=`pwd`/plugins
+            
             ulimit -s unlimited
 
             mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=1.0.0-SNAPSHOT -DgroupId=spoofax -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
@@ -170,7 +175,7 @@
                 export LOCALCLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"
                 export ANT_OPTS="-Xss8m -Xmx768m"
                  
-	            ant -verbose -f build.main.xml -Declipse.spoofaximp.jars=utils/ 
+	            ant -verbose -f build.main.xml -Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome
 	            cd ..
 	            stopNest
             done


From R.B.Vermaas at tudelft.nl  Tue Mar  1 13:25:15 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 12:25:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22241 - hydra/jobs
Message-ID: <20110301122515.1608D108C023@mx3.tudelft.nl>

Author: rob
Date: Tue Mar  1 12:25:14 2011
New Revision: 22241
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22241&sc=1

Log:
hack for eclipse.home, ignore for now

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Mar  1 12:13:42 2011	(r22240)
+++ hydra/jobs/spoofax-imp.nix	Tue Mar  1 12:25:14 2011	(r22241)
@@ -151,7 +151,7 @@
 
             #hack
             mkdir -p plugins
-            export eclipsefakehome=`pwd`/plugins
+            export eclipsefakehome=`pwd`
             
             ulimit -s unlimited
 


From R.B.Vermaas at tudelft.nl  Tue Mar  1 13:38:32 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 01 Mar 2011 12:38:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22242 -
	spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF
Message-ID: <20110301123832.69FA5108C002@mx3.tudelft.nl>

Author: rob
Date: Tue Mar  1 12:38:32 2011
New Revision: 22242
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22242&sc=1

Log:
add org.strategoxt.imp.debug.stratego.transformer.trans to export package of transformer

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Tue Mar  1 12:25:14 2011	(r22241)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Tue Mar  1 12:38:32 2011	(r22242)
@@ -18,4 +18,5 @@
  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: org.strategoxt.imp.debug.stratego.transformer.strategies
+Export-Package: org.strategoxt.imp.debug.stratego.transformer.strategies,
+ org.strategoxt.imp.debug.stratego.transformer.trans


From L.C.L.Kats at tudelft.nl  Tue Mar  1 14:16:50 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 01 Mar 2011 13:16:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22243 - in
	spoofax/trunk/spoofax:
	org.spoofax.jsglr/src/org/spoofax/jsglr/client
	org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental
	org.spoofax.jsglr/src/org/spoof...
Message-ID: <20110301131650.351447F8166@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Mar  1 13:16:49 2011
New Revision: 22243
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22243&sc=1

Log:
Incremental parser interface and memory cleanup tweaks

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IndentInfo.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IndentTokenizer.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/PathListPool.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/CommentDamageExpander.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSGLR.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSortSet.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/shared/ArrayDeque.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/ParseTestCase.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermTransformer.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/FineGrainedOnRegion.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -125,7 +125,7 @@
             //System.out.print((char)mySGLR.currentToken);
             mySGLR.doParseStep();
             newCandidates.addAll(collectNewRecoverCandidates(curTokIndex));
-            mySGLR.clearRecoverStacks();
+            mySGLR.getRecoverStacks().clear();
         } while(getHistory().getTokenIndex()<= endRecoverSearchPos && mySGLR.acceptingStack==null && mySGLR.currentToken!=SGLR.EOF);
     	mySGLR.setFineGrainedOnRegion(false);
         return newCandidates;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IndentInfo.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IndentInfo.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IndentInfo.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -19,7 +19,7 @@
     }   
     
     public void fillStackNodes(ArrayDeque<Frame> nodes) {
-        stackNodes.clear(true);        
+        stackNodes.clear();        
         stackNodes.addAll(nodes);        
     } 
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IndentTokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IndentTokenizer.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/IndentTokenizer.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -13,11 +13,11 @@
         
     private static final char INDENT_TOK = 244; //char used to represent indentation in syntax definition
     private static final char DEDENT_TOK = 245; //char used to represent 'dedentation' in syntax definition
-    private ArrayDeque<Integer> indentStack;
+    private final ArrayDeque<Integer> indentStack;
+    private final boolean strictMode;
+    private final IndentationHandler myIndentHandler;
     private int dedentCount;
     private boolean indentShift;
-    private boolean strictMode;
-    private IndentationHandler myIndentHandler;
     
     /*
      * Creates indent and dedent tokens during parsing
@@ -32,7 +32,7 @@
  
     private void initEvaluationVariables() {
         myIndentHandler.initEvaluationVariables();
-        indentStack.clear(true);
+        indentStack.clear();
         indentStack.push(0);
         resetForNextLine();
     }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/PathListPool.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/PathListPool.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/PathListPool.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -1,6 +1,5 @@
 package org.spoofax.jsglr.client;
 
-import java.lang.ref.WeakReference;
 
 
 public class PathListPool {
@@ -14,10 +13,10 @@
 	
 	public static int asyncCacheMisses = 0;
 	
-	private static WeakReference<PathListPool> asyncInstance;
+	private static PathListPool asyncInstance = new PathListPool();
 	
 	private PathListPool() {
-		// weak singleton
+		// singleton
 	}
 	
 	private static Object getSyncRoot() {
@@ -25,14 +24,7 @@
 	}
 	
 	public static PathListPool getInstance() {
-		synchronized (getSyncRoot()) {
-			PathListPool result = asyncInstance == null ? null : asyncInstance.get();
-			if (result == null) {
-				result = new PathListPool();
-				asyncInstance = new WeakReference<PathListPool>(result);
-			}
-			return result;
-		}
+		return asyncInstance;
 	}
 	
 	public PooledPathList create() {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/SGLR.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -17,7 +17,6 @@
 
 import org.spoofax.PushbackStringIterator;
 import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.jsglr.client.imploder.TreeBuilder;
 import org.spoofax.jsglr.shared.ArrayDeque;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
@@ -108,12 +107,8 @@
 
 	private boolean fineGrainedOnRegion;
 
-	public void clearRecoverStacks(){
-		recoverStacks.clear(false);
-	}
-
 
-	public ArrayDeque<Frame> getRecoverStacks() {
+	protected ArrayDeque<Frame> getRecoverStacks() {
 		return recoverStacks;
 	}
 
@@ -305,11 +300,12 @@
 			throw new ParseTimeoutException(this, currentToken, tokensSeen - 1, lineNumber,
 					columnNumber, collectedErrors);
 		} finally {
-			activeStacks.clear(false);
-			activeStacksWorkQueue.clear(false);
-			forShifter.clear(false);
+			activeStacks.clear();
+			activeStacksWorkQueue.clear();
+			forShifter.clear();
 			postponedAmbiguities.clear();
-			if (recoverStacks != null) recoverStacks.clear(false);
+			history.clear();
+			if (recoverStacks != null) recoverStacks.clear();
 		}
 
 		logAfterParsing();
@@ -412,7 +408,7 @@
 
 	private void shifter() {
 		logBeforeShifter();
-		clearActiveStacks();
+		activeStacks.clear();
 		final AbstractParseNode prod = parseTable.lookupProduction(currentToken);
 
 		while (forShifter.size() > 0) {
@@ -447,11 +443,11 @@
 		logBeforeParseCharacter();
 
 		postponedAmbiguities.clear();
-		activeStacksWorkQueue.clear(true);
+		activeStacksWorkQueue.clear();
 		activeStacksWorkQueue.addAll(activeStacks);
 
-		clearForActorDelayed();
-		clearForShifter();
+		forActorDelayed.clear();
+		forShifter.clear();
 
 		while (activeStacksWorkQueue.size() > 0 || forActor.size() > 0) {
 			final Frame st = pickStackNodeFromActivesOrForActor(activeStacksWorkQueue);
@@ -471,7 +467,7 @@
 		}
 		final ArrayDeque<Frame> empty = forActor;
 		forActor = forActorDelayed;
-		empty.clear(true);
+		empty.clear();
 		forActorDelayed = empty;
 	}
 
@@ -904,24 +900,7 @@
 			columnNumber++;
 		}
 	}
-
-	@Deprecated
-	public void setFilter(boolean filter) {
-		getDisambiguator().setFilterAny(filter);
-	}
 	
-	private void clearForShifter() {
-		forShifter.clear(true);
-	}
-
-	private void clearForActorDelayed() {
-		forActorDelayed.clear(true);
-	}
-
-	private void clearActiveStacks() {
-		activeStacks.clear(true);
-	}
-
 	public ParseTable getParseTable() {
 		return parseTable;
 	}
@@ -960,16 +939,13 @@
 		return rejectCount;
 	}
 
-	@Deprecated
-	public static void setWorkAroundMultipleLookahead(boolean value) {
-		WORK_AROUND_MULTIPLE_LOOKAHEAD = value;
-	}
-
 
 
 
 
 	////////////////////////////////////////////////////// Log functions ///////////////////////////////////////////////////////////////////////////////
+	
+	// TODO: cleanup, this doesn't belong here!
 
 	private static int traceCallCount = 0;
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/CommentDamageExpander.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/CommentDamageExpander.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/CommentDamageExpander.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -36,7 +36,7 @@
 	 */
 	public int getExpandedDamageEnd(String newInput, int damageStart, int damageEnd, int damageSizeChange) {
 		// Move back to '/' if user just entered '*'
-		damageStart = max(0, damageStart - commentStart.length() + 1);
+		damageStart = commentStart == null ? damageStart : max(0, damageStart - commentStart.length() + 1);
 		// Move to following newline, in case line comments are involved
 		damageEnd = max(damageEnd, newInput.indexOf('\n', damageEnd + damageSizeChange) - damageSizeChange);
 		

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSGLR.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSGLR.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -44,8 +44,10 @@
 	IncrementalSortSet incrementalSorts;
 	
 	private final CommentDamageExpander comments;
+
+	private TNode lastAst;
 	
-	private List<TNode> lastReconstructedNodes;
+	private List<TNode> lastReconstructedNodes = Collections.emptyList();
 
 	/**
 	 * Creates a new, reusable IncrementalSGLR instance.
@@ -74,6 +76,9 @@
 	/**
 	 * Incrementally parse an input.
 	 * 
+	 * Uses the last parsed abstract syntax tree as a template,
+	 * or the tree set using {@link #setLastAst()}
+	 * 
 	 * @see #getLastReconstructedNodes()
 	 *             Gets the list of tree nodes that were reconstructed
 	 *             after running {@link #parseIncremental}.
@@ -83,18 +88,18 @@
 	 *             It may still be possible to parse it non-incrementally.
 	 */
 	@SuppressWarnings("unchecked")
-	public TNode parseIncremental(String newInput, String filename, String startSymbol, TNode oldTree)
+	public TNode parseIncremental(String newInput, String filename, String startSymbol)
 			throws TokenExpectedException, BadTokenException, ParseException, SGLRException, IncrementalSGLRException {
 		
-		if (oldTree == null)
-			throw new IncrementalSGLRException("Precondition failed: oldTree is null");
-		
-		if (incrementalSorts.isEmpty())
-			return (TNode) parser.parse(newInput, filename, startSymbol);
+		lastReconstructedNodes = Collections.emptyList();
+
+		if (lastAst == null || incrementalSorts.isEmpty()) {
+			lastAst = (TNode) parser.parse(newInput, filename, startSymbol);
+			return lastAst;
+		}
 
 		// Determine damage size
-		lastReconstructedNodes = Collections.emptyList();
-		String oldInput = getLeftToken(oldTree).getTokenizer().getInput();
+		String oldInput = getLeftToken(lastAst).getTokenizer().getInput();
 		int damageStart = getDamageStart(newInput, oldInput);
 		int damageSizeChange = newInput.length() - oldInput.length();
 		int damageEnd = getDamageEnd(newInput, oldInput, damageStart, damageSizeChange);
@@ -102,7 +107,7 @@
 		
 		if (damageSizeChange == 0 && damageEnd == damageStart - 1) {
 			assert newInput.equals(oldInput);
-			return oldTree;
+			return lastAst;
 		}
 
 		// Expand damage size for comments
@@ -111,12 +116,12 @@
 		
 		// Analyze current damage
 		DamageRegionAnalyzer neighborAnalyzer = new DamageRegionAnalyzer(this, damageStart, damageEnd, damageSizeChange);
-		List<ISimpleTerm> neighborDamageNodes = neighborAnalyzer.getDamageNodes(oldTree);
+		List<ISimpleTerm> neighborDamageNodes = neighborAnalyzer.getDamageNodes(lastAst);
 		if (DEBUG) System.out.println("Damaged excluding neighbours: " + neighborDamageNodes);
 		sanityCheckDamageNodes(neighborDamageNodes);
 		
 		// Expand damage size for neighbors
-		NeighborDamageExpander neighbors = new NeighborDamageExpander(neighborAnalyzer, neighborDamageNodes, oldTree);
+		NeighborDamageExpander neighbors = new NeighborDamageExpander(neighborAnalyzer, neighborDamageNodes, lastAst);
 		List<ISimpleTerm> damageNodes = neighbors.getExpandedDamageNodes();
 		damageStart = neighbors.getExpandedDamageStart();
 		damageEnd = neighbors.getExpandedDamageEnd();
@@ -124,7 +129,7 @@
 		// Pre-conditions
 		if (DEBUG) System.out.println("Damaged including neighbours: " + damageNodes);
 		sanityCheckDiff(oldInput, newInput, damageStart, damageEnd, damageSizeChange);
-		sanityCheckOldTree(oldTree);
+		sanityCheckOldTree(lastAst);
 		sanityCheckDamageNodes(damageNodes);
 
 		// Construct and parse partial input
@@ -132,7 +137,7 @@
 		DamageRegionAnalyzer damageAnalyzer = new DamageRegionAnalyzer(this, damageStart, damageEnd, damageSizeChange);
 		IncrementalInputBuilder inputBuilder =
 			new IncrementalInputBuilder(damageAnalyzer, damageNodesSet, newInput, oldInput);
-		String partialInput = inputBuilder.buildPartialInput(oldTree);
+		String partialInput = inputBuilder.buildPartialInput(lastAst);
 		int skippedChars = inputBuilder.getLastSkippedCharsBeforeDamage();
 		ISimpleTerm partialTree = (ISimpleTerm) parser.parse(partialInput, filename, startSymbol);
 		List<ISimpleTerm> repairedNodes = damageAnalyzer.getDamageNodesForPartialTree(partialTree, skippedChars);
@@ -143,19 +148,29 @@
 		// Combine old tree with new partial tree
 		IncrementalTreeBuilder<TNode> treeBuilder = 
 			new IncrementalTreeBuilder<TNode>(this, damageAnalyzer, newInput, filename, damageNodesSet, repairedNodes, skippedChars);
-		TNode result = treeBuilder.buildOutput(oldTree);
+		TNode result = treeBuilder.buildOutput(lastAst);
 		lastReconstructedNodes = treeBuilder.getLastReconstructedNodes();
 		return result;
 	}
 	
 	/**
 	 * Returns the list of tree nodes that was reconstructed
-	 * for the last incremental parse.
+	 * for the last incremental parse, or an empty list
+	 * if it was not reconstructed incrementally.
 	 */
 	public List<TNode> getLastReconstructedNodes() {
 		return lastReconstructedNodes;
 	}
 	
+	public final TNode getLastAst() {
+		return lastAst;
+	}
+	
+	public void setLastAst(TNode ast) {
+		lastReconstructedNodes = Collections.emptyList();
+		this.lastAst = ast;
+	}
+	
 	public final SGLR getParser() {
 		return parser;
 	}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSortSet.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSortSet.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSortSet.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -9,11 +9,8 @@
 import static org.spoofax.terms.Term.tryGetConstructor;
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
 
-import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Set;
 
 import org.spoofax.interpreter.terms.ISimpleTerm;
@@ -52,38 +49,46 @@
 	 *            Whether to expand the set of sorts with injections to those
 	 *            sorts (e.g., add MethodDec if ClassBodyDec was specified.)
 	 */
-	private IncrementalSortSet(ParseTable table, boolean expand, String... sorts) {
+	private IncrementalSortSet(ParseTable table, boolean expand, Set<String> sorts) {
 		sortFun = table.getFactory().makeConstructor("sort", 1);
 		cfFun = table.getFactory().makeConstructor("cf", 1);
 		lexFun = table.getFactory().makeConstructor("lex", 1);
-		incrementalSorts = expand ? getInjectionsTo(table, Arrays.asList(sorts), false) : asSet(sorts);
+		incrementalSorts = expand ? getInjectionsTo(table, sorts, false) : sorts;
 		incrementalContainerSorts = getInjectionsTo(table, incrementalSorts, true);
 	}
 	
 	public static IncrementalSortSet create(ParseTable table, boolean expand, String... sorts) {
+		return new IncrementalSortSet(table, expand, asSet(sorts));
+	}
+	
+	public static IncrementalSortSet create(ParseTable table, boolean expand, Set<String> sorts) {
 		return new IncrementalSortSet(table, expand, sorts);
 	}
 	
 	public static IncrementalSortSet read(ParseTable table) {
 		IStrategoConstructor incrementalFun = table.getFactory().makeConstructor("incremental", 0);
 		ProductionAttributeReader reader = new ProductionAttributeReader(table.getFactory());
-		List<String> sorts = new ArrayList<String>();
+		Set<String> sorts = new HashSet<String>();
 		
 		for (int i = ParseTable.LABEL_BASE, max = table.getProductionCount(); i < max; i++) {
 			IStrategoTerm prod = table.getProduction(i);
 			if (isIncrementalProduction(prod, incrementalFun))
 				sorts.add(reader.getSort(applAt(prod, 1)));
 		}
-		return create(table, true, sorts.toArray(new String[sorts.size()]));
+		return create(table, true, sorts);
 	}
 	
 	private static boolean isIncrementalProduction(IStrategoTerm prod, IStrategoConstructor incrementalFun) {
 		IStrategoTerm attrsContainer = termAt(prod, 2);
 		if (attrsContainer.getSubtermCount() > 0) {
 			IStrategoList attrs = termAt(attrsContainer, 0);
-			while (attrs.isEmpty()) {
-				if (tryGetConstructor(attrs.head()) == incrementalFun)
+			while (!attrs.isEmpty()) {
+				IStrategoTerm attr = attrs.head();
+				if (attr.getSubtermCount() == 1)
+					attr = attr.getSubterm(0);
+				if (tryGetConstructor(attr) == incrementalFun)
 					return true;
+				attrs = attrs.tail();
 			}
 		}
 		return false;
@@ -167,4 +172,9 @@
 			return appl;
 		}
 	}
+	
+	@Override
+	public String toString() {
+		return "(" + incrementalSorts + ", " + incrementalContainerSorts + ")";
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/shared/ArrayDeque.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/shared/ArrayDeque.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/shared/ArrayDeque.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -737,6 +737,7 @@
         }
     }
     
+    @Deprecated
     public void clear(boolean skipCellNulling) {
         if (skipCellNulling) {
             head = tail = 0;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/ParseTestCase.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/ParseTestCase.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/test/org/spoofax/jsglr/tests/ParseTestCase.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -166,7 +166,8 @@
 		long parseTime = System.nanoTime();
 		System.out.println("------------------------");
 		System.out.println("Parsing " + newFile);
-    	IStrategoTerm newTree = incrementalSGLR.parseIncremental(contents, newFile, null, oldTree);
+		incrementalSGLR.setLastAst(oldTree);
+    	IStrategoTerm newTree = incrementalSGLR.parseIncremental(contents, newFile, null);
 		parseTime = System.nanoTime() - parseTime;
 		System.out.println("Incremental parsing " + newFile + " took " + parseTime/1000/1000 + " millis" + (IncrementalSGLR.DEBUG ? " including debug printing" : ""));
 		String extension =

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermTransformer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermTransformer.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermTransformer.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -31,10 +31,14 @@
 
 	public final IStrategoTerm transform(IStrategoTerm term) {
 		term = preTransform(term);
-		return term == null ? null : simpleAll(term);
+		return term == null ? null : postTransform(simpleAll(term));
 	}
 	
 	public abstract IStrategoTerm preTransform(IStrategoTerm term);
+	
+	public IStrategoTerm postTransform(IStrategoTerm term) {
+		return term;
+	}
 
 	public IStrategoTerm simpleAll(IStrategoTerm current) {
 		int termType = current.getTermType();

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java	Tue Mar  1 12:38:32 2011	(r22242)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java	Tue Mar  1 13:16:49 2011	(r22243)
@@ -60,7 +60,7 @@
 
 	public IStrategoTerm annotateTerm(IStrategoTerm term, IStrategoList annotations) {
 		// This is a strange case
-		// SpoofaxTestingJSGLRI.parseTestedFragments() depends on it
+		// SpoofaxTestingJSGLRI.parseTestedFragments() might depend on it
 		IStrategoTerm result = baseFactory.annotateTerm(term, annotations);
 		if (isTermList(term)) {
 			for (IStrategoTerm subterm : StrategoListIterator.iterable((IStrategoList) term))


From seba at informatik.uni-marburg.de  Wed Mar  2 10:32:55 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Wed, 02 Mar 2011 09:32:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22244 - in
	sugarj/branches/SugarJ-editor-services/case-studies: editor
	editor/util xml
Message-ID: <20110302093255.B39C72B8013@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Wed Mar  2 09:32:55 2011
New Revision: 22244
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22244&sc=1

Log:
improved XML case study

Added:
   sugarj/branches/SugarJ-editor-services/case-studies/editor/
   sugarj/branches/SugarJ-editor-services/case-studies/editor/ASTBuilder.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/editor/Colors.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/editor/util/
   sugarj/branches/SugarJ-editor-services/case-studies/editor/util/Strategies.sugj
Modified:
   sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.java
   sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlTextTools.sugj

Added: sugarj/branches/SugarJ-editor-services/case-studies/editor/ASTBuilder.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/case-studies/editor/ASTBuilder.sugj	Wed Mar  2 09:32:55 2011	(r22244)
@@ -0,0 +1,8 @@
+package editor;
+
+import editor.util.Strategies;
+
+public editor services ASTBuilder {
+  builders
+    builder  : "generate AST"   = generate-ast (openeditor) (realtime)
+}
\ No newline at end of file

Added: sugarj/branches/SugarJ-editor-services/case-studies/editor/Colors.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/case-studies/editor/Colors.sugj	Wed Mar  2 09:32:55 2011	(r22244)
@@ -0,0 +1,25 @@
+package editor;
+
+public editor services Colors {
+  colorer System colors
+	  darkred   = 128 0 0       
+	  red       = 255 0 0       
+	  darkgreen = 0 128 0       
+	  green     = 0 255 0       
+	  darkblue  = 0 0 128       
+	  blue      = 0 0 255       
+	  cyan      = 0 255 255     
+	  magenta   = 255 0 255     
+	  yellow    = 255 255 0     
+	  white     = 255 255 255   
+	  black     = 0 0 0         
+	  gray      = 128 128 128   
+	  grey      = gray          
+	  orange    = 255 165 0     
+	  pink      = 255 105 180   
+	  brown     = 139 69 19     
+	  default   = _             
+
+  colorer More colors
+    darkorange = 200 100 0
+}
\ No newline at end of file

Added: sugarj/branches/SugarJ-editor-services/case-studies/editor/util/Strategies.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/case-studies/editor/util/Strategies.sugj	Wed Mar  2 09:32:55 2011	(r22244)
@@ -0,0 +1,12 @@
+package editor.util;
+
+public sugar Strategies {
+  rules
+    generate-ast : 
+      (selected, position, ast, path, project-path) ->
+      (filename, result)
+      with
+        filename := <guarantee-extension(|"ast")> path;
+        result   := <id> selected
+
+}
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.java	Tue Mar  1 13:16:49 2011	(r22243)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.java	Wed Mar  2 09:32:55 2011	(r22244)
@@ -1,8 +1,8 @@
 package xml;
-
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
-import xml.XmlAsSax;
+import xml.AsSax;
+import xml.Test;
 import xml.XmlJavaSyntax;
 public class BookTest extends xml.Test 
 { 
@@ -12,14 +12,18 @@
     String title = "Sweetness and Power: The Place of Sugar in Modern History";
     { 
       ch.startDocument();
-      org.xml.sax.helpers.AttributesImpl b_0 = new org.xml.sax.helpers.AttributesImpl();
-      b_0.addAttribute("", "title", "title", "CDATA", title + "");
-      ch.startElement("", "book", "book", b_0);
-      org.xml.sax.helpers.AttributesImpl a_0 = new org.xml.sax.helpers.AttributesImpl();
-      a_0.addAttribute("", "name", "name", "CDATA", "Sidney W. Mintz" + "");
-      ch.startElement("", "author", "author", a_0);
+      org.xml.sax.helpers.AttributesImpl k_3 = new org.xml.sax.helpers.AttributesImpl();
+      k_3.addAttribute("", "title", "title", "CDATA", title + "");
+      ;
+      ch.startElement("", "book", "book", k_3);
+      org.xml.sax.helpers.AttributesImpl j_3 = new org.xml.sax.helpers.AttributesImpl();
+      j_3.addAttribute("", "name", "name", "CDATA", "Sidney W. Mintz" + "");
+      ;
+      ch.startElement("", "author", "author", j_3);
       ch.endElement("", "author", "author");
+      ;
       ch.endElement("", "book", "book");
+      ;
       ch.endDocument();
     }
   }

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.sugj	Tue Mar  1 13:16:49 2011	(r22243)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.sugj	Wed Mar  2 09:32:55 2011	(r22244)
@@ -10,7 +10,7 @@
 public class BookTest extends xml.Test {
   public static void main(String[] args) throws SAXException {
     ContentHandler ch = new BookTest();
-    
+     
     String title = "Sweetness and Power: The Place of Sugar in Modern History";
     
     ch.write document

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Tue Mar  1 13:16:49 2011	(r22243)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Wed Mar  2 09:32:55 2011	(r22244)
@@ -6,7 +6,7 @@
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.DefaultHandler;
-
+   
 import xml.AsSax;
 import xml.XmlSyntax;
 import xml.XmlJavaSyntax;
@@ -20,13 +20,12 @@
   public static void main(String[] args) throws SAXException {
     ContentHandler ch = new Test();
     
-    
     ch.write document
       <xsd:schema
 		    targetNamespace="http://www.w3.org/2001/XMLSchema"
 		    blockDefault="#all"
 		    elementFormDefault="qualified"
-		    version="1.0">
+		    version="1.0">   
 		    <{http://www.w3.org/2001/XMLSchema}simpleType name="derivationSet">
 		      <annotation>
 		      

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj	Tue Mar  1 13:16:49 2011	(r22243)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj	Wed Mar  2 09:32:55 2011	(r22244)
@@ -1,19 +1,20 @@
 package xml;
 
-import org.sugarj.languages.EditorServices;
-
+import editor.Colors;
 import xml.XmlSyntax;
 
 public editor services XmlEditor {
-  colorer XmlHighlighting    
+  colorer XmlHighlighting
     Element : xmlParenthesis
      
     environment ElemName : blue
-    environment AttValue : darkgreen
-    
+    environment AttrName : darkorange
+    environment AttValue : darkred
+    environment CharData : default
+    environment CharDataSection : default
     
     xmlParenthesis = 0 0 200 bold
-    
+
   folding XmlFolding
     Element.Element
     

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj	Tue Mar  1 13:16:49 2011	(r22243)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj	Wed Mar  2 09:32:55 2011	(r22244)
@@ -17,7 +17,6 @@
 
 %% module xml-attribute
   context-free syntax
-
     AttrName "=" AttValue -> Attribute {cons("Attribute")}
     QName -> AttrName {cons("AttrName")}
 
@@ -26,8 +25,8 @@
     "\"" DoubleQuotedPart* "\"" -> <AttValue-CF> {cons("DoubleQuoted")}
     "'"  SingleQuotedPart* "'" -> <AttValue-CF> {cons("SingleQuoted")}
 
-    FooDoubleQuotedText -> DoubleQuotedPart {cons("Literal")}
-    FooSingleQuotedText -> SingleQuotedPart {cons("Literal")}
+    FooDoubleQuotedText -> DoubleQuotedPart {cons("CharDataPart")}
+    FooSingleQuotedText -> SingleQuotedPart {cons("CharDataPart")}
 
     <DoubleQuotedText-LEX> -> FooDoubleQuotedText
     <SingleQuotedText-LEX> -> FooSingleQuotedText
@@ -53,7 +52,7 @@
 
     CharDataPart+ -> CharData {cons("Text")}
 
-    FooCharDataText -> CharDataPart {cons("Literal")}
+    FooCharDataText -> CharDataPart {cons("CharDataPart")}
     <Ref-CF> -> CharDataPart
     "<![CDATA[" <CData-LEX> "]]>" -> CharDataPart {cons("CDATASection")}
 
@@ -174,14 +173,13 @@
 
   sorts Document Element Content
   context-free syntax
-
     Prologue Element Epilogue -> Document {cons("Document")}
 
     Element -> Content
     Comment -> Content {cons("Comment")}
     PI      -> Content
-  syntax
 
+  syntax
     CharData      -> <Content-CF>
     CDataSection  -> <Content-CF>
 
@@ -252,9 +250,9 @@
 	                     : String -> FooSingleQuotedText
 	                     : String -> FooDoubleQuotedText
 	                     : Ref -> SingleQuotedPart
-	    Literal          : FooSingleQuotedText -> SingleQuotedPart
+	    CharDataPart          : FooSingleQuotedText -> SingleQuotedPart
 	                     : Ref -> DoubleQuotedPart
-	    Literal          : FooDoubleQuotedText -> DoubleQuotedPart
+	    CharDataPart          : FooDoubleQuotedText -> DoubleQuotedPart
 	    SingleQuoted     : List(SingleQuotedPart) -> AttValue
 	    DoubleQuoted     : List(DoubleQuotedPart) -> AttValue
 	    Attribute        : QName * AttValue -> Attribute
@@ -268,7 +266,7 @@
 	                     : String -> FooCharDataText
 	    CDATASection     : String -> CharDataPart
 	                     : Ref -> CharDataPart
-	    Literal          : FooCharDataText -> CharDataPart
+	    CharDataPart          : FooCharDataText -> CharDataPart
 	    Text             : List(CharDataPart) -> CharData
 	    DocTypeDecl      : QName * ExternalID -> DocTypeDecl
 	    DocTypePrologue  : DocTypeDecl * List(Misc) -> DocTypePrologue

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlTextTools.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlTextTools.sugj	Tue Mar  1 13:16:49 2011	(r22243)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlTextTools.sugj	Wed Mar  2 09:32:55 2011	(r22244)
@@ -11,7 +11,7 @@
 	strategies
 	
 	  /**
-	   * @type  String -> String
+	   * @type  String -> String  
 	   */
 	  string2xml-attr-value =
 	    string-as-chars(xml-escape-chars)
@@ -89,7 +89,7 @@
 	  xml-unescape =
 	    Text(
 	      map(
-	        ?Literal(_)
+	        ?CharDataPart(_)
 	     <+ unescape-amp
 	      + unescape-lt
 	      + unescape-gt
@@ -103,17 +103,17 @@
 	  /**
 	   * @type  CharDataPart -> CharDataPart
 	   */
-	  unescape-amp  : EntityRef("amp")  -> Literal("&")
-	  unescape-lt   : EntityRef("lt")   -> Literal("<")
-	  unescape-gt   : EntityRef("gt")   -> Literal(">")
-	  unescape-apos : EntityRef("apos") -> Literal("'")
-	  unescape-quot : EntityRef("quot") -> Literal("\"")
+	  unescape-amp  : EntityRef("amp")  -> CharDataPart("&")
+	  unescape-lt   : EntityRef("lt")   -> CharDataPart("<")
+	  unescape-gt   : EntityRef("gt")   -> CharDataPart(">")
+	  unescape-apos : EntityRef("apos") -> CharDataPart("'")
+	  unescape-quot : EntityRef("quot") -> CharDataPart("\"")
 	
 	  unescape-dec-charref :
-	    DecCharRef(s) -> Literal(<dec-char-to-string> s)
+	    DecCharRef(s) -> CharDataPart(<dec-char-to-string> s)
 	
 	  unescape-hex-charref :
-	    HexCharRef(s) -> Literal(<hex-char-to-string> s)
+	    HexCharRef(s) -> CharDataPart(<hex-char-to-string> s)
 	
 	  /*
 	  unescape-dec-charref : ['&', '#', x, ';' | cs] -> []
@@ -175,7 +175,7 @@
 	  chardata2strings =
 	      xml-unescape
 	    ; ?Text(<id>)
-	    ; map(?Literal(<id>) + ?CDATASection(<id>))
+	    ; map(?CharDataPart(<id>) + ?CDATASection(<id>))
 	
 	  chardata2string =
 	      chardata2strings


From seba at informatik.uni-marburg.de  Wed Mar  2 10:36:40 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Wed, 02 Mar 2011 09:36:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22245 - in
	sugarj/branches/SugarJ-editor-services: compiler/META-INF
	compiler/org/sugarj/driver editor/editor/java/org/sugarj/editor
Message-ID: <20110302093640.D6E6B108C076@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Wed Mar  2 09:36:40 2011
New Revision: 22245
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22245&sc=1

Log:
* use SDF native bundle
* better binding for semantic providers
* a bit of compilation scheduling

Modified:
   sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Result.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF	Wed Mar  2 09:32:55 2011	(r22244)
+++ sugarj/branches/SugarJ-editor-services/compiler/META-INF/MANIFEST.MF	Wed Mar  2 09:36:40 2011	(r22245)
@@ -11,7 +11,8 @@
  org.strategoxt.imp.runtime;bundle-version="0.1.1",
  org.spoofax.terms;bundle-version="1.0.0",
  org.eclipse.jdt.core;bundle-version="3.5.2",
- org.strategoxt.strj;bundle-version="0.17.92"
+ org.strategoxt.strj;bundle-version="0.17.92",
+ org.strategoxt.imp.nativebundle;bundle-version="0.1.1"
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
 Export-Package: org.sugarj, 

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Wed Mar  2 09:32:55 2011	(r22244)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Wed Mar  2 09:36:40 2011	(r22245)
@@ -111,6 +111,10 @@
     throw new MatchError(term, "string");
   }
 
+  public static boolean isList(IStrategoTerm term) {
+    return term.getTermType() == IStrategoTerm.LIST;
+  }
+  
   public static List<IStrategoTerm> getList(IStrategoTerm term) {
     
     if (term.getTermType() == IStrategoTerm.LIST)
@@ -138,6 +142,17 @@
     return makeAppl("None", "Some", 0, noneToken);
   }
   
+  public static IStrategoTerm makeString(String s, IToken token) {
+    IStrategoTerm t = factory.makeString(s);
+    setAttachment(t, "String", token);
+    return t;
+  }
+  
+  public static IStrategoList makeList(String sort, IStrategoTerm... ts) {
+    assert ts.length > 0;
+    return makeList(sort, null, ts);
+  }
+  
   public static IStrategoList makeList(String sort, IToken emptyListToken, IStrategoTerm... ts) {
     IStrategoList term = factory.makeList(ts);
     
@@ -145,10 +160,14 @@
     return term;
   }
 
+  public static IStrategoList makeList(String sort, Collection<IStrategoTerm> ts) {
+    return makeList(sort, ts.toArray(new IStrategoTerm[ts.size()]));
+  }
+  
   public static IStrategoList makeList(String sort, IToken emptyListToken, Collection<IStrategoTerm> ts) {
     return makeList(sort, emptyListToken, ts.toArray(new IStrategoTerm[ts.size()]));
   }
-
+  
   public static IStrategoTerm makeAppl(String cons, String sort, int arity, IStrategoTerm... args) {
     assert args.length > 0;
     return makeAppl(cons, sort, arity, null, args);
@@ -172,6 +191,9 @@
     IToken right;
     
     if (children.length == 0) {
+      if (emptyToken == null)
+        return;
+      
       left = emptyToken;
       right = emptyToken;
     }
@@ -180,12 +202,13 @@
       right = ImploderAttachment.getRightToken(children[children.length - 1]);
     }
     
-    ImploderAttachment.putImploderAttachment(
-        term,
-        false,
-        sort, 
-        left,
-        right);
+    if (left != null && right != null)
+      ImploderAttachment.putImploderAttachment(
+          term,
+          false,
+          sort, 
+          left,
+          right);
     
     
     for (IStrategoTerm arg : children)
@@ -247,4 +270,31 @@
     return result;
   }
   
+  public static List<IStrategoTerm> registerSemanticProvider(Collection<IStrategoTerm> editorServices, String jarfile) throws IOException {
+    String jarfilePath = jarfile.replace("\\", "\\\\").replace("\"", "\\\"");
+    IStrategoTerm semanticProvider = atermFromString("SemanticProvider(\"" + jarfilePath + "\")");
+    
+    List<IStrategoTerm> newServices = new ArrayList<IStrategoTerm>();
+    
+    for (IStrategoTerm service : editorServices)
+    {
+      if (ATermCommands.isApplication(service, "Builders")) {
+        IStrategoTerm name = ATermCommands.getApplicationSubterm(service, "Builders", 0);
+        IStrategoTerm builders = ATermCommands.getApplicationSubterm(service, "Builders", 1);
+        if (ATermCommands.isList(builders)) {
+          List<IStrategoTerm> builderList = new ArrayList<IStrategoTerm>();
+          builderList.add(semanticProvider);
+          builderList.addAll(getList(builders));
+          builders = ATermCommands.makeList("SemanticRule*", builderList);
+        }
+        
+        service = ATermCommands.makeAppl("Builders", "Section", 2, name, builders);
+      }
+      
+      newServices.add(service);
+    }
+    
+    return newServices;
+  }
+  
 }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Wed Mar  2 09:32:55 2011	(r22244)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Wed Mar  2 09:36:40 2011	(r22245)
@@ -39,7 +39,6 @@
 import org.apache.commons.cli.GnuParser;
 import org.apache.commons.cli.HelpFormatter;
 import org.apache.commons.cli.Options;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.spoofax.jsglr.client.ParseTable;
@@ -48,7 +47,6 @@
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
-import org.spoofax.terms.StrategoListIterator;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.lang.Context;
@@ -83,6 +81,8 @@
     }
   }
 
+  private final static int PENDING_TIMEOUT = 120000;
+
   private static Map<Key, Result> resultCache = new HashMap<Key, Result>();
 
   private static List<URI> allInputFiles;
@@ -133,6 +133,31 @@
     return resultCache.get(new Key(source, moduleName));
   }
   
+  private static Result getNonPendingResult(String source, String moduleName) {
+    Key key = new Key(source, moduleName);
+    Result r;
+    int count = 0;
+    synchronized (key) {
+      while (true) {
+        synchronized (resultCache) {
+          r = resultCache.get(key);
+        }
+        
+        if (r != null && !(r instanceof PendingResult))
+          return r;
+        
+        if (count > PENDING_TIMEOUT)
+          throw new IllegalStateException("pending result timed out for module " + moduleName);
+        
+        count += 100;
+        try {
+          key.wait(100);
+        } catch (InterruptedException e) {
+        }
+      }
+    }
+  }
+
   private static synchronized void putResult(String source, String moduleName, Result result) {
     resultCache.put(new Key(source, moduleName), result);
   }
@@ -144,20 +169,31 @@
   }
   
   public static Result compile(String source, String moduleName, String file) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
+    boolean isPending = false;
     synchronized (Driver.class) {
       Result result = getResult(source, moduleName);
-      if (result != null && result.isUpToDate())
+      if (result != null && result instanceof PendingResult)
+        isPending = true;
+      else if (result != null && result.isUpToDate())
         return result;
       
       // mark this module as pending 
       putResult(source, moduleName, PendingResult.instance);
     }
-
-    initialize();
-    Driver driver = new Driver();
-    driver.process(source, moduleName);
-    storeCaches();
-    putResult(source, moduleName, driver.driverResult);
+    
+    if (isPending && getNonPendingResult(source, moduleName) != null) 
+      return compile(source, moduleName, file);
+    
+    Driver driver = null;
+    try {
+      initialize();
+      driver = new Driver();
+      driver.process(source, moduleName);
+      storeCaches();
+    } finally {
+      putResult(source, moduleName, driver == null ? null : driver.driverResult);
+    }
+    
     return driver.driverResult;
   }
   
@@ -187,6 +223,10 @@
         throw new IllegalStateException("circular processing");
 
       currentlyProcessing.add(moduleName);
+      
+      driverResult.addEditorService(
+        ATermCommands.atermFromString(
+          "Builders(\"sugarj checking\", [SemanticObserver(Strategy(\"sugarj-analyze\"))])"));
 
       boolean done = false;
       while (!done) {
@@ -345,9 +385,12 @@
         
         IStrategoTerm services = ATermCommands.getApplicationSubterm(body, "EditorServicesBody", 0);
         
-        if (services.getTermType() != IStrategoTerm.LIST)
+        if (!ATermCommands.isList(services))
           throw new IllegalStateException("editor services are not a list: " + services);
-
+        
+        List<IStrategoTerm> editorServices = ATermCommands.getList(services);
+        if (currentTransProg != null)
+          editorServices = ATermCommands.registerSemanticProvider(editorServices, currentTransProg);
   
         String editorServicesFile = bin + sep + relPackageNameSep() + extName + ".serv";
         FileCommands.createFile(editorServicesFile);
@@ -359,7 +402,7 @@
         for (IStrategoTerm service : driverResult.getEditorServices())
           buf.append(service).append('\n');
         
-        for (IStrategoTerm service : StrategoListIterator.iterable((IStrategoList) services)) {
+        for (IStrategoTerm service : editorServices) {
           driverResult.addEditorService(service);
           buf.append(service).append('\n');
         }
@@ -502,8 +545,10 @@
       }
     }
     
-    for (IStrategoTerm pendingImport : pendingImports)
+    for (IStrategoTerm pendingImport : pendingImports) {
+      lastSugaredToplevelDecl = pendingImport;
       processImportDec(pendingImport);
+    }
   }
 
   private void processImportDec(IStrategoTerm toplevelDecl) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
@@ -923,8 +968,10 @@
         IStrategoTerm strExtract = extractSTR(sugarBody, extractionContext);
   
         String sdfExtensionHead =
-          "module " + fullExtName + "\n" + sdfImports
-                + (isPublic ? "exports " : "hiddens ") + "\n";
+          "module " + fullExtName + "\n" 
+          + sdfImports
+          + (isPublic ? "exports " : "hiddens ") + "\n"
+          + "  (/)" + "\n";
 
         String sdfExtensionContent = SDFCommands.prettyPrintSDF(sdfExtract, interp);
 

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Result.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Result.java	Wed Mar  2 09:32:55 2011	(r22244)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Result.java	Wed Mar  2 09:36:40 2011	(r22245)
@@ -50,7 +50,7 @@
   }
   
   boolean isUpToDate() throws IOException {
-    if (!new File(generatedClassFile).exists())
+    if (generatedClassFile != null && !new File(generatedClassFile).exists())
       return false;
 
     for (Entry<String, Integer> entry : fileDependencyHashes.entrySet())
@@ -90,13 +90,6 @@
   }
   
   void registerEditorDesugarings(String jarfile) throws IOException {
-    IStrategoTerm builder =
-      ATermCommands.atermFromString(
-          "Builders(\"desugaring provider\", " +
-            "[SemanticProvider(\"" + 
-                jarfile.replace("\\", "\\\\").replace("\"", "\\\"") + "\")" +
-            ",SemanticObserver(Strategy(\"sugarj-analyze\"))" +
-            "])");
-    editorServices.add(builder);
+    editorServices = new HashSet<IStrategoTerm>(ATermCommands.registerSemanticProvider(editorServices, jarfile));
   }
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Wed Mar  2 09:32:55 2011	(r22244)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Wed Mar  2 09:36:40 2011	(r22245)
@@ -21,12 +21,14 @@
 import org.spoofax.jsglr.shared.TokenExpectedException;
 import org.spoofax.terms.Term;
 import org.strategoxt.HybridInterpreter;
+import org.strategoxt.imp.nativebundle.SDFBundleCommand;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.java_front.pp_java_string_0_0;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.permissivegrammars.make_permissive;
 import org.strategoxt.stratego_sdf.pp_sdf_string_0_0;
+import org.strategoxt.stratego_xtc.stratego_xtc;
 import org.strategoxt.strc.pp_stratego_string_0_0;
 import org.strategoxt.tools.main_pack_sdf_0_0;
 import org.sugarj.driver.caching.ModuleKey;
@@ -93,7 +95,12 @@
         "-m", module
     };
     
-    CommandExecution.executeWithPrefix("sdf2table", cmd);
+    IStrategoTerm termArgs[] = new IStrategoTerm[cmd.length - 2];
+    for (int i = 0; i < termArgs.length; i++)
+      termArgs[i] = ATermCommands.makeString(cmd[i+2], null);
+    
+    Context context = stratego_xtc.init();
+    SDFBundleCommand.getInstance().invoke(context, "sdf2table", termArgs);
     
     if (!new File(tbl).exists())
       throw new RuntimeException("execution of sdf2table failed");

Modified: sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java	Wed Mar  2 09:32:55 2011	(r22244)
+++ sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java	Wed Mar  2 09:36:40 2011	(r22245)
@@ -39,11 +39,7 @@
     if (Environment.cacheDir == null)
       Environment.cacheDir = System.getProperty("user.home") + "/.sugarj/cache";
     
-    //Environment.includePath.add(getJarPath(SGLR.class));
     Environment.includePath.add(new StrategoJarAntPropertyProvider().getAntPropertyValue(""));
-    //Environment.includePath.add(getJarPath(Interpreter.class));
-    //Environment.includePath.add(getJarPath(JSGLRLibrary.class));
-    //Environment.includePath.add(getJarPath(Term.class));
 
     assert projectPath != null;
     Environment.srcPath.add(projectPath);
@@ -71,8 +67,6 @@
       return super.doParse(input, filename);
     }
     
-    // TODO how to handle pending results?
-    
     return result.getSugaredSyntaxTree();
   }
 


From seba at informatik.uni-marburg.de  Wed Mar  2 10:37:23 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Wed, 02 Mar 2011 09:37:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22246 -
	spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle
Message-ID: <20110302093723.EA319CC2E9@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Wed Mar  2 09:37:23 2011
New Revision: 22246
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22246&sc=1

Log:
made "invoke(Context context, String command, IStrategoTerm[] argList)" public

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	Wed Mar  2 09:36:40 2011	(r22245)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	Wed Mar  2 09:37:23 2011	(r22246)
@@ -144,7 +144,7 @@
 			: null;
 	}
 
-	private boolean invoke(Context context, String command, IStrategoTerm[] argList) {
+	public boolean invoke(Context context, String command, IStrategoTerm[] argList) {
 		String[] commandArgs = SSL_EXT_call.toCommandArgs(binaryPath + command, argList);
 		// Disabled this check since Windows x64 might identify differently?
 		//String[] environment = Platform.getOS() == Platform.OS_WIN32


From R.B.Vermaas at tudelft.nl  Wed Mar  2 11:16:00 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 02 Mar 2011 10:16:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22247 - hydra/jobs
Message-ID: <20110302101600.66D097F8089@mx1.tudelft.nl>

Author: rob
Date: Wed Mar  2 10:16:00 2011
New Revision: 22247
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22247&sc=1

Log:
let's see what goes wrong when pre-building org.strategoxt.imp.testing

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Mar  2 09:37:23 2011	(r22246)
+++ hydra/jobs/spoofax-imp.nix	Wed Mar  2 10:16:00 2011	(r22247)
@@ -165,7 +165,7 @@
 
             mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e || true
 
-            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer  # TODO: org.strategoxt.imp.testing
+            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer org.strategoxt.imp.testing
             do
                 mkdir -p $e/utils/
                 cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/


From R.B.Vermaas at tudelft.nl  Wed Mar  2 11:52:10 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 02 Mar 2011 10:52:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22248 -
	spoofax-imp/trunk/org.strategoxt.imp.testing
Message-ID: <20110302105210.B87BA108C03B@mx3.tudelft.nl>

Author: rob
Date: Wed Mar  2 10:52:10 2011
New Revision: 22248
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22248&sc=1

Log:
add -la org.strategoxt.imp.testing.strategies unconditionally for testing project

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Wed Mar  2 10:16:00 2011	(r22247)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Wed Mar  2 10:52:10 2011	(r22248)
@@ -377,7 +377,7 @@
             <antcall target="stratego.jar.deletehelper"/>
             <antcall target="stratego.jvm.helper">
                 <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
-                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+                <param name="build.stratego.extraargs" value="-la java-front -la org.strategoxt.imp.testing.strategies"/>
             </antcall>
             <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <!-- copy imported terms -->
@@ -449,4 +449,4 @@
             <delete file="${include}/${sdfmodule}.def"/>
             <delete dir="${src-gen}/trans"/>
         </target>
-    </project>
\ No newline at end of file
+    </project>


From R.B.Vermaas at tudelft.nl  Wed Mar  2 12:44:00 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 02 Mar 2011 11:44:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22249 - hydra/jobs
Message-ID: <20110302114400.1A62A2B8010@mx2.tudelft.nl>

Author: rob
Date: Wed Mar  2 11:43:59 2011
New Revision: 22249
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22249&sc=1

Log:
disabling testing again, i remember....

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Mar  2 10:52:10 2011	(r22248)
+++ hydra/jobs/spoofax-imp.nix	Wed Mar  2 11:43:59 2011	(r22249)
@@ -165,7 +165,7 @@
 
             mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e || true
 
-            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer org.strategoxt.imp.testing
+            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer # TODO: org.strategoxt.imp.testing
             do
                 mkdir -p $e/utils/
                 cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/


From L.C.L.Kats at tudelft.nl  Wed Mar  2 12:49:30 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Mar 2011 11:49:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22250 -
	aster/trunk/runtime/aster/decorators aster/trunk/runtime/aster/lang
	spoofax-imp/trunk/org.strategoxt.imp.generator
	spoofax-imp/trunk/org.strategoxt.imp.generator/M...
Message-ID: <20110302114930.AA5C8108C002@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Mar  2 11:49:30 2011
New Revision: 22250
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22250&sc=1

Log:
fixed Aster build in Spoofax; minor Aster library tweaks

Modified:
   aster/trunk/runtime/aster/decorators/flow.astr
   aster/trunk/runtime/aster/decorators/lookup.astr
   aster/trunk/runtime/aster/lang/annotations.str
   aster/trunk/runtime/aster/lang/parents.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/aster.jar
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: aster/trunk/runtime/aster/decorators/flow.astr
==============================================================================
--- aster/trunk/runtime/aster/decorators/flow.astr	Wed Mar  2 11:43:59 2011	(r22249)
+++ aster/trunk/runtime/aster/decorators/flow.astr	Wed Mar  2 11:49:30 2011	(r22250)
@@ -26,6 +26,21 @@
       id.parent;
       id.down(a)
     end
+
+  decorator one-up(a) =
+    if a.defined then
+      a
+    else
+      id.child(a)
+    end
+
+  decorator one-down(a) =
+    if a.defined then
+      a
+    else
+      id.parent;
+      a
+    end
   
   /**
    * Applies the attribute semantic rule at the root of the tree.

Modified: aster/trunk/runtime/aster/decorators/lookup.astr
==============================================================================
--- aster/trunk/runtime/aster/decorators/lookup.astr	Wed Mar  2 11:43:59 2011	(r22249)
+++ aster/trunk/runtime/aster/decorators/lookup.astr	Wed Mar  2 11:49:30 2011	(r22250)
@@ -127,7 +127,7 @@
    * Example:
    *
    *   def all-declarations =
-   *     id.decl(id.lookup(|"ignored"))
+   *     id.all-decls(id.lookup(|"(argument ignored)"))
    */
   decorator plain all-decls(a) =
     where(try(a)); // initialize declaration list if required

Modified: aster/trunk/runtime/aster/lang/annotations.str
==============================================================================
--- aster/trunk/runtime/aster/lang/annotations.str	Wed Mar  2 11:43:59 2011	(r22249)
+++ aster/trunk/runtime/aster/lang/annotations.str	Wed Mar  2 11:49:30 2011	(r22250)
@@ -161,7 +161,7 @@
   aster-add-anno:
     t {a*} -> t {b*}
     where
-      x := <if-c-platform(<newname> "@"); if-java-platform(SRTS-EXT-newint)>;
+      x := <if-c-platform(<newname> "@"); if-java-platform(newterm)>;
       if [] := a* then
         b* := [x] // adding annos is expensive, but newname is as cheap as a counter or new
       else

Modified: aster/trunk/runtime/aster/lang/parents.str
==============================================================================
--- aster/trunk/runtime/aster/lang/parents.str	Wed Mar  2 11:43:59 2011	(r22249)
+++ aster/trunk/runtime/aster/lang/parents.str	Wed Mar  2 11:49:30 2011	(r22250)
@@ -25,7 +25,16 @@
    * Fails for non-AG-annotated terms.
    */
   get-parent(|all-parents) =
-    hashtable-get(|all-parents, <id>)
+    /*
+    if-java-platform(
+      prim("SSL_EXT_get_parent", <id>)
+    <+
+      hashtable-get(|all-parents, <id>)
+    );
+    if-c-platform(
+    */
+      hashtable-get(|all-parents, <id>)
+    //)
   
   set-parent(|all-parents, value) =
     hashtable-put(|all-parents, <id>, value)

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	Wed Mar  2 11:43:59 2011	(r22249)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/.classpath	Wed Mar  2 11:49:30 2011	(r22250)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
+	<classpathentry exported="true" kind="lib" path="lib/aster.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/sdf2imp.jar" sourcepath="src-gen"/>
 	<classpathentry exported="true" kind="lib" path="lib/make_permissive.jar" sourcepath="/permissive-grammars/trans/make-permissive/bin"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	Wed Mar  2 11:43:59 2011	(r22249)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/META-INF/MANIFEST.MF	Wed Mar  2 11:49:30 2011	(r22250)
@@ -4,7 +4,8 @@
 Bundle-SymbolicName: org.strategoxt.imp.generator;singleton:=true
 Bundle-Version: 0.1.2.qualifier
 Bundle-ClassPath: lib/make_permissive.jar,
- lib/sdf2imp.jar
+ lib/sdf2imp.jar,
+ lib/aster.jar
 Require-Bundle: org.spoofax.jsglr,
  org.spoofax.interpreter.core,
  org.spoofax.interpreter.library.jsglr,
@@ -18,5 +19,6 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Bundle-Vendor: Spoofax.org
-Export-Package: org.strategoxt.imp.generator,
+Export-Package: org.strategoxt.aster,
+ org.strategoxt.imp.generator,
  org.strategoxt.permissivegrammars

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/aster.jar
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Wed Mar  2 11:43:59 2011	(r22249)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Wed Mar  2 11:49:30 2011	(r22250)
@@ -385,9 +385,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr" /></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -409,6 +410,8 @@
                 <arg value="-i"/>
                 <fileset dir="${basedir}">
                     <include name="**/*.astr"/>
+                    <!-- FIXME: doesn't work with filenames that contain spaces... -->
+                    <arg line="${aster-input}"/>
                 </fileset>
             </java>
         </target>


From L.C.L.Kats at tudelft.nl  Wed Mar  2 12:51:50 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Mar 2011 11:51:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22251 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.aster/editor
	org.strategoxt.imp.editors.editorservice/trans
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runt...
Message-ID: <20110302115150.CDE142B8010@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Mar  2 11:51:50 2011
New Revision: 22251
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22251&sc=1

Log:
fix common(?) mistake: using "." as a completion trigger instead of "\."

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/editor/Stratego-Attributes-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/editor/Stratego-Attributes-References.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/editor/Stratego-Attributes-References.esv	Wed Mar  2 11:49:30 2011	(r22250)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/editor/Stratego-Attributes-References.esv	Wed Mar  2 11:51:50 2011	(r22251)
@@ -7,13 +7,4 @@
   // This file can be used for custom reference resolving,         
   // hover help, occurrence highlighting rules.                    
   // See the imported file for a brief introduction and examples.  
-                                                                   
-
-references
-                        
-  completion proposer : editor-complete
-  completion lexical  : [a-zA-Z\_][a-zA-Z0-9\'\-\_]*\*?
-  completion trigger  : "."
-                        
-  // reference _         : editor-resolve
-  // hover _             : editor-hover
\ No newline at end of file
+                                                                   
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Wed Mar  2 11:49:30 2011	(r22250)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Wed Mar  2 11:51:50 2011	(r22251)
@@ -19,7 +19,7 @@
       <chdir> project-path;
       <record-all-sdfs> ".";
       error*   := <collect-all(constraint-error, conc)> ast;
-      warning* := <warnings-refactoring> ast
+      warning* := <conc> (<collect-all(constraint-warning, conc)> ast, <warnings-refactoring> ast)
   
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, selected)
@@ -148,6 +148,9 @@
     where
       not(<string-ends-with(|".jar") + string-ends-with(|".ctree")> x)
 
+  constraint-warning:
+    CompletionTrigger(".", _) -> $[Trigger is a regular expression that matches any character. Use \. instead]
+  
   warnings-refactoring=
   	?ast;
   	wrns-pp-unspecified:=<warning-pptable-unspecified> ast;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Wed Mar  2 11:49:30 2011	(r22250)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Wed Mar  2 11:51:50 2011	(r22251)
@@ -136,6 +136,8 @@
 		for (IStrategoAppl trigger : collectTerms(descriptor.getDocument(), "CompletionTrigger")) {
 			try {
 				String pattern = termContents(termAt(trigger, 0));
+				if (".".equals(pattern))
+					pattern = "\\."; // common mistake
 				Pattern compiledPattern = Pattern.compile(pattern);
 				results.add(compiledPattern);
 			} catch (PatternSyntaxException e) {


From L.C.L.Kats at tudelft.nl  Wed Mar  2 12:52:40 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Mar 2011 11:52:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22252 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: META-INF
	editor/java/org/strategoxt/imp/testing syntax trans
Message-ID: <20110302115240.4BBF77F80EC@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Mar  2 11:52:39 2011
New Revision: 22252
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22252&sc=1

Log:
testing language fixes

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
      - copied, changed from r22222, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/CachedFragmentParser.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/CachedFragmentParser.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Wed Mar  2 11:51:50 2011	(r22251)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Wed Mar  2 11:52:39 2011	(r22252)
@@ -17,10 +17,10 @@
  org.eclipse.ui.editors,
  org.eclipse.ui.workbench.texteditor,
  org.spoofax.jsglr,
- org.strategoxt.strj,
  org.eclipse.jdt.junit,
  org.eclipse.jdt.core,
- org.spoofax.terms
+ org.spoofax.terms,
+ org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Export-Package: org.strategoxt.imp.testing

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java (from r22222, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/CachedFragmentParser.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/CachedFragmentParser.java	Mon Feb 28 10:37:59 2011	(r22222, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Wed Mar  2 11:52:39 2011	(r22252)
@@ -39,8 +39,10 @@
 /** 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class CachedFragmentParser {
+public class FragmentParser {
 
+	private static final boolean ALLOW_CACHING = false; // currently useless; plus it breaks setup sections at end of file
+	
 	private static final int FRAGMENT_PARSE_TIMEOUT = 3000;
 	
 	private static final IStrategoConstructor FAILS_0 =
@@ -109,7 +111,7 @@
 		return null;
 	}
 
-	public IStrategoTerm parseCached(ITokenizer oldTokenizer, IStrategoTerm fragment)
+	public IStrategoTerm parse(ITokenizer oldTokenizer, IStrategoTerm fragment)
 			throws TokenExpectedException, BadTokenException, SGLRException, IOException {
 		
 		// TODO: use context-independent caching key
@@ -120,7 +122,8 @@
 		IStrategoTerm parsed = getCache(successExpected).get(fragmentInput/*Compact*/);
 		if (parsed != null) {
 			isLastSyntaxCorrect = successExpected;
-		} else {
+		}
+		if (parsed == null || !ALLOW_CACHING) {
 			//String fragmentInput = createTestFragmentString(oldTokenizer, fragment, false);
 			SGLRParseController controller = parser.getController();
 			controller.getParseLock().lock();

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java	Wed Mar  2 11:51:50 2011	(r22251)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java	Wed Mar  2 11:52:39 2011	(r22252)
@@ -61,10 +61,16 @@
 	
 	public void copyTokensFromFragment(IStrategoTerm fragment, IStrategoTerm parsedFragment, int startOffset, int endOffset) {
 		Tokenizer fragmentTokenizer = (Tokenizer) ImploderAttachment.getTokenizer(parsedFragment);
-		IToken startToken = Tokenizer.getFirstTokenWithSameOffset(
-				fragmentTokenizer.getTokenAtOffset(startOffset));
-		IToken endToken = Tokenizer.getLastTokenWithSameEndOffset(
-				fragmentTokenizer.getTokenAtOffset(endOffset));
+		IToken startToken, endToken;
+		if (fragmentTokenizer.getStartOffset() <= startOffset) {
+			endToken = fragmentTokenizer.currentToken();
+			startToken = Tokenizer.getFirstTokenWithSameOffset(endToken);
+		} else {
+			startToken = Tokenizer.getFirstTokenWithSameOffset(
+					fragmentTokenizer.getTokenAtOffset(startOffset));
+			endToken = Tokenizer.getLastTokenWithSameEndOffset(
+					fragmentTokenizer.getTokenAtOffset(endOffset));
+		}
 		((Token) endToken).setEndOffset(endOffset); // cut off if too long
 		int startIndex = startToken.getIndex();
 		int endIndex = endToken.getIndex();

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Wed Mar  2 11:51:50 2011	(r22251)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Wed Mar  2 11:52:39 2011	(r22252)
@@ -9,6 +9,7 @@
 import static org.spoofax.terms.Term.tryGetConstructor;
 
 import java.io.IOException;
+import java.util.Iterator;
 
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.language.LanguageRegistry;
@@ -24,6 +25,8 @@
 import org.spoofax.jsglr.shared.TokenExpectedException;
 import org.spoofax.terms.StrategoListIterator;
 import org.spoofax.terms.TermTransformer;
+import org.spoofax.terms.TermVisitor;
+import org.spoofax.terms.attachments.ParentAttachment;
 import org.spoofax.terms.attachments.ParentTermFactory;
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
@@ -43,7 +46,7 @@
 	private static final IStrategoConstructor LANGUAGE_1 =
 		Environment.getTermFactory().makeConstructor("Language", 1);
 	
-	private final CachedFragmentParser fragmentParser = new CachedFragmentParser();
+	private final FragmentParser fragmentParser = new FragmentParser();
 
 	public SpoofaxTestingJSGLRI(JSGLRI template) {
 		super(template.getParseTable(), template.getStartSymbol(), template.getController());
@@ -65,7 +68,7 @@
 		final Retokenizer retokenizer = new Retokenizer(oldTokenizer);
 		final ITermFactory nonParentFactory = Environment.getTermFactory();
 		final ITermFactory factory = new ParentTermFactory(nonParentFactory);
-		final CachedFragmentParser testedParser = getFragmentParser(root);
+		final FragmentParser testedParser = getFragmentParser(root);
 		assert !(nonParentFactory instanceof ParentTermFactory);
 		if (testedParser == null || !testedParser.isInitialized())
 			return root;
@@ -77,7 +80,7 @@
 					IStrategoTerm fragment = termAt(term, 1);
 					retokenizer.copyTokensUpToIndex(getLeftToken(fragment).getIndex() - 1);
 					try {
-						IStrategoTerm parsed = testedParser.parseCached(oldTokenizer, fragment);
+						IStrategoTerm parsed = testedParser.parse(oldTokenizer, fragment);
 						int oldFragmentEndIndex = getRightToken(fragment).getIndex();
 						retokenizer.copyTokensFromFragment(fragment, parsed,
 								getLeftToken(fragment).getStartOffset(), getRightToken(fragment).getEndOffset());
@@ -95,14 +98,24 @@
 				}
 				return term;
 			}
+			
+			@Override
+			public IStrategoTerm postTransform(IStrategoTerm term) {
+				Iterator<IStrategoTerm> iterator = TermVisitor.tryGetListIterator(term); 
+				for (int i = 0, max = term.getSubtermCount(); i < max; i++) {
+					IStrategoTerm kid = iterator == null ? term.getSubterm(i) : iterator.next();
+					ParentAttachment.putParent(kid, term, null);
+				}
+				return term;
+			}
 		}.transform(root);
 		retokenizer.copyTokensAfterFragments();
-		retokenizer.getTokenizer().setAst(root);
+		retokenizer.getTokenizer().setAst(result);
 		retokenizer.getTokenizer().initAstNodeBinding();
 		return result;
 	}
 	
-	private CachedFragmentParser getFragmentParser(IStrategoTerm root) {
+	private FragmentParser getFragmentParser(IStrategoTerm root) {
 		Language language = getLanguage(root);
 		if (language == null) return null;
 		Descriptor descriptor = Environment.getDescriptor(language);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java	Wed Mar  2 11:51:50 2011	(r22251)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java	Wed Mar  2 11:52:39 2011	(r22252)
@@ -33,12 +33,7 @@
     return descriptor;
   }
 
-  protected static synchronized void setDescriptor(Descriptor descriptor)
-  { 
-    SpoofaxTestingParseControllerGenerated.descriptor = descriptor;
-  }
-
-  protected static void createDescriptor()
+  private static void createDescriptor()
   { 
     try
     { 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Wed Mar  2 11:51:50 2011	(r22251)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Wed Mar  2 11:52:39 2011	(r22252)
@@ -6,7 +6,7 @@
 imports Spoofax-Testing-String-Quotation
 imports languages/aterm/syntax/ATerms
 imports RegExp
-imports Stratego-Sugar [ Ws -> LAYOUT => IGNORE -> NOTHING ]
+imports Stratego-Sugar [ Ws -> LAYOUT => IGNORE -> IGNORE ]
 
 exports
   context-free start-symbols TestSuite

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Mar  2 11:51:50 2011	(r22251)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Mar  2 11:52:39 2011	(r22252)
@@ -19,13 +19,13 @@
   check-note = fail
   
   check-error:
-    Test(_, d, _, [_, _ | _]) -> "Specify only one success condition)" // maybe in the future...
+    Test(_, d, _, [_, _ | _]) -> (d, "Specify only one success condition)") // maybe in the future...
   
   check-error:
-    TestEmpty(_, d) -> "Empty test case"
+    TestEmpty(_, d) -> (<id>, "Empty test case")
   
   check-error:
-    Test(_, _, _, expectations) -> $[No observer defined for [<Language>]]
+    Test(_, d, _, expectations) -> (d, $[No observer defined for [<Language>]])
     where
       not(spt-get-observer)
   


From L.C.L.Kats at tudelft.nl  Wed Mar  2 12:54:05 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Mar 2011 11:54:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22253 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.aster/editor
	org.strategoxt.imp.editors.sdf org.strategoxt.imp.editors.sdf/syntax
	org.strategoxt.imp.editors.strat...
Message-ID: <20110302115405.D14B52B8010@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Mar  2 11:54:05 2011
New Revision: 22253
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22253&sc=1

Log:
enabled incremental parser, although the result is not used yet. only works for grammars with at least one production that has a {incremental} annotation

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aster/editor/Stratego-Attributes-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test3.spt

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aster/editor/Stratego-Attributes-Colorer.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aster/editor/Stratego-Attributes-Colorer.esv	Wed Mar  2 11:52:39 2011	(r22252)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aster/editor/Stratego-Attributes-Colorer.esv	Wed Mar  2 11:54:05 2011	(r22253)
@@ -26,6 +26,10 @@
   _.StringEscape3 : gray  
   _.StringEscape4 : gray
   
+  _.DecoratorNoTerms: 110 110 150
+  _.DecoratorNoArgs:  110 110 150
+  _.Decorator:        110 110 150
+  
   _.Str     : blue
   _.QStr    : blue
   _.QDollar : blue

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml	Wed Mar  2 11:52:39 2011	(r22252)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/plugin.xml	Wed Mar  2 11:54:05 2011	(r22253)
@@ -3,7 +3,7 @@
 
 <plugin>
        <extension point="org.eclipse.imp.runtime.languageDescription">
-          <language extensions="sdf" description="SDF" language="SDF" derivedFrom="DynamicRoot"></language>
+          <language extensions="sdf,def" description="SDF" language="SDF" derivedFrom="DynamicRoot"></language>
        </extension>
        <extension id="org.strategoxt.imp.editors.sdf.parser" name="SDF Parser" point="org.eclipse.imp.runtime.parser">
           <parser class="org.strategoxt.imp.editors.sdf.SDFParseController" language="SDF">

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def	Wed Mar  2 11:52:39 2011	(r22252)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/syntax/SDF.def	Wed Mar  2 11:54:05 2011	(r22253)
@@ -4,6 +4,11 @@
 imports languages/sdf2/syntax/Kernel
 
 exports
+  %% HACK: incremental parsing annotation
+  context-free syntax
+    
+    Symbols "->" result:Symbol Attributes -> Production  {cons("prod"), incremental}
+
   sorts Alias Aliases
   context-free syntax 
     "aliases" Aliases              -> Grammar  {cons("aliases")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	Wed Mar  2 11:52:39 2011	(r22252)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	Wed Mar  2 11:54:05 2011	(r22253)
@@ -4,9 +4,13 @@
   Stratego-Core-Identifiers
   Stratego-Sugar-Terms
 
-exports %% RECOVERY RULES START HERE
+exports %% RECOVERY RULES AND TWEAKS START HERE
+  context-free syntax
+    RuleDef     -> Def {incremental}
+    StrategyDef -> Def {incremental}
+    
   lexical syntax
-      -> ";" {recover, cons("INSERTION")}
+    -> ";" {recover, cons("INSERTION")}
 
 exports
   sorts Overlay

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Wed Mar  2 11:52:39 2011	(r22252)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Wed Mar  2 11:54:05 2011	(r22253)
@@ -13,12 +13,14 @@
 import org.spoofax.jsglr.client.imploder.TermTreeFactory;
 import org.spoofax.jsglr.client.imploder.TreeBuilder;
 import org.spoofax.jsglr.client.incremental.IncrementalSGLR;
+import org.spoofax.jsglr.client.incremental.IncrementalSGLRException;
 import org.spoofax.jsglr.client.incremental.IncrementalSortSet;
 import org.spoofax.jsglr.io.SGLR;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
 import org.spoofax.terms.attachments.ParentTermFactory;
+import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.ParseTableProvider;
 
@@ -35,7 +37,7 @@
 	
 	private SGLR parser;
 	
-	private IncrementalSGLR incrementalParser;
+	private IncrementalSGLR<IStrategoTerm> incrementalParser;
 	
 	private Disambiguator disambiguator;
 	
@@ -49,9 +51,6 @@
 		
 		this.parseTable = parseTable;
 		this.parser = Environment.createSGLR(getParseTable());
-		ITreeFactory factory = ((TreeBuilder) parser.getTreeBuilder()).getFactory();
-		this.incrementalParser = new IncrementalSGLR<IStrategoTerm>(parser, null, factory, IncrementalSortSet.read(getParseTable()));
-		// TODO: use IncrementalSGLR
 		resetState();
 	}
 	
@@ -132,8 +131,12 @@
 			parser.setTreeBuilder(new Asfix2TreeBuilder(Environment.getTermFactory()));
 		} else {
 			assert parser.getTreeBuilder() instanceof TreeBuilder;
-			assert ((TermTreeFactory) ((TreeBuilder) parser.getTreeBuilder()).getFactory()).getOriginalTermFactory()
+			@SuppressWarnings("unchecked")
+			ITreeFactory<IStrategoTerm> treeFactory = ((TreeBuilder) parser.getTreeBuilder()).getFactory();
+			assert ((TermTreeFactory) treeFactory).getOriginalTermFactory()
 				instanceof ParentTermFactory;
+			if (incrementalParser == null || incrementalParser.getParser().getParseTable() != parser.getParseTable())
+				incrementalParser = new IncrementalSGLR<IStrategoTerm>(parser, null, treeFactory, IncrementalSortSet.read(getParseTable()));
 		}
 	}
 	
@@ -149,13 +152,23 @@
 		}
 		
 		try {
-			return (IStrategoTerm) parser.parse(input, filename, getStartSymbol());
+			Debug.startTimer();
+			IStrategoTerm result;
+			try {
+				result = (IStrategoTerm) parser.parse(input, filename, getStartSymbol());
+			} finally {
+				Debug.stopTimer("File parsed: " + new File(filename).getName());
+			}
+
+			testIncrementalParser(input, filename, result);
+			return result;
 		} catch (FilterException e) {
 			if (e.getCause() == null && parser.getDisambiguator().getFilterPriorities()) {
 				Environment.logException("Parse filter failure - disabling priority filters and trying again", e);
 				getDisambiguator().setFilterPriorities(false);
 				try {
-					return (IStrategoTerm) parser.parse(input, filename, getStartSymbol());
+					IStrategoTerm result = (IStrategoTerm) parser.parse(input, filename, getStartSymbol());
+					return result;
 				} finally {
 					getDisambiguator().setFilterPriorities(true);
 				}
@@ -164,4 +177,26 @@
 			}
 		}
 	}
+
+	private void testIncrementalParser(String input, String filename, IStrategoTerm expected) {
+		if (!incrementalParser.getIncrementalSorts().isEmpty()) {
+			Debug.startTimer();
+			try {
+				IStrategoTerm incrementalResult = incrementalParser.parseIncremental(input, filename, getStartSymbol());
+				if (!incrementalResult.equals(expected)) {
+					Environment.logWarning("Incremental parser result inconsistent:\n\n"
+							+ incrementalResult + "\n\nvs. non-incremental:\n\n"
+							+ expected + "\n\n"
+							+ "from:\n\n" + input
+							+ "\n\nwith sorts " + incrementalParser.getIncrementalSorts());
+				}
+			} catch (IncrementalSGLRException e) {
+				Debug.log("Could not incrementally parse AST");
+			} catch (SGLRException e) {
+				Environment.logWarning("Exception in incremental parser", e);
+			} finally {
+				Debug.stopTimer("Incrementally parsed: " + new File(filename).getName());
+			}
+		}
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Mar  2 11:52:39 2011	(r22252)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Mar  2 11:54:05 2011	(r22253)
@@ -276,8 +276,6 @@
 			
 			processMetaFile();
 			
-			Debug.startTimer();
-			
 			if (monitor.isCanceled()) return null;
 			currentTokenizer = new NullTokenizer(input, filename);
 			IStrategoTerm result = doParse(input, filename);
@@ -286,11 +284,9 @@
 			errorHandler.clearErrors();
 			errorHandler.setRecoveryFailed(false);
 			errorHandler.gatherNonFatalErrors(result);
-			parser.resetState(); // clean up memory
+			// UNDONE: parser.resetState(); // clean up memory
 			
 			currentAst = result;
-				
-			Debug.stopTimer("File parsed: " + filename);
 			
 			// TODO: is coloring, then error marking best?
 			
@@ -316,11 +312,11 @@
 				}
 			} catch (RuntimeException e) {
 				Environment.logException("Exception in post-parse events", e);
+			} finally {
+				//if (isStartupParsed) Job.getJobManager().endRule(resource);
+				isAborted = false;
+				parseLock.unlock();
 			}
-			
-			//if (isStartupParsed) Job.getJobManager().endRule(resource);
-			isAborted = false;
-			parseLock.unlock();
 		}
 
 		return monitor.isCanceled() ? null : currentAst;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Wed Mar  2 11:52:39 2011	(r22252)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Wed Mar  2 11:54:05 2011	(r22253)
@@ -167,11 +167,13 @@
 		
 		for (IStrategoTerm n = node2, n2Child = node2; n != null; n2Child = n, n = getParent(n)) {
 			int node1Index = node1Ancestors.indexOf(n);
-			if(node1Index != -1 && node1Ancestors.get(node1Index) == n) // this is a common ancestor, by reference equality
+			if (node1Index != -1 && node1Ancestors.get(node1Index) == n) // common ancestor w/ reference equality
 				return tryCreateListCommonAncestor(n, node1Ancestors, n2Child);
 		}
 		
-		throw new IllegalStateException("Could not find common ancestor for nodes: " + node1 + "," + node2);
+		Environment.logWarning("Could not find common ancestor for nodes: " + node1 + "," + node2);
+		assert false : "Could not find common ancestor for nodes: " + node1 + "," + node2;
+		return getRoot(node1);
 	}
 	
 	private static IStrategoTerm tryCreateListCommonAncestor(IStrategoTerm commonAncestor, List<IStrategoTerm> ancestors1List, IStrategoTerm child2) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test3.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test3.spt	Wed Mar  2 11:52:39 2011	(r22252)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test3.spt	Wed Mar  2 11:54:05 2011	(r22253)
@@ -20,11 +20,6 @@
 test reference resolving
   [[ entity Y { y : Initial } ]] resolves Initial#2 to Initial#1
 
-test stratego with unicode
-  !"i want c??ffee"
-
-test constructor
-  prim("SSL_address",3)
-  
-test appl
-  <get-appl-arguments> (1,2) => [1,2]
\ No newline at end of file
+setup Footer [[
+    entity Z {}
+]]


From L.C.L.Kats at tudelft.nl  Wed Mar  2 12:54:59 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Mar 2011 11:54:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22254 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms
	strategoxt-java-backend/trunk/ja...
Message-ID: <20110302115459.DAF102B8052@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Mar  2 11:54:59 2011
New Revision: 22254
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22254&sc=1

Log:
fixed some Aster runtime problems

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/PathListPool.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/PathListPool.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/PathListPool.java	Wed Mar  2 11:54:05 2011	(r22253)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/PathListPool.java	Wed Mar  2 11:54:59 2011	(r22254)
@@ -13,6 +13,7 @@
 	
 	public static int asyncCacheMisses = 0;
 	
+	// this would be a weak reference, if GWT had one
 	private static PathListPool asyncInstance = new PathListPool();
 	
 	private PathListPool() {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Wed Mar  2 11:54:05 2011	(r22253)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Wed Mar  2 11:54:59 2011	(r22254)
@@ -175,7 +175,8 @@
     }
     
     public IStrategoTerm annotateTerm(IStrategoTerm term, IStrategoList annotations) {
-        if (term.getAnnotations() == annotations) { // cheap check
+        IStrategoList currentAnnos = term.getAnnotations();
+		if (currentAnnos == annotations) { // cheap check
             return term;
         } else if (term.getStorageType() == MAXIMALLY_SHARED) {
 			if (term == EMPTY_LIST) {
@@ -191,8 +192,8 @@
 				} else {
 					return new StrategoString(value, annotations, defaultStorageType);
 				}
-			} else if (term.getAnnotations() == EMPTY_LIST) {
-				return new StrategoAnnotation(this, term, annotations);
+			} else if (currentAnnos == EMPTY_LIST) {
+				return currentAnnos.isEmpty() ? term : new StrategoAnnotation(this, term, annotations);
 			} else if (term instanceof StrategoAnnotation) {
 				term = ((StrategoAnnotation) term).getWrapped();
 				// int storageType = min(defaultStorageType, getStorageType(term));

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Wed Mar  2 11:54:05 2011	(r22253)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Wed Mar  2 11:54:59 2011	(r22254)
@@ -3,9 +3,15 @@
 import java.util.HashSet;
 import java.util.Set;
 
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.VarScope;
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.spoofax.interpreter.library.jsglr.origin.OriginLibrary;
+import org.strategoxt.HybridInterpreter;
 import org.strategoxt.lang.Context;
+import org.strategoxt.lang.InteropSDefT;
+import org.strategoxt.lang.SRTS_EXT_eq_ignore_annos_0_1;
+import org.strategoxt.lang.SRTS_EXT_newint_0_0;
 import org.strategoxt.lang.compat.sglr.SGLRCompatLibrary;
 
 /**
@@ -31,6 +37,14 @@
 				activateComponent(component);
 			}
 		}
+		
+		// HACK: make some of the built-in strategies available to the interpreter
+		IContext iContext = HybridInterpreter.getContext(context);
+		if (iContext != null) {
+			VarScope varScope = iContext.getVarScope();
+		    varScope.addSVar("SRTS_EXT_newint_0_0", new InteropSDefT(SRTS_EXT_newint_0_0.instance, iContext));
+		    varScope.addSVar("SRTS_EXT_eq_ignore_annos_0_1", new InteropSDefT(SRTS_EXT_eq_ignore_annos_0_1.instance, iContext));
+		}
 	}
 
 	public void registerComponent(String component) {

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.


From m.dejonge at tudelft.nl  Wed Mar  2 15:01:15 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Mar 2011 14:01:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22255 -
	sglr-recovery/trunk/Evaluate/grammars
Message-ID: <20110302140115.848E67F80AE@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Mar  2 14:01:15 2011
New Revision: 22255
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22255&sc=1

Log:


Added:
   sglr-recovery/trunk/Evaluate/grammars/
   sglr-recovery/trunk/Evaluate/grammars/Java-15.def
   sglr-recovery/trunk/Evaluate/grammars/Java-SQL.def
   sglr-recovery/trunk/Evaluate/grammars/StrategoJava.def
   sglr-recovery/trunk/Evaluate/grammars/StrategoJava.pp
   sglr-recovery/trunk/Evaluate/grammars/WebDSL.def

Added: sglr-recovery/trunk/Evaluate/grammars/Java-15.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/grammars/Java-15.def	Wed Mar  2 14:01:15 2011	(r22255)
@@ -0,0 +1,1696 @@
+definition
+module languages/java-15/expressions/Priorities
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/expressions/Main
+
+exports
+  context-free priorities
+      Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr
+    > {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      } 
+
+  context-free priorities
+      {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      }
+    > { "(" PrimType ")" Expr -> Expr    
+        "(" RefType  ")" Expr -> Expr
+      }
+
+  context-free priorities
+      "(" PrimType ")" Expr -> Expr
+    > {left:
+        Expr "*" Expr -> Expr
+        Expr "/" Expr -> Expr
+        Expr "%" Expr -> Expr
+      } 
+
+  context-free priorities
+      "(" RefType ")" Expr -> Expr 
+    > {
+        "++" Expr -> Expr
+        "--" Expr -> Expr
+        "+"  Expr -> Expr
+        "-"  Expr -> Expr
+      }
+
+  context-free priorities
+    {
+      Expr ArraySubscript -> ArrayAccess
+      Expr "." Id -> FieldAccess
+      Expr "." TypeArgs? Id -> MethodSpec
+    }
+  > {right:
+      Expr "++" -> Expr
+      Expr "--" -> Expr
+    }
+  > {
+      "++" Expr -> Expr
+      "--" Expr -> Expr
+      "+"  Expr -> Expr
+      "-"  Expr -> Expr
+      "~"  Expr -> Expr
+      "!"  Expr -> Expr
+    }
+  > {left:
+      Expr "*" Expr -> Expr
+      Expr "/" Expr -> Expr
+      Expr "%" Expr -> Expr
+    } 
+  > {left:
+      Expr "+" Expr -> Expr
+      Expr "-" Expr -> Expr
+    }
+  > {left:
+      Expr "<<"  Expr -> Expr
+      Expr ">>"  Expr -> Expr
+      Expr ">>>" Expr -> Expr
+    }
+  > {left:
+      Expr "instanceof" RefType -> Expr
+      Expr "<"   Expr -> Expr
+      Expr ">"   Expr -> Expr
+      Expr "<="  Expr -> Expr
+      Expr ">="  Expr -> Expr
+    }
+  > {left:
+      Expr "=="  Expr -> Expr
+      Expr "!="  Expr -> Expr
+    }
+  >   Expr "&"   Expr -> Expr
+  >   Expr "^"   Expr -> Expr
+  >   Expr "|"   Expr -> Expr
+  >   Expr "&&"  Expr -> Expr
+  >   Expr "||"  Expr -> Expr
+  >   Expr CondMid Expr -> Expr
+  > {right:
+      LHS "="    Expr -> Expr
+      LHS "*="   Expr -> Expr
+      LHS "/="   Expr -> Expr
+      LHS "%="   Expr -> Expr
+      LHS "+="   Expr -> Expr
+      LHS "-="   Expr -> Expr
+      LHS "<<="  Expr -> Expr
+      LHS ">>="  Expr -> Expr
+      LHS ">>>=" Expr -> Expr
+      LHS "&="   Expr -> Expr
+      LHS "^="   Expr -> Expr
+      LHS "|="   Expr -> Expr
+    }
+
+module languages/java-15/expressions/Restrictions
+exports
+  lexical restrictions
+    "+" -/- [\+]
+    "-" -/- [\-]
+    "/" -/- [\/]
+
+module languages/java-15/expressions/AssignmentOperators
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts LHS
+  context-free syntax
+    LHS "="    Expr -> Expr {cons("Assign")}
+    LHS "*="   Expr -> Expr {cons("AssignMul")}
+    LHS "/="   Expr -> Expr {cons("AssignDiv")}
+    LHS "%="   Expr -> Expr {cons("AssignRemain")}
+    LHS "+="   Expr -> Expr {cons("AssignPlus")}
+    LHS "-="   Expr -> Expr {cons("AssignMinus")}
+    LHS "<<="  Expr -> Expr {cons("AssignLeftShift")}
+    LHS ">>="  Expr -> Expr {cons("AssignRightShift")}
+    LHS ">>>=" Expr -> Expr {cons("AssignURightShift")}
+    LHS "&="   Expr -> Expr {cons("AssignAnd")}
+    LHS "^="   Expr -> Expr {cons("AssignExcOr")}
+    LHS "|="   Expr -> Expr {cons("AssignOr")}
+
+    ExprName    -> LHS
+    FieldAccess -> LHS
+    ArrayAccess -> LHS
+
+
+module languages/java-15/expressions/BinaryOperators
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/types/Main
+
+exports
+  sorts CondMid
+  context-free syntax
+    Expr "instanceof" RefType -> Expr {cons("InstanceOf")}
+
+    Expr "*"   Expr -> Expr  {left, cons("Mul")}
+    Expr "/"   Expr -> Expr  {left, cons("Div")}
+    Expr "%"   Expr -> Expr  {left, cons("Remain")}
+
+    Expr "+"   Expr -> Expr  {left, cons("Plus")}
+    Expr "-"   Expr -> Expr  {left, cons("Minus")}
+
+    Expr "<<"  Expr -> Expr  {left, cons("LeftShift")}
+    Expr ">>"  Expr -> Expr  {left, cons("RightShift")}
+    Expr ">>>" Expr -> Expr  {left, cons("URightShift")}
+
+    Expr "<"   Expr -> Expr  {left, cons("Lt")}
+    Expr ">"   Expr -> Expr  {left, cons("Gt")}
+    Expr "<="  Expr -> Expr  {left, cons("LtEq")}
+    Expr ">="  Expr -> Expr  {left, cons("GtEq")}
+    Expr "=="  Expr -> Expr  {left, cons("Eq")}
+    Expr "!="  Expr -> Expr  {left, cons("NotEq")}
+
+    Expr "&&"  Expr -> Expr  {left, cons("LazyAnd")}
+    Expr "||"  Expr -> Expr  {left, cons("LazyOr")}
+
+    Expr "&" Expr -> Expr {left, cons("And")}
+    Expr "^" Expr -> Expr {left, cons("ExcOr")}
+    Expr "|" Expr -> Expr {left, cons("Or")}
+
+    %% todo JFR-30
+    Expr CondMid Expr -> Expr {right, cons("Cond")}
+    "?" Expr ":" -> CondMid {bracket}
+
+module languages/java-15/expressions/UnaryOperators
+imports 
+  languages/java-15/expressions/Main
+exports
+  context-free syntax
+    "+" Expr -> Expr {cons("Plus")}
+    "-" Expr -> Expr {cons("Minus")}
+
+    "++" Expr -> Expr {cons("PreIncr")}
+    "--" Expr -> Expr {cons("PreDecr")}
+
+    "~" Expr -> Expr {cons("Complement")}
+    "!" Expr -> Expr {cons("Not")}
+
+    "(" PrimType ")" Expr -> Expr {cons("CastPrim")}
+    "(" RefType  ")" Expr -> Expr {cons("CastRef")}
+
+module languages/java-15/expressions/Postfix
+imports 
+  languages/java-15/expressions/Main
+
+exports
+  context-free syntax
+    ExprName  -> Expr
+    Expr "++" -> Expr {cons("PostIncr")}
+    Expr "--" -> Expr {cons("PostDecr")}
+
+module languages/java-15/expressions/MethodInvocation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts MethodSpec
+  context-free syntax
+    MethodSpec "(" {Expr ","}* ")" -> Expr {cons("Invoke")}
+
+                               MethodName -> MethodSpec {cons("Method")}
+                    Expr "." TypeArgs? Id -> MethodSpec {cons("Method")}
+                 "super" "." TypeArgs? Id -> MethodSpec {cons("SuperMethod")}
+    TypeName "." "super" "." TypeArgs? Id -> MethodSpec {cons("QSuperMethod")}
+                 AmbName "." TypeArgs  Id -> MethodSpec {cons("GenericMethod")}
+
+  %% This priority forbids a Expr "." MethodSpec if the expression is a plain ExprName.
+  %% This solves an ambiguity with the MethodName and AmbName . TypeArgs MethodSpecs.
+  %% foo.bar.fred() results in a MethodName MethodSpec.
+  %% (foo.bar).fred() results in the Expr. MethodSpec
+  %% foo.bar.<T>fred() results in a GenericMethod
+  context-free priorities
+      Expr "." TypeArgs? Id -> MethodSpec
+    > ExprName  -> Expr
+
+
+module languages/java-15/expressions/ArrayAccess
+imports
+  languages/java-15/expressions/Main
+exports
+  sorts
+    ArrayAccess
+    ArraySubscript
+
+  context-free syntax
+    ArrayAccess -> Expr
+
+    %% todo: JFR-29
+    Expr ArraySubscript -> ArrayAccess {cons("ArrayAccess")}
+    "[" Expr "]" -> ArraySubscript {bracket}
+
+    ArrayCreationExpr ArraySubscript -> ArrayAccess {reject}
+
+module languages/java-15/expressions/FieldAccess
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts FieldAccess
+  context-free syntax
+    FieldAccess -> Expr
+
+  context-free syntax
+
+                    Expr "." Id -> FieldAccess {cons("Field")}
+                ExprName "." Id -> FieldAccess {reject}
+                 "super" "." Id -> FieldAccess {cons("SuperField")}
+    TypeName "." "super" "." Id -> FieldAccess {cons("QSuperField")}
+
+module languages/java-15/expressions/ArrayCreation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ArrayCreationExpr
+    ArrayBaseType
+    Dim
+    DimExpr
+
+  context-free syntax
+    ArrayCreationExpr     -> Expr
+
+    "new" ArrayBaseType DimExpr+ Dim*  -> ArrayCreationExpr {cons("NewArray")}
+    "new" ArrayBaseType Dim+ ArrayInit -> ArrayCreationExpr {cons("NewArray")}
+
+    PrimType -> ArrayBaseType
+    TypeName -> ArrayBaseType
+    TypeName "<" "?" ">" -> ArrayBaseType {cons("UnboundWld")}
+
+    "[" Expr "]" -> DimExpr {cons("Dim")}
+    "[" "]"      -> Dim     {cons("Dim")}
+
+module languages/java-15/expressions/ClassInstanceCreation
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  context-free syntax
+
+             "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody? -> Expr {cons("NewInstance")}
+    Expr "." "new" TypeArgs? Id         TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("QNewInstance")}
+
+module languages/java-15/expressions/Primary
+imports
+  languages/java-15/lexical/literals/Main
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  %%%
+   %% Section 15.8.1: Lexical Literals
+   %%%
+  sorts Literal
+  context-free syntax
+    Literal -> Expr {cons("Lit")}
+
+    IntLiteral    -> Literal
+    FloatLiteral  -> Literal
+    BoolLiteral   -> Literal 
+    CharLiteral   -> Literal
+    StringLiteral -> Literal
+    NullLiteral   -> Literal
+
+  %%%
+   %% Section 15.8.2: Class Literals
+   %%%
+  sorts ClassLiteral
+  context-free syntax
+    ClassLiteral -> Literal
+    Type   "." "class" -> ClassLiteral {cons("Class")}
+    "void" "." "class" -> ClassLiteral {cons("VoidClass")}
+
+  %%%
+   %% Section 15.8.3/4: (Qualified this)
+   %%%
+  context-free syntax
+                 "this" -> Expr {cons("This")}
+    TypeName "." "this" -> Expr {cons("QThis")}
+
+  %%%
+   %% Section 15.8.5: Parenthesized Expression
+   %%%
+  context-free syntax
+    "(" Expr ")"          -> Expr {bracket}
+
+module languages/java-15/expressions/Main
+imports
+  languages/java-15/expressions/Primary
+  languages/java-15/expressions/ClassInstanceCreation
+  languages/java-15/expressions/ArrayCreation
+  languages/java-15/expressions/FieldAccess
+  languages/java-15/expressions/ArrayAccess
+  languages/java-15/expressions/MethodInvocation
+  languages/java-15/expressions/Postfix
+  languages/java-15/expressions/UnaryOperators
+  languages/java-15/expressions/BinaryOperators
+  languages/java-15/expressions/AssignmentOperators
+  languages/java-15/expressions/Restrictions
+  languages/java-15/expressions/Priorities
+
+exports
+  sorts
+    Expr
+
+module languages/java-15/statements/Main
+imports
+  languages/java-15/statements/Blocks
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+
+module languages/java-15/arrays/Main
+imports
+  languages/java-15/arrays/ArrayInitializers
+
+
+module languages/java-15/interfaces/Main
+imports
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+
+module languages/java-15/classes/Main
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+
+
+module languages/java-15/packages/PackageDeclarations
+imports
+  languages/java-15/names/Main
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    PackageDec
+
+  context-free syntax
+    Anno* "package" PackageName ";" -> PackageDec {cons("PackageDec")}
+
+module languages/java-15/packages/ImportDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+
+exports
+  sorts
+    ImportDec
+
+  context-free syntax
+    "import" TypeName                  ";"  -> ImportDec {cons("TypeImportDec")}
+    "import" PackageName       "." "*" ";"  -> ImportDec {cons("TypeImportOnDemandDec")}
+    "import" "static" TypeName "." Id  ";"  -> ImportDec {cons("StaticImportDec")}
+    "import" "static" TypeName "." "*" ";"  -> ImportDec {cons("StaticImportOnDemandDec")}
+
+module languages/java-15/interfaces/AnnotationTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    AnnoDec
+    AnnoDecHead
+
+  context-free syntax
+    AnnoDecHead "{" AnnoElemDec* "}" -> AnnoDec {cons("AnnoDec")}
+    (Anno | InterfaceMod)* "@" "interface" Id -> AnnoDecHead {cons("AnnoDecHead")}
+
+  sorts
+    AnnoElemDec
+    DefaultVal
+
+  context-free syntax
+    AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" -> AnnoElemDec {cons("AnnoMethodDec")}
+
+    ConstantDec  -> AnnoElemDec
+    ClassDec     -> AnnoElemDec
+    InterfaceDec -> AnnoElemDec
+    EnumDec      -> AnnoElemDec
+    AnnoDec      -> AnnoElemDec
+    ";"          -> AnnoElemDec {cons("Semicolon")}
+
+    "default" ElemVal -> DefaultVal {cons("DefaultVal")}
+
+module languages/java-15/interfaces/AbstractMethodDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+
+exports
+  sorts
+    AbstractMethodDec
+    AbstractMethodMod
+
+  context-free syntax
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Throws? ";" -> AbstractMethodDec {cons("AbstractMethodDec")}
+
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" -> AbstractMethodDec {cons("DeprAbstractMethodDec")}
+
+    Public   -> AbstractMethodMod
+    Abstract -> AbstractMethodMod
+
+
+
+module languages/java-15/interfaces/ConstantDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    ConstantDec
+    ConstantMod
+
+  context-free syntax
+    (Anno | ConstantMod)* Type {VarDec ","}+ ";" -> ConstantDec {cons("ConstantDec")}
+
+    Public -> ConstantMod
+    Static -> ConstantMod
+    Final  -> ConstantMod
+
+
+module languages/java-15/interfaces/InterfaceDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    InterfaceDec
+    InterfaceDecHead
+    ExtendsInterfaces
+    InterfaceMemberDec
+    InterfaceMod
+
+  context-free syntax
+    AnnoDec -> InterfaceDec
+
+    InterfaceDecHead "{" InterfaceMemberDec* "}" -> InterfaceDec {cons("InterfaceDec")}
+
+    (Anno | InterfaceMod)* "interface" Id TypeParams? ExtendsInterfaces? -> InterfaceDecHead {cons("InterfaceDecHead")}
+    "extends" {InterfaceType ","}+ -> ExtendsInterfaces {cons("ExtendsInterfaces")}
+
+  context-free syntax
+    ConstantDec       -> InterfaceMemberDec
+    AbstractMethodDec -> InterfaceMemberDec
+    ClassDec          -> InterfaceMemberDec
+    InterfaceDec      -> InterfaceMemberDec
+    ";"               -> InterfaceMemberDec {cons("Semicolon")}
+
+  context-free syntax
+    Public         -> InterfaceMod
+    Protected      -> InterfaceMod
+    Private        -> InterfaceMod
+    Abstract       -> InterfaceMod
+    Static         -> InterfaceMod
+    StrictFP       -> InterfaceMod
+
+
+module languages/java-15/classes/EnumDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  sorts
+    EnumDec
+    EnumDecHead
+    EnumBody
+    EnumConst
+    EnumConstArgs
+    EnumBodyDecs
+
+  context-free syntax
+    EnumDecHead EnumBody -> EnumDec {cons("EnumDec")}
+
+    (Anno | ClassMod)* "enum" Id Interfaces? -> EnumDecHead {cons("EnumDecHead")}
+
+    "{" {EnumConst ","}*     EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+    "{" {EnumConst ","}* "," EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+
+    Id EnumConstArgs? ClassBody?  -> EnumConst {cons("EnumConst")}
+    "(" {Expr ","}* ")"  -> EnumConstArgs {bracket}
+
+    ";" ClassBodyDec* -> EnumBodyDecs {cons("EnumBodyDecs")}
+
+module languages/java-15/classes/ConstructorDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ConstrDec
+    ConstrBody
+    ConstrHead
+    ConstrInv
+
+  context-free syntax
+    ConstrHead ConstrBody ->  ConstrDec {cons("ConstrDec")}
+    (Anno | ConstrMod)* TypeParams? Id "(" {FormalParam ","}* ")" Throws? -> ConstrHead {cons("ConstrDecHead")}
+
+
+    "{" ConstrInv? BlockStm* "}" -> ConstrBody {cons("ConstrBody")}
+
+             TypeArgs? "this"  "(" {Expr ","}* ")" ";" -> ConstrInv {cons("AltConstrInv")}
+             TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("SuperConstrInv")}
+    Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("QSuperConstrInv")}
+
+  sorts ConstrMod
+  context-free syntax  
+    Public    -> ConstrMod
+    Protected -> ConstrMod
+    Private   -> ConstrMod
+
+
+module languages/java-15/classes/StaticInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    StaticInit
+
+  context-free syntax
+    "static" Block -> StaticInit   {cons("StaticInit")}
+
+module languages/java-15/classes/InstanceInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    InstanceInit
+
+  context-free syntax
+    Block -> InstanceInit {cons("InstanceInit")}
+
+module languages/java-15/statements/Statements
+imports
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Blocks
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Stm ExprStm
+
+  context-free syntax
+    Block      -> Stm
+
+  %%%
+   %% Section 14.6: The Empty Statement
+   %%%
+  context-free syntax
+    ";"        -> Stm {cons("Empty")}
+
+  %%%
+   %% Section 14.7: Labeled Statements
+   %%%
+  context-free syntax
+    Id ":" Stm -> Stm {cons("Labeled")}
+
+  %%%
+   %% Section 14.8: Expressions Statements
+   %%%
+  context-free syntax
+    Expr ";"   -> ExprStm {cons("ExprStm")}
+    ExprStm    -> Stm
+
+  %%%
+   %% Section 14.9: The If Statement
+   %%%
+  context-free syntax
+    "if" "(" Expr ")" Stm             -> Stm {prefer, cons("If")}
+    "if" "(" Expr ")" Stm  "else" Stm -> Stm {cons("If")}
+
+  %%%
+   %% Section 14.10: The Assert Statement
+   %%%
+  context-free syntax
+    "assert" Expr          ";" -> Stm  {cons("AssertStm")}
+    "assert" Expr ":" Expr ";" -> Stm  {cons("AssertStm")}
+
+
+  %%%
+   %% Section 14.11: The Switch Statement
+   %%%
+  sorts SwitchBlock SwitchGroup SwitchLabel
+  context-free syntax
+    "switch" "(" Expr ")" SwitchBlock -> Stm {cons("Switch")}
+    "{" SwitchGroup* SwitchLabel* "}" -> SwitchBlock {cons("SwitchBlock")}
+    SwitchLabel+ BlockStm+ -> SwitchGroup  {cons("SwitchGroup")}
+
+    "case" Expr ":" -> SwitchLabel {cons("Case")}
+    "default"   ":" -> SwitchLabel {cons("Default")}
+
+  %%%
+   %% Section 14.12: The While Statement
+   %%%
+  context-free syntax
+    "while" "(" Expr ")" Stm -> Stm {cons("While")}
+
+  %%%
+   %% Section 14.13: The Do Statement
+   %%%
+  context-free syntax
+  "do" Stm "while" "(" Expr ")" ";" -> Stm {cons("DoWhile")}
+
+
+  %%%
+   %% Section 14.14: The For Statement
+   %%%
+  context-free syntax
+    "for" "(" LocalVarDec ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+    "for" "(" {Expr ","}* ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+
+    "for" "(" FormalParam ":" Expr ")" Stm -> Stm {cons("ForEach")}
+
+  %%%
+   %% Section 14.15: The Break Statement
+   %%%
+  context-free syntax
+    "break"    Id? ";"   -> Stm {cons("Break")}
+
+  %%%
+   %% Section 14.16: The Continue Statement
+   %%%
+  context-free syntax
+    "continue" Id? ";"   -> Stm {cons("Continue")}
+
+  %%%
+   %% Section 14.17: The Return Statement
+   %%%
+  context-free syntax
+    "return"   Expr? ";" -> Stm {cons("Return")}
+
+  %%%
+   %% Section 14.18: The Throw Statement
+   %%%
+  context-free syntax
+    "throw"    Expr  ";" -> Stm {cons("Throw")}
+
+  %%%
+   %% Section 14.19: The Synchronized Statement
+   %%%
+  context-free syntax
+    "synchronized" "(" Expr ")" Block -> Stm {cons("Synchronized")}
+
+  %%%
+   %% Section 14.20: The Try Statement
+   %%%
+  sorts CatchClause
+  context-free syntax
+    "try" Block CatchClause+ -> Stm {cons("Try")}
+    "try" Block CatchClause* "finally" Block -> Stm {cons("Try")}
+    "catch" "(" FormalParam ")" Block -> CatchClause {cons("Catch")}
+
+module languages/java-15/statements/LocalVariableDeclarations
+imports
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts
+    LocalVarDecStm
+    LocalVarDec
+
+  context-free syntax
+    LocalVarDec ";" -> LocalVarDecStm {cons("LocalVarDecStm")}
+    (Anno | VarMod)* Type {VarDec ","}+ -> LocalVarDec {cons("LocalVarDec")}
+    
+    %% Disambiguate List<T> i;
+    Expr "<" Expr ">" Expr ";" -> ExprStm {reject}
+
+module languages/java-15/statements/Blocks
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+exports
+  sorts
+    BlockStm
+    Block
+
+  context-free syntax
+    "{" BlockStm* "}" -> Block {cons("Block")}
+
+    LocalVarDecStm  -> BlockStm 
+    ClassDec        -> BlockStm {cons("ClassDecStm")}
+    Stm             -> BlockStm
+
+
+module languages/java-15/classes/MethodDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    MethodDec
+    MethodDecHead
+    ResultType
+
+  context-free syntax
+    MethodDecHead MethodBody -> MethodDec {cons("MethodDec")}
+
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws?      -> MethodDecHead {cons("MethodDecHead")}
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? -> MethodDecHead {cons("DeprMethodDecHead")}
+
+    Type   -> ResultType
+    "void" -> ResultType {cons("Void")}
+
+  sorts FormalParam
+  context-free syntax
+    (Anno | VarMod)* Type       VarDecId -> FormalParam {cons("Param")}
+    (Anno | VarMod)* Type "..." VarDecId -> FormalParam {cons("VarArityParam")}
+
+  sorts VarMod
+  context-free syntax
+    Final -> VarMod
+
+  sorts MethodMod
+  context-free syntax
+    Public         -> MethodMod
+    Protected      -> MethodMod
+    Private        -> MethodMod
+
+    Abstract       -> MethodMod
+    Static         -> MethodMod
+    Final          -> MethodMod
+    Synchronized   -> MethodMod
+    Native         -> MethodMod
+    StrictFP       -> MethodMod
+
+  %%%
+   %% Section 8.4.6: Method Throws
+   %%%
+  sorts
+    Throws
+    ExceptionType
+
+  context-free syntax
+    "throws" {ExceptionType ","}+ -> Throws {cons("ThrowsDec")}
+    ClassType -> ExceptionType
+    %% TypeVar -> ExceptionType
+
+  %%%
+   %% Section 8.4.7: Method Body
+   %%% 
+  sorts MethodBody
+  context-free syntax
+    Block -> MethodBody
+    ";"   -> MethodBody {cons("NoMethodBody")}
+
+module languages/java-15/arrays/ArrayInitializers
+imports
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts ArrayInit
+  context-free syntax
+    "{" {VarInit ","}*     "}" -> ArrayInit {cons("ArrayInit")}
+    "{" {VarInit ","}* "," "}" -> ArrayInit {cons("ArrayInit")}
+
+module languages/java-15/interfaces/Annotations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Anno
+    ElemVal
+    ElemValPair
+
+  context-free syntax
+    "@" TypeName "(" {ElemValPair ","}* ")" -> Anno {cons("Anno")}
+    "@" TypeName "(" ElemVal ")"            -> Anno {cons("SingleElemAnno")}
+    "@" TypeName                            -> Anno {cons("MarkerAnno")}
+
+  context-free syntax  
+    Id "=" ElemVal -> ElemValPair {cons("ElemValPair")}
+
+    Expr -> ElemVal
+    Anno -> ElemVal
+
+    "{" {ElemVal ","}*     "}" -> ElemVal {cons("ElemValArrayInit")}
+    "{" {ElemVal ","}* "," "}" -> ElemVal {cons("ElemValArrayInit")}
+
+    %% Assignments are not allowed as element values.
+    LHS "=" Expr -> ElemVal {reject}
+
+module languages/java-15/classes/FieldDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/interfaces/Annotations
+  languages/java-15/arrays/ArrayInitializers
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    FieldDec
+    VarDec
+    VarDecId
+    Dim
+    VarInit
+
+  context-free syntax
+    (Anno | FieldMod)* Type { VarDec ","}+ ";" -> FieldDec {cons("FieldDec")}
+
+    VarDecId             -> VarDec {cons("VarDec")}
+    VarDecId "=" VarInit -> VarDec {cons("VarDec")}
+
+    Id      -> VarDecId
+    Id Dim+ -> VarDecId {cons("ArrayVarDecId")}
+
+    "[" "]" -> Dim {cons("Dim")}
+
+    Expr      -> VarInit
+    ArrayInit -> VarInit
+
+  sorts FieldMod
+  context-free syntax
+    Public    -> FieldMod
+    Protected -> FieldMod
+    Private   -> FieldMod
+
+    Static    -> FieldMod
+    Final     -> FieldMod
+    Transient -> FieldMod
+    Volatile  -> FieldMod
+
+
+module languages/java-15/classes/ClassDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/InstanceInitializers
+  languages/java-15/classes/StaticInitializers
+  languages/java-15/classes/ConstructorDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    ClassDec
+    ClassBody
+    ClassDecHead
+
+  context-free syntax
+    EnumDec -> ClassDec
+
+    ClassDecHead ClassBody -> ClassDec {cons("ClassDec")}
+    "{" ClassBodyDec* "}" -> ClassBody {cons("ClassBody")}
+
+    (Anno | ClassMod)* "class" Id  TypeParams? Super? Interfaces? -> ClassDecHead {cons("ClassDecHead")}
+
+  %% 8.1.1: Class Modifiers
+  sorts ClassMod
+  context-free syntax
+    Abstract  -> ClassMod
+    Public    -> ClassMod
+    Protected -> ClassMod
+    Private   -> ClassMod
+    Static    -> ClassMod
+    Final     -> ClassMod
+    StrictFP  -> ClassMod
+
+  %% 8.1.4: Superclasses and Subclasses
+  sorts Super
+  context-free syntax
+
+    "extends" ClassType -> Super {cons("SuperDec")}
+
+  %% 8.1.5: Superinterfaces
+  sorts Interfaces
+  context-free syntax
+    "implements" {InterfaceType ","}+ -> Interfaces {cons("ImplementsDec")}
+
+
+  %% 8.1.6: Class Body and Member Declarations
+  sorts
+    ClassBodyDec
+    ClassMemberDec
+
+  context-free syntax
+    ClassMemberDec -> ClassBodyDec
+    InstanceInit   -> ClassBodyDec
+    StaticInit     -> ClassBodyDec
+    ConstrDec      -> ClassBodyDec
+
+  context-free syntax
+    FieldDec     -> ClassMemberDec
+    MethodDec    -> ClassMemberDec
+    ClassDec     -> ClassMemberDec
+    InterfaceDec -> ClassMemberDec
+    ";"          -> ClassMemberDec {cons("Semicolon")}
+
+module languages/java-15/packages/TypeDeclarations
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    TypeDec
+
+  context-free syntax
+    ClassDec      -> TypeDec
+    InterfaceDec  -> TypeDec
+    ";"           -> TypeDec {cons("Semicolon")}
+
+module languages/java-15/packages/CompilationUnits
+imports
+  languages/java-15/packages/PackageDeclarations
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/TypeDeclarations
+
+exports
+  sorts
+    CompilationUnit
+
+  context-free syntax
+    PackageDec? ImportDec* TypeDec+ -> CompilationUnit   {cons("CompilationUnit")}
+
+module languages/java-15/packages/Main
+imports
+  languages/java-15/packages/CompilationUnits
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/PackageDeclarations
+
+
+module languages/java-15/names/Main
+imports
+  languages/java-15/lexical/Identifiers
+exports
+  sorts PackageName
+  context-free syntax
+    {Id "."}+ -> PackageName {cons("PackageName")}
+
+  sorts
+    TypeName
+    ExprName
+    MethodName
+    PackageOrTypeName
+    AmbName
+
+  context-free syntax
+    Id             -> AmbName {cons("AmbName")}
+    AmbName "." Id -> AmbName {cons("AmbName")}
+
+    Id                       -> TypeName {cons("TypeName")}
+    PackageOrTypeName "." Id -> TypeName {cons("TypeName")}
+
+    Id             -> ExprName {cons("ExprName")}
+    AmbName "." Id -> ExprName {cons("ExprName")}
+
+    Id             -> MethodName  {cons("MethodName")}
+    AmbName "." Id -> MethodName  {cons("MethodName")}
+
+    Id                       -> PackageOrTypeName {cons("PackageOrTypeName")}
+    PackageOrTypeName "." Id -> PackageOrTypeName {cons("PackageOrTypeName")}
+
+module languages/java-15/types/ParameterizedTypes
+imports
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeArgs
+    ActualTypeArg
+    WildcardBound
+    
+  context-free syntax
+    "<" {ActualTypeArg ","}+ ">" -> TypeArgs {cons("TypeArgs")}
+
+    Type               -> ActualTypeArg
+    "?" WildcardBound? -> ActualTypeArg {cons("Wildcard")}
+
+    "extends" RefType -> WildcardBound {cons("WildcardUpperBound")}
+    "super"   RefType -> WildcardBound {cons("WildcardLowerBound")}
+
+module languages/java-15/types/TypeVariables
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeParams
+    TypeParam
+    TypeBound
+    TypeVarId
+  
+  context-free syntax
+    TypeVarId TypeBound? -> TypeParam {cons("TypeParam")}
+    
+    "extends" {ClassOrInterfaceType "&"}+ -> TypeBound {cons("TypeBound")}
+    "<" {TypeParam ","}+ ">" -> TypeParams {cons("TypeParams")}
+
+    Id -> TypeVarId
+    
+
+module languages/java-15/types/ReferenceTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main  
+  languages/java-15/types/ParameterizedTypes
+  languages/java-15/types/TypeVariables
+
+
+exports
+  sorts
+    RefType
+    ClassOrInterfaceType
+    ClassType
+    InterfaceType
+    TypeDecSpec
+    ArrayType
+    TypeVar
+
+  context-free syntax
+    ClassOrInterfaceType -> RefType
+    ArrayType            -> RefType
+    
+    %% This production rule is highly ambiguous, since every
+    %% TypeVar can be a ClassOrInterfaceType. A later disambiguation
+    %% phase has to find out if a ClassOrInterfaceType is in fact
+    %% a TypeVar.
+    
+    %% TypeVar -> RefType {avoid}
+
+  context-free syntax
+  
+    %% ClassType and InterfaceType are ambiguous. We modify the
+    %% production of ClassOrInterfaceType to make this ambiguity explicit.
+    
+    TypeDecSpec TypeArgs? -> ClassOrInterfaceType {cons("ClassOrInterfaceType")}
+    TypeDecSpec TypeArgs? -> ClassType {cons("ClassType")}
+    TypeDecSpec TypeArgs? -> InterfaceType {cons("InterfaceType")}
+
+    TypeName -> TypeDecSpec
+    TypeDecSpec TypeArgs "." Id -> TypeDecSpec {cons("Member")}
+    
+  context-free syntax    
+    TypeVarId -> TypeVar {cons("TypeVar")}
+
+  context-free syntax
+    Type "[" "]" -> ArrayType  {cons("ArrayType")}
+
+module languages/java-15/types/PrimitiveTypes
+exports
+  sorts
+    PrimType
+    NumType
+    IntType  
+    FloatType
+
+  context-free syntax
+    NumType   -> PrimType
+    "boolean" -> PrimType {cons("Boolean")}
+
+    IntType   -> NumType
+    FloatType -> NumType
+
+    "byte"   -> IntType   {cons("Byte")}
+    "short"  -> IntType   {cons("Short")}
+    "int"    -> IntType   {cons("Int")}
+    "long"   -> IntType   {cons("Long")}
+    "char"   -> IntType   {cons("Char")}
+    "float"  -> FloatType {cons("Float")}
+    "double" -> FloatType {cons("Double")}
+
+module languages/java-15/types/Main
+imports
+  languages/java-15/types/PrimitiveTypes
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/types/ParameterizedTypes
+
+exports
+  sorts
+    Type
+
+  context-free syntax
+    PrimType -> Type
+    RefType  -> Type
+
+
+module languages/java-15/lexical/literals/NullLiteral
+exports
+  sorts NullLiteral
+  context-free syntax
+    "null"  -> NullLiteral {cons("Null")}
+
+module languages/java-15/lexical/literals/StringLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    StringLiteral
+    StringPart
+    StringChars
+    FooStringChars
+
+  syntax
+    StringLiteral -> <StringLiteral-CF>
+    
+    "\"" StringPart* "\"" -> StringLiteral {cons("String")}
+    StringChars    -> StringPart {cons("Chars")}
+    UnicodeEscape  -> StringPart
+    EscapeSeq      -> StringPart
+
+    <FooStringChars-LEX> -> StringChars
+    ~[\"\\\n\13]+  -> <FooStringChars-LEX>
+
+  restrictions
+    StringChars -/- ~[\"\\\n\13]
+
+module languages/java-15/lexical/literals/EscapeSequences
+imports
+
+exports
+  sorts
+    EscapeSeq
+    NamedEscape
+    OctaEscape
+    LastOcta
+
+  syntax
+    OctaEscape  -> EscapeSeq
+    NamedEscape -> EscapeSeq
+
+    "\\" [btnfr\"\'\\]     -> NamedEscape {cons("NamedEscape")}
+    "\\" LastOcta          -> OctaEscape  {cons("OctaEscape1")}
+    "\\" [0-3] LastOcta    -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [4-7] [0-7]       -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [0-3] [0-7] [0-7] -> OctaEscape  {cons("OctaEscape3")}
+
+    [0-7] -> LastOcta
+
+  restrictions
+    LastOcta -/- [0-7]
+
+module languages/java-15/lexical/literals/CharacterLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    CharLiteral
+    CharContent
+    SingleChar
+
+  syntax
+    CharLiteral   -> <CharLiteral-CF>
+
+    "'" CharContent "'" -> CharLiteral {cons("Char")}
+    SingleChar    -> CharContent {cons("Single")}
+    UnicodeEscape -> CharContent
+    EscapeSeq     -> CharContent
+
+    ~[\r\n\'\\] -> SingleChar
+
+
+module languages/java-15/lexical/literals/BooleanLiterals
+exports
+  sorts
+    Bool
+    BoolLiteral
+
+  context-free syntax
+    Bool -> BoolLiteral {cons("Bool")}
+    "true"  -> Bool {cons("True")}
+    "false" -> Bool {cons("False")}
+
+module languages/java-15/lexical/literals/FloatingPointLiterals
+exports
+  sorts
+    FloatLiteral
+    DeciFloatLiteral
+    HexaFloatLiteral      
+  
+  context-free syntax
+    DeciFloatLiteral -> FloatLiteral {cons("Float")}
+    HexaFloatLiteral -> FloatLiteral {cons("Float")}
+
+  lexical syntax
+    DeciFloatNumeral [fFdD]? -> DeciFloatLiteral
+    HexaFloatNumeral [fFdD]? -> HexaFloatLiteral
+    
+    %% Reject plain integer literals as decimal float literals.
+    %% A similar rejection for hexadecimal float literals is not
+    %% required, since these always contain an exponent part.
+    [0-9]+ -> DeciFloatLiteral {reject}
+
+  lexical restrictions
+    DeciFloatLiteral -/- [fFdD]
+    HexaFloatLiteral -/- [fFdD]
+
+  %%%
+   %% Decimal Floating Point Numerals
+   %%%
+  sorts
+    DeciFloatNumeral
+    DeciFloatDigits
+    DeciFloatExponentPart
+
+  lexical syntax
+    DeciFloatDigits DeciFloatExponentPart? -> DeciFloatNumeral
+
+    [0-9]* "." [0-9]* -> DeciFloatDigits
+           "."        -> DeciFloatDigits {reject}
+    [0-9]+            -> DeciFloatDigits
+
+    [eE] SignedInteger -> DeciFloatExponentPart
+    
+    [\+\-]? [0-9]+ -> SignedInteger    
+
+  lexical restrictions
+    DeciFloatDigits  -/- [0-9]
+    DeciFloatExponentPart -/- [0-9]
+
+  %%%
+   %% Hexadecimal Floating Point Literals
+   %%%
+  sorts
+    HexaFloatNumeral
+    HexaSignificand
+    BinaryExponent
+    SignedInteger
+    
+  lexical syntax
+    HexaSignificand BinaryExponent -> HexaFloatNumeral
+
+    [0][xX] [0-9a-fA-F]+                  -> HexaSignificand
+    [0][xX] [0-9a-fA-F]* "." [0-9a-fA-F]* -> HexaSignificand
+    [0][xX]              "."              -> HexaSignificand {reject}
+
+    [pP] SignedInteger -> BinaryExponent
+  lexical restrictions
+    HexaSignificand -/- [0-9a-fA-F]
+    SignedInteger   -/- [0-9]
+
+module languages/java-15/lexical/literals/IntegerLiterals
+exports
+  sorts
+    IntLiteral
+    DeciLiteral
+    HexaLiteral
+    OctaLiteral
+    DeciNumeral
+    HexaNumeral
+    OctaNumeral
+
+  context-free syntax
+    DeciLiteral -> IntLiteral {cons("Deci")}
+    HexaLiteral -> IntLiteral {cons("Hexa")}
+    OctaLiteral -> IntLiteral {cons("Octa")}
+
+  lexical syntax
+    DeciNumeral [lL]? -> DeciLiteral
+    HexaNumeral [lL]? -> HexaLiteral
+    OctaNumeral [lL]? -> OctaLiteral
+
+    "0" -> DeciNumeral
+    [1-9][0-9]*  -> DeciNumeral
+    [0][xX] [0-9a-fA-F]+ -> HexaNumeral
+    [0]     [0-7]+       -> OctaNumeral
+
+  lexical restrictions
+    DeciNumeral -/- [0-9\.fFdD]
+    HexaNumeral -/- [0-9a-fA-F]
+    OctaNumeral -/- [0-7]
+
+    DeciLiteral -/- [lL]
+    HexaLiteral -/- [lL]
+    OctaLiteral -/- [lL]
+
+module languages/java-15/lexical/literals/Main
+imports
+  languages/java-15/lexical/literals/IntegerLiterals
+  languages/java-15/lexical/literals/FloatingPointLiterals
+  languages/java-15/lexical/literals/BooleanLiterals  
+  languages/java-15/lexical/literals/CharacterLiterals  
+  languages/java-15/lexical/literals/StringLiterals
+  languages/java-15/lexical/literals/NullLiteral
+
+
+module languages/java-15/lexical/Modifiers
+exports
+  sorts
+    Public
+    Private
+    Protected
+    Abstract
+    Final
+    Static
+    Native
+    Transient
+    Volatile
+    Synchronized
+    StrictFP
+    Modifier
+
+  context-free syntax
+    "public"       -> Public       {cons("Public")}
+    "private"      -> Private      {cons("Private")}
+    "protected"    -> Protected    {cons("Protected")}
+
+    "abstract"     -> Abstract     {cons("Abstract")}
+    "final"        -> Final        {cons("Final")}
+    "static"       -> Static       {cons("Static")}
+    "native"       -> Native       {cons("Native")}
+    "transient"    -> Transient    {cons("Transient")}
+    "volatile"     -> Volatile     {cons("Volatile")}
+    "synchronized" -> Synchronized {cons("Synchronized")}
+    "strictfp"     -> StrictFP     {cons("StrictFP")}
+
+    Public       -> Modifier
+    Private      -> Modifier
+    Protected    -> Modifier
+    Abstract     -> Modifier
+    Final        -> Modifier
+    Static       -> Modifier
+    Native       -> Modifier
+    Transient    -> Modifier
+    Volatile     -> Modifier
+    Synchronized -> Modifier
+    StrictFP     -> Modifier
+
+
+module languages/java-15/lexical/Keywords
+exports
+  sorts Keyword
+  lexical syntax
+    "abstract"      -> Keyword
+    "assert"        -> Keyword
+    "boolean"       -> Keyword
+    "break"         -> Keyword
+    "byte"          -> Keyword
+    "case"          -> Keyword
+    "catch"         -> Keyword
+    "char"          -> Keyword
+    "class"         -> Keyword
+    "const"         -> Keyword
+    "continue"      -> Keyword
+    "default"       -> Keyword
+    "do"            -> Keyword
+    "double"        -> Keyword
+    "else"          -> Keyword
+    "enum"          -> Keyword
+    "extends"       -> Keyword
+    "final"         -> Keyword
+    "finally"       -> Keyword
+    "float"         -> Keyword
+    "for"           -> Keyword
+    "goto"          -> Keyword
+    "if"            -> Keyword
+    "implements"    -> Keyword
+    "import"        -> Keyword
+    "instanceof"    -> Keyword
+    "int"           -> Keyword
+    "interface"     -> Keyword
+    "long"          -> Keyword
+    "native"        -> Keyword
+    "new"           -> Keyword
+    "package"       -> Keyword
+    "private"       -> Keyword
+    "protected"     -> Keyword
+    "public"        -> Keyword
+    "return"        -> Keyword
+    "short"         -> Keyword
+    "static"        -> Keyword
+    "strictfp"      -> Keyword
+    "super"         -> Keyword
+    "switch"        -> Keyword
+    "synchronized"  -> Keyword
+    "this"          -> Keyword
+    "throw"         -> Keyword
+    "throws"        -> Keyword
+    "transient"     -> Keyword
+    "try"           -> Keyword
+    "void"          -> Keyword
+    "volatile"      -> Keyword
+    "while"         -> Keyword
+
+  lexical restrictions
+
+    "abstract"
+    "assert"
+    "boolean" 
+    "break"   
+    "byte"    
+    "case"    
+    "catch"   
+    "char"     
+    "class"
+    "const"    
+    "continue" 
+    "default"  
+    "do"       
+    "double"   
+    "else"     
+    "enum"
+    "extends"  
+    "final"     
+    "finally"   
+    "float"     
+    "for"       
+    "goto"       
+    "if"         
+    "implements" 
+    "import"     
+    "instanceof" 
+    "int"        
+    "interface"  
+    "long"       
+    "native"     
+    "new"        
+    "package"    
+    "private"    
+    "protected"   
+    "public"       
+    "return"       
+    "short"        
+    "static"     
+    "strictfp"
+    "super"        
+    "switch"       
+    "synchronized" 
+    "this"         
+    "throw"        
+    "throws"       
+    "transient"    
+    "try"          
+    "void"         
+    "volatile"     
+    "while"       -/- [A-Za-z0-9\_\$]
+
+module languages/java-15/lexical/Identifiers
+imports
+  languages/java-15/lexical/Keywords
+exports
+  sorts
+    Id
+    ID
+
+  context-free syntax
+    ID -> Id {cons("Id")}
+
+  lexical syntax
+    [A-Za-z\_\$][A-Za-z0-9\_\$]* -> ID
+    
+    Keyword -> ID {reject}
+    "true"  -> ID {reject}
+    "false" -> ID {reject}
+    "null"  -> ID {reject}
+
+  lexical restrictions
+    ID -/- [a-zA-Z0-9\_\$]
+
+module languages/java-15/lexical/Comments
+imports
+  languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    Comment
+    EOLCommentChars
+    CommentPart
+    UnicodeEscape
+    BlockCommentChars
+    Asterisk
+    EscEscChar
+    EscChar
+
+  lexical syntax
+    Comment -> LAYOUT
+
+    "//" EOLCommentChars LineTerminator -> Comment
+    ~[\n\r]* -> EOLCommentChars
+
+    "/*"  CommentPart* "*/" -> Comment
+    "/**" CommentPart* "*/" -> Comment
+    "/**/"                  -> Comment %% Strange javadoc comment
+
+    BlockCommentChars -> CommentPart
+    EscChar           -> CommentPart
+    EscEscChar        -> CommentPart
+    Asterisk          -> CommentPart
+    UnicodeEscape     -> CommentPart
+
+    ~[\*\\]+ -> BlockCommentChars
+
+    "*"    -> Asterisk
+    "\\\\" -> EscEscChar
+    "\\"   -> EscChar
+
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape
+
+  lexical restrictions
+    "/**"    -/- [\/]
+    "/*"     -/- [\*]
+    Asterisk -/- [\/]
+    EscChar  -/- [\\u]
+
+    BlockCommentChars -/- ~[\*\\]
+    EOLCommentChars   -/- ~[\n\13]
+
+  context-free restrictions
+    LAYOUT?  -/- [\/].[\*]
+    LAYOUT?  -/- [\/].[\/]
+
+module languages/java-15/lexical/WhiteSpace
+exports
+  lexical syntax
+    [\ \t\12\r\n] -> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\12\n\r]
+
+module languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    LineTerminator CarriageReturn EndOfFile
+
+  lexical syntax
+    [\n]           -> LineTerminator
+    [\r][\n]       -> LineTerminator
+    CarriageReturn -> LineTerminator
+    EndOfFile      -> LineTerminator
+
+    [\r] -> CarriageReturn
+
+  lexical restrictions
+    CarriageReturn -/- [\n]
+
+  %% End of file is empty.
+  lexical syntax    
+    -> EndOfFile
+
+  lexical restrictions
+    EndOfFile -/- ~[]
+
+module languages/java-15/lexical/UnicodeEscapes
+exports
+  sorts
+    UnicodeEscape
+
+  syntax
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape {cons("UnicodeEscape")}
+
+module languages/java-15/lexical/Main
+imports
+  languages/java-15/lexical/UnicodeEscapes
+  languages/java-15/lexical/LineTerminators
+  languages/java-15/lexical/WhiteSpace
+  languages/java-15/lexical/Comments
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Keywords
+  languages/java-15/lexical/Modifiers
+  languages/java-15/lexical/literals/Main
+
+module languages/java-15/Main
+imports
+  languages/java-15/lexical/Main
+  languages/java-15/types/Main
+  languages/java-15/names/Main
+  languages/java-15/packages/Main
+  languages/java-15/classes/Main
+  languages/java-15/interfaces/Main
+  languages/java-15/arrays/Main
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+
+module Java-15
+imports
+  languages/java-15/Main
+
+exports
+  context-free start-symbols
+    Anno
+    AnnoDec
+    Block
+    BlockStm
+    ClassBodyDec
+    ClassMemberDec
+    CompilationUnit
+    Expr
+    FormalParam
+    Id
+    InterfaceDec
+    InterfaceMemberDec
+    Literal
+    PackageName
+    Stm
+    Type
+    TypeDec
+    TypeVar
+    TypeName
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/grammars/Java-SQL.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/grammars/Java-SQL.def	Wed Mar  2 14:01:15 2011	(r22255)
@@ -0,0 +1,2456 @@
+definition
+module languages/java-15/expressions/Priorities
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/expressions/Main
+
+exports
+  context-free priorities
+      Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr
+    > {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      } 
+
+  context-free priorities
+      {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      }
+    > { "(" PrimType ")" Expr -> Expr    
+        "(" RefType  ")" Expr -> Expr
+      }
+
+  context-free priorities
+      "(" PrimType ")" Expr -> Expr
+    > {left:
+        Expr "*" Expr -> Expr
+        Expr "/" Expr -> Expr
+        Expr "%" Expr -> Expr
+      } 
+
+  context-free priorities
+      "(" RefType ")" Expr -> Expr 
+    > {
+        "++" Expr -> Expr
+        "--" Expr -> Expr
+        "+"  Expr -> Expr
+        "-"  Expr -> Expr
+      }
+
+  context-free priorities
+    {
+      Expr ArraySubscript -> ArrayAccess
+      Expr "." Id -> FieldAccess
+      Expr "." TypeArgs? Id -> MethodSpec
+    }
+  > {right:
+      Expr "++" -> Expr
+      Expr "--" -> Expr
+    }
+  > {
+      "++" Expr -> Expr
+      "--" Expr -> Expr
+      "+"  Expr -> Expr
+      "-"  Expr -> Expr
+      "~"  Expr -> Expr
+      "!"  Expr -> Expr
+    }
+  > {left:
+      Expr "*" Expr -> Expr
+      Expr "/" Expr -> Expr
+      Expr "%" Expr -> Expr
+    } 
+  > {left:
+      Expr "+" Expr -> Expr
+      Expr "-" Expr -> Expr
+    }
+  > {left:
+      Expr "<<"  Expr -> Expr
+      Expr ">>"  Expr -> Expr
+      Expr ">>>" Expr -> Expr
+    }
+  > {left:
+      Expr "instanceof" RefType -> Expr
+      Expr "<"   Expr -> Expr
+      Expr ">"   Expr -> Expr
+      Expr "<="  Expr -> Expr
+      Expr ">="  Expr -> Expr
+    }
+  > {left:
+      Expr "=="  Expr -> Expr
+      Expr "!="  Expr -> Expr
+    }
+  >   Expr "&"   Expr -> Expr
+  >   Expr "^"   Expr -> Expr
+  >   Expr "|"   Expr -> Expr
+  >   Expr "&&"  Expr -> Expr
+  >   Expr "||"  Expr -> Expr
+  >   Expr CondMid Expr -> Expr
+  > {right:
+      LHS "="    Expr -> Expr
+      LHS "*="   Expr -> Expr
+      LHS "/="   Expr -> Expr
+      LHS "%="   Expr -> Expr
+      LHS "+="   Expr -> Expr
+      LHS "-="   Expr -> Expr
+      LHS "<<="  Expr -> Expr
+      LHS ">>="  Expr -> Expr
+      LHS ">>>=" Expr -> Expr
+      LHS "&="   Expr -> Expr
+      LHS "^="   Expr -> Expr
+      LHS "|="   Expr -> Expr
+    }
+
+module languages/java-15/expressions/Restrictions
+exports
+  lexical restrictions
+    "+" -/- [\+]
+    "-" -/- [\-]
+    "/" -/- [\/]
+
+module languages/java-15/expressions/AssignmentOperators
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts LHS
+  context-free syntax
+    LHS "="    Expr -> Expr {cons("Assign")}
+    LHS "*="   Expr -> Expr {cons("AssignMul")}
+    LHS "/="   Expr -> Expr {cons("AssignDiv")}
+    LHS "%="   Expr -> Expr {cons("AssignRemain")}
+    LHS "+="   Expr -> Expr {cons("AssignPlus")}
+    LHS "-="   Expr -> Expr {cons("AssignMinus")}
+    LHS "<<="  Expr -> Expr {cons("AssignLeftShift")}
+    LHS ">>="  Expr -> Expr {cons("AssignRightShift")}
+    LHS ">>>=" Expr -> Expr {cons("AssignURightShift")}
+    LHS "&="   Expr -> Expr {cons("AssignAnd")}
+    LHS "^="   Expr -> Expr {cons("AssignExcOr")}
+    LHS "|="   Expr -> Expr {cons("AssignOr")}
+
+    ExprName    -> LHS
+    FieldAccess -> LHS
+    ArrayAccess -> LHS
+
+
+module languages/java-15/expressions/BinaryOperators
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/types/Main
+
+exports
+  sorts CondMid
+  context-free syntax
+    Expr "instanceof" RefType -> Expr {cons("InstanceOf")}
+
+    Expr "*"   Expr -> Expr  {left, cons("Mul")}
+    Expr "/"   Expr -> Expr  {left, cons("Div")}
+    Expr "%"   Expr -> Expr  {left, cons("Remain")}
+
+    Expr "+"   Expr -> Expr  {left, cons("Plus")}
+    Expr "-"   Expr -> Expr  {left, cons("Minus")}
+
+    Expr "<<"  Expr -> Expr  {left, cons("LeftShift")}
+    Expr ">>"  Expr -> Expr  {left, cons("RightShift")}
+    Expr ">>>" Expr -> Expr  {left, cons("URightShift")}
+
+    Expr "<"   Expr -> Expr  {left, cons("Lt")}
+    Expr ">"   Expr -> Expr  {left, cons("Gt")}
+    Expr "<="  Expr -> Expr  {left, cons("LtEq")}
+    Expr ">="  Expr -> Expr  {left, cons("GtEq")}
+    Expr "=="  Expr -> Expr  {left, cons("Eq")}
+    Expr "!="  Expr -> Expr  {left, cons("NotEq")}
+
+    Expr "&&"  Expr -> Expr  {left, cons("LazyAnd")}
+    Expr "||"  Expr -> Expr  {left, cons("LazyOr")}
+
+    Expr "&" Expr -> Expr {left, cons("And")}
+    Expr "^" Expr -> Expr {left, cons("ExcOr")}
+    Expr "|" Expr -> Expr {left, cons("Or")}
+
+    %% todo JFR-30
+    Expr CondMid Expr -> Expr {right, cons("Cond")}
+    "?" Expr ":" -> CondMid {bracket}
+
+module languages/java-15/expressions/UnaryOperators
+imports 
+  languages/java-15/expressions/Main
+exports
+  context-free syntax
+    "+" Expr -> Expr {cons("Plus")}
+    "-" Expr -> Expr {cons("Minus")}
+
+    "++" Expr -> Expr {cons("PreIncr")}
+    "--" Expr -> Expr {cons("PreDecr")}
+
+    "~" Expr -> Expr {cons("Complement")}
+    "!" Expr -> Expr {cons("Not")}
+
+    "(" PrimType ")" Expr -> Expr {cons("CastPrim")}
+    "(" RefType  ")" Expr -> Expr {cons("CastRef")}
+
+module languages/java-15/expressions/Postfix
+imports 
+  languages/java-15/expressions/Main
+
+exports
+  context-free syntax
+    ExprName  -> Expr
+    Expr "++" -> Expr {cons("PostIncr")}
+    Expr "--" -> Expr {cons("PostDecr")}
+
+module languages/java-15/expressions/MethodInvocation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts MethodSpec
+  context-free syntax
+    MethodSpec "(" {Expr ","}* ")" -> Expr {cons("Invoke")}
+
+                               MethodName -> MethodSpec {cons("Method")}
+                    Expr "." TypeArgs? Id -> MethodSpec {cons("Method")}
+                 "super" "." TypeArgs? Id -> MethodSpec {cons("SuperMethod")}
+    TypeName "." "super" "." TypeArgs? Id -> MethodSpec {cons("QSuperMethod")}
+                 AmbName "." TypeArgs  Id -> MethodSpec {cons("GenericMethod")}
+
+  %% This priority forbids a Expr "." MethodSpec if the expression is a plain ExprName.
+  %% This solves an ambiguity with the MethodName and AmbName . TypeArgs MethodSpecs.
+  %% foo.bar.fred() results in a MethodName MethodSpec.
+  %% (foo.bar).fred() results in the Expr. MethodSpec
+  %% foo.bar.<T>fred() results in a GenericMethod
+  context-free priorities
+      Expr "." TypeArgs? Id -> MethodSpec
+    > ExprName  -> Expr
+
+
+module languages/java-15/expressions/ArrayAccess
+imports
+  languages/java-15/expressions/Main
+exports
+  sorts
+    ArrayAccess
+    ArraySubscript
+
+  context-free syntax
+    ArrayAccess -> Expr
+
+    %% todo: JFR-29
+    Expr ArraySubscript -> ArrayAccess {cons("ArrayAccess")}
+    "[" Expr "]" -> ArraySubscript {bracket}
+
+    ArrayCreationExpr ArraySubscript -> ArrayAccess {reject}
+
+module languages/java-15/expressions/FieldAccess
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts FieldAccess
+  context-free syntax
+    FieldAccess -> Expr
+
+  context-free syntax
+
+                    Expr "." Id -> FieldAccess {cons("Field")}
+                ExprName "." Id -> FieldAccess {reject}
+                 "super" "." Id -> FieldAccess {cons("SuperField")}
+    TypeName "." "super" "." Id -> FieldAccess {cons("QSuperField")}
+
+module languages/java-15/expressions/ArrayCreation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ArrayCreationExpr
+    ArrayBaseType
+    Dim
+    DimExpr
+
+  context-free syntax
+    ArrayCreationExpr     -> Expr
+
+    "new" ArrayBaseType DimExpr+ Dim*  -> ArrayCreationExpr {cons("NewArray")}
+    "new" ArrayBaseType Dim+ ArrayInit -> ArrayCreationExpr {cons("NewArray")}
+
+    PrimType -> ArrayBaseType
+    TypeName -> ArrayBaseType
+    TypeName "<" "?" ">" -> ArrayBaseType {cons("UnboundWld")}
+
+    "[" Expr "]" -> DimExpr {cons("Dim")}
+    "[" "]"      -> Dim     {cons("Dim")}
+
+module languages/java-15/expressions/ClassInstanceCreation
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  context-free syntax
+
+             "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody? -> Expr {cons("NewInstance")}
+    Expr "." "new" TypeArgs? Id         TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("QNewInstance")}
+
+module languages/java-15/expressions/Primary
+imports
+  languages/java-15/lexical/literals/Main
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  %%%
+   %% Section 15.8.1: Lexical Literals
+   %%%
+  sorts Literal
+  context-free syntax
+    Literal -> Expr {cons("Lit")}
+
+    IntLiteral    -> Literal
+    FloatLiteral  -> Literal
+    BoolLiteral   -> Literal 
+    CharLiteral   -> Literal
+    StringLiteral -> Literal
+    NullLiteral   -> Literal
+
+  %%%
+   %% Section 15.8.2: Class Literals
+   %%%
+  sorts ClassLiteral
+  context-free syntax
+    ClassLiteral -> Literal
+    Type   "." "class" -> ClassLiteral {cons("Class")}
+    "void" "." "class" -> ClassLiteral {cons("VoidClass")}
+
+  %%%
+   %% Section 15.8.3/4: (Qualified this)
+   %%%
+  context-free syntax
+                 "this" -> Expr {cons("This")}
+    TypeName "." "this" -> Expr {cons("QThis")}
+
+  %%%
+   %% Section 15.8.5: Parenthesized Expression
+   %%%
+  context-free syntax
+    "(" Expr ")"          -> Expr {bracket}
+
+module languages/java-15/expressions/Main
+imports
+  languages/java-15/expressions/Primary
+  languages/java-15/expressions/ClassInstanceCreation
+  languages/java-15/expressions/ArrayCreation
+  languages/java-15/expressions/FieldAccess
+  languages/java-15/expressions/ArrayAccess
+  languages/java-15/expressions/MethodInvocation
+  languages/java-15/expressions/Postfix
+  languages/java-15/expressions/UnaryOperators
+  languages/java-15/expressions/BinaryOperators
+  languages/java-15/expressions/AssignmentOperators
+  languages/java-15/expressions/Restrictions
+  languages/java-15/expressions/Priorities
+
+exports
+  sorts
+    Expr
+
+module languages/java-15/statements/Main
+imports
+  languages/java-15/statements/Blocks
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+
+module languages/java-15/arrays/Main
+imports
+  languages/java-15/arrays/ArrayInitializers
+
+
+module languages/java-15/interfaces/Main
+imports
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+
+module languages/java-15/classes/Main
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+
+
+module languages/java-15/packages/PackageDeclarations
+imports
+  languages/java-15/names/Main
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    PackageDec
+
+  context-free syntax
+    Anno* "package" PackageName ";" -> PackageDec {cons("PackageDec")}
+
+module languages/java-15/packages/ImportDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+
+exports
+  sorts
+    ImportDec
+
+  context-free syntax
+    "import" TypeName                  ";"  -> ImportDec {cons("TypeImportDec")}
+    "import" PackageName       "." "*" ";"  -> ImportDec {cons("TypeImportOnDemandDec")}
+    "import" "static" TypeName "." Id  ";"  -> ImportDec {cons("StaticImportDec")}
+    "import" "static" TypeName "." "*" ";"  -> ImportDec {cons("StaticImportOnDemandDec")}
+
+module languages/java-15/interfaces/AnnotationTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    AnnoDec
+    AnnoDecHead
+
+  context-free syntax
+    AnnoDecHead "{" AnnoElemDec* "}" -> AnnoDec {cons("AnnoDec")}
+    (Anno | InterfaceMod)* "@" "interface" Id -> AnnoDecHead {cons("AnnoDecHead")}
+
+  sorts
+    AnnoElemDec
+    DefaultVal
+
+  context-free syntax
+    AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" -> AnnoElemDec {cons("AnnoMethodDec")}
+
+    ConstantDec  -> AnnoElemDec
+    ClassDec     -> AnnoElemDec
+    InterfaceDec -> AnnoElemDec
+    EnumDec      -> AnnoElemDec
+    AnnoDec      -> AnnoElemDec
+    ";"          -> AnnoElemDec {cons("Semicolon")}
+
+    "default" ElemVal -> DefaultVal {cons("DefaultVal")}
+
+module languages/java-15/interfaces/AbstractMethodDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+
+exports
+  sorts
+    AbstractMethodDec
+    AbstractMethodMod
+
+  context-free syntax
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Throws? ";" -> AbstractMethodDec {cons("AbstractMethodDec")}
+
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" -> AbstractMethodDec {cons("DeprAbstractMethodDec")}
+
+    Public   -> AbstractMethodMod
+    Abstract -> AbstractMethodMod
+
+
+
+module languages/java-15/interfaces/ConstantDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    ConstantDec
+    ConstantMod
+
+  context-free syntax
+    (Anno | ConstantMod)* Type {VarDec ","}+ ";" -> ConstantDec {cons("ConstantDec")}
+
+    Public -> ConstantMod
+    Static -> ConstantMod
+    Final  -> ConstantMod
+
+
+module languages/java-15/interfaces/InterfaceDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    InterfaceDec
+    InterfaceDecHead
+    ExtendsInterfaces
+    InterfaceMemberDec
+    InterfaceMod
+
+  context-free syntax
+    AnnoDec -> InterfaceDec
+
+    InterfaceDecHead "{" InterfaceMemberDec* "}" -> InterfaceDec {cons("InterfaceDec")}
+
+    (Anno | InterfaceMod)* "interface" Id TypeParams? ExtendsInterfaces? -> InterfaceDecHead {cons("InterfaceDecHead")}
+    "extends" {InterfaceType ","}+ -> ExtendsInterfaces {cons("ExtendsInterfaces")}
+
+  context-free syntax
+    ConstantDec       -> InterfaceMemberDec
+    AbstractMethodDec -> InterfaceMemberDec
+    ClassDec          -> InterfaceMemberDec
+    InterfaceDec      -> InterfaceMemberDec
+    ";"               -> InterfaceMemberDec {cons("Semicolon")}
+
+  context-free syntax
+    Public         -> InterfaceMod
+    Protected      -> InterfaceMod
+    Private        -> InterfaceMod
+    Abstract       -> InterfaceMod
+    Static         -> InterfaceMod
+    StrictFP       -> InterfaceMod
+
+
+module languages/java-15/classes/EnumDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  sorts
+    EnumDec
+    EnumDecHead
+    EnumBody
+    EnumConst
+    EnumConstArgs
+    EnumBodyDecs
+
+  context-free syntax
+    EnumDecHead EnumBody -> EnumDec {cons("EnumDec")}
+
+    (Anno | ClassMod)* "enum" Id Interfaces? -> EnumDecHead {cons("EnumDecHead")}
+
+    "{" {EnumConst ","}*     EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+    "{" {EnumConst ","}* "," EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+
+    Id EnumConstArgs? ClassBody?  -> EnumConst {cons("EnumConst")}
+    "(" {Expr ","}* ")"  -> EnumConstArgs {bracket}
+
+    ";" ClassBodyDec* -> EnumBodyDecs {cons("EnumBodyDecs")}
+
+module languages/java-15/classes/ConstructorDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ConstrDec
+    ConstrBody
+    ConstrHead
+    ConstrInv
+
+  context-free syntax
+    ConstrHead ConstrBody ->  ConstrDec {cons("ConstrDec")}
+    (Anno | ConstrMod)* TypeParams? Id "(" {FormalParam ","}* ")" Throws? -> ConstrHead {cons("ConstrDecHead")}
+
+
+    "{" ConstrInv? BlockStm* "}" -> ConstrBody {cons("ConstrBody")}
+
+             TypeArgs? "this"  "(" {Expr ","}* ")" ";" -> ConstrInv {cons("AltConstrInv")}
+             TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("SuperConstrInv")}
+    Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("QSuperConstrInv")}
+
+  sorts ConstrMod
+  context-free syntax  
+    Public    -> ConstrMod
+    Protected -> ConstrMod
+    Private   -> ConstrMod
+
+
+module languages/java-15/classes/StaticInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    StaticInit
+
+  context-free syntax
+    "static" Block -> StaticInit   {cons("StaticInit")}
+
+module languages/java-15/classes/InstanceInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    InstanceInit
+
+  context-free syntax
+    Block -> InstanceInit {cons("InstanceInit")}
+
+module languages/java-15/statements/Statements
+imports
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Blocks
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Stm
+
+  context-free syntax
+    Block      -> Stm
+
+  %%%
+   %% Section 14.6: The Empty Statement
+   %%%
+  context-free syntax
+    ";"        -> Stm {cons("Empty")}
+
+  %%%
+   %% Section 14.7: Labeled Statements
+   %%%
+  context-free syntax
+    Id ":" Stm -> Stm {cons("Labeled")}
+
+  %%%
+   %% Section 14.8: Expressions Statements
+   %%%
+  context-free syntax
+    Expr ";"   -> Stm {cons("ExprStm")}
+
+  %%%
+   %% Section 14.9: The If Statement
+   %%%
+  context-free syntax
+    "if" "(" Expr ")" Stm             -> Stm {prefer, cons("If")}
+    "if" "(" Expr ")" Stm  "else" Stm -> Stm {cons("If")}
+
+  %%%
+   %% Section 14.10: The Assert Statement
+   %%%
+  context-free syntax
+    "assert" Expr          ";" -> Stm  {cons("AssertStm")}
+    "assert" Expr ":" Expr ";" -> Stm  {cons("AssertStm")}
+
+
+  %%%
+   %% Section 14.11: The Switch Statement
+   %%%
+  sorts SwitchBlock SwitchGroup SwitchLabel
+  context-free syntax
+    "switch" "(" Expr ")" SwitchBlock -> Stm {cons("Switch")}
+    "{" SwitchGroup* SwitchLabel* "}" -> SwitchBlock {cons("SwitchBlock")}
+    SwitchLabel+ BlockStm+ -> SwitchGroup  {cons("SwitchGroup")}
+
+    "case" Expr ":" -> SwitchLabel {cons("Case")}
+    "default"   ":" -> SwitchLabel {cons("Default")}
+
+  %%%
+   %% Section 14.12: The While Statement
+   %%%
+  context-free syntax
+    "while" "(" Expr ")" Stm -> Stm {cons("While")}
+
+  %%%
+   %% Section 14.13: The Do Statement
+   %%%
+  context-free syntax
+  "do" Stm "while" "(" Expr ")" ";" -> Stm {cons("DoWhile")}
+
+
+  %%%
+   %% Section 14.14: The For Statement
+   %%%
+  context-free syntax
+    "for" "(" LocalVarDec ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+    "for" "(" {Expr ","}* ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+
+    "for" "(" FormalParam ":" Expr ")" Stm -> Stm {cons("ForEach")}
+
+  %%%
+   %% Section 14.15: The Break Statement
+   %%%
+  context-free syntax
+    "break"    Id? ";"   -> Stm {cons("Break")}
+
+  %%%
+   %% Section 14.16: The Continue Statement
+   %%%
+  context-free syntax
+    "continue" Id? ";"   -> Stm {cons("Continue")}
+
+  %%%
+   %% Section 14.17: The Return Statement
+   %%%
+  context-free syntax
+    "return"   Expr? ";" -> Stm {cons("Return")}
+
+  %%%
+   %% Section 14.18: The Throw Statement
+   %%%
+  context-free syntax
+    "throw"    Expr  ";" -> Stm {cons("Throw")}
+
+  %%%
+   %% Section 14.19: The Synchronized Statement
+   %%%
+  context-free syntax
+    "synchronized" "(" Expr ")" Block -> Stm {cons("Synchronized")}
+
+  %%%
+   %% Section 14.20: The Try Statement
+   %%%
+  sorts CatchClause
+  context-free syntax
+    "try" Block CatchClause+ -> Stm {cons("Try")}
+    "try" Block CatchClause* "finally" Block -> Stm {cons("Try")}
+    "catch" "(" FormalParam ")" Block -> CatchClause {cons("Catch")}
+
+module languages/java-15/statements/LocalVariableDeclarations
+imports
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts
+    LocalVarDecStm
+    LocalVarDec
+
+  context-free syntax
+    LocalVarDec ";" -> LocalVarDecStm {prefer, cons("LocalVarDecStm")}
+    (Anno | VarMod)* Type {VarDec ","}+ -> LocalVarDec {prefer, cons("LocalVarDec")}
+
+module languages/java-15/statements/Blocks
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+exports
+  sorts
+    BlockStm
+    Block
+
+  context-free syntax
+    "{" BlockStm* "}" -> Block {cons("Block")}
+
+    LocalVarDecStm  -> BlockStm 
+    ClassDec        -> BlockStm {cons("ClassDecStm")}
+    Stm             -> BlockStm
+
+
+module languages/java-15/classes/MethodDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    MethodDec
+    MethodDecHead
+    ResultType
+
+  context-free syntax
+    MethodDecHead MethodBody -> MethodDec {cons("MethodDec")}
+
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws?      -> MethodDecHead {cons("MethodDecHead")}
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? -> MethodDecHead {cons("DeprMethodDecHead")}
+
+    Type   -> ResultType
+    "void" -> ResultType {cons("Void")}
+
+  sorts FormalParam
+  context-free syntax
+    (Anno | VarMod)* Type       VarDecId -> FormalParam {cons("Param")}
+    (Anno | VarMod)* Type "..." VarDecId -> FormalParam {cons("VarArityParam")}
+
+  sorts VarMod
+  context-free syntax
+    Final -> VarMod
+
+  sorts MethodMod
+  context-free syntax
+    Public         -> MethodMod
+    Protected      -> MethodMod
+    Private        -> MethodMod
+
+    Abstract       -> MethodMod
+    Static         -> MethodMod
+    Final          -> MethodMod
+    Synchronized   -> MethodMod
+    Native         -> MethodMod
+    StrictFP       -> MethodMod
+
+  %%%
+   %% Section 8.4.6: Method Throws
+   %%%
+  sorts
+    Throws
+    ExceptionType
+
+  context-free syntax
+    "throws" {ExceptionType ","}+ -> Throws {cons("ThrowsDec")}
+    ClassType -> ExceptionType
+    %% TypeVar -> ExceptionType
+
+  %%%
+   %% Section 8.4.7: Method Body
+   %%% 
+  sorts MethodBody
+  context-free syntax
+    Block -> MethodBody
+    ";"   -> MethodBody {cons("NoMethodBody")}
+
+module languages/java-15/arrays/ArrayInitializers
+imports
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts ArrayInit
+  context-free syntax
+    "{" {VarInit ","}*     "}" -> ArrayInit {cons("ArrayInit")}
+    "{" {VarInit ","}* "," "}" -> ArrayInit {cons("ArrayInit")}
+
+module languages/java-15/interfaces/Annotations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Anno
+    ElemVal
+    ElemValPair
+
+  context-free syntax
+    "@" TypeName "(" {ElemValPair ","}* ")" -> Anno {cons("Anno")}
+    "@" TypeName "(" ElemVal ")"            -> Anno {cons("SingleElemAnno")}
+    "@" TypeName                            -> Anno {cons("MarkerAnno")}
+
+  context-free syntax  
+    Id "=" ElemVal -> ElemValPair {cons("ElemValPair")}
+
+    Expr -> ElemVal
+    Anno -> ElemVal
+
+    "{" {ElemVal ","}*     "}" -> ElemVal {cons("ElemValArrayInit")}
+    "{" {ElemVal ","}* "," "}" -> ElemVal {cons("ElemValArrayInit")}
+
+    %% Assignments are not allowed as element values.
+    LHS "=" Expr -> ElemVal {reject}
+
+module languages/java-15/classes/FieldDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/interfaces/Annotations
+  languages/java-15/arrays/ArrayInitializers
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    FieldDec
+    VarDec
+    VarDecId
+    Dim
+    VarInit
+
+  context-free syntax
+    (Anno | FieldMod)* Type { VarDec ","}+ ";" -> FieldDec {cons("FieldDec")}
+
+    VarDecId             -> VarDec {cons("VarDec")}
+    VarDecId "=" VarInit -> VarDec {cons("VarDec")}
+
+    Id      -> VarDecId
+    Id Dim+ -> VarDecId {cons("ArrayVarDecId")}
+
+    "[" "]" -> Dim {cons("Dim")}
+
+    Expr      -> VarInit
+    ArrayInit -> VarInit
+
+  sorts FieldMod
+  context-free syntax
+    Public    -> FieldMod
+    Protected -> FieldMod
+    Private   -> FieldMod
+
+    Static    -> FieldMod
+    Final     -> FieldMod
+    Transient -> FieldMod
+    Volatile  -> FieldMod
+
+
+module languages/java-15/classes/ClassDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/InstanceInitializers
+  languages/java-15/classes/StaticInitializers
+  languages/java-15/classes/ConstructorDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    ClassDec
+    ClassBody
+    ClassDecHead
+
+  context-free syntax
+    EnumDec -> ClassDec
+
+    ClassDecHead ClassBody -> ClassDec {cons("ClassDec")}
+    "{" ClassBodyDec* "}" -> ClassBody {cons("ClassBody")}
+
+    (Anno | ClassMod)* "class" Id  TypeParams? Super? Interfaces? -> ClassDecHead {cons("ClassDecHead")}
+
+  %% 8.1.1: Class Modifiers
+  sorts ClassMod
+  context-free syntax
+    Abstract  -> ClassMod
+    Public    -> ClassMod
+    Protected -> ClassMod
+    Private   -> ClassMod
+    Static    -> ClassMod
+    Final     -> ClassMod
+    StrictFP  -> ClassMod
+
+  %% 8.1.4: Superclasses and Subclasses
+  sorts Super
+  context-free syntax
+
+    "extends" ClassType -> Super {cons("SuperDec")}
+
+  %% 8.1.5: Superinterfaces
+  sorts Interfaces
+  context-free syntax
+    "implements" {InterfaceType ","}+ -> Interfaces {cons("ImplementsDec")}
+
+
+  %% 8.1.6: Class Body and Member Declarations
+  sorts
+    ClassBodyDec
+    ClassMemberDec
+
+  context-free syntax
+    ClassMemberDec -> ClassBodyDec
+    InstanceInit   -> ClassBodyDec
+    StaticInit     -> ClassBodyDec
+    ConstrDec      -> ClassBodyDec
+
+  context-free syntax
+    FieldDec     -> ClassMemberDec
+    MethodDec    -> ClassMemberDec
+    ClassDec     -> ClassMemberDec
+    InterfaceDec -> ClassMemberDec
+    ";"          -> ClassMemberDec {cons("Semicolon")}
+
+module languages/java-15/packages/TypeDeclarations
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    TypeDec
+
+  context-free syntax
+    ClassDec      -> TypeDec
+    InterfaceDec  -> TypeDec
+    ";"           -> TypeDec {cons("Semicolon")}
+
+module languages/java-15/packages/CompilationUnits
+imports
+  languages/java-15/packages/PackageDeclarations
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/TypeDeclarations
+
+exports
+  sorts
+    CompilationUnit
+
+  context-free syntax
+    PackageDec? ImportDec* TypeDec+ -> CompilationUnit   {cons("CompilationUnit")}
+
+module languages/java-15/packages/Main
+imports
+  languages/java-15/packages/CompilationUnits
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/PackageDeclarations
+
+
+module languages/java-15/names/Main
+imports
+  languages/java-15/lexical/Identifiers
+exports
+  sorts PackageName
+  context-free syntax
+    {Id "."}+ -> PackageName {cons("PackageName")}
+
+  sorts
+    TypeName
+    ExprName
+    MethodName
+    PackageOrTypeName
+    AmbName
+
+  context-free syntax
+    Id             -> AmbName {cons("AmbName")}
+    AmbName "." Id -> AmbName {cons("AmbName")}
+
+    Id                       -> TypeName {cons("TypeName")}
+    PackageOrTypeName "." Id -> TypeName {cons("TypeName")}
+
+    Id             -> ExprName {cons("ExprName")}
+    AmbName "." Id -> ExprName {cons("ExprName")}
+
+    Id             -> MethodName  {cons("MethodName")}
+    AmbName "." Id -> MethodName  {cons("MethodName")}
+
+    Id                       -> PackageOrTypeName {cons("PackageOrTypeName")}
+    PackageOrTypeName "." Id -> PackageOrTypeName {cons("PackageOrTypeName")}
+
+module languages/java-15/types/ParameterizedTypes
+imports
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeArgs
+    ActualTypeArg
+    WildcardBound
+    
+  context-free syntax
+    "<" {ActualTypeArg ","}+ ">" -> TypeArgs {cons("TypeArgs")}
+
+    Type               -> ActualTypeArg
+    "?" WildcardBound? -> ActualTypeArg {cons("Wildcard")}
+
+    "extends" RefType -> WildcardBound {cons("WildcardUpperBound")}
+    "super"   RefType -> WildcardBound {cons("WildcardLowerBound")}
+
+module languages/java-15/types/TypeVariables
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeParams
+    TypeParam
+    TypeBound
+    TypeVarId
+  
+  context-free syntax
+    TypeVarId TypeBound? -> TypeParam {cons("TypeParam")}
+    
+    "extends" {ClassOrInterfaceType "&"}+ -> TypeBound {cons("TypeBound")}
+    "<" {TypeParam ","}+ ">" -> TypeParams {cons("TypeParams")}
+
+    Id -> TypeVarId
+    
+
+module languages/java-15/types/ReferenceTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main  
+  languages/java-15/types/ParameterizedTypes
+  languages/java-15/types/TypeVariables
+
+
+exports
+  sorts
+    RefType
+    ClassOrInterfaceType
+    ClassType
+    InterfaceType
+    TypeDecSpec
+    ArrayType
+    TypeVar
+
+  context-free syntax
+    ClassOrInterfaceType -> RefType
+    ArrayType            -> RefType
+    
+    %% This production rule is highly ambiguous, since every
+    %% TypeVar can be a ClassOrInterfaceType. A later disambiguation
+    %% phase has to find out if a ClassOrInterfaceType is in fact
+    %% a TypeVar.
+    
+    %% TypeVar -> RefType {avoid}
+
+  context-free syntax
+  
+    %% ClassType and InterfaceType are ambiguous. We modify the
+    %% production of ClassOrInterfaceType to make this ambiguity explicit.
+    
+    TypeDecSpec TypeArgs? -> ClassOrInterfaceType {cons("ClassOrInterfaceType")}
+    TypeDecSpec TypeArgs? -> ClassType {cons("ClassType")}
+    TypeDecSpec TypeArgs? -> InterfaceType {cons("InterfaceType")}
+
+    TypeName -> TypeDecSpec
+    TypeDecSpec TypeArgs "." Id -> TypeDecSpec {cons("Member")}
+    
+  context-free syntax    
+    TypeVarId -> TypeVar {cons("TypeVar")}
+
+  context-free syntax
+    Type "[" "]" -> ArrayType  {cons("ArrayType")}
+
+module languages/java-15/types/PrimitiveTypes
+exports
+  sorts
+    PrimType
+    NumType
+    IntType  
+    FloatType
+
+  context-free syntax
+    NumType   -> PrimType
+    "boolean" -> PrimType {cons("Boolean")}
+
+    IntType   -> NumType
+    FloatType -> NumType
+
+    "byte"   -> IntType   {cons("Byte")}
+    "short"  -> IntType   {cons("Short")}
+    "int"    -> IntType   {cons("Int")}
+    "long"   -> IntType   {cons("Long")}
+    "char"   -> IntType   {cons("Char")}
+    "float"  -> FloatType {cons("Float")}
+    "double" -> FloatType {cons("Double")}
+
+module languages/java-15/types/Main
+imports
+  languages/java-15/types/PrimitiveTypes
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/types/ParameterizedTypes
+
+exports
+  sorts
+    Type
+
+  context-free syntax
+    PrimType -> Type
+    RefType  -> Type
+
+
+module languages/java-15/lexical/literals/NullLiteral
+exports
+  sorts NullLiteral
+  context-free syntax
+    "null"  -> NullLiteral {cons("Null")}
+
+module languages/java-15/lexical/literals/StringLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    StringLiteral
+    StringPart
+    StringChars
+    FooStringChars
+
+  syntax
+    StringLiteral -> <StringLiteral-CF>
+    
+    "\"" StringPart* "\"" -> StringLiteral {cons("String")}
+    StringChars    -> StringPart {cons("Chars")}
+    UnicodeEscape  -> StringPart
+    EscapeSeq      -> StringPart
+
+    <FooStringChars-LEX> -> StringChars
+    ~[\"\\\n\13]+  -> <FooStringChars-LEX>
+
+  restrictions
+    StringChars -/- ~[\"\\\n\13]
+
+module languages/java-15/lexical/literals/EscapeSequences
+imports
+
+exports
+  sorts
+    EscapeSeq
+    NamedEscape
+    OctaEscape
+    LastOcta
+
+  syntax
+    OctaEscape  -> EscapeSeq
+    NamedEscape -> EscapeSeq
+
+    "\\" [btnfr\"\'\\]     -> NamedEscape {cons("NamedEscape")}
+    "\\" LastOcta          -> OctaEscape  {cons("OctaEscape1")}
+    "\\" [0-3] LastOcta    -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [4-7] [0-7]       -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [0-3] [0-7] [0-7] -> OctaEscape  {cons("OctaEscape3")}
+
+    [0-7] -> LastOcta
+
+  restrictions
+    LastOcta -/- [0-7]
+
+module languages/java-15/lexical/literals/CharacterLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    CharLiteral
+    CharContent
+    SingleChar
+
+  syntax
+    CharLiteral   -> <CharLiteral-CF>
+
+    "'" CharContent "'" -> CharLiteral {cons("Char")}
+    SingleChar    -> CharContent {cons("Single")}
+    UnicodeEscape -> CharContent
+    EscapeSeq     -> CharContent
+
+    ~[\r\n\'\\] -> SingleChar
+
+
+module languages/java-15/lexical/literals/BooleanLiterals
+exports
+  sorts
+    Bool
+    BoolLiteral
+
+  context-free syntax
+    Bool -> BoolLiteral {cons("Bool")}
+    "true"  -> Bool {cons("True")}
+    "false" -> Bool {cons("False")}
+
+module languages/java-15/lexical/literals/FloatingPointLiterals
+exports
+  sorts
+    FloatLiteral
+    DeciFloatLiteral
+    HexaFloatLiteral      
+  
+  context-free syntax
+    DeciFloatLiteral -> FloatLiteral {cons("Float")}
+    HexaFloatLiteral -> FloatLiteral {cons("Float")}
+
+  lexical syntax
+    DeciFloatNumeral [fFdD]? -> DeciFloatLiteral
+    HexaFloatNumeral [fFdD]? -> HexaFloatLiteral
+    
+    %% Reject plain integer literals as decimal float literals.
+    %% A similar rejection for hexadecimal float literals is not
+    %% required, since these always contain an exponent part.
+    [0-9]+ -> DeciFloatLiteral {reject}
+
+  lexical restrictions
+    DeciFloatLiteral -/- [fFdD]
+    HexaFloatLiteral -/- [fFdD]
+
+  %%%
+   %% Decimal Floating Point Numerals
+   %%%
+  sorts
+    DeciFloatNumeral
+    DeciFloatDigits
+    DeciFloatExponentPart
+
+  lexical syntax
+    DeciFloatDigits DeciFloatExponentPart? -> DeciFloatNumeral
+
+    [0-9]* "." [0-9]* -> DeciFloatDigits
+           "."        -> DeciFloatDigits {reject}
+    [0-9]+            -> DeciFloatDigits
+
+    [eE] SignedInteger -> DeciFloatExponentPart
+    
+    [\+\-]? [0-9]+ -> SignedInteger    
+
+  lexical restrictions
+    DeciFloatDigits  -/- [0-9]
+    DeciFloatExponentPart -/- [0-9]
+
+  %%%
+   %% Hexadecimal Floating Point Literals
+   %%%
+  sorts
+    HexaFloatNumeral
+    HexaSignificand
+    BinaryExponent
+    SignedInteger
+    
+  lexical syntax
+    HexaSignificand BinaryExponent -> HexaFloatNumeral
+
+    [0][xX] [0-9a-fA-F]+                  -> HexaSignificand
+    [0][xX] [0-9a-fA-F]* "." [0-9a-fA-F]* -> HexaSignificand
+    [0][xX]              "."              -> HexaSignificand {reject}
+
+    [pP] SignedInteger -> BinaryExponent
+  lexical restrictions
+    HexaSignificand -/- [0-9a-fA-F]
+    SignedInteger   -/- [0-9]
+
+module languages/java-15/lexical/literals/IntegerLiterals
+exports
+  sorts
+    IntLiteral
+    DeciLiteral
+    HexaLiteral
+    OctaLiteral
+    DeciNumeral
+    HexaNumeral
+    OctaNumeral
+
+  context-free syntax
+    DeciLiteral -> IntLiteral {cons("Deci")}
+    HexaLiteral -> IntLiteral {cons("Hexa")}
+    OctaLiteral -> IntLiteral {cons("Octa")}
+
+  lexical syntax
+    DeciNumeral [lL]? -> DeciLiteral
+    HexaNumeral [lL]? -> HexaLiteral
+    OctaNumeral [lL]? -> OctaLiteral
+
+    "0" -> DeciNumeral
+    [1-9][0-9]*  -> DeciNumeral
+    [0][xX] [0-9a-fA-F]+ -> HexaNumeral
+    [0]     [0-7]+       -> OctaNumeral
+
+  lexical restrictions
+    DeciNumeral -/- [0-9\.fFdD]
+    HexaNumeral -/- [0-9a-fA-F]
+    OctaNumeral -/- [0-7]
+
+    DeciLiteral -/- [lL]
+    HexaLiteral -/- [lL]
+    OctaLiteral -/- [lL]
+
+module languages/java-15/lexical/literals/Main
+imports
+  languages/java-15/lexical/literals/IntegerLiterals
+  languages/java-15/lexical/literals/FloatingPointLiterals
+  languages/java-15/lexical/literals/BooleanLiterals  
+  languages/java-15/lexical/literals/CharacterLiterals  
+  languages/java-15/lexical/literals/StringLiterals
+  languages/java-15/lexical/literals/NullLiteral
+
+
+module languages/java-15/lexical/Modifiers
+exports
+  sorts
+    Public
+    Private
+    Protected
+    Abstract
+    Final
+    Static
+    Native
+    Transient
+    Volatile
+    Synchronized
+    StrictFP
+    Modifier
+
+  context-free syntax
+    "public"       -> Public       {cons("Public")}
+    "private"      -> Private      {cons("Private")}
+    "protected"    -> Protected    {cons("Protected")}
+
+    "abstract"     -> Abstract     {cons("Abstract")}
+    "final"        -> Final        {cons("Final")}
+    "static"       -> Static       {cons("Static")}
+    "native"       -> Native       {cons("Native")}
+    "transient"    -> Transient    {cons("Transient")}
+    "volatile"     -> Volatile     {cons("Volatile")}
+    "synchronized" -> Synchronized {cons("Synchronized")}
+    "strictfp"     -> StrictFP     {cons("StrictFP")}
+
+    Public       -> Modifier
+    Private      -> Modifier
+    Protected    -> Modifier
+    Abstract     -> Modifier
+    Final        -> Modifier
+    Static       -> Modifier
+    Native       -> Modifier
+    Transient    -> Modifier
+    Volatile     -> Modifier
+    Synchronized -> Modifier
+    StrictFP     -> Modifier
+
+
+module languages/java-15/lexical/Keywords
+exports
+  sorts Keyword
+  lexical syntax
+    "abstract"      -> Keyword
+    "assert"        -> Keyword
+    "boolean"       -> Keyword
+    "break"         -> Keyword
+    "byte"          -> Keyword
+    "case"          -> Keyword
+    "catch"         -> Keyword
+    "char"          -> Keyword
+    "class"         -> Keyword
+    "const"         -> Keyword
+    "continue"      -> Keyword
+    "default"       -> Keyword
+    "do"            -> Keyword
+    "double"        -> Keyword
+    "else"          -> Keyword
+    "enum"          -> Keyword
+    "extends"       -> Keyword
+    "final"         -> Keyword
+    "finally"       -> Keyword
+    "float"         -> Keyword
+    "for"           -> Keyword
+    "goto"          -> Keyword
+    "if"            -> Keyword
+    "implements"    -> Keyword
+    "import"        -> Keyword
+    "instanceof"    -> Keyword
+    "int"           -> Keyword
+    "interface"     -> Keyword
+    "long"          -> Keyword
+    "native"        -> Keyword
+    "new"           -> Keyword
+    "package"       -> Keyword
+    "private"       -> Keyword
+    "protected"     -> Keyword
+    "public"        -> Keyword
+    "return"        -> Keyword
+    "short"         -> Keyword
+    "static"        -> Keyword
+    "strictfp"      -> Keyword
+    "super"         -> Keyword
+    "switch"        -> Keyword
+    "synchronized"  -> Keyword
+    "this"          -> Keyword
+    "throw"         -> Keyword
+    "throws"        -> Keyword
+    "transient"     -> Keyword
+    "try"           -> Keyword
+    "void"          -> Keyword
+    "volatile"      -> Keyword
+    "while"         -> Keyword
+
+  lexical restrictions
+
+    "abstract"
+    "assert"
+    "boolean" 
+    "break"   
+    "byte"    
+    "case"    
+    "catch"   
+    "char"     
+    "class"
+    "const"    
+    "continue" 
+    "default"  
+    "do"       
+    "double"   
+    "else"     
+    "enum"
+    "extends"  
+    "final"     
+    "finally"   
+    "float"     
+    "for"       
+    "goto"       
+    "if"         
+    "implements" 
+    "import"     
+    "instanceof" 
+    "int"        
+    "interface"  
+    "long"       
+    "native"     
+    "new"        
+    "package"    
+    "private"    
+    "protected"   
+    "public"       
+    "return"       
+    "short"        
+    "static"     
+    "strictfp"
+    "super"        
+    "switch"       
+    "synchronized" 
+    "this"         
+    "throw"        
+    "throws"       
+    "transient"    
+    "try"          
+    "void"         
+    "volatile"     
+    "while"       -/- [A-Za-z0-9\_\$]
+
+module languages/java-15/lexical/Identifiers
+imports
+  languages/java-15/lexical/Keywords
+exports
+  sorts
+    Id
+    ID
+
+  context-free syntax
+    ID -> Id {cons("Id")}
+
+  lexical syntax
+    [A-Za-z\_\$][A-Za-z0-9\_\$]* -> ID
+    
+    Keyword -> ID {reject}
+    "true"  -> ID {reject}
+    "false" -> ID {reject}
+    "null"  -> ID {reject}
+
+  lexical restrictions
+    ID -/- [a-zA-Z0-9\_\$]
+
+module languages/java-15/lexical/Comments
+imports
+  languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    Comment
+    EOLCommentChars
+    CommentPart
+    UnicodeEscape
+    BlockCommentChars
+    Asterisk
+    EscEscChar
+    EscChar
+
+  lexical syntax
+    Comment -> LAYOUT
+
+    "//" EOLCommentChars LineTerminator -> Comment
+    ~[\n\r]* -> EOLCommentChars
+
+    "/*"  CommentPart* "*/" -> Comment
+    "/**" CommentPart* "*/" -> Comment
+    "/**/"                  -> Comment %% Strange javadoc comment
+
+    BlockCommentChars -> CommentPart
+    EscChar           -> CommentPart
+    EscEscChar        -> CommentPart
+    Asterisk          -> CommentPart
+    UnicodeEscape     -> CommentPart
+
+    ~[\*\\]+ -> BlockCommentChars
+
+    "*"    -> Asterisk
+    "\\\\" -> EscEscChar
+    "\\"   -> EscChar
+
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape
+
+  lexical restrictions
+    "/**"    -/- [\/]
+    "/*"     -/- [\*]
+    Asterisk -/- [\/]
+    EscChar  -/- [\\u]
+
+    BlockCommentChars -/- ~[\*\\]
+    EOLCommentChars   -/- ~[\n\13]
+
+  context-free restrictions
+    LAYOUT?  -/- [\/].[\*]
+    LAYOUT?  -/- [\/].[\/]
+
+module languages/java-15/lexical/WhiteSpace
+exports
+  lexical syntax
+    [\ \t\12\r\n] -> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\12\n\r]
+
+module languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    LineTerminator CarriageReturn EndOfFile
+
+  lexical syntax
+    [\n]           -> LineTerminator
+    [\r][\n]       -> LineTerminator
+    CarriageReturn -> LineTerminator
+    EndOfFile      -> LineTerminator
+
+    [\r] -> CarriageReturn
+
+  lexical restrictions
+    CarriageReturn -/- [\n]
+
+  %% End of file is empty.
+  lexical syntax    
+    -> EndOfFile
+
+  lexical restrictions
+    EndOfFile -/- ~[]
+
+module languages/java-15/lexical/UnicodeEscapes
+exports
+  sorts
+    UnicodeEscape
+
+  syntax
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape {cons("UnicodeEscape")}
+
+module languages/java-15/lexical/Main
+imports
+  languages/java-15/lexical/UnicodeEscapes
+  languages/java-15/lexical/LineTerminators
+  languages/java-15/lexical/WhiteSpace
+  languages/java-15/lexical/Comments
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Keywords
+  languages/java-15/lexical/Modifiers
+  languages/java-15/lexical/literals/Main
+
+module languages/java-15/Main
+imports
+  languages/java-15/lexical/Main
+  languages/java-15/types/Main
+  languages/java-15/names/Main
+  languages/java-15/packages/Main
+  languages/java-15/classes/Main
+  languages/java-15/interfaces/Main
+  languages/java-15/arrays/Main
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+
+module languages/java-15/JavaMix[Ctx0]
+imports languages/java-15/Main
+          [ CompilationUnit       => CompilationUnit[[Ctx0]]
+            TypeDec               => TypeDec[[Ctx0]]
+            ImportDec             => ImportDec[[Ctx0]]
+            PackageDec            => PackageDec[[Ctx0]]
+            ElemVal               => ElemVal[[Ctx0]]
+            ElemValPair           => ElemValPair[[Ctx0]]
+            Anno                  => Anno[[Ctx0]]
+            LHS                   => LHS[[Ctx0]]
+            CondMid               => CondMid[[Ctx0]]
+            ArraySubscript        => ArraySubscript[[Ctx0]]
+            DimExpr               => DimExpr[[Ctx0]]
+            ArrayBaseType         => ArrayBaseType[[Ctx0]]
+            ArrayCreationExpr     => ArrayCreationExpr[[Ctx0]]
+            ClassMemberDec        => ClassMemberDec[[Ctx0]]
+            ClassBodyDec          => ClassBodyDec[[Ctx0]]
+            Interfaces            => Interfaces[[Ctx0]]
+            Super                 => Super[[Ctx0]]
+            ClassMod              => ClassMod[[Ctx0]]
+            ClassDecHead          => ClassDecHead[[Ctx0]]
+            ClassBody             => ClassBody[[Ctx0]]
+            ClassDec              => ClassDec[[Ctx0]]
+            InterfaceMod          => InterfaceMod[[Ctx0]]
+            InterfaceMemberDec    => InterfaceMemberDec[[Ctx0]]
+            ExtendsInterfaces     => ExtendsInterfaces[[Ctx0]]
+            InterfaceDecHead      => InterfaceDecHead[[Ctx0]]
+            InterfaceDec          => InterfaceDec[[Ctx0]]
+            DefaultVal            => DefaultVal[[Ctx0]]
+            AnnoElemDec           => AnnoElemDec[[Ctx0]]
+            AnnoDecHead           => AnnoDecHead[[Ctx0]]
+            AnnoDec               => AnnoDec[[Ctx0]]
+            AbstractMethodMod     => AbstractMethodMod[[Ctx0]]
+            AbstractMethodDec     => AbstractMethodDec[[Ctx0]]
+            ConstantMod           => ConstantMod[[Ctx0]]
+            ConstantDec           => ConstantDec[[Ctx0]]
+            EnumBodyDecs          => EnumBodyDecs[[Ctx0]]
+            EnumConstArgs         => EnumConstArgs[[Ctx0]]
+            EnumConst             => EnumConst[[Ctx0]]
+            EnumBody              => EnumBody[[Ctx0]]
+            EnumDecHead           => EnumDecHead[[Ctx0]]
+            EnumDec               => EnumDec[[Ctx0]]
+            ConstrMod             => ConstrMod[[Ctx0]]
+            ConstrInv             => ConstrInv[[Ctx0]]
+            ConstrBody            => ConstrBody[[Ctx0]]
+            ConstrHead            => ConstrHead[[Ctx0]]
+            ConstrDec             => ConstrDec[[Ctx0]]
+            StaticInit            => StaticInit[[Ctx0]]
+            InstanceInit          => InstanceInit[[Ctx0]]
+            MethodBody            => MethodBody[[Ctx0]]
+            ExceptionType         => ExceptionType[[Ctx0]]
+            Throws                => Throws[[Ctx0]]
+            MethodMod             => MethodMod[[Ctx0]]
+            VarMod                => VarMod[[Ctx0]]
+            FormalParam           => FormalParam[[Ctx0]]
+            ResultType            => ResultType[[Ctx0]]
+            MethodDecHead         => MethodDecHead[[Ctx0]]
+            MethodDec             => MethodDec[[Ctx0]]
+            BlockStm              => BlockStm[[Ctx0]]
+            Block                 => Block[[Ctx0]]
+            CatchClause           => CatchClause[[Ctx0]]
+            SwitchLabel           => SwitchLabel[[Ctx0]]
+            SwitchGroup           => SwitchGroup[[Ctx0]]
+            SwitchBlock           => SwitchBlock[[Ctx0]]
+            Stm                   => Stm[[Ctx0]]
+            LocalVarDec           => LocalVarDec[[Ctx0]]
+            LocalVarDecStm        => LocalVarDecStm[[Ctx0]]
+            FieldMod              => FieldMod[[Ctx0]]
+            VarInit               => VarInit[[Ctx0]]
+            Dim                   => Dim[[Ctx0]]
+            VarDecId              => VarDecId[[Ctx0]]
+            VarDec                => VarDec[[Ctx0]]
+            FieldDec              => FieldDec[[Ctx0]]
+            ArrayInit             => ArrayInit[[Ctx0]]
+            ClassLiteral          => ClassLiteral[[Ctx0]]
+            Literal               => Literal[[Ctx0]]
+            Type                  => Type[[Ctx0]]
+            ArrayType             => ArrayType[[Ctx0]]
+            TypeVar               => TypeVar[[Ctx0]]
+            TypeDecSpec           => TypeDecSpec[[Ctx0]]
+            InterfaceType         => InterfaceType[[Ctx0]]
+            ClassType             => ClassType[[Ctx0]]
+            ClassOrInterfaceType  => ClassOrInterfaceType[[Ctx0]]
+            RefType               => RefType[[Ctx0]]
+            TypeVarId             => TypeVarId[[Ctx0]]
+            TypeParams            => TypeParams[[Ctx0]]
+            TypeBound             => TypeBound[[Ctx0]]
+            TypeParam             => TypeParam[[Ctx0]]
+            WildcardBound         => WildcardBound[[Ctx0]]
+            ActualTypeArg         => ActualTypeArg[[Ctx0]]
+            TypeArgs              => TypeArgs[[Ctx0]]
+            PackageOrTypeName     => PackageOrTypeName[[Ctx0]]
+            MethodName            => MethodName[[Ctx0]]
+            ExprName              => ExprName[[Ctx0]]
+            TypeName              => TypeName[[Ctx0]]
+            AmbName               => AmbName[[Ctx0]]
+            PackageName           => PackageName[[Ctx0]]
+            FloatType             => FloatType[[Ctx0]]
+            IntType               => IntType[[Ctx0]]
+            NumType               => NumType[[Ctx0]]
+            PrimType              => PrimType[[Ctx0]]
+            NullLiteral           => NullLiteral[[Ctx0]]
+            FooStringChars        => FooStringChars[[Ctx0]]
+            StringChars           => StringChars[[Ctx0]]
+            StringPart            => StringPart[[Ctx0]]
+            StringLiteral         => StringLiteral[[Ctx0]]
+            SingleChar            => SingleChar[[Ctx0]]
+            CharContent           => CharContent[[Ctx0]]
+            CharLiteral           => CharLiteral[[Ctx0]]
+            LastOcta              => LastOcta[[Ctx0]]
+            OctaEscape            => OctaEscape[[Ctx0]]
+            NamedEscape           => NamedEscape[[Ctx0]]
+            EscapeSeq             => EscapeSeq[[Ctx0]]
+            Bool                  => Bool[[Ctx0]]
+            BoolLiteral           => BoolLiteral[[Ctx0]]
+            BinaryExponent        => BinaryExponent[[Ctx0]]
+            HexaSignificand       => HexaSignificand[[Ctx0]]
+            HexaFloatNumeral      => HexaFloatNumeral[[Ctx0]]
+            SignedInteger         => SignedInteger[[Ctx0]]
+            DeciFloatExponentPart => DeciFloatExponentPart[[Ctx0]]
+            DeciFloatDigits       => DeciFloatDigits[[Ctx0]]
+            DeciFloatNumeral      => DeciFloatNumeral[[Ctx0]]
+            FloatLiteral          => FloatLiteral[[Ctx0]]
+            HexaFloatLiteral      => HexaFloatLiteral[[Ctx0]]
+            DeciFloatLiteral      => DeciFloatLiteral[[Ctx0]]
+            IntLiteral            => IntLiteral[[Ctx0]]
+            OctaNumeral           => OctaNumeral[[Ctx0]]
+            HexaNumeral           => HexaNumeral[[Ctx0]]
+            DeciNumeral           => DeciNumeral[[Ctx0]]
+            OctaLiteral           => OctaLiteral[[Ctx0]]
+            HexaLiteral           => HexaLiteral[[Ctx0]]
+            DeciLiteral           => DeciLiteral[[Ctx0]]
+            Modifier              => Modifier[[Ctx0]]
+            StrictFP              => StrictFP[[Ctx0]]
+            Synchronized          => Synchronized[[Ctx0]]
+            Volatile              => Volatile[[Ctx0]]
+            Transient             => Transient[[Ctx0]]
+            Native                => Native[[Ctx0]]
+            Static                => Static[[Ctx0]]
+            Final                 => Final[[Ctx0]]
+            Abstract              => Abstract[[Ctx0]]
+            Protected             => Protected[[Ctx0]]
+            Private               => Private[[Ctx0]]
+            Public                => Public[[Ctx0]]
+            Id                    => Id[[Ctx0]]
+            ID                    => ID[[Ctx0]]
+            Keyword               => Keyword[[Ctx0]]
+            ArrayAccess           => ArrayAccess[[Ctx0]]
+            FieldAccess           => FieldAccess[[Ctx0]]
+            MethodSpec            => MethodSpec[[Ctx0]]
+            Expr                  => Expr[[Ctx0]] ]
+
+
+module languages/java/JavaMix[Ctx]
+imports
+  languages/java-15/JavaMix[Ctx]
+
+
+module languages/sql92/lexical/Literal
+exports
+  sorts Lit
+  context-free syntax
+    UnsignedNumLit -> UnsignedLit
+    GeneralLit     -> UnsignedLit
+
+    CharStringLit     -> GeneralLit {cons("CharString")}  
+    NatCharStringLit  -> GeneralLit
+    BitStringLit      -> GeneralLit
+    HexStringLit      -> GeneralLit
+    DateTimeStringLit -> GeneralLit
+    IntervalLit       -> GeneralLit
+
+    ApproxNumLit  -> UnsignedNumLit {cons("ApproxNum")}
+    ExactNumLit   -> UnsignedNumLit {cons("ExactNum")}
+
+  sorts ExactNumLit ApproxNumLit
+  lexical syntax
+    [0-9]+ -> NumDigits  
+    [0-9]* "." [0-9]* -> NumDigits
+           "."        -> NumDigits {reject}
+           
+    NumDigits -> ExactNumLit
+
+    NumDigits Exponent -> ApproxNumLit    
+    [eE] SignedInteger -> Exponent
+    [\+\-]? [0-9]+ -> SignedInteger    
+    
+    [0-9]+ -> UnsignedInteger        
+
+  lexical restrictions
+    NumDigits     -/- [0-9]
+    SignedInteger -/- [0-9]    
+    
+  %% @todo Support character set stuff?
+  sorts CharStringLit CharRepr
+  lexical syntax
+    "'" CharRepr* "'" -> CharStringLit
+
+    [A-Za-z0-9\ \"\%\&\(\)\*\+\,\-\.\/\:\;\<\=\>\?\_\|] -> CharRepr
+    "''" -> CharRepr
+
+
+
+
+module languages/sql92/lexical/Keyword
+exports
+  sorts ReservedKeyword
+
+  lexical syntax
+    "AND"   |
+    "AVG"       -> ReservedKeyword
+
+    "BY"        -> ReservedKeyword 
+    "CROSS"     -> ReservedKeyword 
+
+    "DISTINCT"  -> ReservedKeyword 
+
+    "FROM" |
+    "FULL"      -> ReservedKeyword 
+
+    "GROUP"     -> ReservedKeyword 
+    "HAVING"    -> ReservedKeyword 
+
+    "IN"    |
+    "INNER" |
+    "INTERSECT" -> ReservedKeyword 
+
+    "JOIN"      -> ReservedKeyword 
+
+    "LIKE" |
+    "LEFT"      -> ReservedKeyword 
+
+    "SELECT"    -> ReservedKeyword 
+
+    "MAX"   |
+    "MIN"       -> ReservedKeyword 
+
+    "NATURAL" |
+    "NOT"   |
+    "NULL"      -> ReservedKeyword 
+
+    "ON"    |
+    "OR"    |
+    "ORDER" |
+    "OUTER"     -> ReservedKeyword 
+
+    "RIGHT"     -> ReservedKeyword 
+
+    "SELECT" |
+    "SUM"       -> ReservedKeyword 
+
+    "WIDTH"     -> ReservedKeyword 
+
+  lexical restrictions
+    %% TODO: fix this
+    ReservedKeyword -/- [a-zA-Z0-9\_\$]
+
+module languages/sql92/lexical/Whitespace
+exports
+  lexical syntax
+    [\ \t\n\13] -> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\13]
+
+module languages/sql92/expressions/ValueSpecification
+imports
+  languages/sql92/lexical/Literal
+
+exports
+  sorts
+    UnsignedValSpec
+    GeneralValSpec
+    DynParamSpec
+    VarSpec
+    IndicatorVar
+    VarName
+    VarName
+    
+  context-free syntax
+    UnsignedLit    -> UnsignedValSpec
+    GeneralValSpec -> UnsignedValSpec
+
+    DynParamSpec   -> GeneralValSpec
+    VarSpec        -> GeneralValSpec
+    "USER"         -> GeneralValSpec {cons("User")}
+    "CURRENT_USER" -> GeneralValSpec {cons("CurrentUser")}
+    "SESSION_USER" -> GeneralValSpec {cons("SessionUser")}
+    "SYSTEM_USER"  -> GeneralValSpec {cons("SystemUser")}
+    "VALUE"        -> GeneralValSpec {cons("Value")}
+
+    "?" -> DynParamSpec  {cons("DynParam")}
+
+    VarName Indicator?  -> VarSpec {cons("varSpec")}
+    "INDICATOR" VarName -> IndicatorVar {cons("Indicator")}
+    ":" HostId -> VarName {cons("HostVar")}
+    ":" Id     -> VarName {cons("Var")}
+
+module languages/sql92/expressions/Value
+imports
+  languages/sql92/Misc
+  languages/sql92/lexical/Literal
+  languages/sql92/expressions/Primary[NumValExpr]
+  languages/sql92/expressions/ValueSpecification
+
+exports
+  sorts NumValExpr ValExpr
+  context-free syntax
+    NumValExpr -> ValExpr
+
+    "+" NumValExpr -> NumValExpr {cons("Plus")}
+    "-" NumValExpr -> NumValExpr {cons("Minus")}
+    
+    "(" NumValExpr ")" -> NumValExpr {bracket} 
+    NumValExpr "*" NumValExpr -> NumValExpr {left, cons("Mul")}
+    NumValExpr "/" NumValExpr -> NumValExpr {left, cons("Div")}
+
+    NumValExpr "+" NumValExpr -> NumValExpr {left, cons("Plus")}
+    NumValExpr "-" NumValExpr -> NumValExpr {left, cons("Min")}
+ 
+  context-free priorities
+      {
+        "+" NumValExpr -> NumValExpr
+        "-" NumValExpr -> NumValExpr
+      }
+    > {left:
+        NumValExpr "*" NumValExpr -> NumValExpr
+        NumValExpr "/" NumValExpr -> NumValExpr
+      } 
+    > {left:
+        NumValExpr "+" NumValExpr -> NumValExpr
+        NumValExpr "-" NumValExpr -> NumValExpr
+      }
+
+module languages/sql92/expressions/Cast
+imports
+  languages/sql92/expressions/Value
+
+exports
+  context-free syntax
+    "CAST" "(" CastOperand "AS" CastTarget ")" -> CastSpec {cons("Case")}
+    "NULL"  -> CastOperand {cons("Null")}
+    ValExpr -> CastOperand
+
+    DomainName -> CastTarget
+    DataType   -> CastTarget
+
+
+
+
+module languages/sql92/expressions/Case
+imports
+  languages/sql92/lexical/Literal
+  languages/sql92/expressions/Value
+
+exports
+  sorts CaseExpr
+  context-free syntax
+    "NULLIF"   "(" ValExpr "," ValExpr ")" -> CaseExpr {cons("NullIf")}
+    "COALESCE" "(" {ValExpr ","}+      ")" -> CaseExpr {cons("Coalesce")}
+
+    "CASE" ValExpr SimpleWhenClause+ ElseClause? "END" -> CaseExpr {cons("SimpleCase")}
+    "CASE"       SearchedWhenClause+ ElseClause? "END" -> CaseExpr {cons("SearchedCase")}
+
+  sorts SimpleWhenClause SearchedWhenClause ElseClause ResultExpr
+  context-free syntax
+    "WHEN" ValExpr  "THEN" ResultExpr -> SimpleWhenClause {cons("WhenClause")}
+    "WHEN" CondExpr "THEN" ResultExpr -> SearchedWhenClause {cons("WhenClause")}
+
+    "ELSE" ResultExpr -> ElseClause {cons("ElseClause")}
+    "NULL"  -> ResultExpr {cons("Null")}
+    ValExpr -> ResultExpr
+
+
+
+
+module languages/sql92/expressions/Primary[E]
+imports
+  languages/sql92/lexical/Literal
+  languages/sql92/expressions/Case
+  languages/sql92/expressions/Cast
+
+exports
+  sorts AggrFun
+  context-free syntax
+    UnsignedValSpec -> E
+    ColumnRef       -> E
+    CaseExpr        -> E 
+    CastSpec        -> E
+
+    "(" QueryExpr ")" -> E {cons("Subquery")}
+    "(" ValExpr   ")" -> E {bracket}
+
+    "COUNT(*)"                        -> E {cons("CountAll")}
+    AggrFun "(" DupElim?  ValExpr ")" -> E {cons("Aggr")}
+
+    "AVG"   -> AggrFun {cons("Avg")  }
+    "MAX"   -> AggrFun {cons("Max")  }
+    "MIN"   -> AggrFun {cons("Min")  }
+    "SUM"   -> AggrFun {cons("Sum")  }
+    "COUNT" -> AggrFun {cons("Count")}
+
+module languages/sql92/expressions/CharacterValue
+imports
+  languages/sql92/lexical/Literal
+  languages/sql92/expressions/Value
+  languages/sql92/expressions/Primary[CharValExpr]
+  languages/sql92/expressions/Primary[BitValExpr]
+
+exports
+  sorts CharValExpr StringValFun CharValFun
+  context-free syntax
+    CharValExpr "||" CharValExpr -> CharValExpr {cons("Concat"), left}
+    CharValExpr CollateClause    -> CharValExpr {cons("Collate")}
+    StringValFun                 -> CharValExpr
+
+    CharValFun -> StringValFun
+    BitValFun  -> StringValFun
+
+  context-free syntax
+    "SUBSTRING" "(" CharValExpr "FROM" NumValExpr ForClause? ")" -> CharValFun {cons("Substring")}
+    "FOR" NumValExpr -> ForClause {cons("For")}
+
+    "UPPER" "(" CharValExpr ")" -> CharValFun {cons("Upper")}
+    "LOWER" "(" CharValExpr ")" -> CharValFun {cons("Lower")}
+
+    "CONVERT"   "(" CharValExpr "USING" QualifiedName ")" -> CharValFun {cons("Convert")}
+    "TRANSLATE" "(" CharValExpr "USING" QualifiedName ")" -> CharValFun {cons("Translate")}
+
+    "TRIM" "(" TrimOp? CharValExpr ")" -> CharValFun {cons("Trim")}
+
+    TrimSpec? CharValExpr? "FROM" -> TrimOp {cons("TrimOp")}
+    "LEADING"  -> TrimSpec {cons("Leading")}
+    "TRAILING" -> TrimSpec {cons("Trailing")}
+    "BOTH"     -> TrimSpec {cons("Both")}
+
+  %% @todo isn't the SUBSTRING amb?
+  sorts BitValFun BitValExpr
+  context-free syntax
+    "SUBSTRING" "("  BitValExpr "FROM" NumValExpr ForClause? ")" -> BitValFun {cons("Substring")}
+    BitValExpr "||" BitValExpr -> BitValExpr {cons("Concat"), left}
+    StringValFun -> BitValExpr
+
+
+
+
+module languages/sql92/expressions/Conditional
+imports
+  languages/sql92/expressions/Table
+  languages/sql92/expressions/Value
+  languages/sql92/expressions/CharacterValue
+ 
+exports
+  sorts CondExpr
+  context-free syntax
+    CondExpr "AND" CondExpr -> CondExpr {left, cons("And")} 
+    CondExpr "OR"  CondExpr -> CondExpr {left, cons("Or")} 
+    "NOT" CondExpr          -> CondExpr {cons("Not")} 
+    "(" CondExpr ")"        -> CondExpr {bracket} 
+
+  context-free priorities
+     "NOT" CondExpr           -> CondExpr
+    > CondExpr "AND" CondExpr -> CondExpr
+    > CondExpr "OR" CondExpr  -> CondExpr
+
+  %%%  
+   %% Predicates
+   %%%
+  context-free syntax
+    RowConstructor CompOp RowConstructor -> CondExpr {cons("Comparison")}
+    RowConstructor Not? "BETWEEN" RowConstructor -> CondExpr {cons("Between")}
+    RowConstructor Not? "IN" "(" InPredVal ")" -> CondExpr {cons("In")}
+    "NOT" -> Not {cons("Not")}
+    QueryExpr       -> InPredVal
+    {ValExpr ","}+  -> InPredVal {cons("Values")}
+
+    CharValExpr Not? "LIKE" CharValExpr EscapeClause? -> CondExpr {cons("Like")}
+    "ESCAPE" CharValExpr? -> EscapeClause {cons("Escape")}
+
+    "IS" Not? "NULL" -> CondExpr {cons("IsNull")}
+
+    RowConstructor CompOp Quantifier "(" QueryExpr ")" -> CondExpr {cons("QuantifiedComparison")}
+    "ALL"  -> Quantifier {cons("All")}
+    "ANY"  -> Quantifier {cons("Any")}
+    "SOME" -> Quantifier {cons("Some")}
+    
+    "EXISTS" "(" QueryExpr ")" -> CondExpr {cons("Exists")}
+    "UNIQUE" "(" QueryExpr ")" -> CondExpr {cons("Unique")}
+
+    RowConstructor "MATCH" Unique? PartialOrFull? "(" QueryExpr ")" -> CondExpr {cons("Match")}
+    "UNIQUE"  -> Unique {cons("Unique")}
+    "PARTIAL" -> PartialOrFull {cons("Partial")}
+    "FULL"    -> PartialOrFull {cons("Full")}
+
+    RowConstructor "OVERLAPS" RowConstructor -> CondExpr {cons("Overlaps")}
+
+  context-free syntax
+    "="  -> CompOp {cons("EqOp")  }
+    "<"  -> CompOp {cons("LtOp")  }
+    "<=" -> CompOp {cons("LtEqOp")}
+    ">"  -> CompOp {cons("GtOp")  }
+    ">=" -> CompOp {cons("GtEqOp")}
+    "<>" -> CompOp {cons("LtGtOp")}
+
+  context-free syntax
+    ValExpr    -> RowConstructor
+    "NULL"     -> RowConstructor {cons("Null")}
+    "DEFAULT"  -> RowConstructor {cons("Default")}
+
+    "(" {RowConstructor ","}+ ")" -> RowConstructor {cons("Row")}
+    "(" QueryExpr             ")" -> RowConstructor {cons("Subquery")}
+
+module languages/sql92/lexical/Identifier
+imports
+  languages/sql92/lexical/Keyword
+
+exports
+  sorts Catalog ColumnName TableName RangeVar
+  context-free syntax
+    Identifier -> Catalog    {cons("Catalog")} 
+    Identifier -> ColumnName {cons("ColumnName")} 
+    Identifier -> TableName  {cons("TableName")}
+    Identifier -> RangeVar   {cons("RangeVar")} 
+
+  lexical syntax
+    [a-zA-Z][a-zA-Z0-9\_]* -> Identifier
+    ReservedKeyword        -> Identifier {reject}
+
+  lexical restrictions
+    Identifier -/- [a-zA-Z0-9\_]
+
+module languages/sql92/Misc
+imports
+  languages/sql92/lexical/Identifier
+
+exports
+  sorts ColumnRef ColumnQualifier Table SetQuantifier
+  context-free syntax
+
+    (Catalog ".")? Identifier -> Schema    {cons("Schema")}
+    (Schema ".")?  Identifier -> BaseTable {cons("BaseTable")}
+
+    BaseTable -> Table 
+
+    (ColumnQualifier ".")? ColumnName -> ColumnRef {cons("ColumnRef")}
+
+    Table      -> ColumnQualifier
+    RangeVar   -> ColumnQualifier
+    Identifier -> ColumnQualifier {cons("AmbQualifier"), prefer}
+
+    "ALL"       -> SetQuantifier {cons("All")}
+    "DISTINCT"  -> SetQuantifier {cons("Distinct")}
+
+module languages/sql92/expressions/Table
+imports
+  languages/sql92/Misc
+  languages/sql92/lexical/Identifier
+  languages/sql92/expressions/Conditional
+  languages/sql92/expressions/Value
+
+exports
+  sorts QueryExpr TableExpr RowConstructor
+  context-free syntax
+    JoinTableExpr     -> QueryExpr
+    "(" QueryExpr ")" -> QueryExpr {bracket}
+
+    QueryExpr "UNION"     All? Corresponding? QueryExpr -> QueryExpr {cons("Union")}
+    QueryExpr "EXCEPT"    All? Corresponding? QueryExpr -> QueryExpr {cons("Except")}
+    QueryExpr "INTERSECT" All? Corresponding? QueryExpr -> QueryExpr {cons("Intersect")}
+    "ALL" -> All {cons("All")} 
+    "CORRESPONDING" ByClause?      -> Corresponding {cons("Corresponding")}
+    "BY" "(" {ColumnName ","}+ ")" -> ByClause      {cons("By")}
+
+    "VALUES" {RowConstructor ","}+  -> QueryExpr {cons("Values")}
+    "TABLE" TableName               -> QueryExpr {cons("Table")}
+
+  %%%
+   %% Query specification
+   %%%  
+  context-free syntax
+    "SELECT" SetQuantifier? {SelectItem ","}+ TableExpr -> QueryExpr {cons("Select")}
+
+
+    ValExpr (As? ColumnName)? -> SelectItem {cons("ColumnProject")}
+    (RangeVar ".")? "*"     -> SelectItem {cons("WildcardProject")}
+
+    %% Ugh, these should not be visible in the AST at all.
+    "AS" -> As {cons("As")}
+
+  %%%
+   %% Table expression
+   %%%
+  context-free syntax
+    "FROM" {TableRef ","}+ WhereClause? GroupByClause? HavingClause? -> TableExpr {cons("From")}
+
+    ColumnRef               -> GroupingColumnRef
+    ColumnRef CollateClause -> GroupingColumnRef {cons("Collate")}
+    
+    "WHERE" CondExpr                     -> WhereClause   {cons("Where")}
+    "GROUP BY" {GroupingColumnRef ","}+  -> GroupByClause {cons("GroupBy")}
+    "HAVING" CondExpr                    -> HavingClause  {cons("Having")}
+
+  %%%
+   %% Table references
+   %%%
+  context-free syntax
+    Table (As? RangeVar ( "(" {ColumnName ","}+ ")")? )?          -> TableRef {cons("TableRef")}
+    "(" QueryExpr ")" As? RangeVar ( "(" {ColumnName ","}+ ")" )? -> TableRef {cons("TableRef")}
+    JoinTableExpr -> TableRef
+
+
+  %%%
+   %% Joined tables
+   %%%
+  context-free syntax
+    TableRef "CROSS JOIN"                TableRef       -> JoinTableExpr {cons("CrossJoin")}
+    TableRef "NATURAL" JoinType? "JOIN"  TableRef       -> JoinTableExpr {cons("NaturalJoin")}
+
+    TableRef  JoinType? "JOIN" TableRef JoinSpec -> JoinTableExpr {cons("Join")}
+
+    "ON" CondExpr                     -> JoinSpec {cons("On")}
+    "USING" "(" {ColumnName ","}+ ")" -> JoinSpec {cons("Using")}
+
+
+    "INNER"       -> JoinType {cons("Inner")}
+    "LEFT OUTER"  -> JoinType {cons("Left")}
+    "RIGHT OUTER" -> JoinType {cons("Right")}
+    "FULL OUTER"  -> JoinType {cons("Full")}
+    "UNION"       -> JoinType {cons("Union")}
+
+module languages/sql92/Statements
+imports
+  languages/sql92/expressions/Table
+  languages/sql92/lexical/Whitespace  
+  languages/sql92/lexical/Keyword
+  languages/sql92/lexical/Literal  
+  
+exports
+  sorts Stm ExecStm DataStm
+  context-free syntax
+    ExecStm ";" -> Stm {cons("Stm")}
+
+    DataStm -> ExecStm
+    
+    DeleteStm    -> DataStm
+    SelectStm    -> DataStm
+    InsertStm    -> DataStm
+    UpdateStm    -> DataStm
+    TempTableDec -> DataStm
+    
+    QueryExpr OrderByClause? -> SelectStm {cons("SelectStm")}
+
+  context-free syntax
+    "ORDER" "BY" {SortSpec ","}+ -> OrderByClause {cons("OrderBy")}
+
+    %% @todo collate clause
+    SortKey OrderingSpec? -> SortSpec {cons("SortSpec")}
+    
+    ColumnName      -> SortKey
+    UnsignedInteger -> SortKey
+    
+    "ASC"  -> OrderingSpec {cons("Ascending")}
+    "DESC" -> OrderingSpec {cons("Descending")}
+
+module languages/sql92/Main
+imports
+  languages/sql92/Statements
+
+
+
+
+module SQLMix[Ctx0]
+imports languages/sql92/Main
+          [ OrderingSpec       => OrderingSpec[[Ctx0]]
+            SortKey            => SortKey[[Ctx0]]
+            SortSpec           => SortSpec[[Ctx0]]
+            OrderByClause      => OrderByClause[[Ctx0]]
+            SelectStm          => SelectStm[[Ctx0]]
+            DataStm            => DataStm[[Ctx0]]
+            ExecStm            => ExecStm[[Ctx0]]
+            Stm                => Stm[[Ctx0]]
+            JoinType           => JoinType[[Ctx0]]
+            JoinSpec           => JoinSpec[[Ctx0]]
+            JoinTableExpr      => JoinTableExpr[[Ctx0]]
+            TableRef           => TableRef[[Ctx0]]
+            HavingClause       => HavingClause[[Ctx0]]
+            GroupByClause      => GroupByClause[[Ctx0]]
+            WhereClause        => WhereClause[[Ctx0]]
+            GroupingColumnRef  => GroupingColumnRef[[Ctx0]]
+            TableExpr          => TableExpr[[Ctx0]]
+            As                 => As[[Ctx0]]
+            SelectItem         => SelectItem[[Ctx0]]
+            ByClause           => ByClause[[Ctx0]]
+            Corresponding      => Corresponding[[Ctx0]]
+            All                => All[[Ctx0]]
+            QueryExpr          => QueryExpr[[Ctx0]]
+            RowConstructor     => RowConstructor[[Ctx0]]
+            CompOp             => CompOp[[Ctx0]]
+            PartialOrFull      => PartialOrFull[[Ctx0]]
+            Unique             => Unique[[Ctx0]]
+            Quantifier         => Quantifier[[Ctx0]]
+            EscapeClause       => EscapeClause[[Ctx0]]
+            InPredVal          => InPredVal[[Ctx0]]
+            Not                => Not[[Ctx0]]
+            BitValFun          => BitValFun[[Ctx0]]
+            TrimSpec           => TrimSpec[[Ctx0]]
+            TrimOp             => TrimOp[[Ctx0]]
+            ForClause          => ForClause[[Ctx0]]
+            CharValFun         => CharValFun[[Ctx0]]
+            StringValFun       => StringValFun[[Ctx0]]
+            ResultExpr         => ResultExpr[[Ctx0]]
+            ElseClause         => ElseClause[[Ctx0]]
+            SearchedWhenClause => SearchedWhenClause[[Ctx0]]
+            SimpleWhenClause   => SimpleWhenClause[[Ctx0]]
+            CaseExpr           => CaseExpr[[Ctx0]]
+            ValExpr            => ValExpr[[Ctx0]]
+            VarName            => VarName[[Ctx0]]
+            IndicatorVar       => IndicatorVar[[Ctx0]]
+            VarSpec            => VarSpec[[Ctx0]]
+            DynParamSpec       => DynParamSpec[[Ctx0]]
+            GeneralValSpec     => GeneralValSpec[[Ctx0]]
+            UnsignedValSpec    => UnsignedValSpec[[Ctx0]]
+            AggrFun            => AggrFun[[Ctx0]]
+            CastTarget         => CastTarget[[Ctx0]]
+            CastOperand        => CastOperand[[Ctx0]]
+            CastSpec           => CastSpec[[Ctx0]]
+            CharRepr           => CharRepr[[Ctx0]]
+            CharStringLit      => CharStringLit[[Ctx0]]
+            UnsignedInteger    => UnsignedInteger[[Ctx0]]
+            SignedInteger      => SignedInteger[[Ctx0]]
+            Exponent           => Exponent[[Ctx0]]
+            ApproxNumLit       => ApproxNumLit[[Ctx0]]
+            ExactNumLit        => ExactNumLit[[Ctx0]]
+            NumDigits          => NumDigits[[Ctx0]]
+            UnsignedNumLit     => UnsignedNumLit[[Ctx0]]
+            GeneralLit         => GeneralLit[[Ctx0]]
+            UnsignedLit        => UnsignedLit[[Ctx0]]
+            SetQuantifier      => SetQuantifier[[Ctx0]]
+            ColumnQualifier    => ColumnQualifier[[Ctx0]]
+            ColumnRef          => ColumnRef[[Ctx0]]
+            Table              => Table[[Ctx0]]
+            BaseTable          => BaseTable[[Ctx0]]
+            Schema             => Schema[[Ctx0]]
+            RangeVar           => RangeVar[[Ctx0]]
+            TableName          => TableName[[Ctx0]]
+            ColumnName         => ColumnName[[Ctx0]]
+            Catalog            => Catalog[[Ctx0]]
+            Identifier         => Identifier[[Ctx0]]
+            ReservedKeyword    => ReservedKeyword[[Ctx0]]
+            NumValExpr         => NumValExpr[[Ctx0]]
+            CharValExpr        => CharValExpr[[Ctx0]]
+            BitValExpr         => BitValExpr[[Ctx0]]
+            CondExpr           => CondExpr[[Ctx0]] ]
+
+
+module Embedded-SQL[Ctx E]
+imports
+  SQLMix[Ctx]
+
+exports
+
+  %%%
+   %% Quotations
+   %%% 
+  context-free syntax
+    "<|" QueryExpr[[Ctx]]      "|>" -> E {cons("ToMetaExpr")}
+    "<|" Stm[[Ctx]]            "|>" -> E {cons("ToMetaExpr")}
+    "<|" CondExpr[[Ctx]]       "|>" -> E {cons("ToMetaExpr")}
+    "<|" WhereClause[[Ctx]]?   "|>" -> E {cons("ToMetaExpr")}
+    "<|" OrderByClause[[Ctx]]? "|>" -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti-quotations
+   %%% 
+  context-free syntax
+    "${" E "}" -> SelectItem[[Ctx]]     {cons("FromMetaExpr")}
+    "${" E "}" -> Table[[Ctx]]          {cons("FromMetaExpr")}
+    "${" E "}" -> CondExpr[[Ctx]]       {cons("FromMetaExpr")}
+    "${" E "}" -> CharStringLit[[Ctx]]  {cons("FromMetaExpr")}
+    "${" E "}" -> WhereClause[[Ctx]]?   {cons("FromMetaExpr")}
+    "${" E "}" -> OrderByClause[[Ctx]]? {cons("FromMetaExpr")}
+
+module Java-SQL
+imports
+  Embedded-SQL[SQLCtx Expr[[JavaCtx]]]
+  languages/java/JavaMix[JavaCtx]
+
+exports
+  context-free start-symbols CompilationUnit[[JavaCtx]]
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/grammars/StrategoJava.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/grammars/StrategoJava.def	Wed Mar  2 14:01:15 2011	(r22255)
@@ -0,0 +1,3164 @@
+definition
+module languages/java-15/expressions/Priorities
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/expressions/Main
+
+exports
+  context-free priorities
+      Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr
+    > {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      } 
+
+  context-free priorities
+      {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      }
+    > { "(" PrimType ")" Expr -> Expr    
+        "(" RefType  ")" Expr -> Expr
+      }
+
+  context-free priorities
+      "(" PrimType ")" Expr -> Expr
+    > {left:
+        Expr "*" Expr -> Expr
+        Expr "/" Expr -> Expr
+        Expr "%" Expr -> Expr
+      } 
+
+  context-free priorities
+      "(" RefType ")" Expr -> Expr 
+    > {
+        "++" Expr -> Expr
+        "--" Expr -> Expr
+        "+"  Expr -> Expr
+        "-"  Expr -> Expr
+      }
+
+  context-free priorities
+    {
+      Expr ArraySubscript -> ArrayAccess
+      Expr "." Id -> FieldAccess
+      Expr "." TypeArgs? Id -> MethodSpec
+    }
+  > {right:
+      Expr "++" -> Expr
+      Expr "--" -> Expr
+    }
+  > {
+      "++" Expr -> Expr
+      "--" Expr -> Expr
+      "+"  Expr -> Expr
+      "-"  Expr -> Expr
+      "~"  Expr -> Expr
+      "!"  Expr -> Expr
+    }
+  > {left:
+      Expr "*" Expr -> Expr
+      Expr "/" Expr -> Expr
+      Expr "%" Expr -> Expr
+    } 
+  > {left:
+      Expr "+" Expr -> Expr
+      Expr "-" Expr -> Expr
+    }
+  > {left:
+      Expr "<<"  Expr -> Expr
+      Expr ">>"  Expr -> Expr
+      Expr ">>>" Expr -> Expr
+    }
+  > {left:
+      Expr "instanceof" RefType -> Expr
+      Expr "<"   Expr -> Expr
+      Expr ">"   Expr -> Expr
+      Expr "<="  Expr -> Expr
+      Expr ">="  Expr -> Expr
+    }
+  > {left:
+      Expr "=="  Expr -> Expr
+      Expr "!="  Expr -> Expr
+    }
+  >   Expr "&"   Expr -> Expr
+  >   Expr "^"   Expr -> Expr
+  >   Expr "|"   Expr -> Expr
+  >   Expr "&&"  Expr -> Expr
+  >   Expr "||"  Expr -> Expr
+  >   Expr CondMid Expr -> Expr
+  > {right:
+      LHS "="    Expr -> Expr
+      LHS "*="   Expr -> Expr
+      LHS "/="   Expr -> Expr
+      LHS "%="   Expr -> Expr
+      LHS "+="   Expr -> Expr
+      LHS "-="   Expr -> Expr
+      LHS "<<="  Expr -> Expr
+      LHS ">>="  Expr -> Expr
+      LHS ">>>=" Expr -> Expr
+      LHS "&="   Expr -> Expr
+      LHS "^="   Expr -> Expr
+      LHS "|="   Expr -> Expr
+    }
+
+module languages/java-15/expressions/Restrictions
+exports
+  lexical restrictions
+    "+" -/- [\+]
+    "-" -/- [\-]
+    "/" -/- [\/]
+
+module languages/java-15/expressions/AssignmentOperators
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts LHS
+  context-free syntax
+    LHS "="    Expr -> Expr {cons("Assign")}
+    LHS "*="   Expr -> Expr {cons("AssignMul")}
+    LHS "/="   Expr -> Expr {cons("AssignDiv")}
+    LHS "%="   Expr -> Expr {cons("AssignRemain")}
+    LHS "+="   Expr -> Expr {cons("AssignPlus")}
+    LHS "-="   Expr -> Expr {cons("AssignMinus")}
+    LHS "<<="  Expr -> Expr {cons("AssignLeftShift")}
+    LHS ">>="  Expr -> Expr {cons("AssignRightShift")}
+    LHS ">>>=" Expr -> Expr {cons("AssignURightShift")}
+    LHS "&="   Expr -> Expr {cons("AssignAnd")}
+    LHS "^="   Expr -> Expr {cons("AssignExcOr")}
+    LHS "|="   Expr -> Expr {cons("AssignOr")}
+
+    ExprName    -> LHS
+    FieldAccess -> LHS
+    ArrayAccess -> LHS
+
+
+
+
+module languages/java-15/expressions/BinaryOperators
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/types/Main
+
+exports
+  sorts CondMid
+  context-free syntax
+    Expr "instanceof" RefType -> Expr {cons("InstanceOf")}
+
+    Expr "*"   Expr -> Expr  {left, cons("Mul")}
+    Expr "/"   Expr -> Expr  {left, cons("Div")}
+    Expr "%"   Expr -> Expr  {left, cons("Remain")}
+
+    Expr "+"   Expr -> Expr  {left, cons("Plus")}
+    Expr "-"   Expr -> Expr  {left, cons("Minus")}
+
+    Expr "<<"  Expr -> Expr  {left, cons("LeftShift")}
+    Expr ">>"  Expr -> Expr  {left, cons("RightShift")}
+    Expr ">>>" Expr -> Expr  {left, cons("URightShift")}
+
+    Expr "<"   Expr -> Expr  {left, cons("Lt")}
+    Expr ">"   Expr -> Expr  {left, cons("Gt")}
+    Expr "<="  Expr -> Expr  {left, cons("LtEq")}
+    Expr ">="  Expr -> Expr  {left, cons("GtEq")}
+    Expr "=="  Expr -> Expr  {left, cons("Eq")}
+    Expr "!="  Expr -> Expr  {left, cons("NotEq")}
+
+    Expr "&&"  Expr -> Expr  {left, cons("LazyAnd")}
+    Expr "||"  Expr -> Expr  {left, cons("LazyOr")}
+
+    Expr "&" Expr -> Expr {left, cons("And")}
+    Expr "^" Expr -> Expr {left, cons("ExcOr")}
+    Expr "|" Expr -> Expr {left, cons("Or")}
+
+    %% todo JFR-30
+    Expr CondMid Expr -> Expr {right, cons("Cond")}
+    "?" Expr ":" -> CondMid {bracket}
+
+module languages/java-15/expressions/UnaryOperators
+imports 
+  languages/java-15/expressions/Main
+exports
+  context-free syntax
+    "+" Expr -> Expr {cons("Plus")}
+    "-" Expr -> Expr {cons("Minus")}
+
+    "++" Expr -> Expr {cons("PreIncr")}
+    "--" Expr -> Expr {cons("PreDecr")}
+
+    "~" Expr -> Expr {cons("Complement")}
+    "!" Expr -> Expr {cons("Not")}
+
+    "(" PrimType ")" Expr -> Expr {cons("CastPrim")}
+    "(" RefType  ")" Expr -> Expr {cons("CastRef")}
+
+module languages/java-15/expressions/Postfix
+imports 
+  languages/java-15/expressions/Main
+
+exports
+  context-free syntax
+    ExprName  -> Expr
+    Expr "++" -> Expr {cons("PostIncr")}
+    Expr "--" -> Expr {cons("PostDecr")}
+
+module languages/java-15/expressions/MethodInvocation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts MethodSpec
+  context-free syntax
+    MethodSpec "(" {Expr ","}* ")" -> Expr {cons("Invoke")}
+
+                               MethodName -> MethodSpec {cons("Method")}
+                    Expr "." TypeArgs? Id -> MethodSpec {cons("Method")}
+                 "super" "." TypeArgs? Id -> MethodSpec {cons("SuperMethod")}
+    TypeName "." "super" "." TypeArgs? Id -> MethodSpec {cons("QSuperMethod")}
+                 AmbName "." TypeArgs  Id -> MethodSpec {cons("GenericMethod")}
+
+  %% This priority forbids a Expr "." MethodSpec if the expression is a plain ExprName.
+  %% This solves an ambiguity with the MethodName and AmbName . TypeArgs MethodSpecs.
+  %% foo.bar.fred() results in a MethodName MethodSpec.
+  %% (foo.bar).fred() results in the Expr. MethodSpec
+  %% foo.bar.<T>fred() results in a GenericMethod
+  context-free priorities
+      Expr "." TypeArgs? Id -> MethodSpec
+    > ExprName  -> Expr
+
+
+
+
+module languages/java-15/expressions/ArrayAccess
+imports
+  languages/java-15/expressions/Main
+exports
+  sorts
+    ArrayAccess
+    ArraySubscript
+
+  context-free syntax
+    ArrayAccess -> Expr
+
+    %% todo: JFR-29
+    Expr ArraySubscript -> ArrayAccess {cons("ArrayAccess")}
+    "[" Expr "]" -> ArraySubscript {bracket}
+
+    ArrayCreationExpr ArraySubscript -> ArrayAccess {reject}
+
+module languages/java-15/expressions/FieldAccess
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts FieldAccess
+  context-free syntax
+    FieldAccess -> Expr
+
+  context-free syntax
+
+                    Expr "." Id -> FieldAccess {cons("Field")}
+                ExprName "." Id -> FieldAccess {reject}
+                 "super" "." Id -> FieldAccess {cons("SuperField")}
+    TypeName "." "super" "." Id -> FieldAccess {cons("QSuperField")}
+
+module languages/java-15/expressions/ArrayCreation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ArrayCreationExpr
+    ArrayBaseType
+    Dim
+    DimExpr
+
+  context-free syntax
+    ArrayCreationExpr     -> Expr
+
+    "new" ArrayBaseType DimExpr+ Dim*  -> ArrayCreationExpr {cons("NewArray")}
+    "new" ArrayBaseType Dim+ ArrayInit -> ArrayCreationExpr {cons("NewArray")}
+
+    PrimType -> ArrayBaseType
+    TypeName -> ArrayBaseType
+    TypeName "<" "?" ">" -> ArrayBaseType {cons("UnboundWld")}
+
+    "[" Expr "]" -> DimExpr {cons("Dim")}
+    "[" "]"      -> Dim     {cons("Dim")}
+
+module languages/java-15/expressions/ClassInstanceCreation
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  context-free syntax
+
+             "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody? -> Expr {cons("NewInstance")}
+    Expr "." "new" TypeArgs? Id         TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("QNewInstance")}
+
+module languages/java-15/expressions/Primary
+imports
+  languages/java-15/lexical/literals/Main
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  %%%
+   %% Section 15.8.1: Lexical Literals
+   %%%
+  sorts Literal
+  context-free syntax
+    Literal -> Expr {cons("Lit")}
+
+    IntLiteral    -> Literal
+    FloatLiteral  -> Literal
+    BoolLiteral   -> Literal 
+    CharLiteral   -> Literal
+    StringLiteral -> Literal
+    NullLiteral   -> Literal
+
+  %%%
+   %% Section 15.8.2: Class Literals
+   %%%
+  sorts ClassLiteral
+  context-free syntax
+    ClassLiteral -> Literal
+    Type   "." "class" -> ClassLiteral {cons("Class")}
+    "void" "." "class" -> ClassLiteral {cons("VoidClass")}
+
+  %%%
+   %% Section 15.8.3/4: (Qualified this)
+   %%%
+  context-free syntax
+                 "this" -> Expr {cons("This")}
+    TypeName "." "this" -> Expr {cons("QThis")}
+
+  %%%
+   %% Section 15.8.5: Parenthesized Expression
+   %%%
+  context-free syntax
+    "(" Expr ")"          -> Expr {bracket}
+
+module languages/java-15/expressions/Main
+imports
+  languages/java-15/expressions/Primary
+  languages/java-15/expressions/ClassInstanceCreation
+  languages/java-15/expressions/ArrayCreation
+  languages/java-15/expressions/FieldAccess
+  languages/java-15/expressions/ArrayAccess
+  languages/java-15/expressions/MethodInvocation
+  languages/java-15/expressions/Postfix
+  languages/java-15/expressions/UnaryOperators
+  languages/java-15/expressions/BinaryOperators
+  languages/java-15/expressions/AssignmentOperators
+  languages/java-15/expressions/Restrictions
+  languages/java-15/expressions/Priorities
+
+exports
+  sorts
+    Expr
+
+module languages/java-15/statements/Main
+imports
+  languages/java-15/statements/Blocks
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+
+
+
+module languages/java-15/arrays/Main
+imports
+  languages/java-15/arrays/ArrayInitializers
+
+
+
+
+module languages/java-15/interfaces/Main
+imports
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+
+
+
+module languages/java-15/classes/Main
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+
+
+
+
+module languages/java-15/packages/PackageDeclarations
+imports
+  languages/java-15/names/Main
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    PackageDec
+
+  context-free syntax
+    Anno* "package" PackageName ";" -> PackageDec {cons("PackageDec")}
+
+module languages/java-15/packages/ImportDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+
+exports
+  sorts
+    ImportDec
+
+  context-free syntax
+    "import" TypeName                  ";"  -> ImportDec {cons("TypeImportDec")}
+    "import" PackageName       "." "*" ";"  -> ImportDec {cons("TypeImportOnDemandDec")}
+    "import" "static" TypeName "." Id  ";"  -> ImportDec {cons("StaticImportDec")}
+    "import" "static" TypeName "." "*" ";"  -> ImportDec {cons("StaticImportOnDemandDec")}
+
+module languages/java-15/interfaces/AnnotationTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    AnnoDec
+    AnnoDecHead
+
+  context-free syntax
+    AnnoDecHead "{" AnnoElemDec* "}" -> AnnoDec {cons("AnnoDec")}
+    (Anno | InterfaceMod)* "@" "interface" Id -> AnnoDecHead {cons("AnnoDecHead")}
+
+  sorts
+    AnnoElemDec
+    DefaultVal
+
+  context-free syntax
+    AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" -> AnnoElemDec {cons("AnnoMethodDec")}
+
+    ConstantDec  -> AnnoElemDec
+    ClassDec     -> AnnoElemDec
+    InterfaceDec -> AnnoElemDec
+    EnumDec      -> AnnoElemDec
+    AnnoDec      -> AnnoElemDec
+    ";"          -> AnnoElemDec {cons("Semicolon")}
+
+    "default" ElemVal -> DefaultVal {cons("DefaultVal")}
+
+module languages/java-15/interfaces/AbstractMethodDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+
+exports
+  sorts
+    AbstractMethodDec
+    AbstractMethodMod
+
+  context-free syntax
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Throws? ";" -> AbstractMethodDec {cons("AbstractMethodDec")}
+
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" -> AbstractMethodDec {cons("DeprAbstractMethodDec")}
+
+    Public   -> AbstractMethodMod
+    Abstract -> AbstractMethodMod
+
+
+
+
+
+module languages/java-15/interfaces/ConstantDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    ConstantDec
+    ConstantMod
+
+  context-free syntax
+    (Anno | ConstantMod)* Type {VarDec ","}+ ";" -> ConstantDec {cons("ConstantDec")}
+
+    Public -> ConstantMod
+    Static -> ConstantMod
+    Final  -> ConstantMod
+
+
+
+
+module languages/java-15/interfaces/InterfaceDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    InterfaceDec
+    InterfaceDecHead
+    ExtendsInterfaces
+    InterfaceMemberDec
+    InterfaceMod
+
+  context-free syntax
+    AnnoDec -> InterfaceDec
+
+    InterfaceDecHead "{" InterfaceMemberDec* "}" -> InterfaceDec {cons("InterfaceDec")}
+
+    (Anno | InterfaceMod)* "interface" Id TypeParams? ExtendsInterfaces? -> InterfaceDecHead {cons("InterfaceDecHead")}
+    "extends" {InterfaceType ","}+ -> ExtendsInterfaces {cons("ExtendsInterfaces")}
+
+  context-free syntax
+    ConstantDec       -> InterfaceMemberDec
+    AbstractMethodDec -> InterfaceMemberDec
+    ClassDec          -> InterfaceMemberDec
+    InterfaceDec      -> InterfaceMemberDec
+    ";"               -> InterfaceMemberDec {cons("Semicolon")}
+
+  context-free syntax
+    Public         -> InterfaceMod
+    Protected      -> InterfaceMod
+    Private        -> InterfaceMod
+    Abstract       -> InterfaceMod
+    Static         -> InterfaceMod
+    StrictFP       -> InterfaceMod
+
+
+
+
+module languages/java-15/classes/EnumDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  sorts
+    EnumDec
+    EnumDecHead
+    EnumBody
+    EnumConst
+    EnumConstArgs
+    EnumBodyDecs
+
+  context-free syntax
+    EnumDecHead EnumBody -> EnumDec {cons("EnumDec")}
+
+    (Anno | ClassMod)* "enum" Id Interfaces? -> EnumDecHead {cons("EnumDecHead")}
+
+    "{" {EnumConst ","}*     EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+    "{" {EnumConst ","}* "," EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+
+    Id EnumConstArgs? ClassBody?  -> EnumConst {cons("EnumConst")}
+    "(" {Expr ","}* ")"  -> EnumConstArgs {bracket}
+
+    ";" ClassBodyDec* -> EnumBodyDecs {cons("EnumBodyDecs")}
+
+module languages/java-15/classes/ConstructorDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ConstrDec
+    ConstrBody
+    ConstrHead
+    ConstrInv
+
+  context-free syntax
+    ConstrHead ConstrBody ->  ConstrDec {cons("ConstrDec")}
+    (Anno | ConstrMod)* TypeParams? Id "(" {FormalParam ","}* ")" Throws? -> ConstrHead {cons("ConstrDecHead")}
+
+
+    "{" ConstrInv? BlockStm* "}" -> ConstrBody {cons("ConstrBody")}
+
+             TypeArgs? "this"  "(" {Expr ","}* ")" ";" -> ConstrInv {cons("AltConstrInv")}
+             TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("SuperConstrInv")}
+    Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("QSuperConstrInv")}
+
+  sorts ConstrMod
+  context-free syntax  
+    Public    -> ConstrMod
+    Protected -> ConstrMod
+    Private   -> ConstrMod
+
+
+
+
+module languages/java-15/classes/StaticInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    StaticInit
+
+  context-free syntax
+    "static" Block -> StaticInit   {cons("StaticInit")}
+
+module languages/java-15/classes/InstanceInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    InstanceInit
+
+  context-free syntax
+    Block -> InstanceInit {cons("InstanceInit")}
+
+module languages/java-15/statements/Statements
+imports
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Blocks
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Stm ExprStm
+
+  context-free syntax
+    Block      -> Stm
+
+  %%%
+   %% Section 14.6: The Empty Statement
+   %%%
+  context-free syntax
+    ";"        -> Stm {cons("Empty")}
+
+  %%%
+   %% Section 14.7: Labeled Statements
+   %%%
+  context-free syntax
+    Id ":" Stm -> Stm {cons("Labeled")}
+
+  %%%
+   %% Section 14.8: Expressions Statements
+   %%%
+  context-free syntax
+    Expr ";"   -> ExprStm {cons("ExprStm")}
+    ExprStm    -> Stm
+
+  %%%
+   %% Section 14.9: The If Statement
+   %%%
+  context-free syntax
+    "if" "(" Expr ")" Stm             -> Stm {prefer, cons("If")}
+    "if" "(" Expr ")" Stm  "else" Stm -> Stm {cons("If")}
+
+  %%%
+   %% Section 14.10: The Assert Statement
+   %%%
+  context-free syntax
+    "assert" Expr          ";" -> Stm  {cons("AssertStm")}
+    "assert" Expr ":" Expr ";" -> Stm  {cons("AssertStm")}
+
+
+  %%%
+   %% Section 14.11: The Switch Statement
+   %%%
+  sorts SwitchBlock SwitchGroup SwitchLabel
+  context-free syntax
+    "switch" "(" Expr ")" SwitchBlock -> Stm {cons("Switch")}
+    "{" SwitchGroup* SwitchLabel* "}" -> SwitchBlock {cons("SwitchBlock")}
+    SwitchLabel+ BlockStm+ -> SwitchGroup  {cons("SwitchGroup")}
+
+    "case" Expr ":" -> SwitchLabel {cons("Case")}
+    "default"   ":" -> SwitchLabel {cons("Default")}
+
+  %%%
+   %% Section 14.12: The While Statement
+   %%%
+  context-free syntax
+    "while" "(" Expr ")" Stm -> Stm {cons("While")}
+
+  %%%
+   %% Section 14.13: The Do Statement
+   %%%
+  context-free syntax
+  "do" Stm "while" "(" Expr ")" ";" -> Stm {cons("DoWhile")}
+
+
+  %%%
+   %% Section 14.14: The For Statement
+   %%%
+  context-free syntax
+    "for" "(" LocalVarDec ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+    "for" "(" {Expr ","}* ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+
+    "for" "(" FormalParam ":" Expr ")" Stm -> Stm {cons("ForEach")}
+
+  %%%
+   %% Section 14.15: The Break Statement
+   %%%
+  context-free syntax
+    "break"    Id? ";"   -> Stm {cons("Break")}
+
+  %%%
+   %% Section 14.16: The Continue Statement
+   %%%
+  context-free syntax
+    "continue" Id? ";"   -> Stm {cons("Continue")}
+
+  %%%
+   %% Section 14.17: The Return Statement
+   %%%
+  context-free syntax
+    "return"   Expr? ";" -> Stm {cons("Return")}
+
+  %%%
+   %% Section 14.18: The Throw Statement
+   %%%
+  context-free syntax
+    "throw"    Expr  ";" -> Stm {cons("Throw")}
+
+  %%%
+   %% Section 14.19: The Synchronized Statement
+   %%%
+  context-free syntax
+    "synchronized" "(" Expr ")" Block -> Stm {cons("Synchronized")}
+
+  %%%
+   %% Section 14.20: The Try Statement
+   %%%
+  sorts CatchClause
+  context-free syntax
+    "try" Block CatchClause+ -> Stm {cons("Try")}
+    "try" Block CatchClause* "finally" Block -> Stm {cons("Try")}
+    "catch" "(" FormalParam ")" Block -> CatchClause {cons("Catch")}
+
+module languages/java-15/statements/LocalVariableDeclarations
+imports
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts
+    LocalVarDecStm
+    LocalVarDec
+
+  context-free syntax
+    LocalVarDec ";" -> LocalVarDecStm {cons("LocalVarDecStm")}
+    (Anno | VarMod)* Type {VarDec ","}+ -> LocalVarDec {cons("LocalVarDec")}
+    
+    %% Disambiguate List<T> i;
+    Expr "<" Expr ">" Expr ";" -> ExprStm {reject}
+
+module languages/java-15/statements/Blocks
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+exports
+  sorts
+    BlockStm
+    Block
+
+  context-free syntax
+    "{" BlockStm* "}" -> Block {cons("Block")}
+
+    LocalVarDecStm  -> BlockStm 
+    ClassDec        -> BlockStm {cons("ClassDecStm")}
+    Stm             -> BlockStm
+
+
+
+
+module languages/java-15/classes/MethodDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    MethodDec
+    MethodDecHead
+    ResultType
+
+  context-free syntax
+    MethodDecHead MethodBody -> MethodDec {cons("MethodDec")}
+
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws?      -> MethodDecHead {cons("MethodDecHead")}
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? -> MethodDecHead {cons("DeprMethodDecHead")}
+
+    Type   -> ResultType
+    "void" -> ResultType {cons("Void")}
+
+  sorts FormalParam
+  context-free syntax
+    (Anno | VarMod)* Type       VarDecId -> FormalParam {cons("Param")}
+    (Anno | VarMod)* Type "..." VarDecId -> FormalParam {cons("VarArityParam")}
+
+  sorts VarMod
+  context-free syntax
+    Final -> VarMod
+
+  sorts MethodMod
+  context-free syntax
+    Public         -> MethodMod
+    Protected      -> MethodMod
+    Private        -> MethodMod
+
+    Abstract       -> MethodMod
+    Static         -> MethodMod
+    Final          -> MethodMod
+    Synchronized   -> MethodMod
+    Native         -> MethodMod
+    StrictFP       -> MethodMod
+
+  %%%
+   %% Section 8.4.6: Method Throws
+   %%%
+  sorts
+    Throws
+    ExceptionType
+
+  context-free syntax
+    "throws" {ExceptionType ","}+ -> Throws {cons("ThrowsDec")}
+    ClassType -> ExceptionType
+    %% TypeVar -> ExceptionType
+
+  %%%
+   %% Section 8.4.7: Method Body
+   %%% 
+  sorts MethodBody
+  context-free syntax
+    Block -> MethodBody
+    ";"   -> MethodBody {cons("NoMethodBody")}
+
+module languages/java-15/arrays/ArrayInitializers
+imports
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts ArrayInit
+  context-free syntax
+    "{" {VarInit ","}*     "}" -> ArrayInit {cons("ArrayInit")}
+    "{" {VarInit ","}* "," "}" -> ArrayInit {cons("ArrayInit")}
+
+module languages/java-15/interfaces/Annotations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Anno
+    ElemVal
+    ElemValPair
+
+  context-free syntax
+    "@" TypeName "(" {ElemValPair ","}* ")" -> Anno {cons("Anno")}
+    "@" TypeName "(" ElemVal ")"            -> Anno {cons("SingleElemAnno")}
+    "@" TypeName                            -> Anno {cons("MarkerAnno")}
+
+  context-free syntax  
+    Id "=" ElemVal -> ElemValPair {cons("ElemValPair")}
+
+    Expr -> ElemVal
+    Anno -> ElemVal
+
+    "{" {ElemVal ","}*     "}" -> ElemVal {cons("ElemValArrayInit")}
+    "{" {ElemVal ","}* "," "}" -> ElemVal {cons("ElemValArrayInit")}
+
+    %% Assignments are not allowed as element values.
+    LHS "=" Expr -> ElemVal {reject}
+
+module languages/java-15/classes/FieldDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/interfaces/Annotations
+  languages/java-15/arrays/ArrayInitializers
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    FieldDec
+    VarDec
+    VarDecId
+    Dim
+    VarInit
+
+  context-free syntax
+    (Anno | FieldMod)* Type { VarDec ","}+ ";" -> FieldDec {cons("FieldDec")}
+
+    VarDecId             -> VarDec {cons("VarDec")}
+    VarDecId "=" VarInit -> VarDec {cons("VarDec")}
+
+    Id      -> VarDecId
+    Id Dim+ -> VarDecId {cons("ArrayVarDecId")}
+
+    "[" "]" -> Dim {cons("Dim")}
+
+    Expr      -> VarInit
+    ArrayInit -> VarInit
+
+  sorts FieldMod
+  context-free syntax
+    Public    -> FieldMod
+    Protected -> FieldMod
+    Private   -> FieldMod
+
+    Static    -> FieldMod
+    Final     -> FieldMod
+    Transient -> FieldMod
+    Volatile  -> FieldMod
+
+
+
+
+module languages/java-15/classes/ClassDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/InstanceInitializers
+  languages/java-15/classes/StaticInitializers
+  languages/java-15/classes/ConstructorDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    ClassDec
+    ClassBody
+    ClassDecHead
+
+  context-free syntax
+    EnumDec -> ClassDec
+
+    ClassDecHead ClassBody -> ClassDec {cons("ClassDec")}
+    "{" ClassBodyDec* "}" -> ClassBody {cons("ClassBody")}
+
+    (Anno | ClassMod)* "class" Id  TypeParams? Super? Interfaces? -> ClassDecHead {cons("ClassDecHead")}
+
+  %% 8.1.1: Class Modifiers
+  sorts ClassMod
+  context-free syntax
+    Abstract  -> ClassMod
+    Public    -> ClassMod
+    Protected -> ClassMod
+    Private   -> ClassMod
+    Static    -> ClassMod
+    Final     -> ClassMod
+    StrictFP  -> ClassMod
+
+  %% 8.1.4: Superclasses and Subclasses
+  sorts Super
+  context-free syntax
+
+    "extends" ClassType -> Super {cons("SuperDec")}
+
+  %% 8.1.5: Superinterfaces
+  sorts Interfaces
+  context-free syntax
+    "implements" {InterfaceType ","}+ -> Interfaces {cons("ImplementsDec")}
+
+
+  %% 8.1.6: Class Body and Member Declarations
+  sorts
+    ClassBodyDec
+    ClassMemberDec
+
+  context-free syntax
+    ClassMemberDec -> ClassBodyDec
+    InstanceInit   -> ClassBodyDec
+    StaticInit     -> ClassBodyDec
+    ConstrDec      -> ClassBodyDec
+
+  context-free syntax
+    FieldDec     -> ClassMemberDec
+    MethodDec    -> ClassMemberDec
+    ClassDec     -> ClassMemberDec
+    InterfaceDec -> ClassMemberDec
+    ";"          -> ClassMemberDec {cons("Semicolon")}
+
+module languages/java-15/packages/TypeDeclarations
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    TypeDec
+
+  context-free syntax
+    ClassDec      -> TypeDec
+    InterfaceDec  -> TypeDec
+    ";"           -> TypeDec {cons("Semicolon")}
+
+module languages/java-15/packages/CompilationUnits
+imports
+  languages/java-15/packages/PackageDeclarations
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/TypeDeclarations
+
+exports
+  sorts
+    CompilationUnit
+
+  context-free syntax
+    PackageDec? ImportDec* TypeDec+ -> CompilationUnit   {cons("CompilationUnit")}
+
+module languages/java-15/packages/Main
+imports
+  languages/java-15/packages/CompilationUnits
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/PackageDeclarations
+
+
+
+
+module languages/java-15/names/Main
+imports
+  languages/java-15/lexical/Identifiers
+exports
+  sorts PackageName
+  context-free syntax
+    {Id "."}+ -> PackageName {cons("PackageName")}
+
+  sorts
+    TypeName
+    ExprName
+    MethodName
+    PackageOrTypeName
+    AmbName
+
+  context-free syntax
+    Id             -> AmbName {cons("AmbName")}
+    AmbName "." Id -> AmbName {cons("AmbName")}
+
+    Id                       -> TypeName {cons("TypeName")}
+    PackageOrTypeName "." Id -> TypeName {cons("TypeName")}
+
+    Id             -> ExprName {cons("ExprName")}
+    AmbName "." Id -> ExprName {cons("ExprName")}
+
+    Id             -> MethodName  {cons("MethodName")}
+    AmbName "." Id -> MethodName  {cons("MethodName")}
+
+    Id                       -> PackageOrTypeName {cons("PackageOrTypeName")}
+    PackageOrTypeName "." Id -> PackageOrTypeName {cons("PackageOrTypeName")}
+
+module languages/java-15/types/ParameterizedTypes
+imports
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeArgs
+    ActualTypeArg
+    WildcardBound
+    
+  context-free syntax
+    "<" {ActualTypeArg ","}+ ">" -> TypeArgs {cons("TypeArgs")}
+
+    Type               -> ActualTypeArg
+    "?" WildcardBound? -> ActualTypeArg {cons("Wildcard")}
+
+    "extends" RefType -> WildcardBound {cons("WildcardUpperBound")}
+    "super"   RefType -> WildcardBound {cons("WildcardLowerBound")}
+
+module languages/java-15/types/TypeVariables
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeParams
+    TypeParam
+    TypeBound
+    TypeVarId
+  
+  context-free syntax
+    TypeVarId TypeBound? -> TypeParam {cons("TypeParam")}
+    
+    "extends" {ClassOrInterfaceType "&"}+ -> TypeBound {cons("TypeBound")}
+    "<" {TypeParam ","}+ ">" -> TypeParams {cons("TypeParams")}
+
+    Id -> TypeVarId
+    
+
+
+
+module languages/java-15/types/ReferenceTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main  
+  languages/java-15/types/ParameterizedTypes
+  languages/java-15/types/TypeVariables
+
+
+exports
+  sorts
+    RefType
+    ClassOrInterfaceType
+    ClassType
+    InterfaceType
+    TypeDecSpec
+    ArrayType
+    TypeVar
+
+  context-free syntax
+    ClassOrInterfaceType -> RefType
+    ArrayType            -> RefType
+    
+    %% This production rule is highly ambiguous, since every
+    %% TypeVar can be a ClassOrInterfaceType. A later disambiguation
+    %% phase has to find out if a ClassOrInterfaceType is in fact
+    %% a TypeVar.
+    
+    %% TypeVar -> RefType {avoid}
+
+  context-free syntax
+  
+    %% ClassType and InterfaceType are ambiguous. We modify the
+    %% production of ClassOrInterfaceType to make this ambiguity explicit.
+    
+    TypeDecSpec TypeArgs? -> ClassOrInterfaceType {cons("ClassOrInterfaceType")}
+    TypeDecSpec TypeArgs? -> ClassType {cons("ClassType")}
+    TypeDecSpec TypeArgs? -> InterfaceType {cons("InterfaceType")}
+
+    TypeName -> TypeDecSpec
+    TypeDecSpec TypeArgs "." Id -> TypeDecSpec {cons("Member")}
+    
+  context-free syntax    
+    TypeVarId -> TypeVar {cons("TypeVar")}
+
+  context-free syntax
+    Type "[" "]" -> ArrayType  {cons("ArrayType")}
+
+module languages/java-15/types/PrimitiveTypes
+exports
+  sorts
+    PrimType
+    NumType
+    IntType  
+    FloatType
+
+  context-free syntax
+    NumType   -> PrimType
+    "boolean" -> PrimType {cons("Boolean")}
+
+    IntType   -> NumType
+    FloatType -> NumType
+
+    "byte"   -> IntType   {cons("Byte")}
+    "short"  -> IntType   {cons("Short")}
+    "int"    -> IntType   {cons("Int")}
+    "long"   -> IntType   {cons("Long")}
+    "char"   -> IntType   {cons("Char")}
+    "float"  -> FloatType {cons("Float")}
+    "double" -> FloatType {cons("Double")}
+
+module languages/java-15/types/Main
+imports
+  languages/java-15/types/PrimitiveTypes
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/types/ParameterizedTypes
+
+exports
+  sorts
+    Type
+
+  context-free syntax
+    PrimType -> Type
+    RefType  -> Type
+
+
+
+
+module languages/java-15/lexical/literals/NullLiteral
+exports
+  sorts NullLiteral
+  context-free syntax
+    "null"  -> NullLiteral {cons("Null")}
+
+module languages/java-15/lexical/literals/StringLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    StringLiteral
+    StringPart
+    StringChars
+    FooStringChars
+
+  syntax
+    StringLiteral -> <StringLiteral-CF>
+    
+    "\"" StringPart* "\"" -> StringLiteral {cons("String")}
+    StringChars    -> StringPart {cons("Chars")}
+    UnicodeEscape  -> StringPart
+    EscapeSeq      -> StringPart
+
+    <FooStringChars-LEX> -> StringChars
+    ~[\"\\\n\13]+  -> <FooStringChars-LEX>
+
+  restrictions
+    StringChars -/- ~[\"\\\n\13]
+
+module languages/java-15/lexical/literals/EscapeSequences
+imports
+
+exports
+  sorts
+    EscapeSeq
+    NamedEscape
+    OctaEscape
+    LastOcta
+
+  syntax
+    OctaEscape  -> EscapeSeq
+    NamedEscape -> EscapeSeq
+
+    "\\" [btnfr\"\'\\]     -> NamedEscape {cons("NamedEscape")}
+    "\\" LastOcta          -> OctaEscape  {cons("OctaEscape1")}
+    "\\" [0-3] LastOcta    -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [4-7] [0-7]       -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [0-3] [0-7] [0-7] -> OctaEscape  {cons("OctaEscape3")}
+
+    [0-7] -> LastOcta
+
+  restrictions
+    LastOcta -/- [0-7]
+
+module languages/java-15/lexical/literals/CharacterLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    CharLiteral
+    CharContent
+    SingleChar
+
+  syntax
+    CharLiteral   -> <CharLiteral-CF>
+
+    "'" CharContent "'" -> CharLiteral {cons("Char")}
+    SingleChar    -> CharContent {cons("Single")}
+    UnicodeEscape -> CharContent
+    EscapeSeq     -> CharContent
+
+    ~[\r\n\'\\] -> SingleChar
+
+
+
+
+module languages/java-15/lexical/literals/BooleanLiterals
+exports
+  sorts
+    Bool
+    BoolLiteral
+
+  context-free syntax
+    Bool -> BoolLiteral {cons("Bool")}
+    "true"  -> Bool {cons("True")}
+    "false" -> Bool {cons("False")}
+
+module languages/java-15/lexical/literals/FloatingPointLiterals
+exports
+  sorts
+    FloatLiteral
+    DeciFloatLiteral
+    HexaFloatLiteral      
+  
+  context-free syntax
+    DeciFloatLiteral -> FloatLiteral {cons("Float")}
+    HexaFloatLiteral -> FloatLiteral {cons("Float")}
+
+  lexical syntax
+    DeciFloatNumeral [fFdD]? -> DeciFloatLiteral
+    HexaFloatNumeral [fFdD]? -> HexaFloatLiteral
+    
+    %% Reject plain integer literals as decimal float literals.
+    %% A similar rejection for hexadecimal float literals is not
+    %% required, since these always contain an exponent part.
+    [0-9]+ -> DeciFloatLiteral {reject}
+
+  lexical restrictions
+    DeciFloatLiteral -/- [fFdD]
+    HexaFloatLiteral -/- [fFdD]
+
+  %%%
+   %% Decimal Floating Point Numerals
+   %%%
+  sorts
+    DeciFloatNumeral
+    DeciFloatDigits
+    DeciFloatExponentPart
+
+  lexical syntax
+    DeciFloatDigits DeciFloatExponentPart? -> DeciFloatNumeral
+
+    [0-9]* "." [0-9]* -> DeciFloatDigits
+           "."        -> DeciFloatDigits {reject}
+    [0-9]+            -> DeciFloatDigits
+
+    [eE] SignedInteger -> DeciFloatExponentPart
+    
+    [\+\-]? [0-9]+ -> SignedInteger    
+
+  lexical restrictions
+    DeciFloatDigits  -/- [0-9]
+    DeciFloatExponentPart -/- [0-9]
+
+  %%%
+   %% Hexadecimal Floating Point Literals
+   %%%
+  sorts
+    HexaFloatNumeral
+    HexaSignificand
+    BinaryExponent
+    SignedInteger
+    
+  lexical syntax
+    HexaSignificand BinaryExponent -> HexaFloatNumeral
+
+    [0][xX] [0-9a-fA-F]+                  -> HexaSignificand
+    [0][xX] [0-9a-fA-F]* "." [0-9a-fA-F]* -> HexaSignificand
+    [0][xX]              "."              -> HexaSignificand {reject}
+
+    [pP] SignedInteger -> BinaryExponent
+  lexical restrictions
+    HexaSignificand -/- [0-9a-fA-F]
+    SignedInteger   -/- [0-9]
+
+module languages/java-15/lexical/literals/IntegerLiterals
+exports
+  sorts
+    IntLiteral
+    DeciLiteral
+    HexaLiteral
+    OctaLiteral
+    DeciNumeral
+    HexaNumeral
+    OctaNumeral
+
+  context-free syntax
+    DeciLiteral -> IntLiteral {cons("Deci")}
+    HexaLiteral -> IntLiteral {cons("Hexa")}
+    OctaLiteral -> IntLiteral {cons("Octa")}
+
+  lexical syntax
+    DeciNumeral [lL]? -> DeciLiteral
+    HexaNumeral [lL]? -> HexaLiteral
+    OctaNumeral [lL]? -> OctaLiteral
+
+    "0" -> DeciNumeral
+    [1-9][0-9]*  -> DeciNumeral
+    [0][xX] [0-9a-fA-F]+ -> HexaNumeral
+    [0]     [0-7]+       -> OctaNumeral
+
+  lexical restrictions
+    DeciNumeral -/- [0-9\.fFdD]
+    HexaNumeral -/- [0-9a-fA-F]
+    OctaNumeral -/- [0-7]
+
+    DeciLiteral -/- [lL]
+    HexaLiteral -/- [lL]
+    OctaLiteral -/- [lL]
+
+module languages/java-15/lexical/literals/Main
+imports
+  languages/java-15/lexical/literals/IntegerLiterals
+  languages/java-15/lexical/literals/FloatingPointLiterals
+  languages/java-15/lexical/literals/BooleanLiterals  
+  languages/java-15/lexical/literals/CharacterLiterals  
+  languages/java-15/lexical/literals/StringLiterals
+  languages/java-15/lexical/literals/NullLiteral
+
+
+
+
+module languages/java-15/lexical/Modifiers
+exports
+  sorts
+    Public
+    Private
+    Protected
+    Abstract
+    Final
+    Static
+    Native
+    Transient
+    Volatile
+    Synchronized
+    StrictFP
+    Modifier
+
+  context-free syntax
+    "public"       -> Public       {cons("Public")}
+    "private"      -> Private      {cons("Private")}
+    "protected"    -> Protected    {cons("Protected")}
+
+    "abstract"     -> Abstract     {cons("Abstract")}
+    "final"        -> Final        {cons("Final")}
+    "static"       -> Static       {cons("Static")}
+    "native"       -> Native       {cons("Native")}
+    "transient"    -> Transient    {cons("Transient")}
+    "volatile"     -> Volatile     {cons("Volatile")}
+    "synchronized" -> Synchronized {cons("Synchronized")}
+    "strictfp"     -> StrictFP     {cons("StrictFP")}
+
+    Public       -> Modifier
+    Private      -> Modifier
+    Protected    -> Modifier
+    Abstract     -> Modifier
+    Final        -> Modifier
+    Static       -> Modifier
+    Native       -> Modifier
+    Transient    -> Modifier
+    Volatile     -> Modifier
+    Synchronized -> Modifier
+    StrictFP     -> Modifier
+
+
+
+
+module languages/java-15/lexical/Keywords
+exports
+  sorts Keyword
+  lexical syntax
+    "abstract"      -> Keyword
+    "assert"        -> Keyword
+    "boolean"       -> Keyword
+    "break"         -> Keyword
+    "byte"          -> Keyword
+    "case"          -> Keyword
+    "catch"         -> Keyword
+    "char"          -> Keyword
+    "class"         -> Keyword
+    "const"         -> Keyword
+    "continue"      -> Keyword
+    "default"       -> Keyword
+    "do"            -> Keyword
+    "double"        -> Keyword
+    "else"          -> Keyword
+    "enum"          -> Keyword
+    "extends"       -> Keyword
+    "final"         -> Keyword
+    "finally"       -> Keyword
+    "float"         -> Keyword
+    "for"           -> Keyword
+    "goto"          -> Keyword
+    "if"            -> Keyword
+    "implements"    -> Keyword
+    "import"        -> Keyword
+    "instanceof"    -> Keyword
+    "int"           -> Keyword
+    "interface"     -> Keyword
+    "long"          -> Keyword
+    "native"        -> Keyword
+    "new"           -> Keyword
+    "package"       -> Keyword
+    "private"       -> Keyword
+    "protected"     -> Keyword
+    "public"        -> Keyword
+    "return"        -> Keyword
+    "short"         -> Keyword
+    "static"        -> Keyword
+    "strictfp"      -> Keyword
+    "super"         -> Keyword
+    "switch"        -> Keyword
+    "synchronized"  -> Keyword
+    "this"          -> Keyword
+    "throw"         -> Keyword
+    "throws"        -> Keyword
+    "transient"     -> Keyword
+    "try"           -> Keyword
+    "void"          -> Keyword
+    "volatile"      -> Keyword
+    "while"         -> Keyword
+
+  lexical restrictions
+
+    "abstract"
+    "assert"
+    "boolean" 
+    "break"   
+    "byte"    
+    "case"    
+    "catch"   
+    "char"     
+    "class"
+    "const"    
+    "continue" 
+    "default"  
+    "do"       
+    "double"   
+    "else"     
+    "enum"
+    "extends"  
+    "final"     
+    "finally"   
+    "float"     
+    "for"       
+    "goto"       
+    "if"         
+    "implements" 
+    "import"     
+    "instanceof" 
+    "int"        
+    "interface"  
+    "long"       
+    "native"     
+    "new"        
+    "package"    
+    "private"    
+    "protected"   
+    "public"       
+    "return"       
+    "short"        
+    "static"     
+    "strictfp"
+    "super"        
+    "switch"       
+    "synchronized" 
+    "this"         
+    "throw"        
+    "throws"       
+    "transient"    
+    "try"          
+    "void"         
+    "volatile"     
+    "while"       -/- [A-Za-z0-9\_\$]
+
+module languages/java-15/lexical/Identifiers
+imports
+  languages/java-15/lexical/Keywords
+exports
+  sorts
+    Id
+    ID
+
+  context-free syntax
+    ID -> Id {cons("Id")}
+
+  lexical syntax
+    [A-Za-z\_\$][A-Za-z0-9\_\$]* -> ID
+    
+    Keyword -> ID {reject}
+    "true"  -> ID {reject}
+    "false" -> ID {reject}
+    "null"  -> ID {reject}
+
+  lexical restrictions
+    ID -/- [a-zA-Z0-9\_\$]
+
+module languages/java-15/lexical/Comments
+imports
+  languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    Comment
+    EOLCommentChars
+    CommentPart
+    UnicodeEscape
+    BlockCommentChars
+    Asterisk
+    EscEscChar
+    EscChar
+
+  lexical syntax
+    Comment -> LAYOUT
+
+    "//" EOLCommentChars LineTerminator -> Comment
+    ~[\n\r]* -> EOLCommentChars
+
+    "/*"  CommentPart* "*/" -> Comment
+    "/**" CommentPart* "*/" -> Comment
+    "/**/"                  -> Comment %% Strange javadoc comment
+
+    BlockCommentChars -> CommentPart
+    EscChar           -> CommentPart
+    EscEscChar        -> CommentPart
+    Asterisk          -> CommentPart
+    UnicodeEscape     -> CommentPart
+
+    ~[\*\\]+ -> BlockCommentChars
+
+    "*"    -> Asterisk
+    "\\\\" -> EscEscChar
+    "\\"   -> EscChar
+
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape
+
+  lexical restrictions
+    "/**"    -/- [\/]
+    "/*"     -/- [\*]
+    Asterisk -/- [\/]
+    EscChar  -/- [\\u]
+
+    BlockCommentChars -/- ~[\*\\]
+    EOLCommentChars   -/- ~[\n\13]
+
+  context-free restrictions
+    LAYOUT?  -/- [\/].[\*]
+    LAYOUT?  -/- [\/].[\/]
+
+module languages/java-15/lexical/WhiteSpace
+exports
+  lexical syntax
+    [\ \t\12\r\n] -> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\12\n\r]
+
+module languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    LineTerminator CarriageReturn EndOfFile
+
+  lexical syntax
+    [\n]           -> LineTerminator
+    [\r][\n]       -> LineTerminator
+    CarriageReturn -> LineTerminator
+    EndOfFile      -> LineTerminator
+
+    [\r] -> CarriageReturn
+
+  lexical restrictions
+    CarriageReturn -/- [\n]
+
+  %% End of file is empty.
+  lexical syntax    
+    -> EndOfFile
+
+  lexical restrictions
+    EndOfFile -/- ~[]
+
+module languages/java-15/lexical/UnicodeEscapes
+exports
+  sorts
+    UnicodeEscape
+
+  syntax
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape {cons("UnicodeEscape")}
+
+module languages/java-15/lexical/Main
+imports
+  languages/java-15/lexical/UnicodeEscapes
+  languages/java-15/lexical/LineTerminators
+  languages/java-15/lexical/WhiteSpace
+  languages/java-15/lexical/Comments
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Keywords
+  languages/java-15/lexical/Modifiers
+  languages/java-15/lexical/literals/Main
+
+
+
+module languages/java-15/Main
+imports
+  languages/java-15/lexical/Main
+  languages/java-15/types/Main
+  languages/java-15/names/Main
+  languages/java-15/packages/Main
+  languages/java-15/classes/Main
+  languages/java-15/interfaces/Main
+  languages/java-15/arrays/Main
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+
+
+
+module languages/java/EmbeddedJava[E]
+imports
+  languages/java-15/Main
+
+exports
+  variables
+    [ij]  [0-9\']*            -> DeciLiteral {prefer}
+    [ij]  [\_] [a-zA-Z0-9\']* -> DeciLiteral {prefer}
+    [xyz] [0-9\']*            -> ID          {prefer}
+    [xyz] [\_] [a-zA-Z0-9\']* -> ID          {prefer}
+
+  context-free restrictions
+    ID -/- [\_a-zA-Z0-9\']
+
+%%%
+ %% Expressions
+ %%%
+exports
+
+  %%%
+   %% Variables for Expressions
+   %%%
+  variables
+    "e"    [0-9\']*         -> Expr           {prefer}
+    "e_" [a-zA-Z0-9\']*     -> Expr           {prefer}
+    "e"    [0-9\']* "*"     -> {VarInit ","}* {prefer}
+    "e_" [a-zA-Z0-9\']* "*" -> {VarInit ","}* {prefer}
+    "e"    [0-9\']* "*"     -> {Expr ","}*    {prefer}
+    "e_" [a-zA-Z0-9\']* "*" -> {Expr ","}*    {prefer}
+
+  lexical syntax
+    "e" [0-9\']*            -> ID {reject}
+    "e_" [a-zA-Z0-9\']*     -> ID {reject}
+
+  %%%
+   %% Quotations for Expressions
+   %%%
+  context-free syntax
+            "e" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+    "java:expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+         "expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+    "java"      "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+                "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+
+    "var-init" "|[" VarInit "]|" -> E {cons("ToMetaExpr")}
+
+%%%
+ %% Statements
+ %%%
+exports
+
+  %%%
+   %% Variables for Statements
+   %%%
+  variables
+    "stm"  [0-9\']*             -> Stm         {prefer}
+    "stm_" [a-zA-Z0-9\']*       -> Stm         {prefer}
+    "bstm" [0-9\']*             -> BlockStm    {prefer}
+    "bstm_" [a-zA-Z0-9\']*      -> BlockStm    {prefer}
+    "bstm" [0-9\']* "*"         -> BlockStm*   {prefer}    
+    "bstm_" [a-zA-Z0-9\']* "*"  -> BlockStm*   {prefer}
+
+  %%%
+   %% Quotations for Statements
+   %%%
+  context-free syntax
+    "java:bstm"  "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+         "bstm"  "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+    "java"       "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+                 "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+
+    "java:bstm*" "|[" BlockStm* "]|" -> E {cons("ToMetaListExpr")}
+         "bstm*" "|[" BlockStm* "]|" -> E {cons("ToMetaListExpr")}
+
+    "java:block-stm"  "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+         "block-stm"  "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+    "java"            "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+                      "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+
+    "java:block-stm*" "|[" BlockStm* "]|" -> E {cons("ToMetaListExpr")}
+         "block-stm*" "|[" BlockStm* "]|" -> E {cons("ToMetaListExpr")}
+
+
+    "java:stm"  "|[" Stm "]|" -> E {cons("ToMetaExpr")}
+         "stm"  "|[" Stm "]|" -> E {cons("ToMetaExpr")}
+         
+         "switch-group" "|[" SwitchGroup "]|" -> E {cons("ToMetaListExpr")}         
+    "java:switch-group" "|[" SwitchGroup "]|" -> E {cons("ToMetaListExpr")}
+    
+  %%%
+   %% Anti Quotations for Statements
+   %%%
+  context-free syntax
+    "~"       E  -> BlockStm  {cons("FromMetaExpr")}
+    "~bstm:"  E  -> BlockStm  {cons("FromMetaExpr")}
+    "~*"      E  -> BlockStm* {cons("FromMetaExpr")}
+    "~bstm*:" E  -> BlockStm* {cons("FromMetaExpr")}
+
+    "~stm:"   E  -> Stm {cons("FromMetaExpr"), prefer}
+    "~"       E  -> Stm {cons("FromMetaExpr")}
+
+    "~*"              E -> SwitchGroup* {cons("FromMetaExpr")}    
+    "~switch-group*:" E -> SwitchGroup* {cons("FromMetaExpr")}    
+
+    "~"               E -> SwitchGroup {cons("FromMetaExpr")}
+    "~switch-group:"  E -> SwitchGroup {cons("FromMetaExpr")}
+
+%%%
+ %% Variable Declarations
+ %%%
+
+  %%%
+   %% Variables for Variable Declarations
+   %%%
+  variables
+    "lvdec" [0-9]*            -> LocalVarDec    {prefer}
+    "lvdec_" [a-zA-Z0-9]*     -> LocalVarDec    {prefer}
+     "vdec" [0-9]*            -> VarDec         {prefer}
+     "vdec_" [a-zA-Z0-9]*     -> VarDec         {prefer}
+     "vdec"  [0-9]* "*"       -> {VarDec ","}+  {prefer}
+     "vdec_" [a-zA-Z0-9]* "*" -> {VarDec ","}+  {prefer}
+
+  lexical syntax
+    "lvdec"               -> ID {reject}
+    "lvdec_" [a-zA-Z0-9]* -> ID {reject}
+     "vdec"               -> ID {reject}
+     "vdec_" [a-zA-Z0-9]* -> ID {reject}
+
+  %%%
+   %% Quotations for Local Variable Declarations
+   %%%
+  context-free syntax
+    "java:lvdec"  "|[" LocalVarDec "]|" -> E {cons("ToMetaExpr")}
+         "lvdec"  "|[" LocalVarDec "]|" -> E {cons("ToMetaExpr")}
+
+    "java:vdec" "|[" VarDec "]|" -> E {cons("ToMetaExpr")}
+         "vdec" "|[" VarDec "]|" -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti Quotations for Local Variable Declarations
+   %%%
+  context-free syntax
+
+%%%
+ %% LeftHandSide of Assignment
+ %%%
+exports
+
+  %%%
+   %% Variables for LeftHandSide of Assignment
+   %%%
+  variables
+    "lhs" [0-9\']* -> LHS {prefer}
+    "e"   [0-9\']* -> LHS {prefer}
+
+  lexical syntax
+    "lhs" [0-9\']* -> ID {reject}
+
+%%%
+ %% Types
+ %%%
+exports
+
+  %%%
+   %% Variables for Types
+   %%%
+  variables
+    MetaTypeVar     -> Type     {prefer}
+    MetaPrimTypeVar -> PrimType {prefer}
+    MetaRefTypeVar  -> RefType  {prefer}
+
+  lexical syntax
+    "t"  [0-9\']*        -> MetaTypeVar
+    "t_" [a-zA-Z0-9\']*  -> MetaTypeVar
+    "ty" [0-9]*          -> MetaTypeVar
+    "ty_" [a-zA-Z0-9\']* -> MetaTypeVar
+
+    "primt"  [0-9]*        -> MetaPrimTypeVar
+    "primt_" [a-zA-Z0-9]*  -> MetaPrimTypeVar
+    "primty" [0-9]*        -> MetaPrimTypeVar
+    "primty_" [a-zA-Z0-9]* -> MetaPrimTypeVar
+    "reft"   [0-9]*        -> MetaRefTypeVar
+    "reft_" [a-zA-Z0-9]*   -> MetaRefTypeVar
+    "refty"  [0-9]*        -> MetaRefTypeVar
+    "refty_" [a-zA-Z0-9]*  -> MetaRefTypeVar
+
+    "t"  [0-9\']*          -> ID {reject}
+    "t_" [a-zA-Z0-9]*      -> ID {reject}
+    "ty" [0-9]*            -> ID {reject}
+    "ty_" [a-zA-Z0-9]*     -> ID {reject}
+    "primt"  [0-9]*        -> ID {reject}
+    "primt_" [a-zA-Z0-9]*  -> ID  {reject}
+    "primty" [0-9]*        -> ID {reject}
+    "primty_" [a-zA-Z0-9]* -> ID {reject}
+    "reft"   [0-9]*        -> ID {reject}
+    "reft_" [a-zA-Z0-9]*   -> ID {reject}    
+    "refty"  [0-9]*        -> ID {reject}
+    "refty_" [a-zA-Z0-9]*  -> ID {reject}
+
+  lexical restrictions
+    MetaTypeVar -/- [a-zA-Z0-9\_\$\']
+
+  %%%
+   %% Quotation for Types
+   %%%
+  context-free syntax
+            "t" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+           "ty" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+
+    "java:type" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+         "type" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+    "java"      "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+                "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti-Quotation for Types
+   %%%
+  context-free syntax
+    "~"       E -> Type {cons("FromMetaExpr")}
+    "~type:"  E -> Type {cons("FromMetaExpr")}
+
+%%%
+ %% Names
+ %%%
+exports
+
+  %%%
+   %% Variables for Names
+   %%%
+  variables
+    "ambname"  [0-9]*        -> AmbName    {prefer}
+    "ambname_" [a-zA-Z0-9]*  -> AmbName    {prefer}
+    "ename"    [0-9]*        -> ExprName   {prefer}
+    "ename_" [a-zA-Z0-9]*    -> ExprName   {prefer}
+    "fname"    [0-9]*        -> MethodName {prefer}
+    "fname_" [a-zA-Z0-9]*    -> MethodName {prefer}
+    "tname"    [0-9]*        -> TypeName   {prefer}
+    "tname_" [a-zA-Z0-9]*    -> TypeName   {prefer}
+    "pkgtname" [0-9]*        -> PackageOrTypeName  {prefer}
+    "pkgtname_" [a-zA-Z0-9]* -> PackageOrTypeName  {prefer}
+    "pkgname" [0-9]*         -> PackageName  {prefer}
+    "pkgname_" [a-zA-Z0-9]*  -> PackageName  {prefer}
+
+  %%%
+   %% Quotations for Names
+   %%%
+  context-free syntax
+    "ambname"  "|[" AmbName    "]|" -> E {cons("ToMetaExpr")}
+    "ename"    "|[" ExprName   "]|" -> E {cons("ToMetaExpr")}
+    "fname"    "|[" MethodName "]|" -> E {cons("ToMetaExpr")}
+    "tname"    "|[" TypeName   "]|" -> E {cons("ToMetaExpr")}
+    "pkgtname" "|[" PackageOrTypeName "]|" -> E {cons("ToMetaExpr")}
+
+%%%
+ %% Modifiers
+ %%%
+exports
+
+  %%%
+   %% Variables for Modifiers
+   %%%
+  variables
+     "mod" [0-9]*            -> MethodMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> MethodMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | MethodMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | MethodMod)* {prefer}
+     
+     "mod" [0-9]*            -> ClassMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> ClassMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | ClassMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | ClassMod)* {prefer}
+     
+     "mod" [0-9]*            -> ConstrMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> ConstrMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | ConstrMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | ConstrMod)* {prefer}
+     
+     "mod" [0-9]*            -> VarMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> VarMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | VarMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | VarMod)* {prefer}
+
+     "mod" [0-9]*            -> FieldMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> FieldMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | FieldMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | FieldMod)* {prefer}
+
+  %%%
+   %% Quotations for Modifiers
+   %%%
+  context-free syntax
+           "|[" Modifier "]|" -> E {cons("ToMetaExpr")}
+    "mod"  "|[" Modifier "]|" -> E {cons("ToMetaExpr")}
+
+    "anno" "|[" Anno "]|" -> E {cons("ToMetaExpr")}
+
+
+%%%
+ %% Formal Parameters
+ %%%
+exports
+
+  %%%
+   %% Variables for Formal Parameters
+   %%%
+  variables
+     "param" [0-9]*            -> FormalParam  {prefer}
+     "param_" [a-zA-Z0-9]*     -> FormalParam  {prefer}
+     "param" [0-9]* "*"        -> {FormalParam ","}*  {prefer}
+     "param_" [a-zA-Z0-9]* "*" -> {FormalParam ","}* {prefer}
+
+  %%%
+   %% Quotations for Formal Parameters
+   %%%
+  context-free syntax
+
+         "param"  "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+    "java:param"  "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+
+         "param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+    "java:param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+
+    "java:formal-param" "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+         "formal-param" "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+    "java"              "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+                        "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+
+    "java:formal-param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+         "formal-param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+    "java"               "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+                         "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti Quotations for Formal Parameters
+   %%%
+  context-free syntax
+    "~"  E  ->  FormalParam       {cons("FromMetaExpr")}
+    "~*" E  -> {FormalParam ","}* {cons("FromMetaExpr")}
+
+%%%
+ %% Package Declarations
+ %%%
+exports
+
+  %%%
+   %% Quotations
+   %%%
+  context-free syntax
+    "java:package-dec" "|[" PackageDec  "]|" -> E {cons("ToMetaExpr")}
+         "package-dec" "|[" PackageDec  "]|" -> E {cons("ToMetaExpr")}
+                       "|[" PackageDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:package-dec?" "|[" PackageDec? "]|" -> E {cons("ToMetaExpr")}
+         "package-dec?" "|[" PackageDec? "]|" -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti Quotations
+   %%%
+  context-free syntax
+    "~package-dec:"  E -> PackageDec {cons("FromMetaExpr")}
+    "~package-dec?:" E -> PackageDec? {cons("FromMetaExpr")}
+
+%%%
+ %% Import Declarations
+ %%%
+exports
+
+  %%%
+   %% Quotations for Import Declarations
+   %%%
+  context-free syntax
+
+    "java:import-dec"  "|[" ImportDec  "]|" -> E {cons("ToMetaExpr")}
+         "import-dec"  "|[" ImportDec  "]|" -> E {cons("ToMetaExpr")}
+                       "|[" ImportDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:import-dec*" "|[" ImportDec* "]|" -> E {cons("ToMetaListExpr")}
+         "import-dec*" "|[" ImportDec* "]|" -> E {cons("ToMetaListExpr")}
+
+  %%%
+   %% Anti Quotations for Import Declarations
+   %%%
+  context-free syntax
+
+    "~import-dec:"  E  -> ImportDec  {cons("FromMetaExpr")}
+    "~import-dec*:" E  -> ImportDec* {cons("FromMetaExpr")}
+
+%%%
+ %% Must be cleaned up
+ %%%
+exports
+  context-free syntax
+            "e" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+    "java:expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+         "expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+    "java"      "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+                "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+
+    "java:compilation-unit" "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
+         "compilation-unit" "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
+    "java"                  "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
+                            "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
+
+    "java:importdecl" "|[" ImportDec "]|"  -> E {cons("ToMetaExpr")}
+         "importdecl" "|[" ImportDec "]|"  -> E {cons("ToMetaExpr")}
+    "java"            "|[" ImportDec "]|"  -> E {cons("ToMetaExpr")}
+
+    "java:type-dec" "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
+         "type-dec" "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
+    "java"          "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
+                    "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
+
+    "java:class-body-dec" "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
+         "class-body-dec" "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
+    "java"                "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
+                          "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:interface-member-dec" "|[" InterfaceMemberDec  "]|" -> E {cons("ToMetaExpr")}
+         "interface-member-dec" "|[" InterfaceMemberDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:constant-dec" "|[" ConstantDec  "]|" -> E {cons("ToMetaExpr")}
+         "constant-dec" "|[" ConstantDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:class-body-dec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
+         "class-body-dec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
+    "java"                 "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
+                           "|[" ClassBodyDec* "]|" -> E {cons("ToMetaListExpr")}
+
+    "java:stm" "|["  Stm "]|" -> E {cons("ToMetaExpr")}
+         "stm" "|["  Stm "]|" -> E {cons("ToMetaExpr")}
+
+    "java:imember-dec" "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
+         "imember-dec" "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
+    "java"             "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
+                       "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:imember-dec*" "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
+         "imember-dec*" "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
+    "java"              "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
+                        "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
+
+  %% Anti-quotation
+  context-free syntax
+
+    "~"      E -> Name {cons("FromMetaExpr")}
+    "~name:" E -> Name {cons("FromMetaExpr")}
+    "~*:"    E -> Name {cons("FromMetaExpr")}
+
+    "~"     E     -> Id   {cons("FromMetaExpr")}
+    "~id:"  E     -> Id   {cons("FromMetaExpr")}
+    "~idd:" E ":" -> Id   {cons("FromMetaExpr")}
+
+    "~x:" E -> ID {cons("FromMetaExpr")}
+
+    "~"  E -> TypeParam        {cons("FromMetaExpr")}
+    "~*" E -> {TypeParam ","}+ {cons("FromMetaExpr")}
+
+    "~*" E -> {ExceptionType ","}* {cons("FromMetaExpr")}
+
+    "~"      E  ->  Expr {cons("FromMetaExpr")}
+    "~e:"    E  ->  Expr {prefer, cons("FromMetaExpr")}
+    "~expr:" E  ->  Expr {prefer, cons("FromMetaExpr")}
+
+    "~*" E      -> {Expr ","}*    {cons("FromMetaExpr")}
+    "~*" E      -> {VarInit ","}* {cons("FromMetaExpr")}
+
+    "~"  E  -> TypeDec  {cons("FromMetaExpr")}
+    "~*" E  -> TypeDec* {cons("FromMetaExpr")}
+
+    "~"  E  -> ClassBodyDec  {cons("FromMetaExpr")}
+    "~*" E  -> ClassBodyDec* {cons("FromMetaExpr")}
+
+    "~"  E  -> InterfaceMemberDec  {cons("FromMetaExpr")}
+    "~*" E  -> InterfaceMemberDec* {cons("FromMetaExpr")}
+
+    "~i:"      E -> DeciLiteral   {cons("FromMetaExpr")}
+    "~deci:"   E -> DeciLiteral   {cons("FromMetaExpr")}
+    "~hexa:"   E -> HexaLiteral   {cons("FromMetaExpr")}
+    "~octa:"   E -> OctaLiteral   {cons("FromMetaExpr")}
+    "~float:"  E -> FloatLiteral  {cons("FromMetaExpr")}
+    "~string:" E -> StringLiteral {cons("FromMetaExpr")}
+    "~char:"   E -> CharLiteral   {cons("FromMetaExpr")}
+
+  syntax
+    "~" <E-CF> -> StringChars {cons("FromMetaExpr"), prefer}
+    "~" <E-CF> <LAYOUT?-CF> -> SingleChar  {cons("FromMetaExpr"), prefer}
+
+module languages/java/EmbeddedJavaMix[Ctx0 E]
+imports languages/java/EmbeddedJava[E]
+          [ Name                  => Name[[Ctx0]]
+            MetaRefTypeVar        => MetaRefTypeVar[[Ctx0]]
+            MetaPrimTypeVar       => MetaPrimTypeVar[[Ctx0]]
+            MetaTypeVar           => MetaTypeVar[[Ctx0]]
+            CompilationUnit       => CompilationUnit[[Ctx0]]
+            TypeDec               => TypeDec[[Ctx0]]
+            ImportDec             => ImportDec[[Ctx0]]
+            PackageDec            => PackageDec[[Ctx0]]
+            ElemVal               => ElemVal[[Ctx0]]
+            ElemValPair           => ElemValPair[[Ctx0]]
+            Anno                  => Anno[[Ctx0]]
+            LHS                   => LHS[[Ctx0]]
+            CondMid               => CondMid[[Ctx0]]
+            ArraySubscript        => ArraySubscript[[Ctx0]]
+            DimExpr               => DimExpr[[Ctx0]]
+            ArrayBaseType         => ArrayBaseType[[Ctx0]]
+            ArrayCreationExpr     => ArrayCreationExpr[[Ctx0]]
+            ClassMemberDec        => ClassMemberDec[[Ctx0]]
+            ClassBodyDec          => ClassBodyDec[[Ctx0]]
+            Interfaces            => Interfaces[[Ctx0]]
+            Super                 => Super[[Ctx0]]
+            ClassMod              => ClassMod[[Ctx0]]
+            ClassDecHead          => ClassDecHead[[Ctx0]]
+            ClassBody             => ClassBody[[Ctx0]]
+            ClassDec              => ClassDec[[Ctx0]]
+            InterfaceMod          => InterfaceMod[[Ctx0]]
+            InterfaceMemberDec    => InterfaceMemberDec[[Ctx0]]
+            ExtendsInterfaces     => ExtendsInterfaces[[Ctx0]]
+            InterfaceDecHead      => InterfaceDecHead[[Ctx0]]
+            InterfaceDec          => InterfaceDec[[Ctx0]]
+            DefaultVal            => DefaultVal[[Ctx0]]
+            AnnoElemDec           => AnnoElemDec[[Ctx0]]
+            AnnoDecHead           => AnnoDecHead[[Ctx0]]
+            AnnoDec               => AnnoDec[[Ctx0]]
+            AbstractMethodMod     => AbstractMethodMod[[Ctx0]]
+            AbstractMethodDec     => AbstractMethodDec[[Ctx0]]
+            ConstantMod           => ConstantMod[[Ctx0]]
+            ConstantDec           => ConstantDec[[Ctx0]]
+            EnumBodyDecs          => EnumBodyDecs[[Ctx0]]
+            EnumConstArgs         => EnumConstArgs[[Ctx0]]
+            EnumConst             => EnumConst[[Ctx0]]
+            EnumBody              => EnumBody[[Ctx0]]
+            EnumDecHead           => EnumDecHead[[Ctx0]]
+            EnumDec               => EnumDec[[Ctx0]]
+            ConstrMod             => ConstrMod[[Ctx0]]
+            ConstrInv             => ConstrInv[[Ctx0]]
+            ConstrBody            => ConstrBody[[Ctx0]]
+            ConstrHead            => ConstrHead[[Ctx0]]
+            ConstrDec             => ConstrDec[[Ctx0]]
+            StaticInit            => StaticInit[[Ctx0]]
+            InstanceInit          => InstanceInit[[Ctx0]]
+            MethodBody            => MethodBody[[Ctx0]]
+            ExceptionType         => ExceptionType[[Ctx0]]
+            Throws                => Throws[[Ctx0]]
+            MethodMod             => MethodMod[[Ctx0]]
+            VarMod                => VarMod[[Ctx0]]
+            FormalParam           => FormalParam[[Ctx0]]
+            ResultType            => ResultType[[Ctx0]]
+            MethodDecHead         => MethodDecHead[[Ctx0]]
+            MethodDec             => MethodDec[[Ctx0]]
+            BlockStm              => BlockStm[[Ctx0]]
+            Block                 => Block[[Ctx0]]
+            CatchClause           => CatchClause[[Ctx0]]
+            SwitchLabel           => SwitchLabel[[Ctx0]]
+            SwitchGroup           => SwitchGroup[[Ctx0]]
+            SwitchBlock           => SwitchBlock[[Ctx0]]
+            Stm                   => Stm[[Ctx0]]
+            ExprStm               => ExprStm[[Ctx0]]
+            LocalVarDec           => LocalVarDec[[Ctx0]]
+            LocalVarDecStm        => LocalVarDecStm[[Ctx0]]
+            FieldMod              => FieldMod[[Ctx0]]
+            VarInit               => VarInit[[Ctx0]]
+            Dim                   => Dim[[Ctx0]]
+            VarDecId              => VarDecId[[Ctx0]]
+            VarDec                => VarDec[[Ctx0]]
+            FieldDec              => FieldDec[[Ctx0]]
+            ArrayInit             => ArrayInit[[Ctx0]]
+            ClassLiteral          => ClassLiteral[[Ctx0]]
+            Literal               => Literal[[Ctx0]]
+            Type                  => Type[[Ctx0]]
+            ArrayType             => ArrayType[[Ctx0]]
+            TypeVar               => TypeVar[[Ctx0]]
+            TypeDecSpec           => TypeDecSpec[[Ctx0]]
+            InterfaceType         => InterfaceType[[Ctx0]]
+            ClassType             => ClassType[[Ctx0]]
+            ClassOrInterfaceType  => ClassOrInterfaceType[[Ctx0]]
+            RefType               => RefType[[Ctx0]]
+            TypeVarId             => TypeVarId[[Ctx0]]
+            TypeParams            => TypeParams[[Ctx0]]
+            TypeBound             => TypeBound[[Ctx0]]
+            TypeParam             => TypeParam[[Ctx0]]
+            WildcardBound         => WildcardBound[[Ctx0]]
+            ActualTypeArg         => ActualTypeArg[[Ctx0]]
+            TypeArgs              => TypeArgs[[Ctx0]]
+            PackageOrTypeName     => PackageOrTypeName[[Ctx0]]
+            MethodName            => MethodName[[Ctx0]]
+            ExprName              => ExprName[[Ctx0]]
+            TypeName              => TypeName[[Ctx0]]
+            AmbName               => AmbName[[Ctx0]]
+            PackageName           => PackageName[[Ctx0]]
+            FloatType             => FloatType[[Ctx0]]
+            IntType               => IntType[[Ctx0]]
+            NumType               => NumType[[Ctx0]]
+            PrimType              => PrimType[[Ctx0]]
+            NullLiteral           => NullLiteral[[Ctx0]]
+            FooStringChars        => FooStringChars[[Ctx0]]
+            StringChars           => StringChars[[Ctx0]]
+            StringPart            => StringPart[[Ctx0]]
+            StringLiteral         => StringLiteral[[Ctx0]]
+            SingleChar            => SingleChar[[Ctx0]]
+            CharContent           => CharContent[[Ctx0]]
+            CharLiteral           => CharLiteral[[Ctx0]]
+            LastOcta              => LastOcta[[Ctx0]]
+            OctaEscape            => OctaEscape[[Ctx0]]
+            NamedEscape           => NamedEscape[[Ctx0]]
+            EscapeSeq             => EscapeSeq[[Ctx0]]
+            Bool                  => Bool[[Ctx0]]
+            BoolLiteral           => BoolLiteral[[Ctx0]]
+            BinaryExponent        => BinaryExponent[[Ctx0]]
+            HexaSignificand       => HexaSignificand[[Ctx0]]
+            HexaFloatNumeral      => HexaFloatNumeral[[Ctx0]]
+            SignedInteger         => SignedInteger[[Ctx0]]
+            DeciFloatExponentPart => DeciFloatExponentPart[[Ctx0]]
+            DeciFloatDigits       => DeciFloatDigits[[Ctx0]]
+            DeciFloatNumeral      => DeciFloatNumeral[[Ctx0]]
+            FloatLiteral          => FloatLiteral[[Ctx0]]
+            HexaFloatLiteral      => HexaFloatLiteral[[Ctx0]]
+            DeciFloatLiteral      => DeciFloatLiteral[[Ctx0]]
+            IntLiteral            => IntLiteral[[Ctx0]]
+            OctaNumeral           => OctaNumeral[[Ctx0]]
+            HexaNumeral           => HexaNumeral[[Ctx0]]
+            DeciNumeral           => DeciNumeral[[Ctx0]]
+            OctaLiteral           => OctaLiteral[[Ctx0]]
+            HexaLiteral           => HexaLiteral[[Ctx0]]
+            DeciLiteral           => DeciLiteral[[Ctx0]]
+            Modifier              => Modifier[[Ctx0]]
+            StrictFP              => StrictFP[[Ctx0]]
+            Synchronized          => Synchronized[[Ctx0]]
+            Volatile              => Volatile[[Ctx0]]
+            Transient             => Transient[[Ctx0]]
+            Native                => Native[[Ctx0]]
+            Static                => Static[[Ctx0]]
+            Final                 => Final[[Ctx0]]
+            Abstract              => Abstract[[Ctx0]]
+            Protected             => Protected[[Ctx0]]
+            Private               => Private[[Ctx0]]
+            Public                => Public[[Ctx0]]
+            Id                    => Id[[Ctx0]]
+            ID                    => ID[[Ctx0]]
+            Keyword               => Keyword[[Ctx0]]
+            ArrayAccess           => ArrayAccess[[Ctx0]]
+            FieldAccess           => FieldAccess[[Ctx0]]
+            MethodSpec            => MethodSpec[[Ctx0]]
+            Expr                  => Expr[[Ctx0]] ]
+
+
+module Stratego-Sugar-Overlays
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Terms
+
+exports
+  sorts Overlay
+  context-free syntax
+    Id 			 "=" Term 	-> Overlay {cons("OverlayNoArgs")}
+    Id "(" {Id ","}* ")" "=" Term 	-> Overlay {cons("Overlay")}
+
+module Stratego-Sugar-DynamicRules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+
+exports
+ 
+  sorts ScopeLabels
+  context-free syntax
+
+    "{|" ScopeLabels ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}
+
+    {DynRuleScopeId ","}*   -> ScopeLabels {cons("ScopeLabels")}
+    "~" Term		    -> ScopeLabels {cons("ScopeLabels")}
+
+  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
+  context-free syntax
+
+    "rules" "(" DynRuleDef* ")" -> Strategy {cons("GenDynRules")}
+
+    Id "+" Term                 -> DynRuleDef {cons("AddScopeLabel")} 
+    DynRuleId ":-"  Term        -> DynRuleDef {cons("UndefineDynRule")}
+    DynRuleId ":"   Rule        -> DynRuleDef {cons("SetDynRule")}
+    DynRuleId ":+"  Rule        -> DynRuleDef {cons("AddDynRule")}
+    DynRuleId ":"   Term        -> DynRuleDef {cons("SetDynRuleMatch")}
+
+    DynRuleId ":="  Term        -> DynRuleDef {cons("DynRuleAssign")}
+    DynRuleId ":+="  Term       -> DynRuleDef {cons("DynRuleAssignAdd")}
+
+    DynRuleId ":"   Rule "depends" "on" Term -> DynRuleDef {cons("SetDynRuleDepends")}
+
+    RuleDec "." Term            -> DynRuleId {cons("LabeledDynRuleId")}
+    RuleDec "+" Term            -> DynRuleId {cons("AddLabelDynRuleId")}
+    RuleDec                     -> DynRuleId {cons("DynRuleId")}
+
+    Id "." Term                 -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
+    Id                          -> DynRuleScopeId {cons("DynRuleScopeId")}
+
+  context-free syntax
+
+    Id                          -> RuleDec {cons("RDecNoArgs")}
+    Id "(" {Typedid ","}* ")"   -> RuleDec {cons("RDec")}
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"   -> RuleDec {cons("RDecT")}
+
+  sorts RuleNames
+  context-free syntax
+    {Id ","}*				  -> RuleNames {cons("RuleNames")}
+    "~" Term				  -> RuleNames {cons("RuleNames")}
+
+    "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+
+  syntax
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+
+  context-free syntax
+    Strategy "/" RuleNames"\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+    Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+
+    Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+
+  priorities
+    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")}
+  > {
+
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    }
+  > <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("AM")}
+
+  context-free priorities
+    StrategyAngle Term 		          -> Strategy {cons("BA")}
+  > "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+  > Strategy "/" RuleNames "\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+  > Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+  > Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+
+module Stratego-Sugar-Rules
+imports Stratego-Sugar-Strategies
+exports
+
+  sorts RuleDef
+  context-free syntax
+    Id ":" Rule 				-> RuleDef {cons("RDefNoArgs")}
+
+    Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
+
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDefT")}
+
+  sorts Rule RuleCond
+  context-free syntax
+    Term "->" Term           	    -> Rule {cons("RuleNoCond")} %% backward comp.
+    Term "->" Term "where" Strategy -> Rule {cons("Rule")}       %% backward comp.
+    Term "->" Term RuleCond+	    -> Rule {cons("Rule"), avoid}
+
+    "where" Strategy -> RuleCond {cons("WhereClause")}
+    "with"  Strategy -> RuleCond {cons("WithClause")}
+
+module Stratego-Sugar-Strategies
+imports
+  Stratego-Core-Strategies
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Constants
+  Stratego-Sugar-Signatures
+
+exports
+  context-free syntax
+    Id  		      "=" Strategy -> StrategyDef {cons("SDefNoArgs")}
+    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
+
+  context-free syntax
+    ID 				  	  -> Typedid {cons("DefaultVarDec")}
+
+  sorts Rule
+
+  sorts StrategyParen StrategyCurly StrategyAngle
+  context-free syntax
+
+    %% Abstraction
+
+    SVar "(" {Strategy ","}* ")" 	  -> Strategy {cons("Call")}
+
+    %% Match and build
+
+    "{" Strategy "}" 			  -> Strategy {cons("ScopeDefault")}
+
+     %%"<" Strategy ">" Term 		  -> Strategy {cons("BA")}
+     StrategyAngle Term 		  -> Strategy {cons("BA")}
+     "<" Strategy ">"			  -> StrategyAngle {bracket} %% {cons("AngleStrat")}
+
+    %% Combinators
+
+    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
+
+    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}
+
+    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}
+    "where" "(" Strategy ")" 		  -> Strategy {cons("Where")}
+    "with"  "(" Strategy ")" 		  -> Strategy {cons("With"), prefer}
+    "test"  "(" Strategy ")" 		  -> Strategy {cons("Test")}
+
+    %% Primitives
+
+    "prim" "(" String ")" 		  -> Strategy {cons("PrimNoArgs")}
+    "prim" "(" String "," {Term ","}* ")" -> Strategy {cons("Prim")}
+
+    %% Congruence operators
+
+    String 				  -> Strategy {cons("StrCong")}
+    Int 				  -> Strategy {cons("IntCong")}
+    Real 				  -> Strategy {cons("RealCong")}
+    Char 			 	  -> Strategy {cons("CharCong")}
+
+    String "(" {Strategy ","}* ")" 	  -> Strategy {cons("CongQ")}
+
+    %%"(" {Strategy ","}* ")" 		  -> Strategy {cons("TupleCong"),avoid}
+
+    Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
+    "{" Strategy "}"		  	  -> StrategyCurly {cons("StrategyCurly")}
+
+    "("  ")" 		  		  -> Strategy {cons("EmptyTupleCong")}
+   "(" Strategy  ")" 		          -> Strategy {bracket}
+    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy {cons("TupleCong")}
+
+%%    Mod 	  			  -> Strategy {cons("ModCongNoArgs")}
+%%    Mod "(" {Strategy ","}* ")"	  	  -> Strategy {cons("ModCong")}
+%%    Id "^" Id				  -> Mod {cons("Mod")}
+    "[" {Strategy ","}* "]" 		  -> Strategy {cons("ListCongNoTail")}
+    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy {cons("ListCong")}
+
+%%    Strategy "#" "(" StrategyInj ")" 	  -> Strategy {cons("ExplodeCong")}
+%%    Strategy "#" "(" Strategy ")" 	  -> Strategy {cons("ExplodeCong")}
+    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}
+
+  %% Syntactic sugar sugar
+
+  sorts SwitchCase
+  context-free syntax
+
+    SVar  		  		  -> Strategy {cons("CallNoArgs")}
+    "\\" Rule "\\" 			  -> Strategy {cons("LRule")}
+    "(" Rule ")" 			  -> Strategy {cons("SRule")}
+    Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
+    Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
+
+    "if" Strategy "then" Strategy 
+                  "else" Strategy "end"   -> Strategy {cons("CondChoice")}
+    "if" Strategy "then" Strategy "end"   -> Strategy {cons("IfThen")}
+
+    "switch" Strategy SwitchCase* "end"   -> Strategy {cons("SwitchChoiceNoOtherwise")}
+    "switch" Strategy SwitchCase*
+         "otherwise" ":" Strategy "end"   -> Strategy {cons("SwitchChoice")}
+
+    "case" Strategy ":" Strategy          -> SwitchCase {cons("SwitchCase")}
+
+    Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+
+    Term ":=" Term			  -> Strategy {cons("Assign")}
+
+  %% Priorities
+
+  context-free priorities
+    { Strategy StrategyCurly		  -> Strategy
+      Strategy "#" StrategyParen          -> Strategy
+    }
+  > { "!" Term 				  -> Strategy
+      "?" Term 				  -> Strategy
+    }
+  > StrategyAngle Term 		          -> Strategy
+  > Strategy "=>" Term 		  	  -> Strategy
+  > Strategy ";" Strategy 		  -> Strategy
+  > {right: 
+     Strategy "+" Strategy 		  -> Strategy
+     Strategy "<+" Strategy 		  -> Strategy
+     Strategy "+>" Strategy 		  -> Strategy
+     
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy
+    }
+
+  context-free priorities
+    Strategy 				  -> StrategyMid
+  > Strategy "+" Strategy 		  -> Strategy
+
+  context-free priorities
+    { Strategy StrategyCurly      -> Strategy
+      Strategy "#" StrategyParen  -> Strategy
+    }
+    .> Term ":=" Term -> Strategy
+
+
+
+
+module Stratego-Sugar-Terms
+imports
+  Stratego-Core-Terms
+  Stratego-Sugar-Strategies
+
+exports
+  sorts LID
+  context-free syntax
+    LId 			-> LID  {cons("ListVar")}
+    LID				-> Var  {cons("Var")}
+    LID				-> ID
+
+  context-free syntax
+    "_" PreTerm 		 -> PreTerm {cons("BuildDefaultPT")}
+    "_" Term 			 -> Term {cons("BuildDefault"),prefer}
+
+    Char 			 -> PreTerm {cons("Char")}
+
+    PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+    PreTerm                      -> Term {cons("NoAnnoList")}
+
+    "<" Strategy ">" Term 	 -> PreTerm {cons("App")}
+    "<" Strategy ">" Term 	 -> Term {cons("App"),prefer}
+
+    StrategyAngle		 -> PreTerm {cons("RootApp")}
+    StrategyAngle		 -> Term {cons("RootApp"),prefer}
+
+    "(" {Term ","}* ")" 	 -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]" 	 -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Sugar-Signatures
+imports
+  Stratego-Core-Signatures
+  Stratego-Sugar-Constants
+
+exports
+
+  sorts Sort
+  context-free syntax
+    "[" {Sort ","}* "]"		 -> Sort {cons("SortList")}
+    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
+    "(" {Sort ","}* ")"		 -> Sort {cons("SortTuple")}
+
+  sorts Kind
+  context-free syntax
+    "*" 			-> Kind {cons("Star")}
+    "**" 			-> Kind {cons("StarStar")}
+
+module Stratego-Core-Signatures
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+exports
+  sorts Sdecl
+  context-free syntax
+    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
+    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}
+
+  sorts Sort
+  context-free syntax
+    LCID 			 -> Sort {cons("SortVar")}
+    UCID 			 -> Sort {cons("SortNoArgs")}
+    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}
+
+  sorts Opdecl
+  context-free syntax
+    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
+    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
+           ":" Type 		-> Opdecl {cons("OpDeclInj")}
+
+  context-free syntax
+    "external" Id     ":" Type 	-> Opdecl {cons("ExtOpDecl")}
+    "external" String ":" Type 	-> Opdecl {cons("ExtOpDeclQ")}
+    "external"        ":" Type 	-> Opdecl {cons("ExtOpDeclInj")}
+
+  sorts Type ArgType ConstType FunType RetType
+  context-free syntax
+    Sort	                -> ConstType {cons("ConstType")}
+    {ArgType "*"}+ "->" RetType -> FunType {cons("FunType")}
+    "(" Type ")"                -> ArgType {bracket}
+    ConstType			-> ArgType
+    Type	                -> RetType
+    FunType			-> RetType {reject}
+
+    FunType			-> Type
+    ConstType			-> Type
+
+  %%%
+   %% Restriction is required for the Sort* in Sdecl: List(a) is
+   %% ambiguous.
+   %%%
+  context-free restrictions
+    Sort -/- [\(]
+
+module Stratego-Core-Terms
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+
+exports
+  sorts ID Var Wld
+  context-free syntax
+    Id 				-> Var  {cons("Var")}
+    Id				-> ID
+    %% ":" Var                  -> Var  {cons("SeqVar")}
+
+  sorts Term PreTerm
+  context-free syntax
+    Var 			 -> PreTerm 
+    Var 			 -> Term {prefer}
+
+    "_" 			 -> Wld {cons("Wld")}
+    Wld 			 -> PreTerm
+    Wld 			 -> Term {prefer}
+
+    Int 			 -> PreTerm {cons("Int")}
+    Real 			 -> PreTerm {cons("Real")}
+    String 			 -> PreTerm {cons("Str")}
+
+    Id "(" {Term ","}* ")" 	 -> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")" 	 -> PreTerm {cons("OpQ")}
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+
+    PreTerm "{^" PreTerm "}"	 -> Term {cons("Anno")}
+
+    Var "@" Term 		 -> Term {cons("As"),prefer}
+    Var "@" PreTerm 		 -> PreTerm {cons("As")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Core-Strategies
+imports
+  Stratego-Core-Terms
+  Stratego-Core-Constants
+  Stratego-Core-Signatures
+
+exports
+  sorts Def
+  context-free syntax
+    StrategyDef					 -> Def 
+    Id						 -> SVar {cons("SVar")}
+    "let" Def* "in" Strategy "end"		 -> Strategy {cons("Let")}
+    SVar "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallT")}
+
+    "call" "(" Term "|" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallDynamic")}
+
+
+  sorts StrategyDef
+  context-free syntax
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+
+  sorts Typedid
+  context-free syntax
+    ID ":" Type 			  -> Typedid {cons("VarDec")}
+
+
+  sorts Strategy SVar StrategyParen StrategyMid 
+  context-free syntax
+    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}
+
+    "fail" 				  -> Strategy {cons("Fail")}
+    "id" 				  -> Strategy {cons("Id")}
+
+    %% Match and build
+
+    "?" Term 				  -> Strategy {cons("Match")}
+    "!" Term 				  -> Strategy {cons("Build")}
+    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}
+
+    %% Combinators
+
+    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+    Strategy "<" StrategyMid 
+             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    Strategy 				  -> StrategyMid
+
+    %% Primitives
+
+    "prim" "(" String "," {Strategy ","}* "|" {Term ","}*")"  -> Strategy {cons("PrimT")}
+
+    %% Traversal
+
+    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
+    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
+    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
+
+  %% Priorities
+
+  context-free priorities
+    { "!" Term 				  -> Strategy {cons("Build")}
+      "?" Term 				  -> Strategy {cons("Match")}
+    }
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+  > {right: 
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    }
+
+  context-free syntax
+    "import-term" "(" ModName ")" -> Strategy {cons("ImportTerm")}
+
+module Stratego-Core-Modules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Strategies
+  Stratego-Core-Signatures
+
+exports 
+  sorts Module
+  context-free syntax
+    "module" ModName Decl* 	 -> Module {cons("Module")}
+    "specification" Decl*	 -> Module {cons("Specification")}
+
+  sorts Decl 
+  context-free syntax
+    "imports" ImportModName* 	-> Decl {cons("Imports")}
+    "strategies" Def* 		-> Decl {cons("Strategies")}
+    "signature" Sdecl*  	-> Decl {cons("Signature")}
+
+  sorts ImportModName
+  context-free syntax
+    ModName              -> ImportModName {cons("Import")}
+  syntax
+    <ModName-CF> "/" "-" -> <ImportModName-CF> {cons("ImportWildcard")}
+
+module Stratego-Sugar-Modules
+imports
+  Stratego-Core-Modules
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Overlays
+  Stratego-Sugar-Rules
+
+exports 
+
+  sorts Decl Def
+  context-free syntax
+    "rules" Def* 		-> Decl {cons("Rules")}
+    "overlays" Overlay* 	-> Decl {cons("Overlays")}
+
+    RuleDef 			-> Def 
+
+
+
+
+module Stratego-Core-Constants
+exports
+  sorts Int Real String StrChar
+  lexical syntax
+    [\-]? [0-9]+ 		-> Int
+    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
+    "\"" StrChar* "\"" 		-> String
+    ~[\"\\] 			-> StrChar
+    [\\] [\"tnr\\] 		-> StrChar
+
+
+
+
+module Stratego-Sugar-Constants
+imports Stratego-Core-Identifiers Stratego-Core-Constants
+exports
+  sorts Char CharChar
+  lexical syntax
+    "'" CharChar "'"		-> Char
+    ~[\']			-> CharChar
+    [\\] [\'ntr\ ]		-> CharChar
+    Char		 	-> Id {reject}
+
+module Stratego-Core-Identifiers
+exports
+  sorts ModName ModNamePart
+  lexical syntax
+    {ModNamePart "/"}+ -> ModName
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+  lexical syntax
+    "imports" 		-> ModName {reject}
+    "overlays" 		-> ModName {reject}
+    "rules" 		-> ModName {reject}
+    "signature" 	-> ModName {reject}
+    "strategies" 	-> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId
+    [\'] [a-z]+                       -> Id
+
+    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
+    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
+
+  lexical restrictions
+    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    LId  -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id {reject}
+    "'"     -> Id {reject}
+
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all"
+    "case" %% not reserved kw
+    "constructors"
+    "else" %% not reserved kw
+    "end" %% not reserved kw
+    "external" %% not reserved kw
+    "fail"
+    "id"
+    "if" %% not reserved kw
+    "in"
+    "imports" %% not reserved kw
+    "let"
+    "module"
+    "not"
+    "one"
+    "overlays"
+    "otherwise" %% not reserved kw
+    "prim"
+    "rec" %% not reserved kw
+    "rules"
+    "script"
+    "signature"
+    "some"
+    "sorts"
+    "strategies"
+    "stratego"
+    "switch" %% not reserved kw
+    "test"
+    "then" %% not reserved kw
+    "where"
+    "import-term"
+      -/- [a-zA-Z0-9\'\-\_]
+  
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Keyword
+  lexical syntax
+    "all"               -> Keyword
+    "constructors" 	-> Keyword
+    "fail" 		-> Keyword
+    "id" 		-> Keyword
+    "in" 		-> Keyword
+    "let" 		-> Keyword
+    "module" 		-> Keyword
+    "not" 		-> Keyword
+    "one" 		-> Keyword
+    "overlays" 		-> Keyword
+    "prim" 		-> Keyword
+    "rules" 		-> Keyword
+    "script" 		-> Keyword
+    "signature" 	-> Keyword
+    "some" 		-> Keyword
+    "sorts" 		-> Keyword
+    "strategies" 	-> Keyword
+    "stratego" 		-> Keyword
+    "test" 		-> Keyword
+    "where" 		-> Keyword
+    "import-term"	-> Keyword
+
+
+
+
+module Stratego-Core-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof 
+  lexical syntax
+    [\t\ \n\r]			-> Ws
+
+    "//" ~[\n]* ([\n] | Eof)	-> ShortCom
+    "/*" CommChar* "*/"	-> LongCom
+				-> Eof  
+
+    ~[\*]     -> CommChar
+
+    "*"       -> Asterisk
+    Asterisk  -> CommChar
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof      -/- ~[]
+
+  lexical syntax
+    ShortCom 	-> LAYOUT
+    LongCom 	-> LAYOUT
+    Ws 		-> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]
+
+module Stratego-Sugar-Layout
+imports Stratego-Core-Layout
+%%exports
+%%  sorts VeryLongCom Eof VLCchar Backslash
+%%  lexical syntax
+%%    "\\end{code}" VLCchar* "\\begin{code}" -> VeryLongCom
+%%    "\\begin{code}" 			   -> VeryLongCom
+%%    "\\end{code}" VLCchar* Eof 		   -> VeryLongCom
+%%    "\\literate" VLCchar* "\\begin{code}"  -> VeryLongCom
+%%    ~[\\] 				   -> VLCchar
+%%    Backslash 				   -> VLCchar
+%%    [\\] 				   -> Backslash
+
+%%  lexical restrictions
+%%    Backslash -/- [b].[e].[g].[i].[n].[\{].[c].[o].[d].[e].[\}]
+%%    Eof -/- ~[]
+
+%%  lexical syntax
+%%    VeryLongCom -> LAYOUT
+
+
+
+
+
+module Stratego-Sugar
+imports
+  Stratego-Sugar-Layout
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Constants 
+  Stratego-Sugar-Modules
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+  Stratego-Sugar-DynamicRules
+  Stratego-Sugar-Overlays
+
+hiddens
+  context-free start-symbols Module
+
+module Stratego
+imports Stratego-Sugar
+hiddens
+  context-free start-symbols Module
+
+module StrategoMix[Ctx0]
+imports Stratego
+          [ RuleNames      => RuleNames[[Ctx0]]
+            RuleDec        => RuleDec[[Ctx0]]
+            DynRuleScopeId => DynRuleScopeId[[Ctx0]]
+            DynRuleId      => DynRuleId[[Ctx0]]
+            DynRuleDef     => DynRuleDef[[Ctx0]]
+            ScopeLabels    => ScopeLabels[[Ctx0]]
+            RuleCond       => RuleCond[[Ctx0]]
+            Rule           => Rule[[Ctx0]]
+            RuleDef        => RuleDef[[Ctx0]]
+            Overlay        => Overlay[[Ctx0]]
+            SwitchCase     => SwitchCase[[Ctx0]]
+            StrategyCurly  => StrategyCurly[[Ctx0]]
+            StrategyAngle  => StrategyAngle[[Ctx0]]
+            Kind           => Kind[[Ctx0]]
+            LID            => LID[[Ctx0]]
+            ImportModName  => ImportModName[[Ctx0]]
+            Decl           => Decl[[Ctx0]]
+            Module         => Module[[Ctx0]]
+            StrategyParen  => StrategyParen[[Ctx0]]
+            Typedid        => Typedid[[Ctx0]]
+            StrategyDef    => StrategyDef[[Ctx0]]
+            SVar           => SVar[[Ctx0]]
+            Def            => Def[[Ctx0]]
+            Type           => Type[[Ctx0]]
+            RetType        => RetType[[Ctx0]]
+            ArgType        => ArgType[[Ctx0]]
+            FunType        => FunType[[Ctx0]]
+            ConstType      => ConstType[[Ctx0]]
+            Opdecl         => Opdecl[[Ctx0]]
+            Sort           => Sort[[Ctx0]]
+            Sdecl          => Sdecl[[Ctx0]]
+            Wld            => Wld[[Ctx0]]
+            ID             => ID[[Ctx0]]
+            Var            => Var[[Ctx0]]
+            CharChar       => CharChar[[Ctx0]]
+            Char           => Char[[Ctx0]]
+            StrChar        => StrChar[[Ctx0]]
+            String         => String[[Ctx0]]
+            Real           => Real[[Ctx0]]
+            Int            => Int[[Ctx0]]
+            Keyword        => Keyword[[Ctx0]]
+            UCID           => UCID[[Ctx0]]
+            LCID           => LCID[[Ctx0]]
+            LId            => LId[[Ctx0]]
+            Id             => Id[[Ctx0]]
+            ModNamePart    => ModNamePart[[Ctx0]]
+            ModName        => ModName[[Ctx0]]
+            PreTerm        => PreTerm[[Ctx0]]
+            Term           => Term[[Ctx0]]
+            StrategyMid    => StrategyMid[[Ctx0]]
+            Strategy       => Strategy[[Ctx0]] ]
+
+
+module StrategoJava
+imports
+  StrategoMix[StrategoHost]
+  languages/java/EmbeddedJavaMix[JavaObject Term[[StrategoHost]]]
+
+exports
+  context-free start-symbols Module[[StrategoHost]]

Added: sglr-recovery/trunk/Evaluate/grammars/StrategoJava.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/grammars/StrategoJava.pp	Wed Mar  2 14:01:15 2011	(r22255)
@@ -0,0 +1,703 @@
+[
+   Assign                                  -- _1 KW["="] _2,
+   AssignMul                               -- _1 KW["*="] _2,
+   AssignDiv                               -- _1 KW["/="] _2,
+   AssignRemain                            -- _1 KW["%="] _2,
+   AssignPlus                              -- _1 KW["+="] _2,
+   AssignMinus                             -- _1 KW["-="] _2,
+   AssignLeftShift                         -- _1 KW["<<="] _2,
+   AssignRightShift                        -- _1 KW[">>="] _2,
+   AssignURightShift                       -- _1 KW[">>>="] _2,
+   AssignAnd                               -- _1 KW["&="] _2,
+   AssignExcOr                             -- _1 KW["^="] _2,
+   AssignOr                                -- _1 KW["|="] _2,
+   InstanceOf                              -- _1 KW["instanceof"] _2,
+   Mul                                     -- _1 KW["*"] _2,
+   Div                                     -- _1 KW["/"] _2,
+   Remain                                  -- _1 KW["%"] _2,
+   Plus                                    -- _1 KW["+"] _2,
+   Minus                                   -- _1 KW["-"] _2,
+   LeftShift                               -- _1 KW["<<"] _2,
+   RightShift                              -- _1 KW[">>"] _2,
+   URightShift                             -- _1 KW[">>>"] _2,
+   Lt                                      -- _1 KW["<"] _2,
+   Gt                                      -- _1 KW[">"] _2,
+   LtEq                                    -- _1 KW["<="] _2,
+   GtEq                                    -- _1 KW[">="] _2,
+   Eq                                      -- _1 KW["=="] _2,
+   NotEq                                   -- _1 KW["!="] _2,
+   LazyAnd                                 -- _1 KW["&&"] _2,
+   LazyOr                                  -- _1 KW["||"] _2,
+   And                                     -- _1 KW["&"] _2,
+   ExcOr                                   -- _1 KW["^"] _2,
+   Or                                      -- _1 KW["|"] _2,
+   Cond                                    -- _1 _2 _3,
+   Plus                                    -- KW["+"] _1,
+   Minus                                   -- KW["-"] _1,
+   PreIncr                                 -- KW["++"] _1,
+   PreDecr                                 -- KW["--"] _1,
+   Complement                              -- KW["~"] _1,
+   Not                                     -- KW["!"] _1,
+   CastPrim                                -- KW["("] _1 KW[")"] _2,
+   CastRef                                 -- KW["("] _1 KW[")"] _2,
+   PostIncr                                -- _1 KW["++"],
+   PostDecr                                -- _1 KW["--"],
+   Invoke                                  -- _1 KW["("] _2 KW[")"],
+   Invoke.2:iter-star-sep                  -- _1 KW[","],
+   Method                                  -- _1,
+   Method                                  -- _1 KW["."] _2 _3,
+   Method.2:opt                            -- _1,
+   SuperMethod                             -- KW["super"] KW["."] _1 _2,
+   SuperMethod.1:opt                       -- _1,
+   QSuperMethod                            -- _1 KW["."] KW["super"] KW["."] _2 _3,
+   QSuperMethod.2:opt                      -- _1,
+   GenericMethod                           -- _1 KW["."] _2 _3,
+   ArrayAccess                             -- _1 _2,
+   Field                                   -- _1 KW["."] _2,
+   SuperField                              -- KW["super"] KW["."] _1,
+   QSuperField                             -- _1 KW["."] KW["super"] KW["."] _2,
+   NewArray                                -- KW["new"] _1 _2 _3,
+   NewArray.2:iter                         -- _1,
+   NewArray.3:iter-star                    -- _1,
+   NewArray                                -- KW["new"] _1 _2 _3,
+   NewArray.2:iter                         -- _1,
+   UnboundWld                              -- _1 KW["<"] KW["?"] KW[">"],
+   Dim                                     -- KW["["] _1 KW["]"],
+   Dim                                     -- KW["["] KW["]"],
+   NewInstance                             -- KW["new"] _1 _2 KW["("] _3 KW[")"] _4,
+   NewInstance.1:opt                       -- _1,
+   NewInstance.3:iter-star-sep             -- _1 KW[","],
+   NewInstance.4:opt                       -- _1,
+   QNewInstance                            -- _1 KW["."] KW["new"] _2 _3 _4 KW["("] _5 KW[")"] _6,
+   QNewInstance.2:opt                      -- _1,
+   QNewInstance.4:opt                      -- _1,
+   QNewInstance.5:iter-star-sep            -- _1 KW[","],
+   QNewInstance.6:opt                      -- _1,
+   Lit                                     -- _1,
+   Class                                   -- _1 KW["."] KW["class"],
+   VoidClass                               -- KW["void"] KW["."] KW["class"],
+   This                                    -- KW["this"],
+   QThis                                   -- _1 KW["."] KW["this"],
+   PackageDec                              -- _1 KW["package"] _2 KW[";"],
+   PackageDec.1:iter-star                  -- _1,
+   TypeImportDec                           -- KW["import"] _1 KW[";"],
+   TypeImportOnDemandDec                   -- KW["import"] _1 KW["."] KW["*"] KW[";"],
+   StaticImportDec                         -- KW["import"] KW["static"] _1 KW["."] _2 KW[";"],
+   StaticImportOnDemandDec                 -- KW["import"] KW["static"] _1 KW["."] KW["*"] KW[";"],
+   AnnoDec                                 -- _1 KW["{"] _2 KW["}"],
+   AnnoDec.2:iter-star                     -- _1,
+   AnnoDecHead                             -- _1 KW["@"] KW["interface"] _2,
+   AnnoDecHead.1:iter-star                 -- _1,
+   AnnoDecHead.1:iter-star.1:alt           -- _1 _2,
+   AnnoMethodDec                           -- _1 _2 _3 KW["("] KW[")"] _4 KW[";"],
+   AnnoMethodDec.1:iter-star               -- _1,
+   AnnoMethodDec.4:opt                     -- _1,
+   Semicolon                               -- KW[";"],
+   DefaultVal                              -- KW["default"] _1,
+   AbstractMethodDec                       -- _1 _2 _3 _4 KW["("] _5 KW[")"] _6 KW[";"],
+   AbstractMethodDec.1:iter-star           -- _1,
+   AbstractMethodDec.1:iter-star.1:alt     -- _1 _2,
+   AbstractMethodDec.2:opt                 -- _1,
+   AbstractMethodDec.5:iter-star-sep       -- _1 KW[","],
+   AbstractMethodDec.6:opt                 -- _1,
+   DeprAbstractMethodDec                   -- _1 _2 _3 _4 KW["("] _5 KW[")"] _6 _7 KW[";"],
+   DeprAbstractMethodDec.1:iter-star       -- _1,
+   DeprAbstractMethodDec.1:iter-star.1:alt -- _1 _2,
+   DeprAbstractMethodDec.2:opt             -- _1,
+   DeprAbstractMethodDec.5:iter-star-sep   -- _1 KW[","],
+   DeprAbstractMethodDec.6:iter            -- _1,
+   DeprAbstractMethodDec.7:opt             -- _1,
+   ConstantDec                             -- _1 _2 _3 KW[";"],
+   ConstantDec.1:iter-star                 -- _1,
+   ConstantDec.1:iter-star.1:alt           -- _1 _2,
+   ConstantDec.3:iter-sep                  -- _1 KW[","],
+   InterfaceDec                            -- _1 KW["{"] _2 KW["}"],
+   InterfaceDec.2:iter-star                -- _1,
+   InterfaceDecHead                        -- _1 KW["interface"] _2 _3 _4,
+   InterfaceDecHead.1:iter-star            -- _1,
+   InterfaceDecHead.1:iter-star.1:alt      -- _1 _2,
+   InterfaceDecHead.3:opt                  -- _1,
+   InterfaceDecHead.4:opt                  -- _1,
+   ExtendsInterfaces                       -- V  [H  [KW["extends"]] _1],
+   ExtendsInterfaces.1:iter-sep            -- _1 KW[","],
+   Semicolon                               -- KW[";"],
+   EnumDec                                 -- _1 _2,
+   EnumDecHead                             -- _1 KW["enum"] _2 _3,
+   EnumDecHead.1:iter-star                 -- _1,
+   EnumDecHead.1:iter-star.1:alt           -- _1 _2,
+   EnumDecHead.3:opt                       -- _1,
+   EnumBody                                -- KW["{"] _1 _2 KW["}"],
+   EnumBody.1:iter-star-sep                -- _1 KW[","],
+   EnumBody.2:opt                          -- _1,
+   EnumBody                                -- KW["{"] _1 KW[","] _2 KW["}"],
+   EnumBody.1:iter-star-sep                -- _1 KW[","],
+   EnumBody.2:opt                          -- _1,
+   EnumConst                               -- _1 _2 _3,
+   EnumConst.2:opt                         -- _1,
+   EnumConst.3:opt                         -- _1,
+   EnumBodyDecs                            -- V  [H  [KW[";"]] _1],
+   EnumBodyDecs.1:iter-star                -- _1,
+   ConstrDec                               -- _1 _2,
+   ConstrDecHead                           -- _1 _2 _3 KW["("] _4 KW[")"] _5,
+   ConstrDecHead.1:iter-star               -- _1,
+   ConstrDecHead.1:iter-star.1:alt         -- _1 _2,
+   ConstrDecHead.2:opt                     -- _1,
+   ConstrDecHead.4:iter-star-sep           -- _1 KW[","],
+   ConstrDecHead.5:opt                     -- _1,
+   ConstrBody                              -- KW["{"] _1 _2 KW["}"],
+   ConstrBody.1:opt                        -- _1,
+   ConstrBody.2:iter-star                  -- _1,
+   AltConstrInv                            -- _1 KW["this"] KW["("] _2 KW[")"] KW[";"],
+   AltConstrInv.1:opt                      -- _1,
+   AltConstrInv.2:iter-star-sep            -- _1 KW[","],
+   SuperConstrInv                          -- _1 KW["super"] KW["("] _2 KW[")"] KW[";"],
+   SuperConstrInv.1:opt                    -- _1,
+   SuperConstrInv.2:iter-star-sep          -- _1 KW[","],
+   QSuperConstrInv                         -- _1 KW["."] _2 KW["super"] KW["("] _3 KW[")"] KW[";"],
+   QSuperConstrInv.2:opt                   -- _1,
+   QSuperConstrInv.3:iter-star-sep         -- _1 KW[","],
+   StaticInit                              -- KW["static"] _1,
+   InstanceInit                            -- _1,
+   Empty                                   -- KW[";"],
+   Labeled                                 -- _1 KW[":"] _2,
+   ExprStm                                 -- _1 KW[";"],
+   If                                      -- KW["if"] KW["("] _1 KW[")"] _2,
+   If                                      -- KW["if"] KW["("] _1 KW[")"] _2 KW["else"] _3,
+   AssertStm                               -- KW["assert"] _1 KW[";"],
+   AssertStm                               -- KW["assert"] _1 KW[":"] _2 KW[";"],
+   Switch                                  -- KW["switch"] KW["("] _1 KW[")"] _2,
+   SwitchBlock                             -- KW["{"] _1 _2 KW["}"],
+   SwitchBlock.1:iter-star                 -- _1,
+   SwitchBlock.2:iter-star                 -- _1,
+   SwitchGroup                             -- _1 _2,
+   SwitchGroup.1:iter                      -- _1,
+   SwitchGroup.2:iter                      -- _1,
+   Case                                    -- KW["case"] _1 KW[":"],
+   Default                                 -- KW["default"] KW[":"],
+   While                                   -- KW["while"] KW["("] _1 KW[")"] _2,
+   DoWhile                                 -- KW["do"] _1 KW["while"] KW["("] _2 KW[")"] KW[";"],
+   For                                     -- KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
+   For.2:opt                               -- _1,
+   For.3:iter-star-sep                     -- _1 KW[","],
+   For                                     -- KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
+   For.1:iter-star-sep                     -- _1 KW[","],
+   For.2:opt                               -- _1,
+   For.3:iter-star-sep                     -- _1 KW[","],
+   ForEach                                 -- KW["for"] KW["("] _1 KW[":"] _2 KW[")"] _3,
+   Break                                   -- KW["break"] _1 KW[";"],
+   Break.1:opt                             -- _1,
+   Continue                                -- KW["continue"] _1 KW[";"],
+   Continue.1:opt                          -- _1,
+   Return                                  -- KW["return"] _1 KW[";"],
+   Return.1:opt                            -- _1,
+   Throw                                   -- KW["throw"] _1 KW[";"],
+   Synchronized                            -- KW["synchronized"] KW["("] _1 KW[")"] _2,
+   Try                                     -- KW["try"] _1 _2,
+   Try.2:iter                              -- _1,
+   Try                                     -- KW["try"] _1 _2 KW["finally"] _3,
+   Try.2:iter-star                         -- _1,
+   Catch                                   -- KW["catch"] KW["("] _1 KW[")"] _2,
+   LocalVarDecStm                          -- _1 KW[";"],
+   LocalVarDec                             -- _1 _2 _3,
+   LocalVarDec.1:iter-star                 -- _1,
+   LocalVarDec.1:iter-star.1:alt           -- _1 _2,
+   LocalVarDec.3:iter-sep                  -- _1 KW[","],
+   Block                                   -- V  [V vs=2 [KW["{"] _1] KW["}"]],
+   Block.1:iter-star                       -- _1,
+   ClassDecStm                             -- _1,
+   MethodDec                               -- _1 _2,
+   MethodDecHead                           -- _1 _2 _3 _4 KW["("] _5 KW[")"] _6,
+   MethodDecHead.1:iter-star               -- _1,
+   MethodDecHead.1:iter-star.1:alt         -- _1 _2,
+   MethodDecHead.2:opt                     -- _1,
+   MethodDecHead.5:iter-star-sep           -- _1 KW[","],
+   MethodDecHead.6:opt                     -- _1,
+   DeprMethodDecHead                       -- _1 _2 _3 _4 KW["("] _5 KW[")"] _6 _7,
+   DeprMethodDecHead.1:iter-star           -- _1,
+   DeprMethodDecHead.1:iter-star.1:alt     -- _1 _2,
+   DeprMethodDecHead.2:opt                 -- _1,
+   DeprMethodDecHead.5:iter-star-sep       -- _1 KW[","],
+   DeprMethodDecHead.6:iter                -- _1,
+   DeprMethodDecHead.7:opt                 -- _1,
+   Void                                    -- KW["void"],
+   Param                                   -- _1 _2 _3,
+   Param.1:iter-star                       -- _1,
+   Param.1:iter-star.1:alt                 -- _1 _2,
+   VarArityParam                           -- _1 _2 KW["..."] _3,
+   VarArityParam.1:iter-star               -- _1,
+   VarArityParam.1:iter-star.1:alt         -- _1 _2,
+   ThrowsDec                               -- V  [H  [KW["throws"]] _1],
+   ThrowsDec.1:iter-sep                    -- _1 KW[","],
+   NoMethodBody                            -- KW[";"],
+   ArrayInit                               -- KW["{"] _1 KW["}"],
+   ArrayInit.1:iter-star-sep               -- _1 KW[","],
+   ArrayInit                               -- KW["{"] _1 KW[","] KW["}"],
+   ArrayInit.1:iter-star-sep               -- _1 KW[","],
+   Anno                                    -- KW["@"] _1 KW["("] _2 KW[")"],
+   Anno.2:iter-star-sep                    -- _1 KW[","],
+   SingleElemAnno                          -- KW["@"] _1 KW["("] _2 KW[")"],
+   MarkerAnno                              -- KW["@"] _1,
+   ElemValPair                             -- _1 KW["="] _2,
+   ElemValArrayInit                        -- KW["{"] _1 KW["}"],
+   ElemValArrayInit.1:iter-star-sep        -- _1 KW[","],
+   ElemValArrayInit                        -- KW["{"] _1 KW[","] KW["}"],
+   ElemValArrayInit.1:iter-star-sep        -- _1 KW[","],
+   FieldDec                                -- _1 _2 _3 KW[";"],
+   FieldDec.1:iter-star                    -- _1,
+   FieldDec.1:iter-star.1:alt              -- _1 _2,
+   FieldDec.3:iter-sep                     -- _1 KW[","],
+   VarDec                                  -- _1,
+   VarDec                                  -- _1 KW["="] _2,
+   ArrayVarDecId                           -- _1 _2,
+   ArrayVarDecId.2:iter                    -- _1,
+   Dim                                     -- KW["["] KW["]"],
+   ClassDec                                -- _1 _2,
+   ClassBody                               -- V  [V vs=2 [KW["{"] _1] KW["}"]],
+   ClassBody.1:iter-star                   -- _1,
+   ClassDecHead                            -- _1 KW["class"] _2 _3 _4 _5,
+   ClassDecHead.1:iter-star                -- _1,
+   ClassDecHead.1:iter-star.1:alt          -- _1 _2,
+   ClassDecHead.3:opt                      -- _1,
+   ClassDecHead.4:opt                      -- _1,
+   ClassDecHead.5:opt                      -- _1,
+   SuperDec                                -- KW["extends"] _1,
+   ImplementsDec                           -- V  [H  [KW["implements"]] _1],
+   ImplementsDec.1:iter-sep                -- _1 KW[","],
+   Semicolon                               -- KW[";"],
+   Semicolon                               -- KW[";"],
+   CompilationUnit                         -- _1 _2 _3,
+   CompilationUnit.1:opt                   -- _1,
+   CompilationUnit.2:iter-star             -- _1,
+   CompilationUnit.3:iter                  -- _1,
+   PackageName                             -- _1,
+   PackageName.1:iter-sep                  -- _1 KW["."],
+   AmbName                                 -- _1,
+   AmbName                                 -- _1 KW["."] _2,
+   TypeName                                -- _1,
+   TypeName                                -- _1 KW["."] _2,
+   ExprName                                -- _1,
+   ExprName                                -- _1 KW["."] _2,
+   MethodName                              -- _1,
+   MethodName                              -- _1 KW["."] _2,
+   PackageOrTypeName                       -- _1,
+   PackageOrTypeName                       -- _1 KW["."] _2,
+   TypeArgs                                -- KW["<"] _1 KW[">"],
+   TypeArgs.1:iter-sep                     -- _1 KW[","],
+   Wildcard                                -- KW["?"] _1,
+   Wildcard.1:opt                          -- _1,
+   WildcardUpperBound                      -- KW["extends"] _1,
+   WildcardLowerBound                      -- KW["super"] _1,
+   TypeParam                               -- _1 _2,
+   TypeParam.2:opt                         -- _1,
+   TypeBound                               -- V  [H  [KW["extends"]] _1],
+   TypeBound.1:iter-sep                    -- _1 KW["&"],
+   TypeParams                              -- KW["<"] _1 KW[">"],
+   TypeParams.1:iter-sep                   -- _1 KW[","],
+   ClassOrInterfaceType                    -- _1 _2,
+   ClassOrInterfaceType.2:opt              -- _1,
+   ClassType                               -- _1 _2,
+   ClassType.2:opt                         -- _1,
+   InterfaceType                           -- _1 _2,
+   InterfaceType.2:opt                     -- _1,
+   Member                                  -- _1 _2 KW["."] _3,
+   TypeVar                                 -- _1,
+   ArrayType                               -- _1 KW["["] KW["]"],
+   Boolean                                 -- KW["boolean"],
+   Byte                                    -- KW["byte"],
+   Short                                   -- KW["short"],
+   Int                                     -- KW["int"],
+   Long                                    -- KW["long"],
+   Char                                    -- KW["char"],
+   Float                                   -- KW["float"],
+   Double                                  -- KW["double"],
+   Null                                    -- KW["null"],
+   Bool                                    -- _1,
+   True                                    -- KW["true"],
+   False                                   -- KW["false"],
+   Float                                   -- _1,
+   Float                                   -- _1,
+   Deci                                    -- _1,
+   Hexa                                    -- _1,
+   Octa                                    -- _1,
+   Public                                  -- KW["public"],
+   Private                                 -- KW["private"],
+   Protected                               -- KW["protected"],
+   Abstract                                -- KW["abstract"],
+   Final                                   -- KW["final"],
+   Static                                  -- KW["static"],
+   Native                                  -- KW["native"],
+   Transient                               -- KW["transient"],
+   Volatile                                -- KW["volatile"],
+   Synchronized                            -- KW["synchronized"],
+   StrictFP                                -- KW["strictfp"],
+   Id                                      -- _1,
+   meta-var                                -- _1,
+   String                                -- _1,
+   Chars                                -- _1,
+   ToMetaExpr                              -- KW["e"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:expr"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["expr"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["var-init"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:bstm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["bstm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["java:bstm*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaListExpr                          -- KW["bstm*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaExpr                              -- KW["java:block-stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["block-stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["java:block-stm*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaListExpr                          -- KW["block-stm*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaExpr                              -- KW["java:stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["stm"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["switch-group"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["java:switch-group"] KW["|["] _1 KW["]|"],
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~bstm:"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~bstm*:"] _1,
+   FromMetaExpr                            -- KW["~stm:"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~switch-group*:"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~switch-group:"] _1,
+   ToMetaExpr                              -- KW["java:lvdec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["lvdec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:vdec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["vdec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["t"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["ty"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:type"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["type"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~type:"] _1,
+   ToMetaExpr                              -- KW["ambname"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["ename"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["fname"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["tname"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["pkgtname"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["mod"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["anno"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["param"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:param"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["param*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["java:param*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["java:formal-param"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["formal-param"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:formal-param*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["formal-param*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   ToMetaExpr                              -- KW["java:package-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["package-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:package-dec?"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:opt                        -- _1,
+   ToMetaExpr                              -- KW["package-dec?"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:opt                        -- _1,
+   FromMetaExpr                            -- KW["~package-dec:"] _1,
+   FromMetaExpr                            -- KW["~package-dec?:"] _1,
+   ToMetaExpr                              -- KW["java:import-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["import-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["java:import-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaListExpr                          -- KW["import-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   FromMetaExpr                            -- KW["~import-dec:"] _1,
+   FromMetaExpr                            -- KW["~import-dec*:"] _1,
+   ToMetaExpr                              -- KW["e"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:expr"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["expr"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:compilation-unit"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["compilation-unit"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:importdecl"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["importdecl"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:type-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["type-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:class-body-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["class-body-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:interface-member-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["interface-member-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:constant-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["constant-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:class-body-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- KW["class-body-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaListExpr                          -- V  [V vs=2 [KW["|["] _1] KW["]|"]],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaExpr                              -- KW["java:stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:imember-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["imember-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:imember-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- KW["imember-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- V  [V vs=2 [KW["|["] _1] KW["]|"]],
+   ToMetaExpr.1:iter-star                  -- _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~name:"] _1,
+   FromMetaExpr                            -- KW["~*:"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~id:"] _1,
+   FromMetaExpr                            -- KW["~idd:"] _1 KW[":"],
+   FromMetaExpr                            -- KW["~x:"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~e:"] _1,
+   FromMetaExpr                            -- KW["~expr:"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~i:"] _1,
+   FromMetaExpr                            -- KW["~deci:"] _1,
+   FromMetaExpr                            -- KW["~hexa:"] _1,
+   FromMetaExpr                            -- KW["~octa:"] _1,
+   FromMetaExpr                            -- KW["~float:"] _1,
+   FromMetaExpr                            -- KW["~string:"] _1,
+   FromMetaExpr                            -- KW["~char:"] _1,
+   OverlayNoArgs                           -- _1 KW["="] _2,
+   Overlay                                 -- _1 KW["("] _2 KW[")"] KW["="] _3,
+   Overlay.2:iter-star-sep                 -- _1 KW[","],
+   DynRuleScope                            -- KW["{|"] _1 KW[":"] _2 KW["|}"],
+   ScopeLabels                             -- _1,
+   ScopeLabels.1:iter-star-sep             -- _1 KW[","],
+   ScopeLabels                             -- KW["~"] _1,
+   GenDynRules                             -- KW["rules"] KW["("] _1 KW[")"],
+   GenDynRules.1:iter-star                 -- _1,
+   AddScopeLabel                           -- _1 KW["+"] _2,
+   UndefineDynRule                         -- _1 KW[":-"] _2,
+   SetDynRule                              -- _1 KW[":"] _2,
+   AddDynRule                              -- _1 KW[":+"] _2,
+   SetDynRuleMatch                         -- _1 KW[":"] _2,
+   DynRuleAssign                           -- _1 KW[":="] _2,
+   DynRuleAssignAdd                        -- _1 KW[":+="] _2,
+   SetDynRuleDepends                       -- _1 KW[":"] _2 KW["depends"] KW["on"] _3,
+   LabeledDynRuleId                        -- _1 KW["."] _2,
+   AddLabelDynRuleId                       -- _1 KW["+"] _2,
+   DynRuleId                               -- _1,
+   LabeledDynRuleScopeId                   -- _1 KW["."] _2,
+   DynRuleScopeId                          -- _1,
+   RDecNoArgs                              -- _1,
+   RDec                                    -- _1 KW["("] _2 KW[")"],
+   RDec.2:iter-star-sep                    -- _1 KW[","],
+   RDecT                                   -- _1 KW["("] _2 KW["|"] _3 KW[")"],
+   RDecT.2:iter-star-sep                   -- _1 KW[","],
+   RDecT.3:iter-star-sep                   -- _1 KW[","],
+   RuleNames                               -- KW["~"] _1,
+   DynRuleIntersectFix                     -- KW["/"] _1 KW["\\*"] _2,
+   DynRuleIntersect                        -- _1 KW["/"] _2 KW["\\"] _3,
+   DynRuleUnion                            -- _1 KW["\\"] _2 KW["/"] _3,
+   DynRuleIntersectUnion                   -- _1 KW["/"] _2 KW["\\"] _3 KW["/"] _4,
+   RDefNoArgs                              -- _1 KW[":"] _2,
+   RDef                                    -- _1 KW["("] _2 KW[")"] KW[":"] _3,
+   RDef.2:iter-star-sep                    -- _1 KW[","],
+   RDefT                                   -- _1 KW["("] _2 KW["|"] _3 KW[")"] KW[":"] _4,
+   RDefT.2:iter-star-sep                   -- _1 KW[","],
+   RDefT.3:iter-star-sep                   -- _1 KW[","],
+   RuleNoCond                              -- _1 KW["->"] _2,
+   Rule                                    -- _1 KW["->"] _2 KW["where"] _3,
+   Rule                                    -- _1 KW["->"] _2 _3,
+   Rule.3:iter                             -- _1,
+   WhereClause                             -- KW["where"] _1,
+   WithClause                              -- KW["with"] _1,
+   SDefNoArgs                              -- _1 KW["="] _2,
+   SDef                                    -- _1 KW["("] _2 KW[")"] KW["="] _3,
+   SDef.2:iter-star-sep                    -- _1 KW[","],
+   DefaultVarDec                           -- _1,
+   Call                                    -- _1 KW["("] _2 KW[")"],
+   Call.2:iter-star-sep                    -- _1 KW[","],
+   ScopeDefault                            -- KW["{"] _1 KW["}"],
+   BA                                      -- _1 _2,
+   LChoice                                 -- _1 KW["<+"] _2,
+   Rec                                     -- KW["rec"] _1 KW["("] _2 KW[")"],
+   Not                                     -- KW["not"] KW["("] _1 KW[")"],
+   Where                                   -- KW["where"] KW["("] _1 KW[")"],
+   With                                    -- KW["with"] KW["("] _1 KW[")"],
+   Test                                    -- KW["test"] KW["("] _1 KW[")"],
+   PrimNoArgs                              -- KW["prim"] KW["("] _1 KW[")"],
+   Prim                                    -- KW["prim"] KW["("] _1 KW[","] _2 KW[")"],
+   Prim.2:iter-star-sep                    -- _1 KW[","],
+   StrCong                                 -- _1,
+   IntCong                                 -- _1,
+   RealCong                                -- _1,
+   CharCong                                -- _1,
+   CongQ                                   -- _1 KW["("] _2 KW[")"],
+   CongQ.2:iter-star-sep                   -- _1 KW[","],
+   AnnoCong                                -- _1 _2,
+   StrategyCurly                           -- KW["{"] _1 KW["}"],
+   EmptyTupleCong                          -- KW["("] KW[")"],
+   TupleCong                               -- KW["("] _1 KW[","] _2 KW[")"],
+   TupleCong.2:iter-sep                    -- _1 KW[","],
+   ListCongNoTail                          -- KW["["] _1 KW["]"],
+   ListCongNoTail.1:iter-star-sep          -- _1 KW[","],
+   ListCong                                -- KW["["] _1 KW["|"] _2 KW["]"],
+   ListCong.1:iter-star-sep                -- _1 KW[","],
+   ExplodeCong                             -- _1 KW["#"] _2,
+   CallNoArgs                              -- _1,
+   LRule                                   -- KW["\\"] _1 KW["\\"],
+   SRule                                   -- KW["("] _1 KW[")"],
+   Choice                                  -- _1 KW["+"] _2,
+   RChoice                                 -- _1 KW["+>"] _2,
+   CondChoice                              -- KW["if"] _1 KW["then"] _2 KW["else"] _3 KW["end"],
+   IfThen                                  -- KW["if"] _1 KW["then"] _2 KW["end"],
+   SwitchChoiceNoOtherwise                 -- KW["switch"] _1 _2 KW["end"],
+   SwitchChoiceNoOtherwise.2:iter-star     -- _1,
+   SwitchChoice                            -- KW["switch"] _1 _2 KW["otherwise"] KW[":"] _3 KW["end"],
+   SwitchChoice.2:iter-star                -- _1,
+   SwitchCase                              -- KW["case"] _1 KW[":"] _2,
+   AM                                      -- _1 KW["=>"] _2,
+   Assign                                  -- _1 KW[":="] _2,
+   ListVar                                 -- _1,
+   Var                                     -- _1,
+   BuildDefaultPT                          -- KW["_"] _1,
+   BuildDefault                            -- KW["_"] _1,
+   Char                                    -- _1,
+   AnnoList                                -- _1 KW["{"] _2 KW["}"],
+   AnnoList.2:iter-star-sep                -- _1 KW[","],
+   NoAnnoList                              -- _1,
+   App                                     -- KW["<"] _1 KW[">"] _2,
+   App                                     -- KW["<"] _1 KW[">"] _2,
+   RootApp                                 -- _1,
+   RootApp                                 -- _1,
+   Tuple                                   -- KW["("] _1 KW[")"],
+   Tuple.1:iter-star-sep                   -- _1 KW[","],
+   List                                    -- KW["["] _1 KW["]"],
+   List.1:iter-star-sep                    -- _1 KW[","],
+   ListTail                                -- KW["["] _1 KW["|"] _2 KW["]"],
+   ListTail.1:iter-star-sep                -- _1 KW[","],
+   SortList                                -- KW["["] _1 KW["]"],
+   SortList.1:iter-star-sep                -- _1 KW[","],
+   SortListTl                              -- KW["["] _1 KW["|"] _2 KW["]"],
+   SortListTl.1:iter-star-sep              -- _1 KW[","],
+   SortTuple                               -- KW["("] _1 KW[")"],
+   SortTuple.1:iter-star-sep               -- _1 KW[","],
+   Star                                    -- KW["*"],
+   StarStar                                -- KW["**"],
+   Sorts                                   -- V  [H  [KW["sorts"]] _1],
+   Sorts.1:iter-star                       -- _1,
+   Constructors                            -- V  [H  [KW["constructors"]] _1],
+   Constructors.1:iter-star                -- _1,
+   SortVar                                 -- _1,
+   SortNoArgs                              -- _1,
+   Sort                                    -- _1 KW["("] _2 KW[")"],
+   Sort.2:iter-star-sep                    -- _1 KW[","],
+   OpDecl                                  -- _1 KW[":"] _2,
+   OpDeclQ                                 -- _1 KW[":"] _2,
+   OpDeclInj                               -- KW[":"] _1,
+   ExtOpDecl                               -- KW["external"] _1 KW[":"] _2,
+   ExtOpDeclQ                              -- KW["external"] _1 KW[":"] _2,
+   ExtOpDeclInj                            -- KW["external"] KW[":"] _1,
+   ConstType                               -- _1,
+   FunType                                 -- _1 KW["->"] _2,
+   FunType.1:iter-sep                      -- _1 KW["*"],
+   Var                                     -- _1,
+   Wld                                     -- KW["_"],
+   Int                                     -- _1,
+   Real                                    -- _1,
+   Str                                     -- _1,
+   Op                                      -- _1 KW["("] _2 KW[")"],
+   Op.2:iter-star-sep                      -- _1 KW[","],
+   OpQ                                     -- _1 KW["("] _2 KW[")"],
+   OpQ.2:iter-star-sep                     -- _1 KW[","],
+   Explode                                 -- _1 KW["#"] KW["("] _2 KW[")"],
+   Anno                                    -- _1 KW["{^"] _2 KW["}"],
+   As                                      -- _1 KW["@"] _2,
+   As                                      -- _1 KW["@"] _2,
+   SVar                                    -- _1,
+   Let                                     -- KW["let"] _1 KW["in"] _2 KW["end"],
+   Let.1:iter-star                         -- _1,
+   CallT                                   -- _1 KW["("] _2 KW["|"] _3 KW[")"],
+   CallT.2:iter-star-sep                   -- _1 KW[","],
+   CallT.3:iter-star-sep                   -- _1 KW[","],
+   CallDynamic                             -- KW["call"] KW["("] _1 KW["|"] _2 KW["|"] _3 KW[")"],
+   CallDynamic.2:iter-star-sep             -- _1 KW[","],
+   CallDynamic.3:iter-star-sep             -- _1 KW[","],
+   SDefT                                   -- _1 KW["("] _2 KW["|"] _3 KW[")"] KW["="] _4,
+   SDefT.2:iter-star-sep                   -- _1 KW[","],
+   SDefT.3:iter-star-sep                   -- _1 KW[","],
+   ExtSDefInl                              -- KW["external"] _1 KW["("] _2 KW["|"] _3 KW[")"] KW["="] _4,
+   ExtSDefInl.2:iter-star-sep              -- _1 KW[","],
+   ExtSDefInl.3:iter-star-sep              -- _1 KW[","],
+   ExtSDef                                 -- KW["external"] _1 KW["("] _2 KW["|"] _3 KW[")"],
+   ExtSDef.2:iter-star-sep                 -- _1 KW[","],
+   ExtSDef.3:iter-star-sep                 -- _1 KW[","],
+   VarDec                                  -- _1 KW[":"] _2,
+   ParenStrat                              -- KW["("] _1 KW[")"],
+   Fail                                    -- KW["fail"],
+   Id                                      -- KW["id"],
+   Match                                   -- KW["?"] _1,
+   Build                                   -- KW["!"] _1,
+   Scope                                   -- KW["{"] _1 KW[":"] _2 KW["}"],
+   Scope.1:iter-star-sep                   -- _1 KW[","],
+   Seq                                     -- _1 KW[";"] _2,
+   GuardedLChoice                          -- _1 KW["<"] _2 KW["+"] _3,
+   PrimT                                   -- KW["prim"] KW["("] _1 KW[","] _2 KW["|"] _3 KW[")"],
+   PrimT.2:iter-star-sep                   -- _1 KW[","],
+   PrimT.3:iter-star-sep                   -- _1 KW[","],
+   Some                                    -- KW["some"] KW["("] _1 KW[")"],
+   One                                     -- KW["one"] KW["("] _1 KW[")"],
+   All                                     -- KW["all"] KW["("] _1 KW[")"],
+   ImportTerm                              -- KW["import-term"] KW["("] _1 KW[")"],
+   Module                                  -- KW["module"] _1 _2,
+   Module.2:iter-star                      -- _1,
+   Specification                           -- V  [H  [KW["specification"]] _1],
+   Specification.1:iter-star               -- _1,
+   Imports                                 -- V  [H  [KW["imports"]] _1],
+   Imports.1:iter-star                     -- _1,
+   Strategies                              -- V  [H  [KW["strategies"]] _1],
+   Strategies.1:iter-star                  -- _1,
+   Signature                               -- V  [H  [KW["signature"]] _1],
+   Signature.1:iter-star                   -- _1,
+   Import                                  -- _1,
+   Rules                                   -- V  [H  [KW["rules"]] _1],
+   Rules.1:iter-star                       -- _1,
+   Overlays                                -- V  [H  [KW["overlays"]] _1],
+   Overlays.1:iter-star                    -- _1
+]

Added: sglr-recovery/trunk/Evaluate/grammars/WebDSL.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/grammars/WebDSL.def	Wed Mar  2 14:01:15 2011	(r22255)
@@ -0,0 +1,1972 @@
+definition
+module WebDSL-TimeInterval
+
+imports
+  WebDSL-Lexical
+  WebDSL-Action
+
+exports
+
+  context-free syntax
+    Exp "weeks"        -> TimeIntervalPart {cons("Weeks")}
+    Exp "days"         -> TimeIntervalPart {cons("Days")}
+    Exp "hours"        -> TimeIntervalPart {cons("Hours")}
+    Exp "minutes"      -> TimeIntervalPart {cons("Minutes")}
+    Exp "seconds"      -> TimeIntervalPart {cons("Seconds")}
+    Exp "milliseconds" -> TimeIntervalPart {cons("Milliseconds")}
+    TimeIntervalPart*  -> TimeInterval {cons("TimeInterval")}
+
+  context-free syntax
+    "invoke" Exp "every" TimeInterval  -> Definition {cons("InvokeEvery")}
+
+module WebDSL-Test
+
+exports
+
+context-free syntax
+
+  "test" Id Block -> Definition {cons("Test")}
+
+module WebDSL-Type
+
+exports
+
+  context-free syntax
+  
+    %%  Construct for creating custom value types, and altering the existing value types.
+    %%
+    %%  example: 
+    %%    type String { validate(this.length() <= 255 , "input too long (max 255 characters)") }
+    %%    type USDate : Date { format = ?MM/dd/yyyy? }
+    %% 
+    %%  Will also need to cope with input/output decode/encode.
+    %%
+
+    "type" Id "{" TypeProperty* "}" -> Definition {cons("TypeDef")}
+    
+    Annotation -> TypeProperty {cons("TypeDefAnno")}
+
+module WebDSL-Exception
+
+exports
+
+  context-free syntax
+  
+    %%
+    %%  Exceptions, for supporting data validation
+    %%
+    %%  example: 
+    %%  entity ValidationException{message:String}
+    %%  throw ValidationException{ message := "error" }
+    %%  try{}catch(ve : ValidationException){}
+    %%  throw ValidationException{ message := "error1" }, ValidationException{ message := "error2" }
+    %%  try{}catch(l : List<ValidationException>)
+
+    "throw" {Exp ","}+ ";" -> Statement {cons("ThrowStatement"), prefer}
+    "throw" {Exp ","}+     -> TemplateCall {cons("ThrowTemplate"), prefer}
+    
+    "try" Block Catch+ -> Statement {cons("TryStatement"), prefer}
+    "try" Block Catch+ -> TemplateCall {cons("TryTemplate"), prefer}
+    
+    "catch" "(" Id ":" Sort ")" Block -> Catch {cons("Catch")}
+
+module WebDSL-Dispatch
+
+exports
+
+  sorts DispatchEntry DispatchBody DispatchArg
+
+  context-free syntax
+
+    "dispatch" "{" DispatchEntry* DispatchEntryDefault "}" -> TemplateElement {cons("Dispatch")}
+
+    "dispatch" "{" TemplateElement* "}" -> TemplateCall {reject}
+
+    
+    
+    Id "(" {FormalArg ","}* ")" "{" TemplateElement* "}" -> DispatchEntry {cons("DispatchEntry")}
+    Id "{" TemplateElement* "}" -> DispatchEntry {cons("DispatchEntryNoArg")}
+    
+    Id ":" Sort "{" TemplateElement* "}" -> DispatchEntry {cons("DispatchEntity")}
+     
+    "default" "{" TemplateElement* "}" -> DispatchEntryDefault {cons("DispatchDefault")}
+    -> DispatchEntryDefault {cons("None")}
+  
+    "default" "(" {FormalArg ","}* ")" "{" TemplateElement* "}" -> DispatchEntry {reject}
+    "default" "{" TemplateElement* "}" -> DispatchEntry {reject}
+    
+    
+    %%dispatch {
+    %%  create            { createJournal() }
+    %%  journal : Journal { thejournal(journal) }
+    %%  default           { "unknown journal" }
+    %%}
+    
+    
+    
+    "navigate" "(" {DispatchNavigateCall "/"}+ ")" "{" TemplateElement* "}" -> DispatchNavigate {cons("DispatchNavigate")}
+    "navigate" "(" Exp "," {DispatchNavigateCall "/"}+ ")" -> DispatchNavigateButton {cons("DispatchNavigateButton")}
+    DispatchNavigate -> TemplateElement
+    DispatchNavigateButton -> TemplateElement    
+    %% should be at least two arguments, otherwise dispatch has no function, reject rules below prevent one argument from being becoming a DispatchNavigate
+    "navigate" "(" Id "(" {Exp ","}* ")" ")" "{" TemplateElement* "}"      -> DispatchNavigate {reject}
+    "navigate" "(" Exp "," Id "(" {Exp ","}* ")" ")" "{" TemplateElement* "}"      -> DispatchNavigateButton {reject}
+    %%can also be parsed as a division of the results of functions calls, needs reject
+    "navigate" "(" Exp "/" Exp ")" TemplateBody -> TemplateCall {reject}
+    "navigate" "(" Exp "," Exp "/" Exp ")" TemplateBody -> TemplateCall {reject}
+    
+    Id "(" {Exp ","}* ")" -> DispatchNavigateCall {cons("DispatchNavigateCall")}
+    Id  -> DispatchNavigateCall {cons("DispatchNavigateCallNoArg")}
+
+module WebDSL-Native
+
+imports
+  WebDSL-Lexical
+
+exports
+
+  sorts Derive DeriveType DeriveProperty
+
+context-free syntax
+
+  "native" "function" Id "(" {FormalArg ","}* ")" ":" Sort ";" -> NativeFunctionDeclaration {cons("NativeFunction")}
+
+context-free syntax
+
+  "native" "class" QId NativeClassAlias NativeClassSuper "{" NativeClassElement* "}" -> NativeClassDeclaration {cons("NativeClass")}
+  
+  "as" Id -> NativeClassAlias{cons("NativeClassAlias"),prefer}
+  -> NativeClassAlias{cons("None")}
+  
+  ":" Id -> NativeClassSuper{cons("NativeClassSuper"),prefer}
+  -> NativeClassSuper{cons("None")}
+  
+  Id ":" NativeType -> NativeClassElement{cons("NativeClassProperty")}
+  
+  NativeClassFunctionStatic Id "(" {NativeType ","}* ")" NativeClassFunctionReturn -> NativeClassElement{cons("NativeClassFunction")}
+  "constructor" "(" {NativeType ","}* ")" NativeClassFunctionReturn -> NativeClassElement{reject}
+
+  ":" NativeType ->  NativeClassFunctionReturn{cons("NativeClassFunctionReturn"),prefer}
+  ->  NativeClassFunctionReturn{cons("None")}
+  
+  "static" ->  NativeClassFunctionStatic{cons("NativeClassFunctionStatic"),prefer}
+  ->  NativeClassFunctionStatic{cons("None")}
+
+  "constructor" "(" {NativeType ","}* ")" -> NativeClassElement{cons("NativeClassConstructor")}
+  
+  Id "<" {NativeType ","}* ">" -> NativeType{cons("NativeGenericType")}
+  Id -> NativeType{cons("NativeSimpleType")}
+
+module WebDSL-ValidationAnnos
+
+exports
+  sorts Annotation PatternFlag
+
+  context-free syntax
+	%%string
+    "length" "(" Int "," Int ")"              -> Annotation {cons("ValidationAnnoLength"),prefer}
+    "minlength" "(" Int ")"                   -> Annotation {cons("ValidationAnnoMinLength"),prefer}   
+    "maxlength" "(" Int ")"                   -> Annotation {cons("ValidationAnnoMaxLength"),prefer}    
+ 	"notempty"                                -> Annotation {cons("ValidationAnnoNotEmpty"),prefer}  
+  	"email"                                   -> Annotation {cons("ValidationAnnoEmail"),prefer} 	 
+  	"creditcardnumber"                        -> Annotation {cons("ValidationAnnoCreditCardNumber"),prefer} 	
+ 	"EAN"                                     -> Annotation {cons("ValidationAnnoEAN"),prefer} 
+  	"pattern" "(" String ")"                  -> Annotation {cons("ValidationAnnoPattern"),prefer}   
+  	"pattern" "(" String "," PatternFlag* ")" -> Annotation {cons("ValidationAnnoPatternWithFlags"),prefer}
+  	
+  	"canonicalequivalence"                    -> PatternFlag {cons("FlagCanonEq")} %% CANON_EQ Enables canonical equivalence.    
+	"caseinsensitive"                         -> PatternFlag {cons("FlagCaseInsensitive")} %% CASE_INSENSITIVE Enables case-insensitive matching.
+ 	"comments"                                -> PatternFlag {cons("FlagComments")} %% COMMENTS Permits whitespace and comments in pattern.
+ 	"dotall"                                  -> PatternFlag {cons("FlagDotAll")} %% DOTALL Enables dotall mode.
+ 	"literal"                                 -> PatternFlag {cons("FlagLiteral")} %% LITERAL Enables literal parsing of the pattern.
+ 	"multiline"                               -> PatternFlag {cons("FlagMultiline")} %% MULTILINE Enables multiline mode.
+ 	"unicodecase"                             -> PatternFlag {cons("FlagUnicodeCase")} %% UNICODE_CASE Enables Unicode-aware case folding.
+ 	"unixlines"                               -> PatternFlag {cons("FlagUnixLines")} %% UNIX_LINES Enables Unix lines mode.
+                 
+	%%numeric or string representation of numeric
+	"max" "(" Int ")"                         -> Annotation {cons("ValidationAnnoMax"),prefer} 
+	"min" "(" Int ")"                         -> Annotation {cons("ValidationAnnoMin"),prefer}
+    "range" "(" Int "," Int ")"               -> Annotation {cons("ValidationAnnoRange"),prefer}
+    "minrange" "(" Int ")"                    -> Annotation {cons("ValidationAnnoMinRange"),prefer}   
+    "maxrange" "(" Int ")"                    -> Annotation {cons("ValidationAnnoMaxRange"),prefer} 
+    "digits" "(" Int "," Int ")"              -> Annotation {cons("ValidationAnnoDigits"),prefer}  
+     
+	%%date/calendar
+	"past"                                    -> Annotation {cons("ValidationAnnoPast"),prefer} 
+	"future"                                  -> Annotation {cons("ValidationAnnoFuture"),prefer} 	
+	
+	%%array, collection, map	
+    "size" "(" Int "," Int ")"                -> Annotation {cons("ValidationAnnoSize"),prefer}
+    "minsize" "(" Int ")"                     -> Annotation {cons("ValidationAnnoMinSize"),prefer}   
+    "maxsize" "(" Int ")"                     -> Annotation {cons("ValidationAnnoMaxSize"),prefer} 
+    
+	%%object
+  	"notnull"                                 -> Annotation {cons("ValidationAnnoNotNull"),prefer }
+  	"asserttrue"                              -> Annotation {cons("ValidationAnnoAssertTrue"),prefer} 
+  	"assertfalse"                             -> Annotation {cons("ValidationAnnoAssertFalse"),prefer} 
+   	"valid"                                   -> Annotation {cons("ValidationAnnoValid"),prefer}
+
+module WebDSL-StringSelectEntity
+
+imports
+  WebDSL-UI
+  WebDSL-Lexical
+
+exports
+  sorts TemplateDefinition
+
+  context-free syntax
+  
+  "string-select-entity" Id "{" {String ","}* "}" -> TemplateDefinition {cons("StringSelectEntity")}
+
+module WebDSL-Procedures
+
+imports
+  WebDSL-AccessControl
+  WebDSL-UI
+  WebDSL-DataModel
+  WebDSL-Action
+  WebDSL-Lexical
+
+exports
+  sorts Section Definition
+
+  context-free syntax
+
+	"procedure" Id "(" FormalArg ")" "{"
+	   ProcedureElement* 
+	"}"                             -> Procedure {cons("Procedure")}
+
+	"auto" "procedure" Id "(" FormalArg ")" "{"
+	   ProcedureElement* 
+	"}"                             -> Procedure {cons("AutoProcedure")}
+
+  "extend" "procedure" Id "(" FormalArg ")" "{"
+	   ProcedureElement* 
+	"}"                             -> Definition {cons("ExtendProcedure")}
+
+  Procedure                       -> Definition
+
+	"who" "{" Exp "}"               -> ProcedureElement {cons("ProcedureWho")}
+	"when" "{" Exp "}"					    -> ProcedureElement {cons("ProcedureWhen")}
+	"do" Block							        -> ProcedureElement {cons("ProcedureDo")}
+	"done" Block							      -> ProcedureElement {cons("ProcedureDone")}
+	"enabled" Block							    -> ProcedureElement {cons("ProcedureEnabled")}
+	"disabled" Block						    -> ProcedureElement {cons("ProcedureDisabled")}
+	"view" "{" TemplateElement* "}" -> ProcedureElement {cons("ProcedureView")}
+	
+	"process" "{" ProcessExp "}"    -> ProcedureElement {cons("ProcedureProcess")}
+	"processed" Block							  -> ProcedureElement {cons("ProcedureProcessed")}
+	
+  sorts ProcessExp
+  
+context-free syntax
+    
+    Id "(" Exp ")"                -> CallProcessExp {cons("ProcCall")} 
+    CallProcessExp                -> ProcessExp                        
+    ProcessExp ";" ProcessExp     -> ProcessExp {cons("ProcSeq"), left}
+    
+    "while" "(" Exp ")" "{" 
+      ProcessExp 
+    "}"                           -> ProcessExp {cons("ProcWhile")}
+    
+    "repeat" "{" 
+      ProcessExp 
+    "}" "until" CallProcessExp    -> ProcessExp {cons("ProcRepeatUntil")}
+
+    "if" "(" Exp ")" "{" 
+      ProcessExp 
+     "}"                          -> ProcessExp {cons("ProcIfNoElse")}
+    
+    "if" "(" Exp ")" "{" 
+      ProcessExp 
+    "}" "else" "{" 
+      ProcessExp 
+    "}"                           -> ProcessExp {cons("ProcIf")}
+    
+    ProcessExp "xor" ProcessExp   -> ProcessExp {cons("ProcXor"), left}
+    ProcessExp "and" ProcessExp   -> ProcessExp {cons("ProcAnd"), left}
+    
+    ProcessExp "+" ProcessExp     -> ProcessExp {cons("ProcPlus"), left}
+    
+    "(" ProcessExp ")"            -> ProcessExp {bracket}
+  
+  context-free priorities  
+      {left:
+        ProcessExp "and" ProcessExp  -> ProcessExp}
+    > {left:
+        ProcessExp "xor" ProcessExp  -> ProcessExp
+        ProcessExp "+"   ProcessExp  -> ProcessExp }
+    > {left:
+        ProcessExp ";"   ProcessExp  -> ProcessExp {cons("ProcSeq"), left}}
+
+module WebDSL-Derive
+
+imports
+  WebDSL-UI
+  WebDSL-Lexical
+
+exports
+
+  sorts Derive DeriveType DeriveProperty
+
+context-free syntax
+
+  "derive" Id "from" Exp "for" "(" 
+    {DeriveProperty ","}* 
+  ")"                               -> TemplateElement {cons("Derive"), prefer}
+  "derive" Id "from" Exp            -> TemplateElement {cons("Derive"), prefer}
+  %%"derive" Id                       -> TemplateElement {cons("Derive"), prefer}
+  %% Disabled this one for now because it is causing ambiguities, have a look at this Ruben!
+  
+  "derive" Id "from" Exp "for" "(" 
+    {DeriveProperty ","}* 
+  ")" DeriveBody                    -> TemplateElement {cons("Derive"), prefer}
+  "derive" Id "from" Exp DeriveBody -> TemplateElement {cons("Derive"), prefer}
+  "derive" Id DeriveBody            -> TemplateElement {cons("Derive"), prefer}
+  
+  Id                                -> DeriveProperty {cons("DeriveDefault")}
+  Id "(" Id ")"                     -> DeriveProperty {cons("DeriveMode")}
+  
+  "{" DeriveBodyElement* "}"        -> DeriveBody {cons("DeriveBody")}
+  
+  Id "{" TemplateElement* "}"       -> DeriveBodyElement {cons("DeriveBodyElement")}
+  
+  "derive"                          -> TemplateCall {reject}
+    
+  "derive" "crud" Id -> Definition {cons("DeriveCrud")}
+
+module WebDSL-PagedFor
+
+imports
+  WebDSL-UI
+
+exports
+  sorts TemplateElement
+
+  context-free syntax
+
+    "for" "(" Id ":" Sort Filter "per" Exp ")"
+       "{" TemplateElement* "}"                             -> TemplateElement {cons("PagedForAll")}
+
+    "for" "(" Id ":" Sort "per" Exp ")"
+       "{" TemplateElement* "}"                             -> TemplateElement {cons("PagedForAllNoFilter")}
+
+    "for" "(" Id ":" Sort "in" Exp Filter "per" Exp ")"
+       "{" TemplateElement* "}"                             -> TemplateElement {cons("PagedFor")}
+
+    "for" "(" Id ":" Sort "in" Exp "per" Exp ")"
+       "{" TemplateElement* "}"                             -> TemplateElement {cons("PagedForNoFilter")}
+
+module WebDSL-Styling
+
+%% syntax for styling of WebDSL applications
+imports
+  WebDSL-UI
+  WebDSL-Lexical
+
+exports
+
+  sorts
+    Name StNum String UnaryOperator
+
+  lexical syntax
+    [a-zA-Z\_][a-zA-Z0-9\_\-]*			-> Identifier
+    [a-zA-Z][a-zA-Z\-\_]+          		-> ValueName
+    [a-z][a-z\-]+           	   		-> Value
+    [a-f0-9][a-f0-9][a-f0-9][a-f0-9]* 		-> Hex
+    [a-z\%]+                       		-> Unit
+%%    [0-9]+                			-> StNum
+%%    [0-9]* "." [0-9]+     			-> StNum
+    "'" ~[\"\n]* "'"               		-> String
+%%    [\-\+] StNum				-> StNumber
+
+  lexical syntax
+    [a-zA-Z][a-zA-Z0-9\_]*		 -> MatchIdent
+%%    [a-zA-Z][a-zA-Z0-9\_]*[\*]? -> MatchIdent
+%%    [\*]                        -> MatchIdent
+%%    [\*]                        -> StWildCardArg 
+
+  lexical restrictions
+    ValueName 	-/- [a-zA-Z\-\_]
+    Value 	-/- [a-z\-]
+    Unit 	-/- [a-z\%]
+    Hex 	-/- [a-f0-9]
+
+exports
+
+  sorts
+     StNumber
+
+  lexical syntax
+    Float		      -> StNum
+    SignedInteger	      -> StNum
+    StNum                     -> StNumber
+    StNum "%"                 -> Percentage {prefer}
+    StNum "em"                -> Ems {prefer}
+    StNum "ex"                -> Exs {prefer}
+    StNum "px"                -> Length {prefer}
+    StNum "cm"                -> Length {prefer}
+    StNum "mm"                -> Length {prefer}
+    StNum "in"                -> Length {prefer}
+    StNum "pt"                -> Length {prefer}
+    StNum "pc"                -> Length {prefer}
+    StNum "deg"               -> Angle {prefer}
+    StNum "rad"               -> Angle {prefer}
+    StNum "grad"              -> Angle {prefer}
+    StNum "ms"                -> Time {prefer}
+    StNum "s"                 -> Time {prefer}
+    StNum "hz"                -> Freq {prefer}
+    StNum "khz"               -> Freq {prefer}
+%%    StNum Id                  -> Dimension {prefer}
+
+context-free syntax
+
+  "theme" Modifier Id "(" ")" "{" StyleDeclaration* "}" -> Definition {cons("ThemeDefinition"), prefer}
+
+context-free syntax %% Styling syntax
+
+  "style" Id StyleDefinition*        -> Section {cons("StyleSection"), prefer}
+
+  Selector "{" StyleStatement* "}"   -> StyleDefinition {cons("StyleDefinition")}
+
+context-free syntax %% selectors
+
+  SimpleSelector
+    (Combinator SimpleSelector SelectorAttribute?)* -> Selector {cons("Selector")}
+
+  Id MatchDefinition 			-> SimpleSelector {cons("SimpleSelector")}
+  "#" Identifier			-> SimpleSelector {cons("IdSimpleSelector")}
+  Id					-> SimpleSelector {cons("ElemSimpleSelector")}
+  Id SelectorAttribute+		-> SimpleSelector {cons("ElemSimpleAttrSelector"), prefer}
+  Id "." Identifier	SelectorAttribute+		-> SimpleSelector {cons("ElemClassAttrSelector"), prefer}
+  "." Identifier 			-> SimpleSelector {cons("ClassSimpleSelector")}  
+  MatchDefinition       		-> SimpleSelector {cons("SimpleSelector")}
+  "*"			        	-> SimpleSelector {cons("UniversalSimpleSelector")}
+  
+  ":" ValueName				-> SelectorAttribute {cons("SelectorAttribute")}
+  
+  ">"                   		-> Combinator {cons("ChildCombinator")}
+  ">>"                   		-> Combinator {cons("DescendantCombinator"), prefer}
+
+  MatchIdent "(" MatchDefinitionArgs ")"		-> MatchDefinition {cons("MatchDefinition")}
+  {FormalArg ","}*                                      -> MatchDefinitionArgs
+
+  "const" Id ":" StyleSort ";" 				-> StyleVarDecl {cons("StyleVarDecl")}
+  "const" Id ":" StyleSort ":=" StyleExpression ";" 	-> StyleVarDecl {cons("StyleVarDeclInit")}
+  
+  StyleVarDecl						-> StyleDefinition
+  
+  StyleProperty ":=" StyleExpression ";"      	        -> StyleStatement {cons("StyleDeclaration")}
+%%  StylePropertyLocal ":=" StyleProperty ";"    	-> StyleStatement {cons("StyleDeclaration")}
+
+  ValueName						-> StyleProperty {cons("StyleProperty")}
+
+  MatchDefinition "." StyleProperty			-> StyleExpression {cons("StylePropertyValue")}
+
+  Id 							-> StyleExpression {cons("StyleVar")}
+
+  StyleValue 						-> StyleExpression
+%%  StyleValues -> StyleExpression
+
+  "(" Selector ")" "." StyleProperty 			-> StyleExpression {cons("StyleValueExpression")}
+
+  StyleExpression "+" StyleExpression 			-> StyleExpression {cons("StyleAdd"),assoc}
+  StyleExpression "-" StyleExpression 			-> StyleExpression {cons("StyleSub"),assoc}
+  StyleExpression "*" StyleExpression 			-> StyleExpression {cons("StyleMul"),assoc}
+  StyleExpression "/" StyleExpression 			-> StyleExpression {cons("StyleDiv"),assoc}
+
+  StNumber Unit 					-> StyleValue {cons("StyleValue")}
+  StNumber 						-> StyleValue {cons("StyleValue")}
+  StyleSort StyleValueExtension+			-> StyleValue {cons("StyleValue")}
+  Uri 							-> StyleValue {cons("StyleValue")}
+  Hash 							-> StyleValue {cons("StyleValue")}
+  Value		 					-> StyleValue {cons("StyleValue"), prefer}
+  String	 					-> StyleValue {cons("StyleValue")}
+  
+  "." ValueName						-> StyleValueExtension {cons("StyleValueExtension") }
+
+%%  {StyleValue "|"}* -> StyleValue {cons("StyleValueOptions") }
+
+  Id Unit 						-> StyleSort {cons("StyleSort")}
+  Id							-> StyleSort {cons("StyleSort")}
+
+  "url" "(" String ")"    				-> Uri {cons("Uri")}
+  "#" Hex                 				-> Hash {cons("Hash")}
+
+  "const" 	-> Id {reject}  
+%%  "layout" 	-> Id {reject}
+%%  "style" 	-> Id {reject}
+%%  "theme" 	-> Id {reject}
+
+context-free priorities
+  
+  {left:
+       StyleExpression "*" StyleExpression -> StyleExpression
+       StyleExpression "/" StyleExpression -> StyleExpression }
+  > {left:
+       StyleExpression "+" StyleExpression -> StyleExpression
+       StyleExpression "-" StyleExpression -> StyleExpression}
+
+context-free syntax %% Layout syntax
+
+  "layout" LayoutDefinition* 				-> Section {cons("LayoutSection"), prefer}
+
+  Id MatchDefinition "{" LayoutStatement* "}"   	-> LayoutDefinition {cons("LayoutDefinition")}
+  MatchDefinition "{" LayoutStatement* "}"   		-> LayoutDefinition {cons("LayoutDefinition")}
+  
+  StyleDefinition					-> LayoutDefinition
+%%  StyleStatement					-> LayoutStatement
+  
+  "float" "{" MatchDefinition* "}" ";"			-> LayoutStatement {cons("FloatStatement")}
+  
+  LayoutExpression ";"                                  -> LayoutStatement {cons("LayoutStatement")}
+  Id ":" "[" LayoutExpressions "]"     		        -> LayoutExpression {cons("NamedLayoutExpression")}
+  {LayoutExpression "|"}+				-> LayoutExpressions
+  Id			 				-> LayoutExpression {cons("LayoutExpression")}
+  MatchDefinition 					-> LayoutExpression {cons("LayoutExpression")}
+
+module WebDSL-Enums
+
+imports
+  WebDSL-DataModel
+  WebDSL-Lexical
+
+exports
+  sorts Defintion EnumValue
+
+  context-free syntax
+
+  "enum" Id "{" {EnumValue ","}* "}"                    -> Definition {cons("Enum")}
+
+  Id "(" String ")"                               -> EnumValue {cons("EnumValue")}
+
+module WebDSL-Regex
+
+
+exports
+%%d  context-free start-symbols
+%%d    PatternDecl Pattern
+  sorts Pattern PatternDecl Exp
+  context-free syntax
+    RegexExp "." Id "(" {Exp ","}* ")"  -> Exp {cons("Call")} %% always used with a call, regex directly as exp results in ambiguity with xml embedding
+
+    "/" Pattern "/"            -> RegexExp { cons("RegexPattern") }
+    Branche                    -> Pattern {cons("SingleBranch")}
+    Pattern "|" Pattern        -> Pattern {cons("TupleBranch"), right, prefer}
+
+
+  sorts Branche
+  context-free syntax
+    Piece+                     -> Branche {cons("Pieces")}
+
+  sorts Piece
+  context-free syntax
+    Atom                       -> Piece {cons("SingleAtom")}
+    Atom Quantifier            -> Piece {cons("QuantifiedAtom")}
+
+  sorts Quantifier
+  context-free syntax
+   "{" Integer "}"              -> Quantifier {cons("GreedyExactBound")}
+   "{" Integer "," "}"          -> Quantifier {cons("GreedyLowerBound")}
+   "{" Integer "," Integer "}"  -> Quantifier {cons("GreedyLowerUpperBound")}
+   "?"                          -> Quantifier {cons("GreedyOnceOrNot")}
+   "*"                          -> Quantifier {cons("GreedyZeroOrMore")}
+   "+"                          -> Quantifier {cons("GreedyOneOrMore")}
+   "{" Integer "}?"             -> Quantifier {cons("ReluctantExactBound")}
+   "{" Integer "," "}?"         -> Quantifier {cons("ReluctantLowerBound")}
+   "{" Integer "," Integer "}?" -> Quantifier {cons("ReluctantLowerUpperBound")}
+   "??"                         -> Quantifier {cons("ReluctantOnceOrNot")}
+   "*?"                         -> Quantifier {cons("ReluctantZeroOrMore")}
+   "+?"                         -> Quantifier {cons("ReluctantOneOrMore")}  
+   "{" Integer "}+"             -> Quantifier {cons("PossessiveExactBound")}
+   "{" Integer "," "}+"         -> Quantifier {cons("PossessiveLowerBound")}
+   "{" Integer "," Integer "}+" -> Quantifier {cons("PossessiveLowerUpperBound")}
+   "?+"                         -> Quantifier {cons("PossessiveOnceOrNot")}
+   "*+"                         -> Quantifier {cons("PossessiveZeroOrMore")}
+   "++"                         -> Quantifier {cons("PossessiveOneOrMore")}   
+
+  sorts Atom
+  context-free syntax
+    "("   Pattern ")"          -> Atom {cons("Capture")}
+    "(?:" Pattern ")"          -> Atom {cons("NonCapture")}
+    "(?=" Pattern ")"          -> Atom {cons("PositiveLookahead")}
+    "(?!" Pattern ")"          -> Atom {cons("NegativeLookahead")}
+    "(?<=" Pattern ")"         -> Atom {cons("PositiveLookbehind")}
+    "(?<!" Pattern ")"         -> Atom {cons("NegativeLookbehind")}
+    "(?P<" RegexId ">" Pattern ")"  -> Atom {cons("PythonCapture")}
+    "(" Pattern ")@{" RegexId "}"   -> Atom {cons("RegexCapture")}
+    "()"                       -> Atom {cons("Empty")}
+    "."                        -> Atom {cons("SingleCharacter")}
+    "^"                        -> Atom {cons("LineStart")}
+    "$"                        -> Atom {cons("LineEnd")}
+    CharacterClass             -> Atom {cons("CharacterClass")}
+    AtomLiteral                -> Atom {cons("AtomLiteral")}
+    AtomCharacter              -> Atom {cons("AtomCharacter")}
+    "\\Q" AllChars "\\E"       -> Atom {cons("QuotedAtom")}    
+    
+  sorts CharacterClass BracketItem
+  context-free syntax
+    "[" BracketItem+ "]"       -> CharacterClass {cons("BracketList")}
+    "[^" BracketItem+ "]"      -> CharacterClass {cons("NegatedBracketList")}
+%%d "\\p\{" ClassKeyword "\}"   -> CharacterClass {cons("PredefineClass")}
+%%d "\\P\{" ClassKeyword "\}"   -> CharacterClass {cons("NegatedPredefineClass")}
+   
+
+    (BracketLiteral | BracketCharacter)
+     "-" 
+    (BracketLiteral | BracketCharacter)   -> BracketItem {cons("Range")}
+    CharacterClass                        -> BracketItem {cons("Union")}
+%%d "\&\&" CharacterClass                 -> BracketItem {cons("Intersection")}
+    BracketLiteral                        -> BracketItem {cons("BracketLiteral")}
+    BracketCharacter                      -> BracketItem {cons("BracketCharacter")}
+   
+
+%%
+ %%   Defining characterclasses
+  %% 
+sorts ClassKeyword
+  context-free syntax    
+    "Lower"                    -> ClassKeyword {cons("LowerClass")}
+    "Upper"                    -> ClassKeyword {cons("UpperClass")}
+    "ASCII"                    -> ClassKeyword {cons("ASCIIClass")}
+    "Alpha"                    -> ClassKeyword {cons("AlphaClass")}
+    "Digit"                    -> ClassKeyword {cons("DigitClass")}
+    "Alnum"                    -> ClassKeyword {cons("AlnumClass")}
+    "Punct"                    -> ClassKeyword {cons("PunctClass")}
+    "Graph"                    -> ClassKeyword {cons("GraphClass")}
+    "Print"                    -> ClassKeyword {cons("PrintClass")}
+    "Blank"                    -> ClassKeyword {cons("BlankClass")}
+    "Cntrl"                    -> ClassKeyword {cons("CntrlClass")}
+    "XDigit"                   -> ClassKeyword {cons("XDigitClass")}
+    "Space"                    -> ClassKeyword {cons("WhiteSpace")}
+    "javaLowerCase"            -> ClassKeyword {cons("JavaIsLowerCase")}
+    "javaUpperCase"            -> ClassKeyword {cons("JavaIsLowerCase")}
+    "javaWhitespace"           -> ClassKeyword {cons("JavaIsWhitespace")}
+    "javaMirrored"             -> ClassKeyword {cons("JavaIsMirrored")}
+    "InGreek"                  -> ClassKeyword {cons("GreekBlock")}
+    "Lu"                       -> ClassKeyword {cons("UppercaseLetter")}
+    "Sc"                       -> ClassKeyword {cons("CurrencySymbol")}
+
+%%
+ %%   Defining the Character -> Characters that appear as Atom and in Brackets  
+  %%   
+
+%%  ASCII characters:  
+%%  $*+?.{}()                             %% OnlyBranchSpecial
+%%  &]-                                   %% OnlyClassSpecial
+%%  [^\                                   %% AlwaysSpecial
+%%  !"#%',/:;<=>@_`~                      %% NeverSpecialCharacter
+%%  ABCDEFGHIJKLMNOPQRSTUVWXYZ            %% Character
+%%  abcdefghijklmnopqrstuvwxyz            %% Charater
+%%  0123456789                            %% Charater
+%%  <tab> <newline> <return> <form-feed>  %% SpecialEscapeCharacter
+
+
+  sorts BracketLiteral AtomLiteral AllChars
+  lexical syntax
+    [a-zA-Z0-9\!\#\%\'\,\:\;\<\=\>\@\_\`\~\$\*\+\?\.\}\|]
+                                                  -> BracketLiteral
+    "/"                                           -> BracketLiteral 
+    [\&\]\-]                                      -> BracketLiteral {reject}
+    [a-zA-Z0-9\!\#\%\'\,\:\;\<\=\>\@\_\`\~\&\]\-]
+                                                  -> AtomLiteral
+    "/"                                           -> AtomLiteral 
+    [\}\)\|\[]                                    -> AtomLiteral {reject}
+    
+    [\\\|\$\*\+\?\.\{\}\(\)\&\]\-\[\^\!\#\%\'\,\:\;\<\=\>\@\_\`\~a-zA-Z0-9\t\n\r]*              
+          -> AllChars
+    "/"   -> AllChars
+    "\""  -> AllChars {cons("DoubleQuote") } 
+      
+  sorts BracketCharacter AtomCharacter
+  context-free syntax
+%%d    "\{"                -> BracketCharacter {cons("CurlyBraceOpen") }
+%%d    "\{"                -> AtomCharacter    {cons("CurlyBraceOpen"), avoid}
+    "\""                -> BracketCharacter {cons("DoubleQuote") }
+    "\""                -> AtomCharacter    {cons("DoubleQuote") }
+%%d    "\)"                -> BracketCharacter {cons("BraceClose"), avoid }
+%%d    "\)"                -> AtomCharacter    {cons("BraceClose") }
+
+
+%%
+ %%   Escaping with a '\' to express a special character
+  %%
+  context-free syntax
+    "\\0" OctalValue       -> BracketCharacter {cons("OctalChar")}
+    "\\x" TwoHexValue      -> BracketCharacter {cons("HexHexChar")}
+    "\\u" FourHexValue     -> BracketCharacter {cons("DecHexChar")}
+    "\\t"                  -> BracketCharacter {cons("Tab")}
+    "\\n"                  -> BracketCharacter {cons("Newline")}
+    "\\r"                  -> BracketCharacter {cons("Return")}
+    "\\f"                  -> BracketCharacter {cons("Formfeed")}
+    "\\a"                  -> BracketCharacter {cons("Alarm")}
+    "\\e"                  -> BracketCharacter {cons("Escape")}
+    "\\w"                  -> BracketCharacter {cons("WordChar")}
+    "\\W"                  -> BracketCharacter {cons("NonWordChar")}
+    "\\s"                  -> BracketCharacter {cons("WhiteSpaceChar")}
+    "\\S"                  -> BracketCharacter {cons("NonWhiteSpaceChar")}
+    "\\d"                  -> BracketCharacter {cons("DigitChar")}
+    "\\D"                  -> BracketCharacter {cons("NonDigitChar")}
+    "\\c" ControlValue     -> BracketCharacter {cons("ControlCharacter")}
+    "\\b"                  -> BracketCharacter {cons("WordBoundry")}
+    "\\B"                  -> BracketCharacter {cons("NonWordBoundry")}
+    "\\A"                  -> BracketCharacter {cons("InputBeginBoundry")}
+    "\\G"                  -> BracketCharacter {cons("PrevMatchEndBoundry")}
+    "\\Z"                  -> BracketCharacter {cons("EndInputBoundry")}
+    "\\z"                  -> BracketCharacter {cons("EndInputFinalBoundry")}
+    "\\" BackReference     -> BracketCharacter {cons("BackReference")}
+    "\\ "                  -> BracketCharacter {cons("Space")}
+    "\\\t"                 -> BracketCharacter {cons("Tab")}
+%%d    "\\\r"                 -> BracketCharacter {cons("Return")}
+    "\\\n"                 -> BracketCharacter {cons("Newline")}
+    
+    "\\0" OctalValue       -> AtomCharacter {cons("OctalChar")}
+    "\\x" TwoHexValue      -> AtomCharacter {cons("HexHexChar")}
+    "\\u" FourHexValue     -> AtomCharacter {cons("DecHexChar")}
+    "\\t"                  -> AtomCharacter {cons("Tab")}
+    "\\n"                  -> AtomCharacter {cons("Newline")}
+    "\\r"                  -> AtomCharacter {cons("Return")}
+    "\\f"                  -> AtomCharacter {cons("Formfeed")}
+    "\\a"                  -> AtomCharacter {cons("Alarm")}
+    "\\e"                  -> AtomCharacter {cons("Escape")}
+    "\\w"                  -> AtomCharacter {cons("WordChar")}
+    "\\W"                  -> AtomCharacter {cons("NonWordChar")}
+    "\\s"                  -> AtomCharacter {cons("WhiteSpaceChar")}
+    "\\S"                  -> AtomCharacter {cons("NonWhiteSpaceChar")}
+    "\\d"                  -> AtomCharacter {cons("DigitChar")}
+    "\\D"                  -> AtomCharacter {cons("NonDigitChar")}
+    "\\c" ControlValue     -> AtomCharacter {cons("ControlCharacter")}
+    "\\b"                  -> AtomCharacter {cons("WordBoundry")}
+    "\\B"                  -> AtomCharacter {cons("NonWordBoundry")}
+    "\\A"                  -> AtomCharacter {cons("InputBeginBoundry")}
+    "\\G"                  -> AtomCharacter {cons("PrevMatchEndBoundry")}
+    "\\Z"                  -> AtomCharacter {cons("EndInputBoundry")}
+    "\\z"                  -> AtomCharacter {cons("EndInputFinalBoundry")}
+    "\\" BackReference     -> AtomCharacter {cons("BackReference")}
+    "\\ "                  -> AtomCharacter {cons("Space")}
+    "\\\t"                 -> AtomCharacter {cons("Tab")}
+%%d    "\\\r"                 -> AtomCharacter {cons("Return")}
+    "\\\n"                 -> AtomCharacter {cons("Newline")}
+    
+%%
+ %%   Quoting of symbols is always allowed to express that symbol
+  %%
+  sorts QuotablePatternSymbol
+  context-free syntax
+    "\\" QuotablePatternSymbol            -> AtomCharacter {cons("Quoted")}
+    "\\" QuotablePatternSymbol            -> BracketCharacter {cons("Quoted")}    
+  lexical syntax
+    [\|\$\*\+\?\.\{\}\(\)\&\]\[\-\^\\\!\#\%\'\,\:\;\<\=\>\@\_\`\~\/]
+                                   -> QuotablePatternSymbol
+  context-free syntax
+    "\""                -> QuotablePatternSymbol {cons("DoubleQuote") }
+    "\""                -> QuotablePatternSymbol {cons("DoubleQuote") }    
+%%
+ %%   Defining integers and number values
+  %% 
+  sorts Integer OctalValue TwoHexValue FourHexValue BackReference ControlValue
+  lexical syntax      
+    [0-9]+                                       -> Integer
+    [1-9] [0-9]*                                 -> BackReference
+    [0-7]                                        -> OctalValue
+    [0-7][0-7]                                   -> OctalValue
+    [0-3][0-7][0-7]                              -> OctalValue
+    [0-9A-Fa-f][0-9A-Fa-f]                       -> TwoHexValue
+    [0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f] -> FourHexValue
+    [0-9]                                        -> ControlValue
+    [0-9][0-9]                                   -> ControlValue
+
+%%d  lexical restrictions
+%%d    "/"  -/- [\]]
+%%d    "\\" -/- [\ \t\12\n\r]   
+    
+    
+exports
+  sorts
+    RegexId
+    RegexID
+
+  context-free syntax
+    RegexID -> RegexId {cons("RegexId")}
+
+  lexical syntax
+    [A-Za-z\_\$][A-Za-z0-9\_\$]* -> RegexID
+    
+    "true"  -> RegexID {reject}
+    "false" -> RegexID {reject}
+    "null"  -> RegexID {reject}
+
+  lexical restrictions
+    RegexID -/- [a-zA-Z0-9\_\$]
+
+module WebDSL-JavaScript
+  
+exports 
+  sorts TemplateElement
+  context-free syntax
+    "<" "script" Attribute* ">" 
+    %%todo: should be javascript embedding
+    JSPart*
+    "</" "script" ">"
+    -> TemplateElement { cons("JSElement"), prefer}
+  
+  JSString -> JSPart{cons("JSString")}
+  "~" Exp -> JSPart{cons("JSExp"), prefer}
+  "\\~" -> JSPart{cons("JSTilde"), prefer}
+
+  sorts JSChar JSString
+  lexical syntax
+  JSChar* -> JSString
+  ~[\<\~]                        -> JSChar
+  SmallerThan                  -> JSChar
+  [\<]                         -> SmallerThan
+  "" -> JSString{reject}
+
+  lexical restrictions
+    SmallerThan   -/- [\/]
+    JSString -/- [\ \t\n\r]
+    JSString -/- ~[\<\~]
+
+module WebDSL-XML
+  
+exports
+  context-free syntax
+  
+    "<" QualName Attribute* "/>" -> TemplateElement {cons("XMLEmptyElement")}
+    
+    "<" QualName Attribute* ">"
+      TemplateElement*
+      "</" QualName ">" -> TemplateElement {cons("XMLElement")}
+
+exports
+  context-free syntax
+
+    QualName "=" Exp -> Attribute {cons("Attribute")}
+    
+exports
+
+  lexical syntax
+    Qualifier? NCName -> QualName    
+    NCName ":"        -> Qualifier
+
+  
+    [A-Za-z\_] [A-Za-z0-9\.\-\_]* -> NCName
+
+  lexical restrictions
+    NCName -/- [A-Za-z0-9\.\-\_]
+
+module WebDSL-AccessControl
+
+imports
+  WebDSL-UI
+  WebDSL-Action
+  WebDSL-DataModel
+  WebDSL-Lexical
+
+%% syntax for access control  
+exports
+
+  sorts MatchId
+
+  lexical syntax
+    [a-zA-Z][a-zA-Z0-9\_]*[\*]? -> MatchId
+    [\*]                        -> MatchId
+    [\*]                        -> WildCardArg 
+
+context-free syntax
+
+  "access" "control" "rules" Id? AccessControlDefinition*  -> Section {cons("AccessControlDefinition")}
+  %%deprecated: 
+  "access" "control" "rules" "{" Id? AccessControlDefinition* "}"  -> Section {cons("AccessControlDefinition")}
+  
+  "principal" "is" Id "with" "credentials" {Id ","}+            -> Definition {cons("AccessControlPrincipal")} 
+  "principal" "is" Id "with" "credentials" {Id ","}+            -> AccessControlDefinition {cons("AccessControlPrincipal")} 
+  
+  AccessControlRule                                             -> AccessControlDefinition
+ 
+  "rule" Id MatchId "(" MatchArgs ")"
+  "{" AccessControlCheck AccessControlRule* "}"                 -> AccessControlRule {cons("AccessControlRule")}
+  %%deprecated:
+  "rules" Id MatchId "(" MatchArgs ")"
+  "{" AccessControlCheck AccessControlRule* "}"                 -> AccessControlRule {cons("AccessControlRule")}
+
+  {FormalArg ","}* WildCardArg?                                 -> MatchArgs {cons("MatchArgs"),prefer}
+  {Exp ","}* WildCardArg?                                       -> MatchArgs {cons("MatchArgs")}
+
+  %% to prevent an AccessControlRule becoming an AccessControlCheck
+  "rules"                                                       -> Exp {reject}
+
+  Exp                                                           -> AccessControlCheck
+  
+  %% pagecheck
+  %%"pagecheck" "<" Id "," Exp ">"  -> TemplateElement {cons("PageCheck"),prefer}
+  %%"pagecheck" "(" Id "," Exp ")"  -> TemplateCall {reject}
+  %%"pagecheck" "(" {Exp ","}* ")"                          -> TemplateCall {reject}
+  
+  "predicate" Id "(" {FormalArg ","}* ")" "{" Exp "}"           -> Definition {cons("Predicate")}
+  "predicate" Id "(" {FormalArg ","}* ")" "{" Exp "}"           -> AccessControlDefinition {cons("Predicate")}
+  
+  Id MatchId "(" {Id ","}* WildCardArg? ")"                     -> AccessControlPointcutElement {cons("AccessControlPointcutElement")}
+  
+  "pointcut" Id "(" {FormalArg ","}* ")"
+    "{" {AccessControlPointcutElement ","}* "}"                 -> AccessControlPointcut {cons("AccessControlPointcut")}
+  
+  AccessControlPointcut                                         -> AccessControlDefinition
+  
+  "access" "control" "policy" PolicyExp                         -> Section {cons("ACPolicy")}
+  
+  Id                                 -> PolicyExp {cons("Name")}
+  "(" PolicyExp ")"                  -> PolicyExp {bracket}
+  PolicyExp "AND" PolicyExp          -> PolicyExp {cons("PolicyAnd"), assoc}
+  PolicyExp "OR" PolicyExp           -> PolicyExp {cons("PolicyOr"), assoc}
+  
+  
+  %% hack for allowing multiple function checks to be added in different stages to a function call
+  %%"acfunctioncheck" "(" Id "," Exp ")" Exp -> Exp {cons("ACFunctionCheck"), prefer}
+  
+context-free priorities
+  {left:
+       PolicyExp "AND" PolicyExp -> PolicyExp}
+  > {left:
+       PolicyExp "OR" PolicyExp -> PolicyExp}
+
+context-free priorities
+    Exp "in" Exp  -> Exp
+  > Exp -> AccessControlCheck
+
+context-free syntax
+  
+  "ignore-access-control" -> Modifier {cons("IgnoreAccessControl")}
+
+module WebDSL-DataValidation
+
+exports
+
+  context-free syntax
+
+    "validatecreate" "(" Exp "," Exp ")" -> Annotation {cons("ValidateCreateAnno"),prefer}
+    "validateupdate" "(" Exp "," Exp ")" -> Annotation {cons("ValidateUpdateAnno"),prefer}
+    "validatedelete" "(" Exp "," Exp ")" -> Annotation {cons("ValidateDeleteAnno"),prefer}
+    "validate" "(" Exp "," Exp ")" -> Annotation {cons("ValidateAnno"),prefer}
+    Id ":" "validate" "(" Exp "," Exp ")" -> Annotation {cons("NamedValidateAnno"),prefer}
+    
+    ValidateEntity -> EntityBodyDeclaration
+    "validate" "(" Exp "," Exp ")" -> ValidateEntity {cons("ValidateEntity"),prefer}
+    
+    "validate" "(" Exp "," Exp ")" ";" -> Statement {cons("ValidateStatement"),prefer}
+    Id ":" "validate" "(" Exp "," Exp ")" ";" -> Statement {cons("NamedValidateStatement"),prefer}
+    
+    "validationErrors" "(" Id ")" -> TemplateCall {cons("ValidationErrors"),prefer}
+    "validationErrors" "(" ")" -> TemplateCall {cons("ValidationErrors"),prefer}
+    
+    
+    "validationContext" "{" TemplateElement* "}" -> TemplateCall {cons("ValidationContext"),prefer}
+    "validationContext" "{" TemplateElement* "}" -> TemplateCall {reject}
+
+module WebDSL-DataModel
+
+imports
+  WebDSL-Action
+  WebDSL-Lexical
+
+exports
+
+  context-free syntax
+
+    "globals" "{" GlobalsDef* "}"                        -> Definition {prefer,cons("GlobalsDefinition")}
+
+    "entity" Id ":" Id "{" EntityBodyDeclaration* "}"       -> Entity {cons("Entity")}
+    "entity" Id "{" EntityBodyDeclaration* "}"              -> Entity {cons("EntityNoSuper")}
+    "session" Id "{" EntityBodyDeclaration* "}"             -> Entity {cons("SessionEntity")}
+    Property -> EntityBodyDeclaration
+    Function -> EntityBodyDeclaration
+
+    Entity                                   		     -> Definition
+
+    "extend" "entity" Id "{" EntityBodyDeclaration* "}"	 -> Definition {cons("ExtendEntity")}
+    "extend" "session" Id "{" EntityBodyDeclaration* "}"   -> Definition {cons("ExtendSessionEntity")}
+
+exports
+
+  sorts Entity Property Sort Annotation
+
+  context-free syntax
+
+    "request" VarDecl -> Definition {cons("RequestScope")}
+    VarDecl                                              -> GlobalsDef
+    %% still allow ";" behind global var for backwards comp., remove VarDeclStat-> GlobalsDef to disallow
+    VarDeclStat                                          -> GlobalsDef
+    Function                                             -> GlobalsDef
+    GlobalsDef                                           -> Definition
+    InitAction                                           -> Definition
+
+exports
+
+  sorts Property Annotation
+
+  context-free syntax
+
+    Id PropKind Sort "(" {Annotation ","}* ")" -> Property {cons("Property")}
+    Id PropKind Sort                           -> Property {cons("PropertyNoAnno")}
+
+    Id PropKind Sort "(" {Annotation ","}* ")" ":=" Exp -> Property {cons("DerivedProperty")}
+    Id PropKind Sort ":=" Exp                           -> Property {cons("DerivedPropertyNoAnno")}
+
+
+    "::" -> PropKind {cons("Simple")}
+    "->" -> PropKind {cons("Ref")}
+    "<>" -> PropKind {cons("Comp")}
+
+  sorts Sort
+
+  context-free syntax
+
+    Id                           -> Annotation {cons("SimpleAnno")}
+    "inverse" "=" Id "." Id      -> Annotation {cons("InverseAnno")}
+    "inverseSlave" "=" Id "." Id -> Annotation {cons("InverseSlaveAnno")}
+    "inline" "(" {Id ","}* ")"   -> Annotation {cons("InlineAnno")}
+    "select" "=" Id              -> Annotation {cons("SelectAnno")}
+    "not null"                   -> Annotation {cons("NotNullAnno")}
+    "not empty"                   -> Annotation {cons("NotEmptyAnno")}
+    "allowed" "=" Exp            -> Annotation {cons("AllowedAnno")}
+    "index" "(" ")"              -> Annotation {cons("IndexAnno")}
+    "index" "(" Int ")"          -> Annotation {cons("IndexAnno")}
+    "collation" "(" Id ")"       -> Annotation {cons("CollationAnno")}
+    
+    Id "=" AnnoValue         -> Annotation {cons("SingleParamAnno"), avoid}
+    Id -> AnnoValue
+    Int -> AnnoValue
+    Float -> AnnoValue
+    String -> AnnoValue
+
+
+module HQL
+
+hiddens
+  context-free start-symbols QueryRule Statement
+  
+exports
+  lexical syntax
+    [a-zA-Z\_][a-zA-Z0-9\_]* -> Identifier
+  lexical restrictions
+    Identifier -/- [a-zA-Z0-9\_]
+    
+  context-free syntax
+   
+    "from" | "select" | "by" | "order" -> Identifier {reject}
+
+exports
+
+  sorts Statement UpdateStatement DeleteStatement SelectStatement InsertStatement
+  
+  context-free syntax
+
+    "delete" FromClause WhereClause? -> DeleteStatement {cons("DeleteStatement")}
+    
+    SelectStatement -> Statement
+
+    QueryRule -> SelectStatement
+
+    QueryRule "union" QueryRule -> Union {cons("QueryUnion")}
+
+    SelectFrom WhereClause? GroupByClause? OrderByClause? -> QueryRule {cons("QueryRule")}
+    
+    SelectClause? FromClause -> SelectFrom {cons("SelectFrom")}
+    
+    "select" Distinct? Selection -> SelectClause {cons("Select")}
+
+    "distinct"                   -> Distinct {cons("Distinct")}
+    
+    SelectedPropertiesList -> Selection
+    NewExpression          -> Selection
+    SelectObject           -> Selection
+
+    QueryRule              -> Expression {avoid}
+    
+  "new" Path "(" SelectedPropertiesList ")" -> NewExpression {cons("NewExpression")}
+  
+  "object" "(" Identifier ")" -> SelectObject {cons("SelectObject")}
+  
+    "from" {FromRangeJoin ","}+ -> FromClause {cons("FromClause")}
+    
+    FromRange FromJoin? -> FromRangeJoin {cons("FromRangeJoin")}
+    
+    "left"          -> JoinType {cons("LeftJoin")}
+    "right"         -> JoinType {cons("RightJoin")}
+    "left"  "outer" -> JoinType {cons("LeftOuterJoin")}
+    "right" "outer" -> JoinType {cons("RightOuterJoin")}
+    "full"          -> JoinType {cons("FullJoin")}
+    "inner"         -> JoinType {cons("InnerJoin")}
+    
+    JoinType? "join" Fetch? Path AsAlias? PropertyFetch? WithClause? -> FromJoin {cons("FromJoin")}
+    
+    "fetch" -> Fetch {cons("Fetch")}
+        
+  "with" Expression -> WithClause {cons("WithClause")}
+  
+    FromClassOrOuterQueryPath       -> FromRange
+    InClassDeclaration              -> FromRange
+    InCollectionDeclaration         -> FromRange
+    InCollectionElementsDeclaration -> FromRange
+    
+    Path AsAlias? PropertyFetch? -> FromClassOrOuterQueryPath {cons("FromClass")}
+    
+    Alias "in" "class" Path -> InClassDeclaration {cons("InClassDeclaration")}
+    
+    "in" "(" Path ")" Alias -> InCollectionDeclaration {cons("InCollection")}
+    
+    Alias "in" "elements" "(" Path ")" -> InCollectionElementsDeclaration {cons("InCollectionElements")}
+
+    "as" Alias -> AsAlias {cons("AsAlias")}
+  
+    Identifier -> Alias {cons("Alias")}
+  
+  
+    "fetch" "all" "properties" -> PropertyFetch {cons("PropertyFetch")}
+    
+    "group" "by" {Expression ","}+ HavingClause? -> GroupByClause {cons("GroupBy")}
+    
+    "order" "by" {OrderElement ","}+ -> OrderByClause {cons("OrderByClause")}
+    
+    Expression AscendingOrDescending? -> OrderElement {cons("OrderElement")}
+    
+   "asc"       -> AscendingOrDescending {cons("Ascending")}
+   "ascending" -> AscendingOrDescending {cons("Ascending")}
+   
+   "desc"      -> AscendingOrDescending {cons("Descending")}
+   "descending" -> AscendingOrDescending {cons("Descending")}
+   
+    "having" Expression -> HavingClause {cons("HavingClause")}
+    
+    "where" Expression -> WhereClause {cons("WhereClause")}
+    
+    {AliasedExpression ","}+ -> SelectedPropertiesList
+    
+    Expression AsAlias? -> AliasedExpression {cons("AliasedExpression")}
+    
+   Expression "or" Expression -> Expression {cons("QueryOr")}
+   
+    Expression "and" Expression -> Expression {cons("QueryAnd")}
+    
+    "not" Expression -> Expression {cons("QueryNot")}
+    
+    Expression "=" Expression -> Expression {cons("EQ")}
+    Expression "is" Expression -> Expression {cons("IS")}
+    Expression "!=" Expression -> Expression {cons("NE")}
+    Expression "<>" Expression -> Expression {cons("SQLNE")}
+    Expression "like" Expression -> Expression {cons("LIKE")}
+    Expression "not" "like" Expression -> Expression {cons("NOTLIKE")}
+
+    Expression "<" Expression -> Expression {cons("LT")}
+    Expression ">" Expression -> Expression {cons("GT")}
+    
+    Expression "in" Expression -> Expression {cons("In")}
+    Expression "not" "in" Expression -> Expression {cons("NotIn")}
+    
+    Expression "member" "of" Expression -> Expression {cons("MemberOf")}
+    Expression "not" "member" "of" Expression -> Expression {cons("NotMemberOf")}
+  
+    Expression "||" Expression -> Expression {cons("Concat")}
+    
+    Expression "+" Expression -> Expression {cons("Plus")}
+    Expression "-" Expression -> Expression {cons("Minus")}
+
+    Expression "*" Expression -> Expression {cons("Multiply")}
+    Expression "/" Expression -> Expression {cons("Divide")}
+    
+    "-" Expression -> Expression {cons("UMinus")}
+    
+   lexical syntax 
+     ":" Identifier -> IdParameter 
+     "?" NumInt     -> NumParameter
+   context-free syntax
+     IdParameter -> Expression {cons("IdParam")}
+     NumParameter -> Expression {cons("NumParam")}
+   
+    "avg" "(" Expression ")" -> Expression {cons("Avg")}
+    "sum" "(" Expression ")" -> Expression {cons("Sum")}
+    "min" "(" Expression ")" -> Expression {cons("Min")}
+    "max" "(" Expression ")" -> Expression {cons("Max")}
+    "count" "(" "*" ")" -> Expression {cons("CountStar")}
+    "count" "(" Expression ")" -> Expression {cons("Count")}
+    
+     "elements" "(" Path ")" -> Expression {cons("Elements")}
+     "indices" "(" Path ")" -> Expression {cons("Indices")}
+                     
+     Path                      -> Expression
+     "(" {Expression ","}+ ")" -> Expression {cons("Paren")}
+     
+    Constant -> Expression
+    
+    "true" -> Constant {cons("True")}
+    "false" -> Constant {cons("False")}
+    "empty" -> Constant {cons("Empty")}
+    "null" -> Constant {cons("Null")}
+
+    "true" -> Identifier {reject}
+    "false" -> Identifier {reject}
+    "empty" -> Identifier {reject}
+    "null"  -> Identifier {reject}
+    
+    {Identifier "."}+ -> Path {cons("Path")} 
+    
+  context-free syntax
+    QuotedString -> Constant {cons("String")}
+    
+  lexical syntax
+    "'" (~[\'] | "\\'")* "'" -> QuotedString
+     
+  lexical syntax
+    [0-9]+ -> NumInt
+  context-free syntax
+    NumInt -> Constant
+  
+context-free priorities
+  {left:
+    Expression "*" Expression -> Expression
+    Expression "/" Expression -> Expression
+  }
+  > {left:
+    Expression "+" Expression -> Expression
+    Expression "-" Expression -> Expression
+  }
+  > {left:
+    Expression "<" Expression -> Expression
+    Expression ">" Expression -> Expression
+    Expression "=" Expression -> Expression
+    Expression "is" Expression -> Expression
+    Expression "!=" Expression -> Expression
+    Expression "<>" Expression -> Expression
+    Expression "like" Expression -> Expression 
+    Expression "not" "like" Expression -> Expression
+    }
+  > {left: Expression "or" Expression -> Expression }
+  > {left: Expression "and" Expression -> Expression}
+
+module MixHQL[Ctx0]
+imports 
+        HQL
+          [ Path                            => Path[[Ctx0]]
+            Constant                        => Constant[[Ctx0]]
+            AliasedExpression               => AliasedExpression[[Ctx0]]
+            SelectedPropertiesList          => SelectedPropertiesList[[Ctx0]]
+            WhereClause                     => WhereClause[[Ctx0]]
+            HavingClause                    => HavingClause[[Ctx0]]
+            AscendingOrDescending           => AscendingOrDescending[[Ctx0]]
+            OrderElement                    => OrderElement[[Ctx0]]
+            OrderByClause                   => OrderByClause[[Ctx0]]
+            GroupByClause                   => GroupByClause[[Ctx0]]
+            PropertyFetch                   => PropertyFetch[[Ctx0]]
+            Alias                           => Alias[[Ctx0]]
+            AsAlias                         => AsAlias[[Ctx0]]
+            InCollectionElementsDeclaration => InCollectionElementsDeclaration[[Ctx0]]
+            InCollectionDeclaration         => InCollectionDeclaration[[Ctx0]]
+            InClassDeclaration              => InClassDeclaration[[Ctx0]]
+            FromClassOrOuterQueryPath       => FromClassOrOuterQueryPath[[Ctx0]]
+            FromRange                       => FromRange[[Ctx0]]
+            WithClause                      => WithClause[[Ctx0]]
+            Fetch                           => Fetch[[Ctx0]]
+            FromJoin                        => FromJoin[[Ctx0]]
+            JoinType                        => JoinType[[Ctx0]]
+            FromRangeJoin                   => FromRangeJoin[[Ctx0]]
+            FromClause                      => FromClause[[Ctx0]]
+            SelectObject                    => SelectObject[[Ctx0]]
+            NewExpression                   => NewExpression[[Ctx0]]
+            Selection                       => Selection[[Ctx0]]
+            Distinct                        => Distinct[[Ctx0]]
+            SelectClause                    => SelectClause[[Ctx0]]
+            SelectFrom                      => SelectFrom[[Ctx0]]
+            QueryRule                       => QueryRule[[Ctx0]]
+            Union                           => Union[[Ctx0]]
+            SelectStatement                 => SelectStatement[[Ctx0]]
+            Statement                       => Statement[[Ctx0]]
+            DeleteStatement                 => DeleteStatement[[Ctx0]]
+            NumInt                          => NumInt[[Ctx0]]
+            QuotedString                    => QuotedString[[Ctx0]]
+            NumParameter                    => NumParameter[[Ctx0]]
+            IdParameter                     => IdParameter[[Ctx0]]
+            Identifier                      => Identifier[[Ctx0]]
+            Expression                      => Expression[[Ctx0]] ]
+
+
+module WebDSL-Action
+
+imports
+  WebDSL-Lexical
+  MixHQL[HQL]
+
+exports
+
+  context-free syntax
+  
+    "function" -> Keyword
+    "return"   -> Keyword
+
+  context-free syntax %% Functions
+
+    "function" Id "(" {FormalArg ","}* ")" ":" Sort
+        Block                                            -> Function {cons("Function")}
+
+    "function" Id "(" {FormalArg ","}* ")" 
+        Block                                            -> FunctionNoReturn {cons("FunctionNoReturn")}
+
+    FunctionNoReturn                                     -> Function
+
+    "extend" FunctionNoReturn                            -> Function {cons("ExtendFunction")}
+
+  context-free syntax
+    "{" Statements "}" 		-> Block {cons("Block")}
+    Block              		-> Statement
+    %%Assignment ";"	   	-> Statement {cons("Assign")}
+    Exp ";"		       	-> Statement {cons("Stat")}
+
+    "return" Exp ";"     	-> Statement {cons("Return")}
+    
+    "return" ";"         	-> Statement {cons("ReturnEmpty")}
+    
+    "cancel" Exp ";"     	-> Statement {cons("Cancel")}
+
+    "goto" Exp ";"       	-> Statement {cons("GoTo"),prefer}
+
+    "schedule" Exp "for" Exp ";" -> Statement {cons("Schedule")}
+    "schedule" Exp ";"           -> Statement {cons("ScheduleNoFor")}
+
+  context-free syntax
+
+    "var" Id ":" Sort ";" 	-> VarDeclStat {cons("VarDecl")}
+    "var" Id ":" Sort 		-> VarDecl {cons("VarDecl")}
+
+    "var" Id ":" Sort ":=" Exp ";" -> VarDeclStat {cons("VarDeclInit")}
+    "var" Id ":=" Exp ";"          -> VarDeclStat {cons("VarDeclInitInferred")}
+    "var" Id ":" Sort ":=" Exp     -> VarDecl {cons("VarDeclInit")}
+    "var" Id ":=" Exp              -> VarDecl {cons("VarDeclInitInferred")}
+
+    VarDeclStat -> Statement
+
+  context-free syntax
+
+    "if" "(" Exp ")" Block "else" Block -> Statement {cons("If")}
+
+    "if" "(" Exp ")" Block 		-> Statement {cons("IfNoElse")}
+
+    "case" "(" Exp ")" "{" Case* "}" 	-> Statement {cons("Case")}
+    ConstValue Block                 	-> Case {cons("CaseAlt")}
+    "default"  Block                 	-> Case {cons("CaseDefault")}
+
+
+  context-free syntax
+
+    "for" "(" Id ":" Sort "in" Exp Filter ")"
+      Block 				-> Statement {cons("ForStmt")}
+
+    "for" "(" Id ":" Sort "in" Exp ")"
+      Block 				-> Statement {cons("ForStmtNoFilter")}
+
+    "for" "(" Id ":" Sort Filter ")"
+      Block 				-> Statement {cons("ForAllStmt")}
+
+    "for" "(" Id ":" Sort ")"
+      Block 				-> Statement {cons("ForAllStmtNoFilter")}
+
+    "for" "(" Id ":" "Int" "from" Exp "to" Exp ")" Block -> Statement {cons("ForCountStmt")}
+
+    "while" "(" Exp ")" Block -> Statement {cons("WhileStmt")}
+
+exports %% Expression language
+
+  sorts ConstValue Exp
+
+  context-free syntax
+    Int                    -> ConstValue {cons("Int")}
+    Long                   -> ConstValue {cons("Long")}
+    Float                  -> ConstValue {cons("Float")}
+    String                 -> ConstValue {cons("String")}
+
+    ConstValue                  -> Exp
+
+    Id			   -> Exp {cons("Var")}
+    "in"                   -> Exp {reject}
+        
+    %% to be able to refer to page or template farg/var from actions when names clashing with farg/var in action
+    "externalscope" "." Id -> Exp {cons("ExternalScopeVar")}
+    "global" "." Id -> Exp {cons("GlobalVar")}
+    "global" -> Id {reject}
+
+    Exp "." Id             -> Exp {cons("FieldAccess"),prefer}
+    
+    Exp "[" Exp "]"        -> Exp {cons("CollectionIndex"),prefer}
+
+    Sort "{" ObjectPropertyAssignment* "}"         -> Exp {cons("ObjectCreation")}
+    Sort "{" { ObjectPropertyAssignment "," }* "}" -> Exp {cons("ObjectCreation"), prefer}
+
+    Id ":=" Exp           -> ObjectPropertyAssignment {cons("ObjectPropertyAssignment")}
+
+    Exp ":=" Exp             -> Assignment {cons("Assignment")}
+    Assignment				-> Exp
+
+    "[" Mapping* "]"       -> Exp {cons("MapCreation"), avoid} %%avoid to prevent ambiguity between with empty untyped list creation and empty map creation
+    Exp "->" Exp           -> Mapping {cons("Mapping")}
+
+    "[" {Exp ","}* "]"     -> Exp {cons("ListCreation")}
+
+    "{" {Exp ","}* "}"     -> Exp {cons("SetCreation")}
+
+    "List" "<" Sort ">" "(" {Exp ","}* ")" -> Exp {cons("TypedListCreation"), prefer}
+    "Set" "<" Sort ">" "(" {Exp ","}* ")" -> Exp {cons("TypedSetCreation"), prefer}
+
+    Id "(" {Exp ","}* ")"  -> Exp {cons("ThisCall")}
+    "!" "(" {Exp ","}* ")"  -> Exp {reject}
+
+    Exp "." Id "(" {Exp ","}* ")"  -> Exp {cons("Call")}
+
+    Exp "is" "a" Sort      -> Exp {cons("IsA")}
+    Exp "as" Sort          -> Exp {cons("Cast"), avoid} %% avoid, to give hql query AsAlias more priority, 'from Page as p' should make the 'as p' part of the query
+    "as"   -> Keyword
+  
+  context-free restrictions
+    "as" -/- [a-zA-Z0-9\_] %% prevent ambiguity between as and asc (used in for-filters)
+ 
+  context-free syntax
+    Exp "in" Exp           -> Exp {non-assoc, cons("InColl")}
+  context-free restrictions
+    "in" -/- [a-zA-Z0-9\_] %% there must be whitespace after the 'in' keyword for collection test
+
+  context-free syntax
+    Exp "==" Exp           -> Exp {cons("Eq")}
+    Exp "!=" Exp           -> Exp {cons("NotEq")}
+    Exp ">" Exp           -> Exp {cons("LargerThan")}
+    Exp ">=" Exp           -> Exp {cons("LargerThanOrEqual")}
+    Exp "<" Exp           -> Exp {cons("SmallerThan")}
+    Exp "<=" Exp           -> Exp {cons("SmallerThanOrEqual")}
+
+    "true"                 -> Exp {prefer,cons("True")}
+    "false"                -> Exp {prefer,cons("False")}
+
+    "null"                 -> Exp {prefer,cons("Null")}
+
+    Exp "&&" Exp          -> Exp {cons("And"), assoc}
+    Exp "||" Exp           -> Exp {cons("Or"), assoc}
+    "!" Exp              -> Exp {cons("Not")}
+
+    "(" Exp ")"            -> Exp {bracket}
+
+
+    "[" Exp "for" "(" Id ":" Sort "in" Exp Filter ")" "]" -> ForExp {cons("ForExp")}
+    "[" Exp "for" "(" Id ":" Sort "in" Exp ")" "]"        -> ForExp {cons("ForExpNoFilter")}
+    "[" Exp "|" Id ":" Sort "in" Exp Filter "]"           -> ForExp {cons("ForExp")}
+    "[" Exp "|" Id ":" Sort "in" Exp "]"                  -> ForExp {cons("ForExpNoFilter")}
+    ForExp                                                -> Exp
+
+    "And" ForExp                                          -> Exp {cons("AndForExp")}
+    "Or"  ForExp                                          -> Exp {cons("OrForExp")}
+
+
+    Exp "*" Exp  -> Exp {cons("Mul"),assoc}
+    Exp "/" Exp  -> Exp {cons("Div"),assoc}
+    Exp "%" Exp  -> Exp {cons("Mod"),assoc}
+    Exp "+" Exp  -> Exp {cons("Add"),assoc}
+    Exp "-" Exp  -> Exp {cons("Sub"),assoc}
+
+context-free priorities
+  {left:
+    Exp "." Id "(" {Exp ","}* ")"  -> Exp
+    Exp "." Id  -> Exp
+    Exp "[" Exp "]"  -> Exp }
+  > {non-assoc: 
+       Exp "is" "a" Sort -> Exp 
+       Exp "as" Sort     -> Exp
+    }
+  > "!" Exp -> Exp
+  > {left:
+       Exp "*" Exp -> Exp
+       Exp "%" Exp -> Exp
+       Exp "/" Exp -> Exp }
+  > {left:
+       Exp "+" Exp -> Exp
+       Exp "-" Exp -> Exp }
+  > Exp "in" Exp -> Exp
+  > {left:
+       Exp "==" Exp -> Exp
+       Exp "!=" Exp -> Exp
+       Exp ">" Exp -> Exp
+       Exp ">=" Exp -> Exp
+       Exp "<" Exp -> Exp
+       Exp "<=" Exp -> Exp }
+  > {left:
+       Exp "&&" Exp -> Exp }
+  > {left:
+       Exp "||" Exp -> Exp }
+  > Assignment -> Exp
+  > HqlExp -> Exp
+
+
+exports
+
+  context-free syntax
+
+    QueryRule[[HQL]]                     -> HqlExp {cons("HqlQuery")}
+    QueryRule[[HQL]] "limit" Exp         -> HqlExp {cons("HqlQueryLimit")}
+    QueryRule[[HQL]] "limit" Exp "," Exp -> HqlExp {cons("HqlQueryLimitOffset")}
+
+    HqlExp -> Exp
+
+    "~" Exp -> Expression[[HQL]] {cons("DslExp")}
+
+    DeleteStatement[[HQL]] ";" -> Statement {cons("HqlStatement")}
+
+  context-free syntax
+
+    QueryRule[[HQL]] "." Id -> Exp {reject}
+
+module WebDSL-Ajax
+
+exports
+
+  sorts Statement Exp InlineTemplate AjaxStatement
+  context-free syntax
+
+    "event" "(" Id "," "[" { EventArg "," }* "]" ")" -> Exp {cons("EventCall")}
+    "event" "(" Id "," "[" { EventArg "," }* "]" ")" -> TemplateElement {cons("EventCallElement")}
+
+    Id ":=" Exp -> EventArg {cons("EventArg")}
+    "event" -> Id {reject}
+
+    %%AJAX desugarings/ inline
+    InlineAction -> Exp
+    "action" Block -> InlineAction {cons("InlineAction"), prefer}
+    %% reject ambiguous ObjectCreation(SimpleSort("action"), [])
+    "action" -> Sort {reject}
+    
+    "template" "{" TemplateElement* "}" -> InlineTemplate {cons("InlineTemplateCall")}    
+%%    "template"               -> Id {reject}
+   
+    %% Template call without braces must be disambiguated in some cases
+    "action" -> TemplateCall {reject}  %%this is an action definiton, not a templatecall without params
+    "action" -> Exp {reject}		   %%this is an inline action, not a variable
+    "action" -> PropertyValue {reject} %%this is an inline action, not an id
+  
+  
+%%  	replace <element_id> << <templatecall>(<argumenten>);
+%%	append  <element_id> << <templatecall>(<argumenten>);
+%%	visibility <element_id> << < "show" | "hide" | "toggle">;
+%%	relocate this << <pagecall>(<argumenten>);
+%%	restyle <element_id> << "<css classname>";
+%%	clear <element_id> << "<niet terzake doende string>"
+
+  AjaxStatement ";" -> Statement {cons("AjaxStatement"), prefer}   
+    "replace" "(" Id "," TemplateCall ")" -> AjaxStatement {cons("AjaxReplace")}
+    "replace" "(" Id "," InlineTemplate ")" -> AjaxStatement {cons("AjaxReplace"), prefer}  	
+
+    "append" "(" Id "," TemplateCall ")" -> AjaxStatement {cons("AjaxAppend")}
+    "append" "(" Id "," InlineTemplate ")" -> AjaxStatement {cons("AjaxAppend"), prefer}  	
+
+    "visibility" "(" Id "," AjaxVisibility ")" -> AjaxStatement {cons("AjaxVisibility")}
+    "show" -> AjaxVisibility{cons("Show")}
+    "toggle" -> AjaxVisibility{cons("Toggle")}
+    "hide" -> AjaxVisibility{cons("Hide")}        
+    
+    "relocate" "(" Exp ")" -> AjaxStatement { cons("AjaxRelocate") }
+    "restyle" "(" Id "," Exp ")" -> AjaxStatement { cons("AjaxRestyle") }
+    
+    "clear" "(" Id ")" -> AjaxStatement{cons("AjaxClear")}
+    "refresh" "(" ")" -> AjaxStatement{cons("AjaxRefresh")}
+    
+    "runscript" "(" Exp ")" -> AjaxStatement { cons("AjaxRunScript"), prefer }
+    
+%%    Id Id "<<" Id  ";" 	 -> Statement {cons("AjaxActionIdParam"),prefer}
+%%    Id Id "<<" ";"		-> Statement {cons("AjaxActionNoParam")}
+%%    Id "<<" Exp ";"	 	-> Statement {cons("AjaxActionNoTarget")}
+%%    Id Id "<<" Exp ";"   	-> Statement {cons("AjaxAction")}
+  
+    "placeholder" Id "{" TemplateElement* "}" -> TemplateElement{cons("Placeholder")}
+    "placeholder" -> Keyword
+
+
+module WebDSL-ActionHooks
+
+exports
+
+  sorts PropertyAssignment
+  context-free syntax
+
+    ActionHookId ":=" ActionCallOrInline -> PropertyAssignment {prefer, cons("PropertyAssignment")}
+
+    "onabort" -> ActionHookId
+    "onblur" -> ActionHookId
+    "onchange" -> ActionHookId
+    "onclick" -> ActionHookId
+    "ondblclick" -> ActionHookId
+    "onerror" -> ActionHookId
+    "onfocus" -> ActionHookId
+    "onkeydown" -> ActionHookId
+    "onkeypress" -> ActionHookId
+    "onkeyup" -> ActionHookId
+    "onload" -> ActionHookId
+    "onmousedown" -> ActionHookId
+    "onmousemove" -> ActionHookId
+    "onmouseout" -> ActionHookId
+    "onmouseover" -> ActionHookId
+    "onmouseup" -> ActionHookId
+    "onreset" -> ActionHookId
+    "onresize" -> ActionHookId
+    "onselect" -> ActionHookId
+    "onsubmit" -> ActionHookId
+    "onunload" -> ActionHookId
+
+
+module WebDSL-UI
+
+imports
+  WebDSL-Action
+  WebDSL-ActionHooks
+  WebDSL-Lexical
+
+exports
+
+  sorts TemplateDefinition Modifier Exp
+
+  context-free syntax
+    
+    "define" -> Keyword
+  %%"action" -> Keyword
+    "for"    -> Keyword
+
+  context-free syntax
+
+    TemplateDefinition -> Definition
+
+    "define" Modifier*
+       Id "(" {FormalArg ","}* ")"
+%%       ( "requires" {TemplateArg "," }* )?
+       TemplateArgs
+       "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}
+
+    "requires" {TemplateArg "," }*			-> TemplateArgs{cons("TemplateArgs"), prefer}
+    Id "(" {Sort ","}* ")"                  -> TemplateArg {cons("TemplateArg")}
+    
+      -> TemplateArgs{cons("None")}
+
+    %%"define" Modifier*
+    %%   Id UNDEFINED*
+    %%   "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}
+
+    "page"                                  -> Modifier {cons("Page")}
+    "email"                                 -> Modifier {cons("Email")}
+    "ajax"                                  -> Modifier {cons("AjaxTemplate")}
+    "template"                              -> Modifier {cons("Template")}
+    "feed"                                  -> Modifier {cons("Feed")}
+    "local"                                 -> Modifier {cons("Local")}
+    "no-span" 								-> Modifier {cons("NoSpan")}    
+    "inputtemplate"									-> Modifier {cons("InputTemplate"), prefer} 
+    %%defines input template, in which case the first argument is an input variable
+
+    InitAction                              -> TemplateElement
+    Action                                  -> TemplateElement
+    VarDecl                                 -> TemplateElement
+    %% still allow ";" behind page var for backwards comp., remove VarDeclStat-> TemplateElement to disallow
+    VarDeclStat                             -> TemplateElement
+    TemplateDefinition                      -> TemplateElement
+    TemplateCall                            -> TemplateElement {avoid}
+    String                                  -> TemplateElement {cons("Text")}
+
+
+    "where" Exp                              -> Filter {cons("FilterNoOrderByNoLimit")}
+    "order" "by" OrderExp                    -> Filter {cons("FilterNoWhereNoLimit")}
+    "where" Exp "order" "by" OrderExp        -> Filter {cons("FilterNoLimit")}
+    "where" Exp Limit                        -> Filter {cons("FilterNoOrderBy")}
+    "order" "by" OrderExp Limit              -> Filter {cons("FilterNoWhere")}
+    Limit                                    -> Filter {cons("FilterNoWhereNoOrderBy")}
+    "where" Exp "order" "by" OrderExp Limit  -> Filter {cons("Filter")}
+    Exp                                      -> OrderExp {cons("OrderNonSpecific")}
+    Exp "asc"                                -> OrderExp {cons("OrderAscending")}
+    Exp "desc"                               -> OrderExp {cons("OrderDescending")}
+    "limit" Exp "offset" Exp                 -> Limit {cons("Limit")}
+    "limit" Exp                              -> Limit {cons("LimitNoOffset")}
+    "offset" Exp                             -> Limit {cons("LimitNoLimit")}
+
+
+    "for" "(" Id ":" Sort "in" Exp Filter ")"
+       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("For")}
+    
+    %% Reject
+   %%"for" "(" Id ":" Sort "in" HqlExp Filter ")" "{" TemplateElement* "}" -> TemplateElement {reject}
+    
+    "for" "(" Id ":" Sort "in" Exp ")"
+       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForNoFilter"), prefer}
+
+    "for" "(" Id ":" Sort Filter ")"
+       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForAll")}
+
+    "for" "(" Id ":" Sort ")"
+       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForAllNoFilter")}
+    
+    "for" "(" Id ":" "Int" "from" Exp "to" Exp ")" 
+      "{" TemplateElement* "}" ForSeparator        -> TemplateElement {cons("ForCount")}
+    
+    "separated-by" "{" TemplateElement* "}" -> ForSeparator{cons("ForSeparator")}
+    -> ForSeparator{cons("None")}
+
+    %%
+
+    "select" "(" Id ":" Sort "," String "," Exp ")" -> TemplateElement {cons("SelectNoPropsNoElems")}
+    "select" "(" Id ":" Sort "," String "," Exp ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SelectNoElems")}
+    "select" "(" Id ":" Sort "," String "," Exp ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("Select")}
+    "select" "(" Id ":" Sort "," String "," Exp ")" "{" TemplateElement* "}" -> TemplateElement {cons("SelectNoProps")}
+    
+    "select" "(" Exp "from" Exp ")" -> TemplateElement {cons("SelectFromListNoPropsNoElems")}
+    "select" "(" Exp "from" Exp ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SelectFromListNoElems")}
+    "select" "(" Exp "from" Exp ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SelectFromList")}
+    "select" "(" Exp "from" Exp ")" "{" TemplateElement* "}" -> TemplateElement {cons("SelectFromListNoProps")}
+
+    "if" "(" Exp ")" "{" TemplateElement* "}" "else" "{" TemplateElement* "}" -> TemplateElement {cons("IfTempl"),prefer}
+    "if" "(" Exp ")" "{" TemplateElement* "}"                                 -> TemplateElement {cons("IfNoElseTempl")}
+
+
+    "if" "(" Exp ")" "{" TemplateElement* "}" ElseIfTempl+ ElseTempl? -> TemplateElement {cons("IfElseIfTempl"),prefer}
+    "else" "if" "(" Exp ")" "{" TemplateElement* "}"                  -> ElseIfTempl {cons("ElseIfTempl"),prefer}
+    "else" "{" TemplateElement* "}"                                   -> ElseTempl  {cons("ElseTempl"),prefer}
+
+
+    "case" "(" {Exp ","}* ")" "{" TemplateCaseAlt* "}" 	-> TemplateElement {cons("TemplateCase")}
+    {ConstValue ","}* "{" TemplateElement* "}"          -> TemplateCaseAlt {cons("TemplateCaseAlt")}
+    "default"  "{" TemplateElement* "}"                 -> TemplateCaseAlt {cons("TemplateCaseAltDefault")}
+
+  %%
+
+    TemplateCallId                                             -> TemplateCall {cons("TemplateCallNoArgs")}
+    TemplateCallId "(" {Exp ","}* ")"                          -> TemplateCall {cons("TemplateCallNoBody")}
+    TemplateCallId "(" {Exp ","}* ")" TemplateBody -> TemplateCall {cons("TemplateCallNoAssigns")}
+  
+    TemplateCallId "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" -> TemplateCall {cons("TemplateCallPropsNoBody")}
+    TemplateCallId "[" {PropertyAssignment ","}*"]" -> TemplateCall {cons("TemplateCallProps")}
+    TemplateCallId "[" {PropertyAssignment ","}*"]" TemplateBody -> TemplateCall {cons("TemplateCallPropsNoArgs")}
+
+    TemplateCallId  TemplateBody -> TemplateCall {cons("TemplateCallBody")}
+    TemplateCallId "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" TemplateBody -> TemplateCall {cons("TemplateCall")}
+    
+    "{" TemplateElement* "}" -> TemplateBody {cons("TemplateBody")}
+    "with" "{" ArgDefine* "}" -> TemplateBody {cons("TemplateWith")}
+    TemplateCallId "(" {FormalArg ","}* ")"
+      "{" TemplateElement* "}" -> ArgDefine {cons("ArgDefine")}
+
+    "with" "{" TemplateElement* "}"                -> TemplateCall {reject}
+    
+    %%disambiguate
+    "define"                        -> TemplateCallId {reject}
+    "for"                        -> TemplateCallId {reject}
+    "placeholder"                        -> TemplateCallId {reject}
+    
+  %%
+  
+    %% deprecated
+    "navigate" "(" PageCall ")" UNDEFINED* "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
+    "navigate" "(" PageCall ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
+
+    "navigate" PageCall UNDEFINED* "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
+    "navigate" PageCall "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
+
+    Id "(" {Exp ","}* ")"  -> PageCall {cons("PageCall")}
+
+    %%disambiguate
+    "navigate" -> TemplateCallId {reject}
+    
+  %%
+
+    %% deprecated
+    "action" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("Submit"), prefer}
+    "action" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("Submit"), prefer}
+    "actionLink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("SubmitLink"), prefer}
+    "actionLink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SubmitLink"), prefer}
+
+    "submit" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("Submit"), prefer}
+    "submit" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("Submit"), prefer}
+    "submitlink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("SubmitLink"), prefer}
+    "submitlink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SubmitLink"), prefer}
+
+    ActionCall -> ActionCallOrInline
+    InlineAction -> ActionCallOrInline
+
+    Id "(" {Exp ","}* ")"  -> ActionCall {cons("ActionCall")}
+    
+    %%disambiguate
+    "action"                        -> TemplateCallId {reject}
+    "actionLink"                  -> TemplateCallId {reject}
+    "submit"                   -> TemplateCallId {reject}
+    "submitlink"                   -> TemplateCallId {reject}
+    
+    
+  %%
+    
+    Id ":" PropertyValue				           -> PropertyAssignment {cons("PropertyAssignment")}
+    Id ":=" PropertyValue				           -> PropertyAssignment {cons("PropertyAssignment")}
+    Id											   -> PropertyValue {prefer}
+    String										   -> PropertyValue {cons("String"),prefer}  %% needed to deconfuse StyleValue and Exp
+    Exp								        	   -> PropertyValue {avoid}
+    "[" {PropertyValue "," }* "]"				   -> PropertyValue{cons("PropertyValueList"), prefer}
+    StyleValue									   -> PropertyValue
+    "ajax"                                         -> PropertyAssignment {cons("TemplateCallPropertyAjax"),prefer}
+    
+  context-free syntax
+  %%
+    
+    "if" "(" Exp ")" "{" TemplateElement* "}"      -> TemplateCall {reject}
+    "else" "{" TemplateElement* "}"                -> TemplateCall {reject}
+    "separated-by" "{" TemplateElement* "}"        -> TemplateCall {reject}
+
+    "init" Block  		-> InitAction {cons("InitAction"),prefer}
+    "action" 
+      Id "(" {FormalArg ","}* ")" 
+      Block  			-> Action {cons("Action")}
+
+module WebDSL-Lexical
+
+exports
+
+  lexical syntax
+    Id -> TemplateCallId %% hook for reject rules on templatecall names
+    [a-zA-Z][a-zA-Z0-9\_]* -> Id
+    [a-zA-Z0-9\-\_]+       -> FileName
+    {FileName "/"}+        -> ModuleName
+    ~[\n\r]*               -> SectionName
+
+  lexical restrictions
+    Id         -/- [a-zA-Z0-9\_]
+    ModuleName -/- [a-zA-Z0-9\/]
+
+  lexical syntax
+    "-"? [0-9]+            -> Int
+    "-"? [0-9]+ "L"        -> Long
+
+  lexical syntax
+    "-"? FloatDigits
+     ExponentPart? [fFdD]? -> Float
+    [0-9]* "." [0-9]*      -> FloatDigits
+    [0-9]+                 -> FloatDigits
+    [eE] SignedInteger     -> ExponentPart
+    [\+\-]? [0-9]+         -> SignedInteger
+
+    "-"? [0-9]+            -> Float {reject}
+    "."                    -> FloatDigits  {reject}
+
+  lexical syntax
+    "\"" StringChar* "\""        -> String
+    ~[\"\n]                      -> StringChar
+    "\\\""                       -> StringChar
+
+  lexical syntax
+    [\ \t\n\r]                   -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | Eof) -> LAYOUT
+    "/*" CommentChar* "*/"       -> LAYOUT
+                                 -> Eof
+    ~[\*]                        -> CommentChar
+    Asterisk                     -> CommentChar
+    [\*]                         -> Asterisk
+
+  lexical restrictions
+    Asterisk   -/- [\/]
+    Eof        -/- ~[]
+
+  context-free restrictions
+    LAYOUT?     -/- [\ \t\n\r]
+    LAYOUT?     -/- [\/].[\/]
+    LAYOUT?     -/- [\/].[\*]
+    SectionName -/- ~[\n\r]
+
+  lexical syntax
+    ~[\ \t\n\r\}]+ -> Word
+  lexical restrictions
+     Word -/- ~[\ \t\n\r\}]
+
+  context-free restrictions
+    "page" "local" "email" "feed" "template" "schedule" "inputtemplate" -/- [a-zA-Z0-9]
+
+module WebDSL
+
+imports
+  WebDSL-Lexical
+  WebDSL-UI
+  WebDSL-Ajax
+  WebDSL-Action
+  WebDSL-DataModel
+  WebDSL-DataValidation
+  WebDSL-AccessControl
+  WebDSL-XML
+  WebDSL-JavaScript
+  WebDSL-Regex
+  WebDSL-Enums
+  WebDSL-Styling
+  WebDSL-PagedFor
+  WebDSL-Derive
+  WebDSL-Procedures
+  WebDSL-StringSelectEntity
+  WebDSL-ValidationAnnos
+  WebDSL-Native
+  WebDSL-Dispatch
+  WebDSL-Exception
+  WebDSL-Type
+  WebDSL-Test
+  WebDSL-TimeInterval
+
+hiddens
+  context-free start-symbols
+    Unit
+
+exports
+
+  sorts
+    Id QId Int ModuleName SectionHeader Float FloatDigits ExponentPart
+    SignedInteger String UNDEFINED Eof
+
+
+  context-free syntax
+    Id         -> QId
+    QId "." Id -> QId {cons("Qualified")}
+    Keyword    -> Id {reject} %% (not rejected as HQL or styling keyword)
+
+  context-free syntax %% Types
+    Id                     -> Sort {cons("SimpleSort")}
+    Id "<" {Sort ","}+ ">" -> Sort {cons("GenericSort")}
+
+    Id ":" Sort            -> FormalArg {cons("Arg")}
+
+
+exports
+
+  sorts Application Module Unit
+  
+  syntax
+
+    "section" <SectionName-CF> <LAYOUT?-CF> <Definition*-CF> -> <Section-CF> {cons("Section")}
+
+  context-free syntax
+
+    "application" QId Definition+ Section* -> Application {cons("ApplicationDefs")}
+    "application" QId Section*      -> Application {cons("Application")}
+
+    "description" "{" Word* "}"     -> Description {cons("Description")}
+
+    "note" "{" Word* "}"            -> Description {cons("Note")}
+
+    Description                   -> Definition
+    %%Description                   -> Definition {prefer}
+
+    "module" ModuleName Section*  -> Module {cons("Module")}
+    "module" ModuleName Definition+ Section*  -> Module {cons("ModuleDefs")}
+
+    "imports" ModuleName          -> Definition {cons("Imports")}
+    
+    Application                   -> Unit
+    Module                        -> Unit
+
+exports
+
+  sorts Action Statements Statement Exp
+
+  context-free syntax
+
+    Action		       	        -> Definition
+    Statement*		   	        -> Statements
+    NativeFunctionDeclaration   -> Definition
+    NativeClassDeclaration      -> Definition
+


From L.C.L.Kats at tudelft.nl  Wed Mar  2 15:22:48 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 02 Mar 2011 14:22:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22256 -
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt
Message-ID: <20110302142248.BE7387F801F@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Mar  2 14:22:48 2011
New Revision: 22256
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22256&sc=1

Log:


Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Wed Mar  2 14:01:15 2011	(r22255)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	Wed Mar  2 14:22:48 2011	(r22256)
@@ -354,11 +354,15 @@
 	}
 	
 	public static IContext getContext(Context context) {
-		return ((HybridCompiledContext) context).getContext();
+		return context instanceof HybridCompiledContext
+			? ((HybridCompiledContext) context).getContext()
+			: null;
 	}
 	
 	public static HybridInterpreter getInterpreter(Context context) {
-		return ((HybridCompiledContext) context).getInterpreter();
+		return context instanceof HybridCompiledContext
+			? ((HybridCompiledContext) context).getInterpreter()
+			: null;
 	}
 	
 	/**


From m.dejonge at tudelft.nl  Wed Mar  2 15:50:44 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Mar 2011 14:50:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22257 -
	sglr-recovery/trunk/Evaluate/testsuites
Message-ID: <20110302145044.E6F777F800D@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Mar  2 14:50:44 2011
New Revision: 22257
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22257&sc=1

Log:


Deleted:
   sglr-recovery/trunk/Evaluate/testsuites/


From m.dejonge at tudelft.nl  Wed Mar  2 15:52:30 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Mar 2011 14:52:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22258 - in
	sglr-recovery/trunk/Evaluate/testsuites: . java java-sql
	java-sql/base-files java-sql/error-files
	java-sql/grammars-gen java-sql/results java-sql/results/perfor...
Message-ID: <20110302145230.C790C108C04C@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Mar  2 14:52:30 2011
New Revision: 22258
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22258&sc=1

Log:


Added:
   sglr-recovery/trunk/Evaluate/testsuites/
   sglr-recovery/trunk/Evaluate/testsuites/java/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/results/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/java/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/results/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/results/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/results/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/


From m.dejonge at tudelft.nl  Wed Mar  2 15:56:40 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Mar 2011 14:56:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22259 -
	sglr-recovery/trunk/Evaluate/testsuites
Message-ID: <20110302145640.3736A2B8052@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Mar  2 14:56:39 2011
New Revision: 22259
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22259&sc=1

Log:


Deleted:
   sglr-recovery/trunk/Evaluate/testsuites/


From m.dejonge at tudelft.nl  Wed Mar  2 16:01:32 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Mar 2011 15:01:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22260 -
	sglr-recovery/trunk/Evaluate/testsuite
Message-ID: <20110302150133.00DFE2B8148@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Mar  2 15:01:31 2011
New Revision: 22260
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22260&sc=1

Log:


Added:
   sglr-recovery/trunk/Evaluate/testsuite/


From R.B.Vermaas at tudelft.nl  Wed Mar  2 16:04:03 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 02 Mar 2011 15:04:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22261 - hydra/jobs
Message-ID: <20110302150403.A67F07F81C2@mx1.tudelft.nl>

Author: rob
Date: Wed Mar  2 15:04:03 2011
New Revision: 22261
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22261&sc=1

Log:
add target/classes to classpath of ant builds

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Wed Mar  2 15:01:31 2011	(r22260)
+++ hydra/jobs/spoofax-imp.nix	Wed Mar  2 15:04:03 2011	(r22261)
@@ -172,7 +172,7 @@
                 cp -v org.strategoxt.strj/java/strategoxt.jar $e/utils/
 	            header "Pre-building $e"
 	            cd $e
-                export LOCALCLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar"
+                export LOCALCLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
                 export ANT_OPTS="-Xss8m -Xmx768m"
                  
 	            ant -verbose -f build.main.xml -Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome


From m.dejonge at tudelft.nl  Wed Mar  2 17:56:54 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 02 Mar 2011 16:56:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22262 -
	sglr-recovery/trunk/Evaluate/testsuite
Message-ID: <20110302165654.36FE7CC331@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Mar  2 16:56:53 2011
New Revision: 22262
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22262&sc=1

Log:


Deleted:
   sglr-recovery/trunk/Evaluate/testsuite/


From m.dejonge at tudelft.nl  Thu Mar  3 09:03:55 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 08:03:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22263 - in
	sglr-recovery/trunk/Evaluate: . grammars-completion
	grammars-permissive testsuites testsuites/java
	testsuites/java-sql testsuites/java-sql/base-files testsuites...
Message-ID: <20110303080356.007C87F800B@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 08:03:55 2011
New Revision: 22263
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22263&sc=1

Log:


Added:
   sglr-recovery/trunk/Evaluate/grammars-completion/
   sglr-recovery/trunk/Evaluate/grammars-permissive/
   sglr-recovery/trunk/Evaluate/testsuites/
   sglr-recovery/trunk/Evaluate/testsuites/java/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/results/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/java/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/java/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/java/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/java/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/java/results/
   sglr-recovery/trunk/Evaluate/testsuites/java/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/java/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/results/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-completions/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/results/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-details/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/results/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/results/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/results/quality/
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/grammars-gen/
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/intended-files/
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/results/
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/results/performance/
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/results/quality/
Modified:
   sglr-recovery/trunk/Evaluate/.classpath

Modified: sglr-recovery/trunk/Evaluate/.classpath
==============================================================================
--- sglr-recovery/trunk/Evaluate/.classpath	Wed Mar  2 16:56:53 2011	(r22262)
+++ sglr-recovery/trunk/Evaluate/.classpath	Thu Mar  3 08:03:55 2011	(r22263)
@@ -2,11 +2,11 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.new-terms.jsglr"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.new-terms.terms"/>
-	<classpathentry kind="src" path="/org.bripgen"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr"/>
+	<classpathentry kind="src" path="/org.bripgen"/>
 	<classpathentry kind="lib" path="/org.bripgen/tools/lpg.runtime_2.0.16.jar"/>
-	<classpathentry kind="lib" path="/home/maartje/workspace_error_recovery/EvaluationRecoverAlgorithms/strategoxt.jar"/>
+	<classpathentry kind="lib" path="strategoxt.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>


From m.dejonge at tudelft.nl  Thu Mar  3 09:06:05 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 08:06:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22264 -
	sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files
Message-ID: <20110303080605.3E9387F800B@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 08:06:04 2011
New Revision: 22264
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22264&sc=1

Log:


Added:
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote1.org
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote2.org
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote3.org
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote4.org
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote5.org
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote6.org
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote7.org
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/Quote1.org
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/Quote5.org

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote1.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote1.org	Thu Mar  3 08:06:04 2011	(r22264)
@@ -0,0 +1,66 @@
+public class AntiQuote1 {
+  public static void main(String[] ps) {
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+  }
+
+  public class A { 
+	  public void m() {
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+	  }
+  }
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote2.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote2.org	Thu Mar  3 08:06:04 2011	(r22264)
@@ -0,0 +1,95 @@
+public class AntiQuote2 {
+  public static void main(String[] ps) {
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+  }
+
+  public void m() {
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+
+  }
+
+  public class A {
+	  public void mn() {
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+    SQL o = <| |>;
+    SQL q = <| SELECT z FROM foo ${ o } |>;
+    System.out.println(q.toString());
+
+	  }
+  }
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote3.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote3.org	Thu Mar  3 08:06:04 2011	(r22264)
@@ -0,0 +1,98 @@
+public class AntiQuote3 {
+  public static void main(String[] ps) {
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+  }
+
+  public void m() { 
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+	if (true) {
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+
+	} else {
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+
+	}
+ 
+ }
+
+ public void k() {
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+    SQL w = <| WHERE x = y |>;
+    SQL q = <| SELECT z FROM foo WHERE ${w}  = a |>;
+    System.out.println(q.toString());
+
+ }
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote4.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote4.org	Thu Mar  3 08:06:04 2011	(r22264)
@@ -0,0 +1,85 @@
+public class AntiQuote4 {
+  public static void main(String[] ps) { 
+    String s = "blaat";
+
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+  }
+
+  public void l() {
+    String s = "blaat";
+
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+    stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+
+
+
+
+
+
+  }
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote5.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote5.org	Thu Mar  3 08:06:04 2011	(r22264)
@@ -0,0 +1,96 @@
+public class AntiQuote5 {
+  public static void main(String[] ps) {
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+  }
+
+  public void m() {
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+
+  }
+
+  public void a() {
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>; 
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+
+  }
+
+  void b() {
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+	if (true) {
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+	} else {
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+
+	}
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+
+  }
+
+  void c() {
+	      String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    String s = "'; DROP TABLE Users; --";
+    SQL e = <| username = ${s} |>;
+    SQL q = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+
+  }
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote6.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote6.org	Thu Mar  3 08:06:04 2011	(r22264)
@@ -0,0 +1,97 @@
+public class AntiQuote6 {
+  public static void main(String[] ps) {
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+  }
+
+  public void m() { 
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+
+  }
+
+  public void n() {
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+	if (true) {
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+	if (true) {
+		SQL e1 = <| username = 'bravo' |>;
+    	SQL e  = <| ${e1} |>;
+    	SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    	System.out.println(q.toString());
+	} else {
+    	SQL e1 = <| username = 'bravo' |>;
+    	SQL e  = <| ${e1} |>;
+    	SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    	System.out.println(q.toString());
+	}
+	}
+	    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+
+  }
+
+  public void h() {
+	  	    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+    SQL e1 = <| username = 'bravo' |>;
+    SQL e  = <| ${e1} |>;
+    SQL q  = <| SELECT password FROM Users WHERE ${e} |>;
+    System.out.println(q.toString());
+
+  }
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote7.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/AntiQuote7.org	Thu Mar  3 08:06:04 2011	(r22264)
@@ -0,0 +1,117 @@
+public class AntiQuote7 {
+  public static void main(String[] ps) {
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+  }
+
+  public void p() {  
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+  }
+
+  void k() {
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+	  for (int i =0; i < 100; i++) {
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+		if (true) {
+     String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+         String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+		} else {
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+		}
+	  }
+
+    String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+  }
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/Quote1.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/Quote1.org	Thu Mar  3 08:06:04 2011	(r22264)
@@ -0,0 +1,103 @@
+public class Quote1 {
+  public static void main(String[] ps) {
+    Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+  }
+
+  void p() {
+                String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+   String s = "bla\nat";
+    SQL stm = <| SELECT password FROM Users WHERE name = ${s} |>;
+    System.out.println(stm.toString());
+
+  }
+
+
+  void h() {
+    Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+                      
+	Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+   Object o = <| SELECT x FROM y |>;
+    System.out.println(o.toString());
+
+  }
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/Quote5.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/java-sql/base-files/Quote5.org	Thu Mar  3 08:06:04 2011	(r22264)
@@ -0,0 +1,78 @@
+public class Quote5 {
+  public static void main(String[] ps) {
+    SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+  }
+ 
+  private class A {
+	  public A() {
+    SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+          SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+
+	  }
+
+	  public void a () {
+    SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+             SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+
+	  }
+  }
+
+  public g() {
+             SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+   SQL e = <| SELECT password FROM Users WHERE username = 'bravo' |>;
+    System.out.println(e.toString());
+
+  }
+}


From R.B.Vermaas at tudelft.nl  Thu Mar  3 09:07:03 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 08:07:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22265 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110303080703.2CB0B7F800B@mx1.tudelft.nl>

Author: rob
Date: Thu Mar  3 08:07:02 2011
New Revision: 22265
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22265&sc=1

Log:
first try on running tests from ant

Modified:
   strategoxt/branches/strategoxt-java/build.xml
   strategoxt/branches/strategoxt-java/strategoxt.xml

Modified: strategoxt/branches/strategoxt-java/build.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/build.xml	Thu Mar  3 08:06:04 2011	(r22264)
+++ strategoxt/branches/strategoxt-java/build.xml	Thu Mar  3 08:07:02 2011	(r22265)
@@ -20,12 +20,19 @@
         depends="ensure-dirs,syntax,parse-hack,generate-java,compile-java,jar"
     />
 
-    <target name="test">
-        <sdf2generated base="${syntaxstr}/Stratego" main="Stratego">
-            <deps>
-                <srcfiles dir="${syntaxstr}" includes="**/*.sdf" />
-            </deps>
-        </sdf2generated>
+    <target name="test" depends="tests">
+    </target>
+
+    <target name="tests">
+        <for param="strfile" keepgoing="true">
+            <path>
+                <fileset dir="libraries" includes="*/tests/*.str" />
+                <fileset dir="java-front" includes="java-front/test/*.str" />
+            </path>
+            <sequential>
+                <strj-test input="@{strfile}" />
+            </sequential>
+        </for>
     </target>
 
     <target name="parse-hack">

Modified: strategoxt/branches/strategoxt-java/strategoxt.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/strategoxt.xml	Thu Mar  3 08:06:04 2011	(r22264)
+++ strategoxt/branches/strategoxt-java/strategoxt.xml	Thu Mar  3 08:07:02 2011	(r22265)
@@ -6,6 +6,60 @@
     <property name="sdf" value=""/>
     <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
 
+    <macrodef name="strj-test">
+        <attribute name="input" />
+        <sequential>
+            <log message="Testing @{input}" />
+            <dirname file="@{input}" property="@{input}.dirname" />
+            <basename file="@{input}" property="@{input}.basename" suffix=".str" />
+            <mkdir dir="${@{input}.dirname}/${@{input}.basename}/test" />
+            <strj-for-test input="@{input}" output="${@{input}.dirname}/${@{input}.basename}/test/Main.java" package="test">
+                <strjargs>
+                    <arg value="-m" />
+                    <arg value="main-${@{input}.basename}" />
+                    <arg value="-la" />
+                    <arg value="stratego-lib" />
+                    <arg value="-la" />
+                    <arg value="stratego-gpp" />
+                    <arg value="-la" />
+                    <arg value="stratego-xtc" />
+                    <arg value="-la" />
+                    <arg value="stratego-aterm" />
+                    <arg value="-la" />
+                    <arg value="stratego-rtg" />
+                    <arg value="-la" />
+                    <arg value="stratego-sglr" />
+                    <arg value="-la" />
+                    <arg value="java-front" />
+                    <arg value="-I" />
+                    <arg value="${syntaxaterm}" />
+                    <arg value="-I" />
+                    <arg value="${syntaxbox}" />
+                </strjargs>
+                <str-deps>
+                    <srcfiles dir="." includes="*.jar" />
+                </str-deps>
+            </strj-for-test>
+            <javac srcdir="${@{input}.dirname}/${@{input}.basename}"
+                           destdir="${@{input}.dirname}/${@{input}.basename}"
+                           classpath="./strategoxt.jar"
+                           source="1.5"
+                           target="1.5"
+                           nowarn="on"
+                           fork="true"
+                           debug="true"
+                           debuglevel="source"
+                           compiler="classic"
+                    />
+             <java fork="true" classname="test.Main" failonerror="true">
+                 <classpath>
+                    <pathelement location="./strategoxt.jar"/>
+                    <pathelement path="${@{input}.dirname}/${@{input}.basename}"/>
+                 </classpath>
+             </java>
+        </sequential>
+    </macrodef>
+
     <macrodef name="log">
         <attribute name="message" />
         <sequential>
@@ -286,6 +340,37 @@
         </sequential>
     </macrodef>
 
+    <macrodef name="strj-for-test">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="package" />
+        <element name="strjargs" optional="true" />
+        <element name="str-deps" optional="true" />
+        <sequential>
+            <uptodate-mio input="@{input}" output="@{output}" type="strj">
+                <action>
+                    <java classname="org.strategoxt.strj.Main" failonerror="true" classpath="./strategoxt.jar" fork="true">
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                        <arg value="-p"/>
+                        <arg value="@{package}"/>
+                        <arg value="-D"/>
+                        <arg value="VERSION_TERM=&quot;${version}&quot;"/>
+                        <arg value="-D"/>
+                        <arg value="SVN_REVISION_TERM=&quot;${revision}&quot;"/>
+                        <strjargs />
+                    </java>
+                </action>
+                <deps>
+                    <str-deps />
+                </deps>
+            </uptodate-mio>
+        </sequential>
+    </macrodef>
+
+
     <macrodef name="strj">
         <attribute name="input" />
         <attribute name="output" />
@@ -293,7 +378,7 @@
         <element name="strjargs" optional="true" />
         <element name="str-deps" optional="true" />
         <sequential>
-            <uptodate-mio input="@{input}" output="@{output}" type="strj-lib">
+            <uptodate-mio input="@{input}" output="@{output}" type="strj">
                 <action>
                     <java classname="org.strategoxt.strj.Main" failonerror="true">
                         <arg value="-i"/>


From m.dejonge at tudelft.nl  Thu Mar  3 09:09:08 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 08:09:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22266 - in
	sglr-recovery/trunk/Evaluate/testsuites:
	java-sql/grammars-gen stratego-java/base-files
	stratego-java/grammars-gen webdsl/base-files webdsl/grammars-gen
Message-ID: <20110303080908.7BCD9108C045@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 08:09:08 2011
New Revision: 22266
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22266&sc=1

Log:


Added:
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/grammars-gen/Java-SQL-Tokenizer.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/grammars-gen/Java-SQL-WC.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/java-sql/grammars-gen/Java-SQL.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/create-parse-controller.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/example_swjx.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/example_webdsl.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/test-java-traits.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/grammars-gen/StrategoJava-Tokenizer.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/grammars-gen/StrategoJava-WC.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java/grammars-gen/StrategoJava.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/ac.org
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/membership.org
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/project.org
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/register.org
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/roadmap.org
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/grammars-gen/WebDSL-Tokenizer.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/grammars-gen/WebDSL-WC.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/grammars-gen/WebDSL.tbl   (contents, props changed)

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/grammars-gen/Java-SQL-Tokenizer.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/grammars-gen/Java-SQL-WC.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/java-sql/grammars-gen/Java-SQL.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/create-parse-controller.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/create-parse-controller.sj	Thu Mar  3 08:09:08 2011	(r22266)
@@ -0,0 +1,100 @@
+module sdf2imp/project/create-parse-controller
+
+imports
+  libstratego-lib
+  libstratego-xtc
+  sdf-options
+  
+  sdf2imp/lib/RTG
+    
+  sdf2imp/util/-
+
+strategies
+  
+  get-parse-controller-name =
+    <conc-strings> (<get-main-class-name>, "ParseController")
+
+  create-parse-controller =
+    x_name  := <get-parse-controller-name>;
+    pkgname := <get-package-name>;
+    table   := <get-sdf-main-module>;
+    
+    <output-java-file> |[
+      package pkgname;
+
+      import java.io.InputStream;
+      import java.io.IOException;
+      import org.eclipse.imp.parser.IParseController;
+      import org.strategoxt.imp.runtime.Environment;
+      import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+      import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+      import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+      import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+      
+      public class x_name extends DynamicParseController {
+        private static final String LANGUAGE = "~table";
+
+        private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+        private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+        
+        private static Descriptor descriptor;
+        
+        private static Throwable notLoadingCause;
+        
+        public static Descriptor getDescriptor() {
+          if (notLoadingCause != null)
+            throw new RuntimeException(notLoadingCause); // unexpected exception
+          if (descriptor == null)
+            createDescriptor();
+          
+          return descriptor;
+        }
+        
+        private static void createDescriptor() {
+            try {
+              InputStream descriptorStream = x_name.class.getResourceAsStream(DESCRIPTOR);
+              InputStream table = x_name.class.getResourceAsStream(TABLE);
+
+              if (descriptorStream == null)
+                throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin)");
+
+              if (table == null)
+                throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin)");
+
+              descriptor = DescriptorFactory.load(descriptorStream, table, null);
+              
+            } catch (BadDescriptorException exc) {
+              notLoadingCause = exc;
+              Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+              throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+              
+            } catch (IOException exc) {
+              notLoadingCause = exc;
+              Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+              throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+            }
+        }
+        
+        @Override
+        public IParseController getWrapped() {
+          if (!isInitialized()) {
+            if (notLoadingCause != null) throw new RuntimeException(notLoadingCause);
+            try {
+              initialize(getDescriptor().getLanguage());
+            } catch (BadDescriptorException exc) {
+              notLoadingCause = exc;
+              throw new RuntimeException(exc);
+            }
+          }
+          
+          return super.getWrapped();
+        }
+        
+        @Override
+        protected void setNotLoadingCause(Throwable value) {
+          notLoadingCause = value;
+          super.setNotLoadingCause(value);
+        }
+      }
+    ]|

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/example_swjx.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/example_swjx.sj	Thu Mar  3 08:09:08 2011	(r22266)
@@ -0,0 +1,232 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+  handle-ref-arg =
+    zip(create-assigns-for-ref-arg-helper <+ ?(_,<expression-to-java-servlet>)) //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name : 
+    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl)
+    with  if x_tclass := <ThisTemplateClassName> 
+          then e_this := java:expr|[ x_tclass.this ]| //avoid `this` issue when call occurs in an inner class, e.g. used for actions
+          else e_this := java:expr|[ this ]| end
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) := a
+    
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/example_webdsl.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/example_webdsl.sj	Thu Mar  3 08:09:08 2011	(r22266)
@@ -0,0 +1,437 @@
+module org/webdsl/dsl/to-java-servlet/control-flow-to-java-servlet
+
+imports
+  libstratego-lib
+  libjava-front
+
+imports
+  libwebdsl-front
+  libback-end-transformations
+  libstratego-lib
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/template-render
+  org/webdsl/dsl/to-java-servlet/template-ref-arguments
+  org/webdsl/dsl/to-java-servlet/uicomponents/attributes
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+    
+// control flow page elements   : for, if, templatecall 
+
+rules // iteration
+
+  for-loop-counter-wrap-code:
+    bstm* -> result
+    with  if <?[]> bstm* 
+          then result :=  []
+          else result :=  bstm*|[
+                            ident = "";
+                            if(inForLoop) {
+                              ident += forelementcounter;
+                            }
+                            bstm*
+                          ]| end
+                        
+  //wraps expression that starts with ident                        
+  for-loop-counter-wrap-code-expr:
+    e1 -> e |[((inForLoop?forelementcounter:"") + e1 ) ]|
+                            
+    
+  wrap-in-for-loop(|x,t,e) :
+    bstm -> res
+    with  x_i := <newname> "i"
+        ; res := <wrap-in-for-loop(|x_i,x,t,e)> bstm
+  
+  wrap-in-for-loop(|x_i,x,t,e) :
+    bstm ->
+    bstm* |[
+      for(int x_i = 0; x_i < x_array.length; x_i++)
+      { 
+        bstm*
+      }
+    ]|
+    with  x_array := <newname> "array"
+        ; x_argtype := <pp-java5-to-string> t
+        ; if <is-list> bstm
+          then bstm* := bstm
+          else bstm* := [bstm] end
+
+  handle-actions-input-to-java-servlet  =
+    control-flow-for(collect-om(handle-actions-input-to-java-servlet)|)
+
+  handle-actions-to-java-servlet =
+    control-flow-for(collect-om(handle-actions-to-java-servlet)|)
+
+  elem-to-java-servlet =
+    control-flow-for(elems-to-java-servlet|)
+    
+  data-validation-to-java-servlet  =
+    control-flow-for(collect-om(data-validation-to-java-servlet)|)
+
+  control-flow-for(s|) :
+     ForCount(x, e1, e2, elems, sep) -> result
+     with  x_bound := <newname> "stop"
+         ; e3 := <expression-to-java-servlet> e1
+         ; e4 := <expression-to-java-servlet> e2
+         ; bstm* := <s;concat-with-sublists> elems
+         ; x_separatorindex := <newname> "separatorindex"
+         ; x_delta := <newname> "delta"
+         ; if <?[]> bstm* 
+           then result :=  []
+           else result :=  bstm*|[
+                             inForLoop = true;
+                             forLoopCounter++;
+                             int x = e3; //x has been renamed already
+                             int x_bound = e4;
+                             int x_separatorindex = 0;
+                             int x_delta = (x < x_bound? 1 : -1);
+                             while(x != x_bound) {
+                               forelementcounter = Integer.toString(++fallbackcounter);
+                               ~*<control-flow-for-separator(s|sep, x_separatorindex)> bstm*|[                                
+                                 bstm*
+                               ]|
+                               x += x_delta;
+                             }
+                             forLoopCounter--;
+                             if(forLoopCounter == 0){
+                               inForLoop = false;
+                               forelementcounter = "0";
+                               fallbackcounter = 0;
+                             }
+                           ]| end
+
+  control-flow-for(s|) :
+    For(x, srt, e1, fltr, elems, sep) -> result
+    with  bstm* := <s;concat-with-sublists> elems
+        ; e2 := <expression-to-java-servlet> e1
+        ; t := <java-type> srt
+        ; x_list := <newname> "list"
+        ; GenericSort(x_setorlist,[_]) := <get-type-anno> e1
+        ; if <?[]> bstm*
+          then result :=  [] 
+          else result :=  bstm* |[
+                            java.util.ArrayList<t> x_list = new java.util.ArrayList<t>(e2);
+                            ~*<control-flow-for-common(s | x_list, x, srt, t, fltr, sep)> bstm* |[    
+                              bstm*
+                            ]|
+                          ]| end
+              
+  control-flow-for(s|) :
+    fa at ForAll(x, srt, fltr, elems, sep) -> result
+    with  bstm*   := <s;concat-with-sublists> elems
+        ; t       := <java-type> srt
+        ; x_list := <newname> "list"
+        ; e_criteria := <hibernate-forall-criteria> (fa, t, x, srt, fltr)
+        ; if <?[]> bstm*
+          then result :=  [] 
+          else result :=  bstm* |[ 
+                            java.util.List<t> x_list = e_criteria.list();
+                            ~*<control-flow-for-common(s | x_list, x, srt, t, fltr, sep)> bstm*|[
+                              bstm*
+                            ]|
+                          ]| end
+        
+  control-flow-for-common(s | x_list, x, srt, t, fltr, sep) :
+    bstm* ->
+    bstm* |[
+      inForLoop = true;
+      forLoopCounter++;
+      bstm_order*
+      int x_separatorindex = 0;
+      ~*<  control-flow-for-separator(s|sep, x_separatorindex)
+         ; wrap-in-for-loop(|x,t,expr|[ x_list ]|)>
+      bstm* |[         
+        if(WebDSLEntity.class.isInstance(x)) {
+           WebDSLEntity x_ent = ((WebDSLEntity) ((Object) x));
+           forelementcounter = (x_ent.getVersion() == 0 
+             ? Integer.toString(fallbackcounter) 
+             : x_ent.getId().toString());
+        }
+        else
+          forelementcounter = Integer.toString(fallbackcounter);
+        bstm*
+      ]|
+      forLoopCounter--;
+      if(forLoopCounter == 0){
+        inForLoop = false;
+        forelementcounter = "0";
+        fallbackcounter = 0;
+      }
+    ]|
+    with  bstm_order* := <for-filter-by-code(|x, srt, t, x_list)> fltr
+        ; x_separatorindex := <newname> "separatorindex"
+        ; x_ent := <newname> "temp"
+                          
+  control-flow-for-separator(s|sep, x_separatorindex) :
+    bstm* -> bstm*
+    where None() := sep
+    
+  control-flow-for-separator(s|sep, x_separatorindex) :
+    bstm* -> result
+    where ForSeparator(elems) := sep
+    with  bstm2* := <s;concat-with-sublists> elems
+        ; if <?[]> bstm*
+          then result :=  [] 
+          else result :=  bstm* |[
+                              if(x_separatorindex > 0) {
+                                bstm2* // place separator if there was an element before this one
+                              }
+                              x_separatorindex++;
+                          ]| end
+
+rules // if
+
+  handle-actions-input-to-java-servlet  =
+    control-flow-if(collect-om(handle-actions-input-to-java-servlet)|)
+
+  handle-actions-to-java-servlet =
+    control-flow-if(collect-om(handle-actions-to-java-servlet)|)
+
+  elem-to-java-servlet =
+    control-flow-if(elems-to-java-servlet|)
+    
+  data-validation-to-java-servlet =
+    control-flow-if(collect-om(data-validation-to-java-servlet)|)
+
+  control-flow-if(s|) :
+    IfTempl(e, elems, elems2) -> result
+    with  bstm* := <s;concat-with-sublists> elems
+        ; bstm2* := <s;concat-with-sublists> elems2
+        ; e1 := <expression-to-java-servlet> e
+        ; if <?([],[])> (bstm*,bstm2*)
+          then result :=  [] 
+          else result :=  bstm |[
+                            if(e1){ 
+                              bstm*
+                            } else {
+                              bstm2*
+                            }
+                          ]| end
+
+rules //templatecall    
+
+  handle-actions-input-to-java-servlet  =
+    control-flow-tcall(|"storeInputs")
+
+  handle-actions-to-java-servlet =
+    control-flow-tcall(|"handleActions")
+
+  elem-to-java-servlet =
+    control-flow-tcall(|"render")
+    
+  data-validation-to-java-servlet =
+    control-flow-tcall(|"validateInputs")
+
+  control-flow-tcall(|x_methodname) :
+    tc at TemplateCall(x_name, args, passign*, _) -> bstm* 
+    where <get-anno(?CallToDefinedAnno())> tc
+    with  bstm* := <control-flow-tcall-helper(|x_methodname)> tc
+    
+  template-call-to-java-string: 
+    (x_name,args) -> java:expr|[ "~x_name"+"("+"~arg_dump"+")" ]|
+    with  arg_dump := <alltd(get-original-name);map(pp-webdsl-to-string);separate-by(|", ");concat-strings;explode-string;escape-chars;implode-string> args  
+    
+  control-flow-tcall-helper(|x_methodname) :
+    tc at TemplateCall(x_name, args, passign*, _){anno*} -> bstm* |[  bstm_result* ]|
+    with  x_tname := <get-templatecallnumber> tc
+        ; e_tc := <template-call-to-java-string> (x_name,args)
+        ; bstm_npe* :=
+            bstm*|[
+              System.out.println("WebDSL warning: null reference in template arguments: "+e_tc); // TODO proper location information; some way to disable these warnings
+              npe.printStackTrace(); // display java exception for now so it can be traced back to the template
+            ]|
+        // implicit template argument
+        ; if <fetch(?TemplateCall(templname,vars,_,_){anno_elementscall*})> passign*
+          then //translate (ref) args of 'elements' call
+               elementscalledTemplateArgs := <fetch-elem(?CalledTemplateArgs(<id>))> anno_elementscall*
+             ; e_templ* := <handle-ref-arg> (elementscalledTemplateArgs, vars)
+          else //no 'elements' call, templatecall did not contain a block with template elements
+               templname := "none"; e_templ* := [] end
+        ; x_templargs := <newname> "args"
+        //templatecall with 'with' arguments, if with, the template argument is the templateArg of this template. With is desugared away, so test the number of statements
+        ; withcallsmap := <control-flow-emit-with-calls-map> passign* 
+        ; if 1 := <length> withcallsmap 
+          then e_templarg := expr|[new utils.TemplateCall("~templname", x_templargs) ]|
+          else e_templarg := expr|[ this.templateArg ]| end
+        ; attrsmap := <control-flow-emit-attrs-calls-map(|x_methodname)> passign* 
+        // translate (ref) args
+        ; calledTemplateArgs := <fetch-elem(?CalledTemplateArgs(<id>))> anno*
+        ; e_argswithref* := <handle-ref-arg> (calledTemplateArgs, args)
+        // create template call
+        ; bstm_result* := <generate-template-call(|x_methodname)> (
+            expr|["~x_name"]|, 
+            expr|["~x_tname"]|, 
+            var-init|[ { e_argswithref* } ]|, 
+            e_templarg,
+            var-init|[ { e_templ* } ]|, 
+            bstm_npe*, 
+            withcallsmap, 
+            attrsmap,
+            x_templargs
+            )
+     
+  /**
+   *  'TemplateCall' for element in with { } arguments (derived from ArgDef constructor), 
+   *  stored in TemplateCall with only part of the needed arguments, the closure at the call
+   */
+  
+  control-flow-emit-with-calls-map : //optimization when withcallsmap is empty
+  passign* -> bstm_1* 
+  with
+      bstm* := <collect(control-flow-emit-with-calls);concat> passign*
+    ; if (0 := <length> bstm*) then
+      bstm_1* := <control-flow-emit-with-calls-map-def>
+      else 
+      bstm_1* := bstm* |[
+          withcallsmapout = new HashMap<String, utils.TemplateCall>();
+          withcallsmapout.putAll(withcallsmap);
+          bstm*
+      ]|
+      end
+
+  control-flow-emit-with-calls-map-def =
+    !bstm* |[ withcallsmapout = withcallsmap; ]|
+      
+  control-flow-emit-with-calls :
+//   TemplateCall(templname,vars,passigns,_) -> bstm* |[ Object[] x_array = { e_templ* }; withcallsmapout.put("~origname", new utils.TemplateCall("~templname", x_array)); ]|
+   TemplateCall(templname,vars,passigns,_) -> bstm* |[ withcallsmapout.put("~origname", new utils.TemplateCall("~templname", new Object[] { e_templ* } )); ]|
+   where <fetch(?ResolvedRequireKey(origname))> passigns //also matches on elements calls
+   with e_templ* := <map({\e -> <expression-to-java-servlet> e\})> vars
+   //      ; origname := <get-original-name>  templname
+//      ; x_array := <newname> "array"
+   
+  /**
+   * e_name : unique template name for lookup in hashmaps - Java String
+   * e_tname : static template call number - Java String
+   * e : regular template arguments - Java Object[]
+   * e_templarg : if the templatecall has elements, this is a utils.TemplateCall object that points to the lifted template definition, if it has 'with' arguments it is 'this.templateArg' @TODO split elements and with arguments stuff
+   * e_templ : 'elements' template arguments - Java Object[]
+   * bstm_npe* : null pointer exception handling statements - Java bstm*
+   * bstm_withcallsmap* : 'with' arguments, references to lifted templates - Java bstm*
+   * bstm_attrs* : attributes, arguments between [] - Java bstm*
+   * x_templargs : name of 'elements' call arguments collection - Java ID
+   */    
+  generate-template-call(|x_methodname):
+    (e_name, e_tname, e, e_templarg, e_templ, bstm_npe*, bstm_withcallsmap*, bstm_attrs*,x_templargs) ->
+    <for-loop-counter-wrap-code> 
+    bstm* |[
+      ident += e_tname;
+      ThreadLocalPage.get().enterTemplateContext(e_tname);
+      try{
+        Object[] x_args = e;
+        //add extra arg for local redefinitions, if any
+        utils.LocalTemplateArguments x_argsextra = env.getExtraLocalTemplateArguments(e_name);
+        if(x_argsextra != null){
+          x_args = ArrayUtils.addAll(x_args,x_argsextra.extraArgs);
+        }
+        Object[] x_templargs = e_templ;
+        if(templatecalls.get(ident)==null){
+          templatecalls.put(ident,(TemplateServlet)env.getTemplate(e_name).newInstance());
+        }
+        try {
+          bstm_withcallsmap*
+          bstm_attrs*
+          ~*<![];try(<?"handleActions"> x_methodname;!bstm*|[
+            if (ThreadLocalPage.get().hasExecutedAction)
+              return;
+          ]|)>
+        }
+        catch(NullPointerException npe) {
+          bstm_npe*
+        }
+      }
+      catch(IllegalAccessException iae)
+      {
+        System.out.println("Problem in template servlet template lookup: "+iae.getMessage());
+      }
+      catch(InstantiationException ie)
+      {
+        System.out.println("Problem in template servlet template lookup: "+ie.getMessage());
+      }
+      catch(NullPointerException npe) {
+        System.out.println("Problem in template lookup for "+e_name+": "+npe.getMessage());
+        npe.printStackTrace();
+      }
+      ident = "";
+      ThreadLocalPage.get().leaveTemplateContextChecked(e_tname);
+    ]|
+    with  x_args := <newname> "args"
+        ; x_argsextra := <newname> "args2"
+      
+rules //elements
+
+  handle-actions-input-to-java-servlet  =
+    control-flow-elemcall(|"storeInputs")
+
+  handle-actions-to-java-servlet =
+    control-flow-elemcall(|"handleActions")
+
+  elem-to-java-servlet =
+    control-flow-elemcall(|"render")
+    
+  data-validation-to-java-servlet =
+    control-flow-elemcall(|"validateInputs")
+
+  control-flow-elemcall(|x_methodname) :
+    tc at TemplateCall("elements", _, _, _) -> result 
+    with  bstm_npe* := bstm*|[ System.out.println("WebDSL warning: null reference in environment of 'elements' call"); ]|
+//        ; x_tname := <get-templatecallnumber> tc
+        ; x_templargs := <newname> "args"
+        ; result := <generate-template-call(|x_methodname)> 
+            (expr|[ templateArg.name ]|, 
+             expr|["elements"]|, 
+             expr|[ templateArg.args ]|, 
+             expr|[new utils.TemplateCall("none", x_templargs) ]|, 
+             var-init|[ {} ]|, 
+             bstm_npe*, 
+             <control-flow-emit-with-calls-map-def>,
+             <control-flow-emit-attrs-calls-map-def>,
+             x_templargs)
+
+
+/**
+ *  Call to template passed as part of required templates
+ *  Since the passed TemplateCall object only has the first part of the arguments, it is concatted with the 
+ *  actual arguments of the required template definition
+ *
+ */
+rules //with element calls 
+
+  handle-actions-input-to-java-servlet  =
+    control-flow-elemwithcall(|"storeInputs")
+
+  handle-actions-to-java-servlet =
+    control-flow-elemwithcall(|"handleActions")
+
+  elem-to-java-servlet =
+    control-flow-elemwithcall(|"render")
+    
+  data-validation-to-java-servlet =
+    control-flow-elemwithcall(|"validateInputs")
+
+  control-flow-elemwithcall(|x_methodname) :
+  tc at TemplateCall(x,args,passigns,_) -> bstm* |[ bstm_result* ]|
+  where <get-anno(?CallToRequiredAnno())> tc 
+  with  e_tc := <template-call-to-java-string> (x,args)
+        ; bstm_npe* :=
+            <![];if-debug(!bstm*|[
+              System.out.println("WebDSL warning: null reference in environment of 'with' clause of call: "+e_tc);
+              npe.printStackTrace(); // display java exception for now so it can be traced back to the template
+            ]|)>
+        ; x_tname := <get-templatecallnumber> tc
+        ; e_origargs* := <map(expression-to-java-servlet)> args
+        ; originalname := <get-original-name> x
+        ; attrsmap := <control-flow-emit-attrs-calls-map(|x_methodname)> passigns 
+        ; x_templargs := <newname> "args"
+//        ; e_origargs := var-init |[ { e_origargs* } ]|
+        ; bstm_result* := <generate-template-call(|x_methodname)> 
+            (expr|[ withcallsmap.get("~originalname").name ]|, 
+             expr|["~x_tname"]|, 
+             expr|[ Utils.concatArrays(new Object[] { e_origargs* } ,withcallsmap.get("~originalname").args) ]|, 
+             //expr|["none"]|, 
+             expr|[ this.templateArg ]|,
+             var-init|[ {} ]|, 
+             bstm_npe*,
+             <control-flow-emit-with-calls-map-def>,
+             attrsmap,
+             x_templargs)

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/test-java-traits.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java/base-files/test-java-traits.sj	Thu Mar  3 08:09:08 2011	(r22266)
@@ -0,0 +1,122 @@
+module test-java-traits
+
+imports
+  libstratego-lib
+  libdryad-compiler
+  java-traits
+
+strategies
+
+  main-test-java-traits =
+    option-wrap(
+      fail-fast-option + test-only-option + general-options
+    , test-suite(
+        !"Java trait tests"
+      , 
+        testsuite-section(java-trait-tests   |"Rewrite to Java");
+        testsuite-section(trait-output-tests |"Rewrite to classes");
+        testsuite-section(class-trait-tests  |"Traits from classfiles");
+        testsuite-section(trait-error-tests  |"Error reporting")
+      )
+    )
+
+  test-traits(input, output) =
+    do-test(
+      input
+    , assimilate-java-traits; strip-annos
+    , input
+    , output
+    )
+  
+  /** Unit test: retrieve al error messages; compare. */
+  test-catch-error(input, output) =
+    do-test(
+      input
+    , catch-error
+    , input
+    , output
+    )
+
+  catch-error =
+    let provide-error(catch) =
+      scoped-set-config(!Stage(), !0,
+        assimilate-java-traits
+      );
+      
+      try(dryad-compiler(
+        ?DryadError(_, _); catch; fail // catch & abort at error
+      ))
+    in
+      collect-argument-invokes(provide-error)
+    end
+  
+/** Unit tests. */
+strategies
+
+  java-trait-tests = where(<set-config> (Stage(), 1));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void bar() {} }
+         abstract class $Trait_Bar { void bar() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 { void baz() {} }
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar minus Baz {} trait Bar with Baz {} trait Baz { void baz() {} }"
+    , !compilation-unit |[ 
+         class Foo                 {}
+         abstract class $Trait_Bar { void baz() {} }
+         abstract class $Trait_Baz { void baz() {} }
+	   ]|
+	);
+    test-traits(
+      !"class Foo with Bar { void required() {} } trait Bar { void required(); }"
+    , !compilation-unit |[ 
+         class Foo                 { void required() {} ~Semicolon }
+         abstract class $Trait_Bar { void required(); }
+	   ]|
+	)
+  
+  trait-output-tests = where(<set-config> (Stage(), 4));
+    test-traits(
+      !"class Foo with Bar {} trait Bar { void bar() {} }"
+    , ![FILE("Foo.class"),FILE("$Trait_Bar.class")]
+    )
+  
+  class-trait-tests =
+    where(
+      <set-config> (Stage(), 4);
+      <assimilate-java-traits> "trait Bar { void bar() {} }"; // write Bar classfile
+      <set-config> (Stage(), 1)
+    );
+    test-traits(
+      !["class Foo with Bar {}", FILE("$Trait_Bar.class")]
+    , ?[ compilation-unit |[ 
+           class Foo { void bar() {} }
+	     ]|
+	   , _ // bar
+	   ]
+    )
+
+  trait-error-tests =
+    test-catch-error(
+      !"class Foo with Undeclared {}"
+    , ?[DryadError("Unable to evaluate trait expression",[With("Undeclared")])]
+    );
+    test-catch-error(
+      !"class Foo with Bar {} trait Bar { void required(); }"
+    , ?[DryadError("Missing required method", _)]
+    );
+    test-catch-error(
+      !"trait Loop1 with Loop2 {} trait Loop2 with Loop1 {}"
+    , ?[DryadError("Circular reference from trait","Loop2")
+       ,DryadError("Circular reference from trait","Loop1")]
+    )

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java/grammars-gen/StrategoJava-Tokenizer.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java/grammars-gen/StrategoJava-WC.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java/grammars-gen/StrategoJava.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/ac.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/ac.org	Thu Mar  3 08:09:08 2011	(r22266)
@@ -0,0 +1,100 @@
+module project/ac
+
+imports tag/release
+
+access control rules
+	
+	predicate mayAccess(p : Project){
+		( !p.private ) || 
+		securityContext.principal in p.members
+	}
+	
+	rule page project(p : Project) {	
+		mayAccess(p)
+	}
+		
+	rule page edit(p : Project) {
+		principal in p.members
+		rule action save() {
+			principal in p.members
+		}
+		rule action leaveProject(p : Project) {
+			principal in p.members &&
+			p.members.length > 1
+		}
+		rule action regenerateIssueTypes(p : Project) {
+			principal in p.members
+		}
+	}
+	
+	rule page registerProject() {
+		loggedIn
+	}
+	
+	rule page projectIssues(p : Project, filterOpen : Bool) {
+		mayAccess(p)
+	}
+	
+	rule page projectUnAssignedIssues(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule template projects(ps : List<Project>) {
+		mayAccess(ps)
+	}
+	
+	rule page projectList() {
+		true
+	}
+	
+	rule template projectMembershipRequests(p : Project) {
+		principal in p.members && 
+		p.memberRequests.length > 0
+	}
+	
+	rule template projectSideBar(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page projectStats(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page roadmap(p : Project) {
+		mayAccess(p) &&
+		(	from Tag as t
+			left join t.tags as ts
+			where t._project=~p and ts._name=~"release"
+			limit 1
+		).length > 0
+	}
+	
+/*	rule template roadmapReleaseLink(release : Tag) {
+		true
+		rule action unFoldRelease(release : Tag) {
+			true
+		}
+	}
+*/	
+	rule ajaxtemplate roadmapRelease(r : Tag) {
+		mayAccess(r.project) && r.isRelease()
+		rule action postponeOpen(release : Tag) {
+			principal in release.project.members && 
+			release.isRelease() && 
+			!releaseDone(release) &&
+			nextRelease(release) != null
+		}
+		rule action showPreviousRelease(release : Tag) {
+			mayAccess(r.project) && r.isRelease()
+		}
+	}
+	
+	rule template projectCommands(p : Project) {
+		mayAccess(p)
+		
+		rule action requestJoinProject(p : Project) {
+			loggedIn && 
+			!(principal in p.members) &&
+			!(principal in p.memberRequests)
+		}
+	}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/membership.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/membership.org	Thu Mar  3 08:09:08 2011	(r22266)
@@ -0,0 +1,24 @@
+module project/membership
+
+define template projectMembershipRequests(p : Project) {
+	par { <h2>"Membership Requests"</h2>	}
+	for(r : User in p.memberRequests order by r.name) {
+		par { 
+			navigate(user(r.tag)){output(r.name)}
+			" - "
+			actionLink("Accept", acceptMembershipRequest(r, p))
+			" - "
+			actionLink("Decline", declineMembershipRequest(r, p))
+		}
+	}
+	action acceptMembershipRequest(u : User, p : Project) {
+		p.members.add(u);
+		p.memberRequests.remove(u);
+		tag("@"+u.tag, p);
+		return project(p);
+	}
+	action declineMembershipRequest(u : User, p : Project) {
+		p.memberRequests.remove(u);
+		return project(p);
+	}
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/project.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/project.org	Thu Mar  3 08:09:08 2011	(r22266)
@@ -0,0 +1,238 @@
+module project/project
+
+imports project/ac
+imports project/register
+imports project/roadmap
+imports project/membership
+imports project/sidebar
+imports project/settings
+imports issue/issue
+imports tag/tag
+imports user/user
+
+
+entity Project {
+	name			:: String (id, 
+		validate(isUniqueProject(this), "Another project with this name already exists"), 
+		validate(name.length() >= 3, "Project names should be three characters or longer"),
+		validate(/[a-z0-9A-Z._]*/.match(name), "Project names may contain characters, numbers, dots and underscores."))
+	description		:: WikiText
+	url				:: URL
+	issues			-> Set<Issue>
+	members			-> Set<User>
+	memberRequests	-> Set<User>
+	created			:: DateTime
+	private			:: Bool
+	email			:: Email
+	
+	function getCommonTags(nr : Int) : List<Tag>{
+		var result :List<Tag> := 
+			(	select t
+				from Issue as i inner join i.tags as t
+				where (i._project = ~this) and (t._name not like ~"@%") and (t._name not like ~"!%")
+				group by t._name
+				order by count(i) desc
+				limit nr
+			) as List<Tag>;
+		return result;
+	}
+	
+	function getIssueStatsWeekly() : List<Int> {
+		var year : Int := 2010;
+		var weekDel : List<DateTime>; 
+		for(week : Int from 1 to 51) {
+			weekDel.add(
+				DateTime(year +  "." + week, "yyyy.w")
+			);
+		}
+		var stats : List<Int>;
+		for(nr : Int from 0 to weekDel.length - 2) {
+			var start : DateTime := weekDel.get(nr);
+			var end : DateTime := weekDel.get(nr + 1);
+			stats.add(
+				select count(*)
+				from Issue
+				where _submitted > ~start 
+				and _submitted < ~end
+				and _project = ~this
+			);
+		}
+		return stats;
+	}
+	
+	function getWeeklyStatsGraph() : String {
+		var stats := getIssueStatsWeekly();
+		var maxStat := maxList(stats);
+	
+		var prefix := "http://chart.apis.google.com/chart?cht=bvg&chs=230x100&chco=bbcebb&chbh=a,5,10&chxt=y";
+		var rangePrefix := "&chds=0," + maxStat;
+		var axisPrefix := "&chxr=0,0," + maxStat;
+		var dataPrefix := "&chd=t:";
+		
+		var url : List<String>;
+		url.add(prefix);
+		url.add(rangePrefix);
+		url.add(axisPrefix);
+		url.add(dataPrefix);
+		for(nr : Int from 0 to stats.length - 2) {
+			url.add(stats.get(nr).toString() + ",");
+		}
+		url.add(stats.get(stats.length - 1).toString());
+		
+		return url.concat();
+	}
+}
+
+define page project(p : Project) {
+	var recentIssues : List<Issue> := 
+		from Issue
+		where _open = true and _project = ~p
+		order by _submitted desc
+		limit 10;
+	
+	var popularIssues : List<Issue> := 
+		select i
+		from Issue as i
+		left join i.tags as t
+		where 
+			i._open = true and 
+			i._project = ~p and
+			t._name like ~"!%"
+		group by i 
+		order by count(t._name) desc //order by aggregation is not supported in MySQL :(
+		limit 10;
+	
+	title{output(p.name) " on YellowGrass.org" }
+	main()
+	define body() {
+		block [class := "main"] { 
+			if(securityContext.loggedIn) {
+				par [class := "Back"] { 
+					rawoutput { " &raquo; " }
+					navigate(home()) {"Home"}
+					rawoutput { " &raquo; " }
+					"Project " output(p.name) 
+				}
+			}
+			
+			par { tags(p.getCommonTags(80), p) }
+			projectMembershipRequests(p)
+			
+			if(popularIssues.length > 0) {
+				par { <h2>"Popular Open Issues"</h2> }
+				par { issues(popularIssues, false, false, true, 50, true) }
+			}
+			par { <h2>"Recent Open Issues"</h2> }
+			par { issues(recentIssues, false, false, true, 50, true) }
+
+			par { navigate(projectIssues(p, true)) {"View all open issues"} " --- " navigate(projectIssues(p, false)) {"View all issues"} }
+			
+			par { <h2>"Project Members"</h2> }
+			par { users(p.members) }
+		}
+		projectSideBar(p)
+	}
+}
+
+define page projectStats(p : Project) {
+	par { <i> "Issue Count (weekly)" </i> }
+	par { image(p.getWeeklyStatsGraph()) }
+}
+
+define template projects(ps : List<Project>) {
+	block [class := "Listing"] {
+		table {
+			for(p : Project in ps) { 
+				row {
+					column { navigate project(p) {output(p.name)} }
+					column {
+						output(
+							(from Issue as i
+							 where i.open=true and i.project = ~p
+							).length
+						) 
+						" open issues "
+					}
+				}
+			}
+		}
+	}
+}
+
+define page projectList() {
+	title{"YellowGrass.org - Public Projects List"}
+	main()
+	define body(){
+		<h1>"Project List"</h1>
+		var projectList : List<Project> := 
+			from Project
+			where _private=false
+			order by _name;
+		block [class := "Listing"] {
+			projects(projectList)
+		}
+	}
+}
+
+
+define page projectIssues(p : Project, filterOpen : Bool) {
+	title{output(p.name) " issues on YellowGrass.org"}
+	main()
+	define body() {
+		var issues := [i | i : Issue in p.issues where (!filterOpen) || i.open];
+		
+		block [class := "main"] {
+			if(securityContext.loggedIn) {
+				par [class := "Back"] { 
+					rawoutput { " &raquo; " }
+					navigate(home()) {"Home"}
+					rawoutput { " &raquo; " }
+					navigate(project(p)) {"Project " output(p.name)}
+					rawoutput { " &raquo; " }
+					"Issues"
+				}
+			} else { 
+				par [class := "Back"] { navigate(project(p)) {rawoutput { " &raquo; " } " Back to Project"} }
+			}
+			 
+			par { issues(issues, false, true, true, 50, true) }
+		}
+		projectSideBar(p)
+	}
+}
+
+define page projectUnAssignedIssues(p : Project) {
+	// TODO Make next two queries more efficient by integration
+	var openIssues : List<Issue> := 
+		from Issue
+		where _open = true and _project = ~p
+		order by _submitted desc
+		limit 2000;
+	var unassignedIssues : List<Issue> := [ i | i : Issue in openIssues where !(i.isAssigned()) ];
+	
+	title{output(p.name) " unassigned issues on YellowGrass.org" }
+	main()
+	define body() {
+		block [class := "main"] {
+			if(securityContext.loggedIn) {
+				par [class := "Back"] { 
+					rawoutput { " &raquo; " }
+					navigate(home()) {"Home"}
+					rawoutput { " &raquo; " }
+					navigate(project(p)) {"Project " output(p.name)}
+					rawoutput { " &raquo; " }
+					"Unassigned Issues"
+				}
+			} else { 
+				par [class := "Back"] { navigate(project(p)) {rawoutput { " &raquo; " } " Back to Project"} }
+			}
+			
+			par { issues(unassignedIssues.set(), false, true, true, 50, true) }
+		}
+		projectSideBar(p)
+	}
+}
+
+function mayAccess(ps : List<Project>) : Bool {
+	return [p | p : Project in ps where !mayAccess(p)].length == 0;
+}

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/register.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/register.org	Thu Mar  3 08:09:08 2011	(r22266)
@@ -0,0 +1,29 @@
+module project/register
+
+imports issue/types
+
+define page registerProject(){
+	var p := Project{};
+
+	title{"YellowGrass.org - Project Registration"}
+	main()
+	define body(){
+		<h1> "Create New Project" </h1>
+		form { 
+			par { label("Project name") { input(p.name) } }
+			par {
+				navigate(home()) {"Cancel"}
+					" "	
+				action("Create",create())
+			}
+		}
+	}
+	action create(){
+		p.members.add(securityContext.principal);
+		p.created := now();
+		p.private := false;
+		p.save();
+		createIssueTypes(p);
+		return edit(p);
+	}
+}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/roadmap.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/base-files/roadmap.org	Thu Mar  3 08:09:08 2011	(r22266)
@@ -0,0 +1,56 @@
+module project/roadmap
+
+imports issue/issue
+
+define page roadmap(p : Project) {
+	continuousLoading()
+	title{output(p.name) " Roadmap - on YellowGrass.org"}
+	main()
+	define body(){
+		var releases := releases(p)
+		
+		block [class := "main"] { 
+			if(securityContext.loggedIn) {
+				par [class := "Back"] { 
+					rawoutput { " &raquo; " }
+					navigate(home()) {"Home"}
+					rawoutput { " &raquo; " }
+					navigate(project(p)) {"Project " output(p.name)}
+					rawoutput { "&raquo; " } " Roadmap "
+				}
+			} else { 
+				par [class := "Back"] { navigate(project(p)) {rawoutput { "&raquo; " } " Back to Project"} }
+			}
+			releases roadmapRelease(releases.get(0))
+
+		}
+		projectSideBar(p)
+	}
+}
+
+define ajaxtemplate roadmapRelease(r : Tag) {
+	var previousRelease := previousRelease(r);
+	<h2> 
+		navigate(tag(r.project, r.name)) { output(r.name) }
+		if(r.description != null && r.description != "") {
+			output(" -- ") <i> output(r.description) </i>
+		}
+	</h2>
+	par { actionLink("Postpone Open Issues", postponeOpen(r)) }
+	issues(releaseIssues(r), false, true, true, 50, true)
+	
+	action postponeOpen(release : Tag) {
+		var nextRelease : Tag := nextRelease(release);
+		for(i : Issue in releaseIssues(release)) {
+			if(i.open) {
+				i.deleteTag(release);
+				i.addTag(nextRelease);
+			}
+		}
+	}
+	action showPreviousRelease(release : Tag) {
+		if(release != null) {
+			append(releases, roadmapRelease(release));
+		}
+	}
+}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/grammars-gen/WebDSL-Tokenizer.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/grammars-gen/WebDSL-WC.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/grammars-gen/WebDSL.tbl
==============================================================================
Binary file. No diff available.


From m.dejonge at tudelft.nl  Thu Mar  3 09:10:21 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 08:10:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22267 -
	sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files
Message-ID: <20110303081021.F27482B802D@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 08:10:21 2011
New Revision: 22267
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22267&sc=1

Log:


Added:
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.auto_incomplete.67.org
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.auto_incomplete.81.org
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.incorrect.38.org
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.incorrect.39.org
   sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.incorrect.40.org

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.auto_incomplete.67.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.auto_incomplete.67.org	Thu Mar  3 08:10:21 2011	(r22267)
@@ -0,0 +1,99 @@
+module project/ac
+
+imports tag/release
+
+access control rules
+	
+predicate mayAccess(p : Project){
+				( !p.private ) || 
+				securityContext.principal in p.members
+	
+		rule page project(p : Project) {	
+		mayAccess(p)
+	}
+		
+	rule page edit(p : Project) {
+		principal in p.members
+		rule action save() {
+			principal in p.members
+		}
+		rule action leaveProject(p : Project) {
+			principal in p.members &&
+			p.members.length > 1
+		}
+		rule action regenerateIssueTypes(p : Project) {
+			principal in p.members
+		}
+	}
+	
+	rule page registerProject() {
+		loggedIn
+	}
+	
+	rule page projectIssues(p : Project, filterOpen : Bool) {
+		mayAccess(p)
+	}
+	
+	rule page projectUnAssignedIssues(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule template projects(ps : List<Project>) {
+		mayAccess(ps)
+	}
+	
+	rule page projectList() {
+		true
+	}
+	
+	rule template projectMembershipRequests(p : Project) {
+		principal in p.members && 
+		p.memberRequests.length > 0
+	}
+	
+	rule template projectSideBar(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page projectStats(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page roadmap(p : Project) {
+		mayAccess(p) &&
+		(	from Tag as t
+			left join t.tags as ts
+			where t._project=~p and ts._name=~"release"
+			limit 1
+		).length > 0
+	}
+	
+/*	rule template roadmapReleaseLink(release : Tag) {
+		true
+		rule action unFoldRelease(release : Tag) {
+			true
+		}
+	}
+*/	
+	rule ajaxtemplate roadmapRelease(r : Tag) {
+		mayAccess(r.project) && r.isRelease()
+		rule action postponeOpen(release : Tag) {
+			principal in release.project.members && 
+			release.isRelease() && 
+			!releaseDone(release) &&
+			nextRelease(release) != null
+		}
+		rule action showPreviousRelease(release : Tag) {
+			mayAccess(r.project) && r.isRelease()
+		}
+	}
+	
+	rule template projectCommands(p : Project) {
+		mayAccess(p)
+		
+		rule action requestJoinProject(p : Project) {
+			loggedIn && 
+			!(principal in p.members) &&
+			!(principal in p.memberRequests)
+		}
+	}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.auto_incomplete.81.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.auto_incomplete.81.org	Thu Mar  3 08:10:21 2011	(r22267)
@@ -0,0 +1,99 @@
+module project/ac
+
+imports tag/release
+
+access control rules
+	
+	predicate mayAccess(p : Project){
+		( !p.private ) || 
+		securityContext.principal in p.members
+	}
+	
+rule page project(p : Project) {	
+				mayAccess(p)
+		
+		rule page edit(p : Project) {
+		principal in p.members
+		rule action save() {
+			principal in p.members
+		}
+		rule action leaveProject(p : Project) {
+			principal in p.members &&
+			p.members.length > 1
+		}
+		rule action regenerateIssueTypes(p : Project) {
+			principal in p.members
+		}
+	}
+	
+	rule page registerProject() {
+		loggedIn
+	}
+	
+	rule page projectIssues(p : Project, filterOpen : Bool) {
+		mayAccess(p)
+	}
+	
+	rule page projectUnAssignedIssues(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule template projects(ps : List<Project>) {
+		mayAccess(ps)
+	}
+	
+	rule page projectList() {
+		true
+	}
+	
+	rule template projectMembershipRequests(p : Project) {
+		principal in p.members && 
+		p.memberRequests.length > 0
+	}
+	
+	rule template projectSideBar(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page projectStats(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page roadmap(p : Project) {
+		mayAccess(p) &&
+		(	from Tag as t
+			left join t.tags as ts
+			where t._project=~p and ts._name=~"release"
+			limit 1
+		).length > 0
+	}
+	
+/*	rule template roadmapReleaseLink(release : Tag) {
+		true
+		rule action unFoldRelease(release : Tag) {
+			true
+		}
+	}
+*/	
+	rule ajaxtemplate roadmapRelease(r : Tag) {
+		mayAccess(r.project) && r.isRelease()
+		rule action postponeOpen(release : Tag) {
+			principal in release.project.members && 
+			release.isRelease() && 
+			!releaseDone(release) &&
+			nextRelease(release) != null
+		}
+		rule action showPreviousRelease(release : Tag) {
+			mayAccess(r.project) && r.isRelease()
+		}
+	}
+	
+	rule template projectCommands(p : Project) {
+		mayAccess(p)
+		
+		rule action requestJoinProject(p : Project) {
+			loggedIn && 
+			!(principal in p.members) &&
+			!(principal in p.memberRequests)
+		}
+	}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.incorrect.38.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.incorrect.38.org	Thu Mar  3 08:10:21 2011	(r22267)
@@ -0,0 +1,100 @@
+module project/ac
+
+imports tag/release
+
+access control rules
+	
+	predicate mayAccess(p : Project){
+		( !p.private ) || 
+		securityContext.principal in p.members
+	}
+	
+	rule page project(p : Project) {	
+		mayAccess(p)
+	}
+		
+	rule page edit(p : Project) {
+		principal in p.members
+		rule action save() {
+			principal in p.members
+		}
+		rule action leaveProject(p : Project) {
+			principal in p.members &&
+			p.members.length > 1
+		}
+		rule action regenerateIssueTypes(p : Project) {
+			principal in p.members
+		}
+	}
+	
+	rule page registerProject() {
+		loggedIn
+	}
+	
+	rule page projectIssues(p : Project. filterOpen : Bool) {
+		mayAccess(p)
+	}
+	
+	rule page projectUnAssignedIssues(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule template projects(ps : List<Project>) {
+		mayAccess(ps)
+	}
+	
+	rule page projectList() {
+		true
+	}
+	
+	rule template projectMembershipRequests(p : Project) {
+		principal in p.members && 
+		p.memberRequests.length > 0
+	}
+	
+	rule template projectSideBar(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page projectStats(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page roadmap(p : Project) {
+		mayAccess(p) &&
+		(	from Tag as t
+			left join t.tags as ts
+			where t._project=~p and ts._name=~"release"
+			limit 1
+		).length > 0
+	}
+	
+/*	rule template roadmapReleaseLink(release : Tag) {
+		true
+		rule action unFoldRelease(release : Tag) {
+			true
+		}
+	}
+*/	
+	rule ajaxtemplate roadmapRelease(r : Tag) {
+		mayAccess(r.project) && r.isRelease()
+		rule action postponeOpen(release : Tag) {
+			principal in release.project.members && 
+			release.isRelease() && 
+			!releaseDone(release) &&
+			nextRelease(release) != null
+		}
+		rule action showPreviousRelease(release : Tag) {
+			mayAccess(r.project) && r.isRelease()
+		}
+	}
+	
+	rule template projectCommands(p : Project) {
+		mayAccess(p)
+		
+		rule action requestJoinProject(p : Project) {
+			loggedIn && 
+			!(principal in p.members) &&
+			!(principal in p.memberRequests)
+		}
+	}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.incorrect.39.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.incorrect.39.org	Thu Mar  3 08:10:21 2011	(r22267)
@@ -0,0 +1,100 @@
+module project/ac
+
+imports tag/release
+
+access control rules
+	
+	predicate mayAccess(p : Project){
+		( !p.private ) || 
+		securityContext.principal in p.members
+	}
+	
+	rule page project(p : Project) {	
+		mayAccess(p)
+	}
+		
+	rule page edit(p : Project) {
+		principal in p.members
+		rule action save() {
+			principal in p.members
+		}
+		rule action leaveProject(p : Project) {
+			principal in p,members &&
+			p.members.length > 1
+		}
+		rule action regenerateIssueTypes(p : Project) {
+			principal in p.members
+		}
+	}
+	
+	rule page registerProject() {
+		loggedIn
+	}
+	
+	rule page projectIssues(p : Project, filterOpen : Bool) {
+		mayAccess(p)
+	}
+	
+	rule page projectUnAssignedIssues(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule template projects(ps : List<Project>) {
+		mayAccess(ps)
+	}
+	
+	rule page projectList() {
+		true
+	}
+	
+	rule template projectMembershipRequests(p : Project) {
+		principal in p.members && 
+		p.memberRequests.length > 0
+	}
+	
+	rule template projectSideBar(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page projectStats(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page roadmap(p : Project) {
+		mayAccess(p) &&
+		(	from Tag as t
+			left join t.tags as ts
+			where t._project=~p and ts._name=~"release"
+			limit 1
+		).length > 0
+	}
+	
+/*	rule template roadmapReleaseLink(release : Tag) {
+		true
+		rule action unFoldRelease(release : Tag) {
+			true
+		}
+	}
+*/	
+	rule ajaxtemplate roadmapRelease(r : Tag) {
+		mayAccess(r.project) && r.isRelease()
+		rule action postponeOpen(release : Tag) {
+			principal in release.project.members && 
+			release.isRelease() && 
+			!releaseDone(release) &&
+			nextRelease(release) != null
+		}
+		rule action showPreviousRelease(release : Tag) {
+			mayAccess(r.project) && r.isRelease()
+		}
+	}
+	
+	rule template projectCommands(p : Project) {
+		mayAccess(p)
+		
+		rule action requestJoinProject(p : Project) {
+			loggedIn && 
+			!(principal in p.members) &&
+			!(principal in p.memberRequests)
+		}
+	}
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.incorrect.40.org
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/webdsl/error-files/ac.incorrect.40.org	Thu Mar  3 08:10:21 2011	(r22267)
@@ -0,0 +1,100 @@
+module project\ac
+
+imports tag/release
+
+access control rules
+	
+	predicate mayAccess(p : Project){
+		( !p.private ) || 
+		securityContext.principal in p.members
+	}
+	
+	rule page project(p : Project) {	
+		mayAccess(p)
+	}
+		
+	rule page edit(p : Project) {
+		principal in p.members
+		rule action save() {
+			principal in p.members
+		}
+		rule action leaveProject(p : Project) {
+			principal in p.members &&
+			p.members.length > 1
+		}
+		rule action regenerateIssueTypes(p : Project) {
+			principal in p.members
+		}
+	}
+	
+	rule page registerProject() {
+		loggedIn
+	}
+	
+	rule page projectIssues(p : Project, filterOpen : Bool) {
+		mayAccess(p)
+	}
+	
+	rule page projectUnAssignedIssues(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule template projects(ps : List<Project>) {
+		mayAccess(ps)
+	}
+	
+	rule page projectList() {
+		true
+	}
+	
+	rule template projectMembershipRequests(p : Project) {
+		principal in p.members && 
+		p.memberRequests.length > 0
+	}
+	
+	rule template projectSideBar(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page projectStats(p : Project) {
+		mayAccess(p)
+	}
+	
+	rule page roadmap(p : Project) {
+		mayAccess(p) &&
+		(	from Tag as t
+			left join t.tags as ts
+			where t._project=~p and ts._name=~"release"
+			limit 1
+		).length > 0
+	}
+	
+/*	rule template roadmapReleaseLink(release : Tag) {
+		true
+		rule action unFoldRelease(release : Tag) {
+			true
+		}
+	}
+*/	
+	rule ajaxtemplate roadmapRelease(r : Tag) {
+		mayAccess(r.project) && r.isRelease()
+		rule action postponeOpen(release : Tag) {
+			principal in release.project.members && 
+			release.isRelease() && 
+			!releaseDone(release) &&
+			nextRelease(release) != null
+		}
+		rule action showPreviousRelease(release : Tag) {
+			mayAccess(r.project) && r.isRelease()
+		}
+	}
+	
+	rule template projectCommands(p : Project) {
+		mayAccess(p)
+		
+		rule action requestJoinProject(p : Project) {
+			loggedIn && 
+			!(principal in p.members) &&
+			!(principal in p.memberRequests)
+		}
+	}
\ No newline at end of file


From m.dejonge at tudelft.nl  Thu Mar  3 09:19:51 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 08:19:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22268 - in
	sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test:
	base-files error-files grammars-gen intended-files
Message-ID: <20110303081951.DC5CF2B803A@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 08:19:51 2011
New Revision: 22268
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22268&sc=1

Log:


Added:
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/base-files/example_swjx.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.broken-context.149.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.broken-context.150.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.broken-context.152.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.superfluous.233.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.superfluous.236.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-C.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-CO.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-Tokenizer.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-W.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-WC-Cust.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-WC.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-WCO.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava.pp
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava.tbl   (contents, props changed)
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/example_swjx.broken-context.149.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/example_swjx.broken-context.150.sj
   sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/example_swjx.broken-context.152.sj

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/base-files/example_swjx.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/base-files/example_swjx.sj	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,232 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+  handle-ref-arg =
+    zip(create-assigns-for-ref-arg-helper <+ ?(_,<expression-to-java-servlet>)) //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name : 
+    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl)
+    with  if x_tclass := <ThisTemplateClassName> 
+          then e_this := java:expr|[ x_tclass.this ]| //avoid `this` issue when call occurs in an inner class, e.g. used for actions
+          else e_this := java:expr|[ this ]| end
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) := a
+    
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.broken-context.149.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.broken-context.149.sj	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,230 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+  handle-ref-arg =
+    zip(create-assigns-for-ref-arg-helper <+ ?(_,<expression-to-java-servlet>)) //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name : 
+    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl)
+    with  if x_tclass := <ThisTemplateClassName>
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) := a
+    
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.broken-context.150.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.broken-context.150.sj	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,231 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+  handle-ref-arg //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name : 
+    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl)
+    with  if x_tclass := <ThisTemplateClassName> 
+          then e_this := java:expr|[ x_tclass.this ]| //avoid `this` issue when call occurs in an inner class, e.g. used for actions
+          else e_this := java:expr|[ this ]| end
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) := a
+    
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.broken-context.152.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.broken-context.152.sj	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,232 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+  handle-ref-arg =
+    zip(create-assigns-for-ref-arg-helper <+ ?(_,<expression-to-java-servlet>)) //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name : 
+    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl
+    with  if x_tclass := <ThisTemplateClassName> 
+          then e_this := java:expr|[ x_tclass.this ]| //avoid `this` issue when call occurs in an inner class, e.g. used for actions
+          else e_this := java:expr|[ this ]| end
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) := a
+    
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.superfluous.233.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.superfluous.233.sj	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,231 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+  handle-ref-arg =
+    zip(create-assigns-for-ref-arg-helper <+ ?(_,<expression-to-java-servlet>)) //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name : 
+    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl)
+    with  if x_tclass := <ThisTemplateClassName> 
+          then e_this := java:expr|[ x_tclass.this ]| //avoid `this` issue when call occurs in an inner class, e.g. used for actions
+          else e_this := java:expr|[ this ]| end
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) ) := a
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.superfluous.236.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/error-files/example_swjx.superfluous.236.sj	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,231 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+  handle-ref-arg =
+    zip(create-assigns-for-ref-arg-helper <+ ?(_,<expression-to-java-servlet>)) //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name : 
+    (templatename,e_webdsl) -> < <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl)
+    with  if x_tclass := <ThisTemplateClassName> 
+          then e_this := java:expr|[ x_tclass.this ]| //avoid `this` issue when call occurs in an inner class, e.g. used for actions
+          else e_this := java:expr|[ this ]| end
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) := a
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-C.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-CO.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-Tokenizer.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-W.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-WC-Cust.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-WC.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava-WCO.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava.pp	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,703 @@
+[
+   Assign                                  -- _1 KW["="] _2,
+   AssignMul                               -- _1 KW["*="] _2,
+   AssignDiv                               -- _1 KW["/="] _2,
+   AssignRemain                            -- _1 KW["%="] _2,
+   AssignPlus                              -- _1 KW["+="] _2,
+   AssignMinus                             -- _1 KW["-="] _2,
+   AssignLeftShift                         -- _1 KW["<<="] _2,
+   AssignRightShift                        -- _1 KW[">>="] _2,
+   AssignURightShift                       -- _1 KW[">>>="] _2,
+   AssignAnd                               -- _1 KW["&="] _2,
+   AssignExcOr                             -- _1 KW["^="] _2,
+   AssignOr                                -- _1 KW["|="] _2,
+   InstanceOf                              -- _1 KW["instanceof"] _2,
+   Mul                                     -- _1 KW["*"] _2,
+   Div                                     -- _1 KW["/"] _2,
+   Remain                                  -- _1 KW["%"] _2,
+   Plus                                    -- _1 KW["+"] _2,
+   Minus                                   -- _1 KW["-"] _2,
+   LeftShift                               -- _1 KW["<<"] _2,
+   RightShift                              -- _1 KW[">>"] _2,
+   URightShift                             -- _1 KW[">>>"] _2,
+   Lt                                      -- _1 KW["<"] _2,
+   Gt                                      -- _1 KW[">"] _2,
+   LtEq                                    -- _1 KW["<="] _2,
+   GtEq                                    -- _1 KW[">="] _2,
+   Eq                                      -- _1 KW["=="] _2,
+   NotEq                                   -- _1 KW["!="] _2,
+   LazyAnd                                 -- _1 KW["&&"] _2,
+   LazyOr                                  -- _1 KW["||"] _2,
+   And                                     -- _1 KW["&"] _2,
+   ExcOr                                   -- _1 KW["^"] _2,
+   Or                                      -- _1 KW["|"] _2,
+   Cond                                    -- _1 _2 _3,
+   Plus                                    -- KW["+"] _1,
+   Minus                                   -- KW["-"] _1,
+   PreIncr                                 -- KW["++"] _1,
+   PreDecr                                 -- KW["--"] _1,
+   Complement                              -- KW["~"] _1,
+   Not                                     -- KW["!"] _1,
+   CastPrim                                -- KW["("] _1 KW[")"] _2,
+   CastRef                                 -- KW["("] _1 KW[")"] _2,
+   PostIncr                                -- _1 KW["++"],
+   PostDecr                                -- _1 KW["--"],
+   Invoke                                  -- _1 KW["("] _2 KW[")"],
+   Invoke.2:iter-star-sep                  -- _1 KW[","],
+   Method                                  -- _1,
+   Method                                  -- _1 KW["."] _2 _3,
+   Method.2:opt                            -- _1,
+   SuperMethod                             -- KW["super"] KW["."] _1 _2,
+   SuperMethod.1:opt                       -- _1,
+   QSuperMethod                            -- _1 KW["."] KW["super"] KW["."] _2 _3,
+   QSuperMethod.2:opt                      -- _1,
+   GenericMethod                           -- _1 KW["."] _2 _3,
+   ArrayAccess                             -- _1 _2,
+   Field                                   -- _1 KW["."] _2,
+   SuperField                              -- KW["super"] KW["."] _1,
+   QSuperField                             -- _1 KW["."] KW["super"] KW["."] _2,
+   NewArray                                -- KW["new"] _1 _2 _3,
+   NewArray.2:iter                         -- _1,
+   NewArray.3:iter-star                    -- _1,
+   NewArray                                -- KW["new"] _1 _2 _3,
+   NewArray.2:iter                         -- _1,
+   UnboundWld                              -- _1 KW["<"] KW["?"] KW[">"],
+   Dim                                     -- KW["["] _1 KW["]"],
+   Dim                                     -- KW["["] KW["]"],
+   NewInstance                             -- KW["new"] _1 _2 KW["("] _3 KW[")"] _4,
+   NewInstance.1:opt                       -- _1,
+   NewInstance.3:iter-star-sep             -- _1 KW[","],
+   NewInstance.4:opt                       -- _1,
+   QNewInstance                            -- _1 KW["."] KW["new"] _2 _3 _4 KW["("] _5 KW[")"] _6,
+   QNewInstance.2:opt                      -- _1,
+   QNewInstance.4:opt                      -- _1,
+   QNewInstance.5:iter-star-sep            -- _1 KW[","],
+   QNewInstance.6:opt                      -- _1,
+   Lit                                     -- _1,
+   Class                                   -- _1 KW["."] KW["class"],
+   VoidClass                               -- KW["void"] KW["."] KW["class"],
+   This                                    -- KW["this"],
+   QThis                                   -- _1 KW["."] KW["this"],
+   PackageDec                              -- _1 KW["package"] _2 KW[";"],
+   PackageDec.1:iter-star                  -- _1,
+   TypeImportDec                           -- KW["import"] _1 KW[";"],
+   TypeImportOnDemandDec                   -- KW["import"] _1 KW["."] KW["*"] KW[";"],
+   StaticImportDec                         -- KW["import"] KW["static"] _1 KW["."] _2 KW[";"],
+   StaticImportOnDemandDec                 -- KW["import"] KW["static"] _1 KW["."] KW["*"] KW[";"],
+   AnnoDec                                 -- _1 KW["{"] _2 KW["}"],
+   AnnoDec.2:iter-star                     -- _1,
+   AnnoDecHead                             -- _1 KW["@"] KW["interface"] _2,
+   AnnoDecHead.1:iter-star                 -- _1,
+   AnnoDecHead.1:iter-star.1:alt           -- _1 _2,
+   AnnoMethodDec                           -- _1 _2 _3 KW["("] KW[")"] _4 KW[";"],
+   AnnoMethodDec.1:iter-star               -- _1,
+   AnnoMethodDec.4:opt                     -- _1,
+   Semicolon                               -- KW[";"],
+   DefaultVal                              -- KW["default"] _1,
+   AbstractMethodDec                       -- _1 _2 _3 _4 KW["("] _5 KW[")"] _6 KW[";"],
+   AbstractMethodDec.1:iter-star           -- _1,
+   AbstractMethodDec.1:iter-star.1:alt     -- _1 _2,
+   AbstractMethodDec.2:opt                 -- _1,
+   AbstractMethodDec.5:iter-star-sep       -- _1 KW[","],
+   AbstractMethodDec.6:opt                 -- _1,
+   DeprAbstractMethodDec                   -- _1 _2 _3 _4 KW["("] _5 KW[")"] _6 _7 KW[";"],
+   DeprAbstractMethodDec.1:iter-star       -- _1,
+   DeprAbstractMethodDec.1:iter-star.1:alt -- _1 _2,
+   DeprAbstractMethodDec.2:opt             -- _1,
+   DeprAbstractMethodDec.5:iter-star-sep   -- _1 KW[","],
+   DeprAbstractMethodDec.6:iter            -- _1,
+   DeprAbstractMethodDec.7:opt             -- _1,
+   ConstantDec                             -- _1 _2 _3 KW[";"],
+   ConstantDec.1:iter-star                 -- _1,
+   ConstantDec.1:iter-star.1:alt           -- _1 _2,
+   ConstantDec.3:iter-sep                  -- _1 KW[","],
+   InterfaceDec                            -- _1 KW["{"] _2 KW["}"],
+   InterfaceDec.2:iter-star                -- _1,
+   InterfaceDecHead                        -- _1 KW["interface"] _2 _3 _4,
+   InterfaceDecHead.1:iter-star            -- _1,
+   InterfaceDecHead.1:iter-star.1:alt      -- _1 _2,
+   InterfaceDecHead.3:opt                  -- _1,
+   InterfaceDecHead.4:opt                  -- _1,
+   ExtendsInterfaces                       -- V  [H  [KW["extends"]] _1],
+   ExtendsInterfaces.1:iter-sep            -- _1 KW[","],
+   Semicolon                               -- KW[";"],
+   EnumDec                                 -- _1 _2,
+   EnumDecHead                             -- _1 KW["enum"] _2 _3,
+   EnumDecHead.1:iter-star                 -- _1,
+   EnumDecHead.1:iter-star.1:alt           -- _1 _2,
+   EnumDecHead.3:opt                       -- _1,
+   EnumBody                                -- KW["{"] _1 _2 KW["}"],
+   EnumBody.1:iter-star-sep                -- _1 KW[","],
+   EnumBody.2:opt                          -- _1,
+   EnumBody                                -- KW["{"] _1 KW[","] _2 KW["}"],
+   EnumBody.1:iter-star-sep                -- _1 KW[","],
+   EnumBody.2:opt                          -- _1,
+   EnumConst                               -- _1 _2 _3,
+   EnumConst.2:opt                         -- _1,
+   EnumConst.3:opt                         -- _1,
+   EnumBodyDecs                            -- V  [H  [KW[";"]] _1],
+   EnumBodyDecs.1:iter-star                -- _1,
+   ConstrDec                               -- _1 _2,
+   ConstrDecHead                           -- _1 _2 _3 KW["("] _4 KW[")"] _5,
+   ConstrDecHead.1:iter-star               -- _1,
+   ConstrDecHead.1:iter-star.1:alt         -- _1 _2,
+   ConstrDecHead.2:opt                     -- _1,
+   ConstrDecHead.4:iter-star-sep           -- _1 KW[","],
+   ConstrDecHead.5:opt                     -- _1,
+   ConstrBody                              -- KW["{"] _1 _2 KW["}"],
+   ConstrBody.1:opt                        -- _1,
+   ConstrBody.2:iter-star                  -- _1,
+   AltConstrInv                            -- _1 KW["this"] KW["("] _2 KW[")"] KW[";"],
+   AltConstrInv.1:opt                      -- _1,
+   AltConstrInv.2:iter-star-sep            -- _1 KW[","],
+   SuperConstrInv                          -- _1 KW["super"] KW["("] _2 KW[")"] KW[";"],
+   SuperConstrInv.1:opt                    -- _1,
+   SuperConstrInv.2:iter-star-sep          -- _1 KW[","],
+   QSuperConstrInv                         -- _1 KW["."] _2 KW["super"] KW["("] _3 KW[")"] KW[";"],
+   QSuperConstrInv.2:opt                   -- _1,
+   QSuperConstrInv.3:iter-star-sep         -- _1 KW[","],
+   StaticInit                              -- KW["static"] _1,
+   InstanceInit                            -- _1,
+   Empty                                   -- KW[";"],
+   Labeled                                 -- _1 KW[":"] _2,
+   ExprStm                                 -- _1 KW[";"],
+   If                                      -- KW["if"] KW["("] _1 KW[")"] _2,
+   If                                      -- KW["if"] KW["("] _1 KW[")"] _2 KW["else"] _3,
+   AssertStm                               -- KW["assert"] _1 KW[";"],
+   AssertStm                               -- KW["assert"] _1 KW[":"] _2 KW[";"],
+   Switch                                  -- KW["switch"] KW["("] _1 KW[")"] _2,
+   SwitchBlock                             -- KW["{"] _1 _2 KW["}"],
+   SwitchBlock.1:iter-star                 -- _1,
+   SwitchBlock.2:iter-star                 -- _1,
+   SwitchGroup                             -- _1 _2,
+   SwitchGroup.1:iter                      -- _1,
+   SwitchGroup.2:iter                      -- _1,
+   Case                                    -- KW["case"] _1 KW[":"],
+   Default                                 -- KW["default"] KW[":"],
+   While                                   -- KW["while"] KW["("] _1 KW[")"] _2,
+   DoWhile                                 -- KW["do"] _1 KW["while"] KW["("] _2 KW[")"] KW[";"],
+   For                                     -- KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
+   For.2:opt                               -- _1,
+   For.3:iter-star-sep                     -- _1 KW[","],
+   For                                     -- KW["for"] KW["("] _1 KW[";"] _2 KW[";"] _3 KW[")"] _4,
+   For.1:iter-star-sep                     -- _1 KW[","],
+   For.2:opt                               -- _1,
+   For.3:iter-star-sep                     -- _1 KW[","],
+   ForEach                                 -- KW["for"] KW["("] _1 KW[":"] _2 KW[")"] _3,
+   Break                                   -- KW["break"] _1 KW[";"],
+   Break.1:opt                             -- _1,
+   Continue                                -- KW["continue"] _1 KW[";"],
+   Continue.1:opt                          -- _1,
+   Return                                  -- KW["return"] _1 KW[";"],
+   Return.1:opt                            -- _1,
+   Throw                                   -- KW["throw"] _1 KW[";"],
+   Synchronized                            -- KW["synchronized"] KW["("] _1 KW[")"] _2,
+   Try                                     -- KW["try"] _1 _2,
+   Try.2:iter                              -- _1,
+   Try                                     -- KW["try"] _1 _2 KW["finally"] _3,
+   Try.2:iter-star                         -- _1,
+   Catch                                   -- KW["catch"] KW["("] _1 KW[")"] _2,
+   LocalVarDecStm                          -- _1 KW[";"],
+   LocalVarDec                             -- _1 _2 _3,
+   LocalVarDec.1:iter-star                 -- _1,
+   LocalVarDec.1:iter-star.1:alt           -- _1 _2,
+   LocalVarDec.3:iter-sep                  -- _1 KW[","],
+   Block                                   -- V  [V vs=2 [KW["{"] _1] KW["}"]],
+   Block.1:iter-star                       -- _1,
+   ClassDecStm                             -- _1,
+   MethodDec                               -- _1 _2,
+   MethodDecHead                           -- _1 _2 _3 _4 KW["("] _5 KW[")"] _6,
+   MethodDecHead.1:iter-star               -- _1,
+   MethodDecHead.1:iter-star.1:alt         -- _1 _2,
+   MethodDecHead.2:opt                     -- _1,
+   MethodDecHead.5:iter-star-sep           -- _1 KW[","],
+   MethodDecHead.6:opt                     -- _1,
+   DeprMethodDecHead                       -- _1 _2 _3 _4 KW["("] _5 KW[")"] _6 _7,
+   DeprMethodDecHead.1:iter-star           -- _1,
+   DeprMethodDecHead.1:iter-star.1:alt     -- _1 _2,
+   DeprMethodDecHead.2:opt                 -- _1,
+   DeprMethodDecHead.5:iter-star-sep       -- _1 KW[","],
+   DeprMethodDecHead.6:iter                -- _1,
+   DeprMethodDecHead.7:opt                 -- _1,
+   Void                                    -- KW["void"],
+   Param                                   -- _1 _2 _3,
+   Param.1:iter-star                       -- _1,
+   Param.1:iter-star.1:alt                 -- _1 _2,
+   VarArityParam                           -- _1 _2 KW["..."] _3,
+   VarArityParam.1:iter-star               -- _1,
+   VarArityParam.1:iter-star.1:alt         -- _1 _2,
+   ThrowsDec                               -- V  [H  [KW["throws"]] _1],
+   ThrowsDec.1:iter-sep                    -- _1 KW[","],
+   NoMethodBody                            -- KW[";"],
+   ArrayInit                               -- KW["{"] _1 KW["}"],
+   ArrayInit.1:iter-star-sep               -- _1 KW[","],
+   ArrayInit                               -- KW["{"] _1 KW[","] KW["}"],
+   ArrayInit.1:iter-star-sep               -- _1 KW[","],
+   Anno                                    -- KW["@"] _1 KW["("] _2 KW[")"],
+   Anno.2:iter-star-sep                    -- _1 KW[","],
+   SingleElemAnno                          -- KW["@"] _1 KW["("] _2 KW[")"],
+   MarkerAnno                              -- KW["@"] _1,
+   ElemValPair                             -- _1 KW["="] _2,
+   ElemValArrayInit                        -- KW["{"] _1 KW["}"],
+   ElemValArrayInit.1:iter-star-sep        -- _1 KW[","],
+   ElemValArrayInit                        -- KW["{"] _1 KW[","] KW["}"],
+   ElemValArrayInit.1:iter-star-sep        -- _1 KW[","],
+   FieldDec                                -- _1 _2 _3 KW[";"],
+   FieldDec.1:iter-star                    -- _1,
+   FieldDec.1:iter-star.1:alt              -- _1 _2,
+   FieldDec.3:iter-sep                     -- _1 KW[","],
+   VarDec                                  -- _1,
+   VarDec                                  -- _1 KW["="] _2,
+   ArrayVarDecId                           -- _1 _2,
+   ArrayVarDecId.2:iter                    -- _1,
+   Dim                                     -- KW["["] KW["]"],
+   ClassDec                                -- _1 _2,
+   ClassBody                               -- V  [V vs=2 [KW["{"] _1] KW["}"]],
+   ClassBody.1:iter-star                   -- _1,
+   ClassDecHead                            -- _1 KW["class"] _2 _3 _4 _5,
+   ClassDecHead.1:iter-star                -- _1,
+   ClassDecHead.1:iter-star.1:alt          -- _1 _2,
+   ClassDecHead.3:opt                      -- _1,
+   ClassDecHead.4:opt                      -- _1,
+   ClassDecHead.5:opt                      -- _1,
+   SuperDec                                -- KW["extends"] _1,
+   ImplementsDec                           -- V  [H  [KW["implements"]] _1],
+   ImplementsDec.1:iter-sep                -- _1 KW[","],
+   Semicolon                               -- KW[";"],
+   Semicolon                               -- KW[";"],
+   CompilationUnit                         -- _1 _2 _3,
+   CompilationUnit.1:opt                   -- _1,
+   CompilationUnit.2:iter-star             -- _1,
+   CompilationUnit.3:iter                  -- _1,
+   PackageName                             -- _1,
+   PackageName.1:iter-sep                  -- _1 KW["."],
+   AmbName                                 -- _1,
+   AmbName                                 -- _1 KW["."] _2,
+   TypeName                                -- _1,
+   TypeName                                -- _1 KW["."] _2,
+   ExprName                                -- _1,
+   ExprName                                -- _1 KW["."] _2,
+   MethodName                              -- _1,
+   MethodName                              -- _1 KW["."] _2,
+   PackageOrTypeName                       -- _1,
+   PackageOrTypeName                       -- _1 KW["."] _2,
+   TypeArgs                                -- KW["<"] _1 KW[">"],
+   TypeArgs.1:iter-sep                     -- _1 KW[","],
+   Wildcard                                -- KW["?"] _1,
+   Wildcard.1:opt                          -- _1,
+   WildcardUpperBound                      -- KW["extends"] _1,
+   WildcardLowerBound                      -- KW["super"] _1,
+   TypeParam                               -- _1 _2,
+   TypeParam.2:opt                         -- _1,
+   TypeBound                               -- V  [H  [KW["extends"]] _1],
+   TypeBound.1:iter-sep                    -- _1 KW["&"],
+   TypeParams                              -- KW["<"] _1 KW[">"],
+   TypeParams.1:iter-sep                   -- _1 KW[","],
+   ClassOrInterfaceType                    -- _1 _2,
+   ClassOrInterfaceType.2:opt              -- _1,
+   ClassType                               -- _1 _2,
+   ClassType.2:opt                         -- _1,
+   InterfaceType                           -- _1 _2,
+   InterfaceType.2:opt                     -- _1,
+   Member                                  -- _1 _2 KW["."] _3,
+   TypeVar                                 -- _1,
+   ArrayType                               -- _1 KW["["] KW["]"],
+   Boolean                                 -- KW["boolean"],
+   Byte                                    -- KW["byte"],
+   Short                                   -- KW["short"],
+   Int                                     -- KW["int"],
+   Long                                    -- KW["long"],
+   Char                                    -- KW["char"],
+   Float                                   -- KW["float"],
+   Double                                  -- KW["double"],
+   Null                                    -- KW["null"],
+   Bool                                    -- _1,
+   True                                    -- KW["true"],
+   False                                   -- KW["false"],
+   Float                                   -- _1,
+   Float                                   -- _1,
+   Deci                                    -- _1,
+   Hexa                                    -- _1,
+   Octa                                    -- _1,
+   Public                                  -- KW["public"],
+   Private                                 -- KW["private"],
+   Protected                               -- KW["protected"],
+   Abstract                                -- KW["abstract"],
+   Final                                   -- KW["final"],
+   Static                                  -- KW["static"],
+   Native                                  -- KW["native"],
+   Transient                               -- KW["transient"],
+   Volatile                                -- KW["volatile"],
+   Synchronized                            -- KW["synchronized"],
+   StrictFP                                -- KW["strictfp"],
+   Id                                      -- _1,
+   meta-var                                -- _1,
+   String                                -- _1,
+   Chars                                -- _1,
+   ToMetaExpr                              -- KW["e"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:expr"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["expr"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["var-init"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:bstm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["bstm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["java:bstm*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaListExpr                          -- KW["bstm*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaExpr                              -- KW["java:block-stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["block-stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["java:block-stm*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaListExpr                          -- KW["block-stm*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaExpr                              -- KW["java:stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["stm"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["switch-group"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["java:switch-group"] KW["|["] _1 KW["]|"],
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~bstm:"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~bstm*:"] _1,
+   FromMetaExpr                            -- KW["~stm:"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~switch-group*:"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~switch-group:"] _1,
+   ToMetaExpr                              -- KW["java:lvdec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["lvdec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:vdec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["vdec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["t"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["ty"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:type"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["type"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~type:"] _1,
+   ToMetaExpr                              -- KW["ambname"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["ename"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["fname"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["tname"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["pkgtname"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["mod"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["anno"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["param"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:param"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["param*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["java:param*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["java:formal-param"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["formal-param"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:formal-param*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["formal-param*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star-sep              -- _1 KW[","],
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   ToMetaExpr                              -- KW["java:package-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["package-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:package-dec?"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:opt                        -- _1,
+   ToMetaExpr                              -- KW["package-dec?"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:opt                        -- _1,
+   FromMetaExpr                            -- KW["~package-dec:"] _1,
+   FromMetaExpr                            -- KW["~package-dec?:"] _1,
+   ToMetaExpr                              -- KW["java:import-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["import-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaListExpr                          -- KW["java:import-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaListExpr                          -- KW["import-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaListExpr.1:iter-star              -- _1,
+   FromMetaExpr                            -- KW["~import-dec:"] _1,
+   FromMetaExpr                            -- KW["~import-dec*:"] _1,
+   ToMetaExpr                              -- KW["e"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:expr"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["expr"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:compilation-unit"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["compilation-unit"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:importdecl"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["importdecl"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:type-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["type-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:class-body-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["class-body-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:interface-member-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["interface-member-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:constant-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["constant-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:class-body-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- KW["class-body-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaListExpr                          -- V  [V vs=2 [KW["|["] _1] KW["]|"]],
+   ToMetaListExpr.1:iter-star              -- _1,
+   ToMetaExpr                              -- KW["java:stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["stm"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:imember-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["imember-dec"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["|["] _1 KW["]|"],
+   ToMetaExpr                              -- KW["java:imember-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- KW["imember-dec*"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- KW["java"] KW["|["] _1 KW["]|"],
+   ToMetaExpr.1:iter-star                  -- _1,
+   ToMetaExpr                              -- V  [V vs=2 [KW["|["] _1] KW["]|"]],
+   ToMetaExpr.1:iter-star                  -- _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~name:"] _1,
+   FromMetaExpr                            -- KW["~*:"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~id:"] _1,
+   FromMetaExpr                            -- KW["~idd:"] _1 KW[":"],
+   FromMetaExpr                            -- KW["~x:"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~e:"] _1,
+   FromMetaExpr                            -- KW["~expr:"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~"] _1,
+   FromMetaExpr                            -- KW["~*"] _1,
+   FromMetaExpr                            -- KW["~i:"] _1,
+   FromMetaExpr                            -- KW["~deci:"] _1,
+   FromMetaExpr                            -- KW["~hexa:"] _1,
+   FromMetaExpr                            -- KW["~octa:"] _1,
+   FromMetaExpr                            -- KW["~float:"] _1,
+   FromMetaExpr                            -- KW["~string:"] _1,
+   FromMetaExpr                            -- KW["~char:"] _1,
+   OverlayNoArgs                           -- _1 KW["="] _2,
+   Overlay                                 -- _1 KW["("] _2 KW[")"] KW["="] _3,
+   Overlay.2:iter-star-sep                 -- _1 KW[","],
+   DynRuleScope                            -- KW["{|"] _1 KW[":"] _2 KW["|}"],
+   ScopeLabels                             -- _1,
+   ScopeLabels.1:iter-star-sep             -- _1 KW[","],
+   ScopeLabels                             -- KW["~"] _1,
+   GenDynRules                             -- KW["rules"] KW["("] _1 KW[")"],
+   GenDynRules.1:iter-star                 -- _1,
+   AddScopeLabel                           -- _1 KW["+"] _2,
+   UndefineDynRule                         -- _1 KW[":-"] _2,
+   SetDynRule                              -- _1 KW[":"] _2,
+   AddDynRule                              -- _1 KW[":+"] _2,
+   SetDynRuleMatch                         -- _1 KW[":"] _2,
+   DynRuleAssign                           -- _1 KW[":="] _2,
+   DynRuleAssignAdd                        -- _1 KW[":+="] _2,
+   SetDynRuleDepends                       -- _1 KW[":"] _2 KW["depends"] KW["on"] _3,
+   LabeledDynRuleId                        -- _1 KW["."] _2,
+   AddLabelDynRuleId                       -- _1 KW["+"] _2,
+   DynRuleId                               -- _1,
+   LabeledDynRuleScopeId                   -- _1 KW["."] _2,
+   DynRuleScopeId                          -- _1,
+   RDecNoArgs                              -- _1,
+   RDec                                    -- _1 KW["("] _2 KW[")"],
+   RDec.2:iter-star-sep                    -- _1 KW[","],
+   RDecT                                   -- _1 KW["("] _2 KW["|"] _3 KW[")"],
+   RDecT.2:iter-star-sep                   -- _1 KW[","],
+   RDecT.3:iter-star-sep                   -- _1 KW[","],
+   RuleNames                               -- KW["~"] _1,
+   DynRuleIntersectFix                     -- KW["/"] _1 KW["\\*"] _2,
+   DynRuleIntersect                        -- _1 KW["/"] _2 KW["\\"] _3,
+   DynRuleUnion                            -- _1 KW["\\"] _2 KW["/"] _3,
+   DynRuleIntersectUnion                   -- _1 KW["/"] _2 KW["\\"] _3 KW["/"] _4,
+   RDefNoArgs                              -- _1 KW[":"] _2,
+   RDef                                    -- _1 KW["("] _2 KW[")"] KW[":"] _3,
+   RDef.2:iter-star-sep                    -- _1 KW[","],
+   RDefT                                   -- _1 KW["("] _2 KW["|"] _3 KW[")"] KW[":"] _4,
+   RDefT.2:iter-star-sep                   -- _1 KW[","],
+   RDefT.3:iter-star-sep                   -- _1 KW[","],
+   RuleNoCond                              -- _1 KW["->"] _2,
+   Rule                                    -- _1 KW["->"] _2 KW["where"] _3,
+   Rule                                    -- _1 KW["->"] _2 _3,
+   Rule.3:iter                             -- _1,
+   WhereClause                             -- KW["where"] _1,
+   WithClause                              -- KW["with"] _1,
+   SDefNoArgs                              -- _1 KW["="] _2,
+   SDef                                    -- _1 KW["("] _2 KW[")"] KW["="] _3,
+   SDef.2:iter-star-sep                    -- _1 KW[","],
+   DefaultVarDec                           -- _1,
+   Call                                    -- _1 KW["("] _2 KW[")"],
+   Call.2:iter-star-sep                    -- _1 KW[","],
+   ScopeDefault                            -- KW["{"] _1 KW["}"],
+   BA                                      -- _1 _2,
+   LChoice                                 -- _1 KW["<+"] _2,
+   Rec                                     -- KW["rec"] _1 KW["("] _2 KW[")"],
+   Not                                     -- KW["not"] KW["("] _1 KW[")"],
+   Where                                   -- KW["where"] KW["("] _1 KW[")"],
+   With                                    -- KW["with"] KW["("] _1 KW[")"],
+   Test                                    -- KW["test"] KW["("] _1 KW[")"],
+   PrimNoArgs                              -- KW["prim"] KW["("] _1 KW[")"],
+   Prim                                    -- KW["prim"] KW["("] _1 KW[","] _2 KW[")"],
+   Prim.2:iter-star-sep                    -- _1 KW[","],
+   StrCong                                 -- _1,
+   IntCong                                 -- _1,
+   RealCong                                -- _1,
+   CharCong                                -- _1,
+   CongQ                                   -- _1 KW["("] _2 KW[")"],
+   CongQ.2:iter-star-sep                   -- _1 KW[","],
+   AnnoCong                                -- _1 _2,
+   StrategyCurly                           -- KW["{"] _1 KW["}"],
+   EmptyTupleCong                          -- KW["("] KW[")"],
+   TupleCong                               -- KW["("] _1 KW[","] _2 KW[")"],
+   TupleCong.2:iter-sep                    -- _1 KW[","],
+   ListCongNoTail                          -- KW["["] _1 KW["]"],
+   ListCongNoTail.1:iter-star-sep          -- _1 KW[","],
+   ListCong                                -- KW["["] _1 KW["|"] _2 KW["]"],
+   ListCong.1:iter-star-sep                -- _1 KW[","],
+   ExplodeCong                             -- _1 KW["#"] _2,
+   CallNoArgs                              -- _1,
+   LRule                                   -- KW["\\"] _1 KW["\\"],
+   SRule                                   -- KW["("] _1 KW[")"],
+   Choice                                  -- _1 KW["+"] _2,
+   RChoice                                 -- _1 KW["+>"] _2,
+   CondChoice                              -- KW["if"] _1 KW["then"] _2 KW["else"] _3 KW["end"],
+   IfThen                                  -- KW["if"] _1 KW["then"] _2 KW["end"],
+   SwitchChoiceNoOtherwise                 -- KW["switch"] _1 _2 KW["end"],
+   SwitchChoiceNoOtherwise.2:iter-star     -- _1,
+   SwitchChoice                            -- KW["switch"] _1 _2 KW["otherwise"] KW[":"] _3 KW["end"],
+   SwitchChoice.2:iter-star                -- _1,
+   SwitchCase                              -- KW["case"] _1 KW[":"] _2,
+   AM                                      -- _1 KW["=>"] _2,
+   Assign                                  -- _1 KW[":="] _2,
+   ListVar                                 -- _1,
+   Var                                     -- _1,
+   BuildDefaultPT                          -- KW["_"] _1,
+   BuildDefault                            -- KW["_"] _1,
+   Char                                    -- _1,
+   AnnoList                                -- _1 KW["{"] _2 KW["}"],
+   AnnoList.2:iter-star-sep                -- _1 KW[","],
+   NoAnnoList                              -- _1,
+   App                                     -- KW["<"] _1 KW[">"] _2,
+   App                                     -- KW["<"] _1 KW[">"] _2,
+   RootApp                                 -- _1,
+   RootApp                                 -- _1,
+   Tuple                                   -- KW["("] _1 KW[")"],
+   Tuple.1:iter-star-sep                   -- _1 KW[","],
+   List                                    -- KW["["] _1 KW["]"],
+   List.1:iter-star-sep                    -- _1 KW[","],
+   ListTail                                -- KW["["] _1 KW["|"] _2 KW["]"],
+   ListTail.1:iter-star-sep                -- _1 KW[","],
+   SortList                                -- KW["["] _1 KW["]"],
+   SortList.1:iter-star-sep                -- _1 KW[","],
+   SortListTl                              -- KW["["] _1 KW["|"] _2 KW["]"],
+   SortListTl.1:iter-star-sep              -- _1 KW[","],
+   SortTuple                               -- KW["("] _1 KW[")"],
+   SortTuple.1:iter-star-sep               -- _1 KW[","],
+   Star                                    -- KW["*"],
+   StarStar                                -- KW["**"],
+   Sorts                                   -- V  [H  [KW["sorts"]] _1],
+   Sorts.1:iter-star                       -- _1,
+   Constructors                            -- V  [H  [KW["constructors"]] _1],
+   Constructors.1:iter-star                -- _1,
+   SortVar                                 -- _1,
+   SortNoArgs                              -- _1,
+   Sort                                    -- _1 KW["("] _2 KW[")"],
+   Sort.2:iter-star-sep                    -- _1 KW[","],
+   OpDecl                                  -- _1 KW[":"] _2,
+   OpDeclQ                                 -- _1 KW[":"] _2,
+   OpDeclInj                               -- KW[":"] _1,
+   ExtOpDecl                               -- KW["external"] _1 KW[":"] _2,
+   ExtOpDeclQ                              -- KW["external"] _1 KW[":"] _2,
+   ExtOpDeclInj                            -- KW["external"] KW[":"] _1,
+   ConstType                               -- _1,
+   FunType                                 -- _1 KW["->"] _2,
+   FunType.1:iter-sep                      -- _1 KW["*"],
+   Var                                     -- _1,
+   Wld                                     -- KW["_"],
+   Int                                     -- _1,
+   Real                                    -- _1,
+   Str                                     -- _1,
+   Op                                      -- _1 KW["("] _2 KW[")"],
+   Op.2:iter-star-sep                      -- _1 KW[","],
+   OpQ                                     -- _1 KW["("] _2 KW[")"],
+   OpQ.2:iter-star-sep                     -- _1 KW[","],
+   Explode                                 -- _1 KW["#"] KW["("] _2 KW[")"],
+   Anno                                    -- _1 KW["{^"] _2 KW["}"],
+   As                                      -- _1 KW["@"] _2,
+   As                                      -- _1 KW["@"] _2,
+   SVar                                    -- _1,
+   Let                                     -- KW["let"] _1 KW["in"] _2 KW["end"],
+   Let.1:iter-star                         -- _1,
+   CallT                                   -- _1 KW["("] _2 KW["|"] _3 KW[")"],
+   CallT.2:iter-star-sep                   -- _1 KW[","],
+   CallT.3:iter-star-sep                   -- _1 KW[","],
+   CallDynamic                             -- KW["call"] KW["("] _1 KW["|"] _2 KW["|"] _3 KW[")"],
+   CallDynamic.2:iter-star-sep             -- _1 KW[","],
+   CallDynamic.3:iter-star-sep             -- _1 KW[","],
+   SDefT                                   -- _1 KW["("] _2 KW["|"] _3 KW[")"] KW["="] _4,
+   SDefT.2:iter-star-sep                   -- _1 KW[","],
+   SDefT.3:iter-star-sep                   -- _1 KW[","],
+   ExtSDefInl                              -- KW["external"] _1 KW["("] _2 KW["|"] _3 KW[")"] KW["="] _4,
+   ExtSDefInl.2:iter-star-sep              -- _1 KW[","],
+   ExtSDefInl.3:iter-star-sep              -- _1 KW[","],
+   ExtSDef                                 -- KW["external"] _1 KW["("] _2 KW["|"] _3 KW[")"],
+   ExtSDef.2:iter-star-sep                 -- _1 KW[","],
+   ExtSDef.3:iter-star-sep                 -- _1 KW[","],
+   VarDec                                  -- _1 KW[":"] _2,
+   ParenStrat                              -- KW["("] _1 KW[")"],
+   Fail                                    -- KW["fail"],
+   Id                                      -- KW["id"],
+   Match                                   -- KW["?"] _1,
+   Build                                   -- KW["!"] _1,
+   Scope                                   -- KW["{"] _1 KW[":"] _2 KW["}"],
+   Scope.1:iter-star-sep                   -- _1 KW[","],
+   Seq                                     -- _1 KW[";"] _2,
+   GuardedLChoice                          -- _1 KW["<"] _2 KW["+"] _3,
+   PrimT                                   -- KW["prim"] KW["("] _1 KW[","] _2 KW["|"] _3 KW[")"],
+   PrimT.2:iter-star-sep                   -- _1 KW[","],
+   PrimT.3:iter-star-sep                   -- _1 KW[","],
+   Some                                    -- KW["some"] KW["("] _1 KW[")"],
+   One                                     -- KW["one"] KW["("] _1 KW[")"],
+   All                                     -- KW["all"] KW["("] _1 KW[")"],
+   ImportTerm                              -- KW["import-term"] KW["("] _1 KW[")"],
+   Module                                  -- KW["module"] _1 _2,
+   Module.2:iter-star                      -- _1,
+   Specification                           -- V  [H  [KW["specification"]] _1],
+   Specification.1:iter-star               -- _1,
+   Imports                                 -- V  [H  [KW["imports"]] _1],
+   Imports.1:iter-star                     -- _1,
+   Strategies                              -- V  [H  [KW["strategies"]] _1],
+   Strategies.1:iter-star                  -- _1,
+   Signature                               -- V  [H  [KW["signature"]] _1],
+   Signature.1:iter-star                   -- _1,
+   Import                                  -- _1,
+   Rules                                   -- V  [H  [KW["rules"]] _1],
+   Rules.1:iter-star                       -- _1,
+   Overlays                                -- V  [H  [KW["overlays"]] _1],
+   Overlays.1:iter-star                    -- _1
+]

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/grammars-gen/StrategoJava.tbl
==============================================================================
Binary file. No diff available.

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/example_swjx.broken-context.149.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/example_swjx.broken-context.149.sj	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,230 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+  handle-ref-arg =
+    zip(create-assigns-for-ref-arg-helper <+ ?(_,<expression-to-java-servlet>)) //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name : 
+    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl)
+    with  x_tclass := <ThisTemplateClassName>
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) := a
+    
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/example_swjx.broken-context.150.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/example_swjx.broken-context.150.sj	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,231 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+   //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name:
+    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl)
+    with  if x_tclass := <ThisTemplateClassName> 
+          then e_this := java:expr|[ x_tclass.this ]| //avoid `this` issue when call occurs in an inner class, e.g. used for actions
+          else e_this := java:expr|[ this ]| end
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) := a
+    
\ No newline at end of file

Added: sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/example_swjx.broken-context.152.sj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/Evaluate/testsuites/stratego-java-test/intended-files/example_swjx.broken-context.152.sj	Thu Mar  3 08:19:51 2011	(r22268)
@@ -0,0 +1,232 @@
+module org/webdsl/dsl/to-java-servlet/template-ref-arguments
+
+imports
+  libstratego-lib
+  libjava-front
+  libwebdsl-front
+  libback-end-transformations
+  org/webdsl/dsl/to-java-servlet/core-to-java-servlet
+  org/webdsl/dsl/to-java-servlet/type-utils
+  org/webdsl/dsl/to-java-servlet/java-code
+  org/webdsl/dsl/to-java-servlet/emit-java-local
+  org/webdsl/dsl/to-java-servlet/hibernate-util
+
+rules
+
+  /**
+   *  expects a tuple of two lists, on list with formal arguments 'Arg(nm,srt)' and one list with actual arguments (WebDSL expressions)
+   *  the formal arguments are needed to look up whether a specific argument is a Ref arg, in which case create-assigns-for-ref-arg-helper succeeds
+   *  otherwise the expression can be directly translated to a java expression using expression-to-java-servlet
+   */
+  handle-ref-arg =
+    zip(create-assigns-for-ref-arg-helper <+ ?(_,<expression-to-java-servlet>)) //either put the ref arg exp as the result or keep the old arg exp
+       
+  /*generate-ref-arg-storage-class :
+    e_webdsl -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+  */
+  generate-ref-arg-class-name : 
+    (templatename,e_webdsl) -> <!["RefArg_",templatename];concat-strings;newname>
+  
+rules // case of template var      
+
+  //for passing on refarg don't use regular expression translation, since it will add a call to `get`    
+  create-assigns-for-ref-arg-helper = pass-on-ref-arg
+    
+  pass-on-ref-arg :
+    (Arg(_,RefSort(_)), e_webdsl at Var(x)) -> e|[ x ]|
+    where <has-ref-type> e_webdsl
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at Var(_)) -> e|[ new x_refstorageclass(e_this) ]| //`this` is the template class
+    where not(<has-ref-type> e_webdsl)
+    with  if x_tclass := <ThisTemplateClassName> 
+          then e_this := java:expr|[ x_tclass.this ]| //avoid `this` issue when call occurs in an inner class, e.g. used for actions
+          else e_this := java:expr|[ this ]| end
+    with  x_refstorageclass := <generate-ref-arg-storage-class-template-var> e_webdsl
+      
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <GeneratedRefArgStorageClass> key
+          
+  generate-ref-arg-storage-class-template-var :
+    e_webdsl at Var(_) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype 
+        ; e_webdsl2 := <wrap-exp-in-fieldaccess(|"template")> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl2
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl2,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype))){DirectCollectionReplace()}
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <ThisTemplateClassName>
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class template;
+                public x_refstorageclass(x_class templ){
+                  this.template = templ;
+                }
+                public Object set(Object obj){
+                  bstm
+                  return this;
+                }
+                public Object get(){
+                  return e_java;
+                }
+                public void load(String uuid){}//not used for this case
+                public org.webdsl.WebDSLEntity getEntity(){return null;}
+                public String get_WebDslEntityType(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                public String getUrlString(){return "not supported for this type of reference argument (refers to template variable)";}//not used for this case
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  //no property validation necessary for this type of ref arg
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+    
+  create-webdsl-dummy-var : //construct the var with annotations so it can be translated by exp/stm-to-java
+    x -> Var(x{OriginalNameAnno(x{x})}){TypeAnno(SimpleSort("Object"))}
+  
+  wrap-exp-in-fieldaccess(|name):
+    Var(x){anno*} -> FieldAccess(<create-webdsl-dummy-var> name,x){anno*}
+  wrap-exp-in-fieldaccess(|name):
+    FieldAccess(exp,ident) -> FieldAccess(<wrap-exp-in-fieldaccess(|name)> exp, ident)
+
+/*
+rules //case of object field access
+    
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(_)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_refstorageclass(e_javaobj) ]|
+    where not(<has-ref-type> e_webdsl)
+    with  x_refstorageclass := <generate-ref-arg-storage-class> e_webdsl
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+*/
+
+rules //object field access, page specific rules 
+  
+  create-assigns-for-ref-arg-helper-page-ref-arg = pass-on-ref-arg
+
+  create-assigns-for-ref-arg-helper-page-ref-arg :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ e_javaobj.getId()+"!"+"~classname" ]|
+    where not(<has-ref-type> e_webdsl) 
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+rules //case of object field access, regular and ajax template
+         
+  create-assigns-for-ref-arg-helper :
+    (Arg(_,RefSort(farg_type)), e_webdsl at FieldAccess(e_obj,f)) -> e|[ new x_classname(e_javaobj) ]| 
+    where not(<has-ref-type> e_webdsl)
+    with  classnamefirst := <get-refargclassname-first> e_webdsl
+        ; classnamesecond := <get-refargclassname-second> e_webdsl
+        ; x_classname := <concat-strings> [classnamefirst, classnamesecond]
+        ; <try(generate-ref-arg-storage-class(|x_classname,farg_type))> e_webdsl
+        ; e_javaobj := <expression-to-java-servlet> e_obj
+
+        /* 
+  generate-ref-arg-storage-class :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    with  key := (<ThisTemplateName>,e_webdsl)
+        ; x_refstorageclass := <generate-ref-arg-class-name> key
+        ; <generate-ref-arg-storage-class(|x_refstorageclass)> e_webdsl
+    */
+    
+rules //general rules for creating ref arg class 
+    
+  generate-ref-arg-storage-class(|x_refstorageclass,farg_type) :
+    e_webdsl at FieldAccess(e_object,f) -> x_refstorageclass
+    where key := (<ThisTemplateName>,e_webdsl)
+        ; not(<GeneratedRefArgStorageClass> key)
+    with  srt_webdsltype := <get-type-anno> e_webdsl
+        ; x_type := <java-type-name> srt_webdsltype
+        ; if not(SimpleSort(x_webdslsrtname) := srt_webdsltype) then x_webdslsrtname := "not an entity type" end  
+        ; e_java := <expression-to-java-servlet> e_webdsl
+        ; bstm := <statement-to-java-servlet> Stat(Assignment(e_webdsl,Cast(<create-webdsl-dummy-var> "obj",srt_webdsltype)))
+        ; pkgname2 := <DomainPackage>
+        ; pkgname3 := <TemplatePackage>
+        ; x_class := <get-type-anno;java-type-name> e_object
+        ; (<?Var(x_name)> e_object <+ x_name := <newname> "obj")
+        //;(classnamesecond := <get-refargclassname-second> e_webdsl <+ classnamesecond := "")
+        ; x_domain := <pp-java5-to-string> <DomainPackage>
+        ; x_validatefunction := <get-internal-validate-func-name-int(|f)>
+        ; <emit-java-code-local>
+            compilation-unit|[
+              package pkgname3;
+              import pkgname2.*;
+              import utils.*;
+              @SuppressWarnings("all")
+              public class x_refstorageclass implements utils.RefArg{
+                public x_class x_name;
+                public x_refstorageclass(){//used for page and ajax args
+                }
+                public x_refstorageclass(Object x_name){
+                  this.x_name = (x_class) x_name;
+                }
+                public x_class set(Object obj){
+                  bstm
+                  return x_name;
+                }
+                public Object get(){
+                  return (x_type) e_java;
+                }
+                public void load(String uuid){//used for page and ajax args
+                  if(uuid.contains(":")){ //used for page and ajax args, and argument type "Entity"
+                    x_name = (x_class) utils.PageParamLoad.loadEntityFromParam(e_HibSession,"~x_domain",uuid); 
+                  }
+                  else{
+                    try { 
+                      Class<?> cl = org.hibernate.util.ReflectHelper.classForName("~x_class");
+                      x_name = (x_class) e_HibSession.load(cl, java.util.UUID.fromString(uuid));
+                    } 
+                    catch (ClassNotFoundException cnfe) { 
+                      throw new RuntimeException(cnfe); 
+                    } 
+                  }
+                }
+                public String getUrlString(){
+                  return x_name.getId()+"!"+"~x_refstorageclass";
+                }
+                // only called when the type is defined Entity
+                public String get_WebDslEntityType(){
+                  if(get() == null){ //so it can be used to determine what kind of entity to load in loadEntity
+                    return "~x_webdslsrtname";
+                  }
+                  else{
+                    return ((org.webdsl.WebDSLEntity)get()).get_WebDslEntityType();
+                  }
+                }
+                public org.webdsl.WebDSLEntity getEntity(){
+                  return x_name;
+                }
+                org.webdsl.lang.Environment env = utils.ThreadLocalPage.get().envGlobalAndSession;
+                public void validate(String location, java.util.List<utils.ValidationException> exceptions){
+                  x_domain.ValidationExceptionMultiple vem = new x_domain.ValidationExceptionMultiple();
+                  for(x_domain.ValidationException v : vem.getExceptions()){
+                    exceptions.add(new utils.ValidationException(location,v.getMessage()));
+                  }
+                }
+              }
+            ]|
+        ; rules (GeneratedRefArgStorageClass : key -> x_refstorageclass)
+          
+  
+rules
+  
+  call-to-java-servlet : 
+    Call(a,"getEntity",[]) -> java |[ x_refvar.getEntity() ]|
+    where <has-ref-type> a
+    with  Var(x_refvar) := a
+    
\ No newline at end of file


From R.B.Vermaas at tudelft.nl  Thu Mar  3 09:23:57 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 08:23:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22269 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110303082357.2562C2B802D@mx2.tudelft.nl>

Author: rob
Date: Thu Mar  3 08:23:56 2011
New Revision: 22269
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22269&sc=1

Log:
java-front tests typo

Modified:
   strategoxt/branches/strategoxt-java/build.xml

Modified: strategoxt/branches/strategoxt-java/build.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/build.xml	Thu Mar  3 08:19:51 2011	(r22268)
+++ strategoxt/branches/strategoxt-java/build.xml	Thu Mar  3 08:23:56 2011	(r22269)
@@ -27,7 +27,7 @@
         <for param="strfile" keepgoing="true">
             <path>
                 <fileset dir="libraries" includes="*/tests/*.str" />
-                <fileset dir="java-front" includes="java-front/test/*.str" />
+                <fileset dir="java-front" includes="test/*.str" />
             </path>
             <sequential>
                 <strj-test input="@{strfile}" />


From m.dejonge at tudelft.nl  Thu Mar  3 09:28:16 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 08:28:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22270 -
	sglr-recovery/trunk/Evaluate/src/evaluation_runs
Message-ID: <20110303082816.C64AE108C00C@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 08:28:16 2011
New Revision: 22270
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22270&sc=1

Log:


Modified:
   sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java

Modified: sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java
==============================================================================
--- sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java	Thu Mar  3 08:23:56 2011	(r22269)
+++ sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java	Thu Mar  3 08:28:16 2011	(r22270)
@@ -22,7 +22,8 @@
 	
 	@Test
 	public void test_StrategoJava() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
-		TestRun run=new TestRun("webdsl");
+		//TestRun run=new TestRun("webdsl");
+		TestRun run=new TestRun("stratego-java-test");
 		processFiles(run);
 	}
 
@@ -32,10 +33,10 @@
 			SGLRException, FileNotFoundException {
 		//run.correctInputFiles();
 		Directories.clearAllDirectories();
-		run.setTechnique(Technique.RS_BP_FG);
+		run.setTechnique(Technique.RS_FG);
 		run.setPermissive(Permissive.WC);
-		run.setSuiteName("Test");
-		run.setFilenameFilter(FilenameFilters.getNameFilter("project.auto_incomplete.290.org"));
+		run.setSuiteName("TestX");
+		//run.setFilenameFilter(FilenameFilters.getNameFilter("project.auto_incomplete.290.org"));
 		run.processErrorFiles(0, null);
 	}
 }


From R.B.Vermaas at tudelft.nl  Thu Mar  3 09:28:25 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 08:28:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22271 - hydra/jobs
Message-ID: <20110303082825.3C3522B8005@mx2.tudelft.nl>

Author: rob
Date: Thu Mar  3 08:28:24 2011
New Revision: 22271
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22271&sc=1

Log:
run tests in last bootstrap build

Modified:
   hydra/jobs/strategoxt-java-bootstrap.nix

Modified: hydra/jobs/strategoxt-java-bootstrap.nix
==============================================================================
--- hydra/jobs/strategoxt-java-bootstrap.nix	Thu Mar  3 08:28:16 2011	(r22270)
+++ hydra/jobs/strategoxt-java-bootstrap.nix	Thu Mar  3 08:28:24 2011	(r22271)
@@ -7,41 +7,6 @@
 let
   pkgs = import nixpkgs { system = "i686-linux"; };
 
-  runTests = {subdir, strategoxt ? jobs.bootstrap3, name, preConfigure ? null, src ? strategoxtJava}:
-    pkgs.stdenv.mkDerivation {
-      name = "${name}-tests" ;
-      inherit src;
-      buildInputs = [pkgs.jdk pkgs.strategoPackages.strategoxt pkgs.strategoPackages.sdf];
-      inherit preConfigure;
-      buildPhase = ''
-        export curr=`pwd`
-        cd ${subdir}
-        FAILED=""
-
-        for f in *.str
-        do
-          echo "------------------------------------------------------"
-          echo "Compiling $f"
-          echo "------------------------------------------------------"
-          base=`basename $f .str`
-          outbase=`basename $f .str | sed 's|-|_|g'`
-          java -Xss8m -Xmx1024m -jar ${strategoxt}/share/strc-java/strategoxt.jar -i $f -o $outbase.java -la stratego-lib -m main-$base -la stratego-sglr -la stratego-xtc -la stratego-aterm -la stratego-rtg -la stratego-gpp -I ${strategoxt}/share/box -I $curr -la java-front || FAILED=1
-          javac -cp ${strategoxt}/share/strc-java/strategoxt.jar $outbase.java || FAILED=1
-          java -client -Xverify:none -Xss8m -Xmx1024m -cp ${strategoxt}/share/strc-java/strategoxt.jar:. $outbase || FAILED=1
-        done
-        if test -z "$FAILED"
-        then
-          echo "All tests succeeded"
-        else
-          echo "Some tests failed"
-          exit 1
-        fi
-      '';
-      installPhase = ''
-        ensureDir $out
-      '';
-    };
-
   bootstrap = baseline: nr:
     pkgs.releaseTools.antBuild {
       name = "strategoxt-java-${toString nr}";
@@ -65,7 +30,7 @@
         cd ..
       '';
 
-      antTargets = ["all" "install"];
+      antTargets = ["all" "install"] ++ (pkgs.lib.optional (nr == 3) ["test"]);
       antProperties = [
         { name = "revision"; value = "${toString strategoxtJava.rev}"; }
         { name = "sdf"; value = pkgs.strategoPackages.sdf; }
@@ -88,7 +53,7 @@
     bootstrap2 = bootstrap jobs.bootstrap1 2;
     bootstrap3 = bootstrap jobs.bootstrap2 3;
 
-    tests.stratego_lib   = runTests { subdir = "./libraries/lib/tests";   name = "stratego-lib"; };
+/*
     tests.stratego_sglr  = runTests { subdir = "./libraries/sglr/tests";  name = "stratego-sglr"; 
       preConfigure = ''
         # hack
@@ -108,10 +73,7 @@
         sdf2table -t -i libraries/sglr/tests/Lexical.def -o libraries/sglr/tests/Lexical.tbl
       '';
     };
-    tests.stratego_aterm = runTests { subdir = "./libraries/aterm/tests"; name = "stratego-aterm"; };
-    tests.stratego_gpp   = runTests { subdir = "./libraries/gpp/tests";   name = "stratego-gpp"; };
-    tests.stratego_rtg   = runTests { subdir = "./libraries/rtg/tests";   name = "stratego-rtg"; };
-    tests.java_front = runTests { src = javaFront; subdir = "./test";   name = "java-front"; };
+*/
   };
 in
   jobs


From R.B.Vermaas at tudelft.nl  Thu Mar  3 09:29:37 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 08:29:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22272 - hydra/jobs
Message-ID: <20110303082937.91F6B2B803A@mx2.tudelft.nl>

Author: rob
Date: Thu Mar  3 08:29:37 2011
New Revision: 22272
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22272&sc=1

Log:
typo

Modified:
   hydra/jobs/strategoxt-java-bootstrap.nix

Modified: hydra/jobs/strategoxt-java-bootstrap.nix
==============================================================================
--- hydra/jobs/strategoxt-java-bootstrap.nix	Thu Mar  3 08:28:24 2011	(r22271)
+++ hydra/jobs/strategoxt-java-bootstrap.nix	Thu Mar  3 08:29:37 2011	(r22272)
@@ -30,7 +30,7 @@
         cd ..
       '';
 
-      antTargets = ["all" "install"] ++ (pkgs.lib.optional (nr == 3) ["test"]);
+      antTargets = ["all" "install"] ++ (pkgs.lib.optional (nr == 3) "test");
       antProperties = [
         { name = "revision"; value = "${toString strategoxtJava.rev}"; }
         { name = "sdf"; value = pkgs.strategoPackages.sdf; }


From m.dejonge at tudelft.nl  Thu Mar  3 09:40:54 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 08:40:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22273 -
	sglr-recovery/trunk/Evaluate/src/evaluation_runs
Message-ID: <20110303084054.6E66E2B803A@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 08:40:54 2011
New Revision: 22273
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22273&sc=1

Log:


Modified:
   sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java

Modified: sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java
==============================================================================
--- sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java	Thu Mar  3 08:29:37 2011	(r22272)
+++ sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java	Thu Mar  3 08:40:54 2011	(r22273)
@@ -20,10 +20,15 @@
 
 public class Testing {
 	
+	private static final String TESTRUN_NAME = null; //name of result files, default is <technique>_<grammar>
+	private static final String TESTSUITE = "stratego-java-test";
+	private static final Permissive GRAMMAR = Permissive.WC;
+	private static final Technique TECHNIQUE = Technique.RS_FG;
+
 	@Test
 	public void test_StrategoJava() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
 		//TestRun run=new TestRun("webdsl");
-		TestRun run=new TestRun("stratego-java-test");
+		TestRun run=new TestRun(TESTSUITE);
 		processFiles(run);
 	}
 
@@ -33,9 +38,9 @@
 			SGLRException, FileNotFoundException {
 		//run.correctInputFiles();
 		Directories.clearAllDirectories();
-		run.setTechnique(Technique.RS_FG);
-		run.setPermissive(Permissive.WC);
-		run.setSuiteName("TestX");
+		run.setTechnique(TECHNIQUE);
+		run.setPermissive(GRAMMAR);
+		run.setSuiteName(TESTRUN_NAME);
 		//run.setFilenameFilter(FilenameFilters.getNameFilter("project.auto_incomplete.290.org"));
 		run.processErrorFiles(0, null);
 	}


From R.B.Vermaas at tudelft.nl  Thu Mar  3 09:41:47 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 08:41:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22274 - hydra/jobs
Message-ID: <20110303084147.E087E2B8033@mx2.tudelft.nl>

Author: rob
Date: Thu Mar  3 08:41:47 2011
New Revision: 22274
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22274&sc=1

Log:
use strcjava that works for now

Modified:
   hydra/jobs/strategoxt-java-bootstrap.nix

Modified: hydra/jobs/strategoxt-java-bootstrap.nix
==============================================================================
--- hydra/jobs/strategoxt-java-bootstrap.nix	Thu Mar  3 08:40:54 2011	(r22273)
+++ hydra/jobs/strategoxt-java-bootstrap.nix	Thu Mar  3 08:41:47 2011	(r22274)
@@ -1,11 +1,16 @@
 { nixpkgs ? ../../nixpkgs
 , javaFront ? { outPath = ../../java-front ; rev = 1234; }
-, strategoxtJavaBackend ? { outPath = ../../strategoxt-java-backend ; rev = 1234; }
+#, strategoxtJavaBackend ? { outPath = ../../strategoxt-java-backend ; rev = 1234; }
 , strategoxtJava ? { outPath = ../../strategoxt-java ; rev = 1234; }
 , hydraConfig ? ../.
 } :
 let
   pkgs = import nixpkgs { system = "i686-linux"; };
+  strategoxtJavaBackend = pkgs.fetchsvn {
+    url = https://svn.strategoxt.org/repos/StrategoXT/strategoxt-java-backend/trunk;
+    rev = 22230;
+    sha256 = "0d49aihzqn9ylgjdq4v2vrrzwql9pabwirssgz9jmk0df1bvcs0c";
+  };
 
   bootstrap = baseline: nr:
     pkgs.releaseTools.antBuild {


From R.B.Vermaas at tudelft.nl  Thu Mar  3 10:26:48 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 09:26:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22275 - in
	strategoxt-java-backend/trunk/test: basic strc2
Message-ID: <20110303092648.CB5DA2B8005@mx2.tudelft.nl>

Author: rob
Date: Thu Mar  3 09:26:48 2011
New Revision: 22275
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22275&sc=1

Log:
do not use imports of SSL compat modules, use libstratego-lib in stead of stratego-lib

Modified:
   strategoxt-java-backend/trunk/test/basic/build_0.str
   strategoxt-java-backend/trunk/test/basic/lchoice_1.str
   strategoxt-java-backend/trunk/test/basic/lchoice_2.str
   strategoxt-java-backend/trunk/test/strc2/assignment.str
   strategoxt-java-backend/trunk/test/strc2/conditional_innermost.str
   strategoxt-java-backend/trunk/test/strc2/higher_order_arg.str

Modified: strategoxt-java-backend/trunk/test/basic/build_0.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/build_0.str	Thu Mar  3 08:41:47 2011	(r22274)
+++ strategoxt-java-backend/trunk/test/basic/build_0.str	Thu Mar  3 09:26:48 2011	(r22275)
@@ -1,6 +1,6 @@
 module build_0
 imports
-  stratego-lib
+  libstratego-lib
 
 signature
   constructors

Modified: strategoxt-java-backend/trunk/test/basic/lchoice_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/lchoice_1.str	Thu Mar  3 08:41:47 2011	(r22274)
+++ strategoxt-java-backend/trunk/test/basic/lchoice_1.str	Thu Mar  3 09:26:48 2011	(r22275)
@@ -1,6 +1,6 @@
 module lchoice_1
 imports
-  stratego-lib
+  libstratego-lib
 
 strategies
 

Modified: strategoxt-java-backend/trunk/test/basic/lchoice_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/lchoice_2.str	Thu Mar  3 08:41:47 2011	(r22274)
+++ strategoxt-java-backend/trunk/test/basic/lchoice_2.str	Thu Mar  3 09:26:48 2011	(r22275)
@@ -1,6 +1,6 @@
 module lchoice_2
 imports
-  stratego-lib
+  libstratego-lib
 
 strategies
 

Modified: strategoxt-java-backend/trunk/test/strc2/assignment.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/assignment.str	Thu Mar  3 08:41:47 2011	(r22274)
+++ strategoxt-java-backend/trunk/test/strc2/assignment.str	Thu Mar  3 09:26:48 2011	(r22275)
@@ -1,5 +1,5 @@
 module assignment
-imports list-cons
+imports libstratego-lib
 signature
   constructors
     A : Term
@@ -12,4 +12,4 @@
 
   s = ?G(x); !F(x,x)
 
-  bla = s => F(x, y)
\ No newline at end of file
+  bla = s => F(x, y)

Modified: strategoxt-java-backend/trunk/test/strc2/conditional_innermost.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/conditional_innermost.str	Thu Mar  3 08:41:47 2011	(r22274)
+++ strategoxt-java-backend/trunk/test/strc2/conditional_innermost.str	Thu Mar  3 09:26:48 2011	(r22275)
@@ -1,5 +1,5 @@
 module conditional-innermost
-imports list-cons
+imports collection/list/cons
 signature
   sorts Nat
   constructors
@@ -30,4 +30,4 @@
 
 strategies
 
-  main = innermost(A + B)
\ No newline at end of file
+  main = innermost(A + B)

Modified: strategoxt-java-backend/trunk/test/strc2/higher_order_arg.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/higher_order_arg.str	Thu Mar  3 08:41:47 2011	(r22274)
+++ strategoxt-java-backend/trunk/test/strc2/higher_order_arg.str	Thu Mar  3 09:26:48 2011	(r22275)
@@ -1,5 +1,5 @@
 module higher-order-arg
-imports list-cons
+imports collection/list/cons
 
 strategies
 


From R.B.Vermaas at tudelft.nl  Thu Mar  3 10:35:54 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 09:35:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22276 - in
	strategoxt-java-backend/trunk/test: . aster basic parallel
	sglr strc1 strc2
Message-ID: <20110303093554.C0A1D2B803E@mx2.tudelft.nl>

Author: rob
Date: Thu Mar  3 09:35:54 2011
New Revision: 22276
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22276&sc=1

Log:
rename all strc tests' main strategies to main-<basename>

Modified:
   strategoxt-java-backend/trunk/test/Makefile.am
   strategoxt-java-backend/trunk/test/aster/test_attributes.str
   strategoxt-java-backend/trunk/test/basic/annos_1.str
   strategoxt-java-backend/trunk/test/basic/annos_2.str
   strategoxt-java-backend/trunk/test/basic/build_0.str
   strategoxt-java-backend/trunk/test/basic/build_1.str
   strategoxt-java-backend/trunk/test/basic/build_2.str
   strategoxt-java-backend/trunk/test/basic/build_3.str
   strategoxt-java-backend/trunk/test/basic/chars_1.str
   strategoxt-java-backend/trunk/test/basic/dynrules_1.str
   strategoxt-java-backend/trunk/test/basic/dynrules_2.str
   strategoxt-java-backend/trunk/test/basic/dynrules_3.str
   strategoxt-java-backend/trunk/test/basic/dynrules_4.str
   strategoxt-java-backend/trunk/test/basic/dynrules_5.str
   strategoxt-java-backend/trunk/test/basic/extend_1.str
   strategoxt-java-backend/trunk/test/basic/fetch_1.str
   strategoxt-java-backend/trunk/test/basic/gchoice_1.str
   strategoxt-java-backend/trunk/test/basic/gchoice_2.str
   strategoxt-java-backend/trunk/test/basic/internal_1.str
   strategoxt-java-backend/trunk/test/basic/internal_2.str
   strategoxt-java-backend/trunk/test/basic/iset_1.str
   strategoxt-java-backend/trunk/test/basic/iset_2.str
   strategoxt-java-backend/trunk/test/basic/lchoice_1.str
   strategoxt-java-backend/trunk/test/basic/lchoice_2.str
   strategoxt-java-backend/trunk/test/basic/mapconcat_1.str
   strategoxt-java-backend/trunk/test/basic/match_1.str
   strategoxt-java-backend/trunk/test/basic/match_2.str
   strategoxt-java-backend/trunk/test/basic/match_3.str
   strategoxt-java-backend/trunk/test/basic/match_4.str
   strategoxt-java-backend/trunk/test/basic/match_5.str
   strategoxt-java-backend/trunk/test/basic/override_1.str
   strategoxt-java-backend/trunk/test/basic/pp_java5_to_string.str
   strategoxt-java-backend/trunk/test/basic/readterm_1.str
   strategoxt-java-backend/trunk/test/basic/scopes_1.str
   strategoxt-java-backend/trunk/test/basic/scopes_2.str
   strategoxt-java-backend/trunk/test/basic/shared_var_1.str
   strategoxt-java-backend/trunk/test/basic/shared_var_2.str
   strategoxt-java-backend/trunk/test/basic/shared_var_3.str
   strategoxt-java-backend/trunk/test/basic/shared_var_4.str
   strategoxt-java-backend/trunk/test/basic/shared_var_5.str
   strategoxt-java-backend/trunk/test/basic/traversal_1.str
   strategoxt-java-backend/trunk/test/parallel/strc_desugar.str
   strategoxt-java-backend/trunk/test/sglr/asfix_anno_location_tests.str
   strategoxt-java-backend/trunk/test/sglr/entities.str
   strategoxt-java-backend/trunk/test/strc1/cs_test01.str
   strategoxt-java-backend/trunk/test/strc1/cs_test02.str
   strategoxt-java-backend/trunk/test/strc1/cs_test03.str
   strategoxt-java-backend/trunk/test/strc1/cs_test04.str
   strategoxt-java-backend/trunk/test/strc1/io_test1.str
   strategoxt-java-backend/trunk/test/strc1/io_test10.str
   strategoxt-java-backend/trunk/test/strc1/io_test11.str
   strategoxt-java-backend/trunk/test/strc1/io_test2.str
   strategoxt-java-backend/trunk/test/strc1/io_test3.str
   strategoxt-java-backend/trunk/test/strc1/io_test4.str
   strategoxt-java-backend/trunk/test/strc1/let_test.str
   strategoxt-java-backend/trunk/test/strc1/nested_defs01.str
   strategoxt-java-backend/trunk/test/strc1/qcons_test01.str
   strategoxt-java-backend/trunk/test/strc1/qcons_test02.str
   strategoxt-java-backend/trunk/test/strc1/qcons_test03.str
   strategoxt-java-backend/trunk/test/strc1/qcons_test04.str
   strategoxt-java-backend/trunk/test/strc1/test01.str
   strategoxt-java-backend/trunk/test/strc1/test02.str
   strategoxt-java-backend/trunk/test/strc1/test03.str
   strategoxt-java-backend/trunk/test/strc1/test04.str
   strategoxt-java-backend/trunk/test/strc1/test05.str
   strategoxt-java-backend/trunk/test/strc1/test06.str
   strategoxt-java-backend/trunk/test/strc1/test07.str
   strategoxt-java-backend/trunk/test/strc1/test08.str
   strategoxt-java-backend/trunk/test/strc1/test09.str
   strategoxt-java-backend/trunk/test/strc1/test10.str
   strategoxt-java-backend/trunk/test/strc1/test100.str
   strategoxt-java-backend/trunk/test/strc1/test101.str
   strategoxt-java-backend/trunk/test/strc1/test102.str
   strategoxt-java-backend/trunk/test/strc1/test103.str
   strategoxt-java-backend/trunk/test/strc1/test104.str
   strategoxt-java-backend/trunk/test/strc1/test105.str
   strategoxt-java-backend/trunk/test/strc1/test106.str
   strategoxt-java-backend/trunk/test/strc1/test107.str
   strategoxt-java-backend/trunk/test/strc1/test108.str
   strategoxt-java-backend/trunk/test/strc1/test109.str
   strategoxt-java-backend/trunk/test/strc1/test11.str
   strategoxt-java-backend/trunk/test/strc1/test110.str
   strategoxt-java-backend/trunk/test/strc1/test111.str
   strategoxt-java-backend/trunk/test/strc1/test112.str
   strategoxt-java-backend/trunk/test/strc1/test113.str
   strategoxt-java-backend/trunk/test/strc1/test114.str
   strategoxt-java-backend/trunk/test/strc1/test12.str
   strategoxt-java-backend/trunk/test/strc1/test13.str
   strategoxt-java-backend/trunk/test/strc1/test14.str
   strategoxt-java-backend/trunk/test/strc1/test15.str
   strategoxt-java-backend/trunk/test/strc1/test16.str
   strategoxt-java-backend/trunk/test/strc1/test17.str
   strategoxt-java-backend/trunk/test/strc1/test18.str
   strategoxt-java-backend/trunk/test/strc1/test19.str
   strategoxt-java-backend/trunk/test/strc1/test20.str
   strategoxt-java-backend/trunk/test/strc1/test21.str
   strategoxt-java-backend/trunk/test/strc1/test22.str
   strategoxt-java-backend/trunk/test/strc1/test23.str
   strategoxt-java-backend/trunk/test/strc1/test24.str
   strategoxt-java-backend/trunk/test/strc1/test25.str
   strategoxt-java-backend/trunk/test/strc1/test27.str
   strategoxt-java-backend/trunk/test/strc1/test28.str
   strategoxt-java-backend/trunk/test/strc1/test28a.str
   strategoxt-java-backend/trunk/test/strc1/test28b.str
   strategoxt-java-backend/trunk/test/strc1/test29.str
   strategoxt-java-backend/trunk/test/strc1/test30.str
   strategoxt-java-backend/trunk/test/strc1/test31.str
   strategoxt-java-backend/trunk/test/strc1/test32.str
   strategoxt-java-backend/trunk/test/strc1/test33.str
   strategoxt-java-backend/trunk/test/strc1/test34.str
   strategoxt-java-backend/trunk/test/strc1/test35.str
   strategoxt-java-backend/trunk/test/strc1/test36.str
   strategoxt-java-backend/trunk/test/strc1/test37.str
   strategoxt-java-backend/trunk/test/strc1/test38.str
   strategoxt-java-backend/trunk/test/strc1/test39.str
   strategoxt-java-backend/trunk/test/strc1/test40.str
   strategoxt-java-backend/trunk/test/strc1/test41.str
   strategoxt-java-backend/trunk/test/strc1/test43.str
   strategoxt-java-backend/trunk/test/strc1/test44.str
   strategoxt-java-backend/trunk/test/strc1/test45.str
   strategoxt-java-backend/trunk/test/strc1/test46.str
   strategoxt-java-backend/trunk/test/strc1/test47.str
   strategoxt-java-backend/trunk/test/strc1/test48.str
   strategoxt-java-backend/trunk/test/strc1/test49.str
   strategoxt-java-backend/trunk/test/strc1/test50.str
   strategoxt-java-backend/trunk/test/strc1/test51.str
   strategoxt-java-backend/trunk/test/strc1/test53.str
   strategoxt-java-backend/trunk/test/strc1/test54.str
   strategoxt-java-backend/trunk/test/strc1/test56.str
   strategoxt-java-backend/trunk/test/strc1/test57.str
   strategoxt-java-backend/trunk/test/strc1/test58.str
   strategoxt-java-backend/trunk/test/strc1/test59.str
   strategoxt-java-backend/trunk/test/strc1/test60.str
   strategoxt-java-backend/trunk/test/strc1/test61.str
   strategoxt-java-backend/trunk/test/strc1/test62.str
   strategoxt-java-backend/trunk/test/strc1/test63.str
   strategoxt-java-backend/trunk/test/strc1/test64.str
   strategoxt-java-backend/trunk/test/strc1/test65.str
   strategoxt-java-backend/trunk/test/strc1/test67.str
   strategoxt-java-backend/trunk/test/strc1/test68.str
   strategoxt-java-backend/trunk/test/strc1/test69.str
   strategoxt-java-backend/trunk/test/strc1/test70.str
   strategoxt-java-backend/trunk/test/strc1/test72.str
   strategoxt-java-backend/trunk/test/strc1/test73.str
   strategoxt-java-backend/trunk/test/strc1/test74.str
   strategoxt-java-backend/trunk/test/strc1/test75.str
   strategoxt-java-backend/trunk/test/strc1/test76.str
   strategoxt-java-backend/trunk/test/strc1/test77.str
   strategoxt-java-backend/trunk/test/strc1/test78.str
   strategoxt-java-backend/trunk/test/strc1/test79.str
   strategoxt-java-backend/trunk/test/strc1/test80.str
   strategoxt-java-backend/trunk/test/strc1/test81.str
   strategoxt-java-backend/trunk/test/strc1/test82.str
   strategoxt-java-backend/trunk/test/strc1/test83.str
   strategoxt-java-backend/trunk/test/strc1/test84.str
   strategoxt-java-backend/trunk/test/strc1/test85.str
   strategoxt-java-backend/trunk/test/strc1/test86.str
   strategoxt-java-backend/trunk/test/strc1/test87.str
   strategoxt-java-backend/trunk/test/strc1/test88.str
   strategoxt-java-backend/trunk/test/strc1/test89.str
   strategoxt-java-backend/trunk/test/strc1/test90.str
   strategoxt-java-backend/trunk/test/strc1/test91.str
   strategoxt-java-backend/trunk/test/strc1/test92.str
   strategoxt-java-backend/trunk/test/strc1/test93.str
   strategoxt-java-backend/trunk/test/strc1/test94.str
   strategoxt-java-backend/trunk/test/strc1/test95.str
   strategoxt-java-backend/trunk/test/strc1/test96.str
   strategoxt-java-backend/trunk/test/strc1/test97.str
   strategoxt-java-backend/trunk/test/strc1/test98.str
   strategoxt-java-backend/trunk/test/strc1/test99.str
   strategoxt-java-backend/trunk/test/strc1/test_chain01.str
   strategoxt-java-backend/trunk/test/strc1/test_chain02.str
   strategoxt-java-backend/trunk/test/strc1/test_chain03.str
   strategoxt-java-backend/trunk/test/strc2/arity_test.str
   strategoxt-java-backend/trunk/test/strc2/as_pattern.str
   strategoxt-java-backend/trunk/test/strc2/assignment.str
   strategoxt-java-backend/trunk/test/strc2/comment_test.str
   strategoxt-java-backend/trunk/test/strc2/conditional_innermost.str
   strategoxt-java-backend/trunk/test/strc2/congruence_arguments.str
   strategoxt-java-backend/trunk/test/strc2/congruence_thread.str
   strategoxt-java-backend/trunk/test/strc2/dynamic_rules_test.str
   strategoxt-java-backend/trunk/test/strc2/empty_sections.str
   strategoxt-java-backend/trunk/test/strc2/flatten_test.str
   strategoxt-java-backend/trunk/test/strc2/higher_order_arg.str
   strategoxt-java-backend/trunk/test/strc2/implicit_var_decl.str
   strategoxt-java-backend/trunk/test/strc2/improper_list_test.str
   strategoxt-java-backend/trunk/test/strc2/innermost_pure.str
   strategoxt-java-backend/trunk/test/strc2/match_arity.str
   strategoxt-java-backend/trunk/test/strc2/match_automaton_test.str
   strategoxt-java-backend/trunk/test/strc2/mkterm.str
   strategoxt-java-backend/trunk/test/strc2/number_syntax_test.str
   strategoxt-java-backend/trunk/test/strc2/number_test.str
   strategoxt-java-backend/trunk/test/strc2/occan.str
   strategoxt-java-backend/trunk/test/strc2/overlay_test.str
   strategoxt-java-backend/trunk/test/strc2/overlay_test_b.str
   strategoxt-java-backend/trunk/test/strc2/overloading.str
   strategoxt-java-backend/trunk/test/strc2/overloading_constructors_test.str
   strategoxt-java-backend/trunk/test/strc2/prop.str
   strategoxt-java-backend/trunk/test/strc2/rename_test.str
   strategoxt-java-backend/trunk/test/strc2/tail.str
   strategoxt-java-backend/trunk/test/strc2/thread_test.str
   strategoxt-java-backend/trunk/test/strc2/traversal_test.str
   strategoxt-java-backend/trunk/test/strc2/twice.str
   strategoxt-java-backend/trunk/test/strc2/unification_test.str

Modified: strategoxt-java-backend/trunk/test/Makefile.am
==============================================================================
--- strategoxt-java-backend/trunk/test/Makefile.am	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/Makefile.am	Thu Mar  3 09:35:54 2011	(r22276)
@@ -109,7 +109,7 @@
 	aster -i $< -o $@
 
 %.java : %.ctree ../trans/strj
-	../trans/strj --verbose 2 -i $< -o $@ -la stratego-lib -la java-front -la stratego-sglr -I $(STRATEGOXT)/share/sdf/stratego-front -I strc1 -I sglr -I parallel -la strc `if echo $< | grep parallel >/dev/null; then echo -la stratego-parallel; fi`
+	../trans/strj --verbose 2 -i $< -o $@ -m main-`basename $< .str` -la stratego-lib -la java-front -la stratego-sglr -I $(STRATEGOXT)/share/sdf/stratego-front -I strc1 -I sglr -I parallel -la strc `if echo $< | grep parallel >/dev/null; then echo -la stratego-parallel; fi`
 
 %.class : %.java
 	$(JAVAC) $(JAVACFLAGS) $<

Modified: strategoxt-java-backend/trunk/test/aster/test_attributes.str
==============================================================================
--- strategoxt-java-backend/trunk/test/aster/test_attributes.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/aster/test_attributes.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -14,7 +14,7 @@
 
 
 strategies
-  main =
+  main-test_attributes =
     option-wrap(
       verbose-option
     , test-suite(

Modified: strategoxt-java-backend/trunk/test/basic/annos_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/annos_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/annos_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 strategies
 
-  main =
+  main-annos_1 =
     ![1 | [2,3]{4}]
   ; one(inc); debug(!1)
   ; ?[2 | [2,3]{4}]; debug(!2)

Modified: strategoxt-java-backend/trunk/test/basic/annos_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/annos_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/annos_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,7 +8,7 @@
 
 strategies
 
-  main =
+  main-annos_2 =
     test-strings
   ; test-vars
   

Modified: strategoxt-java-backend/trunk/test/basic/build_0.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/build_0.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/build_0.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,4 +8,4 @@
 
 strategies
 
-  main = !Foo(1,2)
+  main-build_0 = !Foo(1,2)

Modified: strategoxt-java-backend/trunk/test/basic/build_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/build_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/build_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,7 +9,7 @@
 
 strategies
 
-  main = 
+  main-build_1 = 
     !("module1", 
       [Module("module3",[Imports(["module1"]),Content("module3")]),
        Module("module2",[Imports([]),Content("module2")]),

Modified: strategoxt-java-backend/trunk/test/basic/build_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/build_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/build_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 strategies
 
-  main =
+  main-build_2 =
     !Some("a"){1, 2}
     ; try(\Some(s){ts*} -> Some(s){Some(ts*)}\)
     ; ?Some("a"){Some([1,2])}

Modified: strategoxt-java-backend/trunk/test/basic/build_3.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/build_3.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/build_3.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,7 +9,7 @@
 
 strategies
 
-  main =
+  main-build_3 =
     !""#([1,2]) => (1,2);
     !Foo(1,2); to-foo2; debug => Foo2(1,2)
   

Modified: strategoxt-java-backend/trunk/test/basic/chars_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/chars_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/chars_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -6,7 +6,7 @@
 
 rules
 
-  main =
+  main-chars_1 =
     !"??";
     explode-string;
     implode-string; debug => "??";

Modified: strategoxt-java-backend/trunk/test/basic/dynrules_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/dynrules_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/dynrules_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-dynrules_1 =
      !Some(1); ?x; rules(Rule: Some(2) -> 2 Rule: x -> 1)
    ; !Some(2); Rule; debug
    ; !Some(1); Rule; debug

Modified: strategoxt-java-backend/trunk/test/basic/dynrules_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/dynrules_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/dynrules_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,5 +5,5 @@
 
 rules
 
-  main =
+  main-dynrules_2 =
      rules(Foo :+= 1 Foo :+=2); bagof-Foo

Modified: strategoxt-java-backend/trunk/test/basic/dynrules_3.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/dynrules_3.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/dynrules_3.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-dynrules_3 =
      rules(Foo+1 := 1)
    ; {| Foo:
        rules(Foo+2 := 2)

Modified: strategoxt-java-backend/trunk/test/basic/dynrules_4.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/dynrules_4.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/dynrules_4.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-dynrules_4 =
      rules(
        Foo: Some("2") -> 1
        Foo: None()    -> None()

Modified: strategoxt-java-backend/trunk/test/basic/dynrules_5.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/dynrules_5.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/dynrules_5.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-dynrules_5 =
      rules(
        Foo :+ Some("2") -> 1
        Foo :+ None()    -> None()

Modified: strategoxt-java-backend/trunk/test/basic/extend_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/extend_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/extend_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-extend_1 =
     <cify> "foo-bar" => "foo_bar"
   ; <cify> "foosbar" => "foobar"
     

Modified: strategoxt-java-backend/trunk/test/basic/fetch_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/fetch_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/fetch_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,5 +5,5 @@
 
 rules
 
-  main =
+  main-fetch_1 =
      ![1,2,3]; fetch(inc) => [2,2,3]

Modified: strategoxt-java-backend/trunk/test/basic/gchoice_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/gchoice_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/gchoice_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,6 +9,6 @@
 
 rules
 
-  main =
+  main-gchoice_1 =
     (id < id + ?never)
   ; not(!never)

Modified: strategoxt-java-backend/trunk/test/basic/gchoice_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/gchoice_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/gchoice_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,7 +9,7 @@
 
 rules
 
-  main =
+  main-gchoice_2 =
     not(
       id
       < (id < fail + !3)

Modified: strategoxt-java-backend/trunk/test/basic/internal_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/internal_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/internal_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-internal_1 =
     <cify> "foo-bar" => "foo_bar"
   ; not(<cify> "foosbar" => "foobar")
   ; <Cify(id)> ['s'] => []

Modified: strategoxt-java-backend/trunk/test/basic/internal_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/internal_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/internal_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main = privaat
+  main-internal_2 = privaat
     
   internal privaat = debug
 

Modified: strategoxt-java-backend/trunk/test/basic/iset_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/iset_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/iset_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,6 +4,6 @@
 
 strategies
 
-  main =
+  main-iset_1 =
     new-iset
   ; iset-add(|1)

Modified: strategoxt-java-backend/trunk/test/basic/iset_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/iset_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/iset_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 strategies
 
-  main =
+  main-iset_2 =
     set := <new-iset>
   ; iset-add(|1)
   ; iset-clear

Modified: strategoxt-java-backend/trunk/test/basic/lchoice_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/lchoice_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/lchoice_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,4 +4,4 @@
 
 strategies
 
-  main = id < !0 + !1
+  main-lchoice_1 = id < !0 + !1

Modified: strategoxt-java-backend/trunk/test/basic/lchoice_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/lchoice_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/lchoice_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,4 +4,4 @@
 
 strategies
 
-  main = fail < !0 + !1
+  main-lchoice_2 = fail < !0 + !1

Modified: strategoxt-java-backend/trunk/test/basic/mapconcat_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/mapconcat_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/mapconcat_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 strategies
 
-  main =
+  main-mapconcat_1 =
     ![1,2,3]
   ; mapconcat(![<id>]) => [1,2,3]
 

Modified: strategoxt-java-backend/trunk/test/basic/match_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/match_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/match_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-match_1 =
     b := "foo"{2}
   ; c := "foo"{2}
   ; !b

Modified: strategoxt-java-backend/trunk/test/basic/match_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/match_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/match_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,5 +9,5 @@
 
 rules
 
-  main = !1; (?Foo() <+ ?Bar() <+ ?1)
+  main-match_2 = !1; (?Foo() <+ ?Bar() <+ ?1)
   

Modified: strategoxt-java-backend/trunk/test/basic/match_3.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/match_3.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/match_3.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 rules
 
-  main =
+  main-match_3 =
     x := 1
   ; y := x
   ; z := y

Modified: strategoxt-java-backend/trunk/test/basic/match_4.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/match_4.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/match_4.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 strategies
 
-  main =
+  main-match_4 =
     a := 1
   ; b := 2
   ; not(?a)

Modified: strategoxt-java-backend/trunk/test/basic/match_5.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/match_5.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/match_5.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 strategies
 
-  main =
+  main-match_5 =
     x := 0
   ; !1
   ; switch !x

Modified: strategoxt-java-backend/trunk/test/basic/override_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/override_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/override_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-override_1 =
     not(<cify> "foo-bar" => "foo_bar")
   ; <cify> "foosbar" => "foobar"
     

Modified: strategoxt-java-backend/trunk/test/basic/pp_java5_to_string.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/pp_java5_to_string.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/pp_java5_to_string.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 rules
 
-  main =
+  main-pp_java5_to_string =
     !CompilationUnit(None,[],[ClassDec(ClassDecHead([],Id("Foo"),None,None,None),ClassBody([]))])
   ; pp-java5-to-string
   ; is-string

Modified: strategoxt-java-backend/trunk/test/basic/readterm_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/readterm_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/readterm_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 strategies
   
-  main =
+  main-readterm_1 =
     t := Some([1,2{3}]{4}){5};
     debug(!"Writing ");
     <WriteToTextFile> ("readterm_1.trm", t);

Modified: strategoxt-java-backend/trunk/test/basic/scopes_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/scopes_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/scopes_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 rules
 
-  main =
+  main-scopes_1 =
     { x:
       { y:
         y := <debug> 1;

Modified: strategoxt-java-backend/trunk/test/basic/scopes_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/scopes_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/scopes_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 rules
 
-  main =
+  main-scopes_2 =
     { x:
       if debug then
         { y:

Modified: strategoxt-java-backend/trunk/test/basic/shared_var_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/shared_var_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/shared_var_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-shared_var_1 =
     let
       a = x := 1
       b = !x

Modified: strategoxt-java-backend/trunk/test/basic/shared_var_2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/shared_var_2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/shared_var_2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-shared_var_2 =
     let
       a = b
       b = x := 1

Modified: strategoxt-java-backend/trunk/test/basic/shared_var_3.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/shared_var_3.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/shared_var_3.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 rules
 
-  main =
+  main-shared_var_3 =
     let
       a = map(b); ?x
       b = ?y

Modified: strategoxt-java-backend/trunk/test/basic/shared_var_4.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/shared_var_4.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/shared_var_4.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 
 strategies
 
-  main = rtg-remove-injection-rules
+  main-shared_var_4 = rtg-remove-injection-rules
 
   rtg-remove-injection-rules =
       let

Modified: strategoxt-java-backend/trunk/test/basic/shared_var_5.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/shared_var_5.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/shared_var_5.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -6,7 +6,7 @@
 
 strategies
 
-  main =
+  main-shared_var_5 =
       let
         a = ?x; b; a
         b = not(?x); a; b

Modified: strategoxt-java-backend/trunk/test/basic/traversal_1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/basic/traversal_1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/basic/traversal_1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
 
 strategies
 
-  main =
+  main-traversal_1 =
     !Fork(Fork(2,5), 7)
   ; oncetd(inc)
   ; ?Fork(Fork(3,5), 7)

Modified: strategoxt-java-backend/trunk/test/parallel/strc_desugar.str
==============================================================================
--- strategoxt-java-backend/trunk/test/parallel/strc_desugar.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/parallel/strc_desugar.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
 
 strategies
   
-  main =
+  main-strc_desugar =
     <set-config> ("--statistics", 1);
     <set-config> ("-O", 3);
     // import-term(libstrc.ptree);

Modified: strategoxt-java-backend/trunk/test/sglr/asfix_anno_location_tests.str
==============================================================================
--- strategoxt-java-backend/trunk/test/sglr/asfix_anno_location_tests.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/sglr/asfix_anno_location_tests.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -12,7 +12,7 @@
 
 strategies
 
-  main =
+  main-asfix_anno_location_tests =
     test-suite(!"asfix-anno-location",
       asfix-anno-location-tests
     )

Modified: strategoxt-java-backend/trunk/test/sglr/entities.str
==============================================================================
--- strategoxt-java-backend/trunk/test/sglr/entities.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/sglr/entities.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
 
 rules
 
-  main =
+  main-entities =
     <parse-file> "Entities.ent"
   
   parse-file =

Modified: strategoxt-java-backend/trunk/test/strc1/cs_test01.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/cs_test01.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/cs_test01.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports Expressions libstratego-lib
 strategies
   
-  main = 
+  main-cs_test01 = 
     test-suite(!"cs-test01",
 	  test1(A1 | "test1 - A1")
 	; test1(A2 | "test1 - A2")

Modified: strategoxt-java-backend/trunk/test/strc1/cs_test02.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/cs_test02.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/cs_test02.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports AsFix libstratego-lib
 strategies
 
-  main =
+  main-cs_test02 =
     test-suite(!"cs-test02", tests)
 
   tests = 

Modified: strategoxt-java-backend/trunk/test/strc1/cs_test03.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/cs_test03.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/cs_test03.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports AsFix libstratego-lib
 strategies
 
-  main =
+  main-cs_test03 =
     test-suite(!"cs-test03", tests)
 
   tests = 

Modified: strategoxt-java-backend/trunk/test/strc1/cs_test04.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/cs_test04.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/cs_test04.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports Expressions libstratego-lib
 strategies
 
-  main =
+  main-cs_test04 =
     test-suite(!"cs-test04", tests)
 
   tests = 

Modified: strategoxt-java-backend/trunk/test/strc1/io_test1.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/io_test1.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/io_test1.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,6 +3,6 @@
 
 strategies
 
-   main = debug
+   main-io_test1 = debug
 
 

Modified: strategoxt-java-backend/trunk/test/strc1/io_test10.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/io_test10.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/io_test10.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -16,6 +16,6 @@
   eval = 
     innermost(A + B)
 
-  main = 
+  main-io_test10 = 
     <conc>(<id>, ["-i", "io-test10.in", "-o", "io-test10.out"])
     ; io-wrap(eval)

Modified: strategoxt-java-backend/trunk/test/strc1/io_test11.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/io_test11.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/io_test11.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -25,6 +25,6 @@
   eval = 
     my-innermost(A + B)
 
-  main = 
+  main-io_test11 = 
     <conc>(<id>, ["-i", "io-test11.in", "-o", "io-test11.out"])
     ; io-wrap(eval)

Modified: strategoxt-java-backend/trunk/test/strc1/io_test2.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/io_test2.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/io_test2.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,6 +3,6 @@
 
 strategies
 
-  main = 
+  main-io_test2 = 
     <conc>(<id>, ["-i", "io-test10.in", "-o", "io-test10.out"])
     ; io-wrap(id)

Modified: strategoxt-java-backend/trunk/test/strc1/io_test3.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/io_test3.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/io_test3.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-  main = 
+  main-io_test3 = 
     <conc>(<id>, ["-i", "io-test2.in", "-o", "io-test2.out"])
     ; parse-options(io-options)
     ; debug 

Modified: strategoxt-java-backend/trunk/test/strc1/io_test4.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/io_test4.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/io_test4.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
  
 strategies 
 
-  main = 
+  main-io_test4 = 
     <conc>(<id>, ["-i", "io-test4.in", "-o", "io-test4.out"])
     ; io-wrap( 
         ?x

Modified: strategoxt-java-backend/trunk/test/strc1/let_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/let_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/let_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-  main = let-test
+  main-let_test = let-test
 
   let-test = 
     test-suite(

Modified: strategoxt-java-backend/trunk/test/strc1/nested_defs01.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/nested_defs01.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/nested_defs01.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-  main = 
+  main-nested_defs01 = 
     <test1> ("a", "b") => ("b", "a")
 
   seq(s1, s2) = 

Modified: strategoxt-java-backend/trunk/test/strc1/qcons_test01.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/qcons_test01.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/qcons_test01.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -6,7 +6,7 @@
 
 strategies
 
-  main =
+  main-qcons_test01 =
     !"aap"(1)
 
 signature

Modified: strategoxt-java-backend/trunk/test/strc1/qcons_test02.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/qcons_test02.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/qcons_test02.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-qcons_test02 =
     !"aap"(1)
     ; do-aap
     ; ?"aap"(2)

Modified: strategoxt-java-backend/trunk/test/strc1/qcons_test03.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/qcons_test03.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/qcons_test03.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-qcons_test03 =
     !"aap"(1)
     ; do-aap
     ; ?"aap"(2)

Modified: strategoxt-java-backend/trunk/test/strc1/qcons_test04.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/qcons_test04.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/qcons_test04.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-qcons_test04 =
     !"aap"(1)
     ; not(?aap(_))
 

Modified: strategoxt-java-backend/trunk/test/strc1/test01.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test01.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test01.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -1,4 +1,4 @@
 module test01
 strategies
 
-  main = id
+  main-test01 = id

Modified: strategoxt-java-backend/trunk/test/strc1/test02.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test02.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test02.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -6,6 +6,6 @@
 
 strategies
 
-  main = 
+  main-test02 = 
     ?[prog | args];
     !Call(prog, args)

Modified: strategoxt-java-backend/trunk/test/strc1/test03.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test03.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test03.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -12,6 +12,6 @@
 
 strategies
 
-  main = 
+  main-test03 = 
     ?[prog | args];
     split(!Call(prog, args), id)

Modified: strategoxt-java-backend/trunk/test/strc1/test04.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test04.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test04.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -12,7 +12,7 @@
     !x;
     f
 
-  main = 
+  main-test04 = 
     !F(F(1));
     pass_match(?F(y));
     !y

Modified: strategoxt-java-backend/trunk/test/strc1/test05.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test05.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test05.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,7 +9,7 @@
  
   eq = ?(x, x)
 
-  main =  
+  main-test05 =  
     !(F(1),F(1));
     eq;
     !F(3)

Modified: strategoxt-java-backend/trunk/test/strc1/test06.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test06.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test06.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -23,6 +23,6 @@
 
 strategies
 
-  main = 
+  main-test06 = 
     !Plus(Succ(Succ(Zero)), Succ(Zero));
     eval

Modified: strategoxt-java-backend/trunk/test/strc1/test07.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test07.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test07.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -23,6 +23,6 @@
   eval = 
     repeat(A + B)
 
-  main =  
+  main-test07 =  
     !Plus(Succ(Succ(Zero)), Succ(Zero));
     eval

Modified: strategoxt-java-backend/trunk/test/strc1/test08.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test08.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test08.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -36,6 +36,6 @@
   eval = 
     innermost(A + B)
 
-  main =  
+  main-test08 =  
     !Plus(Succ(Plus(Succ(Zero), Succ(Zero))), Succ(Zero));
     eval

Modified: strategoxt-java-backend/trunk/test/strc1/test09.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test09.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test09.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -30,7 +30,7 @@
   nat_nf = 
     rec x(Succ(x) + Zero)
 
-  main =  
+  main-test09 =  
     !Plus(Succ(Plus(Succ(Zero), Succ(Zero))), Succ(Zero));
     eval;
     nat_nf

Modified: strategoxt-java-backend/trunk/test/strc1/test10.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test10.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test10.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -17,7 +17,7 @@
 
 strategies
 
-  main =  
+  main-test10 =  
     !Plus(Succ(Plus(Succ(Zero), Succ(Zero))), Succ(Zero));
     Eval2
 

Modified: strategoxt-java-backend/trunk/test/strc1/test100.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test100.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test100.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,5 +8,5 @@
      in nestedtable-put(forward, id | keys, value)
     end
 
-  main =
+  main-test100 =
     where(try(mynestedtable-put(|"", "")))

Modified: strategoxt-java-backend/trunk/test/strc1/test101.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test101.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test101.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports collection/list/cons
 strategies
 
-  main =
+  main-test101 =
     toplevel
 
   toplevel =

Modified: strategoxt-java-backend/trunk/test/strc1/test102.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test102.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test102.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test102 =
     <not(foo)> Some("Hey")
 
   foo =

Modified: strategoxt-java-backend/trunk/test/strc1/test103.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test103.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test103.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test103 =
     <not(foo)> Some("Hey")
 
   foo =

Modified: strategoxt-java-backend/trunk/test/strc1/test104.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test104.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test104.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -13,7 +13,7 @@
 
 strategies
 
-  main =
+  main-test104 =
     test1
     ; debug(!"the term: ")
     ; ?Foo(Bar(["a","b"]), None(), (Baz(),Aap()))

Modified: strategoxt-java-backend/trunk/test/strc1/test105.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test105.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test105.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,7 +8,7 @@
 
 strategies
 
-  main =
+  main-test105 =
     dbg(|"test108: ")
 
   external dbg(|t)

Modified: strategoxt-java-backend/trunk/test/strc1/test106.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test106.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test106.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -12,7 +12,7 @@
 
 strategies
 
-  main = id
+  main-test106 = id
     ; <test1> Bar("a", 3)
     ; <test2> Bar("a", 3)
 

Modified: strategoxt-java-backend/trunk/test/strc1/test107.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test107.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test107.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -6,7 +6,7 @@
 
 strategies
 
-  main =
+  main-test107 =
     import-term(./Java-15.tbl)
     ; ?"parse-table"#(_)
     ; !"ok"
\ No newline at end of file

Modified: strategoxt-java-backend/trunk/test/strc1/test108.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test108.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test108.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -6,7 +6,7 @@
 
 strategies
 
-  main = id
+  main-test108 = id
     ; not(Foo)
 
     ; {| Foo :

Modified: strategoxt-java-backend/trunk/test/strc1/test109.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test109.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test109.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 strategies
 
-  main = !1 => <foo> => <bar> => 3
+  main-test109 = !1 => <foo> => <bar> => 3
   
   foo: 1 -> b where 1 with b := 2
   

Modified: strategoxt-java-backend/trunk/test/strc1/test11.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test11.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test11.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -11,6 +11,6 @@
 
   h : y -> z where <Var(id)> y => z
 
-  main =
+  main-test11 =
     !Var("a");
     where(f(Var) + h)

Modified: strategoxt-java-backend/trunk/test/strc1/test110.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test110.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test110.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,6 +5,6 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test110 =
     x := None()
   ; not(!Some(x#([])))

Modified: strategoxt-java-backend/trunk/test/strc1/test111.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test111.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test111.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -11,7 +11,7 @@
 
 strategies
 
-  main =
+  main-test111 =
     foo := "Foo"
   ; bar := "Bar"
   ; !foo#([bar#([42])]) => Foo(Bar(42))

Modified: strategoxt-java-backend/trunk/test/strc1/test112.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test112.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test112.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -10,7 +10,7 @@
   
   show(|s) = where(write-to-string; debug(!s)); say(id)
 
-  main =
+  main-test112 =
     x := $[ 1
             2 ];
     !$[ Indent me: [x]]; show(|1) =>

Modified: strategoxt-java-backend/trunk/test/strc1/test113.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test113.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test113.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -11,7 +11,7 @@
   
 	show(|s) = where(write-to-string; debug(!s)); say(id)
 
-	main =
+	main-test113 =
 		s := $[ Sorry! ];
 		!$[		I like tabs.
 					[s]

Modified: strategoxt-java-backend/trunk/test/strc1/test114.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test114.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test114.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -10,4 +10,4 @@
 
 strategies
 
-  main = !sort(1); sort(id)
+  main-test114 = !sort(1); sort(id)

Modified: strategoxt-java-backend/trunk/test/strc1/test12.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test12.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test12.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -13,7 +13,7 @@
 
 strategies
 
-  main =
+  main-test12 =
     <R> F(I, I) => G(I)
 
   

Modified: strategoxt-java-backend/trunk/test/strc1/test13.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test13.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test13.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,7 +9,7 @@
   eval =
     ?Add(i,j); <add>(i,j)
 
-  main = 
+  main-test13 = 
     !Add(1,2);
     eval;
     ?3

Modified: strategoxt-java-backend/trunk/test/strc1/test14.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test14.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test14.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -12,7 +12,7 @@
   list(s) =
     rec x([] + [s | x])
 
-  main = 
+  main-test14 = 
     list(try(?Add(1,x)))
     ; (!x <+ !2)
     

Modified: strategoxt-java-backend/trunk/test/strc1/test15.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test15.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test15.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,5 +2,5 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test15 =
     id

Modified: strategoxt-java-backend/trunk/test/strc1/test16.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test16.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test16.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -14,7 +14,7 @@
     + {?(r at A, C); !r}
     + {?(r at B, C); !r}
 
-  main = 
+  main-test16 = 
     test-suite(!"test16", 
 	test1
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test17.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test17.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test17.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -12,7 +12,7 @@
 
 strategies
 
-  main = 
+  main-test17 = 
     test-suite(!"test17",
 	test1
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test18.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test18.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test18.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,7 +9,7 @@
     g: a -> Term
 strategies
 
-  main = 
+  main-test18 = 
     test-suite(!"test18",
 	test0;
 	test1;

Modified: strategoxt-java-backend/trunk/test/strc1/test19.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test19.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test19.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,7 +9,7 @@
 aap: a
 
 strategies
-   main = string-test
+   main-test19 = string-test
    
    string-test =
      test-suite(!"string-test",

Modified: strategoxt-java-backend/trunk/test/strc1/test20.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test20.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test20.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test20 =
     test1; 
     test2; 
     test3; 

Modified: strategoxt-java-backend/trunk/test/strc1/test21.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test21.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test21.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,6 +2,6 @@
 imports libstratego-lib
 strategies
 
-   main = try(<ReadFromFile> "NonExistentFile")
+   main-test21 = try(<ReadFromFile> "NonExistentFile")
 
 

Modified: strategoxt-java-backend/trunk/test/strc1/test22.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test22.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test22.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
 
 strategies
 
-  main = 
+  main-test22 = 
     !Foo("uck")
     ; check(test1)
     ; check(test3)

Modified: strategoxt-java-backend/trunk/test/strc1/test23.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test23.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test23.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main = 
+  main-test23 = 
     test1; 
     test2
 

Modified: strategoxt-java-backend/trunk/test/strc1/test24.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test24.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test24.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -21,7 +21,7 @@
 
 strategies
 
-  main =
+  main-test24 =
     !H(H(H(B)))
     ; R2
     ; ?I(G(H(B),A))

Modified: strategoxt-java-backend/trunk/test/strc1/test25.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test25.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test25.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,4 +2,4 @@
 imports collection/list/cons collection/tuple/cons
 rules
 
-  main = ![]; !"" #(<id>)
+  main-test25 = ![]; !"" #(<id>)

Modified: strategoxt-java-backend/trunk/test/strc1/test27.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test27.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test27.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test27 =
     !(); try(test1); ?()
 
   try(s) = 

Modified: strategoxt-java-backend/trunk/test/strc1/test28.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test28.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test28.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -21,7 +21,7 @@
    
 strategies
 
-  main = 
+  main-test28 = 
     test-suite(!"Annotations test suite",
       do-test(!"", test-match-suite)
     ; do-test(!"", test-set-suite)

Modified: strategoxt-java-backend/trunk/test/strc1/test28a.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test28a.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test28a.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -15,7 +15,7 @@
   try(s) = 
     s <+ id
 
-  main =
+  main-test28a =
     !Var("a"){Int, Float}
     ; try( \ Var(s){ts*} -> Var(s){Foo(ts*)} \ )
     ; ?Var("a"){Foo([Int,Float])}

Modified: strategoxt-java-backend/trunk/test/strc1/test28b.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test28b.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test28b.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -12,7 +12,7 @@
  
 strategies 
  
-  main = 
+  main-test28b = 
     !Plus(Var("a"), Var("b")){Int}
     ; rm-annotations 
 

Modified: strategoxt-java-backend/trunk/test/strc1/test29.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test29.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test29.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,7 +8,7 @@
 
 strategies
 
-  main = 
+  main-test29 = 
     test-suite(!"test29",
       test1;
       test2;

Modified: strategoxt-java-backend/trunk/test/strc1/test30.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test30.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test30.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -1,7 +1,7 @@
 module test30
 strategies
  
-  main = a
+  main-test30 = a
 
   a = b
   a = id

Modified: strategoxt-java-backend/trunk/test/strc1/test31.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test31.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test31.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test31 =
     test-suite(!"test31",
       test1
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test32.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test32.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test32.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,7 +9,7 @@
 
 strategies
 
-  main = 
+  main-test32 = 
     <reduce> Plus(Succ(Succ(Zero)), Succ(Zero))
 
   try(s) = s <+ id

Modified: strategoxt-java-backend/trunk/test/strc1/test33.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test33.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test33.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -10,7 +10,7 @@
 
 strategies
 
-  main = 
+  main-test33 = 
    <my-inline>
       Let([Fdec("f", ["x"], Call("h", [Var("x")])), Vdec("y", Var("z"))]
 	 ,[Call("f", [Var("y")])])

Modified: strategoxt-java-backend/trunk/test/strc1/test34.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test34.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test34.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-   main =
+   main-test34 =
      test1
      ; test2
      //; test3

Modified: strategoxt-java-backend/trunk/test/strc1/test35.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test35.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test35.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -19,7 +19,7 @@
   member = 
     (?x, fetch(?x))
 
-  main =
+  main-test35 =
     <not(member)> ("a", ["d", "b", "c"])
 
   fetch(s) =

Modified: strategoxt-java-backend/trunk/test/strc1/test36.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test36.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test36.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
 
 strategies
 
-  main = 
+  main-test36 = 
     ?foo
     ; <fclose> Stream(0)
     ; gclose(|1)

Modified: strategoxt-java-backend/trunk/test/strc1/test37.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test37.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test37.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test37 =
     say(!"test37")
     ; ![48,65,97,92]
     ; debug

Modified: strategoxt-java-backend/trunk/test/strc1/test38.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test38.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test38.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-  main = 
+  main-test38 = 
     test-suite(!"term arguments",
       const-targ
     ; app-targ

Modified: strategoxt-java-backend/trunk/test/strc1/test39.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test39.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test39.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-   main =
+   main-test39 =
      let lettest(s) = <s> (1, 2)
       in lettest({?(x,y); prim("SSL_addi", x, y)})
      end

Modified: strategoxt-java-backend/trunk/test/strc1/test40.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test40.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test40.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,5 +2,5 @@
 imports libstratego-lib
 strategies
 
-  main = foldr(id, conc, explode-string)
+  main-test40 = foldr(id, conc, explode-string)
 

Modified: strategoxt-java-backend/trunk/test/strc1/test41.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test41.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test41.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -23,6 +23,6 @@
   eval = 
     bottomup(A <+ B <+ Ident)
 
-  main =  
+  main-test41 =  
     !Plus(Succ(Plus(Succ(Zero), Succ(Zero))), Succ(Zero));
     eval

Modified: strategoxt-java-backend/trunk/test/strc1/test43.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test43.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test43.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,7 +8,7 @@
 
 strategies
 
-   main = ?y;  
+   main-test43 = ?y;  
      let s(|x) = !x; foo
       in s(|1)
      end; !(y,y)

Modified: strategoxt-java-backend/trunk/test/strc1/test44.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test44.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test44.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -61,7 +61,7 @@
 
 strategies
 
-  main = 
+  main-test44 = 
     test-suite(!"share-test",
 	test1;
 	test2;

Modified: strategoxt-java-backend/trunk/test/strc1/test45.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test45.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test45.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-   main =  foo(|[1, 2, 3]) 
+   main-test45 =  foo(|[1, 2, 3]) 
 
    foo(|xs*) = !xs*
 

Modified: strategoxt-java-backend/trunk/test/strc1/test46.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test46.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test46.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-   main =
+   main-test46 =
      <dyn-test(|2)> 3
 
    dyn-test(|x) =

Modified: strategoxt-java-backend/trunk/test/strc1/test47.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test47.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test47.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
   hd : [x | xs] -> x
   tl : [x | xs] -> xs
 
-  main = 
+  main-test47 = 
     where(foo(|<hd>))
     ; bar(|<hd>,[<tl>])
 

Modified: strategoxt-java-backend/trunk/test/strc1/test48.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test48.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test48.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,5 +8,5 @@
   ALL(s) = 
     ?t; prim("SRTS_all", s | t)
 
-  main =
+  main-test48 =
     ALL(id)

Modified: strategoxt-java-backend/trunk/test/strc1/test49.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test49.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test49.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
 
 strategies
 
-main = tp-test-1
+main-test49 = tp-test-1
      ; tp-test-2
      ; tp-test-3
 

Modified: strategoxt-java-backend/trunk/test/strc1/test50.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test50.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test50.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main = foo
+  main-test50 = foo
 
   foo = [bar(!"a") | id]
 

Modified: strategoxt-java-backend/trunk/test/strc1/test51.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test51.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test51.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test51 =
     test-suite(!"test51",
       test51-1
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test53.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test53.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test53.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-   main =
+   main-test53 =
      !["test53", "a", "b", "c"]
      ; test0
      ; test1

Modified: strategoxt-java-backend/trunk/test/strc1/test54.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test54.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test54.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -37,6 +37,6 @@
     
 strategies
 
-  main = 
+  main-test54 = 
     !Plus(Succ(Succ(Zero)), Succ(Zero));
     eval

Modified: strategoxt-java-backend/trunk/test/strc1/test56.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test56.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test56.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,6 +2,6 @@
 imports libstratego-lib
 strategies
 
-   main =
+   main-test56 =
      rules(Foo: t@(1, x at 2) -> [1, 2, t, x])
  

Modified: strategoxt-java-backend/trunk/test/strc1/test57.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test57.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test57.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -10,7 +10,7 @@
 
 strategies
 
-   main =
+   main-test57 =
      <innermost(Simplify)>
        Seq(
          [ Bar(1)

Modified: strategoxt-java-backend/trunk/test/strc1/test58.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test58.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test58.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test58 =
     let p = q <+ p
         q = r <+ q
         r = !1 <+ r

Modified: strategoxt-java-backend/trunk/test/strc1/test59.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test59.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test59.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test59 =
     let p = q <+ p
         q = !1 <+ q
      in p => x

Modified: strategoxt-java-backend/trunk/test/strc1/test60.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test60.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test60.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main = 
+  main-test60 = 
     {| CSE 
      : new-A(|"a","a")
      ; where(<Assign> ("a", ("b", "c")))

Modified: strategoxt-java-backend/trunk/test/strc1/test61.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test61.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test61.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test61 =
     !Cons()
     ; Cons()
     ; ?Cons

Modified: strategoxt-java-backend/trunk/test/strc1/test62.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test62.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test62.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test62 =
     !Cons(1)
     ; Cons(\ 1 -> 2 \)
     ; ?Cons(2)

Modified: strategoxt-java-backend/trunk/test/strc1/test63.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test63.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test63.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test63 =
     !Cons(1, 2, 3)
     ; Cons( \ 1 -> 2 \, \ 2 -> 3 \, \ 3 -> 4 \ )
     ; ?Cons(2, 3, 4)

Modified: strategoxt-java-backend/trunk/test/strc1/test64.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test64.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test64.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test64 =
     !Cons(1, 2, 3, 4)
     ; Cons( \ 1 -> 2 \, \ 2 -> 3 \, \ 3 -> 4 \, \ 4 -> 5 \ )
     ; ?Cons(2, 3, 4, 5)

Modified: strategoxt-java-backend/trunk/test/strc1/test65.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test65.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test65.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test65 =
     !Nil(1)
     ; Nil( \ 1 -> 2 \)
     ; ?Nil(2)

Modified: strategoxt-java-backend/trunk/test/strc1/test67.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test67.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test67.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -5,7 +5,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test67 =
     <define> 1
     ; <Bar> Foo([1, 2, 3]) => [2, 3]
 

Modified: strategoxt-java-backend/trunk/test/strc1/test68.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test68.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test68.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,4 +2,4 @@
 imports libstratego-lib spec
 strategies
 
-  main = !Fred("test")
+  main-test68 = !Fred("test")

Modified: strategoxt-java-backend/trunk/test/strc1/test69.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test69.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test69.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -14,7 +14,7 @@
 
 strategies
 
-  main = 
+  main-test69 = 
     test-suite(!"explode-test",
 	explode-test1;
 	explode-test2;

Modified: strategoxt-java-backend/trunk/test/strc1/test70.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test70.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test70.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test70 =
   test-suite(!"switch construct testsuite",
     test-woow
   ; test-wow

Modified: strategoxt-java-backend/trunk/test/strc1/test72.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test72.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test72.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -62,7 +62,7 @@
 
 strategies
 
-  main = 
+  main-test72 = 
     test-suite(!"test72",
       test1
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test73.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test73.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test73.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -9,7 +9,7 @@
 	  
 strategies
 
-  main = 
+  main-test73 = 
     test-suite(!"intersection with rulenames",
       test-it-now
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test74.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test74.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test74.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main = 
+  main-test74 = 
     test-suite(!"test74",
       test1
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test75.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test75.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test75.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
 
 strategies
 
-  main =
+  main-test75 =
     test1
 
   test1 = 

Modified: strategoxt-java-backend/trunk/test/strc1/test76.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test76.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test76.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test76 =
     test-suite(!"Annotations in static patterns",
       annos-in-static-patterns
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test77.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test77.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test77.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -10,5 +10,5 @@
     ?(x,y,z)
     ; rules( Foo : Foo(x,y,_) -> () depends on [] )
 
-  main = 
+  main-test77 = 
     undefine-Foo(|"a")

Modified: strategoxt-java-backend/trunk/test/strc1/test78.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test78.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test78.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-  main = 
+  main-test78 = 
     asd123(|1) 
     ; asd321(|1) 
     ; asd111(|1)

Modified: strategoxt-java-backend/trunk/test/strc1/test79.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test79.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test79.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -22,7 +22,7 @@
    
 strategies
 
-  main = 
+  main-test79 = 
     test-suite(!"Annotations test suite",
       do-test(!"", test-match-suite)
     ; do-test(!"", test-set-suite)

Modified: strategoxt-java-backend/trunk/test/strc1/test80.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test80.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test80.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies 
 
-  main = 
+  main-test80 = 
     let s = ?n; debug(!"n: ") 
             ; inc => n'; debug(!"n': ") 
             ; !(<id>, n') 

Modified: strategoxt-java-backend/trunk/test/strc1/test81.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test81.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test81.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -6,7 +6,7 @@
 
 strategies 
  
- main = 
+ main-test81 = 
    test-suite(!"test81: test quoted constructors",
      test-match
    )

Modified: strategoxt-java-backend/trunk/test/strc1/test82.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test82.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test82.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,5 +2,5 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test82 =
     !Conc(1,2)

Modified: strategoxt-java-backend/trunk/test/strc1/test83.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test83.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test83.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main = 
+  main-test83 = 
     !"inc" => f     ; <call(f||)>1 => 2 
   ; !"apply-it-now" ; call(<id>|inc|2) => 3
   

Modified: strategoxt-java-backend/trunk/test/strc1/test84.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test84.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test84.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -14,7 +14,7 @@
 
 strategies
 
-  main = 
+  main-test84 = 
     ?[prog | args]
     ; oncetd(try(?(x,x)))
     ; try(prim("SSL_fputs", x, x))

Modified: strategoxt-java-backend/trunk/test/strc1/test85.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test85.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test85.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test85 =
   test-suite(!"switch construct testsuite",
     test-woow
   ; test-wow

Modified: strategoxt-java-backend/trunk/test/strc1/test86.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test86.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test86.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -18,7 +18,7 @@
 
 strategies
 
-  main = 
+  main-test86 = 
     test-suite(!"test86",
       test1
       ; test2

Modified: strategoxt-java-backend/trunk/test/strc1/test87.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test87.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test87.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,7 +8,7 @@
 
 strategies
 
-  main = 
+  main-test87 = 
     test-suite(!"test87",
       test1
       ; test2

Modified: strategoxt-java-backend/trunk/test/strc1/test88.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test88.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test88.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,7 +8,7 @@
 
 strategies
 
-  main = 
+  main-test88 = 
     test-suite(!"test88",
       test2
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test89.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test89.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test89.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-test89 =
     <all-G-by-H> H(G(G(H(G(B, I(1)), A), B), I(0)), A)
 	      => H(G(G(H(H(B, I(1)), A), B), I(0)), A)
 

Modified: strategoxt-java-backend/trunk/test/strc1/test90.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test90.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test90.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -11,7 +11,7 @@
 
 strategies
 
-  main = 
+  main-test90 = 
     try(private-single-field-decs1)
     ; try(private-single-field-decs2)
 

Modified: strategoxt-java-backend/trunk/test/strc1/test91.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test91.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test91.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-  main = <rewr> f(100, empty)
+  main-test91 = <rewr> f(100, empty)
 
 signature
   sorts Domain Range Map

Modified: strategoxt-java-backend/trunk/test/strc1/test92.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test92.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test92.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -12,7 +12,7 @@
   /**
    * The bug results in: [Var("t"),Var(ListVar("t*"))]
    */
-  main =
+  main-test92 =
     !Match(AnnoList(Wld, [Var("t"), Var(ListVar("t*"))]))
     ; parenthesize-Stratego
     ; debug(!"result: ")

Modified: strategoxt-java-backend/trunk/test/strc1/test93.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test93.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test93.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
 
 strategies
 
-  main =
+  main-test93 =
       !Minus(
         And(
           CastPrim(Long,ExprName(Id("save")))

Modified: strategoxt-java-backend/trunk/test/strc1/test94.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test94.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test94.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,7 +7,7 @@
 
 strategies
   
-  main =
+  main-test94 =
     <doit(string-tokenize)> "foo bar fred" => ["foo", "bar", "fred"]
 
   doit(s : t * t -> t) =

Modified: strategoxt-java-backend/trunk/test/strc1/test95.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test95.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test95.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -27,7 +27,7 @@
   eval(|env) = 
     innermost(A(|env) + B)
 
-  main =  
+  main-test95 =  
     !Plus(Var("a"), Plus(Var("b"), Var("c")))
     ; eval(| [("a", 1), ("b", 2), ("c", 3)])
     ; ?6

Modified: strategoxt-java-backend/trunk/test/strc1/test96.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test96.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test96.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -28,7 +28,7 @@
   eval(env) = 
     innermost(A(env) + B)
 
-  main =  
+  main-test96 =  
     !Plus(Var("a"), Plus(Var("b"), Var("c")))
     ; eval(![("a", 1), ("b", 2), ("c", 3)])
     ; ?6

Modified: strategoxt-java-backend/trunk/test/strc1/test97.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test97.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test97.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports collection/list/cons collection/tuple/cons
 strategies
 
-  main =
+  main-test97 =
     test1
 
   test1 =

Modified: strategoxt-java-backend/trunk/test/strc1/test98.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test98.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test98.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
  say(s) = s 
 
- main =
+ main-test98 =
    <test1> 1 => 3
    ; <test2> 1 => 3
 

Modified: strategoxt-java-backend/trunk/test/strc1/test99.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test99.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test99.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -14,7 +14,7 @@
     + {?(r at A, C); !r}
     + {?(r at B, C); !r}
 
-  main = 
+  main-test99 = 
     test-suite(!"test99", 
 	test1
     )

Modified: strategoxt-java-backend/trunk/test/strc1/test_chain01.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test_chain01.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test_chain01.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 strategies
 
-  main =
+  main-test_chain01 =
       register-extension1
     ; register-extension2
     ; {| Foo :

Modified: strategoxt-java-backend/trunk/test/strc1/test_chain02.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test_chain02.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test_chain02.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 strategies
 
-  main =
+  main-test_chain02 =
     !3 => z
     ; rules(Foo :+ (x, y, _) -> (<add> (x, 1), y, z))
     ; rules(Foo :+ (x, y, _) -> (<add> (x, 10), y, z))

Modified: strategoxt-java-backend/trunk/test/strc1/test_chain03.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test_chain03.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc1/test_chain03.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -4,7 +4,7 @@
 
 strategies
 
-  main =
+  main-test_chain03 =
       !"Foo" => op1
     ; !"Bar" => op2
     ; rules(Foo : (op1#(_), op2#(_)) -> ())

Modified: strategoxt-java-backend/trunk/test/strc2/arity_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/arity_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/arity_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -19,5 +19,5 @@
 
 strategies
 
-  main = <(r6 + r7 + r8)> [8]
+  main-arity_test = <(r6 + r7 + r8)> [8]
 

Modified: strategoxt-java-backend/trunk/test/strc2/as_pattern.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/as_pattern.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/as_pattern.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -18,7 +18,7 @@
 
 strategies
 
-  main = 
+  main-as_pattern = 
     test-suite(!"as-pattern-test",
 	as-pattern1;
 	as-pattern2

Modified: strategoxt-java-backend/trunk/test/strc2/assignment.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/assignment.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/assignment.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,7 +8,7 @@
 
 strategies
 
-  main = <bla> G(A())
+  main-assignment = <bla> G(A())
 
   s = ?G(x); !F(x,x)
 

Modified: strategoxt-java-backend/trunk/test/strc2/comment_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/comment_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/comment_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,4 +7,4 @@
   constructors
       BOL_Lambda : BOLVar * List(BOLBndVar) * BOLExp -> BOLLambda
 strategies
-  main = id
\ No newline at end of file
+  main-comment_test = id
\ No newline at end of file

Modified: strategoxt-java-backend/trunk/test/strc2/conditional_innermost.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/conditional_innermost.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/conditional_innermost.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -30,4 +30,4 @@
 
 strategies
 
-  main = innermost(A + B)
+  main-conditional_innermost = innermost(A + B)

Modified: strategoxt-java-backend/trunk/test/strc2/congruence_arguments.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/congruence_arguments.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/congruence_arguments.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -6,5 +6,5 @@
 
 strategies
 
-  main = <If(id, id)> If("a","b")
+  main-congruence_arguments = <If(id, id)> If("a","b")
 

Modified: strategoxt-java-backend/trunk/test/strc2/congruence_thread.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/congruence_thread.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/congruence_thread.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-  main = 
+  main-congruence_thread = 
     test-suite(!"congruence-env-test",
 	//congruence-dist-test;
 	//congruence-thread-test;

Modified: strategoxt-java-backend/trunk/test/strc2/dynamic_rules_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/dynamic_rules_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/dynamic_rules_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -62,7 +62,7 @@
 
 strategies
 
-  main = 
+  main-dynamic_rules_test = 
     test-suite(!"dynamic-rules-test",
 	//test0;
 	test1;

Modified: strategoxt-java-backend/trunk/test/strc2/empty_sections.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/empty_sections.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/empty_sections.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -15,4 +15,4 @@
 
 strategies
 
-  main = id
\ No newline at end of file
+  main-empty_sections = id
\ No newline at end of file

Modified: strategoxt-java-backend/trunk/test/strc2/flatten_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/flatten_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/flatten_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -14,7 +14,7 @@
 	    {n : ?(n, Module(n, _))},
 	    \ Module(n, c) -> <filter(not(Imports(id)))> c \ )
 
-  main = 
+  main-flatten_test = 
     test-suite(!"flatten-test",
 	test1
     )

Modified: strategoxt-java-backend/trunk/test/strc2/higher_order_arg.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/higher_order_arg.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/higher_order_arg.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -21,5 +21,5 @@
 
 strategies
 
-  main = 
+  main-higher_order_arg = 
     <cify> "a-b_c'" => "a_b__c_p_"

Modified: strategoxt-java-backend/trunk/test/strc2/implicit_var_decl.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/implicit_var_decl.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/implicit_var_decl.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -3,7 +3,7 @@
 
 strategies
 
-  main =
+  main-implicit_var_decl =
 	parse-options(io-options);
 	?options;
 	option-defined(?Program(prog));

Modified: strategoxt-java-backend/trunk/test/strc2/improper_list_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/improper_list_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/improper_list_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -7,6 +7,6 @@
 
 strategies 
 
-  main = 
+  main-improper_list_test = 
     (!["a" | ["b" | Bla(["c" | ["d" | []]])]] <+ !"a");
     ?"a"

Modified: strategoxt-java-backend/trunk/test/strc2/innermost_pure.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/innermost_pure.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/innermost_pure.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -31,7 +31,7 @@
 
 strategies
 
-  main = 
+  main-innermost_pure = 
     test-suite(!"innermost-pure",
         test1
     )

Modified: strategoxt-java-backend/trunk/test/strc2/match_arity.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/match_arity.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/match_arity.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -15,7 +15,7 @@
 
 strategies
 
-  main = 
+  main-match_arity = 
     test-suite(!"match-arity",
 	match-arity1;
 	match-arity2;

Modified: strategoxt-java-backend/trunk/test/strc2/match_automaton_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/match_automaton_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/match_automaton_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -12,7 +12,7 @@
 
 strategies
 
-  main = 
+  main-match_automaton_test = 
     test-suite(!"match-automaton-test",
 	failure-in-case1;
   	failure-in-case2

Modified: strategoxt-java-backend/trunk/test/strc2/mkterm.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/mkterm.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/mkterm.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -19,5 +19,5 @@
 
 strategies
 
-  main = 
+  main-mkterm = 
     <A; B; C; id#([id|id]); D> F(X,Y,Z) => ["c",X,Y,Z] 

Modified: strategoxt-java-backend/trunk/test/strc2/number_syntax_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/number_syntax_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/number_syntax_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,7 +8,7 @@
 
 strategies
 
-  main = 
+  main-number_syntax_test = 
    <bla> 1 => 2;
    <blabla> 0.2 => 0.1
 

Modified: strategoxt-java-backend/trunk/test/strc2/number_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/number_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/number_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -6,7 +6,7 @@
 
 strategies
 
-  main = 
+  main-number_test = 
     test-suite(!"number-test",
 	test0;
 	test1;

Modified: strategoxt-java-backend/trunk/test/strc2/occan.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/occan.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/occan.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -29,7 +29,7 @@
 
 strategies
 
-  main = 
+  main-occan = 
     test-suite(!"occan", id
       	; test-dead
 	; test-once

Modified: strategoxt-java-backend/trunk/test/strc2/overlay_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/overlay_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/overlay_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -38,7 +38,7 @@
 
 strategies
 
-  main =   
+  main-overlay_test =   
     test-suite(!"overlay-test",  
 	overlay-test1;
 	overlay-test2;

Modified: strategoxt-java-backend/trunk/test/strc2/overlay_test_b.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/overlay_test_b.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/overlay_test_b.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -38,7 +38,7 @@
 
 strategies
 
-  main =   
+  main-overlay_test_b =   
     //!Add(Mul(Var("x"), Add(Var("y"), Var("z"))), " ", " ", Var("a"))
     !Add(Var("z"), " ", " ", Var("a"))
               

Modified: strategoxt-java-backend/trunk/test/strc2/overloading.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/overloading.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/overloading.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -11,7 +11,7 @@
 
 strategies
 
-  main = 
+  main-overloading = 
    <[f(RA); RD, f(RA, RB); RC]	> [F(A),G(A,B)] => [F(D),G(D,C)]
 
   f(s) = F(s)

Modified: strategoxt-java-backend/trunk/test/strc2/overloading_constructors_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/overloading_constructors_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/overloading_constructors_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -25,7 +25,7 @@
 
 strategies
 
-  main = 
+  main-overloading_constructors_test = 
     test-suite(!"overloading-constructors-test",
       eval-test1;
       eval-test2;

Modified: strategoxt-java-backend/trunk/test/strc2/prop.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/prop.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/prop.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main = 
+  main-prop = 
     test-suite(!"prop",
         test1
     )

Modified: strategoxt-java-backend/trunk/test/strc2/rename_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/rename_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/rename_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main = 
+  main-rename_test = 
     test-suite(!"rename-test",
 	test1;
 	test2

Modified: strategoxt-java-backend/trunk/test/strc2/tail.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/tail.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/tail.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -8,6 +8,6 @@
 
 strategies
 
-  main = 
+  main-tail = 
    <[id, id | id]; RA; [id, id, id | id ]> 
 	["A", "B", "C", "D"] => ["A","B","A","C","D"]

Modified: strategoxt-java-backend/trunk/test/strc2/thread_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/thread_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/thread_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -13,7 +13,7 @@
 
 strategies
 
-  main = 
+  main-thread_test = 
     test-suite(!"thread-test",
       simple-test;
       preorder-number;

Modified: strategoxt-java-backend/trunk/test/strc2/traversal_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/traversal_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/traversal_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -11,7 +11,7 @@
 
 strategies
 
-  main = 
+  main-traversal_test = 
     test-suite(!"traversal-test",
 	all-test1;
 	all-test2;

Modified: strategoxt-java-backend/trunk/test/strc2/twice.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/twice.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/twice.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -11,7 +11,7 @@
 
 strategies
 
-    main       = debug(!"main: "); <Main> [A, A]; debug(!"main x: ")
+    main-twice = debug(!"main: "); <Main> [A, A]; debug(!"main x: ")
 
     Main       = debug(!"Main: "); memo-scope([ma, ma]); debug(!"Main x: ")
 

Modified: strategoxt-java-backend/trunk/test/strc2/unification_test.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc2/unification_test.str	Thu Mar  3 09:26:48 2011	(r22275)
+++ strategoxt-java-backend/trunk/test/strc2/unification_test.str	Thu Mar  3 09:35:54 2011	(r22276)
@@ -2,7 +2,7 @@
 imports libstratego-lib
 strategies
 
-  main =
+  main-unification_test =
     test-suite(!"unification-test",
 	test0;
 	test1


From L.C.L.Kats at tudelft.nl  Thu Mar  3 10:51:09 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 03 Mar 2011 09:51:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22277 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms
	strategoxt-java-backend/trunk/java
Message-ID: <20110303095109.63B5A2B8033@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Mar  3 09:51:09 2011
New Revision: 22277
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22277&sc=1

Log:
fixed annotations regression that broke the unit tests

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Thu Mar  3 09:35:54 2011	(r22276)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Thu Mar  3 09:51:09 2011	(r22277)
@@ -193,7 +193,7 @@
 					return new StrategoString(value, annotations, defaultStorageType);
 				}
 			} else if (currentAnnos == EMPTY_LIST) {
-				return currentAnnos.isEmpty() ? term : new StrategoAnnotation(this, term, annotations);
+				return annotations.isEmpty() ? term : new StrategoAnnotation(this, term, annotations);
 			} else if (term instanceof StrategoAnnotation) {
 				term = ((StrategoAnnotation) term).getWrapped();
 				// int storageType = min(defaultStorageType, getStorageType(term));

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.


From R.B.Vermaas at tudelft.nl  Thu Mar  3 11:28:00 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 10:28:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22278 -
	hydra/strategoxt
Message-ID: <20110303102800.492B17F8006@mx1.tudelft.nl>

Author: rob
Date: Thu Mar  3 10:27:59 2011
New Revision: 22278
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22278&sc=1

Log:
use jdk for ecj

Modified:
   hydra/strategoxt/packages.nix

Modified: hydra/strategoxt/packages.nix
==============================================================================
--- hydra/strategoxt/packages.nix	Thu Mar  3 09:51:09 2011	(r22277)
+++ hydra/strategoxt/packages.nix	Thu Mar  3 10:27:59 2011	(r22278)
@@ -425,7 +425,7 @@
 
       buildInputs = 
         [pkgs.pkgconfig pkgs.unzip pkgs.zlib pkgs.which] 
-        ++ pkgs.lib.optional pkgs.stdenv.isLinux [pkgs.ecj pkgs.jdk] 
+        ++ pkgs.lib.optional pkgs.stdenv.isLinux [(pkgs.ecj.override { gcj = pkgs.jdk; }) pkgs.jdk] 
         ++ pkgs.lib.optional pkgs.stdenv.isDarwin [pkgs.ecjDarwin pkgs.openjdkDarwin];
       requires = svnRequires;
 


From R.B.Vermaas at tudelft.nl  Thu Mar  3 11:43:09 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 10:43:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22279 -
	strategoxt-java-backend/trunk/test
Message-ID: <20110303104309.7BE68CC04E@mx4.tudelft.nl>

Author: rob
Date: Thu Mar  3 10:43:09 2011
New Revision: 22279
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22279&sc=1

Log:
add -m flags

Modified:
   strategoxt-java-backend/trunk/test/Makefile.am

Modified: strategoxt-java-backend/trunk/test/Makefile.am
==============================================================================
--- strategoxt-java-backend/trunk/test/Makefile.am	Thu Mar  3 10:27:59 2011	(r22278)
+++ strategoxt-java-backend/trunk/test/Makefile.am	Thu Mar  3 10:43:09 2011	(r22279)
@@ -100,10 +100,10 @@
 check-interpreter : $(IRUNFILES)
 
 %.ctree : %.str
-	../trans/strj -O 0 -la java-front --format-check 0 -F -I ../java/runtime/org/strategoxt/lang/parallel/stratego_parallel -i $< -o $@
+	../trans/strj -O 0 -m main-`basename $< .str` -la java-front --format-check 0 -F -I ../java/runtime/org/strategoxt/lang/parallel/stratego_parallel -i $< -o $@
 
 basic/camelCase_1.ctree : basic/camelCase_1.str
-	../trans/strj -O 0 -la java-front --format-check 0 -F -I ../java/runtime/org/strategoxt/lang/parallel/stratego_parallel -m camelCase_1 -i $< -o $@
+	../trans/strj -O 0 -la java-front -m main-`basename $< .str` --format-check 0 -F -I ../java/runtime/org/strategoxt/lang/parallel/stratego_parallel -m camelCase_1 -i $< -o $@
 
 %.str : %.astr
 	aster -i $< -o $@


From R.B.Vermaas at tudelft.nl  Thu Mar  3 11:54:43 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 10:54:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22280 -
	strategoxt-java-backend/trunk/test/strc1
Message-ID: <20110303105443.A45477F8006@mx1.tudelft.nl>

Author: rob
Date: Thu Mar  3 10:54:43 2011
New Revision: 22280
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22280&sc=1

Log:


Modified:
   strategoxt-java-backend/trunk/test/strc1/test115.str

Modified: strategoxt-java-backend/trunk/test/strc1/test115.str
==============================================================================
--- strategoxt-java-backend/trunk/test/strc1/test115.str	Thu Mar  3 10:43:09 2011	(r22279)
+++ strategoxt-java-backend/trunk/test/strc1/test115.str	Thu Mar  3 10:54:43 2011	(r22280)
@@ -5,3 +5,5 @@
   libstratego-sdf
   test114
 
+strategies
+  main-test115 = main-test114


From R.B.Vermaas at tudelft.nl  Thu Mar  3 12:34:10 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 11:34:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22281 -
	strategoxt-java-backend/trunk/test
Message-ID: <20110303113410.185112B804A@mx2.tudelft.nl>

Author: rob
Date: Thu Mar  3 11:34:09 2011
New Revision: 22281
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22281&sc=1

Log:
typo

Modified:
   strategoxt-java-backend/trunk/test/Makefile.am

Modified: strategoxt-java-backend/trunk/test/Makefile.am
==============================================================================
--- strategoxt-java-backend/trunk/test/Makefile.am	Thu Mar  3 10:54:43 2011	(r22280)
+++ strategoxt-java-backend/trunk/test/Makefile.am	Thu Mar  3 11:34:09 2011	(r22281)
@@ -109,7 +109,7 @@
 	aster -i $< -o $@
 
 %.java : %.ctree ../trans/strj
-	../trans/strj --verbose 2 -i $< -o $@ -m main-`basename $< .str` -la stratego-lib -la java-front -la stratego-sglr -I $(STRATEGOXT)/share/sdf/stratego-front -I strc1 -I sglr -I parallel -la strc `if echo $< | grep parallel >/dev/null; then echo -la stratego-parallel; fi`
+	../trans/strj --verbose 2 -i $< -o $@ -m main-`basename $< .ctree` -la stratego-lib -la java-front -la stratego-sglr -I $(STRATEGOXT)/share/sdf/stratego-front -I strc1 -I sglr -I parallel -la strc `if echo $< | grep parallel >/dev/null; then echo -la stratego-parallel; fi`
 
 %.class : %.java
 	$(JAVAC) $(JAVACFLAGS) $<


From R.B.Vermaas at tudelft.nl  Thu Mar  3 12:55:00 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 11:55:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22282 -
	strategoxt-java-backend/trunk/trans
Message-ID: <20110303115500.5C67B7F8006@mx1.tudelft.nl>

Author: rob
Date: Thu Mar  3 11:55:00 2011
New Revision: 22282
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22282&sc=1

Log:
jify, _ becomes __

Modified:
   strategoxt-java-backend/trunk/trans/s2j.str

Modified: strategoxt-java-backend/trunk/trans/s2j.str
==============================================================================
--- strategoxt-java-backend/trunk/trans/s2j.str	Thu Mar  3 11:34:09 2011	(r22281)
+++ strategoxt-java-backend/trunk/trans/s2j.str	Thu Mar  3 11:55:00 2011	(r22282)
@@ -107,7 +107,7 @@
     escape(Jify)
   
   Jify(x) =
-    \['_'  | cs] -> ['_' | <x> cs]\
+    \['_'  | cs] -> ['_','_' | <x> cs]\
   <+
     Cify(x)
   


From R.B.Vermaas at tudelft.nl  Thu Mar  3 13:05:09 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 12:05:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22283 -
	strategoxt-java-backend/trunk/trans
Message-ID: <20110303120509.3DE46CC38D@mx4.tudelft.nl>

Author: rob
Date: Thu Mar  3 12:05:08 2011
New Revision: 22283
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22283&sc=1

Log:
_ becomes _ again

Modified:
   strategoxt-java-backend/trunk/trans/s2j.str

Modified: strategoxt-java-backend/trunk/trans/s2j.str
==============================================================================
--- strategoxt-java-backend/trunk/trans/s2j.str	Thu Mar  3 11:55:00 2011	(r22282)
+++ strategoxt-java-backend/trunk/trans/s2j.str	Thu Mar  3 12:05:08 2011	(r22283)
@@ -107,7 +107,7 @@
     escape(Jify)
   
   Jify(x) =
-    \['_'  | cs] -> ['_','_' | <x> cs]\
+    \['_'  | cs] -> ['_' | <x> cs]\
   <+
     Cify(x)
   


From R.B.Vermaas at tudelft.nl  Thu Mar  3 13:12:46 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 12:12:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22284 -
	strategoxt-java-backend/trunk/trans
Message-ID: <20110303121246.642CE108C045@mx3.tudelft.nl>

Author: rob
Date: Thu Mar  3 12:12:45 2011
New Revision: 22284
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22284&sc=1

Log:
main strategy name first has to be cify'd then jify'd, siffy jiffy

Modified:
   strategoxt-java-backend/trunk/trans/s2j.str

Modified: strategoxt-java-backend/trunk/trans/s2j.str
==============================================================================
--- strategoxt-java-backend/trunk/trans/s2j.str	Thu Mar  3 12:05:08 2011	(r22283)
+++ strategoxt-java-backend/trunk/trans/s2j.str	Thu Mar  3 12:12:45 2011	(r22284)
@@ -298,7 +298,7 @@
     with
       x_name := <MainClassName>
     ; main   := <get-config <+ !"main"> "-m"
-    ; x_main := <conc-strings> (<jify; dollars-for-capitals> main, "_0_0")
+    ; x_main := <conc-strings> (<cify; jify; dollars-for-capitals> main, "_0_0")
   
   // TODO: do interop strategy additions in a fully on-demand fashion?
   //       (need to adapt VarScope class to do so)


From R.B.Vermaas at tudelft.nl  Thu Mar  3 13:40:39 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 12:40:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22285 - hydra/jobs
Message-ID: <20110303124039.CCC542B8077@mx2.tudelft.nl>

Author: rob
Date: Thu Mar  3 12:40:39 2011
New Revision: 22285
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22285&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Mar  3 12:12:45 2011	(r22284)
+++ hydra/jobs/spoofax-imp.nix	Thu Mar  3 12:40:39 2011	(r22285)
@@ -165,7 +165,7 @@
 
             mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e || true
 
-            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer # TODO: org.strategoxt.imp.testing
+            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer org.strategoxt.imp.testing
             do
                 mkdir -p $e/utils/
                 cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/


From R.B.Vermaas at tudelft.nl  Thu Mar  3 14:10:01 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 03 Mar 2011 13:10:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22286 - hydra/jobs
Message-ID: <20110303131001.4DFDC7F807F@mx1.tudelft.nl>

Author: rob
Date: Thu Mar  3 13:10:00 2011
New Revision: 22286
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22286&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Thu Mar  3 12:40:39 2011	(r22285)
+++ hydra/jobs/spoofax-imp.nix	Thu Mar  3 13:10:00 2011	(r22286)
@@ -174,7 +174,8 @@
 	            cd $e
                 export LOCALCLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
                 export ANT_OPTS="-Xss8m -Xmx768m"
-                 
+                    mv editor/java backup
+                    mkdir -p editor/java                 
 	            ant -verbose -f build.main.xml -Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome
 	            cd ..
 	            stopNest


From m.dejonge at tudelft.nl  Thu Mar  3 16:08:27 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 15:08:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22287 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20110303150827.B8FAE2B8005@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 15:08:27 2011
New Revision: 22287
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22287&sc=1

Log:
hack: support for renaming on desugared trees

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Mar  3 13:10:00 2011	(r22286)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Mar  3 15:08:27 2011	(r22287)
@@ -1,9 +1,9 @@
-module sdf2imp/util/construct-text
+module lib/construct-text
 
 imports 
   libstratego-lib 
   libstratego-gpp
-  sdf2imp/util/origin-tracking 
+  lib/origin-tracking 
 
 rules //API for text reconstruction
 
@@ -29,7 +29,12 @@
 			pp <+ (ast2abox(|[pp-table]); box2text-string(|100))|
 			pp-table
 		)
-	> REPLACEMENT(oldnode, origin-tracked-node)
+	> REPLACEMENT(oldnode, <construct-text-by-compare(pp|pp-table)> (oldnode, newnode))
+
+construct-textual-change(pp|pp-table):
+	(oldnode, newnode) -> (0, 0, "")
+	where
+		<eq> (oldnode, newnode)
 	
 rules //text reconstruction for AST nodes
 
@@ -41,7 +46,7 @@
  * @param pretty-print table
  * @type node -> String
  */
-construct-text(pp|pp-table) =
+construct-text(pp|pp-table) = 
 	construct-text-from-origin(pp|pp-table) <+
 	construct-text-for-primitive <+
 	construct-text-base-list(pp|pp-table) <+
@@ -56,10 +61,14 @@
 	 
 construct-text-from-origin(pp|pp-table):
 	node -> text
-	where 
+	where
 		origin-node:=<origin-term> node; 
 		<same-signature <+ unmodified-list> (node, origin-node);
-		ast-changes:=<collect-ast-changes> (origin-node, node); //debug(!"ast-changes: ");
+		text := <construct-text-by-compare(pp|pp-table)> (origin-node, node)
+		
+construct-text-by-compare(pp|pp-table): (origin-node, node) -> text
+	where
+		ast-changes:=<collect-ast-changes> (origin-node, node); debug(!"ast-changes: ");
 		text-changes:=<map(ast-change-to-text-change(pp|pp-table)); flatten-list> ast-changes;
 		text:=<
 			apply-text-changes; 


From m.dejonge at tudelft.nl  Thu Mar  3 16:11:06 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 15:11:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22288 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading stratego
Message-ID: <20110303151106.1F64D7F8076@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 15:11:05 2011
New Revision: 22288
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22288&sc=1

Log:
some fixes for refactoring support

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	Thu Mar  3 15:08:27 2011	(r22287)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	Thu Mar  3 15:11:05 2011	(r22288)
@@ -111,7 +111,7 @@
 		
 		for (IStrategoAppl builder : collectTerms(d.getDocument(), "Refactoring")) {
 			if(isDefinedOnSelection(builder)){
-				String caption = termContents(termAt(builder, 0));
+				String caption = termContents(termAt(builder, 1));
 				String strategy = termContents(termAt(builder, 2));
 				IStrategoList options = termAt(builder, 3);			
 				boolean cursor = false;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java	Thu Mar  3 15:08:27 2011	(r22287)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DocumentStructure.java	Thu Mar  3 15:11:05 2011	(r22288)
@@ -313,6 +313,8 @@
 	}
 	
 	private static String getIndentation(String line) {
+		if(line==null)
+			return "";
 		for (int i = 0; i < line.length(); i++) {
 			char c = line.charAt(i);
 			if (c != ' ' && c != '\t') {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Thu Mar  3 15:08:27 2011	(r22287)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTextFragmentPrimitive.java	Thu Mar  3 15:11:05 2011	(r22288)
@@ -44,12 +44,12 @@
 		if(checkTuple(position))
 			return null;
 		int pos_start=((StrategoInt)position.get(0)).intValue();
-		int pos_end=((StrategoInt)position.get(1)).intValue()-1;//exclusive
+		int pos_end=((StrategoInt)position.get(1)).intValue();//exclusive
 		String lexStream = getTokenizer(tryGetOrigin(position.get(2))).getInput();
 		//ILexStream lexStream= EditorState.getActiveEditor().getParseController().getCurrentAst().getLeftToken().getILexStream();
 		if(DocumentStructure.isUnvalidInterval(pos_start, pos_end, lexStream))
 			return null;
-		String textfragment=lexStream.substring(pos_start, pos_end - pos_start);
+		String textfragment=lexStream.substring(pos_start, pos_end);
 		return textfragment;
 	}
 


From m.dejonge at tudelft.nl  Thu Mar  3 16:15:25 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 15:15:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22289 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20110303151525.B222A7F8075@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 15:15:25 2011
New Revision: 22289
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22289&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Mar  3 15:11:05 2011	(r22288)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Mar  3 15:15:25 2011	(r22289)
@@ -68,7 +68,7 @@
 		
 construct-text-by-compare(pp|pp-table): (origin-node, node) -> text
 	where
-		ast-changes:=<collect-ast-changes> (origin-node, node); debug(!"ast-changes: ");
+		ast-changes:=<collect-ast-changes> (origin-node, node); //debug(!"ast-changes: ");
 		text-changes:=<map(ast-change-to-text-change(pp|pp-table)); flatten-list> ast-changes;
 		text:=<
 			apply-text-changes; 


From m.dejonge at tudelft.nl  Thu Mar  3 16:16:40 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 03 Mar 2011 15:16:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22290 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20110303151640.4F00C7F8076@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar  3 15:16:39 2011
New Revision: 22290
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22290&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Mar  3 15:15:25 2011	(r22289)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Mar  3 15:16:39 2011	(r22290)
@@ -1,9 +1,9 @@
-module lib/construct-text
+module sdf2imp/util/construct-text
 
 imports 
   libstratego-lib 
   libstratego-gpp
-  lib/origin-tracking 
+  sdf2imp/util/origin-tracking 
 
 rules //API for text reconstruction
 


From R.B.Vermaas at tudelft.nl  Fri Mar  4 11:34:50 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 04 Mar 2011 10:34:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22291 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110304103450.DB9BB108C01E@mx3.tudelft.nl>

Author: rob
Date: Fri Mar  4 10:34:50 2011
New Revision: 22291
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22291&sc=1

Log:
add syntax/rtg to -I of strj-tests

Modified:
   strategoxt/branches/strategoxt-java/strategoxt.xml

Modified: strategoxt/branches/strategoxt-java/strategoxt.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/strategoxt.xml	Thu Mar  3 15:16:39 2011	(r22290)
+++ strategoxt/branches/strategoxt-java/strategoxt.xml	Fri Mar  4 10:34:50 2011	(r22291)
@@ -35,6 +35,8 @@
                     <arg value="${syntaxaterm}" />
                     <arg value="-I" />
                     <arg value="${syntaxbox}" />
+                    <arg value="-I" />
+                    <arg value="${syntaxrtg}" />
                 </strjargs>
                 <str-deps>
                     <srcfiles dir="." includes="*.jar" />
@@ -463,4 +465,4 @@
         </sequential>
     </macrodef>
 
-</project>
\ No newline at end of file
+</project>

From R.B.Vermaas at tudelft.nl  Fri Mar  4 14:12:23 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 04 Mar 2011 13:12:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22292 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
Message-ID: <20110304131223.335837F8048@mx1.tudelft.nl>

Author: rob
Date: Fri Mar  4 13:12:22 2011
New Revision: 22292
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22292&sc=1

Log:
<make-placeholder>1 ; get-arguments shoudl result in [1] in stead of 1

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_arguments.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_arguments.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_arguments.java	Fri Mar  4 10:34:50 2011	(r22291)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_get_arguments.java	Fri Mar  4 13:12:22 2011	(r22292)
@@ -44,7 +44,7 @@
             return true;
         case IStrategoTerm.PLACEHOLDER:
             IStrategoPlaceholder placeholder = (IStrategoPlaceholder) tvars[0];
-            env.setCurrent(placeholder.getTemplate());
+            env.setCurrent(env.getFactory().makeList(placeholder.getTemplate()));
             return true;
         default:
             throw new IllegalStateException("SSL_get_arguments failed for " + tvars[0]);

From R.B.Vermaas at tudelft.nl  Fri Mar  4 15:32:26 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 04 Mar 2011 14:32:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22293 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110304143226.C476BCC2F8@mx4.tudelft.nl>

Author: rob
Date: Fri Mar  4 14:32:26 2011
New Revision: 22293
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22293&sc=1

Log:
run tests from test directory

Modified:
   strategoxt/branches/strategoxt-java/strategoxt.xml

Modified: strategoxt/branches/strategoxt-java/strategoxt.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/strategoxt.xml	Fri Mar  4 13:12:22 2011	(r22292)
+++ strategoxt/branches/strategoxt-java/strategoxt.xml	Fri Mar  4 14:32:26 2011	(r22293)
@@ -36,7 +36,9 @@
                     <arg value="-I" />
                     <arg value="${syntaxbox}" />
                     <arg value="-I" />
-                    <arg value="${syntaxrtg}" />
+                    <arg value="generated/" />
+                    <arg value="-I" />
+                    <arg value="${@{input}.dirname}" />
                 </strjargs>
                 <str-deps>
                     <srcfiles dir="." includes="*.jar" />
@@ -53,7 +55,7 @@
                            debuglevel="source"
                            compiler="classic"
                     />
-             <java fork="true" classname="test.Main" failonerror="true">
+             <java fork="true" classname="test.Main" failonerror="true" dir="${@{input}.dirname}">
                  <classpath>
                     <pathelement location="./strategoxt.jar"/>
                     <pathelement path="${@{input}.dirname}/${@{input}.basename}"/>

From R.B.Vermaas at tudelft.nl  Fri Mar  4 15:33:15 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 04 Mar 2011 14:33:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22294 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110304143315.89DFE108C04D@mx3.tudelft.nl>

Author: rob
Date: Fri Mar  4 14:33:15 2011
New Revision: 22294
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22294&sc=1

Log:
generated files needed for rtg tests

Modified:
   strategoxt/branches/strategoxt-java/build.xml

Modified: strategoxt/branches/strategoxt-java/build.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/build.xml	Fri Mar  4 14:32:26 2011	(r22293)
+++ strategoxt/branches/strategoxt-java/build.xml	Fri Mar  4 14:33:15 2011	(r22294)
@@ -24,6 +24,21 @@
     </target>
 
     <target name="tests">
+        <mkdir dir="generated" />
+        <for param="deffile">
+            <path>
+                <fileset dir="libraries" includes="sglr/tests/*.def" excludes="sglr/tests/List.def" />
+            </path>
+            <sequential>
+                <basename file="@{deffile}" property="@{deffile}.basename" suffix=".def" />
+                <dirname file="@{deffile}" property="@{deffile}.dirname" />
+
+                <sdf2rtg input="@{deffile}" output="generated/${@{deffile}.basename}.rtg" main="Main" />
+                <rtg2sig input="generated/${@{deffile}.basename}.rtg" output="generated/${@{deffile}.basename}.str" main="Main" />
+                <sdf2table input="@{deffile}" output="generated/${@{deffile}.basename}.tbl" main="Main" />
+            </sequential>
+        </for>
+
         <for param="strfile" keepgoing="true">
             <path>
                 <fileset dir="libraries" includes="*/tests/*.str" />

From R.B.Vermaas at tudelft.nl  Fri Mar  4 15:42:42 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 04 Mar 2011 14:42:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22295 -
	strategoxt/branches/strategoxt-java/libraries/lib/tests
Message-ID: <20110304144242.806212B8026@mx2.tudelft.nl>

Author: rob
Date: Fri Mar  4 14:42:42 2011
New Revision: 22295
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22295&sc=1

Log:
disabled fdopen for now

Modified:
   strategoxt/branches/strategoxt-java/libraries/lib/tests/system-posix-xsi-test.str

Modified: strategoxt/branches/strategoxt-java/libraries/lib/tests/system-posix-xsi-test.str
==============================================================================
--- strategoxt/branches/strategoxt-java/libraries/lib/tests/system-posix-xsi-test.str	Fri Mar  4 14:33:15 2011	(r22294)
+++ strategoxt/branches/strategoxt-java/libraries/lib/tests/system-posix-xsi-test.str	Fri Mar  4 14:42:42 2011	(r22295)
@@ -6,7 +6,7 @@
   main-system-posix-xsi-test = 
     test-suite(!"system-posix-xsi",
       cwd-tests
-      ; fileno-tests
+     // ; fileno-tests
     )
 
 strategies
@@ -23,6 +23,7 @@
 
 strategies
 
+/*
   fileno-tests =
     where(new-temp-file => (tmp-name, tmp-fd))
 
@@ -35,3 +36,4 @@
       )
 
     ; where(<remove-file> tmp-name)
+*/

From L.C.L.Kats at tudelft.nl  Fri Mar  4 16:49:53 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 04 Mar 2011 15:49:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22296 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms
Message-ID: <20110304154953.15A292B8016@mx2.tudelft.nl>

Author: LennartKats
Date: Fri Mar  4 15:49:52 2011
New Revision: 22296
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22296&sc=1

Log:
doSlowMatch override for StrategoPlaceHolder

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoPlaceholder.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoPlaceholder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoPlaceholder.java	Fri Mar  4 14:42:42 2011	(r22295)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoPlaceholder.java	Fri Mar  4 15:49:52 2011	(r22296)
@@ -27,6 +27,26 @@
     }
     
     @Override
+    protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {
+        if (second.getTermType() != PLACEHOLDER)
+            return false;
+        
+        if (!getTemplate().match(((IStrategoPlaceholder) second).getTemplate()))
+        	return false;
+        
+        IStrategoList annotations = getAnnotations();
+        IStrategoList secondAnnotations = second.getAnnotations();
+        if (annotations == secondAnnotations) {
+            return true;
+        } else if (annotations.match(secondAnnotations)) {
+            if (commonStorageType == SHARABLE) internalSetAnnotations(secondAnnotations);
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    @Override
 	public void writeAsString(Appendable output, int maxDepth) throws IOException {
     	output.append('<');
     	getTemplate().writeAsString(output, maxDepth - 1);

From L.C.L.Kats at tudelft.nl  Fri Mar  4 17:04:03 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 04 Mar 2011 16:04:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22297 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110304160403.C3B177F80D4@mx1.tudelft.nl>

Author: LennartKats
Date: Fri Mar  4 16:04:03 2011
New Revision: 22297
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22297&sc=1

Log:
new-libs

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From R.B.Vermaas at tudelft.nl  Fri Mar  4 17:04:34 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 04 Mar 2011 16:04:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22298 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110304160434.D4B13CC05F@mx4.tudelft.nl>

Author: rob
Date: Fri Mar  4 16:04:34 2011
New Revision: 22298
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22298&sc=1

Log:
copy .tbl to sglr test dir

Modified:
   strategoxt/branches/strategoxt-java/build.xml

Modified: strategoxt/branches/strategoxt-java/build.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/build.xml	Fri Mar  4 16:04:03 2011	(r22297)
+++ strategoxt/branches/strategoxt-java/build.xml	Fri Mar  4 16:04:34 2011	(r22298)
@@ -36,6 +36,7 @@
                 <sdf2rtg input="@{deffile}" output="generated/${@{deffile}.basename}.rtg" main="Main" />
                 <rtg2sig input="generated/${@{deffile}.basename}.rtg" output="generated/${@{deffile}.basename}.str" main="Main" />
                 <sdf2table input="@{deffile}" output="generated/${@{deffile}.basename}.tbl" main="Main" />
+                <copy file="generated/${@{deffile}.basename}.tbl" tofile="${@{deffile}.dirname}/${@{deffile}.basename}.tbl" />
             </sequential>
         </for>
 

From seba at informatik.uni-marburg.de  Fri Mar  4 19:01:25 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 04 Mar 2011 18:01:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22299 - in
	sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations:
	. extraction
Message-ID: <20110304180125.81DD7CC3FF@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Fri Mar  4 18:01:23 2011
New Revision: 22299
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22299&sc=1

Log:
slight change to extraction strategies

Modified:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction.str
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$A$M_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Dyn$Rule_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Label$Dyn$Rule$Id_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Scope$Label_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$All_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Anno$Cong_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Anno$List_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$App_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$As_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Assign_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$B$A_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build$Default$P$T_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build$Default_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$Dynamic_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$No$Args_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$T_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Char$Cong_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Char_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Choice_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Compilation$Unit_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Compile$Error_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Cond$Choice_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Cong$Q_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Const$Type_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Constructors_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Default$Var$Dec_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Desugarings_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Assign$Add_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Assign_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Id_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Fix_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Union$Fix_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Union_4_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Scope$Id_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Scope_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Union$Fix_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Union_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Body_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Dec$Head_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Dec_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Empty$Tuple$Cong_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Explode$Cong_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Explode_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl$Inj_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl$Q_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$S$Def$Inl_4_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$S$Def_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Fail_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Fun$Type_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Gen$Dyn$Rules_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Guarded$L$Choice_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Id_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$If$Then_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import$Term_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import$Wildcard_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Imports_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Inject$Desugaring_4_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Int$Cong_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Int_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Java$Type$Dec_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$L$Choice_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$L$Rule_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Labeled$Dyn$Rule$Id_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Labeled$Dyn$Rule$Scope$Id_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Let_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Cong$No$Tail_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Cong_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Tail_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Var_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Match_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Module_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Native$Sugar$Body_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Native$Sugar$Dec$Head_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$No$Anno$List_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Not_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$One_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl$Inj_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl$Q_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Q_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlay$No$Args_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlay_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlays_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Paren$Strat_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim$No$Args_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim$T_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Pure$Desugaring_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Choice_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec$No$Args_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec$T_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def$No$Args_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def$T_4_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Real$Cong_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Real_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rec_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Root$App_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule$Names_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule$No$Cond_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rules_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def$No$Args_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def$T_4_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Rule_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Var_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope$Default_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope$Labels_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Seq_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule$Depends_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule$Match_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Signature_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$List$Tl_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$List_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$No$Args_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$Tuple_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$Var_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sorts_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Specification_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Str$Cong_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Str_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Strategies_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Strategy$Curly_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Body_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Dec$Head_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Dec_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Super$Sugar$Dec_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Case_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Choice$No$Otherwise_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Choice_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Test_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Tuple$Cong_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Tuple_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Undefine$Dyn$Rule_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Var$Dec_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Var_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Where$Clause_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Where_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$With$Clause_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$With_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Wld_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/absent_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/alias_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/aliases_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/alt_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/annotated_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/appl_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_group_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/attrs_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/avoid_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/bot_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/bracket_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/cf_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/chain_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/char_class_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/ci_lit_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugaring_to_sdf_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugaring_to_str_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugarings_to_sdf_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugarings_to_str_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/conc_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/conc_grammars_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_priorities_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_restrictions_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_start_symbols_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_syntax_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/default_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/definition_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/diff_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/empty_grammar_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/eof_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/exports_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/extract_sdf_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/extract_str_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/file_start_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/fold_conc_grammars_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/follow_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/fun_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/func_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/grammar_elem_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/hiddens_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/id_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/imp_section_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/imports_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/int_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/isect_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_sep_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_star_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_star_sep_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/kernel_start_symbols_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/label_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/label__start_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/layout_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/left_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lex_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_priorities_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_restrictions_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_start_symbols_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_syntax_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_variables_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted14.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted15.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted19.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted22.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted23.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted6.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted9.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifting_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lit_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/main$S$T$R_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/main_sdf_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/module_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/module_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/natural_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/negative_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/no_attrs_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/non_assoc_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/non_transitive_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/numeric_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/opt_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/parameterized_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/parameterized_sort_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/placeholder_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/positive_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prefer_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prefix_fun_4_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/present_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/priorities_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prod_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prods_group_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/production_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/quoted_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/quoted_fun_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/range_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/real_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/real_con_3_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/reject_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/renamed_module_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/renamings_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/restrictions_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/right_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/seq_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/short_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/simple_charclass_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/simple_group_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/single_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/sort_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/sorts_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/start_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/strategy_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/symbol_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/syntax_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/term_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/top_0_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/transformation_elem_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/tuple_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/union_2_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unparameterized_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unquoted_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unquoted_fun_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/variables_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/varsym_1_0.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/with_arguments_2_0.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction.str
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction.str	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction.str	Fri Mar  4 18:01:23 2011	(r22299)
@@ -40,7 +40,10 @@
 rules
   comp-desugarings-to-sdf :
     Desugarings(ds) ->
-    context-free-syntax(<map(comp-desugaring-to-sdf); concat> ds)
+    context-free-syntax(syns)
+    where
+      <map(comp-desugaring-to-sdf); concat> ds => syns;
+      <not(?[])> syns
 
   comp-desugaring-to-sdf :
     PureDesugaring(_) -> []

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$A$M_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$A$M_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$A$M_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("AM_2_0");
-    Fail79:
+    Fail80:
     { 
       IStrategoTerm f_115 = null;
       IStrategoTerm d_115 = null;
       IStrategoTerm e_115 = null;
       IStrategoTerm g_115 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consAM_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail79;
+        break Fail80;
       d_115 = term.getSubterm(0);
       e_115 = term.getSubterm(1);
       IStrategoList annos56 = term.getAnnotations();
       f_115 = annos56;
       term = l_20.invoke(context, d_115);
       if(term == null)
-        break Fail79;
+        break Fail80;
       g_115 = term;
       term = m_20.invoke(context, e_115);
       if(term == null)
-        break Fail79;
+        break Fail80;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consAM_2, new IStrategoTerm[]{g_115, term}), checkListAnnos(termFactory, f_115));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Dyn$Rule_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Dyn$Rule_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Dyn$Rule_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("AddDynRule_2_0");
-    Fail36:
+    Fail37:
     { 
       IStrategoTerm y_105 = null;
       IStrategoTerm w_105 = null;
       IStrategoTerm x_105 = null;
       IStrategoTerm z_105 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consAddDynRule_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail36;
+        break Fail37;
       w_105 = term.getSubterm(0);
       x_105 = term.getSubterm(1);
       IStrategoList annos13 = term.getAnnotations();
       y_105 = annos13;
       term = d_17.invoke(context, w_105);
       if(term == null)
-        break Fail36;
+        break Fail37;
       z_105 = term;
       term = e_17.invoke(context, x_105);
       if(term == null)
-        break Fail36;
+        break Fail37;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consAddDynRule_2, new IStrategoTerm[]{z_105, term}), checkListAnnos(termFactory, y_105));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Label$Dyn$Rule$Id_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Label$Dyn$Rule$Id_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Label$Dyn$Rule$Id_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("AddLabelDynRuleId_2_0");
-    Fail30:
+    Fail31:
     { 
       IStrategoTerm r_104 = null;
       IStrategoTerm p_104 = null;
       IStrategoTerm q_104 = null;
       IStrategoTerm s_104 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consAddLabelDynRuleId_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail30;
+        break Fail31;
       p_104 = term.getSubterm(0);
       q_104 = term.getSubterm(1);
       IStrategoList annos7 = term.getAnnotations();
       r_104 = annos7;
       term = q_16.invoke(context, p_104);
       if(term == null)
-        break Fail30;
+        break Fail31;
       s_104 = term;
       term = r_16.invoke(context, q_104);
       if(term == null)
-        break Fail30;
+        break Fail31;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consAddLabelDynRuleId_2, new IStrategoTerm[]{s_104, term}), checkListAnnos(termFactory, r_104));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Scope$Label_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Scope$Label_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Add$Scope$Label_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("AddScopeLabel_2_0");
-    Fail39:
+    Fail40:
     { 
       IStrategoTerm o_106 = null;
       IStrategoTerm m_106 = null;
       IStrategoTerm n_106 = null;
       IStrategoTerm p_106 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consAddScopeLabel_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail39;
+        break Fail40;
       m_106 = term.getSubterm(0);
       n_106 = term.getSubterm(1);
       IStrategoList annos16 = term.getAnnotations();
       o_106 = annos16;
       term = j_17.invoke(context, m_106);
       if(term == null)
-        break Fail39;
+        break Fail40;
       p_106 = term;
       term = k_17.invoke(context, n_106);
       if(term == null)
-        break Fail39;
+        break Fail40;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consAddScopeLabel_2, new IStrategoTerm[]{p_106, term}), checkListAnnos(termFactory, o_106));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$All_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$All_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$All_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("All_1_0");
-    Fail112:
+    Fail113:
     { 
       IStrategoTerm s_120 = null;
       IStrategoTerm r_120 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consAll_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail112;
+        break Fail113;
       r_120 = term.getSubterm(0);
       IStrategoList annos88 = term.getAnnotations();
       s_120 = annos88;
       term = k_22.invoke(context, r_120);
       if(term == null)
-        break Fail112;
+        break Fail113;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consAll_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, s_120));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Anno$Cong_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Anno$Cong_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Anno$Cong_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("AnnoCong_2_0");
-    Fail94:
+    Fail95:
     { 
       IStrategoTerm u_117 = null;
       IStrategoTerm s_117 = null;
       IStrategoTerm t_117 = null;
       IStrategoTerm v_117 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consAnnoCong_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail94;
+        break Fail95;
       s_117 = term.getSubterm(0);
       t_117 = term.getSubterm(1);
       IStrategoList annos70 = term.getAnnotations();
       u_117 = annos70;
       term = l_21.invoke(context, s_117);
       if(term == null)
-        break Fail94;
+        break Fail95;
       v_117 = term;
       term = m_21.invoke(context, t_117);
       if(term == null)
-        break Fail94;
+        break Fail95;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consAnnoCong_2, new IStrategoTerm[]{v_117, term}), checkListAnnos(termFactory, u_117));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Anno$List_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Anno$List_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Anno$List_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("AnnoList_2_0");
-    Fail146:
+    Fail147:
     { 
       IStrategoTerm o_126 = null;
       IStrategoTerm m_126 = null;
       IStrategoTerm n_126 = null;
       IStrategoTerm p_126 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consAnnoList_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail146;
+        break Fail147;
       m_126 = term.getSubterm(0);
       n_126 = term.getSubterm(1);
       IStrategoList annos119 = term.getAnnotations();
       o_126 = annos119;
       term = i_24.invoke(context, m_126);
       if(term == null)
-        break Fail146;
+        break Fail147;
       p_126 = term;
       term = j_24.invoke(context, n_126);
       if(term == null)
-        break Fail146;
+        break Fail147;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consAnnoList_2, new IStrategoTerm[]{p_126, term}), checkListAnnos(termFactory, o_126));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$App_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$App_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$App_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("App_2_0");
-    Fail144:
+    Fail145:
     { 
       IStrategoTerm g_126 = null;
       IStrategoTerm e_126 = null;
       IStrategoTerm f_126 = null;
       IStrategoTerm h_126 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consApp_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail144;
+        break Fail145;
       e_126 = term.getSubterm(0);
       f_126 = term.getSubterm(1);
       IStrategoList annos117 = term.getAnnotations();
       g_126 = annos117;
       term = f_24.invoke(context, e_126);
       if(term == null)
-        break Fail144;
+        break Fail145;
       h_126 = term;
       term = g_24.invoke(context, f_126);
       if(term == null)
-        break Fail144;
+        break Fail145;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consApp_2, new IStrategoTerm[]{h_126, term}), checkListAnnos(termFactory, g_126));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$As_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$As_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$As_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("As_2_0");
-    Fail148:
+    Fail149:
     { 
       IStrategoTerm w_126 = null;
       IStrategoTerm u_126 = null;
       IStrategoTerm v_126 = null;
       IStrategoTerm x_126 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consAs_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail148;
+        break Fail149;
       u_126 = term.getSubterm(0);
       v_126 = term.getSubterm(1);
       IStrategoList annos121 = term.getAnnotations();
       w_126 = annos121;
       term = l_24.invoke(context, u_126);
       if(term == null)
-        break Fail148;
+        break Fail149;
       x_126 = term;
       term = m_24.invoke(context, v_126);
       if(term == null)
-        break Fail148;
+        break Fail149;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consAs_2, new IStrategoTerm[]{x_126, term}), checkListAnnos(termFactory, w_126));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Assign_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Assign_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Assign_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Assign_2_0");
-    Fail78:
+    Fail79:
     { 
       IStrategoTerm y_114 = null;
       IStrategoTerm w_114 = null;
       IStrategoTerm x_114 = null;
       IStrategoTerm z_114 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consAssign_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail78;
+        break Fail79;
       w_114 = term.getSubterm(0);
       x_114 = term.getSubterm(1);
       IStrategoList annos55 = term.getAnnotations();
       y_114 = annos55;
       term = j_20.invoke(context, w_114);
       if(term == null)
-        break Fail78;
+        break Fail79;
       z_114 = term;
       term = k_20.invoke(context, x_114);
       if(term == null)
-        break Fail78;
+        break Fail79;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consAssign_2, new IStrategoTerm[]{z_114, term}), checkListAnnos(termFactory, y_114));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$B$A_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$B$A_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$B$A_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("BA_2_0");
-    Fail108:
+    Fail109:
     { 
       IStrategoTerm w_119 = null;
       IStrategoTerm t_119 = null;
       IStrategoTerm u_119 = null;
       IStrategoTerm x_119 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consBA_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail108;
+        break Fail109;
       t_119 = term.getSubterm(0);
       u_119 = term.getSubterm(1);
       IStrategoList annos84 = term.getAnnotations();
       w_119 = annos84;
       term = e_22.invoke(context, t_119);
       if(term == null)
-        break Fail108;
+        break Fail109;
       x_119 = term;
       term = f_22.invoke(context, u_119);
       if(term == null)
-        break Fail108;
+        break Fail109;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consBA_2, new IStrategoTerm[]{x_119, term}), checkListAnnos(termFactory, w_119));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build$Default$P$T_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build$Default$P$T_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build$Default$P$T_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("BuildDefaultPT_1_0");
-    Fail153:
+    Fail154:
     { 
       IStrategoTerm r_127 = null;
       IStrategoTerm q_127 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consBuildDefaultPT_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail153;
+        break Fail154;
       q_127 = term.getSubterm(0);
       IStrategoList annos126 = term.getAnnotations();
       r_127 = annos126;
       term = s_24.invoke(context, q_127);
       if(term == null)
-        break Fail153;
+        break Fail154;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consBuildDefaultPT_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, r_127));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build$Default_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build$Default_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build$Default_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("BuildDefault_1_0");
-    Fail147:
+    Fail148:
     { 
       IStrategoTerm s_126 = null;
       IStrategoTerm r_126 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consBuildDefault_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail147;
+        break Fail148;
       r_126 = term.getSubterm(0);
       IStrategoList annos120 = term.getAnnotations();
       s_126 = annos120;
       term = k_24.invoke(context, r_126);
       if(term == null)
-        break Fail147;
+        break Fail148;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consBuildDefault_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, s_126));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Build_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Build_1_0");
-    Fail118:
+    Fail119:
     { 
       IStrategoTerm c_122 = null;
       IStrategoTerm b_122 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consBuild_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail118;
+        break Fail119;
       b_122 = term.getSubterm(0);
       IStrategoList annos94 = term.getAnnotations();
       c_122 = annos94;
       term = w_22.invoke(context, b_122);
       if(term == null)
-        break Fail118;
+        break Fail119;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consBuild_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, c_122));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$Dynamic_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$Dynamic_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$Dynamic_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("CallDynamic_3_0");
-    Fail122:
+    Fail123:
     { 
       IStrategoTerm l_122 = null;
       IStrategoTerm i_122 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm o_122 = null;
       IStrategoTerm p_122 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consCallDynamic_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail122;
+        break Fail123;
       i_122 = term.getSubterm(0);
       j_122 = term.getSubterm(1);
       k_122 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       l_122 = annos96;
       term = y_22.invoke(context, i_122);
       if(term == null)
-        break Fail122;
+        break Fail123;
       o_122 = term;
       term = z_22.invoke(context, j_122);
       if(term == null)
-        break Fail122;
+        break Fail123;
       p_122 = term;
       term = a_23.invoke(context, k_122);
       if(term == null)
-        break Fail122;
+        break Fail123;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consCallDynamic_3, new IStrategoTerm[]{o_122, p_122, term}), checkListAnnos(termFactory, l_122));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$No$Args_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$No$Args_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$No$Args_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("CallNoArgs_1_0");
-    Fail88:
+    Fail89:
     { 
       IStrategoTerm y_116 = null;
       IStrategoTerm x_116 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consCallNoArgs_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail88;
+        break Fail89;
       x_116 = term.getSubterm(0);
       IStrategoList annos65 = term.getAnnotations();
       y_116 = annos65;
       term = d_21.invoke(context, x_116);
       if(term == null)
-        break Fail88;
+        break Fail89;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consCallNoArgs_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, y_116));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$T_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$T_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call$T_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("CallT_3_0");
-    Fail123:
+    Fail124:
     { 
       IStrategoTerm u_122 = null;
       IStrategoTerm r_122 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm v_122 = null;
       IStrategoTerm w_122 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consCallT_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail123;
+        break Fail124;
       r_122 = term.getSubterm(0);
       s_122 = term.getSubterm(1);
       t_122 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       u_122 = annos97;
       term = b_23.invoke(context, r_122);
       if(term == null)
-        break Fail123;
+        break Fail124;
       v_122 = term;
       term = c_23.invoke(context, s_122);
       if(term == null)
-        break Fail123;
+        break Fail124;
       w_122 = term;
       term = d_23.invoke(context, t_122);
       if(term == null)
-        break Fail123;
+        break Fail124;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consCallT_3, new IStrategoTerm[]{v_122, w_122, term}), checkListAnnos(termFactory, u_122));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Call_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Call_2_0");
-    Fail110:
+    Fail111:
     { 
       IStrategoTerm l_120 = null;
       IStrategoTerm j_120 = null;
       IStrategoTerm k_120 = null;
       IStrategoTerm m_120 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consCall_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail110;
+        break Fail111;
       j_120 = term.getSubterm(0);
       k_120 = term.getSubterm(1);
       IStrategoList annos86 = term.getAnnotations();
       l_120 = annos86;
       term = h_22.invoke(context, j_120);
       if(term == null)
-        break Fail110;
+        break Fail111;
       m_120 = term;
       term = i_22.invoke(context, k_120);
       if(term == null)
-        break Fail110;
+        break Fail111;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consCall_2, new IStrategoTerm[]{m_120, term}), checkListAnnos(termFactory, l_120));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Char$Cong_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Char$Cong_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Char$Cong_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("CharCong_1_0");
-    Fail96:
+    Fail97:
     { 
       IStrategoTerm d_118 = null;
       IStrategoTerm c_118 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consCharCong_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail96;
+        break Fail97;
       c_118 = term.getSubterm(0);
       IStrategoList annos72 = term.getAnnotations();
       d_118 = annos72;
       term = p_21.invoke(context, c_118);
       if(term == null)
-        break Fail96;
+        break Fail97;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consCharCong_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, d_118));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Char_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Char_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Char_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Char_1_0");
-    Fail152:
+    Fail153:
     { 
       IStrategoTerm o_127 = null;
       IStrategoTerm n_127 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consChar_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail152;
+        break Fail153;
       n_127 = term.getSubterm(0);
       IStrategoList annos125 = term.getAnnotations();
       o_127 = annos125;
       term = r_24.invoke(context, n_127);
       if(term == null)
-        break Fail152;
+        break Fail153;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consChar_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, o_127));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Choice_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Choice_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Choice_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Choice_2_0");
-    Fail85:
+    Fail86:
     { 
       IStrategoTerm o_116 = null;
       IStrategoTerm m_116 = null;
       IStrategoTerm n_116 = null;
       IStrategoTerm p_116 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consChoice_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail85;
+        break Fail86;
       m_116 = term.getSubterm(0);
       n_116 = term.getSubterm(1);
       IStrategoList annos62 = term.getAnnotations();
       o_116 = annos62;
       term = z_20.invoke(context, m_116);
       if(term == null)
-        break Fail85;
+        break Fail86;
       p_116 = term;
       term = a_21.invoke(context, n_116);
       if(term == null)
-        break Fail85;
+        break Fail86;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consChoice_2, new IStrategoTerm[]{p_116, term}), checkListAnnos(termFactory, o_116));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Compilation$Unit_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Compilation$Unit_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Compilation$Unit_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("CompilationUnit_3_0");
-    Fail277:
+    Fail278:
     { 
       IStrategoTerm e_151 = null;
       IStrategoTerm z_150 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm f_151 = null;
       IStrategoTerm g_151 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consCompilationUnit_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail277;
+        break Fail278;
       z_150 = term.getSubterm(0);
       a_151 = term.getSubterm(1);
       d_151 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       e_151 = annos232;
       term = l_30.invoke(context, z_150);
       if(term == null)
-        break Fail277;
+        break Fail278;
       f_151 = term;
       term = m_30.invoke(context, a_151);
       if(term == null)
-        break Fail277;
+        break Fail278;
       g_151 = term;
       term = n_30.invoke(context, d_151);
       if(term == null)
-        break Fail277;
+        break Fail278;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consCompilationUnit_3, new IStrategoTerm[]{f_151, g_151, term}), checkListAnnos(termFactory, e_151));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Compile$Error_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Compile$Error_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Compile$Error_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("CompileError_2_0");
-    Fail283:
+    Fail284:
     { 
       IStrategoTerm l_153 = null;
       IStrategoTerm z_152 = null;
       IStrategoTerm k_153 = null;
       IStrategoTerm q_153 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consCompileError_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail283;
+        break Fail284;
       z_152 = term.getSubterm(0);
       k_153 = term.getSubterm(1);
       IStrategoList annos238 = term.getAnnotations();
       l_153 = annos238;
       term = w_30.invoke(context, z_152);
       if(term == null)
-        break Fail283;
+        break Fail284;
       q_153 = term;
       term = x_30.invoke(context, k_153);
       if(term == null)
-        break Fail283;
+        break Fail284;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consCompileError_2, new IStrategoTerm[]{q_153, term}), checkListAnnos(termFactory, l_153));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Cond$Choice_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Cond$Choice_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Cond$Choice_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("CondChoice_3_0");
-    Fail83:
+    Fail84:
     { 
       IStrategoTerm d_116 = null;
       IStrategoTerm a_116 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm e_116 = null;
       IStrategoTerm f_116 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consCondChoice_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail83;
+        break Fail84;
       a_116 = term.getSubterm(0);
       b_116 = term.getSubterm(1);
       c_116 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       d_116 = annos60;
       term = u_20.invoke(context, a_116);
       if(term == null)
-        break Fail83;
+        break Fail84;
       e_116 = term;
       term = v_20.invoke(context, b_116);
       if(term == null)
-        break Fail83;
+        break Fail84;
       f_116 = term;
       term = w_20.invoke(context, c_116);
       if(term == null)
-        break Fail83;
+        break Fail84;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consCondChoice_3, new IStrategoTerm[]{e_116, f_116, term}), checkListAnnos(termFactory, d_116));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Cong$Q_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Cong$Q_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Cong$Q_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("CongQ_2_0");
-    Fail95:
+    Fail96:
     { 
       IStrategoTerm z_117 = null;
       IStrategoTerm x_117 = null;
       IStrategoTerm y_117 = null;
       IStrategoTerm a_118 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consCongQ_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail95;
+        break Fail96;
       x_117 = term.getSubterm(0);
       y_117 = term.getSubterm(1);
       IStrategoList annos71 = term.getAnnotations();
       z_117 = annos71;
       term = n_21.invoke(context, x_117);
       if(term == null)
-        break Fail95;
+        break Fail96;
       a_118 = term;
       term = o_21.invoke(context, y_117);
       if(term == null)
-        break Fail95;
+        break Fail96;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consCongQ_2, new IStrategoTerm[]{a_118, term}), checkListAnnos(termFactory, z_117));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Const$Type_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Const$Type_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Const$Type_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ConstType_1_0");
-    Fail127:
+    Fail128:
     { 
       IStrategoTerm m_123 = null;
       IStrategoTerm l_123 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consConstType_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail127;
+        break Fail128;
       l_123 = term.getSubterm(0);
       IStrategoList annos101 = term.getAnnotations();
       m_123 = annos101;
       term = j_23.invoke(context, l_123);
       if(term == null)
-        break Fail127;
+        break Fail128;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consConstType_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, m_123));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Constructors_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Constructors_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Constructors_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Constructors_1_0");
-    Fail140:
+    Fail141:
     { 
       IStrategoTerm w_125 = null;
       IStrategoTerm v_125 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consConstructors_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail140;
+        break Fail141;
       v_125 = term.getSubterm(0);
       IStrategoList annos114 = term.getAnnotations();
       w_125 = annos114;
       term = c_24.invoke(context, v_125);
       if(term == null)
-        break Fail140;
+        break Fail141;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consConstructors_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, w_125));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Default$Var$Dec_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Default$Var$Dec_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Default$Var$Dec_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DefaultVarDec_1_0");
-    Fail63:
+    Fail64:
     { 
       IStrategoTerm u_110 = null;
       IStrategoTerm t_110 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDefaultVarDec_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail63;
+        break Fail64;
       t_110 = term.getSubterm(0);
       IStrategoList annos40 = term.getAnnotations();
       u_110 = annos40;
       term = w_18.invoke(context, t_110);
       if(term == null)
-        break Fail63;
+        break Fail64;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDefaultVarDec_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, u_110));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Desugarings_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Desugarings_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Desugarings_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Desugarings_1_0");
-    Fail280:
+    Fail281:
     { 
       IStrategoTerm h_152 = null;
       IStrategoTerm e_152 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDesugarings_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail280;
+        break Fail281;
       e_152 = term.getSubterm(0);
       IStrategoList annos235 = term.getAnnotations();
       h_152 = annos235;
       term = t_30.invoke(context, e_152);
       if(term == null)
-        break Fail280;
+        break Fail281;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDesugarings_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, h_152));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Assign$Add_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Assign$Add_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Assign$Add_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleAssignAdd_2_0");
-    Fail33:
+    Fail34:
     { 
       IStrategoTerm i_105 = null;
       IStrategoTerm g_105 = null;
       IStrategoTerm h_105 = null;
       IStrategoTerm j_105 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleAssignAdd_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail33;
+        break Fail34;
       g_105 = term.getSubterm(0);
       h_105 = term.getSubterm(1);
       IStrategoList annos10 = term.getAnnotations();
       i_105 = annos10;
       term = x_16.invoke(context, g_105);
       if(term == null)
-        break Fail33;
+        break Fail34;
       j_105 = term;
       term = y_16.invoke(context, h_105);
       if(term == null)
-        break Fail33;
+        break Fail34;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleAssignAdd_2, new IStrategoTerm[]{j_105, term}), checkListAnnos(termFactory, i_105));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Assign_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Assign_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Assign_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleAssign_2_0");
-    Fail34:
+    Fail35:
     { 
       IStrategoTerm n_105 = null;
       IStrategoTerm l_105 = null;
       IStrategoTerm m_105 = null;
       IStrategoTerm o_105 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleAssign_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail34;
+        break Fail35;
       l_105 = term.getSubterm(0);
       m_105 = term.getSubterm(1);
       IStrategoList annos11 = term.getAnnotations();
       n_105 = annos11;
       term = z_16.invoke(context, l_105);
       if(term == null)
-        break Fail34;
+        break Fail35;
       o_105 = term;
       term = a_17.invoke(context, m_105);
       if(term == null)
-        break Fail34;
+        break Fail35;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleAssign_2, new IStrategoTerm[]{o_105, term}), checkListAnnos(termFactory, n_105));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Id_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Id_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Id_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleId_1_0");
-    Fail29:
+    Fail30:
     { 
       IStrategoTerm n_104 = null;
       IStrategoTerm m_104 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleId_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail29;
+        break Fail30;
       m_104 = term.getSubterm(0);
       IStrategoList annos6 = term.getAnnotations();
       n_104 = annos6;
       term = p_16.invoke(context, m_104);
       if(term == null)
-        break Fail29;
+        break Fail30;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleId_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, n_104));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Fix_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Fix_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Fix_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleIntersectFix_2_0");
-    Fail75:
+    Fail76:
     { 
       IStrategoTerm i_114 = null;
       IStrategoTerm g_114 = null;
       IStrategoTerm h_114 = null;
       IStrategoTerm j_114 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleIntersectFix_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail75;
+        break Fail76;
       g_114 = term.getSubterm(0);
       h_114 = term.getSubterm(1);
       IStrategoList annos52 = term.getAnnotations();
       i_114 = annos52;
       term = e_20.invoke(context, g_114);
       if(term == null)
-        break Fail75;
+        break Fail76;
       j_114 = term;
       term = f_20.invoke(context, h_114);
       if(term == null)
-        break Fail75;
+        break Fail76;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleIntersectFix_2, new IStrategoTerm[]{j_114, term}), checkListAnnos(termFactory, i_114));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Union$Fix_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Union$Fix_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Union$Fix_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleIntersectUnionFix_3_0");
-    Fail73:
+    Fail74:
     { 
       IStrategoTerm x_113 = null;
       IStrategoTerm u_113 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm y_113 = null;
       IStrategoTerm z_113 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleIntersectUnionFix_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail73;
+        break Fail74;
       u_113 = term.getSubterm(0);
       v_113 = term.getSubterm(1);
       w_113 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       x_113 = annos50;
       term = z_19.invoke(context, u_113);
       if(term == null)
-        break Fail73;
+        break Fail74;
       y_113 = term;
       term = a_20.invoke(context, v_113);
       if(term == null)
-        break Fail73;
+        break Fail74;
       z_113 = term;
       term = b_20.invoke(context, w_113);
       if(term == null)
-        break Fail73;
+        break Fail74;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleIntersectUnionFix_3, new IStrategoTerm[]{y_113, z_113, term}), checkListAnnos(termFactory, x_113));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Union_4_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Union_4_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect$Union_4_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleIntersectUnion_4_0");
-    Fail70:
+    Fail71:
     { 
       IStrategoTerm z_112 = null;
       IStrategoTerm v_112 = null;
@@ -27,7 +27,7 @@
       IStrategoTerm b_113 = null;
       IStrategoTerm c_113 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleIntersectUnion_4 != ((IStrategoAppl)term).getConstructor())
-        break Fail70;
+        break Fail71;
       v_112 = term.getSubterm(0);
       w_112 = term.getSubterm(1);
       x_112 = term.getSubterm(2);
@@ -36,19 +36,19 @@
       z_112 = annos47;
       term = p_19.invoke(context, v_112);
       if(term == null)
-        break Fail70;
+        break Fail71;
       a_113 = term;
       term = q_19.invoke(context, w_112);
       if(term == null)
-        break Fail70;
+        break Fail71;
       b_113 = term;
       term = r_19.invoke(context, x_112);
       if(term == null)
-        break Fail70;
+        break Fail71;
       c_113 = term;
       term = s_19.invoke(context, y_112);
       if(term == null)
-        break Fail70;
+        break Fail71;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleIntersectUnion_4, new IStrategoTerm[]{a_113, b_113, c_113, term}), checkListAnnos(termFactory, z_112));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Intersect_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleIntersect_3_0");
-    Fail72:
+    Fail73:
     { 
       IStrategoTerm q_113 = null;
       IStrategoTerm m_113 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm r_113 = null;
       IStrategoTerm s_113 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleIntersect_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail72;
+        break Fail73;
       m_113 = term.getSubterm(0);
       n_113 = term.getSubterm(1);
       o_113 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       q_113 = annos49;
       term = w_19.invoke(context, m_113);
       if(term == null)
-        break Fail72;
+        break Fail73;
       r_113 = term;
       term = x_19.invoke(context, n_113);
       if(term == null)
-        break Fail72;
+        break Fail73;
       s_113 = term;
       term = y_19.invoke(context, o_113);
       if(term == null)
-        break Fail72;
+        break Fail73;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleIntersect_3, new IStrategoTerm[]{r_113, s_113, term}), checkListAnnos(termFactory, q_113));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Scope$Id_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Scope$Id_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Scope$Id_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleScopeId_1_0");
-    Fail27:
+    Fail28:
     { 
       IStrategoTerm e_104 = null;
       IStrategoTerm d_104 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleScopeId_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail27;
+        break Fail28;
       d_104 = term.getSubterm(0);
       IStrategoList annos4 = term.getAnnotations();
       e_104 = annos4;
       term = m_16.invoke(context, d_104);
       if(term == null)
-        break Fail27;
+        break Fail28;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleScopeId_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, e_104));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Scope_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Scope_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Scope_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleScope_2_0");
-    Fail77:
+    Fail78:
     { 
       IStrategoTerm s_114 = null;
       IStrategoTerm o_114 = null;
       IStrategoTerm p_114 = null;
       IStrategoTerm t_114 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleScope_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail77;
+        break Fail78;
       o_114 = term.getSubterm(0);
       p_114 = term.getSubterm(1);
       IStrategoList annos54 = term.getAnnotations();
       s_114 = annos54;
       term = h_20.invoke(context, o_114);
       if(term == null)
-        break Fail77;
+        break Fail78;
       t_114 = term;
       term = i_20.invoke(context, p_114);
       if(term == null)
-        break Fail77;
+        break Fail78;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleScope_2, new IStrategoTerm[]{t_114, term}), checkListAnnos(termFactory, s_114));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Union$Fix_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Union$Fix_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Union$Fix_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleUnionFix_2_0");
-    Fail74:
+    Fail75:
     { 
       IStrategoTerm d_114 = null;
       IStrategoTerm b_114 = null;
       IStrategoTerm c_114 = null;
       IStrategoTerm e_114 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleUnionFix_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail74;
+        break Fail75;
       b_114 = term.getSubterm(0);
       c_114 = term.getSubterm(1);
       IStrategoList annos51 = term.getAnnotations();
       d_114 = annos51;
       term = c_20.invoke(context, b_114);
       if(term == null)
-        break Fail74;
+        break Fail75;
       e_114 = term;
       term = d_20.invoke(context, c_114);
       if(term == null)
-        break Fail74;
+        break Fail75;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleUnionFix_2, new IStrategoTerm[]{e_114, term}), checkListAnnos(termFactory, d_114));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Union_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Union_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Dyn$Rule$Union_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("DynRuleUnion_3_0");
-    Fail71:
+    Fail72:
     { 
       IStrategoTerm i_113 = null;
       IStrategoTerm e_113 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm j_113 = null;
       IStrategoTerm k_113 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDynRuleUnion_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail71;
+        break Fail72;
       e_113 = term.getSubterm(0);
       f_113 = term.getSubterm(1);
       g_113 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       i_113 = annos48;
       term = t_19.invoke(context, e_113);
       if(term == null)
-        break Fail71;
+        break Fail72;
       j_113 = term;
       term = u_19.invoke(context, f_113);
       if(term == null)
-        break Fail71;
+        break Fail72;
       k_113 = term;
       term = v_19.invoke(context, g_113);
       if(term == null)
-        break Fail71;
+        break Fail72;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consDynRuleUnion_3, new IStrategoTerm[]{j_113, k_113, term}), checkListAnnos(termFactory, i_113));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Body_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Body_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Body_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("EditorServicesBody_1_0");
-    Fail286:
+    Fail287:
     { 
       IStrategoTerm l_154 = null;
       IStrategoTerm k_154 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consEditorServicesBody_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail286;
+        break Fail287;
       k_154 = term.getSubterm(0);
       IStrategoList annos241 = term.getAnnotations();
       l_154 = annos241;
       term = c_31.invoke(context, k_154);
       if(term == null)
-        break Fail286;
+        break Fail287;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consEditorServicesBody_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, l_154));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Dec$Head_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Dec$Head_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Dec$Head_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("EditorServicesDecHead_2_0");
-    Fail285:
+    Fail286:
     { 
       IStrategoTerm h_154 = null;
       IStrategoTerm c_154 = null;
       IStrategoTerm d_154 = null;
       IStrategoTerm i_154 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consEditorServicesDecHead_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail285;
+        break Fail286;
       c_154 = term.getSubterm(0);
       d_154 = term.getSubterm(1);
       IStrategoList annos240 = term.getAnnotations();
       h_154 = annos240;
       term = a_31.invoke(context, c_154);
       if(term == null)
-        break Fail285;
+        break Fail286;
       i_154 = term;
       term = b_31.invoke(context, d_154);
       if(term == null)
-        break Fail285;
+        break Fail286;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consEditorServicesDecHead_2, new IStrategoTerm[]{i_154, term}), checkListAnnos(termFactory, h_154));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Dec_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Dec_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Editor$Services$Dec_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("EditorServicesDec_2_0");
-    Fail284:
+    Fail285:
     { 
       IStrategoTerm z_153 = null;
       IStrategoTerm x_153 = null;
       IStrategoTerm y_153 = null;
       IStrategoTerm a_154 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consEditorServicesDec_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail284;
+        break Fail285;
       x_153 = term.getSubterm(0);
       y_153 = term.getSubterm(1);
       IStrategoList annos239 = term.getAnnotations();
       z_153 = annos239;
       term = y_30.invoke(context, x_153);
       if(term == null)
-        break Fail284;
+        break Fail285;
       a_154 = term;
       term = z_30.invoke(context, y_153);
       if(term == null)
-        break Fail284;
+        break Fail285;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consEditorServicesDec_2, new IStrategoTerm[]{a_154, term}), checkListAnnos(termFactory, z_153));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Empty$Tuple$Cong_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Empty$Tuple$Cong_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Empty$Tuple$Cong_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail93:
+    Fail94:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consEmptyTupleCong_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail93;
+        break Fail94;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Explode$Cong_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Explode$Cong_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Explode$Cong_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ExplodeCong_2_0");
-    Fail89:
+    Fail90:
     { 
       IStrategoTerm c_117 = null;
       IStrategoTerm a_117 = null;
       IStrategoTerm b_117 = null;
       IStrategoTerm d_117 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consExplodeCong_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail89;
+        break Fail90;
       a_117 = term.getSubterm(0);
       b_117 = term.getSubterm(1);
       IStrategoList annos66 = term.getAnnotations();
       c_117 = annos66;
       term = e_21.invoke(context, a_117);
       if(term == null)
-        break Fail89;
+        break Fail90;
       d_117 = term;
       term = f_21.invoke(context, b_117);
       if(term == null)
-        break Fail89;
+        break Fail90;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consExplodeCong_2, new IStrategoTerm[]{d_117, term}), checkListAnnos(termFactory, c_117));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Explode_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Explode_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Explode_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Explode_2_0");
-    Fail154:
+    Fail155:
     { 
       IStrategoTerm v_127 = null;
       IStrategoTerm t_127 = null;
       IStrategoTerm u_127 = null;
       IStrategoTerm w_127 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consExplode_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail154;
+        break Fail155;
       t_127 = term.getSubterm(0);
       u_127 = term.getSubterm(1);
       IStrategoList annos127 = term.getAnnotations();
       v_127 = annos127;
       term = t_24.invoke(context, t_127);
       if(term == null)
-        break Fail154;
+        break Fail155;
       w_127 = term;
       term = u_24.invoke(context, u_127);
       if(term == null)
-        break Fail154;
+        break Fail155;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consExplode_2, new IStrategoTerm[]{w_127, term}), checkListAnnos(termFactory, v_127));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl$Inj_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl$Inj_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl$Inj_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ExtOpDeclInj_1_0");
-    Fail128:
+    Fail129:
     { 
       IStrategoTerm p_123 = null;
       IStrategoTerm o_123 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consExtOpDeclInj_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail128;
+        break Fail129;
       o_123 = term.getSubterm(0);
       IStrategoList annos102 = term.getAnnotations();
       p_123 = annos102;
       term = k_23.invoke(context, o_123);
       if(term == null)
-        break Fail128;
+        break Fail129;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consExtOpDeclInj_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, p_123));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl$Q_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl$Q_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl$Q_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ExtOpDeclQ_2_0");
-    Fail129:
+    Fail130:
     { 
       IStrategoTerm t_123 = null;
       IStrategoTerm r_123 = null;
       IStrategoTerm s_123 = null;
       IStrategoTerm u_123 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consExtOpDeclQ_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail129;
+        break Fail130;
       r_123 = term.getSubterm(0);
       s_123 = term.getSubterm(1);
       IStrategoList annos103 = term.getAnnotations();
       t_123 = annos103;
       term = l_23.invoke(context, r_123);
       if(term == null)
-        break Fail129;
+        break Fail130;
       u_123 = term;
       term = m_23.invoke(context, s_123);
       if(term == null)
-        break Fail129;
+        break Fail130;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consExtOpDeclQ_2, new IStrategoTerm[]{u_123, term}), checkListAnnos(termFactory, t_123));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$Op$Decl_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ExtOpDecl_2_0");
-    Fail130:
+    Fail131:
     { 
       IStrategoTerm y_123 = null;
       IStrategoTerm w_123 = null;
       IStrategoTerm x_123 = null;
       IStrategoTerm z_123 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consExtOpDecl_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail130;
+        break Fail131;
       w_123 = term.getSubterm(0);
       x_123 = term.getSubterm(1);
       IStrategoList annos104 = term.getAnnotations();
       y_123 = annos104;
       term = n_23.invoke(context, w_123);
       if(term == null)
-        break Fail130;
+        break Fail131;
       z_123 = term;
       term = o_23.invoke(context, x_123);
       if(term == null)
-        break Fail130;
+        break Fail131;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consExtOpDecl_2, new IStrategoTerm[]{z_123, term}), checkListAnnos(termFactory, y_123));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$S$Def$Inl_4_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$S$Def$Inl_4_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$S$Def$Inl_4_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ExtSDefInl_4_0");
-    Fail68:
+    Fail69:
     { 
       IStrategoTerm h_112 = null;
       IStrategoTerm c_112 = null;
@@ -27,7 +27,7 @@
       IStrategoTerm j_112 = null;
       IStrategoTerm k_112 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consExtSDefInl_4 != ((IStrategoAppl)term).getConstructor())
-        break Fail68;
+        break Fail69;
       c_112 = term.getSubterm(0);
       d_112 = term.getSubterm(1);
       f_112 = term.getSubterm(2);
@@ -36,19 +36,19 @@
       h_112 = annos45;
       term = h_19.invoke(context, c_112);
       if(term == null)
-        break Fail68;
+        break Fail69;
       i_112 = term;
       term = i_19.invoke(context, d_112);
       if(term == null)
-        break Fail68;
+        break Fail69;
       j_112 = term;
       term = j_19.invoke(context, f_112);
       if(term == null)
-        break Fail68;
+        break Fail69;
       k_112 = term;
       term = k_19.invoke(context, g_112);
       if(term == null)
-        break Fail68;
+        break Fail69;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consExtSDefInl_4, new IStrategoTerm[]{i_112, j_112, k_112, term}), checkListAnnos(termFactory, h_112));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$S$Def_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$S$Def_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Ext$S$Def_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ExtSDef_3_0");
-    Fail67:
+    Fail68:
     { 
       IStrategoTerm y_111 = null;
       IStrategoTerm v_111 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm z_111 = null;
       IStrategoTerm a_112 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consExtSDef_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail67;
+        break Fail68;
       v_111 = term.getSubterm(0);
       w_111 = term.getSubterm(1);
       x_111 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       y_111 = annos44;
       term = e_19.invoke(context, v_111);
       if(term == null)
-        break Fail67;
+        break Fail68;
       z_111 = term;
       term = f_19.invoke(context, w_111);
       if(term == null)
-        break Fail67;
+        break Fail68;
       a_112 = term;
       term = g_19.invoke(context, x_111);
       if(term == null)
-        break Fail67;
+        break Fail68;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consExtSDef_3, new IStrategoTerm[]{z_111, a_112, term}), checkListAnnos(termFactory, y_111));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Fail_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Fail_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Fail_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail121:
+    Fail122:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consFail_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail121;
+        break Fail122;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Fun$Type_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Fun$Type_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Fun$Type_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("FunType_2_0");
-    Fail126:
+    Fail127:
     { 
       IStrategoTerm i_123 = null;
       IStrategoTerm g_123 = null;
       IStrategoTerm h_123 = null;
       IStrategoTerm j_123 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consFunType_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail126;
+        break Fail127;
       g_123 = term.getSubterm(0);
       h_123 = term.getSubterm(1);
       IStrategoList annos100 = term.getAnnotations();
       i_123 = annos100;
       term = h_23.invoke(context, g_123);
       if(term == null)
-        break Fail126;
+        break Fail127;
       j_123 = term;
       term = i_23.invoke(context, h_123);
       if(term == null)
-        break Fail126;
+        break Fail127;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consFunType_2, new IStrategoTerm[]{j_123, term}), checkListAnnos(termFactory, i_123));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Gen$Dyn$Rules_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Gen$Dyn$Rules_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Gen$Dyn$Rules_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("GenDynRules_1_0");
-    Fail76:
+    Fail77:
     { 
       IStrategoTerm m_114 = null;
       IStrategoTerm l_114 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consGenDynRules_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail76;
+        break Fail77;
       l_114 = term.getSubterm(0);
       IStrategoList annos53 = term.getAnnotations();
       m_114 = annos53;
       term = g_20.invoke(context, l_114);
       if(term == null)
-        break Fail76;
+        break Fail77;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consGenDynRules_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, m_114));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Guarded$L$Choice_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Guarded$L$Choice_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Guarded$L$Choice_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("GuardedLChoice_3_0");
-    Fail115:
+    Fail116:
     { 
       IStrategoTerm j_121 = null;
       IStrategoTerm g_121 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm m_121 = null;
       IStrategoTerm n_121 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consGuardedLChoice_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail115;
+        break Fail116;
       g_121 = term.getSubterm(0);
       h_121 = term.getSubterm(1);
       i_121 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       j_121 = annos91;
       term = p_22.invoke(context, g_121);
       if(term == null)
-        break Fail115;
+        break Fail116;
       m_121 = term;
       term = q_22.invoke(context, h_121);
       if(term == null)
-        break Fail115;
+        break Fail116;
       n_121 = term;
       term = r_22.invoke(context, i_121);
       if(term == null)
-        break Fail115;
+        break Fail116;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consGuardedLChoice_3, new IStrategoTerm[]{m_121, n_121, term}), checkListAnnos(termFactory, j_121));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Id_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Id_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Id_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail120:
+    Fail121:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consId_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail120;
+        break Fail121;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$If$Then_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$If$Then_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$If$Then_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("IfThen_2_0");
-    Fail82:
+    Fail83:
     { 
       IStrategoTerm x_115 = null;
       IStrategoTerm v_115 = null;
       IStrategoTerm w_115 = null;
       IStrategoTerm y_115 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consIfThen_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail82;
+        break Fail83;
       v_115 = term.getSubterm(0);
       w_115 = term.getSubterm(1);
       IStrategoList annos59 = term.getAnnotations();
       x_115 = annos59;
       term = s_20.invoke(context, v_115);
       if(term == null)
-        break Fail82;
+        break Fail83;
       y_115 = term;
       term = t_20.invoke(context, w_115);
       if(term == null)
-        break Fail82;
+        break Fail83;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consIfThen_2, new IStrategoTerm[]{y_115, term}), checkListAnnos(termFactory, x_115));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import$Term_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import$Term_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import$Term_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ImportTerm_1_0");
-    Fail111:
+    Fail112:
     { 
       IStrategoTerm p_120 = null;
       IStrategoTerm o_120 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consImportTerm_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail111;
+        break Fail112;
       o_120 = term.getSubterm(0);
       IStrategoList annos87 = term.getAnnotations();
       p_120 = annos87;
       term = j_22.invoke(context, o_120);
       if(term == null)
-        break Fail111;
+        break Fail112;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consImportTerm_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, p_120));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import$Wildcard_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import$Wildcard_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import$Wildcard_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ImportWildcard_1_0");
-    Fail53:
+    Fail54:
     { 
       IStrategoTerm m_109 = null;
       IStrategoTerm l_109 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consImportWildcard_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail53;
+        break Fail54;
       l_109 = term.getSubterm(0);
       IStrategoList annos30 = term.getAnnotations();
       m_109 = annos30;
       term = l_18.invoke(context, l_109);
       if(term == null)
-        break Fail53;
+        break Fail54;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consImportWildcard_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, m_109));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Import_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Import_1_0");
-    Fail54:
+    Fail55:
     { 
       IStrategoTerm r_109 = null;
       IStrategoTerm o_109 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consImport_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail54;
+        break Fail55;
       o_109 = term.getSubterm(0);
       IStrategoList annos31 = term.getAnnotations();
       r_109 = annos31;
       term = m_18.invoke(context, o_109);
       if(term == null)
-        break Fail54;
+        break Fail55;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consImport_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, r_109));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Imports_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Imports_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Imports_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Imports_1_0");
-    Fail59:
+    Fail60:
     { 
       IStrategoTerm g_110 = null;
       IStrategoTerm f_110 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consImports_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail59;
+        break Fail60;
       f_110 = term.getSubterm(0);
       IStrategoList annos36 = term.getAnnotations();
       g_110 = annos36;
       term = r_18.invoke(context, f_110);
       if(term == null)
-        break Fail59;
+        break Fail60;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consImports_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, g_110));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Inject$Desugaring_4_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Inject$Desugaring_4_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Inject$Desugaring_4_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("InjectDesugaring_4_0");
-    Fail278:
+    Fail279:
     { 
       IStrategoTerm n_151 = null;
       IStrategoTerm i_151 = null;
@@ -27,7 +27,7 @@
       IStrategoTerm r_151 = null;
       IStrategoTerm s_151 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consInjectDesugaring_4 != ((IStrategoAppl)term).getConstructor())
-        break Fail278;
+        break Fail279;
       i_151 = term.getSubterm(0);
       k_151 = term.getSubterm(1);
       l_151 = term.getSubterm(2);
@@ -36,19 +36,19 @@
       n_151 = annos233;
       term = o_30.invoke(context, i_151);
       if(term == null)
-        break Fail278;
+        break Fail279;
       o_151 = term;
       term = p_30.invoke(context, k_151);
       if(term == null)
-        break Fail278;
+        break Fail279;
       r_151 = term;
       term = q_30.invoke(context, l_151);
       if(term == null)
-        break Fail278;
+        break Fail279;
       s_151 = term;
       term = r_30.invoke(context, m_151);
       if(term == null)
-        break Fail278;
+        break Fail279;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consInjectDesugaring_4, new IStrategoTerm[]{o_151, r_151, s_151, term}), checkListAnnos(termFactory, n_151));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Int$Cong_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Int$Cong_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Int$Cong_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("IntCong_1_0");
-    Fail98:
+    Fail99:
     { 
       IStrategoTerm j_118 = null;
       IStrategoTerm i_118 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consIntCong_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail98;
+        break Fail99;
       i_118 = term.getSubterm(0);
       IStrategoList annos74 = term.getAnnotations();
       j_118 = annos74;
       term = r_21.invoke(context, i_118);
       if(term == null)
-        break Fail98;
+        break Fail99;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consIntCong_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, j_118));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Int_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Int_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Int_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Int_1_0");
-    Fail159:
+    Fail160:
     { 
       IStrategoTerm r_128 = null;
       IStrategoTerm q_128 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consInt_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail159;
+        break Fail160;
       q_128 = term.getSubterm(0);
       IStrategoList annos132 = term.getAnnotations();
       r_128 = annos132;
       term = b_25.invoke(context, q_128);
       if(term == null)
-        break Fail159;
+        break Fail160;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consInt_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, r_128));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Java$Type$Dec_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Java$Type$Dec_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Java$Type$Dec_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("JavaTypeDec_1_0");
-    Fail276:
+    Fail277:
     { 
       IStrategoTerm x_150 = null;
       IStrategoTerm w_150 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consJavaTypeDec_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail276;
+        break Fail277;
       w_150 = term.getSubterm(0);
       IStrategoList annos231 = term.getAnnotations();
       x_150 = annos231;
       term = k_30.invoke(context, w_150);
       if(term == null)
-        break Fail276;
+        break Fail277;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consJavaTypeDec_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, x_150));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$L$Choice_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$L$Choice_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$L$Choice_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("LChoice_2_0");
-    Fail107:
+    Fail108:
     { 
       IStrategoTerm p_119 = null;
       IStrategoTerm n_119 = null;
       IStrategoTerm o_119 = null;
       IStrategoTerm q_119 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consLChoice_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail107;
+        break Fail108;
       n_119 = term.getSubterm(0);
       o_119 = term.getSubterm(1);
       IStrategoList annos83 = term.getAnnotations();
       p_119 = annos83;
       term = c_22.invoke(context, n_119);
       if(term == null)
-        break Fail107;
+        break Fail108;
       q_119 = term;
       term = d_22.invoke(context, o_119);
       if(term == null)
-        break Fail107;
+        break Fail108;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consLChoice_2, new IStrategoTerm[]{q_119, term}), checkListAnnos(termFactory, p_119));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$L$Rule_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$L$Rule_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$L$Rule_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("LRule_1_0");
-    Fail87:
+    Fail88:
     { 
       IStrategoTerm v_116 = null;
       IStrategoTerm u_116 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consLRule_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail87;
+        break Fail88;
       u_116 = term.getSubterm(0);
       IStrategoList annos64 = term.getAnnotations();
       v_116 = annos64;
       term = c_21.invoke(context, u_116);
       if(term == null)
-        break Fail87;
+        break Fail88;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consLRule_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, v_116));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Labeled$Dyn$Rule$Id_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Labeled$Dyn$Rule$Id_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Labeled$Dyn$Rule$Id_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("LabeledDynRuleId_2_0");
-    Fail31:
+    Fail32:
     { 
       IStrategoTerm w_104 = null;
       IStrategoTerm u_104 = null;
       IStrategoTerm v_104 = null;
       IStrategoTerm x_104 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consLabeledDynRuleId_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail31;
+        break Fail32;
       u_104 = term.getSubterm(0);
       v_104 = term.getSubterm(1);
       IStrategoList annos8 = term.getAnnotations();
       w_104 = annos8;
       term = s_16.invoke(context, u_104);
       if(term == null)
-        break Fail31;
+        break Fail32;
       x_104 = term;
       term = t_16.invoke(context, v_104);
       if(term == null)
-        break Fail31;
+        break Fail32;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consLabeledDynRuleId_2, new IStrategoTerm[]{x_104, term}), checkListAnnos(termFactory, w_104));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Labeled$Dyn$Rule$Scope$Id_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Labeled$Dyn$Rule$Scope$Id_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Labeled$Dyn$Rule$Scope$Id_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("LabeledDynRuleScopeId_2_0");
-    Fail28:
+    Fail29:
     { 
       IStrategoTerm j_104 = null;
       IStrategoTerm h_104 = null;
       IStrategoTerm i_104 = null;
       IStrategoTerm k_104 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consLabeledDynRuleScopeId_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail28;
+        break Fail29;
       h_104 = term.getSubterm(0);
       i_104 = term.getSubterm(1);
       IStrategoList annos5 = term.getAnnotations();
       j_104 = annos5;
       term = n_16.invoke(context, h_104);
       if(term == null)
-        break Fail28;
+        break Fail29;
       k_104 = term;
       term = o_16.invoke(context, i_104);
       if(term == null)
-        break Fail28;
+        break Fail29;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consLabeledDynRuleScopeId_2, new IStrategoTerm[]{k_104, term}), checkListAnnos(termFactory, j_104));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Let_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Let_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Let_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Let_2_0");
-    Fail124:
+    Fail125:
     { 
       IStrategoTerm a_123 = null;
       IStrategoTerm y_122 = null;
       IStrategoTerm z_122 = null;
       IStrategoTerm b_123 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consLet_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail124;
+        break Fail125;
       y_122 = term.getSubterm(0);
       z_122 = term.getSubterm(1);
       IStrategoList annos98 = term.getAnnotations();
       a_123 = annos98;
       term = e_23.invoke(context, y_122);
       if(term == null)
-        break Fail124;
+        break Fail125;
       b_123 = term;
       term = f_23.invoke(context, z_122);
       if(term == null)
-        break Fail124;
+        break Fail125;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consLet_2, new IStrategoTerm[]{b_123, term}), checkListAnnos(termFactory, a_123));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Cong$No$Tail_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Cong$No$Tail_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Cong$No$Tail_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ListCongNoTail_1_0");
-    Fail91:
+    Fail92:
     { 
       IStrategoTerm l_117 = null;
       IStrategoTerm k_117 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consListCongNoTail_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail91;
+        break Fail92;
       k_117 = term.getSubterm(0);
       IStrategoList annos68 = term.getAnnotations();
       l_117 = annos68;
       term = i_21.invoke(context, k_117);
       if(term == null)
-        break Fail91;
+        break Fail92;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consListCongNoTail_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, l_117));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Cong_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Cong_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Cong_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ListCong_2_0");
-    Fail90:
+    Fail91:
     { 
       IStrategoTerm h_117 = null;
       IStrategoTerm f_117 = null;
       IStrategoTerm g_117 = null;
       IStrategoTerm i_117 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consListCong_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail90;
+        break Fail91;
       f_117 = term.getSubterm(0);
       g_117 = term.getSubterm(1);
       IStrategoList annos67 = term.getAnnotations();
       h_117 = annos67;
       term = g_21.invoke(context, f_117);
       if(term == null)
-        break Fail90;
+        break Fail91;
       i_117 = term;
       term = h_21.invoke(context, g_117);
       if(term == null)
-        break Fail90;
+        break Fail91;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consListCong_2, new IStrategoTerm[]{i_117, term}), checkListAnnos(termFactory, h_117));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Tail_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Tail_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Tail_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ListTail_2_0");
-    Fail149:
+    Fail150:
     { 
       IStrategoTerm c_127 = null;
       IStrategoTerm z_126 = null;
       IStrategoTerm b_127 = null;
       IStrategoTerm e_127 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consListTail_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail149;
+        break Fail150;
       z_126 = term.getSubterm(0);
       b_127 = term.getSubterm(1);
       IStrategoList annos122 = term.getAnnotations();
       c_127 = annos122;
       term = n_24.invoke(context, z_126);
       if(term == null)
-        break Fail149;
+        break Fail150;
       e_127 = term;
       term = o_24.invoke(context, b_127);
       if(term == null)
-        break Fail149;
+        break Fail150;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consListTail_2, new IStrategoTerm[]{e_127, term}), checkListAnnos(termFactory, c_127));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Var_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Var_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List$Var_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ListVar_1_0");
-    Fail52:
+    Fail53:
     { 
       IStrategoTerm i_109 = null;
       IStrategoTerm h_109 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consListVar_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail52;
+        break Fail53;
       h_109 = term.getSubterm(0);
       IStrategoList annos29 = term.getAnnotations();
       i_109 = annos29;
       term = k_18.invoke(context, h_109);
       if(term == null)
-        break Fail52;
+        break Fail53;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consListVar_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, i_109));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$List_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("List_1_0");
-    Fail150:
+    Fail151:
     { 
       IStrategoTerm i_127 = null;
       IStrategoTerm h_127 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consList_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail150;
+        break Fail151;
       h_127 = term.getSubterm(0);
       IStrategoList annos123 = term.getAnnotations();
       i_127 = annos123;
       term = p_24.invoke(context, h_127);
       if(term == null)
-        break Fail150;
+        break Fail151;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consList_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, i_127));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Match_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Match_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Match_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Match_1_0");
-    Fail119:
+    Fail120:
     { 
       IStrategoTerm f_122 = null;
       IStrategoTerm e_122 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consMatch_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail119;
+        break Fail120;
       e_122 = term.getSubterm(0);
       IStrategoList annos95 = term.getAnnotations();
       f_122 = annos95;
       term = x_22.invoke(context, e_122);
       if(term == null)
-        break Fail119;
+        break Fail120;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consMatch_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, f_122));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Module_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Module_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Module_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Module_2_0");
-    Fail61:
+    Fail62:
     { 
       IStrategoTerm n_110 = null;
       IStrategoTerm l_110 = null;
       IStrategoTerm m_110 = null;
       IStrategoTerm o_110 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consModule_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail61;
+        break Fail62;
       l_110 = term.getSubterm(0);
       m_110 = term.getSubterm(1);
       IStrategoList annos38 = term.getAnnotations();
       n_110 = annos38;
       term = t_18.invoke(context, l_110);
       if(term == null)
-        break Fail61;
+        break Fail62;
       o_110 = term;
       term = u_18.invoke(context, m_110);
       if(term == null)
-        break Fail61;
+        break Fail62;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consModule_2, new IStrategoTerm[]{o_110, term}), checkListAnnos(termFactory, n_110));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Native$Sugar$Body_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Native$Sugar$Body_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Native$Sugar$Body_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("NativeSugarBody_1_0");
-    Fail270:
+    Fail271:
     { 
       IStrategoTerm x_149 = null;
       IStrategoTerm w_149 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consNativeSugarBody_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail270;
+        break Fail271;
       w_149 = term.getSubterm(0);
       IStrategoList annos225 = term.getAnnotations();
       x_149 = annos225;
       term = a_30.invoke(context, w_149);
       if(term == null)
-        break Fail270;
+        break Fail271;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consNativeSugarBody_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, x_149));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Native$Sugar$Dec$Head_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Native$Sugar$Dec$Head_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Native$Sugar$Dec$Head_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("NativeSugarDecHead_3_0");
-    Fail273:
+    Fail274:
     { 
       IStrategoTerm i_150 = null;
       IStrategoTerm f_150 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm j_150 = null;
       IStrategoTerm k_150 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consNativeSugarDecHead_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail273;
+        break Fail274;
       f_150 = term.getSubterm(0);
       g_150 = term.getSubterm(1);
       h_150 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       i_150 = annos228;
       term = d_30.invoke(context, f_150);
       if(term == null)
-        break Fail273;
+        break Fail274;
       j_150 = term;
       term = e_30.invoke(context, g_150);
       if(term == null)
-        break Fail273;
+        break Fail274;
       k_150 = term;
       term = f_30.invoke(context, h_150);
       if(term == null)
-        break Fail273;
+        break Fail274;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consNativeSugarDecHead_3, new IStrategoTerm[]{j_150, k_150, term}), checkListAnnos(termFactory, i_150));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$No$Anno$List_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$No$Anno$List_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$No$Anno$List_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("NoAnnoList_1_0");
-    Fail145:
+    Fail146:
     { 
       IStrategoTerm k_126 = null;
       IStrategoTerm j_126 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consNoAnnoList_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail145;
+        break Fail146;
       j_126 = term.getSubterm(0);
       IStrategoList annos118 = term.getAnnotations();
       k_126 = annos118;
       term = h_24.invoke(context, j_126);
       if(term == null)
-        break Fail145;
+        break Fail146;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consNoAnnoList_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, k_126));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Not_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Not_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Not_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Not_1_0");
-    Fail105:
+    Fail106:
     { 
       IStrategoTerm g_119 = null;
       IStrategoTerm f_119 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consNot_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail105;
+        break Fail106;
       f_119 = term.getSubterm(0);
       IStrategoList annos81 = term.getAnnotations();
       g_119 = annos81;
       term = z_21.invoke(context, f_119);
       if(term == null)
-        break Fail105;
+        break Fail106;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consNot_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, g_119));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$One_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$One_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$One_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("One_1_0");
-    Fail113:
+    Fail114:
     { 
       IStrategoTerm x_120 = null;
       IStrategoTerm v_120 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consOne_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail113;
+        break Fail114;
       v_120 = term.getSubterm(0);
       IStrategoList annos89 = term.getAnnotations();
       x_120 = annos89;
       term = l_22.invoke(context, v_120);
       if(term == null)
-        break Fail113;
+        break Fail114;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consOne_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, x_120));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl$Inj_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl$Inj_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl$Inj_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("OpDeclInj_1_0");
-    Fail131:
+    Fail132:
     { 
       IStrategoTerm d_124 = null;
       IStrategoTerm c_124 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consOpDeclInj_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail131;
+        break Fail132;
       c_124 = term.getSubterm(0);
       IStrategoList annos105 = term.getAnnotations();
       d_124 = annos105;
       term = p_23.invoke(context, c_124);
       if(term == null)
-        break Fail131;
+        break Fail132;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consOpDeclInj_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, d_124));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl$Q_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl$Q_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl$Q_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("OpDeclQ_2_0");
-    Fail132:
+    Fail133:
     { 
       IStrategoTerm n_124 = null;
       IStrategoTerm g_124 = null;
       IStrategoTerm j_124 = null;
       IStrategoTerm o_124 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consOpDeclQ_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail132;
+        break Fail133;
       g_124 = term.getSubterm(0);
       j_124 = term.getSubterm(1);
       IStrategoList annos106 = term.getAnnotations();
       n_124 = annos106;
       term = q_23.invoke(context, g_124);
       if(term == null)
-        break Fail132;
+        break Fail133;
       o_124 = term;
       term = r_23.invoke(context, j_124);
       if(term == null)
-        break Fail132;
+        break Fail133;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consOpDeclQ_2, new IStrategoTerm[]{o_124, term}), checkListAnnos(termFactory, n_124));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Decl_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("OpDecl_2_0");
-    Fail133:
+    Fail134:
     { 
       IStrategoTerm t_124 = null;
       IStrategoTerm q_124 = null;
       IStrategoTerm s_124 = null;
       IStrategoTerm u_124 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consOpDecl_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail133;
+        break Fail134;
       q_124 = term.getSubterm(0);
       s_124 = term.getSubterm(1);
       IStrategoList annos107 = term.getAnnotations();
       t_124 = annos107;
       term = s_23.invoke(context, q_124);
       if(term == null)
-        break Fail133;
+        break Fail134;
       u_124 = term;
       term = t_23.invoke(context, s_124);
       if(term == null)
-        break Fail133;
+        break Fail134;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consOpDecl_2, new IStrategoTerm[]{u_124, term}), checkListAnnos(termFactory, t_124));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Q_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Q_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op$Q_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("OpQ_2_0");
-    Fail155:
+    Fail156:
     { 
       IStrategoTerm a_128 = null;
       IStrategoTerm y_127 = null;
       IStrategoTerm z_127 = null;
       IStrategoTerm b_128 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consOpQ_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail155;
+        break Fail156;
       y_127 = term.getSubterm(0);
       z_127 = term.getSubterm(1);
       IStrategoList annos128 = term.getAnnotations();
       a_128 = annos128;
       term = v_24.invoke(context, y_127);
       if(term == null)
-        break Fail155;
+        break Fail156;
       b_128 = term;
       term = w_24.invoke(context, z_127);
       if(term == null)
-        break Fail155;
+        break Fail156;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consOpQ_2, new IStrategoTerm[]{b_128, term}), checkListAnnos(termFactory, a_128));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Op_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Op_2_0");
-    Fail156:
+    Fail157:
     { 
       IStrategoTerm f_128 = null;
       IStrategoTerm d_128 = null;
       IStrategoTerm e_128 = null;
       IStrategoTerm g_128 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consOp_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail156;
+        break Fail157;
       d_128 = term.getSubterm(0);
       e_128 = term.getSubterm(1);
       IStrategoList annos129 = term.getAnnotations();
       f_128 = annos129;
       term = x_24.invoke(context, d_128);
       if(term == null)
-        break Fail156;
+        break Fail157;
       g_128 = term;
       term = y_24.invoke(context, e_128);
       if(term == null)
-        break Fail156;
+        break Fail157;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consOp_2, new IStrategoTerm[]{g_128, term}), checkListAnnos(termFactory, f_128));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlay$No$Args_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlay$No$Args_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlay$No$Args_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("OverlayNoArgs_2_0");
-    Fail49:
+    Fail50:
     { 
       IStrategoTerm w_108 = null;
       IStrategoTerm u_108 = null;
       IStrategoTerm v_108 = null;
       IStrategoTerm x_108 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consOverlayNoArgs_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail49;
+        break Fail50;
       u_108 = term.getSubterm(0);
       v_108 = term.getSubterm(1);
       IStrategoList annos26 = term.getAnnotations();
       w_108 = annos26;
       term = f_18.invoke(context, u_108);
       if(term == null)
-        break Fail49;
+        break Fail50;
       x_108 = term;
       term = g_18.invoke(context, v_108);
       if(term == null)
-        break Fail49;
+        break Fail50;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consOverlayNoArgs_2, new IStrategoTerm[]{x_108, term}), checkListAnnos(termFactory, w_108));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlay_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlay_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlay_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Overlay_3_0");
-    Fail48:
+    Fail49:
     { 
       IStrategoTerm q_108 = null;
       IStrategoTerm n_108 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm r_108 = null;
       IStrategoTerm s_108 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consOverlay_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail48;
+        break Fail49;
       n_108 = term.getSubterm(0);
       o_108 = term.getSubterm(1);
       p_108 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       q_108 = annos25;
       term = c_18.invoke(context, n_108);
       if(term == null)
-        break Fail48;
+        break Fail49;
       r_108 = term;
       term = d_18.invoke(context, o_108);
       if(term == null)
-        break Fail48;
+        break Fail49;
       s_108 = term;
       term = e_18.invoke(context, p_108);
       if(term == null)
-        break Fail48;
+        break Fail49;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consOverlay_3, new IStrategoTerm[]{r_108, s_108, term}), checkListAnnos(termFactory, q_108));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlays_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlays_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Overlays_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Overlays_1_0");
-    Fail55:
+    Fail56:
     { 
       IStrategoTerm u_109 = null;
       IStrategoTerm t_109 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consOverlays_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail55;
+        break Fail56;
       t_109 = term.getSubterm(0);
       IStrategoList annos32 = term.getAnnotations();
       u_109 = annos32;
       term = n_18.invoke(context, t_109);
       if(term == null)
-        break Fail55;
+        break Fail56;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consOverlays_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, u_109));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Paren$Strat_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Paren$Strat_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Paren$Strat_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ParenStrat_1_0");
-    Fail62:
+    Fail63:
     { 
       IStrategoTerm r_110 = null;
       IStrategoTerm q_110 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consParenStrat_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail62;
+        break Fail63;
       q_110 = term.getSubterm(0);
       IStrategoList annos39 = term.getAnnotations();
       r_110 = annos39;
       term = v_18.invoke(context, q_110);
       if(term == null)
-        break Fail62;
+        break Fail63;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consParenStrat_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, r_110));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim$No$Args_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim$No$Args_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim$No$Args_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("PrimNoArgs_1_0");
-    Fail101:
+    Fail102:
     { 
       IStrategoTerm u_118 = null;
       IStrategoTerm t_118 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consPrimNoArgs_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail101;
+        break Fail102;
       t_118 = term.getSubterm(0);
       IStrategoList annos77 = term.getAnnotations();
       u_118 = annos77;
       term = v_21.invoke(context, t_118);
       if(term == null)
-        break Fail101;
+        break Fail102;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consPrimNoArgs_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, u_118));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim$T_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim$T_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim$T_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("PrimT_3_0");
-    Fail114:
+    Fail115:
     { 
       IStrategoTerm c_121 = null;
       IStrategoTerm z_120 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm d_121 = null;
       IStrategoTerm e_121 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consPrimT_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail114;
+        break Fail115;
       z_120 = term.getSubterm(0);
       a_121 = term.getSubterm(1);
       b_121 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       c_121 = annos90;
       term = m_22.invoke(context, z_120);
       if(term == null)
-        break Fail114;
+        break Fail115;
       d_121 = term;
       term = n_22.invoke(context, a_121);
       if(term == null)
-        break Fail114;
+        break Fail115;
       e_121 = term;
       term = o_22.invoke(context, b_121);
       if(term == null)
-        break Fail114;
+        break Fail115;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consPrimT_3, new IStrategoTerm[]{d_121, e_121, term}), checkListAnnos(termFactory, c_121));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Prim_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Prim_2_0");
-    Fail100:
+    Fail101:
     { 
       IStrategoTerm q_118 = null;
       IStrategoTerm o_118 = null;
       IStrategoTerm p_118 = null;
       IStrategoTerm r_118 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consPrim_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail100;
+        break Fail101;
       o_118 = term.getSubterm(0);
       p_118 = term.getSubterm(1);
       IStrategoList annos76 = term.getAnnotations();
       q_118 = annos76;
       term = t_21.invoke(context, o_118);
       if(term == null)
-        break Fail100;
+        break Fail101;
       r_118 = term;
       term = u_21.invoke(context, p_118);
       if(term == null)
-        break Fail100;
+        break Fail101;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consPrim_2, new IStrategoTerm[]{r_118, term}), checkListAnnos(termFactory, q_118));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Pure$Desugaring_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Pure$Desugaring_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Pure$Desugaring_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("PureDesugaring_1_0");
-    Fail279:
+    Fail280:
     { 
       IStrategoTerm y_151 = null;
       IStrategoTerm x_151 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consPureDesugaring_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail279;
+        break Fail280;
       x_151 = term.getSubterm(0);
       IStrategoList annos234 = term.getAnnotations();
       y_151 = annos234;
       term = s_30.invoke(context, x_151);
       if(term == null)
-        break Fail279;
+        break Fail280;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consPureDesugaring_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, y_151));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Choice_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Choice_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Choice_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RChoice_2_0");
-    Fail84:
+    Fail85:
     { 
       IStrategoTerm j_116 = null;
       IStrategoTerm h_116 = null;
       IStrategoTerm i_116 = null;
       IStrategoTerm k_116 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRChoice_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail84;
+        break Fail85;
       h_116 = term.getSubterm(0);
       i_116 = term.getSubterm(1);
       IStrategoList annos61 = term.getAnnotations();
       j_116 = annos61;
       term = x_20.invoke(context, h_116);
       if(term == null)
-        break Fail84;
+        break Fail85;
       k_116 = term;
       term = y_20.invoke(context, i_116);
       if(term == null)
-        break Fail84;
+        break Fail85;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRChoice_2, new IStrategoTerm[]{k_116, term}), checkListAnnos(termFactory, j_116));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec$No$Args_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec$No$Args_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec$No$Args_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RDecNoArgs_1_0");
-    Fail26:
+    Fail27:
     { 
       IStrategoTerm b_104 = null;
       IStrategoTerm z_103 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRDecNoArgs_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail26;
+        break Fail27;
       z_103 = term.getSubterm(0);
       IStrategoList annos3 = term.getAnnotations();
       b_104 = annos3;
       term = l_16.invoke(context, z_103);
       if(term == null)
-        break Fail26;
+        break Fail27;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRDecNoArgs_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, b_104));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec$T_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec$T_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec$T_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RDecT_3_0");
-    Fail24:
+    Fail25:
     { 
       IStrategoTerm p_103 = null;
       IStrategoTerm m_103 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm q_103 = null;
       IStrategoTerm r_103 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRDecT_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail24;
+        break Fail25;
       m_103 = term.getSubterm(0);
       n_103 = term.getSubterm(1);
       o_103 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       p_103 = annos1;
       term = g_16.invoke(context, m_103);
       if(term == null)
-        break Fail24;
+        break Fail25;
       q_103 = term;
       term = h_16.invoke(context, n_103);
       if(term == null)
-        break Fail24;
+        break Fail25;
       r_103 = term;
       term = i_16.invoke(context, o_103);
       if(term == null)
-        break Fail24;
+        break Fail25;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRDecT_3, new IStrategoTerm[]{q_103, r_103, term}), checkListAnnos(termFactory, p_103));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Dec_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RDec_2_0");
-    Fail25:
+    Fail26:
     { 
       IStrategoTerm v_103 = null;
       IStrategoTerm t_103 = null;
       IStrategoTerm u_103 = null;
       IStrategoTerm w_103 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRDec_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail25;
+        break Fail26;
       t_103 = term.getSubterm(0);
       u_103 = term.getSubterm(1);
       IStrategoList annos2 = term.getAnnotations();
       v_103 = annos2;
       term = j_16.invoke(context, t_103);
       if(term == null)
-        break Fail25;
+        break Fail26;
       w_103 = term;
       term = k_16.invoke(context, u_103);
       if(term == null)
-        break Fail25;
+        break Fail26;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRDec_2, new IStrategoTerm[]{w_103, term}), checkListAnnos(termFactory, v_103));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def$No$Args_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def$No$Args_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def$No$Args_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RDefNoArgs_2_0");
-    Fail47:
+    Fail48:
     { 
       IStrategoTerm k_108 = null;
       IStrategoTerm i_108 = null;
       IStrategoTerm j_108 = null;
       IStrategoTerm l_108 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRDefNoArgs_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail47;
+        break Fail48;
       i_108 = term.getSubterm(0);
       j_108 = term.getSubterm(1);
       IStrategoList annos24 = term.getAnnotations();
       k_108 = annos24;
       term = a_18.invoke(context, i_108);
       if(term == null)
-        break Fail47;
+        break Fail48;
       l_108 = term;
       term = b_18.invoke(context, j_108);
       if(term == null)
-        break Fail47;
+        break Fail48;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRDefNoArgs_2, new IStrategoTerm[]{l_108, term}), checkListAnnos(termFactory, k_108));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def$T_4_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def$T_4_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def$T_4_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RDefT_4_0");
-    Fail45:
+    Fail46:
     { 
       IStrategoTerm w_107 = null;
       IStrategoTerm s_107 = null;
@@ -27,7 +27,7 @@
       IStrategoTerm y_107 = null;
       IStrategoTerm z_107 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRDefT_4 != ((IStrategoAppl)term).getConstructor())
-        break Fail45;
+        break Fail46;
       s_107 = term.getSubterm(0);
       t_107 = term.getSubterm(1);
       u_107 = term.getSubterm(2);
@@ -36,19 +36,19 @@
       w_107 = annos22;
       term = t_17.invoke(context, s_107);
       if(term == null)
-        break Fail45;
+        break Fail46;
       x_107 = term;
       term = u_17.invoke(context, t_107);
       if(term == null)
-        break Fail45;
+        break Fail46;
       y_107 = term;
       term = v_17.invoke(context, u_107);
       if(term == null)
-        break Fail45;
+        break Fail46;
       z_107 = term;
       term = w_17.invoke(context, v_107);
       if(term == null)
-        break Fail45;
+        break Fail46;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRDefT_4, new IStrategoTerm[]{x_107, y_107, z_107, term}), checkListAnnos(termFactory, w_107));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$R$Def_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RDef_3_0");
-    Fail46:
+    Fail47:
     { 
       IStrategoTerm e_108 = null;
       IStrategoTerm b_108 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm f_108 = null;
       IStrategoTerm g_108 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRDef_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail46;
+        break Fail47;
       b_108 = term.getSubterm(0);
       c_108 = term.getSubterm(1);
       d_108 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       e_108 = annos23;
       term = x_17.invoke(context, b_108);
       if(term == null)
-        break Fail46;
+        break Fail47;
       f_108 = term;
       term = y_17.invoke(context, c_108);
       if(term == null)
-        break Fail46;
+        break Fail47;
       g_108 = term;
       term = z_17.invoke(context, d_108);
       if(term == null)
-        break Fail46;
+        break Fail47;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRDef_3, new IStrategoTerm[]{f_108, g_108, term}), checkListAnnos(termFactory, e_108));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Real$Cong_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Real$Cong_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Real$Cong_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RealCong_1_0");
-    Fail97:
+    Fail98:
     { 
       IStrategoTerm g_118 = null;
       IStrategoTerm f_118 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRealCong_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail97;
+        break Fail98;
       f_118 = term.getSubterm(0);
       IStrategoList annos73 = term.getAnnotations();
       g_118 = annos73;
       term = q_21.invoke(context, f_118);
       if(term == null)
-        break Fail97;
+        break Fail98;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRealCong_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, g_118));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Real_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Real_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Real_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Real_1_0");
-    Fail158:
+    Fail159:
     { 
       IStrategoTerm m_128 = null;
       IStrategoTerm l_128 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consReal_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail158;
+        break Fail159;
       l_128 = term.getSubterm(0);
       IStrategoList annos131 = term.getAnnotations();
       m_128 = annos131;
       term = a_25.invoke(context, l_128);
       if(term == null)
-        break Fail158;
+        break Fail159;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consReal_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, m_128));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rec_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rec_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rec_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Rec_2_0");
-    Fail106:
+    Fail107:
     { 
       IStrategoTerm k_119 = null;
       IStrategoTerm i_119 = null;
       IStrategoTerm j_119 = null;
       IStrategoTerm l_119 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRec_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail106;
+        break Fail107;
       i_119 = term.getSubterm(0);
       j_119 = term.getSubterm(1);
       IStrategoList annos82 = term.getAnnotations();
       k_119 = annos82;
       term = a_22.invoke(context, i_119);
       if(term == null)
-        break Fail106;
+        break Fail107;
       l_119 = term;
       term = b_22.invoke(context, j_119);
       if(term == null)
-        break Fail106;
+        break Fail107;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRec_2, new IStrategoTerm[]{l_119, term}), checkListAnnos(termFactory, k_119));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Root$App_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Root$App_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Root$App_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RootApp_1_0");
-    Fail143:
+    Fail144:
     { 
       IStrategoTerm c_126 = null;
       IStrategoTerm b_126 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRootApp_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail143;
+        break Fail144;
       b_126 = term.getSubterm(0);
       IStrategoList annos116 = term.getAnnotations();
       c_126 = annos116;
       term = e_24.invoke(context, b_126);
       if(term == null)
-        break Fail143;
+        break Fail144;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRootApp_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, c_126));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule$Names_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule$Names_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule$Names_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RuleNames_1_0");
-    Fail23:
+    Fail24:
     { 
       IStrategoTerm k_103 = null;
       IStrategoTerm j_103 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRuleNames_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail23;
+        break Fail24;
       j_103 = term.getSubterm(0);
       IStrategoList annos0 = term.getAnnotations();
       k_103 = annos0;
       term = f_16.invoke(context, j_103);
       if(term == null)
-        break Fail23;
+        break Fail24;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRuleNames_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, k_103));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule$No$Cond_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule$No$Cond_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule$No$Cond_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("RuleNoCond_2_0");
-    Fail44:
+    Fail45:
     { 
       IStrategoTerm p_107 = null;
       IStrategoTerm k_107 = null;
       IStrategoTerm o_107 = null;
       IStrategoTerm q_107 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRuleNoCond_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail44;
+        break Fail45;
       k_107 = term.getSubterm(0);
       o_107 = term.getSubterm(1);
       IStrategoList annos21 = term.getAnnotations();
       p_107 = annos21;
       term = r_17.invoke(context, k_107);
       if(term == null)
-        break Fail44;
+        break Fail45;
       q_107 = term;
       term = s_17.invoke(context, o_107);
       if(term == null)
-        break Fail44;
+        break Fail45;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRuleNoCond_2, new IStrategoTerm[]{q_107, term}), checkListAnnos(termFactory, p_107));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rule_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Rule_3_0");
-    Fail43:
+    Fail44:
     { 
       IStrategoTerm e_107 = null;
       IStrategoTerm b_107 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm g_107 = null;
       IStrategoTerm h_107 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRule_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail43;
+        break Fail44;
       b_107 = term.getSubterm(0);
       c_107 = term.getSubterm(1);
       d_107 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       e_107 = annos20;
       term = o_17.invoke(context, b_107);
       if(term == null)
-        break Fail43;
+        break Fail44;
       g_107 = term;
       term = p_17.invoke(context, c_107);
       if(term == null)
-        break Fail43;
+        break Fail44;
       h_107 = term;
       term = q_17.invoke(context, d_107);
       if(term == null)
-        break Fail43;
+        break Fail44;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRule_3, new IStrategoTerm[]{g_107, h_107, term}), checkListAnnos(termFactory, e_107));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rules_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rules_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Rules_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Rules_1_0");
-    Fail56:
+    Fail57:
     { 
       IStrategoTerm x_109 = null;
       IStrategoTerm w_109 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consRules_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail56;
+        break Fail57;
       w_109 = term.getSubterm(0);
       IStrategoList annos33 = term.getAnnotations();
       x_109 = annos33;
       term = o_18.invoke(context, w_109);
       if(term == null)
-        break Fail56;
+        break Fail57;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consRules_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, x_109));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def$No$Args_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def$No$Args_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def$No$Args_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SDefNoArgs_2_0");
-    Fail66:
+    Fail67:
     { 
       IStrategoTerm s_111 = null;
       IStrategoTerm q_111 = null;
       IStrategoTerm r_111 = null;
       IStrategoTerm t_111 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSDefNoArgs_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail66;
+        break Fail67;
       q_111 = term.getSubterm(0);
       r_111 = term.getSubterm(1);
       IStrategoList annos43 = term.getAnnotations();
       s_111 = annos43;
       term = c_19.invoke(context, q_111);
       if(term == null)
-        break Fail66;
+        break Fail67;
       t_111 = term;
       term = d_19.invoke(context, r_111);
       if(term == null)
-        break Fail66;
+        break Fail67;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSDefNoArgs_2, new IStrategoTerm[]{t_111, term}), checkListAnnos(termFactory, s_111));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def$T_4_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def$T_4_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def$T_4_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SDefT_4_0");
-    Fail69:
+    Fail70:
     { 
       IStrategoTerm q_112 = null;
       IStrategoTerm m_112 = null;
@@ -27,7 +27,7 @@
       IStrategoTerm s_112 = null;
       IStrategoTerm t_112 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSDefT_4 != ((IStrategoAppl)term).getConstructor())
-        break Fail69;
+        break Fail70;
       m_112 = term.getSubterm(0);
       n_112 = term.getSubterm(1);
       o_112 = term.getSubterm(2);
@@ -36,19 +36,19 @@
       q_112 = annos46;
       term = l_19.invoke(context, m_112);
       if(term == null)
-        break Fail69;
+        break Fail70;
       r_112 = term;
       term = m_19.invoke(context, n_112);
       if(term == null)
-        break Fail69;
+        break Fail70;
       s_112 = term;
       term = n_19.invoke(context, o_112);
       if(term == null)
-        break Fail69;
+        break Fail70;
       t_112 = term;
       term = o_19.invoke(context, p_112);
       if(term == null)
-        break Fail69;
+        break Fail70;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSDefT_4, new IStrategoTerm[]{r_112, s_112, t_112, term}), checkListAnnos(termFactory, q_112));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Def_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SDef_3_0");
-    Fail65:
+    Fail66:
     { 
       IStrategoTerm k_111 = null;
       IStrategoTerm h_111 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm l_111 = null;
       IStrategoTerm m_111 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSDef_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail65;
+        break Fail66;
       h_111 = term.getSubterm(0);
       i_111 = term.getSubterm(1);
       j_111 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       k_111 = annos42;
       term = z_18.invoke(context, h_111);
       if(term == null)
-        break Fail65;
+        break Fail66;
       l_111 = term;
       term = a_19.invoke(context, i_111);
       if(term == null)
-        break Fail65;
+        break Fail66;
       m_111 = term;
       term = b_19.invoke(context, j_111);
       if(term == null)
-        break Fail65;
+        break Fail66;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSDef_3, new IStrategoTerm[]{l_111, m_111, term}), checkListAnnos(termFactory, k_111));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Rule_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Rule_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Rule_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SRule_1_0");
-    Fail86:
+    Fail87:
     { 
       IStrategoTerm s_116 = null;
       IStrategoTerm r_116 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSRule_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail86;
+        break Fail87;
       r_116 = term.getSubterm(0);
       IStrategoList annos63 = term.getAnnotations();
       s_116 = annos63;
       term = b_21.invoke(context, r_116);
       if(term == null)
-        break Fail86;
+        break Fail87;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSRule_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, s_116));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Var_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Var_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$S$Var_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SVar_1_0");
-    Fail125:
+    Fail126:
     { 
       IStrategoTerm e_123 = null;
       IStrategoTerm d_123 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSVar_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail125;
+        break Fail126;
       d_123 = term.getSubterm(0);
       IStrategoList annos99 = term.getAnnotations();
       e_123 = annos99;
       term = g_23.invoke(context, d_123);
       if(term == null)
-        break Fail125;
+        break Fail126;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSVar_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, e_123));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope$Default_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope$Default_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope$Default_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ScopeDefault_1_0");
-    Fail109:
+    Fail110:
     { 
       IStrategoTerm c_120 = null;
       IStrategoTerm z_119 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consScopeDefault_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail109;
+        break Fail110;
       z_119 = term.getSubterm(0);
       IStrategoList annos85 = term.getAnnotations();
       c_120 = annos85;
       term = g_22.invoke(context, z_119);
       if(term == null)
-        break Fail109;
+        break Fail110;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consScopeDefault_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, c_120));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope$Labels_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope$Labels_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope$Labels_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ScopeLabels_1_0");
-    Fail40:
+    Fail41:
     { 
       IStrategoTerm s_106 = null;
       IStrategoTerm r_106 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consScopeLabels_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail40;
+        break Fail41;
       r_106 = term.getSubterm(0);
       IStrategoList annos17 = term.getAnnotations();
       s_106 = annos17;
       term = l_17.invoke(context, r_106);
       if(term == null)
-        break Fail40;
+        break Fail41;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consScopeLabels_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, s_106));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Scope_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Scope_2_0");
-    Fail117:
+    Fail118:
     { 
       IStrategoTerm y_121 = null;
       IStrategoTerm w_121 = null;
       IStrategoTerm x_121 = null;
       IStrategoTerm z_121 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consScope_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail117;
+        break Fail118;
       w_121 = term.getSubterm(0);
       x_121 = term.getSubterm(1);
       IStrategoList annos93 = term.getAnnotations();
       y_121 = annos93;
       term = u_22.invoke(context, w_121);
       if(term == null)
-        break Fail117;
+        break Fail118;
       z_121 = term;
       term = v_22.invoke(context, x_121);
       if(term == null)
-        break Fail117;
+        break Fail118;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consScope_2, new IStrategoTerm[]{z_121, term}), checkListAnnos(termFactory, y_121));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Seq_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Seq_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Seq_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Seq_2_0");
-    Fail116:
+    Fail117:
     { 
       IStrategoTerm s_121 = null;
       IStrategoTerm p_121 = null;
       IStrategoTerm q_121 = null;
       IStrategoTerm t_121 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSeq_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail116;
+        break Fail117;
       p_121 = term.getSubterm(0);
       q_121 = term.getSubterm(1);
       IStrategoList annos92 = term.getAnnotations();
       s_121 = annos92;
       term = s_22.invoke(context, p_121);
       if(term == null)
-        break Fail116;
+        break Fail117;
       t_121 = term;
       term = t_22.invoke(context, q_121);
       if(term == null)
-        break Fail116;
+        break Fail117;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSeq_2, new IStrategoTerm[]{t_121, term}), checkListAnnos(termFactory, s_121));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule$Depends_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule$Depends_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule$Depends_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SetDynRuleDepends_3_0");
-    Fail32:
+    Fail33:
     { 
       IStrategoTerm c_105 = null;
       IStrategoTerm z_104 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm d_105 = null;
       IStrategoTerm e_105 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSetDynRuleDepends_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail32;
+        break Fail33;
       z_104 = term.getSubterm(0);
       a_105 = term.getSubterm(1);
       b_105 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       c_105 = annos9;
       term = u_16.invoke(context, z_104);
       if(term == null)
-        break Fail32;
+        break Fail33;
       d_105 = term;
       term = v_16.invoke(context, a_105);
       if(term == null)
-        break Fail32;
+        break Fail33;
       e_105 = term;
       term = w_16.invoke(context, b_105);
       if(term == null)
-        break Fail32;
+        break Fail33;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSetDynRuleDepends_3, new IStrategoTerm[]{d_105, e_105, term}), checkListAnnos(termFactory, c_105));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule$Match_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule$Match_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule$Match_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SetDynRuleMatch_2_0");
-    Fail35:
+    Fail36:
     { 
       IStrategoTerm t_105 = null;
       IStrategoTerm r_105 = null;
       IStrategoTerm s_105 = null;
       IStrategoTerm u_105 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSetDynRuleMatch_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail35;
+        break Fail36;
       r_105 = term.getSubterm(0);
       s_105 = term.getSubterm(1);
       IStrategoList annos12 = term.getAnnotations();
       t_105 = annos12;
       term = b_17.invoke(context, r_105);
       if(term == null)
-        break Fail35;
+        break Fail36;
       u_105 = term;
       term = c_17.invoke(context, s_105);
       if(term == null)
-        break Fail35;
+        break Fail36;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSetDynRuleMatch_2, new IStrategoTerm[]{u_105, term}), checkListAnnos(termFactory, t_105));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Set$Dyn$Rule_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SetDynRule_2_0");
-    Fail37:
+    Fail38:
     { 
       IStrategoTerm e_106 = null;
       IStrategoTerm c_106 = null;
       IStrategoTerm d_106 = null;
       IStrategoTerm f_106 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSetDynRule_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail37;
+        break Fail38;
       c_106 = term.getSubterm(0);
       d_106 = term.getSubterm(1);
       IStrategoList annos14 = term.getAnnotations();
       e_106 = annos14;
       term = f_17.invoke(context, c_106);
       if(term == null)
-        break Fail37;
+        break Fail38;
       f_106 = term;
       term = g_17.invoke(context, d_106);
       if(term == null)
-        break Fail37;
+        break Fail38;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSetDynRule_2, new IStrategoTerm[]{f_106, term}), checkListAnnos(termFactory, e_106));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Signature_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Signature_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Signature_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Signature_1_0");
-    Fail57:
+    Fail58:
     { 
       IStrategoTerm a_110 = null;
       IStrategoTerm z_109 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSignature_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail57;
+        break Fail58;
       z_109 = term.getSubterm(0);
       IStrategoList annos34 = term.getAnnotations();
       a_110 = annos34;
       term = p_18.invoke(context, z_109);
       if(term == null)
-        break Fail57;
+        break Fail58;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSignature_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, a_110));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$List$Tl_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$List$Tl_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$List$Tl_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SortListTl_2_0");
-    Fail135:
+    Fail136:
     { 
       IStrategoTerm d_125 = null;
       IStrategoTerm b_125 = null;
       IStrategoTerm c_125 = null;
       IStrategoTerm e_125 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSortListTl_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail135;
+        break Fail136;
       b_125 = term.getSubterm(0);
       c_125 = term.getSubterm(1);
       IStrategoList annos109 = term.getAnnotations();
       d_125 = annos109;
       term = v_23.invoke(context, b_125);
       if(term == null)
-        break Fail135;
+        break Fail136;
       e_125 = term;
       term = w_23.invoke(context, c_125);
       if(term == null)
-        break Fail135;
+        break Fail136;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSortListTl_2, new IStrategoTerm[]{e_125, term}), checkListAnnos(termFactory, d_125));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$List_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$List_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$List_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SortList_1_0");
-    Fail136:
+    Fail137:
     { 
       IStrategoTerm i_125 = null;
       IStrategoTerm h_125 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSortList_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail136;
+        break Fail137;
       h_125 = term.getSubterm(0);
       IStrategoList annos110 = term.getAnnotations();
       i_125 = annos110;
       term = x_23.invoke(context, h_125);
       if(term == null)
-        break Fail136;
+        break Fail137;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSortList_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, i_125));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$No$Args_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$No$Args_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$No$Args_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SortNoArgs_1_0");
-    Fail138:
+    Fail139:
     { 
       IStrategoTerm q_125 = null;
       IStrategoTerm p_125 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSortNoArgs_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail138;
+        break Fail139;
       p_125 = term.getSubterm(0);
       IStrategoList annos112 = term.getAnnotations();
       q_125 = annos112;
       term = a_24.invoke(context, p_125);
       if(term == null)
-        break Fail138;
+        break Fail139;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSortNoArgs_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, q_125));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$Tuple_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$Tuple_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$Tuple_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SortTuple_1_0");
-    Fail134:
+    Fail135:
     { 
       IStrategoTerm x_124 = null;
       IStrategoTerm w_124 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSortTuple_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail134;
+        break Fail135;
       w_124 = term.getSubterm(0);
       IStrategoList annos108 = term.getAnnotations();
       x_124 = annos108;
       term = u_23.invoke(context, w_124);
       if(term == null)
-        break Fail134;
+        break Fail135;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSortTuple_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, x_124));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$Var_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$Var_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort$Var_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SortVar_1_0");
-    Fail139:
+    Fail140:
     { 
       IStrategoTerm t_125 = null;
       IStrategoTerm s_125 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSortVar_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail139;
+        break Fail140;
       s_125 = term.getSubterm(0);
       IStrategoList annos113 = term.getAnnotations();
       t_125 = annos113;
       term = b_24.invoke(context, s_125);
       if(term == null)
-        break Fail139;
+        break Fail140;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSortVar_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, t_125));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sort_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Sort_2_0");
-    Fail137:
+    Fail138:
     { 
       IStrategoTerm m_125 = null;
       IStrategoTerm k_125 = null;
       IStrategoTerm l_125 = null;
       IStrategoTerm n_125 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSort_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail137;
+        break Fail138;
       k_125 = term.getSubterm(0);
       l_125 = term.getSubterm(1);
       IStrategoList annos111 = term.getAnnotations();
       m_125 = annos111;
       term = y_23.invoke(context, k_125);
       if(term == null)
-        break Fail137;
+        break Fail138;
       n_125 = term;
       term = z_23.invoke(context, l_125);
       if(term == null)
-        break Fail137;
+        break Fail138;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSort_2, new IStrategoTerm[]{n_125, term}), checkListAnnos(termFactory, m_125));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sorts_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sorts_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sorts_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Sorts_1_0");
-    Fail141:
+    Fail142:
     { 
       IStrategoTerm z_125 = null;
       IStrategoTerm y_125 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSorts_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail141;
+        break Fail142;
       y_125 = term.getSubterm(0);
       IStrategoList annos115 = term.getAnnotations();
       z_125 = annos115;
       term = d_24.invoke(context, y_125);
       if(term == null)
-        break Fail141;
+        break Fail142;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSorts_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, z_125));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Specification_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Specification_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Specification_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Specification_1_0");
-    Fail60:
+    Fail61:
     { 
       IStrategoTerm j_110 = null;
       IStrategoTerm i_110 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSpecification_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail60;
+        break Fail61;
       i_110 = term.getSubterm(0);
       IStrategoList annos37 = term.getAnnotations();
       j_110 = annos37;
       term = s_18.invoke(context, i_110);
       if(term == null)
-        break Fail60;
+        break Fail61;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSpecification_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, j_110));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Str$Cong_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Str$Cong_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Str$Cong_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("StrCong_1_0");
-    Fail99:
+    Fail100:
     { 
       IStrategoTerm m_118 = null;
       IStrategoTerm l_118 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consStrCong_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail99;
+        break Fail100;
       l_118 = term.getSubterm(0);
       IStrategoList annos75 = term.getAnnotations();
       m_118 = annos75;
       term = s_21.invoke(context, l_118);
       if(term == null)
-        break Fail99;
+        break Fail100;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consStrCong_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, m_118));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Str_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Str_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Str_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Str_1_0");
-    Fail157:
+    Fail158:
     { 
       IStrategoTerm j_128 = null;
       IStrategoTerm i_128 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consStr_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail157;
+        break Fail158;
       i_128 = term.getSubterm(0);
       IStrategoList annos130 = term.getAnnotations();
       j_128 = annos130;
       term = z_24.invoke(context, i_128);
       if(term == null)
-        break Fail157;
+        break Fail158;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consStr_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, j_128));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Strategies_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Strategies_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Strategies_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Strategies_1_0");
-    Fail58:
+    Fail59:
     { 
       IStrategoTerm d_110 = null;
       IStrategoTerm c_110 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consStrategies_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail58;
+        break Fail59;
       c_110 = term.getSubterm(0);
       IStrategoList annos35 = term.getAnnotations();
       d_110 = annos35;
       term = q_18.invoke(context, c_110);
       if(term == null)
-        break Fail58;
+        break Fail59;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consStrategies_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, d_110));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Strategy$Curly_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Strategy$Curly_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Strategy$Curly_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("StrategyCurly_1_0");
-    Fail51:
+    Fail52:
     { 
       IStrategoTerm f_109 = null;
       IStrategoTerm e_109 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consStrategyCurly_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail51;
+        break Fail52;
       e_109 = term.getSubterm(0);
       IStrategoList annos28 = term.getAnnotations();
       f_109 = annos28;
       term = j_18.invoke(context, e_109);
       if(term == null)
-        break Fail51;
+        break Fail52;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consStrategyCurly_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, f_109));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Body_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Body_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Body_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SugarBody_1_0");
-    Fail271:
+    Fail272:
     { 
       IStrategoTerm a_150 = null;
       IStrategoTerm z_149 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSugarBody_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail271;
+        break Fail272;
       z_149 = term.getSubterm(0);
       IStrategoList annos226 = term.getAnnotations();
       a_150 = annos226;
       term = b_30.invoke(context, z_149);
       if(term == null)
-        break Fail271;
+        break Fail272;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSugarBody_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, a_150));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Dec$Head_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Dec$Head_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Dec$Head_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SugarDecHead_2_0");
-    Fail274:
+    Fail275:
     { 
       IStrategoTerm o_150 = null;
       IStrategoTerm m_150 = null;
       IStrategoTerm n_150 = null;
       IStrategoTerm p_150 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSugarDecHead_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail274;
+        break Fail275;
       m_150 = term.getSubterm(0);
       n_150 = term.getSubterm(1);
       IStrategoList annos229 = term.getAnnotations();
       o_150 = annos229;
       term = g_30.invoke(context, m_150);
       if(term == null)
-        break Fail274;
+        break Fail275;
       p_150 = term;
       term = h_30.invoke(context, n_150);
       if(term == null)
-        break Fail274;
+        break Fail275;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSugarDecHead_2, new IStrategoTerm[]{p_150, term}), checkListAnnos(termFactory, o_150));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Dec_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Dec_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Sugar$Dec_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SugarDec_2_0");
-    Fail275:
+    Fail276:
     { 
       IStrategoTerm t_150 = null;
       IStrategoTerm r_150 = null;
       IStrategoTerm s_150 = null;
       IStrategoTerm u_150 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSugarDec_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail275;
+        break Fail276;
       r_150 = term.getSubterm(0);
       s_150 = term.getSubterm(1);
       IStrategoList annos230 = term.getAnnotations();
       t_150 = annos230;
       term = i_30.invoke(context, r_150);
       if(term == null)
-        break Fail275;
+        break Fail276;
       u_150 = term;
       term = j_30.invoke(context, s_150);
       if(term == null)
-        break Fail275;
+        break Fail276;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSugarDec_2, new IStrategoTerm[]{u_150, term}), checkListAnnos(termFactory, t_150));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Super$Sugar$Dec_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Super$Sugar$Dec_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Super$Sugar$Dec_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SuperSugarDec_1_0");
-    Fail272:
+    Fail273:
     { 
       IStrategoTerm d_150 = null;
       IStrategoTerm c_150 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSuperSugarDec_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail272;
+        break Fail273;
       c_150 = term.getSubterm(0);
       IStrategoList annos227 = term.getAnnotations();
       d_150 = annos227;
       term = c_30.invoke(context, c_150);
       if(term == null)
-        break Fail272;
+        break Fail273;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSuperSugarDec_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, d_150));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Case_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Case_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Case_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SwitchCase_2_0");
-    Fail50:
+    Fail51:
     { 
       IStrategoTerm b_109 = null;
       IStrategoTerm z_108 = null;
       IStrategoTerm a_109 = null;
       IStrategoTerm c_109 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSwitchCase_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail50;
+        break Fail51;
       z_108 = term.getSubterm(0);
       a_109 = term.getSubterm(1);
       IStrategoList annos27 = term.getAnnotations();
       b_109 = annos27;
       term = h_18.invoke(context, z_108);
       if(term == null)
-        break Fail50;
+        break Fail51;
       c_109 = term;
       term = i_18.invoke(context, a_109);
       if(term == null)
-        break Fail50;
+        break Fail51;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSwitchCase_2, new IStrategoTerm[]{c_109, term}), checkListAnnos(termFactory, b_109));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Choice$No$Otherwise_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Choice$No$Otherwise_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Choice$No$Otherwise_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SwitchChoiceNoOtherwise_2_0");
-    Fail81:
+    Fail82:
     { 
       IStrategoTerm s_115 = null;
       IStrategoTerm q_115 = null;
       IStrategoTerm r_115 = null;
       IStrategoTerm t_115 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSwitchChoiceNoOtherwise_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail81;
+        break Fail82;
       q_115 = term.getSubterm(0);
       r_115 = term.getSubterm(1);
       IStrategoList annos58 = term.getAnnotations();
       s_115 = annos58;
       term = q_20.invoke(context, q_115);
       if(term == null)
-        break Fail81;
+        break Fail82;
       t_115 = term;
       term = r_20.invoke(context, r_115);
       if(term == null)
-        break Fail81;
+        break Fail82;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSwitchChoiceNoOtherwise_2, new IStrategoTerm[]{t_115, term}), checkListAnnos(termFactory, s_115));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Choice_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Choice_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Switch$Choice_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("SwitchChoice_3_0");
-    Fail80:
+    Fail81:
     { 
       IStrategoTerm l_115 = null;
       IStrategoTerm i_115 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm m_115 = null;
       IStrategoTerm n_115 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consSwitchChoice_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail80;
+        break Fail81;
       i_115 = term.getSubterm(0);
       j_115 = term.getSubterm(1);
       k_115 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       l_115 = annos57;
       term = n_20.invoke(context, i_115);
       if(term == null)
-        break Fail80;
+        break Fail81;
       m_115 = term;
       term = o_20.invoke(context, j_115);
       if(term == null)
-        break Fail80;
+        break Fail81;
       n_115 = term;
       term = p_20.invoke(context, k_115);
       if(term == null)
-        break Fail80;
+        break Fail81;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consSwitchChoice_3, new IStrategoTerm[]{m_115, n_115, term}), checkListAnnos(termFactory, l_115));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Test_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Test_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Test_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Test_1_0");
-    Fail102:
+    Fail103:
     { 
       IStrategoTerm x_118 = null;
       IStrategoTerm w_118 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consTest_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail102;
+        break Fail103;
       w_118 = term.getSubterm(0);
       IStrategoList annos78 = term.getAnnotations();
       x_118 = annos78;
       term = w_21.invoke(context, w_118);
       if(term == null)
-        break Fail102;
+        break Fail103;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consTest_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, x_118));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Tuple$Cong_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Tuple$Cong_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Tuple$Cong_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("TupleCong_2_0");
-    Fail92:
+    Fail93:
     { 
       IStrategoTerm p_117 = null;
       IStrategoTerm n_117 = null;
       IStrategoTerm o_117 = null;
       IStrategoTerm q_117 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consTupleCong_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail92;
+        break Fail93;
       n_117 = term.getSubterm(0);
       o_117 = term.getSubterm(1);
       IStrategoList annos69 = term.getAnnotations();
       p_117 = annos69;
       term = j_21.invoke(context, n_117);
       if(term == null)
-        break Fail92;
+        break Fail93;
       q_117 = term;
       term = k_21.invoke(context, o_117);
       if(term == null)
-        break Fail92;
+        break Fail93;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consTupleCong_2, new IStrategoTerm[]{q_117, term}), checkListAnnos(termFactory, p_117));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Tuple_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Tuple_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Tuple_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Tuple_1_0");
-    Fail151:
+    Fail152:
     { 
       IStrategoTerm l_127 = null;
       IStrategoTerm k_127 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consTuple_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail151;
+        break Fail152;
       k_127 = term.getSubterm(0);
       IStrategoList annos124 = term.getAnnotations();
       l_127 = annos124;
       term = q_24.invoke(context, k_127);
       if(term == null)
-        break Fail151;
+        break Fail152;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consTuple_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, l_127));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Undefine$Dyn$Rule_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Undefine$Dyn$Rule_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Undefine$Dyn$Rule_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("UndefineDynRule_2_0");
-    Fail38:
+    Fail39:
     { 
       IStrategoTerm j_106 = null;
       IStrategoTerm h_106 = null;
       IStrategoTerm i_106 = null;
       IStrategoTerm k_106 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consUndefineDynRule_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail38;
+        break Fail39;
       h_106 = term.getSubterm(0);
       i_106 = term.getSubterm(1);
       IStrategoList annos15 = term.getAnnotations();
       j_106 = annos15;
       term = h_17.invoke(context, h_106);
       if(term == null)
-        break Fail38;
+        break Fail39;
       k_106 = term;
       term = i_17.invoke(context, i_106);
       if(term == null)
-        break Fail38;
+        break Fail39;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consUndefineDynRule_2, new IStrategoTerm[]{k_106, term}), checkListAnnos(termFactory, j_106));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Var$Dec_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Var$Dec_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Var$Dec_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("VarDec_2_0");
-    Fail64:
+    Fail65:
     { 
       IStrategoTerm e_111 = null;
       IStrategoTerm b_111 = null;
       IStrategoTerm d_111 = null;
       IStrategoTerm f_111 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consVarDec_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail64;
+        break Fail65;
       b_111 = term.getSubterm(0);
       d_111 = term.getSubterm(1);
       IStrategoList annos41 = term.getAnnotations();
       e_111 = annos41;
       term = x_18.invoke(context, b_111);
       if(term == null)
-        break Fail64;
+        break Fail65;
       f_111 = term;
       term = y_18.invoke(context, d_111);
       if(term == null)
-        break Fail64;
+        break Fail65;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consVarDec_2, new IStrategoTerm[]{f_111, term}), checkListAnnos(termFactory, e_111));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Var_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Var_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Var_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Var_1_0");
-    Fail160:
+    Fail161:
     { 
       IStrategoTerm u_128 = null;
       IStrategoTerm t_128 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consVar_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail160;
+        break Fail161;
       t_128 = term.getSubterm(0);
       IStrategoList annos133 = term.getAnnotations();
       u_128 = annos133;
       term = c_25.invoke(context, t_128);
       if(term == null)
-        break Fail160;
+        break Fail161;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consVar_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, u_128));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Where$Clause_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Where$Clause_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Where$Clause_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("WhereClause_1_0");
-    Fail42:
+    Fail43:
     { 
       IStrategoTerm z_106 = null;
       IStrategoTerm y_106 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consWhereClause_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail42;
+        break Fail43;
       y_106 = term.getSubterm(0);
       IStrategoList annos19 = term.getAnnotations();
       z_106 = annos19;
       term = n_17.invoke(context, y_106);
       if(term == null)
-        break Fail42;
+        break Fail43;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consWhereClause_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, z_106));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Where_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Where_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Where_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("Where_1_0");
-    Fail104:
+    Fail105:
     { 
       IStrategoTerm d_119 = null;
       IStrategoTerm c_119 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consWhere_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail104;
+        break Fail105;
       c_119 = term.getSubterm(0);
       IStrategoList annos80 = term.getAnnotations();
       d_119 = annos80;
       term = y_21.invoke(context, c_119);
       if(term == null)
-        break Fail104;
+        break Fail105;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consWhere_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, d_119));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$With$Clause_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$With$Clause_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$With$Clause_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("WithClause_1_0");
-    Fail41:
+    Fail42:
     { 
       IStrategoTerm v_106 = null;
       IStrategoTerm u_106 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consWithClause_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail41;
+        break Fail42;
       u_106 = term.getSubterm(0);
       IStrategoList annos18 = term.getAnnotations();
       v_106 = annos18;
       term = m_17.invoke(context, u_106);
       if(term == null)
-        break Fail41;
+        break Fail42;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consWithClause_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, v_106));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$With_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$With_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$With_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("With_1_0");
-    Fail103:
+    Fail104:
     { 
       IStrategoTerm a_119 = null;
       IStrategoTerm z_118 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consWith_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail103;
+        break Fail104;
       z_118 = term.getSubterm(0);
       IStrategoList annos79 = term.getAnnotations();
       a_119 = annos79;
       term = x_21.invoke(context, z_118);
       if(term == null)
-        break Fail103;
+        break Fail104;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consWith_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, a_119));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Wld_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Wld_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/$Wld_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail142:
+    Fail143:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consWld_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail142;
+        break Fail143;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/absent_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/absent_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/absent_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail178:
+    Fail179:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consabsent_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail178;
+        break Fail179;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/alias_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/alias_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/alias_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("alias_2_0");
-    Fail162:
+    Fail163:
     { 
       IStrategoTerm b_129 = null;
       IStrategoTerm z_128 = null;
       IStrategoTerm a_129 = null;
       IStrategoTerm c_129 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consalias_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail162;
+        break Fail163;
       z_128 = term.getSubterm(0);
       a_129 = term.getSubterm(1);
       IStrategoList annos135 = term.getAnnotations();
       b_129 = annos135;
       term = e_25.invoke(context, z_128);
       if(term == null)
-        break Fail162;
+        break Fail163;
       c_129 = term;
       term = f_25.invoke(context, a_129);
       if(term == null)
-        break Fail162;
+        break Fail163;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consalias_2, new IStrategoTerm[]{c_129, term}), checkListAnnos(termFactory, b_129));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/aliases_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/aliases_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/aliases_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("aliases_1_0");
-    Fail245:
+    Fail246:
     { 
       IStrategoTerm c_146 = null;
       IStrategoTerm a_146 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consaliases_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail245;
+        break Fail246;
       a_146 = term.getSubterm(0);
       IStrategoList annos201 = term.getAnnotations();
       c_146 = annos201;
       term = x_28.invoke(context, a_146);
       if(term == null)
-        break Fail245;
+        break Fail246;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consaliases_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, c_146));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/alt_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/alt_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/alt_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("alt_2_0");
-    Fail164:
+    Fail165:
     { 
       IStrategoTerm r_129 = null;
       IStrategoTerm p_129 = null;
       IStrategoTerm q_129 = null;
       IStrategoTerm t_129 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consalt_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail164;
+        break Fail165;
       p_129 = term.getSubterm(0);
       q_129 = term.getSubterm(1);
       IStrategoList annos137 = term.getAnnotations();
       r_129 = annos137;
       term = i_25.invoke(context, p_129);
       if(term == null)
-        break Fail164;
+        break Fail165;
       t_129 = term;
       term = j_25.invoke(context, q_129);
       if(term == null)
-        break Fail164;
+        break Fail165;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consalt_2, new IStrategoTerm[]{t_129, term}), checkListAnnos(termFactory, r_129));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/annotated_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/annotated_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/annotated_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("annotated_2_0");
-    Fail260:
+    Fail261:
     { 
       IStrategoTerm m_148 = null;
       IStrategoTerm k_148 = null;
       IStrategoTerm l_148 = null;
       IStrategoTerm n_148 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consannotated_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail260;
+        break Fail261;
       k_148 = term.getSubterm(0);
       l_148 = term.getSubterm(1);
       IStrategoList annos215 = term.getAnnotations();
       m_148 = annos215;
       term = m_29.invoke(context, k_148);
       if(term == null)
-        break Fail260;
+        break Fail261;
       n_148 = term;
       term = n_29.invoke(context, l_148);
       if(term == null)
-        break Fail260;
+        break Fail261;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consannotated_2, new IStrategoTerm[]{n_148, term}), checkListAnnos(termFactory, m_148));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/appl_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/appl_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/appl_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("appl_2_0");
-    Fail262:
+    Fail263:
     { 
       IStrategoTerm u_148 = null;
       IStrategoTerm s_148 = null;
       IStrategoTerm t_148 = null;
       IStrategoTerm v_148 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consappl_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail262;
+        break Fail263;
       s_148 = term.getSubterm(0);
       t_148 = term.getSubterm(1);
       IStrategoList annos217 = term.getAnnotations();
       u_148 = annos217;
       term = p_29.invoke(context, s_148);
       if(term == null)
-        break Fail262;
+        break Fail263;
       v_148 = term;
       term = q_29.invoke(context, t_148);
       if(term == null)
-        break Fail262;
+        break Fail263;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consappl_2, new IStrategoTerm[]{v_148, term}), checkListAnnos(termFactory, u_148));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail195:
+    Fail196:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consassoc_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail195;
+        break Fail196;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("assoc_1_0");
-    Fail237:
+    Fail238:
     { 
       IStrategoTerm p_144 = null;
       IStrategoTerm o_144 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consassoc_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail237;
+        break Fail238;
       o_144 = term.getSubterm(0);
       IStrategoList annos194 = term.getAnnotations();
       p_144 = annos194;
       term = q_28.invoke(context, o_144);
       if(term == null)
-        break Fail237;
+        break Fail238;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consassoc_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, p_144));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("assoc_3_0");
-    Fail187:
+    Fail188:
     { 
       IStrategoTerm b_135 = null;
       IStrategoTerm r_134 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm d_135 = null;
       IStrategoTerm g_135 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consassoc_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail187;
+        break Fail188;
       r_134 = term.getSubterm(0);
       x_134 = term.getSubterm(1);
       z_134 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       b_135 = annos155;
       term = h_26.invoke(context, r_134);
       if(term == null)
-        break Fail187;
+        break Fail188;
       d_135 = term;
       term = i_26.invoke(context, x_134);
       if(term == null)
-        break Fail187;
+        break Fail188;
       g_135 = term;
       term = j_26.invoke(context, z_134);
       if(term == null)
-        break Fail187;
+        break Fail188;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consassoc_3, new IStrategoTerm[]{d_135, g_135, term}), checkListAnnos(termFactory, b_135));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_group_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_group_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/assoc_group_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("assoc_group_2_0");
-    Fail189:
+    Fail190:
     { 
       IStrategoTerm z_135 = null;
       IStrategoTerm s_135 = null;
       IStrategoTerm w_135 = null;
       IStrategoTerm b_136 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consassoc_group_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail189;
+        break Fail190;
       s_135 = term.getSubterm(0);
       w_135 = term.getSubterm(1);
       IStrategoList annos157 = term.getAnnotations();
       z_135 = annos157;
       term = l_26.invoke(context, s_135);
       if(term == null)
-        break Fail189;
+        break Fail190;
       b_136 = term;
       term = m_26.invoke(context, w_135);
       if(term == null)
-        break Fail189;
+        break Fail190;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consassoc_group_2, new IStrategoTerm[]{b_136, term}), checkListAnnos(termFactory, z_135));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/attrs_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/attrs_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/attrs_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("attrs_1_0");
-    Fail233:
+    Fail234:
     { 
       IStrategoTerm k_144 = null;
       IStrategoTerm j_144 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consattrs_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail233;
+        break Fail234;
       j_144 = term.getSubterm(0);
       IStrategoList annos193 = term.getAnnotations();
       k_144 = annos193;
       term = p_28.invoke(context, j_144);
       if(term == null)
-        break Fail233;
+        break Fail234;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consattrs_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, k_144));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/avoid_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/avoid_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/avoid_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail234:
+    Fail235:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consavoid_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail234;
+        break Fail235;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/bot_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/bot_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/bot_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail182:
+    Fail183:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consbot_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail182;
+        break Fail183;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/bracket_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/bracket_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/bracket_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail238:
+    Fail239:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consbracket_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail238;
+        break Fail239;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/cf_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/cf_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/cf_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("cf_1_0");
-    Fail229:
+    Fail230:
     { 
       IStrategoTerm o_143 = null;
       IStrategoTerm n_143 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conscf_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail229;
+        break Fail230;
       n_143 = term.getSubterm(0);
       IStrategoList annos190 = term.getAnnotations();
       o_143 = annos190;
       term = h_28.invoke(context, n_143);
       if(term == null)
-        break Fail229;
+        break Fail230;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conscf_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, o_143));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/chain_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/chain_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/chain_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("chain_1_0");
-    Fail188:
+    Fail189:
     { 
       IStrategoTerm m_135 = null;
       IStrategoTerm k_135 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conschain_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail188;
+        break Fail189;
       k_135 = term.getSubterm(0);
       IStrategoList annos156 = term.getAnnotations();
       m_135 = annos156;
       term = k_26.invoke(context, k_135);
       if(term == null)
-        break Fail188;
+        break Fail189;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conschain_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, m_135));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/char_class_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/char_class_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/char_class_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("char_class_1_0");
-    Fail167:
+    Fail168:
     { 
       IStrategoTerm h_130 = null;
       IStrategoTerm g_130 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conschar_class_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail167;
+        break Fail168;
       g_130 = term.getSubterm(0);
       IStrategoList annos140 = term.getAnnotations();
       h_130 = annos140;
       term = n_25.invoke(context, g_130);
       if(term == null)
-        break Fail167;
+        break Fail168;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conschar_class_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, h_130));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/ci_lit_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/ci_lit_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/ci_lit_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("ci_lit_1_0");
-    Fail213:
+    Fail214:
     { 
       IStrategoTerm g_139 = null;
       IStrategoTerm f_139 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consci_lit_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail213;
+        break Fail214;
       f_139 = term.getSubterm(0);
       IStrategoList annos175 = term.getAnnotations();
       g_139 = annos175;
       term = m_27.invoke(context, f_139);
       if(term == null)
-        break Fail213;
+        break Fail214;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consci_lit_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, g_139));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("comp_1_0");
-    Fail175:
+    Fail176:
     { 
       IStrategoTerm e_132 = null;
       IStrategoTerm d_132 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conscomp_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail175;
+        break Fail176;
       d_132 = term.getSubterm(0);
       IStrategoList annos148 = term.getAnnotations();
       e_132 = annos148;
       term = y_25.invoke(context, d_132);
       if(term == null)
-        break Fail175;
+        break Fail176;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conscomp_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, e_132));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugaring_to_sdf_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugaring_to_sdf_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugaring_to_sdf_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -15,21 +15,21 @@
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
     ITermFactory termFactory = context.getFactory();
-    Fail11:
+    Fail12:
     { 
-      IStrategoTerm term2 = term;
+      IStrategoTerm term3 = term;
       IStrategoConstructor cons3 = term.getTermType() == IStrategoTerm.APPL ? ((IStrategoAppl)term).getConstructor() : null;
-      Success2:
+      Success3:
       { 
         if(cons3 == extraction._consPureDesugaring_1)
         { 
-          Fail12:
+          Fail13:
           { 
             term = extraction.constNil0;
             if(true)
-              break Success2;
+              break Success3;
           }
-          term = term2;
+          term = term3;
         }
         if(cons3 == extraction._consInjectDesugaring_4)
         { 
@@ -43,7 +43,7 @@
         }
         else
         { 
-          break Fail11;
+          break Fail12;
         }
       }
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugaring_to_str_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugaring_to_str_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugaring_to_str_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -15,23 +15,23 @@
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
     ITermFactory termFactory = context.getFactory();
-    Fail19:
+    Fail20:
     { 
-      IStrategoTerm term6 = term;
+      IStrategoTerm term7 = term;
       IStrategoConstructor cons4 = term.getTermType() == IStrategoTerm.APPL ? ((IStrategoAppl)term).getConstructor() : null;
-      Success5:
+      Success6:
       { 
         if(cons4 == extraction._consPureDesugaring_1)
         { 
-          Fail20:
+          Fail21:
           { 
             IStrategoTerm e_16 = null;
             e_16 = term.getSubterm(0);
             term = termFactory.makeAppl(extraction._consSDefNoArgs_2, new IStrategoTerm[]{extraction.const0, termFactory.makeAppl(extraction._consCall_2, new IStrategoTerm[]{extraction.constCallNoArgs0, (IStrategoTerm)termFactory.makeListCons(e_16, (IStrategoList)extraction.constNil0)})});
             if(true)
-              break Success5;
+              break Success6;
           }
-          term = term6;
+          term = term7;
         }
         if(cons4 == extraction._consInjectDesugaring_4)
         { 
@@ -41,7 +41,7 @@
         }
         else
         { 
-          break Fail19;
+          break Fail20;
         }
       }
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugarings_to_sdf_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugarings_to_sdf_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugarings_to_sdf_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -19,6 +19,7 @@
     Fail10:
     { 
       IStrategoTerm m_15 = null;
+      IStrategoTerm n_15 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDesugarings_1 != ((IStrategoAppl)term).getConstructor())
         break Fail10;
       m_15 = term.getSubterm(0);
@@ -28,7 +29,24 @@
       term = concat_0_0.instance.invoke(context, term);
       if(term == null)
         break Fail10;
-      term = termFactory.makeAppl(extraction._conscontext_free_syntax_1, new IStrategoTerm[]{term});
+      n_15 = term;
+      IStrategoTerm term2 = term;
+      Success2:
+      { 
+        Fail11:
+        { 
+          if(term.getTermType() != IStrategoTerm.LIST || !((IStrategoList)term).isEmpty())
+            break Fail11;
+          { 
+            if(true)
+              break Fail10;
+            if(true)
+              break Success2;
+          }
+        }
+        term = term2;
+      }
+      term = termFactory.makeAppl(extraction._conscontext_free_syntax_1, new IStrategoTerm[]{n_15});
       context.popOnSuccess();
       if(true)
         return term;

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugarings_to_str_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugarings_to_str_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/comp_desugarings_to_str_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,15 +16,15 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("comp_desugarings_to_str_0_0");
-    Fail18:
+    Fail19:
     { 
       IStrategoTerm x_15 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consDesugarings_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail18;
+        break Fail19;
       x_15 = term.getSubterm(0);
       term = map_1_0.instance.invoke(context, x_15, comp_desugaring_to_str_0_0.instance);
       if(term == null)
-        break Fail18;
+        break Fail19;
       term = termFactory.makeAppl(extraction._consStrategies_1, new IStrategoTerm[]{term});
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/conc_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/conc_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/conc_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("conc_2_0");
-    Fail179:
+    Fail180:
     { 
       IStrategoTerm a_133 = null;
       IStrategoTerm u_132 = null;
       IStrategoTerm x_132 = null;
       IStrategoTerm d_133 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consconc_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail179;
+        break Fail180;
       u_132 = term.getSubterm(0);
       x_132 = term.getSubterm(1);
       IStrategoList annos151 = term.getAnnotations();
       a_133 = annos151;
       term = b_26.invoke(context, u_132);
       if(term == null)
-        break Fail179;
+        break Fail180;
       d_133 = term;
       term = c_26.invoke(context, x_132);
       if(term == null)
-        break Fail179;
+        break Fail180;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consconc_2, new IStrategoTerm[]{d_133, term}), checkListAnnos(termFactory, a_133));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/conc_grammars_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/conc_grammars_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/conc_grammars_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("conc_grammars_2_0");
-    Fail258:
+    Fail259:
     { 
       IStrategoTerm h_148 = null;
       IStrategoTerm f_148 = null;
       IStrategoTerm g_148 = null;
       IStrategoTerm i_148 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consconc_grammars_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail258;
+        break Fail259;
       f_148 = term.getSubterm(0);
       g_148 = term.getSubterm(1);
       IStrategoList annos214 = term.getAnnotations();
       h_148 = annos214;
       term = k_29.invoke(context, f_148);
       if(term == null)
-        break Fail258;
+        break Fail259;
       i_148 = term;
       term = l_29.invoke(context, g_148);
       if(term == null)
-        break Fail258;
+        break Fail259;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consconc_grammars_2, new IStrategoTerm[]{i_148, term}), checkListAnnos(termFactory, h_148));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_priorities_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_priorities_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_priorities_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("context_free_priorities_1_0");
-    Fail243:
+    Fail244:
     { 
       IStrategoTerm u_145 = null;
       IStrategoTerm t_145 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conscontext_free_priorities_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail243;
+        break Fail244;
       t_145 = term.getSubterm(0);
       IStrategoList annos199 = term.getAnnotations();
       u_145 = annos199;
       term = v_28.invoke(context, t_145);
       if(term == null)
-        break Fail243;
+        break Fail244;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conscontext_free_priorities_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, u_145));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_restrictions_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_restrictions_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_restrictions_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("context_free_restrictions_1_0");
-    Fail241:
+    Fail242:
     { 
       IStrategoTerm a_145 = null;
       IStrategoTerm z_144 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conscontext_free_restrictions_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail241;
+        break Fail242;
       z_144 = term.getSubterm(0);
       IStrategoList annos197 = term.getAnnotations();
       a_145 = annos197;
       term = t_28.invoke(context, z_144);
       if(term == null)
-        break Fail241;
+        break Fail242;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conscontext_free_restrictions_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, a_145));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_start_symbols_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_start_symbols_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_start_symbols_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("context_free_start_symbols_1_0");
-    Fail247:
+    Fail248:
     { 
       IStrategoTerm i_146 = null;
       IStrategoTerm h_146 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conscontext_free_start_symbols_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail247;
+        break Fail248;
       h_146 = term.getSubterm(0);
       IStrategoList annos203 = term.getAnnotations();
       i_146 = annos203;
       term = z_28.invoke(context, h_146);
       if(term == null)
-        break Fail247;
+        break Fail248;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conscontext_free_start_symbols_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, i_146));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_syntax_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_syntax_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/context_free_syntax_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("context_free_syntax_1_0");
-    Fail255:
+    Fail256:
     { 
       IStrategoTerm x_147 = null;
       IStrategoTerm w_147 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conscontext_free_syntax_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail255;
+        break Fail256;
       w_147 = term.getSubterm(0);
       IStrategoList annos211 = term.getAnnotations();
       x_147 = annos211;
       term = h_29.invoke(context, w_147);
       if(term == null)
-        break Fail255;
+        break Fail256;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conscontext_free_syntax_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, x_147));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/default_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/default_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/default_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("default_1_0");
-    Fail194:
+    Fail195:
     { 
       IStrategoTerm y_136 = null;
       IStrategoTerm v_136 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consdefault_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail194;
+        break Fail195;
       v_136 = term.getSubterm(0);
       IStrategoList annos162 = term.getAnnotations();
       y_136 = annos162;
       term = s_26.invoke(context, v_136);
       if(term == null)
-        break Fail194;
+        break Fail195;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consdefault_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, y_136));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/definition_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/definition_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/definition_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("definition_1_0");
-    Fail161:
+    Fail162:
     { 
       IStrategoTerm x_128 = null;
       IStrategoTerm w_128 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consdefinition_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail161;
+        break Fail162;
       w_128 = term.getSubterm(0);
       IStrategoList annos134 = term.getAnnotations();
       x_128 = annos134;
       term = d_25.invoke(context, w_128);
       if(term == null)
-        break Fail161;
+        break Fail162;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consdefinition_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, x_128));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/diff_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/diff_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/diff_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("diff_2_0");
-    Fail174:
+    Fail175:
     { 
       IStrategoTerm a_132 = null;
       IStrategoTerm x_131 = null;
       IStrategoTerm z_131 = null;
       IStrategoTerm b_132 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consdiff_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail174;
+        break Fail175;
       x_131 = term.getSubterm(0);
       z_131 = term.getSubterm(1);
       IStrategoList annos147 = term.getAnnotations();
       a_132 = annos147;
       term = w_25.invoke(context, x_131);
       if(term == null)
-        break Fail174;
+        break Fail175;
       b_132 = term;
       term = x_25.invoke(context, z_131);
       if(term == null)
-        break Fail174;
+        break Fail175;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consdiff_2, new IStrategoTerm[]{b_132, term}), checkListAnnos(termFactory, a_132));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/empty_grammar_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/empty_grammar_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/empty_grammar_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail259:
+    Fail260:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consempty_grammar_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail259;
+        break Fail260;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/eof_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/eof_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/eof_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail183:
+    Fail184:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conseof_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail183;
+        break Fail184;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/exports_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/exports_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/exports_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("exports_1_0");
-    Fail205:
+    Fail206:
     { 
       IStrategoTerm b_138 = null;
       IStrategoTerm a_138 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consexports_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail205;
+        break Fail206;
       a_138 = term.getSubterm(0);
       IStrategoList annos169 = term.getAnnotations();
       b_138 = annos169;
       term = b_27.invoke(context, a_138);
       if(term == null)
-        break Fail205;
+        break Fail206;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consexports_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, b_138));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/extract_sdf_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/extract_sdf_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/extract_sdf_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -15,14 +15,14 @@
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
     context.push("extract_sdf_0_0");
-    Fail17:
+    Fail18:
     { 
       term = map_1_0.instance.invoke(context, term, lifted15.instance);
       if(term == null)
-        break Fail17;
+        break Fail18;
       term = concat_0_0.instance.invoke(context, term);
       if(term == null)
-        break Fail17;
+        break Fail18;
       context.popOnSuccess();
       if(true)
         return term;

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/extract_str_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/extract_str_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/extract_str_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -15,14 +15,14 @@
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
     context.push("extract_str_0_0");
-    Fail22:
+    Fail23:
     { 
       term = map_1_0.instance.invoke(context, term, lifted22.instance);
       if(term == null)
-        break Fail22;
+        break Fail23;
       term = concat_0_0.instance.invoke(context, term);
       if(term == null)
-        break Fail22;
+        break Fail23;
       context.popOnSuccess();
       if(true)
         return term;

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/file_start_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/file_start_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/file_start_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail210:
+    Fail211:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consfile_start_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail210;
+        break Fail211;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/fold_conc_grammars_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/fold_conc_grammars_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/fold_conc_grammars_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,56 +16,56 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("fold_conc_grammars_0_0");
-    Fail13:
+    Fail14:
     { 
-      IStrategoTerm term3 = term;
-      Success3:
+      IStrategoTerm term4 = term;
+      Success4:
       { 
-        Fail14:
+        Fail15:
         { 
           if(term.getTermType() != IStrategoTerm.LIST || !((IStrategoList)term).isEmpty())
-            break Fail14;
+            break Fail15;
           term = extraction.constempty_grammar0;
           if(true)
-            break Success3;
+            break Success4;
         }
-        term = term3;
-        IStrategoTerm term4 = term;
-        Success4:
+        term = term4;
+        IStrategoTerm term5 = term;
+        Success5:
         { 
-          Fail15:
+          Fail16:
           { 
             IStrategoTerm w_15 = null;
             if(term.getTermType() != IStrategoTerm.LIST || ((IStrategoList)term).isEmpty())
-              break Fail15;
+              break Fail16;
             w_15 = ((IStrategoList)term).head();
             IStrategoTerm arg1 = ((IStrategoList)term).tail();
             if(arg1.getTermType() != IStrategoTerm.LIST || !((IStrategoList)arg1).isEmpty())
-              break Fail15;
+              break Fail16;
             term = w_15;
             if(true)
-              break Success4;
+              break Success5;
           }
-          term = term4;
+          term = term5;
           IStrategoTerm t_15 = null;
           IStrategoTerm u_15 = null;
           IStrategoTerm v_15 = null;
           if(term.getTermType() != IStrategoTerm.LIST || ((IStrategoList)term).isEmpty())
-            break Fail13;
+            break Fail14;
           t_15 = ((IStrategoList)term).head();
           IStrategoTerm arg2 = ((IStrategoList)term).tail();
           if(arg2.getTermType() != IStrategoTerm.LIST || ((IStrategoList)arg2).isEmpty())
-            break Fail13;
+            break Fail14;
           u_15 = ((IStrategoList)arg2).head();
           v_15 = ((IStrategoList)arg2).tail();
           IStrategoList list0;
           list0 = checkListTail(v_15);
           if(list0 == null)
-            break Fail13;
+            break Fail14;
           term = (IStrategoTerm)termFactory.makeListCons(termFactory.makeAppl(extraction._consconc_grammars_2, new IStrategoTerm[]{t_15, u_15}), list0);
           term = this.invoke(context, term);
           if(term == null)
-            break Fail13;
+            break Fail14;
         }
       }
       context.popOnSuccess();

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/follow_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/follow_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/follow_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("follow_2_0");
-    Fail163:
+    Fail164:
     { 
       IStrategoTerm j_129 = null;
       IStrategoTerm e_129 = null;
       IStrategoTerm h_129 = null;
       IStrategoTerm m_129 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consfollow_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail163;
+        break Fail164;
       e_129 = term.getSubterm(0);
       h_129 = term.getSubterm(1);
       IStrategoList annos136 = term.getAnnotations();
       j_129 = annos136;
       term = g_25.invoke(context, e_129);
       if(term == null)
-        break Fail163;
+        break Fail164;
       m_129 = term;
       term = h_25.invoke(context, h_129);
       if(term == null)
-        break Fail163;
+        break Fail164;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consfollow_2, new IStrategoTerm[]{m_129, term}), checkListAnnos(termFactory, j_129));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/fun_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/fun_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/fun_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("fun_1_0");
-    Fail263:
+    Fail264:
     { 
       IStrategoTerm y_148 = null;
       IStrategoTerm x_148 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consfun_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail263;
+        break Fail264;
       x_148 = term.getSubterm(0);
       IStrategoList annos218 = term.getAnnotations();
       y_148 = annos218;
       term = r_29.invoke(context, x_148);
       if(term == null)
-        break Fail263;
+        break Fail264;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consfun_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, y_148));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/func_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/func_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/func_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("func_2_0");
-    Fail219:
+    Fail220:
     { 
       IStrategoTerm e_141 = null;
       IStrategoTerm c_141 = null;
       IStrategoTerm d_141 = null;
       IStrategoTerm i_141 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consfunc_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail219;
+        break Fail220;
       c_141 = term.getSubterm(0);
       d_141 = term.getSubterm(1);
       IStrategoList annos181 = term.getAnnotations();
       e_141 = annos181;
       term = u_27.invoke(context, c_141);
       if(term == null)
-        break Fail219;
+        break Fail220;
       i_141 = term;
       term = v_27.invoke(context, d_141);
       if(term == null)
-        break Fail219;
+        break Fail220;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consfunc_2, new IStrategoTerm[]{i_141, term}), checkListAnnos(termFactory, e_141));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/grammar_elem_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/grammar_elem_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/grammar_elem_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("grammar_elem_1_0");
-    Fail282:
+    Fail283:
     { 
       IStrategoTerm u_152 = null;
       IStrategoTerm p_152 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consgrammar_elem_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail282;
+        break Fail283;
       p_152 = term.getSubterm(0);
       IStrategoList annos237 = term.getAnnotations();
       u_152 = annos237;
       term = v_30.invoke(context, p_152);
       if(term == null)
-        break Fail282;
+        break Fail283;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consgrammar_elem_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, u_152));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/hiddens_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/hiddens_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/hiddens_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("hiddens_1_0");
-    Fail204:
+    Fail205:
     { 
       IStrategoTerm v_137 = null;
       IStrategoTerm u_137 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conshiddens_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail204;
+        break Fail205;
       u_137 = term.getSubterm(0);
       IStrategoList annos168 = term.getAnnotations();
       v_137 = annos168;
       term = a_27.invoke(context, u_137);
       if(term == null)
-        break Fail204;
+        break Fail205;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conshiddens_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, v_137));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/id_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/id_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/id_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("id_1_0");
-    Fail239:
+    Fail240:
     { 
       IStrategoTerm s_144 = null;
       IStrategoTerm r_144 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consid_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail239;
+        break Fail240;
       r_144 = term.getSubterm(0);
       IStrategoList annos195 = term.getAnnotations();
       s_144 = annos195;
       term = r_28.invoke(context, r_144);
       if(term == null)
-        break Fail239;
+        break Fail240;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consid_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, s_144));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/imp_section_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/imp_section_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/imp_section_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("imp_section_1_0");
-    Fail252:
+    Fail253:
     { 
       IStrategoTerm h_147 = null;
       IStrategoTerm e_147 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consimp_section_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail252;
+        break Fail253;
       e_147 = term.getSubterm(0);
       IStrategoList annos208 = term.getAnnotations();
       h_147 = annos208;
       term = e_29.invoke(context, e_147);
       if(term == null)
-        break Fail252;
+        break Fail253;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consimp_section_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, h_147));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/imports_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/imports_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/imports_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("imports_1_0");
-    Fail201:
+    Fail202:
     { 
       IStrategoTerm k_137 = null;
       IStrategoTerm j_137 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consimports_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail201;
+        break Fail202;
       j_137 = term.getSubterm(0);
       IStrategoList annos165 = term.getAnnotations();
       k_137 = annos165;
       term = w_26.invoke(context, j_137);
       if(term == null)
-        break Fail201;
+        break Fail202;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consimports_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, k_137));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/int_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/int_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/int_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("int_1_0");
-    Fail265:
+    Fail266:
     { 
       IStrategoTerm e_149 = null;
       IStrategoTerm d_149 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consint_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail265;
+        break Fail266;
       d_149 = term.getSubterm(0);
       IStrategoList annos220 = term.getAnnotations();
       e_149 = annos220;
       term = t_29.invoke(context, d_149);
       if(term == null)
-        break Fail265;
+        break Fail266;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consint_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, e_149));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/isect_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/isect_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/isect_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("isect_2_0");
-    Fail173:
+    Fail174:
     { 
       IStrategoTerm t_131 = null;
       IStrategoTerm q_131 = null;
       IStrategoTerm s_131 = null;
       IStrategoTerm v_131 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consisect_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail173;
+        break Fail174;
       q_131 = term.getSubterm(0);
       s_131 = term.getSubterm(1);
       IStrategoList annos146 = term.getAnnotations();
       t_131 = annos146;
       term = u_25.invoke(context, q_131);
       if(term == null)
-        break Fail173;
+        break Fail174;
       v_131 = term;
       term = v_25.invoke(context, s_131);
       if(term == null)
-        break Fail173;
+        break Fail174;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consisect_2, new IStrategoTerm[]{v_131, term}), checkListAnnos(termFactory, t_131));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("iter_1_0");
-    Fail224:
+    Fail225:
     { 
       IStrategoTerm z_142 = null;
       IStrategoTerm y_142 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consiter_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail224;
+        break Fail225;
       y_142 = term.getSubterm(0);
       IStrategoList annos186 = term.getAnnotations();
       z_142 = annos186;
       term = d_28.invoke(context, y_142);
       if(term == null)
-        break Fail224;
+        break Fail225;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consiter_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, z_142));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_sep_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_sep_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_sep_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("iter_sep_2_0");
-    Fail222:
+    Fail223:
     { 
       IStrategoTerm s_142 = null;
       IStrategoTerm q_142 = null;
       IStrategoTerm r_142 = null;
       IStrategoTerm t_142 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consiter_sep_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail222;
+        break Fail223;
       q_142 = term.getSubterm(0);
       r_142 = term.getSubterm(1);
       IStrategoList annos184 = term.getAnnotations();
       s_142 = annos184;
       term = a_28.invoke(context, q_142);
       if(term == null)
-        break Fail222;
+        break Fail223;
       t_142 = term;
       term = b_28.invoke(context, r_142);
       if(term == null)
-        break Fail222;
+        break Fail223;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consiter_sep_2, new IStrategoTerm[]{t_142, term}), checkListAnnos(termFactory, s_142));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_star_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_star_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_star_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("iter_star_1_0");
-    Fail223:
+    Fail224:
     { 
       IStrategoTerm w_142 = null;
       IStrategoTerm v_142 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consiter_star_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail223;
+        break Fail224;
       v_142 = term.getSubterm(0);
       IStrategoList annos185 = term.getAnnotations();
       w_142 = annos185;
       term = c_28.invoke(context, v_142);
       if(term == null)
-        break Fail223;
+        break Fail224;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consiter_star_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, w_142));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_star_sep_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_star_sep_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/iter_star_sep_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("iter_star_sep_2_0");
-    Fail221:
+    Fail222:
     { 
       IStrategoTerm n_142 = null;
       IStrategoTerm l_142 = null;
       IStrategoTerm m_142 = null;
       IStrategoTerm o_142 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consiter_star_sep_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail221;
+        break Fail222;
       l_142 = term.getSubterm(0);
       m_142 = term.getSubterm(1);
       IStrategoList annos183 = term.getAnnotations();
       n_142 = annos183;
       term = y_27.invoke(context, l_142);
       if(term == null)
-        break Fail221;
+        break Fail222;
       o_142 = term;
       term = z_27.invoke(context, m_142);
       if(term == null)
-        break Fail221;
+        break Fail222;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consiter_star_sep_2, new IStrategoTerm[]{o_142, term}), checkListAnnos(termFactory, n_142));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/kernel_start_symbols_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/kernel_start_symbols_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/kernel_start_symbols_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("kernel_start_symbols_1_0");
-    Fail249:
+    Fail250:
     { 
       IStrategoTerm r_146 = null;
       IStrategoTerm q_146 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conskernel_start_symbols_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail249;
+        break Fail250;
       q_146 = term.getSubterm(0);
       IStrategoList annos205 = term.getAnnotations();
       r_146 = annos205;
       term = b_29.invoke(context, q_146);
       if(term == null)
-        break Fail249;
+        break Fail250;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conskernel_start_symbols_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, r_146));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/label_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/label_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/label_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("label_2_0");
-    Fail212:
+    Fail213:
     { 
       IStrategoTerm c_139 = null;
       IStrategoTerm a_139 = null;
       IStrategoTerm b_139 = null;
       IStrategoTerm d_139 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslabel_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail212;
+        break Fail213;
       a_139 = term.getSubterm(0);
       b_139 = term.getSubterm(1);
       IStrategoList annos174 = term.getAnnotations();
       c_139 = annos174;
       term = k_27.invoke(context, a_139);
       if(term == null)
-        break Fail212;
+        break Fail213;
       d_139 = term;
       term = l_27.invoke(context, b_139);
       if(term == null)
-        break Fail212;
+        break Fail213;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conslabel_2, new IStrategoTerm[]{d_139, term}), checkListAnnos(termFactory, c_139));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/label__start_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/label__start_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/label__start_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail181:
+    Fail182:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslabel_start_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail181;
+        break Fail182;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/layout_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/layout_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/layout_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail226:
+    Fail227:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslayout_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail226;
+        break Fail227;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/left_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/left_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/left_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail198:
+    Fail199:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consleft_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail198;
+        break Fail199;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lex_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lex_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lex_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("lex_1_0");
-    Fail228:
+    Fail229:
     { 
       IStrategoTerm k_143 = null;
       IStrategoTerm j_143 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslex_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail228;
+        break Fail229;
       j_143 = term.getSubterm(0);
       IStrategoList annos189 = term.getAnnotations();
       k_143 = annos189;
       term = g_28.invoke(context, j_143);
       if(term == null)
-        break Fail228;
+        break Fail229;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conslex_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, k_143));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_priorities_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_priorities_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_priorities_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("lexical_priorities_1_0");
-    Fail244:
+    Fail245:
     { 
       IStrategoTerm y_145 = null;
       IStrategoTerm x_145 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslexical_priorities_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail244;
+        break Fail245;
       x_145 = term.getSubterm(0);
       IStrategoList annos200 = term.getAnnotations();
       y_145 = annos200;
       term = w_28.invoke(context, x_145);
       if(term == null)
-        break Fail244;
+        break Fail245;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conslexical_priorities_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, y_145));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_restrictions_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_restrictions_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_restrictions_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("lexical_restrictions_1_0");
-    Fail242:
+    Fail243:
     { 
       IStrategoTerm g_145 = null;
       IStrategoTerm f_145 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslexical_restrictions_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail242;
+        break Fail243;
       f_145 = term.getSubterm(0);
       IStrategoList annos198 = term.getAnnotations();
       g_145 = annos198;
       term = u_28.invoke(context, f_145);
       if(term == null)
-        break Fail242;
+        break Fail243;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conslexical_restrictions_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, g_145));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_start_symbols_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_start_symbols_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_start_symbols_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("lexical_start_symbols_1_0");
-    Fail248:
+    Fail249:
     { 
       IStrategoTerm o_146 = null;
       IStrategoTerm n_146 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslexical_start_symbols_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail248;
+        break Fail249;
       n_146 = term.getSubterm(0);
       IStrategoList annos204 = term.getAnnotations();
       o_146 = annos204;
       term = a_29.invoke(context, n_146);
       if(term == null)
-        break Fail248;
+        break Fail249;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conslexical_start_symbols_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, o_146));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_syntax_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_syntax_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_syntax_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("lexical_syntax_1_0");
-    Fail256:
+    Fail257:
     { 
       IStrategoTerm a_148 = null;
       IStrategoTerm z_147 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslexical_syntax_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail256;
+        break Fail257;
       z_147 = term.getSubterm(0);
       IStrategoList annos212 = term.getAnnotations();
       a_148 = annos212;
       term = i_29.invoke(context, z_147);
       if(term == null)
-        break Fail256;
+        break Fail257;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conslexical_syntax_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, a_148));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_variables_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_variables_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lexical_variables_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("lexical_variables_1_0");
-    Fail253:
+    Fail254:
     { 
       IStrategoTerm k_147 = null;
       IStrategoTerm j_147 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslexical_variables_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail253;
+        break Fail254;
       j_147 = term.getSubterm(0);
       IStrategoList annos209 = term.getAnnotations();
       k_147 = annos209;
       term = f_29.invoke(context, j_147);
       if(term == null)
-        break Fail253;
+        break Fail254;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conslexical_variables_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, k_147));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted14.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted14.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted14.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,14 +14,14 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail292:
+    Fail293:
     { 
       term = extract_sdf_0_0.instance.invoke(context, term);
       if(term == null)
-        break Fail292;
+        break Fail293;
       term = fold_conc_grammars_0_0.instance.invoke(context, term);
       if(term == null)
-        break Fail292;
+        break Fail293;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted15.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted15.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted15.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,11 +14,11 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail289:
+    Fail290:
     { 
       term = extract_1_0.instance.invoke(context, term, lifted19.instance);
       if(term == null)
-        break Fail289;
+        break Fail290;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted19.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted19.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted19.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -15,23 +15,23 @@
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
     ITermFactory termFactory = context.getFactory();
-    Fail290:
+    Fail291:
     { 
-      IStrategoTerm term5 = term;
+      IStrategoTerm term6 = term;
       IStrategoConstructor cons5 = term.getTermType() == IStrategoTerm.APPL ? ((IStrategoAppl)term).getConstructor() : null;
-      Success6:
+      Success7:
       { 
         if(cons5 == extraction._consgrammar_elem_1)
         { 
-          Fail291:
+          Fail292:
           { 
             IStrategoTerm t_154 = null;
             t_154 = term.getSubterm(0);
             term = t_154;
             if(true)
-              break Success6;
+              break Success7;
           }
-          term = term5;
+          term = term6;
         }
         if(cons5 == extraction._constransformation_elem_1)
         { 
@@ -39,11 +39,11 @@
           y_154 = term.getSubterm(0);
           term = comp_desugarings_to_sdf_0_0.instance.invoke(context, y_154);
           if(term == null)
-            break Fail290;
+            break Fail291;
         }
         else
         { 
-          break Fail290;
+          break Fail291;
         }
       }
       term = (IStrategoTerm)termFactory.makeListCons(term, (IStrategoList)extraction.constNil0);

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted22.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted22.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted22.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,11 +14,11 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail287:
+    Fail288:
     { 
       term = extract_1_0.instance.invoke(context, term, lifted23.instance);
       if(term == null)
-        break Fail287;
+        break Fail288;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted23.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted23.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted23.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -15,15 +15,15 @@
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
     ITermFactory termFactory = context.getFactory();
-    Fail288:
+    Fail289:
     { 
       IStrategoTerm d_155 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._constransformation_elem_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail288;
+        break Fail289;
       d_155 = term.getSubterm(0);
       term = try_1_0.instance.invoke(context, d_155, comp_desugarings_to_str_0_0.instance);
       if(term == null)
-        break Fail288;
+        break Fail289;
       term = (IStrategoTerm)termFactory.makeListCons(term, (IStrategoList)extraction.constNil0);
       if(true)
         return term;

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted6.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted6.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted6.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,11 +14,11 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail294:
+    Fail295:
     { 
       term = filter_tree_1_0.instance.invoke(context, term, g_15);
       if(term == null)
-        break Fail294;
+        break Fail295;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted9.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted9.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifted9.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,11 +14,11 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail293:
+    Fail294:
     { 
       term = extract_1_0.instance.invoke(context, term, j_15);
       if(term == null)
-        break Fail293;
+        break Fail294;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifting_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifting_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lifting_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("lifting_1_0");
-    Fail217:
+    Fail218:
     { 
       IStrategoTerm s_140 = null;
       IStrategoTerm o_140 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslifting_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail217;
+        break Fail218;
       o_140 = term.getSubterm(0);
       IStrategoList annos179 = term.getAnnotations();
       s_140 = annos179;
       term = r_27.invoke(context, o_140);
       if(term == null)
-        break Fail217;
+        break Fail218;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conslifting_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, s_140));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lit_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lit_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/lit_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("lit_1_0");
-    Fail214:
+    Fail215:
     { 
       IStrategoTerm j_139 = null;
       IStrategoTerm i_139 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conslit_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail214;
+        break Fail215;
       i_139 = term.getSubterm(0);
       IStrategoList annos176 = term.getAnnotations();
       j_139 = annos176;
       term = n_27.invoke(context, i_139);
       if(term == null)
-        break Fail214;
+        break Fail215;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conslit_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, j_139));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/main$S$T$R_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/main$S$T$R_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/main$S$T$R_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -15,11 +15,11 @@
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
     context.push("mainSTR_0_0");
-    Fail21:
+    Fail22:
     { 
       term = io_wrap_1_0.instance.invoke(context, term, extract_str_0_0.instance);
       if(term == null)
-        break Fail21;
+        break Fail22;
       context.popOnSuccess();
       if(true)
         return term;

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/main_sdf_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/main_sdf_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/main_sdf_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -15,11 +15,11 @@
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
     context.push("main_sdf_0_0");
-    Fail16:
+    Fail17:
     { 
       term = io_wrap_1_0.instance.invoke(context, term, lifted14.instance);
       if(term == null)
-        break Fail16;
+        break Fail17;
       context.popOnSuccess();
       if(true)
         return term;

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/module_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/module_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/module_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("module_1_0");
-    Fail200:
+    Fail201:
     { 
       IStrategoTerm h_137 = null;
       IStrategoTerm g_137 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consmodule_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail200;
+        break Fail201;
       g_137 = term.getSubterm(0);
       IStrategoList annos164 = term.getAnnotations();
       h_137 = annos164;
       term = v_26.invoke(context, g_137);
       if(term == null)
-        break Fail200;
+        break Fail201;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consmodule_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, h_137));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/module_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/module_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/module_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("module_3_0");
-    Fail206:
+    Fail207:
     { 
       IStrategoTerm g_138 = null;
       IStrategoTerm d_138 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm h_138 = null;
       IStrategoTerm i_138 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consmodule_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail206;
+        break Fail207;
       d_138 = term.getSubterm(0);
       e_138 = term.getSubterm(1);
       f_138 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       g_138 = annos170;
       term = c_27.invoke(context, d_138);
       if(term == null)
-        break Fail206;
+        break Fail207;
       h_138 = term;
       term = d_27.invoke(context, e_138);
       if(term == null)
-        break Fail206;
+        break Fail207;
       i_138 = term;
       term = e_27.invoke(context, f_138);
       if(term == null)
-        break Fail206;
+        break Fail207;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consmodule_3, new IStrategoTerm[]{h_138, i_138, term}), checkListAnnos(termFactory, g_138));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/natural_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/natural_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/natural_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("natural_1_0");
-    Fail269:
+    Fail270:
     { 
       IStrategoTerm u_149 = null;
       IStrategoTerm t_149 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consnatural_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail269;
+        break Fail270;
       t_149 = term.getSubterm(0);
       IStrategoList annos224 = term.getAnnotations();
       u_149 = annos224;
       term = z_29.invoke(context, t_149);
       if(term == null)
-        break Fail269;
+        break Fail270;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consnatural_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, u_149));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/negative_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/negative_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/negative_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("negative_1_0");
-    Fail267:
+    Fail268:
     { 
       IStrategoTerm o_149 = null;
       IStrategoTerm n_149 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consnegative_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail267;
+        break Fail268;
       n_149 = term.getSubterm(0);
       IStrategoList annos222 = term.getAnnotations();
       o_149 = annos222;
       term = x_29.invoke(context, n_149);
       if(term == null)
-        break Fail267;
+        break Fail268;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consnegative_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, o_149));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/no_attrs_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/no_attrs_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/no_attrs_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail232:
+    Fail233:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consno_attrs_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail232;
+        break Fail233;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/non_assoc_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/non_assoc_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/non_assoc_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail196:
+    Fail197:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consnon_assoc_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail196;
+        break Fail197;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/non_transitive_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/non_transitive_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/non_transitive_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("non_transitive_1_0");
-    Fail192:
+    Fail193:
     { 
       IStrategoTerm n_136 = null;
       IStrategoTerm m_136 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consnon_transitive_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail192;
+        break Fail193;
       m_136 = term.getSubterm(0);
       IStrategoList annos160 = term.getAnnotations();
       n_136 = annos160;
       term = p_26.invoke(context, m_136);
       if(term == null)
-        break Fail192;
+        break Fail193;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consnon_transitive_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, n_136));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/numeric_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/numeric_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/numeric_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("numeric_1_0");
-    Fail186:
+    Fail187:
     { 
       IStrategoTerm p_134 = null;
       IStrategoTerm o_134 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consnumeric_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail186;
+        break Fail187;
       o_134 = term.getSubterm(0);
       IStrategoList annos154 = term.getAnnotations();
       p_134 = annos154;
       term = g_26.invoke(context, o_134);
       if(term == null)
-        break Fail186;
+        break Fail187;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consnumeric_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, p_134));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/opt_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/opt_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/opt_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("opt_1_0");
-    Fail225:
+    Fail226:
     { 
       IStrategoTerm d_143 = null;
       IStrategoTerm c_143 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consopt_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail225;
+        break Fail226;
       c_143 = term.getSubterm(0);
       IStrategoList annos187 = term.getAnnotations();
       d_143 = annos187;
       term = e_28.invoke(context, c_143);
       if(term == null)
-        break Fail225;
+        break Fail226;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consopt_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, d_143));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/parameterized_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/parameterized_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/parameterized_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("parameterized_2_0");
-    Fail202:
+    Fail203:
     { 
       IStrategoTerm o_137 = null;
       IStrategoTerm m_137 = null;
       IStrategoTerm n_137 = null;
       IStrategoTerm p_137 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consparameterized_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail202;
+        break Fail203;
       m_137 = term.getSubterm(0);
       n_137 = term.getSubterm(1);
       IStrategoList annos166 = term.getAnnotations();
       o_137 = annos166;
       term = x_26.invoke(context, m_137);
       if(term == null)
-        break Fail202;
+        break Fail203;
       p_137 = term;
       term = y_26.invoke(context, n_137);
       if(term == null)
-        break Fail202;
+        break Fail203;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consparameterized_2, new IStrategoTerm[]{p_137, term}), checkListAnnos(termFactory, o_137));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/parameterized_sort_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/parameterized_sort_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/parameterized_sort_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("parameterized_sort_2_0");
-    Fail215:
+    Fail216:
     { 
       IStrategoTerm c_140 = null;
       IStrategoTerm x_139 = null;
       IStrategoTerm y_139 = null;
       IStrategoTerm d_140 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consparameterized_sort_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail215;
+        break Fail216;
       x_139 = term.getSubterm(0);
       y_139 = term.getSubterm(1);
       IStrategoList annos177 = term.getAnnotations();
       c_140 = annos177;
       term = o_27.invoke(context, x_139);
       if(term == null)
-        break Fail215;
+        break Fail216;
       d_140 = term;
       term = p_27.invoke(context, y_139);
       if(term == null)
-        break Fail215;
+        break Fail216;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consparameterized_sort_2, new IStrategoTerm[]{d_140, term}), checkListAnnos(termFactory, c_140));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/placeholder_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/placeholder_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/placeholder_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("placeholder_1_0");
-    Fail261:
+    Fail262:
     { 
       IStrategoTerm q_148 = null;
       IStrategoTerm p_148 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consplaceholder_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail261;
+        break Fail262;
       p_148 = term.getSubterm(0);
       IStrategoList annos216 = term.getAnnotations();
       q_148 = annos216;
       term = o_29.invoke(context, p_148);
       if(term == null)
-        break Fail261;
+        break Fail262;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consplaceholder_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, q_148));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/positive_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/positive_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/positive_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("positive_1_0");
-    Fail268:
+    Fail269:
     { 
       IStrategoTerm r_149 = null;
       IStrategoTerm q_149 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conspositive_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail268;
+        break Fail269;
       q_149 = term.getSubterm(0);
       IStrategoList annos223 = term.getAnnotations();
       r_149 = annos223;
       term = y_29.invoke(context, q_149);
       if(term == null)
-        break Fail268;
+        break Fail269;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conspositive_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, r_149));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prefer_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prefer_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prefer_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail235:
+    Fail236:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consprefer_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail235;
+        break Fail236;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prefix_fun_4_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prefix_fun_4_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prefix_fun_4_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("prefix_fun_4_0");
-    Fail230:
+    Fail231:
     { 
       IStrategoTerm v_143 = null;
       IStrategoTerm q_143 = null;
@@ -27,7 +27,7 @@
       IStrategoTerm x_143 = null;
       IStrategoTerm z_143 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consprefix_fun_4 != ((IStrategoAppl)term).getConstructor())
-        break Fail230;
+        break Fail231;
       q_143 = term.getSubterm(0);
       r_143 = term.getSubterm(1);
       t_143 = term.getSubterm(2);
@@ -36,19 +36,19 @@
       v_143 = annos191;
       term = i_28.invoke(context, q_143);
       if(term == null)
-        break Fail230;
+        break Fail231;
       w_143 = term;
       term = j_28.invoke(context, r_143);
       if(term == null)
-        break Fail230;
+        break Fail231;
       x_143 = term;
       term = k_28.invoke(context, t_143);
       if(term == null)
-        break Fail230;
+        break Fail231;
       z_143 = term;
       term = l_28.invoke(context, u_143);
       if(term == null)
-        break Fail230;
+        break Fail231;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consprefix_fun_4, new IStrategoTerm[]{w_143, x_143, z_143, term}), checkListAnnos(termFactory, v_143));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/present_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/present_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/present_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("present_1_0");
-    Fail177:
+    Fail178:
     { 
       IStrategoTerm o_132 = null;
       IStrategoTerm m_132 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conspresent_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail177;
+        break Fail178;
       m_132 = term.getSubterm(0);
       IStrategoList annos150 = term.getAnnotations();
       o_132 = annos150;
       term = a_26.invoke(context, m_132);
       if(term == null)
-        break Fail177;
+        break Fail178;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conspresent_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, o_132));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/priorities_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/priorities_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/priorities_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("priorities_1_0");
-    Fail251:
+    Fail252:
     { 
       IStrategoTerm c_147 = null;
       IStrategoTerm b_147 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conspriorities_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail251;
+        break Fail252;
       b_147 = term.getSubterm(0);
       IStrategoList annos207 = term.getAnnotations();
       c_147 = annos207;
       term = d_29.invoke(context, b_147);
       if(term == null)
-        break Fail251;
+        break Fail252;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conspriorities_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, c_147));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prod_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prod_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prod_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("prod_3_0");
-    Fail231:
+    Fail232:
     { 
       IStrategoTerm e_144 = null;
       IStrategoTerm b_144 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm g_144 = null;
       IStrategoTerm h_144 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consprod_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail231;
+        break Fail232;
       b_144 = term.getSubterm(0);
       c_144 = term.getSubterm(1);
       d_144 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       e_144 = annos192;
       term = m_28.invoke(context, b_144);
       if(term == null)
-        break Fail231;
+        break Fail232;
       g_144 = term;
       term = n_28.invoke(context, c_144);
       if(term == null)
-        break Fail231;
+        break Fail232;
       h_144 = term;
       term = o_28.invoke(context, d_144);
       if(term == null)
-        break Fail231;
+        break Fail232;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consprod_3, new IStrategoTerm[]{g_144, h_144, term}), checkListAnnos(termFactory, e_144));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prods_group_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prods_group_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/prods_group_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("prods_group_1_0");
-    Fail190:
+    Fail191:
     { 
       IStrategoTerm h_136 = null;
       IStrategoTerm f_136 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consprods_group_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail190;
+        break Fail191;
       f_136 = term.getSubterm(0);
       IStrategoList annos158 = term.getAnnotations();
       h_136 = annos158;
       term = n_26.invoke(context, f_136);
       if(term == null)
-        break Fail190;
+        break Fail191;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consprods_group_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, h_136));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/production_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/production_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/production_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("production_2_0");
-    Fail207:
+    Fail208:
     { 
       IStrategoTerm m_138 = null;
       IStrategoTerm k_138 = null;
       IStrategoTerm l_138 = null;
       IStrategoTerm n_138 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consproduction_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail207;
+        break Fail208;
       k_138 = term.getSubterm(0);
       l_138 = term.getSubterm(1);
       IStrategoList annos171 = term.getAnnotations();
       m_138 = annos171;
       term = f_27.invoke(context, k_138);
       if(term == null)
-        break Fail207;
+        break Fail208;
       n_138 = term;
       term = g_27.invoke(context, l_138);
       if(term == null)
-        break Fail207;
+        break Fail208;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consproduction_2, new IStrategoTerm[]{n_138, term}), checkListAnnos(termFactory, m_138));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/quoted_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/quoted_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/quoted_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("quoted_1_0");
-    Fail169:
+    Fail170:
     { 
       IStrategoTerm t_130 = null;
       IStrategoTerm r_130 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consquoted_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail169;
+        break Fail170;
       r_130 = term.getSubterm(0);
       IStrategoList annos142 = term.getAnnotations();
       t_130 = annos142;
       term = p_25.invoke(context, r_130);
       if(term == null)
-        break Fail169;
+        break Fail170;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consquoted_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, t_130));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/quoted_fun_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/quoted_fun_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/quoted_fun_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("quoted_fun_1_0");
-    Fail170:
+    Fail171:
     { 
       IStrategoTerm w_130 = null;
       IStrategoTerm v_130 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consquoted_fun_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail170;
+        break Fail171;
       v_130 = term.getSubterm(0);
       IStrategoList annos143 = term.getAnnotations();
       w_130 = annos143;
       term = q_25.invoke(context, v_130);
       if(term == null)
-        break Fail170;
+        break Fail171;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consquoted_fun_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, w_130));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/range_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/range_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/range_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("range_2_0");
-    Fail180:
+    Fail181:
     { 
       IStrategoTerm l_133 = null;
       IStrategoTerm j_133 = null;
       IStrategoTerm k_133 = null;
       IStrategoTerm m_133 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consrange_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail180;
+        break Fail181;
       j_133 = term.getSubterm(0);
       k_133 = term.getSubterm(1);
       IStrategoList annos152 = term.getAnnotations();
       l_133 = annos152;
       term = d_26.invoke(context, j_133);
       if(term == null)
-        break Fail180;
+        break Fail181;
       m_133 = term;
       term = e_26.invoke(context, k_133);
       if(term == null)
-        break Fail180;
+        break Fail181;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consrange_2, new IStrategoTerm[]{m_133, term}), checkListAnnos(termFactory, l_133));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/real_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/real_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/real_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("real_1_0");
-    Fail264:
+    Fail265:
     { 
       IStrategoTerm b_149 = null;
       IStrategoTerm a_149 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consreal_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail264;
+        break Fail265;
       a_149 = term.getSubterm(0);
       IStrategoList annos219 = term.getAnnotations();
       b_149 = annos219;
       term = s_29.invoke(context, a_149);
       if(term == null)
-        break Fail264;
+        break Fail265;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consreal_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, b_149));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/real_con_3_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/real_con_3_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/real_con_3_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,7 +16,7 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("real_con_3_0");
-    Fail266:
+    Fail267:
     { 
       IStrategoTerm j_149 = null;
       IStrategoTerm g_149 = null;
@@ -25,7 +25,7 @@
       IStrategoTerm k_149 = null;
       IStrategoTerm l_149 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consreal_con_3 != ((IStrategoAppl)term).getConstructor())
-        break Fail266;
+        break Fail267;
       g_149 = term.getSubterm(0);
       h_149 = term.getSubterm(1);
       i_149 = term.getSubterm(2);
@@ -33,15 +33,15 @@
       j_149 = annos221;
       term = u_29.invoke(context, g_149);
       if(term == null)
-        break Fail266;
+        break Fail267;
       k_149 = term;
       term = v_29.invoke(context, h_149);
       if(term == null)
-        break Fail266;
+        break Fail267;
       l_149 = term;
       term = w_29.invoke(context, i_149);
       if(term == null)
-        break Fail266;
+        break Fail267;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consreal_con_3, new IStrategoTerm[]{k_149, l_149, term}), checkListAnnos(termFactory, j_149));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/reject_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/reject_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/reject_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail236:
+    Fail237:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consreject_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail236;
+        break Fail237;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/renamed_module_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/renamed_module_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/renamed_module_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("renamed_module_2_0");
-    Fail199:
+    Fail200:
     { 
       IStrategoTerm d_137 = null;
       IStrategoTerm a_137 = null;
       IStrategoTerm b_137 = null;
       IStrategoTerm e_137 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consrenamed_module_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail199;
+        break Fail200;
       a_137 = term.getSubterm(0);
       b_137 = term.getSubterm(1);
       IStrategoList annos163 = term.getAnnotations();
       d_137 = annos163;
       term = t_26.invoke(context, a_137);
       if(term == null)
-        break Fail199;
+        break Fail200;
       e_137 = term;
       term = u_26.invoke(context, b_137);
       if(term == null)
-        break Fail199;
+        break Fail200;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consrenamed_module_2, new IStrategoTerm[]{e_137, term}), checkListAnnos(termFactory, d_137));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/renamings_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/renamings_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/renamings_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("renamings_1_0");
-    Fail209:
+    Fail210:
     { 
       IStrategoTerm y_138 = null;
       IStrategoTerm x_138 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consrenamings_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail209;
+        break Fail210;
       x_138 = term.getSubterm(0);
       IStrategoList annos173 = term.getAnnotations();
       y_138 = annos173;
       term = j_27.invoke(context, x_138);
       if(term == null)
-        break Fail209;
+        break Fail210;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consrenamings_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, y_138));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/restrictions_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/restrictions_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/restrictions_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("restrictions_1_0");
-    Fail246:
+    Fail247:
     { 
       IStrategoTerm f_146 = null;
       IStrategoTerm e_146 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consrestrictions_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail246;
+        break Fail247;
       e_146 = term.getSubterm(0);
       IStrategoList annos202 = term.getAnnotations();
       f_146 = annos202;
       term = y_28.invoke(context, e_146);
       if(term == null)
-        break Fail246;
+        break Fail247;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consrestrictions_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, f_146));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/right_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/right_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/right_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail197:
+    Fail198:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consright_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail197;
+        break Fail198;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/seq_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/seq_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/seq_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("seq_2_0");
-    Fail166:
+    Fail167:
     { 
       IStrategoTerm d_130 = null;
       IStrategoTerm a_130 = null;
       IStrategoTerm b_130 = null;
       IStrategoTerm e_130 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consseq_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail166;
+        break Fail167;
       a_130 = term.getSubterm(0);
       b_130 = term.getSubterm(1);
       IStrategoList annos139 = term.getAnnotations();
       d_130 = annos139;
       term = l_25.invoke(context, a_130);
       if(term == null)
-        break Fail166;
+        break Fail167;
       e_130 = term;
       term = m_25.invoke(context, b_130);
       if(term == null)
-        break Fail166;
+        break Fail167;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consseq_2, new IStrategoTerm[]{e_130, term}), checkListAnnos(termFactory, d_130));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/short_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/short_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/short_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("short_1_0");
-    Fail185:
+    Fail186:
     { 
       IStrategoTerm s_133 = null;
       IStrategoTerm p_133 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consshort_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail185;
+        break Fail186;
       p_133 = term.getSubterm(0);
       IStrategoList annos153 = term.getAnnotations();
       s_133 = annos153;
       term = f_26.invoke(context, p_133);
       if(term == null)
-        break Fail185;
+        break Fail186;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consshort_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, s_133));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/simple_charclass_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/simple_charclass_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/simple_charclass_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("simple_charclass_1_0");
-    Fail176:
+    Fail177:
     { 
       IStrategoTerm h_132 = null;
       IStrategoTerm g_132 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conssimple_charclass_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail176;
+        break Fail177;
       g_132 = term.getSubterm(0);
       IStrategoList annos149 = term.getAnnotations();
       h_132 = annos149;
       term = z_25.invoke(context, g_132);
       if(term == null)
-        break Fail176;
+        break Fail177;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conssimple_charclass_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, h_132));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/simple_group_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/simple_group_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/simple_group_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("simple_group_1_0");
-    Fail191:
+    Fail192:
     { 
       IStrategoTerm k_136 = null;
       IStrategoTerm j_136 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conssimple_group_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail191;
+        break Fail192;
       j_136 = term.getSubterm(0);
       IStrategoList annos159 = term.getAnnotations();
       k_136 = annos159;
       term = o_26.invoke(context, j_136);
       if(term == null)
-        break Fail191;
+        break Fail192;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conssimple_group_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, k_136));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/single_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/single_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/single_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("single_1_0");
-    Fail165:
+    Fail166:
     { 
       IStrategoTerm x_129 = null;
       IStrategoTerm v_129 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conssingle_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail165;
+        break Fail166;
       v_129 = term.getSubterm(0);
       IStrategoList annos138 = term.getAnnotations();
       x_129 = annos138;
       term = k_25.invoke(context, v_129);
       if(term == null)
-        break Fail165;
+        break Fail166;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conssingle_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, x_129));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/sort_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/sort_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/sort_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("sort_1_0");
-    Fail216:
+    Fail217:
     { 
       IStrategoTerm j_140 = null;
       IStrategoTerm i_140 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conssort_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail216;
+        break Fail217;
       i_140 = term.getSubterm(0);
       IStrategoList annos178 = term.getAnnotations();
       j_140 = annos178;
       term = q_27.invoke(context, i_140);
       if(term == null)
-        break Fail216;
+        break Fail217;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conssort_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, j_140));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/sorts_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/sorts_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/sorts_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("sorts_1_0");
-    Fail250:
+    Fail251:
     { 
       IStrategoTerm z_146 = null;
       IStrategoTerm v_146 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conssorts_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail250;
+        break Fail251;
       v_146 = term.getSubterm(0);
       IStrategoList annos206 = term.getAnnotations();
       z_146 = annos206;
       term = c_29.invoke(context, v_146);
       if(term == null)
-        break Fail250;
+        break Fail251;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conssorts_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, z_146));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/start_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/start_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/start_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail211:
+    Fail212:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consstart_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail211;
+        break Fail212;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/strategy_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/strategy_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/strategy_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("strategy_2_0");
-    Fail218:
+    Fail219:
     { 
       IStrategoTerm w_140 = null;
       IStrategoTerm u_140 = null;
       IStrategoTerm v_140 = null;
       IStrategoTerm x_140 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consstrategy_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail218;
+        break Fail219;
       u_140 = term.getSubterm(0);
       v_140 = term.getSubterm(1);
       IStrategoList annos180 = term.getAnnotations();
       w_140 = annos180;
       term = s_27.invoke(context, u_140);
       if(term == null)
-        break Fail218;
+        break Fail219;
       x_140 = term;
       term = t_27.invoke(context, v_140);
       if(term == null)
-        break Fail218;
+        break Fail219;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consstrategy_2, new IStrategoTerm[]{x_140, term}), checkListAnnos(termFactory, w_140));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/symbol_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/symbol_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/symbol_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("symbol_2_0");
-    Fail208:
+    Fail209:
     { 
       IStrategoTerm u_138 = null;
       IStrategoTerm p_138 = null;
       IStrategoTerm q_138 = null;
       IStrategoTerm v_138 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conssymbol_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail208;
+        break Fail209;
       p_138 = term.getSubterm(0);
       q_138 = term.getSubterm(1);
       IStrategoList annos172 = term.getAnnotations();
       u_138 = annos172;
       term = h_27.invoke(context, p_138);
       if(term == null)
-        break Fail208;
+        break Fail209;
       v_138 = term;
       term = i_27.invoke(context, q_138);
       if(term == null)
-        break Fail208;
+        break Fail209;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conssymbol_2, new IStrategoTerm[]{v_138, term}), checkListAnnos(termFactory, u_138));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/syntax_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/syntax_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/syntax_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("syntax_1_0");
-    Fail257:
+    Fail258:
     { 
       IStrategoTerm d_148 = null;
       IStrategoTerm c_148 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conssyntax_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail257;
+        break Fail258;
       c_148 = term.getSubterm(0);
       IStrategoList annos213 = term.getAnnotations();
       d_148 = annos213;
       term = j_29.invoke(context, c_148);
       if(term == null)
-        break Fail257;
+        break Fail258;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conssyntax_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, d_148));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/term_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/term_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/term_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("term_1_0");
-    Fail240:
+    Fail241:
     { 
       IStrategoTerm v_144 = null;
       IStrategoTerm u_144 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consterm_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail240;
+        break Fail241;
       u_144 = term.getSubterm(0);
       IStrategoList annos196 = term.getAnnotations();
       v_144 = annos196;
       term = s_28.invoke(context, u_144);
       if(term == null)
-        break Fail240;
+        break Fail241;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consterm_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, v_144));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/top_0_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/top_0_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/top_0_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -14,10 +14,10 @@
 
   @Override public IStrategoTerm invoke(Context context, IStrategoTerm term)
   { 
-    Fail184:
+    Fail185:
     { 
       if(term.getTermType() != IStrategoTerm.APPL || extraction._constop_0 != ((IStrategoAppl)term).getConstructor())
-        break Fail184;
+        break Fail185;
       if(true)
         return term;
     }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/transformation_elem_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/transformation_elem_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/transformation_elem_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("transformation_elem_1_0");
-    Fail281:
+    Fail282:
     { 
       IStrategoTerm n_152 = null;
       IStrategoTerm j_152 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._constransformation_elem_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail281;
+        break Fail282;
       j_152 = term.getSubterm(0);
       IStrategoList annos236 = term.getAnnotations();
       n_152 = annos236;
       term = u_30.invoke(context, j_152);
       if(term == null)
-        break Fail281;
+        break Fail282;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._constransformation_elem_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, n_152));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/tuple_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/tuple_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/tuple_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("tuple_2_0");
-    Fail220:
+    Fail221:
     { 
       IStrategoTerm w_141 = null;
       IStrategoTerm t_141 = null;
       IStrategoTerm v_141 = null;
       IStrategoTerm i_142 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._constuple_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail220;
+        break Fail221;
       t_141 = term.getSubterm(0);
       v_141 = term.getSubterm(1);
       IStrategoList annos182 = term.getAnnotations();
       w_141 = annos182;
       term = w_27.invoke(context, t_141);
       if(term == null)
-        break Fail220;
+        break Fail221;
       i_142 = term;
       term = x_27.invoke(context, v_141);
       if(term == null)
-        break Fail220;
+        break Fail221;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._constuple_2, new IStrategoTerm[]{i_142, term}), checkListAnnos(termFactory, w_141));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/union_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/union_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/union_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("union_2_0");
-    Fail172:
+    Fail173:
     { 
       IStrategoTerm h_131 = null;
       IStrategoTerm e_131 = null;
       IStrategoTerm g_131 = null;
       IStrategoTerm j_131 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consunion_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail172;
+        break Fail173;
       e_131 = term.getSubterm(0);
       g_131 = term.getSubterm(1);
       IStrategoList annos145 = term.getAnnotations();
       h_131 = annos145;
       term = s_25.invoke(context, e_131);
       if(term == null)
-        break Fail172;
+        break Fail173;
       j_131 = term;
       term = t_25.invoke(context, g_131);
       if(term == null)
-        break Fail172;
+        break Fail173;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consunion_2, new IStrategoTerm[]{j_131, term}), checkListAnnos(termFactory, h_131));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unparameterized_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unparameterized_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unparameterized_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("unparameterized_1_0");
-    Fail203:
+    Fail204:
     { 
       IStrategoTerm s_137 = null;
       IStrategoTerm r_137 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consunparameterized_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail203;
+        break Fail204;
       r_137 = term.getSubterm(0);
       IStrategoList annos167 = term.getAnnotations();
       s_137 = annos167;
       term = z_26.invoke(context, r_137);
       if(term == null)
-        break Fail203;
+        break Fail204;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consunparameterized_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, s_137));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unquoted_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unquoted_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unquoted_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("unquoted_1_0");
-    Fail168:
+    Fail169:
     { 
       IStrategoTerm m_130 = null;
       IStrategoTerm k_130 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consunquoted_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail168;
+        break Fail169;
       k_130 = term.getSubterm(0);
       IStrategoList annos141 = term.getAnnotations();
       m_130 = annos141;
       term = o_25.invoke(context, k_130);
       if(term == null)
-        break Fail168;
+        break Fail169;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consunquoted_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, m_130));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unquoted_fun_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unquoted_fun_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/unquoted_fun_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("unquoted_fun_1_0");
-    Fail171:
+    Fail172:
     { 
       IStrategoTerm a_131 = null;
       IStrategoTerm y_130 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consunquoted_fun_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail171;
+        break Fail172;
       y_130 = term.getSubterm(0);
       IStrategoList annos144 = term.getAnnotations();
       a_131 = annos144;
       term = r_25.invoke(context, y_130);
       if(term == null)
-        break Fail171;
+        break Fail172;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consunquoted_fun_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, a_131));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/variables_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/variables_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/variables_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("variables_1_0");
-    Fail254:
+    Fail255:
     { 
       IStrategoTerm r_147 = null;
       IStrategoTerm m_147 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consvariables_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail254;
+        break Fail255;
       m_147 = term.getSubterm(0);
       IStrategoList annos210 = term.getAnnotations();
       r_147 = annos210;
       term = g_29.invoke(context, m_147);
       if(term == null)
-        break Fail254;
+        break Fail255;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consvariables_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, r_147));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/varsym_1_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/varsym_1_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/varsym_1_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,18 +16,18 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("varsym_1_0");
-    Fail227:
+    Fail228:
     { 
       IStrategoTerm g_143 = null;
       IStrategoTerm f_143 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._consvarsym_1 != ((IStrategoAppl)term).getConstructor())
-        break Fail227;
+        break Fail228;
       f_143 = term.getSubterm(0);
       IStrategoList annos188 = term.getAnnotations();
       g_143 = annos188;
       term = f_28.invoke(context, f_143);
       if(term == null)
-        break Fail227;
+        break Fail228;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._consvarsym_1, new IStrategoTerm[]{term}), checkListAnnos(termFactory, g_143));
       context.popOnSuccess();
       if(true)

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/with_arguments_2_0.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/with_arguments_2_0.java	Fri Mar  4 16:04:34 2011	(r22298)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/transformations/extraction/with_arguments_2_0.java	Fri Mar  4 18:01:23 2011	(r22299)
@@ -16,25 +16,25 @@
   { 
     ITermFactory termFactory = context.getFactory();
     context.push("with_arguments_2_0");
-    Fail193:
+    Fail194:
     { 
       IStrategoTerm s_136 = null;
       IStrategoTerm q_136 = null;
       IStrategoTerm r_136 = null;
       IStrategoTerm t_136 = null;
       if(term.getTermType() != IStrategoTerm.APPL || extraction._conswith_arguments_2 != ((IStrategoAppl)term).getConstructor())
-        break Fail193;
+        break Fail194;
       q_136 = term.getSubterm(0);
       r_136 = term.getSubterm(1);
       IStrategoList annos161 = term.getAnnotations();
       s_136 = annos161;
       term = q_26.invoke(context, q_136);
       if(term == null)
-        break Fail193;
+        break Fail194;
       t_136 = term;
       term = r_26.invoke(context, r_136);
       if(term == null)
-        break Fail193;
+        break Fail194;
       term = termFactory.annotateTerm(termFactory.makeAppl(extraction._conswith_arguments_2, new IStrategoTerm[]{t_136, term}), checkListAnnos(termFactory, s_136));
       context.popOnSuccess();
       if(true)

From seba at informatik.uni-marburg.de  Fri Mar  4 19:32:40 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 04 Mar 2011 18:32:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22300 - in
	sugarj/branches/SugarJ-editor-services/case-studies/xml: . schema
Message-ID: <20110304183240.AD1CD2B8011@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Fri Mar  4 18:32:40 2011
New Revision: 22300
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22300&sc=1

Log:
implemented XML validation as editor service

Added:
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/SharedStrategies.sugj
Modified:
   sugarj/branches/SugarJ-editor-services/case-studies/xml/AsSax.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/ConcreteXml.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchema.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaCompiled.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/AsSax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/AsSax.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/AsSax.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -26,7 +26,7 @@
 	  meta-explode-sax =
 	    alltd(explode-write; meta-explode-sax)
 	
-	  explode-write :
+	  explode-write : 
 	    ToMetaStm(WriteDoc(Id(x), c)) -> java_bstm |[ { java_bstm* } ]|
 	      where < content-to-stm(|x)
 	            ; concat-content
@@ -46,7 +46,7 @@
 	   * @todo  Support namespaces
 	   */
 	  content-to-stm(|java_x) :
-	    Element(QName(pref, n), atts, children, QName(pref', n')) ->
+	    Element(ElemName(QName(pref, n)), atts, children, ElemName(QName(pref', n'))) ->
 	      java_bstm* |[
 	         org.xml.sax.helpers.AttributesImpl java_y = new org.xml.sax.helpers.AttributesImpl();
 	         java_bstm1*;
@@ -59,7 +59,7 @@
 	          ; <map(attribute-to-stm(|java_y))> atts => java_bstm1*
 	
 	   content-to-stm(|java_x) :
-      EmptyElement(QName(pref, n), atts) ->
+      EmptyElement(ElemName(QName(pref, n)), atts) ->
         java_bstm* |[
            org.xml.sax.helpers.AttributesImpl java_y = new org.xml.sax.helpers.AttributesImpl();
            java_bstm1*;
@@ -83,7 +83,7 @@
 	   * @todo  Support namespaces
 	   */
 	  attribute-to-stm(|java_y) :
-	    Attribute(QName(pref, n), v) -> java_bstm |[ java_y.addAttribute(~<java-string-prefix> pref, ~<java-string-expr> n, ~<java-string-qname> (pref, n), "CDATA", java_e); ]|
+	    Attribute(AttrName(QName(pref, n)), v) -> java_bstm |[ java_y.addAttribute(~<java-string-prefix> pref, ~<java-string-expr> n, ~<java-string-qname> (pref, n), "CDATA", java_e); ]|
 	      where <attribute-value-to-expr> v => java_e
 	
 	  attribute-value-to-expr :

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/ConcreteXml.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/ConcreteXml.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/ConcreteXml.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -11,19 +11,23 @@
 	  "xml" "|[" Element "]|" -> StrategoTerm {cons("ToMetaExpr")}
 	        "|[" Element "]|" -> StrategoTerm {cons("ToMetaExpr")}
 	
+	lexical syntax 
+	  "xml" -> StrategoId {reject}
+	
 	context-free syntax
 	  "<>" StrategoTerm  -> NamespaceURI  {cons("FromMetaExpr"), prefer}
 	  "<>" StrategoTerm  -> NCName  {cons("FromMetaExpr"), prefer}
 	  "<>" StrategoTerm  -> QName  {cons("FromMetaExpr"), prefer}
 	  "<>" StrategoTerm  -> AttValue  {cons("FromMetaExpr"), prefer}
 	  "<>" StrategoTerm  -> Content*  {cons("FromMetaExpr"), prefer}
+
 	
 	variables
 	  "qname" [0-9]* -> QName {prefer}
-	  "attributes" [0-9]* -> Attribute* {prefer}
+	  "attribute" [0-9]* "*" -> Attribute* {prefer}
 	  "attval" [0-9]* -> AttValue {prefer}
 	  "content" [0-9]* -> Content {prefer}
-	  "contents" [0-9]* -> Content* {prefer}
+	  "content" [0-9]* "*" -> Content* {prefer}
 	  "namespaceuri" [0-9]* -> NamespaceURI {prefer}
 	  "ncname" [0-9]* -> NCName {prefer}
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -13,6 +13,8 @@
 
 import xml.XmlEditor;
 
+import editor.ASTBuilder;
+
 /*
  * code for printing based on http://www.informit.com/articles/article.aspx?p=26351&seqNum=5
  */

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -232,8 +232,6 @@
 
   desugarings
     \ Comment(_, com, _) -> Comment(com) \
-    \ ElemName(name) -> name \
-    \ AttrName(name) -> name \
 
 	signature
 	  constructors

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -5,290 +5,245 @@
 import xml.ConcreteXml;
 import xml.XmlJavaSyntax;
 import xml.XmlTextTools;
+import xml.XmlEditor;
 
-import xml.schema.XmlSchemaCompiled;
+import xml.schema.SharedStrategies;
 import xml.schema.XmlSchemaJavaSyntax;
 
+
 public sugar AsDesugaring {
-  
-  desugarings
-    // for bootsstrapping
-     \ ValXMLSchemaDoc(doc) -> doc \
-    // after bootsstrapping
-    // \ ValXMLSchemaDoc(Document(pre, root, post))
-    //   ->
-    //   Document(pre, <validate-XmlSchema-root + report-error(|"***********INVALID XML SCHEMA*********\n")> root, post) \
-                       
 
+  // validating XML schemas
+  rules
+    constraint-error :
+      XMLSchemaDoc(Document(pre, root, post)) -> err
+      where
+        <xml-validate> root => err;
+        <not(?[])> err
+    
+
+  // comment out for bootstrapping
+    constraint-error :
+      XMLSchemaDoc(Document(pre, root, post)) -> (root, "document does not match any xml schema in scope")
+      where
+        <not(xml-validate)> root
+    
+  // validating a document against a schema 
+    constraint-error :
+      ValWriteDoc(ch,Document(pre, root, post)) -> err
+      where
+        <xml-validate> root => err;
+        <not(?[])> err
+
+    constraint-error :
+      ValWriteDoc(ch,Document(pre, root, post)) -> (root, "no schema for this namespace found")
+      where
+        <not(xml-validate)> root
+    
   desugarings
     xsdDec
     valWriteDocToStrategyCall
   
-  /*  
-  desugarings
-    \ EmptyElement(QName(Some("http://www.w3.org/2001/XMLSchema"), el), attributes)
-      ->
-      Element(QName(Some("http://www.w3.org/2001/XMLSchema"), el), attributes, [], QName(Some("http://www.w3.org/2001/XMLSchema"), el)) \
-  */
-  
-  strategies
+  rules
+    xml-validate = fail
     valWriteDocToStrategyCall = fail
-    
-  strategies
-    report-error(|msg) = ![msg, ": ", <id>]; error; fail
+    report-error(|t) = !t;debug
     
   rules
-    val-name : name -> "validate-root" // <concat-strings> ["validate-", name, "-root"]
-    val-name-element : (name, elname) -> "validate-element" // <concat-strings> ["validate-", name, "-element-", elname]
-    val-name-type : (name, type) -> <concat-strings> ["validate-type-", type] // <concat-strings> ["validate-", name, "-type-", type]
-    val-name-type-attval : (name, type) -> <concat-strings> ["validate-attval-type-", type] // <concat-strings> ["validate-attval-", name, "-type-", type]
-    val-base : name -> <concat-strings> ["validate-base-", name]
-    val-restriction : name -> <concat-strings> ["validate-restriction-", name]
-  
-  rules
     xsdDec : 
-      XsdSugarDec(XsdSugarDecHead(mods, Id(name)), body) 
+      XsdSugarDec(XsdSugarDecHead(mods, name), doc) 
       ->
-      SugarDec(SugarDecHead(mods, Id(name)), <xsdBody(|name)> body)
+      SugarDec(SugarDecHead(mods, name), <xsdBody> doc)
       
-    xsdBody(|name) :
-      XsdSugarBody(xsd)
+    xsdBody :
+      XsdSugarBody(XMLSchemaDoc(xsd))
       -> 
-      SugarBody(
-        [transformation-elem(
-          |[ strategies
-               ~(<val-name> name) = fail ]|),
-         transformation-elem(
-          |[ rules
-               valWriteDocToStrategyCall : 
-                 ValWriteDoc(ch, 
-                             Document(pre, root, post))
-                 ->
-                 WriteDoc(ch,
-                          Document(pre, <debug(!"start val: ");id~(<val-name> name)> root, post)) 
-          ]|)
-        | <xsd2stratego(|name); map(!transformation-elem(<id>))> xsd])
+      SugarBody(<xsd2stratego; map(!transformation-elem(<id>))> xsd)
+
+  rules
+    val-type : type -> <concat-strings> ["validate-type-", type]
+    val-type-attval : type -> <concat-strings> ["validate-attval-type-", type]
+    val-base : name -> <concat-strings> ["validate-base-", name]
+  
         
   
   rules
     // documents
-    xsd2stratego(|name) : 
+    xsd2stratego : 
       Document(pre, el, post)
       ->
-      <debug(!"document: "); element2stratego(|name, "")> el
-  
-  
-  strategies
-    element2stratego(|name, namespace) = xsdElement2stratego(|name, namespace) <+ otherElement2stratego(|name)
-    otherElement2stratego(|name) = debug(!"other: "); ![]
+      <xsdElement2stratego(|"")> el
   
   
   // rules for elements of XSD (all having the XSD prefix)
   rules
     // schema root
-    xsdElement2stratego(|name, ign) :
-      xml |[
-        <{http://www.w3.org/2001/XMLSchema}schema targetNamespace=attval>
-          <>contents
-        </{http://www.w3.org/2001/XMLSchema}schema>
-      ]|
-      ->
-      result
+    xsdElement2stratego(|ignore) :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "schema")),
+        [Attribute(AttrName(QName(None(), "targetNamespace")), attval)],
+        contents,
+        _)
+      -> result
       where
-        <xml-attr-value2string> attval => namespace ;
-        <debug(!"schema: "); mapconcat(element2stratego(|name, namespace))> contents => result
-
-  
-  
-    // element
-    xsdElement2stratego(|name, namespaceuri) :
+        <xml-attr-value2string> attval => namespace; 
+        <mapconcat(xsdElement2stratego(|namespace);ensure-list <+ !["failed to translate:",<id>])> contents => result
+   
+    // root element 
+    xsdElement2stratego(|namespace) :
       xml |[
         <{http://www.w3.org/2001/XMLSchema}element name=attval1 type=attval2>
         </{http://www.w3.org/2001/XMLSchema}element>
       ]|
-      ->
-      // nested concrete syntax !!!
-      //   => ambiguities in the deeper-nested syntax are
-      //      parsed and compiled
-      //   => double anti-quotation needed
-      [ |[
-        strategies
-          ~(<val-name> name) = id~(<val-name-element> (name, ncname))
-        ]|,
-        |[
-        rules
-          id~(<val-name-element> (name, ncname)) :
-          	xml |[
-          	  <{<>term~namespacestring}<>term~ncnamestring attributes>
-          	    <>contents
-          	  </{<>term~namespacestring}<>term~ncnamestring>
-          	]|
-          	->
-          	<debug(!"val type: ");id~(<val-name-type> (name, typename))>
-            xml |[
-              <{<>term~namespacestring}<>term~ncnamestring attributes>
-          	    <>contents
-          	  </{<>term~namespacestring}<>term~ncnamestring>
-            ]|
-        ]| ]
+      -> 
+      |[ rules 
+           xml-validate = strategy~namespace-match; ~elem-match ]|
       where
 	     <xml-attr-value2string> attval1 => ncname ;
-	     <asstring> ncname => ncnamestring ;  
 	     <xml-attr-value2string> attval2 => typename;
-	     <asstring> namespaceuri => namespacestring
-  
+	     <match-namespace> namespace => namespace-match;
+	     <match-element> (namespace, ncname, typename) => elem-match
     
     // complex types
-    xsdElement2stratego(|name, namespace) :
-      xml |[ 
-        <{http://www.w3.org/2001/XMLSchema}complexType name=attval>
-          <>contents
-        </{http://www.w3.org/2001/XMLSchema}complexType>
-      ]|
+    xsdElement2stratego(|namespace) :
+        Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "complexType")),
+        [Attribute(AttrName(QName(None(), "name")), attval)],
+        contents,
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "complexType")))
       ->
       [ |[
-        strategies
-          ~(<val-name-type> (name, typename)) =
-            (where (
-               ?Element(ign1, ign2, <id>, ign4);
-               debug(!"val complex type: ");
-               strategy~strat;
-               (?[] <+ report-error(|"not all elements consumed")));
-             where (
-               ?Element(ign1, <id>, ign3, ign4);
-               debug(!"val complex type attributes: ");
-               strategy~attcheck;
-               (?[] <+ report-error(|"not all attributes consumed")))
-             )
-            <+ report-error(|"mismatched complex type")
+        rules
+          ~(<val-type> typename) :
+            Element(name1,attrs,cs,name2) -> <conc> (err1, err2)
+            where <strategy~attcheck> attrs => err1;
+                  <strategy~contentcheck-all> cs => err2
       ]| ]
       where
         <xml-attr-value2string> attval => typename ;
-        <debug(!"complexType: ");
-         mapconcat(complexType2stratego(|name, typename, namespace) < ![<id>] + ![]);
-         debug(!"complex strats: ")> contents => strats;
-        <(?[<id>] + (?[]; !Id)) 
-         <+ report-error(|"more then one element in complex type")> strats => strat;
-        <debug(!"attributes complexType: ");
-         mapconcat(attDecl2stratego(|name, typename, namespace) < ![<id>] + ![]);
-         debug(!"complex attchecks: ")> contents => attchecks;
-        <foldr(!Id, \ (a,b) -> Seq(a,b) \)> attchecks => attcheck
+        <head; complexType2stratego(|typename, namespace)> contents => contentcheck;
+        <sequentialize-strategies> [contentcheck, <empty-check> "unexpected element"] => contentcheck-all;
+
+        
+        <tail; map(attDecl2stratego(|typename, namespace))> contents => attchecks;
+        <conc> (attchecks, [<empty-check> "unexpected attribute"]) => attchecks-all;
+        <sequentialize-strategies> attchecks-all => attcheck 
         
   
     // simple types
-    xsdElement2stratego(|name, namespace) :
-      xml |[ 
-        <{http://www.w3.org/2001/XMLSchema}simpleType name=attval>
-          <>[content]
-        </{http://www.w3.org/2001/XMLSchema}simpleType>
-      ]|
+    xsdElement2stratego(|namespace) :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "simpleType")),
+        [Attribute(AttrName(QName(None(), "name")), attval)],
+        [content],
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "simpleType")))
       ->
-      <debug(!"simpleType: "); simpleType2stratego(|name, typename)> content
-      where <xml-attr-value2string> attval => typename
+      [ |[
+        rules
+          ~(<val-type> typename) :
+            Element(name1,attrs,[c],name2) -> err
+            where
+              <chardata2string> c => cstring;
+              <strategy~simplecheck> (c,cstring) => err
+          
+          ~(<val-type> typename) :
+            Element(name1,attrs,cs,name2) -> [(c, <concat-strings>["type mismatch: expected character data, found ", <write-to-string> cs])]
+            where
+              <not(?[c]) + (?[c]; not(chardata2string))> cs
+
+          ~(<val-type-attval> typename) :
+            attr -> err
+            where
+              <xml-attr-value2string> attr => attrstring ;
+              <strategy~simplecheck> (attr,attrstring) => err
+      ]| ]
+      where <xml-attr-value2string> attval => typename;
+            <simpleType2stratego(|typename)> content => simplecheck
+            
+   
    
    
+    
    
   // complex types to stratego
   rules
     // choice
-    complexType2stratego(|name, typename, namespace) :
-      xml |[
-        <{http://www.w3.org/2001/XMLSchema}choice>
-          <>contents
-        </{http://www.w3.org/2001/XMLSchema}choice>
-      ]|
+    complexType2stratego(|typename, namespace) :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "choice")),
+        [],
+        contents,
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "choice")))
       -> 
       strat
       where
-        <map(complexType2stratego(|name, typename, namespace))> contents => strats;
-        <foldr(!Fail, \ (a,b) -> Choice(a,b) \)> strats => strat
+        <map(complexType2stratego(|typename, namespace))> contents => strats;
+        <any-error-free-strategy> strats => strat
   
     // choice max
-    complexType2stratego(|name, typename, namespace) :
-      xml |[
-        <{http://www.w3.org/2001/XMLSchema}choice maxOccurs="unbounded">
-          <>contents
-        </{http://www.w3.org/2001/XMLSchema}choice>
-      ]|
+    complexType2stratego(|typename, namespace) :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "choice")),
+        [Attribute(AttrName(QName(None(), "maxOccurs")), DoubleQuoted([CharDataPart("unbounded")]))],
+        contents,
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "choice")))
       -> 
-      |[ repeat(strategy~strat) ]|
+      |[ repeat-strategy(strategy~strat) ]|
       where
-        <map(complexType2stratego(|name, typename, namespace))> contents => strats;
-        <foldr(!Fail, \ (a,b) -> Choice(a,b) \)> strats => strat
+        <map(complexType2stratego(|typename, namespace))> contents => strats;
+        <any-error-free-strategy> strats => strat
   
     // sequence
-    complexType2stratego(|name, typename, namespace) :
-      xml |[
-        <{http://www.w3.org/2001/XMLSchema}sequence>
-          <>contents
-        </{http://www.w3.org/2001/XMLSchema}sequence>
-      ]|
+    complexType2stratego(|typename, namespace) :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "sequence")),
+        [],
+        contents,
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "sequence")))
       -> 
       strat
       where
-        <map(complexType2stratego(|name, typename, namespace))> contents => strats;
-        <foldr(!Id, \ (a,b) -> Seq(a,b) \)> strats => strat
+        <map(complexType2stratego(|typename, namespace))> contents => strats;
+        <sequentialize-strategies> strats => strat
   	
   	
   	// sequence max
-    complexType2stratego(|name, typename, namespace) :
-      xml |[
-        <{http://www.w3.org/2001/XMLSchema}sequence maxOccurs="unbounded">
-          <>contents
-        </{http://www.w3.org/2001/XMLSchema}sequence>
-      ]|
+    complexType2stratego(|typename, namespace) :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "sequence")),
+        [Attribute(AttrName(QName(None(), "maxOccurs")), DoubleQuoted([CharDataPart("unbounded")]))],
+        contents,
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "sequence")))
       -> 
-      |[ repeat(strategy~strat) ]|
+      |[ repeat-strategy(strategy~strat) ]|
       where
-        <map(complexType2stratego(|name, typename, namespace))> contents => strats;
-        <?[] < !Fail + foldr(!Id, \ (a,b) -> Seq(a,b) \)> strats => strat
+        <map(complexType2stratego(|typename, namespace))> contents => strats;
+        <sequentialize-strategies> strats => strat
   	
   	
   	// element
-    complexType2stratego(|name, typename, namespaceuri) :
+    complexType2stratego(|typename, namespace) :
       xml |[
         <{http://www.w3.org/2001/XMLSchema}element name=attval1 type=attval2>
         </{http://www.w3.org/2001/XMLSchema}element>
       ]|
       ->
       |[ 
-      	\ [x | xs] -> 
-	      < \ xml |[
-	      	    <{<>term~namespacestring}<>term~ncname attributes>
-	      	      <>contents
-	      	    </{<>term~namespacestring}<>term~ncname>
-	          ]|
-	          ->
-	          <debug(!"val type: ");id~(<val-name-type> (name, eltypename))>
-	          xml |[
-	          	<{<>term~namespacestring}<>term~ncname attributes>
-	          	  <>contents
-	          	</{<>term~namespacestring}<>term~ncname>
-	          ]|
-	     \ ; !xs > 
-	     x \
-	  ]|
+      	\ [x | xs] ->
+      	  <strategy~(<match-element> (namespace, ncname, eltypename));
+      	   (is-error <+ !xs)>
+      	  x
+      	\
+      ]|
       where
-	     <xml-attr-value2string; asstring> attval1 => ncname ; 
-	     <xml-attr-value2string> attval2 => eltypename;
-	     <asstring> namespaceuri => namespacestring
+	     <xml-attr-value2string> attval1 => ncname ; 
+	     <xml-attr-value2string> attval2 => eltypename
   
 
   
-    // element ref
-    complexType2stratego(|name, typename, namespace) :
-      xml |[
-        <{http://www.w3.org/2001/XMLSchema}element ref=attval>
-        </{http://www.w3.org/2001/XMLSchema}element>
-      ]|
-      -> 
-      stratego-strategy |[ \ [x | xs] -> <id~(<val-name-element> (name, elname)); !xs > x \ ]|
-      where <xml-attr-value2string> attval => elname
-   
-  
   // attribute decls
   rules
-    attDecl2stratego(|name, typename, namespace) :
+    attDecl2stratego(|typename, namespace) :
       xml |[
         <{http://www.w3.org/2001/XMLSchema}attribute name=attval1 type=attval2>
         </{http://www.w3.org/2001/XMLSchema}attribute>
@@ -296,98 +251,111 @@
       ->
       |[
       	\ [x | xs] -> 
-	      < \ Attribute(QName(None, term~ncname), attval)
-	          ->
-	          <debug(!"att type: "); id~(<val-name-type-attval> (name, atttypename))>
-	          attval
-	     \ ; !xs > 
-	     x \
+	        <strategy~(<match-attribute> (ncname, atttypename));
+	         (is-error <+ !xs)> 
+	        x
+	      \
 	  ]|
       where
-	     <xml-attr-value2string; asstring> attval1 => ncname ; 
+	     <xml-attr-value2string> attval1 => ncname ; 
 	     <xml-attr-value2string> attval2 => atttypename
    
    
   // simple types to stratego
   rules
     // restriction
-    simpleType2stratego(|name, typename) :
-      xml |[
-        <{http://www.w3.org/2001/XMLSchema}restriction base=attval>
-     		  <>contents
-        </{http://www.w3.org/2001/XMLSchema}restriction>
+    simpleType2stratego(|typename) :
+      Element(
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "restriction")),
+        [Attribute(AttrName(QName(None(), "base")), attval)],
+        contents,
+        ElemName(QName(Some(URIPrefix("http://www.w3.org/2001/XMLSchema")), "restriction")))
+      ->
+      |[ id~(<val-base> basename)
+         <+ ?(t,val);
+            !(t, <concat-strings>["no base type definition ", string~basename, " for value ", val, " found"])
       ]|
-      ->
-      [ |[
-        strategies
-          ~(<val-name-type> (name, typename)) =
-            where (
-              ?Element(ign1,ign2,[<id>],ign4) ;
-              debug(!"val simple type: ");
-              chardata2string ;
-              id~(<debug(!"base: "); val-base> basename) ;
-              strategy~(<debug(!"restriction: "); gen-restriction-check(|name, typename)> contents))
-            <+ report-error(|"mismatched restriction")
-      ]|,
-      |[
-        strategies
-      	  ~(<val-name-type-attval> (name, typename)) =
-            where (
-              xml-attr-value2string ;
-              debug(!"val simple att type: ");
-              id~(<debug(!"base: "); val-base> basename) ;
-              strategy~(<debug(!"restriction: "); gen-restriction-check(|name, typename)> contents))
-            <+ report-error(|"mismatched restriction")
-      ]| ]
       where <xml-attr-value2string> attval => basename
      
-    gen-restriction-check(|name, typename) :
-      [] -> stratego |[ id ]|
+     
     
-    gen-restriction-check(|name, typename) :
-      [el | rest]
-      ->
-      |[ strategy~check; strategy~restcheck ]| 
-      where
-        <gen-restriction-check-el(|name, typename)> el => check ;
-        <gen-restriction-check(|name, typename)> rest => restcheck
   
-    // minInclusive
-    gen-restriction-check-el(|name, typename) :
-      xml |[
-        <{http://www.w3.org/2001/XMLSchema}minInclusive value=attval>
-        </{http://www.w3.org/2001/XMLSchema}minInclusive>
-      ]|
-      ->
-      stratego-strategy |[ id~(<val-restriction> "minInclusive") (|~minimum) ]|
-      with <xml-attr-value2string> attval => minimum
-    
-    // maxInclusive
-    gen-restriction-check-el(|name, typename) :
-      xml |[
-        <{http://www.w3.org/2001/XMLSchema}maxInclusive value=attval>
-        </{http://www.w3.org/2001/XMLSchema}maxInclusive>
-      ]|
-      ->
-      stratego-strategy |[ id~(<val-restriction> "maxInclusive") (|~maximum) ]|
-      with <xml-attr-value2string> attval => maximum
-    
-    
-  strategies
-    validate-base-string =
-      is-string <+ report-error(|"not a string")
+  rules
+    any-error-free-strategy : [] -> Fail
+    any-error-free-strategy :
+       [s|ss] -> 
+       stratego |[
+         {x, serr :
+          ?x;
+          strategy~s; ?serr;
+          if is-error
+            then !x; strategy~(<any-error-free-strategy> ss) <+ !serr
+            else id
+          end
+         }
+       ]|
     
-    validate-base-integer =
-      validate-base-string;
-      where(string-to-int) <+ report-error(|"not an integer")
-  
-    validate-restriction-minInclusive(|min) =
-      where (\ a -> (<string-to-int> a, min)\; (equal + gt)) <+ report-error(|"too small")
+    sequentialize-strategies : [] -> stratego |[ id ]|
+    sequentialize-strategies :
+       [s|ss] -> 
+       stratego |[
+          strategy~s; 
+          if is-error
+	          then id
+	          else strategy~(<sequentialize-strategies> ss)
+	        end
+       ]|
     
-    validate-restriction-maxInclusive(|max) =
-      where (\a -> (<string-to-int> a, max)\; (equal + lt)) <+ report-error(|"too large")
-  
-  
+
   rules
-    asstring : s -> NoAnnoList(Str(s))
+    match-namespace :
+      namespace -> 
+      stratego |[
+        ?Element(
+          ElemName(QName(Some(URIPrefix(string~namespace)), name1)),
+          attributes,
+          contents,
+          ElemName(QName(Some(URIPrefix(string~namespace)), name2)))
+        ]|
+
+    match-element :
+      (namespace,ncname,typename) -> 
+      stratego |[
+        {err :
+         \  doc @
+              Element(
+				        ElemName(QName(Some(URIPrefix(string~namespace)), string~ncname)),
+				        attributes,
+				        contents,
+				        ElemName(QName(Some(URIPrefix(string~namespace)), string~ncname)))
+            -> err
+            where
+              <id~(<val-type> typename) <+ ![(doc, <concat-strings>["no type definition ", string~typename, " for element ", string~ncname, " found"])]> doc => err
+         \
+         }
+         <+ ![(<id>, <concat-strings> ["expected element: ", string~ncname, " of namespace: ", string~namespace])]  
+        ]|
+    
+    match-attribute :
+      (ncname, atttypename) ->
+      stratego |[
+        {err :
+        \ att at Attribute(AttrName(QName(None, string~ncname)), attval)
+          ->
+          err
+          where
+            <id~(<val-type-attval> atttypename) <+ ![(att, <concat-strings> ["no type definition for ", string~atttypename, " of attribute ", string~ncname, " found"])]> attval => err
+        \
+        }
+        <+ ![(<id>, <concat-strings> ["expected attribute: ", string~ncname])]
+      ]|
+  
+    empty-check :
+      msg -> 
+      stratego |[
+        if ?[]
+          then ![]
+          else is-list < (map(!(<id>,string~msg))) + ![(<id>,string~msg)]
+        end
+      ]|
 }

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -1,15 +1,15 @@
 package xml.schema;
-
+  
+import xml.schema.XmlSchema;
 import xml.schema.AsDesugaring;
-import xml.schema.XmlSchemaJavaSyntax;
-
-public xmlschema BookSchema {
+ 
+public xmlschema BookSchema {   
   <{http://www.w3.org/2001/XMLSchema}schema targetNamespace="lib">
-   	
-   	<{http://www.w3.org/2001/XMLSchema}element name="book" type="BookType">
-   	</{http://www.w3.org/2001/XMLSchema}element>
-   	
-   	<{http://www.w3.org/2001/XMLSchema}complexType name="BookType">
+    
+    <{http://www.w3.org/2001/XMLSchema}element name="book" type="BookType">
+    </{http://www.w3.org/2001/XMLSchema}element>
+    
+    <{http://www.w3.org/2001/XMLSchema}complexType name="BookType">
       <{http://www.w3.org/2001/XMLSchema}sequence maxOccurs="unbounded">
         <{http://www.w3.org/2001/XMLSchema}element name="author" type="AuthorType">
         </{http://www.w3.org/2001/XMLSchema}element>
@@ -33,4 +33,4 @@
     </{http://www.w3.org/2001/XMLSchema}simpleType>
 
   </{http://www.w3.org/2001/XMLSchema}schema>
-}
\ No newline at end of file
+}

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -1,21 +1,22 @@
 package xml.schema;
-
+ 
 import org.xml.sax.ContentHandler;
 import org.xml.sax.SAXException;
 
 import xml.AsSax;
+import xml.Test; 
 import xml.XmlJavaSyntax;
 
 import xml.schema.BookSchema;
 
-public class BookSchemaTest extends xml.Test {
+public class BookSchemaTest extends Test {
   public static void main(String[] args) throws SAXException {
     ContentHandler ch = new BookSchemaTest();
     
     ch.write valid document
-      <{lib}book title="Sweetness and Power: The Place of Sugar in Modern History" >
+      <{lib}book title="Sweetness and Power: The Place of Sugar in Modern History">
         <{lib}author name="Sidney W. Mintz">
         </{lib}author>
       </{lib}book>;
   }
-}
\ No newline at end of file
+} 
\ No newline at end of file

Added: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/SharedStrategies.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/SharedStrategies.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -0,0 +1,24 @@
+package xml.schema;
+
+public sugar SharedStrategies {
+  
+  rules
+    is-error = where(?[(a,<id>)|c]; is-string)
+    head : [x|y] -> x
+    tail : [x|y] -> y
+    ensure-list = is-list <+ ![<id>]
+    
+  strategies
+    validate-base-string =
+      ?(t,<id>);
+      (is-string
+       <+ !(t,"not a string"))
+    
+    validate-base-integer =
+      ?(t,<id>);
+      (string-to-int
+       <+ !(t,"not an integer"))
+  
+    repeat-strategy(s) =
+      ?x; s < (is-error <+ ?x <+ repeat-strategy(s)) + id
+}
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchema.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchema.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchema.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -4,14 +4,12 @@
 import xml.schema.XmlSchemaJavaSyntax;
 
 public xmlschema XmlSchema {
-  <{http://www.w3.org/2001/XMLSchema}schema
+  <{http://www.w3.org/2001/XMLSchema}schema 
     targetNamespace="http://www.w3.org/2001/XMLSchema">
    	
-   	
    	<{http://www.w3.org/2001/XMLSchema}element name="schema" type="SchemaType">
    	</{http://www.w3.org/2001/XMLSchema}element>
    	   	
-   	
     <{http://www.w3.org/2001/XMLSchema}complexType name="SchemaType">
     	<{http://www.w3.org/2001/XMLSchema}choice maxOccurs="unbounded">
         
@@ -30,8 +28,6 @@
       </{http://www.w3.org/2001/XMLSchema}attribute>
     </{http://www.w3.org/2001/XMLSchema}complexType>
     
-    
-    
     <{http://www.w3.org/2001/XMLSchema}complexType name="ComplexType">
       <{http://www.w3.org/2001/XMLSchema}sequence>
         <{http://www.w3.org/2001/XMLSchema}choice>
@@ -153,6 +149,5 @@
     	<{http://www.w3.org/2001/XMLSchema}restriction base="string">
     	</{http://www.w3.org/2001/XMLSchema}restriction>
     </{http://www.w3.org/2001/XMLSchema}simpleType>
-    
   </{http://www.w3.org/2001/XMLSchema}schema>
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaCompiled.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaCompiled.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaCompiled.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -3,639 +3,1284 @@
 import xml.XmlSyntax;
 import xml.XmlTextTools;
 
+import xml.schema.SharedStrategies;
+
+
 public sugar XmlSchemaCompiled {
 
-	strategies
-      report-error(|msg) = ![msg, ": ", <id>]; error; fail
-    	  
-	
-	strategies
-	  validate-XmlSchema-root =
-	    fail
-	
-	
-	strategies
-	  validate-XmlSchema-root =
-	    validate-XmlSchema-element-schema
-	
-	
-	rules
-	
-	  validate-XmlSchema-element-schema :
-	    Element(
-	      QName(
-	        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	      , "schema"
-	      )
-	    , attributes
-	    , contents
-	    , QName(
-	        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	      , "schema"
-	      )
-	    ) -> <validate-XmlSchema-type-SchemaType> Element(
-	                                                                       QName(
-	                                                                         Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                       , "schema"
-	                                                                       )
-	                                                                     , attributes
-	                                                                     , contents
-	                                                                     , QName(
-	                                                                         Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                       , "schema"
-	                                                                       )
-	                                                                     )
-	
-	
-	strategies
-	  validate-XmlSchema-type-SchemaType =
-	    where(?Element(ign1, ign2, <id>, ign4)
-	          ; repeat(
-	              \ [x|xs] -> <\ Element(
-	                               QName(
-	                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                               , "element"
-	                               )
-	                             , attributes
-	                             , contents
-	                             , QName(
-	                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                               , "element"
-	                               )
-	                             ) -> <validate-XmlSchema-type-ElementType> Element(
-	                                                                                                 QName(
-	                                                                                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                 , "element"
-	                                                                                                 )
-	                                                                                               , attributes
-	                                                                                               , contents
-	                                                                                               , QName(
-	                                                                                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                 , "element"
-	                                                                                                 )
-	                                                                                               ) \
-	                           ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "complexType"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "complexType"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexType> Element(
-	                                                                                                   QName(
-	                                                                                                     Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                   , "complexType"
-	                                                                                                   )
-	                                                                                                 , attributes
-	                                                                                                 , contents
-	                                                                                                 , QName(
-	                                                                                                     Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                   , "complexType"
-	                                                                                                   )
-	                                                                                                 ) \
-	                             ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "simpleType"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "simpleType"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-SimpleType> Element(
-	                                                                                                  QName(
-	                                                                                                    Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                  , "simpleType"
-	                                                                                                  )
-	                                                                                                , attributes
-	                                                                                                , contents
-	                                                                                                , QName(
-	                                                                                                    Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                  , "simpleType"
-	                                                                                                  )
-	                                                                                                ) \
-	                             ; !xs> x \
-	              + fail
-	            )
-	          ; (?[] <+ report-error(|"not all elements consumed")))
-	    ; where(?Element(ign1, <id>, ign3, ign4)
-	            ; (\ [x|xs] -> <\ Attribute(QName(None, "targetNamespace"), attval) -> <validate-attval-XmlSchema-type-StringType> attval \
-	                            ; !xs> x \
-	               ; id)
-	            ; (?[] <+ report-error(|"not all attributes consumed")))
-	    <+ report-error(|"mismatched complex type")
-	
-	
-	strategies
-	  validate-XmlSchema-type-ComplexType =
-	    where(?Element(ign1, ign2, <id>, ign4)
-	          ; ((\ [x|xs] -> <\ Element(
-	                               QName(
-	                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                               , "choice"
-	                               )
-	                             , attributes
-	                             , contents
-	                             , QName(
-	                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                               , "choice"
-	                               )
-	                             ) -> <validate-XmlSchema-type-ComplexTypeNested> Element(
-	                                                                                                       QName(
-	                                                                                                         Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                       , "choice"
-	                                                                                                       )
-	                                                                                                     , attributes
-	                                                                                                     , contents
-	                                                                                                     , QName(
-	                                                                                                         Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                       , "choice"
-	                                                                                                       )
-	                                                                                                     ) \
-	                           ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "choice"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "choice"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexTypeNestedMax> Element(
-	                                                                                                            QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "choice"
-	                                                                                                            )
-	                                                                                                          , attributes
-	                                                                                                          , contents
-	                                                                                                          , QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "choice"
-	                                                                                                            )
-	                                                                                                          ) \
-	                             ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexTypeNested> Element(
-	                                                                                                         QName(
-	                                                                                                           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                         , "sequence"
-	                                                                                                         )
-	                                                                                                       , attributes
-	                                                                                                       , contents
-	                                                                                                       , QName(
-	                                                                                                           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                         , "sequence"
-	                                                                                                         )
-	                                                                                                       ) \
-	                             ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexTypeNestedMax> Element(
-	                                                                                                            QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "sequence"
-	                                                                                                            )
-	                                                                                                          , attributes
-	                                                                                                          , contents
-	                                                                                                          , QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "sequence"
-	                                                                                                            )
-	                                                                                                          ) \
-	                             ; !xs> x \
-	              + fail)
-	             ; repeat(
-	                 \ [x|xs] -> <\ Element(
-	                                  QName(
-	                                    Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                  , "attribute"
-	                                  )
-	                                , attributes
-	                                , contents
-	                                , QName(
-	                                    Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                  , "attribute"
-	                                  )
-	                                ) -> <validate-XmlSchema-type-AttributeType> Element(
-	                                                                                                      QName(
-	                                                                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                      , "attribute"
-	                                                                                                      )
-	                                                                                                    , attributes
-	                                                                                                    , contents
-	                                                                                                    , QName(
-	                                                                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                      , "attribute"
-	                                                                                                      )
-	                                                                                                    ) \
-	                              ; !xs> x \
-	                 ; id
-	               )
-	             ; id)
-	          ; (?[] <+ report-error(|"not all elements consumed")))
-	    ; where(?Element(ign1, <id>, ign3, ign4)
-	            ; (\ [x|xs] -> <\ Attribute(QName(None, "name"), attval) -> <validate-attval-XmlSchema-type-StringType> attval \
-	                            ; !xs> x \
-	               ; id)
-	            ; (?[] <+ report-error(|"not all attributes consumed")))
-	    <+ report-error(|"mismatched complex type")
-	
-	
-	strategies
-	  validate-XmlSchema-type-ComplexTypeNested =
-	    where(?Element(ign1, ign2, <id>, ign4)
-	          ; repeat(
-	              \ [x|xs] -> <\ Element(
-	                               QName(
-	                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                               , "choice"
-	                               )
-	                             , attributes
-	                             , contents
-	                             , QName(
-	                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                               , "choice"
-	                               )
-	                             ) -> <validate-XmlSchema-type-ComplexTypeNested> Element(
-	                                                                                                       QName(
-	                                                                                                         Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                       , "choice"
-	                                                                                                       )
-	                                                                                                     , attributes
-	                                                                                                     , contents
-	                                                                                                     , QName(
-	                                                                                                         Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                       , "choice"
-	                                                                                                       )
-	                                                                                                     ) \
-	                           ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "choice"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "choice"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexTypeNestedMax> Element(
-	                                                                                                            QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "choice"
-	                                                                                                            )
-	                                                                                                          , attributes
-	                                                                                                          , contents
-	                                                                                                          , QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "choice"
-	                                                                                                            )
-	                                                                                                          ) \
-	                             ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexTypeNested> Element(
-	                                                                                                         QName(
-	                                                                                                           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                         , "sequence"
-	                                                                                                         )
-	                                                                                                       , attributes
-	                                                                                                       , contents
-	                                                                                                       , QName(
-	                                                                                                           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                         , "sequence"
-	                                                                                                         )
-	                                                                                                       ) \
-	                             ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexTypeNestedMax> Element(
-	                                                                                                            QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "sequence"
-	                                                                                                            )
-	                                                                                                          , attributes
-	                                                                                                          , contents
-	                                                                                                          , QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "sequence"
-	                                                                                                            )
-	                                                                                                          ) \
-	                             ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "element"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "element"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ElementType> Element(
-	                                                                                                   QName(
-	                                                                                                     Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                   , "element"
-	                                                                                                   )
-	                                                                                                 , attributes
-	                                                                                                 , contents
-	                                                                                                 , QName(
-	                                                                                                     Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                   , "element"
-	                                                                                                   )
-	                                                                                                 ) \
-	                             ; !xs> x \
-	              + fail
-	            )
-	          ; (?[] <+ report-error(|"not all elements consumed")))
-	    ; where(?Element(ign1, <id>, ign3, ign4)
-	            ; id
-	            ; (?[] <+ report-error(|"not all attributes consumed")))
-	    <+ report-error(|"mismatched complex type")
-	
-	
-	strategies
-	  validate-XmlSchema-type-ComplexTypeNestedMax =
-	    where(?Element(ign1, ign2, <id>, ign4)
-	          ; repeat(
-	              \ [x|xs] -> <\ Element(
-	                               QName(
-	                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                               , "choice"
-	                               )
-	                             , attributes
-	                             , contents
-	                             , QName(
-	                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                               , "choice"
-	                               )
-	                             ) -> <validate-XmlSchema-type-ComplexTypeNested> Element(
-	                                                                                                       QName(
-	                                                                                                         Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                       , "choice"
-	                                                                                                       )
-	                                                                                                     , attributes
-	                                                                                                     , contents
-	                                                                                                     , QName(
-	                                                                                                         Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                       , "choice"
-	                                                                                                       )
-	                                                                                                     ) \
-	                           ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "choice"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "choice"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexTypeNestedMax> Element(
-	                                                                                                            QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "choice"
-	                                                                                                            )
-	                                                                                                          , attributes
-	                                                                                                          , contents
-	                                                                                                          , QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "choice"
-	                                                                                                            )
-	                                                                                                          ) \
-	                             ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexTypeNested> Element(
-	                                                                                                         QName(
-	                                                                                                           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                         , "sequence"
-	                                                                                                         )
-	                                                                                                       , attributes
-	                                                                                                       , contents
-	                                                                                                       , QName(
-	                                                                                                           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                         , "sequence"
-	                                                                                                         )
-	                                                                                                       ) \
-	                             ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "sequence"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ComplexTypeNestedMax> Element(
-	                                                                                                            QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "sequence"
-	                                                                                                            )
-	                                                                                                          , attributes
-	                                                                                                          , contents
-	                                                                                                          , QName(
-	                                                                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                            , "sequence"
-	                                                                                                            )
-	                                                                                                          ) \
-	                             ; !xs> x \
-	              + \ [x|xs] -> <\ Element(
-	                                 QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "element"
-	                                 )
-	                               , attributes
-	                               , contents
-	                               , QName(
-	                                   Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                 , "element"
-	                                 )
-	                               ) -> <validate-XmlSchema-type-ElementType> Element(
-	                                                                                                   QName(
-	                                                                                                     Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                   , "element"
-	                                                                                                   )
-	                                                                                                 , attributes
-	                                                                                                 , contents
-	                                                                                                 , QName(
-	                                                                                                     Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                   , "element"
-	                                                                                                   )
-	                                                                                                 ) \
-	                             ; !xs> x \
-	              + fail
-	            )
-	          ; (?[] <+ report-error(|"not all elements consumed")))
-	    ; where(?Element(ign1, <id>, ign3, ign4)
-	            ; (\ [x|xs] -> <\ Attribute(QName(None, "maxOccurs"), attval) -> <validate-attval-XmlSchema-type-StringType> attval \
-	                            ; !xs> x \
-	               ; id)
-	            ; (?[] <+ report-error(|"not all attributes consumed")))
-	    <+ report-error(|"mismatched complex type")
-	
-	
-	strategies
-	  validate-XmlSchema-type-ElementType =
-	    where(?Element(ign1, ign2, <id>, ign4)
-	          ; id
-	          ; (?[] <+ report-error(|"not all elements consumed")))
-	    ; where(?Element(ign1, <id>, ign3, ign4)
-	            ; (\ [x|xs] -> <\ Attribute(QName(None, "name"), attval) -> <validate-attval-XmlSchema-type-StringType> attval \
-	                            ; !xs> x \
-	               ; \ [x|xs] -> <\ Attribute(QName(None, "type"), attval) -> <validate-attval-XmlSchema-type-StringType> attval \
-	                              ; !xs> x \
-	               ; id)
-	            ; (?[] <+ report-error(|"not all attributes consumed")))
-	    <+ report-error(|"mismatched complex type")
-	
-	
-	strategies
-	  validate-XmlSchema-type-AttributeType =
-	    where(?Element(ign1, ign2, <id>, ign4)
-	          ; id
-	          ; (?[] <+ report-error(|"not all elements consumed")))
-	    ; where(?Element(ign1, <id>, ign3, ign4)
-	            ; (\ [x|xs] -> <\ Attribute(QName(None, "name"), attval) -> <validate-attval-XmlSchema-type-StringType> attval \
-	                            ; !xs> x \
-	               ; \ [x|xs] -> <\ Attribute(QName(None, "type"), attval) -> <validate-attval-XmlSchema-type-StringType> attval \
-	                              ; !xs> x \
-	               ; id)
-	            ; (?[] <+ report-error(|"not all attributes consumed")))
-	    <+ report-error(|"mismatched complex type")
-	
-	
-	strategies
-	  validate-XmlSchema-type-SimpleType =
-	    where(?Element(ign1, ign2, <id>, ign4)
-	          ; (\ [x|xs] -> <\ Element(
-	                              QName(
-	                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                              , "restriction"
-	                              )
-	                            , attributes
-	                            , contents
-	                            , QName(
-	                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                              , "restriction"
-	                              )
-	                            ) -> <validate-XmlSchema-type-RestrictionType> Element(
-	                                                                                                    QName(
-	                                                                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                    , "restriction"
-	                                                                                                    )
-	                                                                                                  , attributes
-	                                                                                                  , contents
-	                                                                                                  , QName(
-	                                                                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-	                                                                                                    , "restriction"
-	                                                                                                    )
-	                                                                                                  ) \
-	                          ; !xs> x \
-	             ; id)
-	          ; (?[] <+ report-error(|"not all elements consumed")))
-	    ; where(?Element(ign1, <id>, ign3, ign4)
-	            ; (\ [x|xs] -> <\ Attribute(QName(None, "name"), attval) -> <validate-attval-XmlSchema-type-StringType> attval \
-	                            ; !xs> x \
-	               ; id)
-	            ; (?[] <+ report-error(|"not all attributes consumed")))
-	    <+ report-error(|"mismatched complex type")
-	
-	
-	strategies
-	  validate-XmlSchema-type-RestrictionType =
-	    where(?Element(ign1, ign2, <id>, ign4)
-	          ; id
-	          ; (?[] <+ report-error(|"not all elements consumed")))
-	    ; where(?Element(ign1, <id>, ign3, ign4)
-	            ; (\ [x|xs] -> <\ Attribute(QName(None, "base"), attval) -> <validate-attval-XmlSchema-type-StringType> attval \
-	                            ; !xs> x \
-	               ; id)
-	            ; (?[] <+ report-error(|"not all attributes consumed")))
-	    <+ report-error(|"mismatched complex type")
-	
-	
-	strategies
-	  validate-XmlSchema-type-StringType =
-	    where(?Element(ign1, ign2, [<id>], ign4)
-	          ; chardata2string
-	          ; validate-base-string
-	          ; id)
-	    <+ report-error(|"mismatched restriction")
-	
-	
-	strategies
-	  validate-attval-XmlSchema-type-StringType =
-	    where(xml-attr-value2string
-	          ; validate-base-string
-	          ; id)
-	    <+ report-error(|"mismatched restriction")
-
-	strategies
-      validate-base-string =
-        is-string <+ report-error(|"not a string")
+
+rules
+
+  xml-validate =
+    ?Element(
+       ElemName(
+         QName(
+           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+         , name1
+         )
+       )
+     , attributes
+     , contents
+     , ElemName(
+         QName(
+           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+         , name2
+         )
+       )
+     )
+    ; ({err:
+         \ doc at Element(
+                 ElemName(
+                   QName(
+                     Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                   , "schema"
+                   )
+                 )
+               , attributes
+               , contents
+               , ElemName(
+                   QName(
+                     Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                   , "schema"
+                   )
+                 )
+               ) -> err
+           where <(validate-type-SchemaType
+                   <+ ![ ( doc
+                         , <concat-strings> [ "no type definition "
+                                            , "SchemaType"
+                                            , " for element "
+                                            , "schema"
+                                            , " found"
+                                            ]
+                         )
+                       ])> doc => err \
+       }
+       <+ ![ ( <id>
+             , <concat-strings> ["expected element: ", "schema", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+             )
+           ])
+
+
+rules
+
+  validate-type-SchemaType :
+    Element(name1, attrs, cs, name2) -> <conc> (err1, err2)
+    where <(\ [x|xs] -> <({err:
+                            \ att at Attribute(
+                                    AttrName(QName(None, "targetNamespace"))
+                                  , attval
+                                  ) -> err
+                              where <(validate-attval-type-StringType
+                                      <+ ![ ( att
+                                            , <concat-strings> [ "no type definition for "
+                                                               , "StringType"
+                                                               , " of attribute "
+                                                               , "targetNamespace"
+                                                               , " found"
+                                                               ]
+                                            )
+                                          ])> attval => err \
+                          }
+                          <+ ![ ( <id>
+                                , <concat-strings> ["expected attribute: ", "targetNamespace"]
+                                )
+                              ])
+                         ; (is-error <+ !xs)> x \
+            ; if is-error then
+                id
+              else
+                if ?[] then
+                  ![]
+                else
+                  is-list
+                  < map(!(<id>, "unexpected attribute"))
+                  + ![(<id>, "unexpected attribute")]
+                end
+                ; if is-error then id else id end
+              end)> attrs => err1
+          ; <(repeat-strategy(
+                ?x
+                ; \ [x|xs] -> <({err:
+                                  \ doc at Element(
+                                          ElemName(
+                                            QName(
+                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                            , "element"
+                                            )
+                                          )
+                                        , attributes
+                                        , contents
+                                        , ElemName(
+                                            QName(
+                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                            , "element"
+                                            )
+                                          )
+                                        ) -> err
+                                    where <(validate-type-ElementType
+                                            <+ ![ ( doc
+                                                  , <concat-strings> [ "no type definition "
+                                                                     , "ElementType"
+                                                                     , " for element "
+                                                                     , "element"
+                                                                     , " found"
+                                                                     ]
+                                                  )
+                                                ])> doc => err \
+                                }
+                                <+ ![ ( <id>
+                                      , <concat-strings> ["expected element: ", "element", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                      )
+                                    ])
+                               ; (is-error <+ !xs)> x \
+                ; ?serr
+                ; if is-error then
+                    !x
+                    ; ?x
+                    ; \ [x|xs] -> <({err:
+                                      \ doc at Element(
+                                              ElemName(
+                                                QName(
+                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                , "complexType"
+                                                )
+                                              )
+                                            , attributes
+                                            , contents
+                                            , ElemName(
+                                                QName(
+                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                , "complexType"
+                                                )
+                                              )
+                                            ) -> err
+                                        where <(validate-type-ComplexType
+                                                <+ ![ ( doc
+                                                      , <concat-strings> [ "no type definition "
+                                                                         , "ComplexType"
+                                                                         , " for element "
+                                                                         , "complexType"
+                                                                         , " found"
+                                                                         ]
+                                                      )
+                                                    ])> doc => err \
+                                    }
+                                    <+ ![ ( <id>
+                                          , <concat-strings> ["expected element: ", "complexType", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                          )
+                                        ])
+                                   ; (is-error <+ !xs)> x \
+                    ; ?serr
+                    ; if is-error then
+                        !x
+                        ; ?x
+                        ; \ [x|xs] -> <({err:
+                                          \ doc at Element(
+                                                  ElemName(
+                                                    QName(
+                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                    , "simpleType"
+                                                    )
+                                                  )
+                                                , attributes
+                                                , contents
+                                                , ElemName(
+                                                    QName(
+                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                    , "simpleType"
+                                                    )
+                                                  )
+                                                ) -> err
+                                            where <(validate-type-SimpleType
+                                                    <+ ![ ( doc
+                                                          , <concat-strings> [ "no type definition "
+                                                                             , "SimpleType"
+                                                                             , " for element "
+                                                                             , "simpleType"
+                                                                             , " found"
+                                                                             ]
+                                                          )
+                                                        ])> doc => err \
+                                        }
+                                        <+ ![ ( <id>
+                                              , <concat-strings> ["expected element: ", "simpleType", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                              )
+                                            ])
+                                       ; (is-error <+ !xs)> x \
+                        ; ?serr
+                        ; if is-error then !x ; fail <+ !serr else id end
+                        <+ !serr
+                      else
+                        id
+                      end
+                    <+ !serr
+                  else
+                    id
+                  end
+              )
+              ; if is-error then
+                  id
+                else
+                  if ?[] then
+                    ![]
+                  else
+                    is-list
+                    < map(!(<id>, "unexpected element"))
+                    + ![(<id>, "unexpected element")]
+                  end
+                  ; if is-error then id else id end
+                end)> cs => err2
+
+
+rules
+
+  validate-type-ComplexType :
+    Element(name1, attrs, cs, name2) -> <conc> (err1, err2)
+    where <(\ [x|xs] -> <({err:
+                            \ att at Attribute(
+                                    AttrName(QName(None, "name"))
+                                  , attval
+                                  ) -> err
+                              where <(validate-attval-type-StringType
+                                      <+ ![ ( att
+                                            , <concat-strings> [ "no type definition for "
+                                                               , "StringType"
+                                                               , " of attribute "
+                                                               , "name"
+                                                               , " found"
+                                                               ]
+                                            )
+                                          ])> attval => err \
+                          }
+                          <+ ![ ( <id>
+                                , <concat-strings> ["expected attribute: ", "name"]
+                                )
+                              ])
+                         ; (is-error <+ !xs)> x \
+            ; if is-error then
+                id
+              else
+                if ?[] then
+                  ![]
+                else
+                  is-list
+                  < map(!(<id>, "unexpected attribute"))
+                  + ![(<id>, "unexpected attribute")]
+                end
+                ; if is-error then id else id end
+              end)> attrs => err1
+          ; <(((?x
+                ; \ [x|xs] -> <({err:
+                                  \ doc at Element(
+                                          ElemName(
+                                            QName(
+                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                            , "choice"
+                                            )
+                                          )
+                                        , attributes
+                                        , contents
+                                        , ElemName(
+                                            QName(
+                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                            , "choice"
+                                            )
+                                          )
+                                        ) -> err
+                                    where <(validate-type-ComplexTypeNested
+                                            <+ ![ ( doc
+                                                  , <concat-strings> [ "no type definition "
+                                                                     , "ComplexTypeNested"
+                                                                     , " for element "
+                                                                     , "choice"
+                                                                     , " found"
+                                                                     ]
+                                                  )
+                                                ])> doc => err \
+                                }
+                                <+ ![ ( <id>
+                                      , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                      )
+                                    ])
+                               ; (is-error <+ !xs)> x \
+                ; ?serr
+                ; if is-error then
+                    !x
+                    ; ?x
+                    ; \ [x|xs] -> <({err:
+                                      \ doc at Element(
+                                              ElemName(
+                                                QName(
+                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                , "choice"
+                                                )
+                                              )
+                                            , attributes
+                                            , contents
+                                            , ElemName(
+                                                QName(
+                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                , "choice"
+                                                )
+                                              )
+                                            ) -> err
+                                        where <(validate-type-ComplexTypeNestedMax
+                                                <+ ![ ( doc
+                                                      , <concat-strings> [ "no type definition "
+                                                                         , "ComplexTypeNestedMax"
+                                                                         , " for element "
+                                                                         , "choice"
+                                                                         , " found"
+                                                                         ]
+                                                      )
+                                                    ])> doc => err \
+                                    }
+                                    <+ ![ ( <id>
+                                          , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                          )
+                                        ])
+                                   ; (is-error <+ !xs)> x \
+                    ; ?serr
+                    ; if is-error then
+                        !x
+                        ; ?x
+                        ; \ [x|xs] -> <({err:
+                                          \ doc at Element(
+                                                  ElemName(
+                                                    QName(
+                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                    , "sequence"
+                                                    )
+                                                  )
+                                                , attributes
+                                                , contents
+                                                , ElemName(
+                                                    QName(
+                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                    , "sequence"
+                                                    )
+                                                  )
+                                                ) -> err
+                                            where <(validate-type-ComplexTypeNested
+                                                    <+ ![ ( doc
+                                                          , <concat-strings> [ "no type definition "
+                                                                             , "ComplexTypeNested"
+                                                                             , " for element "
+                                                                             , "sequence"
+                                                                             , " found"
+                                                                             ]
+                                                          )
+                                                        ])> doc => err \
+                                        }
+                                        <+ ![ ( <id>
+                                              , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                              )
+                                            ])
+                                       ; (is-error <+ !xs)> x \
+                        ; ?serr
+                        ; if is-error then
+                            !x
+                            ; ?x
+                            ; \ [x|xs] -> <({err:
+                                              \ doc at Element(
+                                                      ElemName(
+                                                        QName(
+                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                        , "sequence"
+                                                        )
+                                                      )
+                                                    , attributes
+                                                    , contents
+                                                    , ElemName(
+                                                        QName(
+                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                        , "sequence"
+                                                        )
+                                                      )
+                                                    ) -> err
+                                                where <(validate-type-ComplexTypeNestedMax
+                                                        <+ ![ ( doc
+                                                              , <concat-strings> [ "no type definition "
+                                                                                 , "ComplexTypeNestedMax"
+                                                                                 , " for element "
+                                                                                 , "sequence"
+                                                                                 , " found"
+                                                                                 ]
+                                                              )
+                                                            ])> doc => err \
+                                            }
+                                            <+ ![ ( <id>
+                                                  , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                  )
+                                                ])
+                                           ; (is-error <+ !xs)> x \
+                            ; ?serr
+                            ; if is-error then !x ; fail <+ !serr else id end
+                            <+ !serr
+                          else
+                            id
+                          end
+                        <+ !serr
+                      else
+                        id
+                      end
+                    <+ !serr
+                  else
+                    id
+                  end)
+               ; if is-error then
+                   id
+                 else
+                   repeat-strategy(
+                     \ [x|xs] -> <({err:
+                                     \ doc at Element(
+                                             ElemName(
+                                               QName(
+                                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                               , "attribute"
+                                               )
+                                             )
+                                           , attributes
+                                           , contents
+                                           , ElemName(
+                                               QName(
+                                                 Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                               , "attribute"
+                                               )
+                                             )
+                                           ) -> err
+                                       where <(validate-type-AttributeType
+                                               <+ ![ ( doc
+                                                     , <concat-strings> [ "no type definition "
+                                                                        , "AttributeType"
+                                                                        , " for element "
+                                                                        , "attribute"
+                                                                        , " found"
+                                                                        ]
+                                                     )
+                                                   ])> doc => err \
+                                   }
+                                   <+ ![ ( <id>
+                                         , <concat-strings> ["expected element: ", "attribute", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                         )
+                                       ])
+                                  ; (is-error <+ !xs)> x \
+                     ; if is-error then id else id end
+                   )
+                   ; if is-error then id else id end
+                 end)
+              ; if is-error then
+                  id
+                else
+                  if ?[] then
+                    ![]
+                  else
+                    is-list
+                    < map(!(<id>, "unexpected element"))
+                    + ![(<id>, "unexpected element")]
+                  end
+                  ; if is-error then id else id end
+                end)> cs => err2
+
+
+rules
+
+  validate-type-ComplexTypeNested :
+    Element(name1, attrs, cs, name2) -> <conc> (err1, err2)
+    where <(if ?[] then
+              ![]
+            else
+              is-list
+              < map(!(<id>, "unexpected attribute"))
+              + ![(<id>, "unexpected attribute")]
+            end
+            ; if is-error then id else id end)> attrs => err1
+          ; <(repeat-strategy(
+                ?x
+                ; \ [x|xs] -> <({err:
+                                  \ doc at Element(
+                                          ElemName(
+                                            QName(
+                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                            , "choice"
+                                            )
+                                          )
+                                        , attributes
+                                        , contents
+                                        , ElemName(
+                                            QName(
+                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                            , "choice"
+                                            )
+                                          )
+                                        ) -> err
+                                    where <(validate-type-ComplexTypeNested
+                                            <+ ![ ( doc
+                                                  , <concat-strings> [ "no type definition "
+                                                                     , "ComplexTypeNested"
+                                                                     , " for element "
+                                                                     , "choice"
+                                                                     , " found"
+                                                                     ]
+                                                  )
+                                                ])> doc => err \
+                                }
+                                <+ ![ ( <id>
+                                      , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                      )
+                                    ])
+                               ; (is-error <+ !xs)> x \
+                ; ?serr
+                ; if is-error then
+                    !x
+                    ; ?x
+                    ; \ [x|xs] -> <({err:
+                                      \ doc at Element(
+                                              ElemName(
+                                                QName(
+                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                , "choice"
+                                                )
+                                              )
+                                            , attributes
+                                            , contents
+                                            , ElemName(
+                                                QName(
+                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                , "choice"
+                                                )
+                                              )
+                                            ) -> err
+                                        where <(validate-type-ComplexTypeNestedMax
+                                                <+ ![ ( doc
+                                                      , <concat-strings> [ "no type definition "
+                                                                         , "ComplexTypeNestedMax"
+                                                                         , " for element "
+                                                                         , "choice"
+                                                                         , " found"
+                                                                         ]
+                                                      )
+                                                    ])> doc => err \
+                                    }
+                                    <+ ![ ( <id>
+                                          , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                          )
+                                        ])
+                                   ; (is-error <+ !xs)> x \
+                    ; ?serr
+                    ; if is-error then
+                        !x
+                        ; ?x
+                        ; \ [x|xs] -> <({err:
+                                          \ doc at Element(
+                                                  ElemName(
+                                                    QName(
+                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                    , "sequence"
+                                                    )
+                                                  )
+                                                , attributes
+                                                , contents
+                                                , ElemName(
+                                                    QName(
+                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                    , "sequence"
+                                                    )
+                                                  )
+                                                ) -> err
+                                            where <(validate-type-ComplexTypeNested
+                                                    <+ ![ ( doc
+                                                          , <concat-strings> [ "no type definition "
+                                                                             , "ComplexTypeNested"
+                                                                             , " for element "
+                                                                             , "sequence"
+                                                                             , " found"
+                                                                             ]
+                                                          )
+                                                        ])> doc => err \
+                                        }
+                                        <+ ![ ( <id>
+                                              , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                              )
+                                            ])
+                                       ; (is-error <+ !xs)> x \
+                        ; ?serr
+                        ; if is-error then
+                            !x
+                            ; ?x
+                            ; \ [x|xs] -> <({err:
+                                              \ doc at Element(
+                                                      ElemName(
+                                                        QName(
+                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                        , "sequence"
+                                                        )
+                                                      )
+                                                    , attributes
+                                                    , contents
+                                                    , ElemName(
+                                                        QName(
+                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                        , "sequence"
+                                                        )
+                                                      )
+                                                    ) -> err
+                                                where <(validate-type-ComplexTypeNestedMax
+                                                        <+ ![ ( doc
+                                                              , <concat-strings> [ "no type definition "
+                                                                                 , "ComplexTypeNestedMax"
+                                                                                 , " for element "
+                                                                                 , "sequence"
+                                                                                 , " found"
+                                                                                 ]
+                                                              )
+                                                            ])> doc => err \
+                                            }
+                                            <+ ![ ( <id>
+                                                  , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                  )
+                                                ])
+                                           ; (is-error <+ !xs)> x \
+                            ; ?serr
+                            ; if is-error then
+                                !x
+                                ; ?x
+                                ; \ [x|xs] -> <({err:
+                                                  \ doc at Element(
+                                                          ElemName(
+                                                            QName(
+                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                            , "element"
+                                                            )
+                                                          )
+                                                        , attributes
+                                                        , contents
+                                                        , ElemName(
+                                                            QName(
+                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                            , "element"
+                                                            )
+                                                          )
+                                                        ) -> err
+                                                    where <(validate-type-ElementType
+                                                            <+ ![ ( doc
+                                                                  , <concat-strings> [ "no type definition "
+                                                                                     , "ElementType"
+                                                                                     , " for element "
+                                                                                     , "element"
+                                                                                     , " found"
+                                                                                     ]
+                                                                  )
+                                                                ])> doc => err \
+                                                }
+                                                <+ ![ ( <id>
+                                                      , <concat-strings> ["expected element: ", "element", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                      )
+                                                    ])
+                                               ; (is-error <+ !xs)> x \
+                                ; ?serr
+                                ; if is-error then !x ; fail <+ !serr else id end
+                                <+ !serr
+                              else
+                                id
+                              end
+                            <+ !serr
+                          else
+                            id
+                          end
+                        <+ !serr
+                      else
+                        id
+                      end
+                    <+ !serr
+                  else
+                    id
+                  end
+              )
+              ; if is-error then
+                  id
+                else
+                  if ?[] then
+                    ![]
+                  else
+                    is-list
+                    < map(!(<id>, "unexpected element"))
+                    + ![(<id>, "unexpected element")]
+                  end
+                  ; if is-error then id else id end
+                end)> cs => err2
+
+
+rules
+
+  validate-type-ComplexTypeNestedMax :
+    Element(name1, attrs, cs, name2) -> <conc> (err1, err2)
+    where <(\ [x|xs] -> <({err:
+                            \ att at Attribute(
+                                    AttrName(QName(None, "maxOccurs"))
+                                  , attval
+                                  ) -> err
+                              where <(validate-attval-type-StringType
+                                      <+ ![ ( att
+                                            , <concat-strings> [ "no type definition for "
+                                                               , "StringType"
+                                                               , " of attribute "
+                                                               , "maxOccurs"
+                                                               , " found"
+                                                               ]
+                                            )
+                                          ])> attval => err \
+                          }
+                          <+ ![ ( <id>
+                                , <concat-strings> ["expected attribute: ", "maxOccurs"]
+                                )
+                              ])
+                         ; (is-error <+ !xs)> x \
+            ; if is-error then
+                id
+              else
+                if ?[] then
+                  ![]
+                else
+                  is-list
+                  < map(!(<id>, "unexpected attribute"))
+                  + ![(<id>, "unexpected attribute")]
+                end
+                ; if is-error then id else id end
+              end)> attrs => err1
+          ; <(repeat-strategy(
+                ?x
+                ; \ [x|xs] -> <({err:
+                                  \ doc at Element(
+                                          ElemName(
+                                            QName(
+                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                            , "choice"
+                                            )
+                                          )
+                                        , attributes
+                                        , contents
+                                        , ElemName(
+                                            QName(
+                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                            , "choice"
+                                            )
+                                          )
+                                        ) -> err
+                                    where <(validate-type-ComplexTypeNested
+                                            <+ ![ ( doc
+                                                  , <concat-strings> [ "no type definition "
+                                                                     , "ComplexTypeNested"
+                                                                     , " for element "
+                                                                     , "choice"
+                                                                     , " found"
+                                                                     ]
+                                                  )
+                                                ])> doc => err \
+                                }
+                                <+ ![ ( <id>
+                                      , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                      )
+                                    ])
+                               ; (is-error <+ !xs)> x \
+                ; ?serr
+                ; if is-error then
+                    !x
+                    ; ?x
+                    ; \ [x|xs] -> <({err:
+                                      \ doc at Element(
+                                              ElemName(
+                                                QName(
+                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                , "choice"
+                                                )
+                                              )
+                                            , attributes
+                                            , contents
+                                            , ElemName(
+                                                QName(
+                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                , "choice"
+                                                )
+                                              )
+                                            ) -> err
+                                        where <(validate-type-ComplexTypeNestedMax
+                                                <+ ![ ( doc
+                                                      , <concat-strings> [ "no type definition "
+                                                                         , "ComplexTypeNestedMax"
+                                                                         , " for element "
+                                                                         , "choice"
+                                                                         , " found"
+                                                                         ]
+                                                      )
+                                                    ])> doc => err \
+                                    }
+                                    <+ ![ ( <id>
+                                          , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                          )
+                                        ])
+                                   ; (is-error <+ !xs)> x \
+                    ; ?serr
+                    ; if is-error then
+                        !x
+                        ; ?x
+                        ; \ [x|xs] -> <({err:
+                                          \ doc at Element(
+                                                  ElemName(
+                                                    QName(
+                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                    , "sequence"
+                                                    )
+                                                  )
+                                                , attributes
+                                                , contents
+                                                , ElemName(
+                                                    QName(
+                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                    , "sequence"
+                                                    )
+                                                  )
+                                                ) -> err
+                                            where <(validate-type-ComplexTypeNested
+                                                    <+ ![ ( doc
+                                                          , <concat-strings> [ "no type definition "
+                                                                             , "ComplexTypeNested"
+                                                                             , " for element "
+                                                                             , "sequence"
+                                                                             , " found"
+                                                                             ]
+                                                          )
+                                                        ])> doc => err \
+                                        }
+                                        <+ ![ ( <id>
+                                              , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                              )
+                                            ])
+                                       ; (is-error <+ !xs)> x \
+                        ; ?serr
+                        ; if is-error then
+                            !x
+                            ; ?x
+                            ; \ [x|xs] -> <({err:
+                                              \ doc at Element(
+                                                      ElemName(
+                                                        QName(
+                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                        , "sequence"
+                                                        )
+                                                      )
+                                                    , attributes
+                                                    , contents
+                                                    , ElemName(
+                                                        QName(
+                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                        , "sequence"
+                                                        )
+                                                      )
+                                                    ) -> err
+                                                where <(validate-type-ComplexTypeNestedMax
+                                                        <+ ![ ( doc
+                                                              , <concat-strings> [ "no type definition "
+                                                                                 , "ComplexTypeNestedMax"
+                                                                                 , " for element "
+                                                                                 , "sequence"
+                                                                                 , " found"
+                                                                                 ]
+                                                              )
+                                                            ])> doc => err \
+                                            }
+                                            <+ ![ ( <id>
+                                                  , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                  )
+                                                ])
+                                           ; (is-error <+ !xs)> x \
+                            ; ?serr
+                            ; if is-error then
+                                !x
+                                ; ?x
+                                ; \ [x|xs] -> <({err:
+                                                  \ doc at Element(
+                                                          ElemName(
+                                                            QName(
+                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                            , "element"
+                                                            )
+                                                          )
+                                                        , attributes
+                                                        , contents
+                                                        , ElemName(
+                                                            QName(
+                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                            , "element"
+                                                            )
+                                                          )
+                                                        ) -> err
+                                                    where <(validate-type-ElementType
+                                                            <+ ![ ( doc
+                                                                  , <concat-strings> [ "no type definition "
+                                                                                     , "ElementType"
+                                                                                     , " for element "
+                                                                                     , "element"
+                                                                                     , " found"
+                                                                                     ]
+                                                                  )
+                                                                ])> doc => err \
+                                                }
+                                                <+ ![ ( <id>
+                                                      , <concat-strings> ["expected element: ", "element", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                      )
+                                                    ])
+                                               ; (is-error <+ !xs)> x \
+                                ; ?serr
+                                ; if is-error then !x ; fail <+ !serr else id end
+                                <+ !serr
+                              else
+                                id
+                              end
+                            <+ !serr
+                          else
+                            id
+                          end
+                        <+ !serr
+                      else
+                        id
+                      end
+                    <+ !serr
+                  else
+                    id
+                  end
+              )
+              ; if is-error then
+                  id
+                else
+                  if ?[] then
+                    ![]
+                  else
+                    is-list
+                    < map(!(<id>, "unexpected element"))
+                    + ![(<id>, "unexpected element")]
+                  end
+                  ; if is-error then id else id end
+                end)> cs => err2
+
+
+rules
+
+  validate-type-ElementType :
+    Element(name1, attrs, cs, name2) -> <conc> (err1, err2)
+    where <(\ [x|xs] -> <({err:
+                            \ att at Attribute(
+                                    AttrName(QName(None, "name"))
+                                  , attval
+                                  ) -> err
+                              where <(validate-attval-type-StringType
+                                      <+ ![ ( att
+                                            , <concat-strings> [ "no type definition for "
+                                                               , "StringType"
+                                                               , " of attribute "
+                                                               , "name"
+                                                               , " found"
+                                                               ]
+                                            )
+                                          ])> attval => err \
+                          }
+                          <+ ![ ( <id>
+                                , <concat-strings> ["expected attribute: ", "name"]
+                                )
+                              ])
+                         ; (is-error <+ !xs)> x \
+            ; if is-error then
+                id
+              else
+                \ [x|xs] -> <({err:
+                                \ att at Attribute(
+                                        AttrName(QName(None, "type"))
+                                      , attval
+                                      ) -> err
+                                  where <(validate-attval-type-StringType
+                                          <+ ![ ( att
+                                                , <concat-strings> [ "no type definition for "
+                                                                   , "StringType"
+                                                                   , " of attribute "
+                                                                   , "type"
+                                                                   , " found"
+                                                                   ]
+                                                )
+                                              ])> attval => err \
+                              }
+                              <+ ![ ( <id>
+                                    , <concat-strings> ["expected attribute: ", "type"]
+                                    )
+                                  ])
+                             ; (is-error <+ !xs)> x \
+                ; if is-error then
+                    id
+                  else
+                    if ?[] then
+                      ![]
+                    else
+                      is-list
+                      < map(!(<id>, "unexpected attribute"))
+                      + ![(<id>, "unexpected attribute")]
+                    end
+                    ; if is-error then id else id end
+                  end
+              end)> attrs => err1
+          ; <(id
+              ; if is-error then
+                  id
+                else
+                  if ?[] then
+                    ![]
+                  else
+                    is-list
+                    < map(!(<id>, "unexpected element"))
+                    + ![(<id>, "unexpected element")]
+                  end
+                  ; if is-error then id else id end
+                end)> cs => err2
+
+
+rules
+
+  validate-type-AttributeType :
+    Element(name1, attrs, cs, name2) -> <conc> (err1, err2)
+    where <(\ [x|xs] -> <({err:
+                            \ att at Attribute(
+                                    AttrName(QName(None, "name"))
+                                  , attval
+                                  ) -> err
+                              where <(validate-attval-type-StringType
+                                      <+ ![ ( att
+                                            , <concat-strings> [ "no type definition for "
+                                                               , "StringType"
+                                                               , " of attribute "
+                                                               , "name"
+                                                               , " found"
+                                                               ]
+                                            )
+                                          ])> attval => err \
+                          }
+                          <+ ![ ( <id>
+                                , <concat-strings> ["expected attribute: ", "name"]
+                                )
+                              ])
+                         ; (is-error <+ !xs)> x \
+            ; if is-error then
+                id
+              else
+                \ [x|xs] -> <({err:
+                                \ att at Attribute(
+                                        AttrName(QName(None, "type"))
+                                      , attval
+                                      ) -> err
+                                  where <(validate-attval-type-StringType
+                                          <+ ![ ( att
+                                                , <concat-strings> [ "no type definition for "
+                                                                   , "StringType"
+                                                                   , " of attribute "
+                                                                   , "type"
+                                                                   , " found"
+                                                                   ]
+                                                )
+                                              ])> attval => err \
+                              }
+                              <+ ![ ( <id>
+                                    , <concat-strings> ["expected attribute: ", "type"]
+                                    )
+                                  ])
+                             ; (is-error <+ !xs)> x \
+                ; if is-error then
+                    id
+                  else
+                    if ?[] then
+                      ![]
+                    else
+                      is-list
+                      < map(!(<id>, "unexpected attribute"))
+                      + ![(<id>, "unexpected attribute")]
+                    end
+                    ; if is-error then id else id end
+                  end
+              end)> attrs => err1
+          ; <(id
+              ; if is-error then
+                  id
+                else
+                  if ?[] then
+                    ![]
+                  else
+                    is-list
+                    < map(!(<id>, "unexpected element"))
+                    + ![(<id>, "unexpected element")]
+                  end
+                  ; if is-error then id else id end
+                end)> cs => err2
+
+
+rules
+
+  validate-type-SimpleType :
+    Element(name1, attrs, cs, name2) -> <conc> (err1, err2)
+    where <(\ [x|xs] -> <({err:
+                            \ att at Attribute(
+                                    AttrName(QName(None, "name"))
+                                  , attval
+                                  ) -> err
+                              where <(validate-attval-type-StringType
+                                      <+ ![ ( att
+                                            , <concat-strings> [ "no type definition for "
+                                                               , "StringType"
+                                                               , " of attribute "
+                                                               , "name"
+                                                               , " found"
+                                                               ]
+                                            )
+                                          ])> attval => err \
+                          }
+                          <+ ![ ( <id>
+                                , <concat-strings> ["expected attribute: ", "name"]
+                                )
+                              ])
+                         ; (is-error <+ !xs)> x \
+            ; if is-error then
+                id
+              else
+                if ?[] then
+                  ![]
+                else
+                  is-list
+                  < map(!(<id>, "unexpected attribute"))
+                  + ![(<id>, "unexpected attribute")]
+                end
+                ; if is-error then id else id end
+              end)> attrs => err1
+          ; <((\ [x|xs] -> <({err:
+                               \ doc at Element(
+                                       ElemName(
+                                         QName(
+                                           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                         , "restriction"
+                                         )
+                                       )
+                                     , attributes
+                                     , contents
+                                     , ElemName(
+                                         QName(
+                                           Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                         , "restriction"
+                                         )
+                                       )
+                                     ) -> err
+                                 where <(validate-type-RestrictionType
+                                         <+ ![ ( doc
+                                               , <concat-strings> [ "no type definition "
+                                                                  , "RestrictionType"
+                                                                  , " for element "
+                                                                  , "restriction"
+                                                                  , " found"
+                                                                  ]
+                                               )
+                                             ])> doc => err \
+                             }
+                             <+ ![ ( <id>
+                                   , <concat-strings> ["expected element: ", "restriction", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                   )
+                                 ])
+                            ; (is-error <+ !xs)> x \
+               ; if is-error then id else id end)
+              ; if is-error then
+                  id
+                else
+                  if ?[] then
+                    ![]
+                  else
+                    is-list
+                    < map(!(<id>, "unexpected element"))
+                    + ![(<id>, "unexpected element")]
+                  end
+                  ; if is-error then id else id end
+                end)> cs => err2
+
+
+rules
+
+  validate-type-RestrictionType :
+    Element(name1, attrs, cs, name2) -> <conc> (err1, err2)
+    where <(\ [x|xs] -> <({err:
+                            \ att at Attribute(
+                                    AttrName(QName(None, "base"))
+                                  , attval
+                                  ) -> err
+                              where <(validate-attval-type-StringType
+                                      <+ ![ ( att
+                                            , <concat-strings> [ "no type definition for "
+                                                               , "StringType"
+                                                               , " of attribute "
+                                                               , "base"
+                                                               , " found"
+                                                               ]
+                                            )
+                                          ])> attval => err \
+                          }
+                          <+ ![ ( <id>
+                                , <concat-strings> ["expected attribute: ", "base"]
+                                )
+                              ])
+                         ; (is-error <+ !xs)> x \
+            ; if is-error then
+                id
+              else
+                if ?[] then
+                  ![]
+                else
+                  is-list
+                  < map(!(<id>, "unexpected attribute"))
+                  + ![(<id>, "unexpected attribute")]
+                end
+                ; if is-error then id else id end
+              end)> attrs => err1
+          ; <(id
+              ; if is-error then
+                  id
+                else
+                  if ?[] then
+                    ![]
+                  else
+                    is-list
+                    < map(!(<id>, "unexpected element"))
+                    + ![(<id>, "unexpected element")]
+                  end
+                  ; if is-error then id else id end
+                end)> cs => err2
+
+
+rules
+
+  validate-type-StringType :
+    Element(name1, attrs, [c], name2) -> err
+    where <chardata2string> c => cstring
+          ; <(validate-base-string
+              <+ ?(t, val)
+                 ; !( t
+                    , <concat-strings> ["no base type definition ", "string", " for value ", val, " found"]
+                    ))> (c, cstring) => err
+
+  validate-type-StringType :
+    Element(name1, attrs, cs, name2) -> [ ( c
+                                          , <concat-strings> ["type mismatch: expected character data, found ", <write-to-string> cs]
+                                          )
+                                        ]
+    where <(not(?[c])
+            + ?[c] ; not(chardata2string))> cs
+
+  validate-attval-type-StringType :
+    attr -> err
+    where <xml-attr-value2string> attr => attrstring
+          ; <(validate-base-string
+              <+ ?(t, val)
+                 ; !( t
+                    , <concat-strings> ["no base type definition ", "string", " for value ", val, " found"]
+                    ))> (attr, attrstring) => err
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj	Fri Mar  4 18:01:23 2011	(r22299)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj	Fri Mar  4 18:32:40 2011	(r22300)
@@ -3,12 +3,15 @@
 import org.sugarj.languages.Java;
 
 import xml.XmlSyntax;
-
+ 
 public sugar XmlSchemaJavaSyntax {
   
   context-free syntax
     JavaId "." "write" "valid" "document" Document ";" -> ObjectStm {cons("ValWriteDoc")}
   
+  desugarings
+    \ ValWriteDoc(ch,doc) -> WriteDoc(ch,doc) \
+  
   sorts
     XsdSugarDec XsdSugarDecHead XsdSugarBody
   
@@ -31,11 +34,11 @@
     XsdDefinition
   
   context-free syntax
-    Document -> XsdDefinition {cons("ValXMLSchemaDoc")}
+    Document -> XsdDefinition {cons("XMLSchemaDoc")}
   
   signature constructors
     ValWriteDoc : JavaId * Document -> ObjectStm
-    ValXMLSchemaDoc : Document -> XsdDefinition
+    XMLSchemaDoc : Document -> XsdDefinition
   
     XsdSugarDec : XsdSugarDecHead * XsdSugarBody -> XsdSugarDec
     XsdSugarDecHead : list(AnnoOrSugarMod) * JavaId -> XsdSugarDecHead

From seba at informatik.uni-marburg.de  Fri Mar  4 19:33:31 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 04 Mar 2011 18:33:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22301 - in
	sugarj/branches/SugarJ-editor-services: editor/syntax
	stdlib/org/sugarj/languages
Message-ID: <20110304183331.EF7B42B8021@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Fri Mar  4 18:33:31 2011
New Revision: 22301
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22301&sc=1

Log:
deactivated error recovery for closing braces in SugarJ

Modified:
   sugarj/branches/SugarJ-editor-services/editor/syntax/SugarJ.sdf
   sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/languages/SugarJ.def

Modified: sugarj/branches/SugarJ-editor-services/editor/syntax/SugarJ.sdf
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/syntax/SugarJ.sdf	Fri Mar  4 18:32:40 2011	(r22300)
+++ sugarj/branches/SugarJ-editor-services/editor/syntax/SugarJ.sdf	Fri Mar  4 18:33:31 2011	(r22301)
@@ -143,3 +143,8 @@
 
   lexical restrictions
     "desugarings" -/- [a-zA-Z0-9\'\-\_]
+
+
+
+  lexical syntax
+         -> "}" {recover, reject}

Modified: sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/languages/SugarJ.def
==============================================================================
--- sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/languages/SugarJ.def	Fri Mar  4 18:32:40 2011	(r22300)
+++ sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/languages/SugarJ.def	Fri Mar  4 18:33:31 2011	(r22301)
@@ -154,4 +154,9 @@
     AnnoOrSugarMod* "editor" "services" JavaId -> EditorServicesDecHead {cons("EditorServicesDecHead")}
     "{" EditorServiceSection* "}"              -> EditorServicesBody    {cons("EditorServicesBody")}
 
+
+
+  lexical syntax
+         -> "}" {recover, reject}
+
   )
\ No newline at end of file

From seba at informatik.uni-marburg.de  Fri Mar  4 19:34:22 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 04 Mar 2011 18:34:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22302 -
	sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver
Message-ID: <20110304183422.7F0822B8011@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Fri Mar  4 18:34:22 2011
New Revision: 22302
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22302&sc=1

Log:
better exception handling in compiler

Modified:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Fri Mar  4 18:33:31 2011	(r22301)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Fri Mar  4 18:34:22 2011	(r22302)
@@ -1,5 +1,7 @@
 package org.sugarj.driver;
 
+import static org.sugarj.driver.Log.log;
+
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
@@ -16,6 +18,7 @@
 import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.jsglr.client.imploder.Token;
 import org.spoofax.terms.StrategoListIterator;
 import org.spoofax.terms.attachments.ParentAttachment;
 import org.spoofax.terms.attachments.ParentTermFactory;
@@ -296,5 +299,19 @@
     
     return newServices;
   }
+
+  public static void setErrorMessage(IStrategoTerm toplevelDecl, String msg) {
+    IToken left = ImploderAttachment.getLeftToken(toplevelDecl);
+    IToken right = ImploderAttachment.getRightToken(toplevelDecl);
+    for (int i = left.getIndex(), max = right.getIndex(); i <= max; i++) {
+      Token tok = ((Token) left.getTokenizer().getTokenAt(i));
+      tok.setError(msg);
+      
+      if (tok.getTokenizer().getInput().charAt(tok.getStartOffset()) == '\n')
+        break;
+    }
+    
+    log.log(msg + ": " + toplevelDecl);
+  }
   
 }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Fri Mar  4 18:33:31 2011	(r22301)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Fri Mar  4 18:34:22 2011	(r22302)
@@ -43,7 +43,6 @@
 import org.spoofax.jsglr.client.InvalidParseTableException;
 import org.spoofax.jsglr.client.ParseTable;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
-import org.spoofax.jsglr.client.imploder.Token;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
@@ -323,6 +322,10 @@
             "could not parse next toplevel declaration in:\n"
                 + remainingInputTerm.toString(),
             -1);
+      
+      String tmpFile = FileCommands.newTempFile("aterm");
+      FileCommands.writeToFile(tmpFile, toplevelDecl.toString());
+      log.log("next toplevel declaration parsed: " + tmpFile);
 
       return new IncrementalParseResult(toplevelDecl, rest);
     } finally {
@@ -428,21 +431,25 @@
       if (javaOutFile == null)
         javaOutFile = javaOutDir + sep + relPackageNameSep() + mainModuleName + ".java";
       
-      if (isApplication(toplevelDecl, "TypeImportDec") || isApplication(toplevelDecl, "TypeImportOnDemandDec")) {
-        if (!Environment.atomicImportParsing)
-          processImportDec(toplevelDecl);
-        else 
-          processImportDecs(toplevelDecl);
-      }
-      else if (isApplication(toplevelDecl, "JavaTypeDec"))
-        processJavaTypeDec(toplevelDecl);
-      else if (isApplication(toplevelDecl, "SugarDec"))
-        processSugarDec(toplevelDecl);
-      else if (isApplication(toplevelDecl, "EditorServicesDec")) 
-        processEditorServicesDec(toplevelDecl);
-      else
-        throw new ParseException("unexpected input at toplevel:\n"
-            + "toplevel declaration: " + toplevelDecl, -1);
+      try {
+        if (isApplication(toplevelDecl, "TypeImportDec") || isApplication(toplevelDecl, "TypeImportOnDemandDec")) {
+          if (!Environment.atomicImportParsing)
+            processImportDec(toplevelDecl);
+          else 
+            processImportDecs(toplevelDecl);
+        }
+        else if (isApplication(toplevelDecl, "JavaTypeDec"))
+          processJavaTypeDec(toplevelDecl);
+        else if (isApplication(toplevelDecl, "SugarDec"))
+          processSugarDec(toplevelDecl);
+        else if (isApplication(toplevelDecl, "EditorServicesDec")) 
+          processEditorServicesDec(toplevelDecl);
+        else
+          throw new IllegalArgumentException("unexpected toplevel declaration, desugaring probably failed");
+      } catch (Exception e) {
+        ATermCommands.setErrorMessage(toplevelDecl, e.getLocalizedMessage());
+        sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
+      }
     }
   }
 
@@ -600,15 +607,8 @@
         log.log("Found imported module on the class path.");
         log.log(files.get(0).toString());
       }
-      else {
-        String msg = "module not found " + importModule;
-        for (int i = ImploderAttachment.getLeftToken(toplevelDecl).getIndex(),  
-               max = ImploderAttachment.getRightToken(toplevelDecl).getIndex(); i <= max; i++)
-          ((Token) inputTreeBuilder.getTokenizer().getTokenAt(i)).setError(msg);
-        
-        log.log("no module found");
-      }
-      
+      else
+        ATermCommands.setErrorMessage(toplevelDecl, "module not found " + importModule);
       
       for (URI importModuleClassFileURI : files)
       {

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Fri Mar  4 18:33:31 2011	(r22301)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Fri Mar  4 18:34:22 2011	(r22302)
@@ -189,6 +189,8 @@
           depList.add(file);
       
       return new ModuleKey(depList, term);
+    } catch (Exception e) {
+      throw new SGLRException(parser.getParser(), "could not parse SDF file " + sdf, e);
     } finally {
       log.endTask();
     }
@@ -264,7 +266,7 @@
     
     parser.getParser().setTreeBuilder(treeBuilder);
 
-    return parser.parse(source, source);
+    return parser.parse(source, "in-file declaration");
   }
   
 //  /**
@@ -351,7 +353,7 @@
     if (string != null)
       return Term.asJavaString(string);
     
-    throw new RuntimeException("pretty printing SDF AST failed: " + term);
+    throw new RuntimeException("pretty printing STR AST failed: " + term);
   }
   
 }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Fri Mar  4 18:33:31 2011	(r22301)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Fri Mar  4 18:34:22 2011	(r22302)
@@ -176,6 +176,8 @@
           depList.add(file);
       
       return new ModuleKey(depList, aterm);
+    } catch (Exception e) {
+      throw new SGLRException(strParser.getParser(), "could not parse STR file " + str, e);
     } finally {
       log.endTask();
     }

From r.t.lindeman at student.tudelft.nl  Sun Mar  6 13:34:24 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Sun, 06 Mar 2011 12:34:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22303 -
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <20110306123424.59DEECC3B3@mx4.tudelft.nl>

Author: RickyLindeman
Date: Sun Mar  6 12:34:23 2011
New Revision: 22303
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22303&sc=1

Log:
Added stratego-debug-transformer (spoofax-project) and stratego-debug-runtime (spoofax-project) as plugins to the feature.xml

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Mar  4 18:34:22 2011	(r22302)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Sun Mar  6 12:34:23 2011	(r22303)
@@ -305,4 +305,18 @@
          version="0.1.1.qualifier"
          unpack="false"/>
 
+   <plugin
+         id="strj_dbg_transformer"
+         download-size="0"
+         install-size="0"
+         version="1.0.0"
+         unpack="false"/>
+
+   <plugin
+         id="strjdbgruntimelib"
+         download-size="0"
+         install-size="0"
+         version="1.0.0"
+         unpack="false"/>
+
 </feature>

From r.t.lindeman at student.tudelft.nl  Sun Mar  6 16:11:27 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Sun, 06 Mar 2011 15:11:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22304 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug.stratego.core org.strategoxt.imp.debug...
Message-ID: <20110306151127.5E2562B8009@mx2.tudelft.nl>

Author: RickyLindeman
Date: Sun Mar  6 15:11:25 2011
New Revision: 22304
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22304&sc=1

Log:
trying to fix stratego.debug plugin dependencies

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Dump.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Sun Mar  6 12:34:23 2011	(r22303)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Sun Mar  6 15:11:25 2011	(r22304)
@@ -4,7 +4,6 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.net.ServerSocket;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -22,7 +21,6 @@
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Path;
-import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.debug.core.DebugPlugin;
 import org.eclipse.debug.core.ILaunch;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath	Sun Mar  6 12:34:23 2011	(r22303)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.classpath	Sun Mar  6 15:11:25 2011	(r22304)
@@ -3,10 +3,6 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="src" path="src"/>
-	<classpathentry exported="true" kind="lib" path="lib/stratego-debug-runtime-java.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/stratego-debug-runtime.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/stratego-transformer.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/strategoxt.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/stratego-transformer-java.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Sun Mar  6 12:34:23 2011	(r22303)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Sun Mar  6 15:11:25 2011	(r22304)
@@ -3,9 +3,7 @@
 Bundle-Name: org.strategoxt.imp.debug.stratego.core
 Bundle-SymbolicName: org.strategoxt.imp.debug.stratego.core;singleton:=true
 Bundle-Version: 0.1.1.qualifier
-Bundle-ClassPath: lib/stratego-debug-runtime-java.jar,
- lib/stratego-debug-runtime.jar,
- lib/stratego-transformer.jar,
+Bundle-ClassPath: lib/stratego-transformer.jar,
  lib/strategoxt.jar,
  lib/stratego-transformer-java.jar,
  .
@@ -33,11 +31,7 @@
    com.sun.jdi.connect,
    com.sun.jdi,
    org.spoofax.interpreter.library",
- org.strategoxt.debug.core.util.table;uses:="org.strategoxt.debug.core.model",
- org.strategoxt.imp.debug.stratego.runtime.strategies;uses:="org.strategoxt.lang,org.spoofax.interpreter.terms,org.spoofax.terms",
- org.strategoxt.imp.debug.stratego.runtime.trans;uses:="org.spoofax.interpreter.core,org.strategoxt.lang,org.spoofax.interpreter.terms",
- org.strategoxt.imp.debug.stratego.transformer.strategies;uses:="org.strategoxt.lang,org.spoofax.interpreter.terms",
- org.strategoxt.imp.debug.stratego.transformer.trans;uses:="org.spoofax.interpreter.core,org.strategoxt.lang,org.spoofax.interpreter.terms"
+ org.strategoxt.debug.core.util.table;uses:="org.strategoxt.debug.core.model"
 Bundle-Vendor: org.strategoxt.imp.debug.stratego.core
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Require-Bundle: org.eclipse.jdt.debug,

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Sun Mar  6 12:34:23 2011	(r22303)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Sun Mar  6 15:11:25 2011	(r22304)
@@ -164,7 +164,7 @@
 		Collection<String> libraryPaths = new ArrayList<String>();
 		libraryPaths.add("."); // the "-I" arguments
 		
-		IPath projectDir = debugSessionSettings.getProjectDirectory();
+		//IPath projectDir = debugSessionSettings.getProjectDirectory();
 		IPath projectStrategoDir = debugSessionSettings.getStrategoFilePath();
 		IPath projectJavaDir = debugSessionSettings.getJavaDirectory();
 		IPath projectClassDir = debugSessionSettings.getClassDirectory();

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Dump.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Dump.java	Sun Mar  6 12:34:23 2011	(r22303)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Dump.java	Sun Mar  6 15:11:25 2011	(r22304)
@@ -20,6 +20,7 @@
         dump(obj, refType, refType);
 	}
 	
+	@SuppressWarnings("unchecked")
 	public static void dump(ObjectReference obj, ReferenceType refType, ReferenceType refTypeBase) 
     {
     	System.out.println(obj);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Sun Mar  6 12:34:23 2011	(r22303)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Sun Mar  6 15:11:25 2011	(r22304)
@@ -18,5 +18,12 @@
   org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: org.strategoxt.imp.debug.stratego.runtime,
-  org.strategoxt.imp.debug.stratego.runtime.strategies
+Export-Package: org.strategoxt.imp.debug.stratego.runtime;
+  uses:="org.eclipse.imp.preferences,
+   org.eclipse.imp.parser,
+   org.eclipse.imp.runtime,
+   org.strategoxt.imp.runtime.services,
+   org.osgi.framework,
+   org.strategoxt.imp.runtime.dynamicloading",
+ org.strategoxt.imp.debug.stratego.runtime.strategies;uses:="org.strategoxt.lang,org.spoofax.interpreter.terms,org.spoofax.terms",
+ org.strategoxt.imp.debug.stratego.runtime.trans;uses:="org.spoofax.interpreter.core,org.strategoxt.lang,org.spoofax.interpreter.terms"

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Sun Mar  6 12:34:23 2011	(r22303)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Sun Mar  6 15:11:25 2011	(r22304)
@@ -18,5 +18,12 @@
  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: org.strategoxt.imp.debug.stratego.transformer.strategies,
- org.strategoxt.imp.debug.stratego.transformer.trans
+Export-Package: org.strategoxt.imp.debug.stratego.transformer;
+  uses:="org.eclipse.imp.preferences,
+   org.eclipse.imp.parser,
+   org.eclipse.imp.runtime,
+   org.strategoxt.imp.runtime.services,
+   org.osgi.framework,
+   org.strategoxt.imp.runtime.dynamicloading",
+ org.strategoxt.imp.debug.stratego.transformer.strategies;uses:="org.strategoxt.lang,org.spoofax.interpreter.terms",
+ org.strategoxt.imp.debug.stratego.transformer.trans;uses:="org.spoofax.interpreter.core,org.strategoxt.lang,org.spoofax.interpreter.terms"

From L.C.L.Kats at tudelft.nl  Sun Mar  6 16:30:41 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 06 Mar 2011 15:30:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22305 - in
	spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/...
Message-ID: <20110306153041.704AF108C042@mx3.tudelft.nl>

Author: LennartKats
Date: Sun Mar  6 15:30:41 2011
New Revision: 22305
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22305&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Sun Mar  6 15:11:25 2011	(r22304)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Sun Mar  6 15:30:41 2011	(r22305)
@@ -408,11 +408,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                    <!-- FIXME: doesn't work with filenames that contain spaces... -->
-                    <arg line="${aster-input}"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Sun Mar  6 15:11:25 2011	(r22304)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Sun Mar  6 15:30:41 2011	(r22305)
@@ -1,3 +1,4 @@
+
 package org.strategoxt.imp.runtime.parser;
 
 import java.io.File;
@@ -160,7 +161,8 @@
 				Debug.stopTimer("File parsed: " + new File(filename).getName());
 			}
 
-			testIncrementalParser(input, filename, result);
+			// UNDONE: disabled incremental parser for now
+			// testIncrementalParser(input, filename, result);
 			return result;
 		} catch (FilterException e) {
 			if (e.getCause() == null && parser.getDisambiguator().getFilterPriorities()) {
@@ -182,6 +184,7 @@
 		if (!incrementalParser.getIncrementalSorts().isEmpty()) {
 			Debug.startTimer();
 			try {
+				IStrategoTerm oldAst = incrementalParser.getLastAst();
 				IStrategoTerm incrementalResult = incrementalParser.parseIncremental(input, filename, getStartSymbol());
 				if (!incrementalResult.equals(expected)) {
 					Environment.logWarning("Incremental parser result inconsistent:\n\n"
@@ -194,6 +197,10 @@
 				Debug.log("Could not incrementally parse AST");
 			} catch (SGLRException e) {
 				Environment.logWarning("Exception in incremental parser", e);
+			} catch (RuntimeException e) {
+				Environment.logWarning("Exception in incremental parser", e);
+			} catch (Error e) {
+				Environment.logException("Exception in incremental parser", e);
 			} finally {
 				Debug.stopTimer("Incrementally parsed: " + new File(filename).getName());
 			}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Sun Mar  6 15:11:25 2011	(r22304)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Sun Mar  6 15:30:41 2011	(r22305)
@@ -36,13 +36,18 @@
 	
 	private final Map<IResource, IStrategoTerm> resultingAsts;
 	
+	private final IStrategoTerm resultingAst;
+	
 	public InputTermBuilder(HybridInterpreter runtime, Map<IResource, IStrategoTerm> resultingAsts) {
 		this.runtime = runtime;
 		this.resultingAsts = resultingAsts;
+		this.resultingAst = null;
 	}
 	
-	public InputTermBuilder(HybridInterpreter runtime) {
-		this(runtime, EMPTY_MAP);
+	public InputTermBuilder(HybridInterpreter runtime, IStrategoTerm resultingAst) {
+		this.runtime = runtime;
+		this.resultingAsts = EMPTY_MAP;
+		this.resultingAst = resultingAst;
 	}
 	
 	public HybridInterpreter getRuntime() {
@@ -63,6 +68,7 @@
 		Context context = runtime.getCompiledContext();
 		IResource resource = SourceAttachment.getResource(node);
 		IStrategoTerm resultingAst = useSourceAst ? null : resultingAsts.get(resource);
+		if (!useSourceAst && this.resultingAst != null) resultingAst = this.resultingAst;
 		IStrategoList termPath = StrategoTermPath.getTermPathWithOrigin(context, resultingAst, node);
 		IStrategoTerm targetTerm;
 		IStrategoTerm rootTerm;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Sun Mar  6 15:11:25 2011	(r22304)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	Sun Mar  6 15:30:41 2011	(r22305)
@@ -310,7 +310,7 @@
 		Context context = observer.getRuntime().getCompiledContext();
 		term = aterm_escape_strings_0_0.instance.invoke(context, term);
 		term = pp_aterm_box_0_0.instance.invoke(context, term);
-		term = box2text_string_0_1.instance.invoke(context, term, Environment.getTermFactory().makeInt(120));
+		term = box2text_string_0_1.instance.invoke(context, term, Environment.getTermFactory().makeInt(80));
 		return (IStrategoString) term;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	Sun Mar  6 15:11:25 2011	(r22304)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	Sun Mar  6 15:30:41 2011	(r22305)
@@ -19,6 +19,8 @@
  */
 public class StrategoReferenceResolver implements IReferenceResolver {
 	
+	public static boolean ALLOW_MULTI_CHILD_PARENT = true; // TODO: set to false for reference resolving??
+	
 	private final StrategoObserver observer;
 	
 	private final List<NodeMapping<String>> resolverFunctions;
@@ -38,7 +40,8 @@
 	}
 
 	public ISimpleTerm getLinkTarget(Object oNode, IParseController parseController) {
-		IStrategoTerm node = InputTermBuilder.getMatchingAncestor((IStrategoTerm) oNode, true);
+		IStrategoTerm innerNode = (IStrategoTerm) oNode;
+		IStrategoTerm node = InputTermBuilder.getMatchingAncestor(innerNode, true);
 		
 		String function = NodeMapping.getFirstAttribute(resolverFunctions, tryGetName(node), getSort(node), 0);
 		if (function == null) function = wildcardResolverFunction;
@@ -53,6 +56,7 @@
 				observer.update(parseController, new NullProgressMonitor());
 			}
 			IStrategoTerm resultTerm = observer.invokeSilent(function, node);
+			if (resultTerm == null) resultTerm = observer.invokeSilent(function, innerNode);
 			return observer.getAstNode(resultTerm, true);
 		} finally {
 			observer.getLock().unlock();
@@ -60,7 +64,8 @@
 	}
 
 	public String getLinkText(Object oNode) {
-		IStrategoTerm node = InputTermBuilder.getMatchingAncestor((IStrategoTerm) oNode, true);
+		IStrategoTerm innerNode = (IStrategoTerm) oNode;
+		IStrategoTerm node = InputTermBuilder.getMatchingAncestor(innerNode, ALLOW_MULTI_CHILD_PARENT);
 		if (node == null)
 			return null;
 		
@@ -74,6 +79,7 @@
 		observer.getLock().lock();
 		try {
 			IStrategoTerm result = observer.invokeSilent(function, node);
+			if (result == null) result = observer.invokeSilent(function, innerNode);
 			if (result == null) {
 				return null;
 			} else if (isTermString(result)) {

From L.C.L.Kats at tudelft.nl  Sun Mar  6 16:30:41 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 06 Mar 2011 15:30:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22306 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/in...
Message-ID: <20110306153041.E68EB2B8017@mx2.tudelft.nl>

Author: LennartKats
Date: Sun Mar  6 15:30:41 2011
New Revision: 22306
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22306&sc=1

Log:
- Fixed a case where the interpreter's one and some would mutable change terms
- Some other interpreter tweaks
- Minor fixes and tweaks in term library
- New primitive for initializing parent pointers

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_clone_and_set_parents.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/UniqueValueTerm.java
      - copied, changed from r22204, strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_concat_strings.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoHashMap.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/One.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Some.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoInt.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoWrapped.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/AbstractWrappedTermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StackTracer.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -112,9 +112,14 @@
     }
     
     public void setTrace(String[] trace) {
-        currentDepth = min(trace.length, currentDepth);
-        failureDepth = trace.length;
-        frames = trace;
+        if (trace.length == 0) { // cannot resize 0-length arrays
+            currentDepth = failureDepth = 0;
+            frames = new String[10]; 
+        } else {
+            currentDepth = min(trace.length, currentDepth);
+            failureDepth = trace.length;
+            frames = trace;
+        }
     }
     
     /**
@@ -154,6 +159,7 @@
             int depth = onlyCurrent ? currentDepth : failureDepth;
             String[] frames = this.frames.clone(); // avoid _most_ race conditions (for UncaughtExceptionHandler)
             
+            // TODO: reverse the order of this trace: latest frames should be at the end...
             for (int i = 0; i < depth; i++) {
                 if (i == MAX_REPORTED_FRAMES - MAX_REPORTED_FRAMES_TAIL) {
                     writer.write("...truncated..." + "\n");

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Tools.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -44,9 +44,9 @@
         // TODO get an instance of the Stratego signature from the interpreter instance. 
         StrategoSignature sign = null;
         
-        if (ctor.equals(sign.getAnno())) {
+        if (ctor == sign.getAnno()) {
             return implode(factory, applAt(t, 0));
-        } else if (ctor.equals(sign.getOp())) {
+        } else if (ctor == sign.getOp()) {
             String ctorName = javaStringAt(t, 0);
             IStrategoTerm[] children = t.getSubterm(1).getAllSubterms();
 
@@ -57,10 +57,10 @@
                 kids = factory.makeListCons(implode(factory, (IStrategoAppl) children[i]), kids);
             }
             return factory.makeAppl(ctr, kids.getAllSubterms());
-        } else if (ctor.equals(sign.getInt())) {
+        } else if (ctor == sign.getInt()) {
             IStrategoString x = (IStrategoString) t.getSubterm(0);
             return factory.makeInt(new Integer(x.stringValue()).intValue());
-        } else if (ctor.equals(sign.getStr())) {
+        } else if (ctor == sign.getStr()) {
             IStrategoAppl x = (IStrategoAppl) t.getSubterm(0);
             return x;
         }
@@ -91,7 +91,7 @@
     }
 
     public static boolean isCons(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getCons());
+        return t.getConstructor() == env.getStrategoSignature().getCons();
     }
 
     public static boolean isTermString(IStrategoTerm t) {
@@ -107,15 +107,15 @@
     }
 
     public static boolean isNil(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getNil());
+        return t.getConstructor() == env.getStrategoSignature().getNil();
     }
 
     public static boolean isSDefT(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getSDefT());
+        return t.getConstructor() == env.getStrategoSignature().getSDefT();
     }
 
     public static boolean isExtSDef(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getExtSDef());
+        return t.getConstructor() == env.getStrategoSignature().getExtSDef();
     }
 
     public static boolean isTermInt(IStrategoTerm t) {
@@ -123,39 +123,39 @@
     }
 
     public static boolean isAnno(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getAnno());
+        return t.getConstructor() == env.getStrategoSignature().getAnno();
     }
 
     public static boolean isOp(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getOp());
+        return t.getConstructor() == env.getStrategoSignature().getOp();
     }
 
     public static boolean isStr(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getStr());
+        return t.getConstructor() == env.getStrategoSignature().getStr();
 }
 
     public static boolean isVar(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getVar());
+        return t.getConstructor() == env.getStrategoSignature().getVar();
     }
 
     public static boolean isExplode(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getExplode());
+        return t.getConstructor() == env.getStrategoSignature().getExplode();
     }
 
     public static boolean isWld(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getWld());
+        return t.getConstructor() == env.getStrategoSignature().getWld();
     }
 
     public static boolean isAs(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getAs());
+        return t.getConstructor() == env.getStrategoSignature().getAs();
     }
 
     public static boolean isReal(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getReal());
+        return t.getConstructor() == env.getStrategoSignature().getReal();
     }
 
     public static boolean isInt(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getInt());
+        return t.getConstructor() == env.getStrategoSignature().getInt();
     }
 
     public static boolean isTermReal(IStrategoTerm t) {
@@ -167,11 +167,11 @@
     }
 
     public static boolean isFunType(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getFunType());
+        return t.getConstructor() == env.getStrategoSignature().getFunType();
     }
 
     public static boolean isConstType(IStrategoAppl t, IContext env) {
-        return t.getConstructor().equals(env.getStrategoSignature().getConstType());
+        return t.getConstructor() == env.getStrategoSignature().getConstType();
     }
 
     public static String javaStringAt(IStrategoTerm t, int i) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_concat_strings.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_concat_strings.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_concat_strings.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -21,6 +21,7 @@
         super("SSL_concat_strings", 0, 1);
     }
 
+    @Override
     public boolean call(IContext env, Strategy[] sargs, IStrategoTerm[] targs) throws InterpreterException {
 
         

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoHashMap.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoHashMap.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoHashMap.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -9,6 +9,7 @@
 import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.terms.AbstractSimpleTerm;
 import org.spoofax.terms.AbstractTermFactory;
+import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.ITermAttachment;
 import org.spoofax.terms.attachments.TermAttachmentType;
 
@@ -39,7 +40,7 @@
     }
 
     public IStrategoList getAnnotations() {
-        return null;
+        return TermFactory.EMPTY_LIST;
     }
 
     public int getStorageType() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/StrategoSet.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -23,6 +23,7 @@
 import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.terms.AbstractSimpleTerm;
 import org.spoofax.terms.AbstractTermFactory;
+import org.spoofax.terms.TermFactory;
 
 public class StrategoSet extends AbstractSimpleTerm implements IStrategoTerm, Serializable {
         
@@ -104,7 +105,7 @@
     }
 
     public IStrategoList getAnnotations() {
-        return null;
+        return TermFactory.EMPTY_LIST;
     }
 
     public int getStorageType() {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/All.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -25,6 +25,7 @@
     }
     
     // TODO: Optimize 'all', based on SRTS_all.java, which doesn't do all the copying and recursion
+    //       (especially for lists!)
 
     public IConstruct eval(IContext env) throws InterpreterException {
         if (DebugUtil.isDebugging()) {
@@ -39,21 +40,23 @@
             case IStrategoTerm.STRING:
                 return getHook().pop().onSuccess(env);
             case IStrategoTerm.APPL:
-                return evalAll(env, 0, t.getAllSubterms().clone());
+                return evalAll(env, true, false, 0, t.getAllSubterms().clone());
             case IStrategoTerm.LIST:
             case IStrategoTerm.TUPLE:
                 // TODO: Optimize - treat IStrategoList as linked list or use iterator?
                 //       (same for some, all)
                 IStrategoTerm[] subterms = t.getAllSubterms();
                 assert isCopy(t, subterms);
-                return evalAll(env, 0, subterms);
+                return evalAll(env, false, false, 0, subterms);
+            case IStrategoTerm.BLOB:
+                return getHook().pop().onSuccess(env);
             default:
                 throw new InterpreterException("Unknown ATerm type " + t.getTermType());
         }
 
     }
     
-    private static boolean isCopy(IStrategoTerm parent, IStrategoTerm[] kids) {
+    static boolean isCopy(IStrategoTerm parent, IStrategoTerm[] kids) {
         if (kids.length > 0) {
             kids[0] = null;
             IStrategoTerm subterm = parent.getSubterm(0);
@@ -63,34 +66,45 @@
         return true;
     }
     
-    protected IConstruct evalAll(IContext env, final int i, final IStrategoTerm[] list) throws InterpreterException
+    protected IConstruct evalAll(IContext env, final boolean needsClone, final boolean madeChanges, final int i, final IStrategoTerm[] list) throws InterpreterException
     {
     	final IStrategoTerm old = env.current();
     	if (i >= old.getSubtermCount()) {
-    		switch (old.getTermType()) {
-    		case IStrategoTerm.APPL:
-    			env.setCurrent(env.getFactory().replaceAppl(((IStrategoAppl)old).getConstructor(), list, (IStrategoAppl)old));
-    			break ;
-    		case IStrategoTerm.LIST:
-    			env.setCurrent(env.getFactory().replaceList(list, (IStrategoList)old));
-    			break ;
-    		case IStrategoTerm.TUPLE:
-    			env.setCurrent(env.getFactory().replaceTuple(list, (IStrategoTuple)old));        			
-    		}
+    	    if (madeChanges) {
+        		switch (old.getTermType()) {
+        		case IStrategoTerm.APPL:
+        			env.setCurrent(env.getFactory().replaceAppl(((IStrategoAppl)old).getConstructor(), list, (IStrategoAppl)old));
+        			break ;
+        		case IStrategoTerm.LIST:
+        			env.setCurrent(env.getFactory().replaceList(list, (IStrategoList)old));
+        			break ;
+        		case IStrategoTerm.TUPLE:
+        			env.setCurrent(env.getFactory().replaceTuple(list, (IStrategoTuple)old));        			
+        		}
+    	    }
     		return getHook().pop().onSuccess(env);
     	}
-    	IStrategoTerm child = list[i];
+    	final IStrategoTerm child = list[i];
     	env.setCurrent(child);
     	final All th = this;
     	body.getHook().push(new Hook(){
     		IStrategoTerm oldterm = old;
-    		public IConstruct onSuccess(IContext env) throws InterpreterException
+    		@Override
+            public IConstruct onSuccess(IContext env) throws InterpreterException
     		{
-    			list[i] = env.current();
-    			env.setCurrent(oldterm);
-    			return evalAll(env, i + 1, list);
+    			IStrategoTerm newChild = env.current();
+    			if (newChild != child) {
+    			    IStrategoTerm[] newList = needsClone ? list.clone() : list;
+    			    newList[i] = newChild;
+    			    env.setCurrent(oldterm);
+    			    return evalAll(env, false, true, i + 1, newList);
+    			} else {
+                    env.setCurrent(oldterm);
+                    return evalAll(env, needsClone, madeChanges, i + 1, list);
+    			}
     		}
-    		public IConstruct onFailure(IContext env) throws InterpreterException
+    		@Override
+            public IConstruct onFailure(IContext env) throws InterpreterException
     		{
     			return th.getHook().pop().onFailure(env);
     		}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Build.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -16,6 +16,7 @@
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;
@@ -248,12 +249,15 @@
             if (r.getTermType() == IStrategoTerm.LIST) {
                 return (IStrategoList) r;
             } else {
-                System.err.println("Warning: trying to build list with illegal tail: " + t.toString());
+            	SSLLibrary.instance(env).getIOAgent().printError("Warning: trying to build list with illegal tail: " + t.toString());
                 return null;
             }
         }
         
-        throw new InterpreterException("List tail must always be a list!");
+        // throw new InterpreterException("List tail must always be a list!");
+        IStrategoTerm r = buildTerm(env, t);
+        SSLLibrary.instance(env).getIOAgent().printError("Warning: trying to build list with illegal tail: " + r.toString());
+        return null;
     }
 
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/One.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/One.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/One.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -15,6 +15,7 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
+import static org.spoofax.interpreter.stratego.All.*;
 
 public class One extends Strategy {
 
@@ -37,9 +38,14 @@
             case IStrategoTerm.STRING:
                 return getHook().pop().onFailure(env);
             case IStrategoTerm.APPL:
+                return eval(env, 0, t.getAllSubterms().clone());
             case IStrategoTerm.LIST:
             case IStrategoTerm.TUPLE:
-                return eval(env, 0, t.getAllSubterms());
+                IStrategoTerm[] subterms = t.getAllSubterms();
+                assert isCopy(t, subterms);
+                return eval(env, 0, subterms);
+            case IStrategoTerm.BLOB:
+                return getHook().pop().onFailure(env);
             default:
                 throw new InterpreterException("Unknown ATerm type " + t.getTermType());
         }
@@ -61,20 +67,19 @@
 			}
 			@Override
 			public IConstruct onSuccess(IContext env) throws InterpreterException {
-				IStrategoTerm[] kids = old.getAllSubterms();
-				kids[n] = env.current();
+				list[n] = env.current();
 				switch (old.getTermType()) {
 				case IStrategoTerm.LIST: {
-					env.setCurrent(env.getFactory().replaceList(kids, (IStrategoList)old));
+					env.setCurrent(env.getFactory().replaceList(list, (IStrategoList)old));
 					break ;
 				}
 				case IStrategoTerm.APPL: {
 					IStrategoAppl appl = (IStrategoAppl)old;
-					env.setCurrent(env.getFactory().replaceAppl(appl.getConstructor(), kids, (IStrategoAppl)old));
+					env.setCurrent(env.getFactory().replaceAppl(appl.getConstructor(), list, (IStrategoAppl)old));
 					break ;
 				}
 				case IStrategoTerm.TUPLE: {
-					env.setCurrent(env.getFactory().replaceTuple(kids, (IStrategoTuple) old));
+					env.setCurrent(env.getFactory().replaceTuple(list, (IStrategoTuple) old));
 					break ;
 				}
 				default: {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Some.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Some.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Some.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -7,6 +7,8 @@
  */
 package org.spoofax.interpreter.stratego;
 
+import static org.spoofax.interpreter.stratego.All.isCopy;
+
 import org.spoofax.DebugUtil;
 import org.spoofax.interpreter.core.IConstruct;
 import org.spoofax.interpreter.core.IContext;
@@ -37,9 +39,14 @@
             case IStrategoTerm.STRING:
             	return getHook().pop().onFailure(env);
             case IStrategoTerm.APPL:
+                return eval(env, 0, false, t.getAllSubterms().clone());
             case IStrategoTerm.LIST:
             case IStrategoTerm.TUPLE:
-            	return eval(env, 0, false, t.getAllSubterms());
+                IStrategoTerm[] subterms = t.getAllSubterms();
+                assert isCopy(t, subterms);
+                return eval(env, 0, false, subterms);
+            case IStrategoTerm.BLOB:
+                return getHook().pop().onFailure(env);
             default:
                 throw new InterpreterException("Unknown ATerm type " + t.getTermType());
         }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/OriginLibrary.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -11,6 +11,7 @@
 
     public OriginLibrary() {
         add(new SSL_EXT_enable_origins());
+        add(new SSL_EXT_clone_and_set_parents());
         add(new SSL_EXT_get_parent());
     }
 

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_clone_and_set_parents.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.jsglr/src/org/spoofax/interpreter/library/jsglr/origin/SSL_EXT_clone_and_set_parents.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -0,0 +1,31 @@
+package org.spoofax.interpreter.library.jsglr.origin;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.interpreter.terms.TermConverter;
+import org.spoofax.terms.attachments.ParentTermFactory;
+
+/**a
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SSL_EXT_clone_and_set_parents extends AbstractPrimitive {
+    
+    public SSL_EXT_clone_and_set_parents() {
+        super("SSL_EXT_clone_and_set_parents", 0, 1);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+    	ITermFactory factory = env.getFactory();
+    	if (!ParentTermFactory.isParentTermFactory(factory))
+    		factory = new ParentTermFactory(factory);
+    	TermConverter converter = new TermConverter(factory);
+    	converter.setOriginEnabled(true);
+    	env.setCurrent(converter.convert(tvars[0]));
+    	return true;
+    }
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoInt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoInt.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoInt.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -10,4 +10,6 @@
 public interface IStrategoInt extends IStrategoTerm {
 
     public int intValue();
+    
+    public boolean isUniqueValueTerm();
 }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -1,6 +1,13 @@
 package org.spoofax.interpreter.terms;
 
-import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+import static org.spoofax.interpreter.terms.IStrategoTerm.APPL;
+import static org.spoofax.interpreter.terms.IStrategoTerm.BLOB;
+import static org.spoofax.interpreter.terms.IStrategoTerm.CTOR;
+import static org.spoofax.interpreter.terms.IStrategoTerm.INT;
+import static org.spoofax.interpreter.terms.IStrategoTerm.LIST;
+import static org.spoofax.interpreter.terms.IStrategoTerm.REAL;
+import static org.spoofax.interpreter.terms.IStrategoTerm.STRING;
+import static org.spoofax.interpreter.terms.IStrategoTerm.TUPLE;
 
 import java.util.HashMap;
 
@@ -17,10 +24,19 @@
     private final HashMap<IStrategoConstructor, IStrategoConstructor> constructors =
     	new HashMap<IStrategoConstructor, IStrategoConstructor>();
     
+    private boolean isOriginEnabled;
+    
     public TermConverter(ITermFactory factory) {
         this.factory = factory;
     }
     
+    /**
+     * Sets whether to use origin tracking when converting terms.
+     */
+    public void setOriginEnabled(boolean isOriginEnabled) {
+		this.isOriginEnabled = isOriginEnabled;
+	}
+    
     public IStrategoTerm[] convertAll(IStrategoTerm[] terms) {
         IStrategoTerm[] results = new IStrategoTerm[terms.length];
         for (int i = 0; i < terms.length; i++) {
@@ -34,6 +50,7 @@
     }
     
     public IStrategoTerm convert(IStrategoTerm term) {
+    	IStrategoTerm result;
         switch (term.getTermType()) {
             // APPL and LIST are inlined to help stack usage
             case APPL:
@@ -44,7 +61,7 @@
                     subTerms[i] = convert(terms[i]);
                 }
                 IStrategoConstructor ctor = convert(appl.getConstructor());
-                return annotate(factory.makeAppl(ctor, subTerms), appl);
+                result = annotate(factory.makeAppl(ctor, subTerms), appl); break;
             case LIST:
                 IStrategoList list = (IStrategoList) term;
                 IStrategoTerm[] terms2 = list.getAllSubterms();
@@ -52,16 +69,19 @@
                 for (int i = 0; i < terms2.length; i++) {
                     subTerms2[i] = convert(terms2[i]);
                 }
-                return annotate(factory.makeList(subTerms2), list);
-            case CTOR: return convert((IStrategoConstructor) term);
-            case INT: return convert((IStrategoInt) term);
-            case REAL: return convert((IStrategoReal) term);
-            case STRING: return convert((IStrategoString) term);
-            case TUPLE: return convert((IStrategoTuple) term);
-            case BLOB: return term;
+                result =  annotate(factory.makeList(subTerms2), list); break;
+            case CTOR: result =  convert((IStrategoConstructor) term); break;
+            case INT: result =  convert((IStrategoInt) term); break;
+            case REAL: result =  convert((IStrategoReal) term); break;
+            case STRING: result =  convert((IStrategoString) term); break;
+            case TUPLE: result =  convert((IStrategoTuple) term); break;
+            case BLOB: result =  term; break;
             default:
                 throw new IllegalStateException("Unknown term type: " + term.getClass().getSimpleName());
         }
+        if (isOriginEnabled)
+        	factory.replaceTerm(result, term);
+        return result;
     }
 
     public final IStrategoAppl convert(IStrategoAppl term) {
@@ -80,7 +100,12 @@
     }
 
     public IStrategoInt convert(IStrategoInt term) {
-        return annotate(factory.makeInt(term.intValue()), term);
+    	if (term.isUniqueValueTerm()) {
+    		// re-creating this one destroys term equality and creates subtle bugs..
+    		throw new IllegalArgumentException("Cannot recreate a tree that contains <newterm> terms:" + term);
+    	} else {
+    		return annotate(factory.makeInt(term.intValue()), term);
+    	}
     }
 
     public final IStrategoList convert(IStrategoList term) {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/LazyTerm.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -153,6 +153,12 @@
 		return ((IStrategoInt) getWrapped()).intValue();
 	}
 
+	public boolean isUniqueValueTerm() {
+		if (getTermType() != INT)
+			throw new TermWrapperException("Called isUniqueValueTerm() on a term that is not of type INT");
+		return ((IStrategoInt) getWrapped()).isUniqueValueTerm();
+	}
+
 	public double realValue() {
 		if (getTermType() != REAL)
 			throw new TermWrapperException("Called realValue() on a term that is not of type REAL");

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -47,6 +47,10 @@
     public int getTermType() {
         return IStrategoTerm.INT;
     }
+    
+    public boolean isUniqueValueTerm() {
+    	return false;
+    }
 
     @Override
     protected boolean doSlowMatch(IStrategoTerm second, int commonStorageType) {

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoWrapped.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoWrapped.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoWrapped.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -92,7 +92,6 @@
 		wrapped.writeAsString(output, maxDepth);
 	}
 	
-	
 	// Semi-specialized accessors
 
 	public final IStrategoTerm get(int index) {
@@ -153,6 +152,12 @@
 		return ((IStrategoInt) wrapped).intValue();
 	}
 
+	public boolean isUniqueValueTerm() {
+		if (getTermType() != INT)
+			throw new TermWrapperException("Called isUniqueValueTerm() on a term that is not of type INT");
+		return ((IStrategoInt) wrapped).isUniqueValueTerm();
+	}
+
 	public double realValue() {
 		if (getTermType() != REAL)
 			throw new TermWrapperException("Called realValue() on a term that is not of type REAL");

Copied and modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/UniqueValueTerm.java (from r22204, strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java)
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java	Fri Feb 25 15:51:25 2011	(r22204, copy source)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/UniqueValueTerm.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -1,4 +1,4 @@
-package org.strategoxt.lang;
+package org.spoofax.terms;
 
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -13,84 +13,79 @@
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class SRTS_EXT_newint_0_0 extends Strategy {
-	public static SRTS_EXT_newint_0_0 instance = new SRTS_EXT_newint_0_0();
+public final class UniqueValueTerm extends AbstractSimpleTerm implements IStrategoInt {
+	
+	private static final AtomicInteger counter = new AtomicInteger();
+	
+	private final int value = counter.incrementAndGet();
+
+	public int intValue() {
+		return value;
+	}
+
+	public IStrategoTerm[] getAllSubterms() {
+		return TermFactory.EMPTY;
+	}
+
+	public IStrategoList getAnnotations() {
+		return TermFactory.EMPTY_LIST;
+	}
+
+	public int getStorageType() {
+		return MUTABLE; // allow attachments
+	}
+
+	public IStrategoTerm getSubterm(int index) {
+		throw new UnsupportedOperationException();
+	}
+
+	public int getSubtermCount() {
+		return 0;
+	}
+
+	public int getTermType() {
+		return INT;
+	}
+	
+	public boolean isUniqueValueTerm() {
+		return true;
+	}
+
+	public void prettyPrint(ITermPrinter pp) {
+		pp.print(String.valueOf(value));
+	}
+
+	public boolean match(IStrategoTerm second) {
+		return second == this;
+	}
+	
+	@Override
+	public boolean equals(Object obj) {
+		return obj == this;
+	}
 	
 	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		return new UniqueValue();
+	public int hashCode() {
+		// Always different from basic stratego int hash
+		return (449 * value ^ 7841) + 1;
 	}
 	
-	private static final class UniqueValue extends AbstractSimpleTerm implements IStrategoInt {
-		
-		private static final AtomicInteger counter = new AtomicInteger();
-		
-		private final int value = counter.incrementAndGet();
-
-		public int intValue() {
-			return value;
-		}
-
-		public IStrategoTerm[] getAllSubterms() {
-			return Term.NO_TERMS;
-		}
-
-		public IStrategoList getAnnotations() {
-			return TermFactory.EMPTY_LIST;
-		}
-
-		public int getStorageType() {
-			return IMMUTABLE;
-		}
-
-		public IStrategoTerm getSubterm(int index) {
-			throw new UnsupportedOperationException();
-		}
-
-		public int getSubtermCount() {
-			return 0;
-		}
-
-		public int getTermType() {
-			return INT;
-		}
-
-		public void prettyPrint(ITermPrinter pp) {
-			pp.print(String.valueOf(value));
-		}
-
-		public boolean match(IStrategoTerm second) {
-			return second == this;
-		}
-		
-		@Override
-		public boolean equals(Object obj) {
-			return obj == this;
-		}
-		
-		@Override
-		public int hashCode() {
-			// Always different from basic stratego int hash
-			return (449 * value ^ 7841) + 1;
-		}
-		
-		@Override
-		public String toString() {
-			return String.valueOf(value);
-		}
-
-		public String toString(int maxDepth) {
-			return toString();
-		}
-
-		public void writeAsString(Appendable output, int maxDepth)
-				throws IOException {
-			output.append(toString());
-		}
-
-		public boolean isList() {
-			return false;
-		}
-		
+	@Override
+	public String toString() {
+		return String.valueOf(value);
+	}
+
+	public String toString(int maxDepth) {
+		return toString();
+	}
+
+	public void writeAsString(Appendable output, int maxDepth)
+			throws IOException {
+		output.append(toString());
+	}
+
+	public boolean isList() {
+		return false;
 	}
-}
+	
+}
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/AbstractWrappedTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/AbstractWrappedTermFactory.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/AbstractWrappedTermFactory.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -68,4 +68,9 @@
 	public IStrategoString tryMakeUniqueString(String name) {
 		return baseFactory.tryMakeUniqueString(name);
 	}
+	
+	@Override
+	public IStrategoTerm replaceTerm(IStrategoTerm term, IStrategoTerm old) {
+		return baseFactory.replaceTerm(term, old);
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/ParentTermFactory.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -131,5 +131,10 @@
 		IStrategoTerm i = factory.makeInt(42);
 		return getParent(factory.makeTuple(i).getSubterm(0)) != null;
 	}
+	
+	@Override
+	public IStrategoTerm replaceTerm(IStrategoTerm term, IStrategoTerm old) {
+		return baseFactory.replaceTerm(term, old);
+	}
 
 }

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java	Sun Mar  6 15:30:41 2011	(r22305)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_newint_0_0.java	Sun Mar  6 15:30:41 2011	(r22306)
@@ -1,14 +1,7 @@
 package org.strategoxt.lang;
 
-import java.io.IOException;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import org.spoofax.interpreter.terms.IStrategoInt;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
-import org.spoofax.interpreter.terms.ITermPrinter;
-import org.spoofax.terms.AbstractSimpleTerm;
-import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.UniqueValueTerm;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
@@ -18,79 +11,6 @@
 	
 	@Override
 	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		return new UniqueValue();
-	}
-	
-	private static final class UniqueValue extends AbstractSimpleTerm implements IStrategoInt {
-		
-		private static final AtomicInteger counter = new AtomicInteger();
-		
-		private final int value = counter.incrementAndGet();
-
-		public int intValue() {
-			return value;
-		}
-
-		public IStrategoTerm[] getAllSubterms() {
-			return Term.NO_TERMS;
-		}
-
-		public IStrategoList getAnnotations() {
-			return TermFactory.EMPTY_LIST;
-		}
-
-		public int getStorageType() {
-			return IMMUTABLE;
-		}
-
-		public IStrategoTerm getSubterm(int index) {
-			throw new UnsupportedOperationException();
-		}
-
-		public int getSubtermCount() {
-			return 0;
-		}
-
-		public int getTermType() {
-			return INT;
-		}
-
-		public void prettyPrint(ITermPrinter pp) {
-			pp.print(String.valueOf(value));
-		}
-
-		public boolean match(IStrategoTerm second) {
-			return second == this;
-		}
-		
-		@Override
-		public boolean equals(Object obj) {
-			return obj == this;
-		}
-		
-		@Override
-		public int hashCode() {
-			// Always different from basic stratego int hash
-			return (449 * value ^ 7841) + 1;
-		}
-		
-		@Override
-		public String toString() {
-			return String.valueOf(value);
-		}
-
-		public String toString(int maxDepth) {
-			return toString();
-		}
-
-		public void writeAsString(Appendable output, int maxDepth)
-				throws IOException {
-			output.append(toString());
-		}
-
-		public boolean isList() {
-			return false;
-		}
-		
+		return new UniqueValueTerm();
 	}
 }

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From r.t.lindeman at student.tudelft.nl  Sun Mar  6 17:39:37 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Sun, 06 Mar 2011 16:39:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22307 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.stratego.runtime
	org.strategoxt.imp.debug.stratego.transformer
Message-ID: <20110306163937.C4E342B8009@mx2.tudelft.nl>

Author: RickyLindeman
Date: Sun Mar  6 16:39:36 2011
New Revision: 22307
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22307&sc=1

Log:
trying to fix stratego.debug plugin continuous build

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml	Sun Mar  6 15:30:41 2011	(r22306)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml	Sun Mar  6 16:39:36 2011	(r22307)
@@ -29,7 +29,7 @@
 	
 	<!-- build external strategies defined in java -->
 	<!-- <available file="${build}/strjdebugruntime/strategies/Main.class" property="java.jar.enabled"/> -->
-	<available file="${src-gen}/${build.stratego.external.strategies.location}/Main.java" property="java.jar.enabled"/>
+	<available file="${basedir}/${src-gen}/${build.stratego.external.strategies.location}/Main.java" property="java.jar.enabled"/>
 		
 	<!-- Imports -->
 	<property name="build.sdf.imports" value="" />

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml	Sun Mar  6 15:30:41 2011	(r22306)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml	Sun Mar  6 16:39:36 2011	(r22307)
@@ -31,7 +31,7 @@
 	
 	<!-- build external strategies defined in java -->
 	<!-- <available file="${build}/strjdebugruntime/strategies/Main.class" property="java.jar.enabled"/> -->
-	<available file="${src-gen}/${build.stratego.external.strategies.location}/Main.java" property="java.jar.enabled"/>
+	<available file="${basedir}/${src-gen}/${build.stratego.external.strategies.location}/Main.java" property="java.jar.enabled"/>
 		
 		
 	<!-- Imports -->

From R.B.Vermaas at tudelft.nl  Sun Mar  6 20:45:21 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Sun, 06 Mar 2011 19:45:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22308 - hydra/jobs
Message-ID: <20110306194521.1D73A108C052@mx3.tudelft.nl>

Author: rob
Date: Sun Mar  6 19:45:20 2011
New Revision: 22308
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22308&sc=1

Log:
disable testing again, one day we'll know how to build it ;-)

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Sun Mar  6 16:39:36 2011	(r22307)
+++ hydra/jobs/spoofax-imp.nix	Sun Mar  6 19:45:20 2011	(r22308)
@@ -165,7 +165,7 @@
 
             mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e || true
 
-            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer org.strategoxt.imp.testing
+            for e in *.editors.* org.strategoxt.imp.debug.stratego.runtime org.strategoxt.imp.debug.stratego.transformer #org.strategoxt.imp.testing
             do
                 mkdir -p $e/utils/
                 cp -v org.strategoxt.imp.generator/lib/*.jar $e/utils/

From R.B.Vermaas at tudelft.nl  Sun Mar  6 21:08:58 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Sun, 06 Mar 2011 20:08:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22309 - hydra/jobs
Message-ID: <20110306200858.DCC16108C00A@mx3.tudelft.nl>

Author: rob
Date: Sun Mar  6 20:08:58 2011
New Revision: 22309
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22309&sc=1

Log:
remove non-working hack

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Sun Mar  6 19:45:20 2011	(r22308)
+++ hydra/jobs/spoofax-imp.nix	Sun Mar  6 20:08:58 2011	(r22309)
@@ -174,8 +174,6 @@
 	            cd $e
                 export LOCALCLASSPATH="utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar:target/classes"
                 export ANT_OPTS="-Xss8m -Xmx768m"
-                    mv editor/java backup
-                    mkdir -p editor/java                 
 	            ant -verbose -f build.main.xml -Declipse.spoofaximp.jars=utils/ -Declipse.home=$eclipsefakehome
 	            cd ..
 	            stopNest

From r.t.lindeman at student.tudelft.nl  Sun Mar  6 23:06:16 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Sun, 06 Mar 2011 22:06:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22310 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.stratego.core/META-INF
	org.strategoxt.imp.debug.stratego.test/META-INF
Message-ID: <20110306220616.A8C1CCC438@mx4.tudelft.nl>

Author: RickyLindeman
Date: Sun Mar  6 22:06:16 2011
New Revision: 22310
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22310&sc=1

Log:
trying to fix stratego.debug plugin continuous build

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Sun Mar  6 20:08:58 2011	(r22309)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Sun Mar  6 22:06:16 2011	(r22310)
@@ -3,9 +3,7 @@
 Bundle-Name: org.strategoxt.imp.debug.stratego.core
 Bundle-SymbolicName: org.strategoxt.imp.debug.stratego.core;singleton:=true
 Bundle-Version: 0.1.1.qualifier
-Bundle-ClassPath: lib/stratego-transformer.jar,
- lib/strategoxt.jar,
- lib/stratego-transformer-java.jar,
+Bundle-ClassPath: lib/strategoxt.jar,
  .
 Export-Package: org.strategoxt.debug.core;uses:="org.eclipse.core.runtime,org.osgi.framework",
  org.strategoxt.debug.core.control;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF	Sun Mar  6 20:08:58 2011	(r22309)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF	Sun Mar  6 22:06:16 2011	(r22310)
@@ -6,6 +6,8 @@
 Require-Bundle: org.strategoxt.imp.debug.stratego.core,
  org.junit4;bundle-version="4.5.0",
  org.strategoxt.strj,
- org.eclipse.core.runtime
+ org.eclipse.core.runtime,
+ strj_dbg_transformer,
+ strjdbgruntimelib
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ClassPath: .

From L.C.L.Kats at tudelft.nl  Mon Mar  7 12:07:20 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 07 Mar 2011 11:07:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22311 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: .
	editor/java/org/strategoxt/imp/testing
	editor/java/org/strategoxt/imp/testing/strategies trans
Message-ID: <20110307110720.148DFCC2E0@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Mar  7 11:07:19 2011
New Revision: 22311
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22311&sc=1

Log:
testing language fixes

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java
      - copied, changed from r22205, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_0.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_0.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Sun Mar  6 22:06:16 2011	(r22310)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Mon Mar  7 11:07:19 2011	(r22311)
@@ -312,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -334,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java	Sun Mar  6 22:06:16 2011	(r22310)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java	Mon Mar  7 11:07:19 2011	(r22311)
@@ -76,7 +76,8 @@
 		int endIndex = endToken.getIndex();
 		
 		// Reassign new starting token to parsed fragment (skipping whitespace)
-		if (startToken.getKind() == TK_LAYOUT && startIndex + 1 < fragmentTokenizer.getTokenCount())
+		if (startToken.getKind() == TK_LAYOUT && startIndex + 1 < fragmentTokenizer.getTokenCount()
+				&& startIndex < endIndex)
 			startToken = fragmentTokenizer.getTokenAt(++startIndex);
 		moveTokenErrorsToRange(fragmentTokenizer, startIndex, endIndex);
 		reassignTokenRange(fragmentTokenizer, startIndex, endIndex);

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java	Sun Mar  6 22:06:16 2011	(r22310)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java	Mon Mar  7 11:07:19 2011	(r22311)
@@ -33,7 +33,12 @@
     return descriptor;
   }
 
-  private static void createDescriptor()
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    SpoofaxTestingParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
   { 
     try
     { 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Sun Mar  6 22:06:16 2011	(r22310)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Mon Mar  7 11:07:19 2011	(r22311)
@@ -15,7 +15,7 @@
         		   plugin_strategy_invoke_0_2.instance,
         		   plugin_strategy_evaluate_1_2.instance,
         		   plugin_get_property_values_0_1.instance,
-        		   get_service_input_term_0_0.instance,
+        		   get_service_input_term_0_1.instance,
         		   open_editor_0_0.instance,
         		   get_completion_input_term_0_1.instance });
          }

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java (from r22205, spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_0.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_0.java	Fri Feb 25 17:30:55 2011	(r22205, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/get_service_input_term_0_1.java	Mon Mar  7 11:07:19 2011	(r22311)
@@ -1,23 +1,30 @@
 package org.strategoxt.imp.testing.strategies;
 
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.services.InputTermBuilder;
+import org.strategoxt.imp.runtime.services.StrategoReferenceResolver;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
-public class get_service_input_term_0_0 extends Strategy {
+public class get_service_input_term_0_1 extends Strategy {
 
-	public static get_service_input_term_0_0 instance = new get_service_input_term_0_0();
+	public static get_service_input_term_0_1 instance = new get_service_input_term_0_1();
 
 	@Override
-	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
-		current = InputTermBuilder.getMatchingAncestor(current, false);
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm analyzedAst) {
+		// TODO: adapt to latest strategy of StrategoReferenceResolver?
+		if (isTermAppl(analyzedAst) && ((IStrategoAppl) analyzedAst).getName().equals("None"))
+			analyzedAst = null;
+		current = InputTermBuilder.getMatchingAncestor(current, StrategoReferenceResolver.ALLOW_MULTI_CHILD_PARENT);
 		HybridInterpreter runtime = HybridInterpreter.getInterpreter(context);
-		InputTermBuilder inputBuilder = new InputTermBuilder(runtime);
+		InputTermBuilder inputBuilder = new InputTermBuilder(runtime, analyzedAst);
 		return inputBuilder.makeInputTerm(current, true);
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Sun Mar  6 22:06:16 2011	(r22310)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/plugin_strategy_invoke_0_2.java	Mon Mar  7 11:07:19 2011	(r22311)
@@ -42,6 +42,7 @@
 				current = factory.makeAppl(factory.makeConstructor("Some", 1), current);
 				return current;
 			} else {
+				// TODO: show only foreign part of stack trace (without using setTrace(), won't work here)
 				IStrategoString trace = factory.makeString("rewriting failed\n" + context.getTraceString());
 				//if (printTrace.invoke(context, trace) != null)
 				//	observer.reportRewritingFailed();

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Sun Mar  6 22:06:16 2011	(r22310)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Mon Mar  7 11:07:19 2011	(r22311)
@@ -52,14 +52,14 @@
   check-expectation(|ast, messages) :
     ResolvesTo(from, to) -> error
     where
-      [from']   := <find-matching-ids(|ast)> from;
-      [to']     := <find-matching-ids(|ast)> to
+      [from'] := <find-matching-ids(|ast)> from;
+      [to']   := <find-matching-ids(|ast)> to
     with
       from''    := <get-service-input-term> from';
       resolvers := <spt-get-reference-resolvers>;
-      results   := <map(execute-service(|from''))> resolvers
+      results   := <debug(!"a"); map(execute-service(|from''); debug(!"b"))> resolvers
     where
-      switch !results
+      switch !results; debug(!"results:")
         case one(is-successful-resolver(|to')): fail
         case one(?Some(t)):  error := $[Unexpected result: [<write-to-string> t]]
         case one(?Error(m)): error := $[Unexpected error: [m]]
@@ -72,4 +72,4 @@
     where
       !expected => wildcard()
     <+
-      oncetd(origin-equal(|expected))
\ No newline at end of file
+      debug(!1); oncetd(origin-equal(|expected)); debug(!2)

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Sun Mar  6 22:06:16 2011	(r22310)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Mon Mar  7 11:07:19 2011	(r22311)
@@ -38,17 +38,25 @@
         plugin-strategy-invoke(|<Language>, "editor-init")
       ; input'    := (input, <project-path>, <InputFile>)
       ; messages  := <plugin-strategy-invoke(|<Language>, <spt-get-observer>)> input'
-      ; messages' := <try(?Some(<id>)); try(\(t,e,w,n)->(e,w,n)\)>  messages
+      ; messages' := <strip-and-record-analyzed-ast <+ reset-analyzed-ast> <try(?Some(<id>))> messages
       else
         messages' := ([], [], [])
       end
-    ; if !expectations => [] then
+    ; if !expectations; debug(!"expects") => [] then
         warnings := <filter(check-expectation(|input, messages'))> [Success()]
       else
         warnings := <filter(check-expectation(|input, messages'))> expectations
       end
     ; not([])
 
+  strip-and-record-analyzed-ast:
+    (t, e, w, n) -> (e, w, n)
+    where
+      rules(LastAnalyzedAst := t)
+
+  reset-analyzed-ast =
+      rules(LastAnalyzedAst := None())
+
   check-warning:
   	annotated(_, _) -> $[Matching with annotations not implemented(?)] // TODO: extend aterm-eq
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Sun Mar  6 22:06:16 2011	(r22310)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Mon Mar  7 11:07:19 2011	(r22311)
@@ -156,9 +156,10 @@
     | <spt-get-parsetable>
     )    
   
+  get-service-input-term =
+    get-service-input-term(|<LastAnalyzedAst>)
+  
   execute-service(|node):
     resolver -> <plugin-strategy-invoke(|<Language>, resolver)> node
   
-  external get-service-input-term(|)
-
-        
\ No newline at end of file
+  external get-service-input-term(|analyzed-ast)

From L.C.L.Kats at tudelft.nl  Mon Mar  7 12:08:11 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 07 Mar 2011 11:08:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22312 - in
	spoofax-imp/trunk/experimental: . NamingExperiment
	NamingExperiment/.externalToolBuilders
	NamingExperiment/META-INF NamingExperiment/editor
	NamingExperiment/edi...
Message-ID: <20110307110811.89160108C084@mx3.tudelft.nl>

Author: LennartKats
Date: Mon Mar  7 11:08:11 2011
New Revision: 22312
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22312&sc=1

Log:
an experiment with names

Added:
   spoofax-imp/trunk/experimental/
   spoofax-imp/trunk/experimental/NamingExperiment/
   spoofax-imp/trunk/experimental/NamingExperiment/.classpath
   spoofax-imp/trunk/experimental/NamingExperiment/.externalToolBuilders/
   spoofax-imp/trunk/experimental/NamingExperiment/.externalToolBuilders/NamingExperiment build.main.xml.launch
   spoofax-imp/trunk/experimental/NamingExperiment/.project
   spoofax-imp/trunk/experimental/NamingExperiment/META-INF/
   spoofax-imp/trunk/experimental/NamingExperiment/META-INF/MANIFEST.MF
   spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml
   spoofax-imp/trunk/experimental/NamingExperiment/build.main.xml
   spoofax-imp/trunk/experimental/NamingExperiment/build.properties
   spoofax-imp/trunk/experimental/NamingExperiment/editor/
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Colorer.esv
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Completions.esv
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Folding.esv
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Outliner.esv
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-References.esv
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Syntax.esv
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment.main.esv
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/Activator.java
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/NamingExperimentParseController.java
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/NamingExperimentParseControllerGenerated.java
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/NamingExperimentValidator.java
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/InteropRegisterer.java
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/Main.java
   spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/java_strategy_0_0.java
   spoofax-imp/trunk/experimental/NamingExperiment/lib/
   spoofax-imp/trunk/experimental/NamingExperiment/lib/editor-common.generated.str
   spoofax-imp/trunk/experimental/NamingExperiment/lib/refactor-common.generated.str
   spoofax-imp/trunk/experimental/NamingExperiment/plugin.xml
   spoofax-imp/trunk/experimental/NamingExperiment/syntax/
   spoofax-imp/trunk/experimental/NamingExperiment/syntax/Common.sdf
   spoofax-imp/trunk/experimental/NamingExperiment/syntax/NamingExperiment.pp
   spoofax-imp/trunk/experimental/NamingExperiment/syntax/NamingExperiment.sdf
   spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx
   spoofax-imp/trunk/experimental/NamingExperiment/test/
   spoofax-imp/trunk/experimental/NamingExperiment/test/example.nam
   spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
   spoofax-imp/trunk/experimental/NamingExperiment/trans/
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-imports.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-manual.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/generate.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/prettyprint.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/refactorings.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str

Added: spoofax-imp/trunk/experimental/NamingExperiment/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/.classpath	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/.externalToolBuilders/NamingExperiment build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/.externalToolBuilders/NamingExperiment build.main.xml.launch	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/NamingExperiment/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/NamingExperiment/build.main.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_TOOL_ARGUMENTS" value="-verbose"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/NamingExperiment}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-imp/trunk/experimental/NamingExperiment/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/.project	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>NamingExperiment</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/NamingExperiment build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/META-INF/MANIFEST.MF	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: NamingExperiment Plug-in
+Bundle-SymbolicName: NamingExperiment; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: NamingExperiment.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: NamingExperiment

Added: spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/build.generated.xml	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,451 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/NamingExperiment/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la NamingExperiment.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/build.main.xml	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="NamingExperiment" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="NamingExperiment"/>
+        <property name="metasdfmodule" value="Stratego-NamingExperiment"/>
+        <property name="esvmodule" value="NamingExperiment"/>
+        <property name="strmodule" value="namingexperiment"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/build.properties	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,31 @@
+
+module NamingExperiment-Builders
+
+imports NamingExperiment-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                              
+  provider : include/namingexperiment.ctree                                                                   
+  provider : include/namingexperiment-java.jar                                                                
+                                                                                                              
+  observer : editor-analyze                                                                                   
+                                                                                                              
+  builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show analyzed syntax (for selection)" = generate-analyzed (openeditor) (realtime)                   
+                                                                                                              
+
+refactorings
+                                                                                  
+  pp-table                  : get-pp-table                                        
+  pretty-print              : prettyprint                                         
+                                                                                  
+  refactoring ID            : "Rename Entity"  = rename-entity (source) (cursor)  
+  refactoring Property *    : "Extract Entity" = extract-entity (source)          
+                                                                                  
+  // on save: generate-java                                                       
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Colorer.esv	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,9 @@
+module NamingExperiment-Colorer
+
+imports NamingExperiment-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Completions.esv	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,28 @@
+module NamingExperiment-Completions
+
+imports NamingExperiment-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                                                 
+  // Syntax completion:                                          
+                                                                 
+  completion template : Start =      "module " <m> (blank)       
+                                                                 
+  completion template : Definition = "entity " <e> " {}" (blank) 
+                                                                 
+  completion template : Property =   <x> " : " <T> (blank)       
+                                                                 
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  completion proposer                  : editor-complete
+                                         
+  completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Folding.esv	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,9 @@
+module NamingExperiment-Folding
+
+imports NamingExperiment-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Outliner.esv	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,9 @@
+module NamingExperiment-Outliner
+
+imports NamingExperiment-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-References.esv	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,15 @@
+module NamingExperiment-References
+
+imports NamingExperiment-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  reference _ : editor-resolve
+  hover _     : editor-hover
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Syntax.esv	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,9 @@
+module NamingExperiment-Syntax
+
+imports NamingExperiment-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment.main.esv	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,17 @@
+
+module NamingExperiment.main
+
+imports NamingExperiment-Builders NamingExperiment-Colorer NamingExperiment-Completions NamingExperiment-Folding NamingExperiment-Outliner NamingExperiment-References NamingExperiment-Syntax
+
+language General properties
+                  
+  name          : NamingExperiment
+  id            : NamingExperiment
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the NamingExperiment language"
+  url           : http://strategoxt.org
+                  
+  extensions    : nam
+  table         : include/NamingExperiment.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/Activator.java	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,44 @@
+package NamingExperiment;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "NamingExperiment";
+
+  public static final String kLanguageName = "NamingExperiment";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/NamingExperimentParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/NamingExperimentParseController.java	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,4 @@
+package NamingExperiment;
+
+public class NamingExperimentParseController extends NamingExperimentParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/NamingExperimentParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/NamingExperimentParseControllerGenerated.java	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,108 @@
+package NamingExperiment;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class NamingExperimentParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("NamingExperiment");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    NamingExperimentParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = NamingExperimentParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = NamingExperimentParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(NamingExperimentParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return NamingExperimentParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/NamingExperimentValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/NamingExperimentValidator.java	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,12 @@
+package NamingExperiment;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class NamingExperimentValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return NamingExperimentParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/InteropRegisterer.java	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,14 @@
+package NamingExperiment.strategies;
+
+       import org.strategoxt.lang.JavaInteropRegisterer;
+       import org.strategoxt.lang.Strategy;
+
+       /**
+        * Helper class for {@link java_strategy_0_0}.
+        */
+       public class InteropRegisterer extends JavaInteropRegisterer {
+
+         public InteropRegisterer() {
+           super(new Strategy[] { java_strategy_0_0.instance });
+         }
+       }

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/Main.java	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,11 @@
+package NamingExperiment.strategies;
+
+       import org.strategoxt.lang.Context;
+       
+       public class Main {
+         
+         public static void init(Context context) {
+           // Called when the editor is being initialized
+         }
+       
+       }

Added: spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/java/NamingExperiment/strategies/java_strategy_0_0.java	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,32 @@
+package NamingExperiment.strategies;
+
+       import org.spoofax.interpreter.terms.IStrategoTerm;
+       import org.spoofax.interpreter.terms.ITermFactory;
+       import org.strategoxt.lang.Context;
+       import org.strategoxt.lang.Strategy;
+       
+       /**
+        * Example Java strategy implementation.
+        *
+        * This strategy can be used by editor services and can be called
+        * in Stratego modules by declaring it as an external strategy
+        * as follows:
+        *
+        * <code>
+        *  external java-strategy(|)
+        * </code>
+        *
+        * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+        */
+       public class java_strategy_0_0 extends Strategy {
+         
+         public static java_strategy_0_0 instance = new java_strategy_0_0();
+       
+         @Override
+         public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+           context.getIOAgent().printError("Input for java-strategy: " + current);
+           ITermFactory factory = context.getFactory();
+           return factory.makeString("Regards from java-strategy");
+         }
+       
+       }

Added: spoofax-imp/trunk/experimental/NamingExperiment/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/editor-common.generated.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-namingexperiment-file
+  parse-namingexperiment-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/NamingExperiment.tbl)>
+    )
+
+  parse-string = parse-namingexperiment-string
+  parse-namingexperiment-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/NamingExperiment.tbl)>
+    )
+  
+  parse-stream = parse-namingexperiment-stream
+  parse-namingexperiment-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/NamingExperiment.tbl)>
+    )
+
+  pp-namingexperiment-string =
+    ast2abox(|[<import-term(include/NamingExperiment.generated.pp.af)>,
+               <import-term(include/NamingExperiment.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "NamingExperiment", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/namingexperiment.str file. These definitions should also be automatically 
+  // generated in the imported include/NamingExperiment.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-imp/trunk/experimental/NamingExperiment/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/lib/refactor-common.generated.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,64 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value
+ * @type (String, String, String) -> String
+ */
+input-dialog:
+  (title, label, default-value) -> <prim("SSL_EXT_opendialog", title, label, default-value)>
+  
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/EntityRefactorings.generated.pp.af)
+	

Added: spoofax-imp/trunk/experimental/NamingExperiment/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/plugin.xml	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="nam" description="NamingExperiment" language="NamingExperiment" derivedFrom="DynamicRoot" validator="NamingExperiment.NamingExperimentValidator" validatorClass="NamingExperiment.NamingExperimentValidator"></language>
+       </extension>
+       <extension id="NamingExperiment.parser" name="NamingExperiment Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="NamingExperiment.NamingExperimentParseController" language="NamingExperiment">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/syntax/Common.sdf	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-imp/trunk/experimental/NamingExperiment/syntax/NamingExperiment.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/syntax/NamingExperiment.pp	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also NamingExperiment.generated.pp)
+[]

Added: spoofax-imp/trunk/experimental/NamingExperiment/syntax/NamingExperiment.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/syntax/NamingExperiment.sdf	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,32 @@
+module NamingExperiment
+
+imports Common 
+ %% SPX
+
+exports
+    
+context-free start-symbols
+
+  Start
+
+context-free syntax
+
+  
+    "module" ID Definition*     -> Start {cons("Module"), scope(Entity), scope(Module)}
+    "entity" ID "{" Member* "}" -> Definition {cons("Entity"), scope(Property)}
+    "import" STRING              -> Definition {cons("Import")}
+    
+    ID ":" ID            -> Member {cons("Property")}
+
+
+    ID "(" { Param "," }* ")" Stm -> Member {cons("Function"), scope(Var)}
+    ID ":" ID           -> Param {cons("Param")}
+    
+    ID "(" {Exp ","}* ")"     -> Exp {cons("Call")}
+    "var" ID ":" ID                 -> Stm {cons("VarDecl")}
+    "var" ID ":" ID "=" Exp            -> Stm {cons("VarDeclInit")}
+    ID "=" Exp                     -> Stm {cons("Assign")}
+    ID                             -> Exp {cons("Var")}         %% or, could be an Entity!
+    %% AMB: ID                  -> Exp {cons("EntityRef")
+    Exp "." ID                -> Exp {cons("PropAccess"), left}
+    "{" Stm* "}"                     -> Stm {cons("Block"), scope(Var)}

Added: spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/syntax/SPX.spx	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,87 @@
+//package foo
+
+module example2
+
+context-free syntax
+
+  
+    "module" Module@=ID Definition*     -> Start {"Module", scope(Entity, Module)}
+    "entity" Entity@=ID "{" Member* "}" -> Definition {"Entity", scope(Property, Function)}
+    "import" Module at STRING              -> Definition {"Import"}
+    
+    Property@=ID ":" Entity at ID          -> Member {"Property"}
+
+
+    ID "(" { Param "," }* ")" Stm -> Member {"Function", scope(Var)}
+    Var@=ID ":" Entity at ID           -> Param {"Param"}
+    
+    Function at ID "(" {Exp ","}* ")"      -> Exp {"Call"}        %% or, could be an Entity 
+    "var" Var@=ID ":" Entity at ID         -> Stm {"VarDecl"}
+    "var" Var@=ID ":" Entity at ID "=" Exp -> Stm {"VarDeclInit"}
+    Var at ID "=" Exp                      -> Stm {"Assign"}
+    Var at ID                              -> Exp {"Var"}         %% or, could be a Property!
+    Entity
+    Exp "." Property at ID                 -> Exp {"PropAccess", left}
+    "{" Stm* "}"                        -> Stm {"Block", scope(Var)}
+
+/*
+attributes
+  
+  def PropAccess(e, p):
+    p.Property = e->Property
+  
+  def Import(i):
+    i.Entity += i->Property
+
+rules
+  
+  get-table-Property:
+    exp -> table
+  where
+    <type-of> exp => CLASS(t);
+    <get-table(|"Property")> t
+
+attributes
+
+  def PropAccess(e, p):
+    p.scope-Property := x
+      
+      
+
+/*
+types
+
+  
+  ================================
+  PropAccess(e, p) & e : ENTITY(x)
+
+
+
+/*
+
+possible warnings/errors:
+  - no scope for Function
+  - no definition site for Function
+  - no use sites for Function(?) 
+  - more than one def site defined (problem for naming scopes!)
+  - scope defined on injection
+  - ambiguous scope type (two prods with same syntactic lhs)
+  - inconsistent syntactic sort for definition (=tricky for composition...)
+*/
+
+/*
+scopes
+
+  @Var: //  ordered unique non-shadowing scope Var:
+    Function //(_, _)
+    Block //(_)
+    
+  @Entity: // unordered unique scope
+    Module //(_)
+    
+  @Property: // unordered unique scope
+    Entity //(_, _)
+    
+    unordered unique scope Function:
+      Module(_)
+*/
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/test/example.nam
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/test/example.nam	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,16 @@
+module M
+
+// Example "NamingExperiment" program (see syntax/NamingExperiment.sdf for the grammar)
+
+entity A {
+  x : B
+}
+
+entity B {
+  y : A
+  f(a : A) {
+      var v : A = a.x.y.x.x // bad: x
+      v = y
+      v = f(v)
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,103 @@
+module test1 
+
+language NamingExperiment
+
+setup [[
+  module M
+    
+  entity A {
+    x : B
+  }
+]]
+
+test Unknown type Q [[
+  entity B {
+    q : Q
+  }
+]] 1 error
+
+test Resolve local property access [[
+  entity B {
+    x : A
+    f() {
+      var v : A = x
+    }
+  }
+]] resolves x#3 to x#2
+
+test Resolve parameter access [[
+  entity B {
+    x : A
+    f(x : A) {
+      var v : A = x
+    }
+  }
+]] resolves x#4 to x#3
+
+test Resolve property access [[
+  entity B {
+    y : A
+    f(a : A) {
+      var v : A = a.x.y.x
+    }
+  }
+]]
+
+test Resolve property access fails [[
+  entity B {
+    y : A
+    f(a : A) {
+      var v : A = a.x.y.x.x
+    }
+  }
+]] 1 error
+
+test Resolve function call [[
+  entity B {
+    f(a : A) {
+      var v : A = f(a)
+    }
+  }
+]]
+
+test Resolve property access fails [[
+  entity B {
+    b : B
+    f(a : A) {
+      var v : A = f(b) 
+    }
+  }
+]] 1 error
+
+test Def before use allowed [[
+  entity B {
+    c : C
+  }
+  entity C {}
+]]
+
+test Def before use error [[
+  entity B {
+    f() {
+      var v : A = w
+      var w : A
+    }
+  }
+]] 1 error
+
+
+/* TODO: following tests fail because of a limitation in the resolver interface...
+
+test Resolve local entity [[
+  entity B {
+    x : B 
+  }
+]] resolves B#2 to B#1
+
+// fails
+test Resolve setup entity [[
+  entity B {
+    x : A
+  }
+]] resolves A#2 to A#1
+*/
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,102 @@
+module analysis-generated
+
+imports
+  include/NamingExperiment
+  analysis-library
+
+signature constructors
+
+  Entity   : Namespace
+  Module   : Namespace
+  Property : Namespace
+  Function : Namespace
+  Var      : Namespace
+  
+rules // "generated" scoping rules
+      
+  get-scope-types:
+    Module(_, _) -> [Entity(), Module()]
+  
+  get-scope-types:
+    Entity(_, _) -> [Property(), Function()]
+  
+  get-scope-types:
+    Function(_, _, _) -> [Var()]
+  
+  get-scope-types:
+    Block(_) -> [Var()]
+
+rules // "generated" definition fetching rules
+    
+  get-definition:
+    Module(x, _) -> Def([Module(), x | <IndexPath <+ ![]> Module()])
+  
+  get-definition:
+    Entity(x, _) -> Def([Entity(), x | <IndexPath <+ ![]> Entity()])
+  
+  get-definition:
+    Property(x, _) -> Def([Property(), x | <IndexPath <+ ![]> Property()])
+  
+  get-definition:
+    Function(x, _, _) -> Def([Function(), x | <IndexPath <+ ![]> Function()])
+  
+  get-definition:
+    VarDecl(x, _) -> Def([Var(), x | <IndexPath <+ ![]> Var()])
+  
+  get-definition:
+    VarDeclInit(x, _, _) -> Def([Var(), x | <IndexPath <+ ![]> Var()])
+  
+  get-definition:
+    Param(x, _) -> Def([Var(), x | <IndexPath <+ ![]> Var()])
+   
+  // HACK: would be more or less the same as the above
+  //       e.g. get-definition-key: Module(x, _) -> x 
+  get-definition-key:
+    tree -> subterm
+    where
+      one(
+        where(
+          ?_{<id>};
+          ?[_ | _];
+          not(?[Unresolved(_) | _])
+        );
+        ?subterm
+      )
+
+rules // "generated" uri annotation rules
+    
+  annotate-use(|namespace):
+    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
+    
+  annotate-names(|def-path):
+    Module(t1, t2) -> Module(t1{def-path}, t2)
+    
+  annotate-names(|def-path):
+    Entity(t1, t2) -> Entity(t1{def-path}, t2)
+    
+  annotate-names(|def-path):
+    Property(t1, t2) -> Property(t1{def-path}, <annotate-use(|Entity())> t2)
+    
+  annotate-names(|def-path):
+    Function(t1, t2, t3) -> Function(t1{def-path}, t2, t3)
+    
+  annotate-names(|def-path):
+    Param(t1, t2) -> Param(t1{def-path}, <annotate-use(|Entity())> t2)
+    
+  annotate-names(|def-path):
+    VarDecl(t1, t2) -> VarDecl(t1{def-path}, <annotate-use(|Entity())> t2)
+    
+  annotate-names(|def-path):
+    VarDeclInit(t1, t2, t3) -> VarDeclInit(t1{def-path}, <annotate-use(|Entity())> t2, t3)
+    
+  annotate-names(|def-path):
+    Assign(t1, t2) -> Assign(<annotate-use(|Var())> t1, t2)
+    
+  annotate-names(|def-path):
+    Var(t1) -> Var(<annotate-use(|Var())> t1)
+    
+  annotate-names(|def-path):
+    PropAccess(t1, t2) -> PropAccess(t1, <annotate-use(|Property())> t2)
+
+  annotate-names(|def-path):
+    Call(t1, t2) -> Call(<annotate-use(|Function())> t1, t2)

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-imports.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-imports.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,33 @@
+module analysis-imports
+
+imports
+  include/NamingExperiment
+  analysis-generated
+  analysis-library
+
+signature constructors
+  
+  Imports : DefDataType
+
+rules
+
+  // TODO: imports; consider project directory and so-called "referenced projects"
+  //       requires runtime support a project-wide index
+
+  adjust-index-def-data(store-results |namespace, path):
+    Module(m, defs) -> <store-results> DefData(Imports(), [namespace | path], import*)
+    where
+      import* := <filter(get-import-name)> defs
+
+  get-import-name:
+    Import(name) -> name
+
+  import-name-to-uri(|namespace):
+    name -> [namespace, name]
+
+  adjust-index-lookup(is-use |namespace, path):
+    Module(self, _) -> all-uris
+    where
+      !namespace => Entity();
+      import*  := <index-get-data(|Imports())>;
+      all-uris := <map(import-name-to-uri(|namespace))> import* 

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,338 @@
+module analysis-library
+
+imports
+  include/NamingExperiment
+  libstratego-lib
+  types
+  lib/editor-common.generated
+  analysis-generated
+
+signature constructors
+
+  // Index elements:
+  Def     : List(UriPart) -> Summary
+  Use     : List(UriPart) * List(UriPart) -> Summary
+  BadUse  : List(UriPart) -> Summary
+  DefData : DefDataType * List(UriPart) * Term -> Summary
+  
+  // URI header:
+  Namespace      : UriPart
+  Unresolved     : Namespace -> UriPart
+  INTERNAL_ERROR : UriPart
+  
+  // Remainder of URI:
+  String : UriPart
+  Anon   : Int -> UriPart
+  Anon   : UriPart
+
+rules // extension points
+  
+  // Should return list of Def(_) and/or [namespace | path]
+  adjust-index-lookup(is-use |namespace, path) = fail
+  
+  // adjust-index-select(|namespace, path, use) = fail // (e.g., for imports)
+  
+  // Should call <store-results> on a (list of) DefData 
+  adjust-index-def-data(store-results |namespace, path) = fail
+  
+  // Should return a path
+  adjust-index-path(is-def |namespace, path) = fail
+  
+  // adjust-index-path-from-filesystem(|project-path, path)
+
+rules // analysis traversals
+   
+  analyze-top:
+    ast -> (ast5, defs, uses, data)
+    with
+      {| CurrentAnalysisAst:
+        rules(
+          CurrentAnalysisAst := ast
+        );
+        (ast2, defs) := <analyze-defs(|Anon(), Anon())> ast;
+        <index-summary-parts> defs;
+        ast3         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
+        <index-tree-terms> ast3;
+        data         := <analyze-tree-data> ast3;
+        <index-summary-parts> data;
+        // TODO: resolve any URIs in index data at this point? or re-index data after uses analysis?
+        (ast4, uses) := <analyze-uses> ast3;
+        ast5         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4
+      |}
+  
+  /**
+   * Identifies all definitions in the tree
+   * and annotates them with their URI.
+   * Also annotates uses with a preliminary "Unresolved(_)" URI.
+   */
+  analyze-defs(|head-scope, head-scope-ns):
+    ast -> (ast', defs')
+    with
+      if def := <get-definition> ast then
+        Def(def-path)                     := def;
+        [head-scope-ns', head-scope' | _] := def-path
+      else
+        def-path       := INTERNAL_ERROR();
+        head-scope-ns' := head-scope-ns;
+        head-scope'    := head-scope
+      end;
+      if scope-types := <get-scope-types> ast then
+        {| IndexPath:
+          <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
+          // <balanced-update-path> head-scope';
+          (ast', defs) := <analyze-defs-recurse(|Anon(), Anon(), def-path)> ast
+        |}
+      else
+        (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
+      end;
+      defs' := <![def | defs] <+ !defs>
+  
+  analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
+    ast -> (ast'', defs)
+    where
+      analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
+      (ast', defs)  := <unzip-analyzed> analyzed;
+      ast''         := <try(annotate-names(|def-path))> ast'
+  
+  update-index-path(|head-scope, head-scope-ns, ast):
+    scope-type -> scope-type
+    where
+      if !head-scope-ns => Anon() then
+        path  := <IndexPath <+ ![]> scope-type;
+        path' := <do-adjusted-index-path(|scope-type, path, Anon(<new>))> ast
+      else
+        path  := <IndexPath <+ ![]> head-scope-ns;
+        path' := <do-adjusted-index-path(|scope-type, path, head-scope)> ast
+      end;
+      rules(IndexPath: scope-type -> path')
+  
+  /* TODO: consider using simple-update-def-path
+   *       which uses "balanced" path scopes
+   *       e.g. when Entity doesn't scope Function
+   *       then it's hard to access properties from a function
+  balanced-update-index-path:
+    head-scope -> head-scope
+    where
+      if !head-scope => Anon() then
+        head-scope' := Anon(<new>)
+      else
+        head-scope' := head-scope
+      end;
+      (something with do-adjust-path)
+      rules(IndexPath := [head-scope' | <IndexPath <+ ![]> ()])
+  */
+  
+  /**
+   * Analyze all uses, changing their preliminary
+   * "Unresolve(_)" URI to a definite URI of their definition. 
+   */
+  analyze-uses:
+    ast -> (ast'', uses')
+    with
+      analyzed     := <all(analyze-uses)> ast;
+      (ast', uses) := <unzip-analyzed> analyzed;
+      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
+        if Def(path') := <index-lookup(id |namespace, path)> ast' then
+          ast'' := ast{path'};
+          uses' := [Use([namespace | path], path') | uses]
+        else
+          ast'' := ast';
+          uses' := [BadUse(unresolved) | uses]
+        end
+      else
+        ast'' := ast';
+        uses' := uses
+      end
+  
+  /**
+   * Collects all index data (e.g., types of definitions).
+   */
+  analyze-tree-data:
+    tree -> data
+    where
+      set := <new-iset>;
+      <topdown(analyze-tree-data-part(|set))> tree;
+      data := <iset-elements> set
+  
+  analyze-tree-data-part(|set):
+    tree -> tree
+    where
+      if def-term := <get-definition-key> then
+        _{[namespace | path]} := def-term;
+        if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
+          <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
+        end
+      end
+  
+  store-index-data-results(|set):
+    t -> <fail>
+    where
+      if is-list then
+        <iset-addlist(|t)> set
+      else
+        <iset-add(|t)> set
+      end
+  
+  /**
+   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
+   * to a tuple (C(a1, a2), [b1, b2, b3]).
+   */
+  unzip-analyzed:
+    appl -> (appl', unzipped-parts)
+    with
+      appl'          := <all(\(a, _) -> a\)> appl;
+      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
+
+rules // index construction
+  
+  // TODO: optimize: use hashtables instead of dynamic rules
+    
+  index-summary-parts =
+    list-loop(index-summary-part)
+  
+  index-summary-part:
+    Def(uri @ [namespace, name | path]) -> <id>
+    where
+      parent-uri := [namespace | path];
+      rules(IndexedDef :+ parent-uri -> Def(uri))
+
+  index-summary-part:
+    DefData(kind, uri, contents) -> <id>
+    where
+      rules(IndexedDefData: (kind, uri) -> contents)
+
+  index-tree-terms:
+    tree -> tree
+    where
+      if def-term{uri} := <get-definition-key> then
+        def := Def(uri);
+        rules(
+          IndexedTerm: uri -> tree
+        )
+      end;
+      <all(index-tree-terms)> tree
+
+rules // index API
+
+  index-get-term =
+    with(?Def(uri) | "Def expected"); <IndexedTerm> uri
+  
+  index-get-data(|kind) =
+    with(?Def(uri) | "Def expected"); <IndexedDefData> (kind, uri)
+
+  index-namespace:
+    x{[namespace | path]} -> <index-namespace-unwrap> namespace
+
+  index-path:
+    x{[namespace | path]} -> path'
+    where
+      if !namespace => Unresolved(namespace) then
+        Def(path') := <index-lookup> 
+      else
+        path' := path
+      end
+
+  index-lookup:
+    x{[namespace | path]} -> <index-lookup(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      candidates  := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      result-path := <index-select(|namespace, path, x)>
+    <+
+      // TODO: optimize: try not to call do-adjust-index-lookup from here
+      [_ | path'] := path;
+      def         := <index-lookup(is-adjust-lookup-enabled |namespace, path')> x
+
+  index-lookup-one-level:
+    x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path):
+    x -> defs
+    with
+      is-adjusted-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      debug(!"adjustedio");
+      mapconcat(\Def(p) -> [Def(p)]\
+          <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?defs
+    <+
+      defs := <bagof-IndexedDef <+ ![]> [namespace | path]
+
+  index-lookup-all-levels:
+    x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+  
+  index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path):
+    x -> all-defs
+    with
+      is-adjust-lookup-enabled;
+      do-adjusted-index-lookup(|namespace, path, x);
+      mapconcat(\Def(p) -> [Def(p)]\
+          <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path')> x\
+          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
+      ?all-defs
+    <+
+      one-level := <bagof-IndexedDef <+ ![]> [namespace | path];
+      if [_ | path'] := path then
+        all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path')> x]
+      else
+        all-defs := one-level
+      end
+
+  index-lookup-contained(|namespace):
+    x{[ns | path]} -> defs
+    where
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-one-level(id|namespace, def-path)> x 
+      else
+        defs := <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
+      end
+
+  index-lookup-contained-all-levels(|namespace):
+    x{[ns | path]} -> defs
+    where
+      if !ns => Unresolved(_) then
+        Def([_ | def-path]) := <index-lookup>;
+        defs := <index-lookup-all-levels(id|namespace, def-path)> x
+      else
+        defs := <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
+      end
+  
+  index-lookup-container(|namespace):
+    x{[ns | path]} -> def
+    where
+      def := ();
+      fatal-err(|"Not implemented")
+
+  index-namespace-unwrap =
+    \Unresolved(n) -> n\ <+ id
+  
+  do-adjusted-index-lookup(|namespace, path, use) =
+    // UNDONE: try(origin-term);
+    repeat-until(
+      prim("SSL_EXT_get_parent", <id>)
+    , adjust-index-lookup(origin-equal(|use) |namespace, path)
+    )
+
+  index-select(|namespace, path, use) =
+    getfirst(
+      where(
+        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
+      )
+    )
+  
+  do-adjusted-index-path(|namespace, path, def) =
+    adjust-index-path(origin-equal(|def) |namespace, path)
+  <+
+    ![def | path]
+  
+  index-eq(|namespace, expected) =
+    where(
+      ?Def([_, name | _]);
+      <SRTS-EXT-eq-ignore-annos(|expected)> name
+    )
+  
+  external SRTS-EXT-eq-ignore-annos(|t)

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-manual.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-manual.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,40 @@
+module analysis-manual
+
+imports
+  include/NamingExperiment
+  analysis-generated
+  analysis-library
+  types
+
+rules
+  
+  // Adjust the URI of the Module element
+  //adjust-index-path(is-def |namespace, path):
+  //  Module(<is-def>, _) -> ["ROOT"]
+  
+  // Adjust the lookup behavior for properties,
+  // overriding the lookup with a list of property Defs
+  adjust-index-lookup(is-use |namespace, path):
+    PropAccess(e, <is-use>) -> p*
+    with
+      if ENTITY(e-type) := <type-of> e then
+        p* := <index-lookup-contained(|Property())> e-type
+        //or: p* := [[namespace | <index-path> e-type]]
+      else
+        p* := []
+      end
+
+  // Adjust the lookup behavior for variables,
+  // overriding the lookup with a list of URIs
+  adjust-index-lookup(is-use |namespace, path):
+    Var(<is-use>) -> [[Var() | path], [Property() | path]]
+
+  // Adjust the lookup behavior for function calls,
+  // selecting a function with matching parameter types
+  // (if this fails, the normal lookup behavior is used!)
+  adjust-index-lookup(is-use |namespace, path):
+    Call(<is-use>, args) -> def
+    where
+      arg-types := <map(type-of)> args;
+      all-defs  := <index-lookup-all-levels(fail |namespace, path)>;
+      def       := <getfirst(is-params-compatible(|arg-types))>

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,99 @@
+module check
+
+imports
+  libstratego-lib
+  include/NamingExperiment
+  lib/editor-common.generated
+  analysis-library
+  analysis-generated
+  types
+
+rules
+
+  constraint-error:
+    x{[Unresolved(t) | _]} ->
+    (x, $[Unable to resolve [x]])
+  
+  constraint-error:
+    x -> (x, $[Use before definition])
+    where
+      namespace := <index-namespace> x;
+      <is-ordered-namespace> namespace
+    where
+      def  := <index-lookup> x;
+      def' := <index-get-term> def // TODO: don't use index-get-term
+    where
+      // TODO: use origin-offset / offsets in index data
+      <gt> (<origin-line> def', <origin-line> x)
+    <+
+      <gt> (<origin-column> def', <origin-column> x)
+  
+  constraint-error:
+    def -> (def, $[Duplicate definition])
+    where
+      x    := <get-definition-key> def;
+      def' := <index-lookup> x;
+      fail // TODO: something with origin-offset / offsets in index data
+  
+  is-ordered-namespace:
+    Var() -> Var()
+    
+  constraint-error:
+    Call(f, a*) -> (f, $[Illegal argument types, expected [<write-to-string> param-types] not [<write-to-string> arg-types]])
+    where
+      arg-types   := <map(type-of)> a*;
+      def         := <index-lookup> f;
+      param-types := <index-get-data(|ParamTypes())> def;
+      not(
+        <is-params-compatible(|arg-types)> def
+      )
+  
+  constraint-warning = fail
+  constraint-note = fail
+
+/*
+
+  // Analysis: does a topdown traversal of the tree,
+  // and tries to apply the record-entity rule.
+  analyze:
+    t -> t
+    with
+      <topdown(try(record-entity))> t
+
+  // Records the definition of an entity in a dynamic rule GetEntity.
+  record-entity:
+    Entity(x, body) -> Entity(x, body)
+    with
+      // For a name 'x', GetEntity will return the original 'x' tree node
+      rules(
+        GetEntity :+ x -> x
+      )
+*/
+rules
+    /*
+  // Reports an error if a property type is undefined.
+  // This error is reported on the type name 'type'.
+  constraint-error:
+    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
+    where
+      not(!type => "String"); // String and Int are built-in types
+      not(!type => "Int");
+      not(<lookup-one> type) // no entity for this type
+  
+  // Reports an error if an entity is defined more than once.
+  // This constraint is implemented by testing if the "bag" of
+  // all entities x is not a singleton list.
+  constraint-error:
+    Entity(x, _) -> (x, $[Duplicate entity name])
+    where
+      not(<lookup-all-Entity> x => [_])
+  
+  constraint-warning:
+    Entity(x, _) -> (x, $[Entity names must start with a capital])
+    where
+      not(<string-starts-with-capital> x)
+  
+  constraint-note:
+    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
+                                      (this note is defined in trans/check.str) ])
+*/
\ No newline at end of file

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/generate.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/generate.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,47 @@
+module generate
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/NamingExperiment
+  lib/editor-common.generated
+
+rules
+
+  to-java:
+    Module(x, d*) ->
+    $[ package [x];
+       
+       [d'*]
+     ]
+    with
+      d'* := <to-java> d*
+  
+  to-java:
+    Entity(x, p*) ->
+    $[ class [x] {
+           [p'*]
+       }
+     ]
+    with
+      p'* := <to-java> p*
+
+  to-java:
+    Property(x, Type(t)) -> $[
+      private [t] [x];
+      
+      public [t] get_[x] {
+          return [x];
+      }
+      
+      public void set_[x] ([t] [x]) {
+          this.[x] = [x];    
+      }
+  ]
+  
+  to-java:
+    Type(t) -> t
+
+  to-java:
+    t* -> <map(to-java)> t*

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,88 @@
+module namingexperiment
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  include/NamingExperiment
+  lib/editor-common.generated
+  check
+  generate
+  prettyprint
+  refactorings
+  analysis-manual
+  analysis-generated
+  analysis-library
+
+rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
+  
+  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
+  // each a list of (term, message) tuples or simply (message) terms.
+  editor-analyze:
+    (ast, path, project-path) -> (ast', errors, warnings, notes)
+    with
+      editor-init;
+      (ast', defs, uses, data) := <analyze-top>;
+      errors   := <collect-all(constraint-error, conc)> ast';
+      warnings := <collect-all(constraint-warning, conc)> ast';
+      notes    := <collect-all(constraint-note, conc)> ast'
+  
+  // Transforms a selection to Java
+  generate-java:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"java")> path;
+      result   := <to-java> selected
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  // Prints the abstract syntax ATerm of a selection.
+  generate-analyzed:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      editor-init;
+      filename := <guarantee-extension(|"analyzed.aterm")> path;
+      result   := <analyze-top> selected // we just return the input term
+  
+  // Resolves a reference when the user control-clicks or presses F3 in the editor.
+  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
+  editor-resolve:
+    (node, position, ast, path, project-path) -> target
+    where
+      // TODO: shouldn't work on parent node
+      !node => <one(?subnode) <+ ?subnode>;
+      def     := <index-lookup> subnode;
+      target  := <index-get-term> def
+
+  // Returns "hover help" information for a particular node in the editor.
+  // For references, this rule is invoked using the resolved term.
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[[def-path'']]
+    where
+      // FIXME: this only works for definition paths
+      <debug(!2)> target;
+      def-term           := <get-definition-key> target;
+      _{[ns | def-path]} := def-term;
+      def-path'  := <take-until(?Anon())> def-path;
+      def-path'' := <reverse; separate-by(|".")> def-path'
+
+  // Completes an identifier when the user presses control-space
+  // (the completion identifier in the AST provides additional context information)
+  editor-complete:
+    (node, position, ast, path, project-path) -> proposals'
+    where
+      editor-init;
+      (ast', _, _, _) := <analyze-top> ast;
+      x              := <collect-one(?COMPLETION(_); debug)> ast';
+      debug(!"ok");
+      proposals      := <index-lookup-all-levels> x;
+      debug(!"almost");
+      proposals'     := <map(def-to-name)> proposals
+
+  def-to-name:
+    Def([namespace, name | _]) -> name

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/prettyprint.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/prettyprint.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,28 @@
+module prettyprint
+
+imports
+  include/NamingExperiment
+
+strategies //custom strategy for code formatting
+  
+prettyprint:
+  Module(x, y) ->
+  $[module [x]
+  	
+    [<map(prettyprint); separate-by(|"\n\n"); concat-strings> y]]
+    
+prettyprint:
+  Entity(x, y) ->
+  $[entity [x]{
+      [<map(prettyprint); separate-by(|"\n"); concat-strings> y]
+    }]
+    
+prettyprint:
+  Property(x, y) -> $[[x] : [<prettyprint> y]]
+  
+prettyprint:
+  Type(t) -> $[[t]]
+	
+prettyprint=
+  where(is-string <+ is-num)
+

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/refactorings.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/refactorings.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,48 @@
+module refactorings
+
+imports
+  lib/refactor-common.generated
+  include/NamingExperiment
+  lib/editor-common.generated  
+
+strategies //renaming
+ 
+rename-entity:
+  (selected, position, ast, path, project-path) -> (ast, new-ast)
+  with  	
+    old-name:=<get-selected-name(|position)> ast;
+    new-name:=<input-dialog>("rename", "Rename Entity:", ""); 
+    new-ast:=<topdown(try(rename-type(|old-name, new-name)))> ast
+
+get-selected-name(|position):
+  ast -> name
+    where
+	  <term-at-position(|position); ?Type(name)> ast <+
+	  <parent-at-position(|position); ?Entity(name, _)> ast 
+
+rename-type(|old-name, new-name):
+  Entity(old-name, y) -> Entity(new-name, y)
+
+rename-type(|old-name, new-name):
+  Type(old-name) -> Type(new-name)
+	
+  
+strategies //extraction
+
+extract-entity:
+  (selected, position, ast, path, project-path) -> (ast, new-ast)
+  with
+    if <is-list> selected then
+  	  properties:= selected;
+  	  insert-position:=<init; at-last(map(inc))> position
+    else //single property selected
+  	  properties:=<![selected]>;
+  	  insert-position:=<init; init; at-last(map(inc))> position
+    end;
+    entity-name:=<input-dialog>("extract", "Extract Entity:", "<Entity Name>");
+    prop-name:=<lower-case> entity-name;
+    new-ast:=<
+      alltd(replace-sublist(?properties|[Property(prop-name, entity-name)]));
+      insert-elem(|insert-position, Entity(entity-name, properties))
+    > ast	
+

Added: spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/types.str	Mon Mar  7 11:08:11 2011	(r22312)
@@ -0,0 +1,65 @@
+module types
+
+imports
+  include/NamingExperiment
+  analysis-library
+
+signature constructors
+
+  ENTITY     : STRING -> Type
+  Type       : DefDataKind
+  ParamTypes : DefDataKind
+
+rules // type projections
+
+  type-of:
+    Property(_, x) -> ENTITY(x)
+  
+  type-of:
+    Entity(x, _) -> ENTITY(x)
+  
+  type-of:
+    VarDecl(_, x) -> ENTITY(x)
+  
+  type-of:
+    VarDeclInit(_, x, _) -> ENTITY(x)
+  
+  type-of:
+    Param(_, x) -> ENTITY(x)
+  
+  type-of:
+    Var(v) -> <type-of> <index-lookup> v
+  
+  type-of:
+    PropAccess(e, p) -> <type-of> <index-lookup> p
+
+  type-of:
+    Def(uri) -> <index-get-data(|Type())> Def(uri)
+
+rules // utility
+
+  is-params-compatible(|arg-types):
+    Def(uri) -> <id>
+    with
+      param-types := <index-get-data(|ParamTypes())>
+    where
+      <eq> (<length> arg-types, <length> param-types);
+      <zip(is-assignable-to)> (arg-types, param-types)
+
+  is-assignable-to:
+    (to-type, from-type) -> to-type
+    where
+      <eq> (from-type, to-type)
+
+
+rules // store definition and parameter types
+    
+  adjust-index-def-data(store-results |namespace, path):
+    def -> <store-results> DefData(Type(), [namespace | path], type)
+    where
+      type := <type-of> def
+  
+  adjust-index-def-data(store-results |namespace, path):
+    Function(_, params, _) -> <store-results> DefData(ParamTypes(), [namespace | path], types)
+    with
+      types := <map(type-of)> params

From m.dejonge at tudelft.nl  Mon Mar  7 16:17:51 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 07 Mar 2011 15:17:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22313 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	. parser services
Message-ID: <20110307151751.05253108C011@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Mar  7 15:17:50 2011
New Revision: 22313
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22313&sc=1

Log:
Bugfix: offset selection
Updating file content:
- SourceAttachment for ASTs that are parsed outside the editor
- Textchanges for files not in current editor

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Mon Mar  7 11:08:11 2011	(r22312)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Mon Mar  7 15:17:50 2011	(r22313)
@@ -200,7 +200,7 @@
 			return null;
 		
 		IToken start = getParseController().getTokenIterator(new Region(selection.x, 0), true).next();
-		IToken end = getParseController().getTokenIterator(new Region(selection.x + selection.y, 0), true).next();
+		IToken end = getParseController().getTokenIterator(new Region(selection.x + selection.y-1, 0), true).next();
 		
 		ITokenizer tokens = start.getTokenizer();
 		int layout = IToken.TK_LAYOUT;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Mon Mar  7 11:08:11 2011	(r22312)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Mon Mar  7 15:17:50 2011	(r22313)
@@ -8,8 +8,11 @@
 import java.util.Map;
 
 import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
+import org.eclipse.core.runtime.Path;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.io.FileTools;
@@ -107,6 +110,10 @@
 			throw new OperationCanceledException();
 		SGLRParseController controller = getController() == null ? null : getController();
 		IResource resource = controller == null ? null : controller.getResource();
+		if(resource==null){
+			IPath path = new Path(filename).makeRelativeTo(ResourcesPlugin.getWorkspace().getRoot().getLocation());
+			resource=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
+		}
 		if (controller != null || resource != null)
 			SourceAttachment.putSource(result, resource, controller);
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Mon Mar  7 11:08:11 2011	(r22312)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Mon Mar  7 15:17:50 2011	(r22313)
@@ -13,29 +13,41 @@
 import java.util.WeakHashMap;
 import java.util.concurrent.CancellationException;
 
+import org.eclipse.core.filebuffers.FileBuffers;
+import org.eclipse.core.filebuffers.ITextFileBuffer;
+import org.eclipse.core.filebuffers.ITextFileBufferManager;
+import org.eclipse.core.filebuffers.LocationKind;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.imp.parser.ISourcePositionLocator;
 import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.jface.text.BadLocationException;
+import org.eclipse.jface.text.IDocument;
+import org.eclipse.ui.progress.UIJob;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
 import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.terms.ISimpleTerm;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.attachments.OriginAttachment;
 import org.strategoxt.imp.generator.construct_textual_change_1_1;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.MonitorStateWatchDog;
 import org.strategoxt.imp.runtime.RuntimeActivator;
 import org.strategoxt.imp.runtime.dynamicloading.TermReader;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.stratego.StrategoConsole;
-import org.strategoxt.imp.runtime.stratego.TextChangePrimitive;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
 
@@ -177,9 +189,12 @@
 					endLocation=Tools.asJavaInt(termAt(textReplaceTerm, 1));
 					resultText = asJavaString(termAt(textReplaceTerm, 2));
 					try {		
-						TextChangePrimitive.applyTextChange(editor, startLocation, endLocation, resultText); //TODO refactor text-change handling (in files)
+						applyTextChange(editor, termAt(builderResult,0), startLocation, endLocation, resultText); //TODO refactor text-change handling (in files)
 					} catch (BadLocationException e) {
 						reportGenericException(editor, e);
+					} catch (CoreException e) {
+						// TODO Auto-generated catch block
+						e.printStackTrace();
 					}
 				}					
 			} catch (InterpreterErrorExit e) {
@@ -202,6 +217,42 @@
 			observer.getLock().unlock();
 		}		
 	}
+	
+	public static void applyTextChange(EditorState editor, ISimpleTerm originalTerm, final int position_start, final int position_end,
+			final String text) throws BadLocationException, CoreException {
+		SGLRParseController controller = editor.getParseController();
+		ISourcePositionLocator locator = controller.getSourcePositionLocator();
+		final IPath path = locator.getPath(OriginAttachment.tryGetOrigin((IStrategoTerm) originalTerm));
+		final IPath wsPath =path.makeRelativeTo(ResourcesPlugin.getWorkspace().getRoot().getLocation());
+		Job job = new UIJob("apply textchange") {
+			
+			@Override
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				ITextFileBufferManager manager= FileBuffers.getTextFileBufferManager();
+				try {
+					manager.connect(wsPath, LocationKind.IFILE, monitor);
+					ITextFileBuffer buffer= manager.getTextFileBuffer(wsPath, LocationKind.IFILE);
+					IDocument doc = buffer.getDocument();
+					doc.replace(position_start, position_end-position_start, text);
+					buffer.commit(monitor, true); 
+				} catch (BadLocationException e) {
+					Environment.logException("Bad location of the replaced fragment", e);
+				} catch (CoreException e) {
+					Environment.logException("Exception occurred while updating filecontents", e);
+				} finally {
+					try {
+						manager.disconnect(wsPath, LocationKind.IFILE, monitor);
+					} catch (CoreException e) {
+						Environment.logException("Exception occurred while updating filecontents", e);
+					}
+				}
+				return Status.OK_STATUS;
+			}
+		};
+		job.setSystem(true);
+		job.schedule();
+	}
+
 
 	private IStrategoTerm getBuilderResult(EditorState editor, IStrategoTerm node)
 			throws UndefinedStrategyException, InterpreterErrorExit, InterpreterExit,

From L.C.L.Kats at tudelft.nl  Mon Mar  7 17:32:00 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 07 Mar 2011 16:32:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22314 - in
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms:
	. attachments
Message-ID: <20110307163200.CD9AFCC071@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Mar  7 16:32:00 2011
New Revision: 22314
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22314&sc=1

Log:
attachment vs. annotations fixes

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractSimpleTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractSimpleTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractSimpleTerm.java	Mon Mar  7 15:17:50 2011	(r22313)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractSimpleTerm.java	Mon Mar  7 16:32:00 2011	(r22314)
@@ -50,4 +50,8 @@
     public void removeAttachment(TermAttachmentType<?> attachmentType) {
     	throw new NotImplementedException();
     }
+    
+    protected void clearAttachments() {
+    	attachment = null;
+    }
 }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java	Mon Mar  7 15:17:50 2011	(r22313)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java	Mon Mar  7 16:32:00 2011	(r22314)
@@ -12,8 +12,9 @@
 /**
  * Wraps any term with annotations.
  * 
- * Uses the attachments of the wrapped term, rather than
- * its own set of attachments.
+ * Uses its own set of attachments, rather than
+ * the attachments of the wrapped term.
+ * 
  * 
  * @see ITermFactory#annotateTerm(IStrategoTerm, IStrategoList)
  *          Should generally be used to efficiently annotate a term.
@@ -95,19 +96,4 @@
 		throw new UnsupportedOperationException();
 	}
 	
-	@Override
-	public <T extends ITermAttachment> T getAttachment(TermAttachmentType<T> type) {
-		return getWrapped().getAttachment(type);
-	}
-	
-	@Override
-	public void putAttachment(ITermAttachment attachment) {
-		getWrapped().putAttachment(attachment);
-	}
-	
-	@Override
-	public void removeAttachment(TermAttachmentType<?> attachmentType) {
-		getWrapped().removeAttachment(attachmentType);
-	}
-	
 }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Mon Mar  7 15:17:50 2011	(r22313)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Mon Mar  7 16:32:00 2011	(r22314)
@@ -183,6 +183,13 @@
         }
     }
     
+    protected StrategoTerm clone(boolean stripAttachments) {
+    	StrategoTerm result = clone();
+    	if (stripAttachments)
+    		result.clearAttachments();
+    	return result;
+    }
+    
     public final IStrategoList getAnnotations() {
         return annotations == null ? TermFactory.EMPTY_LIST : annotations;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Mon Mar  7 15:17:50 2011	(r22313)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Mon Mar  7 16:32:00 2011	(r22314)
@@ -204,7 +204,7 @@
         } else if ((annotations == EMPTY_LIST || annotations.isEmpty()) && term.getTermType() == STRING) {
     		return makeString(((IStrategoString) term).stringValue());
         } else if (term instanceof StrategoTerm) {
-        	StrategoTerm result = ((StrategoTerm) term).clone();
+        	StrategoTerm result = ((StrategoTerm) term).clone(true);
         	assert !(result instanceof StrategoWrapped) : "not yet supported";
     	    result.internalSetAnnotations(annotations);
     	    assert result.getStorageType() != MAXIMALLY_SHARED;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java	Mon Mar  7 15:17:50 2011	(r22313)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java	Mon Mar  7 16:32:00 2011	(r22314)
@@ -181,4 +181,12 @@
 			return result;
 		}
 	}
+	
+	@Override
+	public IStrategoTerm annotateTerm(IStrategoTerm term,
+			IStrategoList annotations) {
+		IStrategoTerm result = super.annotateTerm(term, annotations);
+		ensureLink(result, term);
+		return result;
+	}
 }

From seba at informatik.uni-marburg.de  Tue Mar  8 09:49:36 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 08 Mar 2011 08:49:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22315 -
	sugarj/branches/SugarJ-editor-services/case-studies/concretesyntax
Message-ID: <20110308084936.28B227F80C3@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Tue Mar  8 08:49:35 2011
New Revision: 22315
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22315&sc=1

Log:
added metalistvar test file

Added:
   sugarj/branches/SugarJ-editor-services/case-studies/concretesyntax/MetaListVarTest.sugj

Added: sugarj/branches/SugarJ-editor-services/case-studies/concretesyntax/MetaListVarTest.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/case-studies/concretesyntax/MetaListVarTest.sugj	Tue Mar  8 08:49:35 2011	(r22315)
@@ -0,0 +1,11 @@
+package concretesyntax;
+
+import concretesyntax.ConcreteJava;
+
+public sugar MetaListVarTest {
+  
+  rules
+    foo1 : java |[ {java_bstm*} ]| -> ""
+    foo2 : java |[ {~bstm*:bstm*} ]| -> ""
+    foo3 : java |[ {~bstm:bstms} ]| -> ""
+}
\ No newline at end of file

From r.t.lindeman at student.tudelft.nl  Tue Mar  8 10:41:56 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 08 Mar 2011 09:41:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22316 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.stratego.core/.externalToolBuilders
	org.strategoxt.imp.debug.stratego.runtime
	org.strategoxt.imp.debug.stratego.tran...
Message-ID: <20110308094156.4CA91CC049@mx4.tudelft.nl>

Author: RickyLindeman
Date: Tue Mar  8 09:41:55 2011
New Revision: 22316
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22316&sc=1

Log:
trying to fix the build of the debug-plugin

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.externalToolBuilders/Ant builder.launch
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.externalToolBuilders/Ant builder.launch
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.externalToolBuilders/Ant builder.launch	Tue Mar  8 08:49:35 2011	(r22315)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.externalToolBuilders/Ant builder.launch	Tue Mar  8 09:41:55 2011	(r22316)
@@ -1,19 +1,19 @@
-<?xml version="1.0" encoding="UTF-8" standalone="no"?>
-<launchConfiguration type="org.eclipse.ant.AntBuilderLaunchConfigurationType">
-<booleanAttribute key="org.eclipse.ant.ui.ATTR_TARGETS_UPDATED" value="true"/>
-<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
-<listEntry value="/org.strategoxt.imp.debug.stratego.core/build.main.xml"/>
-</listAttribute>
-<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
-<listEntry value="1"/>
-</listAttribute>
-<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
-<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
-<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="true"/>
-<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.debug.stratego.core"/>
-<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_BUILDER_ENABLED" value="true"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.debug.stratego.core/build.main.xml}"/>
-<stringAttribute key="org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS" value="full,incremental,"/>
-<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
-</launchConfiguration>
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntBuilderLaunchConfigurationType">
+<booleanAttribute key="org.eclipse.ant.ui.ATTR_TARGETS_UPDATED" value="true"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.strategoxt.imp.debug.stratego.core/build.main.xml"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="true"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.debug.stratego.core"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_BUILDER_ENABLED" value="false"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.debug.stratego.core/build.main.xml}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_RUN_BUILD_KINDS" value="full,incremental,"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+</launchConfiguration>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml	Tue Mar  8 08:49:35 2011	(r22315)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.main.xml	Tue Mar  8 09:41:55 2011	(r22316)
@@ -29,7 +29,7 @@
 	
 	<!-- build external strategies defined in java -->
 	<!-- <available file="${build}/strjdebugruntime/strategies/Main.class" property="java.jar.enabled"/> -->
-	<available file="${basedir}/${src-gen}/${build.stratego.external.strategies.location}/Main.java" property="java.jar.enabled"/>
+	<available file="${src-gen}/${build.stratego.external.strategies.location}/Main.java" property="java.jar.enabled"/>
 		
 	<!-- Imports -->
 	<property name="build.sdf.imports" value="" />

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml	Tue Mar  8 08:49:35 2011	(r22315)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.main.xml	Tue Mar  8 09:41:55 2011	(r22316)
@@ -31,7 +31,7 @@
 	
 	<!-- build external strategies defined in java -->
 	<!-- <available file="${build}/strjdebugruntime/strategies/Main.class" property="java.jar.enabled"/> -->
-	<available file="${basedir}/${src-gen}/${build.stratego.external.strategies.location}/Main.java" property="java.jar.enabled"/>
+	<available file="${src-gen}/${build.stratego.external.strategies.location}/Main.java" property="java.jar.enabled"/>
 		
 		
 	<!-- Imports -->

From seba at informatik.uni-marburg.de  Tue Mar  8 10:50:24 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 08 Mar 2011 09:50:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22317 -
	sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor
Message-ID: <20110308095024.41B447F80AF@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Tue Mar  8 09:50:23 2011
New Revision: 22317
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22317&sc=1

Log:
SugarJ respects the output folder configuration of the hosting Java project

Modified:
   sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseController.java
   sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java

Modified: sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseController.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseController.java	Tue Mar  8 09:41:55 2011	(r22316)
+++ sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParseController.java	Tue Mar  8 09:50:23 2011	(r22317)
@@ -1,9 +1,14 @@
 package org.sugarj.editor;
 
+import java.io.File;
+
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.imp.model.ISourceProject;
 import org.eclipse.imp.parser.IMessageHandler;
 import org.eclipse.imp.parser.IParseController;
+import org.eclipse.jdt.core.IJavaProject;
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.core.JavaModelException;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
@@ -16,6 +21,8 @@
 
   private SugarJParser sugarjParser;
   private String projectPath;
+
+  private String outputPath;
   
   @Override
   public IParseController getWrapped() {
@@ -27,6 +34,7 @@
         sugarjParser = new SugarJParser(parser);
 
         sugarjParser.setProjectPath(projectPath);
+        sugarjParser.setOutputPath(outputPath);
         
         ((SGLRParseController) result).setParser(sugarjParser);
       }
@@ -56,10 +64,23 @@
       IMessageHandler handler) {
     super.initialize(filePath, project, handler);
     
-    if (project != null)
-      projectPath = project.getRawProject().getLocation().toString();
+    if (project != null) {
+      projectPath = project.getRawProject().getLocation().makeAbsolute().toString();
+      IJavaProject javaProject = JavaCore.create(project.getRawProject());
+      if (javaProject != null)
+        try { 
+          
+          outputPath = projectPath + File.separator + javaProject.getOutputLocation().makeRelativeTo(project.getRawProject().getFullPath()).toString();
+        } catch (JavaModelException e) { 
+          outputPath = null; 
+        }
+      else
+        outputPath = null;
+    }
     
-    if (sugarjParser != null)
+    if (sugarjParser != null) {
       sugarjParser.setProjectPath(projectPath);
+      sugarjParser.setOutputPath(outputPath);
+    }
   }
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java	Tue Mar  8 09:41:55 2011	(r22316)
+++ sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java	Tue Mar  8 09:50:23 2011	(r22317)
@@ -24,6 +24,7 @@
 public class SugarJParser extends JSGLRI {
 
   private String projectPath;
+  private String outputPath;
   private Result result;
 
   public SugarJParser(JSGLRI parser) {
@@ -43,8 +44,9 @@
 
     assert projectPath != null;
     Environment.srcPath.add(projectPath);
-    Environment.bin = projectPath;
     Environment.src = projectPath;
+    Environment.bin = outputPath != null ? outputPath : projectPath;
+
     
     Environment.atomicImportParsing = true;
     Environment.generateJavaFile = true;
@@ -74,7 +76,11 @@
   public void setProjectPath(String projectPath) {
     this.projectPath = projectPath;
   }
-  
+
+  public void setOutputPath(String outputPath) {
+    this.outputPath = outputPath;
+  }
+
   @Override
   public Set<BadTokenException> getCollectedErrors() {
     return result.getCollectedErrors();

From R.B.Vermaas at tudelft.nl  Tue Mar  8 13:09:52 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 08 Mar 2011 12:09:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22318 - hydra
Message-ID: <20110308120952.6DBEE2B8016@mx2.tudelft.nl>

Author: rob
Date: Tue Mar  8 12:09:51 2011
New Revision: 22318
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22318&sc=1

Log:
set java.jar.enabled=true

Modified:
   hydra/spoofax-fun.nix

Modified: hydra/spoofax-fun.nix
==============================================================================
--- hydra/spoofax-fun.nix	Tue Mar  8 09:50:23 2011	(r22317)
+++ hydra/spoofax-fun.nix	Tue Mar  8 12:09:51 2011	(r22318)
@@ -42,7 +42,7 @@
       cp -Rv `find ${eclipse} -name aster.jar` utils/
       cp -Rv `find ${eclipse} -name sdf2imp.jar` utils/
       cp -Rv `find ${eclipse} -name make_permissive.jar` utils/
-      ant -f build.main.xml -Declipse.spoofaximp.jars=utils all
+      ant -f build.main.xml -Declipse.spoofaximp.jars=utils -Djava.jar.enabled=true all
       cd ..
     done
 

From R.B.Vermaas at tudelft.nl  Tue Mar  8 13:25:53 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 08 Mar 2011 12:25:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22319 - hydra
Message-ID: <20110308122553.BC560CC131@mx4.tudelft.nl>

Author: rob
Date: Tue Mar  8 12:25:53 2011
New Revision: 22319
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22319&sc=1

Log:
add -lib utils/ to ant calls

Modified:
   hydra/spoofax-fun.nix

Modified: hydra/spoofax-fun.nix
==============================================================================
--- hydra/spoofax-fun.nix	Tue Mar  8 12:09:51 2011	(r22318)
+++ hydra/spoofax-fun.nix	Tue Mar  8 12:25:53 2011	(r22319)
@@ -42,7 +42,7 @@
       cp -Rv `find ${eclipse} -name aster.jar` utils/
       cp -Rv `find ${eclipse} -name sdf2imp.jar` utils/
       cp -Rv `find ${eclipse} -name make_permissive.jar` utils/
-      ant -f build.main.xml -Declipse.spoofaximp.jars=utils -Djava.jar.enabled=true all
+      ant -lib utils -f build.main.xml -Declipse.spoofaximp.jars=utils -Djava.jar.enabled=true all
       cd ..
     done
 

From R.B.Vermaas at tudelft.nl  Tue Mar  8 15:11:06 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 08 Mar 2011 14:11:06 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22320 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110308141106.BA9172B8005@mx2.tudelft.nl>

Author: rob
Date: Tue Mar  8 14:11:06 2011
New Revision: 22320
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22320&sc=1

Log:
update spoofax-libs with placeholder slowMatch fix

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From R.B.Vermaas at tudelft.nl  Tue Mar  8 15:12:35 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 08 Mar 2011 14:12:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22321 - hydra/jobs
Message-ID: <20110308141235.0355F108C00C@mx3.tudelft.nl>

Author: rob
Date: Tue Mar  8 14:12:34 2011
New Revision: 22321
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22321&sc=1

Log:
use latest strategoxtJavaBackend again

Modified:
   hydra/jobs/strategoxt-java-bootstrap.nix

Modified: hydra/jobs/strategoxt-java-bootstrap.nix
==============================================================================
--- hydra/jobs/strategoxt-java-bootstrap.nix	Tue Mar  8 14:11:06 2011	(r22320)
+++ hydra/jobs/strategoxt-java-bootstrap.nix	Tue Mar  8 14:12:34 2011	(r22321)
@@ -1,17 +1,18 @@
 { nixpkgs ? ../../nixpkgs
 , javaFront ? { outPath = ../../java-front ; rev = 1234; }
-#, strategoxtJavaBackend ? { outPath = ../../strategoxt-java-backend ; rev = 1234; }
+, strategoxtJavaBackend ? { outPath = ../../strategoxt-java-backend ; rev = 1234; }
 , strategoxtJava ? { outPath = ../../strategoxt-java ; rev = 1234; }
 , hydraConfig ? ../.
 } :
 let
   pkgs = import nixpkgs { system = "i686-linux"; };
+/*
   strategoxtJavaBackend = pkgs.fetchsvn {
     url = https://svn.strategoxt.org/repos/StrategoXT/strategoxt-java-backend/trunk;
     rev = 22230;
     sha256 = "0d49aihzqn9ylgjdq4v2vrrzwql9pabwirssgz9jmk0df1bvcs0c";
   };
-
+*/
   bootstrap = baseline: nr:
     pkgs.releaseTools.antBuild {
       name = "strategoxt-java-${toString nr}";

From seba at informatik.uni-marburg.de  Tue Mar  8 15:15:20 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 08 Mar 2011 14:15:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22322 -
	sugarj/branches/SugarJ-editor-services/editor/META-INF
Message-ID: <20110308141520.A5008108C00B@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Tue Mar  8 14:15:20 2011
New Revision: 22322
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22322&sc=1

Log:
added jdt.core dependency

Modified:
   sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF

Modified: sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF	Tue Mar  8 14:12:34 2011	(r22321)
+++ sugarj/branches/SugarJ-editor-services/editor/META-INF/MANIFEST.MF	Tue Mar  8 14:15:20 2011	(r22322)
@@ -18,7 +18,8 @@
  org.strategoxt.strj,
  org.sugarj.compiler,
  org.sugarj.stdlib,
- org.eclipse.ant.core
+ org.eclipse.ant.core,
+ org.eclipse.jdt.core;bundle-version="3.5.2"
 Bundle-RequiredExecutionEnvironment: JavaSE-1.6
 Import-Package: org.osgi.framework;version="1.3.0"
 Bundle-ActivationPolicy: lazy

From seba at informatik.uni-marburg.de  Tue Mar  8 15:45:17 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 08 Mar 2011 14:45:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22323 -
	sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver
Message-ID: <20110308144517.9716FCC2EB@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Tue Mar  8 14:45:16 2011
New Revision: 22323
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22323&sc=1

Log:
rudimentary support for desugaring into several toplevel declarations

Modified:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Tue Mar  8 14:15:20 2011	(r22322)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Tue Mar  8 14:45:16 2011	(r22323)
@@ -303,6 +303,10 @@
   public static void setErrorMessage(IStrategoTerm toplevelDecl, String msg) {
     IToken left = ImploderAttachment.getLeftToken(toplevelDecl);
     IToken right = ImploderAttachment.getRightToken(toplevelDecl);
+    
+    if (left == null || right == null)
+      throw new IllegalStateException(msg + ": " + toplevelDecl);
+    
     for (int i = left.getIndex(), max = right.getIndex(); i <= max; i++) {
       Token tok = ((Token) left.getTokenizer().getTokenAt(i));
       tok.setError(msg);

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Tue Mar  8 14:15:20 2011	(r22322)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Tue Mar  8 14:45:16 2011	(r22323)
@@ -411,9 +411,6 @@
         }
         
         driverResult.generateFile(editorServicesFile, buf.toString());
-        
-  
-        
       } finally {
         log.endTask();
       }
@@ -444,10 +441,17 @@
           processSugarDec(toplevelDecl);
         else if (isApplication(toplevelDecl, "EditorServicesDec")) 
           processEditorServicesDec(toplevelDecl);
+        else if (ATermCommands.isList(toplevelDecl))
+          /* 
+           * Desugarings may generate lists of toplevel declarations. These declarations,
+           * however, may not depend on one another.
+           */
+          for (IStrategoTerm term : ATermCommands.getList(toplevelDecl))
+            processToplevelDeclaration(term);
         else
           throw new IllegalArgumentException("unexpected toplevel declaration, desugaring probably failed");
       } catch (Exception e) {
-        ATermCommands.setErrorMessage(toplevelDecl, e.getLocalizedMessage());
+        ATermCommands.setErrorMessage(toplevelDecl, e.getLocalizedMessage() != null ? e.getLocalizedMessage() : e.toString());
         sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
       }
     }

From M.A.Akhter at student.tudelft.nl  Wed Mar  9 00:33:42 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 08 Mar 2011 23:33:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22324 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen esv sdf str
Message-ID: <20110308233342.55BD92B800B@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Mar  8 23:33:41 2011
New Revision: 22324
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22324&sc=1

Log:
fixed few issues with generating artifacts. Automatic generation of the build scripts has been added

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Tue Mar  8 23:33:41 2011	(r22324)
@@ -0,0 +1,293 @@
+module buildscripts
+
+imports 
+  libstratego-lib
+  libstratego-sdf
+  libstratego-sglr
+  libstratego-gpp
+  libstratego-aterm
+  libstrc
+  lib/editor-common.generated
+  lib/sdf-desugar
+  lib/sdf-parenthesize
+imports 
+	include/SpoofaxLang
+imports 
+	Common
+
+rules
+	
+	emit-build-script: (project-path, packages-root , current-package-root , package-name) -> None()
+		with 
+			autogen-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", "build.spx.package.generated")
+			;packagespecific-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", $[build.[package-name]])
+		where
+			 <dirname; ensure-directory-exists>autogen-ant-output-path  
+			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>())
+		where
+			 <dirname; ensure-directory-exists>packagespecific-ant-output-path  
+			;<save-to-file>(packagespecific-ant-output-path, <get-packagespecific-ant-script-string>(packages-root , current-package-root , package-name) )
+	
+	
+	//TODO : replace package-name with fully qualified namespace. 
+	 
+	get-packagespecific-ant-script-string:(packages-root , current-package-root , package-name) ->
+$[<?xml version="1.0" encoding="UTF-8" ?>
+<project name="build.[package-name]" default="build-spx-packages">
+        
+		<!-- autogenerated artifacts relative directory path -->	
+		<property name="packages.root" location="[packages-root]"/>
+		
+		<!-- prject directories -->
+    <property name="trans" location="trans"/>
+    <property name="src-gen" location="editor/java"/>
+    <property name="syntax" location="syntax"/>
+    <property name="include" location="include"/>
+    <property name="lib" location="lib"/>
+    <property name="build" location="bin"/>
+    <property name="dist" location="bin/dist"/>
+    
+		<!-- Environment configuration for command-line builds -->
+    <property name="build.sdf.imports" value=""/>
+    <property name="build.stratego.args" value="
+                    --library
+                    -I &quot;${packages.root}&quot;
+                    -I &quot;${basedir}&quot;
+                    -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+
+		<condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+        <isset property="eclipse.spoofaximp.nativeprefix"/>
+    </condition>
+    <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+
+    
+	<import file="build.spx.package.generated.xml"/>
+	
+	<target name="build.[package-name].package">
+		<property name="package.name" value="[package-name]"/>
+		<property name="package.path" value="[packages-root]/[current-package-root]"/>
+		<property name="package.main.sdf.module" value="[package-name]-main"/>
+		<property name="package.main.str.module" value="[package-name]-main"/>
+		<property name="package.main.esv.module" value="[package-name].main"/>
+		<property name="metasdfmodule" value="Stratego-[package-name]"/> 
+
+		<antcall target = "spx.default">
+		  	<param name = "package.name" value = "${package.name}"/>
+			<param name = "package.path" value = "${package.path}"/>
+		 	<param name = "package.main.sdf.module" value = "${package.main.sdf.module}"/>
+			<param name = "package.main.str.module" value = "${package.main.str.module}"/>
+		 	<param name = "package.main.esv.module" value = "${package.main.esv.module}"/>
+			<param name = "metasdfmodule" value = "${metasdfmodule}"/>
+		</antcall>
+	</target>
+	<!-- Main target -->
+  <target name="build-spx-packages" depends="build.spoofax-test.package"/>
+</project>] 
+	
+	get-ant-autogeneratedscript : () ->
+$[<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.spx.generated">
+		
+		<target name="spx.default" depends="spx.default.ctree"/>
+    <target name="spx.default.ctree" depends="check-classpath,init,pack-sdf,copy-sdf,java.jar,stratego.ctree,sdf2imp, refresh"/>
+        
+    <!-- Initialization -->
+    <available file="${build}/org/strategoxt/imp/editors/spoofax/strategies/Main.class" property="java.jar.enabled"/>
+    <condition property="java.jar.import" value="-la org.strategoxt.imp.editors.spoofax.strategies" else="">
+        <isset property="java.jar.enabled"/>
+    </condition>
+    <condition property="java.jar.classpath" value=":${include}/${package.main.str.module}-java.jar" else="">
+        <isset property="java.jar.enabled"/>
+    </condition>
+    <available file="${package.path}/${package.main.str.module}.rtree" property="build.stratego.enabled"/>
+    <dirname property="externaldefdir" file="${externaldef}"/>
+    <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+        <isset property="externaldef"/>
+    </condition>
+    <condition property="externaljarimport" value=":${externaljar}" else="">
+        <isset property="externaljar"/>
+    </condition>
+    <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+        <isset property="eclipse.running"/>
+    </condition>
+    <condition property="externaljarflags" value="${externaljarflags}" else="">
+        <isset property="externaljarflags"/>
+    </condition>
+    <condition property="metasdfmodule.available" value="1">
+        <available file="${package.path}/${metasdfmodule}.sdf"/>
+    </condition>
+    
+	<fail unless="build" message="Please use build.spx.main.xml to build this project or configure the required properties manually"/>
+    <mkdir dir="${build}"/>
+    <mkdir dir="${src-gen}"/>
+    <mkdir dir="${dist}"/>
+    <mkdir dir="${include}"/>
+    <mkdir dir="${lib}"/>
+    <mkdir dir="${syntax}"/>
+
+		<target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+		</target>
+		      
+		<target name="check-classpath">
+        <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+        <antcall target="check-classpath.helper"/>  
+		</target>
+  	
+		<target name="java.jar" if="java.jar.enabled">
+    		<jar basedir="${build}" excludes="{packages.root}/**" update="true" destfile="${include}/${package.name}-java.jar"/>
+ 		</target>
+		
+		<target name="check-classpath.helper" unless="check-classpath.available">
+	        <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+	        <echo level="error" message="Make sure it is on the class path."/>
+	        <echo level="error" message=""/>               
+	        <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+	        <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+	        <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+	        <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+	        <fail/>
+	    </target>
+	        
+		<!--lots of redundant steps. TODO : remove the redundant build steps-->
+		<target name="refresh" if="eclipse.running">
+    		<eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+        <eclipse.convertPath fileSystemPath="${packages.root}" property="packagesroot.dir"/>
+        <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+				<eclipse.convertPath fileSystemPath="${include}" property="includedir"/>
+				<eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+				<eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>	
+			
+				<eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+				<eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+				
+				<eclipse.refreshLocal resource="${projectdir}/build.spx.autogenerated.xml" depth="infinite"/>
+				<eclipse.refreshLocal resource="${packagesroot.dir}" depth="infinite"/>
+				<eclipse.refreshLocal resource="${includedir}" depth="infinite"/>
+            
+        <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+        <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+    </target>
+        
+		<target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+        <mkdir dir="utils"/>
+        <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+        <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+        <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+        <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+  	</target>
+    
+		<target name="copy-sdf" if="externaldef">
+	  		<copy file="${externaldef}" tofile="${include}/${package.name}.def" preservelastmodified="true"/>
+    </target>
+	
+    <target name="pack-sdf" unless="externaldef">
+        <dependset>
+            <srcfileset dir="${packages.root}">
+                <include name="**/*.sdf"/>
+            </srcfileset>
+            <srcfileset dir="${lib}">
+                <include name="**/*.def"/>
+            </srcfileset>
+            <targetfileset file="${include}/${package.name}.def"/>
+        </dependset>
+        <available file="${include}/${package.name}.def" property="pack-sdf.available"/>
+        <antcall target="pack-sdf.helper"/>
+    </target>
+
+    <target name="pack-sdf.helper" unless="pack-sdf.available">
+        <condition property="utils-include" value="-I ${utils}" else="">
+            <available file="${utils}"/>
+        </condition>
+        <java classname="run" failonerror="true">
+            <arg value="org.strategoxt.tools.main-pack-sdf"/>
+            <arg value="-i"/>
+            <arg value="${package.path}/${package.main.sdf.module}.sdf"/>
+            <arg value="-o"/>
+            <arg value="${include}/${package.name}.def"/>
+            <arg value="-I"/>
+            <arg value="${package.path}"/>
+            <arg value="-I"/>
+            <arg value="${lib}"/>
+            <arg line="${utils-include}"/>
+            <arg line="${build.sdf.imports}"/>
+        </java>
+    </target>
+
+  	<target name="copy-jar" if="externaljar">
+  		<copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+    </target>
+
+	
+		<!-- Stratego to Java interpreter -->
+    <target name="stratego.ctree" >
+    	<dependset>
+      		<srcfileset dir="${packages.root}">
+          	<include name="**/*.rtree"/>
+      			<include name="**/*.str"/>
+          </srcfileset>
+    			<srcfileset dir="${lib}">
+    	    	<include name="**/*.str"/>
+    				<exclude name="lib/editor-common.generated.str"/>
+    	    </srcfileset>
+    	    <targetfileset file="${include}/${package.name}.ctree"/>
+      </dependset>
+      <available file="${include}/${package.name}.ctree" property="strc-java.available"/>
+      <antcall target="copy-jar"/>
+      <antcall target="stratego.jvm.helper">
+      	<param name="build.stratego.outputfile" value="${include}/${package.name}.ctree"/>
+      	<param name="build.stratego.extraargs" value="-F"/>
+      </antcall>
+    </target>
+        
+    <target name="stratego.jar.deletehelper" unless="strc-java.available">
+	    <delete>
+	      <fileset dir="${src-gen}" includes="trans/**"/>
+        <fileset dir="${build}" includes="trans/**"/>
+      </delete>
+	  </target>
+            
+  <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+  	<delete file="${include}/${package.name}.rtree" failonerror="false"/>
+  	<java classname="org.strategoxt.strj.Main" failonerror="true">
+  		<arg value="-I"/>
+    	<arg value="${packages.root}"/>
+  		<arg value="-i"/>
+      <arg value="${package.path}/${package.main.str.module}.str"/>
+      <arg value="-o"/>
+      <arg value="${build.stratego.outputfile}"/>
+  		<arg value="-p"/> 
+  	  <arg value="test"/><!-- Todo : reconsider whether this extra args are needed -->
+      <arg value="--library"/>
+      <arg value="--clean"/>
+  		<arg line="${build.stratego.args}"/>
+      <arg line="${build.stratego.extraargs}"/>
+      <arg line="${externaljarflags}"/>
+      <arg line="${externaldefimport}"/>
+      <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+  </java>
+  <delete file="${include}/${package.name}.rtree" failonerror="false"/>
+  <mkdir dir="${build}/trans"/>
+</target>
+                
+		<target name="clean" description="clean up">
+      <delete dir="${build}"/>
+      <delete file="${include}/${package.main.sdf.module}.def"/>
+      <delete dir="${src-gen}/trans"/>
+		</target>
+	
+	  <target name="sdf2imp" depends="sdf2imp.eclipse"/>
+	        
+		<target name="sdf2imp.eclipse" if="eclipse.running" >
+			<copy file="${package.path}/${package.main.esv.module}.packed.esv" tofile="${include}/${package.main.esv.module}.packed.esv" preservelastmodified="true"/>
+		</target>
+	
+</project>
+	
+]
+
+	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Tue Mar  8 14:45:16 2011	(r22323)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Tue Mar  8 23:33:41 2011	(r22324)
@@ -1,7 +1,7 @@
 module common
 
 imports 
-	libstratego-lib
+  libstratego-lib
   libstratego-sdf
   libstratego-sglr
   libstratego-gpp
@@ -48,12 +48,14 @@
 			with
 				package-name := 	<find-spoofax-module-name-string>(resolved-path, def)
 				;concept-name := <base-filename>package-name //TODO : get concept-name 
+				;package-gen-relative-path := <Package-Gen-Root> 
 			with 
 				if not(<is-declared>(package-name, concept-name)) then 
 					rules
 					( 
 							DeclaredConcept :+ (package-name, concept-name ) -> def
 							FilePath-of-DeclaredConcept:+ (package-name, concept-name ) -> resolved-path //TODO: not sure yet whether we need it.
+							Package-Gen-Root-of-DeclaredConcept:+(package-name, concept-name )  -> package-gen-relative-path
 					) 
 					;<debug>$[ Storing following declaration - DeclaredConcept : ([package-name],[concept-name]) -> [<pp-aterm>def]]
 				else
@@ -77,11 +79,17 @@
 	map-declarations( declaration-adapter): 
 		list* -> result
 		where 
+				<debug(!"common| mapping declaration >>>> ")> list*
+		where 
 			result :=<map(project-declaration(declaration-adapter))>list*
-	
+		
+				
+				
 	project-declaration(declaration-adapter):
 		n@(namespace, conceptname) -> result
  		where 
+				<debug(!"common| projecting declaration>>>> ")> n
+		where 
 		 	concept := <get-unique-declaration> n
 		  ;result := <declaration-adapter>(namespace,conceptname , concept)  
 		
@@ -105,18 +113,39 @@
    	 		if not(!path => "") then
       		name := <remove-extension> <base-filename> path
     		end
-    		
+  
+  
+  //TODO : improve its performance by adding caching  		
  	find-spoofax-module-name-string: 
-		  (path,def) ->name'
-			with
+		(path,def) ->module-name
+	  
+	  with
 				name := <find-spoofax-module-name> (path,def)
-      	;if !name => ParamName(n, p) then
-        	name' := parameterized(n, p)
+	      ;if !name => ParamName(n, p) then
+	      	name' := parameterized(n, p)
       	else
-       			(Name(name') := name) 
-       		<+ 
-       			(name' := name) 
+   				(Name(name') := name) 
+	      	<+ 
+     			(name' := name) 
   	    end
+  	    ;<debug(!"common| package name :")> name'
+	 		 	;modname-part* := <string-tokenize> (['/'], name')
+  	 		;<debug(!"common| mod-name-parts :")> modname-part*
+  	 		;if <eq>(<length>modname-part* , 1) then
+  	 		 		module-name  := name'
+  	 		 		;pack-gen-main := ""
+  	 		 else
+  	 		 		module-name  := <last>modname-part*
+  	 		 		;pack-gen-main := <dirname>name'  
+  	 		 end
+		  	 ;rules ( 
+  	 						Main-Package-Name:= module-name
+  	 						Package-Gen-Root := pack-gen-main  
+  	 					)	 	
+	  	 		;<debug(!"common >>>> ")> <Main-Package-Name>
+	  	 		;<debug(!"common >>>> ")> <Package-Gen-Root> 	 			     
+							 
+				    
   
   get-qualified-spxmodulename: 
   	(package-name,concept-name) -> result
@@ -131,7 +160,8 @@
       where
           not(<eq>("", fileContent))
       with  
-      		<debug> $[Writing the following content: [<pp-aterm>fileContent] to the following file: [fileName]]
+      		<debug> $[Writing to the following file : [fileName]the following content: [fileContent] ]
+      		//;<debug> $[Writing the following content: [<pp-aterm>fileContent] to the following file: [fileName]]
           ;handle := <fopen> (fileName, "w+")
           ;<fputs>(fileContent , handle)
           ;fclose
@@ -143,4 +173,22 @@
 	
 	initialize-configuration  = rules (Autogenerated-Artifacts-Dir := ".shawdowdir")
 															;<debug> $[Spoofax-lang|Initialize-Configuration]
-  					 
\ No newline at end of file
+rules
+	
+	ensure-exists =  
+		?(project-path,relative-path)
+		;dir* := <string-tokenize> (['/'], relative-path) //tokenize relative-path to create the subdirectories
+		;if not(<eq>(<length>dir*,0)) then 
+				<map(create-folder)> dir*  //Creating sub-directories if they does not exists
+		 end
+		;create-folder(|project-path)  // restoring current folder to the project-path 
+		 
+		
+	create-folder(|directory-to-create) =   <file-exists<+mkdir(|"w")> directory-to-create;<chdir>directory-to-create  
+	
+  create-folder: folder-name -> None() 
+		with 
+    	<file-exists<+mkdir(|"w")> folder-name 
+      ;<chdir>folder-name 		    
+ 	
+ 	 					 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Tue Mar  8 14:45:16 2011	(r22323)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Tue Mar  8 23:33:41 2011	(r22324)
@@ -36,7 +36,8 @@
  			 										)
  			;esv-aterm := Module(main-package-name, <get-all-imports>, sections)
  			//saving paked.esv 
- 			;output-path-esv := <get-fullyqualified-autogen-path(|"esv")>(project-path,<Autogenerated-Artifacts-Dir>,main-package-name)
+ 			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root>]]
+ 			;output-path-esv := <get-fullyqualified-autogen-path(|"esv")>(project-path,autogen-dir,main-package-name)
 			;<dirname; ensure-directory-exists>output-path-esv 
 			//;<save-to-file>(output-path-esv,<pp-aterm>esv-aterm)
 			;<WriteToBinaryFile>(output-path-esv,esv-aterm)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Tue Mar  8 14:45:16 2011	(r22323)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Tue Mar  8 23:33:41 2011	(r22324)
@@ -39,22 +39,23 @@
 	to-sdf-all: (def, path , project-path)  -> None()
  		with 
  			declared-concept-entries := <get-all-declared-entries>
- 		 ;rules ( Main-Package-Name:= <find-spoofax-module-name-string>(path, def))
  		where 
  			<debug>$[Namespace-reference-table : [<pp-aterm>declared-concept-entries]]
  		where
  			<map-declarations(to-sdf(|project-path))>declared-concept-entries
-			;generate-sdf-main(|project-path , <Main-Package-Name>)
+			;generate-sdf-main(|project-path , <find-spoofax-module-name-string>(path, def))
  	
  	
  	to-sdf(|project-path):
 		(package-name,concept-name,def) -> sdf-string
 		with 
-			autogen-directory := <Autogenerated-Artifacts-Dir>
+			autogen-directory := $[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root-of-DeclaredConcept>(package-name,concept-name)]]
+			;debug(!"autogen-directory : ") 
 		with 
     	import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> def
     	;name := <get-qualified-spxmodulename>(package-name,concept-name)
     	;output-path := <get-fullyqualified-autogen-path(|"sdf")>(project-path,autogen-directory , name)
+    	;<debug>$[Gen Sdf for : [name] path : [output-path]] 
     	;<debug>output-path  
     with
       sdf-import-stmt* := 'imports( <map(spximport-to-sdfimport)>import-stmt* )
@@ -64,7 +65,7 @@
  		where 
  			sdf-string := <pp-sdf-string'> 'module(name, [sdf-import-stmt*], [exports(sections')])
  		where 
-			<dirname; ensure-directory-exists>output-path 
+			<ensure-exists>(project-path, autogen-directory) 
 			;<save-to-file>(output-path , sdf-string )
 	
 	
@@ -76,8 +77,9 @@
 imports
 	[<project-allkeys-declared(to-sdf-import)>declared-concept-entries]   									 
 ]
-			;output-path := <get-fullyqualified-autogen-path(|"sdf")>(project-path,<Autogenerated-Artifacts-Dir> , main-sdf-file-name)
-			;<dirname; ensure-directory-exists>output-path 
+			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root>]]
+			;output-path := <get-fullyqualified-autogen-path(|"sdf")>(project-path, autogen-dir , main-sdf-file-name)
+			;<ensure-exists>(project-path, autogen-dir) 
 			;<save-to-file>(output-path , sdf-string )
 	 					
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Tue Mar  8 14:45:16 2011	(r22323)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Tue Mar  8 23:33:41 2011	(r22324)
@@ -27,14 +27,15 @@
 		(def, path , project-path) -> None()
 		where  
 			 	<debug> $[Spoofax-lang|Generating signature for the following package : [<Main-Package-Name>]]
-			 	;rules (signature-file-name:=$[[<Main-Package-Name>].signature])
-			 	;output-path-str 		:= <get-fullyqualified-autogen-path(|"str")>(project-path,<Autogenerated-Artifacts-Dir> , <signature-file-name>)
-			 	;output-path-rtree 	:= <get-fullyqualified-autogen-path(|"rtree")>(project-path,<Autogenerated-Artifacts-Dir> , <signature-file-name>)
+			 	;name := <find-spoofax-module-name-string>(path, def)
+			 	;rules (signature-file-name:=$[[name].signature])
+			 	;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root>]] 
+			 	;output-path-str 		:= <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir , <signature-file-name>)
+			 	;output-path-rtree 	:= <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, <signature-file-name>)
 			 	;generated-signatures-string :=  <get-signature-contents(|<signature-file-name>)><get-all-signatures-as-string>
-			 	;<dirname; ensure-directory-exists>output-path-str
+			 	;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
+			 	;<ensure-exists>( project-path , autogen-dir )
 				;<save-to-file>( output-path-str, generated-signatures-string)
-				;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
-				;<dirname; ensure-directory-exists>output-path-rtree
 				;<save-to-file>( output-path-rtree, signatures-as-aterm-string)  
 rules 
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Tue Mar  8 14:45:16 2011	(r22323)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Tue Mar  8 23:33:41 2011	(r22324)
@@ -30,15 +30,14 @@
 		(def, path , project-path)-> None()
  		with 
  			declared-concept-entries := <get-all-declared-entries>
- 			;name := <find-spoofax-module-name-string>(path, def)
  		where
  			<map-declarations(to-str(|project-path))>declared-concept-entries
-			;generate-str-main(|project-path , name)
+			;generate-str-main(|project-path , <find-spoofax-module-name-string>(path, def))
  	
  	to-str(|project-path):
 		(package-name,concept-name,def) -> str-string
 		with 
-			autogen-directory := <Autogenerated-Artifacts-Dir>
+			autogen-directory := $[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root-of-DeclaredConcept>(package-name,concept-name)]]
 		with 
     	name := <get-qualified-spxmodulename>(package-name,concept-name)
     	;output-path-str := <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-directory , name)
@@ -58,27 +57,24 @@
     	str-aterm := Module(name, str-section);
  			str-string := <pp-stratego-string> <parenthesize-Stratego> str-aterm
  		where 
-			<dirname; ensure-directory-exists>output-path-str 
+			<ensure-exists>(project-path, autogen-directory) 
 			;<save-to-file>(output-path-str , str-string)
-		where 
-			<dirname; ensure-directory-exists>output-path-rtree 
-			//;<save-to-file>(output-path-rtree , <pp-aterm>str-aterm)
 			;<WriteToBinaryFile>(output-path-rtree , str-aterm)
 	 
 	generate-str-main(|project-path , main-package-name)=
 		  declared-concept-entries := <get-all-declared-entries>
 		  ;main-package-name' := $[[main-package-name]-main]
 		  ;str-aterm := Module( main-package-name' , [Imports(<project-allkeys-declared(to-str-import)>declared-concept-entries)])
-		  ;str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm 
+		  ;str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
+		  ;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root>]]// setting up the autogen directory path
+			;<ensure-exists>(project-path,autogen-dir) // verifying directory exists  
+			;output-path-str := <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir, main-package-name') // PATH to the STR file  
+			;output-path-rtree := <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, main-package-name')  //Path to the RTREE File
+			;<save-to-file>(output-path-str , str-string ) // Saving stratego contents to STR Path
+			;<WriteToBinaryFile> (output-path-rtree , str-aterm) // Saving Rtree
+			//;<save-to-file>(output-path-rtree , <pp-aterm>str-aterm) 
 			
-			;output-path-str := <get-fullyqualified-autogen-path(|"str")>(project-path,<Autogenerated-Artifacts-Dir> , main-package-name')
-			;<dirname; ensure-directory-exists>output-path-str
-			;<save-to-file>(output-path-str , str-string )
 			 
-			;output-path-rtree := <get-fullyqualified-autogen-path(|"rtree")>(project-path,<Autogenerated-Artifacts-Dir> , main-package-name')
-			;<dirname; ensure-directory-exists>output-path-rtree
-			;<WriteToBinaryFile> (output-path-rtree , str-aterm)
-			//;<save-to-file>(output-path-rtree , <pp-aterm>str-aterm) 
 			  								  
 rules 
 	

From M.A.Akhter at student.tudelft.nl  Wed Mar  9 00:38:39 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 08 Mar 2011 23:38:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22325 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common:
	. lib
Message-ID: <20110308233839.303E4CC30B@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Mar  8 23:38:38 2011
New Revision: 22325
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22325&sc=1

Log:
added example for spx with hierarchical module name

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common/lib/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common/lib/B.spx
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common/A.spx

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common/A.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common/A.spx	Tue Mar  8 23:33:41 2011	(r22324)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common/A.spx	Tue Mar  8 23:38:38 2011	(r22325)
@@ -1,6 +1,6 @@
 module common/A
 imports 
-	common/B
+	lib/B
 
 exports
 
@@ -11,5 +11,6 @@
 	ID 		 -> A{cons("IntVar-prime")} 
 
 lexical syntax
-	[0-9]+ -> INT1
+	[0-9]+ -> INT1  
 	 
+  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common/lib/B.spx
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/common/lib/B.spx	Tue Mar  8 23:38:38 2011	(r22325)
@@ -0,0 +1,10 @@
+module common/lib/B
+	
+exports
+
+lexical syntax
+	[0-9]+ -> INT2
+	 
+lexical syntax
+	[0-9]+ -> INT
+	[a-zA-B][a-zA-B0-9]+ -> ID 
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Mar  9 00:39:40 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 08 Mar 2011 23:39:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22326 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test
Message-ID: <20110308233940.EDE652B800B@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Mar  8 23:39:40 2011
New Revision: 22326
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22326&sc=1

Log:
updating spoofax test file for testing the code generation phase. currently it can generate all the artifacts and its hierarchical directory structure as well.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx	Tue Mar  8 23:38:38 2011	(r22325)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/test/spoofax-test.spx	Tue Mar  8 23:39:40 2011	(r22326)
@@ -22,7 +22,7 @@
 
 rules
 	  test-rule1: Program(_) ->  IntVar(1,2) 
-	  test-rule1: Program(_) ->  IntVar-prime(1)     
+	  test-rule1: Program(_) ->  IntVar-prime(1)        
 	      
  
    
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Wed Mar  9 00:43:00 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 08 Mar 2011 23:43:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22327 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans
Message-ID: <20110308234300.32531CC30F@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Mar  8 23:42:59 2011
New Revision: 22327
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22327&sc=1

Log:
Added builders related to ant script

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Tue Mar  8 23:39:40 2011	(r22326)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Tue Mar  8 23:42:59 2011	(r22327)
@@ -24,7 +24,9 @@
 imports
   esv/to-esv
   esv/main
-
+imports 
+	codegen/buildscripts
+	
 rules
  	editor-analyze:
     (ast, path, project-path) -> (all-error*, all-warning*, notes-sdf*)
@@ -73,13 +75,18 @@
 		(selected, position, ast, path, project-path) -> None()
 		with 
 			<analyze-ast>(ast, path, project-path)
+		with 
+			<find-spoofax-module-name-string>(path, selected)	
     with
-      <to-sdf-all> (selected, path , project-path)
-     ;<to-signature-all> (selected, path,project-path)
+	  	 <to-sdf-all> (selected, path , project-path)
+	  	;<to-signature-all> (selected, path,project-path)
 		with	
 			<to-str-all>(selected, path , project-path)
 		with	
 			<to-esv-all>(selected, path , project-path)
+		where 
+			<emit-build-script>(project-path, <Autogenerated-Artifacts-Dir>, <Package-Gen-Root>, <Main-Package-Name>)
+		
 rules	 
 
 	// Generate Signature for SDF Definition

From M.A.Akhter at student.tudelft.nl  Wed Mar  9 02:13:02 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Wed, 09 Mar 2011 01:13:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22328 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	esv sdf str
Message-ID: <20110309011302.21F512B800B@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Wed Mar  9 01:13:01 2011
New Revision: 22328
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22328&sc=1

Log:
refactoring retrieving the package name from the spx definition and updating the dependent rules. getting rid of redundant references and dynamic rules. 

Namespace reference table has been updated with this new rules

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Tue Mar  8 23:42:59 2011	(r22327)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Wed Mar  9 01:13:01 2011	(r22328)
@@ -46,9 +46,10 @@
  	store-definition(|resolved-path): 
 			def at definition -> def
 			with
-				package-name := 	<find-spoofax-module-name-string>(resolved-path, def)
+				debug(!"ok 1")
+				;(package-name, package-gen-relative-path)  := 	<find-spoofax-module-name-string>(resolved-path, def)
+				;debug(!"ok 2")
 				;concept-name := <base-filename>package-name //TODO : get concept-name 
-				;package-gen-relative-path := <Package-Gen-Root> 
 			with 
 				if not(<is-declared>(package-name, concept-name)) then 
 					rules
@@ -117,8 +118,7 @@
   
   //TODO : improve its performance by adding caching  		
  	find-spoofax-module-name-string: 
-		(path,def) ->module-name
-	  
+		(path,def) ->(package-name, relative-autogen-path)
 	  with
 				name := <find-spoofax-module-name> (path,def)
 	      ;if !name => ParamName(n, p) then
@@ -128,24 +128,16 @@
 	      	<+ 
      			(name' := name) 
   	    end
-  	    ;<debug(!"common| package name :")> name'
-	 		 	;modname-part* := <string-tokenize> (['/'], name')
-  	 		;<debug(!"common| mod-name-parts :")> modname-part*
+  	  	;modname-part* := <string-tokenize> (['/'], name')
   	 		;if <eq>(<length>modname-part* , 1) then
-  	 		 		module-name  := name'
-  	 		 		;pack-gen-main := ""
+  	 		 		package-name  := name'
+  	 		 		;relative-autogen-path := ""
   	 		 else
-  	 		 		module-name  := <last>modname-part*
-  	 		 		;pack-gen-main := <dirname>name'  
+  	 		 	 package-name   := <last>modname-part*
+  	 		 	;relative-autogen-path := <dirname>name'  
   	 		 end
-		  	 ;rules ( 
-  	 						Main-Package-Name:= module-name
-  	 						Package-Gen-Root := pack-gen-main  
-  	 					)	 	
-	  	 		;<debug(!"common >>>> ")> <Main-Package-Name>
-	  	 		;<debug(!"common >>>> ")> <Package-Gen-Root> 	 			     
-							 
-				    
+		  	 
+	  		    
   
   get-qualified-spxmodulename: 
   	(package-name,concept-name) -> result

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Tue Mar  8 23:42:59 2011	(r22327)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Wed Mar  9 01:13:01 2011	(r22328)
@@ -23,7 +23,8 @@
 		(def, path , project-path)  -> None()
 		with 
 			declared-concept-entries  := <get-all-declared-entries>
- 			;main-package-name 				:= $[[<find-spoofax-module-name-string>(path, def)].main.packed] 
+ 			;(package-name,relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
+ 			; main-package-name :=   $[[package-name].main.packed]
  		where 
  			<map-declarations(store-esv-defintions)>declared-concept-entries
  			;sections := <conc>(<all-keys-Declared-Language-Description>, 
@@ -36,7 +37,7 @@
  			 										)
  			;esv-aterm := Module(main-package-name, <get-all-imports>, sections)
  			//saving paked.esv 
- 			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root>]]
+ 			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
  			;output-path-esv := <get-fullyqualified-autogen-path(|"esv")>(project-path,autogen-dir,main-package-name)
 			;<dirname; ensure-directory-exists>output-path-esv 
 			//;<save-to-file>(output-path-esv,<pp-aterm>esv-aterm)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Tue Mar  8 23:42:59 2011	(r22327)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Wed Mar  9 01:13:01 2011	(r22328)
@@ -26,7 +26,7 @@
     with 
     	import-stmt* := <collect-om(?Imports(<id>) , conc);flatten-list;make-set> def
     with
-      name := <find-spoofax-module-name-string>(path, def)
+      (name, relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
       ;sdf-import-stmt* := 'imports( <map(spximport-to-sdfimport)>import-stmt* )
       ;sections  := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> def
       ;sections' := <alltd(desugar-sdf-redux)> <list-to-conc-grammars> sections
@@ -38,12 +38,13 @@
  //generate sdf definition 
 	to-sdf-all: (def, path , project-path)  -> None()
  		with 
- 			declared-concept-entries := <get-all-declared-entries>
+ 			declared-concept-entries := <get-all-declared-entries>;
+ 		  (name, relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
  		where 
  			<debug>$[Namespace-reference-table : [<pp-aterm>declared-concept-entries]]
  		where
  			<map-declarations(to-sdf(|project-path))>declared-concept-entries
-			;generate-sdf-main(|project-path , <find-spoofax-module-name-string>(path, def))
+			;generate-sdf-main(|project-path , name, relative-autogen-path)
  	
  	
  	to-sdf(|project-path):
@@ -69,7 +70,7 @@
 			;<save-to-file>(output-path , sdf-string )
 	
 	
-	generate-sdf-main(|project-path , main-package-name)=
+	generate-sdf-main(|project-path , main-package-name,relative-autogen-path)=
 		  declared-concept-entries := <get-all-declared-entries>
 		  ;main-sdf-file-name := $[[main-package-name]-main]
 		  ;sdf-string := 
@@ -77,7 +78,7 @@
 imports
 	[<project-allkeys-declared(to-sdf-import)>declared-concept-entries]   									 
 ]
-			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root>]]
+			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
 			;output-path := <get-fullyqualified-autogen-path(|"sdf")>(project-path, autogen-dir , main-sdf-file-name)
 			;<ensure-exists>(project-path, autogen-dir) 
 			;<save-to-file>(output-path , sdf-string )

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Tue Mar  8 23:42:59 2011	(r22327)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Wed Mar  9 01:13:01 2011	(r22328)
@@ -26,10 +26,10 @@
 	to-signature-all:
 		(def, path , project-path) -> None()
 		where  
-			 	<debug> $[Spoofax-lang|Generating signature for the following package : [<Main-Package-Name>]]
-			 	;name := <find-spoofax-module-name-string>(path, def)
+			 	(name, relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
+			 	;<debug> $[Spoofax-lang|Generating signature for the following package : [name]]
 			 	;rules (signature-file-name:=$[[name].signature])
-			 	;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root>]] 
+			 	;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]] 
 			 	;output-path-str 		:= <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir , <signature-file-name>)
 			 	;output-path-rtree 	:= <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, <signature-file-name>)
 			 	;generated-signatures-string :=  <get-signature-contents(|<signature-file-name>)><get-all-signatures-as-string>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Tue Mar  8 23:42:59 2011	(r22327)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/spoofaxlang.str	Wed Mar  9 01:13:01 2011	(r22328)
@@ -76,7 +76,7 @@
 		with 
 			<analyze-ast>(ast, path, project-path)
 		with 
-			<find-spoofax-module-name-string>(path, selected)	
+			(name , relative-autogen-path ):=<find-spoofax-module-name-string>(path, selected)	
     with
 	  	 <to-sdf-all> (selected, path , project-path)
 	  	;<to-signature-all> (selected, path,project-path)
@@ -85,7 +85,7 @@
 		with	
 			<to-esv-all>(selected, path , project-path)
 		where 
-			<emit-build-script>(project-path, <Autogenerated-Artifacts-Dir>, <Package-Gen-Root>, <Main-Package-Name>)
+			<emit-build-script>(project-path, <Autogenerated-Artifacts-Dir>, relative-autogen-path, name)
 		
 rules	 
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Tue Mar  8 23:42:59 2011	(r22327)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Wed Mar  9 01:13:01 2011	(r22328)
@@ -16,7 +16,7 @@
   to-str:
     (path, def) -> Module(name, str-section)
     with
-      name := <find-spoofax-module-name-string>(path, def)
+      (name,relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
       ;sections  := <collect-om(?STRSection(<id>), conc)> def
     with 
     	import-stmt* := <make-set> <import-signatures> <collect-om(?Imports(<id>) , conc);flatten-list> def
@@ -30,9 +30,10 @@
 		(def, path , project-path)-> None()
  		with 
  			declared-concept-entries := <get-all-declared-entries>
+ 		;(p-name,relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
  		where
  			<map-declarations(to-str(|project-path))>declared-concept-entries
-			;generate-str-main(|project-path , <find-spoofax-module-name-string>(path, def))
+			;generate-str-main(|project-path , p-name,relative-autogen-path)
  	
  	to-str(|project-path):
 		(package-name,concept-name,def) -> str-string
@@ -61,12 +62,12 @@
 			;<save-to-file>(output-path-str , str-string)
 			;<WriteToBinaryFile>(output-path-rtree , str-aterm)
 	 
-	generate-str-main(|project-path , main-package-name)=
+	generate-str-main(|project-path , main-package-name, relative-autogen-path)=
 		  declared-concept-entries := <get-all-declared-entries>
 		  ;main-package-name' := $[[main-package-name]-main]
 		  ;str-aterm := Module( main-package-name' , [Imports(<project-allkeys-declared(to-str-import)>declared-concept-entries)])
 		  ;str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
-		  ;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root>]]// setting up the autogen directory path
+		  ;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]// setting up the autogen directory path
 			;<ensure-exists>(project-path,autogen-dir) // verifying directory exists  
 			;output-path-str := <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir, main-package-name') // PATH to the STR file  
 			;output-path-rtree := <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, main-package-name')  //Path to the RTREE File

From R.B.Vermaas at tudelft.nl  Wed Mar  9 10:41:37 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 09 Mar 2011 09:41:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22329 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110309094137.E6FD32B801B@mx2.tudelft.nl>

Author: rob
Date: Wed Mar  9 09:41:37 2011
New Revision: 22329
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22329&sc=1

Log:
jsglr: add logStatistics for STRSGLR_log_statistics_on/etc strategies

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Wed Mar  9 01:13:01 2011	(r22328)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Wed Mar  9 09:41:37 2011	(r22329)
@@ -51,6 +51,8 @@
 	private boolean filterPriorities;
 
 	private boolean filterStrict;
+	
+	private boolean logStatistics;
 
 	// Current parser state
 
@@ -169,6 +171,14 @@
 		return filterReject;
 	}
 
+	public void setLogStatistics(boolean logStatistics) {
+		this.logStatistics = logStatistics;
+	}
+
+	public boolean getLogStatistics() {
+		return logStatistics;
+	}
+
 	public final void setDefaultFilters() {
 		filterAny = true;
 		filterCycles = false; // TODO: filterCycles; enable by default
@@ -180,6 +190,7 @@
 		filterAssociativity = true;
 		filterPriorities = true;
 		filterStrict = false; // TODO: disable filterStrict hack
+		logStatistics = true;
 	}
 
 	public Disambiguator() {
@@ -256,7 +267,8 @@
 			ambiguityManager.resetAmbiguityCount();
 			final Object r = yieldTree(t);
 	
-			logStatus();
+			if(logStatistics) 
+				logStatus();
 	
 	        int ambCount = ambiguityManager.getAmbiguitiesCount();
 	        if (Tools.debugging) {

From R.B.Vermaas at tudelft.nl  Wed Mar  9 10:53:42 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 09 Mar 2011 09:53:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22330 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110309095342.792297F80A9@mx1.tudelft.nl>

Author: rob
Date: Wed Mar  9 09:53:42 2011
New Revision: 22330
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22330&sc=1

Log:
use jsglr with logStatistics settings

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From L.C.L.Kats at tudelft.nl  Wed Mar  9 11:16:00 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 09 Mar 2011 10:16:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22331 - in
	sglr-recovery/trunk/bridge-definitions/grammars: java
	java-sql stratego-java webdsl
Message-ID: <20110309101600.59D3E7F80BD@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Mar  9 10:16:00 2011
New Revision: 22331
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22331&sc=1

Log:
Added more grammars and some generated bp files for convenience

Added:
   sglr-recovery/trunk/bridge-definitions/grammars/java-sql/
   sglr-recovery/trunk/bridge-definitions/grammars/java-sql/Java-SQL.bp
   sglr-recovery/trunk/bridge-definitions/grammars/java-sql/Java-SQL.def
   sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp
   sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/
   sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp
   sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.def
   sglr-recovery/trunk/bridge-definitions/grammars/webdsl/
   sglr-recovery/trunk/bridge-definitions/grammars/webdsl/WebDSL.bp
   sglr-recovery/trunk/bridge-definitions/grammars/webdsl/WebDSL.def

Added: sglr-recovery/trunk/bridge-definitions/grammars/java-sql/Java-SQL.bp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/java-sql/Java-SQL.bp	Wed Mar  9 10:16:00 2011	(r22331)
@@ -0,0 +1,226 @@
+grammar Main;
+
+import Layout ;
+
+// Islands and bridges
+island island2 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ConstrBody" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ConstrBody" ) ;
+bridge from island2 to island3 ;
+island startassert0 : SimpleStartIsland = "assert" for-sglr ( "AssertStm" ) ;
+island endassert0 : SimpleEndIsland = ";" for-sglr ( "AssertStm" ) ;
+bridge from startassert0 to endassert0 ;
+island startassert0 : SimpleStartIsland = "assert" for-sglr ( "AssertStm" ) ;
+island endassert0 : SimpleEndIsland = ";" for-sglr ( "AssertStm" ) ;
+bridge from startassert0 to endassert0 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "SwitchBlock" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "SwitchBlock" ) ;
+bridge from island2 to island3 ;
+island startcase0 : SimpleStartIsland = "case" for-sglr ( "Case" ) ;
+island endcase0 : SimpleEndIsland = ":" for-sglr ( "Case" ) ;
+bridge from startcase0 to endcase0 ;
+island startdo0 : SimpleStartIsland = "do" for-sglr ( "DoWhile" ) ;
+island enddo0 : SimpleEndIsland = ";" for-sglr ( "DoWhile" ) ;
+bridge from startdo0 to enddo0 ;
+island startreturn0 : SimpleStartIsland = "return" for-sglr ( "Return" ) ;
+island endreturn0 : SimpleEndIsland = ";" for-sglr ( "Return" ) ;
+bridge from startreturn0 to endreturn0 ;
+island startthrow0 : SimpleStartIsland = "throw" for-sglr ( "Throw" ) ;
+island endthrow0 : SimpleEndIsland = ";" for-sglr ( "Throw" ) ;
+bridge from startthrow0 to endthrow0 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "Block" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "Block" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island2 to island3 ;
+island island4 : SimpleStartIsland = "@" for-sglr ( "Anno" ) ;
+island island5 : SimpleEndIsland = ")" for-sglr ( "Anno" ) ;
+bridge from island4 to island5 ;
+island island4 : SimpleStartIsland = "@" for-sglr ( "SingleElemAnno" ) ;
+island island5 : SimpleEndIsland = ")" for-sglr ( "SingleElemAnno" ) ;
+bridge from island4 to island5 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ClassBody" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ClassBody" ) ;
+bridge from island2 to island3 ;
+island island0 : SimpleStartIsland = "<" for-sglr ( "TypeArgs" ) ;
+island island1 : SimpleEndIsland = ">" for-sglr ( "TypeArgs" ) ;
+bridge from island0 to island1 ;
+island startSUBSTRING0 : SimpleStartIsland = "SUBSTRING" for-sglr ( "Substring" ) ;
+island endSUBSTRING0 : SimpleEndIsland = ")" for-sglr ( "Substring" ) ;
+bridge from startSUBSTRING0 to endSUBSTRING0 ;
+island startUPPER0 : SimpleStartIsland = "UPPER" for-sglr ( "Upper" ) ;
+island endUPPER0 : SimpleEndIsland = ")" for-sglr ( "Upper" ) ;
+bridge from startUPPER0 to endUPPER0 ;
+island startLOWER0 : SimpleStartIsland = "LOWER" for-sglr ( "Lower" ) ;
+island endLOWER0 : SimpleEndIsland = ")" for-sglr ( "Lower" ) ;
+bridge from startLOWER0 to endLOWER0 ;
+island startCONVERT0 : SimpleStartIsland = "CONVERT" for-sglr ( "Convert" ) ;
+island endCONVERT0 : SimpleEndIsland = ")" for-sglr ( "Convert" ) ;
+bridge from startCONVERT0 to endCONVERT0 ;
+island startTRANSLATE0 : SimpleStartIsland = "TRANSLATE" for-sglr ( "Translate" ) ;
+island endTRANSLATE0 : SimpleEndIsland = ")" for-sglr ( "Translate" ) ;
+bridge from startTRANSLATE0 to endTRANSLATE0 ;
+island startTRIM0 : SimpleStartIsland = "TRIM" for-sglr ( "Trim" ) ;
+island endTRIM0 : SimpleEndIsland = ")" for-sglr ( "Trim" ) ;
+bridge from startTRIM0 to endTRIM0 ;
+island startSUBSTRING0 : SimpleStartIsland = "SUBSTRING" for-sglr ( "Substring" ) ;
+island endSUBSTRING0 : SimpleEndIsland = ")" for-sglr ( "Substring" ) ;
+bridge from startSUBSTRING0 to endSUBSTRING0 ;
+island startEXISTS0 : SimpleStartIsland = "EXISTS" for-sglr ( "Exists" ) ;
+island endEXISTS0 : SimpleEndIsland = ")" for-sglr ( "Exists" ) ;
+bridge from startEXISTS0 to endEXISTS0 ;
+island startUNIQUE0 : SimpleStartIsland = "UNIQUE" for-sglr ( "Unique" ) ;
+island endUNIQUE0 : SimpleEndIsland = ")" for-sglr ( "Unique" ) ;
+bridge from startUNIQUE0 to endUNIQUE0 ;
+
+// Reefs
+reef instanceof0 : Keyword = "instanceof" for-sglr ( "InstanceOf" ) ;
+reef separator42 : Keyword = "," for-sglr ( "Invoke" ) ;
+reef super6 : Keyword = "super" for-sglr ( "SuperMethod" ) ;
+reef super5 : Keyword = "super" for-sglr ( "QSuperMethod" ) ;
+reef super4 : Keyword = "super" for-sglr ( "SuperField" ) ;
+reef super3 : Keyword = "super" for-sglr ( "QSuperField" ) ;
+reef new3 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new2 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new1 : Keyword = "new" for-sglr ( "NewInstance" ) ;
+reef separator41 : Keyword = "," for-sglr ( "NewInstance" ) ;
+reef new0 : Keyword = "new" for-sglr ( "QNewInstance" ) ;
+reef separator40 : Keyword = "," for-sglr ( "QNewInstance" ) ;
+reef class2 : Keyword = "class" for-sglr ( "Class" ) ;
+reef void1 : Keyword = "void" for-sglr ( "VoidClass" ) ;
+reef class1 : Keyword = "class" for-sglr ( "VoidClass" ) ;
+reef this2 : Keyword = "this" for-sglr ( "This" ) ;
+reef this1 : Keyword = "this" for-sglr ( "QThis" ) ;
+reef package0 : Keyword = "package" for-sglr ( "PackageDec" ) ;
+reef import3 : Keyword = "import" for-sglr ( "TypeImportDec" ) ;
+reef import2 : Keyword = "import" for-sglr ( "TypeImportOnDemandDec" ) ;
+reef import1 : Keyword = "import" for-sglr ( "StaticImportDec" ) ;
+reef static3 : Keyword = "static" for-sglr ( "StaticImportDec" ) ;
+reef import0 : Keyword = "import" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef static2 : Keyword = "static" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef interface1 : Keyword = "interface" for-sglr ( "AnnoDecHead" ) ;
+reef default1 : Keyword = "default" for-sglr ( "DefaultVal" ) ;
+reef separator39 : Keyword = "," for-sglr ( "AbstractMethodDec" ) ;
+reef separator38 : Keyword = "," for-sglr ( "DeprAbstractMethodDec" ) ;
+reef separator37 : Keyword = "," for-sglr ( "ConstantDec" ) ;
+reef interface0 : Keyword = "interface" for-sglr ( "InterfaceDecHead" ) ;
+reef extends3 : Keyword = "extends" for-sglr ( "ExtendsInterfaces" ) ;
+reef separator36 : Keyword = "," for-sglr ( "ExtendsInterfaces" ) ;
+reef enum0 : Keyword = "enum" for-sglr ( "EnumDecHead" ) ;
+reef separator35 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator34 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator33 : Keyword = "," for-sglr ( "ConstrDecHead" ) ;
+reef this0 : Keyword = "this" for-sglr ( "AltConstrInv" ) ;
+reef separator32 : Keyword = "," for-sglr ( "AltConstrInv" ) ;
+reef super2 : Keyword = "super" for-sglr ( "SuperConstrInv" ) ;
+reef separator31 : Keyword = "," for-sglr ( "SuperConstrInv" ) ;
+reef super1 : Keyword = "super" for-sglr ( "QSuperConstrInv" ) ;
+reef separator30 : Keyword = "," for-sglr ( "QSuperConstrInv" ) ;
+reef static1 : Keyword = "static" for-sglr ( "StaticInit" ) ;
+reef if1 : Keyword = "if" for-sglr ( "If" ) ;
+reef if0 : Keyword = "if" for-sglr ( "If" ) ;
+reef else0 : Keyword = "else" for-sglr ( "If" ) ;
+reef assert1 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef assert0 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef switch0 : Keyword = "switch" for-sglr ( "Switch" ) ;
+reef case0 : Keyword = "case" for-sglr ( "Case" ) ;
+reef default0 : Keyword = "default" for-sglr ( "Default" ) ;
+reef while1 : Keyword = "while" for-sglr ( "While" ) ;
+reef do0 : Keyword = "do" for-sglr ( "DoWhile" ) ;
+reef while0 : Keyword = "while" for-sglr ( "DoWhile" ) ;
+reef for2 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator29 : Keyword = "," for-sglr ( "For" ) ;
+reef for1 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator28 : Keyword = "," for-sglr ( "For" ) ;
+reef separator27 : Keyword = "," for-sglr ( "For" ) ;
+reef for0 : Keyword = "for" for-sglr ( "ForEach" ) ;
+reef break0 : Keyword = "break" for-sglr ( "Break" ) ;
+reef continue0 : Keyword = "continue" for-sglr ( "Continue" ) ;
+reef return0 : Keyword = "return" for-sglr ( "Return" ) ;
+reef throw0 : Keyword = "throw" for-sglr ( "Throw" ) ;
+reef synchronized1 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef try1 : Keyword = "try" for-sglr ( "Try" ) ;
+reef try0 : Keyword = "try" for-sglr ( "Try" ) ;
+reef finally0 : Keyword = "finally" for-sglr ( "Try" ) ;
+reef catch0 : Keyword = "catch" for-sglr ( "Catch" ) ;
+reef separator26 : Keyword = "," for-sglr ( "LocalVarDec" ) ;
+reef separator25 : Keyword = "," for-sglr ( "MethodDecHead" ) ;
+reef separator24 : Keyword = "," for-sglr ( "DeprMethodDecHead" ) ;
+reef void0 : Keyword = "void" for-sglr ( "Void" ) ;
+reef throws0 : Keyword = "throws" for-sglr ( "ThrowsDec" ) ;
+reef separator23 : Keyword = "," for-sglr ( "ThrowsDec" ) ;
+reef separator22 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator21 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator20 : Keyword = "," for-sglr ( "Anno" ) ;
+reef separator19 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator18 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator17 : Keyword = "," for-sglr ( "FieldDec" ) ;
+reef class0 : Keyword = "class" for-sglr ( "ClassDecHead" ) ;
+reef extends2 : Keyword = "extends" for-sglr ( "SuperDec" ) ;
+reef implements0 : Keyword = "implements" for-sglr ( "ImplementsDec" ) ;
+reef separator16 : Keyword = "," for-sglr ( "ImplementsDec" ) ;
+reef separator15 : Keyword = "." for-sglr ( "PackageName" ) ;
+reef separator14 : Keyword = "," for-sglr ( "TypeArgs" ) ;
+reef extends1 : Keyword = "extends" for-sglr ( "WildcardUpperBound" ) ;
+reef super0 : Keyword = "super" for-sglr ( "WildcardLowerBound" ) ;
+reef extends0 : Keyword = "extends" for-sglr ( "TypeBound" ) ;
+reef separator13 : Keyword = "&" for-sglr ( "TypeBound" ) ;
+reef separator12 : Keyword = "," for-sglr ( "TypeParams" ) ;
+reef boolean0 : Keyword = "boolean" for-sglr ( "Boolean" ) ;
+reef byte0 : Keyword = "byte" for-sglr ( "Byte" ) ;
+reef short0 : Keyword = "short" for-sglr ( "Short" ) ;
+reef int0 : Keyword = "int" for-sglr ( "Int" ) ;
+reef long0 : Keyword = "long" for-sglr ( "Long" ) ;
+reef char0 : Keyword = "char" for-sglr ( "Char" ) ;
+reef float0 : Keyword = "float" for-sglr ( "Float" ) ;
+reef double0 : Keyword = "double" for-sglr ( "Double" ) ;
+reef public0 : Keyword = "public" for-sglr ( "Public" ) ;
+reef private0 : Keyword = "private" for-sglr ( "Private" ) ;
+reef protected0 : Keyword = "protected" for-sglr ( "Protected" ) ;
+reef abstract0 : Keyword = "abstract" for-sglr ( "Abstract" ) ;
+reef final0 : Keyword = "final" for-sglr ( "Final" ) ;
+reef static0 : Keyword = "static" for-sglr ( "Static" ) ;
+reef native0 : Keyword = "native" for-sglr ( "Native" ) ;
+reef transient0 : Keyword = "transient" for-sglr ( "Transient" ) ;
+reef volatile0 : Keyword = "volatile" for-sglr ( "Volatile" ) ;
+reef synchronized0 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef strictfp0 : Keyword = "strictfp" for-sglr ( "StrictFP" ) ;
+reef separator11 : Keyword = "," for-sglr ( "Coalesce" ) ;
+reef separator10 : Keyword = "," for-sglr ( "Values" ) ;
+reef separator9 : Keyword = "," for-sglr ( "Row" ) ;
+reef DISTINCT0 : Keyword = "DISTINCT" for-sglr ( "Distinct" ) ;
+reef BY1 : Keyword = "BY" for-sglr ( "By" ) ;
+reef separator8 : Keyword = "," for-sglr ( "By" ) ;
+reef separator7 : Keyword = "," for-sglr ( "Values" ) ;
+reef SELECT0 : Keyword = "SELECT" for-sglr ( "Select" ) ;
+reef separator6 : Keyword = "," for-sglr ( "Select" ) ;
+reef separator5 : Keyword = "," for-sglr ( "From" ) ;
+reef separator4 : Keyword = "," for-sglr ( "GroupBy" ) ;
+reef HAVING0 : Keyword = "HAVING" for-sglr ( "Having" ) ;
+reef separator3 : Keyword = "," for-sglr ( "TableRef" ) ;
+reef separator2 : Keyword = "," for-sglr ( "TableRef" ) ;
+reef JOIN1 : Keyword = "JOIN" for-sglr ( "NaturalJoin" ) ;
+reef JOIN0 : Keyword = "JOIN" for-sglr ( "Join" ) ;
+reef separator1 : Keyword = "," for-sglr ( "Using" ) ;
+reef BY0 : Keyword = "BY" for-sglr ( "OrderBy" ) ;
+reef separator0 : Keyword = "," for-sglr ( "OrderBy" ) ;
+
+// Ignores
+ignore "//" to NEWLINE ;
+ignore "/*" to "*/" ;
+ignore "\" to "\" ;
\ No newline at end of file

Added: sglr-recovery/trunk/bridge-definitions/grammars/java-sql/Java-SQL.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/java-sql/Java-SQL.def	Wed Mar  9 10:16:00 2011	(r22331)
@@ -0,0 +1,2456 @@
+definition
+module languages/java-15/expressions/Priorities
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/expressions/Main
+
+exports
+  context-free priorities
+      Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr
+    > {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      } 
+
+  context-free priorities
+      {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      }
+    > { "(" PrimType ")" Expr -> Expr    
+        "(" RefType  ")" Expr -> Expr
+      }
+
+  context-free priorities
+      "(" PrimType ")" Expr -> Expr
+    > {left:
+        Expr "*" Expr -> Expr
+        Expr "/" Expr -> Expr
+        Expr "%" Expr -> Expr
+      } 
+
+  context-free priorities
+      "(" RefType ")" Expr -> Expr 
+    > {
+        "++" Expr -> Expr
+        "--" Expr -> Expr
+        "+"  Expr -> Expr
+        "-"  Expr -> Expr
+      }
+
+  context-free priorities
+    {
+      Expr ArraySubscript -> ArrayAccess
+      Expr "." Id -> FieldAccess
+      Expr "." TypeArgs? Id -> MethodSpec
+    }
+  > {right:
+      Expr "++" -> Expr
+      Expr "--" -> Expr
+    }
+  > {
+      "++" Expr -> Expr
+      "--" Expr -> Expr
+      "+"  Expr -> Expr
+      "-"  Expr -> Expr
+      "~"  Expr -> Expr
+      "!"  Expr -> Expr
+    }
+  > {left:
+      Expr "*" Expr -> Expr
+      Expr "/" Expr -> Expr
+      Expr "%" Expr -> Expr
+    } 
+  > {left:
+      Expr "+" Expr -> Expr
+      Expr "-" Expr -> Expr
+    }
+  > {left:
+      Expr "<<"  Expr -> Expr
+      Expr ">>"  Expr -> Expr
+      Expr ">>>" Expr -> Expr
+    }
+  > {left:
+      Expr "instanceof" RefType -> Expr
+      Expr "<"   Expr -> Expr
+      Expr ">"   Expr -> Expr
+      Expr "<="  Expr -> Expr
+      Expr ">="  Expr -> Expr
+    }
+  > {left:
+      Expr "=="  Expr -> Expr
+      Expr "!="  Expr -> Expr
+    }
+  >   Expr "&"   Expr -> Expr
+  >   Expr "^"   Expr -> Expr
+  >   Expr "|"   Expr -> Expr
+  >   Expr "&&"  Expr -> Expr
+  >   Expr "||"  Expr -> Expr
+  >   Expr CondMid Expr -> Expr
+  > {right:
+      LHS "="    Expr -> Expr
+      LHS "*="   Expr -> Expr
+      LHS "/="   Expr -> Expr
+      LHS "%="   Expr -> Expr
+      LHS "+="   Expr -> Expr
+      LHS "-="   Expr -> Expr
+      LHS "<<="  Expr -> Expr
+      LHS ">>="  Expr -> Expr
+      LHS ">>>=" Expr -> Expr
+      LHS "&="   Expr -> Expr
+      LHS "^="   Expr -> Expr
+      LHS "|="   Expr -> Expr
+    }
+
+module languages/java-15/expressions/Restrictions
+exports
+  lexical restrictions
+    "+" -/- [\+]
+    "-" -/- [\-]
+    "/" -/- [\/]
+
+module languages/java-15/expressions/AssignmentOperators
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts LHS
+  context-free syntax
+    LHS "="    Expr -> Expr {cons("Assign")}
+    LHS "*="   Expr -> Expr {cons("AssignMul")}
+    LHS "/="   Expr -> Expr {cons("AssignDiv")}
+    LHS "%="   Expr -> Expr {cons("AssignRemain")}
+    LHS "+="   Expr -> Expr {cons("AssignPlus")}
+    LHS "-="   Expr -> Expr {cons("AssignMinus")}
+    LHS "<<="  Expr -> Expr {cons("AssignLeftShift")}
+    LHS ">>="  Expr -> Expr {cons("AssignRightShift")}
+    LHS ">>>=" Expr -> Expr {cons("AssignURightShift")}
+    LHS "&="   Expr -> Expr {cons("AssignAnd")}
+    LHS "^="   Expr -> Expr {cons("AssignExcOr")}
+    LHS "|="   Expr -> Expr {cons("AssignOr")}
+
+    ExprName    -> LHS
+    FieldAccess -> LHS
+    ArrayAccess -> LHS
+
+
+module languages/java-15/expressions/BinaryOperators
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/types/Main
+
+exports
+  sorts CondMid
+  context-free syntax
+    Expr "instanceof" RefType -> Expr {cons("InstanceOf")}
+
+    Expr "*"   Expr -> Expr  {left, cons("Mul")}
+    Expr "/"   Expr -> Expr  {left, cons("Div")}
+    Expr "%"   Expr -> Expr  {left, cons("Remain")}
+
+    Expr "+"   Expr -> Expr  {left, cons("Plus")}
+    Expr "-"   Expr -> Expr  {left, cons("Minus")}
+
+    Expr "<<"  Expr -> Expr  {left, cons("LeftShift")}
+    Expr ">>"  Expr -> Expr  {left, cons("RightShift")}
+    Expr ">>>" Expr -> Expr  {left, cons("URightShift")}
+
+    Expr "<"   Expr -> Expr  {left, cons("Lt")}
+    Expr ">"   Expr -> Expr  {left, cons("Gt")}
+    Expr "<="  Expr -> Expr  {left, cons("LtEq")}
+    Expr ">="  Expr -> Expr  {left, cons("GtEq")}
+    Expr "=="  Expr -> Expr  {left, cons("Eq")}
+    Expr "!="  Expr -> Expr  {left, cons("NotEq")}
+
+    Expr "&&"  Expr -> Expr  {left, cons("LazyAnd")}
+    Expr "||"  Expr -> Expr  {left, cons("LazyOr")}
+
+    Expr "&" Expr -> Expr {left, cons("And")}
+    Expr "^" Expr -> Expr {left, cons("ExcOr")}
+    Expr "|" Expr -> Expr {left, cons("Or")}
+
+    %% todo JFR-30
+    Expr CondMid Expr -> Expr {right, cons("Cond")}
+    "?" Expr ":" -> CondMid {bracket}
+
+module languages/java-15/expressions/UnaryOperators
+imports 
+  languages/java-15/expressions/Main
+exports
+  context-free syntax
+    "+" Expr -> Expr {cons("Plus")}
+    "-" Expr -> Expr {cons("Minus")}
+
+    "++" Expr -> Expr {cons("PreIncr")}
+    "--" Expr -> Expr {cons("PreDecr")}
+
+    "~" Expr -> Expr {cons("Complement")}
+    "!" Expr -> Expr {cons("Not")}
+
+    "(" PrimType ")" Expr -> Expr {cons("CastPrim")}
+    "(" RefType  ")" Expr -> Expr {cons("CastRef")}
+
+module languages/java-15/expressions/Postfix
+imports 
+  languages/java-15/expressions/Main
+
+exports
+  context-free syntax
+    ExprName  -> Expr
+    Expr "++" -> Expr {cons("PostIncr")}
+    Expr "--" -> Expr {cons("PostDecr")}
+
+module languages/java-15/expressions/MethodInvocation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts MethodSpec
+  context-free syntax
+    MethodSpec "(" {Expr ","}* ")" -> Expr {cons("Invoke")}
+
+                               MethodName -> MethodSpec {cons("Method")}
+                    Expr "." TypeArgs? Id -> MethodSpec {cons("Method")}
+                 "super" "." TypeArgs? Id -> MethodSpec {cons("SuperMethod")}
+    TypeName "." "super" "." TypeArgs? Id -> MethodSpec {cons("QSuperMethod")}
+                 AmbName "." TypeArgs  Id -> MethodSpec {cons("GenericMethod")}
+
+  %% This priority forbids a Expr "." MethodSpec if the expression is a plain ExprName.
+  %% This solves an ambiguity with the MethodName and AmbName . TypeArgs MethodSpecs.
+  %% foo.bar.fred() results in a MethodName MethodSpec.
+  %% (foo.bar).fred() results in the Expr. MethodSpec
+  %% foo.bar.<T>fred() results in a GenericMethod
+  context-free priorities
+      Expr "." TypeArgs? Id -> MethodSpec
+    > ExprName  -> Expr
+
+
+module languages/java-15/expressions/ArrayAccess
+imports
+  languages/java-15/expressions/Main
+exports
+  sorts
+    ArrayAccess
+    ArraySubscript
+
+  context-free syntax
+    ArrayAccess -> Expr
+
+    %% todo: JFR-29
+    Expr ArraySubscript -> ArrayAccess {cons("ArrayAccess")}
+    "[" Expr "]" -> ArraySubscript {bracket}
+
+    ArrayCreationExpr ArraySubscript -> ArrayAccess {reject}
+
+module languages/java-15/expressions/FieldAccess
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts FieldAccess
+  context-free syntax
+    FieldAccess -> Expr
+
+  context-free syntax
+
+                    Expr "." Id -> FieldAccess {cons("Field")}
+                ExprName "." Id -> FieldAccess {reject}
+                 "super" "." Id -> FieldAccess {cons("SuperField")}
+    TypeName "." "super" "." Id -> FieldAccess {cons("QSuperField")}
+
+module languages/java-15/expressions/ArrayCreation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ArrayCreationExpr
+    ArrayBaseType
+    Dim
+    DimExpr
+
+  context-free syntax
+    ArrayCreationExpr     -> Expr
+
+    "new" ArrayBaseType DimExpr+ Dim*  -> ArrayCreationExpr {cons("NewArray")}
+    "new" ArrayBaseType Dim+ ArrayInit -> ArrayCreationExpr {cons("NewArray")}
+
+    PrimType -> ArrayBaseType
+    TypeName -> ArrayBaseType
+    TypeName "<" "?" ">" -> ArrayBaseType {cons("UnboundWld")}
+
+    "[" Expr "]" -> DimExpr {cons("Dim")}
+    "[" "]"      -> Dim     {cons("Dim")}
+
+module languages/java-15/expressions/ClassInstanceCreation
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  context-free syntax
+
+             "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody? -> Expr {cons("NewInstance")}
+    Expr "." "new" TypeArgs? Id         TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("QNewInstance")}
+
+module languages/java-15/expressions/Primary
+imports
+  languages/java-15/lexical/literals/Main
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  %%%
+   %% Section 15.8.1: Lexical Literals
+   %%%
+  sorts Literal
+  context-free syntax
+    Literal -> Expr {cons("Lit")}
+
+    IntLiteral    -> Literal
+    FloatLiteral  -> Literal
+    BoolLiteral   -> Literal 
+    CharLiteral   -> Literal
+    StringLiteral -> Literal
+    NullLiteral   -> Literal
+
+  %%%
+   %% Section 15.8.2: Class Literals
+   %%%
+  sorts ClassLiteral
+  context-free syntax
+    ClassLiteral -> Literal
+    Type   "." "class" -> ClassLiteral {cons("Class")}
+    "void" "." "class" -> ClassLiteral {cons("VoidClass")}
+
+  %%%
+   %% Section 15.8.3/4: (Qualified this)
+   %%%
+  context-free syntax
+                 "this" -> Expr {cons("This")}
+    TypeName "." "this" -> Expr {cons("QThis")}
+
+  %%%
+   %% Section 15.8.5: Parenthesized Expression
+   %%%
+  context-free syntax
+    "(" Expr ")"          -> Expr {bracket}
+
+module languages/java-15/expressions/Main
+imports
+  languages/java-15/expressions/Primary
+  languages/java-15/expressions/ClassInstanceCreation
+  languages/java-15/expressions/ArrayCreation
+  languages/java-15/expressions/FieldAccess
+  languages/java-15/expressions/ArrayAccess
+  languages/java-15/expressions/MethodInvocation
+  languages/java-15/expressions/Postfix
+  languages/java-15/expressions/UnaryOperators
+  languages/java-15/expressions/BinaryOperators
+  languages/java-15/expressions/AssignmentOperators
+  languages/java-15/expressions/Restrictions
+  languages/java-15/expressions/Priorities
+
+exports
+  sorts
+    Expr
+
+module languages/java-15/statements/Main
+imports
+  languages/java-15/statements/Blocks
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+
+module languages/java-15/arrays/Main
+imports
+  languages/java-15/arrays/ArrayInitializers
+
+
+module languages/java-15/interfaces/Main
+imports
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+
+module languages/java-15/classes/Main
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+
+
+module languages/java-15/packages/PackageDeclarations
+imports
+  languages/java-15/names/Main
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    PackageDec
+
+  context-free syntax
+    Anno* "package" PackageName ";" -> PackageDec {cons("PackageDec")}
+
+module languages/java-15/packages/ImportDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+
+exports
+  sorts
+    ImportDec
+
+  context-free syntax
+    "import" TypeName                  ";"  -> ImportDec {cons("TypeImportDec")}
+    "import" PackageName       "." "*" ";"  -> ImportDec {cons("TypeImportOnDemandDec")}
+    "import" "static" TypeName "." Id  ";"  -> ImportDec {cons("StaticImportDec")}
+    "import" "static" TypeName "." "*" ";"  -> ImportDec {cons("StaticImportOnDemandDec")}
+
+module languages/java-15/interfaces/AnnotationTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    AnnoDec
+    AnnoDecHead
+
+  context-free syntax
+    AnnoDecHead "{" AnnoElemDec* "}" -> AnnoDec {cons("AnnoDec")}
+    (Anno | InterfaceMod)* "@" "interface" Id -> AnnoDecHead {cons("AnnoDecHead")}
+
+  sorts
+    AnnoElemDec
+    DefaultVal
+
+  context-free syntax
+    AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" -> AnnoElemDec {cons("AnnoMethodDec")}
+
+    ConstantDec  -> AnnoElemDec
+    ClassDec     -> AnnoElemDec
+    InterfaceDec -> AnnoElemDec
+    EnumDec      -> AnnoElemDec
+    AnnoDec      -> AnnoElemDec
+    ";"          -> AnnoElemDec {cons("Semicolon")}
+
+    "default" ElemVal -> DefaultVal {cons("DefaultVal")}
+
+module languages/java-15/interfaces/AbstractMethodDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+
+exports
+  sorts
+    AbstractMethodDec
+    AbstractMethodMod
+
+  context-free syntax
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Throws? ";" -> AbstractMethodDec {cons("AbstractMethodDec")}
+
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" -> AbstractMethodDec {cons("DeprAbstractMethodDec")}
+
+    Public   -> AbstractMethodMod
+    Abstract -> AbstractMethodMod
+
+
+
+module languages/java-15/interfaces/ConstantDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    ConstantDec
+    ConstantMod
+
+  context-free syntax
+    (Anno | ConstantMod)* Type {VarDec ","}+ ";" -> ConstantDec {cons("ConstantDec")}
+
+    Public -> ConstantMod
+    Static -> ConstantMod
+    Final  -> ConstantMod
+
+
+module languages/java-15/interfaces/InterfaceDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    InterfaceDec
+    InterfaceDecHead
+    ExtendsInterfaces
+    InterfaceMemberDec
+    InterfaceMod
+
+  context-free syntax
+    AnnoDec -> InterfaceDec
+
+    InterfaceDecHead "{" InterfaceMemberDec* "}" -> InterfaceDec {cons("InterfaceDec")}
+
+    (Anno | InterfaceMod)* "interface" Id TypeParams? ExtendsInterfaces? -> InterfaceDecHead {cons("InterfaceDecHead")}
+    "extends" {InterfaceType ","}+ -> ExtendsInterfaces {cons("ExtendsInterfaces")}
+
+  context-free syntax
+    ConstantDec       -> InterfaceMemberDec
+    AbstractMethodDec -> InterfaceMemberDec
+    ClassDec          -> InterfaceMemberDec
+    InterfaceDec      -> InterfaceMemberDec
+    ";"               -> InterfaceMemberDec {cons("Semicolon")}
+
+  context-free syntax
+    Public         -> InterfaceMod
+    Protected      -> InterfaceMod
+    Private        -> InterfaceMod
+    Abstract       -> InterfaceMod
+    Static         -> InterfaceMod
+    StrictFP       -> InterfaceMod
+
+
+module languages/java-15/classes/EnumDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  sorts
+    EnumDec
+    EnumDecHead
+    EnumBody
+    EnumConst
+    EnumConstArgs
+    EnumBodyDecs
+
+  context-free syntax
+    EnumDecHead EnumBody -> EnumDec {cons("EnumDec")}
+
+    (Anno | ClassMod)* "enum" Id Interfaces? -> EnumDecHead {cons("EnumDecHead")}
+
+    "{" {EnumConst ","}*     EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+    "{" {EnumConst ","}* "," EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+
+    Id EnumConstArgs? ClassBody?  -> EnumConst {cons("EnumConst")}
+    "(" {Expr ","}* ")"  -> EnumConstArgs {bracket}
+
+    ";" ClassBodyDec* -> EnumBodyDecs {cons("EnumBodyDecs")}
+
+module languages/java-15/classes/ConstructorDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ConstrDec
+    ConstrBody
+    ConstrHead
+    ConstrInv
+
+  context-free syntax
+    ConstrHead ConstrBody ->  ConstrDec {cons("ConstrDec")}
+    (Anno | ConstrMod)* TypeParams? Id "(" {FormalParam ","}* ")" Throws? -> ConstrHead {cons("ConstrDecHead")}
+
+
+    "{" ConstrInv? BlockStm* "}" -> ConstrBody {cons("ConstrBody")}
+
+             TypeArgs? "this"  "(" {Expr ","}* ")" ";" -> ConstrInv {cons("AltConstrInv")}
+             TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("SuperConstrInv")}
+    Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("QSuperConstrInv")}
+
+  sorts ConstrMod
+  context-free syntax  
+    Public    -> ConstrMod
+    Protected -> ConstrMod
+    Private   -> ConstrMod
+
+
+module languages/java-15/classes/StaticInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    StaticInit
+
+  context-free syntax
+    "static" Block -> StaticInit   {cons("StaticInit")}
+
+module languages/java-15/classes/InstanceInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    InstanceInit
+
+  context-free syntax
+    Block -> InstanceInit {cons("InstanceInit")}
+
+module languages/java-15/statements/Statements
+imports
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Blocks
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Stm
+
+  context-free syntax
+    Block      -> Stm
+
+  %%%
+   %% Section 14.6: The Empty Statement
+   %%%
+  context-free syntax
+    ";"        -> Stm {cons("Empty")}
+
+  %%%
+   %% Section 14.7: Labeled Statements
+   %%%
+  context-free syntax
+    Id ":" Stm -> Stm {cons("Labeled")}
+
+  %%%
+   %% Section 14.8: Expressions Statements
+   %%%
+  context-free syntax
+    Expr ";"   -> Stm {cons("ExprStm")}
+
+  %%%
+   %% Section 14.9: The If Statement
+   %%%
+  context-free syntax
+    "if" "(" Expr ")" Stm             -> Stm {prefer, cons("If")}
+    "if" "(" Expr ")" Stm  "else" Stm -> Stm {cons("If")}
+
+  %%%
+   %% Section 14.10: The Assert Statement
+   %%%
+  context-free syntax
+    "assert" Expr          ";" -> Stm  {cons("AssertStm")}
+    "assert" Expr ":" Expr ";" -> Stm  {cons("AssertStm")}
+
+
+  %%%
+   %% Section 14.11: The Switch Statement
+   %%%
+  sorts SwitchBlock SwitchGroup SwitchLabel
+  context-free syntax
+    "switch" "(" Expr ")" SwitchBlock -> Stm {cons("Switch")}
+    "{" SwitchGroup* SwitchLabel* "}" -> SwitchBlock {cons("SwitchBlock")}
+    SwitchLabel+ BlockStm+ -> SwitchGroup  {cons("SwitchGroup")}
+
+    "case" Expr ":" -> SwitchLabel {cons("Case")}
+    "default"   ":" -> SwitchLabel {cons("Default")}
+
+  %%%
+   %% Section 14.12: The While Statement
+   %%%
+  context-free syntax
+    "while" "(" Expr ")" Stm -> Stm {cons("While")}
+
+  %%%
+   %% Section 14.13: The Do Statement
+   %%%
+  context-free syntax
+  "do" Stm "while" "(" Expr ")" ";" -> Stm {cons("DoWhile")}
+
+
+  %%%
+   %% Section 14.14: The For Statement
+   %%%
+  context-free syntax
+    "for" "(" LocalVarDec ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+    "for" "(" {Expr ","}* ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+
+    "for" "(" FormalParam ":" Expr ")" Stm -> Stm {cons("ForEach")}
+
+  %%%
+   %% Section 14.15: The Break Statement
+   %%%
+  context-free syntax
+    "break"    Id? ";"   -> Stm {cons("Break")}
+
+  %%%
+   %% Section 14.16: The Continue Statement
+   %%%
+  context-free syntax
+    "continue" Id? ";"   -> Stm {cons("Continue")}
+
+  %%%
+   %% Section 14.17: The Return Statement
+   %%%
+  context-free syntax
+    "return"   Expr? ";" -> Stm {cons("Return")}
+
+  %%%
+   %% Section 14.18: The Throw Statement
+   %%%
+  context-free syntax
+    "throw"    Expr  ";" -> Stm {cons("Throw")}
+
+  %%%
+   %% Section 14.19: The Synchronized Statement
+   %%%
+  context-free syntax
+    "synchronized" "(" Expr ")" Block -> Stm {cons("Synchronized")}
+
+  %%%
+   %% Section 14.20: The Try Statement
+   %%%
+  sorts CatchClause
+  context-free syntax
+    "try" Block CatchClause+ -> Stm {cons("Try")}
+    "try" Block CatchClause* "finally" Block -> Stm {cons("Try")}
+    "catch" "(" FormalParam ")" Block -> CatchClause {cons("Catch")}
+
+module languages/java-15/statements/LocalVariableDeclarations
+imports
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts
+    LocalVarDecStm
+    LocalVarDec
+
+  context-free syntax
+    LocalVarDec ";" -> LocalVarDecStm {prefer, cons("LocalVarDecStm")}
+    (Anno | VarMod)* Type {VarDec ","}+ -> LocalVarDec {prefer, cons("LocalVarDec")}
+
+module languages/java-15/statements/Blocks
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+exports
+  sorts
+    BlockStm
+    Block
+
+  context-free syntax
+    "{" BlockStm* "}" -> Block {cons("Block")}
+
+    LocalVarDecStm  -> BlockStm 
+    ClassDec        -> BlockStm {cons("ClassDecStm")}
+    Stm             -> BlockStm
+
+
+module languages/java-15/classes/MethodDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    MethodDec
+    MethodDecHead
+    ResultType
+
+  context-free syntax
+    MethodDecHead MethodBody -> MethodDec {cons("MethodDec")}
+
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws?      -> MethodDecHead {cons("MethodDecHead")}
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? -> MethodDecHead {cons("DeprMethodDecHead")}
+
+    Type   -> ResultType
+    "void" -> ResultType {cons("Void")}
+
+  sorts FormalParam
+  context-free syntax
+    (Anno | VarMod)* Type       VarDecId -> FormalParam {cons("Param")}
+    (Anno | VarMod)* Type "..." VarDecId -> FormalParam {cons("VarArityParam")}
+
+  sorts VarMod
+  context-free syntax
+    Final -> VarMod
+
+  sorts MethodMod
+  context-free syntax
+    Public         -> MethodMod
+    Protected      -> MethodMod
+    Private        -> MethodMod
+
+    Abstract       -> MethodMod
+    Static         -> MethodMod
+    Final          -> MethodMod
+    Synchronized   -> MethodMod
+    Native         -> MethodMod
+    StrictFP       -> MethodMod
+
+  %%%
+   %% Section 8.4.6: Method Throws
+   %%%
+  sorts
+    Throws
+    ExceptionType
+
+  context-free syntax
+    "throws" {ExceptionType ","}+ -> Throws {cons("ThrowsDec")}
+    ClassType -> ExceptionType
+    %% TypeVar -> ExceptionType
+
+  %%%
+   %% Section 8.4.7: Method Body
+   %%% 
+  sorts MethodBody
+  context-free syntax
+    Block -> MethodBody
+    ";"   -> MethodBody {cons("NoMethodBody")}
+
+module languages/java-15/arrays/ArrayInitializers
+imports
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts ArrayInit
+  context-free syntax
+    "{" {VarInit ","}*     "}" -> ArrayInit {cons("ArrayInit")}
+    "{" {VarInit ","}* "," "}" -> ArrayInit {cons("ArrayInit")}
+
+module languages/java-15/interfaces/Annotations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Anno
+    ElemVal
+    ElemValPair
+
+  context-free syntax
+    "@" TypeName "(" {ElemValPair ","}* ")" -> Anno {cons("Anno")}
+    "@" TypeName "(" ElemVal ")"            -> Anno {cons("SingleElemAnno")}
+    "@" TypeName                            -> Anno {cons("MarkerAnno")}
+
+  context-free syntax  
+    Id "=" ElemVal -> ElemValPair {cons("ElemValPair")}
+
+    Expr -> ElemVal
+    Anno -> ElemVal
+
+    "{" {ElemVal ","}*     "}" -> ElemVal {cons("ElemValArrayInit")}
+    "{" {ElemVal ","}* "," "}" -> ElemVal {cons("ElemValArrayInit")}
+
+    %% Assignments are not allowed as element values.
+    LHS "=" Expr -> ElemVal {reject}
+
+module languages/java-15/classes/FieldDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/interfaces/Annotations
+  languages/java-15/arrays/ArrayInitializers
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    FieldDec
+    VarDec
+    VarDecId
+    Dim
+    VarInit
+
+  context-free syntax
+    (Anno | FieldMod)* Type { VarDec ","}+ ";" -> FieldDec {cons("FieldDec")}
+
+    VarDecId             -> VarDec {cons("VarDec")}
+    VarDecId "=" VarInit -> VarDec {cons("VarDec")}
+
+    Id      -> VarDecId
+    Id Dim+ -> VarDecId {cons("ArrayVarDecId")}
+
+    "[" "]" -> Dim {cons("Dim")}
+
+    Expr      -> VarInit
+    ArrayInit -> VarInit
+
+  sorts FieldMod
+  context-free syntax
+    Public    -> FieldMod
+    Protected -> FieldMod
+    Private   -> FieldMod
+
+    Static    -> FieldMod
+    Final     -> FieldMod
+    Transient -> FieldMod
+    Volatile  -> FieldMod
+
+
+module languages/java-15/classes/ClassDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/InstanceInitializers
+  languages/java-15/classes/StaticInitializers
+  languages/java-15/classes/ConstructorDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    ClassDec
+    ClassBody
+    ClassDecHead
+
+  context-free syntax
+    EnumDec -> ClassDec
+
+    ClassDecHead ClassBody -> ClassDec {cons("ClassDec")}
+    "{" ClassBodyDec* "}" -> ClassBody {cons("ClassBody")}
+
+    (Anno | ClassMod)* "class" Id  TypeParams? Super? Interfaces? -> ClassDecHead {cons("ClassDecHead")}
+
+  %% 8.1.1: Class Modifiers
+  sorts ClassMod
+  context-free syntax
+    Abstract  -> ClassMod
+    Public    -> ClassMod
+    Protected -> ClassMod
+    Private   -> ClassMod
+    Static    -> ClassMod
+    Final     -> ClassMod
+    StrictFP  -> ClassMod
+
+  %% 8.1.4: Superclasses and Subclasses
+  sorts Super
+  context-free syntax
+
+    "extends" ClassType -> Super {cons("SuperDec")}
+
+  %% 8.1.5: Superinterfaces
+  sorts Interfaces
+  context-free syntax
+    "implements" {InterfaceType ","}+ -> Interfaces {cons("ImplementsDec")}
+
+
+  %% 8.1.6: Class Body and Member Declarations
+  sorts
+    ClassBodyDec
+    ClassMemberDec
+
+  context-free syntax
+    ClassMemberDec -> ClassBodyDec
+    InstanceInit   -> ClassBodyDec
+    StaticInit     -> ClassBodyDec
+    ConstrDec      -> ClassBodyDec
+
+  context-free syntax
+    FieldDec     -> ClassMemberDec
+    MethodDec    -> ClassMemberDec
+    ClassDec     -> ClassMemberDec
+    InterfaceDec -> ClassMemberDec
+    ";"          -> ClassMemberDec {cons("Semicolon")}
+
+module languages/java-15/packages/TypeDeclarations
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    TypeDec
+
+  context-free syntax
+    ClassDec      -> TypeDec
+    InterfaceDec  -> TypeDec
+    ";"           -> TypeDec {cons("Semicolon")}
+
+module languages/java-15/packages/CompilationUnits
+imports
+  languages/java-15/packages/PackageDeclarations
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/TypeDeclarations
+
+exports
+  sorts
+    CompilationUnit
+
+  context-free syntax
+    PackageDec? ImportDec* TypeDec+ -> CompilationUnit   {cons("CompilationUnit")}
+
+module languages/java-15/packages/Main
+imports
+  languages/java-15/packages/CompilationUnits
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/PackageDeclarations
+
+
+module languages/java-15/names/Main
+imports
+  languages/java-15/lexical/Identifiers
+exports
+  sorts PackageName
+  context-free syntax
+    {Id "."}+ -> PackageName {cons("PackageName")}
+
+  sorts
+    TypeName
+    ExprName
+    MethodName
+    PackageOrTypeName
+    AmbName
+
+  context-free syntax
+    Id             -> AmbName {cons("AmbName")}
+    AmbName "." Id -> AmbName {cons("AmbName")}
+
+    Id                       -> TypeName {cons("TypeName")}
+    PackageOrTypeName "." Id -> TypeName {cons("TypeName")}
+
+    Id             -> ExprName {cons("ExprName")}
+    AmbName "." Id -> ExprName {cons("ExprName")}
+
+    Id             -> MethodName  {cons("MethodName")}
+    AmbName "." Id -> MethodName  {cons("MethodName")}
+
+    Id                       -> PackageOrTypeName {cons("PackageOrTypeName")}
+    PackageOrTypeName "." Id -> PackageOrTypeName {cons("PackageOrTypeName")}
+
+module languages/java-15/types/ParameterizedTypes
+imports
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeArgs
+    ActualTypeArg
+    WildcardBound
+    
+  context-free syntax
+    "<" {ActualTypeArg ","}+ ">" -> TypeArgs {cons("TypeArgs")}
+
+    Type               -> ActualTypeArg
+    "?" WildcardBound? -> ActualTypeArg {cons("Wildcard")}
+
+    "extends" RefType -> WildcardBound {cons("WildcardUpperBound")}
+    "super"   RefType -> WildcardBound {cons("WildcardLowerBound")}
+
+module languages/java-15/types/TypeVariables
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeParams
+    TypeParam
+    TypeBound
+    TypeVarId
+  
+  context-free syntax
+    TypeVarId TypeBound? -> TypeParam {cons("TypeParam")}
+    
+    "extends" {ClassOrInterfaceType "&"}+ -> TypeBound {cons("TypeBound")}
+    "<" {TypeParam ","}+ ">" -> TypeParams {cons("TypeParams")}
+
+    Id -> TypeVarId
+    
+
+module languages/java-15/types/ReferenceTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main  
+  languages/java-15/types/ParameterizedTypes
+  languages/java-15/types/TypeVariables
+
+
+exports
+  sorts
+    RefType
+    ClassOrInterfaceType
+    ClassType
+    InterfaceType
+    TypeDecSpec
+    ArrayType
+    TypeVar
+
+  context-free syntax
+    ClassOrInterfaceType -> RefType
+    ArrayType            -> RefType
+    
+    %% This production rule is highly ambiguous, since every
+    %% TypeVar can be a ClassOrInterfaceType. A later disambiguation
+    %% phase has to find out if a ClassOrInterfaceType is in fact
+    %% a TypeVar.
+    
+    %% TypeVar -> RefType {avoid}
+
+  context-free syntax
+  
+    %% ClassType and InterfaceType are ambiguous. We modify the
+    %% production of ClassOrInterfaceType to make this ambiguity explicit.
+    
+    TypeDecSpec TypeArgs? -> ClassOrInterfaceType {cons("ClassOrInterfaceType")}
+    TypeDecSpec TypeArgs? -> ClassType {cons("ClassType")}
+    TypeDecSpec TypeArgs? -> InterfaceType {cons("InterfaceType")}
+
+    TypeName -> TypeDecSpec
+    TypeDecSpec TypeArgs "." Id -> TypeDecSpec {cons("Member")}
+    
+  context-free syntax    
+    TypeVarId -> TypeVar {cons("TypeVar")}
+
+  context-free syntax
+    Type "[" "]" -> ArrayType  {cons("ArrayType")}
+
+module languages/java-15/types/PrimitiveTypes
+exports
+  sorts
+    PrimType
+    NumType
+    IntType  
+    FloatType
+
+  context-free syntax
+    NumType   -> PrimType
+    "boolean" -> PrimType {cons("Boolean")}
+
+    IntType   -> NumType
+    FloatType -> NumType
+
+    "byte"   -> IntType   {cons("Byte")}
+    "short"  -> IntType   {cons("Short")}
+    "int"    -> IntType   {cons("Int")}
+    "long"   -> IntType   {cons("Long")}
+    "char"   -> IntType   {cons("Char")}
+    "float"  -> FloatType {cons("Float")}
+    "double" -> FloatType {cons("Double")}
+
+module languages/java-15/types/Main
+imports
+  languages/java-15/types/PrimitiveTypes
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/types/ParameterizedTypes
+
+exports
+  sorts
+    Type
+
+  context-free syntax
+    PrimType -> Type
+    RefType  -> Type
+
+
+module languages/java-15/lexical/literals/NullLiteral
+exports
+  sorts NullLiteral
+  context-free syntax
+    "null"  -> NullLiteral {cons("Null")}
+
+module languages/java-15/lexical/literals/StringLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    StringLiteral
+    StringPart
+    StringChars
+    FooStringChars
+
+  syntax
+    StringLiteral -> <StringLiteral-CF>
+    
+    "\"" StringPart* "\"" -> StringLiteral {cons("String")}
+    StringChars    -> StringPart {cons("Chars")}
+    UnicodeEscape  -> StringPart
+    EscapeSeq      -> StringPart
+
+    <FooStringChars-LEX> -> StringChars
+    ~[\"\\\n\13]+  -> <FooStringChars-LEX>
+
+  restrictions
+    StringChars -/- ~[\"\\\n\13]
+
+module languages/java-15/lexical/literals/EscapeSequences
+imports
+
+exports
+  sorts
+    EscapeSeq
+    NamedEscape
+    OctaEscape
+    LastOcta
+
+  syntax
+    OctaEscape  -> EscapeSeq
+    NamedEscape -> EscapeSeq
+
+    "\\" [btnfr\"\'\\]     -> NamedEscape {cons("NamedEscape")}
+    "\\" LastOcta          -> OctaEscape  {cons("OctaEscape1")}
+    "\\" [0-3] LastOcta    -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [4-7] [0-7]       -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [0-3] [0-7] [0-7] -> OctaEscape  {cons("OctaEscape3")}
+
+    [0-7] -> LastOcta
+
+  restrictions
+    LastOcta -/- [0-7]
+
+module languages/java-15/lexical/literals/CharacterLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    CharLiteral
+    CharContent
+    SingleChar
+
+  syntax
+    CharLiteral   -> <CharLiteral-CF>
+
+    "'" CharContent "'" -> CharLiteral {cons("Char")}
+    SingleChar    -> CharContent {cons("Single")}
+    UnicodeEscape -> CharContent
+    EscapeSeq     -> CharContent
+
+    ~[\r\n\'\\] -> SingleChar
+
+
+module languages/java-15/lexical/literals/BooleanLiterals
+exports
+  sorts
+    Bool
+    BoolLiteral
+
+  context-free syntax
+    Bool -> BoolLiteral {cons("Bool")}
+    "true"  -> Bool {cons("True")}
+    "false" -> Bool {cons("False")}
+
+module languages/java-15/lexical/literals/FloatingPointLiterals
+exports
+  sorts
+    FloatLiteral
+    DeciFloatLiteral
+    HexaFloatLiteral      
+  
+  context-free syntax
+    DeciFloatLiteral -> FloatLiteral {cons("Float")}
+    HexaFloatLiteral -> FloatLiteral {cons("Float")}
+
+  lexical syntax
+    DeciFloatNumeral [fFdD]? -> DeciFloatLiteral
+    HexaFloatNumeral [fFdD]? -> HexaFloatLiteral
+    
+    %% Reject plain integer literals as decimal float literals.
+    %% A similar rejection for hexadecimal float literals is not
+    %% required, since these always contain an exponent part.
+    [0-9]+ -> DeciFloatLiteral {reject}
+
+  lexical restrictions
+    DeciFloatLiteral -/- [fFdD]
+    HexaFloatLiteral -/- [fFdD]
+
+  %%%
+   %% Decimal Floating Point Numerals
+   %%%
+  sorts
+    DeciFloatNumeral
+    DeciFloatDigits
+    DeciFloatExponentPart
+
+  lexical syntax
+    DeciFloatDigits DeciFloatExponentPart? -> DeciFloatNumeral
+
+    [0-9]* "." [0-9]* -> DeciFloatDigits
+           "."        -> DeciFloatDigits {reject}
+    [0-9]+            -> DeciFloatDigits
+
+    [eE] SignedInteger -> DeciFloatExponentPart
+    
+    [\+\-]? [0-9]+ -> SignedInteger    
+
+  lexical restrictions
+    DeciFloatDigits  -/- [0-9]
+    DeciFloatExponentPart -/- [0-9]
+
+  %%%
+   %% Hexadecimal Floating Point Literals
+   %%%
+  sorts
+    HexaFloatNumeral
+    HexaSignificand
+    BinaryExponent
+    SignedInteger
+    
+  lexical syntax
+    HexaSignificand BinaryExponent -> HexaFloatNumeral
+
+    [0][xX] [0-9a-fA-F]+                  -> HexaSignificand
+    [0][xX] [0-9a-fA-F]* "." [0-9a-fA-F]* -> HexaSignificand
+    [0][xX]              "."              -> HexaSignificand {reject}
+
+    [pP] SignedInteger -> BinaryExponent
+  lexical restrictions
+    HexaSignificand -/- [0-9a-fA-F]
+    SignedInteger   -/- [0-9]
+
+module languages/java-15/lexical/literals/IntegerLiterals
+exports
+  sorts
+    IntLiteral
+    DeciLiteral
+    HexaLiteral
+    OctaLiteral
+    DeciNumeral
+    HexaNumeral
+    OctaNumeral
+
+  context-free syntax
+    DeciLiteral -> IntLiteral {cons("Deci")}
+    HexaLiteral -> IntLiteral {cons("Hexa")}
+    OctaLiteral -> IntLiteral {cons("Octa")}
+
+  lexical syntax
+    DeciNumeral [lL]? -> DeciLiteral
+    HexaNumeral [lL]? -> HexaLiteral
+    OctaNumeral [lL]? -> OctaLiteral
+
+    "0" -> DeciNumeral
+    [1-9][0-9]*  -> DeciNumeral
+    [0][xX] [0-9a-fA-F]+ -> HexaNumeral
+    [0]     [0-7]+       -> OctaNumeral
+
+  lexical restrictions
+    DeciNumeral -/- [0-9\.fFdD]
+    HexaNumeral -/- [0-9a-fA-F]
+    OctaNumeral -/- [0-7]
+
+    DeciLiteral -/- [lL]
+    HexaLiteral -/- [lL]
+    OctaLiteral -/- [lL]
+
+module languages/java-15/lexical/literals/Main
+imports
+  languages/java-15/lexical/literals/IntegerLiterals
+  languages/java-15/lexical/literals/FloatingPointLiterals
+  languages/java-15/lexical/literals/BooleanLiterals  
+  languages/java-15/lexical/literals/CharacterLiterals  
+  languages/java-15/lexical/literals/StringLiterals
+  languages/java-15/lexical/literals/NullLiteral
+
+
+module languages/java-15/lexical/Modifiers
+exports
+  sorts
+    Public
+    Private
+    Protected
+    Abstract
+    Final
+    Static
+    Native
+    Transient
+    Volatile
+    Synchronized
+    StrictFP
+    Modifier
+
+  context-free syntax
+    "public"       -> Public       {cons("Public")}
+    "private"      -> Private      {cons("Private")}
+    "protected"    -> Protected    {cons("Protected")}
+
+    "abstract"     -> Abstract     {cons("Abstract")}
+    "final"        -> Final        {cons("Final")}
+    "static"       -> Static       {cons("Static")}
+    "native"       -> Native       {cons("Native")}
+    "transient"    -> Transient    {cons("Transient")}
+    "volatile"     -> Volatile     {cons("Volatile")}
+    "synchronized" -> Synchronized {cons("Synchronized")}
+    "strictfp"     -> StrictFP     {cons("StrictFP")}
+
+    Public       -> Modifier
+    Private      -> Modifier
+    Protected    -> Modifier
+    Abstract     -> Modifier
+    Final        -> Modifier
+    Static       -> Modifier
+    Native       -> Modifier
+    Transient    -> Modifier
+    Volatile     -> Modifier
+    Synchronized -> Modifier
+    StrictFP     -> Modifier
+
+
+module languages/java-15/lexical/Keywords
+exports
+  sorts Keyword
+  lexical syntax
+    "abstract"      -> Keyword
+    "assert"        -> Keyword
+    "boolean"       -> Keyword
+    "break"         -> Keyword
+    "byte"          -> Keyword
+    "case"          -> Keyword
+    "catch"         -> Keyword
+    "char"          -> Keyword
+    "class"         -> Keyword
+    "const"         -> Keyword
+    "continue"      -> Keyword
+    "default"       -> Keyword
+    "do"            -> Keyword
+    "double"        -> Keyword
+    "else"          -> Keyword
+    "enum"          -> Keyword
+    "extends"       -> Keyword
+    "final"         -> Keyword
+    "finally"       -> Keyword
+    "float"         -> Keyword
+    "for"           -> Keyword
+    "goto"          -> Keyword
+    "if"            -> Keyword
+    "implements"    -> Keyword
+    "import"        -> Keyword
+    "instanceof"    -> Keyword
+    "int"           -> Keyword
+    "interface"     -> Keyword
+    "long"          -> Keyword
+    "native"        -> Keyword
+    "new"           -> Keyword
+    "package"       -> Keyword
+    "private"       -> Keyword
+    "protected"     -> Keyword
+    "public"        -> Keyword
+    "return"        -> Keyword
+    "short"         -> Keyword
+    "static"        -> Keyword
+    "strictfp"      -> Keyword
+    "super"         -> Keyword
+    "switch"        -> Keyword
+    "synchronized"  -> Keyword
+    "this"          -> Keyword
+    "throw"         -> Keyword
+    "throws"        -> Keyword
+    "transient"     -> Keyword
+    "try"           -> Keyword
+    "void"          -> Keyword
+    "volatile"      -> Keyword
+    "while"         -> Keyword
+
+  lexical restrictions
+
+    "abstract"
+    "assert"
+    "boolean" 
+    "break"   
+    "byte"    
+    "case"    
+    "catch"   
+    "char"     
+    "class"
+    "const"    
+    "continue" 
+    "default"  
+    "do"       
+    "double"   
+    "else"     
+    "enum"
+    "extends"  
+    "final"     
+    "finally"   
+    "float"     
+    "for"       
+    "goto"       
+    "if"         
+    "implements" 
+    "import"     
+    "instanceof" 
+    "int"        
+    "interface"  
+    "long"       
+    "native"     
+    "new"        
+    "package"    
+    "private"    
+    "protected"   
+    "public"       
+    "return"       
+    "short"        
+    "static"     
+    "strictfp"
+    "super"        
+    "switch"       
+    "synchronized" 
+    "this"         
+    "throw"        
+    "throws"       
+    "transient"    
+    "try"          
+    "void"         
+    "volatile"     
+    "while"       -/- [A-Za-z0-9\_\$]
+
+module languages/java-15/lexical/Identifiers
+imports
+  languages/java-15/lexical/Keywords
+exports
+  sorts
+    Id
+    ID
+
+  context-free syntax
+    ID -> Id {cons("Id")}
+
+  lexical syntax
+    [A-Za-z\_\$][A-Za-z0-9\_\$]* -> ID
+    
+    Keyword -> ID {reject}
+    "true"  -> ID {reject}
+    "false" -> ID {reject}
+    "null"  -> ID {reject}
+
+  lexical restrictions
+    ID -/- [a-zA-Z0-9\_\$]
+
+module languages/java-15/lexical/Comments
+imports
+  languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    Comment
+    EOLCommentChars
+    CommentPart
+    UnicodeEscape
+    BlockCommentChars
+    Asterisk
+    EscEscChar
+    EscChar
+
+  lexical syntax
+    Comment -> LAYOUT
+
+    "//" EOLCommentChars LineTerminator -> Comment
+    ~[\n\r]* -> EOLCommentChars
+
+    "/*"  CommentPart* "*/" -> Comment
+    "/**" CommentPart* "*/" -> Comment
+    "/**/"                  -> Comment %% Strange javadoc comment
+
+    BlockCommentChars -> CommentPart
+    EscChar           -> CommentPart
+    EscEscChar        -> CommentPart
+    Asterisk          -> CommentPart
+    UnicodeEscape     -> CommentPart
+
+    ~[\*\\]+ -> BlockCommentChars
+
+    "*"    -> Asterisk
+    "\\\\" -> EscEscChar
+    "\\"   -> EscChar
+
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape
+
+  lexical restrictions
+    "/**"    -/- [\/]
+    "/*"     -/- [\*]
+    Asterisk -/- [\/]
+    EscChar  -/- [\\u]
+
+    BlockCommentChars -/- ~[\*\\]
+    EOLCommentChars   -/- ~[\n\13]
+
+  context-free restrictions
+    LAYOUT?  -/- [\/].[\*]
+    LAYOUT?  -/- [\/].[\/]
+
+module languages/java-15/lexical/WhiteSpace
+exports
+  lexical syntax
+    [\ \t\12\r\n] -> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\12\n\r]
+
+module languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    LineTerminator CarriageReturn EndOfFile
+
+  lexical syntax
+    [\n]           -> LineTerminator
+    [\r][\n]       -> LineTerminator
+    CarriageReturn -> LineTerminator
+    EndOfFile      -> LineTerminator
+
+    [\r] -> CarriageReturn
+
+  lexical restrictions
+    CarriageReturn -/- [\n]
+
+  %% End of file is empty.
+  lexical syntax    
+    -> EndOfFile
+
+  lexical restrictions
+    EndOfFile -/- ~[]
+
+module languages/java-15/lexical/UnicodeEscapes
+exports
+  sorts
+    UnicodeEscape
+
+  syntax
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape {cons("UnicodeEscape")}
+
+module languages/java-15/lexical/Main
+imports
+  languages/java-15/lexical/UnicodeEscapes
+  languages/java-15/lexical/LineTerminators
+  languages/java-15/lexical/WhiteSpace
+  languages/java-15/lexical/Comments
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Keywords
+  languages/java-15/lexical/Modifiers
+  languages/java-15/lexical/literals/Main
+
+module languages/java-15/Main
+imports
+  languages/java-15/lexical/Main
+  languages/java-15/types/Main
+  languages/java-15/names/Main
+  languages/java-15/packages/Main
+  languages/java-15/classes/Main
+  languages/java-15/interfaces/Main
+  languages/java-15/arrays/Main
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+
+module languages/java-15/JavaMix[Ctx0]
+imports languages/java-15/Main
+          [ CompilationUnit       => CompilationUnit[[Ctx0]]
+            TypeDec               => TypeDec[[Ctx0]]
+            ImportDec             => ImportDec[[Ctx0]]
+            PackageDec            => PackageDec[[Ctx0]]
+            ElemVal               => ElemVal[[Ctx0]]
+            ElemValPair           => ElemValPair[[Ctx0]]
+            Anno                  => Anno[[Ctx0]]
+            LHS                   => LHS[[Ctx0]]
+            CondMid               => CondMid[[Ctx0]]
+            ArraySubscript        => ArraySubscript[[Ctx0]]
+            DimExpr               => DimExpr[[Ctx0]]
+            ArrayBaseType         => ArrayBaseType[[Ctx0]]
+            ArrayCreationExpr     => ArrayCreationExpr[[Ctx0]]
+            ClassMemberDec        => ClassMemberDec[[Ctx0]]
+            ClassBodyDec          => ClassBodyDec[[Ctx0]]
+            Interfaces            => Interfaces[[Ctx0]]
+            Super                 => Super[[Ctx0]]
+            ClassMod              => ClassMod[[Ctx0]]
+            ClassDecHead          => ClassDecHead[[Ctx0]]
+            ClassBody             => ClassBody[[Ctx0]]
+            ClassDec              => ClassDec[[Ctx0]]
+            InterfaceMod          => InterfaceMod[[Ctx0]]
+            InterfaceMemberDec    => InterfaceMemberDec[[Ctx0]]
+            ExtendsInterfaces     => ExtendsInterfaces[[Ctx0]]
+            InterfaceDecHead      => InterfaceDecHead[[Ctx0]]
+            InterfaceDec          => InterfaceDec[[Ctx0]]
+            DefaultVal            => DefaultVal[[Ctx0]]
+            AnnoElemDec           => AnnoElemDec[[Ctx0]]
+            AnnoDecHead           => AnnoDecHead[[Ctx0]]
+            AnnoDec               => AnnoDec[[Ctx0]]
+            AbstractMethodMod     => AbstractMethodMod[[Ctx0]]
+            AbstractMethodDec     => AbstractMethodDec[[Ctx0]]
+            ConstantMod           => ConstantMod[[Ctx0]]
+            ConstantDec           => ConstantDec[[Ctx0]]
+            EnumBodyDecs          => EnumBodyDecs[[Ctx0]]
+            EnumConstArgs         => EnumConstArgs[[Ctx0]]
+            EnumConst             => EnumConst[[Ctx0]]
+            EnumBody              => EnumBody[[Ctx0]]
+            EnumDecHead           => EnumDecHead[[Ctx0]]
+            EnumDec               => EnumDec[[Ctx0]]
+            ConstrMod             => ConstrMod[[Ctx0]]
+            ConstrInv             => ConstrInv[[Ctx0]]
+            ConstrBody            => ConstrBody[[Ctx0]]
+            ConstrHead            => ConstrHead[[Ctx0]]
+            ConstrDec             => ConstrDec[[Ctx0]]
+            StaticInit            => StaticInit[[Ctx0]]
+            InstanceInit          => InstanceInit[[Ctx0]]
+            MethodBody            => MethodBody[[Ctx0]]
+            ExceptionType         => ExceptionType[[Ctx0]]
+            Throws                => Throws[[Ctx0]]
+            MethodMod             => MethodMod[[Ctx0]]
+            VarMod                => VarMod[[Ctx0]]
+            FormalParam           => FormalParam[[Ctx0]]
+            ResultType            => ResultType[[Ctx0]]
+            MethodDecHead         => MethodDecHead[[Ctx0]]
+            MethodDec             => MethodDec[[Ctx0]]
+            BlockStm              => BlockStm[[Ctx0]]
+            Block                 => Block[[Ctx0]]
+            CatchClause           => CatchClause[[Ctx0]]
+            SwitchLabel           => SwitchLabel[[Ctx0]]
+            SwitchGroup           => SwitchGroup[[Ctx0]]
+            SwitchBlock           => SwitchBlock[[Ctx0]]
+            Stm                   => Stm[[Ctx0]]
+            LocalVarDec           => LocalVarDec[[Ctx0]]
+            LocalVarDecStm        => LocalVarDecStm[[Ctx0]]
+            FieldMod              => FieldMod[[Ctx0]]
+            VarInit               => VarInit[[Ctx0]]
+            Dim                   => Dim[[Ctx0]]
+            VarDecId              => VarDecId[[Ctx0]]
+            VarDec                => VarDec[[Ctx0]]
+            FieldDec              => FieldDec[[Ctx0]]
+            ArrayInit             => ArrayInit[[Ctx0]]
+            ClassLiteral          => ClassLiteral[[Ctx0]]
+            Literal               => Literal[[Ctx0]]
+            Type                  => Type[[Ctx0]]
+            ArrayType             => ArrayType[[Ctx0]]
+            TypeVar               => TypeVar[[Ctx0]]
+            TypeDecSpec           => TypeDecSpec[[Ctx0]]
+            InterfaceType         => InterfaceType[[Ctx0]]
+            ClassType             => ClassType[[Ctx0]]
+            ClassOrInterfaceType  => ClassOrInterfaceType[[Ctx0]]
+            RefType               => RefType[[Ctx0]]
+            TypeVarId             => TypeVarId[[Ctx0]]
+            TypeParams            => TypeParams[[Ctx0]]
+            TypeBound             => TypeBound[[Ctx0]]
+            TypeParam             => TypeParam[[Ctx0]]
+            WildcardBound         => WildcardBound[[Ctx0]]
+            ActualTypeArg         => ActualTypeArg[[Ctx0]]
+            TypeArgs              => TypeArgs[[Ctx0]]
+            PackageOrTypeName     => PackageOrTypeName[[Ctx0]]
+            MethodName            => MethodName[[Ctx0]]
+            ExprName              => ExprName[[Ctx0]]
+            TypeName              => TypeName[[Ctx0]]
+            AmbName               => AmbName[[Ctx0]]
+            PackageName           => PackageName[[Ctx0]]
+            FloatType             => FloatType[[Ctx0]]
+            IntType               => IntType[[Ctx0]]
+            NumType               => NumType[[Ctx0]]
+            PrimType              => PrimType[[Ctx0]]
+            NullLiteral           => NullLiteral[[Ctx0]]
+            FooStringChars        => FooStringChars[[Ctx0]]
+            StringChars           => StringChars[[Ctx0]]
+            StringPart            => StringPart[[Ctx0]]
+            StringLiteral         => StringLiteral[[Ctx0]]
+            SingleChar            => SingleChar[[Ctx0]]
+            CharContent           => CharContent[[Ctx0]]
+            CharLiteral           => CharLiteral[[Ctx0]]
+            LastOcta              => LastOcta[[Ctx0]]
+            OctaEscape            => OctaEscape[[Ctx0]]
+            NamedEscape           => NamedEscape[[Ctx0]]
+            EscapeSeq             => EscapeSeq[[Ctx0]]
+            Bool                  => Bool[[Ctx0]]
+            BoolLiteral           => BoolLiteral[[Ctx0]]
+            BinaryExponent        => BinaryExponent[[Ctx0]]
+            HexaSignificand       => HexaSignificand[[Ctx0]]
+            HexaFloatNumeral      => HexaFloatNumeral[[Ctx0]]
+            SignedInteger         => SignedInteger[[Ctx0]]
+            DeciFloatExponentPart => DeciFloatExponentPart[[Ctx0]]
+            DeciFloatDigits       => DeciFloatDigits[[Ctx0]]
+            DeciFloatNumeral      => DeciFloatNumeral[[Ctx0]]
+            FloatLiteral          => FloatLiteral[[Ctx0]]
+            HexaFloatLiteral      => HexaFloatLiteral[[Ctx0]]
+            DeciFloatLiteral      => DeciFloatLiteral[[Ctx0]]
+            IntLiteral            => IntLiteral[[Ctx0]]
+            OctaNumeral           => OctaNumeral[[Ctx0]]
+            HexaNumeral           => HexaNumeral[[Ctx0]]
+            DeciNumeral           => DeciNumeral[[Ctx0]]
+            OctaLiteral           => OctaLiteral[[Ctx0]]
+            HexaLiteral           => HexaLiteral[[Ctx0]]
+            DeciLiteral           => DeciLiteral[[Ctx0]]
+            Modifier              => Modifier[[Ctx0]]
+            StrictFP              => StrictFP[[Ctx0]]
+            Synchronized          => Synchronized[[Ctx0]]
+            Volatile              => Volatile[[Ctx0]]
+            Transient             => Transient[[Ctx0]]
+            Native                => Native[[Ctx0]]
+            Static                => Static[[Ctx0]]
+            Final                 => Final[[Ctx0]]
+            Abstract              => Abstract[[Ctx0]]
+            Protected             => Protected[[Ctx0]]
+            Private               => Private[[Ctx0]]
+            Public                => Public[[Ctx0]]
+            Id                    => Id[[Ctx0]]
+            ID                    => ID[[Ctx0]]
+            Keyword               => Keyword[[Ctx0]]
+            ArrayAccess           => ArrayAccess[[Ctx0]]
+            FieldAccess           => FieldAccess[[Ctx0]]
+            MethodSpec            => MethodSpec[[Ctx0]]
+            Expr                  => Expr[[Ctx0]] ]
+
+
+module languages/java/JavaMix[Ctx]
+imports
+  languages/java-15/JavaMix[Ctx]
+
+
+module languages/sql92/lexical/Literal
+exports
+  sorts Lit
+  context-free syntax
+    UnsignedNumLit -> UnsignedLit
+    GeneralLit     -> UnsignedLit
+
+    CharStringLit     -> GeneralLit {cons("CharString")}  
+    NatCharStringLit  -> GeneralLit
+    BitStringLit      -> GeneralLit
+    HexStringLit      -> GeneralLit
+    DateTimeStringLit -> GeneralLit
+    IntervalLit       -> GeneralLit
+
+    ApproxNumLit  -> UnsignedNumLit {cons("ApproxNum")}
+    ExactNumLit   -> UnsignedNumLit {cons("ExactNum")}
+
+  sorts ExactNumLit ApproxNumLit
+  lexical syntax
+    [0-9]+ -> NumDigits  
+    [0-9]* "." [0-9]* -> NumDigits
+           "."        -> NumDigits {reject}
+           
+    NumDigits -> ExactNumLit
+
+    NumDigits Exponent -> ApproxNumLit    
+    [eE] SignedInteger -> Exponent
+    [\+\-]? [0-9]+ -> SignedInteger    
+    
+    [0-9]+ -> UnsignedInteger        
+
+  lexical restrictions
+    NumDigits     -/- [0-9]
+    SignedInteger -/- [0-9]    
+    
+  %% @todo Support character set stuff?
+  sorts CharStringLit CharRepr
+  lexical syntax
+    "'" CharRepr* "'" -> CharStringLit
+
+    [A-Za-z0-9\ \"\%\&\(\)\*\+\,\-\.\/\:\;\<\=\>\?\_\|] -> CharRepr
+    "''" -> CharRepr
+
+
+
+
+module languages/sql92/lexical/Keyword
+exports
+  sorts ReservedKeyword
+
+  lexical syntax
+    "AND"   |
+    "AVG"       -> ReservedKeyword
+
+    "BY"        -> ReservedKeyword 
+    "CROSS"     -> ReservedKeyword 
+
+    "DISTINCT"  -> ReservedKeyword 
+
+    "FROM" |
+    "FULL"      -> ReservedKeyword 
+
+    "GROUP"     -> ReservedKeyword 
+    "HAVING"    -> ReservedKeyword 
+
+    "IN"    |
+    "INNER" |
+    "INTERSECT" -> ReservedKeyword 
+
+    "JOIN"      -> ReservedKeyword 
+
+    "LIKE" |
+    "LEFT"      -> ReservedKeyword 
+
+    "SELECT"    -> ReservedKeyword 
+
+    "MAX"   |
+    "MIN"       -> ReservedKeyword 
+
+    "NATURAL" |
+    "NOT"   |
+    "NULL"      -> ReservedKeyword 
+
+    "ON"    |
+    "OR"    |
+    "ORDER" |
+    "OUTER"     -> ReservedKeyword 
+
+    "RIGHT"     -> ReservedKeyword 
+
+    "SELECT" |
+    "SUM"       -> ReservedKeyword 
+
+    "WIDTH"     -> ReservedKeyword 
+
+  lexical restrictions
+    %% TODO: fix this
+    ReservedKeyword -/- [a-zA-Z0-9\_\$]
+
+module languages/sql92/lexical/Whitespace
+exports
+  lexical syntax
+    [\ \t\n\13] -> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\13]
+
+module languages/sql92/expressions/ValueSpecification
+imports
+  languages/sql92/lexical/Literal
+
+exports
+  sorts
+    UnsignedValSpec
+    GeneralValSpec
+    DynParamSpec
+    VarSpec
+    IndicatorVar
+    VarName
+    VarName
+    
+  context-free syntax
+    UnsignedLit    -> UnsignedValSpec
+    GeneralValSpec -> UnsignedValSpec
+
+    DynParamSpec   -> GeneralValSpec
+    VarSpec        -> GeneralValSpec
+    "USER"         -> GeneralValSpec {cons("User")}
+    "CURRENT_USER" -> GeneralValSpec {cons("CurrentUser")}
+    "SESSION_USER" -> GeneralValSpec {cons("SessionUser")}
+    "SYSTEM_USER"  -> GeneralValSpec {cons("SystemUser")}
+    "VALUE"        -> GeneralValSpec {cons("Value")}
+
+    "?" -> DynParamSpec  {cons("DynParam")}
+
+    VarName Indicator?  -> VarSpec {cons("varSpec")}
+    "INDICATOR" VarName -> IndicatorVar {cons("Indicator")}
+    ":" HostId -> VarName {cons("HostVar")}
+    ":" Id     -> VarName {cons("Var")}
+
+module languages/sql92/expressions/Value
+imports
+  languages/sql92/Misc
+  languages/sql92/lexical/Literal
+  languages/sql92/expressions/Primary[NumValExpr]
+  languages/sql92/expressions/ValueSpecification
+
+exports
+  sorts NumValExpr ValExpr
+  context-free syntax
+    NumValExpr -> ValExpr
+
+    "+" NumValExpr -> NumValExpr {cons("Plus")}
+    "-" NumValExpr -> NumValExpr {cons("Minus")}
+    
+    "(" NumValExpr ")" -> NumValExpr {bracket} 
+    NumValExpr "*" NumValExpr -> NumValExpr {left, cons("Mul")}
+    NumValExpr "/" NumValExpr -> NumValExpr {left, cons("Div")}
+
+    NumValExpr "+" NumValExpr -> NumValExpr {left, cons("Plus")}
+    NumValExpr "-" NumValExpr -> NumValExpr {left, cons("Min")}
+ 
+  context-free priorities
+      {
+        "+" NumValExpr -> NumValExpr
+        "-" NumValExpr -> NumValExpr
+      }
+    > {left:
+        NumValExpr "*" NumValExpr -> NumValExpr
+        NumValExpr "/" NumValExpr -> NumValExpr
+      } 
+    > {left:
+        NumValExpr "+" NumValExpr -> NumValExpr
+        NumValExpr "-" NumValExpr -> NumValExpr
+      }
+
+module languages/sql92/expressions/Cast
+imports
+  languages/sql92/expressions/Value
+
+exports
+  context-free syntax
+    "CAST" "(" CastOperand "AS" CastTarget ")" -> CastSpec {cons("Case")}
+    "NULL"  -> CastOperand {cons("Null")}
+    ValExpr -> CastOperand
+
+    DomainName -> CastTarget
+    DataType   -> CastTarget
+
+
+
+
+module languages/sql92/expressions/Case
+imports
+  languages/sql92/lexical/Literal
+  languages/sql92/expressions/Value
+
+exports
+  sorts CaseExpr
+  context-free syntax
+    "NULLIF"   "(" ValExpr "," ValExpr ")" -> CaseExpr {cons("NullIf")}
+    "COALESCE" "(" {ValExpr ","}+      ")" -> CaseExpr {cons("Coalesce")}
+
+    "CASE" ValExpr SimpleWhenClause+ ElseClause? "END" -> CaseExpr {cons("SimpleCase")}
+    "CASE"       SearchedWhenClause+ ElseClause? "END" -> CaseExpr {cons("SearchedCase")}
+
+  sorts SimpleWhenClause SearchedWhenClause ElseClause ResultExpr
+  context-free syntax
+    "WHEN" ValExpr  "THEN" ResultExpr -> SimpleWhenClause {cons("WhenClause")}
+    "WHEN" CondExpr "THEN" ResultExpr -> SearchedWhenClause {cons("WhenClause")}
+
+    "ELSE" ResultExpr -> ElseClause {cons("ElseClause")}
+    "NULL"  -> ResultExpr {cons("Null")}
+    ValExpr -> ResultExpr
+
+
+
+
+module languages/sql92/expressions/Primary[E]
+imports
+  languages/sql92/lexical/Literal
+  languages/sql92/expressions/Case
+  languages/sql92/expressions/Cast
+
+exports
+  sorts AggrFun
+  context-free syntax
+    UnsignedValSpec -> E
+    ColumnRef       -> E
+    CaseExpr        -> E 
+    CastSpec        -> E
+
+    "(" QueryExpr ")" -> E {cons("Subquery")}
+    "(" ValExpr   ")" -> E {bracket}
+
+    "COUNT(*)"                        -> E {cons("CountAll")}
+    AggrFun "(" DupElim?  ValExpr ")" -> E {cons("Aggr")}
+
+    "AVG"   -> AggrFun {cons("Avg")  }
+    "MAX"   -> AggrFun {cons("Max")  }
+    "MIN"   -> AggrFun {cons("Min")  }
+    "SUM"   -> AggrFun {cons("Sum")  }
+    "COUNT" -> AggrFun {cons("Count")}
+
+module languages/sql92/expressions/CharacterValue
+imports
+  languages/sql92/lexical/Literal
+  languages/sql92/expressions/Value
+  languages/sql92/expressions/Primary[CharValExpr]
+  languages/sql92/expressions/Primary[BitValExpr]
+
+exports
+  sorts CharValExpr StringValFun CharValFun
+  context-free syntax
+    CharValExpr "||" CharValExpr -> CharValExpr {cons("Concat"), left}
+    CharValExpr CollateClause    -> CharValExpr {cons("Collate")}
+    StringValFun                 -> CharValExpr
+
+    CharValFun -> StringValFun
+    BitValFun  -> StringValFun
+
+  context-free syntax
+    "SUBSTRING" "(" CharValExpr "FROM" NumValExpr ForClause? ")" -> CharValFun {cons("Substring")}
+    "FOR" NumValExpr -> ForClause {cons("For")}
+
+    "UPPER" "(" CharValExpr ")" -> CharValFun {cons("Upper")}
+    "LOWER" "(" CharValExpr ")" -> CharValFun {cons("Lower")}
+
+    "CONVERT"   "(" CharValExpr "USING" QualifiedName ")" -> CharValFun {cons("Convert")}
+    "TRANSLATE" "(" CharValExpr "USING" QualifiedName ")" -> CharValFun {cons("Translate")}
+
+    "TRIM" "(" TrimOp? CharValExpr ")" -> CharValFun {cons("Trim")}
+
+    TrimSpec? CharValExpr? "FROM" -> TrimOp {cons("TrimOp")}
+    "LEADING"  -> TrimSpec {cons("Leading")}
+    "TRAILING" -> TrimSpec {cons("Trailing")}
+    "BOTH"     -> TrimSpec {cons("Both")}
+
+  %% @todo isn't the SUBSTRING amb?
+  sorts BitValFun BitValExpr
+  context-free syntax
+    "SUBSTRING" "("  BitValExpr "FROM" NumValExpr ForClause? ")" -> BitValFun {cons("Substring")}
+    BitValExpr "||" BitValExpr -> BitValExpr {cons("Concat"), left}
+    StringValFun -> BitValExpr
+
+
+
+
+module languages/sql92/expressions/Conditional
+imports
+  languages/sql92/expressions/Table
+  languages/sql92/expressions/Value
+  languages/sql92/expressions/CharacterValue
+ 
+exports
+  sorts CondExpr
+  context-free syntax
+    CondExpr "AND" CondExpr -> CondExpr {left, cons("And")} 
+    CondExpr "OR"  CondExpr -> CondExpr {left, cons("Or")} 
+    "NOT" CondExpr          -> CondExpr {cons("Not")} 
+    "(" CondExpr ")"        -> CondExpr {bracket} 
+
+  context-free priorities
+     "NOT" CondExpr           -> CondExpr
+    > CondExpr "AND" CondExpr -> CondExpr
+    > CondExpr "OR" CondExpr  -> CondExpr
+
+  %%%  
+   %% Predicates
+   %%%
+  context-free syntax
+    RowConstructor CompOp RowConstructor -> CondExpr {cons("Comparison")}
+    RowConstructor Not? "BETWEEN" RowConstructor -> CondExpr {cons("Between")}
+    RowConstructor Not? "IN" "(" InPredVal ")" -> CondExpr {cons("In")}
+    "NOT" -> Not {cons("Not")}
+    QueryExpr       -> InPredVal
+    {ValExpr ","}+  -> InPredVal {cons("Values")}
+
+    CharValExpr Not? "LIKE" CharValExpr EscapeClause? -> CondExpr {cons("Like")}
+    "ESCAPE" CharValExpr? -> EscapeClause {cons("Escape")}
+
+    "IS" Not? "NULL" -> CondExpr {cons("IsNull")}
+
+    RowConstructor CompOp Quantifier "(" QueryExpr ")" -> CondExpr {cons("QuantifiedComparison")}
+    "ALL"  -> Quantifier {cons("All")}
+    "ANY"  -> Quantifier {cons("Any")}
+    "SOME" -> Quantifier {cons("Some")}
+    
+    "EXISTS" "(" QueryExpr ")" -> CondExpr {cons("Exists")}
+    "UNIQUE" "(" QueryExpr ")" -> CondExpr {cons("Unique")}
+
+    RowConstructor "MATCH" Unique? PartialOrFull? "(" QueryExpr ")" -> CondExpr {cons("Match")}
+    "UNIQUE"  -> Unique {cons("Unique")}
+    "PARTIAL" -> PartialOrFull {cons("Partial")}
+    "FULL"    -> PartialOrFull {cons("Full")}
+
+    RowConstructor "OVERLAPS" RowConstructor -> CondExpr {cons("Overlaps")}
+
+  context-free syntax
+    "="  -> CompOp {cons("EqOp")  }
+    "<"  -> CompOp {cons("LtOp")  }
+    "<=" -> CompOp {cons("LtEqOp")}
+    ">"  -> CompOp {cons("GtOp")  }
+    ">=" -> CompOp {cons("GtEqOp")}
+    "<>" -> CompOp {cons("LtGtOp")}
+
+  context-free syntax
+    ValExpr    -> RowConstructor
+    "NULL"     -> RowConstructor {cons("Null")}
+    "DEFAULT"  -> RowConstructor {cons("Default")}
+
+    "(" {RowConstructor ","}+ ")" -> RowConstructor {cons("Row")}
+    "(" QueryExpr             ")" -> RowConstructor {cons("Subquery")}
+
+module languages/sql92/lexical/Identifier
+imports
+  languages/sql92/lexical/Keyword
+
+exports
+  sorts Catalog ColumnName TableName RangeVar
+  context-free syntax
+    Identifier -> Catalog    {cons("Catalog")} 
+    Identifier -> ColumnName {cons("ColumnName")} 
+    Identifier -> TableName  {cons("TableName")}
+    Identifier -> RangeVar   {cons("RangeVar")} 
+
+  lexical syntax
+    [a-zA-Z][a-zA-Z0-9\_]* -> Identifier
+    ReservedKeyword        -> Identifier {reject}
+
+  lexical restrictions
+    Identifier -/- [a-zA-Z0-9\_]
+
+module languages/sql92/Misc
+imports
+  languages/sql92/lexical/Identifier
+
+exports
+  sorts ColumnRef ColumnQualifier Table SetQuantifier
+  context-free syntax
+
+    (Catalog ".")? Identifier -> Schema    {cons("Schema")}
+    (Schema ".")?  Identifier -> BaseTable {cons("BaseTable")}
+
+    BaseTable -> Table 
+
+    (ColumnQualifier ".")? ColumnName -> ColumnRef {cons("ColumnRef")}
+
+    Table      -> ColumnQualifier
+    RangeVar   -> ColumnQualifier
+    Identifier -> ColumnQualifier {cons("AmbQualifier"), prefer}
+
+    "ALL"       -> SetQuantifier {cons("All")}
+    "DISTINCT"  -> SetQuantifier {cons("Distinct")}
+
+module languages/sql92/expressions/Table
+imports
+  languages/sql92/Misc
+  languages/sql92/lexical/Identifier
+  languages/sql92/expressions/Conditional
+  languages/sql92/expressions/Value
+
+exports
+  sorts QueryExpr TableExpr RowConstructor
+  context-free syntax
+    JoinTableExpr     -> QueryExpr
+    "(" QueryExpr ")" -> QueryExpr {bracket}
+
+    QueryExpr "UNION"     All? Corresponding? QueryExpr -> QueryExpr {cons("Union")}
+    QueryExpr "EXCEPT"    All? Corresponding? QueryExpr -> QueryExpr {cons("Except")}
+    QueryExpr "INTERSECT" All? Corresponding? QueryExpr -> QueryExpr {cons("Intersect")}
+    "ALL" -> All {cons("All")} 
+    "CORRESPONDING" ByClause?      -> Corresponding {cons("Corresponding")}
+    "BY" "(" {ColumnName ","}+ ")" -> ByClause      {cons("By")}
+
+    "VALUES" {RowConstructor ","}+  -> QueryExpr {cons("Values")}
+    "TABLE" TableName               -> QueryExpr {cons("Table")}
+
+  %%%
+   %% Query specification
+   %%%  
+  context-free syntax
+    "SELECT" SetQuantifier? {SelectItem ","}+ TableExpr -> QueryExpr {cons("Select")}
+
+
+    ValExpr (As? ColumnName)? -> SelectItem {cons("ColumnProject")}
+    (RangeVar ".")? "*"     -> SelectItem {cons("WildcardProject")}
+
+    %% Ugh, these should not be visible in the AST at all.
+    "AS" -> As {cons("As")}
+
+  %%%
+   %% Table expression
+   %%%
+  context-free syntax
+    "FROM" {TableRef ","}+ WhereClause? GroupByClause? HavingClause? -> TableExpr {cons("From")}
+
+    ColumnRef               -> GroupingColumnRef
+    ColumnRef CollateClause -> GroupingColumnRef {cons("Collate")}
+    
+    "WHERE" CondExpr                     -> WhereClause   {cons("Where")}
+    "GROUP BY" {GroupingColumnRef ","}+  -> GroupByClause {cons("GroupBy")}
+    "HAVING" CondExpr                    -> HavingClause  {cons("Having")}
+
+  %%%
+   %% Table references
+   %%%
+  context-free syntax
+    Table (As? RangeVar ( "(" {ColumnName ","}+ ")")? )?          -> TableRef {cons("TableRef")}
+    "(" QueryExpr ")" As? RangeVar ( "(" {ColumnName ","}+ ")" )? -> TableRef {cons("TableRef")}
+    JoinTableExpr -> TableRef
+
+
+  %%%
+   %% Joined tables
+   %%%
+  context-free syntax
+    TableRef "CROSS JOIN"                TableRef       -> JoinTableExpr {cons("CrossJoin")}
+    TableRef "NATURAL" JoinType? "JOIN"  TableRef       -> JoinTableExpr {cons("NaturalJoin")}
+
+    TableRef  JoinType? "JOIN" TableRef JoinSpec -> JoinTableExpr {cons("Join")}
+
+    "ON" CondExpr                     -> JoinSpec {cons("On")}
+    "USING" "(" {ColumnName ","}+ ")" -> JoinSpec {cons("Using")}
+
+
+    "INNER"       -> JoinType {cons("Inner")}
+    "LEFT OUTER"  -> JoinType {cons("Left")}
+    "RIGHT OUTER" -> JoinType {cons("Right")}
+    "FULL OUTER"  -> JoinType {cons("Full")}
+    "UNION"       -> JoinType {cons("Union")}
+
+module languages/sql92/Statements
+imports
+  languages/sql92/expressions/Table
+  languages/sql92/lexical/Whitespace  
+  languages/sql92/lexical/Keyword
+  languages/sql92/lexical/Literal  
+  
+exports
+  sorts Stm ExecStm DataStm
+  context-free syntax
+    ExecStm ";" -> Stm {cons("Stm")}
+
+    DataStm -> ExecStm
+    
+    DeleteStm    -> DataStm
+    SelectStm    -> DataStm
+    InsertStm    -> DataStm
+    UpdateStm    -> DataStm
+    TempTableDec -> DataStm
+    
+    QueryExpr OrderByClause? -> SelectStm {cons("SelectStm")}
+
+  context-free syntax
+    "ORDER" "BY" {SortSpec ","}+ -> OrderByClause {cons("OrderBy")}
+
+    %% @todo collate clause
+    SortKey OrderingSpec? -> SortSpec {cons("SortSpec")}
+    
+    ColumnName      -> SortKey
+    UnsignedInteger -> SortKey
+    
+    "ASC"  -> OrderingSpec {cons("Ascending")}
+    "DESC" -> OrderingSpec {cons("Descending")}
+
+module languages/sql92/Main
+imports
+  languages/sql92/Statements
+
+
+
+
+module SQLMix[Ctx0]
+imports languages/sql92/Main
+          [ OrderingSpec       => OrderingSpec[[Ctx0]]
+            SortKey            => SortKey[[Ctx0]]
+            SortSpec           => SortSpec[[Ctx0]]
+            OrderByClause      => OrderByClause[[Ctx0]]
+            SelectStm          => SelectStm[[Ctx0]]
+            DataStm            => DataStm[[Ctx0]]
+            ExecStm            => ExecStm[[Ctx0]]
+            Stm                => Stm[[Ctx0]]
+            JoinType           => JoinType[[Ctx0]]
+            JoinSpec           => JoinSpec[[Ctx0]]
+            JoinTableExpr      => JoinTableExpr[[Ctx0]]
+            TableRef           => TableRef[[Ctx0]]
+            HavingClause       => HavingClause[[Ctx0]]
+            GroupByClause      => GroupByClause[[Ctx0]]
+            WhereClause        => WhereClause[[Ctx0]]
+            GroupingColumnRef  => GroupingColumnRef[[Ctx0]]
+            TableExpr          => TableExpr[[Ctx0]]
+            As                 => As[[Ctx0]]
+            SelectItem         => SelectItem[[Ctx0]]
+            ByClause           => ByClause[[Ctx0]]
+            Corresponding      => Corresponding[[Ctx0]]
+            All                => All[[Ctx0]]
+            QueryExpr          => QueryExpr[[Ctx0]]
+            RowConstructor     => RowConstructor[[Ctx0]]
+            CompOp             => CompOp[[Ctx0]]
+            PartialOrFull      => PartialOrFull[[Ctx0]]
+            Unique             => Unique[[Ctx0]]
+            Quantifier         => Quantifier[[Ctx0]]
+            EscapeClause       => EscapeClause[[Ctx0]]
+            InPredVal          => InPredVal[[Ctx0]]
+            Not                => Not[[Ctx0]]
+            BitValFun          => BitValFun[[Ctx0]]
+            TrimSpec           => TrimSpec[[Ctx0]]
+            TrimOp             => TrimOp[[Ctx0]]
+            ForClause          => ForClause[[Ctx0]]
+            CharValFun         => CharValFun[[Ctx0]]
+            StringValFun       => StringValFun[[Ctx0]]
+            ResultExpr         => ResultExpr[[Ctx0]]
+            ElseClause         => ElseClause[[Ctx0]]
+            SearchedWhenClause => SearchedWhenClause[[Ctx0]]
+            SimpleWhenClause   => SimpleWhenClause[[Ctx0]]
+            CaseExpr           => CaseExpr[[Ctx0]]
+            ValExpr            => ValExpr[[Ctx0]]
+            VarName            => VarName[[Ctx0]]
+            IndicatorVar       => IndicatorVar[[Ctx0]]
+            VarSpec            => VarSpec[[Ctx0]]
+            DynParamSpec       => DynParamSpec[[Ctx0]]
+            GeneralValSpec     => GeneralValSpec[[Ctx0]]
+            UnsignedValSpec    => UnsignedValSpec[[Ctx0]]
+            AggrFun            => AggrFun[[Ctx0]]
+            CastTarget         => CastTarget[[Ctx0]]
+            CastOperand        => CastOperand[[Ctx0]]
+            CastSpec           => CastSpec[[Ctx0]]
+            CharRepr           => CharRepr[[Ctx0]]
+            CharStringLit      => CharStringLit[[Ctx0]]
+            UnsignedInteger    => UnsignedInteger[[Ctx0]]
+            SignedInteger      => SignedInteger[[Ctx0]]
+            Exponent           => Exponent[[Ctx0]]
+            ApproxNumLit       => ApproxNumLit[[Ctx0]]
+            ExactNumLit        => ExactNumLit[[Ctx0]]
+            NumDigits          => NumDigits[[Ctx0]]
+            UnsignedNumLit     => UnsignedNumLit[[Ctx0]]
+            GeneralLit         => GeneralLit[[Ctx0]]
+            UnsignedLit        => UnsignedLit[[Ctx0]]
+            SetQuantifier      => SetQuantifier[[Ctx0]]
+            ColumnQualifier    => ColumnQualifier[[Ctx0]]
+            ColumnRef          => ColumnRef[[Ctx0]]
+            Table              => Table[[Ctx0]]
+            BaseTable          => BaseTable[[Ctx0]]
+            Schema             => Schema[[Ctx0]]
+            RangeVar           => RangeVar[[Ctx0]]
+            TableName          => TableName[[Ctx0]]
+            ColumnName         => ColumnName[[Ctx0]]
+            Catalog            => Catalog[[Ctx0]]
+            Identifier         => Identifier[[Ctx0]]
+            ReservedKeyword    => ReservedKeyword[[Ctx0]]
+            NumValExpr         => NumValExpr[[Ctx0]]
+            CharValExpr        => CharValExpr[[Ctx0]]
+            BitValExpr         => BitValExpr[[Ctx0]]
+            CondExpr           => CondExpr[[Ctx0]] ]
+
+
+module Embedded-SQL[Ctx E]
+imports
+  SQLMix[Ctx]
+
+exports
+
+  %%%
+   %% Quotations
+   %%% 
+  context-free syntax
+    "<|" QueryExpr[[Ctx]]      "|>" -> E {cons("ToMetaExpr")}
+    "<|" Stm[[Ctx]]            "|>" -> E {cons("ToMetaExpr")}
+    "<|" CondExpr[[Ctx]]       "|>" -> E {cons("ToMetaExpr")}
+    "<|" WhereClause[[Ctx]]?   "|>" -> E {cons("ToMetaExpr")}
+    "<|" OrderByClause[[Ctx]]? "|>" -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti-quotations
+   %%% 
+  context-free syntax
+    "${" E "}" -> SelectItem[[Ctx]]     {cons("FromMetaExpr")}
+    "${" E "}" -> Table[[Ctx]]          {cons("FromMetaExpr")}
+    "${" E "}" -> CondExpr[[Ctx]]       {cons("FromMetaExpr")}
+    "${" E "}" -> CharStringLit[[Ctx]]  {cons("FromMetaExpr")}
+    "${" E "}" -> WhereClause[[Ctx]]?   {cons("FromMetaExpr")}
+    "${" E "}" -> OrderByClause[[Ctx]]? {cons("FromMetaExpr")}
+
+module Java-SQL
+imports
+  Embedded-SQL[SQLCtx Expr[[JavaCtx]]]
+  languages/java/JavaMix[JavaCtx]
+
+exports
+  context-free start-symbols CompilationUnit[[JavaCtx]]
\ No newline at end of file

Added: sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp	Wed Mar  9 10:16:00 2011	(r22331)
@@ -0,0 +1,180 @@
+grammar Main;
+
+import Layout ;
+
+// Islands and bridges
+island island0 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ConstrBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ConstrBody" ) ;
+bridge from island0 to island1 ;
+island startassert0 : SimpleStartIsland = "assert" for-sglr ( "AssertStm" ) ;
+island endassert0 : SimpleEndIsland = ";" for-sglr ( "AssertStm" ) ;
+bridge from startassert0 to endassert0 ;
+island startassert0 : SimpleStartIsland = "assert" for-sglr ( "AssertStm" ) ;
+island endassert0 : SimpleEndIsland = ";" for-sglr ( "AssertStm" ) ;
+bridge from startassert0 to endassert0 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "SwitchBlock" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "SwitchBlock" ) ;
+bridge from island0 to island1 ;
+island startcase0 : SimpleStartIsland = "case" for-sglr ( "Case" ) ;
+island endcase0 : SimpleEndIsland = ":" for-sglr ( "Case" ) ;
+bridge from startcase0 to endcase0 ;
+island startdo0 : SimpleStartIsland = "do" for-sglr ( "DoWhile" ) ;
+island enddo0 : SimpleEndIsland = ";" for-sglr ( "DoWhile" ) ;
+bridge from startdo0 to enddo0 ;
+island startreturn0 : SimpleStartIsland = "return" for-sglr ( "Return" ) ;
+island endreturn0 : SimpleEndIsland = ";" for-sglr ( "Return" ) ;
+bridge from startreturn0 to endreturn0 ;
+island startthrow0 : SimpleStartIsland = "throw" for-sglr ( "Throw" ) ;
+island endthrow0 : SimpleEndIsland = ";" for-sglr ( "Throw" ) ;
+bridge from startthrow0 to endthrow0 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "Block" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "Block" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island0 to island1 ;
+island island2 : SimpleStartIsland = "@" for-sglr ( "Anno" ) ;
+island island3 : SimpleEndIsland = ")" for-sglr ( "Anno" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "@" for-sglr ( "SingleElemAnno" ) ;
+island island3 : SimpleEndIsland = ")" for-sglr ( "SingleElemAnno" ) ;
+bridge from island2 to island3 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ClassBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ClassBody" ) ;
+bridge from island0 to island1 ;
+island island4 : SimpleStartIsland = "<" for-sglr ( "TypeArgs" ) ;
+island island5 : SimpleEndIsland = ">" for-sglr ( "TypeArgs" ) ;
+bridge from island4 to island5 ;
+
+// Reefs
+reef instanceof0 : Keyword = "instanceof" for-sglr ( "InstanceOf" ) ;
+reef separator0 : Keyword = "," for-sglr ( "Invoke" ) ;
+reef super0 : Keyword = "super" for-sglr ( "SuperMethod" ) ;
+reef super1 : Keyword = "super" for-sglr ( "QSuperMethod" ) ;
+reef super2 : Keyword = "super" for-sglr ( "SuperField" ) ;
+reef super3 : Keyword = "super" for-sglr ( "QSuperField" ) ;
+reef new0 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new1 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new2 : Keyword = "new" for-sglr ( "NewInstance" ) ;
+reef separator1 : Keyword = "," for-sglr ( "NewInstance" ) ;
+reef new3 : Keyword = "new" for-sglr ( "QNewInstance" ) ;
+reef separator2 : Keyword = "," for-sglr ( "QNewInstance" ) ;
+reef class0 : Keyword = "class" for-sglr ( "Class" ) ;
+reef void0 : Keyword = "void" for-sglr ( "VoidClass" ) ;
+reef class1 : Keyword = "class" for-sglr ( "VoidClass" ) ;
+reef this0 : Keyword = "this" for-sglr ( "This" ) ;
+reef this1 : Keyword = "this" for-sglr ( "QThis" ) ;
+reef package0 : Keyword = "package" for-sglr ( "PackageDec" ) ;
+reef import0 : Keyword = "import" for-sglr ( "TypeImportDec" ) ;
+reef import1 : Keyword = "import" for-sglr ( "TypeImportOnDemandDec" ) ;
+reef import2 : Keyword = "import" for-sglr ( "StaticImportDec" ) ;
+reef static0 : Keyword = "static" for-sglr ( "StaticImportDec" ) ;
+reef import3 : Keyword = "import" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef static1 : Keyword = "static" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef interface0 : Keyword = "interface" for-sglr ( "AnnoDecHead" ) ;
+reef default0 : Keyword = "default" for-sglr ( "DefaultVal" ) ;
+reef separator3 : Keyword = "," for-sglr ( "AbstractMethodDec" ) ;
+reef separator4 : Keyword = "," for-sglr ( "DeprAbstractMethodDec" ) ;
+reef separator5 : Keyword = "," for-sglr ( "ConstantDec" ) ;
+reef interface1 : Keyword = "interface" for-sglr ( "InterfaceDecHead" ) ;
+reef extends0 : Keyword = "extends" for-sglr ( "ExtendsInterfaces" ) ;
+reef separator6 : Keyword = "," for-sglr ( "ExtendsInterfaces" ) ;
+reef enum0 : Keyword = "enum" for-sglr ( "EnumDecHead" ) ;
+reef separator7 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator8 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator9 : Keyword = "," for-sglr ( "ConstrDecHead" ) ;
+reef this2 : Keyword = "this" for-sglr ( "AltConstrInv" ) ;
+reef separator10 : Keyword = "," for-sglr ( "AltConstrInv" ) ;
+reef super4 : Keyword = "super" for-sglr ( "SuperConstrInv" ) ;
+reef separator11 : Keyword = "," for-sglr ( "SuperConstrInv" ) ;
+reef super5 : Keyword = "super" for-sglr ( "QSuperConstrInv" ) ;
+reef separator12 : Keyword = "," for-sglr ( "QSuperConstrInv" ) ;
+reef static2 : Keyword = "static" for-sglr ( "StaticInit" ) ;
+reef if0 : Keyword = "if" for-sglr ( "If" ) ;
+reef if1 : Keyword = "if" for-sglr ( "If" ) ;
+reef else0 : Keyword = "else" for-sglr ( "If" ) ;
+reef assert0 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef assert1 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef switch0 : Keyword = "switch" for-sglr ( "Switch" ) ;
+reef case0 : Keyword = "case" for-sglr ( "Case" ) ;
+reef default1 : Keyword = "default" for-sglr ( "Default" ) ;
+reef while0 : Keyword = "while" for-sglr ( "While" ) ;
+reef do0 : Keyword = "do" for-sglr ( "DoWhile" ) ;
+reef while1 : Keyword = "while" for-sglr ( "DoWhile" ) ;
+reef for0 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator13 : Keyword = "," for-sglr ( "For" ) ;
+reef for1 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator14 : Keyword = "," for-sglr ( "For" ) ;
+reef separator15 : Keyword = "," for-sglr ( "For" ) ;
+reef for2 : Keyword = "for" for-sglr ( "ForEach" ) ;
+reef break0 : Keyword = "break" for-sglr ( "Break" ) ;
+reef continue0 : Keyword = "continue" for-sglr ( "Continue" ) ;
+reef return0 : Keyword = "return" for-sglr ( "Return" ) ;
+reef throw0 : Keyword = "throw" for-sglr ( "Throw" ) ;
+reef synchronized0 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef try0 : Keyword = "try" for-sglr ( "Try" ) ;
+reef try1 : Keyword = "try" for-sglr ( "Try" ) ;
+reef finally0 : Keyword = "finally" for-sglr ( "Try" ) ;
+reef catch0 : Keyword = "catch" for-sglr ( "Catch" ) ;
+reef separator16 : Keyword = "," for-sglr ( "LocalVarDec" ) ;
+reef separator17 : Keyword = "," for-sglr ( "MethodDecHead" ) ;
+reef separator18 : Keyword = "," for-sglr ( "DeprMethodDecHead" ) ;
+reef void1 : Keyword = "void" for-sglr ( "Void" ) ;
+reef throws0 : Keyword = "throws" for-sglr ( "ThrowsDec" ) ;
+reef separator19 : Keyword = "," for-sglr ( "ThrowsDec" ) ;
+reef separator20 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator21 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator22 : Keyword = "," for-sglr ( "Anno" ) ;
+reef separator23 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator24 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator25 : Keyword = "," for-sglr ( "FieldDec" ) ;
+reef class2 : Keyword = "class" for-sglr ( "ClassDecHead" ) ;
+reef extends1 : Keyword = "extends" for-sglr ( "SuperDec" ) ;
+reef implements0 : Keyword = "implements" for-sglr ( "ImplementsDec" ) ;
+reef separator26 : Keyword = "," for-sglr ( "ImplementsDec" ) ;
+reef separator27 : Keyword = "." for-sglr ( "PackageName" ) ;
+reef separator28 : Keyword = "," for-sglr ( "TypeArgs" ) ;
+reef extends2 : Keyword = "extends" for-sglr ( "WildcardUpperBound" ) ;
+reef super6 : Keyword = "super" for-sglr ( "WildcardLowerBound" ) ;
+reef extends3 : Keyword = "extends" for-sglr ( "TypeBound" ) ;
+reef separator29 : Keyword = "&" for-sglr ( "TypeBound" ) ;
+reef separator30 : Keyword = "," for-sglr ( "TypeParams" ) ;
+reef boolean0 : Keyword = "boolean" for-sglr ( "Boolean" ) ;
+reef byte0 : Keyword = "byte" for-sglr ( "Byte" ) ;
+reef short0 : Keyword = "short" for-sglr ( "Short" ) ;
+reef int0 : Keyword = "int" for-sglr ( "Int" ) ;
+reef long0 : Keyword = "long" for-sglr ( "Long" ) ;
+reef char0 : Keyword = "char" for-sglr ( "Char" ) ;
+reef float0 : Keyword = "float" for-sglr ( "Float" ) ;
+reef double0 : Keyword = "double" for-sglr ( "Double" ) ;
+reef public0 : Keyword = "public" for-sglr ( "Public" ) ;
+reef private0 : Keyword = "private" for-sglr ( "Private" ) ;
+reef protected0 : Keyword = "protected" for-sglr ( "Protected" ) ;
+reef abstract0 : Keyword = "abstract" for-sglr ( "Abstract" ) ;
+reef final0 : Keyword = "final" for-sglr ( "Final" ) ;
+reef static3 : Keyword = "static" for-sglr ( "Static" ) ;
+reef native0 : Keyword = "native" for-sglr ( "Native" ) ;
+reef transient0 : Keyword = "transient" for-sglr ( "Transient" ) ;
+reef volatile0 : Keyword = "volatile" for-sglr ( "Volatile" ) ;
+reef synchronized1 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef strictfp0 : Keyword = "strictfp" for-sglr ( "StrictFP" ) ;
+
+// Ignores
+ignore "//" to NEWLINE ;
+ignore "/*" to "*/" ;
+ignore "\" to "\" ;
\ No newline at end of file

Added: sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp	Wed Mar  9 10:16:00 2011	(r22331)
@@ -0,0 +1,560 @@
+grammar Main;
+
+import Layout ;
+
+// Islands and bridges
+island island0 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ConstrBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ConstrBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "SwitchBlock" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "SwitchBlock" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "Block" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "Block" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ClassBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ClassBody" ) ;
+bridge from island0 to island1 ;
+island starte0 : SimpleStartIsland = "e" for-sglr ( "ToMetaExpr" ) ;
+island ende0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from starte0 to ende0 ;
+island island42 : SimpleStartIsland = "java:expr" for-sglr ( "ToMetaExpr" ) ;
+island island43 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island42 to island43 ;
+island startexpr0 : SimpleStartIsland = "expr" for-sglr ( "ToMetaExpr" ) ;
+island endexpr0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startexpr0 to endexpr0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island98 : SimpleStartIsland = "var-init" for-sglr ( "ToMetaExpr" ) ;
+island island99 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island98 to island99 ;
+island island96 : SimpleStartIsland = "java:bstm" for-sglr ( "ToMetaExpr" ) ;
+island island97 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island96 to island97 ;
+island startbstm0 : SimpleStartIsland = "bstm" for-sglr ( "ToMetaExpr" ) ;
+island endbstm0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startbstm0 to endbstm0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island94 : SimpleStartIsland = "java:bstm*" for-sglr ( "ToMetaListExpr" ) ;
+island island95 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island94 to island95 ;
+island island92 : SimpleStartIsland = "bstm*" for-sglr ( "ToMetaListExpr" ) ;
+island island93 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island92 to island93 ;
+island island90 : SimpleStartIsland = "java:block-stm" for-sglr ( "ToMetaExpr" ) ;
+island island91 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island90 to island91 ;
+island island88 : SimpleStartIsland = "block-stm" for-sglr ( "ToMetaExpr" ) ;
+island island89 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island88 to island89 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island86 : SimpleStartIsland = "java:block-stm*" for-sglr ( "ToMetaListExpr" ) ;
+island island87 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island86 to island87 ;
+island island84 : SimpleStartIsland = "block-stm*" for-sglr ( "ToMetaListExpr" ) ;
+island island85 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island84 to island85 ;
+island island14 : SimpleStartIsland = "java:stm" for-sglr ( "ToMetaExpr" ) ;
+island island15 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island14 to island15 ;
+island startstm0 : SimpleStartIsland = "stm" for-sglr ( "ToMetaExpr" ) ;
+island endstm0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startstm0 to endstm0 ;
+island island82 : SimpleStartIsland = "switch-group" for-sglr ( "ToMetaListExpr" ) ;
+island island83 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island82 to island83 ;
+island island80 : SimpleStartIsland = "java:switch-group" for-sglr ( "ToMetaListExpr" ) ;
+island island81 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island80 to island81 ;
+island island78 : SimpleStartIsland = "java:lvdec" for-sglr ( "ToMetaExpr" ) ;
+island island79 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island78 to island79 ;
+island startlvdec0 : SimpleStartIsland = "lvdec" for-sglr ( "ToMetaExpr" ) ;
+island endlvdec0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startlvdec0 to endlvdec0 ;
+island island76 : SimpleStartIsland = "java:vdec" for-sglr ( "ToMetaExpr" ) ;
+island island77 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island76 to island77 ;
+island startvdec0 : SimpleStartIsland = "vdec" for-sglr ( "ToMetaExpr" ) ;
+island endvdec0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startvdec0 to endvdec0 ;
+island startt0 : SimpleStartIsland = "t" for-sglr ( "ToMetaExpr" ) ;
+island endt0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startt0 to endt0 ;
+island startty0 : SimpleStartIsland = "ty" for-sglr ( "ToMetaExpr" ) ;
+island endty0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startty0 to endty0 ;
+island island74 : SimpleStartIsland = "java:type" for-sglr ( "ToMetaExpr" ) ;
+island island75 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island74 to island75 ;
+island starttype0 : SimpleStartIsland = "type" for-sglr ( "ToMetaExpr" ) ;
+island endtype0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from starttype0 to endtype0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island startambname0 : SimpleStartIsland = "ambname" for-sglr ( "ToMetaExpr" ) ;
+island endambname0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startambname0 to endambname0 ;
+island startename0 : SimpleStartIsland = "ename" for-sglr ( "ToMetaExpr" ) ;
+island endename0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startename0 to endename0 ;
+island startfname0 : SimpleStartIsland = "fname" for-sglr ( "ToMetaExpr" ) ;
+island endfname0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startfname0 to endfname0 ;
+island starttname0 : SimpleStartIsland = "tname" for-sglr ( "ToMetaExpr" ) ;
+island endtname0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from starttname0 to endtname0 ;
+island startpkgtname0 : SimpleStartIsland = "pkgtname" for-sglr ( "ToMetaExpr" ) ;
+island endpkgtname0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startpkgtname0 to endpkgtname0 ;
+island startanno0 : SimpleStartIsland = "anno" for-sglr ( "ToMetaExpr" ) ;
+island endanno0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startanno0 to endanno0 ;
+island startparam0 : SimpleStartIsland = "param" for-sglr ( "ToMetaExpr" ) ;
+island endparam0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startparam0 to endparam0 ;
+island island72 : SimpleStartIsland = "java:param" for-sglr ( "ToMetaExpr" ) ;
+island island73 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island72 to island73 ;
+island island70 : SimpleStartIsland = "param*" for-sglr ( "ToMetaExpr" ) ;
+island island71 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island70 to island71 ;
+island island68 : SimpleStartIsland = "java:param*" for-sglr ( "ToMetaExpr" ) ;
+island island69 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island68 to island69 ;
+island island66 : SimpleStartIsland = "java:formal-param" for-sglr ( "ToMetaExpr" ) ;
+island island67 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island66 to island67 ;
+island island64 : SimpleStartIsland = "formal-param" for-sglr ( "ToMetaExpr" ) ;
+island island65 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island64 to island65 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island62 : SimpleStartIsland = "java:formal-param*" for-sglr ( "ToMetaExpr" ) ;
+island island63 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island62 to island63 ;
+island island60 : SimpleStartIsland = "formal-param*" for-sglr ( "ToMetaExpr" ) ;
+island island61 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island60 to island61 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island58 : SimpleStartIsland = "java:package-dec" for-sglr ( "ToMetaExpr" ) ;
+island island59 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island58 to island59 ;
+island island56 : SimpleStartIsland = "package-dec" for-sglr ( "ToMetaExpr" ) ;
+island island57 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island56 to island57 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island54 : SimpleStartIsland = "java:package-dec?" for-sglr ( "ToMetaExpr" ) ;
+island island55 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island54 to island55 ;
+island island52 : SimpleStartIsland = "package-dec?" for-sglr ( "ToMetaExpr" ) ;
+island island53 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island52 to island53 ;
+island island50 : SimpleStartIsland = "java:import-dec" for-sglr ( "ToMetaExpr" ) ;
+island island51 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island50 to island51 ;
+island island48 : SimpleStartIsland = "import-dec" for-sglr ( "ToMetaExpr" ) ;
+island island49 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island48 to island49 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island46 : SimpleStartIsland = "java:import-dec*" for-sglr ( "ToMetaListExpr" ) ;
+island island47 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island46 to island47 ;
+island island44 : SimpleStartIsland = "import-dec*" for-sglr ( "ToMetaListExpr" ) ;
+island island45 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island44 to island45 ;
+island starte0 : SimpleStartIsland = "e" for-sglr ( "ToMetaExpr" ) ;
+island ende0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from starte0 to ende0 ;
+island island42 : SimpleStartIsland = "java:expr" for-sglr ( "ToMetaExpr" ) ;
+island island43 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island42 to island43 ;
+island startexpr0 : SimpleStartIsland = "expr" for-sglr ( "ToMetaExpr" ) ;
+island endexpr0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startexpr0 to endexpr0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island40 : SimpleStartIsland = "java:compilation-unit" for-sglr ( "ToMetaExpr" ) ;
+island island41 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island40 to island41 ;
+island island38 : SimpleStartIsland = "compilation-unit" for-sglr ( "ToMetaExpr" ) ;
+island island39 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island38 to island39 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island36 : SimpleStartIsland = "java:importdecl" for-sglr ( "ToMetaExpr" ) ;
+island island37 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island36 to island37 ;
+island startimportdecl0 : SimpleStartIsland = "importdecl" for-sglr ( "ToMetaExpr" ) ;
+island endimportdecl0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startimportdecl0 to endimportdecl0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island34 : SimpleStartIsland = "java:type-dec" for-sglr ( "ToMetaExpr" ) ;
+island island35 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island34 to island35 ;
+island island32 : SimpleStartIsland = "type-dec" for-sglr ( "ToMetaExpr" ) ;
+island island33 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island32 to island33 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island30 : SimpleStartIsland = "java:class-body-dec" for-sglr ( "ToMetaExpr" ) ;
+island island31 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island30 to island31 ;
+island island28 : SimpleStartIsland = "class-body-dec" for-sglr ( "ToMetaExpr" ) ;
+island island29 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island28 to island29 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island26 : SimpleStartIsland = "java:interface-member-dec" for-sglr ( "ToMetaExpr" ) ;
+island island27 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island26 to island27 ;
+island island24 : SimpleStartIsland = "interface-member-dec" for-sglr ( "ToMetaExpr" ) ;
+island island25 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island24 to island25 ;
+island island22 : SimpleStartIsland = "java:constant-dec" for-sglr ( "ToMetaExpr" ) ;
+island island23 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island22 to island23 ;
+island island20 : SimpleStartIsland = "constant-dec" for-sglr ( "ToMetaExpr" ) ;
+island island21 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island20 to island21 ;
+island island18 : SimpleStartIsland = "java:class-body-dec*" for-sglr ( "ToMetaExpr" ) ;
+island island19 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island18 to island19 ;
+island island16 : SimpleStartIsland = "class-body-dec*" for-sglr ( "ToMetaExpr" ) ;
+island island17 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island16 to island17 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaListExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island4 to island5 ;
+island island14 : SimpleStartIsland = "java:stm" for-sglr ( "ToMetaExpr" ) ;
+island island15 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island14 to island15 ;
+island startstm0 : SimpleStartIsland = "stm" for-sglr ( "ToMetaExpr" ) ;
+island endstm0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startstm0 to endstm0 ;
+island island12 : SimpleStartIsland = "java:imember-dec" for-sglr ( "ToMetaExpr" ) ;
+island island13 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island12 to island13 ;
+island island10 : SimpleStartIsland = "imember-dec" for-sglr ( "ToMetaExpr" ) ;
+island island11 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island10 to island11 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island8 : SimpleStartIsland = "java:imember-dec*" for-sglr ( "ToMetaExpr" ) ;
+island island9 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island8 to island9 ;
+island island6 : SimpleStartIsland = "imember-dec*" for-sglr ( "ToMetaExpr" ) ;
+island island7 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island6 to island7 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island2 : SimpleStartIsland = "{|" for-sglr ( "DynRuleScope" ) ;
+island island3 : SimpleEndIsland = "|}" for-sglr ( "DynRuleScope" ) ;
+bridge from island2 to island3 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ScopeDefault" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ScopeDefault" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "StrategyCurly" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "StrategyCurly" ) ;
+bridge from island0 to island1 ;
+island startif0 : SimpleStartIsland = "if" for-sglr ( "CondChoice" ) ;
+island endif0 : SimpleEndIsland = "end" for-sglr ( "CondChoice" ) ;
+bridge from startif0 to endif0 ;
+island startif0 : SimpleStartIsland = "if" for-sglr ( "IfThen" ) ;
+island endif0 : SimpleEndIsland = "end" for-sglr ( "IfThen" ) ;
+bridge from startif0 to endif0 ;
+island startswitch0 : SimpleStartIsland = "switch" for-sglr ( "SwitchChoiceNoOtherwise" ) ;
+island endswitch0 : SimpleEndIsland = "end" for-sglr ( "SwitchChoiceNoOtherwise" ) ;
+bridge from startswitch0 to endswitch0 ;
+island startswitch0 : SimpleStartIsland = "switch" for-sglr ( "SwitchChoice" ) ;
+island endswitch0 : SimpleEndIsland = "end" for-sglr ( "SwitchChoice" ) ;
+bridge from startswitch0 to endswitch0 ;
+island startlet0 : SimpleStartIsland = "let" for-sglr ( "Let" ) ;
+island endlet0 : SimpleEndIsland = "end" for-sglr ( "Let" ) ;
+bridge from startlet0 to endlet0 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "Scope" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "Scope" ) ;
+bridge from island0 to island1 ;
+
+// Reefs
+reef instanceof0 : Keyword = "instanceof" for-sglr ( "InstanceOf" ) ;
+reef separator80 : Keyword = "," for-sglr ( "Invoke" ) ;
+reef super6 : Keyword = "super" for-sglr ( "SuperMethod" ) ;
+reef super5 : Keyword = "super" for-sglr ( "QSuperMethod" ) ;
+reef super4 : Keyword = "super" for-sglr ( "SuperField" ) ;
+reef super3 : Keyword = "super" for-sglr ( "QSuperField" ) ;
+reef new3 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new2 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new1 : Keyword = "new" for-sglr ( "NewInstance" ) ;
+reef separator79 : Keyword = "," for-sglr ( "NewInstance" ) ;
+reef new0 : Keyword = "new" for-sglr ( "QNewInstance" ) ;
+reef separator78 : Keyword = "," for-sglr ( "QNewInstance" ) ;
+reef class2 : Keyword = "class" for-sglr ( "Class" ) ;
+reef void1 : Keyword = "void" for-sglr ( "VoidClass" ) ;
+reef class1 : Keyword = "class" for-sglr ( "VoidClass" ) ;
+reef this2 : Keyword = "this" for-sglr ( "This" ) ;
+reef this1 : Keyword = "this" for-sglr ( "QThis" ) ;
+reef package0 : Keyword = "package" for-sglr ( "PackageDec" ) ;
+reef import3 : Keyword = "import" for-sglr ( "TypeImportDec" ) ;
+reef import2 : Keyword = "import" for-sglr ( "TypeImportOnDemandDec" ) ;
+reef import1 : Keyword = "import" for-sglr ( "StaticImportDec" ) ;
+reef static3 : Keyword = "static" for-sglr ( "StaticImportDec" ) ;
+reef import0 : Keyword = "import" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef static2 : Keyword = "static" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef interface1 : Keyword = "interface" for-sglr ( "AnnoDecHead" ) ;
+reef default1 : Keyword = "default" for-sglr ( "DefaultVal" ) ;
+reef separator77 : Keyword = "," for-sglr ( "AbstractMethodDec" ) ;
+reef separator76 : Keyword = "," for-sglr ( "DeprAbstractMethodDec" ) ;
+reef separator75 : Keyword = "," for-sglr ( "ConstantDec" ) ;
+reef interface0 : Keyword = "interface" for-sglr ( "InterfaceDecHead" ) ;
+reef extends3 : Keyword = "extends" for-sglr ( "ExtendsInterfaces" ) ;
+reef separator74 : Keyword = "," for-sglr ( "ExtendsInterfaces" ) ;
+reef enum0 : Keyword = "enum" for-sglr ( "EnumDecHead" ) ;
+reef separator73 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator72 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator71 : Keyword = "," for-sglr ( "ConstrDecHead" ) ;
+reef this0 : Keyword = "this" for-sglr ( "AltConstrInv" ) ;
+reef separator70 : Keyword = "," for-sglr ( "AltConstrInv" ) ;
+reef super2 : Keyword = "super" for-sglr ( "SuperConstrInv" ) ;
+reef separator69 : Keyword = "," for-sglr ( "SuperConstrInv" ) ;
+reef super1 : Keyword = "super" for-sglr ( "QSuperConstrInv" ) ;
+reef separator68 : Keyword = "," for-sglr ( "QSuperConstrInv" ) ;
+reef static1 : Keyword = "static" for-sglr ( "StaticInit" ) ;
+reef if3 : Keyword = "if" for-sglr ( "If" ) ;
+reef if2 : Keyword = "if" for-sglr ( "If" ) ;
+reef else1 : Keyword = "else" for-sglr ( "If" ) ;
+reef assert1 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef assert0 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef switch2 : Keyword = "switch" for-sglr ( "Switch" ) ;
+reef case1 : Keyword = "case" for-sglr ( "Case" ) ;
+reef default0 : Keyword = "default" for-sglr ( "Default" ) ;
+reef while1 : Keyword = "while" for-sglr ( "While" ) ;
+reef do0 : Keyword = "do" for-sglr ( "DoWhile" ) ;
+reef while0 : Keyword = "while" for-sglr ( "DoWhile" ) ;
+reef for2 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator67 : Keyword = "," for-sglr ( "For" ) ;
+reef for1 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator66 : Keyword = "," for-sglr ( "For" ) ;
+reef separator65 : Keyword = "," for-sglr ( "For" ) ;
+reef for0 : Keyword = "for" for-sglr ( "ForEach" ) ;
+reef break0 : Keyword = "break" for-sglr ( "Break" ) ;
+reef continue0 : Keyword = "continue" for-sglr ( "Continue" ) ;
+reef return0 : Keyword = "return" for-sglr ( "Return" ) ;
+reef throw0 : Keyword = "throw" for-sglr ( "Throw" ) ;
+reef synchronized1 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef try1 : Keyword = "try" for-sglr ( "Try" ) ;
+reef try0 : Keyword = "try" for-sglr ( "Try" ) ;
+reef finally0 : Keyword = "finally" for-sglr ( "Try" ) ;
+reef catch0 : Keyword = "catch" for-sglr ( "Catch" ) ;
+reef separator64 : Keyword = "," for-sglr ( "LocalVarDec" ) ;
+reef separator63 : Keyword = "," for-sglr ( "MethodDecHead" ) ;
+reef separator62 : Keyword = "," for-sglr ( "DeprMethodDecHead" ) ;
+reef void0 : Keyword = "void" for-sglr ( "Void" ) ;
+reef throws0 : Keyword = "throws" for-sglr ( "ThrowsDec" ) ;
+reef separator61 : Keyword = "," for-sglr ( "ThrowsDec" ) ;
+reef separator60 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator59 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator58 : Keyword = "," for-sglr ( "Anno" ) ;
+reef separator57 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator56 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator55 : Keyword = "," for-sglr ( "FieldDec" ) ;
+reef class0 : Keyword = "class" for-sglr ( "ClassDecHead" ) ;
+reef extends2 : Keyword = "extends" for-sglr ( "SuperDec" ) ;
+reef implements0 : Keyword = "implements" for-sglr ( "ImplementsDec" ) ;
+reef separator54 : Keyword = "," for-sglr ( "ImplementsDec" ) ;
+reef separator53 : Keyword = "." for-sglr ( "PackageName" ) ;
+reef separator52 : Keyword = "," for-sglr ( "TypeArgs" ) ;
+reef extends1 : Keyword = "extends" for-sglr ( "WildcardUpperBound" ) ;
+reef super0 : Keyword = "super" for-sglr ( "WildcardLowerBound" ) ;
+reef extends0 : Keyword = "extends" for-sglr ( "TypeBound" ) ;
+reef separator51 : Keyword = "&" for-sglr ( "TypeBound" ) ;
+reef separator50 : Keyword = "," for-sglr ( "TypeParams" ) ;
+reef boolean0 : Keyword = "boolean" for-sglr ( "Boolean" ) ;
+reef byte0 : Keyword = "byte" for-sglr ( "Byte" ) ;
+reef short0 : Keyword = "short" for-sglr ( "Short" ) ;
+reef int0 : Keyword = "int" for-sglr ( "Int" ) ;
+reef long0 : Keyword = "long" for-sglr ( "Long" ) ;
+reef char0 : Keyword = "char" for-sglr ( "Char" ) ;
+reef float0 : Keyword = "float" for-sglr ( "Float" ) ;
+reef double0 : Keyword = "double" for-sglr ( "Double" ) ;
+reef keyword6 : Keyword = "'" for-sglr ( "Char" ) ;
+reef keyword5 : Keyword = "'" for-sglr ( "Char" ) ;
+reef public0 : Keyword = "public" for-sglr ( "Public" ) ;
+reef private0 : Keyword = "private" for-sglr ( "Private" ) ;
+reef protected0 : Keyword = "protected" for-sglr ( "Protected" ) ;
+reef abstract0 : Keyword = "abstract" for-sglr ( "Abstract" ) ;
+reef final0 : Keyword = "final" for-sglr ( "Final" ) ;
+reef static0 : Keyword = "static" for-sglr ( "Static" ) ;
+reef native0 : Keyword = "native" for-sglr ( "Native" ) ;
+reef transient0 : Keyword = "transient" for-sglr ( "Transient" ) ;
+reef volatile0 : Keyword = "volatile" for-sglr ( "Volatile" ) ;
+reef synchronized0 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef strictfp0 : Keyword = "strictfp" for-sglr ( "StrictFP" ) ;
+reef separator49 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator48 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator47 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator46 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator45 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator44 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator43 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator42 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator41 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator40 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator39 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator38 : Keyword = "," for-sglr ( "Overlay" ) ;
+reef rules1 : Keyword = "rules" for-sglr ( "GenDynRules" ) ;
+reef separator37 : Keyword = "," for-sglr ( "RDec" ) ;
+reef separator36 : Keyword = "," for-sglr ( "RDecT" ) ;
+reef separator35 : Keyword = "," for-sglr ( "RDecT" ) ;
+reef separator34 : Keyword = "," for-sglr ( "RDef" ) ;
+reef separator33 : Keyword = "," for-sglr ( "RDefT" ) ;
+reef separator32 : Keyword = "," for-sglr ( "RDefT" ) ;
+reef keyword4 : Keyword = "->" for-sglr ( "RuleNoCond" ) ;
+reef keyword3 : Keyword = "->" for-sglr ( "Rule" ) ;
+reef where2 : Keyword = "where" for-sglr ( "Rule" ) ;
+reef keyword2 : Keyword = "->" for-sglr ( "Rule" ) ;
+reef where1 : Keyword = "where" for-sglr ( "WhereClause" ) ;
+reef separator31 : Keyword = "," for-sglr ( "SDef" ) ;
+reef separator30 : Keyword = "," for-sglr ( "Call" ) ;
+reef not0 : Keyword = "not" for-sglr ( "Not" ) ;
+reef where0 : Keyword = "where" for-sglr ( "Where" ) ;
+reef test0 : Keyword = "test" for-sglr ( "Test" ) ;
+reef prim2 : Keyword = "prim" for-sglr ( "PrimNoArgs" ) ;
+reef prim1 : Keyword = "prim" for-sglr ( "Prim" ) ;
+reef separator29 : Keyword = "," for-sglr ( "Prim" ) ;
+reef separator28 : Keyword = "," for-sglr ( "CongQ" ) ;
+reef separator27 : Keyword = "," for-sglr ( "TupleCong" ) ;
+reef separator26 : Keyword = "," for-sglr ( "ListCongNoTail" ) ;
+reef separator25 : Keyword = "," for-sglr ( "ListCong" ) ;
+reef if1 : Keyword = "if" for-sglr ( "CondChoice" ) ;
+reef else0 : Keyword = "else" for-sglr ( "CondChoice" ) ;
+reef if0 : Keyword = "if" for-sglr ( "IfThen" ) ;
+reef switch1 : Keyword = "switch" for-sglr ( "SwitchChoiceNoOtherwise" ) ;
+reef switch0 : Keyword = "switch" for-sglr ( "SwitchChoice" ) ;
+reef case0 : Keyword = "case" for-sglr ( "SwitchCase" ) ;
+reef separator24 : Keyword = "," for-sglr ( "AnnoList" ) ;
+reef separator23 : Keyword = "," for-sglr ( "Tuple" ) ;
+reef separator22 : Keyword = "," for-sglr ( "List" ) ;
+reef separator21 : Keyword = "," for-sglr ( "ListTail" ) ;
+reef separator20 : Keyword = "," for-sglr ( "AnnoList" ) ;
+reef separator19 : Keyword = "," for-sglr ( "SortList" ) ;
+reef separator18 : Keyword = "," for-sglr ( "SortListTl" ) ;
+reef separator17 : Keyword = "," for-sglr ( "SortTuple" ) ;
+reef sorts0 : Keyword = "sorts" for-sglr ( "Sorts" ) ;
+reef constructors0 : Keyword = "constructors" for-sglr ( "Constructors" ) ;
+reef separator16 : Keyword = "," for-sglr ( "Sort" ) ;
+reef separator15 : Keyword = "*" for-sglr ( "FunType" ) ;
+reef keyword1 : Keyword = "->" for-sglr ( "FunType" ) ;
+reef separator14 : Keyword = "," for-sglr ( "Op" ) ;
+reef separator13 : Keyword = "," for-sglr ( "OpQ" ) ;
+reef let0 : Keyword = "let" for-sglr ( "Let" ) ;
+reef in0 : Keyword = "in" for-sglr ( "Let" ) ;
+reef separator12 : Keyword = "," for-sglr ( "CallT" ) ;
+reef separator11 : Keyword = "," for-sglr ( "CallT" ) ;
+reef separator10 : Keyword = "," for-sglr ( "CallDynamic" ) ;
+reef separator9 : Keyword = "," for-sglr ( "CallDynamic" ) ;
+reef separator8 : Keyword = "," for-sglr ( "SDefT" ) ;
+reef separator7 : Keyword = "," for-sglr ( "SDefT" ) ;
+reef separator6 : Keyword = "," for-sglr ( "ExtSDefInl" ) ;
+reef separator5 : Keyword = "," for-sglr ( "ExtSDefInl" ) ;
+reef separator4 : Keyword = "," for-sglr ( "ExtSDef" ) ;
+reef separator3 : Keyword = "," for-sglr ( "ExtSDef" ) ;
+reef fail0 : Keyword = "fail" for-sglr ( "Fail" ) ;
+reef id0 : Keyword = "id" for-sglr ( "Id" ) ;
+reef separator2 : Keyword = "," for-sglr ( "Scope" ) ;
+reef prim0 : Keyword = "prim" for-sglr ( "PrimT" ) ;
+reef separator1 : Keyword = "," for-sglr ( "PrimT" ) ;
+reef separator0 : Keyword = "," for-sglr ( "PrimT" ) ;
+reef some0 : Keyword = "some" for-sglr ( "Some" ) ;
+reef one0 : Keyword = "one" for-sglr ( "One" ) ;
+reef all0 : Keyword = "all" for-sglr ( "All" ) ;
+reef keyword0 : Keyword = "import-term" for-sglr ( "ImportTerm" ) ;
+reef module0 : Keyword = "module" for-sglr ( "Module" ) ;
+reef strategies0 : Keyword = "strategies" for-sglr ( "Strategies" ) ;
+reef signature0 : Keyword = "signature" for-sglr ( "Signature" ) ;
+reef rules0 : Keyword = "rules" for-sglr ( "Rules" ) ;
+reef overlays0 : Keyword = "overlays" for-sglr ( "Overlays" ) ;
+
+// Ignores
+ignore "//" to NEWLINE ;
+ignore "/*" to "*/" ;
+ignore "\" to "\" ;
\ No newline at end of file

Added: sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.def	Wed Mar  9 10:16:00 2011	(r22331)
@@ -0,0 +1,3159 @@
+definition
+module languages/java-15/expressions/Priorities
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/expressions/Main
+
+exports
+  context-free priorities
+      Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr
+    > {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      } 
+
+  context-free priorities
+      {right:
+        Expr "++" -> Expr
+        Expr "--" -> Expr
+      }
+    > { "(" PrimType ")" Expr -> Expr    
+        "(" RefType  ")" Expr -> Expr
+      }
+
+  context-free priorities
+      "(" PrimType ")" Expr -> Expr
+    > {left:
+        Expr "*" Expr -> Expr
+        Expr "/" Expr -> Expr
+        Expr "%" Expr -> Expr
+      } 
+
+  context-free priorities
+      "(" RefType ")" Expr -> Expr 
+    > {
+        "++" Expr -> Expr
+        "--" Expr -> Expr
+        "+"  Expr -> Expr
+        "-"  Expr -> Expr
+      }
+
+  context-free priorities
+    {
+      Expr ArraySubscript -> ArrayAccess
+      Expr "." Id -> FieldAccess
+      Expr "." TypeArgs? Id -> MethodSpec
+    }
+  > {right:
+      Expr "++" -> Expr
+      Expr "--" -> Expr
+    }
+  > {
+      "++" Expr -> Expr
+      "--" Expr -> Expr
+      "+"  Expr -> Expr
+      "-"  Expr -> Expr
+      "~"  Expr -> Expr
+      "!"  Expr -> Expr
+    }
+  > {left:
+      Expr "*" Expr -> Expr
+      Expr "/" Expr -> Expr
+      Expr "%" Expr -> Expr
+    } 
+  > {left:
+      Expr "+" Expr -> Expr
+      Expr "-" Expr -> Expr
+    }
+  > {left:
+      Expr "<<"  Expr -> Expr
+      Expr ">>"  Expr -> Expr
+      Expr ">>>" Expr -> Expr
+    }
+  > {left:
+      Expr "instanceof" RefType -> Expr
+      Expr "<"   Expr -> Expr
+      Expr ">"   Expr -> Expr
+      Expr "<="  Expr -> Expr
+      Expr ">="  Expr -> Expr
+    }
+  > {left:
+      Expr "=="  Expr -> Expr
+      Expr "!="  Expr -> Expr
+    }
+  >   Expr "&"   Expr -> Expr
+  >   Expr "^"   Expr -> Expr
+  >   Expr "|"   Expr -> Expr
+  >   Expr "&&"  Expr -> Expr
+  >   Expr "||"  Expr -> Expr
+  >   Expr CondMid Expr -> Expr
+  > {right:
+      LHS "="    Expr -> Expr
+      LHS "*="   Expr -> Expr
+      LHS "/="   Expr -> Expr
+      LHS "%="   Expr -> Expr
+      LHS "+="   Expr -> Expr
+      LHS "-="   Expr -> Expr
+      LHS "<<="  Expr -> Expr
+      LHS ">>="  Expr -> Expr
+      LHS ">>>=" Expr -> Expr
+      LHS "&="   Expr -> Expr
+      LHS "^="   Expr -> Expr
+      LHS "|="   Expr -> Expr
+    }
+
+module languages/java-15/expressions/Restrictions
+exports
+  lexical restrictions
+    "+" -/- [\+]
+    "-" -/- [\-]
+    "/" -/- [\/]
+
+module languages/java-15/expressions/AssignmentOperators
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts LHS
+  context-free syntax
+    LHS "="    Expr -> Expr {cons("Assign")}
+    LHS "*="   Expr -> Expr {cons("AssignMul")}
+    LHS "/="   Expr -> Expr {cons("AssignDiv")}
+    LHS "%="   Expr -> Expr {cons("AssignRemain")}
+    LHS "+="   Expr -> Expr {cons("AssignPlus")}
+    LHS "-="   Expr -> Expr {cons("AssignMinus")}
+    LHS "<<="  Expr -> Expr {cons("AssignLeftShift")}
+    LHS ">>="  Expr -> Expr {cons("AssignRightShift")}
+    LHS ">>>=" Expr -> Expr {cons("AssignURightShift")}
+    LHS "&="   Expr -> Expr {cons("AssignAnd")}
+    LHS "^="   Expr -> Expr {cons("AssignExcOr")}
+    LHS "|="   Expr -> Expr {cons("AssignOr")}
+
+    ExprName    -> LHS
+    FieldAccess -> LHS
+    ArrayAccess -> LHS
+
+
+
+
+module languages/java-15/expressions/BinaryOperators
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/types/Main
+
+exports
+  sorts CondMid
+  context-free syntax
+    Expr "instanceof" RefType -> Expr {cons("InstanceOf")}
+
+    Expr "*"   Expr -> Expr  {left, cons("Mul")}
+    Expr "/"   Expr -> Expr  {left, cons("Div")}
+    Expr "%"   Expr -> Expr  {left, cons("Remain")}
+
+    Expr "+"   Expr -> Expr  {left, cons("Plus")}
+    Expr "-"   Expr -> Expr  {left, cons("Minus")}
+
+    Expr "<<"  Expr -> Expr  {left, cons("LeftShift")}
+    Expr ">>"  Expr -> Expr  {left, cons("RightShift")}
+    Expr ">>>" Expr -> Expr  {left, cons("URightShift")}
+
+    Expr "<"   Expr -> Expr  {left, cons("Lt")}
+    Expr ">"   Expr -> Expr  {left, cons("Gt")}
+    Expr "<="  Expr -> Expr  {left, cons("LtEq")}
+    Expr ">="  Expr -> Expr  {left, cons("GtEq")}
+    Expr "=="  Expr -> Expr  {left, cons("Eq")}
+    Expr "!="  Expr -> Expr  {left, cons("NotEq")}
+
+    Expr "&&"  Expr -> Expr  {left, cons("LazyAnd")}
+    Expr "||"  Expr -> Expr  {left, cons("LazyOr")}
+
+    Expr "&" Expr -> Expr {left, cons("And")}
+    Expr "^" Expr -> Expr {left, cons("ExcOr")}
+    Expr "|" Expr -> Expr {left, cons("Or")}
+
+    %% todo JFR-30
+    Expr CondMid Expr -> Expr {right, cons("Cond")}
+    "?" Expr ":" -> CondMid {bracket}
+
+module languages/java-15/expressions/UnaryOperators
+imports 
+  languages/java-15/expressions/Main
+exports
+  context-free syntax
+    "+" Expr -> Expr {cons("Plus")}
+    "-" Expr -> Expr {cons("Minus")}
+
+    "++" Expr -> Expr {cons("PreIncr")}
+    "--" Expr -> Expr {cons("PreDecr")}
+
+    "~" Expr -> Expr {cons("Complement")}
+    "!" Expr -> Expr {cons("Not")}
+
+    "(" PrimType ")" Expr -> Expr {cons("CastPrim")}
+    "(" RefType  ")" Expr -> Expr {cons("CastRef")}
+
+module languages/java-15/expressions/Postfix
+imports 
+  languages/java-15/expressions/Main
+
+exports
+  context-free syntax
+    ExprName  -> Expr
+    Expr "++" -> Expr {cons("PostIncr")}
+    Expr "--" -> Expr {cons("PostDecr")}
+
+module languages/java-15/expressions/MethodInvocation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts MethodSpec
+  context-free syntax
+    MethodSpec "(" {Expr ","}* ")" -> Expr {cons("Invoke")}
+
+                               MethodName -> MethodSpec {cons("Method")}
+                    Expr "." TypeArgs? Id -> MethodSpec {cons("Method")}
+                 "super" "." TypeArgs? Id -> MethodSpec {cons("SuperMethod")}
+    TypeName "." "super" "." TypeArgs? Id -> MethodSpec {cons("QSuperMethod")}
+                 AmbName "." TypeArgs  Id -> MethodSpec {cons("GenericMethod")}
+
+  %% This priority forbids a Expr "." MethodSpec if the expression is a plain ExprName.
+  %% This solves an ambiguity with the MethodName and AmbName . TypeArgs MethodSpecs.
+  %% foo.bar.fred() results in a MethodName MethodSpec.
+  %% (foo.bar).fred() results in the Expr. MethodSpec
+  %% foo.bar.<T>fred() results in a GenericMethod
+  context-free priorities
+      Expr "." TypeArgs? Id -> MethodSpec
+    > ExprName  -> Expr
+
+
+
+
+module languages/java-15/expressions/ArrayAccess
+imports
+  languages/java-15/expressions/Main
+exports
+  sorts
+    ArrayAccess
+    ArraySubscript
+
+  context-free syntax
+    ArrayAccess -> Expr
+
+    %% todo: JFR-29
+    Expr ArraySubscript -> ArrayAccess {cons("ArrayAccess")}
+    "[" Expr "]" -> ArraySubscript {bracket}
+
+    ArrayCreationExpr ArraySubscript -> ArrayAccess {reject}
+
+module languages/java-15/expressions/FieldAccess
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts FieldAccess
+  context-free syntax
+    FieldAccess -> Expr
+
+  context-free syntax
+
+                    Expr "." Id -> FieldAccess {cons("Field")}
+                ExprName "." Id -> FieldAccess {reject}
+                 "super" "." Id -> FieldAccess {cons("SuperField")}
+    TypeName "." "super" "." Id -> FieldAccess {cons("QSuperField")}
+
+module languages/java-15/expressions/ArrayCreation
+imports
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ArrayCreationExpr
+    ArrayBaseType
+    Dim
+    DimExpr
+
+  context-free syntax
+    ArrayCreationExpr     -> Expr
+
+    "new" ArrayBaseType DimExpr+ Dim*  -> ArrayCreationExpr {cons("NewArray")}
+    "new" ArrayBaseType Dim+ ArrayInit -> ArrayCreationExpr {cons("NewArray")}
+
+    PrimType -> ArrayBaseType
+    TypeName -> ArrayBaseType
+    TypeName "<" "?" ">" -> ArrayBaseType {cons("UnboundWld")}
+
+    "[" Expr "]" -> DimExpr {cons("Dim")}
+    "[" "]"      -> Dim     {cons("Dim")}
+
+module languages/java-15/expressions/ClassInstanceCreation
+imports
+  languages/java-15/expressions/Main
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  context-free syntax
+
+             "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody? -> Expr {cons("NewInstance")}
+    Expr "." "new" TypeArgs? Id         TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("QNewInstance")}
+
+module languages/java-15/expressions/Primary
+imports
+  languages/java-15/lexical/literals/Main
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  %%%
+   %% Section 15.8.1: Lexical Literals
+   %%%
+  sorts Literal
+  context-free syntax
+    Literal -> Expr {cons("Lit")}
+
+    IntLiteral    -> Literal
+    FloatLiteral  -> Literal
+    BoolLiteral   -> Literal 
+    CharLiteral   -> Literal
+    StringLiteral -> Literal
+    NullLiteral   -> Literal
+
+  %%%
+   %% Section 15.8.2: Class Literals
+   %%%
+  sorts ClassLiteral
+  context-free syntax
+    ClassLiteral -> Literal
+    Type   "." "class" -> ClassLiteral {cons("Class")}
+    "void" "." "class" -> ClassLiteral {cons("VoidClass")}
+
+  %%%
+   %% Section 15.8.3/4: (Qualified this)
+   %%%
+  context-free syntax
+                 "this" -> Expr {cons("This")}
+    TypeName "." "this" -> Expr {cons("QThis")}
+
+  %%%
+   %% Section 15.8.5: Parenthesized Expression
+   %%%
+  context-free syntax
+    "(" Expr ")"          -> Expr {bracket}
+
+module languages/java-15/expressions/Main
+imports
+  languages/java-15/expressions/Primary
+  languages/java-15/expressions/ClassInstanceCreation
+  languages/java-15/expressions/ArrayCreation
+  languages/java-15/expressions/FieldAccess
+  languages/java-15/expressions/ArrayAccess
+  languages/java-15/expressions/MethodInvocation
+  languages/java-15/expressions/Postfix
+  languages/java-15/expressions/UnaryOperators
+  languages/java-15/expressions/BinaryOperators
+  languages/java-15/expressions/AssignmentOperators
+  languages/java-15/expressions/Restrictions
+  languages/java-15/expressions/Priorities
+
+exports
+  sorts
+    Expr
+
+module languages/java-15/statements/Main
+imports
+  languages/java-15/statements/Blocks
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+
+
+
+module languages/java-15/arrays/Main
+imports
+  languages/java-15/arrays/ArrayInitializers
+
+
+
+
+module languages/java-15/interfaces/Main
+imports
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+
+
+
+module languages/java-15/classes/Main
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+
+
+
+
+module languages/java-15/packages/PackageDeclarations
+imports
+  languages/java-15/names/Main
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    PackageDec
+
+  context-free syntax
+    Anno* "package" PackageName ";" -> PackageDec {cons("PackageDec")}
+
+module languages/java-15/packages/ImportDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+
+exports
+  sorts
+    ImportDec
+
+  context-free syntax
+    "import" TypeName                  ";"  -> ImportDec {cons("TypeImportDec")}
+    "import" PackageName       "." "*" ";"  -> ImportDec {cons("TypeImportOnDemandDec")}
+    "import" "static" TypeName "." Id  ";"  -> ImportDec {cons("StaticImportDec")}
+    "import" "static" TypeName "." "*" ";"  -> ImportDec {cons("StaticImportOnDemandDec")}
+
+module languages/java-15/interfaces/AnnotationTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    AnnoDec
+    AnnoDecHead
+
+  context-free syntax
+    AnnoDecHead "{" AnnoElemDec* "}" -> AnnoDec {cons("AnnoDec")}
+    (Anno | InterfaceMod)* "@" "interface" Id -> AnnoDecHead {cons("AnnoDecHead")}
+
+  sorts
+    AnnoElemDec
+    DefaultVal
+
+  context-free syntax
+    AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" -> AnnoElemDec {cons("AnnoMethodDec")}
+
+    ConstantDec  -> AnnoElemDec
+    ClassDec     -> AnnoElemDec
+    InterfaceDec -> AnnoElemDec
+    EnumDec      -> AnnoElemDec
+    AnnoDec      -> AnnoElemDec
+    ";"          -> AnnoElemDec {cons("Semicolon")}
+
+    "default" ElemVal -> DefaultVal {cons("DefaultVal")}
+
+module languages/java-15/interfaces/AbstractMethodDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+
+exports
+  sorts
+    AbstractMethodDec
+    AbstractMethodMod
+
+  context-free syntax
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Throws? ";" -> AbstractMethodDec {cons("AbstractMethodDec")}
+
+    (Anno | AbstractMethodMod)* TypeParams? ResultType
+      Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" -> AbstractMethodDec {cons("DeprAbstractMethodDec")}
+
+    Public   -> AbstractMethodMod
+    Abstract -> AbstractMethodMod
+
+
+
+
+
+module languages/java-15/interfaces/ConstantDeclarations
+imports
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    ConstantDec
+    ConstantMod
+
+  context-free syntax
+    (Anno | ConstantMod)* Type {VarDec ","}+ ";" -> ConstantDec {cons("ConstantDec")}
+
+    Public -> ConstantMod
+    Static -> ConstantMod
+    Final  -> ConstantMod
+
+
+
+
+module languages/java-15/interfaces/InterfaceDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/interfaces/ConstantDeclarations
+  languages/java-15/interfaces/AbstractMethodDeclarations
+  languages/java-15/interfaces/AnnotationTypes
+  languages/java-15/interfaces/Annotations
+
+exports
+  sorts
+    InterfaceDec
+    InterfaceDecHead
+    ExtendsInterfaces
+    InterfaceMemberDec
+    InterfaceMod
+
+  context-free syntax
+    AnnoDec -> InterfaceDec
+
+    InterfaceDecHead "{" InterfaceMemberDec* "}" -> InterfaceDec {cons("InterfaceDec")}
+
+    (Anno | InterfaceMod)* "interface" Id TypeParams? ExtendsInterfaces? -> InterfaceDecHead {cons("InterfaceDecHead")}
+    "extends" {InterfaceType ","}+ -> ExtendsInterfaces {cons("ExtendsInterfaces")}
+
+  context-free syntax
+    ConstantDec       -> InterfaceMemberDec
+    AbstractMethodDec -> InterfaceMemberDec
+    ClassDec          -> InterfaceMemberDec
+    InterfaceDec      -> InterfaceMemberDec
+    ";"               -> InterfaceMemberDec {cons("Semicolon")}
+
+  context-free syntax
+    Public         -> InterfaceMod
+    Protected      -> InterfaceMod
+    Private        -> InterfaceMod
+    Abstract       -> InterfaceMod
+    Static         -> InterfaceMod
+    StrictFP       -> InterfaceMod
+
+
+
+
+module languages/java-15/classes/EnumDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/classes/ClassDeclarations
+
+exports
+  sorts
+    EnumDec
+    EnumDecHead
+    EnumBody
+    EnumConst
+    EnumConstArgs
+    EnumBodyDecs
+
+  context-free syntax
+    EnumDecHead EnumBody -> EnumDec {cons("EnumDec")}
+
+    (Anno | ClassMod)* "enum" Id Interfaces? -> EnumDecHead {cons("EnumDecHead")}
+
+    "{" {EnumConst ","}*     EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+    "{" {EnumConst ","}* "," EnumBodyDecs? "}" -> EnumBody {cons("EnumBody")}
+
+    Id EnumConstArgs? ClassBody?  -> EnumConst {cons("EnumConst")}
+    "(" {Expr ","}* ")"  -> EnumConstArgs {bracket}
+
+    ";" ClassBodyDec* -> EnumBodyDecs {cons("EnumBodyDecs")}
+
+module languages/java-15/classes/ConstructorDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    ConstrDec
+    ConstrBody
+    ConstrHead
+    ConstrInv
+
+  context-free syntax
+    ConstrHead ConstrBody ->  ConstrDec {cons("ConstrDec")}
+    (Anno | ConstrMod)* TypeParams? Id "(" {FormalParam ","}* ")" Throws? -> ConstrHead {cons("ConstrDecHead")}
+
+
+    "{" ConstrInv? BlockStm* "}" -> ConstrBody {cons("ConstrBody")}
+
+             TypeArgs? "this"  "(" {Expr ","}* ")" ";" -> ConstrInv {cons("AltConstrInv")}
+             TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("SuperConstrInv")}
+    Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" -> ConstrInv {cons("QSuperConstrInv")}
+
+  sorts ConstrMod
+  context-free syntax  
+    Public    -> ConstrMod
+    Protected -> ConstrMod
+    Private   -> ConstrMod
+
+
+
+
+module languages/java-15/classes/StaticInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    StaticInit
+
+  context-free syntax
+    "static" Block -> StaticInit   {cons("StaticInit")}
+
+module languages/java-15/classes/InstanceInitializers
+imports
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    InstanceInit
+
+  context-free syntax
+    Block -> InstanceInit {cons("InstanceInit")}
+
+module languages/java-15/statements/Statements
+imports
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Blocks
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Stm
+
+  context-free syntax
+    Block      -> Stm
+
+  %%%
+   %% Section 14.6: The Empty Statement
+   %%%
+  context-free syntax
+    ";"        -> Stm {cons("Empty")}
+
+  %%%
+   %% Section 14.7: Labeled Statements
+   %%%
+  context-free syntax
+    Id ":" Stm -> Stm {cons("Labeled")}
+
+  %%%
+   %% Section 14.8: Expressions Statements
+   %%%
+  context-free syntax
+    Expr ";"   -> Stm {cons("ExprStm")}
+
+  %%%
+   %% Section 14.9: The If Statement
+   %%%
+  context-free syntax
+    "if" "(" Expr ")" Stm             -> Stm {prefer, cons("If")}
+    "if" "(" Expr ")" Stm  "else" Stm -> Stm {cons("If")}
+
+  %%%
+   %% Section 14.10: The Assert Statement
+   %%%
+  context-free syntax
+    "assert" Expr          ";" -> Stm  {cons("AssertStm")}
+    "assert" Expr ":" Expr ";" -> Stm  {cons("AssertStm")}
+
+
+  %%%
+   %% Section 14.11: The Switch Statement
+   %%%
+  sorts SwitchBlock SwitchGroup SwitchLabel
+  context-free syntax
+    "switch" "(" Expr ")" SwitchBlock -> Stm {cons("Switch")}
+    "{" SwitchGroup* SwitchLabel* "}" -> SwitchBlock {cons("SwitchBlock")}
+    SwitchLabel+ BlockStm+ -> SwitchGroup  {cons("SwitchGroup")}
+
+    "case" Expr ":" -> SwitchLabel {cons("Case")}
+    "default"   ":" -> SwitchLabel {cons("Default")}
+
+  %%%
+   %% Section 14.12: The While Statement
+   %%%
+  context-free syntax
+    "while" "(" Expr ")" Stm -> Stm {cons("While")}
+
+  %%%
+   %% Section 14.13: The Do Statement
+   %%%
+  context-free syntax
+  "do" Stm "while" "(" Expr ")" ";" -> Stm {cons("DoWhile")}
+
+
+  %%%
+   %% Section 14.14: The For Statement
+   %%%
+  context-free syntax
+    "for" "(" LocalVarDec ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+    "for" "(" {Expr ","}* ";" Expr? ";" {Expr ","}* ")" Stm -> Stm {cons("For")}
+
+    "for" "(" FormalParam ":" Expr ")" Stm -> Stm {cons("ForEach")}
+
+  %%%
+   %% Section 14.15: The Break Statement
+   %%%
+  context-free syntax
+    "break"    Id? ";"   -> Stm {cons("Break")}
+
+  %%%
+   %% Section 14.16: The Continue Statement
+   %%%
+  context-free syntax
+    "continue" Id? ";"   -> Stm {cons("Continue")}
+
+  %%%
+   %% Section 14.17: The Return Statement
+   %%%
+  context-free syntax
+    "return"   Expr? ";" -> Stm {cons("Return")}
+
+  %%%
+   %% Section 14.18: The Throw Statement
+   %%%
+  context-free syntax
+    "throw"    Expr  ";" -> Stm {cons("Throw")}
+
+  %%%
+   %% Section 14.19: The Synchronized Statement
+   %%%
+  context-free syntax
+    "synchronized" "(" Expr ")" Block -> Stm {cons("Synchronized")}
+
+  %%%
+   %% Section 14.20: The Try Statement
+   %%%
+  sorts CatchClause
+  context-free syntax
+    "try" Block CatchClause+ -> Stm {cons("Try")}
+    "try" Block CatchClause* "finally" Block -> Stm {cons("Try")}
+    "catch" "(" FormalParam ")" Block -> CatchClause {cons("Catch")}
+
+module languages/java-15/statements/LocalVariableDeclarations
+imports
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts
+    LocalVarDecStm
+    LocalVarDec
+
+  context-free syntax
+    LocalVarDec ";" -> LocalVarDecStm {prefer, cons("LocalVarDecStm")}
+    (Anno | VarMod)* Type {VarDec ","}+ -> LocalVarDec {prefer, cons("LocalVarDec")}
+
+module languages/java-15/statements/Blocks
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/statements/LocalVariableDeclarations
+  languages/java-15/statements/Statements
+
+exports
+  sorts
+    BlockStm
+    Block
+
+  context-free syntax
+    "{" BlockStm* "}" -> Block {cons("Block")}
+
+    LocalVarDecStm  -> BlockStm 
+    ClassDec        -> BlockStm {cons("ClassDecStm")}
+    Stm             -> BlockStm
+
+
+
+
+module languages/java-15/classes/MethodDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/interfaces/Annotations
+  languages/java-15/statements/Blocks
+
+exports
+  sorts
+    MethodDec
+    MethodDecHead
+    ResultType
+
+  context-free syntax
+    MethodDecHead MethodBody -> MethodDec {cons("MethodDec")}
+
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws?      -> MethodDecHead {cons("MethodDecHead")}
+    (Anno | MethodMod)* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? -> MethodDecHead {cons("DeprMethodDecHead")}
+
+    Type   -> ResultType
+    "void" -> ResultType {cons("Void")}
+
+  sorts FormalParam
+  context-free syntax
+    (Anno | VarMod)* Type       VarDecId -> FormalParam {cons("Param")}
+    (Anno | VarMod)* Type "..." VarDecId -> FormalParam {cons("VarArityParam")}
+
+  sorts VarMod
+  context-free syntax
+    Final -> VarMod
+
+  sorts MethodMod
+  context-free syntax
+    Public         -> MethodMod
+    Protected      -> MethodMod
+    Private        -> MethodMod
+
+    Abstract       -> MethodMod
+    Static         -> MethodMod
+    Final          -> MethodMod
+    Synchronized   -> MethodMod
+    Native         -> MethodMod
+    StrictFP       -> MethodMod
+
+  %%%
+   %% Section 8.4.6: Method Throws
+   %%%
+  sorts
+    Throws
+    ExceptionType
+
+  context-free syntax
+    "throws" {ExceptionType ","}+ -> Throws {cons("ThrowsDec")}
+    ClassType -> ExceptionType
+    %% TypeVar -> ExceptionType
+
+  %%%
+   %% Section 8.4.7: Method Body
+   %%% 
+  sorts MethodBody
+  context-free syntax
+    Block -> MethodBody
+    ";"   -> MethodBody {cons("NoMethodBody")}
+
+module languages/java-15/arrays/ArrayInitializers
+imports
+  languages/java-15/classes/FieldDeclarations
+
+exports
+  sorts ArrayInit
+  context-free syntax
+    "{" {VarInit ","}*     "}" -> ArrayInit {cons("ArrayInit")}
+    "{" {VarInit ","}* "," "}" -> ArrayInit {cons("ArrayInit")}
+
+module languages/java-15/interfaces/Annotations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    Anno
+    ElemVal
+    ElemValPair
+
+  context-free syntax
+    "@" TypeName "(" {ElemValPair ","}* ")" -> Anno {cons("Anno")}
+    "@" TypeName "(" ElemVal ")"            -> Anno {cons("SingleElemAnno")}
+    "@" TypeName                            -> Anno {cons("MarkerAnno")}
+
+  context-free syntax  
+    Id "=" ElemVal -> ElemValPair {cons("ElemValPair")}
+
+    Expr -> ElemVal
+    Anno -> ElemVal
+
+    "{" {ElemVal ","}*     "}" -> ElemVal {cons("ElemValArrayInit")}
+    "{" {ElemVal ","}* "," "}" -> ElemVal {cons("ElemValArrayInit")}
+
+    %% Assignments are not allowed as element values.
+    LHS "=" Expr -> ElemVal {reject}
+
+module languages/java-15/classes/FieldDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/Main
+  languages/java-15/interfaces/Annotations
+  languages/java-15/arrays/ArrayInitializers
+  languages/java-15/expressions/Main
+
+exports
+  sorts
+    FieldDec
+    VarDec
+    VarDecId
+    Dim
+    VarInit
+
+  context-free syntax
+    (Anno | FieldMod)* Type { VarDec ","}+ ";" -> FieldDec {cons("FieldDec")}
+
+    VarDecId             -> VarDec {cons("VarDec")}
+    VarDecId "=" VarInit -> VarDec {cons("VarDec")}
+
+    Id      -> VarDecId
+    Id Dim+ -> VarDecId {cons("ArrayVarDecId")}
+
+    "[" "]" -> Dim {cons("Dim")}
+
+    Expr      -> VarInit
+    ArrayInit -> VarInit
+
+  sorts FieldMod
+  context-free syntax
+    Public    -> FieldMod
+    Protected -> FieldMod
+    Private   -> FieldMod
+
+    Static    -> FieldMod
+    Final     -> FieldMod
+    Transient -> FieldMod
+    Volatile  -> FieldMod
+
+
+
+
+module languages/java-15/classes/ClassDeclarations
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Modifiers
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/classes/FieldDeclarations
+  languages/java-15/classes/MethodDeclarations
+  languages/java-15/classes/InstanceInitializers
+  languages/java-15/classes/StaticInitializers
+  languages/java-15/classes/ConstructorDeclarations
+  languages/java-15/classes/EnumDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    ClassDec
+    ClassBody
+    ClassDecHead
+
+  context-free syntax
+    EnumDec -> ClassDec
+
+    ClassDecHead ClassBody -> ClassDec {cons("ClassDec")}
+    "{" ClassBodyDec* "}" -> ClassBody {cons("ClassBody")}
+
+    (Anno | ClassMod)* "class" Id  TypeParams? Super? Interfaces? -> ClassDecHead {cons("ClassDecHead")}
+
+  %% 8.1.1: Class Modifiers
+  sorts ClassMod
+  context-free syntax
+    Abstract  -> ClassMod
+    Public    -> ClassMod
+    Protected -> ClassMod
+    Private   -> ClassMod
+    Static    -> ClassMod
+    Final     -> ClassMod
+    StrictFP  -> ClassMod
+
+  %% 8.1.4: Superclasses and Subclasses
+  sorts Super
+  context-free syntax
+
+    "extends" ClassType -> Super {cons("SuperDec")}
+
+  %% 8.1.5: Superinterfaces
+  sorts Interfaces
+  context-free syntax
+    "implements" {InterfaceType ","}+ -> Interfaces {cons("ImplementsDec")}
+
+
+  %% 8.1.6: Class Body and Member Declarations
+  sorts
+    ClassBodyDec
+    ClassMemberDec
+
+  context-free syntax
+    ClassMemberDec -> ClassBodyDec
+    InstanceInit   -> ClassBodyDec
+    StaticInit     -> ClassBodyDec
+    ConstrDec      -> ClassBodyDec
+
+  context-free syntax
+    FieldDec     -> ClassMemberDec
+    MethodDec    -> ClassMemberDec
+    ClassDec     -> ClassMemberDec
+    InterfaceDec -> ClassMemberDec
+    ";"          -> ClassMemberDec {cons("Semicolon")}
+
+module languages/java-15/packages/TypeDeclarations
+imports
+  languages/java-15/classes/ClassDeclarations
+  languages/java-15/interfaces/InterfaceDeclarations
+
+exports
+  sorts
+    TypeDec
+
+  context-free syntax
+    ClassDec      -> TypeDec
+    InterfaceDec  -> TypeDec
+    ";"           -> TypeDec {cons("Semicolon")}
+
+module languages/java-15/packages/CompilationUnits
+imports
+  languages/java-15/packages/PackageDeclarations
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/TypeDeclarations
+
+exports
+  sorts
+    CompilationUnit
+
+  context-free syntax
+    PackageDec? ImportDec* TypeDec+ -> CompilationUnit   {cons("CompilationUnit")}
+
+module languages/java-15/packages/Main
+imports
+  languages/java-15/packages/CompilationUnits
+  languages/java-15/packages/ImportDeclarations
+  languages/java-15/packages/PackageDeclarations
+
+
+
+
+module languages/java-15/names/Main
+imports
+  languages/java-15/lexical/Identifiers
+exports
+  sorts PackageName
+  context-free syntax
+    {Id "."}+ -> PackageName {cons("PackageName")}
+
+  sorts
+    TypeName
+    ExprName
+    MethodName
+    PackageOrTypeName
+    AmbName
+
+  context-free syntax
+    Id             -> AmbName {cons("AmbName")}
+    AmbName "." Id -> AmbName {cons("AmbName")}
+
+    Id                       -> TypeName {cons("TypeName")}
+    PackageOrTypeName "." Id -> TypeName {cons("TypeName")}
+
+    Id             -> ExprName {cons("ExprName")}
+    AmbName "." Id -> ExprName {cons("ExprName")}
+
+    Id             -> MethodName  {cons("MethodName")}
+    AmbName "." Id -> MethodName  {cons("MethodName")}
+
+    Id                       -> PackageOrTypeName {cons("PackageOrTypeName")}
+    PackageOrTypeName "." Id -> PackageOrTypeName {cons("PackageOrTypeName")}
+
+module languages/java-15/types/ParameterizedTypes
+imports
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeArgs
+    ActualTypeArg
+    WildcardBound
+    
+  context-free syntax
+    "<" {ActualTypeArg ","}+ ">" -> TypeArgs {cons("TypeArgs")}
+
+    Type               -> ActualTypeArg
+    "?" WildcardBound? -> ActualTypeArg {cons("Wildcard")}
+
+    "extends" RefType -> WildcardBound {cons("WildcardUpperBound")}
+    "super"   RefType -> WildcardBound {cons("WildcardLowerBound")}
+
+module languages/java-15/types/TypeVariables
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/types/ReferenceTypes
+
+exports
+  sorts
+    TypeParams
+    TypeParam
+    TypeBound
+    TypeVarId
+  
+  context-free syntax
+    TypeVarId TypeBound? -> TypeParam {cons("TypeParam")}
+    
+    "extends" {ClassOrInterfaceType "&"}+ -> TypeBound {cons("TypeBound")}
+    "<" {TypeParam ","}+ ">" -> TypeParams {cons("TypeParams")}
+
+    Id -> TypeVarId
+    
+
+
+
+module languages/java-15/types/ReferenceTypes
+imports
+  languages/java-15/lexical/Identifiers
+  languages/java-15/names/Main
+  languages/java-15/types/Main  
+  languages/java-15/types/ParameterizedTypes
+  languages/java-15/types/TypeVariables
+
+
+exports
+  sorts
+    RefType
+    ClassOrInterfaceType
+    ClassType
+    InterfaceType
+    TypeDecSpec
+    ArrayType
+    TypeVar
+
+  context-free syntax
+    ClassOrInterfaceType -> RefType
+    ArrayType            -> RefType
+    
+    %% This production rule is highly ambiguous, since every
+    %% TypeVar can be a ClassOrInterfaceType. A later disambiguation
+    %% phase has to find out if a ClassOrInterfaceType is in fact
+    %% a TypeVar.
+    
+    %% TypeVar -> RefType {avoid}
+
+  context-free syntax
+  
+    %% ClassType and InterfaceType are ambiguous. We modify the
+    %% production of ClassOrInterfaceType to make this ambiguity explicit.
+    
+    TypeDecSpec TypeArgs? -> ClassOrInterfaceType {cons("ClassOrInterfaceType")}
+    TypeDecSpec TypeArgs? -> ClassType {cons("ClassType")}
+    TypeDecSpec TypeArgs? -> InterfaceType {cons("InterfaceType")}
+
+    TypeName -> TypeDecSpec
+    TypeDecSpec TypeArgs "." Id -> TypeDecSpec {cons("Member")}
+    
+  context-free syntax    
+    TypeVarId -> TypeVar {cons("TypeVar")}
+
+  context-free syntax
+    Type "[" "]" -> ArrayType  {cons("ArrayType")}
+
+module languages/java-15/types/PrimitiveTypes
+exports
+  sorts
+    PrimType
+    NumType
+    IntType  
+    FloatType
+
+  context-free syntax
+    NumType   -> PrimType
+    "boolean" -> PrimType {cons("Boolean")}
+
+    IntType   -> NumType
+    FloatType -> NumType
+
+    "byte"   -> IntType   {cons("Byte")}
+    "short"  -> IntType   {cons("Short")}
+    "int"    -> IntType   {cons("Int")}
+    "long"   -> IntType   {cons("Long")}
+    "char"   -> IntType   {cons("Char")}
+    "float"  -> FloatType {cons("Float")}
+    "double" -> FloatType {cons("Double")}
+
+module languages/java-15/types/Main
+imports
+  languages/java-15/types/PrimitiveTypes
+  languages/java-15/types/ReferenceTypes
+  languages/java-15/types/TypeVariables
+  languages/java-15/types/ParameterizedTypes
+
+exports
+  sorts
+    Type
+
+  context-free syntax
+    PrimType -> Type
+    RefType  -> Type
+
+
+
+
+module languages/java-15/lexical/literals/NullLiteral
+exports
+  sorts NullLiteral
+  context-free syntax
+    "null"  -> NullLiteral {cons("Null")}
+
+module languages/java-15/lexical/literals/StringLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    StringLiteral
+    StringPart
+    StringChars
+    FooStringChars
+
+  syntax
+    StringLiteral -> <StringLiteral-CF>
+    
+    "\"" StringPart* "\"" -> StringLiteral {cons("String")}
+    StringChars    -> StringPart {cons("Chars")}
+    UnicodeEscape  -> StringPart
+    EscapeSeq      -> StringPart
+
+    <FooStringChars-LEX> -> StringChars
+    ~[\"\\\n\13]+  -> <FooStringChars-LEX>
+
+  restrictions
+    StringChars -/- ~[\"\\\n\13]
+
+module languages/java-15/lexical/literals/EscapeSequences
+imports
+
+exports
+  sorts
+    EscapeSeq
+    NamedEscape
+    OctaEscape
+    LastOcta
+
+  syntax
+    OctaEscape  -> EscapeSeq
+    NamedEscape -> EscapeSeq
+
+    "\\" [btnfr\"\'\\]     -> NamedEscape {cons("NamedEscape")}
+    "\\" LastOcta          -> OctaEscape  {cons("OctaEscape1")}
+    "\\" [0-3] LastOcta    -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [4-7] [0-7]       -> OctaEscape  {cons("OctaEscape2")}
+    "\\" [0-3] [0-7] [0-7] -> OctaEscape  {cons("OctaEscape3")}
+
+    [0-7] -> LastOcta
+
+  restrictions
+    LastOcta -/- [0-7]
+
+module languages/java-15/lexical/literals/CharacterLiterals
+imports
+  languages/java-15/lexical/literals/EscapeSequences
+  languages/java-15/lexical/UnicodeEscapes
+
+exports
+  sorts
+    CharLiteral
+    CharContent
+    SingleChar
+
+  syntax
+    CharLiteral   -> <CharLiteral-CF>
+
+    "'" CharContent "'" -> CharLiteral {cons("Char")}
+    SingleChar    -> CharContent {cons("Single")}
+    UnicodeEscape -> CharContent
+    EscapeSeq     -> CharContent
+
+    ~[\r\n\'\\] -> SingleChar
+
+
+
+
+module languages/java-15/lexical/literals/BooleanLiterals
+exports
+  sorts
+    Bool
+    BoolLiteral
+
+  context-free syntax
+    Bool -> BoolLiteral {cons("Bool")}
+    "true"  -> Bool {cons("True")}
+    "false" -> Bool {cons("False")}
+
+module languages/java-15/lexical/literals/FloatingPointLiterals
+exports
+  sorts
+    FloatLiteral
+    DeciFloatLiteral
+    HexaFloatLiteral      
+  
+  context-free syntax
+    DeciFloatLiteral -> FloatLiteral {cons("Float")}
+    HexaFloatLiteral -> FloatLiteral {cons("Float")}
+
+  lexical syntax
+    DeciFloatNumeral [fFdD]? -> DeciFloatLiteral
+    HexaFloatNumeral [fFdD]? -> HexaFloatLiteral
+    
+    %% Reject plain integer literals as decimal float literals.
+    %% A similar rejection for hexadecimal float literals is not
+    %% required, since these always contain an exponent part.
+    [0-9]+ -> DeciFloatLiteral {reject}
+
+  lexical restrictions
+    DeciFloatLiteral -/- [fFdD]
+    HexaFloatLiteral -/- [fFdD]
+
+  %%%
+   %% Decimal Floating Point Numerals
+   %%%
+  sorts
+    DeciFloatNumeral
+    DeciFloatDigits
+    DeciFloatExponentPart
+
+  lexical syntax
+    DeciFloatDigits DeciFloatExponentPart? -> DeciFloatNumeral
+
+    [0-9]* "." [0-9]* -> DeciFloatDigits
+           "."        -> DeciFloatDigits {reject}
+    [0-9]+            -> DeciFloatDigits
+
+    [eE] SignedInteger -> DeciFloatExponentPart
+    
+    [\+\-]? [0-9]+ -> SignedInteger    
+
+  lexical restrictions
+    DeciFloatDigits  -/- [0-9]
+    DeciFloatExponentPart -/- [0-9]
+
+  %%%
+   %% Hexadecimal Floating Point Literals
+   %%%
+  sorts
+    HexaFloatNumeral
+    HexaSignificand
+    BinaryExponent
+    SignedInteger
+    
+  lexical syntax
+    HexaSignificand BinaryExponent -> HexaFloatNumeral
+
+    [0][xX] [0-9a-fA-F]+                  -> HexaSignificand
+    [0][xX] [0-9a-fA-F]* "." [0-9a-fA-F]* -> HexaSignificand
+    [0][xX]              "."              -> HexaSignificand {reject}
+
+    [pP] SignedInteger -> BinaryExponent
+  lexical restrictions
+    HexaSignificand -/- [0-9a-fA-F]
+    SignedInteger   -/- [0-9]
+
+module languages/java-15/lexical/literals/IntegerLiterals
+exports
+  sorts
+    IntLiteral
+    DeciLiteral
+    HexaLiteral
+    OctaLiteral
+    DeciNumeral
+    HexaNumeral
+    OctaNumeral
+
+  context-free syntax
+    DeciLiteral -> IntLiteral {cons("Deci")}
+    HexaLiteral -> IntLiteral {cons("Hexa")}
+    OctaLiteral -> IntLiteral {cons("Octa")}
+
+  lexical syntax
+    DeciNumeral [lL]? -> DeciLiteral
+    HexaNumeral [lL]? -> HexaLiteral
+    OctaNumeral [lL]? -> OctaLiteral
+
+    "0" -> DeciNumeral
+    [1-9][0-9]*  -> DeciNumeral
+    [0][xX] [0-9a-fA-F]+ -> HexaNumeral
+    [0]     [0-7]+       -> OctaNumeral
+
+  lexical restrictions
+    DeciNumeral -/- [0-9\.fFdD]
+    HexaNumeral -/- [0-9a-fA-F]
+    OctaNumeral -/- [0-7]
+
+    DeciLiteral -/- [lL]
+    HexaLiteral -/- [lL]
+    OctaLiteral -/- [lL]
+
+module languages/java-15/lexical/literals/Main
+imports
+  languages/java-15/lexical/literals/IntegerLiterals
+  languages/java-15/lexical/literals/FloatingPointLiterals
+  languages/java-15/lexical/literals/BooleanLiterals  
+  languages/java-15/lexical/literals/CharacterLiterals  
+  languages/java-15/lexical/literals/StringLiterals
+  languages/java-15/lexical/literals/NullLiteral
+
+
+
+
+module languages/java-15/lexical/Modifiers
+exports
+  sorts
+    Public
+    Private
+    Protected
+    Abstract
+    Final
+    Static
+    Native
+    Transient
+    Volatile
+    Synchronized
+    StrictFP
+    Modifier
+
+  context-free syntax
+    "public"       -> Public       {cons("Public")}
+    "private"      -> Private      {cons("Private")}
+    "protected"    -> Protected    {cons("Protected")}
+
+    "abstract"     -> Abstract     {cons("Abstract")}
+    "final"        -> Final        {cons("Final")}
+    "static"       -> Static       {cons("Static")}
+    "native"       -> Native       {cons("Native")}
+    "transient"    -> Transient    {cons("Transient")}
+    "volatile"     -> Volatile     {cons("Volatile")}
+    "synchronized" -> Synchronized {cons("Synchronized")}
+    "strictfp"     -> StrictFP     {cons("StrictFP")}
+
+    Public       -> Modifier
+    Private      -> Modifier
+    Protected    -> Modifier
+    Abstract     -> Modifier
+    Final        -> Modifier
+    Static       -> Modifier
+    Native       -> Modifier
+    Transient    -> Modifier
+    Volatile     -> Modifier
+    Synchronized -> Modifier
+    StrictFP     -> Modifier
+
+
+
+
+module languages/java-15/lexical/Keywords
+exports
+  sorts Keyword
+  lexical syntax
+    "abstract"      -> Keyword
+    "assert"        -> Keyword
+    "boolean"       -> Keyword
+    "break"         -> Keyword
+    "byte"          -> Keyword
+    "case"          -> Keyword
+    "catch"         -> Keyword
+    "char"          -> Keyword
+    "class"         -> Keyword
+    "const"         -> Keyword
+    "continue"      -> Keyword
+    "default"       -> Keyword
+    "do"            -> Keyword
+    "double"        -> Keyword
+    "else"          -> Keyword
+    "enum"          -> Keyword
+    "extends"       -> Keyword
+    "final"         -> Keyword
+    "finally"       -> Keyword
+    "float"         -> Keyword
+    "for"           -> Keyword
+    "goto"          -> Keyword
+    "if"            -> Keyword
+    "implements"    -> Keyword
+    "import"        -> Keyword
+    "instanceof"    -> Keyword
+    "int"           -> Keyword
+    "interface"     -> Keyword
+    "long"          -> Keyword
+    "native"        -> Keyword
+    "new"           -> Keyword
+    "package"       -> Keyword
+    "private"       -> Keyword
+    "protected"     -> Keyword
+    "public"        -> Keyword
+    "return"        -> Keyword
+    "short"         -> Keyword
+    "static"        -> Keyword
+    "strictfp"      -> Keyword
+    "super"         -> Keyword
+    "switch"        -> Keyword
+    "synchronized"  -> Keyword
+    "this"          -> Keyword
+    "throw"         -> Keyword
+    "throws"        -> Keyword
+    "transient"     -> Keyword
+    "try"           -> Keyword
+    "void"          -> Keyword
+    "volatile"      -> Keyword
+    "while"         -> Keyword
+
+  lexical restrictions
+
+    "abstract"
+    "assert"
+    "boolean" 
+    "break"   
+    "byte"    
+    "case"    
+    "catch"   
+    "char"     
+    "class"
+    "const"    
+    "continue" 
+    "default"  
+    "do"       
+    "double"   
+    "else"     
+    "enum"
+    "extends"  
+    "final"     
+    "finally"   
+    "float"     
+    "for"       
+    "goto"       
+    "if"         
+    "implements" 
+    "import"     
+    "instanceof" 
+    "int"        
+    "interface"  
+    "long"       
+    "native"     
+    "new"        
+    "package"    
+    "private"    
+    "protected"   
+    "public"       
+    "return"       
+    "short"        
+    "static"     
+    "strictfp"
+    "super"        
+    "switch"       
+    "synchronized" 
+    "this"         
+    "throw"        
+    "throws"       
+    "transient"    
+    "try"          
+    "void"         
+    "volatile"     
+    "while"       -/- [A-Za-z0-9\_\$]
+
+module languages/java-15/lexical/Identifiers
+imports
+  languages/java-15/lexical/Keywords
+exports
+  sorts
+    Id
+    ID
+
+  context-free syntax
+    ID -> Id {cons("Id")}
+
+  lexical syntax
+    [A-Za-z\_\$][A-Za-z0-9\_\$]* -> ID
+    
+    Keyword -> ID {reject}
+    "true"  -> ID {reject}
+    "false" -> ID {reject}
+    "null"  -> ID {reject}
+
+  lexical restrictions
+    ID -/- [a-zA-Z0-9\_\$]
+
+module languages/java-15/lexical/Comments
+imports
+  languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    Comment
+    EOLCommentChars
+    CommentPart
+    UnicodeEscape
+    BlockCommentChars
+    Asterisk
+    EscEscChar
+    EscChar
+
+  lexical syntax
+    Comment -> LAYOUT
+
+    "//" EOLCommentChars LineTerminator -> Comment
+    ~[\n\r]* -> EOLCommentChars
+
+    "/*"  CommentPart* "*/" -> Comment
+    "/**" CommentPart* "*/" -> Comment
+    "/**/"                  -> Comment %% Strange javadoc comment
+
+    BlockCommentChars -> CommentPart
+    EscChar           -> CommentPart
+    EscEscChar        -> CommentPart
+    Asterisk          -> CommentPart
+    UnicodeEscape     -> CommentPart
+
+    ~[\*\\]+ -> BlockCommentChars
+
+    "*"    -> Asterisk
+    "\\\\" -> EscEscChar
+    "\\"   -> EscChar
+
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape
+
+  lexical restrictions
+    "/**"    -/- [\/]
+    "/*"     -/- [\*]
+    Asterisk -/- [\/]
+    EscChar  -/- [\\u]
+
+    BlockCommentChars -/- ~[\*\\]
+    EOLCommentChars   -/- ~[\n\13]
+
+  context-free restrictions
+    LAYOUT?  -/- [\/].[\*]
+    LAYOUT?  -/- [\/].[\/]
+
+module languages/java-15/lexical/WhiteSpace
+exports
+  lexical syntax
+    [\ \t\12\r\n] -> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\12\n\r]
+
+module languages/java-15/lexical/LineTerminators
+exports
+  sorts
+    LineTerminator CarriageReturn EndOfFile
+
+  lexical syntax
+    [\n]           -> LineTerminator
+    [\r][\n]       -> LineTerminator
+    CarriageReturn -> LineTerminator
+    EndOfFile      -> LineTerminator
+
+    [\r] -> CarriageReturn
+
+  lexical restrictions
+    CarriageReturn -/- [\n]
+
+  %% End of file is empty.
+  lexical syntax    
+    -> EndOfFile
+
+  lexical restrictions
+    EndOfFile -/- ~[]
+
+module languages/java-15/lexical/UnicodeEscapes
+exports
+  sorts
+    UnicodeEscape
+
+  syntax
+    "\\" [u]+ [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] -> UnicodeEscape {cons("UnicodeEscape")}
+
+module languages/java-15/lexical/Main
+imports
+  languages/java-15/lexical/UnicodeEscapes
+  languages/java-15/lexical/LineTerminators
+  languages/java-15/lexical/WhiteSpace
+  languages/java-15/lexical/Comments
+  languages/java-15/lexical/Identifiers
+  languages/java-15/lexical/Keywords
+  languages/java-15/lexical/Modifiers
+  languages/java-15/lexical/literals/Main
+
+
+
+module languages/java-15/Main
+imports
+  languages/java-15/lexical/Main
+  languages/java-15/types/Main
+  languages/java-15/names/Main
+  languages/java-15/packages/Main
+  languages/java-15/classes/Main
+  languages/java-15/interfaces/Main
+  languages/java-15/arrays/Main
+  languages/java-15/statements/Main
+  languages/java-15/expressions/Main
+
+
+
+
+module languages/java/EmbeddedJava[E]
+imports
+  languages/java-15/Main
+
+exports
+  variables
+    [ij]  [0-9\']*            -> DeciLiteral {prefer}
+    [ij]  [\_] [a-zA-Z0-9\']* -> DeciLiteral {prefer}
+    [xyz] [0-9\']*            -> ID          {prefer}
+    [xyz] [\_] [a-zA-Z0-9\']* -> ID          {prefer}
+
+  context-free restrictions
+    ID -/- [\_a-zA-Z0-9\']
+
+%%%
+ %% Expressions
+ %%%
+exports
+
+  %%%
+   %% Variables for Expressions
+   %%%
+  variables
+    "e"    [0-9\']*         -> Expr           {prefer}
+    "e_" [a-zA-Z0-9\']*     -> Expr           {prefer}
+    "e"    [0-9\']* "*"     -> {VarInit ","}* {prefer}
+    "e_" [a-zA-Z0-9\']* "*" -> {VarInit ","}* {prefer}
+    "e"    [0-9\']* "*"     -> {Expr ","}*    {prefer}
+    "e_" [a-zA-Z0-9\']* "*" -> {Expr ","}*    {prefer}
+
+  lexical syntax
+    "e" [0-9\']*            -> ID {reject}
+    "e_" [a-zA-Z0-9\']*     -> ID {reject}
+
+  %%%
+   %% Quotations for Expressions
+   %%%
+  context-free syntax
+            "e" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+    "java:expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+         "expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+    "java"      "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+                "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+
+    "var-init" "|[" VarInit "]|" -> E {cons("ToMetaExpr")}
+
+%%%
+ %% Statements
+ %%%
+exports
+
+  %%%
+   %% Variables for Statements
+   %%%
+  variables
+    "stm"  [0-9\']*             -> Stm         {prefer}
+    "stm_" [a-zA-Z0-9\']*       -> Stm         {prefer}
+    "bstm" [0-9\']*             -> BlockStm    {prefer}
+    "bstm_" [a-zA-Z0-9\']*      -> BlockStm    {prefer}
+    "bstm" [0-9\']* "*"         -> BlockStm*   {prefer}    
+    "bstm_" [a-zA-Z0-9\']* "*"  -> BlockStm*   {prefer}
+
+  %%%
+   %% Quotations for Statements
+   %%%
+  context-free syntax
+    "java:bstm"  "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+         "bstm"  "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+    "java"       "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+                 "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+
+    "java:bstm*" "|[" BlockStm* "]|" -> E {cons("ToMetaListExpr")}
+         "bstm*" "|[" BlockStm* "]|" -> E {cons("ToMetaListExpr")}
+
+    "java:block-stm"  "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+         "block-stm"  "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+    "java"            "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+                      "|[" BlockStm "]|" -> E {cons("ToMetaExpr")}
+
+    "java:block-stm*" "|[" BlockStm* "]|" -> E {cons("ToMetaListExpr")}
+         "block-stm*" "|[" BlockStm* "]|" -> E {cons("ToMetaListExpr")}
+
+
+    "java:stm"  "|[" Stm "]|" -> E {cons("ToMetaExpr")}
+         "stm"  "|[" Stm "]|" -> E {cons("ToMetaExpr")}
+         
+         "switch-group" "|[" SwitchGroup "]|" -> E {cons("ToMetaListExpr")}         
+    "java:switch-group" "|[" SwitchGroup "]|" -> E {cons("ToMetaListExpr")}
+    
+  %%%
+   %% Anti Quotations for Statements
+   %%%
+  context-free syntax
+    "~"       E  -> BlockStm  {cons("FromMetaExpr")}
+    "~bstm:"  E  -> BlockStm  {cons("FromMetaExpr")}
+    "~*"      E  -> BlockStm* {cons("FromMetaExpr")}
+    "~bstm*:" E  -> BlockStm* {cons("FromMetaExpr")}
+
+    "~stm:"   E  -> Stm {cons("FromMetaExpr"), prefer}
+    "~"       E  -> Stm {cons("FromMetaExpr")}
+
+    "~*"              E -> SwitchGroup* {cons("FromMetaExpr")}    
+    "~switch-group*:" E -> SwitchGroup* {cons("FromMetaExpr")}    
+
+    "~"               E -> SwitchGroup {cons("FromMetaExpr")}
+    "~switch-group:"  E -> SwitchGroup {cons("FromMetaExpr")}
+
+%%%
+ %% Variable Declarations
+ %%%
+
+  %%%
+   %% Variables for Variable Declarations
+   %%%
+  variables
+    "lvdec" [0-9]*            -> LocalVarDec    {prefer}
+    "lvdec_" [a-zA-Z0-9]*     -> LocalVarDec    {prefer}
+     "vdec" [0-9]*            -> VarDec         {prefer}
+     "vdec_" [a-zA-Z0-9]*     -> VarDec         {prefer}
+     "vdec"  [0-9]* "*"       -> {VarDec ","}+  {prefer}
+     "vdec_" [a-zA-Z0-9]* "*" -> {VarDec ","}+  {prefer}
+
+  lexical syntax
+    "lvdec"               -> ID {reject}
+    "lvdec_" [a-zA-Z0-9]* -> ID {reject}
+     "vdec"               -> ID {reject}
+     "vdec_" [a-zA-Z0-9]* -> ID {reject}
+
+  %%%
+   %% Quotations for Local Variable Declarations
+   %%%
+  context-free syntax
+    "java:lvdec"  "|[" LocalVarDec "]|" -> E {cons("ToMetaExpr")}
+         "lvdec"  "|[" LocalVarDec "]|" -> E {cons("ToMetaExpr")}
+
+    "java:vdec" "|[" VarDec "]|" -> E {cons("ToMetaExpr")}
+         "vdec" "|[" VarDec "]|" -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti Quotations for Local Variable Declarations
+   %%%
+  context-free syntax
+
+%%%
+ %% LeftHandSide of Assignment
+ %%%
+exports
+
+  %%%
+   %% Variables for LeftHandSide of Assignment
+   %%%
+  variables
+    "lhs" [0-9\']* -> LHS {prefer}
+    "e"   [0-9\']* -> LHS {prefer}
+
+  lexical syntax
+    "lhs" [0-9\']* -> ID {reject}
+
+%%%
+ %% Types
+ %%%
+exports
+
+  %%%
+   %% Variables for Types
+   %%%
+  variables
+    MetaTypeVar     -> Type     {prefer}
+    MetaPrimTypeVar -> PrimType {prefer}
+    MetaRefTypeVar  -> RefType  {prefer}
+
+  lexical syntax
+    "t"  [0-9\']*        -> MetaTypeVar
+    "t_" [a-zA-Z0-9\']*  -> MetaTypeVar
+    "ty" [0-9]*          -> MetaTypeVar
+    "ty_" [a-zA-Z0-9\']* -> MetaTypeVar
+
+    "primt"  [0-9]*        -> MetaPrimTypeVar
+    "primt_" [a-zA-Z0-9]*  -> MetaPrimTypeVar
+    "primty" [0-9]*        -> MetaPrimTypeVar
+    "primty_" [a-zA-Z0-9]* -> MetaPrimTypeVar
+    "reft"   [0-9]*        -> MetaRefTypeVar
+    "reft_" [a-zA-Z0-9]*   -> MetaRefTypeVar
+    "refty"  [0-9]*        -> MetaRefTypeVar
+    "refty_" [a-zA-Z0-9]*  -> MetaRefTypeVar
+
+    "t"  [0-9\']*          -> ID {reject}
+    "t_" [a-zA-Z0-9]*      -> ID {reject}
+    "ty" [0-9]*            -> ID {reject}
+    "ty_" [a-zA-Z0-9]*     -> ID {reject}
+    "primt"  [0-9]*        -> ID {reject}
+    "primt_" [a-zA-Z0-9]*  -> ID  {reject}
+    "primty" [0-9]*        -> ID {reject}
+    "primty_" [a-zA-Z0-9]* -> ID {reject}
+    "reft"   [0-9]*        -> ID {reject}
+    "reft_" [a-zA-Z0-9]*   -> ID {reject}    
+    "refty"  [0-9]*        -> ID {reject}
+    "refty_" [a-zA-Z0-9]*  -> ID {reject}
+
+  lexical restrictions
+    MetaTypeVar -/- [a-zA-Z0-9\_\$\']
+
+  %%%
+   %% Quotation for Types
+   %%%
+  context-free syntax
+            "t" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+           "ty" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+
+    "java:type" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+         "type" "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+    "java"      "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+                "|[" Type "]|"   -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti-Quotation for Types
+   %%%
+  context-free syntax
+    "~"       E -> Type {cons("FromMetaExpr")}
+    "~type:"  E -> Type {cons("FromMetaExpr")}
+
+%%%
+ %% Names
+ %%%
+exports
+
+  %%%
+   %% Variables for Names
+   %%%
+  variables
+    "ambname"  [0-9]*        -> AmbName    {prefer}
+    "ambname_" [a-zA-Z0-9]*  -> AmbName    {prefer}
+    "ename"    [0-9]*        -> ExprName   {prefer}
+    "ename_" [a-zA-Z0-9]*    -> ExprName   {prefer}
+    "fname"    [0-9]*        -> MethodName {prefer}
+    "fname_" [a-zA-Z0-9]*    -> MethodName {prefer}
+    "tname"    [0-9]*        -> TypeName   {prefer}
+    "tname_" [a-zA-Z0-9]*    -> TypeName   {prefer}
+    "pkgtname" [0-9]*        -> PackageOrTypeName  {prefer}
+    "pkgtname_" [a-zA-Z0-9]* -> PackageOrTypeName  {prefer}
+    "pkgname" [0-9]*         -> PackageName  {prefer}
+    "pkgname_" [a-zA-Z0-9]*  -> PackageName  {prefer}
+
+  %%%
+   %% Quotations for Names
+   %%%
+  context-free syntax
+    "ambname"  "|[" AmbName    "]|" -> E {cons("ToMetaExpr")}
+    "ename"    "|[" ExprName   "]|" -> E {cons("ToMetaExpr")}
+    "fname"    "|[" MethodName "]|" -> E {cons("ToMetaExpr")}
+    "tname"    "|[" TypeName   "]|" -> E {cons("ToMetaExpr")}
+    "pkgtname" "|[" PackageOrTypeName "]|" -> E {cons("ToMetaExpr")}
+
+%%%
+ %% Modifiers
+ %%%
+exports
+
+  %%%
+   %% Variables for Modifiers
+   %%%
+  variables
+     "mod" [0-9]*            -> MethodMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> MethodMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | MethodMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | MethodMod)* {prefer}
+     
+     "mod" [0-9]*            -> ClassMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> ClassMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | ClassMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | ClassMod)* {prefer}
+     
+     "mod" [0-9]*            -> ConstrMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> ConstrMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | ConstrMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | ConstrMod)* {prefer}
+     
+     "mod" [0-9]*            -> VarMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> VarMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | VarMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | VarMod)* {prefer}
+
+     "mod" [0-9]*            -> FieldMod  {prefer}
+     "mod_" [a-zA-Z0-9]*     -> FieldMod  {prefer}
+     "mod" [0-9]* "*"        -> (Anno | FieldMod)* {prefer}
+     "mod_" [a-zA-Z0-9]* "*" -> (Anno | FieldMod)* {prefer}
+
+  %%%
+   %% Quotations for Modifiers
+   %%%
+  context-free syntax
+           "|[" Modifier "]|" -> E {cons("ToMetaExpr")}
+    "mod"  "|[" Modifier "]|" -> E {cons("ToMetaExpr")}
+
+    "anno" "|[" Anno "]|" -> E {cons("ToMetaExpr")}
+
+
+%%%
+ %% Formal Parameters
+ %%%
+exports
+
+  %%%
+   %% Variables for Formal Parameters
+   %%%
+  variables
+     "param" [0-9]*            -> FormalParam  {prefer}
+     "param_" [a-zA-Z0-9]*     -> FormalParam  {prefer}
+     "param" [0-9]* "*"        -> {FormalParam ","}*  {prefer}
+     "param_" [a-zA-Z0-9]* "*" -> {FormalParam ","}* {prefer}
+
+  %%%
+   %% Quotations for Formal Parameters
+   %%%
+  context-free syntax
+
+         "param"  "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+    "java:param"  "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+
+         "param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+    "java:param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+
+    "java:formal-param" "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+         "formal-param" "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+    "java"              "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+                        "|[" FormalParam "]|" -> E {cons("ToMetaExpr")}
+
+    "java:formal-param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+         "formal-param*" "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+    "java"               "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+                         "|[" {FormalParam ","}* "]|" -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti Quotations for Formal Parameters
+   %%%
+  context-free syntax
+    "~"  E  ->  FormalParam       {cons("FromMetaExpr")}
+    "~*" E  -> {FormalParam ","}* {cons("FromMetaExpr")}
+
+%%%
+ %% Package Declarations
+ %%%
+exports
+
+  %%%
+   %% Quotations
+   %%%
+  context-free syntax
+    "java:package-dec" "|[" PackageDec  "]|" -> E {cons("ToMetaExpr")}
+         "package-dec" "|[" PackageDec  "]|" -> E {cons("ToMetaExpr")}
+                       "|[" PackageDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:package-dec?" "|[" PackageDec? "]|" -> E {cons("ToMetaExpr")}
+         "package-dec?" "|[" PackageDec? "]|" -> E {cons("ToMetaExpr")}
+
+  %%%
+   %% Anti Quotations
+   %%%
+  context-free syntax
+    "~package-dec:"  E -> PackageDec {cons("FromMetaExpr")}
+    "~package-dec?:" E -> PackageDec? {cons("FromMetaExpr")}
+
+%%%
+ %% Import Declarations
+ %%%
+exports
+
+  %%%
+   %% Quotations for Import Declarations
+   %%%
+  context-free syntax
+
+    "java:import-dec"  "|[" ImportDec  "]|" -> E {cons("ToMetaExpr")}
+         "import-dec"  "|[" ImportDec  "]|" -> E {cons("ToMetaExpr")}
+                       "|[" ImportDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:import-dec*" "|[" ImportDec* "]|" -> E {cons("ToMetaListExpr")}
+         "import-dec*" "|[" ImportDec* "]|" -> E {cons("ToMetaListExpr")}
+
+  %%%
+   %% Anti Quotations for Import Declarations
+   %%%
+  context-free syntax
+
+    "~import-dec:"  E  -> ImportDec  {cons("FromMetaExpr")}
+    "~import-dec*:" E  -> ImportDec* {cons("FromMetaExpr")}
+
+%%%
+ %% Must be cleaned up
+ %%%
+exports
+  context-free syntax
+            "e" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+    "java:expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+         "expr" "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+    "java"      "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+                "|[" Expr "]|"   -> E {cons("ToMetaExpr")}
+
+    "java:compilation-unit" "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
+         "compilation-unit" "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
+    "java"                  "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
+                            "|[" CompilationUnit "]|"  -> E {cons("ToMetaExpr")}
+
+    "java:importdecl" "|[" ImportDec "]|"  -> E {cons("ToMetaExpr")}
+         "importdecl" "|[" ImportDec "]|"  -> E {cons("ToMetaExpr")}
+    "java"            "|[" ImportDec "]|"  -> E {cons("ToMetaExpr")}
+
+    "java:type-dec" "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
+         "type-dec" "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
+    "java"          "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
+                    "|[" TypeDec "]|" -> E {cons("ToMetaExpr")}
+
+    "java:class-body-dec" "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
+         "class-body-dec" "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
+    "java"                "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
+                          "|["  ClassBodyDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:interface-member-dec" "|[" InterfaceMemberDec  "]|" -> E {cons("ToMetaExpr")}
+         "interface-member-dec" "|[" InterfaceMemberDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:constant-dec" "|[" ConstantDec  "]|" -> E {cons("ToMetaExpr")}
+         "constant-dec" "|[" ConstantDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:class-body-dec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
+         "class-body-dec*" "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
+    "java"                 "|[" ClassBodyDec* "]|" -> E {cons("ToMetaExpr")}
+                           "|[" ClassBodyDec* "]|" -> E {cons("ToMetaListExpr")}
+
+    "java:stm" "|["  Stm "]|" -> E {cons("ToMetaExpr")}
+         "stm" "|["  Stm "]|" -> E {cons("ToMetaExpr")}
+
+    "java:imember-dec" "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
+         "imember-dec" "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
+    "java"             "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
+                       "|["  AbstractMethodDec  "]|" -> E {cons("ToMetaExpr")}
+
+    "java:imember-dec*" "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
+         "imember-dec*" "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
+    "java"              "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
+                        "|["  AbstractMethodDec*  "]|" -> E {cons("ToMetaExpr")}
+
+  %% Anti-quotation
+  context-free syntax
+
+    "~"      E -> Name {cons("FromMetaExpr")}
+    "~name:" E -> Name {cons("FromMetaExpr")}
+    "~*:"    E -> Name {cons("FromMetaExpr")}
+
+    "~"     E     -> Id   {cons("FromMetaExpr")}
+    "~id:"  E     -> Id   {cons("FromMetaExpr")}
+    "~idd:" E ":" -> Id   {cons("FromMetaExpr")}
+
+    "~x:" E -> ID {cons("FromMetaExpr")}
+
+    "~"  E -> TypeParam        {cons("FromMetaExpr")}
+    "~*" E -> {TypeParam ","}+ {cons("FromMetaExpr")}
+
+    "~*" E -> {ExceptionType ","}* {cons("FromMetaExpr")}
+
+    "~"      E  ->  Expr {cons("FromMetaExpr")}
+    "~e:"    E  ->  Expr {prefer, cons("FromMetaExpr")}
+    "~expr:" E  ->  Expr {prefer, cons("FromMetaExpr")}
+
+    "~*" E      -> {Expr ","}*    {cons("FromMetaExpr")}
+    "~*" E      -> {VarInit ","}* {cons("FromMetaExpr")}
+
+    "~"  E  -> TypeDec  {cons("FromMetaExpr")}
+    "~*" E  -> TypeDec* {cons("FromMetaExpr")}
+
+    "~"  E  -> ClassBodyDec  {cons("FromMetaExpr")}
+    "~*" E  -> ClassBodyDec* {cons("FromMetaExpr")}
+
+    "~"  E  -> InterfaceMemberDec  {cons("FromMetaExpr")}
+    "~*" E  -> InterfaceMemberDec* {cons("FromMetaExpr")}
+
+    "~i:"      E -> DeciLiteral   {cons("FromMetaExpr")}
+    "~deci:"   E -> DeciLiteral   {cons("FromMetaExpr")}
+    "~hexa:"   E -> HexaLiteral   {cons("FromMetaExpr")}
+    "~octa:"   E -> OctaLiteral   {cons("FromMetaExpr")}
+    "~float:"  E -> FloatLiteral  {cons("FromMetaExpr")}
+    "~string:" E -> StringLiteral {cons("FromMetaExpr")}
+    "~char:"   E -> CharLiteral   {cons("FromMetaExpr")}
+
+  syntax
+    "~" <E-CF> -> StringChars {cons("FromMetaExpr"), prefer}
+    "~" <E-CF> <LAYOUT?-CF> -> SingleChar  {cons("FromMetaExpr"), prefer}
+
+module languages/java/EmbeddedJavaMix[Ctx0 E]
+imports languages/java/EmbeddedJava[E]
+          [ Name                  => Name[[Ctx0]]
+            MetaRefTypeVar        => MetaRefTypeVar[[Ctx0]]
+            MetaPrimTypeVar       => MetaPrimTypeVar[[Ctx0]]
+            MetaTypeVar           => MetaTypeVar[[Ctx0]]
+            CompilationUnit       => CompilationUnit[[Ctx0]]
+            TypeDec               => TypeDec[[Ctx0]]
+            ImportDec             => ImportDec[[Ctx0]]
+            PackageDec            => PackageDec[[Ctx0]]
+            ElemVal               => ElemVal[[Ctx0]]
+            ElemValPair           => ElemValPair[[Ctx0]]
+            Anno                  => Anno[[Ctx0]]
+            LHS                   => LHS[[Ctx0]]
+            CondMid               => CondMid[[Ctx0]]
+            ArraySubscript        => ArraySubscript[[Ctx0]]
+            DimExpr               => DimExpr[[Ctx0]]
+            ArrayBaseType         => ArrayBaseType[[Ctx0]]
+            ArrayCreationExpr     => ArrayCreationExpr[[Ctx0]]
+            ClassMemberDec        => ClassMemberDec[[Ctx0]]
+            ClassBodyDec          => ClassBodyDec[[Ctx0]]
+            Interfaces            => Interfaces[[Ctx0]]
+            Super                 => Super[[Ctx0]]
+            ClassMod              => ClassMod[[Ctx0]]
+            ClassDecHead          => ClassDecHead[[Ctx0]]
+            ClassBody             => ClassBody[[Ctx0]]
+            ClassDec              => ClassDec[[Ctx0]]
+            InterfaceMod          => InterfaceMod[[Ctx0]]
+            InterfaceMemberDec    => InterfaceMemberDec[[Ctx0]]
+            ExtendsInterfaces     => ExtendsInterfaces[[Ctx0]]
+            InterfaceDecHead      => InterfaceDecHead[[Ctx0]]
+            InterfaceDec          => InterfaceDec[[Ctx0]]
+            DefaultVal            => DefaultVal[[Ctx0]]
+            AnnoElemDec           => AnnoElemDec[[Ctx0]]
+            AnnoDecHead           => AnnoDecHead[[Ctx0]]
+            AnnoDec               => AnnoDec[[Ctx0]]
+            AbstractMethodMod     => AbstractMethodMod[[Ctx0]]
+            AbstractMethodDec     => AbstractMethodDec[[Ctx0]]
+            ConstantMod           => ConstantMod[[Ctx0]]
+            ConstantDec           => ConstantDec[[Ctx0]]
+            EnumBodyDecs          => EnumBodyDecs[[Ctx0]]
+            EnumConstArgs         => EnumConstArgs[[Ctx0]]
+            EnumConst             => EnumConst[[Ctx0]]
+            EnumBody              => EnumBody[[Ctx0]]
+            EnumDecHead           => EnumDecHead[[Ctx0]]
+            EnumDec               => EnumDec[[Ctx0]]
+            ConstrMod             => ConstrMod[[Ctx0]]
+            ConstrInv             => ConstrInv[[Ctx0]]
+            ConstrBody            => ConstrBody[[Ctx0]]
+            ConstrHead            => ConstrHead[[Ctx0]]
+            ConstrDec             => ConstrDec[[Ctx0]]
+            StaticInit            => StaticInit[[Ctx0]]
+            InstanceInit          => InstanceInit[[Ctx0]]
+            MethodBody            => MethodBody[[Ctx0]]
+            ExceptionType         => ExceptionType[[Ctx0]]
+            Throws                => Throws[[Ctx0]]
+            MethodMod             => MethodMod[[Ctx0]]
+            VarMod                => VarMod[[Ctx0]]
+            FormalParam           => FormalParam[[Ctx0]]
+            ResultType            => ResultType[[Ctx0]]
+            MethodDecHead         => MethodDecHead[[Ctx0]]
+            MethodDec             => MethodDec[[Ctx0]]
+            BlockStm              => BlockStm[[Ctx0]]
+            Block                 => Block[[Ctx0]]
+            CatchClause           => CatchClause[[Ctx0]]
+            SwitchLabel           => SwitchLabel[[Ctx0]]
+            SwitchGroup           => SwitchGroup[[Ctx0]]
+            SwitchBlock           => SwitchBlock[[Ctx0]]
+            Stm                   => Stm[[Ctx0]]
+            LocalVarDec           => LocalVarDec[[Ctx0]]
+            LocalVarDecStm        => LocalVarDecStm[[Ctx0]]
+            FieldMod              => FieldMod[[Ctx0]]
+            VarInit               => VarInit[[Ctx0]]
+            Dim                   => Dim[[Ctx0]]
+            VarDecId              => VarDecId[[Ctx0]]
+            VarDec                => VarDec[[Ctx0]]
+            FieldDec              => FieldDec[[Ctx0]]
+            ArrayInit             => ArrayInit[[Ctx0]]
+            ClassLiteral          => ClassLiteral[[Ctx0]]
+            Literal               => Literal[[Ctx0]]
+            Type                  => Type[[Ctx0]]
+            ArrayType             => ArrayType[[Ctx0]]
+            TypeVar               => TypeVar[[Ctx0]]
+            TypeDecSpec           => TypeDecSpec[[Ctx0]]
+            InterfaceType         => InterfaceType[[Ctx0]]
+            ClassType             => ClassType[[Ctx0]]
+            ClassOrInterfaceType  => ClassOrInterfaceType[[Ctx0]]
+            RefType               => RefType[[Ctx0]]
+            TypeVarId             => TypeVarId[[Ctx0]]
+            TypeParams            => TypeParams[[Ctx0]]
+            TypeBound             => TypeBound[[Ctx0]]
+            TypeParam             => TypeParam[[Ctx0]]
+            WildcardBound         => WildcardBound[[Ctx0]]
+            ActualTypeArg         => ActualTypeArg[[Ctx0]]
+            TypeArgs              => TypeArgs[[Ctx0]]
+            PackageOrTypeName     => PackageOrTypeName[[Ctx0]]
+            MethodName            => MethodName[[Ctx0]]
+            ExprName              => ExprName[[Ctx0]]
+            TypeName              => TypeName[[Ctx0]]
+            AmbName               => AmbName[[Ctx0]]
+            PackageName           => PackageName[[Ctx0]]
+            FloatType             => FloatType[[Ctx0]]
+            IntType               => IntType[[Ctx0]]
+            NumType               => NumType[[Ctx0]]
+            PrimType              => PrimType[[Ctx0]]
+            NullLiteral           => NullLiteral[[Ctx0]]
+            FooStringChars        => FooStringChars[[Ctx0]]
+            StringChars           => StringChars[[Ctx0]]
+            StringPart            => StringPart[[Ctx0]]
+            StringLiteral         => StringLiteral[[Ctx0]]
+            SingleChar            => SingleChar[[Ctx0]]
+            CharContent           => CharContent[[Ctx0]]
+            CharLiteral           => CharLiteral[[Ctx0]]
+            LastOcta              => LastOcta[[Ctx0]]
+            OctaEscape            => OctaEscape[[Ctx0]]
+            NamedEscape           => NamedEscape[[Ctx0]]
+            EscapeSeq             => EscapeSeq[[Ctx0]]
+            Bool                  => Bool[[Ctx0]]
+            BoolLiteral           => BoolLiteral[[Ctx0]]
+            BinaryExponent        => BinaryExponent[[Ctx0]]
+            HexaSignificand       => HexaSignificand[[Ctx0]]
+            HexaFloatNumeral      => HexaFloatNumeral[[Ctx0]]
+            SignedInteger         => SignedInteger[[Ctx0]]
+            DeciFloatExponentPart => DeciFloatExponentPart[[Ctx0]]
+            DeciFloatDigits       => DeciFloatDigits[[Ctx0]]
+            DeciFloatNumeral      => DeciFloatNumeral[[Ctx0]]
+            FloatLiteral          => FloatLiteral[[Ctx0]]
+            HexaFloatLiteral      => HexaFloatLiteral[[Ctx0]]
+            DeciFloatLiteral      => DeciFloatLiteral[[Ctx0]]
+            IntLiteral            => IntLiteral[[Ctx0]]
+            OctaNumeral           => OctaNumeral[[Ctx0]]
+            HexaNumeral           => HexaNumeral[[Ctx0]]
+            DeciNumeral           => DeciNumeral[[Ctx0]]
+            OctaLiteral           => OctaLiteral[[Ctx0]]
+            HexaLiteral           => HexaLiteral[[Ctx0]]
+            DeciLiteral           => DeciLiteral[[Ctx0]]
+            Modifier              => Modifier[[Ctx0]]
+            StrictFP              => StrictFP[[Ctx0]]
+            Synchronized          => Synchronized[[Ctx0]]
+            Volatile              => Volatile[[Ctx0]]
+            Transient             => Transient[[Ctx0]]
+            Native                => Native[[Ctx0]]
+            Static                => Static[[Ctx0]]
+            Final                 => Final[[Ctx0]]
+            Abstract              => Abstract[[Ctx0]]
+            Protected             => Protected[[Ctx0]]
+            Private               => Private[[Ctx0]]
+            Public                => Public[[Ctx0]]
+            Id                    => Id[[Ctx0]]
+            ID                    => ID[[Ctx0]]
+            Keyword               => Keyword[[Ctx0]]
+            ArrayAccess           => ArrayAccess[[Ctx0]]
+            FieldAccess           => FieldAccess[[Ctx0]]
+            MethodSpec            => MethodSpec[[Ctx0]]
+            Expr                  => Expr[[Ctx0]] ]
+
+
+module Stratego-Sugar-Overlays
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Terms
+
+exports
+  sorts Overlay
+  context-free syntax
+    Id 			 "=" Term 	-> Overlay {cons("OverlayNoArgs")}
+    Id "(" {Id ","}* ")" "=" Term 	-> Overlay {cons("Overlay")}
+
+module Stratego-Sugar-DynamicRules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+
+exports
+ 
+  sorts ScopeLabels
+  context-free syntax
+
+    "{|" ScopeLabels ":" Strategy "|}" -> Strategy {cons("DynRuleScope")}
+
+    {DynRuleScopeId ","}*   -> ScopeLabels
+    "~" Term		    -> ScopeLabels {cons("ScopeLabels")}
+
+  sorts DynRuleDef DynRuleId DynRuleScopeId RuleDec
+  context-free syntax
+
+    "rules" "(" DynRuleDef* ")" -> Strategy {cons("GenDynRules")}
+
+    Id "+" Term                 -> DynRuleDef {cons("AddScopeLabel")} 
+    DynRuleId ":-"  Term        -> DynRuleDef {cons("UndefineDynRule")}
+    DynRuleId ":"   Rule        -> DynRuleDef {cons("SetDynRule")}
+    DynRuleId ":+"  Rule        -> DynRuleDef {cons("AddDynRule")}
+    DynRuleId ":"   Term        -> DynRuleDef {cons("SetDynRuleMatch")}
+
+    DynRuleId ":="  Term        -> DynRuleDef {cons("DynRuleAssign")}
+    DynRuleId ":+="  Term       -> DynRuleDef {cons("DynRuleAssignAdd")}
+
+    DynRuleId ":"   Rule "depends" "on" Term -> DynRuleDef {cons("SetDynRuleDepends")}
+
+    RuleDec "." Term            -> DynRuleId {cons("LabeledDynRuleId")}
+    RuleDec "+" Term            -> DynRuleId {cons("AddLabelDynRuleId")}
+    RuleDec                     -> DynRuleId {cons("DynRuleId")}
+
+    Id "." Term                 -> DynRuleScopeId {cons("LabeledDynRuleScopeId")}
+    Id                          -> DynRuleScopeId {cons("DynRuleScopeId")}
+
+  context-free syntax
+
+    Id                          -> RuleDec {cons("RDecNoArgs")}
+    Id "(" {Typedid ","}* ")"   -> RuleDec {cons("RDec")}
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"   -> RuleDec {cons("RDecT")}
+
+  sorts RuleNames
+  context-free syntax
+    {Id ","}*				  -> RuleNames
+    "~" Term				  -> RuleNames {cons("RuleNames")}
+
+    "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+
+  syntax
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+
+  context-free syntax
+    Strategy "/" RuleNames"\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+    Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+
+    Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+
+  priorities
+    <StrategyAngle-CF> <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("BA")}
+  > {
+
+    %% no space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% 1 space after RuleNames
+    "\\" <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleUnionFix")}
+
+    %% no space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> "/*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    %% 1 space after RuleNames
+    "/"  <LAYOUT?-CF> <RuleNames-CF> <LAYOUT?-CF> "\\"
+        <LAYOUT?-CF> <RuleNames-CF> " /*" <LAYOUT?-CF> <Strategy-CF>
+      -> <Strategy-CF> {cons("DynRuleIntersectUnionFix")}
+
+    }
+  > <Strategy-CF> <LAYOUT?-CF> "=>" <LAYOUT?-CF> <Term-CF> -> <Strategy-CF> {cons("AM")}
+
+  context-free priorities
+    StrategyAngle Term 		          -> Strategy {cons("BA")}
+  > "/" RuleNames "\\*" Strategy          -> Strategy {cons("DynRuleIntersectFix")}
+  > Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+  > Strategy "/" RuleNames "\\" Strategy  -> Strategy {cons("DynRuleIntersect"),right}
+  > Strategy "\\" RuleNames "/" Strategy  -> Strategy {cons("DynRuleUnion"),right}
+  > Strategy "/" RuleNames "\\" 
+                 RuleNames "/"  Strategy  -> Strategy {cons("DynRuleIntersectUnion"),right}
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+
+module Stratego-Sugar-Rules
+imports Stratego-Sugar-Strategies
+exports
+
+  sorts RuleDef
+  context-free syntax
+    Id ":" Rule 				-> RuleDef {cons("RDefNoArgs")}
+
+    Id "(" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDef")}
+
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" ":" Rule 		-> RuleDef {cons("RDefT")}
+
+  sorts Rule RuleCond
+  context-free syntax
+    Term "->" Term           	    -> Rule {cons("RuleNoCond")} %% backward comp.
+    Term "->" Term "where" Strategy -> Rule {cons("Rule")}       %% backward comp.
+    Term "->" Term RuleCond+	    -> Rule {cons("Rule"), avoid}
+
+    "where" Strategy -> RuleCond {cons("WhereClause")}
+    "with"  Strategy -> RuleCond {cons("WithClause")}
+
+module Stratego-Sugar-Strategies
+imports
+  Stratego-Core-Strategies
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Constants
+  Stratego-Sugar-Signatures
+
+exports
+  context-free syntax
+    Id  		      "=" Strategy -> StrategyDef {cons("SDefNoArgs")}
+    Id "(" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDef")}
+
+  context-free syntax
+    ID 				  	  -> Typedid {cons("DefaultVarDec")}
+
+  sorts Rule
+
+  sorts StrategyParen StrategyCurly StrategyAngle
+  context-free syntax
+
+    %% Abstraction
+
+    SVar "(" {Strategy ","}* ")" 	  -> Strategy {cons("Call")}
+
+    %% Match and build
+
+    "{" Strategy "}" 			  -> Strategy {cons("ScopeDefault")}
+
+     %%"<" Strategy ">" Term 		  -> Strategy {cons("BA")}
+     StrategyAngle Term 		  -> Strategy {cons("BA")}
+     "<" Strategy ">"			  -> StrategyAngle {bracket} %% {cons("AngleStrat")}
+
+    %% Combinators
+
+    Strategy "<+" Strategy 		  -> Strategy {cons("LChoice"),right}
+
+    "rec" Id "(" Strategy ")" 		  -> Strategy {cons("Rec")}
+
+    "not"   "(" Strategy ")" 		  -> Strategy {cons("Not")}
+    "where" "(" Strategy ")" 		  -> Strategy {cons("Where")}
+    "with"  "(" Strategy ")" 		  -> Strategy {cons("With"), prefer}
+    "test"  "(" Strategy ")" 		  -> Strategy {cons("Test")}
+
+    %% Primitives
+
+    "prim" "(" String ")" 		  -> Strategy {cons("PrimNoArgs")}
+    "prim" "(" String "," {Term ","}* ")" -> Strategy {cons("Prim")}
+
+    %% Congruence operators
+
+    String 				  -> Strategy {cons("StrCong")}
+    Int 				  -> Strategy {cons("IntCong")}
+    Real 				  -> Strategy {cons("RealCong")}
+    Char 			 	  -> Strategy {cons("CharCong")}
+
+    String "(" {Strategy ","}* ")" 	  -> Strategy {cons("CongQ")}
+
+    %%"(" {Strategy ","}* ")" 		  -> Strategy {cons("TupleCong"),avoid}
+
+    Strategy StrategyCurly		  -> Strategy {cons("AnnoCong")}
+    "{" Strategy "}"		  	  -> StrategyCurly {cons("StrategyCurly")}
+
+    "("  ")" 		  		  -> Strategy {cons("EmptyTupleCong")}
+   "(" Strategy  ")" 		          -> Strategy {bracket}
+    "(" Strategy "," {Strategy ","}+ ")"  -> Strategy {cons("TupleCong")}
+
+%%    Mod 	  			  -> Strategy {cons("ModCongNoArgs")}
+%%    Mod "(" {Strategy ","}* ")"	  	  -> Strategy {cons("ModCong")}
+%%    Id "^" Id				  -> Mod {cons("Mod")}
+    "[" {Strategy ","}* "]" 		  -> Strategy {cons("ListCongNoTail")}
+    "[" {Strategy ","}* "|" Strategy "]"  -> Strategy {cons("ListCong")}
+
+%%    Strategy "#" "(" StrategyInj ")" 	  -> Strategy {cons("ExplodeCong")}
+%%    Strategy "#" "(" Strategy ")" 	  -> Strategy {cons("ExplodeCong")}
+    Strategy "#" StrategyParen	  	  -> Strategy {cons("ExplodeCong")}
+
+  %% Syntactic sugar sugar
+
+  sorts SwitchCase
+  context-free syntax
+
+    SVar  		  		  -> Strategy {cons("CallNoArgs")}
+    "\\" Rule "\\" 			  -> Strategy {cons("LRule")}
+    "(" Rule ")" 			  -> Strategy {cons("SRule")}
+    Strategy "+" Strategy 		  -> Strategy {cons("Choice"),right} 
+    Strategy "+>" Strategy 		  -> Strategy {cons("RChoice"),right}
+
+    "if" Strategy "then" Strategy 
+                  "else" Strategy "end"   -> Strategy {cons("CondChoice")}
+    "if" Strategy "then" Strategy "end"   -> Strategy {cons("IfThen")}
+
+    "switch" Strategy SwitchCase* "end"   -> Strategy {cons("SwitchChoiceNoOtherwise")}
+    "switch" Strategy SwitchCase*
+         "otherwise" ":" Strategy "end"   -> Strategy {cons("SwitchChoice")}
+
+    "case" Strategy ":" Strategy          -> SwitchCase {cons("SwitchCase")}
+
+    Strategy "=>" Term 		  	  -> Strategy {cons("AM")}
+
+    Term ":=" Term			  -> Strategy {cons("Assign")}
+
+  %% Priorities
+
+  context-free priorities
+    { Strategy StrategyCurly		  -> Strategy
+      Strategy "#" StrategyParen          -> Strategy
+    }
+  > { "!" Term 				  -> Strategy
+      "?" Term 				  -> Strategy
+    }
+  > StrategyAngle Term 		          -> Strategy
+  > Strategy "=>" Term 		  	  -> Strategy
+  > Strategy ";" Strategy 		  -> Strategy
+  > {right: 
+     Strategy "+" Strategy 		  -> Strategy
+     Strategy "<+" Strategy 		  -> Strategy
+     Strategy "+>" Strategy 		  -> Strategy
+     
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy
+    }
+
+  context-free priorities
+    Strategy 				  -> StrategyMid
+  > Strategy "+" Strategy 		  -> Strategy
+
+  context-free priorities
+    { Strategy StrategyCurly      -> Strategy
+      Strategy "#" StrategyParen  -> Strategy
+    }
+    .> Term ":=" Term -> Strategy
+
+
+
+
+module Stratego-Sugar-Terms
+imports
+  Stratego-Core-Terms
+  Stratego-Sugar-Strategies
+
+exports
+  sorts LID
+  context-free syntax
+    LId 			-> LID  {cons("ListVar")}
+    LID				-> Var  {cons("Var")}
+    LID				-> ID
+
+  context-free syntax
+    "_" PreTerm 		 -> PreTerm {cons("BuildDefaultPT")}
+    "_" Term 			 -> Term {cons("BuildDefault"),prefer}
+
+    Char 			 -> PreTerm {cons("Char")}
+
+    PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+    PreTerm                      -> Term {cons("NoAnnoList")}
+
+    "<" Strategy ">" Term 	 -> PreTerm {cons("App")}
+    "<" Strategy ">" Term 	 -> Term {cons("App"),prefer}
+
+    StrategyAngle		 -> PreTerm {cons("RootApp")}
+    StrategyAngle		 -> Term {cons("RootApp"),prefer}
+
+    "(" {Term ","}* ")" 	 -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]" 	 -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > PreTerm "{" {Term ","}* "}"	 -> Term {cons("AnnoList")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Sugar-Signatures
+imports
+  Stratego-Core-Signatures
+  Stratego-Sugar-Constants
+
+exports
+
+  sorts Sort
+  context-free syntax
+    "[" {Sort ","}* "]"		 -> Sort {cons("SortList")}
+    "[" {Sort ","}* "|" Sort "]" -> Sort {cons("SortListTl")}
+    "(" {Sort ","}* ")"		 -> Sort {cons("SortTuple")}
+
+  sorts Kind
+  context-free syntax
+    "*" 			-> Kind {cons("Star")}
+    "**" 			-> Kind {cons("StarStar")}
+
+module Stratego-Core-Signatures
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+exports
+  sorts Sdecl
+  context-free syntax
+    "sorts" Sort* 		-> Sdecl {cons("Sorts")}
+    "constructors" Opdecl* 	-> Sdecl {cons("Constructors")}
+
+  sorts Sort
+  context-free syntax
+    LCID 			 -> Sort {cons("SortVar")}
+    UCID 			 -> Sort {cons("SortNoArgs")}
+    Id "(" {Sort ","}* ")" 	 -> Sort {cons("Sort")}
+
+  sorts Opdecl
+  context-free syntax
+    Id     ":" Type 		-> Opdecl {cons("OpDecl")}
+    String ":" Type 		-> Opdecl {cons("OpDeclQ")}
+           ":" Type 		-> Opdecl {cons("OpDeclInj")}
+
+  context-free syntax
+    "external" Id     ":" Type 	-> Opdecl {cons("ExtOpDecl")}
+    "external" String ":" Type 	-> Opdecl {cons("ExtOpDeclQ")}
+    "external"        ":" Type 	-> Opdecl {cons("ExtOpDeclInj")}
+
+  sorts Type ArgType ConstType FunType RetType
+  context-free syntax
+    Sort	                -> ConstType {cons("ConstType")}
+    {ArgType "*"}+ "->" RetType -> FunType {cons("FunType")}
+    "(" Type ")"                -> ArgType {bracket}
+    ConstType			-> ArgType
+    Type	                -> RetType
+    FunType			-> RetType {reject}
+
+    FunType			-> Type
+    ConstType			-> Type
+
+  %%%
+   %% Restriction is required for the Sort* in Sdecl: List(a) is
+   %% ambiguous.
+   %%%
+  context-free restrictions
+    Sort -/- [\(]
+
+module Stratego-Core-Terms
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Constants
+
+exports
+  sorts ID Var Wld
+  context-free syntax
+    Id 				-> Var  {cons("Var")}
+    Id				-> ID
+    %% ":" Var                  -> Var  {cons("SeqVar")}
+
+  sorts Term PreTerm
+  context-free syntax
+    Var 			 -> PreTerm 
+    Var 			 -> Term {prefer}
+
+    "_" 			 -> Wld {cons("Wld")}
+    Wld 			 -> PreTerm
+    Wld 			 -> Term {prefer}
+
+    Int 			 -> PreTerm {cons("Int")}
+    Real 			 -> PreTerm {cons("Real")}
+    String 			 -> PreTerm {cons("Str")}
+
+    Id "(" {Term ","}* ")" 	 -> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")" 	 -> PreTerm {cons("OpQ")}
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+
+    PreTerm "{^" PreTerm "}"	 -> Term {cons("Anno")}
+
+    Var "@" Term 		 -> Term {cons("As"),prefer}
+    Var "@" PreTerm 		 -> PreTerm {cons("As")}
+
+  context-free priorities
+    Term "#" "(" Term ")" 	 -> PreTerm {cons("Explode")}
+  > Var "@" Term 		 -> Term {cons("As")}
+
+module Stratego-Core-Strategies
+imports
+  Stratego-Core-Terms
+  Stratego-Core-Constants
+  Stratego-Core-Signatures
+
+exports
+  sorts Def
+  context-free syntax
+    StrategyDef					 -> Def 
+    Id						 -> SVar {cons("SVar")}
+    "let" Def* "in" Strategy "end"		 -> Strategy {cons("Let")}
+    SVar "(" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallT")}
+
+    "call" "(" Term "|" {Strategy ","}* "|" {Term ","}* ")" -> Strategy {cons("CallDynamic")}
+
+
+  sorts StrategyDef
+  context-free syntax
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("SDefT")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")" "=" Strategy -> StrategyDef {cons("ExtSDefInl")}
+
+    "external"
+    Id "(" {Typedid ","}* 
+       "|" {Typedid ","}* ")"		   -> StrategyDef {cons("ExtSDef")}
+
+
+  sorts Typedid
+  context-free syntax
+    ID ":" Type 			  -> Typedid {cons("VarDec")}
+
+
+  sorts Strategy SVar StrategyParen StrategyMid 
+  context-free syntax
+    "(" Strategy ")"			  -> StrategyParen {cons("ParenStrat")}
+
+    "fail" 				  -> Strategy {cons("Fail")}
+    "id" 				  -> Strategy {cons("Id")}
+
+    %% Match and build
+
+    "?" Term 				  -> Strategy {cons("Match")}
+    "!" Term 				  -> Strategy {cons("Build")}
+    "{" {ID ","}* ":" Strategy "}" 	  -> Strategy {cons("Scope")}
+
+    %% Combinators
+
+    Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+    Strategy "<" StrategyMid 
+             "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    Strategy 				  -> StrategyMid
+
+    %% Primitives
+
+    "prim" "(" String "," {Strategy ","}* "|" {Term ","}*")"  -> Strategy {cons("PrimT")}
+
+    %% Traversal
+
+    "some" "(" Strategy ")" 		  -> Strategy {cons("Some")}
+    "one" "(" Strategy ")" 		  -> Strategy {cons("One")}
+    "all" "(" Strategy ")" 		  -> Strategy {cons("All")}
+
+  %% Priorities
+
+  context-free priorities
+    { "!" Term 				  -> Strategy {cons("Build")}
+      "?" Term 				  -> Strategy {cons("Match")}
+    }
+  > Strategy ";" Strategy 		  -> Strategy {cons("Seq"),right}
+  > {right: 
+     Strategy "<" StrategyMid 
+              "+" Strategy 		  -> Strategy {cons("GuardedLChoice"),right}
+    }
+
+  context-free syntax
+    "import-term" "(" ModName ")" -> Strategy {cons("ImportTerm")}
+
+module Stratego-Core-Modules
+imports
+  Stratego-Core-Identifiers
+  Stratego-Core-Strategies
+  Stratego-Core-Signatures
+
+exports 
+  sorts Module
+  context-free syntax
+    "module" ModName Decl* 	 -> Module {cons("Module")}
+    "specification" Decl*	 -> Module {cons("Specification")}
+
+  sorts Decl 
+  context-free syntax
+    "imports" ImportModName* 	-> Decl {cons("Imports")}
+    "strategies" Def* 		-> Decl {cons("Strategies")}
+    "signature" Sdecl*  	-> Decl {cons("Signature")}
+
+  sorts ImportModName
+  context-free syntax
+    ModName              -> ImportModName {cons("Import")}
+  syntax
+    <ModName-CF> "/" "-" -> <ImportModName-CF> {cons("ImportWildcard")}
+
+module Stratego-Sugar-Modules
+imports
+  Stratego-Core-Modules
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Overlays
+  Stratego-Sugar-Rules
+
+exports 
+
+  sorts Decl Def
+  context-free syntax
+    "rules" Def* 		-> Decl {cons("Rules")}
+    "overlays" Overlay* 	-> Decl {cons("Overlays")}
+
+    RuleDef 			-> Def 
+
+
+
+
+module Stratego-Core-Constants
+exports
+  sorts Int Real String StrChar
+  lexical syntax
+    [\-]? [0-9]+ 		-> Int
+    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
+    "\"" StrChar* "\"" 		-> String
+    ~[\"\\] 			-> StrChar
+    [\\] [\"tnr\\] 		-> StrChar
+
+
+
+
+module Stratego-Sugar-Constants
+imports Stratego-Core-Identifiers Stratego-Core-Constants
+exports
+  sorts Char CharChar
+  lexical syntax
+    "'" CharChar "'"		-> Char
+    ~[\']			-> CharChar
+    [\\] [\'ntr\ ]		-> CharChar
+    Char		 	-> Id {reject}
+
+module Stratego-Core-Identifiers
+exports
+  sorts ModName ModNamePart
+  lexical syntax
+    {ModNamePart "/"}+ -> ModName
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+  lexical syntax
+    "imports" 		-> ModName {reject}
+    "overlays" 		-> ModName {reject}
+    "rules" 		-> ModName {reject}
+    "signature" 	-> ModName {reject}
+    "strategies" 	-> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId
+    [\'] [a-z]+                       -> Id
+
+    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
+    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
+
+  lexical restrictions
+    Id   -/- [a-zA-Z0-9\'\-\_\*]
+    LId  -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id {reject}
+    "'"     -> Id {reject}
+
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all"
+    "case" %% not reserved kw
+    "constructors"
+    "else" %% not reserved kw
+    "end" %% not reserved kw
+    "external" %% not reserved kw
+    "fail"
+    "id"
+    "if" %% not reserved kw
+    "in"
+    "imports" %% not reserved kw
+    "let"
+    "module"
+    "not"
+    "one"
+    "overlays"
+    "otherwise" %% not reserved kw
+    "prim"
+    "rec" %% not reserved kw
+    "rules"
+    "script"
+    "signature"
+    "some"
+    "sorts"
+    "strategies"
+    "stratego"
+    "switch" %% not reserved kw
+    "test"
+    "then" %% not reserved kw
+    "where"
+    "import-term"
+      -/- [a-zA-Z0-9\'\-\_]
+  
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+
+  sorts Keyword
+  lexical syntax
+    "all"               -> Keyword
+    "constructors" 	-> Keyword
+    "fail" 		-> Keyword
+    "id" 		-> Keyword
+    "in" 		-> Keyword
+    "let" 		-> Keyword
+    "module" 		-> Keyword
+    "not" 		-> Keyword
+    "one" 		-> Keyword
+    "overlays" 		-> Keyword
+    "prim" 		-> Keyword
+    "rules" 		-> Keyword
+    "script" 		-> Keyword
+    "signature" 	-> Keyword
+    "some" 		-> Keyword
+    "sorts" 		-> Keyword
+    "strategies" 	-> Keyword
+    "stratego" 		-> Keyword
+    "test" 		-> Keyword
+    "where" 		-> Keyword
+    "import-term"	-> Keyword
+
+
+
+
+module Stratego-Core-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof 
+  lexical syntax
+    [\t\ \n\r]			-> Ws
+
+    "//" ~[\n]* ([\n] | Eof)	-> ShortCom
+    "/*" CommChar* "*/"	-> LongCom
+				-> Eof  
+
+    ~[\*]     -> CommChar
+
+    "*"       -> Asterisk
+    Asterisk  -> CommChar
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof      -/- ~[]
+
+  lexical syntax
+    ShortCom 	-> LAYOUT
+    LongCom 	-> LAYOUT
+    Ws 		-> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]
+
+module Stratego-Sugar-Layout
+imports Stratego-Core-Layout
+%%exports
+%%  sorts VeryLongCom Eof VLCchar Backslash
+%%  lexical syntax
+%%    "\\end{code}" VLCchar* "\\begin{code}" -> VeryLongCom
+%%    "\\begin{code}" 			   -> VeryLongCom
+%%    "\\end{code}" VLCchar* Eof 		   -> VeryLongCom
+%%    "\\literate" VLCchar* "\\begin{code}"  -> VeryLongCom
+%%    ~[\\] 				   -> VLCchar
+%%    Backslash 				   -> VLCchar
+%%    [\\] 				   -> Backslash
+
+%%  lexical restrictions
+%%    Backslash -/- [b].[e].[g].[i].[n].[\{].[c].[o].[d].[e].[\}]
+%%    Eof -/- ~[]
+
+%%  lexical syntax
+%%    VeryLongCom -> LAYOUT
+
+
+
+
+
+module Stratego-Sugar
+imports
+  Stratego-Sugar-Layout
+  Stratego-Core-Identifiers
+  Stratego-Sugar-Constants 
+  Stratego-Sugar-Modules
+  Stratego-Sugar-Signatures
+  Stratego-Sugar-Terms
+  Stratego-Sugar-Strategies
+  Stratego-Sugar-Rules
+  Stratego-Sugar-DynamicRules
+  Stratego-Sugar-Overlays
+
+hiddens
+  context-free start-symbols Module
+
+module Stratego
+imports Stratego-Sugar
+hiddens
+  context-free start-symbols Module
+
+module StrategoMix[Ctx0]
+imports Stratego
+          [ RuleNames      => RuleNames[[Ctx0]]
+            RuleDec        => RuleDec[[Ctx0]]
+            DynRuleScopeId => DynRuleScopeId[[Ctx0]]
+            DynRuleId      => DynRuleId[[Ctx0]]
+            DynRuleDef     => DynRuleDef[[Ctx0]]
+            ScopeLabels    => ScopeLabels[[Ctx0]]
+            RuleCond       => RuleCond[[Ctx0]]
+            Rule           => Rule[[Ctx0]]
+            RuleDef        => RuleDef[[Ctx0]]
+            Overlay        => Overlay[[Ctx0]]
+            SwitchCase     => SwitchCase[[Ctx0]]
+            StrategyCurly  => StrategyCurly[[Ctx0]]
+            StrategyAngle  => StrategyAngle[[Ctx0]]
+            Kind           => Kind[[Ctx0]]
+            LID            => LID[[Ctx0]]
+            ImportModName  => ImportModName[[Ctx0]]
+            Decl           => Decl[[Ctx0]]
+            Module         => Module[[Ctx0]]
+            StrategyParen  => StrategyParen[[Ctx0]]
+            Typedid        => Typedid[[Ctx0]]
+            StrategyDef    => StrategyDef[[Ctx0]]
+            SVar           => SVar[[Ctx0]]
+            Def            => Def[[Ctx0]]
+            Type           => Type[[Ctx0]]
+            RetType        => RetType[[Ctx0]]
+            ArgType        => ArgType[[Ctx0]]
+            FunType        => FunType[[Ctx0]]
+            ConstType      => ConstType[[Ctx0]]
+            Opdecl         => Opdecl[[Ctx0]]
+            Sort           => Sort[[Ctx0]]
+            Sdecl          => Sdecl[[Ctx0]]
+            Wld            => Wld[[Ctx0]]
+            ID             => ID[[Ctx0]]
+            Var            => Var[[Ctx0]]
+            CharChar       => CharChar[[Ctx0]]
+            Char           => Char[[Ctx0]]
+            StrChar        => StrChar[[Ctx0]]
+            String         => String[[Ctx0]]
+            Real           => Real[[Ctx0]]
+            Int            => Int[[Ctx0]]
+            Keyword        => Keyword[[Ctx0]]
+            UCID           => UCID[[Ctx0]]
+            LCID           => LCID[[Ctx0]]
+            LId            => LId[[Ctx0]]
+            Id             => Id[[Ctx0]]
+            ModNamePart    => ModNamePart[[Ctx0]]
+            ModName        => ModName[[Ctx0]]
+            PreTerm        => PreTerm[[Ctx0]]
+            Term           => Term[[Ctx0]]
+            StrategyMid    => StrategyMid[[Ctx0]]
+            Strategy       => Strategy[[Ctx0]] ]
+
+
+module Stratego-Java-15
+imports
+  StrategoMix[StrategoHost]
+  languages/java/EmbeddedJavaMix[JavaObject Term[[StrategoHost]]]
+
+exports
+  context-free start-symbols Module[[StrategoHost]]
\ No newline at end of file

Added: sglr-recovery/trunk/bridge-definitions/grammars/webdsl/WebDSL.bp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/webdsl/WebDSL.bp	Wed Mar  9 10:16:00 2011	(r22331)
@@ -0,0 +1,162 @@
+grammar Main;
+
+import Layout ;
+
+// Islands and bridges
+island island0 : SimpleStartIsland = "[" for-sglr ( "BracketList" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "BracketList" ) ;
+bridge from island0 to island1 ;
+island island2 : SimpleStartIsland = "<" for-sglr ( "JSElement" ) ;
+island island3 : SimpleEndIsland = ">" for-sglr ( "JSElement" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "<" for-sglr ( "XMLEmptyElement" ) ;
+island island3 : SimpleEndIsland = "/>" for-sglr ( "XMLEmptyElement" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "<" for-sglr ( "XMLElement" ) ;
+island island3 : SimpleEndIsland = ">" for-sglr ( "XMLElement" ) ;
+bridge from island2 to island3 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "MapCreation" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "MapCreation" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ListCreation" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ListCreation" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ForExp" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ForExp" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ForExpNoFilter" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ForExpNoFilter" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ForExp" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ForExp" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ForExpNoFilter" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ForExpNoFilter" ) ;
+bridge from island0 to island1 ;
+island startRef0 : SimpleStartIsland = "Ref" for-sglr ( "RefSort" ) ;
+island endRef0 : SimpleEndIsland = ">" for-sglr ( "RefSort" ) ;
+bridge from startRef0 to endRef0 ;
+
+// Reefs
+reef separator82 : Keyword = "," for-sglr ( "ServiceFunction" ) ;
+reef as3 : Keyword = "as" for-sglr ( "NativeClassFunctionFromStatic" ) ;
+reef separator81 : Keyword = "," for-sglr ( "ThrowStatement" ) ;
+reef separator80 : Keyword = "," for-sglr ( "ThrowTemplate" ) ;
+reef separator79 : Keyword = "," for-sglr ( "DispatchEntry" ) ;
+reef separator78 : Keyword = "/" for-sglr ( "DispatchNavigate" ) ;
+reef separator77 : Keyword = "/" for-sglr ( "DispatchNavigateButton" ) ;
+reef separator76 : Keyword = "," for-sglr ( "DispatchNavigateCall" ) ;
+reef function2 : Keyword = "function" for-sglr ( "NativeFunction" ) ;
+reef separator75 : Keyword = "," for-sglr ( "NativeFunction" ) ;
+reef as2 : Keyword = "as" for-sglr ( "NativeClassAlias" ) ;
+reef separator74 : Keyword = "," for-sglr ( "NativeClassFunction" ) ;
+reef separator73 : Keyword = "," for-sglr ( "NativeClassConstructor" ) ;
+reef separator72 : Keyword = "," for-sglr ( "NativeGenericType" ) ;
+reef separator71 : Keyword = "," for-sglr ( "StringSelectEntity" ) ;
+reef for18 : Keyword = "for" for-sglr ( "Derive" ) ;
+reef separator70 : Keyword = "," for-sglr ( "Derive" ) ;
+reef for17 : Keyword = "for" for-sglr ( "Derive" ) ;
+reef separator69 : Keyword = "," for-sglr ( "Derive" ) ;
+reef for16 : Keyword = "for" for-sglr ( "PagedForAll" ) ;
+reef for15 : Keyword = "for" for-sglr ( "PagedForAllNoFilter" ) ;
+reef for14 : Keyword = "for" for-sglr ( "PagedFor" ) ;
+reef for13 : Keyword = "for" for-sglr ( "PagedForNoFilter" ) ;
+reef separator68 : Keyword = "," for-sglr ( "Enum" ) ;
+reef separator67 : Keyword = "," for-sglr ( "Call" ) ;
+reef separator66 : Keyword = "," for-sglr ( "AccessControlPrincipal" ) ;
+reef separator65 : Keyword = "," for-sglr ( "AccessControlPrincipal" ) ;
+reef separator64 : Keyword = "," for-sglr ( "MatchArgs" ) ;
+reef separator63 : Keyword = "," for-sglr ( "MatchArgs" ) ;
+reef separator62 : Keyword = "," for-sglr ( "Predicate" ) ;
+reef separator61 : Keyword = "," for-sglr ( "Predicate" ) ;
+reef separator60 : Keyword = "," for-sglr ( "AccessControlPointcutElement" ) ;
+reef separator59 : Keyword = "," for-sglr ( "AccessControlPointcut" ) ;
+reef separator58 : Keyword = "," for-sglr ( "AccessControlPointcut" ) ;
+reef separator57 : Keyword = "," for-sglr ( "AccessControlImportRules" ) ;
+reef separator56 : Keyword = "," for-sglr ( "Property" ) ;
+reef separator55 : Keyword = "," for-sglr ( "DerivedProperty" ) ;
+reef separator54 : Keyword = "," for-sglr ( "InlineAnno" ) ;
+reef separator53 : Keyword = "," for-sglr ( "FromClause" ) ;
+reef as1 : Keyword = "as" for-sglr ( "AsAlias" ) ;
+reef separator52 : Keyword = "," for-sglr ( "GroupBy" ) ;
+reef separator51 : Keyword = "," for-sglr ( "OrderByClause" ) ;
+reef separator50 : Keyword = "," for-sglr ( "SelectedPropertiesList" ) ;
+reef separator49 : Keyword = "," for-sglr ( "Paren" ) ;
+reef separator48 : Keyword = "." for-sglr ( "Path" ) ;
+reef function1 : Keyword = "function" for-sglr ( "Function" ) ;
+reef separator47 : Keyword = "," for-sglr ( "Function" ) ;
+reef function0 : Keyword = "function" for-sglr ( "FunctionNoReturn" ) ;
+reef separator46 : Keyword = "," for-sglr ( "FunctionNoReturn" ) ;
+reef return1 : Keyword = "return" for-sglr ( "Return" ) ;
+reef return0 : Keyword = "return" for-sglr ( "ReturnEmpty" ) ;
+reef for12 : Keyword = "for" for-sglr ( "Schedule" ) ;
+reef for11 : Keyword = "for" for-sglr ( "ForStmt" ) ;
+reef for10 : Keyword = "for" for-sglr ( "ForStmtNoFilter" ) ;
+reef for9 : Keyword = "for" for-sglr ( "ForAllStmt" ) ;
+reef for8 : Keyword = "for" for-sglr ( "ForAllStmtNoFilter" ) ;
+reef for7 : Keyword = "for" for-sglr ( "ForCountStmt" ) ;
+reef separator45 : Keyword = "," for-sglr ( "ObjectCreation" ) ;
+reef separator44 : Keyword = "," for-sglr ( "ListCreation" ) ;
+reef separator43 : Keyword = "," for-sglr ( "SetCreation" ) ;
+reef separator42 : Keyword = "," for-sglr ( "TypedListCreation" ) ;
+reef separator41 : Keyword = "," for-sglr ( "TypedSetCreation" ) ;
+reef separator40 : Keyword = "," for-sglr ( "ThisCall" ) ;
+reef separator39 : Keyword = "," for-sglr ( "Call" ) ;
+reef as0 : Keyword = "as" for-sglr ( "Cast" ) ;
+reef for6 : Keyword = "for" for-sglr ( "ForExp" ) ;
+reef for5 : Keyword = "for" for-sglr ( "ForExpNoFilter" ) ;
+reef separator38 : Keyword = "," for-sglr ( "EmailCall" ) ;
+reef separator37 : Keyword = "," for-sglr ( "EventCall" ) ;
+reef separator36 : Keyword = "," for-sglr ( "EventCallElement" ) ;
+reef placeholder3 : Keyword = "placeholder" for-sglr ( "Placeholder" ) ;
+reef placeholder2 : Keyword = "placeholder" for-sglr ( "Placeholder" ) ;
+reef placeholder1 : Keyword = "placeholder" for-sglr ( "PlaceholderWithAjaxCall" ) ;
+reef placeholder0 : Keyword = "placeholder" for-sglr ( "PlaceholderWithAjaxCall" ) ;
+reef separator35 : Keyword = "," for-sglr ( "ThisCall" ) ;
+reef separator34 : Keyword = "," for-sglr ( "Call" ) ;
+reef define1 : Keyword = "define" for-sglr ( "Define" ) ;
+reef separator33 : Keyword = "," for-sglr ( "Define" ) ;
+reef separator32 : Keyword = "," for-sglr ( "TemplateArgs" ) ;
+reef separator31 : Keyword = "," for-sglr ( "TemplateArg" ) ;
+reef define0 : Keyword = "define" for-sglr ( "LocalRedefine" ) ;
+reef separator30 : Keyword = "," for-sglr ( "LocalRedefine" ) ;
+reef separator29 : Keyword = "," for-sglr ( "LocalRedefineArgs" ) ;
+reef for4 : Keyword = "for" for-sglr ( "For" ) ;
+reef for3 : Keyword = "for" for-sglr ( "ForNoFilter" ) ;
+reef for2 : Keyword = "for" for-sglr ( "ForAll" ) ;
+reef for1 : Keyword = "for" for-sglr ( "ForAllNoFilter" ) ;
+reef for0 : Keyword = "for" for-sglr ( "ForCount" ) ;
+reef separator28 : Keyword = "," for-sglr ( "SelectNoElems" ) ;
+reef separator27 : Keyword = "," for-sglr ( "Select" ) ;
+reef separator26 : Keyword = "," for-sglr ( "SelectFromListNoElems" ) ;
+reef separator25 : Keyword = "," for-sglr ( "SelectFromList" ) ;
+reef separator24 : Keyword = "," for-sglr ( "TemplateCase" ) ;
+reef separator23 : Keyword = "," for-sglr ( "TemplateCaseAlt" ) ;
+reef separator22 : Keyword = "," for-sglr ( "TemplateCall" ) ;
+reef separator21 : Keyword = "," for-sglr ( "TemplateCall" ) ;
+reef separator20 : Keyword = "," for-sglr ( "TemplateCallNoBody" ) ;
+reef separator19 : Keyword = "," for-sglr ( "TemplateCallNoAssigns" ) ;
+reef separator18 : Keyword = "," for-sglr ( "TemplateCallPropsNoBody" ) ;
+reef separator17 : Keyword = "," for-sglr ( "TemplateCallPropsNoBody" ) ;
+reef separator16 : Keyword = "," for-sglr ( "TemplateCallProps" ) ;
+reef separator15 : Keyword = "," for-sglr ( "TemplateCallPropsNoArgs" ) ;
+reef separator14 : Keyword = "," for-sglr ( "ArgDefine" ) ;
+reef separator13 : Keyword = "," for-sglr ( "NavigateCall" ) ;
+reef separator12 : Keyword = "," for-sglr ( "NavigateCall" ) ;
+reef separator11 : Keyword = "," for-sglr ( "PageCall" ) ;
+reef separator10 : Keyword = "," for-sglr ( "Submit" ) ;
+reef separator9 : Keyword = "," for-sglr ( "SubmitLink" ) ;
+reef separator8 : Keyword = "," for-sglr ( "Submit" ) ;
+reef separator7 : Keyword = "," for-sglr ( "SubmitLink" ) ;
+reef separator6 : Keyword = "," for-sglr ( "SubmitElem" ) ;
+reef separator5 : Keyword = "," for-sglr ( "SubmitLinkElem" ) ;
+reef separator4 : Keyword = "," for-sglr ( "DownloadLink" ) ;
+reef separator3 : Keyword = "," for-sglr ( "OutputImage" ) ;
+reef separator2 : Keyword = "," for-sglr ( "ActionCall" ) ;
+reef separator1 : Keyword = "," for-sglr ( "Action" ) ;
+reef separator0 : Keyword = "," for-sglr ( "GenericSort" ) ;
+
+// Ignores
+ignore "//" to NEWLINE ;
+ignore "/*" to "*/" ;
+ignore "\" to "\" ;
\ No newline at end of file

Added: sglr-recovery/trunk/bridge-definitions/grammars/webdsl/WebDSL.def
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/webdsl/WebDSL.def	Wed Mar  9 10:16:00 2011	(r22331)
@@ -0,0 +1,2106 @@
+definition
+module WebDSL-Service
+
+exports
+
+  context-free syntax
+
+     "service" Id "(" {FormalArg ","}* ")" 
+        Block                                      -> Definition {cons("ServiceFunction")}
+
+module WebDSL-TimeInterval
+
+imports
+  WebDSL-Lexical
+  WebDSL-Action
+
+exports
+
+  context-free syntax
+    Exp "weeks"        -> TimeIntervalPart {cons("Weeks")}
+    Exp "days"         -> TimeIntervalPart {cons("Days")}
+    Exp "hours"        -> TimeIntervalPart {cons("Hours")}
+    Exp "minutes"      -> TimeIntervalPart {cons("Minutes")}
+    Exp "seconds"      -> TimeIntervalPart {cons("Seconds")}
+    Exp "milliseconds" -> TimeIntervalPart {cons("Milliseconds")}
+    TimeIntervalPart*  -> TimeInterval {cons("TimeInterval")}
+
+  context-free syntax
+    "invoke" Exp "every" TimeInterval  -> Definition {cons("InvokeEvery")}
+
+module WebDSL-Test
+
+exports
+
+context-free syntax
+
+  "test" Id Block -> Definition {cons("Test")}
+
+module WebDSL-Type
+
+exports
+
+  context-free syntax
+  
+    %%  Construct for creating custom value types, and altering the existing value types.
+    %%
+    %%  example: 
+    %%    type String { validate(this.length() <= 255 , "input too long (max 255 characters)") }
+    %%    type USDate : Date { format = ?MM/dd/yyyy? }
+    %% 
+    %%  Will also need to cope with input/output decode/encode.
+    %%
+
+    "type" Id "{" TypeProperty* "}" -> Definition {cons("TypeDef")}
+    
+    Annotation -> TypeProperty {cons("TypeDefAnno")}
+    
+    NativeClassFunction -> TypeProperty
+    %%solve ambiguities
+    "static" -> TypeProperty {reject}
+    
+    QId "as" NativeClassFunction -> TypeProperty{cons("NativeClassFunctionFromStatic")}
+
+module WebDSL-Exception
+
+exports
+
+  context-free syntax
+  
+    %%
+    %%  Exceptions, for supporting data validation
+    %%
+    %%  example: 
+    %%  entity ValidationException{message:String}
+    %%  throw ValidationException{ message := "error" }
+    %%  try{}catch(ve : ValidationException){}
+    %%  throw ValidationException{ message := "error1" }, ValidationException{ message := "error2" }
+    %%  try{}catch(l : List<ValidationException>)
+
+    "throw" {Exp ","}+ ";" -> Statement {cons("ThrowStatement"), prefer}
+    "throw" {Exp ","}+     -> TemplateCall {cons("ThrowTemplate"), prefer}
+    
+    "try" Block Catch+ -> Statement {cons("TryStatement"), prefer}
+    "try" Block Catch+ -> TemplateCall {cons("TryTemplate"), prefer}
+    
+    "catch" "(" Id ":" Sort ")" Block -> Catch {cons("Catch")}
+
+module WebDSL-Dispatch
+
+exports
+
+  sorts DispatchEntry DispatchBody DispatchArg
+
+  context-free syntax
+
+    "dispatch" "{" DispatchEntry* DispatchEntryDefault "}" -> TemplateElement {cons("Dispatch")}
+
+    "dispatch" "{" TemplateElement* "}" -> TemplateCall {reject}
+
+    
+    
+    Id "(" {FormalArg ","}* ")" "{" TemplateElement* "}" -> DispatchEntry {cons("DispatchEntry")}
+    Id "{" TemplateElement* "}" -> DispatchEntry {cons("DispatchEntryNoArg")}
+    
+    Id ":" Sort "{" TemplateElement* "}" -> DispatchEntry {cons("DispatchEntity")}
+     
+    "default" "{" TemplateElement* "}" -> DispatchEntryDefault {cons("DispatchDefault")}
+    -> DispatchEntryDefault {cons("None")}
+  
+    "default" "(" {FormalArg ","}* ")" "{" TemplateElement* "}" -> DispatchEntry {reject}
+    "default" "{" TemplateElement* "}" -> DispatchEntry {reject}
+    
+    
+    %%dispatch {
+    %%  create            { createJournal() }
+    %%  journal : Journal { thejournal(journal) }
+    %%  default           { "unknown journal" }
+    %%}
+    
+    
+    
+    "navigate" "(" {DispatchNavigateCall "/"}+ ")" "{" TemplateElement* "}" -> DispatchNavigate {cons("DispatchNavigate")}
+    "navigate" "(" Exp "," {DispatchNavigateCall "/"}+ ")" -> DispatchNavigateButton {cons("DispatchNavigateButton")}
+    DispatchNavigate -> TemplateElement
+    DispatchNavigateButton -> TemplateElement    
+    %% should be at least two arguments, otherwise dispatch has no function, reject rules below prevent one argument from being becoming a DispatchNavigate
+    "navigate" "(" Id "(" {Exp ","}* ")" ")" "{" TemplateElement* "}"      -> DispatchNavigate {reject}
+    "navigate" "(" Exp "," Id "(" {Exp ","}* ")" ")" "{" TemplateElement* "}"      -> DispatchNavigateButton {reject}
+    %%can also be parsed as a division of the results of functions calls, needs reject
+    "navigate" "(" Exp "/" Exp ")" TemplateBody -> TemplateCall {reject}
+    "navigate" "(" Exp "," Exp "/" Exp ")" TemplateBody -> TemplateCall {reject}
+    
+    Id "(" {Exp ","}* ")" -> DispatchNavigateCall {cons("DispatchNavigateCall")}
+    Id  -> DispatchNavigateCall {cons("DispatchNavigateCallNoArg")}
+
+module WebDSL-Native
+
+imports
+  WebDSL-Lexical
+
+exports
+
+  sorts Derive DeriveType DeriveProperty
+
+context-free syntax
+
+  "native" "function" Id "(" {FormalArg ","}* ")" ":" Sort ";" -> NativeFunctionDeclaration {cons("NativeFunction")}
+
+context-free syntax
+
+  "native" "class" QId NativeClassAlias NativeClassSuper "{" NativeClassElement* "}" -> NativeClassDeclaration {cons("NativeClass")}
+  
+  "as" Id -> NativeClassAlias{cons("NativeClassAlias"),prefer}
+  -> NativeClassAlias{cons("None")}
+  
+  ":" Id -> NativeClassSuper{cons("NativeClassSuper"),prefer}
+  -> NativeClassSuper{cons("None")}
+  
+context-free syntax %%properties
+  
+  Id ":" NativeType -> NativeClassElement{cons("NativeClassProperty")}
+  
+context-free syntax %%functions  
+  
+  NativeClassFunction -> NativeClassElement
+  
+  NativeClassFunctionStatic Id "(" {NativeType ","}* ")" NativeClassFunctionReturn -> NativeClassFunction{cons("NativeClassFunction")}
+  "constructor" "(" {NativeType ","}* ")" NativeClassFunctionReturn -> NativeClassElement{reject}
+
+  ":" NativeType ->  NativeClassFunctionReturn{cons("NativeClassFunctionReturn"),prefer}
+  ->  NativeClassFunctionReturn{cons("None")}
+  
+  "static" ->  NativeClassFunctionStatic{cons("NativeClassFunctionStatic"),prefer}
+  ->  NativeClassFunctionStatic{cons("None")}
+
+  "constructor" "(" {NativeType ","}* ")" -> NativeClassElement{cons("NativeClassConstructor")}
+  
+  Id "<" {NativeType ","}* ">" -> NativeType{cons("NativeGenericType")}
+  Id -> NativeType{cons("NativeSimpleType")}
+
+module WebDSL-ValidationAnnos
+
+exports
+  sorts Annotation PatternFlag
+
+  context-free syntax
+	%%string
+    "length" "(" Int "," Int ")"              -> Annotation {cons("ValidationAnnoLength"),prefer}
+    "minlength" "(" Int ")"                   -> Annotation {cons("ValidationAnnoMinLength"),prefer}   
+    "maxlength" "(" Int ")"                   -> Annotation {cons("ValidationAnnoMaxLength"),prefer}    
+ 	"notempty"                                -> Annotation {cons("ValidationAnnoNotEmpty"),prefer}  
+  	"email"                                   -> Annotation {cons("ValidationAnnoEmail"),prefer} 	 
+  	"creditcardnumber"                        -> Annotation {cons("ValidationAnnoCreditCardNumber"),prefer} 	
+ 	"EAN"                                     -> Annotation {cons("ValidationAnnoEAN"),prefer} 
+  	"pattern" "(" String ")"                  -> Annotation {cons("ValidationAnnoPattern"),prefer}   
+  	"pattern" "(" String "," PatternFlag* ")" -> Annotation {cons("ValidationAnnoPatternWithFlags"),prefer}
+  	
+  	"canonicalequivalence"                    -> PatternFlag {cons("FlagCanonEq")} %% CANON_EQ Enables canonical equivalence.    
+	"caseinsensitive"                         -> PatternFlag {cons("FlagCaseInsensitive")} %% CASE_INSENSITIVE Enables case-insensitive matching.
+ 	"comments"                                -> PatternFlag {cons("FlagComments")} %% COMMENTS Permits whitespace and comments in pattern.
+ 	"dotall"                                  -> PatternFlag {cons("FlagDotAll")} %% DOTALL Enables dotall mode.
+ 	"literal"                                 -> PatternFlag {cons("FlagLiteral")} %% LITERAL Enables literal parsing of the pattern.
+ 	"multiline"                               -> PatternFlag {cons("FlagMultiline")} %% MULTILINE Enables multiline mode.
+ 	"unicodecase"                             -> PatternFlag {cons("FlagUnicodeCase")} %% UNICODE_CASE Enables Unicode-aware case folding.
+ 	"unixlines"                               -> PatternFlag {cons("FlagUnixLines")} %% UNIX_LINES Enables Unix lines mode.
+                 
+	%%numeric or string representation of numeric
+	"max" "(" Int ")"                         -> Annotation {cons("ValidationAnnoMax"),prefer} 
+	"min" "(" Int ")"                         -> Annotation {cons("ValidationAnnoMin"),prefer}
+    "range" "(" Int "," Int ")"               -> Annotation {cons("ValidationAnnoRange"),prefer}
+    "minrange" "(" Int ")"                    -> Annotation {cons("ValidationAnnoMinRange"),prefer}   
+    "maxrange" "(" Int ")"                    -> Annotation {cons("ValidationAnnoMaxRange"),prefer} 
+    "digits" "(" Int "," Int ")"              -> Annotation {cons("ValidationAnnoDigits"),prefer}  
+     
+	%%date/calendar
+	"past"                                    -> Annotation {cons("ValidationAnnoPast"),prefer} 
+	"future"                                  -> Annotation {cons("ValidationAnnoFuture"),prefer} 	
+	
+	%%array, collection, map	
+    "size" "(" Int "," Int ")"                -> Annotation {cons("ValidationAnnoSize"),prefer}
+    "minsize" "(" Int ")"                     -> Annotation {cons("ValidationAnnoMinSize"),prefer}   
+    "maxsize" "(" Int ")"                     -> Annotation {cons("ValidationAnnoMaxSize"),prefer} 
+    
+	%%object
+  	"notnull"                                 -> Annotation {cons("ValidationAnnoNotNull"),prefer }
+  	"asserttrue"                              -> Annotation {cons("ValidationAnnoAssertTrue"),prefer} 
+  	"assertfalse"                             -> Annotation {cons("ValidationAnnoAssertFalse"),prefer} 
+   	"valid"                                   -> Annotation {cons("ValidationAnnoValid"),prefer}
+
+module WebDSL-StringSelectEntity
+
+imports
+  WebDSL-UI
+  WebDSL-Lexical
+
+exports
+  sorts TemplateDefinition
+
+  context-free syntax
+  
+  "string-select-entity" Id "{" {String ","}* "}" -> TemplateDefinition {cons("StringSelectEntity")}
+
+module WebDSL-Procedures
+
+imports
+  WebDSL-AccessControl
+  WebDSL-UI
+  WebDSL-DataModel
+  WebDSL-Action
+  WebDSL-Lexical
+
+exports
+  sorts Section Definition
+
+  context-free syntax
+
+	"procedure" Id "(" FormalArg ")" "{"
+	   ProcedureElement* 
+	"}"                             -> Procedure {cons("Procedure")}
+
+	"auto" "procedure" Id "(" FormalArg ")" "{"
+	   ProcedureElement* 
+	"}"                             -> Procedure {cons("AutoProcedure")}
+
+  "extend" "procedure" Id "(" FormalArg ")" "{"
+	   ProcedureElement* 
+	"}"                             -> Definition {cons("ExtendProcedure")}
+
+  Procedure                       -> Definition
+
+	"who" "{" Exp "}"               -> ProcedureElement {cons("ProcedureWho")}
+	"when" "{" Exp "}"					    -> ProcedureElement {cons("ProcedureWhen")}
+	"do" Block							        -> ProcedureElement {cons("ProcedureDo")}
+	"done" Block							      -> ProcedureElement {cons("ProcedureDone")}
+	"enabled" Block							    -> ProcedureElement {cons("ProcedureEnabled")}
+	"disabled" Block						    -> ProcedureElement {cons("ProcedureDisabled")}
+	"view" "{" TemplateElement* "}" -> ProcedureElement {cons("ProcedureView")}
+	
+	"process" "{" ProcessExp "}"    -> ProcedureElement {cons("ProcedureProcess")}
+	"processed" Block							  -> ProcedureElement {cons("ProcedureProcessed")}
+	
+  sorts ProcessExp
+  
+context-free syntax
+    
+    Id "(" Exp ")"                -> CallProcessExp {cons("ProcCall")} 
+    CallProcessExp                -> ProcessExp                        
+    ProcessExp ";" ProcessExp     -> ProcessExp {cons("ProcSeq"), left}
+    
+    "while" "(" Exp ")" "{" 
+      ProcessExp 
+    "}"                           -> ProcessExp {cons("ProcWhile")}
+    
+    "repeat" "{" 
+      ProcessExp 
+    "}" "until" CallProcessExp    -> ProcessExp {cons("ProcRepeatUntil")}
+
+    "if" "(" Exp ")" "{" 
+      ProcessExp 
+     "}"                          -> ProcessExp {cons("ProcIfNoElse")}
+    
+    "if" "(" Exp ")" "{" 
+      ProcessExp 
+    "}" "else" "{" 
+      ProcessExp 
+    "}"                           -> ProcessExp {cons("ProcIf")}
+    
+    ProcessExp "xor" ProcessExp   -> ProcessExp {cons("ProcXor"), left}
+    ProcessExp "and" ProcessExp   -> ProcessExp {cons("ProcAnd"), left}
+    
+    ProcessExp "+" ProcessExp     -> ProcessExp {cons("ProcPlus"), left}
+    
+    "(" ProcessExp ")"            -> ProcessExp {bracket}
+  
+  context-free priorities  
+      {left:
+        ProcessExp "and" ProcessExp  -> ProcessExp}
+    > {left:
+        ProcessExp "xor" ProcessExp  -> ProcessExp
+        ProcessExp "+"   ProcessExp  -> ProcessExp }
+    > {left:
+        ProcessExp ";"   ProcessExp  -> ProcessExp {cons("ProcSeq"), left}}
+
+module WebDSL-Derive
+
+imports
+  WebDSL-UI
+  WebDSL-Lexical
+
+exports
+
+  sorts Derive DeriveType DeriveProperty
+
+context-free syntax
+
+  "derive" Id "from" Exp "for" "(" 
+    {DeriveProperty ","}* 
+  ")"                               -> TemplateElement {cons("Derive"), prefer}
+  "derive" Id "from" Exp            -> TemplateElement {cons("Derive"), prefer}
+  %%"derive" Id                       -> TemplateElement {cons("Derive"), prefer}
+  %% Disabled this one for now because it is causing ambiguities, have a look at this Ruben!
+  
+  "derive" Id "from" Exp "for" "(" 
+    {DeriveProperty ","}* 
+  ")" DeriveBody                    -> TemplateElement {cons("Derive"), prefer}
+  "derive" Id "from" Exp DeriveBody -> TemplateElement {cons("Derive"), prefer}
+  "derive" Id DeriveBody            -> TemplateElement {cons("Derive"), prefer}
+  
+  Id                                -> DeriveProperty {cons("DeriveDefault")}
+  Id "(" Id ")"                     -> DeriveProperty {cons("DeriveMode")}
+  
+  "{" DeriveBodyElement* "}"        -> DeriveBody {cons("DeriveBody")}
+  
+  Id "{" TemplateElement* "}"       -> DeriveBodyElement {cons("DeriveBodyElement")}
+  
+  "derive"                          -> TemplateCall {reject}
+    
+  "derive" "crud" Id -> Definition {cons("DeriveCrud")}
+  "derive" "CRUD" Id -> Definition {cons("DeriveCrud")}
+
+module WebDSL-PagedFor
+
+imports
+  WebDSL-UI
+
+exports
+  sorts TemplateElement
+
+  context-free syntax
+
+    "for" "(" Id ":" Sort Filter "per" Exp ")"
+       "{" TemplateElement* "}"                             -> TemplateElement {cons("PagedForAll")}
+
+    "for" "(" Id ":" Sort "per" Exp ")"
+       "{" TemplateElement* "}"                             -> TemplateElement {cons("PagedForAllNoFilter")}
+
+    "for" "(" Id ":" Sort "in" Exp Filter "per" Exp ")"
+       "{" TemplateElement* "}"                             -> TemplateElement {cons("PagedFor")}
+
+    "for" "(" Id ":" Sort "in" Exp "per" Exp ")"
+       "{" TemplateElement* "}"                             -> TemplateElement {cons("PagedForNoFilter")}
+
+module WebDSL-Styling
+
+%% syntax for styling of WebDSL applications
+imports
+  WebDSL-UI
+  WebDSL-Lexical
+
+exports
+
+  sorts
+    Name StNum String UnaryOperator
+
+  lexical syntax
+    [a-zA-Z\_][a-zA-Z0-9\_\-]*			-> Identifier
+    [a-zA-Z][a-zA-Z\-\_]+          		-> ValueName
+    [a-z][a-z\-]+           	   		-> Value
+    [a-f0-9][a-f0-9][a-f0-9][a-f0-9]* 		-> Hex
+    [a-z\%]+                       		-> Unit
+%%    [0-9]+                			-> StNum
+%%    [0-9]* "." [0-9]+     			-> StNum
+    "'" ~[\"\n]* "'"               		-> String
+%%    [\-\+] StNum				-> StNumber
+
+  lexical syntax
+    [a-zA-Z][a-zA-Z0-9\_]*		 -> MatchIdent
+%%    [a-zA-Z][a-zA-Z0-9\_]*[\*]? -> MatchIdent
+%%    [\*]                        -> MatchIdent
+%%    [\*]                        -> StWildCardArg 
+
+  lexical restrictions
+    ValueName 	-/- [a-zA-Z\-\_]
+    Value 	-/- [a-z\-]
+    Unit 	-/- [a-z\%]
+    Hex 	-/- [a-f0-9]
+
+exports
+
+  sorts
+     StNumber
+
+  lexical syntax
+    Float		      -> StNum
+    SignedInteger	      -> StNum
+    StNum                     -> StNumber
+    StNum "%"                 -> Percentage {prefer}
+    StNum "em"                -> Ems {prefer}
+    StNum "ex"                -> Exs {prefer}
+    StNum "px"                -> Length {prefer}
+    StNum "cm"                -> Length {prefer}
+    StNum "mm"                -> Length {prefer}
+    StNum "in"                -> Length {prefer}
+    StNum "pt"                -> Length {prefer}
+    StNum "pc"                -> Length {prefer}
+    StNum "deg"               -> Angle {prefer}
+    StNum "rad"               -> Angle {prefer}
+    StNum "grad"              -> Angle {prefer}
+    StNum "ms"                -> Time {prefer}
+    StNum "s"                 -> Time {prefer}
+    StNum "hz"                -> Freq {prefer}
+    StNum "khz"               -> Freq {prefer}
+%%    StNum Id                  -> Dimension {prefer}
+
+context-free syntax
+
+  "theme" Modifier Id "(" ")" "{" StyleDeclaration* "}" -> Definition {cons("ThemeDefinition"), prefer}
+
+context-free syntax %% Styling syntax
+
+  "style" Id StyleDefinition*        -> Section {cons("StyleSection"), prefer}
+
+  Selector "{" StyleStatement* "}"   -> StyleDefinition {cons("StyleDefinition")}
+
+context-free syntax %% selectors
+
+  SimpleSelector
+    (Combinator SimpleSelector SelectorAttribute?)* -> Selector {cons("Selector")}
+
+  Id MatchDefinition 			-> SimpleSelector {cons("SimpleSelector")}
+  "#" Identifier			-> SimpleSelector {cons("IdSimpleSelector")}
+  Id					-> SimpleSelector {cons("ElemSimpleSelector")}
+  Id SelectorAttribute+		-> SimpleSelector {cons("ElemSimpleAttrSelector"), prefer}
+  Id "." Identifier	SelectorAttribute+		-> SimpleSelector {cons("ElemClassAttrSelector"), prefer}
+  "." Identifier 			-> SimpleSelector {cons("ClassSimpleSelector")}  
+  MatchDefinition       		-> SimpleSelector {cons("SimpleSelector")}
+  "*"			        	-> SimpleSelector {cons("UniversalSimpleSelector")}
+  
+  ":" ValueName				-> SelectorAttribute {cons("SelectorAttribute")}
+  
+  ">"                   		-> Combinator {cons("ChildCombinator")}
+  ">>"                   		-> Combinator {cons("DescendantCombinator"), prefer}
+
+  MatchIdent "(" MatchDefinitionArgs ")"		-> MatchDefinition {cons("MatchDefinition")}
+  {FormalArg ","}*                                      -> MatchDefinitionArgs
+
+  "const" Id ":" StyleSort ";" 				-> StyleVarDecl {cons("StyleVarDecl")}
+  "const" Id ":" StyleSort ":=" StyleExpression ";" 	-> StyleVarDecl {cons("StyleVarDeclInit")}
+  
+  StyleVarDecl						-> StyleDefinition
+  
+  StyleProperty ":=" StyleExpression ";"      	        -> StyleStatement {cons("StyleDeclaration")}
+%%  StylePropertyLocal ":=" StyleProperty ";"    	-> StyleStatement {cons("StyleDeclaration")}
+
+  ValueName						-> StyleProperty {cons("StyleProperty")}
+
+  MatchDefinition "." StyleProperty			-> StyleExpression {cons("StylePropertyValue")}
+
+  Id 							-> StyleExpression {cons("StyleVar")}
+
+  StyleValue 						-> StyleExpression
+%%  StyleValues -> StyleExpression
+
+  "(" Selector ")" "." StyleProperty 			-> StyleExpression {cons("StyleValueExpression")}
+
+  StyleExpression "+" StyleExpression 			-> StyleExpression {cons("StyleAdd"),assoc}
+  StyleExpression "-" StyleExpression 			-> StyleExpression {cons("StyleSub"),assoc}
+  StyleExpression "*" StyleExpression 			-> StyleExpression {cons("StyleMul"),assoc}
+  StyleExpression "/" StyleExpression 			-> StyleExpression {cons("StyleDiv"),assoc}
+
+  StNumber Unit 					-> StyleValue {cons("StyleValue")}
+  StNumber 						-> StyleValue {cons("StyleValue")}
+  StyleSort StyleValueExtension+			-> StyleValue {cons("StyleValue")}
+  Uri 							-> StyleValue {cons("StyleValue")}
+  Hash 							-> StyleValue {cons("StyleValue")}
+  Value		 					-> StyleValue {cons("StyleValue"), prefer}
+  String	 					-> StyleValue {cons("StyleValue")}
+  
+  "." ValueName						-> StyleValueExtension {cons("StyleValueExtension") }
+
+%%  {StyleValue "|"}* -> StyleValue {cons("StyleValueOptions") }
+
+  Id Unit 						-> StyleSort {cons("StyleSort")}
+  Id							-> StyleSort {cons("StyleSort")}
+
+  "url" "(" String ")"    				-> Uri {cons("Uri")}
+  "#" Hex                 				-> Hash {cons("Hash")}
+
+  "const" 	-> Id {reject}  
+%%  "layout" 	-> Id {reject}
+%%  "style" 	-> Id {reject}
+%%  "theme" 	-> Id {reject}
+
+context-free priorities
+  
+  {left:
+       StyleExpression "*" StyleExpression -> StyleExpression
+       StyleExpression "/" StyleExpression -> StyleExpression }
+  > {left:
+       StyleExpression "+" StyleExpression -> StyleExpression
+       StyleExpression "-" StyleExpression -> StyleExpression}
+
+context-free syntax %% Layout syntax
+
+  "layout" LayoutDefinition* 				-> Section {cons("LayoutSection"), prefer}
+
+  Id MatchDefinition "{" LayoutStatement* "}"   	-> LayoutDefinition {cons("LayoutDefinition")}
+  MatchDefinition "{" LayoutStatement* "}"   		-> LayoutDefinition {cons("LayoutDefinition")}
+  
+  StyleDefinition					-> LayoutDefinition
+%%  StyleStatement					-> LayoutStatement
+  
+  "float" "{" MatchDefinition* "}" ";"			-> LayoutStatement {cons("FloatStatement")}
+  
+  LayoutExpression ";"                                  -> LayoutStatement {cons("LayoutStatement")}
+  Id ":" "[" LayoutExpressions "]"     		        -> LayoutExpression {cons("NamedLayoutExpression")}
+  {LayoutExpression "|"}+				-> LayoutExpressions
+  Id			 				-> LayoutExpression {cons("LayoutExpression")}
+  MatchDefinition 					-> LayoutExpression {cons("LayoutExpression")}
+
+module WebDSL-Enums
+
+imports
+  WebDSL-DataModel
+  WebDSL-Lexical
+
+exports
+  sorts Defintion EnumValue
+
+  context-free syntax
+
+  "enum" Id "{" {EnumValue ","}* "}"                    -> Definition {cons("Enum")}
+
+  Id "(" String ")"                               -> EnumValue {cons("EnumValue")}
+
+module WebDSL-Regex
+
+
+exports
+%%d  context-free start-symbols
+%%d    PatternDecl Pattern
+  sorts Pattern PatternDecl Exp
+  context-free syntax
+    RegexExp "." Id "(" {Exp ","}* ")"  -> Exp {cons("Call")} %% always used with a call, regex directly as exp results in ambiguity with xml embedding
+
+    "/" Pattern "/"            -> RegexExp { cons("RegexPattern") }
+    Branche                    -> Pattern {cons("SingleBranch")}
+    Pattern "|" Pattern        -> Pattern {cons("TupleBranch"), right, prefer}
+
+
+  sorts Branche
+  context-free syntax
+    Piece+                     -> Branche {cons("Pieces")}
+
+  sorts Piece
+  context-free syntax
+    Atom                       -> Piece {cons("SingleAtom")}
+    Atom Quantifier            -> Piece {cons("QuantifiedAtom")}
+
+  sorts Quantifier
+  context-free syntax
+   "{" Integer "}"              -> Quantifier {cons("GreedyExactBound")}
+   "{" Integer "," "}"          -> Quantifier {cons("GreedyLowerBound")}
+   "{" Integer "," Integer "}"  -> Quantifier {cons("GreedyLowerUpperBound")}
+   "?"                          -> Quantifier {cons("GreedyOnceOrNot")}
+   "*"                          -> Quantifier {cons("GreedyZeroOrMore")}
+   "+"                          -> Quantifier {cons("GreedyOneOrMore")}
+   "{" Integer "}?"             -> Quantifier {cons("ReluctantExactBound")}
+   "{" Integer "," "}?"         -> Quantifier {cons("ReluctantLowerBound")}
+   "{" Integer "," Integer "}?" -> Quantifier {cons("ReluctantLowerUpperBound")}
+   "??"                         -> Quantifier {cons("ReluctantOnceOrNot")}
+   "*?"                         -> Quantifier {cons("ReluctantZeroOrMore")}
+   "+?"                         -> Quantifier {cons("ReluctantOneOrMore")}  
+   "{" Integer "}+"             -> Quantifier {cons("PossessiveExactBound")}
+   "{" Integer "," "}+"         -> Quantifier {cons("PossessiveLowerBound")}
+   "{" Integer "," Integer "}+" -> Quantifier {cons("PossessiveLowerUpperBound")}
+   "?+"                         -> Quantifier {cons("PossessiveOnceOrNot")}
+   "*+"                         -> Quantifier {cons("PossessiveZeroOrMore")}
+   "++"                         -> Quantifier {cons("PossessiveOneOrMore")}   
+
+  sorts Atom
+  context-free syntax
+    "("   Pattern ")"          -> Atom {cons("Capture")}
+    "(?:" Pattern ")"          -> Atom {cons("NonCapture")}
+    "(?=" Pattern ")"          -> Atom {cons("PositiveLookahead")}
+    "(?!" Pattern ")"          -> Atom {cons("NegativeLookahead")}
+    "(?<=" Pattern ")"         -> Atom {cons("PositiveLookbehind")}
+    "(?<!" Pattern ")"         -> Atom {cons("NegativeLookbehind")}
+    "(?P<" RegexId ">" Pattern ")"  -> Atom {cons("PythonCapture")}
+    "(" Pattern ")@{" RegexId "}"   -> Atom {cons("RegexCapture")}
+    "()"                       -> Atom {cons("Empty")}
+    "."                        -> Atom {cons("SingleCharacter")}
+    "^"                        -> Atom {cons("LineStart")}
+    "$"                        -> Atom {cons("LineEnd")}
+    CharacterClass             -> Atom {cons("CharacterClass")}
+    AtomLiteral                -> Atom {cons("AtomLiteral")}
+    AtomCharacter              -> Atom {cons("AtomCharacter")}
+    "\\Q" AllChars "\\E"       -> Atom {cons("QuotedAtom")}    
+    
+  sorts CharacterClass BracketItem
+  context-free syntax
+    "[" BracketItem+ "]"       -> CharacterClass {cons("BracketList")}
+    "[^" BracketItem+ "]"      -> CharacterClass {cons("NegatedBracketList")}
+%%d "\\p\{" ClassKeyword "\}"   -> CharacterClass {cons("PredefineClass")}
+%%d "\\P\{" ClassKeyword "\}"   -> CharacterClass {cons("NegatedPredefineClass")}
+   
+
+    (BracketLiteral | BracketCharacter)
+     "-" 
+    (BracketLiteral | BracketCharacter)   -> BracketItem {cons("Range")}
+    CharacterClass                        -> BracketItem {cons("Union")}
+%%d "\&\&" CharacterClass                 -> BracketItem {cons("Intersection")}
+    BracketLiteral                        -> BracketItem {cons("BracketLiteral")}
+    BracketCharacter                      -> BracketItem {cons("BracketCharacter")}
+   
+
+%%
+ %%   Defining characterclasses
+  %% 
+sorts ClassKeyword
+  context-free syntax    
+    "Lower"                    -> ClassKeyword {cons("LowerClass")}
+    "Upper"                    -> ClassKeyword {cons("UpperClass")}
+    "ASCII"                    -> ClassKeyword {cons("ASCIIClass")}
+    "Alpha"                    -> ClassKeyword {cons("AlphaClass")}
+    "Digit"                    -> ClassKeyword {cons("DigitClass")}
+    "Alnum"                    -> ClassKeyword {cons("AlnumClass")}
+    "Punct"                    -> ClassKeyword {cons("PunctClass")}
+    "Graph"                    -> ClassKeyword {cons("GraphClass")}
+    "Print"                    -> ClassKeyword {cons("PrintClass")}
+    "Blank"                    -> ClassKeyword {cons("BlankClass")}
+    "Cntrl"                    -> ClassKeyword {cons("CntrlClass")}
+    "XDigit"                   -> ClassKeyword {cons("XDigitClass")}
+    "Space"                    -> ClassKeyword {cons("WhiteSpace")}
+    "javaLowerCase"            -> ClassKeyword {cons("JavaIsLowerCase")}
+    "javaUpperCase"            -> ClassKeyword {cons("JavaIsLowerCase")}
+    "javaWhitespace"           -> ClassKeyword {cons("JavaIsWhitespace")}
+    "javaMirrored"             -> ClassKeyword {cons("JavaIsMirrored")}
+    "InGreek"                  -> ClassKeyword {cons("GreekBlock")}
+    "Lu"                       -> ClassKeyword {cons("UppercaseLetter")}
+    "Sc"                       -> ClassKeyword {cons("CurrencySymbol")}
+
+%%
+ %%   Defining the Character -> Characters that appear as Atom and in Brackets  
+  %%   
+
+%%  ASCII characters:  
+%%  $*+?.{}()                             %% OnlyBranchSpecial
+%%  &]-                                   %% OnlyClassSpecial
+%%  [^\                                   %% AlwaysSpecial
+%%  !"#%',/:;<=>@_`~                      %% NeverSpecialCharacter
+%%  ABCDEFGHIJKLMNOPQRSTUVWXYZ            %% Character
+%%  abcdefghijklmnopqrstuvwxyz            %% Charater
+%%  0123456789                            %% Charater
+%%  <tab> <newline> <return> <form-feed>  %% SpecialEscapeCharacter
+
+
+  sorts BracketLiteral AtomLiteral AllChars
+  lexical syntax
+    [a-zA-Z0-9\!\#\%\'\,\:\;\<\=\>\@\_\`\~\$\*\+\?\.\}\|]
+                                                  -> BracketLiteral
+    "/"                                           -> BracketLiteral 
+    [\&\]\-]                                      -> BracketLiteral {reject}
+    [a-zA-Z0-9\!\#\%\'\,\:\;\<\=\>\@\_\`\~\&\]\-]
+                                                  -> AtomLiteral
+    "/"                                           -> AtomLiteral 
+    [\}\)\|\[]                                    -> AtomLiteral {reject}
+    
+    [\\\|\$\*\+\?\.\{\}\(\)\&\]\-\[\^\!\#\%\'\,\:\;\<\=\>\@\_\`\~a-zA-Z0-9\t\n\r]*              
+          -> AllChars
+    "/"   -> AllChars
+    "\""  -> AllChars {cons("DoubleQuote") } 
+      
+  sorts BracketCharacter AtomCharacter
+  context-free syntax
+%%d    "\{"                -> BracketCharacter {cons("CurlyBraceOpen") }
+%%d    "\{"                -> AtomCharacter    {cons("CurlyBraceOpen"), avoid}
+    "\""                -> BracketCharacter {cons("DoubleQuote") }
+    "\""                -> AtomCharacter    {cons("DoubleQuote") }
+%%d    "\)"                -> BracketCharacter {cons("BraceClose"), avoid }
+%%d    "\)"                -> AtomCharacter    {cons("BraceClose") }
+
+
+%%
+ %%   Escaping with a '\' to express a special character
+  %%
+  context-free syntax
+    "\\0" OctalValue       -> BracketCharacter {cons("OctalChar")}
+    "\\x" TwoHexValue      -> BracketCharacter {cons("HexHexChar")}
+    "\\u" FourHexValue     -> BracketCharacter {cons("DecHexChar")}
+    "\\t"                  -> BracketCharacter {cons("Tab")}
+    "\\n"                  -> BracketCharacter {cons("Newline")}
+    "\\r"                  -> BracketCharacter {cons("Return")}
+    "\\f"                  -> BracketCharacter {cons("Formfeed")}
+    "\\a"                  -> BracketCharacter {cons("Alarm")}
+    "\\e"                  -> BracketCharacter {cons("Escape")}
+    "\\w"                  -> BracketCharacter {cons("WordChar")}
+    "\\W"                  -> BracketCharacter {cons("NonWordChar")}
+    "\\s"                  -> BracketCharacter {cons("WhiteSpaceChar")}
+    "\\S"                  -> BracketCharacter {cons("NonWhiteSpaceChar")}
+    "\\d"                  -> BracketCharacter {cons("DigitChar")}
+    "\\D"                  -> BracketCharacter {cons("NonDigitChar")}
+    "\\c" ControlValue     -> BracketCharacter {cons("ControlCharacter")}
+    "\\b"                  -> BracketCharacter {cons("WordBoundry")}
+    "\\B"                  -> BracketCharacter {cons("NonWordBoundry")}
+    "\\A"                  -> BracketCharacter {cons("InputBeginBoundry")}
+    "\\G"                  -> BracketCharacter {cons("PrevMatchEndBoundry")}
+    "\\Z"                  -> BracketCharacter {cons("EndInputBoundry")}
+    "\\z"                  -> BracketCharacter {cons("EndInputFinalBoundry")}
+    "\\" BackReference     -> BracketCharacter {cons("BackReference")}
+    "\\ "                  -> BracketCharacter {cons("Space")}
+    "\\\t"                 -> BracketCharacter {cons("Tab")}
+%%d    "\\\r"                 -> BracketCharacter {cons("Return")}
+    "\\\n"                 -> BracketCharacter {cons("Newline")}
+    
+    "\\0" OctalValue       -> AtomCharacter {cons("OctalChar")}
+    "\\x" TwoHexValue      -> AtomCharacter {cons("HexHexChar")}
+    "\\u" FourHexValue     -> AtomCharacter {cons("DecHexChar")}
+    "\\t"                  -> AtomCharacter {cons("Tab")}
+    "\\n"                  -> AtomCharacter {cons("Newline")}
+    "\\r"                  -> AtomCharacter {cons("Return")}
+    "\\f"                  -> AtomCharacter {cons("Formfeed")}
+    "\\a"                  -> AtomCharacter {cons("Alarm")}
+    "\\e"                  -> AtomCharacter {cons("Escape")}
+    "\\w"                  -> AtomCharacter {cons("WordChar")}
+    "\\W"                  -> AtomCharacter {cons("NonWordChar")}
+    "\\s"                  -> AtomCharacter {cons("WhiteSpaceChar")}
+    "\\S"                  -> AtomCharacter {cons("NonWhiteSpaceChar")}
+    "\\d"                  -> AtomCharacter {cons("DigitChar")}
+    "\\D"                  -> AtomCharacter {cons("NonDigitChar")}
+    "\\c" ControlValue     -> AtomCharacter {cons("ControlCharacter")}
+    "\\b"                  -> AtomCharacter {cons("WordBoundry")}
+    "\\B"                  -> AtomCharacter {cons("NonWordBoundry")}
+    "\\A"                  -> AtomCharacter {cons("InputBeginBoundry")}
+    "\\G"                  -> AtomCharacter {cons("PrevMatchEndBoundry")}
+    "\\Z"                  -> AtomCharacter {cons("EndInputBoundry")}
+    "\\z"                  -> AtomCharacter {cons("EndInputFinalBoundry")}
+    "\\" BackReference     -> AtomCharacter {cons("BackReference")}
+    "\\ "                  -> AtomCharacter {cons("Space")}
+    "\\\t"                 -> AtomCharacter {cons("Tab")}
+%%d    "\\\r"                 -> AtomCharacter {cons("Return")}
+    "\\\n"                 -> AtomCharacter {cons("Newline")}
+    
+%%
+ %%   Quoting of symbols is always allowed to express that symbol
+  %%
+  sorts QuotablePatternSymbol
+  context-free syntax
+    "\\" QuotablePatternSymbol            -> AtomCharacter {cons("Quoted")}
+    "\\" QuotablePatternSymbol            -> BracketCharacter {cons("Quoted")}    
+  lexical syntax
+    [\|\$\*\+\?\.\{\}\(\)\&\]\[\-\^\\\!\#\%\'\,\:\;\<\=\>\@\_\`\~\/]
+                                   -> QuotablePatternSymbol
+  context-free syntax
+    "\""                -> QuotablePatternSymbol {cons("DoubleQuote") }
+    "\""                -> QuotablePatternSymbol {cons("DoubleQuote") }    
+%%
+ %%   Defining integers and number values
+  %% 
+  sorts Integer OctalValue TwoHexValue FourHexValue BackReference ControlValue
+  lexical syntax      
+    [0-9]+                                       -> Integer
+    [1-9] [0-9]*                                 -> BackReference
+    [0-7]                                        -> OctalValue
+    [0-7][0-7]                                   -> OctalValue
+    [0-3][0-7][0-7]                              -> OctalValue
+    [0-9A-Fa-f][0-9A-Fa-f]                       -> TwoHexValue
+    [0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f] -> FourHexValue
+    [0-9]                                        -> ControlValue
+    [0-9][0-9]                                   -> ControlValue
+
+%%d  lexical restrictions
+%%d    "/"  -/- [\]]
+%%d    "\\" -/- [\ \t\12\n\r]   
+    
+    
+exports
+  sorts
+    RegexId
+    RegexID
+
+  context-free syntax
+    RegexID -> RegexId {cons("RegexId")}
+
+  lexical syntax
+    [A-Za-z\_\$][A-Za-z0-9\_\$]* -> RegexID
+    
+    "true"  -> RegexID {reject}
+    "false" -> RegexID {reject}
+    "null"  -> RegexID {reject}
+
+  lexical restrictions
+    RegexID -/- [a-zA-Z0-9\_\$]
+
+module WebDSL-JavaScript
+  
+exports 
+  sorts TemplateElement
+  context-free syntax
+    "<" "script" Attribute* ">" 
+    %%todo: should be javascript embedding
+    JSPart*
+    "</" "script" ">"
+    -> TemplateElement { cons("JSElement"), prefer}
+  
+  JSString -> JSPart{cons("JSString")}
+  "~" Exp -> JSPart{cons("JSExp"), prefer}
+  "\\~" -> JSPart{cons("JSTilde"), prefer}
+
+  sorts JSChar JSString
+  lexical syntax
+  JSChar+ -> JSString
+  ~[\<\~]                        -> JSChar
+  SmallerThan                  -> JSChar
+  [\<]                         -> SmallerThan
+
+  lexical restrictions
+    SmallerThan   -/- [\/]
+    JSString -/- [\ \t\n\r]
+    JSString -/- ~[\<\~]
+
+module WebDSL-XML
+  
+exports
+  context-free syntax
+  
+    "<" QualName Attribute* "/>" -> TemplateElement {cons("XMLEmptyElement")}
+    
+    "<" QualName Attribute* ">"
+      TemplateElement*
+      "</" QualName ">" -> TemplateElement {cons("XMLElement")}
+
+  context-free syntax %% if(){} and if(){}else{} inside an XML element containing a list of attributes
+
+    "if" "(" Exp ")" "{" Attribute* "}"		          -> Attribute {cons("XMLAttributesIf")}
+    "if" "(" Exp ")" "{" Attribute* "}" "else" "{" Attribute* "}" -> Attribute {cons("XMLAttributesIfElse")}
+
+  context-free syntax
+
+    QualName "=" Exp -> Attribute {cons("Attribute")}
+    
+    %%easy injection of attributes from template call
+    CommonAttribute -> Attribute
+    "all attributes"  -> CommonAttribute {cons("AllAttributes")}
+    "all attributes except" Exp        -> CommonAttribute {cons("AllAttributeExceptExp")}
+    "attributes" Exp        -> CommonAttribute {cons("AttributesExp")}
+    
+    "attributes" -> KEYWORD
+    
+exports
+
+  lexical syntax
+    Qualifier? NCName -> QualName    
+    NCName ":"        -> Qualifier
+
+  
+    [A-Za-z\_] [A-Za-z0-9\.\-\_]* -> NCName
+
+  lexical restrictions
+    NCName -/- [A-Za-z0-9\.\-\_]
+
+module WebDSL-AccessControl
+
+imports
+  WebDSL-UI
+  WebDSL-Action
+  WebDSL-DataModel
+  WebDSL-Lexical
+
+%% syntax for access control  
+exports
+
+  sorts MatchId
+
+  lexical syntax
+    [a-zA-Z][a-zA-Z0-9\_]*[\*]? -> MatchId
+    [\*]                        -> MatchId
+    [\*]                        -> WildCardArg 
+
+context-free syntax
+
+  "access" "control" "rules" Id? AccessControlDefinition*  -> Section {cons("AccessControlDefinition")}
+  %%deprecated: 
+  "access" "control" "rules" "{" Id? AccessControlDefinition* "}"  -> Section {cons("AccessControlDefinition")}
+  
+  "principal" "is" Id "with" "credentials" {Id ","}+            -> Definition {cons("AccessControlPrincipal")} 
+  "principal" "is" Id "with" "credentials" {Id ","}+            -> AccessControlDefinition {cons("AccessControlPrincipal")} 
+  
+  AccessControlRule                                             -> AccessControlDefinition
+ 
+  "rule" Id MatchId "(" MatchArgs ")"
+  "{" AccessControlCheck AccessControlRule* "}"                 -> AccessControlRule {cons("AccessControlRule")}
+  %%deprecated:
+  "rules" Id MatchId "(" MatchArgs ")"
+  "{" AccessControlCheck AccessControlRule* "}"                 -> AccessControlRule {cons("AccessControlRule")}
+
+  {FormalArg ","}* WildCardArg?                                 -> MatchArgs {cons("MatchArgs"),prefer}
+  {Exp ","}* WildCardArg?                                       -> MatchArgs {cons("MatchArgs")}
+
+  %% to prevent an AccessControlRule becoming an AccessControlCheck
+  "rules"                                                       -> Exp {reject}
+
+  Exp                                                           -> AccessControlCheck
+  
+  %% pagecheck
+  %%"pagecheck" "<" Id "," Exp ">"  -> TemplateElement {cons("PageCheck"),prefer}
+  %%"pagecheck" "(" Id "," Exp ")"  -> TemplateCall {reject}
+  %%"pagecheck" "(" {Exp ","}* ")"                          -> TemplateCall {reject}
+  
+  "predicate" Id "(" {FormalArg ","}* ")" "{" Exp "}"           -> Definition {cons("Predicate")}
+  "predicate" Id "(" {FormalArg ","}* ")" "{" Exp "}"           -> AccessControlDefinition {cons("Predicate")}
+  
+  Id MatchId "(" {Id ","}* WildCardArg? ")"                     -> AccessControlPointcutElement {cons("AccessControlPointcutElement")}
+  
+  "pointcut" Id "(" {FormalArg ","}* ")"
+    "{" {AccessControlPointcutElement ","}* "}"                 -> AccessControlPointcut {cons("AccessControlPointcut")}
+  
+  AccessControlPointcut                                         -> AccessControlDefinition
+  
+  %%construct to import checks of another page or template, necessary for easily applying ac rules to lifted templates
+  "apply ac rules" Id "(" {AccessControlImportRulesArg ","}* ")" -> TemplateElement {cons("AccessControlImportRules"), prefer}
+  Id -> AccessControlImportRulesArg {cons("Var")} %%only vars supported, enough for current usage, see languages/access-control/access-control.str
+  
+context-free syntax  
+  
+  "access" "control" "policy" PolicyExp                         -> Section {cons("ACPolicy")}
+  
+  Id                                 -> PolicyExp {cons("Name")}
+  "(" PolicyExp ")"                  -> PolicyExp {bracket}
+  PolicyExp "AND" PolicyExp          -> PolicyExp {cons("PolicyAnd"), assoc}
+  PolicyExp "OR" PolicyExp           -> PolicyExp {cons("PolicyOr"), assoc}
+  
+  
+  %% hack for allowing multiple function checks to be added in different stages to a function call
+  %%"acfunctioncheck" "(" Id "," Exp ")" Exp -> Exp {cons("ACFunctionCheck"), prefer}
+  
+context-free priorities
+  {left:
+       PolicyExp "AND" PolicyExp -> PolicyExp}
+  > {left:
+       PolicyExp "OR" PolicyExp -> PolicyExp}
+
+context-free priorities
+    Exp "in" Exp  -> Exp
+  > Exp -> AccessControlCheck
+
+context-free syntax
+  
+  "ignore-access-control" -> Modifier {cons("IgnoreAccessControl")}
+
+module WebDSL-DataValidation
+
+exports
+
+  context-free syntax
+
+    "validatecreate" "(" Exp "," Exp ")" -> Annotation {cons("ValidateCreateAnno"),prefer}
+    "validateupdate" "(" Exp "," Exp ")" -> Annotation {cons("ValidateUpdateAnno"),prefer}
+    "validatedelete" "(" Exp "," Exp ")" -> Annotation {cons("ValidateDeleteAnno"),prefer}
+    "validate" "(" Exp "," Exp ")" -> Annotation {cons("ValidateAnno"),prefer}
+    Id ":" "validate" "(" Exp "," Exp ")" -> Annotation {cons("NamedValidateAnno"),prefer}
+    
+    ValidateEntity -> EntityBodyDeclaration
+    "validate" "(" Exp "," Exp ")" -> ValidateEntity {cons("ValidateEntity"),prefer}
+    
+    "validate" "(" Exp "," Exp ")" ";" -> Statement {cons("ValidateStatement"),prefer}
+    Id ":" "validate" "(" Exp "," Exp ")" ";" -> Statement {cons("NamedValidateStatement"),prefer}
+    
+    "validationErrors" "(" Id ")" -> TemplateCall {cons("ValidationErrors"),prefer}
+    "validationErrors" "(" ")" -> TemplateCall {cons("ValidationErrors"),prefer}
+    
+    
+    "validationContext" "{" TemplateElement* "}" -> TemplateCall {cons("ValidationContext"),prefer}
+    "validationContext" "{" TemplateElement* "}" -> TemplateCall {reject}
+
+module WebDSL-DataModel
+
+imports
+  WebDSL-Action
+  WebDSL-Lexical
+
+exports
+
+  context-free syntax
+
+    "globals" "{" GlobalsDef* "}"                        -> Definition {prefer,cons("GlobalsDefinition"),deprecated("'globals{ }' block is no longer necessary around global variables and functions")}
+
+    "entity" Id ":" Id "{" EntityBodyDeclaration* "}"       -> Entity {cons("Entity")}
+    "entity" Id "{" EntityBodyDeclaration* "}"              -> Entity {cons("EntityNoSuper")}
+    "session" Id "{" EntityBodyDeclaration* "}"             -> Entity {cons("SessionEntity")}
+    Property -> EntityBodyDeclaration
+    Function -> EntityBodyDeclaration
+
+    Entity                                   		     -> Definition
+
+    "extend" "entity" Id "{" EntityBodyDeclaration* "}"	 -> Definition {cons("ExtendEntity")}
+    "extend" "session" Id "{" EntityBodyDeclaration* "}"   -> Definition {cons("ExtendSessionEntity")}
+
+exports
+
+  sorts Entity Property Sort Annotation
+
+  context-free syntax
+
+    "request" VarDecl -> Definition {cons("RequestScope")}
+    VarDecl                                              -> GlobalsDef
+    %% still allow ";" behind global var for backwards comp., remove VarDeclStat-> GlobalsDef to disallow
+    VarDeclStat                                          -> GlobalsDef
+    Function                                             -> GlobalsDef
+    GlobalsDef                                           -> Definition
+    InitAction                                           -> Definition
+
+exports
+
+  sorts Property Annotation
+
+  context-free syntax
+
+    Id PropKind Sort "(" {Annotation ","}* ")" -> Property {cons("Property")}
+    Id PropKind Sort                           -> Property {cons("PropertyNoAnno")}
+
+    Id PropKind Sort "(" {Annotation ","}* ")" ":=" Exp -> Property {cons("DerivedProperty")}
+    Id PropKind Sort ":=" Exp                           -> Property {cons("DerivedPropertyNoAnno")}
+
+
+    "::" -> PropKind {cons("Simple")}
+    "->" -> PropKind {cons("Ref")}
+    "<>" -> PropKind {cons("Comp")}
+
+  sorts Sort
+
+  context-free syntax
+
+%% explicit syntax makes the annotations highlighted as keyword in the editor
+%% removed generic SingleParamAnno due to http://yellowgrass.org/issue/StrategoXT/825
+
+    Id                           -> Annotation {cons("SimpleAnno")}
+    "inverse" "=" Id "." Id      -> Annotation {cons("InverseAnno")}
+    "inverseSlave" "=" Id "." Id -> Annotation {cons("InverseSlaveAnno")}
+    "inline" "(" {Id ","}* ")"   -> Annotation {cons("InlineAnno")}
+    "select" "=" Id              -> Annotation {cons("SelectAnno")}
+    "not null"                   -> Annotation {cons("NotNullAnno")}
+    "not empty"                  -> Annotation {cons("NotEmptyAnno")}
+    "allowed" "=" Exp            -> Annotation {cons("AllowedAnno")}
+    "default" "=" Exp            -> Annotation {cons("DefaultAnno")}
+    "length" "=" Int             -> Annotation {cons("LengthAnno")}
+    "format" "=" String          -> Annotation {cons("FormatAnno")}
+    "index" "(" ")"              -> Annotation {cons("IndexAnno")}
+    "index" "(" Int ")"          -> Annotation {cons("IndexAnno")}
+    "collation" "(" Id ")"       -> Annotation {cons("CollationAnno")}
+
+module HQL
+
+hiddens
+  context-free start-symbols QueryRule Statement
+  
+exports
+  lexical syntax
+    [a-zA-Z\_][a-zA-Z0-9\_]* -> Identifier
+  lexical restrictions
+    Identifier -/- [a-zA-Z0-9\_]
+    "from" -/- [a-zA-Z0-9\_]
+    "select" -/- [a-zA-Z0-9\_]
+    
+  context-free syntax
+   
+    "from" | "select" | "by" | "order" -> Identifier {reject}
+    
+exports
+
+  sorts Statement UpdateStatement DeleteStatement SelectStatement InsertStatement
+  
+  context-free syntax
+
+    "delete" FromClause WhereClause? -> DeleteStatement {cons("DeleteStatement")}
+    
+    SelectStatement -> Statement
+
+    QueryRule -> SelectStatement
+
+    QueryRule "union" QueryRule -> Union {cons("QueryUnion")}
+
+    SelectFrom WhereClause? GroupByClause? OrderByClause? -> QueryRule {cons("QueryRule")}
+    
+    SelectClause? FromClause -> SelectFrom {cons("SelectFrom")}
+    
+    "select" Distinct? Selection -> SelectClause {cons("Select")}
+
+    "distinct"                   -> Distinct {cons("Distinct")}
+    
+    SelectedPropertiesList -> Selection
+    NewExpression          -> Selection
+    SelectObject           -> Selection
+
+    QueryRule              -> Expression {avoid}
+    
+  "new" Path "(" SelectedPropertiesList ")" -> NewExpression {cons("NewExpression")}
+  
+  "object" "(" Identifier ")" -> SelectObject {cons("SelectObject")}
+  
+    "from" {FromRangeJoin ","}+ -> FromClause {cons("FromClause")}
+    
+    FromRange FromJoin? -> FromRangeJoin {cons("FromRangeJoin")}
+    
+    "left"          -> JoinType {cons("LeftJoin")}
+    "right"         -> JoinType {cons("RightJoin")}
+    "left"  "outer" -> JoinType {cons("LeftOuterJoin")}
+    "right" "outer" -> JoinType {cons("RightOuterJoin")}
+    "full"          -> JoinType {cons("FullJoin")}
+    "inner"         -> JoinType {cons("InnerJoin")}
+    
+    JoinType? "join" Fetch? Path AsAlias? PropertyFetch? WithClause? -> FromJoin {cons("FromJoin")}
+    
+    "fetch" -> Fetch {cons("Fetch")}
+        
+  "with" Expression -> WithClause {cons("WithClause")}
+  
+    FromClassOrOuterQueryPath       -> FromRange
+    InClassDeclaration              -> FromRange
+    InCollectionDeclaration         -> FromRange
+    InCollectionElementsDeclaration -> FromRange
+    
+    Path AsAlias? PropertyFetch? -> FromClassOrOuterQueryPath {cons("FromClass")}
+    
+    Alias "in" "class" Path -> InClassDeclaration {cons("InClassDeclaration")}
+    
+    "in" "(" Path ")" Alias -> InCollectionDeclaration {cons("InCollection")}
+    
+    Alias "in" "elements" "(" Path ")" -> InCollectionElementsDeclaration {cons("InCollectionElements")}
+
+    "as" Alias -> AsAlias {cons("AsAlias")}
+  
+    Identifier -> Alias {cons("Alias")}
+  
+  
+    "fetch" "all" "properties" -> PropertyFetch {cons("PropertyFetch")}
+    
+    "group" "by" {Expression ","}+ HavingClause? -> GroupByClause {cons("GroupBy")}
+    
+    "order" "by" {OrderElement ","}+ -> OrderByClause {cons("OrderByClause")}
+    
+    Expression AscendingOrDescending? -> OrderElement {cons("OrderElement")}
+    
+   "asc"       -> AscendingOrDescending {cons("Ascending")}
+   "ascending" -> AscendingOrDescending {cons("Ascending")}
+   
+   "desc"      -> AscendingOrDescending {cons("Descending")}
+   "descending" -> AscendingOrDescending {cons("Descending")}
+   
+    "having" Expression -> HavingClause {cons("HavingClause")}
+    
+    "where" Expression -> WhereClause {cons("WhereClause")}
+    
+    { AliasedExpression ","}+ -> SelectedPropertiesList {cons("SelectedPropertiesList")}
+    
+    %%QuotedAliasedExpression -> OptionallyQuotedAliasedExpression
+    %%AliasedExpression       -> OptionallyQuotedAliasedExpression
+    
+    "'" Expression AsAlias? "'" -> QuotedAliasedExpression {cons("QuotedAliasedExpression")}
+    Expression AsAlias? -> AliasedExpression {cons("AliasedExpression")}
+    
+   Expression "or" Expression -> Expression {cons("QueryOr")}
+   
+    Expression "and" Expression -> Expression {cons("QueryAnd")}
+    
+    "not" Expression -> Expression {cons("QueryNot")}
+    
+    Expression "=" Expression -> Expression {cons("EQ")}
+    Expression "is" Expression -> Expression {cons("IS")}
+    Expression "!=" Expression -> Expression {cons("NE")}
+    Expression "<>" Expression -> Expression {cons("SQLNE")}
+    Expression "like" Expression -> Expression {cons("LIKE")}
+    Expression "not" "like" Expression -> Expression {cons("NOTLIKE")}
+
+    Expression "<" Expression -> Expression {cons("LT")}
+    Expression ">" Expression -> Expression {cons("GT")}
+    
+    Expression "in" Expression -> Expression {cons("In")}
+    Expression "not" "in" Expression -> Expression {cons("NotIn")}
+    
+    Expression "member" "of" Expression -> Expression {cons("MemberOf")}
+    Expression "not" "member" "of" Expression -> Expression {cons("NotMemberOf")}
+  
+    Expression "||" Expression -> Expression {cons("Concat")}
+    
+    Expression "+" Expression -> Expression {cons("Plus")}
+    Expression "-" Expression -> Expression {cons("Minus")}
+
+    Expression "*" Expression -> Expression {cons("Multiply")}
+    Expression "/" Expression -> Expression {cons("Divide")}
+    
+    "-" Expression -> Expression {cons("UMinus")}
+    
+   lexical syntax 
+     ":" Identifier -> IdParameter 
+     "?" NumInt     -> NumParameter
+   context-free syntax
+     IdParameter -> Expression {cons("IdParam")}
+     NumParameter -> Expression {cons("NumParam")}
+   
+    "avg" "(" Expression ")" -> Expression {cons("Avg")}
+    "sum" "(" Expression ")" -> Expression {cons("Sum")}
+    "min" "(" Expression ")" -> Expression {cons("Min")}
+    "max" "(" Expression ")" -> Expression {cons("Max")}
+    "count" "(" "*" ")" -> Expression {cons("CountStar")}
+    "count" "(" Expression ")" -> Expression {cons("Count")}
+    
+     "elements" "(" Path ")" -> Expression {cons("Elements")}
+     "indices" "(" Path ")" -> Expression {cons("Indices")}
+                     
+     Path                      -> Expression
+     "(" {Expression ","}+ ")" -> Expression {cons("Paren")}
+     
+    Constant -> Expression
+    
+    "true" -> Constant {cons("True")}
+    "false" -> Constant {cons("False")}
+    "empty" -> Constant {cons("Empty")}
+    "null" -> Constant {cons("Null")}
+
+    "true" -> Identifier {reject}
+    "false" -> Identifier {reject}
+    "empty" -> Identifier {reject}
+    "null"  -> Identifier {reject}
+    
+    {Identifier "."}+ -> Path {cons("Path")} 
+    
+  context-free syntax
+    QuotedString -> Constant {cons("String")}
+    
+  lexical syntax
+    "'" (~[\'] | "\\'")* "'" -> QuotedString
+     
+  lexical syntax
+    [0-9]+ -> NumInt
+  context-free syntax
+    NumInt -> Constant
+  
+context-free priorities
+  {left:
+    Expression "*" Expression -> Expression
+    Expression "/" Expression -> Expression
+  }
+  > {left:
+    Expression "+" Expression -> Expression
+    Expression "-" Expression -> Expression
+  }
+  > {left:
+    Expression "<" Expression -> Expression
+    Expression ">" Expression -> Expression
+    Expression "=" Expression -> Expression
+    Expression "is" Expression -> Expression
+    Expression "!=" Expression -> Expression
+    Expression "<>" Expression -> Expression
+    Expression "like" Expression -> Expression 
+    Expression "not" "like" Expression -> Expression
+    }
+  > {left: Expression "or" Expression -> Expression }
+  > {left: Expression "and" Expression -> Expression}
+
+module MixHQL[Ctx0]
+imports 
+        HQL
+          [ Path                            => Path[[Ctx0]]
+            Constant                        => Constant[[Ctx0]]
+            AliasedExpression               => AliasedExpression[[Ctx0]]
+            QuotedAliasedExpression         => QuotedAliasedExpression[[Ctx0]]
+            SelectedPropertiesList          => SelectedPropertiesList[[Ctx0]]
+            WhereClause                     => WhereClause[[Ctx0]]
+            HavingClause                    => HavingClause[[Ctx0]]
+            AscendingOrDescending           => AscendingOrDescending[[Ctx0]]
+            OrderElement                    => OrderElement[[Ctx0]]
+            OrderByClause                   => OrderByClause[[Ctx0]]
+            GroupByClause                   => GroupByClause[[Ctx0]]
+            PropertyFetch                   => PropertyFetch[[Ctx0]]
+            Alias                           => Alias[[Ctx0]]
+            AsAlias                         => AsAlias[[Ctx0]]
+            InCollectionElementsDeclaration => InCollectionElementsDeclaration[[Ctx0]]
+            InCollectionDeclaration         => InCollectionDeclaration[[Ctx0]]
+            InClassDeclaration              => InClassDeclaration[[Ctx0]]
+            FromClassOrOuterQueryPath       => FromClassOrOuterQueryPath[[Ctx0]]
+            FromRange                       => FromRange[[Ctx0]]
+            WithClause                      => WithClause[[Ctx0]]
+            Fetch                           => Fetch[[Ctx0]]
+            FromJoin                        => FromJoin[[Ctx0]]
+            JoinType                        => JoinType[[Ctx0]]
+            FromRangeJoin                   => FromRangeJoin[[Ctx0]]
+            FromClause                      => FromClause[[Ctx0]]
+            SelectObject                    => SelectObject[[Ctx0]]
+            NewExpression                   => NewExpression[[Ctx0]]
+            Selection                       => Selection[[Ctx0]]
+            Distinct                        => Distinct[[Ctx0]]
+            SelectClause                    => SelectClause[[Ctx0]]
+            SelectFrom                      => SelectFrom[[Ctx0]]
+            QueryRule                       => QueryRule[[Ctx0]]
+            Union                           => Union[[Ctx0]]
+            SelectStatement                 => SelectStatement[[Ctx0]]
+            Statement                       => Statement[[Ctx0]]
+            DeleteStatement                 => DeleteStatement[[Ctx0]]
+            NumInt                          => NumInt[[Ctx0]]
+            QuotedString                    => QuotedString[[Ctx0]]
+            NumParameter                    => NumParameter[[Ctx0]]
+            IdParameter                     => IdParameter[[Ctx0]]
+            Identifier                      => Identifier[[Ctx0]]
+            Expression                      => Expression[[Ctx0]] ]
+
+
+module WebDSL-Action
+
+imports
+  WebDSL-Lexical
+  MixHQL[HQL]
+
+exports
+
+  context-free syntax
+  
+    "function" -> Keyword
+    "return"   -> Keyword
+
+  context-free syntax %% Functions
+
+    "function" Id "(" {FormalArg ","}* ")" ":" Sort
+        Block                                            -> Function {cons("Function")}
+
+    "function" Id "(" {FormalArg ","}* ")" 
+        Block                                            -> FunctionNoReturn {cons("FunctionNoReturn")}
+
+    FunctionNoReturn                                     -> Function
+
+    "extend" FunctionNoReturn                            -> Function {cons("ExtendFunction")}
+
+  context-free syntax
+    "{" Statements "}" 		-> Block {cons("Block")}
+    Block              		-> Statement
+    %%Assignment ";"	   	-> Statement {cons("Assign")}
+    Exp ";"		       	-> Statement {cons("Stat")}
+
+    "return" Exp ";"     	-> Statement {cons("Return")}
+    
+    "return" ";"         	-> Statement {cons("ReturnEmpty")}
+    
+    "goto" PageCall ";"       	-> Statement {cons("GoTo"),prefer}
+    "goto" "(" PageCall ")" ";"         -> Statement {cons("GoTo"),prefer}
+    "goto" -> TemplateCallId {reject}
+
+    "schedule" Exp "for" Exp ";" -> Statement {cons("Schedule")}
+    "schedule" Exp ";"           -> Statement {cons("ScheduleNoFor")}
+
+  context-free syntax
+
+    "var" Id ":" Sort ";" 	-> VarDeclStat {cons("VarDecl")}
+    "var" Id ":" Sort 		-> VarDecl {cons("VarDecl")}
+
+    "var" Id ":" Sort ":=" Exp ";" -> VarDeclStat {cons("VarDeclInit")}
+    "var" Id ":=" Exp ";"          -> VarDeclStat {cons("VarDeclInitInferred")}
+    "var" Id ":" Sort ":=" Exp     -> VarDecl {cons("VarDeclInit")}
+    "var" Id ":=" Exp              -> VarDecl {cons("VarDeclInitInferred")}
+
+    VarDeclStat -> Statement
+
+  context-free syntax
+
+    "if" "(" Exp ")" Block "else" Block -> Statement {cons("If")}
+
+    "if" "(" Exp ")" Block 		-> Statement {cons("IfNoElse")}
+
+    "case" "(" Exp ")" "{" Case* "}" 	-> Statement {cons("Case")}
+    ConstValue Block                 	-> Case {cons("CaseAlt")}
+    "default"  Block                 	-> Case {cons("CaseDefault")}
+
+
+  context-free syntax
+
+    "for" "(" Id ":" Sort "in" Exp Filter ")"
+      Block 				-> Statement {cons("ForStmt")}
+
+    "for" "(" Id ":" Sort "in" Exp ")"
+      Block 				-> Statement {cons("ForStmtNoFilter")}
+
+    "for" "(" Id ":" Sort Filter ")"
+      Block 				-> Statement {cons("ForAllStmt")}
+
+    "for" "(" Id ":" Sort ")"
+      Block 				-> Statement {cons("ForAllStmtNoFilter")}
+
+    "for" "(" Id ":" "Int" "from" Exp "to" Exp ")" Block -> Statement {cons("ForCountStmt")}
+
+    "while" "(" Exp ")" Block -> Statement {cons("WhileStmt")}
+
+exports %% Expression language
+
+  sorts ConstValue Exp
+
+  context-free syntax
+    Int                    -> ConstValue {cons("Int")}
+    Long                   -> ConstValue {cons("Long")}
+    Float                  -> ConstValue {cons("Float")}
+    String                 -> ConstValue {cons("String")}
+
+    ConstValue                  -> Exp
+
+    Id			   -> Exp {cons("Var")}
+    "in"                   -> Exp {reject}
+        
+    %% to be able to refer to page or template farg/var from actions when names clashing with farg/var in action
+    "externalscope" "." Id -> Exp {cons("ExternalScopeVar")}
+    "global" "." Id -> Exp {cons("GlobalVar")}
+    "global" -> Id {reject}
+
+    Exp "." Id             -> Exp {cons("FieldAccess"),prefer}
+    
+    Exp "[" Exp "]"        -> Exp {cons("CollectionIndex"),prefer}
+
+    Sort "{" ObjectPropertyAssignment* "}"         -> ObjectCreation {cons("ObjectCreation")}
+    Sort "{" { ObjectPropertyAssignment "," }* "}" -> ObjectCreation {cons("ObjectCreation"), prefer}
+    ObjectCreation -> Exp
+
+    Id ":=" Exp           -> ObjectPropertyAssignment {cons("ObjectPropertyAssignment")}
+
+    Exp ":=" Exp             -> Assignment {cons("Assignment")}
+    Assignment				-> Exp
+
+    "[" Mapping* "]"       -> Exp {cons("MapCreation"), avoid} %%avoid to prevent ambiguity between with empty untyped list creation and empty map creation
+    Exp "->" Exp           -> Mapping {cons("Mapping")}
+
+    "[" {Exp ","}* "]"     -> Exp {cons("ListCreation")}
+
+    "{" {Exp ","}* "}"     -> Exp {cons("SetCreation")}
+
+    "List" "<" Sort ">" "(" {Exp ","}* ")" -> Exp {cons("TypedListCreation"), prefer}
+    "Set" "<" Sort ">" "(" {Exp ","}* ")" -> Exp {cons("TypedSetCreation"), prefer}
+
+    Id "(" {Exp ","}* ")"  -> Exp {cons("ThisCall")}
+    "!" "(" {Exp ","}* ")"  -> Exp {reject}
+
+    Exp "." Id "(" {Exp ","}* ")"  -> Exp {cons("Call")}
+
+    Exp "is" "a" Sort      -> Exp {cons("IsA")}
+    Exp "as" Sort          -> Exp {cons("Cast"), avoid} %% avoid, to give hql query AsAlias more priority, 'from Page as p' should make the 'as p' part of the query
+    "as"   -> Keyword
+  
+  context-free restrictions
+    "as" -/- [a-zA-Z0-9\_] %% prevent ambiguity between as and asc (used in for-filters)
+ 
+  context-free syntax
+    Exp "in" Exp           -> Exp {non-assoc, cons("InColl")}
+  context-free restrictions
+    "in" -/- [a-zA-Z0-9\_] %% there must be whitespace after the 'in' keyword for collection test
+
+  context-free syntax
+    Exp "==" Exp           -> Exp {cons("Eq")}
+    Exp "!=" Exp           -> Exp {cons("NotEq")}
+    Exp ">" Exp           -> Exp {cons("LargerThan")}
+    Exp ">=" Exp           -> Exp {cons("LargerThanOrEqual")}
+    Exp "<" Exp           -> Exp {cons("SmallerThan")}
+    Exp "<=" Exp           -> Exp {cons("SmallerThanOrEqual")}
+
+    "true"                 -> Exp {prefer,cons("True")}
+    "false"                -> Exp {prefer,cons("False")}
+
+    "null"                 -> Exp {prefer,cons("Null")}
+
+    Exp "&&" Exp          -> Exp {cons("And"), assoc}
+    Exp "||" Exp           -> Exp {cons("Or"), assoc}
+    "!" Exp              -> Exp {cons("Not")}
+
+    "(" Exp ")"            -> Exp {bracket}
+
+
+    "[" Exp "for" "(" Id ":" Sort "in" Exp Filter ")" "]" -> ForExp {cons("ForExp")}
+    "[" Exp "for" "(" Id ":" Sort "in" Exp ")" "]"        -> ForExp {cons("ForExpNoFilter")}
+    "[" Exp "|" Id ":" Sort "in" Exp Filter "]"           -> ForExp {cons("ForExp")}
+    "[" Exp "|" Id ":" Sort "in" Exp "]"                  -> ForExp {cons("ForExpNoFilter")}
+    ForExp                                                -> Exp
+
+    "And" ForExp                                          -> Exp {cons("AndForExp")}
+    "Or"  ForExp                                          -> Exp {cons("OrForExp")}
+
+
+    Exp "*" Exp  -> Exp {cons("Mul"),assoc}
+    Exp "/" Exp  -> Exp {cons("Div"),assoc}
+    Exp "%" Exp  -> Exp {cons("Mod"),assoc}
+    Exp "+" Exp  -> Exp {cons("Add"),assoc}
+    Exp "-" Exp  -> Exp {cons("Sub"),assoc}
+
+context-free priorities
+  {left:
+    Exp "." Id "(" {Exp ","}* ")"  -> Exp
+    Exp "." Id  -> Exp
+    Exp "[" Exp "]"  -> Exp }
+  > {non-assoc: 
+       Exp "is" "a" Sort -> Exp 
+       Exp "as" Sort     -> Exp
+    }
+  > "!" Exp -> Exp
+  > {left:
+       Exp "*" Exp -> Exp
+       Exp "%" Exp -> Exp
+       Exp "/" Exp -> Exp }
+  > {left:
+       Exp "+" Exp -> Exp
+       Exp "-" Exp -> Exp }
+  > Exp "in" Exp -> Exp
+  > {left:
+       Exp "==" Exp -> Exp
+       Exp "!=" Exp -> Exp
+       Exp ">" Exp -> Exp
+       Exp ">=" Exp -> Exp
+       Exp "<" Exp -> Exp
+       Exp "<=" Exp -> Exp }
+  > {left:
+       Exp "&&" Exp -> Exp }
+  > {left:
+       Exp "||" Exp -> Exp }
+  > Assignment -> Exp
+  > HqlExp -> Exp
+
+
+exports
+
+  context-free syntax
+
+    QueryRule[[HQL]]                     -> HqlExp {cons("HqlQuery")}
+    QueryRule[[HQL]] "limit" LimitValueExp         -> HqlExp {cons("HqlQueryLimit")}
+    QueryRule[[HQL]] "limit" LimitValueExp "," LimitValueExp -> HqlExp {cons("HqlQueryLimitOffset")}
+
+    %%although limit is not part of HQL, it has been added in WebDSL so it should support the ~var style of injecting values into HQL
+    Exp -> LimitValueExp
+    DslExp -> LimitValueExp
+
+    DslExp -> Expression[[HQL]]
+    "~" Exp -> DslExp {cons("DslExp")}
+
+    DeleteStatement[[HQL]] ";" -> Statement {cons("HqlStatement")}
+
+  context-free syntax
+
+    QueryRule[[HQL]] "." Id -> Exp {reject}
+
+context-free syntax %% email functions
+
+  Id "(" {Exp ","}* ")" -> EmailCall {cons("EmailCall")}
+  
+  "renderemail" "(" EmailCall ")" -> Exp {cons("RenderEmailFunctionCall"),prefer}
+  "email" "(" EmailCall ")" -> Exp {cons("EmailFunctionCall"),prefer}
+  "email" EmailCall -> Exp {cons("EmailFunctionCall"),prefer}
+  "sendemail" "(" EmailCall ")" -> Exp {cons("SendEmailFunctionCall"),prefer}
+  
+context-free syntax %% render template function
+  
+  "rendertemplate" "(" TemplateCall ")" -> Exp {cons("RenderTemplateFunctionCall"),prefer}
+
+module WebDSL-Ajax
+
+exports
+
+  sorts Statement Exp InlineTemplate AjaxStatement
+  context-free syntax
+
+    "event" "(" Id "," "[" { EventArg "," }* "]" ")" -> Exp {cons("EventCall")}
+    "event" "(" Id "," "[" { EventArg "," }* "]" ")" -> TemplateElement {cons("EventCallElement")}
+
+    Id ":=" Exp -> EventArg {cons("EventArg")}
+  
+%%  	replace <element_id> << <templatecall>(<argumenten>);
+%%	append  <element_id> << <templatecall>(<argumenten>);
+%%	visibility <element_id> << < "show" | "hide" | "toggle">;
+%%	relocate this << <pagecall>(<argumenten>);
+%%	restyle <element_id> << "<css classname>";
+%%	clear <element_id> << "<niet terzake doende string>"
+
+  AjaxStatement ";" -> Statement {cons("AjaxStatement"), prefer}   
+    "replace" "(" Id "," TemplateCall ")" -> AjaxStatement {cons("AjaxReplace"), prefer}
+    "replace" "(" Exp "," TemplateCall ")" -> AjaxStatement {cons("AjaxReplace")}    
+    %%"replace" "(" Id "," InlineTemplate ")" -> AjaxStatement {cons("AjaxReplace"), prefer}  	
+
+    "append" "(" Id "," TemplateCall ")" -> AjaxStatement {cons("AjaxAppend"), prefer}
+    "append" "(" Exp "," TemplateCall ")" -> AjaxStatement {cons("AjaxAppend")}
+    %%"append" "(" Id "," InlineTemplate ")" -> AjaxStatement {cons("AjaxAppend"), prefer}  	
+
+    "visibility" "(" Id "," AjaxVisibility ")" -> AjaxStatement {cons("AjaxVisibility"), prefer}
+    "visibility" "(" Exp "," AjaxVisibility ")" -> AjaxStatement {cons("AjaxVisibility")}
+    "show" -> AjaxVisibility{cons("Show")}
+    "toggle" -> AjaxVisibility{cons("Toggle")}
+    "hide" -> AjaxVisibility{cons("Hide")}        
+    
+    "relocate" "(" PageCall ")" -> AjaxStatement { cons("AjaxRelocate") }
+    
+    "restyle" "(" Id "," Exp ")" -> AjaxStatement { cons("AjaxRestyle"), prefer}
+    "restyle" "(" Exp "," Exp ")" -> AjaxStatement { cons("AjaxRestyle") }
+    
+    "clear" "(" Id ")" -> AjaxStatement{cons("AjaxClear"), prefer}
+    "clear" "(" Exp ")" -> AjaxStatement{cons("AjaxClear")}
+    
+    "refresh" "(" ")" -> AjaxStatement{cons("AjaxRefresh")}
+    
+    "runscript" "(" Exp ")" -> AjaxStatement { cons("AjaxRunScript"), prefer }
+    
+%%    Id Id "<<" Id  ";" 	 -> Statement {cons("AjaxActionIdParam"),prefer}
+%%    Id Id "<<" ";"		-> Statement {cons("AjaxActionNoParam")}
+%%    Id "<<" Exp ";"	 	-> Statement {cons("AjaxActionNoTarget")}
+%%    Id Id "<<" Exp ";"   	-> Statement {cons("AjaxAction")}
+  
+    "placeholder" Id "{" TemplateElement* "}" -> TemplateElement{cons("Placeholder"), prefer}
+    "placeholder" Exp "{" TemplateElement* "}"-> TemplateElement{cons("Placeholder")}
+    "placeholder" Id TemplateCall -> TemplateElement{cons("PlaceholderWithAjaxCall"), prefer}
+    "placeholder" PHExp TemplateCall -> TemplateElement{cons("PlaceholderWithAjaxCall")}
+    "placeholder" -> Keyword
+    
+    %% issue http://yellowgrass.org/issue/Spoofax/331
+    %% workaround:
+    Id "(" {Exp ","}* ")"  -> PHExp {cons("ThisCall")}
+    Exp "." Id "(" {Exp ","}* ")"  -> PHExp {cons("Call")}
+    Exp "." Id             -> PHExp {cons("FieldAccess"),prefer} 
+    Exp "[" Exp "]"        -> PHExp {cons("CollectionIndex"),prefer}
+    Exp "+" Exp  -> PHExp {cons("Add")}
+    ConstValue -> PHExp
+    %%
+    %% more general implementation, currently broken in java back-end: 
+    %% "placeholder" Exp TemplateCall -> TemplateElement{cons("PlaceholderWithAjaxCall")}
+    %% reject ambiguous placeholder target{} next{} where target{} is parsed as object creation, 
+    %% which is never the case since the expression must produce a String
+    %% "placeholder" ObjectCreation TemplateCall   -> TemplateElement {reject} 
+
+
+module WebDSL-UI
+
+imports
+  WebDSL-Action
+  WebDSL-Lexical
+
+exports
+
+  sorts TemplateDefinition Modifier Exp
+
+  context-free syntax
+    
+    "define" -> Keyword
+  %%"action" -> Keyword
+    "for"    -> Keyword
+
+  context-free syntax
+
+    TemplateDefinition -> Definition
+
+    "define" Modifier*
+       Id "(" {FormalArg ","}* ")"
+%%       ( "requires" {TemplateArg "," }* )?
+       TemplateArgs
+       "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}
+
+    "requires" {TemplateArg "," }*			-> TemplateArgs{cons("TemplateArgs"), prefer}
+    Id "(" {Sort ","}* ")"                  -> TemplateArg {cons("TemplateArg")}
+    
+      -> TemplateArgs{cons("None")}
+      
+    "define" Modifier* Id "(" {FormalArg ","}* ")" "=" Id OptLocalRedefineArgs -> TemplateDefinition {cons("LocalRedefine")}
+    -> OptLocalRedefineArgs {cons("None")}
+    "(" "*" "," {LocalRedefineArg ","}+ ")" -> OptLocalRedefineArgs {cons("LocalRedefineArgs")}
+    Id -> LocalRedefineArg{cons("Var")}
+    
+    %%"define" Modifier*
+    %%   Id UNDEFINED*
+    %%   "{" TemplateElement* "}"             -> TemplateDefinition {cons("Define")}
+
+    "page"                                  -> Modifier {cons("Page")}
+    "email"                                 -> Modifier {cons("Email")}
+    "ajax"                                  -> Modifier {cons("AjaxTemplate")}
+    "template"                              -> Modifier {cons("Template")}
+    "feed"                                  -> Modifier {cons("Feed")}
+    "local"                                 -> Modifier {cons("Local")}
+    "no-span" 								-> Modifier {cons("NoSpan")}    
+    "span"  								-> Modifier {cons("TemplateModSpan")}    
+    "inline"  								-> Modifier {cons("TemplateModInline")}    
+    "validate"                           	-> Modifier {cons("ValidatesRefArgs")}    
+    "secure"                             	-> Modifier {cons("TempateModSecure")}    
+    "not-secure"                          	-> Modifier {cons("TemplateModNotSecure")}    
+    "deprecated"                          	-> Modifier {cons("TemplateDeprecated")}    
+
+    InitAction                              -> TemplateElement
+    Action                                  -> TemplateElement
+    VarDecl                                 -> TemplateElement
+    %% still allow ";" behind page var for backwards comp., remove VarDeclStat-> TemplateElement to disallow
+    VarDeclStat                             -> TemplateElement
+    "request" VarDecl                       -> TemplateElement {cons("RequestScopeTemplate")}
+    "request"                               -> TemplateCallId {reject} %% reject TemplateCallNoArgs("request")
+    TemplateDefinition                      -> TemplateElement
+    TemplateCall                            -> TemplateElement {avoid}
+    String                                  -> TemplateElement {cons("Text")}
+
+
+    "where" Exp                              -> Filter {cons("FilterNoOrderByNoLimit")}
+    "order" "by" OrderExp                    -> Filter {cons("FilterNoWhereNoLimit")}
+    "where" Exp "order" "by" OrderExp        -> Filter {cons("FilterNoLimit")}
+    "where" Exp Limit                        -> Filter {cons("FilterNoOrderBy")}
+    "order" "by" OrderExp Limit              -> Filter {cons("FilterNoWhere")}
+    Limit                                    -> Filter {cons("FilterNoWhereNoOrderBy")}
+    "where" Exp "order" "by" OrderExp Limit  -> Filter {cons("Filter")}
+    Exp                                      -> OrderExp {cons("OrderNonSpecific")}
+    Exp "asc"                                -> OrderExp {cons("OrderAscending")}
+    Exp "desc"                               -> OrderExp {cons("OrderDescending")}
+    "limit" Exp "offset" Exp                 -> Limit {cons("Limit")}
+    "limit" Exp                              -> Limit {cons("LimitNoOffset")}
+    "offset" Exp                             -> Limit {cons("LimitNoLimit")}
+
+
+    "for" "(" Id ":" Sort "in" Exp Filter ")"
+       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("For")}
+    
+    %% Reject
+   %%"for" "(" Id ":" Sort "in" HqlExp Filter ")" "{" TemplateElement* "}" -> TemplateElement {reject}
+    
+    "for" "(" Id ":" Sort "in" Exp ")"
+       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForNoFilter"), prefer}
+
+    "for" "(" Id ":" Sort Filter ")"
+       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForAll")}
+
+    "for" "(" Id ":" Sort ")"
+       "{" TemplateElement* "}" ForSeparator       -> TemplateElement {cons("ForAllNoFilter")}
+    
+    "for" "(" Id ":" "Int" "from" Exp "to" Exp ")" 
+      "{" TemplateElement* "}" ForSeparator        -> TemplateElement {cons("ForCount")}
+    
+    "separated-by" "{" TemplateElement* "}" -> ForSeparator{cons("ForSeparator")}
+    -> ForSeparator{cons("None")}
+
+    %%
+
+    "select" "(" Id ":" Sort "," String "," Exp ")" -> TemplateElement {cons("SelectNoPropsNoElems")}
+    "select" "(" Id ":" Sort "," String "," Exp ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SelectNoElems")}
+    "select" "(" Id ":" Sort "," String "," Exp ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("Select")}
+    "select" "(" Id ":" Sort "," String "," Exp ")" "{" TemplateElement* "}" -> TemplateElement {cons("SelectNoProps")}
+    
+    "select" "(" Exp "from" Exp ")" -> TemplateElement {cons("SelectFromListNoPropsNoElems")}
+    "select" "(" Exp "from" Exp ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SelectFromListNoElems")}
+    "select" "(" Exp "from" Exp ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SelectFromList")}
+    "select" "(" Exp "from" Exp ")" "{" TemplateElement* "}" -> TemplateElement {cons("SelectFromListNoProps")}
+
+    "if" "(" Exp ")" "{" TemplateElement* "}" "else" "{" TemplateElement* "}" -> TemplateElement {cons("IfTempl"),prefer}
+    "if" "(" Exp ")" "{" TemplateElement* "}"                                 -> TemplateElement {cons("IfNoElseTempl")}
+
+
+    "if" "(" Exp ")" "{" TemplateElement* "}" ElseIfTempl+ ElseTempl? -> TemplateElement {cons("IfElseIfTempl"),prefer}
+    "else" "if" "(" Exp ")" "{" TemplateElement* "}"                  -> ElseIfTempl {cons("ElseIfTempl"),prefer}
+    "else" "{" TemplateElement* "}"                                   -> ElseTempl  {cons("ElseTempl"),prefer}
+
+
+    "case" "(" {Exp ","}* ")" "{" TemplateCaseAlt* "}" 	-> TemplateElement {cons("TemplateCase")}
+    {ConstValue ","}* "{" TemplateElement* "}"          -> TemplateCaseAlt {cons("TemplateCaseAlt")}
+    "default"  "{" TemplateElement* "}"                 -> TemplateCaseAlt {cons("TemplateCaseAltDefault")}
+
+  %%
+    TemplateCallId "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" TemplateBody -> TemplateCall {cons("TemplateCall")}
+
+    TemplateCallNoArgs -> TemplateCall
+    TemplateCallNoBody -> TemplateCall
+    TemplateCallNoAssigns -> TemplateCall
+    TemplateCallPropsNoBody -> TemplateCall
+    TemplateCallProps -> TemplateCall
+    TemplateCallPropsNoArgs -> TemplateCall
+    TemplateCallBody -> TemplateCall
+    TemplateCallId                                             -> TemplateCallNoArgs {cons("TemplateCallNoArgs")}
+    TemplateCallId "(" {Exp ","}* ")"                          -> TemplateCallNoBody {cons("TemplateCallNoBody")}
+    TemplateCallId "(" {Exp ","}* ")" TemplateBody -> TemplateCallNoAssigns {cons("TemplateCallNoAssigns")}
+    TemplateCallId "(" {Exp ","}* ")" "[" {PropertyAssignment ","}*"]" -> TemplateCallPropsNoBody {cons("TemplateCallPropsNoBody")}
+    TemplateCallId "[" {PropertyAssignment ","}*"]" -> TemplateCallProps {cons("TemplateCallProps")}
+    TemplateCallId "[" {PropertyAssignment ","}*"]" TemplateBody -> TemplateCallPropsNoArgs {cons("TemplateCallPropsNoArgs")}
+    TemplateCallId  TemplateBody -> TemplateCallBody {cons("TemplateCallBody")}
+    
+    "{" TemplateElement* "}" -> TemplateBody {cons("TemplateBody")}
+    "with" "{" ArgDefine* "}" -> TemplateBody {cons("TemplateWith")}
+    TemplateCallId "(" {FormalArg ","}* ")"
+      "{" TemplateElement* "}" -> ArgDefine {cons("ArgDefine")}
+
+    "with" "{" TemplateElement* "}"                -> TemplateCall {reject}
+    
+    %%disambiguate
+    "define"                        -> TemplateCallId {reject}
+    "for"                        -> TemplateCallId {reject}
+    "placeholder"                        -> TemplateCallId {reject}
+    
+  %%
+  
+    %% deprecated
+    "navigate" "(" PageCall ")" UNDEFINED* "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
+    "navigate" "(" PageCall ")" "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
+
+    "navigate" PageCall UNDEFINED* "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
+    "navigate" PageCall "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("NavigateCall"), prefer}
+
+    Id "(" {Exp ","}* ")"  -> PageCall {cons("PageCall")}
+
+    %%disambiguate
+    "navigate" -> TemplateCallId {reject}
+    
+  %%
+
+    %% deprecated
+    "action" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("Submit"), prefer}
+    "action" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("Submit"), prefer}
+    "actionLink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("SubmitLink"), prefer}
+    "actionLink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SubmitLink"), prefer}
+
+    "submit" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("Submit"), prefer}
+    "submit" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("Submit"), prefer}
+    "submitlink" "(" Exp "," ActionCallOrInline ")" UNDEFINED* -> TemplateElement {cons("SubmitLink"), prefer}
+    "submitlink" "(" Exp "," ActionCallOrInline ")" "[" {PropertyAssignment ","}* "]" -> TemplateElement {cons("SubmitLink"), prefer}
+
+    "submit"     ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("SubmitElem"), prefer}
+    "submit"     ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SubmitElem"), prefer}
+    "submitlink" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("SubmitLinkElem"), prefer}
+    "submitlink" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("SubmitLinkElem"), prefer}
+    
+    "downloadlink" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("DownloadLink"), prefer}
+    "downloadlink" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("DownloadLink"), prefer}
+    "outputimage" ActionCallOrInline UNDEFINED*                        "{" TemplateElement* "}" -> TemplateElement {cons("OutputImage"), prefer}
+    "outputimage" ActionCallOrInline "[" {PropertyAssignment ","}* "]" "{" TemplateElement* "}" -> TemplateElement {cons("OutputImage"), prefer}
+    
+    ActionCall -> ActionCallOrInline
+    InlineAction -> ActionCallOrInline
+
+    Id "(" {Exp ","}* ")"  -> ActionCall {cons("ActionCall")}
+    
+    %%disambiguate
+    "action"                       -> TemplateCallId {reject}
+    "actionLink"                   -> TemplateCallId {reject}
+    "submit"                       -> TemplateCallId {reject}
+    "submitlink"                   -> TemplateCallId {reject}
+    "downloadlink"                 -> TemplateCallId {reject}
+    "outputimage"                  -> TemplateCallId {reject}
+  %%
+   
+    "action" Block -> InlineAction {cons("InlineAction")}
+    %% reject ambiguous ObjectCreation(SimpleSort("action"), [])
+    "action" -> Sort {reject}
+    %%"template" "{" TemplateElement* "}" -> InlineTemplate {cons("InlineTemplateCall")}    
+    %% "template"               -> Id {reject}
+   
+    %% Template call without braces must be disambiguated in some cases
+    "action" -> TemplateCall {reject}  %%this is an action definiton, not a templatecall without params
+    "action" -> Exp {reject}		   %%this is an inline action, not a variable
+    "action" -> PropertyValue {reject} %%this is an inline action, not an id
+    
+  %%
+
+    %% preferably have the symbol options in one production, unfortunately then it ends up in ast, can use ast instead of cons...
+    %% SubmitProp PropertyAssignSymbol ActionCallOrInline -> PropertyAssignment {ast("PropertySubmit(<1>,<3>)"),prefer}
+    %% however, in this case the constructors are not automatically generated for stratego
+    %% 
+%%  lexical syntax %% different opinions about nice syntax here, something to discuss (leaning towards "=")
+%%    ":"  -> PropertyAssignSymbol %% same as type declaration
+%%    ":=" -> PropertyAssignSymbol %% same as assignment
+%%    "="  -> PropertyAssignSymbol %% same as html and data model property annotations  
+    SubmitProp ":" ActionCallOrInline  -> PropertyAssignment {cons("PropertySubmit"),prefer}
+    SubmitProp ":=" ActionCallOrInline -> PropertyAssignment {cons("PropertySubmit"),prefer}
+    SubmitProp "=" ActionCallOrInline  -> PropertyAssignment {cons("PropertySubmit"),prefer}
+    Id ":" PropertyValue		       -> PropertyAssignment {cons("PropertyAssignment")}
+    Id ":=" PropertyValue		       -> PropertyAssignment {cons("PropertyAssignment")}
+    Id "=" PropertyValue		       -> PropertyAssignment {cons("PropertyAssignment")}
+    Exp								        	   -> PropertyValue
+    "ajax"                                         -> PropertyAssignment {cons("TemplateCallPropertyAjax"),prefer}
+    "secure"                                       -> PropertyAssignment {cons("TemplateCallPropertySecure"),prefer} %% for navigates and submits
+    "ignore-validation"                            -> PropertyAssignment {cons("TemplateCallPropertyIgnoreValidation"),prefer}
+    "not-secure"                                   -> PropertyAssignment {cons("TemplateCallPropertyNotSecure"),prefer} %% for navigates and submits
+    "not null"                                     -> PropertyAssignment {cons("TemplateCallPropertyNotNull"),prefer}
+    CommonAttribute -> PropertyAssignment
+       
+       
+  lexical syntax
+    "onabort" -> SubmitProp
+    "onblur"  -> SubmitProp
+    "onchange"  -> SubmitProp
+    "onclick"  -> SubmitProp
+    "ondblclick" -> SubmitProp
+    
+    "onerror"  -> SubmitProp
+    "onfocus"  -> SubmitProp
+    "onkeydown"  -> SubmitProp
+    "onkeypress" -> SubmitProp
+    "onkeyup" -> SubmitProp
+    
+    "onload" -> SubmitProp 
+    "onmousedown" -> SubmitProp
+    "onmousemove" -> SubmitProp
+    "onmouseout" -> SubmitProp
+    "onmouseover" -> SubmitProp
+    
+    "onmouseup" -> SubmitProp
+    "onreset" -> SubmitProp
+    "onresize" -> SubmitProp
+    "onselect" -> SubmitProp
+    "onsubmit" -> SubmitProp
+    
+    "onunload" -> SubmitProp
+    
+  context-free syntax
+  %%
+    
+    "if" "(" Exp ")" "{" TemplateElement* "}"      -> TemplateCall {reject}
+    "else" "{" TemplateElement* "}"                -> TemplateCall {reject}
+    "separated-by" "{" TemplateElement* "}"        -> TemplateCall {reject}
+
+    "init" Block  		-> InitAction {cons("InitAction"),prefer}
+    "init"              -> TemplateCallId {reject}
+    "databind" Block    -> TemplateElement {cons("DataBindAction"),prefer}
+    "databind"          -> TemplateCallId {reject}
+    "validate" Block    -> TemplateElement {cons("ValidateAction"),prefer}
+    
+    "action" 
+      Id "(" {FormalArg ","}* ")" 
+      Block  			-> Action {cons("Action")}
+
+  context-free syntax
+    
+    Id ".elements" -> TemplateCallId {cons("QualifiedElementsCall"),prefer}
+
+module WebDSL-Lexical
+
+exports
+
+  lexical syntax
+    Id -> TemplateCallId %% hook for reject rules on templatecall names
+    [a-zA-Z][a-zA-Z0-9\_]* -> Id
+    [a-zA-Z0-9\-\_\.]+       -> FileName
+    {FileName "/"}+        -> ModuleName
+    ~[\n\r]*               -> SectionName
+
+  lexical restrictions
+    Id         -/- [a-zA-Z0-9\_]
+    ModuleName -/- [a-zA-Z0-9\/]
+
+  lexical syntax
+    "-"? [0-9]+            -> Int
+    "-"? [0-9]+ "L"        -> Long
+
+  lexical syntax
+    "-"? FloatDigits
+     ExponentPart? [fFdD]? -> Float
+    [0-9]* "." [0-9]*      -> FloatDigits
+    [0-9]+                 -> FloatDigits
+    [eE] SignedInteger     -> ExponentPart
+    [\+\-]? [0-9]+         -> SignedInteger
+
+    "-"? [0-9]+            -> Float {reject}
+    "."                    -> FloatDigits  {reject}
+
+  lexical syntax
+    "\"" StringChar* "\""        -> String
+    ~[\"\n]                      -> StringChar
+    "\\\""                       -> StringChar
+
+  lexical syntax
+    [\ \t\n\r]                   -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | Eof) -> LAYOUT
+    "/*" CommentChar* "*/"       -> LAYOUT
+                                 -> Eof
+    ~[\*]                        -> CommentChar
+    Asterisk                     -> CommentChar
+    [\*]                         -> Asterisk
+
+  lexical restrictions
+    Asterisk   -/- [\/]
+    Eof        -/- ~[]
+
+  context-free restrictions
+    LAYOUT?     -/- [\ \t\n\r]
+    LAYOUT?     -/- [\/].[\/]
+    LAYOUT?     -/- [\/].[\*]
+    SectionName -/- ~[\n\r]
+
+  lexical syntax
+    ~[\ \t\n\r\}]+ -> Word
+  lexical restrictions
+     Word -/- ~[\ \t\n\r\}]
+
+  context-free restrictions
+    "page" "local" "email" "feed" "template" "schedule" -/- [a-zA-Z0-9]
+
+module WebDSL
+
+imports
+  WebDSL-Lexical
+  WebDSL-UI
+  WebDSL-Ajax
+  WebDSL-Action
+  WebDSL-DataModel
+  WebDSL-DataValidation
+  WebDSL-AccessControl
+  WebDSL-XML
+  WebDSL-JavaScript
+  WebDSL-Regex
+  WebDSL-Enums
+  WebDSL-Styling
+  WebDSL-PagedFor
+  WebDSL-Derive
+  WebDSL-Procedures
+  WebDSL-StringSelectEntity
+  WebDSL-ValidationAnnos
+  WebDSL-Native
+  WebDSL-Dispatch
+  WebDSL-Exception
+  WebDSL-Type
+  WebDSL-Test
+  WebDSL-TimeInterval
+  WebDSL-Service
+
+hiddens
+  context-free start-symbols
+    Unit
+
+exports
+
+  sorts
+    Id QId Int ModuleName SectionHeader Float FloatDigits ExponentPart
+    SignedInteger String UNDEFINED Eof
+
+
+  context-free syntax
+    Id         -> QId
+    QId "." Id -> QId {cons("Qualified")}
+    Keyword    -> Id {reject} %% (not rejected as HQL or styling keyword)
+
+  context-free syntax %% Types
+    SimpleSort -> Sort
+    GenericSort -> Sort
+    RefSort -> Sort
+    
+    Id                     -> SimpleSort {cons("SimpleSort")}
+    Id "<" {Sort ","}+ ">" -> GenericSort {cons("GenericSort")}
+    "Ref" "<" Sort ">" -> RefSort {cons("RefSort")}
+    "Ref" "<" Sort ">" -> GenericSort {reject}
+
+    Id ":" Sort            -> FormalArg {cons("Arg")}
+
+
+exports
+
+  sorts Application Module Unit
+  
+  syntax
+
+    "section" <SectionName-CF> <LAYOUT?-CF> <Definition*-CF> -> <Section-CF> {cons("Section")}
+
+  context-free syntax
+
+    "application" QId Definition+ Section* -> Application {cons("ApplicationDefs")}
+    "application" QId Section*      -> Application {cons("Application")}
+
+    "description" "{" Word* "}"     -> Description {cons("Description")}
+
+    "note" "{" Word* "}"            -> Description {cons("Note")}
+
+    Description                   -> Definition
+    %%Description                   -> Definition {prefer}
+
+    "module" ModuleName Section*  -> Module {cons("Module")}
+    "module" ModuleName Definition+ Section*  -> Module {cons("ModuleDefs")}
+
+    "imports" ModuleName          -> Definition {cons("Imports")}
+    
+    Application                   -> Unit
+    Module                        -> Unit
+
+exports
+
+  sorts Action Statements Statement Exp
+
+  context-free syntax
+
+    Action		       	        -> Definition
+    Statement*		   	        -> Statements
+    NativeFunctionDeclaration   -> Definition
+    NativeClassDeclaration      -> Definition
+

From R.B.Vermaas at tudelft.nl  Wed Mar  9 11:38:56 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 09 Mar 2011 10:38:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22332 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110309103856.80AED7F80B5@mx1.tudelft.nl>

Author: rob
Date: Wed Mar  9 10:38:56 2011
New Revision: 22332
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22332&sc=1

Log:
add ambiguityIsError setting needed for implementing STRSGLR_set_ambiguity_error_on

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Wed Mar  9 10:16:00 2011	(r22331)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Wed Mar  9 10:38:56 2011	(r22332)
@@ -51,9 +51,11 @@
 	private boolean filterPriorities;
 
 	private boolean filterStrict;
-	
+
 	private boolean logStatistics;
 
+	private boolean ambiguityIsError;
+
 	// Current parser state
 
 	private AmbiguityManager ambiguityManager;
@@ -179,6 +181,14 @@
 		return logStatistics;
 	}
 
+	public void setAmbiguityIsError(boolean ambiguityIsError) {
+		this.ambiguityIsError = ambiguityIsError;
+	}
+
+	public boolean getAmbiguityIsError() {
+		return ambiguityIsError;
+	}
+
 	public final void setDefaultFilters() {
 		filterAny = true;
 		filterCycles = false; // TODO: filterCycles; enable by default
@@ -191,6 +201,7 @@
 		filterPriorities = true;
 		filterStrict = false; // TODO: disable filterStrict hack
 		logStatistics = true;
+		ambiguityIsError = false;
 	}
 
 	public Disambiguator() {
@@ -208,13 +219,13 @@
 	            if(Tools.debugging) {
 	                Tools.debug("applyFilters()");
 	            }
-	
+
 	            initializeFromParser(parser);
 	            t = applyTopSortFilter(sort, t);
-	
+
 	            if (filterAny) {
 	                t = applyCycleDetectFilter(t);
-	
+
 	                // SG_FilterTree
 	                ambiguityManager.resetClustersVisitedCount();
 	                t = filterTree(t, false);
@@ -224,7 +235,7 @@
 	        }
 
 	        return yieldTreeTop(t);
-        
+
         } finally {
             initializeFromParser(null);
         }
@@ -266,16 +277,21 @@
 		try {
 			ambiguityManager.resetAmbiguityCount();
 			final Object r = yieldTree(t);
-	
-			if(logStatistics) 
+
+			if(logStatistics)
 				logStatus();
-	
+
 	        int ambCount = ambiguityManager.getAmbiguitiesCount();
 	        if (Tools.debugging) {
 	            Tools.debug("yield: ", r);
 	        }
-	        
-	        return parser.getTreeBuilder().buildTreeTop(r, ambCount);
+
+	        if(ambiguityIsError && ambCount > 0) {
+	        	return null;
+	        }
+	        else {
+	        	return parser.getTreeBuilder().buildTreeTop(r, ambCount);
+	        }
 		} finally {
 			parser.getTreeBuilder().reset();
 		}
@@ -374,7 +390,7 @@
 		if (Tools.debugging) {
 			Tools.debug("filterTree(node)    - ", t);
 		}
-		
+
 		// parseTable.setTreeBuilder(new Asfix2TreeBuilder());
 		// System.out.println(yieldTree(t));
 
@@ -423,7 +439,7 @@
 
 	/**
 	 * Filters child parse nodes.
-	 * 
+	 *
 	 * @return An array of filtered child nodes, or null if no changes were made.
 	 */
 	private AbstractParseNode[] filterTree(AbstractParseNode[] args, boolean inAmbiguityCluster) throws FilterException {
@@ -431,7 +447,7 @@
 		if(Tools.debugging) {
 			Tools.debug("filterTree(<nodes>) - ", args);
 		}
-		
+
 		// TODO: Optimize - combine these two loops
 
 		AbstractParseNode[] newArgs = null;

From R.B.Vermaas at tudelft.nl  Wed Mar  9 11:40:30 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 09 Mar 2011 10:40:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22333 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110309104030.2FDEE7F80AA@mx1.tudelft.nl>

Author: rob
Date: Wed Mar  9 10:40:29 2011
New Revision: 22333
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22333&sc=1

Log:
new spoofax-libs.jar including ambiguityIsError setting

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From R.B.Vermaas at tudelft.nl  Wed Mar  9 11:42:10 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 09 Mar 2011 10:42:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22334 -
	strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/sglr
Message-ID: <20110309104210.77E69CC30B@mx4.tudelft.nl>

Author: rob
Date: Wed Mar  9 10:42:10 2011
New Revision: 22334
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22334&sc=1

Log:
add some missing STRSGLR_* primitives

Modified:
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	Wed Mar  9 10:40:29 2011	(r22333)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	Wed Mar  9 10:42:10 2011	(r22334)
@@ -10,13 +10,13 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class SGLRCompatLibrary extends AbstractStrategoOperatorRegistry {
-	
+
 	public static final String REGISTRY_NAME = "sglrcompat";
-	
+
 	private final Disambiguator filterSettings = new Disambiguator();
-	
+
 	private final AtomicBoolean recoveryEnabled = new AtomicBoolean(); // silly placeholder
-	
+
 	public Disambiguator getFilterSettings() {
 		return filterSettings;
 	}
@@ -24,11 +24,11 @@
 	public AtomicBoolean getRecoveryEnabledSetting() {
 		return recoveryEnabled;
 	}
-	
+
 	public SGLRCompatLibrary() {
 		initPrimitives();
 	}
-	
+
 	protected void initPrimitives() {
 		initFilterSettings();
 		add(new JSGLR_parse_string_pt_compat(filterSettings, recoveryEnabled));
@@ -41,7 +41,7 @@
 
 	private void initFilterSettings() {
 		filterSettings.setFilterAny(true);
-		
+
 		add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filter_direct_eagernes_on") { // (sic)
 			@Override
 			public void set() {
@@ -60,7 +60,7 @@
 				return filterSettings.getFilterDirectPreference();
 			}
 		});
-		
+
 		add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filter_eagernes_on") { // (sic)
 			@Override
 			public void set() {
@@ -157,13 +157,77 @@
 				recoveryEnabled.set(false);
 			}
 		});
-		
+
 		add(new AbstractFilterSetting(filterSettings, "STRSGLR_get_recovery") {
 			@Override
 			public boolean get() {
 				return recoveryEnabled.get();
 			}
 		});
+
+        add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_default_config") {
+            @Override
+            public void set() {
+                filterSettings.setDefaultFilters();
+            }
+        });
+
+        add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_ambiguity_error_on") {
+            @Override
+            public void set() {
+                filterSettings.setAmbiguityIsError(true);
+            }
+        });
+
+        add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_ambiguity_error_off") {
+            @Override
+            public void set() {
+                filterSettings.setAmbiguityIsError(false);
+            }
+        });
+
+        add(new AbstractFilterSetting(filterSettings, "STRSGLR_get_ambiguity_error") {
+            @Override
+            public boolean get() {
+                return filterSettings.getAmbiguityIsError();
+            }
+        });
+
+        add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filtering_on") {
+            @Override
+            public void set() {
+                filterSettings.setFilterAny(true);
+            }
+        });
+
+        add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filtering_off") {
+            @Override
+            public void set() {
+                filterSettings.setFilterAny(false);
+            }
+        });
+
+        add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_log_statistics_on") {
+            @Override
+            public void set() {
+            	filterSettings.setLogStatistics(true);
+            }
+        });
+
+        add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_log_statistics_off") {
+            @Override
+            public void set() {
+            	filterSettings.setLogStatistics(false);
+            }
+        });
+
+        add(new AbstractFilterSetting(filterSettings, "STRSGLR_get_log_statistics") {
+            @Override
+            public boolean get() {
+                return filterSettings.getLogStatistics();
+            }
+        });
+
 	}
 
 	public String getOperatorRegistryName() {

From m.dejonge at tudelft.nl  Wed Mar  9 11:43:20 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 09 Mar 2011 10:43:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22335 - in
	sglr-recovery/trunk/Evaluate/src: evaluation_runs fileprocessing
Message-ID: <20110309104320.0C8BECC06C@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Mar  9 10:43:19 2011
New Revision: 22335
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22335&sc=1

Log:


Modified:
   sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java
   sglr-recovery/trunk/Evaluate/src/fileprocessing/FileProcessing.java
   sglr-recovery/trunk/Evaluate/src/fileprocessing/TestRun.java

Modified: sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java
==============================================================================
--- sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java	Wed Mar  9 10:42:10 2011	(r22334)
+++ sglr-recovery/trunk/Evaluate/src/evaluation_runs/Testing.java	Wed Mar  9 10:43:19 2011	(r22335)
@@ -2,7 +2,6 @@
 
 
 import java.io.FileNotFoundException;
-import java.io.FilenameFilter;
 import java.io.IOException;
 
 import org.junit.Test;
@@ -21,9 +20,9 @@
 public class Testing {
 	
 	private static final String TESTRUN_NAME = null; //name of result files, default is <technique>_<grammar>
-	private static final String TESTSUITE = "stratego-java-test";
+	private static final String TESTSUITE = "webdsl";
 	private static final Permissive GRAMMAR = Permissive.WC;
-	private static final Technique TECHNIQUE = Technique.RS_FG;
+	private static final Technique TECHNIQUE = Technique.RS_BP_FG;
 
 	@Test
 	public void test_StrategoJava() throws FileNotFoundException, IOException, InvalidParseTableException, InterruptedException, TokenExpectedException, BadTokenException, ParseException, org.spoofax.jsglr.shared.SGLRException {
@@ -41,7 +40,7 @@
 		run.setTechnique(TECHNIQUE);
 		run.setPermissive(GRAMMAR);
 		run.setSuiteName(TESTRUN_NAME);
-		//run.setFilenameFilter(FilenameFilters.getNameFilter("project.auto_incomplete.290.org"));
+		run.setFilenameFilter(FilenameFilters.getNameFilter("project.auto_incomplete.290.org"));
 		run.processErrorFiles(0, null);
 	}
 }

Modified: sglr-recovery/trunk/Evaluate/src/fileprocessing/FileProcessing.java
==============================================================================
--- sglr-recovery/trunk/Evaluate/src/fileprocessing/FileProcessing.java	Wed Mar  9 10:42:10 2011	(r22334)
+++ sglr-recovery/trunk/Evaluate/src/fileprocessing/FileProcessing.java	Wed Mar  9 10:43:19 2011	(r22335)
@@ -91,6 +91,7 @@
 			pp_aterm(tempFilePath+".err.ast", test.getPathToErrorAST());
 		} catch (Exception e) {
 			System.err.println("Error during implode: "+test.getPathToErrorFile());
+			e.printStackTrace();
 		}	
 		if (!new File(test.getPathToIntendedAST()).exists())
 			writeParseTree(test.getPathToIntendedFile(), tempFilePath + ".intended.ast");
@@ -102,6 +103,7 @@
 			pp_aterm(tempFilePath + ".intended.ast", test.getPathToIntendedAST());
 		} catch (Exception e) {
 			System.err.println("Error during implode: " + test.getPathToIntendedFile());
+			e.printStackTrace();
 		}
 		
 		if(test.isRecoverySucceeded() && new File(test.getPathToErrorAST()).exists()){
@@ -141,6 +143,7 @@
 			}
 		} catch (Exception e) {
 			System.err.println(e.getMessage());
+			e.printStackTrace();
 		}
 	}
 	

Modified: sglr-recovery/trunk/Evaluate/src/fileprocessing/TestRun.java
==============================================================================
--- sglr-recovery/trunk/Evaluate/src/fileprocessing/TestRun.java	Wed Mar  9 10:42:10 2011	(r22334)
+++ sglr-recovery/trunk/Evaluate/src/fileprocessing/TestRun.java	Wed Mar  9 10:43:19 2011	(r22335)
@@ -223,7 +223,8 @@
 				catch (Error e)
 			    {
 					System.err.println("Error while parsing: "+currentFile.getFilename());
-			        System.err.println(e.getMessage()); 
+					System.err.println(e.getMessage());
+			        e.printStackTrace(); 
 					//Log error
 			    }
 			}

From L.C.L.Kats at tudelft.nl  Wed Mar  9 12:03:32 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 09 Mar 2011 11:03:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22336 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax
Message-ID: <20110309110332.A04FC2B8032@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Mar  9 11:03:32 2011
New Revision: 22336
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22336&sc=1

Log:
missing file

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/JsglrGWT.gwt.xml

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/JsglrGWT.gwt.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/JsglrGWT.gwt.xml	Wed Mar  9 11:03:32 2011	(r22336)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module rename-to='jsglrgwt'>
+
+  <inherits name='com.google.gwt.user.User'/>
+  <inherits name="com.google.gwt.http.HTTP"/>
+
+  <source path='jsglr/client'/>
+  <source path='jsglr/shared'/>
+  <source path='client'/>
+  <source path='jsglr/tests'/>
+<!-- 
+  <entry-point class='org.spoofax.client.JSGLREntryPoint'/>
+ -->
+</module>

From r.t.lindeman at student.tudelft.nl  Wed Mar  9 12:35:21 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Wed, 09 Mar 2011 11:35:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22337 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core/META-INF
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug...
Message-ID: <20110309113521.2F53A2B8033@mx2.tudelft.nl>

Author: RickyLindeman
Date: Wed Mar  9 11:35:20 2011
New Revision: 22337
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22337&sc=1

Log:
* Fixed runtime lookup of jars (needed when running a stratego program with debug information)
 * Fixed some warnings
 * lowered required version number for some eclipse plugin dependencies

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/testimports/.disable-global-analysis
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/expected/.disable-global-analysis
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/.disable-global-analysis
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/.disable-global-analysis
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/scombi/.disable-global-analysis
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-failing-strxt/.disable-global-analysis
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testimports/.disable-global-analysis
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.externalToolBuilders/
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.project
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettingsFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileDynamic.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileInvalidProgramTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileLocalVar.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTestImports.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompilerTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/tests/commandline-tests.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Wed Mar  9 11:35:20 2011	(r22337)
@@ -7,9 +7,9 @@
 Require-Bundle: org.eclipse.core.runtime,
  org.eclipse.debug.core,
  org.eclipse.jdt.debug;bundle-version="3.5.0",
- org.eclipse.jdt.launching;bundle-version="3.5.1",
+ org.eclipse.jdt.launching;bundle-version="3.5.0",
  org.strategoxt.strj,
- org.eclipse.jdt.core;bundle-version="3.5.2",
+ org.eclipse.jdt.core;bundle-version="3.5.0",
  org.strategoxt.imp.debug.stratego.core
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -38,6 +38,7 @@
 import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
+import org.strategoxt.debug.core.util.FileUtil;
 import org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget;
 
 /**
@@ -130,13 +131,15 @@
 		} catch (IOException e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
-			abort("Could not find required directory \"lib\".", e);
+			//abort("Could not find required directory \"lib\".", e);
 		}
-		//System.out.println("URL: " + fileURL);
+		//System.out.println("URL: " + fileURL)		
+		
 		String urlPath = fileURL.getPath();
 		IPath directory = new Path(urlPath);
 		System.out.println(directory.toOSString());
 
+		
 		debugSessionSettings.setJarLibraryDirectory(directory);
 		try {
 			debugSessionSettings.checkJarLibraries();
@@ -168,11 +171,12 @@
 		// set up vm arguments
 		String classToLaunch = projectName + "." + projectName;
 		
-		String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-		String debugRuntime = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-		String debugRuntimeJava = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
+		List<IPath> cpList = new ArrayList<IPath>();
+		cpList.add(binBase);
+		cpList.add(debugSessionSettings.getStrategoxtJar());
+		cpList.addAll(debugSessionSettings.getRuntimeJars());
 		
-		String[] classPath = new String[] { binBase.toOSString(), strategoxtjar, debugRuntime, debugRuntimeJava};
+		String[] classPath = FileUtil.convertIPathToStringArray(cpList);		
 		VMRunnerConfiguration vmRunnerConfiguration = new VMRunnerConfiguration(classToLaunch, classPath);
 		
 		// setup program arguments

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.project
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.project	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/.project	Wed Mar  9 11:35:20 2011	(r22337)
@@ -20,16 +20,6 @@
 			<arguments>
 			</arguments>
 		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
-			<triggers>full,incremental,</triggers>
-			<arguments>
-				<dictionary>
-					<key>LaunchConfigHandle</key>
-					<value>&lt;project&gt;/.externalToolBuilders/Ant builder.launch</value>
-				</dictionary>
-			</arguments>
-		</buildCommand>
 	</buildSpec>
 	<natures>
 		<nature>org.eclipse.jdt.core.javanature</nature>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Wed Mar  9 11:35:20 2011	(r22337)
@@ -33,10 +33,12 @@
 Bundle-Vendor: org.strategoxt.imp.debug.stratego.core
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Require-Bundle: org.eclipse.jdt.debug,
- org.eclipse.jdt.core;bundle-version="3.5.2",
+ org.eclipse.jdt.core;bundle-version="3.5.0",
  org.eclipse.core.runtime,
  org.strategoxt.strj,
  strjdbgruntimelib,
- strj_dbg_transformer
+ strj_dbg_transformer,
+ org.eclipse.imp.runtime,
+ org.eclipse.ui.workbench
 Bundle-Activator: org.strategoxt.debug.core.Activator
 Bundle-ActivationPolicy: lazy

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -78,8 +78,8 @@
 		helper.setMainClasspath(classpath);
 		List<IPath> jars = new ArrayList<IPath>();
 		jars.add(settings.getStrategoxtJar());
-		jars.add(settings.getStrategoDebugRuntimeJar());
-		jars.add(settings.getStrategoDebugRuntimeJavaJar());
+		jars.addAll(settings.getRuntimeJars());
+		
 		helper.setDebugJars(jars);
 		this.vm = helper.getTargetVM(mainArgs);
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -35,7 +35,6 @@
 package org.strategoxt.debug.core.control;
 
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 
 import org.strategoxt.debug.core.control.events.EventHandler;
@@ -152,11 +151,6 @@
 					}
 					// not all threads are suspended
 					log("Not all threads are suspended");
-					List<ThreadReference> refs = vm.allThreads();
-					for(ThreadReference r : refs)
-					{
-						log(r.name() + " " + r.status() + " " + r.isSuspended());
-					}
 				}
 			} catch (InterruptedException exc) {
 				// Ignore

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -150,6 +150,7 @@
 		return suspendThread;
 	}
 
+	@SuppressWarnings("unchecked")
 	private String[] getDynamicRuleNames(EventHandler h)
 	{
 		Method method = null;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -22,6 +22,7 @@
 import com.sun.jdi.event.MethodEntryEvent;
 import com.sun.jdi.event.MethodExitEvent;
 
+ at SuppressWarnings("unchecked")
 public class ValueExtractor implements IEventInfoExtractor {
 
 	// The following object attributes should match the parameters in the invoke-method of the classes java_[r/s]_[enter/exit]_0_{x}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -128,9 +128,8 @@
 			throw new DebugCompileException("Failed to compile stratego program to java.");
 		}
 		
-		IPath sourceBasedir = projectJavaDir;
 		IPath mainSourceFilename = new Path(packageFolder).append(className + ".java");
-		IPath binBase = compileJava(debugSessionSettings, sourceBasedir, mainSourceFilename, projectClassDir); // java to class
+		IPath binBase = compileJava(debugSessionSettings, mainSourceFilename, projectClassDir); // java to class
 		
 		return binBase;	
 	}
@@ -165,7 +164,7 @@
 		libraryPaths.add("."); // the "-I" arguments
 		
 		//IPath projectDir = debugSessionSettings.getProjectDirectory();
-		IPath projectStrategoDir = debugSessionSettings.getStrategoFilePath();
+		IPath projectStrategoDir = debugSessionSettings.getStrategoDirectory();
 		IPath projectJavaDir = debugSessionSettings.getJavaDirectory();
 		IPath projectClassDir = debugSessionSettings.getClassDirectory();
 
@@ -223,9 +222,9 @@
 			// TODO: what to do when compile fails... Throw an Exception?
 			throw new DebugCompileException("Failed to compile stratego program to java.");
 		}
-		IPath sourceBasedir = projectJavaDir;
+
 		IPath mainSourceFilename = new Path(packageFolder).append(className + ".java");
-		IPath binBase = compileJava(debugSessionSettings, sourceBasedir, mainSourceFilename, projectClassDir); // java to class
+		IPath binBase = compileJava(debugSessionSettings, mainSourceFilename, projectClassDir); // java to class
 		
 		return binBase;
 	}
@@ -490,18 +489,15 @@
 	 * @param binBasedir
 	 * @return
 	 */
-	protected IPath compileJava(DebugSessionSettings debugSessionSettings, IPath sourceBasedir, IPath mainSourceFileName, IPath binBasedir)
+	protected IPath compileJava(DebugSessionSettings debugSessionSettings, IPath mainSourceFileName, IPath binBasedir)
 	{
 		log("Compiling " + mainSourceFileName);
 		log("Please wait...");
 		// import org.strategoxt.stratego_lib.*;
 		// import org.strategoxt.libstrategodebuglib.*;
 		// import org.strategoxt.lang.*;
-		String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-		String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-		String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-		
-		String classPath = strategoxtjar + java.io.File.pathSeparatorChar + libstrategodebuglib + java.io.File.pathSeparatorChar + strjdebugruntime + java.io.File.pathSeparatorChar + sourceBasedir;
+		String classPath = debugSessionSettings.getDebugCompileClasspath();
+
 		if (debugSessionSettings.getJavaCompileExtraClasspath() != null)
 		{
 			for(String c : debugSessionSettings.getJavaCompileExtraClasspath())
@@ -511,7 +507,7 @@
 		}
 		//log(classPath);
 		// http://www.javaworld.com/javatips/jw-javatip131.html
-		IPath filename = sourceBasedir.append(mainSourceFileName);
+		IPath filename = debugSessionSettings.getJavaDirectory().append(mainSourceFileName);
 		String[] args = new String[] {
 		        "-d", binBasedir.toOSString(),
 		         filename.toOSString(),

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -116,6 +116,7 @@
 		*/
 	}
 	
+	@SuppressWarnings("unchecked")
 	private static Location location(ClassType clazz, int linenumber) {
 		Location location = null;
 		try {
@@ -138,6 +139,7 @@
 		return location;
 	}
 	
+	@SuppressWarnings("unchecked")
 	public static void createBreakpointEntryRequest(EventRequestManager mgr, ClassType clazz, int linenumber, String eventType)
 	{
 		int suspendPolicy = EventRequest.SUSPEND_EVENT_THREAD;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -2,6 +2,8 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
+import java.util.ArrayList;
+import java.util.List;
 
 import org.eclipse.core.runtime.IPath;
 
@@ -9,8 +11,7 @@
 public class DebugSessionSettings {
 	
 	public final static String STRATEGOXT_JAR = "strategoxt.jar";
-	public final static String STRATEGO_DEBUG_RUNTIME_JAR = "stratego-debug-runtime.jar";
-	public final static String STRATEGO_DEBUG_RUNTIME_JAVA_JAR = "stratego-debug-runtime-java.jar";
+
 	public final static String STRATEGODEBUGLIB_RTREE = "strategodebuglib.rtree";
 	
 	private String projectName;
@@ -139,34 +140,46 @@
 		this.strategoFilePath = strategoFilePath;
 	}
 
+	/**
+	 * All required jars are in this directory...
+	 * @param directory
+	 */
 	public void setJarLibraryDirectory(IPath directory)
 	{
-		/*
-		if (directory.endsWith("/"))
-		{
-			directory = directory.substring(0, directory.length()-1);
-		}*/
 		IPath strategoxt_jar = directory.append(STRATEGOXT_JAR);
-		IPath stratego_debug_runtime_jar = directory.append(STRATEGO_DEBUG_RUNTIME_JAR);
-		IPath stratego_debug_runtime_java_jar = directory.append(STRATEGO_DEBUG_RUNTIME_JAVA_JAR);
 		
 		this.strategoxtJar = strategoxt_jar;
-		this.strategoDebugRuntimeJar = stratego_debug_runtime_jar;
-		this.strategoDebugRuntimeJavaJar = stratego_debug_runtime_java_jar;
 
 		this.strategoDebugLibraryDirectory = directory; // rtree
 	}
 	
+	private List<IPath> runtimeJars = null;
+	
+	public List<IPath> getRuntimeJars()
+	{
+		return runtimeJars;
+	}
+	
+	/**
+	 * Sets the paths to "stratego-debug-runtime.jar" and "stratego-debug-runtime-java.jar"
+	 * @param runtimeJars
+	 */
+	public void setRuntimeJars(List<IPath> runtimeJars)
+	{
+		this.runtimeJars = runtimeJars;
+	}
+	
 	public void checkJarLibraries() throws FileNotFoundException
 	{
 		IPath strategodebuglib = getStrategoDebugLibraryDirectory().append(STRATEGODEBUGLIB_RTREE); // should contain strategodebuglib.rtree
 		checkExistance(strategodebuglib);
 		IPath strategoxtjar = getStrategoxtJar(); // should exist
 		checkExistance(strategoxtjar);
-		IPath strategodebugruntimejar = getStrategoDebugRuntimeJar(); // should exist
-		checkExistance(strategodebugruntimejar);
-		IPath strategodebugruntimejavajar = getStrategoDebugRuntimeJavaJar(); // should exist
-		checkExistance(strategodebugruntimejavajar);
+		
+		for(IPath runtimeJar : this.getRuntimeJars())
+		{
+			checkExistance(runtimeJar);
+		}
 	}
 	
 	protected void checkExistance(IPath path) throws FileNotFoundException{
@@ -177,6 +190,26 @@
 		}
 	}
 	
+	public String getDebugCompileClasspath()
+	{
+		List<IPath> cpList = new ArrayList<IPath>();
+		cpList.add(this.getStrategoxtJar());
+		cpList.addAll(this.getRuntimeJars());
+		cpList.add(this.getJavaDirectory());
+		String classPath = FileUtil.convertIPathToClasspath(cpList);
+		return classPath;
+	}
+	
+	public String getRunClasspath()
+	{
+		List<IPath> cpList = new ArrayList<IPath>();
+		cpList.add(this.getStrategoxtJar());
+		cpList.addAll(this.getRuntimeJars());
+		cpList.add(this.getClassDirectory());
+		String classPath = FileUtil.convertIPathToClasspath(cpList);
+		return classPath;
+	}
+	
 	//private static String root = "/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source";
 	//public static String strategoxtjar = root+"/org.strategoxt.imp.debug.stratego.transformer/utils/strategoxt.jar";
 	//public static String libstrategodebuglib = root + "/org.strategoxt.imp.debug.stratego.runtime/include/stratego-debug-runtime.jar";
@@ -208,30 +241,11 @@
 	{
 		return this.strategoxtJar;
 	}
-	
-	private IPath strategoDebugRuntimeJar = null;
-	
-	/**
-	 * Returns a path to stratego-debug-runtime.jar
-	 * @return
-	 */
-	public IPath getStrategoDebugRuntimeJar()
-	{
-		return this.strategoDebugRuntimeJar;
-	}
-	
-	private IPath strategoDebugRuntimeJavaJar = null;
+
 	
 	/**
-	 * Returns a path to stratego-debug-runtime-java.jar
-	 * @return
+	 * Contains stratego compile time extra arguments.
 	 */
-	public IPath getStrategoDebugRuntimeJavaJar()
-	{
-		return this.strategoDebugRuntimeJavaJar;
-	}
-	
-	
 	private String[] strategoCompileTimeExtraArguments = null;
 	
 	public String[] getCompileTimeExtraArguments() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettingsFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettingsFactory.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettingsFactory.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -10,14 +10,24 @@
 	public static DebugSessionSettings createTest(IPath workingDirectory, String projectName)
 	{
 		DebugSessionSettings settings = new DebugSessionSettings(workingDirectory, projectName);
+		
 		File f = new File("../org.strategoxt.imp.debug.stratego.core/lib");
-		settings.setJarLibraryDirectory(new Path(f.getAbsolutePath()));
+		settings.setJarLibraryDirectory(new Path(f.getAbsolutePath())); // need for the rtree file
+		
+		java.util.List<IPath> entries = org.strategoxt.imp.debug.stratego.runtime.ClasspathHandler.getClasspathEntries();
+		settings.setRuntimeJars(entries);
+		
 		return settings;
 	}
 	
 	public static DebugSessionSettings create(IPath workingDirectory, String projectName)
 	{
 		DebugSessionSettings settings = new DebugSessionSettings(workingDirectory, projectName);
+		// find the path to the runtime and the transformer classpath
+		
+		java.util.List<IPath> entries = org.strategoxt.imp.debug.stratego.runtime.ClasspathHandler.getClasspathEntries();
+		settings.setRuntimeJars(entries);
+		
 		return settings;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -58,5 +58,38 @@
 		return matches;
 	}
 	
-
+	/**
+	 * Converts to list of IPath's to a single String separated by OS-dependant pathSeparatorChar.
+	 * This String can be used as a classpath.
+	 * @param list
+	 * @return
+	 */
+	public static String convertIPathToClasspath(List<IPath> list)
+	{
+		boolean first = true;
+		StringBuilder builder = new StringBuilder();
+		for(IPath path : list)
+		{
+			if (!first)
+			{
+				builder.append(java.io.File.pathSeparatorChar);
+			}
+			else
+			{
+				first = false;
+			}
+			builder.append(path);
+		}
+		return builder.toString();
+	}
+	
+	public static String[] convertIPathToStringArray(List<IPath> list)
+	{
+		String[] cp = new String[list.size()];
+		for(int i = 0; i < list.size(); i++)
+		{
+			cp[i] = list.get(i).toOSString();
+		}
+		return cp;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/StrategoTermBuilder.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -175,6 +175,7 @@
         return strategoAppl;
 	}
 	
+	@SuppressWarnings("unchecked")
 	public IStrategoList buildStrategoList(Value value) 
 	{
 		// instance of org.spoofax.interpreter.terms.IStrategoTerm[]
@@ -235,6 +236,7 @@
 		}
 	}
 	
+	@SuppressWarnings("unchecked")
 	public IStrategoTerm[] buildStrategoTermArray(Value value)
 	{
     	ArrayReference arrayRef = (ArrayReference) value;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -16,6 +16,7 @@
 import com.sun.jdi.connect.ListeningConnector;
 import com.sun.jdi.connect.VMStartException;
 
+ at SuppressWarnings("unchecked")
 public class VMLauncherHelper {
 
 	//  Do we want to watch assignments to fields
@@ -48,7 +49,6 @@
 	 * @param vmManager
 	 * @return
 	 */
-	@SuppressWarnings("unchecked")
 	public static LaunchingConnector findCLLaunchingConnector(VirtualMachineManager vmManager) {
 		List<Connector> connectors = vmManager.allConnectors();
 		//vmManager.l

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -0,0 +1,51 @@
+package org.strategoxt.imp.debug.stratego.runtime;
+
+import java.io.IOException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.eclipse.core.runtime.FileLocator;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
+
+public class ClasspathHandler {
+
+	public final static String STRATEGO_DEBUG_RUNTIME_JAR_NAME = "stratego-debug-runtime.jar";
+	public final static String STRATEGO_DEBUG_RUNTIME_JAVA_JAR_NAME = "stratego-debug-runtime-java.jar";
+	
+	public final static String STRATEGO_DEBUG_RUNTIME_JAR_ENTRY = "/include/" + STRATEGO_DEBUG_RUNTIME_JAR_NAME;
+	public final static String STRATEGO_DEBUG_RUNTIME_JAVA_JAR_ENTRY = "/include/" + STRATEGO_DEBUG_RUNTIME_JAVA_JAR_NAME;
+	/**
+	 * Returns a list of locations that are generated by this plugin.
+	 * The jars "stratego-debug-runtime-java.jar" and "stratego-debug-runtime.jar" are in the include dir of this plugin.
+	 * 
+	 * @return
+	 */
+	public static List<IPath> getClasspathEntries()
+	{
+		List<IPath> jars = new ArrayList<IPath>();
+		jars.add(getPathFromBundle(STRATEGO_DEBUG_RUNTIME_JAR_ENTRY));
+		jars.add(getPathFromBundle(STRATEGO_DEBUG_RUNTIME_JAVA_JAR_ENTRY));
+		return jars;
+	}
+	
+	public static IPath getPathFromBundle(String pathInBundle)
+	{
+		org.strategoxt.imp.debug.stratego.runtime.Activator runtimeActivator = org.strategoxt.imp.debug.stratego.runtime.Activator.getInstance();
+		URL pathInBundleURL = runtimeActivator.getBundle().getEntry(pathInBundle);
+		System.out.println("RUNTIME: " + pathInBundleURL);
+		URL fileURL = null;
+		try {
+			fileURL = FileLocator.toFileURL(pathInBundleURL);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		
+		String urlPath = fileURL.getPath();
+		IPath path = new Path(urlPath);
+		System.out.println("OSSTRING: " + path.toOSString());
+		return path;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/testimports/.disable-global-analysis
==============================================================================

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/expected/.disable-global-analysis
==============================================================================

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileDynamic.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileDynamic.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileDynamic.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -5,6 +5,7 @@
 import org.StrategoFileManager;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
+import org.junit.Assert;
 import org.junit.Test;
 import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
@@ -43,6 +44,8 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
 		
 		checkOutput(debugSessionSettings);
 		
@@ -55,11 +58,7 @@
 			String mainClass = "dynamic.dynamic";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			String classpath = cp;
 			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileInvalidProgramTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileInvalidProgramTest.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileInvalidProgramTest.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -51,6 +51,7 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertNull(binBase);
 		
 		checkOutput(debugSessionSettings);
 		
@@ -63,11 +64,7 @@
 			String mainClass = "invalidprogram1.invalidprogram1";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			String classpath = cp;
 			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileLocalVar.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileLocalVar.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileLocalVar.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -5,6 +5,7 @@
 import org.StrategoFileManager;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
+import org.junit.Assert;
 import org.junit.Test;
 import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
@@ -45,6 +46,9 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
+		
 		debugCompiler.getDebugCompileProgress().printStats();
 		checkOutput(debugSessionSettings);
 		
@@ -57,11 +61,7 @@
 			String mainClass = "localvar.localvar";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			String classpath = cp;
 			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
 		}
@@ -99,6 +99,9 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
+		
 		debugCompiler.getDebugCompileProgress().printStats();
 		checkOutput(debugSessionSettings);
 		
@@ -111,11 +114,7 @@
 			String mainClass = "localvar_rtree.localvar_rtree";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			String classpath = cp;
 			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
 		}
@@ -147,6 +146,9 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
+		
 		debugCompiler.getDebugCompileProgress().printStats();
 		//checkOutput(debugSessionSettings);
 		
@@ -159,11 +161,7 @@
 			String mainClass = "localvar_run.localvar_run";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			String classpath = cp;
 			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTestImports.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTestImports.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTestImports.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -5,6 +5,7 @@
 import org.StrategoFileManager;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
+import org.junit.Assert;
 import org.junit.Test;
 import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
@@ -43,6 +44,8 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
 		
 		checkOutput(debugSessionSettings);
 		
@@ -55,11 +58,7 @@
 			String mainClass = "testimports.testimports";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			String classpath = cp;
 			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -6,6 +6,7 @@
 import org.StrategoFileManager;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
+import org.junit.Assert;
 import org.junit.Test;
 import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
@@ -162,6 +163,8 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
 		
 		//checkOutput(debugSessionSettings);
 		
@@ -175,11 +178,7 @@
 			String mainClass = "transformer_debug.transformer_debug";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			if (debugSessionSettings.getJavaCompileExtraClasspath() != null)
 			{
 				for(String c : debugSessionSettings.getJavaCompileExtraClasspath())
@@ -242,6 +241,8 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
 		
 		//checkOutput(debugSessionSettings);
 		
@@ -255,11 +256,7 @@
 			String mainClass = "transformer_run.transformer_run";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			if (debugSessionSettings.getJavaCompileExtraClasspath() != null)
 			{
 				for(String c : debugSessionSettings.getJavaCompileExtraClasspath())

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -6,6 +6,7 @@
 import org.StrategoFileManager;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
+import org.junit.Assert;
 import org.junit.Test;
 import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
@@ -69,10 +70,13 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
 		
-		checkOutput(debugSessionSettings);
+		// should have no output
+		//checkOutput(debugSessionSettings);
 		
-		boolean runjava = true;
+		boolean runjava = false;
 		// run .class
 		if (runjava && compileSucces)
 		{
@@ -82,11 +86,7 @@
 			String mainClass = "transformer_error.transformer_error";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			String classpath = cp;
 			System.out.println("ARGS: " + mainArgs);
 			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompilerTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompilerTest.java	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompilerTest.java	Wed Mar  9 11:35:20 2011	(r22337)
@@ -5,6 +5,7 @@
 import org.StrategoFileManager;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
+import org.junit.Assert;
 import org.junit.Test;
 import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
@@ -45,6 +46,8 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
 		
 		checkOutput(debugSessionSettings);
 		
@@ -57,11 +60,7 @@
 			String mainClass = "localvardebug.localvardebug";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String strategoxtjar = debugSessionSettings.getStrategoxtJar().toOSString();
-			String libstrategodebuglib = debugSessionSettings.getStrategoDebugRuntimeJar().toOSString();
-			String strjdebugruntime = debugSessionSettings.getStrategoDebugRuntimeJavaJar().toOSString();
-			
-			String cp = strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + binBase;
+			String cp = debugSessionSettings.getRunClasspath();
 			String classpath = cp;
 			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
 		}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/localvar/.disable-global-analysis
==============================================================================

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/generated/test-prop/.disable-global-analysis
==============================================================================

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/scombi/.disable-global-analysis
==============================================================================

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/test-failing-strxt/.disable-global-analysis
==============================================================================

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/test/src/testimports/.disable-global-analysis
==============================================================================

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/tests/commandline-tests.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/tests/commandline-tests.str	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/tests/commandline-tests.str	Wed Mar  9 11:35:20 2011	(r22337)
@@ -9,3 +9,50 @@
 		<debug(!"test-missing-i")> ""
 		; arguments* := ["./transformer"]
 		; main
+		  
+    test-dirname-1 =
+    	path := "/foo/bar/sto"
+    	; dir1 := <dirname> path
+    	; <debug(!"dirname '/foo/bar/sto' of Should be '/foo/bar': ")> dir1
+    	; dir2 := <dirname> dir1
+    	; <debug(!"dirname '/foo/bar' of Should be '/foo': ")> dir2
+    	; if ?"/foo" then
+    	  	debug(!"if true, current term is '/foo': ")
+    	end
+    	
+  test-walk-dirs-1 =
+  	tuple := ("/foo/bar/cheese", "/foo")
+  	;debug(!"tuple: ")
+  	; walk-dirs(check-disable-global-analysis-file)
+  	  
+  test-walk-dirs-2 =
+  	(
+  	tuple := ("/foo/bar/cheese", "/fee")
+  	;debug(!"tuple: ")
+  	; walk-dirs(check-disable-global-analysis-file)
+  	  )
+  	   < debug(!"succes ") + debug(!"fail")
+    	
+  /*
+  	If the current dir contains the file ".disable-global-analysis"
+  	then add the dynamic rule: "NoAnalysis: _" 
+  */
+  check-disable-global-analysis-file:
+  	current-dir -> current-dir
+  
+  /*
+    Walk all parent dirs from start-dir to end-dir
+  */
+  walk-dirs(check-dir-strategy):
+  	(start-dir, end-dir) -> end-dir
+  	with
+  		!start-dir
+  		; check-dir-strategy
+  		; if or(?end-dir, ?"/") then
+  			// exit
+  			<debug(!"finished walk ")> (start-dir, end-dir)
+  		else
+  			<debug(!"check subdir: ")> (start-dir, end-dir)
+  			; parent-dir := <dirname> start-dir
+  			; <walk-dirs(check-dir-strategy)> (parent-dir, end-dir)
+  	    end

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Wed Mar  9 11:03:32 2011	(r22336)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Wed Mar  9 11:35:20 2011	(r22337)
@@ -8,11 +8,11 @@
  org.eclipse.core.runtime,
  org.eclipse.debug.ui,
  org.eclipse.ui.ide,
- org.eclipse.ui.workbench.texteditor;bundle-version="3.5.1",
+ org.eclipse.ui.workbench.texteditor;bundle-version="3.5.0",
  org.eclipse.imp.runtime,
  org.strategoxt.imp.debug.core,
- org.eclipse.jdt.ui;bundle-version="3.5.2",
- org.eclipse.jdt.core;bundle-version="3.5.2"
+ org.eclipse.jdt.ui;bundle-version="3.5.0",
+ org.eclipse.jdt.core;bundle-version="3.5.0"
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Import-Package: org.eclipse.jface.text

From R.B.Vermaas at tudelft.nl  Wed Mar  9 14:15:10 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 09 Mar 2011 13:15:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22338 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder
Message-ID: <20110309131510.4ECA87F80B2@mx1.tudelft.nl>

Author: rob
Date: Wed Mar  9 13:15:09 2011
New Revision: 22338
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22338&sc=1

Log:
some lists do not have sort

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AutoConcatList.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AutoConcatList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AutoConcatList.java	Wed Mar  9 11:35:20 2011	(r22337)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AutoConcatList.java	Wed Mar  9 13:15:09 2011	(r22338)
@@ -65,7 +65,7 @@
 		} else if (node == null && nodes == null) {
 			if (e instanceof AutoConcatList) {
 				AutoConcatList<E> eList = (AutoConcatList<E>) e;
-				if (eList.getSort().equals(sort)) {
+				if (eList.getSort() == null || eList.getSort().equals(sort)) {
 					node = eList.node;
 					nodes = eList.nodes;
 					return true;
@@ -76,7 +76,7 @@
 			asList();
 			if (e instanceof AutoConcatList) {
 				AutoConcatList<E> eList = (AutoConcatList<E>) e;
-				if (eList.getSort().equals(sort)) {
+				if (eList.getSort() == null || eList.getSort().equals(sort)) {
 					if (eList.node != null) {
 						nodes.add(eList.node);
 					} else if (eList.nodes != null) {

From R.B.Vermaas at tudelft.nl  Wed Mar  9 15:27:47 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 09 Mar 2011 14:27:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22339 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110309142747.7C6F5CC2E3@mx4.tudelft.nl>

Author: rob
Date: Wed Mar  9 14:27:47 2011
New Revision: 22339
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22339&sc=1

Log:
update spoofax-libs.jar with some imploder fixes

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From L.C.L.Kats at tudelft.nl  Wed Mar  9 15:44:02 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 09 Mar 2011 14:44:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22340 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental
Message-ID: <20110309144402.EC704108C00C@mx3.tudelft.nl>

Author: LennartKats
Date: Wed Mar  9 14:44:02 2011
New Revision: 22340
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22340&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSGLR.java	Wed Mar  9 14:27:47 2011	(r22339)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/incremental/IncrementalSGLR.java	Wed Mar  9 14:44:02 2011	(r22340)
@@ -150,6 +150,7 @@
 			new IncrementalTreeBuilder<TNode>(this, damageAnalyzer, newInput, filename, damageNodesSet, repairedNodes, skippedChars);
 		TNode result = treeBuilder.buildOutput(lastAst);
 		lastReconstructedNodes = treeBuilder.getLastReconstructedNodes();
+		lastAst = result;
 		return result;
 	}
 	

From r.t.lindeman at student.tudelft.nl  Wed Mar  9 16:51:10 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Wed, 09 Mar 2011 15:51:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22341 -
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <20110309155110.713E57F80C6@mx1.tudelft.nl>

Author: RickyLindeman
Date: Wed Mar  9 15:51:10 2011
New Revision: 22341
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22341&sc=1

Log:
lowered some version number requirements for eclipse plugins, unpack the runtime and transformer plugins

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Mar  9 14:44:02 2011	(r22340)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Wed Mar  9 15:51:10 2011	(r22341)
@@ -55,9 +55,9 @@
       <import plugin="org.eclipse.ui.navigator"/>
       <import plugin="org.eclipse.ui.views"/>
       <import plugin="org.eclipse.ui.workbench.texteditor"/>
-      <import plugin="org.eclipse.jdt.core" version="3.5.2" match="greaterOrEqual"/>
+      <import plugin="org.eclipse.jdt.core" version="3.5.0" match="greaterOrEqual"/>
       <import plugin="org.eclipse.osgi"/>
-      <import plugin="org.eclipse.jdt.ui" version="3.5.2" match="greaterOrEqual"/>
+      <import plugin="org.eclipse.jdt.ui" version="3.5.0" match="greaterOrEqual"/>
       <import plugin="org.eclipse.pde.ui"/>
       <import plugin="org.eclipse.ui.forms"/>
       <import plugin="org.eclipse.search"/>
@@ -66,7 +66,7 @@
       <import plugin="org.eclipse.pde.core"/>
       <import plugin="org.eclipse.help.ui"/>
       <import plugin="org.eclipse.jdt.debug" version="3.5.0" match="greaterOrEqual"/>
-      <import plugin="org.eclipse.jdt.launching" version="3.5.1" match="greaterOrEqual"/>
+      <import plugin="org.eclipse.jdt.launching" version="3.5.0" match="greaterOrEqual"/>
       <import plugin="org.eclipse.core.variables"/>
    </requires>
 
@@ -309,14 +309,12 @@
          id="strj_dbg_transformer"
          download-size="0"
          install-size="0"
-         version="1.0.0"
-         unpack="false"/>
+         version="1.0.0"/>
 
    <plugin
          id="strjdbgruntimelib"
          download-size="0"
          install-size="0"
-         version="1.0.0"
-         unpack="false"/>
+         version="1.0.0"/>
 
 </feature>

From R.B.Vermaas at tudelft.nl  Thu Mar 10 10:33:05 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 10 Mar 2011 09:33:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22342 -
	strategoxt/branches/strategoxt-java/libraries/sglr/tests
Message-ID: <20110310093305.DF7F5108C025@mx3.tudelft.nl>

Author: rob
Date: Thu Mar 10 09:33:05 2011
New Revision: 22342
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22342&sc=1

Log:
remove asfix2me-tests and asfix-anno-position-info-tests as they are obsolete

Modified:
   strategoxt/branches/strategoxt-java/libraries/sglr/tests/stratego-sglr-tests.str

Modified: strategoxt/branches/strategoxt-java/libraries/sglr/tests/stratego-sglr-tests.str
==============================================================================
--- strategoxt/branches/strategoxt-java/libraries/sglr/tests/stratego-sglr-tests.str	Wed Mar  9 15:51:10 2011	(r22341)
+++ strategoxt/branches/strategoxt-java/libraries/sglr/tests/stratego-sglr-tests.str	Thu Mar 10 09:33:05 2011	(r22342)
@@ -32,8 +32,6 @@
     ; implode-tests-conc
     ; implode-tests-ast-attributes    
     ; implode-tests-lexical    
-    ; asfix2me-tests
-    ; asfix-anno-position-info-tests
     ; asfix-anno-location-tests
     )
 
@@ -386,74 +384,6 @@
 
     ; where(<close-parse-table> tbl)
 
-/**
- * Position info
- */
-strategies
-
-  asfix-anno-position-info-tests =
-      where(
-        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
-      )
-
-    ; apply-test(!"Position info for a simple expression"
-      , parse-string-pt(|tbl)
-        ; asfix-anno-position-info(|"")
-        ; implode-asfix
-        ; strip-non-string-annos
-      , !"1 + 2"
-      , !Plus(
-           Int("1"{[pos-info(),area-in-file("",area(1,0,1,1,0,1))]})
-         , Int("2"{[pos-info(),area-in-file("",area(1,4,1,5,4,1))]})
-         )
-      )
-
-    ; apply-test(!"Position info for a simple expression"
-      , parse-string-pt(|tbl)
-        ; asfix-anno-position-info(|"")
-        ; implode-asfix
-        ; strip-non-string-annos
-      , !"1 + 234"
-      , !Plus(
-           Int("1"{[pos-info(),area-in-file("",area(1,0,1,1,0,1))]})
-         , Int("234"{[pos-info(),area-in-file("",area(1,4,1,7,4,3))]})
-         )
-      )
-
-    ; where(
-        <close-parse-table> tbl
-      )
-
-    /* position-info produces SEGV on amb
-    ; where(
-        <ReadFromFile> "ExpIntAmb.tbl"; open-parse-table => ambtbl
-      )
-
-
-    ; apply-and-check(!"Position info for a simple ambiguous expression"
-      , parse-string-pt(|ambtbl)
-        ; asfix-anno-position-info(|"")
-        ; implode-asfix
-        ; strip-non-string-annos
-
-      , !"1 + 2 + 3"
-      , ?amb(<id>)
-        ; fetch(
-            ?Plus(
-              Int("1"{[pos-info(),area-in-file("",area(1,0,1,1,0,1))]})
-            , Plus(
-                Int("2"{[pos-info(),area-in-file("",area(1,4,1,5,4,1))]})
-              , Int("3"{[pos-info(),area-in-file("",area(1,8,1,9,8,1))]})
-              )
-            )
-         )
-      )
-
-    ; where(
-        <close-parse-table> ambtbl
-      )
-    */
-
   strip-non-string-annos =
     topdown(if not(is-string) then rm-annotations end)
 
@@ -1145,59 +1075,6 @@
     ; where(<close-parse-table> tbl)
 
     
-  asfix2me-tests = id
-    ; where(
-        <ReadFromFile> "ExpInt.tbl"; open-parse-table => tbl
-      )
-
-    ; set-default-sglr-config
-    ; where(<set-parse-tree-format> AsFix2ME())
-
-    ; apply-and-check(!"Check that the parse tree format can be set to AsFix2ME"
-      , parse-string-pt(|tbl)
-      , !"12 + 13"
-      ,   oncetd(?[49, 50])
-        ; oncetd(?[49, 51])
-      )
-
-    ; set-default-sglr-config      
-    ; where(set-asfix2me-format)
-    
-    ; apply-and-check(!"Check that the parse tree format can be set to AsFix2ME"
-      , parse-string-pt(|tbl)
-      , !"12 + 13"
-      ,   oncetd(?[49, 50])
-        ; oncetd(?[49, 51])
-      )
-      
-    ; set-default-sglr-config
-    ; where(<set-parse-tree-format> AsFix2())
-
-    ; apply-and-check(!"Check that the parse tree format can be set to AsFix2"
-      , parse-string-pt(|tbl)
-      , !"12 + 13"
-      ,   oncetd(?[49])
-        ; oncetd(?[50])
-        ; oncetd(?[51])
-        ; not(oncetd(?[49, 50]))
-        ; not(oncetd(?[49, 51]))
-      )
-
-    ; set-default-sglr-config      
-    ; where(set-asfix2-format)
-    
-    ; apply-and-check(!"Check that the parse tree format can be set to AsFix2"
-      , parse-string-pt(|tbl)
-      , !"12 + 13"
-      ,   oncetd(?[49])
-        ; oncetd(?[50])
-        ; oncetd(?[51])
-        ; not(oncetd(?[49, 50]))
-        ; not(oncetd(?[49, 51]))        
-      )
-
-    ; set-default-sglr-config      
-
   conc-test-fetch-top =
     oncetd(?appl(prod(_, cf(iter-star-sep(sort("Exp"), lit(","))), _), _); ?appl)
     ; !appl

From r.t.lindeman at student.tudelft.nl  Thu Mar 10 12:37:16 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 10 Mar 2011 11:37:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22343 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.stratego.core/META-INF
	org.strategoxt.imp.debug.stratego.runtime
	org.strategoxt.imp.debug.stratego.runtime/META-INF ...
Message-ID: <20110310113716.541B77F80CD@mx1.tudelft.nl>

Author: RickyLindeman
Date: Thu Mar 10 11:37:15 2011
New Revision: 22343
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22343&sc=1

Log:
Fixed naming and version number of the runtime and the transformer plugin (and updated the feature.xml)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Thu Mar 10 09:33:05 2011	(r22342)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Thu Mar 10 11:37:15 2011	(r22343)
@@ -36,9 +36,9 @@
  org.eclipse.jdt.core;bundle-version="3.5.0",
  org.eclipse.core.runtime,
  org.strategoxt.strj,
- strjdbgruntimelib,
- strj_dbg_transformer,
  org.eclipse.imp.runtime,
- org.eclipse.ui.workbench
+ org.eclipse.ui.workbench,
+ org.strategoxt.imp.debug.stratego.runtime,
+ org.strategoxt.imp.debug.stratego.transformer
 Bundle-Activator: org.strategoxt.debug.core.Activator
 Bundle-ActivationPolicy: lazy

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Thu Mar 10 09:33:05 2011	(r22342)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Thu Mar 10 11:37:15 2011	(r22343)
@@ -1,8 +1,8 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
-Bundle-Name: Strjdbgruntimelib Plug-in
-Bundle-SymbolicName: strjdbgruntimelib; singleton:=true
-Bundle-Version: 1.0.0
+Bundle-Name: org.strategoxt.imp.debug.stratego.runtime
+Bundle-SymbolicName: org.strategoxt.imp.debug.stratego.runtime;singleton:=true
+Bundle-Version: 0.1.0.qualifier
 Bundle-Activator: org.strategoxt.imp.debug.stratego.runtime.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml	Thu Mar 10 09:33:05 2011	(r22342)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.xml	Thu Mar 10 11:37:15 2011	(r22343)
@@ -25,6 +25,9 @@
         <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
             <isset property="eclipse.running"/>
         </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
@@ -309,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -331,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java	Thu Mar 10 09:33:05 2011	(r22342)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java	Thu Mar 10 11:37:15 2011	(r22343)
@@ -33,7 +33,12 @@
     return descriptor;
   }
 
-  private static void createDescriptor()
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    StrjdbgruntimelibParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
   { 
     try
     { 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF	Thu Mar 10 09:33:05 2011	(r22342)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF	Thu Mar 10 11:37:15 2011	(r22343)
@@ -2,12 +2,12 @@
 Bundle-ManifestVersion: 2
 Bundle-Name: org.strategoxt.imp.debug.stratego.test
 Bundle-SymbolicName: org.strategoxt.imp.debug.stratego.test
-Bundle-Version: 1.0.0.qualifier
+Bundle-Version: 0.1.1.qualifier
 Require-Bundle: org.strategoxt.imp.debug.stratego.core,
  org.junit4;bundle-version="4.5.0",
  org.strategoxt.strj,
  org.eclipse.core.runtime,
- strj_dbg_transformer,
- strjdbgruntimelib
+ org.strategoxt.imp.debug.stratego.runtime,
+ org.strategoxt.imp.debug.stratego.transformer
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ClassPath: .

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Thu Mar 10 09:33:05 2011	(r22342)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Thu Mar 10 11:37:15 2011	(r22343)
@@ -1,8 +1,8 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
-Bundle-Name: Test Plug-in
-Bundle-SymbolicName: strj_dbg_transformer;singleton:=true
-Bundle-Version: 1.0.0
+Bundle-Name: org.strategoxt.imp.debug.stratego.transformer
+Bundle-SymbolicName: org.strategoxt.imp.debug.stratego.transformer;singleton:=true
+Bundle-Version: 0.1.0.qualifier
 Bundle-Activator: org.strategoxt.imp.debug.stratego.transformer.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml	Thu Mar 10 09:33:05 2011	(r22342)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.xml	Thu Mar 10 11:37:15 2011	(r22343)
@@ -25,6 +25,9 @@
         <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
             <isset property="eclipse.running"/>
         </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
         <condition property="externaljarflags" value="${externaljarflags}" else="">
             <isset property="externaljarflags"/>
         </condition>
@@ -309,9 +312,10 @@
         <!-- Aster to Stratego -->
         <target name="stratego.aster">
             <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
-            <pathconvert property="aster-input" setonempty="false" pathsep=" ">
-                <path><fileset dir="${basedir}" includes="*.astr"/></path>
-            </pathconvert>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
             <dependset>
                 <srcfileset dir="${basedir}">
                     <include name="**/*.astr"/>
@@ -331,9 +335,7 @@
         <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
             <java classname="org.strategoxt.aster.Main" failonerror="true">
                 <arg value="-i"/>
-                <fileset dir="${basedir}">
-                    <include name="**/*.astr"/>
-                </fileset>
+                <arg line="${aster-input}"/>
             </java>
         </target>
         

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java	Thu Mar 10 09:33:05 2011	(r22342)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java	Thu Mar 10 11:37:15 2011	(r22343)
@@ -33,7 +33,12 @@
     return descriptor;
   }
 
-  private static void createDescriptor()
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    TestParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
   { 
     try
     { 

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Thu Mar 10 09:33:05 2011	(r22342)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Thu Mar 10 11:37:15 2011	(r22343)
@@ -306,15 +306,15 @@
          unpack="false"/>
 
    <plugin
-         id="strj_dbg_transformer"
+         id="org.strategoxt.imp.debug.stratego.runtime"
          download-size="0"
          install-size="0"
-         version="1.0.0"/>
+         version="0.1.0.qualifier"/>
 
    <plugin
-         id="strjdbgruntimelib"
+         id="org.strategoxt.imp.debug.stratego.transformer"
          download-size="0"
          install-size="0"
-         version="1.0.0"/>
+         version="0.1.0.qualifier"/>
 
 </feature>

From R.B.Vermaas at tudelft.nl  Thu Mar 10 13:38:47 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 10 Mar 2011 12:38:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22344 -
	strategoxt/branches/strategoxt-java/libraries/lib/tests
Message-ID: <20110310123847.DA2C17F806F@mx1.tudelft.nl>

Author: rob
Date: Thu Mar 10 12:38:46 2011
New Revision: 22344
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22344&sc=1

Log:
rewritten some posix tests, disabled others

Modified:
   strategoxt/branches/strategoxt-java/libraries/lib/tests/system-posix-test.str

Modified: strategoxt/branches/strategoxt-java/libraries/lib/tests/system-posix-test.str
==============================================================================
--- strategoxt/branches/strategoxt-java/libraries/lib/tests/system-posix-test.str	Thu Mar 10 11:37:15 2011	(r22343)
+++ strategoxt/branches/strategoxt-java/libraries/lib/tests/system-posix-test.str	Thu Mar 10 12:38:46 2011	(r22344)
@@ -7,14 +7,16 @@
     test-suite(!"system-posix",
       fileno-tests
       ; access-tests
-      ; strerror-tests
+// TODO:
+//      ; strerror-tests
       ; perror-tests
       ; getcwd-tests
       ; abspath-tests
       ; is-abspath-tests
       ; file-props-tests
       ; readdir-tests
-      ; kill-tests
+// TODO:
+//      ; kill-tests
       ; times-tests
     )
 
@@ -26,11 +28,14 @@
       , !()
       , ?b; debug; (is-int,is-int,is-int,is-int)
       )
+    // TODO:
+/*
     ; apply-and-check(!"times and clock"
       , times; test(clock; debug(!"clock: "))
       , !()
       , ?a; debug; (is-int,is-int,is-int,is-int)
       )
+*/
 
 strategies
 
@@ -50,9 +55,9 @@
 
   readdir-tests =
     apply-test(!"readdir"
-    , readdir; fetch-elem(?"system-posix-test.c")
+    , readdir; fetch-elem(?"system-posix-test.str")
     , !"."
-    , !"system-posix-test.c"
+    , !"system-posix-test.str"
     )
 
 strategies
@@ -67,7 +72,8 @@
 	)
     ; apply-and-check(!"test2b"
 	, file-newer
-	, !("system-posix-test.c", "system-posix-test.str")
+	, where(<call>("touch",["system-posix-test.c"]))
+        ; !("system-posix-test.c", "system-posix-test.str")
 	, debug
 	)
 

From L.C.L.Kats at tudelft.nl  Thu Mar 10 13:58:36 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 10 Mar 2011 12:58:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22345 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110310125836.30E08108C033@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Mar 10 12:58:35 2011
New Revision: 22345
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22345&sc=1

Log:
added calls to increaseAmbiguityCount()

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Thu Mar 10 12:38:46 2011	(r22344)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Thu Mar 10 12:58:35 2011	(r22345)
@@ -364,7 +364,9 @@
 			switch (results.size()) {
 			case 0: return null;
 			case 1: return results.get(0);
-			default: return new Amb(results.toArray(new AbstractParseNode[results.size()]));
+			default:
+				ambiguityManager.increaseAmbiguityCount();
+				return new Amb(results.toArray(new AbstractParseNode[results.size()]));
 			}
 		} else {
 			final IStrategoTerm prod = getProduction(t);
@@ -576,6 +578,7 @@
 						AbstractParseNode extraAmb;
 						if(newAmbiguities.size() > 1) {
 							extraAmb = new Amb(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
+							ambiguityManager.increaseAmbiguityCount();
 						} else {
 							extraAmb = newAmbiguities.get(0);
 						}
@@ -629,6 +632,7 @@
 					AbstractParseNode n = null;
 					if(newAmbiguities.size() > 1) {
 						n = new Amb(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
+						ambiguityManager.increaseAmbiguityCount();
 					} else {
 						n = newAmbiguities.get(0);
 					}
@@ -752,12 +756,15 @@
 					rest[i] = kids[i];
 				}
 
+				
 				if (newAmbiguities.size() > 1) {
 					last = new Amb(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
+					ambiguityManager.increaseAmbiguityCount();
 				} else {
 					last = newAmbiguities.get(0);
 				}
 				rest[rest.length - 1] = last;
+				ambiguityManager.increaseAmbiguityCount();
 				return new Amb(rest);
 			} else {
 				throw new FilterException(parser);
@@ -819,6 +826,7 @@
 			return newAmbiguities.get(0);
 		}
 
+		ambiguityManager.increaseAmbiguityCount();
 		return new Amb(newAmbiguities.toArray(new AbstractParseNode[newAmbiguities.size()]));
 	}
 

From R.B.Vermaas at tudelft.nl  Thu Mar 10 14:40:36 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 10 Mar 2011 13:40:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22346 - in
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr:
	. client
Message-ID: <20110310134036.E1D6A2B8043@mx2.tudelft.nl>

Author: rob
Date: Thu Mar 10 13:40:35 2011
New Revision: 22346
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22346&sc=1

Log:
add -A flag to jsglr commandline, throw SGLRException on ambiguity when ambiguityIsError is set to true

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	Thu Mar 10 12:58:35 2011	(r22345)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	Thu Mar 10 13:40:35 2011	(r22346)
@@ -54,7 +54,9 @@
 		boolean heuristicFilters = false;
 		boolean buildParseTree = true;
 		boolean implode = false;
+		boolean ambiguityIsError = false;
 		int profilingRuns = 1;
+		
 		int warmup = 0;
 
 		for(int i=0;i<args.length;i++) {
@@ -90,6 +92,8 @@
 				buildParseTree = false;
 			} else if(args[i].equals("--implode")) {
 				implode = true;
+			} else if(args[i].equals("-A")) {
+				ambiguityIsError = true;
 			} else {
 				System.err.println("Unknown option: " + args[i]);
 				System.exit(1);
@@ -114,6 +118,7 @@
 		sglr.getDisambiguator().setFilterCycles(detectCycles);
 		sglr.getDisambiguator().setFilterAny(filter);
 		sglr.getDisambiguator().setHeuristicFilters(heuristicFilters);
+		sglr.getDisambiguator().setAmbiguityIsError(ambiguityIsError);
 		if (!buildParseTree)
 			sglr.setTreeBuilder(new NullTreeBuilder());
 		else if (implode)
@@ -195,7 +200,7 @@
 	}
 
 	private static void usage() {
-		System.out.println("Usage: org.spoofax.jsglr.Main [-f -d -v --no-tree-build --implode] -p <parsetable.tbl> -i <inputfile>");
+		System.out.println("Usage: org.spoofax.jsglr.Main [-f -d -v --no-tree-build --implode -A] -p <parsetable.tbl> -i <inputfile>");
 		System.exit(-1);
 	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Thu Mar 10 12:58:35 2011	(r22345)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Thu Mar 10 13:40:35 2011	(r22346)
@@ -268,7 +268,8 @@
 		return parser.getTreeBuilder().buildTree(t);
     }
 
-    private Object yieldTreeTop(AbstractParseNode t) {
+    private Object yieldTreeTop(AbstractParseNode t) throws SGLRException {
+        int ambCount = ambiguityManager.getAmbiguitiesCount();
 
 		if (Tools.debugging) {
 			Tools.debug("convertToATerm: ", t);
@@ -281,13 +282,12 @@
 			if(logStatistics)
 				logStatus();
 
-	        int ambCount = ambiguityManager.getAmbiguitiesCount();
 	        if (Tools.debugging) {
 	            Tools.debug("yield: ", r);
 	        }
 
 	        if(ambiguityIsError && ambCount > 0) {
-	        	return null;
+	        	throw new SGLRException(parser, "Ambiguities found") ;
 	        }
 	        else {
 	        	return parser.getTreeBuilder().buildTreeTop(r, ambCount);

From srabbelier at gmail.com  Thu Mar 10 15:51:09 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 14:51:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22347 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms
Message-ID: <20110310145109.216CB7F806C@mx1.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 14:51:08 2011
New Revision: 22347
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22347&sc=1

Log:
Don't use cls.getSimpleName in TermConverter

GWT only implements getName, which is sufficient for the purposes of
an exception message.

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java	Thu Mar 10 13:40:35 2011	(r22346)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/TermConverter.java	Thu Mar 10 14:51:08 2011	(r22347)
@@ -77,7 +77,7 @@
             case TUPLE: result =  convert((IStrategoTuple) term); break;
             case BLOB: result =  term; break;
             default:
-                throw new IllegalStateException("Unknown term type: " + term.getClass().getSimpleName());
+                throw new IllegalStateException("Unknown term type: " + term.getClass().getName());
         }
         if (isOriginEnabled)
         	factory.replaceTerm(result, term);

From srabbelier at gmail.com  Thu Mar 10 15:51:11 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 14:51:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22348 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms
Message-ID: <20110310145111.A914CCC212@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 14:51:11 2011
New Revision: 22348
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22348&sc=1

Log:
Make most org.spoofax.terms classes/constructors public

We want to use them in other packages as well.

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java	Thu Mar 10 14:51:08 2011	(r22347)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java	Thu Mar 10 14:51:11 2011	(r22348)
@@ -25,7 +25,7 @@
 	
 	private final ITermFactory factory;
 	
-	protected StrategoAnnotation(ITermFactory factory, IStrategoTerm term, IStrategoList annotations) {
+	public StrategoAnnotation(ITermFactory factory, IStrategoTerm term, IStrategoList annotations) {
 		super(term, annotations);
 		
 		if (!term.getAnnotations().isEmpty())

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java	Thu Mar 10 14:51:08 2011	(r22347)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAppl.java	Thu Mar 10 14:51:11 2011	(r22348)
@@ -21,7 +21,7 @@
 
     private IStrategoTerm[] kids;
 
-    protected StrategoAppl(IStrategoConstructor ctor, IStrategoTerm[] kids, IStrategoList annotations, int storageType) {
+    public StrategoAppl(IStrategoConstructor ctor, IStrategoTerm[] kids, IStrategoList annotations, int storageType) {
         super(annotations, storageType);
         this.ctor = ctor;
         this.kids = kids;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java	Thu Mar 10 14:51:08 2011	(r22347)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoInt.java	Thu Mar 10 14:51:11 2011	(r22348)
@@ -19,12 +19,12 @@
 
     private final int value;
     
-    protected StrategoInt(int value, IStrategoList annotations, int storageType) {
+    public StrategoInt(int value, IStrategoList annotations, int storageType) {
         super(annotations, storageType);
         this.value = value;
     }
     
-    protected StrategoInt(int value, int storageType) {
+    public StrategoInt(int value, int storageType) {
         this(value, null, storageType);
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java	Thu Mar 10 14:51:08 2011	(r22347)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoList.java	Thu Mar 10 14:51:11 2011	(r22348)
@@ -39,7 +39,7 @@
      * 
      * @see #prepend(IStrategoTerm) Adds a new head element to a list.
      */
-    protected StrategoList(IStrategoTerm head, IStrategoList tail, IStrategoList annotations, int storageType) {
+    public StrategoList(IStrategoTerm head, IStrategoList tail, IStrategoList annotations, int storageType) {
         super(annotations, storageType);
         this.head = head;
         this.tail = tail;

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java	Thu Mar 10 14:51:08 2011	(r22347)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoReal.java	Thu Mar 10 14:51:11 2011	(r22348)
@@ -19,7 +19,7 @@
 
     private final double value;
     
-    protected StrategoReal(double value, IStrategoList annotations, int storageType) {
+    public StrategoReal(double value, IStrategoList annotations, int storageType) {
         super(annotations, storageType);
         this.value = value;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Thu Mar 10 14:51:08 2011	(r22347)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTerm.java	Thu Mar 10 14:51:11 2011	(r22348)
@@ -183,7 +183,7 @@
         }
     }
     
-    protected StrategoTerm clone(boolean stripAttachments) {
+    public StrategoTerm clone(boolean stripAttachments) {
     	StrategoTerm result = clone();
     	if (stripAttachments)
     		result.clearAttachments();
@@ -194,7 +194,7 @@
         return annotations == null ? TermFactory.EMPTY_LIST : annotations;
     }
     
-    protected final void internalSetAnnotations(IStrategoList annotations) {
+    public final void internalSetAnnotations(IStrategoList annotations) {
     	if (annotations == TermFactory.EMPTY_LIST || annotations.isEmpty())
     		annotations = null; // essential for hash code calculation
     	

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java	Thu Mar 10 14:51:08 2011	(r22347)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoTuple.java	Thu Mar 10 14:51:11 2011	(r22348)
@@ -18,7 +18,7 @@
 
     private IStrategoTerm[] kids;
     
-    protected StrategoTuple(IStrategoTerm[] kids, IStrategoList annotations, int storageType) {
+    public StrategoTuple(IStrategoTerm[] kids, IStrategoList annotations, int storageType) {
         super(annotations, storageType);
         this.kids = kids;
         

From srabbelier at gmail.com  Thu Mar 10 15:51:14 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 14:51:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22349 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms
Message-ID: <20110310145114.71BF1CC212@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 14:51:14 2011
New Revision: 22349
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22349&sc=1

Log:
Explicitly cast arguments to Character.isX functions to char

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java	Thu Mar 10 14:51:11 2011	(r22348)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StringTermReader.java	Thu Mar 10 14:51:14 2011	(r22349)
@@ -47,10 +47,10 @@
         case '<': return parsePlaceholder(bis);
         default:
             bis.unread(ch);
-            if (Character.isLetter(ch)) {
+            if (Character.isLetter((char)ch)) {
                 return parseAnno(bis, parseAppl(bis));
             }
-            else if (Character.isDigit(ch) || ch == '-')
+            else if (Character.isDigit((char)ch) || ch == '-')
                 return parseAnno(bis, parseNumber(bis));
         }
         throw new ParseError("Invalid term: '" + (char)ch + "'");
@@ -142,7 +142,7 @@
             sb.append((char)ch);
             ch = bis.read();
         } // TODO: use a switch for this
-          while(Character.isLetterOrDigit(ch) || ch == '_' || ch == '-'
+          while(Character.isLetterOrDigit((char)ch) || ch == '_' || ch == '-'
             || ch == '+' || ch == '*' || ch == '$');
         
         //System.err.println(" - " + sb.toString());
@@ -234,7 +234,7 @@
         do {
             sb.append((char)ch);
             ch = bis.read();
-        } while(Character.isDigit(ch));
+        } while(Character.isDigit((char)ch));
         bis.unread(ch);
         return sb.toString(); 
     }

From srabbelier at gmail.com  Thu Mar 10 15:51:16 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 14:51:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22350 - in
	spoofax/trunk/spoofax/org.spoofax.terms: . .settings
	src/org/spoofax src/org/spoofax/gwt src/org/spoofax/gwt/java
	src/org/spoofax/gwt/java/lang src/org/spoofax/...
Message-ID: <20110310145116.8273A108C033@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 14:51:16 2011
New Revision: 22350
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22350&sc=1

Log:
Make org.spoofax.terms compilable under GWT

Added:
   spoofax/trunk/spoofax/org.spoofax.terms/.settings/com.google.gwt.eclipse.core.prefs
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/lang/
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/lang/CloneNotSupportedException.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/lang/Object.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/terms/
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/terms/TermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/terms/attachments/
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/terms/attachments/TermAttachmentType.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/termsGWT.gwt.xml
Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/.classpath
   spoofax/trunk/spoofax/org.spoofax.terms/.project

Modified: spoofax/trunk/spoofax/org.spoofax.terms/.classpath
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/.classpath	Thu Mar 10 14:51:14 2011	(r22349)
+++ spoofax/trunk/spoofax/org.spoofax.terms/.classpath	Thu Mar 10 14:51:16 2011	(r22350)
@@ -2,6 +2,7 @@
 <classpath>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
-	<classpathentry kind="src" path="src"/>
+	<classpathentry excluding="org/spoofax/gwt/**" kind="src" path="src"/>
+	<classpathentry kind="con" path="com.google.gwt.eclipse.core.GWT_CONTAINER"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>

Modified: spoofax/trunk/spoofax/org.spoofax.terms/.project
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/.project	Thu Mar 10 14:51:14 2011	(r22349)
+++ spoofax/trunk/spoofax/org.spoofax.terms/.project	Thu Mar 10 14:51:16 2011	(r22350)
@@ -20,9 +20,20 @@
 			<arguments>
 			</arguments>
 		</buildCommand>
+		<buildCommand>
+			<name>com.google.gdt.eclipse.core.webAppProjectValidator</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.google.gwt.eclipse.core.gwtProjectValidator</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
 		<nature>org.eclipse.pde.PluginNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>com.google.gwt.eclipse.core.gwtNature</nature>
 	</natures>
 </projectDescription>

Added: spoofax/trunk/spoofax/org.spoofax.terms/.settings/com.google.gwt.eclipse.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/.settings/com.google.gwt.eclipse.core.prefs	Thu Mar 10 14:51:16 2011	(r22350)
@@ -0,0 +1,4 @@
+#Wed Mar 09 14:17:42 CET 2011
+eclipse.preferences.version=1
+entryPointModules=org.spoofax.termsGWT
+gwtCompileSettings=PGd3dC1jb21waWxlLXNldHRpbmdzPjxsb2ctbGV2ZWw+SU5GTzwvbG9nLWxldmVsPjxvdXRwdXQtc3R5bGU+UFJFVFRZPC9vdXRwdXQtc3R5bGU+PGV4dHJhLWFyZ3M+PCFbQ0RBVEFbXV0+PC9leHRyYS1hcmdzPjx2bS1hcmdzPjwhW0NEQVRBWy1YbXg1MTJtXV0+PC92bS1hcmdzPjwvZ3d0LWNvbXBpbGUtc2V0dGluZ3M+

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/lang/CloneNotSupportedException.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/lang/CloneNotSupportedException.java	Thu Mar 10 14:51:16 2011	(r22350)
@@ -0,0 +1,35 @@
+/*
+ * Copyright 2007 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package java.lang;
+
+/**
+ * NOTE: in GWT this will never be thrown for normal array accesses, only for
+ * explicit throws.
+ *
+ * See <a
+ * href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/ArrayIndexOutOfBoundsException.html">the
+ * official Java API doc</a> for details.
+ */
+public class CloneNotSupportedException extends Exception {
+
+  public CloneNotSupportedException() {
+    super();
+  }
+
+  public CloneNotSupportedException(String msg) {
+    super(msg);
+  }
+}

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/lang/Object.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/java/lang/Object.java	Thu Mar 10 14:51:16 2011	(r22350)
@@ -0,0 +1,100 @@
+/*
+ * Copyright 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package java.lang;
+
+import com.google.gwt.core.client.JavaScriptObject;
+import com.google.gwt.core.client.impl.Impl;
+
+/**
+ * The superclass of all other types. The GWT emulation library supports a
+ * limited subset of methods on <code>Object</code> due to browser
+ * limitations. The methods documented here are the only ones available.
+ */
+public class Object {
+
+  /**
+   * Used by {@link com.google.gwt.core.client.impl.WeakMapping} in web mode
+   * to store an expando containing a String -> Object mapping.
+   *
+   * @skip
+   */
+  @SuppressWarnings("unused")
+  private transient JavaScriptObject expando;
+
+  /**
+   * A JavaScript Json map for looking up castability between types.
+   *
+   * @skip
+   */
+  @SuppressWarnings("unused")
+  private transient JavaScriptObject castableTypeMap;
+
+  /**
+   * magic magic magic.
+   *
+   * @skip
+   */
+  @SuppressWarnings("unused")
+  private transient JavaScriptObject typeMarker;
+
+  public boolean equals(Object other) {
+    return this == other;
+  }
+
+  /*
+   * Magic; unlike the real JRE, we don't spec this method as final. The
+   * compiler will generate a polymorphic override on every other class which
+   * will return the correct class object.
+   *
+   * TODO(scottb): declare this final, but have the compiler fix it up.
+   */
+  public Class<? extends Object> getClass() {
+    return Object.class;
+  }
+
+  public int hashCode() {
+    return Impl.getHashCode(this);
+  }
+
+  public String toString() {
+    return getClass().getName() + '@' + Integer.toHexString(hashCode());
+  }
+
+  /**
+   * Never called; here for compatibility.
+   *
+   * @skip
+   */
+  protected void finalize() throws Throwable {
+  }
+
+  protected native Object clone() throws CloneNotSupportedException /*-{
+    var r = {};
+
+    // prevents to use same hash code
+    @com.google.gwt.core.client.impl.Impl::getHashCode(Ljava/lang/Object;)(r);
+
+    var o = this;
+    for(var i in o){
+        if(!(i in r)){
+            r[i] = o[i];
+        }
+    }
+
+    return r;
+  }-*/;
+
+}
\ No newline at end of file

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/terms/TermFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/terms/TermFactory.java	Thu Mar 10 14:51:16 2011	(r22350)
@@ -0,0 +1,240 @@
+package org.spoofax.terms;
+
+import static java.lang.Math.min;
+import static org.spoofax.interpreter.terms.IStrategoTerm.MAXIMALLY_SHARED;
+import static org.spoofax.interpreter.terms.IStrategoTerm.MUTABLE;
+import static org.spoofax.interpreter.terms.IStrategoTerm.SHARABLE;
+import static org.spoofax.interpreter.terms.IStrategoTerm.STRING;
+
+import java.util.HashMap;
+
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoPlaceholder;
+import org.spoofax.interpreter.terms.IStrategoReal;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.*;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Karl T. Kalleberg <karltk add strategoxt.org>
+ */
+public class TermFactory extends AbstractTermFactory implements ITermFactory {
+
+    // Strings should be MAXIMALLY_SHARED, but we use
+    // a weaker assumption instead to be safe (StrategoXT/834)
+    private static final int STRING_POOL_STORAGE_TYPE = SHARABLE;
+
+    private static final int INT_POOL_STORAGE_TYPE = MAXIMALLY_SHARED;
+
+    public static final int MAX_POOLED_STRING_LENGTH = 100;
+
+    private static final IStrategoInt[] intCache = initIntCache();
+
+    private IStrategoConstructor placeholderConstructor;
+
+    /**
+     * The singleton maximally shared empty list instance.
+     *
+     * Other empty lists may exists, but this is the only one
+     * that may be marked maximally shared.
+     */
+    public static final StrategoList EMPTY_LIST =
+	new StrategoList(null, null, null, MAXIMALLY_SHARED);
+
+    // StrategoXT/801: must use weak keys and values, and must maintain maximal sharing to avoid early collection
+    private static final HashMap<String, StrategoString> asyncStringPool =
+        new HashMap<String, StrategoString>();
+
+    public TermFactory() {
+	super(SHARABLE);
+    }
+
+    public ITermFactory getFactoryWithStorageType(int storageType) {
+	if (storageType > SHARABLE)
+		throw new UnsupportedOperationException();
+	if (storageType == defaultStorageType)
+		return this;
+	TermFactory result = new TermFactory();
+	result.defaultStorageType = storageType;
+	return result;
+    }
+
+    @Override
+	public IStrategoAppl makeAppl(IStrategoConstructor ctr,
+            IStrategoTerm[] terms, IStrategoList annotations) {
+	int storageType = defaultStorageType;
+		storageType = min(storageType, getStorageType(terms));
+	if (storageType != 0)
+		storageType = min(storageType, getStorageType(annotations));
+	assert ctr.getArity() == terms.length;
+        return new StrategoAppl(ctr, terms, annotations, storageType);
+    }
+
+    public IStrategoInt makeInt(int i) {
+	if (0 <= i && i <= 255 && isTermSharingAllowed())
+		return intCache[i];
+	return new StrategoInt(i, null, defaultStorageType);
+    }
+
+    private static final IStrategoInt[] initIntCache() {
+	IStrategoInt[] results = new IStrategoInt[256];
+	for (int i = 0; i < results.length; i++) {
+		results[i] = new StrategoInt(i, INT_POOL_STORAGE_TYPE);
+	}
+	return results;
+    }
+
+    protected IStrategoList makeList() {
+	return isTermSharingAllowed() ? EMPTY_LIST : new StrategoList(null, null, null, defaultStorageType);
+    }
+
+    @Override
+	public IStrategoList makeList(IStrategoTerm[] terms, IStrategoList outerAnnos) {
+	int storageType = defaultStorageType;
+        IStrategoList result = makeList();
+        int i = terms.length - 1;
+        while (i > 0) {
+		IStrategoTerm head = terms[i--];
+            storageType = min(storageType, getStorageType(head));
+			result = new StrategoList(head, result, null, storageType);
+        }
+        if (i == 0) {
+		IStrategoTerm head = terms[0];
+            storageType = min(storageType, getStorageType(head));
+			result = new StrategoList(head, result, outerAnnos, storageType);
+        } else {
+		if (outerAnnos == null || outerAnnos.isEmpty()) {
+			return makeList();
+		} else {
+			return new StrategoList(null, null, outerAnnos, defaultStorageType);
+		}
+        }
+        return result;
+    }
+
+    @Override
+	public IStrategoList makeListCons(IStrategoTerm head, IStrategoList tail, IStrategoList annotations) {
+	int storageType = min(defaultStorageType, getStorageType(head, tail));
+
+	if (head == null) return makeList();
+	return new StrategoList(head, tail, annotations, storageType);
+    }
+
+    public IStrategoReal makeReal(double d) {
+        return new StrategoReal(d, null, defaultStorageType);
+    }
+
+    public IStrategoString makeString(String s) {
+	if (s.length() > MAX_POOLED_STRING_LENGTH)
+		return new StrategoString(s, null, defaultStorageType);
+
+	synchronized (TermFactory.class) {
+		StrategoString result = asyncStringPool.get(s);
+		// TODO(SRabbelier)
+		if (result == null) {
+			// StrategoString was garbage collected, but key string might still be in memory
+			// Reallocation should be safe either way
+			int type = isTermSharingAllowed() ? STRING_POOL_STORAGE_TYPE : MUTABLE;
+				result = new StrategoString(s, null, type);
+			asyncStringPool.put(s, result);
+		} else if (result.getStorageType() == MUTABLE || !isTermSharingAllowed()) {
+			// We cannot reuse the existing string,
+			// but to satisfy the tryMakeUniqueString() contract
+			// we *must* keep a reference to the original
+			// hashmap key alive as long as our result lives
+			result = new KeepAliveString(s, result);
+		}
+		return result;
+	}
+    }
+
+    public IStrategoString tryMakeUniqueString(String name) {
+        synchronized (TermFactory.class) {
+		if (asyncStringPool.containsKey(name)) {
+			return null;
+		} else if (name.length() > MAX_POOLED_STRING_LENGTH) {
+			throw new UnsupportedOperationException("String too long to be pooled (newname not allowed): " + name);
+		} else {
+		StrategoString result = new StrategoString(name, null, STRING_POOL_STORAGE_TYPE);
+			asyncStringPool.put(name, result);
+			return result;
+		}
+        }
+    }
+
+    @Override
+	public IStrategoTuple makeTuple(IStrategoTerm[] terms, IStrategoList annos) {
+        int storageType = min(defaultStorageType, getStorageType(terms));
+		return new StrategoTuple(terms, annos, storageType);
+    }
+
+    public IStrategoTerm annotateTerm(IStrategoTerm term, IStrategoList annotations) {
+        IStrategoList currentAnnos = term.getAnnotations();
+		if (currentAnnos == annotations) { // cheap check
+            return term;
+        } else if (term.getStorageType() == MAXIMALLY_SHARED) {
+			if (term == EMPTY_LIST) {
+				if (annotations == EMPTY_LIST || annotations.isEmpty()) {
+					return EMPTY_LIST;
+				} else {
+					return new StrategoList(null, null, annotations, defaultStorageType);
+				}
+			} else if (term.getTermType() == STRING) {
+				String value = ((IStrategoString) term).stringValue();
+				if (annotations == EMPTY_LIST || annotations.isEmpty()) {
+					return makeString(value);
+				} else {
+					return new StrategoString(value, annotations, defaultStorageType);
+				}
+			} else if (currentAnnos == EMPTY_LIST) {
+				return annotations.isEmpty() ? term : new StrategoAnnotation(this, term, annotations);
+			} else if (term instanceof StrategoAnnotation) {
+				term = ((StrategoAnnotation) term).getWrapped();
+				// int storageType = min(defaultStorageType, getStorageType(term));
+				return new StrategoAnnotation(this, term, annotations);
+			} else {
+				throw new UnsupportedOperationException("Unable to annotate term of type " + term.getClass().getName());
+			}
+        } else if ((annotations == EMPTY_LIST || annotations.isEmpty()) && term.getTermType() == STRING) {
+		return makeString(((IStrategoString) term).stringValue());
+        } else if (term instanceof StrategoTerm) {
+		StrategoTerm result = ((StrategoTerm) term).clone(true);
+		assert !(result instanceof StrategoWrapped) : "not yet supported";
+	    result.internalSetAnnotations(annotations);
+	    assert result.getStorageType() != MAXIMALLY_SHARED;
+	    return result;
+	} else {
+            throw new UnsupportedOperationException("Unable to annotate term of type " + term.getClass().getName() + " in " + getClass().getName());
+        }
+    }
+
+	public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
+        if (placeholderConstructor == null)
+            placeholderConstructor = makeConstructor("<>", 1);
+        return new StrategoPlaceholder(placeholderConstructor, template, EMPTY_LIST, defaultStorageType);
+	}
+
+    /**
+     * A Stratego string that maintains
+     * a reference to an existing string,
+     * that must be kept alive by the garbage collector
+     * at least as long as the current string is alive.
+     *
+     * @author Lennart Kats <lennart add lclnet.nl>
+     */
+    static class KeepAliveString extends StrategoString {
+		final Object gcKeepAlive;
+
+		public KeepAliveString(String s, Object gcKeepAlive) {
+			super(s, null, MUTABLE);
+			this.gcKeepAlive = gcKeepAlive;
+		}
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/terms/attachments/TermAttachmentType.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/gwt/org/spoofax/terms/attachments/TermAttachmentType.java	Thu Mar 10 14:51:16 2011	(r22350)
@@ -0,0 +1,46 @@
+package org.spoofax.terms.attachments;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class TermAttachmentType<T extends ITermAttachment> {
+
+	private static Map<Class<?>, TermAttachmentType<?>> types =
+		new HashMap<Class<?>, TermAttachmentType<?>>();
+
+	private final Class<?> type;
+
+	private TermAttachmentType(Class<?> type) {
+		this.type = type;
+		// Private default constructor
+	}
+
+	/**
+	 * Creates a new attachment type. Can only create attachment types that are not
+	 * a superclass or subclass of another, existing attachment type.
+	 */
+	public synchronized static<T extends ITermAttachment> TermAttachmentType<T> create(Class<T> baseClass) {
+		@SuppressWarnings("unchecked")
+		TermAttachmentType<T> result = (TermAttachmentType<T>) types.get(baseClass);
+		if (result != null) {
+			return result;
+		} else {
+			result = new TermAttachmentType<T>(baseClass);
+			for (Class<?> otherClass : types.keySet()) {
+				if (otherClass.getName() == baseClass.getName())
+					throw new IllegalArgumentException("An attachment type based on class "
+							+ otherClass.getName() + " already exists; cannot add " + baseClass.getName());
+			}
+			types.put(baseClass, result);
+			return result;
+		}
+	}
+
+	@Override
+	public String toString() {
+		return type.getName(); // (reflective call)
+	}
+}

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/termsGWT.gwt.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/termsGWT.gwt.xml	Thu Mar 10 14:51:16 2011	(r22350)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module rename-to='termsgwt'>
+
+  <inherits name='com.google.gwt.user.User'/>
+  <inherits name="com.google.gwt.http.HTTP"/>
+  <inherits name="org.spoofax.termsGWT"/>
+
+  <super-source path="gwt"/>
+  <source path=''/>
+  <source path='interpreter/terms'>
+	<exclude name="**/io/**"/>
+  </source>
+  <source path='terms'>
+    <exclude name="**/io/**"/>
+    <exclude name="**/TermFactory.java"/>
+	<exclude name="**/UniqueValueTerm.java"/>
+  </source>
+</module>

From srabbelier at gmail.com  Thu Mar 10 15:51:23 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 14:51:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22351 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/shared
Message-ID: <20110310145123.E84962B8044@mx2.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 14:51:23 2011
New Revision: 22351
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22351&sc=1

Log:
Work around addAll not returning under GWT

This simple implementation seems to fix the issue, although it is
unclear why the implementation by the superclass does not return.

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/shared/ArrayDeque.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/shared/ArrayDeque.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/shared/ArrayDeque.java	Thu Mar 10 14:51:16 2011	(r22350)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/shared/ArrayDeque.java	Thu Mar 10 14:51:23 2011	(r22351)
@@ -812,6 +812,14 @@
         return a;
     }
 
+    @Override
+    public boolean addAll(Collection<? extends E> c) {
+        for(E o : c) {
+            this.add(o);
+        }
+        return true;
+    }
+
     // *** Object methods ***
 
     /**

From srabbelier at gmail.com  Thu Mar 10 15:51:26 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 14:51:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22352 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder
Message-ID: <20110310145126.81677108C033@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 14:51:26 2011
New Revision: 22352
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22352&sc=1

Log:
Do not use Character.isWhitespace

Currently GWT does not implement Character.isWhitespace due to lack
of a unicode table in the browser.

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Token.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java	Thu Mar 10 14:51:23 2011	(r22351)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/AbstractTokenizer.java	Thu Mar 10 14:51:26 2011	(r22352)
@@ -285,13 +285,13 @@
 
 		int endOffset = offset;
 		String input = getInput();
-		boolean onlySeenWhitespace = Character.isWhitespace(input.charAt(endOffset));
+		boolean onlySeenWhitespace = isSpace(input.charAt(endOffset));
 		
 		while (endOffset + 1 < getInput().length()) {
 			char next = input.charAt(endOffset+1);
 			
 			if (onlySeenWhitespace) {
-				onlySeenWhitespace = Character.isWhitespace(next);
+				onlySeenWhitespace = isSpace(next);
 				offset++;
 			} else if (!Character.isLetterOrDigit(next)) {
 				break;
@@ -313,7 +313,7 @@
 		String input = getInput();
 		while (beginOffset > 0) {
 			char c = input.charAt(beginOffset - 1);
-			boolean isWhitespace = Character.isWhitespace(c);
+			boolean isWhitespace = isSpace(c);
 			
 			if (onlySeenWhitespace) {
 				onlySeenWhitespace = isWhitespace;
@@ -386,11 +386,28 @@
 		// Make an extra token for any whitespace preceding our error
 		String input = getInput();
 		int wordStart = getStartOffset();
-		while (wordStart <= endOffset && Character.isWhitespace(input.charAt(wordStart)))
+		while (wordStart <= endOffset && isSpace(input.charAt(wordStart)))
 			wordStart++;
 		if (wordStart < endOffset) // only do this if it doesn't consume the whole token
 			makeToken(wordStart - 1, TK_ERROR_LAYOUT, false);
 		
 		makeToken(endOffset, TK_ERROR, false);
 	}
+
+	private static boolean isSpace(char c) {
+		switch (c) {
+			case ' ':
+				return true;
+			case '\n':
+				return true;
+			case '\t':
+				return true;
+			case '\f':
+				return true;
+			case '\r':
+				return true;
+			default:
+				return false;
+		}
+	}
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Token.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Token.java	Thu Mar 10 14:51:23 2011	(r22351)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Token.java	Thu Mar 10 14:51:26 2011	(r22352)
@@ -158,12 +158,22 @@
 		}
 		return -1;
 	}
+
+
 	
 	public static boolean isWhiteSpace(IToken token) {
 		String input = token.getTokenizer().getInput();
 		for (int i = token.getStartOffset(), last = token.getEndOffset(); i <= last; i++) { 
-			if (!Character.isWhitespace(input.charAt(i)))
-				return false;
+			switch(input.charAt(i)) {
+				case ' ':
+				case '\n':
+				case '\t':
+				case '\f':
+				case '\r':
+					continue;
+				default:
+					return false;
+			}
 		}
 		return true;
 	}

From srabbelier at gmail.com  Thu Mar 10 15:51:28 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 14:51:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22353 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax
Message-ID: <20110310145128.1C455108C00A@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 14:51:27 2011
New Revision: 22353
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22353&sc=1

Log:
Fix GWT compilation

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/JsglrGWT.gwt.xml

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/JsglrGWT.gwt.xml
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/JsglrGWT.gwt.xml	Thu Mar 10 14:51:26 2011	(r22352)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/JsglrGWT.gwt.xml	Thu Mar 10 14:51:27 2011	(r22353)
@@ -3,7 +3,13 @@
 
   <inherits name='com.google.gwt.user.User'/>
   <inherits name="com.google.gwt.http.HTTP"/>
+  <inherits name="org.spoofax.termsGWT"/>
 
+  <source path=''>
+    <exclude name="**/io/**"/>
+    <exclude name="**/jsglr/server/**"/>
+	<exclude name="**/Main.java"/>
+  </source>
   <source path='jsglr/client'/>
   <source path='jsglr/shared'/>
   <source path='client'/>

From srabbelier at gmail.com  Thu Mar 10 15:54:44 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 14:54:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22354 - webworkers
Message-ID: <20110310145444.6DBFD108C023@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 14:54:44 2011
New Revision: 22354
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22354&sc=1

Log:
Create webworkers directory

Added:
   webworkers/

From srabbelier at gmail.com  Thu Mar 10 15:57:02 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 14:57:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22355 - webworker
	webworkers
Message-ID: <20110310145702.710A3108C023@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 14:57:02 2011
New Revision: 22355
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22355&sc=1

Log:
No trailing s in webworker

Added:
   webworker/
      - copied from r22354, webworkers/
Deleted:
   webworkers/

From srabbelier at gmail.com  Thu Mar 10 16:09:39 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 15:09:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22356 - in webworker:
	. .settings
Message-ID: <20110310150939.53241CC32C@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 15:09:38 2011
New Revision: 22356
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22356&sc=1

Log:
Add webworker settings

Added:
   webworker/.classpath
   webworker/.project
   webworker/.settings/
   webworker/.settings/com.google.gdt.eclipse.core.prefs
   webworker/.settings/com.google.gwt.eclipse.core.prefs

Added: webworker/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/.classpath	Thu Mar 10 15:09:38 2011	(r22356)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="con" path="com.google.gwt.eclipse.core.GWT_CONTAINER"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: webworker/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/.project	Thu Mar 10 15:09:38 2011	(r22356)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>webworker</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.google.gdt.eclipse.core.webAppProjectValidator</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.google.gwt.eclipse.core.gwtProjectValidator</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>com.google.gwt.eclipse.core.gwtNature</nature>
+	</natures>
+</projectDescription>

Added: webworker/.settings/com.google.gdt.eclipse.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/.settings/com.google.gdt.eclipse.core.prefs	Thu Mar 10 15:09:38 2011	(r22356)
@@ -0,0 +1,5 @@
+#Fri Mar 04 17:07:37 CET 2011
+eclipse.preferences.version=1
+jarsExcludedFromWebInfLib=
+warSrcDir=
+warSrcDirIsOutput=true

Added: webworker/.settings/com.google.gwt.eclipse.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/.settings/com.google.gwt.eclipse.core.prefs	Thu Mar 10 15:09:38 2011	(r22356)
@@ -0,0 +1,3 @@
+#Fri Mar 04 17:07:42 CET 2011
+eclipse.preferences.version=1
+entryPointModules=

From srabbelier at gmail.com  Thu Mar 10 16:09:41 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 15:09:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22357 - in
	webworker/src: . com com/google com/google/gwt
	com/google/gwt/webworker com/google/gwt/webworker/client
	com/google/gwt/webworker/linker
Message-ID: <20110310150941.78CF2CC32C@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 15:09:41 2011
New Revision: 22357
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22357&sc=1

Log:
Import webworker subdirectory from http://goo.gl/jcYI4

Added:
   webworker/src/
   webworker/src/com/
   webworker/src/com/google/
   webworker/src/com/google/gwt/
   webworker/src/com/google/gwt/webworker/
   webworker/src/com/google/gwt/webworker/WebWorker.gwt.xml
   webworker/src/com/google/gwt/webworker/client/
   webworker/src/com/google/gwt/webworker/client/AbstractWorker.java
   webworker/src/com/google/gwt/webworker/client/DedicatedWorkerEntryPoint.java
   webworker/src/com/google/gwt/webworker/client/DedicatedWorkerGlobalScope.java
   webworker/src/com/google/gwt/webworker/client/ErrorEvent.java
   webworker/src/com/google/gwt/webworker/client/ErrorHandler.java
   webworker/src/com/google/gwt/webworker/client/MessageEvent.java
   webworker/src/com/google/gwt/webworker/client/MessageHandler.java
   webworker/src/com/google/gwt/webworker/client/MessagePort.java
   webworker/src/com/google/gwt/webworker/client/Worker.java
   webworker/src/com/google/gwt/webworker/client/WorkerGlobalScope.java
   webworker/src/com/google/gwt/webworker/client/WorkerLocation.java
   webworker/src/com/google/gwt/webworker/linker/
   webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerLinker.java
   webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerTemplate.js

Added: webworker/src/com/google/gwt/webworker/WebWorker.gwt.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/WebWorker.gwt.xml	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,7 @@
+<!DOCTYPE document SYSTEM
+    "http://google-web-toolkit.googlecode.com/svn/releases/1.7/distro-source/core/src/gwt-module.dtd">
+<module>
+  <inherits name="com.google.gwt.core.Core" />
+  <define-linker name="dedicatedworker"
+    class="com.google.gwt.webworker.linker.DedicatedWorkerLinker" />
+</module>
\ No newline at end of file

Added: webworker/src/com/google/gwt/webworker/client/AbstractWorker.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/AbstractWorker.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,63 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+import com.google.gwt.core.client.GWT;
+import com.google.gwt.core.client.JavaScriptObject;
+import com.google.gwt.core.client.GWT.UncaughtExceptionHandler;
+
+/**
+ * Base class used for Dedicated Workers and Shared Workers.
+ * http://www.whatwg.org/specs/web-workers/current-work/
+ */
+public class AbstractWorker extends JavaScriptObject {
+
+  /**
+   * Takes care of reporting exceptions to the console in hosted mode.
+   * 
+   * @param listener the listener object to call back.
+   * @param port argument from the callback.
+   */
+  private static void onErrorImpl(ErrorHandler errorHandler, ErrorEvent event) {
+    UncaughtExceptionHandler ueh = GWT.getUncaughtExceptionHandler();
+    if (ueh != null) {
+      try {
+        errorHandler.onError(event);
+      } catch (Exception ex) {
+        ueh.onUncaughtException(ex);
+      }
+    } else {
+      errorHandler.onError(event);
+    }
+  }
+
+  protected AbstractWorker() {
+    // constructors must be protected in JavaScriptObject overlays.
+  }
+
+  /**
+   * A handler that will be called if the worker encounters an error. Replaces
+   * any existing handler.
+   * 
+   * @param handler handler to set when a worker encounters an error.
+   */
+  public final native void setOnError(ErrorHandler handler) /*-{
+    this.onerror = function(event) {
+      @com.google.gwt.webworker.client.AbstractWorker::onErrorImpl(Lcom/google/gwt/webworker/client/ErrorHandler;Lcom/google/gwt/webworker/client/ErrorEvent;)(handler, event);
+    }
+  }-*/;
+
+}

Added: webworker/src/com/google/gwt/webworker/client/DedicatedWorkerEntryPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/DedicatedWorkerEntryPoint.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,78 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+import com.google.gwt.core.client.EntryPoint;
+import com.google.gwt.core.client.JsArray;
+
+/**
+ * Entry point class for implementing a DedicatedWorker.
+ * 
+ * Runs inside the webworker, so this class cannot assume that Window or
+ * Document exists.
+ * 
+ * http://www.whatwg.org/specs/web-workers/current-work/
+ */
+public abstract class DedicatedWorkerEntryPoint implements EntryPoint {
+  private DedicatedWorkerGlobalScope scope;
+
+  public final void close() {
+    getGlobalScope().close();
+  }
+
+  public final WorkerLocation getLocation() {
+    return getGlobalScope().getLocation();
+  }
+
+  public final void importScript(String url) {
+    getGlobalScope().importScript(url);
+  }
+
+  public final void onModuleLoad() {
+    scope = DedicatedWorkerGlobalScope.get();
+    onWorkerLoad();
+  }
+
+  public abstract void onWorkerLoad();
+
+  protected DedicatedWorkerGlobalScope getGlobalScope() {
+    return scope;
+  }
+
+  protected final void postMessage(double message) {
+    getGlobalScope().postMessage(message);
+  }
+
+  protected final void postMessage(double message, JsArray<MessagePort> ports) {
+    getGlobalScope().postMessage(message, ports);
+  }
+
+  protected final void postMessage(String message) {
+    getGlobalScope().postMessage(message);
+  }
+
+  protected final void postMessage(String message, JsArray<MessagePort> ports) {
+    getGlobalScope().postMessage(message, ports);
+  }
+
+  protected final void setOnMessage(MessageHandler messageHandler) {
+    getGlobalScope().setOnMessage(messageHandler);
+  }
+
+  protected final void terminate() {
+    getGlobalScope().terminate();
+  }
+}

Added: webworker/src/com/google/gwt/webworker/client/DedicatedWorkerGlobalScope.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/DedicatedWorkerGlobalScope.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+import com.google.gwt.core.client.JsArray;
+
+/**
+ * The Dedicated worker has these methods on the top level object.
+ * 
+ * Runs inside the webworker, so this class cannot assume that Window or
+ * Document exists.
+ * 
+ * http://www.whatwg.org/specs/web-workers/current-work/
+ */
+public class DedicatedWorkerGlobalScope extends WorkerGlobalScope {
+
+  public static native DedicatedWorkerGlobalScope get() /*-{
+    return $self;
+  }-*/;
+
+  protected DedicatedWorkerGlobalScope() {
+    // Constructors must be protected in JavaScriptObject overlays.
+  };
+
+  public final native void postMessage(double message) /*-{
+    this.postMessage(message);
+  }-*/;
+
+  public final native void postMessage(double message,
+      JsArray<MessagePort> ports) /*-{
+    this.postMessage(message, ports);
+  }-*/;
+
+  public final native void postMessage(String message) /*-{
+    this.postMessage(message);
+  }-*/;
+
+  public final native void postMessage(String message,
+      JsArray<MessagePort> ports) /*-{
+    this.postMessage(message, ports);
+  }-*/;
+
+  public final native void setOnMessage(MessageHandler messageHandler) /*-{
+    this.onmessage = function(event) {
+      messageHandler. at com.google.gwt.webworker.client.MessageHandler::onMessage(Lcom/google/gwt/webworker/client/MessageEvent;)(event);
+    }
+  }-*/;
+
+  public final native void terminate() /*-{
+    this.terminate();
+  }-*/;
+}

Added: webworker/src/com/google/gwt/webworker/client/ErrorEvent.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/ErrorEvent.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+import com.google.gwt.core.client.JavaScriptObject;
+
+/**
+ * Event structure returned whenever an uncaught runtime script error occurs in
+ * one of the worker's scripts. See {@link ErrorHandler}
+ */
+public class ErrorEvent extends JavaScriptObject {
+
+  protected ErrorEvent() {
+    // constructors must be protected in JavaScriptObject overlays.
+  }
+
+  public final native String getFilename() /*-{
+    return this.filename;
+  }-*/;
+
+  public final native int getLineNumber() /*-{
+    return this.lineno ? this.lineno : 0;
+  }-*/;
+
+  public final native String getMessage() /*-{
+    return this.message;
+  }-*/;
+}

Added: webworker/src/com/google/gwt/webworker/client/ErrorHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/ErrorHandler.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,23 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+/**
+ * General HTML 5 error handling interface.
+ */
+public interface ErrorHandler {
+  void onError(ErrorEvent event);
+}

Added: webworker/src/com/google/gwt/webworker/client/MessageEvent.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/MessageEvent.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,56 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+import com.google.gwt.core.client.JavaScriptObject;
+import com.google.gwt.core.client.JsArray;
+
+/**
+ * General HTML 5 Message event.
+ */
+public class MessageEvent extends JavaScriptObject {
+  protected MessageEvent() {
+    // required protected constructor for JavaScriptObject
+  }
+
+  public final native JavaScriptObject getDataAsJSO() /*-{
+    return JSON.parse(this.data);
+  }-*/;
+
+  public final native double getDataAsNumber() /*-{
+    return this.data;
+  }-*/;
+
+  public final native String getDataAsString() /*-{
+    return this.data;
+  }-*/;
+
+  public final native String getLastEventId() /*-{
+    return this.lastEventId;
+  }-*/;
+
+  public final native String getOrigin() /*-{
+    return this.origin;
+  }-*/;
+
+  public final native JsArray<MessagePort> getPorts() /*-{
+    return this.ports;
+  }-*/;
+
+  public final native String getSource() /*-{
+    return this.source;
+  }-*/;
+}

Added: webworker/src/com/google/gwt/webworker/client/MessageHandler.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/MessageHandler.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,24 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+/**
+ * General HTML 5 Message handler.
+ * 
+ */
+public interface MessageHandler {
+  void onMessage(MessageEvent event);
+}

Added: webworker/src/com/google/gwt/webworker/client/MessagePort.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/MessagePort.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,87 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+import com.google.gwt.core.client.GWT;
+import com.google.gwt.core.client.JavaScriptObject;
+import com.google.gwt.core.client.JsArray;
+import com.google.gwt.core.client.GWT.UncaughtExceptionHandler;
+
+/**
+ * 
+ */
+public class MessagePort extends JavaScriptObject {
+
+  /**
+   * Takes care of reporting exceptions to the console in hosted mode.
+   * 
+   * @param listener the listener object to call back.
+   * @param port argument from the callback.
+   */
+  private static void onMessageImpl(MessageHandler messageHandler,
+      MessageEvent event) {
+    UncaughtExceptionHandler ueh = GWT.getUncaughtExceptionHandler();
+    if (ueh != null) {
+      try {
+        messageHandler.onMessage(event);
+      } catch (Exception ex) {
+        ueh.onUncaughtException(ex);
+      }
+    } else {
+      messageHandler.onMessage(event);
+    }
+  }
+
+  protected MessagePort() {
+    // Constructors must be protected in JavaScriptObject overlays.
+  }
+
+  public final native void close() /*-{
+    this.close();
+  }-*/;
+
+  public final native void postMessage(double message) /*-{
+    this.postMessage(message);
+  }-*/;
+
+  public final native void postMessage(double message,
+      JsArray<MessagePort> ports) /*-{
+    this.postMessage(message, ports);
+  }-*/;
+
+  public final native void postMessage(String message) /*-{
+    this.postMessage(message);
+  }-*/;
+
+  public final native void postMessage(String message,
+      JsArray<MessagePort> ports) /*-{
+    this.postMessage(message, ports);
+  }-*/;
+
+  public final native void setOnMessage(MessageHandler messageHandler) /*-{
+    this.onmessage = function(event) {
+      @com.google.gwt.webworker.client.MessagePort::onMessageImpl(Lcom/google/gwt/webworker/client/MessageHandler;Lcom/google/gwt/webworker/client/MessageEvent;)(handler,event);
+    }
+  }-*/;
+
+  public final native void start() /*-{
+    this.start();
+  }-*/;
+
+  public final native void terminate() /*-{
+    this.terminate();
+  }-*/;
+}

Added: webworker/src/com/google/gwt/webworker/client/Worker.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/Worker.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,81 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+import com.google.gwt.core.client.GWT;
+import com.google.gwt.core.client.JsArray;
+import com.google.gwt.core.client.GWT.UncaughtExceptionHandler;
+
+/**
+ * HTML 5 Web Worker API for Dedicated Workers.
+ * http://www.whatwg.org/specs/web-workers/current-work/
+ */
+public class Worker extends AbstractWorker {
+
+  public static native Worker create(String url) /*-{
+    return new Worker(url);
+  }-*/;
+
+  /**
+   * Takes care of reporting exceptions to the console in hosted mode.
+   * 
+   * @param listener the listener object to call back.
+   * @param port argument from the callback.
+   */
+  private static void onMessageImpl(MessageHandler messageHandler,
+      MessageEvent event) {
+    UncaughtExceptionHandler ueh = GWT.getUncaughtExceptionHandler();
+    if (ueh != null) {
+      try {
+        messageHandler.onMessage(event);
+      } catch (Exception ex) {
+        ueh.onUncaughtException(ex);
+      }
+    } else {
+      messageHandler.onMessage(event);
+    }
+  }
+
+  protected Worker() {
+    // constructors must be protected in JavaScriptObject overlays.
+  }
+
+  public final native void postMessage(double message) /*-{
+    this.postMessage(message);
+  }-*/;
+
+  public final native void postMessage(double message, JsArray<MessagePort> ports) /*-{
+    this.postMessage(message, ports);
+  }-*/;
+
+  public final native void postMessage(String message) /*-{
+    this.postMessage(message);
+  }-*/;
+
+  public final native void postMessage(String message, JsArray<MessagePort> ports) /*-{
+    this.postMessage(message, ports);
+  }-*/;
+
+  public final native void setOnMessage(MessageHandler messageHandler) /*-{
+    this.onmessage = function(event) {
+      @com.google.gwt.webworker.client.Worker::onMessageImpl(Lcom/google/gwt/webworker/client/MessageHandler;Lcom/google/gwt/webworker/client/MessageEvent;)(messageHandler, event);
+    }
+  }-*/;
+  
+  public final native void terminate() /*-{
+    this.terminate();
+  }-*/;
+}

Added: webworker/src/com/google/gwt/webworker/client/WorkerGlobalScope.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/WorkerGlobalScope.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,81 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+import com.google.gwt.core.client.JavaScriptObject;
+import com.google.gwt.core.client.JsArrayString;
+
+/**
+ * Represents the top level object for a Web Worker.
+ * 
+ * Runs inside the webworker, so this class cannot assume that Window or
+ * Document exists.
+ * 
+ * http://www.whatwg.org/specs/web-workers/current-work/
+ */
+public class WorkerGlobalScope extends JavaScriptObject {
+  protected WorkerGlobalScope() {
+    // protected constructor required for JavaScriptObject overlay.
+  }
+
+  public final native void close() /*-{
+    this.close();
+  }-*/;
+
+  public final native WorkerLocation getLocation() /*-{
+    return this.location;
+  }-*/;
+
+  public final native void importScript(String url) /*-{
+    this.importScripts([url]);
+  }-*/;
+
+  /**
+   * Caveat!! If this array has more than one entry, importscript may not work.
+   * It should eventually.
+   * 
+   * @param urls
+   */
+  public final native void importScripts(JsArrayString urls) /*-{
+    this.importScripts(urls);
+  }-*/;
+
+  public final void importScripts(String[] urls) {
+    JsArrayString jsUrls = JsArrayString.createArray().cast();
+    for (int i = 0, l = urls.length; i < l; ++i) {
+      jsUrls.set(i, urls[i]);
+    }
+    importScripts(jsUrls);
+  }
+
+  public final native WorkerGlobalScope self() /*-{
+    return self;
+  }-*/;
+
+  /**
+   * A handler that will be called if the worker encounters an error. Replaces
+   * any existing handler.
+   * 
+   * @param handler handler to set when a worker encounters an error.
+   */
+  // TODO(zundel): use UncaughtExceptionHandler... chain more than one handler?
+  // May not be needed until hosted mode can support webworkers.
+  public final native void setOnError(ErrorHandler handler) /*-{
+    this.onerror = function(event) {
+      handler. at com.google.gwt.webworker.client.ErrorHandler::onError(Lcom/google/gwt/webworker/client/ErrorEvent;)(event);
+    }
+  }-*/;
+}

Added: webworker/src/com/google/gwt/webworker/client/WorkerLocation.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/client/WorkerLocation.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.client;
+
+import com.google.gwt.core.client.JavaScriptObject;
+
+/**
+ * A WorkerLocation object represents an absolute URL set at its creation.
+ * 
+ * Runs inside the webworker, so this class cannot assume that Window or
+ * Document exists.
+ * 
+ * http://www.whatwg.org/specs/web-workers/current-work/
+ */
+public class WorkerLocation extends JavaScriptObject {
+
+  protected WorkerLocation() {
+    // protected constructor required for JavaScriptObject overlay.
+  }
+
+  public final native String getHash() /*-{
+    return this.hash;
+  }-*/;
+
+  public final native String getHost() /*-{
+    return this.host;
+  }-*/;
+
+  public final native String getHostname() /*-{
+    return this.hostname;
+  }-*/;
+
+  public final native String getHref() /*-{
+    return this.href;
+  }-*/;
+
+  public final native String getPathname() /*-{
+    return this.pathname;
+  }-*/;
+
+  public final native String getPort() /*-{
+    return this.port;
+  }-*/;
+
+  public final native String getProtocol() /*-{
+    return this.protocol;
+  }-*/;
+
+  public final native String getSearch() /*-{
+    return this.search;
+  }-*/;
+}

Added: webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerLinker.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerLinker.java	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,60 @@
+/*
+ * Copyright 2009 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.webworker.linker;
+
+import com.google.gwt.core.ext.LinkerContext;
+import com.google.gwt.core.ext.TreeLogger;
+import com.google.gwt.core.ext.UnableToCompleteException;
+import com.google.gwt.core.ext.linker.LinkerOrder;
+import com.google.gwt.core.ext.linker.LinkerOrder.Order;
+import com.google.gwt.core.ext.linker.impl.SelectionScriptLinker;
+
+/**
+ * Linker for HTML 5 Dedicated Web Workers.
+ */
+ at LinkerOrder(Order.PRIMARY)
+public class DedicatedWorkerLinker extends SelectionScriptLinker {
+
+  @Override
+  public String getDescription() {
+    return "Dedicated Web Worker Linker";
+  }
+
+  @Override
+  protected String getCompilationExtension(TreeLogger logger,
+      LinkerContext context) throws UnableToCompleteException {
+    return ".cache.js";
+  }
+
+  @Override
+  protected String getModulePrefix(TreeLogger logger, LinkerContext context,
+      String strongName) throws UnableToCompleteException {
+    return "";
+  }
+
+  @Override
+  protected String getModuleSuffix(TreeLogger logger, LinkerContext context)
+      throws UnableToCompleteException {
+    return "";
+  }
+
+  @Override
+  protected String getSelectionScriptTemplate(TreeLogger logger,
+      LinkerContext context) throws UnableToCompleteException {
+    return "com/google/gwt/webworker/linker/DedicatedWorkerTemplate.js";
+  }
+
+}

Added: webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerTemplate.js
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerTemplate.js	Thu Mar 10 15:09:41 2011	(r22357)
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2009 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+$stats = function(){};
+$self = self;
+$sessionId = null; 
+
+function __MODULE_FUNC__() {
+  // TODO(zundel): Add slot for property providers.
+  var strongName;
+  var softPermutationId = 0;
+  try {
+// __PERMUTATIONS_BEGIN__
+    // Permutation logic
+// __PERMUTATIONS_END__
+  } catch (e) {
+    // intentionally silent on property failure
+    return;
+  }
+  var idx = strongName.indexOf(':');
+  if (idx != -1) {
+    softPermutationId = Number(strongName.substring(idx + 1));
+    strongName = strongName.substring(0, idx);
+  }
+  importScripts(strongName + ".cache.js");
+  gwtOnLoad(undefined, '__MODULE_NAME__', '', softPermutationId);
+ }
+ 
+ __MODULE_FUNC__();
\ No newline at end of file

From srabbelier at gmail.com  Thu Mar 10 16:09:44 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 15:09:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22358 -
	webworker/src/com/google/gwt/webworker
Message-ID: <20110310150944.326FFCC353@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 15:09:43 2011
New Revision: 22358
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22358&sc=1

Log:
Add .project and .classpath to webworker project

Added:
   webworker/src/com/google/gwt/webworker/.classpath
   webworker/src/com/google/gwt/webworker/.project

Added: webworker/src/com/google/gwt/webworker/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/.classpath	Thu Mar 10 15:09:43 2011	(r22358)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="client"/>
+	<classpathentry kind="src" path="linker"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: webworker/src/com/google/gwt/webworker/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ webworker/src/com/google/gwt/webworker/.project	Thu Mar 10 15:09:43 2011	(r22358)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>webworker</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

From srabbelier at gmail.com  Thu Mar 10 16:09:45 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 15:09:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22359 -
	webworker/src/com/google/gwt/webworker/linker
Message-ID: <20110310150945.C360D2B8043@mx2.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 15:09:45 2011
New Revision: 22359
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22359&sc=1

Log:
Add wnd variable to template to work around misbehaving GWT code

Modified:
   webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerTemplate.js

Modified: webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerTemplate.js
==============================================================================
--- webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerTemplate.js	Thu Mar 10 15:09:43 2011	(r22358)
+++ webworker/src/com/google/gwt/webworker/linker/DedicatedWorkerTemplate.js	Thu Mar 10 15:09:45 2011	(r22359)
@@ -17,6 +17,11 @@
 $stats = function(){};
 $self = self;
 $sessionId = null; 
+$wnd = {};
+$wnd.XMLHttpRequest = XMLHttpRequest;
+$wnd.setTimeout = function() { setTimeout.apply(self, arguments) };
+$wnd.clearTimeout = function() { clearTimeout.apply(self, arguments) };
+$wnd.clearInterval = function() { clearInterval.apply(self, arguments) };
 
 function __MODULE_FUNC__() {
   // TODO(zundel): Add slot for property providers.

From L.C.L.Kats at tudelft.nl  Thu Mar 10 16:11:16 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 10 Mar 2011 15:11:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22360 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms
	spoofax/trunk/spoofax/...
Message-ID: <20110310151116.E52A6108C023@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Mar 10 15:11:16 2011
New Revision: 22360
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22360&sc=1

Log:
Spoofax/342: added two-level origin tracking, at least for 'all' over lists

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ITermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_all.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_one.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_some.java
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str	Thu Mar 10 15:09:45 2011	(r22359)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str	Thu Mar 10 15:11:16 2011	(r22360)
@@ -156,7 +156,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ITermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ITermFactory.java	Thu Mar 10 15:09:45 2011	(r22359)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/ITermFactory.java	Thu Mar 10 15:11:16 2011	(r22360)
@@ -31,6 +31,8 @@
     
     public IStrategoList replaceList(IStrategoTerm[] kids, IStrategoList old);
     
+    public IStrategoList replaceListCons(IStrategoTerm head, IStrategoList tail, IStrategoTerm oldHead, IStrategoList oldTail);
+    
     public IStrategoTerm replaceTerm(IStrategoTerm term, IStrategoTerm old);
     
     public IStrategoTuple replaceTuple(IStrategoTerm[] kids, IStrategoTuple old);

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java	Thu Mar 10 15:09:45 2011	(r22359)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java	Thu Mar 10 15:11:16 2011	(r22360)
@@ -75,6 +75,10 @@
         return makeList(kids, old.getAnnotations());
     }
     
+    public IStrategoList replaceListCons(IStrategoTerm head, IStrategoList tail, IStrategoTerm oldHead, IStrategoList oldTail) {
+        return makeListCons(head, tail);
+    }
+    
     public IStrategoTerm replaceTerm(IStrategoTerm term, IStrategoTerm old) {
     	return term;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java	Thu Mar 10 15:09:45 2011	(r22359)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/StrategoAnnotation.java	Thu Mar 10 15:11:16 2011	(r22360)
@@ -6,8 +6,6 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.interpreter.terms.ITermPrinter;
-import org.spoofax.terms.attachments.ITermAttachment;
-import org.spoofax.terms.attachments.TermAttachmentType;
 
 /**
  * Wraps any term with annotations.

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Thu Mar 10 15:09:45 2011	(r22359)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Thu Mar 10 15:11:16 2011	(r22360)
@@ -137,10 +137,10 @@
     	synchronized (TermFactory.class) {
 	    	WeakReference<StrategoString> resultRef = asyncStringPool.get(s);
 	    	StrategoString result = resultRef == null ? null : resultRef.get();
+	    	int type = isTermSharingAllowed() ? STRING_POOL_STORAGE_TYPE : MUTABLE;
 	    	if (result == null) {
     			// StrategoString was garbage collected, but key string might still be in memory
     			// Reallocation should be safe either way
-    			int type = isTermSharingAllowed() ? STRING_POOL_STORAGE_TYPE : MUTABLE;
 				result = new StrategoString(s, null, type);
     			asyncStringPool.put(s, new WeakReference<StrategoString>(result));
 	    	} else if (result.getStorageType() == MUTABLE || !isTermSharingAllowed()) {
@@ -148,7 +148,10 @@
 	    		// but to satisfy the tryMakeUniqueString() contract
 	    		// we *must* keep a reference to the original
 	    		// hashmap key alive as long as our result lives
-	    		result = new KeepAliveString(s, result);
+	    		//
+	    		// UNDONE: actually, the hashtable key is s 
+	    		//   result = new KeepAliveString(s, result);
+	    		result = new StrategoString(s, null, type);
         	}
 	    	return result;
     	}
@@ -220,14 +223,14 @@
         return new StrategoPlaceholder(placeholderConstructor, template, EMPTY_LIST, defaultStorageType);
 	}
     
-    /**
+    /*
      * A Stratego string that maintains 
      * a reference to an existing string,
      * that must be kept alive by the garbage collector
      * at least as long as the current string is alive. 
      * 
      * @author Lennart Kats <lennart add lclnet.nl>
-     */
+     *
     static class KeepAliveString extends StrategoString {
 		final Object gcKeepAlive;
 
@@ -236,5 +239,6 @@
 			this.gcKeepAlive = gcKeepAlive;
 		}
 	}
+	 */
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java	Thu Mar 10 15:09:45 2011	(r22359)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java	Thu Mar 10 15:11:16 2011	(r22360)
@@ -61,8 +61,18 @@
 	}
 	
 	@Override
+	public IStrategoList replaceListCons(IStrategoTerm head, IStrategoList tail, IStrategoTerm oldHead, IStrategoList oldTail) {
+		IStrategoList result = makeListCons(head, tail);
+		if (oldHead != head)
+			replaceTerm(head, oldHead); // HACK: origin track one level extra in lists...
+		return result;
+	}
+	
+	@Override
 	public IStrategoTerm replaceTerm(IStrategoTerm term, IStrategoTerm origin) {
-		if (term.isList()) {
+		if (term == origin) {
+			return term;
+		} else if (term.isList()) {
 			if (term.getSubtermCount() == origin.getSubtermCount()
 					&& origin.isList()) {
 				return makeListLink((IStrategoList) term, (IStrategoList) origin);
@@ -111,7 +121,7 @@
 	public IStrategoList replaceList(IStrategoTerm[] terms, IStrategoList old) {
 		assert terms.length == old.getSubtermCount();
 		for (int i = 0; i < terms.length; i++) {
-			terms[i] = ensureLink(terms[i], old.head());
+			terms[i] = replaceTerm(terms[i], old.head()); // HACK: origin track one level extra in lists...
 			old = old.tail();
 		}
 		return makeList(terms, old.getAnnotations());
@@ -164,7 +174,7 @@
 	}
 	
 	protected IStrategoTerm ensureLink(IStrategoTerm term, IStrategoTerm old) {
-		if (isOriginRoot(term)) {
+		if (term == old || isOriginRoot(term)) {
 			return term;
 		} else {
 			IStrategoTerm originRoot = getOriginRoot(old);

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_all.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_all.java	Thu Mar 10 15:09:45 2011	(r22359)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_all.java	Thu Mar 10 15:11:16 2011	(r22360)
@@ -58,6 +58,8 @@
 
 		IStrategoTerm head = list.head();
 		IStrategoTerm head2 = s.invoke(context, head);
+		IStrategoList result;
+		
 		if (head2 == null) {
 			return null;
 		} else if (head2 == head || head2.match(head)) {
@@ -69,12 +71,14 @@
 			} else if (tail2 == tail) { // (match() not necessary because of recursion)
 				return list;
 			} else {
-				// TODO: head/tail variation of replaceList?
-				return context.getFactory().makeListCons(head, tail2);
+				result = context.getFactory().replaceListCons(head, tail2, head, tail);
 			}
 		} else {
-			return mapIgnoreAnnos(context, head2, list, s);
+			result = mapIgnoreAnnos(context, head2, list, s);
 		}
+		
+		context.getFactory().replaceTerm(result, list); // set origin for topmost Cons
+		return result;
 	}
 
 	private static IStrategoList mapIgnoreAnnos(Context context, IStrategoList list, Strategy s) {
@@ -128,8 +132,7 @@
 			if (tail2 == null) {
 				return null;
 			} else if (tail2 != tail) { // (match() not necessary because of recursion)
-				// TODO: head/tail variation of replaceList?
-				return context.getFactory().makeListCons(head, tail2);
+				return context.getFactory().replaceListCons(head, tail2, head, tail);
 			} else {
 				return list;
 			}

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_one.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_one.java	Thu Mar 10 15:09:45 2011	(r22359)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_one.java	Thu Mar 10 15:11:16 2011	(r22360)
@@ -63,14 +63,13 @@
 				} else if (tail2 == tail) {
 					return current;
 				} else {
-					// TODO: head/tail variation of replaceList?
-					return context.getFactory().makeListCons(head, tail2);
+					return context.getFactory().replaceListCons(head, tail2, head, tail);
 				}
 			} else if (head2 == head) {
 				return current;
 			} else {
-				// TODO: head/tail variation of replaceList?
-				return context.getFactory().makeListCons(head2, current.tail());
+				IStrategoList tail = current.tail();
+				return context.getFactory().replaceListCons(head2, tail, head, tail);
 			}
 		}
 	}

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_some.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_some.java	Thu Mar 10 15:09:45 2011	(r22359)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/SRTS_some.java	Thu Mar 10 15:11:16 2011	(r22360)
@@ -64,8 +64,7 @@
 				} else if (tail2 == tail) {
 					return list;
 				} else {
-					// TODO: head/tail variation of replaceList?
-					return context.getFactory().makeListCons(head, tail2);
+					return context.getFactory().replaceListCons(head, tail2, head, tail);
 				}
 			} else if (head2 == head) {
 				IStrategoList tail = list.tail();
@@ -75,8 +74,7 @@
 				} else if (tail2 == tail) {
 					return list;
 				} else {
-					// TODO: head/tail variation of replaceList?
-					return context.getFactory().makeListCons(head2, tail2);
+					return context.getFactory().replaceListCons(head2, tail2, head, tail);
 				}
 			} else {
 				return mapTryIgnoreAnnos(context, head2, list, s);

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From srabbelier at gmail.com  Thu Mar 10 16:24:05 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Thu, 10 Mar 2011 15:24:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22361 -
	spoofax/trunk/org.spoofax.ace
Message-ID: <20110310152405.5464D2B8052@mx2.tudelft.nl>

Author: SverreRabbelier
Date: Thu Mar 10 15:24:04 2011
New Revision: 22361
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22361&sc=1

Log:
Create org.spoofax.ace directory

Added:
   spoofax/trunk/org.spoofax.ace/

From L.C.L.Kats at tudelft.nl  Fri Mar 11 10:58:30 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 11 Mar 2011 09:58:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22362 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing:
	editor/java/org/strategoxt/imp/testing trans
Message-ID: <20110311095830.9576B7F8079@mx1.tudelft.nl>

Author: LennartKats
Date: Fri Mar 11 09:58:30 2011
New Revision: 22362
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22362&sc=1

Log:
fixed testing language parser regression

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Thu Mar 10 15:24:04 2011	(r22361)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Fri Mar 11 09:58:30 2011	(r22362)
@@ -19,6 +19,7 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.jsglr.client.imploder.Tokenizer;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
@@ -86,12 +87,16 @@
 								getLeftToken(fragment).getStartOffset(), getRightToken(fragment).getEndOffset());
 						if (!testedParser.isLastSyntaxCorrect())
 							parsed = factory.makeAppl(ERROR_1, parsed);
+						ImploderAttachment implodement = ImploderAttachment.get(term);
 						term = factory.annotateTerm(term, nonParentFactory.makeList(parsed));
+						term.putAttachment(implodement.clone());
 						retokenizer.skipTokensUpToIndex(oldFragmentEndIndex);
 					} catch (IOException e) {
 						Debug.log("Could not parse tested code fragment", e);
 					} catch (SGLRException e) {
 						Debug.log("Could not parse tested code fragment", e);
+					} catch (CloneNotSupportedException e) {
+						Environment.logException("Could not parse tested code fragment", e);
 					} catch (RuntimeException e) {
 						Environment.logException("Could not parse tested code fragment", e);
 					}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Thu Mar 10 15:24:04 2011	(r22361)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Fri Mar 11 09:58:30 2011	(r22362)
@@ -57,9 +57,9 @@
     with
       from''    := <get-service-input-term> from';
       resolvers := <spt-get-reference-resolvers>;
-      results   := <debug(!"a"); map(execute-service(|from''); debug(!"b"))> resolvers
+      results   := <map(execute-service(|from''))> resolvers
     where
-      switch !results; debug(!"results:")
+      switch !results
         case one(is-successful-resolver(|to')): fail
         case one(?Some(t)):  error := $[Unexpected result: [<write-to-string> t]]
         case one(?Error(m)): error := $[Unexpected error: [m]]
@@ -72,4 +72,4 @@
     where
       !expected => wildcard()
     <+
-      debug(!1); oncetd(origin-equal(|expected)); debug(!2)
+      oncetd(origin-equal(|expected))

From L.C.L.Kats at tudelft.nl  Fri Mar 11 11:02:37 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 11 Mar 2011 10:02:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22363 -
	spoofax-imp/trunk/org.eclipse.imp
Message-ID: <20110311100237.D51CA2B8029@mx2.tudelft.nl>

Author: LennartKats
Date: Fri Mar 11 10:02:37 2011
New Revision: 22363
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22363&sc=1

Log:
minor fix in stylerange handling

Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
==============================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	Fri Mar 11 09:58:30 2011	(r22362)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	Fri Mar 11 10:02:37 2011	(r22363)
@@ -512,7 +512,7 @@
              int end= locator.getEndOffset(token);
  
 -            if (offset <= prevEnd && end >= prevOffset) {
-+            if (offset <= prevEnd /*&& end >= prevOffset*/) { // LK: Avoid illegal styleRange
++            if (offset <= prevEnd || end <= prevEnd /*&& end >= prevOffset*/) { // LK: Avoid illegal styleRange
                  continue;
              }
              changeTokenPresentation(parseController, presentation, token, locator);

From L.C.L.Kats at tudelft.nl  Fri Mar 11 12:13:36 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 11 Mar 2011 11:13:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22364 - in
	spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <20110311111336.595962B8008@mx2.tudelft.nl>

Author: LennartKats
Date: Fri Mar 11 11:13:36 2011
New Revision: 22364
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22364&sc=1

Log:
new unstable release 0.6.1.2 (debugging plugins not included in this version, sorry)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Mar 11 10:02:37 2011	(r22363)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Fri Mar 11 11:13:36 2011	(r22364)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.6.1.1"
+      version="0.6.1.2"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Fri Mar 11 10:02:37 2011	(r22363)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	Fri Mar 11 11:13:36 2011	(r22364)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update/">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.6.1.1.jar" id="org.strategoxt.imp" version="0.6.1.1">
+   <feature url="features/org.strategoxt.imp_0.6.1.2.jar" id="org.strategoxt.imp" version="0.6.1.2">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP">

From m.dejonge at tudelft.nl  Fri Mar 11 13:15:39 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 11 Mar 2011 12:15:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22365 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <20110311121539.3A40F2B800E@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Mar 11 12:15:38 2011
New Revision: 22365
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22365&sc=1

Log:
bugfix: parsing a string

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Fri Mar 11 11:13:36 2011	(r22364)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Fri Mar 11 12:15:38 2011	(r22365)
@@ -1,12 +1,12 @@
 package org.strategoxt.imp.runtime.parser;
 
 import java.io.BufferedReader;
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.Collections;
 import java.util.Map;
-
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.IPath;
@@ -110,7 +110,7 @@
 			throw new OperationCanceledException();
 		SGLRParseController controller = getController() == null ? null : getController();
 		IResource resource = controller == null ? null : controller.getResource();
-		if(resource==null){
+		if(resource==null && filename !=null && new File(filename).exists()){
 			IPath path = new Path(filename).makeRelativeTo(ResourcesPlugin.getWorkspace().getRoot().getLocation());
 			resource=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
 		}

From R.B.Vermaas at tudelft.nl  Fri Mar 11 14:27:18 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Mar 2011 13:27:18 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22366 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20110311132718.2034D7F8033@mx1.tudelft.nl>

Author: rob
Date: Fri Mar 11 13:27:16 2011
New Revision: 22366
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22366&sc=1

Log:
remove unnecessary parse-string-and-pp-aterm, use annotated ast, reinstate current parsed string hover

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Fri Mar 11 12:15:38 2011	(r22365)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Fri Mar 11 13:27:16 2011	(r22366)
@@ -68,9 +68,9 @@
       filename := <guarantee-extension(|"aterm")> path
   
   editor-hover:
-    (string(_,s,_), _, _, _, _) -> hover
+    (string(_,s,_){ast}, _, _, _, _) -> hover
     where
-      hover := <parse-string-and-pp-aterm ; hover-input-string>s 
+      hover := <spt-pp-aterm ; hover-input-string>ast 
   
   hover-input-string =
   	if ?error(_, _) then
@@ -78,15 +78,18 @@
     else 
       !$[The input string currently result in the following AST:<br />
          <br />
-         <b><pre>,()<id>,</pre></b>
+         <b>
+           <pre>
+             [<id>]
+           </pre>
+         </b>
         ]
     end 
 
-  parse-string-and-pp-aterm =
-    ast   := <spt-parse-string>
-  ; pp    := <pp-aterm-box>ast
-  ; <box2text-string(|80)>pp
 
+  spt-pp-aterm =
+    pp-aterm-box ; box2text-string(|80)
+    
   external input-dialog(|title, message, initial)
 
 strategies

From R.B.Vermaas at tudelft.nl  Fri Mar 11 14:41:53 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Mar 2011 13:41:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22367 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.test/test
Message-ID: <20110311134153.C6222CC2D5@mx4.tudelft.nl>

Author: rob
Date: Fri Mar 11 13:41:53 2011
New Revision: 22367
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22367&sc=1

Log:
remove test1, replaced by some tests with proper names

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-parse-tests.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-semantic-tests.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-stratego-tests.spt
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test1.spt

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-parse-tests.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-parse-tests.spt	Fri Mar 11 13:41:53 2011	(r22367)
@@ -0,0 +1,13 @@
+module basic-parse-tests
+
+start symbol Start
+language TestingTesting
+
+test parsing with AST matching
+  [[module x entity Y {} ]] => Module(_, _)
+    
+test successful parsing
+  [[module x entity X { a : B } ]] succeeds parsing
+    
+test failed parsing
+  [[module x entity X { a : } ]] fails parsing

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-semantic-tests.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-semantic-tests.spt	Fri Mar 11 13:41:53 2011	(r22367)
@@ -0,0 +1,13 @@
+module basic-semantic-test
+
+start symbol Start
+
+language TestingTesting
+
+test rob is gek
+  [[ module x entity X { a : B } ]] 1 errors
+    
+test rob is gek
+  [[ module x entity X {} ]] 0 errors
+
+    

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-stratego-tests.spt
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-stratego-tests.spt	Fri Mar 11 13:41:53 2011	(r22367)
@@ -0,0 +1,16 @@
+module basic-stratego-tests
+
+language TestingTesting
+
+test fail should fail
+  fail fails
+
+test is should succeed
+  id succeeds
+
+test map(inc)
+  ![1,2,3] ; let s = {?x; <inc> x} in map(s) end => [2,3,4]
+
+test build 2 should match 2
+  1 + !2 => 2
+

From R.B.Vermaas at tudelft.nl  Fri Mar 11 14:49:29 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Mar 2011 13:49:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22368 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.test/test
Message-ID: <20110311134929.976437F8033@mx1.tudelft.nl>

Author: rob
Date: Fri Mar 11 13:49:29 2011
New Revision: 22368
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22368&sc=1

Log:
some renaming,moving around tests, removing old test2.spt

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt
      - copied, changed from r22361, spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test3.spt
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test2.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test3.spt
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-parse-tests.spt

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-parse-tests.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-parse-tests.spt	Fri Mar 11 13:41:53 2011	(r22367)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/basic-parse-tests.spt	Fri Mar 11 13:49:29 2011	(r22368)
@@ -4,10 +4,14 @@
 language TestingTesting
 
 test parsing with AST matching
-  [[module x entity Y {} ]] => Module(_, _)
+  [[ module x entity Y {} ]] => Module(_, _)
     
 test successful parsing
-  [[module x entity X { a : B } ]] succeeds parsing
+  [[ module x entity X { a : B } ]] succeeds parsing
     
 test failed parsing
-  [[module x entity X { a : } ]] fails parsing
+  [[ module x entity X { a : } ]] fails parsing
+
+test parsing with AST in file
+  [[ module x ]] => file ./empty-module.aterm
+  

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt (from r22361, spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test3.spt)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/test3.spt	Thu Mar 10 15:24:04 2011	(r22361, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt	Fri Mar 11 13:49:29 2011	(r22368)
@@ -1,4 +1,4 @@
-module test3
+module setup-test
 
 language TestingTesting
 

From R.B.Vermaas at tudelft.nl  Fri Mar 11 14:51:50 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Mar 2011 13:51:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22369 -
	spoofax-imp/trunk/org.strategoxt.imp.testing.test/test
Message-ID: <20110311135150.7170E7F8050@mx1.tudelft.nl>

Author: rob
Date: Fri Mar 11 13:51:50 2011
New Revision: 22369
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22369&sc=1

Log:


Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/empty-module.aterm

Added: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/empty-module.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/empty-module.aterm	Fri Mar 11 13:51:50 2011	(r22369)
@@ -0,0 +1 @@
+Module("x", [])
\ No newline at end of file

From R.B.Vermaas at tudelft.nl  Fri Mar 11 15:59:29 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Mar 2011 14:59:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22370 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20110311145929.21E132B8029@mx2.tudelft.nl>

Author: rob
Date: Fri Mar 11 14:59:28 2011
New Revision: 22370
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22370&sc=1

Log:
implemented aterm-eq for annotated terms (exact match)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/aterm-eq.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/aterm-eq.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/aterm-eq.str	Fri Mar 11 13:51:50 2011	(r22369)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/aterm-eq.str	Fri Mar 11 14:59:28 2011	(r22370)
@@ -23,6 +23,7 @@
     +        afun-eq(x)
     +    wildcard-eq(x)
     + wildcardvar-eq(x) 
+    +   annotated-eq(x)
     ) 
 
 rules
@@ -86,6 +87,11 @@
     ; where(<x> (s1, s2))
     ; where(<zip(x)> (x1*, x2*))
 
+  annotated-eq(x) =
+    ?(annotated(t1, default(a1*)), annotated(t2, default(a2*)))
+    ; where(<x> (t1, t2))
+    ; where(<zip(x)> (a1*, a2*))
+
 rules
 
   afun-eq(x) = 

From R.B.Vermaas at tudelft.nl  Fri Mar 11 16:00:58 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 11 Mar 2011 15:00:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22371 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/trans
Message-ID: <20110311150058.5EC40CC318@mx4.tudelft.nl>

Author: rob
Date: Fri Mar 11 15:00:58 2011
New Revision: 22371
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22371&sc=1

Log:
implemented aterm-eq for annotated terms (exact match)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Fri Mar 11 14:59:28 2011	(r22370)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Fri Mar 11 15:00:58 2011	(r22371)
@@ -57,9 +57,6 @@
   reset-analyzed-ast =
       rules(LastAnalyzedAst := None())
 
-  check-warning:
-  	annotated(_, _) -> $[Matching with annotations not implemented(?)] // TODO: extend aterm-eq
-
   external plugin-strategy-invoke(|language, name)
   
   Test-get-input :

From L.C.L.Kats at tudelft.nl  Fri Mar 11 18:09:32 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 11 Mar 2011 17:09:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22372 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stra...
Message-ID: <20110311170932.C32F0CC2E9@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Mar 11 17:09:32 2011
New Revision: 22372
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22372&sc=1

Log:
some more setDisambiguator() calls (shouldn't affect Spoofax/346, but only Spoofax programs)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPrimitive.java
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_parse_string_pt_compat.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Fri Mar 11 15:00:58 2011	(r22371)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	Fri Mar 11 17:09:32 2011	(r22372)
@@ -101,6 +101,10 @@
 		return disambiguator;
 	}
 	
+	public void setDisambiguator(Disambiguator disambiguator) {
+		this.disambiguator = disambiguator;
+	}
+	
 	public void setParseTable(ParseTable parseTable) {
 		this.parseTable = new ParseTableProvider(parseTable);
 		resetState();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java	Fri Mar 11 15:00:58 2011	(r22371)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java	Fri Mar 11 17:09:32 2011	(r22372)
@@ -29,9 +29,12 @@
 	private Map<ParseTable, Object> isNoRecoveryWarned =
 		new WeakHashMap<ParseTable, Object>();
 
+	private final Disambiguator filterSettings;
+
 	protected IMPParseStringPTPrimitive(Disambiguator filterSettings, 
 			AtomicBoolean recoveryEnabled, SourceMappings mappings) {
 		super(filterSettings, recoveryEnabled);
+		this.filterSettings = filterSettings;
 		this.mappings = mappings;
 	}
 
@@ -47,6 +50,7 @@
 		String path = getLastPath();		
 		JSGLRI parser = new JSGLRI(table, startSymbol);
 		parser.setUseRecovery(isRecoveryEnabled());
+		parser.setDisambiguator(filterSettings);
 		parser.setImplodeEnabled(false);
 		if (isRecoveryEnabled() && !parser.getParseTable().hasRecovers()) {
 			assert table.hashCode() == System.identityHashCode(table);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPrimitive.java	Fri Mar 11 15:00:58 2011	(r22371)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPrimitive.java	Fri Mar 11 17:09:32 2011	(r22372)
@@ -29,9 +29,12 @@
 	private Map<ParseTable, Object> isNoRecoveryWarned =
 		new WeakHashMap<ParseTable, Object>();
 
+	private final Disambiguator filterSettings;
+
 	protected IMPParseStringPrimitive(Disambiguator filterSettings, 
 			AtomicBoolean recoveryEnabled, SourceMappings mappings) {
 		super(filterSettings, recoveryEnabled);
+		this.filterSettings = filterSettings;
 		this.mappings = mappings;
 	}
 
@@ -40,10 +43,13 @@
 			ParseTable table, String startSymbol)
 			throws InterpreterException, IOException, SGLRException {
 		
+		// TODO: Optimize - cache tree builder... (like in superclass)
+		
 		String input = inputTerm.stringValue();
 		String path = getLastPath();		
 		JSGLRI parser = new JSGLRI(table, startSymbol);
 		parser.setUseRecovery(isRecoveryEnabled());
+		parser.setDisambiguator(filterSettings);
 		parser.setImplodeEnabled(true);
 		if (isRecoveryEnabled() && !parser.getParseTable().hasRecovers()) {
 			assert table.hashCode() == System.identityHashCode(table);

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_parse_string_pt_compat.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_parse_string_pt_compat.java	Fri Mar 11 15:00:58 2011	(r22371)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/sglr/JSGLR_parse_string_pt_compat.java	Fri Mar 11 17:09:32 2011	(r22372)
@@ -50,6 +50,7 @@
 			throws InterpreterException, IOException,
 			org.spoofax.jsglr.shared.SGLRException {
 		
+		// TODO: Optimize - cache tree builder...
 		SGLR parser = new SGLR(createTreeBuilder(env), table);
 		parser.setDisambiguator(filterSettings);
 		parser.setUseStructureRecovery(isRecoveryEnabled());

From g.h.wachsmuth at tudelft.nl  Fri Mar 11 22:20:28 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Fri, 11 Mar 2011 21:20:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22373 - in
	spoofax-contrib/pl: . trunk
Message-ID: <20110311212028.A747B7F804D@mx1.tudelft.nl>

Author: GuidoWachsmuth
Date: Fri Mar 11 21:20:28 2011
New Revision: 22373
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22373&sc=1

Log:
Initial import.

Added:
   spoofax-contrib/pl/
   spoofax-contrib/pl/trunk/

From g.h.wachsmuth at tudelft.nl  Fri Mar 11 22:21:42 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Fri, 11 Mar 2011 21:21:42 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22374 - in
	spoofax-contrib/pl/trunk: . .externalToolBuilders .settings
	META-INF editor editor/java editor/java/org
	editor/java/org/spoofax editor/java/org/spoofax/examples...
Message-ID: <20110311212142.E63AACC38F@mx4.tudelft.nl>

Author: GuidoWachsmuth
Date: Fri Mar 11 21:21:42 2011
New Revision: 22374
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22374&sc=1

Log:
Initial import.

Added:
   spoofax-contrib/pl/trunk/.classpath
   spoofax-contrib/pl/trunk/.externalToolBuilders/
   spoofax-contrib/pl/trunk/.externalToolBuilders/PL build.main.xml.launch
   spoofax-contrib/pl/trunk/.project
   spoofax-contrib/pl/trunk/.settings/
   spoofax-contrib/pl/trunk/.settings/org.eclipse.core.resources.prefs
   spoofax-contrib/pl/trunk/.settings/org.eclipse.jdt.core.prefs
   spoofax-contrib/pl/trunk/META-INF/
   spoofax-contrib/pl/trunk/META-INF/MANIFEST.MF
   spoofax-contrib/pl/trunk/build.generated.xml
   spoofax-contrib/pl/trunk/build.main.xml
   spoofax-contrib/pl/trunk/build.properties
   spoofax-contrib/pl/trunk/editor/
   spoofax-contrib/pl/trunk/editor/PL-Builders.esv
   spoofax-contrib/pl/trunk/editor/PL-Colorer.esv
   spoofax-contrib/pl/trunk/editor/PL-Completions.esv
   spoofax-contrib/pl/trunk/editor/PL-Folding.esv
   spoofax-contrib/pl/trunk/editor/PL-Outliner.esv
   spoofax-contrib/pl/trunk/editor/PL-References.esv
   spoofax-contrib/pl/trunk/editor/PL-Syntax.esv
   spoofax-contrib/pl/trunk/editor/PL.main.esv
   spoofax-contrib/pl/trunk/editor/java/
   spoofax-contrib/pl/trunk/editor/java/org/
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/Activator.java
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/PLParseController.java
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/PLParseControllerGenerated.java
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/PLValidator.java
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/InteropRegisterer.java
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/Main.java
   spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/java_strategy_0_0.java
   spoofax-contrib/pl/trunk/lib/
   spoofax-contrib/pl/trunk/lib/editor-common.generated.str
   spoofax-contrib/pl/trunk/lib/environment.str
   spoofax-contrib/pl/trunk/lib/namespace.str
   spoofax-contrib/pl/trunk/lib/refactor-common.generated.str
   spoofax-contrib/pl/trunk/lib/typecheck.str
   spoofax-contrib/pl/trunk/plugin.xml
   spoofax-contrib/pl/trunk/syntax/
   spoofax-contrib/pl/trunk/syntax/Common.sdf
   spoofax-contrib/pl/trunk/syntax/PL.generated.pp
   spoofax-contrib/pl/trunk/syntax/PL.pp
   spoofax-contrib/pl/trunk/syntax/PL.sdf
   spoofax-contrib/pl/trunk/test/
   spoofax-contrib/pl/trunk/test/example.pl
   spoofax-contrib/pl/trunk/trans/
   spoofax-contrib/pl/trunk/trans/analysis.str
   spoofax-contrib/pl/trunk/trans/normal/
   spoofax-contrib/pl/trunk/trans/normal/normal.str
   spoofax-contrib/pl/trunk/trans/normal/signature.str
   spoofax-contrib/pl/trunk/trans/pl.str
   spoofax-contrib/pl/trunk/trans/resolve.str
   spoofax-contrib/pl/trunk/trans/types/
   spoofax-contrib/pl/trunk/trans/types.td
   spoofax-contrib/pl/trunk/trans/types/gen-analysis.str
   spoofax-contrib/pl/trunk/trans/types/gen-check.str

Added: spoofax-contrib/pl/trunk/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/.classpath	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/.externalToolBuilders/PL build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/.externalToolBuilders/PL build.main.xml.launch	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.spoofax.examples.pl/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.spoofax.examples.pl}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-contrib/pl/trunk/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/.project	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<projectDescription>
+      <name>org.spoofax.examples.pl</name>
+      <comment></comment>
+      <buildSpec>
+        <buildCommand>
+          <name>org.eclipse.jdt.core.javabuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+            <name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+            <triggers>full,incremental,</triggers>
+            <arguments>
+                <dictionary>
+                    <key>LaunchConfigHandle</key>
+                    <value>&lt;project&gt;/.externalToolBuilders/PL build.main.xml.launch</value>
+                </dictionary>
+            </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.ManifestBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+        <buildCommand>
+          <name>org.eclipse.pde.SchemaBuilder</name>
+          <arguments>
+          </arguments>
+        </buildCommand>
+      </buildSpec>
+      <natures>
+        <nature>org.eclipse.pde.PluginNature</nature>
+        <nature>org.eclipse.jdt.core.javanature</nature>
+      </natures>
+    </projectDescription>
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/.settings/org.eclipse.core.resources.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/.settings/org.eclipse.core.resources.prefs	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,4 @@
+#Fri Mar 11 22:11:53 CET 2011
+eclipse.preferences.version=1
+encoding//trans/types/gen-analysis.str=UTF-8
+encoding//trans/types/gen-check.str=UTF-8

Added: spoofax-contrib/pl/trunk/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/.settings/org.eclipse.jdt.core.prefs	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-contrib/pl/trunk/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/META-INF/MANIFEST.MF	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: PL Plug-in
+Bundle-SymbolicName: org.spoofax.examples.pl; singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: org.spoofax.examples.pl.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: org.spoofax.examples.pl

Added: spoofax-contrib/pl/trunk/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/build.generated.xml	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,451 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/org/spoofax/examples/pl/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.spoofax.examples.pl.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/build.main.xml	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="PL" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="PL"/>
+        <property name="metasdfmodule" value="Stratego-PL"/>
+        <property name="esvmodule" value="PL"/>
+        <property name="strmodule" value="pl"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/build.properties	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-contrib/pl/trunk/editor/PL-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/PL-Builders.esv	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,16 @@
+
+module PL-Builders
+
+imports PL-Builders.generated
+
+builders
+                                                                                                                                                                                    
+	provider : include/pl.ctree                                                                                 
+	provider : include/pl-java.jar                                                                              
+                                                                                                              
+	observer : editor-analyse                                                                                   
+                                                                                                              
+	builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
+	builder  : "Show analysed abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta)
+                                                                                                              
+

Added: spoofax-contrib/pl/trunk/editor/PL-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/PL-Colorer.esv	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,9 @@
+module PL-Colorer
+
+imports PL-Colorer.generated
+
+colorer
+                                                                      
+  // This file can be used for custom colorer rules.                  
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/PL-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/PL-Completions.esv	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,5 @@
+module PL-Completions
+
+imports PL-Completions.generated
+
+completions

Added: spoofax-contrib/pl/trunk/editor/PL-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/PL-Folding.esv	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,9 @@
+module PL-Folding
+
+imports PL-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/PL-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/PL-Outliner.esv	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,9 @@
+module PL-Outliner
+
+imports PL-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/PL-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/PL-References.esv	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,12 @@
+module PL-References
+
+imports PL-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+	hover _: editor-hover
+	reference _: editor-resolve
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/PL-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/PL-Syntax.esv	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,9 @@
+module PL-Syntax
+
+imports PL-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/PL.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/PL.main.esv	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,16 @@
+module PL.main
+
+imports PL-Builders PL-Colorer PL-Completions PL-Folding PL-Outliner PL-References PL-Syntax
+
+language General properties
+                  
+  name          : PL
+  id            : org.spoofax.examples.pl
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the PL language"
+  url           : http://strategoxt.org
+                  
+  extensions    : pl
+  table         : include/PL.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/Activator.java	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,44 @@
+package org.spoofax.examples.pl;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "PL";
+
+  public static final String kLanguageName = "PL";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/PLParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/PLParseController.java	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,4 @@
+package org.spoofax.examples.pl;
+
+public class PLParseController extends PLParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/PLParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/PLParseControllerGenerated.java	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,108 @@
+package org.spoofax.examples.pl;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class PLParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("PL");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    PLParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = PLParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = PLParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(PLParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return PLParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/PLValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/PLValidator.java	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,12 @@
+package org.spoofax.examples.pl;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class PLValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return PLParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/InteropRegisterer.java	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,14 @@
+package org.spoofax.examples.pl.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+  public InteropRegisterer() {
+    super(new Strategy[] { java_strategy_0_0.instance });
+  }
+}

Added: spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/Main.java	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,11 @@
+package org.spoofax.examples.pl.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/editor/java/org/spoofax/examples/pl/strategies/java_strategy_0_0.java	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,32 @@
+package org.spoofax.examples.pl.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class java_strategy_0_0 extends Strategy {
+  
+  public static java_strategy_0_0 instance = new java_strategy_0_0();
+
+  @Override
+  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+    context.getIOAgent().printError("Input for java-strategy: " + current);
+    ITermFactory factory = context.getFactory();
+    return factory.makeString("Regards from java-strategy");
+  }
+
+}

Added: spoofax-contrib/pl/trunk/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/lib/editor-common.generated.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-pl-file
+  parse-pl-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/PL.tbl)>
+    )
+
+  parse-string = parse-pl-string
+  parse-pl-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/PL.tbl)>
+    )
+  
+  parse-stream = parse-pl-stream
+  parse-pl-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/PL.tbl)>
+    )
+
+  pp-pl-string =
+    ast2abox(|[<import-term(include/PL.generated.pp.af)>,
+               <import-term(include/PL.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "PL", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/pl.str file. These definitions should also be automatically 
+  // generated in the imported include/PL.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-contrib/pl/trunk/lib/environment.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/lib/environment.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,240 @@
+module lib/environment
+
+imports
+	lib/namespace
+
+signature constructors
+	env: Env -> Annotation
+	StandardEnv: Env
+	
+rules // annotate env
+	
+	annotate-env(s) : x -> x{env(e)} where project-scope(s) => e
+
+	get-annotated-env = (get-annos ; fetch-elem(?env(<id>))) <+ !StandardEnv()
+	
+rules // store declarations and references
+	
+	/**
+	* stores a mapping from a name to a declaration
+	* can distinguish different tables
+	* remembers the mapping by storing a dynamic rule
+	*
+	* @param env
+	* @type (a, b) -> b
+	*/
+	store-declaration(|env) :
+		(x, d) -> d
+		where rules(
+			Declared:+ (env, x) -> d
+		)
+		
+	store-declaration = store-declaration(|<get-annotated-env>)
+	
+	/**
+	* stores the usage of a reference
+	* can distinguish different namespaces
+	* remembers the reference by storing a dynamic rule
+	*
+	* @param env
+	* @type a -> a
+	*/
+	store-reference(|env) :
+		x -> x
+		where rules (
+			Referred:+ (env, x) -> x
+		)
+
+	store-reference = store-reference(|<get-annotated-env>)
+	
+rules // include environments
+	
+	/**
+	*
+	* example: 
+	*     store: Class(c, Parent(p), _, _) -> <id> 
+	*         where 
+	*             <store-declaration(|Classes())> c ; 
+	*             <include-env(|Fields(c))> Fields(p) ;
+	*             <include-env(|Methods(c))> Methods(p) 
+	*/
+	include-env(|env) : 
+		included -> included
+		where rules (
+			IncludedBy:+ included -> env
+			Including:+ env -> included
+		)
+				
+strategies // access inclusions
+	
+	get-included-envs  = get-inclusions(bagof-Including)
+	get-including-envs = get-inclusions(bagof-IncludedBy)
+	
+	get-inclusions(s) = ![<id>] ; get-inclusions(s|[]) ; reverse 
+	
+	get-inclusions(s|temps): [] -> temps
+	 
+	get-inclusions(s|temps): 
+		[env|envs] -> <get-inclusions(s|temps)> envs
+		where <elem> (env, temps)
+		
+	get-inclusions(s|temps):  
+		[env|envs] -> <get-inclusions(s|temps')> envs
+		where
+			<s> env ;
+			get-inclusions(s|[env|temps]) => temps'
+		
+strategies // access declarations
+	
+	/**
+	* maps a name to its declarations
+	* can distinguish different environments
+	* remembers the mapping by calling a dynamic rule
+	*
+	* @param env
+	* 
+	* @type a -> List(b)
+	*/
+	lookup-all-local(|env) = !(env, <id>) ; bagof-Declared 
+	
+	lookup-all-local = lookup-all-local(|<get-annotated-env>)
+
+	/**
+	* maps a name to its declarations
+	* can distinguish different environments
+	* remembers the mapping by calling a dynamic rule
+	*
+	* @param env
+	* 
+	* @type a -> List(b)
+	*/
+	lookup-all(|env) = ?x ; <get-included-envs> env ; mapconcat(<lookup-all-local(|<id>)> x)
+
+	lookup-all = lookup-all(|<get-annotated-env>)
+	
+	/**
+	* succeeds if the current term can be mapped to a declaration
+	* can distinguish different environments
+	* 
+	* @param namespace
+	* 
+	* @type a -> a
+	*/
+	is-declared-local(|env) = where(lookup-all-local(|env) ; ?[_|_])
+
+	is-declared-local = is-declared-local(|<get-annotated-env>)
+
+	/**
+	* succeeds if the current term can be mapped to a declaration
+	* can distinguish different environments
+	* 
+	* @param namespace
+	* 
+	* @type a -> a
+	*/
+	is-declared(|env) = where(lookup-all(|env) ; ?[_|_])
+
+	is-declared = is-declared(|<get-annotated-env>)
+		
+	/**
+	* maps a name to its only declaration
+	* can distinguish different environments
+	* 
+	* @param env
+	*/
+	lookup-unique(|env) = lookup-all(|env) ; ?[<id>]
+
+	lookup-unique = lookup-unique(|<get-annotated-env>)
+	
+	/**
+	* maps a name to its only declaration
+	* can distinguish different environments
+	* 
+	* @param env
+	*/
+	lookup-unique-local(|env) = lookup-all-local(|env) ; ?[<id>]
+
+	lookup-unique-local = lookup-unique-local(|<get-annotated-env>)
+	
+	/**
+	* maps a name to its first declaration
+	* can distinguish different environments
+	* 
+	* @param env
+	*/
+	lookup(|env) = project(id|env) 
+	
+	lookup_ = lookup(|<get-annotated-env>)
+
+	/**
+	* maps a name to its first declaration for which strategy s holds
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> b
+	*/
+	lookup(s|env) = project(where(s)|env)
+	
+	/**
+	* maps a name to its declarations for which strategy s holds
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> List(b)
+	*/
+	lookup-all(s|env) = project-all(where(s)|env)
+
+strategies // project declarations
+	
+	/**
+	* maps a name to the first projection of its declarations
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> c
+	*/
+	project(s|env) = lookup-all(|env) ; fetch-elem(s) 
+
+	/**
+	* maps a name to the projections of its declarations
+	* can distinguish different environments
+	* 
+	* @param s: b -> c
+	* @param env
+	* 
+	* @type a -> List(c)
+	*/
+	project-all(s|env) = lookup-all(|env) ; filter(s) 
+	
+strategies // access all declarations
+	
+	all-entries(|env) = 
+		<get-included-envs> env => envs ; 
+		all-keys-Declared ; 
+		filter(where( (id, !envs) ; elem )) ;
+		mapconcat(bagof-Declared)
+	
+	all-entries(s|env) = project-all-declarations(where(s)|env) 
+
+	project-all-declarations(s|env) = all-entries(|env) ; filter(s) 
+	 
+strategies // access references
+
+	get-references(|env) = ?x ; <get-included-envs> env  ; mapconcat(!(<id>, x) ; bagof-Referred)
+	
+	is-referred(|env) = get-references(|env) ; ?[_|_]
+
+strategies	
+	
+	lookup-proposals(s|namespace) = 
+		( 
+			<Propose> () ; 
+			filter(where( lookup(s|namespace) )) ; 
+			map(rm-annotations) 
+		) <+ ![]

Added: spoofax-contrib/pl/trunk/lib/namespace.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/lib/namespace.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,93 @@
+module lib/namespace
+
+signature constructors
+	uid: UID -> Annotation
+	   : String -> UID
+	
+rules // scoped renaming
+	
+	/**
+	* executes the renaming strategy s in a new scope
+	* 
+	* declarations inside the new scope will hide existing declarations outside the new scope
+	* multiple declarations with the same name inside the new scope will be renamed to the same name
+	*
+	* @param renaming strategy s: a -> b
+	* @type a -> b
+	*/
+	new-scope(s) :
+		x -> y
+		where
+			<newname> x => scope ;
+			{| Renamed, RenamedInScope, CurrentScope, Scope:
+				rules (
+					CurrentScope: _ -> scope
+					Scope:+ x -> scope
+				) ;
+				<s> x => y
+			|} 
+			
+	/**
+	* annotates the current term with a fresh name
+	* can distinguish different namespaces
+	* remembers the renaming by storing two dynamic rules
+	* 
+	* multiple calls on the same term inside the same scope will give identical results
+	* calls inside a new scope will hide the results of calls to the same term from outer scopes
+	*
+	* @param namespace 
+	* @type a -> a
+	*/
+	uid-declaration(|namespace) : 
+		x -> x'
+		where 
+			CurrentScope => scope ;
+			<RenamedInScope> (namespace, scope, x) => x'
+	
+	uid-declaration(|namespace) : 
+		x -> x'
+		where 
+			CurrentScope => scope ;
+			not (<RenamedInScope> (namespace, scope, x));
+			x' := x{uid(<newname> "uid")}
+		where rules(
+			RenamedInScope: (namespace, scope, x) -> x' 
+			Renamed: (namespace, x) -> x'
+		)
+	
+	/**
+	* annotates the current term with a new name
+	* succeeds only if rename-declaration was called before on the same term
+	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
+	*
+	* @param namespace 
+	* @type a -> b
+	*/
+	uid-reference(|namespace) :
+		x -> x'
+		where
+			<Renamed> (namespace, x) => x'
+	
+strategies // access scopes
+	
+	get-scopes = all-keys-Scope
+	
+	get-scopes(s) = get-scopes ; filter(where(s))
+	
+	get-scope(s) = get-scopes ; fetch-elem(where(s))
+	
+	project-scopes(s) = get-scopes ; filter(s)
+	
+	project-scope(s) = get-scopes ; fetch-elem(s)
+	
+	in-scope(s) = where(get-scope(s))
+	
+strategies	
+	
+	get-proposal-candidates(|namespace) = all-keys-Renamed ; filter(?(namespace, _) ; Renamed)
+	
+	store-proposal-candidates(|namespace) = get-proposal-candidates(|namespace) ; store-proposals
+	
+	store-proposals = ?x ; where (rules ( Propose : () -> x ))
+	
+	get-proposals = ( <Propose> () ; map(rm-annotations) ) <+ ![]

Added: spoofax-contrib/pl/trunk/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/lib/refactor-common.generated.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,64 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value
+ * @type (String, String, String) -> String
+ */
+input-dialog:
+  (title, label, default-value) -> <prim("SSL_EXT_opendialog", title, label, default-value)>
+  
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/EntityRefactorings.generated.pp.af)
+	

Added: spoofax-contrib/pl/trunk/lib/typecheck.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/lib/typecheck.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,131 @@
+module typecheck
+
+signature constructors
+	
+	FUN_TYPE: List(TYPE) * TYPE -> TYPE
+
+rules
+	
+	init-type-analysis = rules ( type-rel:- _ ); try(init-relations)
+		
+	init-relations = fail
+		
+rules // dummy rules
+	
+	resolve = fail
+	type-to-string = fail
+	term-to-string = fail
+	type-of = fail
+
+rules // type relations
+	
+	type-rel(|relname) = eq <+ ( ?(sub, super) ; <elem> (super, <rel-extension(|relname)> sub) )
+
+	trans-type-rel(|relname) = eq <+ ( ?(sub, super) ; <elem> (super, <transitive-rel-extension(|relname)> sub) )
+
+	rel-extension(|relname): sub -> <bagof-type-rel> (relname, sub)
+	
+	transitive-rel-extension(|relname) = repeat(!(<id>, <rel-extension(|relname)>) ; not(eq) ; ?(_, <id>))
+	
+rules // collect errors
+	
+	perform-check(project, msg1, msg2): (exp, _) -> (exp, <msg1> exp)
+	where not (<project> exp) 
+		
+	perform-check(project, msg1, msg2): (exp, expected) -> (exp, <msg2> (actual, expected))
+	where
+		actual := <project> exp ;
+		not(<eq> (actual, expected))
+	
+	perform-check(project, check, msg1, msg2): exp -> (exp, <msg1> exp)
+	where not (<project> exp) 
+		
+	perform-check(project, check, msg1, msg2): exp -> (exp, <msg2> p)
+	where
+		p := <project> exp ; 
+		not(<check> p)
+	
+	checks(project, msg1, msg2) = zip ; filter(perform-check(project, msg1, msg2)) 
+
+	checks(project, check, msg1, msg2) = where (filter(project) ; check) ; filter(perform-check(project, id, msg1, msg2))
+	
+	collect-error(s) = try(![<s>|<id>])	
+	
+	collect-errors(s) = try(!(<s>,<id>) ; conc)
+
+rules
+	
+	check-type(|exp, type) = check-type(type-error2|exp, type)
+	check-type(check|exp) = check-type(type-error1, check|exp)
+
+	check-type(msg|exp, type) = collect-error(<perform-check(type-of, fail, msg)> (exp, type))
+	check-type(msg, check|exp) = collect-error(<perform-check(type-of, check, fail, msg)> exp)
+	
+	check-types(|exps, types) = check-types(type-error2|exps, types)
+	check-types(check|exps) = check-types(type-error1, check|exps)
+
+	check-types(msg|exps, types) = collect-errors(<checks(type-of, fail, msg)> (exps, types))
+	check-types(msg, check|exps) = collect-errors(<checks(type-of, check, fail, msg)> exps)
+	
+	type-error1: _ -> "Type check failed."
+	type-error2: (actual, expected) -> $[Expression is of type [<type-to-string> actual] instead of type [<type-to-string> expected]]
+	
+rules
+	
+	check-resolve(|ref, def) = check-resolve(resolve-error2|ref, def)
+	check-resolve(check|ref) = check-resolve(resolve-error1, check|ref)
+	
+	check-resolve(msg|ref, def) = collect-error(<perform-check(resolve, undeclared-error, msg)> (ref, def))
+	check-resolve(msg, check|ref) = collect-error(<perform-check(resolve, check, undeclared-error, msg)> ref)
+	
+	check-resolves(|refs, defs) = check-resolves(resolve-error2|refs, defs)
+	check-resolves(check|refs) = check-resolves(resolve-error1, check|refs)
+	
+	check-resolves(msg|refs, defs) = collect-errors(<checks(resolve, undeclared-error, msg)> (refs, defs))
+	check-resolves(msg, check|refs) = collect-errors(<checks(resolve, check, undeclared-error, msg)> refs)
+	
+	undeclared-error: exp -> $[[<term-to-string> exp] is not declared.]
+	resolve-error1: _ -> "Resolve check failed."
+	resolve-error2: (actual, expected) -> $[Reference refers to [<term-to-string> actual] instead of [<term-to-string> expected]]
+
+rules	
+	
+	check-resolve-type(|ref, type) = check-resolve-type(type-error2|ref, type)
+	check-resolve-type(check|ref) = check-resolve-type(type-error1, check|ref)
+	
+	check-resolve-type(msg|ref, type) = check-resolve(id|ref) ; try(check-type(msg|<resolve> ref, type))
+	check-resolve-type(msg, check|ref) = check-resolve(id|ref) ; try(check-type(msg, check|<resolve> ref))
+	
+	check-resolve-types(|refs, types) = check-resolve-types(type-error2|refs, types)
+	check-resolve-types(check|refs) = check-resolve-types(type-error1, check|refs)
+	
+	check-resolve-types(msg|refs, types) = 
+		
+		check-resolves(id|refs) ; 
+		where ( <zip ; filter((resolve, id)) ; unzip> (refs, types) => (defs, types') ) ;
+		check-types(msg|defs, types')
+		
+	check-resolve-types(msg, check|refs) = check-resolves(id|refs) ; check-types(msg, check|<filter(resolve)> refs)
+	
+rules
+	
+	check-type-rel(|relname, sub, super) = check-type-rel(type-rel-error|relname, sub, super)
+	check-trans-type-rel(|relname, sub, super) = check-type-rel(type-rel-error|relname, sub, super)
+	
+	check-type-rel(msg|relname, sub, super) = collect-error(<check-type-rel(msg|relname)> (sub, super))
+	check-trans-type-rel(msg|relname, sub, super) = collect-error(<check-trans-type-rel(msg|relname)> (sub, super))
+	
+	check-type-rels(|relname, subs, supers) = check-type-rels(type-rel-error|relname, subs, supers)
+	check-trans-type-rels(|relname, subs, supers) = check-type-rels(type-rel-error|relname, subs, supers)
+	
+	check-type-rels(msg|relname, subs, supers) = collect-errors(<zip ; filter(check-type-rel(msg|relname))> (subs, supers))
+	check-trans-type-rel(msg|relname, subs, supers) = collect-errors(<zip ; filter(check-trans-type-rel(msg|relname))> (subs, supers))
+	
+	check-type-rel(msg|relname): (sub, super) -> (sub, <msg> (sub, super))
+	where not (type-rel(|relname))
+	
+	check-trans-type-rel(msg|relname): (sub, super) -> (sub, <msg> (sub, super))
+	where not (trans-type-rel(|relname))
+	
+	type-rel-error: (sub, super) -> $[Expression is of type [<type-to-string> sub] instead of type [<type-to-string> super]]
+	
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/plugin.xml	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="pl" description="PL" language="PL" derivedFrom="DynamicRoot" validator="org.spoofax.examples.pl.PLValidator" validatorClass="org.spoofax.examples.pl.PLValidator"></language>
+       </extension>
+       <extension id="org.spoofax.examples.pl.parser" name="PL Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="org.spoofax.examples.pl.PLParseController" language="PL">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/syntax/Common.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/syntax/Common.sdf	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,46 @@
+module Common
+
+exports
+
+  lexical syntax
+  
+    [a-zA-Z][a-zA-Z0-9]* -> ID
+    "-"? [0-9]+          -> INT
+    
+    "\"" StringChar* "\"" -> STRING
+    ~[\"\n]               -> StringChar
+    "\\\""                -> StringChar
+    BackSlashChar         -> StringChar
+    "\\"                  -> BackSlashChar
+    
+    [\ \t\n\r] -> LAYOUT
+    
+    [\*]                             -> CommentChar
+    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
+    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
+    
+    -> EOF
+  
+  lexical restrictions
+  
+    %% Ensure greedy matching for lexicals
+  
+    CommentChar   -/- [\/]
+    INT           -/- [0-9]
+    ID            -/- [a-zA-Z0-9\_]
+    
+    %% EOF may not be followed by any char
+    
+    EOF           -/- ~[]
+
+    %% Backslash chars in strings may not be followed by " 
+    
+    BackSlashChar -/- [\"]
+
+  context-free restrictions
+  
+    %% Ensure greedy matching for comments
+
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\/]
+    LAYOUT? -/- [\/].[\*]

Added: spoofax-contrib/pl/trunk/syntax/PL.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/syntax/PL.generated.pp	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,20 @@
+[
+   Prog              -- KW["program"] _1,
+   Var               -- _1,
+   Decl              -- _1 KW[":"] _2 KW[";"],
+   Assign            -- _1 KW["="] _2 KW[";"],
+   While             -- KW["while"] _1 _2,
+   If                -- KW["if"] _1 _2,
+   IfElse            -- KW["if"] _1 _2 KW["else"] _3,
+   Block             -- V  [V vs=2 [KW["{"] _1] KW["}"]],
+   Block.1:iter-star -- _1,
+   Int               -- KW["int"],
+   String            -- KW["string"],
+   IntConst          -- _1,
+   StringConst       -- _1,
+   Plus              -- _1 KW["+"] _2,
+   Minus             -- _1 KW["-"] _2,
+   Times             -- _1 KW["*"] _2,
+   Div               -- _1 KW["div"] _2,
+   Mod               -- _1 KW["mod"] _2
+]
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/syntax/PL.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/syntax/PL.pp	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also PL.generated.pp)
+[]

Added: spoofax-contrib/pl/trunk/syntax/PL.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/syntax/PL.sdf	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,46 @@
+%% Grammar for the PL language
+%% By default, based on an example "entities" syntax
+module PL
+
+imports Common
+
+exports
+
+  context-free start-symbols
+    Start
+
+ 	context-free syntax
+ 		Prog					  -> Start
+		"program" Stmt            -> Prog {cons("Prog")}
+		
+		ID                        -> VarRef {cons("Var")}
+		
+		ID ":" Type ";"           -> Stmt {cons("Decl")}
+		VarRef "=" Exp ";"        -> Stmt {cons("Assign")}
+		"while" Exp Stmt          -> Stmt {cons("While")}
+		"if" Exp Stmt             -> Stmt {prefer, cons("If")}
+		"if" Exp Stmt "else" Stmt -> Stmt {cons("IfElse")}
+		"{" Stmt* "}"             -> Stmt {cons("Block")}
+		
+		"int"                     -> Type {cons("Int")}
+		"string"                  -> Type {cons("String")}
+		
+		INT                       -> Exp {cons("IntConst")}
+		STRING                    -> Exp {cons("StringConst")}
+		VarRef					  -> Exp
+		Exp "+" Exp               -> Exp {left, cons("Plus")}
+		Exp "-" Exp               -> Exp {left, cons("Minus")}
+		Exp "*" Exp               -> Exp {left, cons("Times")}
+		Exp "div" Exp             -> Exp {left, cons("Div")}
+		Exp "mod" Exp             -> Exp {left, cons("Mod")}
+		"(" Exp ")"               -> Exp {bracket}
+	
+	context-free priorities 
+		{
+			Exp "*" Exp   -> Exp
+			Exp "div" Exp -> Exp
+			Exp "mod" Exp -> Exp
+		} > {
+			Exp "+" Exp   -> Exp
+			Exp "-" Exp   -> Exp	
+		}

Added: spoofax-contrib/pl/trunk/test/example.pl
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/test/example.pl	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,9 @@
+program {
+	
+	x: int;
+	x = 4;
+	while x {
+		x = x - 1;
+		s = "5";
+	}
+}
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/trans/analysis.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/trans/analysis.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,38 @@
+module analysis
+
+imports
+	lib/editor-common.generated
+	lib/environment
+	lib/namespace
+	
+	include/PL
+	normal/normal
+	
+signature constructors
+	Vars: Env
+
+strategies
+	
+	//alldownup(s1, s2) = alldownup2(s1, s2)
+		
+	analyse = alltd(rename); bottomup(try(normal))
+	
+rules
+	
+	rename: Block(ss) -> Block(ss')
+	where
+		new-scope( ss' := <analyse> ss )
+	
+	rename: d at Decl(x, t) -> Decl(x', t)
+	where
+		x' := <uid-declaration(|Vars())> x;
+		<store-declaration(|Vars())> (x', d)
+		
+	rename: Assign(x, e) -> Assign(x', e')
+	where
+		x' := <uid-reference(|Vars())> x ;
+		e' := <analyse> e
+
+	rename: Var(x) -> Var(x')
+	where
+		x' := <uid-reference(|Vars())> x

Added: spoofax-contrib/pl/trunk/trans/normal/normal.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/trans/normal/normal.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,24 @@
+module normal/normal
+
+imports
+	
+	include/PL
+	normal/signature
+	types/gen-analysis
+	
+rules
+		
+	normal: If(e, s) -> IfElse(e, s, Block([]))
+	
+	normal: Plus(l, r)  -> BinExp(PLUS(), l, r)
+	where
+		<type-of> l => INT(); <type-of> r => INT()
+		
+	normal: Plus(l, r)  -> BinExp(CONCAT(), l, r)
+	where
+		<type-of> l => STRING() <+ <type-of> r => STRING()
+	
+	normal: Minus(l, r) -> BinExp(MINUS(), l, r)	
+	normal: Times(l, r) -> BinExp(TIMES(), l, r)	
+	normal: Div(l, r)   -> BinExp(DIV(), l, r)	
+	normal: Mod(l, r)   -> BinExp(MOD(), l, r)	

Added: spoofax-contrib/pl/trunk/trans/normal/signature.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/trans/normal/signature.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,10 @@
+module normal/signature
+
+signature constructors
+	BinExp: BinOp * Exp * Exp -> Exp
+	PLUS  : BinOp
+	MINUS : BinOp
+	TIMES : BinOp
+	DIV   : BinOp
+	MOD   : BinOp
+	CONCAT: BinOp

Added: spoofax-contrib/pl/trunk/trans/pl.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/trans/pl.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,36 @@
+module pl
+
+imports
+	libstratego-lib
+	libstratego-gpp
+	libstratego-aterm
+	include/PL
+	lib/editor-common.generated
+	lib/typecheck
+	analysis
+	resolve
+	types/gen-analysis
+	types/gen-check
+	
+rules 
+	
+	editor-analyse:
+		(ast, path, project-path) -> (ast', errors, warnings, notes)
+		with
+			editor-init;
+			init-type-analysis;
+			ast' := <analyse> ast;
+			errors   := <collect-all(type-check, conc)> ast';
+			warnings := <collect-all(fail, conc)> ast';
+			notes    := <collect-all(fail, conc)> ast'
+	  
+	generate-aterm:
+		(selected, position, ast, path, project-path) -> (filename, result)
+		with
+			filename := <guarantee-extension(|"aterm")> path;
+			result   := selected 
+	  
+	editor-hover:
+		(node, position, ast, path, project-path) -> $[type: [<type-to-string> t]]
+		where 
+			<type-of> node => t
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/trans/resolve.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/trans/resolve.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,18 @@
+module resolve
+
+imports
+	
+	include/PL
+	lib/environment
+	analysis
+	
+rules
+	
+	resolve: Var(x) -> <lookup-unique-local(|Vars())> x
+	
+	editor-resolve: 
+		(node, position, ast, path, project-path) -> elem
+		where 
+			<resolve> node => elem
+			
+	term-to-string: Var(x) -> $[Variable [x]]

Added: spoofax-contrib/pl/trunk/trans/types.td
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/trans/types.td	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,62 @@
+module types
+
+signatures
+
+	include/PL
+ 	normal/signature
+ 	
+types
+
+	INT 		"int"
+	STRING		"string"
+		
+rules // syntactic types
+
+	Int()		: INT
+	String()	: STRING
+	
+rules // declarations
+	
+	t_syn: t_sem
+	=====================
+	Decl(x, t_syn): t_sem
+	
+
+rules // expressions
+
+	IntConst(_)	  : INT
+	StringConst(_): STRING
+	
+	@self: t 
+	=========
+	Var(x): t 
+	
+	  op: t1 * t2 -> t	"Unknown operator" 
+	& e1: t1
+	& e2: t2
+	===================== 
+	BinExp(op, e1, e2): t
+		
+rules // operators
+
+	PLUS()  : INT * INT -> INT
+	MINUS() : INT * INT -> INT
+	TIMES() : INT * INT -> INT
+	DIV()   : INT * INT -> INT
+	MOD()   : INT * INT -> INT
+	CONCAT(): STRING * STRING -> STRING
+	
+rules // statements
+	
+	  v: t
+	& e: t
+	============
+	Assign(v, e)	
+	
+	e: INT
+	===============
+	IfElse(e, _, _)
+
+	e: INT
+	===========
+	While(e, _)

Added: spoofax-contrib/pl/trunk/trans/types/gen-analysis.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/trans/types/gen-analysis.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,71 @@
+module types/gen-analysis
+
+imports
+  lib/typecheck
+
+
+imports
+  include/PL
+  normal/signature
+
+
+signature
+  constructors
+    INT    : TYPE
+    STRING : TYPE
+
+
+rules
+
+  type-of :
+    self at Int() -> INT()
+
+  type-of :
+    self at String() -> STRING()
+
+
+rules
+
+  type-of :
+    self at Decl(x, t_syn) -> t_sem
+    where <type-of> t_syn => t_sem
+
+
+rules
+
+  type-of :
+    self at IntConst(_) -> INT()
+
+  type-of :
+    self at StringConst(_) -> STRING()
+
+  type-of :
+    self at Var(x) -> t
+    where <resolve ; type-of> self => t
+
+  type-of :
+    self at BinExp(op, e1, e2) -> t
+    where <type-of> op => FUN_TYPE([t1, t2], t)
+    where <type-of> e1 => t1
+    where <type-of> e2 => t2
+
+
+rules
+
+  type-of :
+    self at PLUS() -> FUN_TYPE([INT(), INT()], INT())
+
+  type-of :
+    self at MINUS() -> FUN_TYPE([INT(), INT()], INT())
+
+  type-of :
+    self at TIMES() -> FUN_TYPE([INT(), INT()], INT())
+
+  type-of :
+    self at DIV() -> FUN_TYPE([INT(), INT()], INT())
+
+  type-of :
+    self at MOD() -> FUN_TYPE([INT(), INT()], INT())
+
+  type-of :
+    self at CONCAT() -> FUN_TYPE([STRING(), STRING()], STRING())
\ No newline at end of file

Added: spoofax-contrib/pl/trunk/trans/types/gen-check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-contrib/pl/trunk/trans/types/gen-check.str	Fri Mar 11 21:21:42 2011	(r22374)
@@ -0,0 +1,53 @@
+module types/gen-check
+
+imports
+  lib/typecheck
+  types/gen-analysis
+
+
+imports
+  include/PL
+  normal/signature
+
+
+rules
+
+  type-to-string :
+    INT() -> "int"
+
+  type-to-string :
+    STRING() -> "string"
+
+
+rules
+
+  type-check :
+    self at Decl(x, t_syn) -> <check-type(?t_sem|t_syn)> []
+
+
+rules
+
+  type-check :
+    self at Var(x) -> <check-resolve-type(?t|self)> []
+
+  type-check :
+    self at BinExp(op, e1, e2) -> <check-type(
+                                  !"Unknown operator"
+                                , ?FUN_TYPE([t1, t2], t)
+                                | op
+                                )
+                                ; check-type(?t1|e1)
+                                ; check-type(?t2|e2)> []
+
+
+rules
+
+  type-check :
+    self at Assign(v, e) -> <check-type(?t|v)
+                          ; check-type(?t|e)> []
+
+  type-check :
+    self at IfElse(e, _, _) -> <check-type(?INT()|e)> []
+
+  type-check :
+    self at While(e, _) -> <check-type(?INT()|e)> []
\ No newline at end of file

From g.h.wachsmuth at tudelft.nl  Fri Mar 11 23:21:20 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Fri, 11 Mar 2011 22:21:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22375 -
	spoofax-contrib/pl/trunk
	spoofax-imp/trunk/experimental/TypingExperiment
Message-ID: <20110311222120.424D4108C008@mx3.tudelft.nl>

Author: GuidoWachsmuth
Date: Fri Mar 11 22:21:19 2011
New Revision: 22375
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22375&sc=1

Log:
moved PL example

Added:
   spoofax-imp/trunk/experimental/TypingExperiment/
      - copied from r22374, spoofax-contrib/pl/trunk/
Deleted:
   spoofax-contrib/pl/trunk/

From g.h.wachsmuth at tudelft.nl  Fri Mar 11 23:21:35 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Fri, 11 Mar 2011 22:21:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22376 -
	spoofax-contrib/pl
Message-ID: <20110311222135.DB9772B8023@mx2.tudelft.nl>

Author: GuidoWachsmuth
Date: Fri Mar 11 22:21:35 2011
New Revision: 22376
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22376&sc=1

Log:
moved PL example

Deleted:
   spoofax-contrib/pl/

From g.h.wachsmuth at tudelft.nl  Fri Mar 11 23:38:29 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Fri, 11 Mar 2011 22:38:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22377 -
	spoofax-imp/trunk/org.strategoxt.imp.types
Message-ID: <20110311223829.61F6D2B800F@mx2.tudelft.nl>

Author: GuidoWachsmuth
Date: Fri Mar 11 22:38:28 2011
New Revision: 22377
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22377&sc=1

Log:
Initial import.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.types/

From g.h.wachsmuth at tudelft.nl  Fri Mar 11 23:48:15 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Fri, 11 Mar 2011 22:48:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22378 - in
	spoofax-imp/trunk/org.strategoxt.imp.types: .
	.externalToolBuilders .settings META-INF editor editor/java
	editor/java/org editor/java/org/strategoxt editor/java...
Message-ID: <20110311224815.C84A3108C01C@mx3.tudelft.nl>

Author: GuidoWachsmuth
Date: Fri Mar 11 22:48:15 2011
New Revision: 22378
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22378&sc=1

Log:
Initial import.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.types/.classpath
   spoofax-imp/trunk/org.strategoxt.imp.types/.externalToolBuilders/
   spoofax-imp/trunk/org.strategoxt.imp.types/.externalToolBuilders/TypeDefinitionLanguage build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.types/.project
   spoofax-imp/trunk/org.strategoxt.imp.types/.settings/
   spoofax-imp/trunk/org.strategoxt.imp.types/.settings/org.eclipse.jdt.core.prefs
   spoofax-imp/trunk/org.strategoxt.imp.types/META-INF/
   spoofax-imp/trunk/org.strategoxt.imp.types/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.types/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.types/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.types/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Outliner.esv
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Syntax.esv
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage.main.esv
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/Activator.java
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/TypeDefinitionLanguageParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/TypeDefinitionLanguageParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/TypeDefinitionLanguageValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/Main.java
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/java_strategy_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.types/lib/
   spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-Core-pretty.pp.af
   spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-Sugar-pretty.pp.af
   spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-Sugar.str
   spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-pretty.pp.af
   spoofax-imp/trunk/org.strategoxt.imp.types/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.types/lib/refactor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.types/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Constants.sdf
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Identifiers.sdf
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Layout.sdf
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Signatures.sdf
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-StringQuotations.sdf
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Terms.sdf
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.generated.pp
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.pp
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.sdf
   spoofax-imp/trunk/org.strategoxt.imp.types/test/
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-check.str
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/prettyprint.str
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/refactorings.str
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/typedefinitionlanguage.str

Added: spoofax-imp/trunk/org.strategoxt.imp.types/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/.classpath	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<classpath>
+	<classpathentry kind="src" excluding="trans/**" path="editor/java"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/.externalToolBuilders/TypeDefinitionLanguage build.main.xml.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/.externalToolBuilders/TypeDefinitionLanguage build.main.xml.launch	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.ant.AntLaunchConfigurationType">
+<stringAttribute key="bad_container_name" value=".externalToolBuilders"/>
+<booleanAttribute key="org.eclipse.ant.ui.DEFAULT_VM_INSTALL" value="false"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES"/>
+<booleanAttribute key="org.eclipse.debug.ui.ATTR_LAUNCH_IN_BACKGROUND" value="false"/>
+<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java-1.5.0-sun-1.5.0.18&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.antHome&quot;&gt;&#10;&lt;memento default=&quot;true&quot;/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry id=&quot;org.eclipse.ant.ui.classpathentry.extraClasspathEntries&quot;&gt;&#10;&lt;memento/&gt;&#10;&lt;/runtimeClasspathEntry&gt;&#10;"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.launching.CLASSPATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value=""/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.ant.ui.AntClasspathProvider"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_ANT_TARGETS" value="all,"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LAUNCH_CONFIGURATION_BUILD_SCOPE" value="${none}"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_LOCATION" value="${workspace_loc:/org.strategoxt.imp.types/build.main.xml}"/>
+<booleanAttribute key="org.eclipse.ui.externaltools.ATTR_TRIGGERS_CONFIGURED" value="true"/>
+<stringAttribute key="org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY" value="${workspace_loc:/org.strategoxt.imp.types}"/>
+<stringAttribute key="process_factory_id" value="org.eclipse.ant.ui.remoteAntProcessFactory"/>
+</launchConfiguration>

Added: spoofax-imp/trunk/org.strategoxt.imp.types/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/.project	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.strategoxt.imp.types</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.ui.externaltools.ExternalToolBuilder</name>
+			<triggers>full,incremental,</triggers>
+			<arguments>
+				<dictionary>
+					<key>LaunchConfigHandle</key>
+					<value>&lt;project&gt;/.externalToolBuilders/TypeDefinitionLanguage build.main.xml.launch</value>
+				</dictionary>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax-imp/trunk/org.strategoxt.imp.types/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/.settings/org.eclipse.jdt.core.prefs	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax-imp/trunk/org.strategoxt.imp.types/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/META-INF/MANIFEST.MF	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,21 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: TypeDefinitionLanguage Plug-in
+Bundle-SymbolicName: org.strategoxt.imp.types;singleton:=true
+Bundle-Version: 1.0.0
+Bundle-Activator: org.strategoxt.imp.types.Activator
+Import-Package: org.osgi.framework;version="1.3.0"
+Require-Bundle: org.eclipse.core.runtime,
+  org.eclipse.core.resources,
+  org.eclipse.imp.runtime,
+  org.eclipse.ui,
+  lpg.runtime,
+  org.eclipse.jface.text,
+  org.eclipse.ui.editors,
+  org.eclipse.ui.workbench.texteditor,
+  org.strategoxt.imp.runtime,
+  org.spoofax.jsglr,
+  org.strategoxt.strj
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-ActivationPolicy: lazy
+Export-Package: org.strategoxt.imp.types

Added: spoofax-imp/trunk/org.strategoxt.imp.types/build.generated.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/build.generated.xml	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,451 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+
+        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
+        <target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
+        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar,  sdf2imp,refresh"/>
+    
+        <!-- Initialization -->
+        <available file="${build}/org/strategoxt/imp/types/strategies/Main.class" property="java.jar.enabled"/>
+        <condition property="java.jar.import" value="-la org.strategoxt.imp.types.strategies" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
+            <isset property="java.jar.enabled"/>
+        </condition>
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <condition property="metasdfmodule.available" value="1">
+            <available file="${syntax}/${metasdfmodule}.sdf"/>
+        </condition>
+        
+        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+        <mkdir dir="${syntax}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="refresh" if="eclipse.running">
+            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
+            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
+            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
+            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
+            <eclipse.refreshLocal resource="${syntaxdir}/${sdfmodule}.pp.generated" depth="infinite"/>
+            <eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Builders.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Colorer.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Completions.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Folding.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-References.generated.esv" depth="infinite"/>
+            <eclipse.refreshLocal resource="${projectdir}/editor/${sdfmodule}-Syntax.generated.esv" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
+            <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
+            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
+            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
+            <!-- Might cause the editor to be reloaded?
+            <eclipse.refreshLocal resource="${projectdir}/include" depth="infinite" />
+            -->
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+        
+        <target name="check-classpath">
+            <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
+            <antcall target="check-classpath.helper"/>  
+        </target>
+        
+        <target name="init" if="eclipse.running">
+            <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
+            <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
+                <arg value="${include}"/>
+            </java>
+        </target>
+  
+        <target name="check-classpath.helper" unless="check-classpath.available">
+            <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
+            <echo level="error" message="Make sure it is on the class path."/>
+            <echo level="error" message=""/>               
+            <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
+            <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
+            <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
+            <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
+            <fail/>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="meta-sdf2table" if="metasdfmodule.available">
+            <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
+            <antcall target="sdf2table">
+                <param name="sdfmodule" value="${metasdfmodule}"/>
+                <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
+            </antcall>
+            <antcall target="meta-sdf2table.helper"/>
+        </target>
+        
+        <target name="meta-sdf2table.helper" if="eclipse.running">
+           <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
+           <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <srcfileset dir="${lib}">
+                    <include name="**/*.def"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available">
+            <condition property="utils-include" value="-I ${utils}" else="">
+                <available file="${utils}"/>
+            </condition>
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${utils-include}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
+            <antcall target="ppgen.helper.fallback"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-t"/>
+                <arg value="-b"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+            </java>
+            <java classname="run" failonerror="false">
+                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
+            </java>
+        </target>
+    
+        <target name="ppgen.helper.fallback" unless="ppgen.available">
+            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
+        </target>
+        
+        <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper"/>
+            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
+            <antcall target="pppack.helper.fallback"/>
+        </target>
+    
+        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.pp"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+            </java>
+        </target>
+    
+        <target name="pppack.helper.fallback" unless="pppack.available">
+            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
+        </target>
+    
+        <!-- Aster to Stratego -->
+        <target name="stratego.aster">
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
+            <fileset dir="${basedir}" id="aster-input-set">
+              <include name="**/*.astr"/>
+            </fileset>
+            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.astr"/>
+                </srcfileset>
+                <targetfileset file="${trans}/${strmodule}.rtree"/>
+            </dependset>
+            <condition property="aster-output.uptodate">
+                <and>
+                    <isset property="aster-output.available"/>
+                    <available file="${trans}/${strmodule}.rtree"/>
+                </and>
+            </condition>
+            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
+            <antcall target="stratego.aster.helper"/>
+        </target>
+    
+        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
+            <java classname="org.strategoxt.aster.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg line="${aster-input}"/>
+            </java>
+        </target>
+        
+        <target name="java.jar" if="java.jar.enabled">
+            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig,utils-files">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <target name="stratego.jar.deletehelper" unless="strc-java.available">
+            <delete>
+                <fileset dir="${src-gen}" includes="trans/**"/>
+                <fileset dir="${build}" includes="trans/**"/>
+            </delete>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${include}/${sdfmodule}.def"/>
+            <delete dir="${src-gen}/trans"/>
+        </target>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/build.main.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/build.main.xml	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="TypeDefinitionLanguage" default="all">
+        
+        <!-- Key input modules -->
+        <property name="sdfmodule" value="TypeDefinitionLanguage"/>
+        <property name="metasdfmodule" value="Stratego-TypeDefinitionLanguage"/>
+        <property name="esvmodule" value="TypeDefinitionLanguage"/>
+        <property name="strmodule" value="typedefinitionlanguage"/>
+    
+        <!-- Project directories -->
+        <property name="trans" location="trans"/>
+        <property name="src-gen" location="editor/java"/>
+        <property name="syntax" location="syntax"/>
+        <property name="include" location="include"/>
+        <property name="lib" location="lib"/>
+        <property name="build" location="bin"/>
+        <property name="dist" location="bin/dist"/>
+        
+        <!-- Imports -->
+        <property name="build.sdf.imports" value=""/>
+        <property name="build.stratego.args" value="
+                        --library
+                        -I &quot;${trans}&quot;
+                        -I &quot;${basedir}&quot;
+                        -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
+        
+        <!-- Optional: external .def and .jar locations
+        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
+        <property name="externaljar" value="../lib.jar"/>
+        <property name="externaljarflags" value="-la org.lib"/>
+        -->
+    
+        <!-- Environment configuration for command-line builds -->
+        <condition property="build.strategoxt.sdf" value="${eclipse.spoofaximp.nativeprefix}" else="">
+            <isset property="eclipse.spoofaximp.nativeprefix"/>
+        </condition>
+        <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
+    
+        <import file="build.generated.xml"/>
+    
+        <!-- Main target -->
+        <target name="all" depends="spoofaximp.default.ctree"/>
+    </project>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/build.properties	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,8 @@
+source.. = editor/java/
+output.. = bin/
+bin.includes = META-INF/,\
+               plugin.xml,\
+               include/,\
+               bin/,\
+               lib/,\
+               .

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Builders.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Builders.esv	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,23 @@
+
+module TypeDefinitionLanguage-Builders
+
+imports TypeDefinitionLanguage-Builders.generated
+
+builders
+                                                                      
+  // This file can be used for custom analysis and builder rules.     
+  //                                                                  
+  // See the imported file for a brief introduction and examples.     
+
+builders
+                                                                                                               
+  provider : include/typedefinitionlanguage.ctree                                                              
+  provider : include/typedefinitionlanguage-java.jar                                                           
+                                                                                                               
+  observer : editor-analyse                                                                                    
+                                                                                                               
+  builder  : "Show abstract syntax (for selection)"   = generate-aterm (openeditor) (realtime) (meta) (source)  
+  builder  : "Show analysed syntax (for selection)"   = generate-aterm (openeditor) (realtime) (meta)  
+  
+  on save  : generate-analysis                    
+  on save  : generate-check                                                                             

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Colorer.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Colorer.esv	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,41 @@
+module TypeDefinitionLanguage-Colorer
+
+imports TypeDefinitionLanguage-Colorer.generated
+
+colorer
+                                                                      
+  layout     : 63 127 95    italic
+  
+  // White background for variables and escapes
+  environment _.StringEscape1 : _ 255 255 255
+  environment _.StringEscape2 : _ 255 255 255
+  environment _.StringEscape3 : _ 255 255 255
+  environment _.StringEscape4 : _ 255 255 255
+  _.Wld     : _ 255 255 255
+
+  _.StringEscape1 : gray  
+  _.StringEscape2 : gray  
+  _.StringEscape3 : gray  
+  _.StringEscape4 : gray
+  
+  _.Str		: blue
+  _.QStr    : blue
+  _.QDollar : blue
+  _.QBr     : gray
+    
+  terms         = 0    0    0
+  vars          = 0    0    0   255 255 255
+  sdefault      = 0    0    0
+  
+  Term      : terms
+  PreTerm   : terms
+  Var       : vars
+  _.Var     : vars
+  _.ListVar : vars
+  
+  QuotedBracket1 : blue
+  QuotedBracket2 : blue
+  QuotedBracket3 : blue
+  QuotedBracket4 : blue
+
+  SEP : 0 0 128
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Completions.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Completions.esv	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,24 @@
+module TypeDefinitionLanguage-Completions
+
+imports TypeDefinitionLanguage-Completions.generated
+
+completions
+                                                                   
+  // This file is used to define content completion.               
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
+                                                                   
+
+completions
+                                                                 
+  // Syntax completion:                                          
+                                                                 
+  //completion template : Property =   <x> " : " <T> (blank)       
+                                                                 
+
+completions
+  // Semantic (identifier) completion:   
+                                         
+  //completion proposer                  : editor-complete
+                                         
+  //completion trigger                   : ":"
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Folding.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Folding.esv	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,9 @@
+module TypeDefinitionLanguage-Folding
+
+imports TypeDefinitionLanguage-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Outliner.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Outliner.esv	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,9 @@
+module TypeDefinitionLanguage-Outliner
+
+imports TypeDefinitionLanguage-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  //
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-References.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-References.esv	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,15 @@
+module TypeDefinitionLanguage-References
+
+imports TypeDefinitionLanguage-References.generated
+
+references
+                                                                                                   
+  // This file can be used to specify reference resolving and hover help, and content completion.  
+  //                                                                                               
+  // See the imported file for a brief introduction and examples.                                  
+                                                                                                   
+
+references
+                
+  //reference _ : editor-resolve
+  //hover _     : editor-hover
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Syntax.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Syntax.esv	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,9 @@
+module TypeDefinitionLanguage-Syntax
+
+imports TypeDefinitionLanguage-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  //                                                               
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage.main.esv
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage.main.esv	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,16 @@
+module TypeDefinitionLanguage.main
+
+imports TypeDefinitionLanguage-Builders TypeDefinitionLanguage-Colorer TypeDefinitionLanguage-Completions TypeDefinitionLanguage-Folding TypeDefinitionLanguage-Outliner TypeDefinitionLanguage-References TypeDefinitionLanguage-Syntax
+
+language General properties
+                  
+  name          : TypeDefinitionLanguage
+  id            : org.strategoxt.imp.types
+  extends       : Root
+                  
+  description   : "Spoofax/IMP-generated editor for the TypeDefinitionLanguage language"
+  url           : http://strategoxt.org
+                  
+  extensions    : td
+  table         : include/TypeDefinitionLanguage.tbl
+  start symbols : Start
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/Activator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/Activator.java	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,44 @@
+package org.strategoxt.imp.types;
+
+import org.eclipse.imp.preferences.PreferencesService;
+import org.eclipse.imp.runtime.PluginBase;
+import org.osgi.framework.BundleContext;
+
+public class Activator extends PluginBase 
+{ 
+  public static final String kPluginID = "TypeDefinitionLanguage";
+
+  public static final String kLanguageName = "TypeDefinitionLanguage";
+
+  protected static Activator sPlugin;
+
+  public static Activator getInstance()
+  { 
+    if(sPlugin == null)
+      return new Activator();
+    return sPlugin;
+  }
+
+  public Activator () 
+  { 
+    super();
+    sPlugin = this;
+  }
+
+  @Override public void start(BundleContext context) throws Exception
+  { 
+    super.start(context);
+  }
+
+  @Override public String getID()
+  { 
+    return kPluginID;
+  }
+
+  @Override public String getLanguageID()
+  { 
+    return kLanguageName;
+  }
+
+  protected static PreferencesService preferencesService = null;
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/TypeDefinitionLanguageParseController.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/TypeDefinitionLanguageParseController.java	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,4 @@
+package org.strategoxt.imp.types;
+
+public class TypeDefinitionLanguageParseController extends TypeDefinitionLanguageParseControllerGenerated 
+{ }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/TypeDefinitionLanguageParseControllerGenerated.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/TypeDefinitionLanguageParseControllerGenerated.java	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,108 @@
+package org.strategoxt.imp.types;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileInputStream;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.imp.parser.IParseController;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+
+public class TypeDefinitionLanguageParseControllerGenerated extends DynamicParseController 
+{ 
+  public static final String LANGUAGE = new String("TypeDefinitionLanguage");
+
+  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
+
+  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
+
+  private static volatile Descriptor descriptor;
+
+  private static Throwable notLoadingCause;
+
+  public static synchronized Descriptor getDescriptor()
+  { 
+    if(notLoadingCause != null)
+      throw new RuntimeException(notLoadingCause);
+    if(descriptor == null)
+      createDescriptor();
+    return descriptor;
+  }
+
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    TypeDefinitionLanguageParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
+  { 
+    try
+    { 
+      InputStream descriptorStream = TypeDefinitionLanguageParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
+      InputStream table = TypeDefinitionLanguageParseControllerGenerated.class.getResourceAsStream(TABLE);
+      boolean filesystem = false;
+      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
+      { 
+        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
+        filesystem = true;
+      }
+      if(table == null && new File("./" + TABLE).exists())
+      { 
+        table = new FileInputStream("./" + TABLE);
+        filesystem = true;
+      }
+      if(descriptorStream == null)
+        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
+      if(table == null)
+        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
+      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
+      descriptor.setAttachmentProvider(TypeDefinitionLanguageParseControllerGenerated.class);
+    }
+    catch(BadDescriptorException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
+    }
+    catch(IOException exc)
+    { 
+      notLoadingCause = exc;
+      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
+    }
+  }
+
+  private static String getPluginLocation()
+  { 
+    return TypeDefinitionLanguageParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+  }
+
+  @Override public IParseController getWrapped()
+  { 
+    if(!isInitialized())
+    { 
+      if(notLoadingCause != null)
+        throw new RuntimeException(notLoadingCause);
+      try
+      { 
+        initialize(this, getDescriptor().getLanguage());
+      }
+      catch(BadDescriptorException exc)
+      { 
+        notLoadingCause = exc;
+        throw new RuntimeException(exc);
+      }
+    }
+    return super.getWrapped();
+  }
+
+  @Override protected void setNotLoadingCause(Throwable value)
+  { 
+    notLoadingCause = value;
+    super.setNotLoadingCause(value);
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/TypeDefinitionLanguageValidator.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/TypeDefinitionLanguageValidator.java	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,12 @@
+package org.strategoxt.imp.types;
+
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
+
+public class TypeDefinitionLanguageValidator extends MetaFileLanguageValidator 
+{ 
+  @Override public Descriptor getDescriptor()
+  { 
+    return TypeDefinitionLanguageParseController.getDescriptor();
+  }
+}
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/InteropRegisterer.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/InteropRegisterer.java	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,14 @@
+package org.strategoxt.imp.types.strategies;
+
+import org.strategoxt.lang.JavaInteropRegisterer;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Helper class for {@link java_strategy_0_0}.
+ */
+public class InteropRegisterer extends JavaInteropRegisterer {
+
+  public InteropRegisterer() {
+    super(new Strategy[] { java_strategy_0_0.instance });
+  }
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/Main.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/Main.java	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,11 @@
+package org.strategoxt.imp.types.strategies;
+
+import org.strategoxt.lang.Context;
+
+public class Main {
+  
+  public static void init(Context context) {
+    // Called when the editor is being initialized
+  }
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/java_strategy_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/java/org/strategoxt/imp/types/strategies/java_strategy_0_0.java	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,32 @@
+package org.strategoxt.imp.types.strategies;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * Example Java strategy implementation.
+ *
+ * This strategy can be used by editor services and can be called
+ * in Stratego modules by declaring it as an external strategy
+ * as follows:
+ *
+ * <code>
+ *  external java-strategy(|)
+ * </code>
+ *
+ * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
+ */
+public class java_strategy_0_0 extends Strategy {
+  
+  public static java_strategy_0_0 instance = new java_strategy_0_0();
+
+  @Override
+  public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+    context.getIOAgent().printError("Input for java-strategy: " + current);
+    ITermFactory factory = context.getFactory();
+    return factory.makeString("Regards from java-strategy");
+  }
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-Core-pretty.pp.af
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-Core-pretty.pp.af	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1 @@
+PP-Table([PP-Entry(Path1("Module"),[FBOX(KW,S("\"module\"")),Arg("1"),Arg("2")]),PP-Entry(Path("Module",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("Specification"),[V([],[H([],[FBOX(KW,S("\"specification\""))]),Arg("1")])]),PP-Entry(Path("Specification",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Imports"),[V([],[H([],[FBOX(KW,S("\"imports\""))]),Arg("1")])]),PP-Entry(Path("Imports",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Strategies"),[V([],[H([],[FBOX(KW,S("\"strategies\""))]),Arg("1")])]),PP-Entry(Path("Strategies",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Signature"),[V([],[H([],[FBOX(KW,S("\"signature\""))]),Arg("1")])]),PP-Entry(Path("Signature",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Let"),[FBOX(KW,S("\"let\"")),Arg("1"),FBOX(KW,S("\"in\"")),Arg("2"),FBOX(KW,S("\"end\""))]),PP-Entry(Path("Let",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("SDefT"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2")
 ,FBOX(KW,S("\"|\"")),Arg("3"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"=\"")),Arg("4")]),PP-Entry(Path("SDefT",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("SDefT",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Override"),[FBOX(KW,S("\"override\""))]),PP-Entry(Path1("Extend"),[FBOX(KW,S("\"extend\""))]),PP-Entry(Path1("Internal"),[FBOX(KW,S("\"internal\""))]),PP-Entry(Path1("ProceedNoArgs"),[FBOX(KW,S("\"proceed\""))]),PP-Entry(Path1("Proceed"),[FBOX(KW,S("\"proceed\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path("Proceed",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ProceedT"),[FBOX(KW,S("\"proceed\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("ProceedT",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("ProceedT",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))])
 ,PP-Entry(Path1("AnnoDef"),[H([],[Arg("1"),Arg("2")])]),PP-Entry(P
1("VarDec"),[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path1("SVar"),[Arg("1")]),PP-Entry(Path1("CallT"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\"|\"")),Arg("3"),FBOX(KW,S("\")\""))]),PP-Entry(Path("CallT",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("CallT",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("CallDynamic"),[FBOX(KW,S("\"call\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\"|\"")),Arg("3"),FBOX(KW,S("\")\""))]),PP-Entry(Path("CallDynamic",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("CallDynamic",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("PrimT"),[FBOX(KW,S("\"prim\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\",\"")),Arg("2"),FBOX(KW,S("\"|\"")),Arg("3"),FBOX(KW,S("\")\""))]),PP-Entry(Path("PrimT",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("PrimT"
 ,[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Match"),[FBOX(KW,S("\"?\"")),Arg("1")]),PP-Entry(Path1("Build"),[FBOX(KW,S("\"!\"")),Arg("1")]),PP-Entry(Path1("Scope"),[FBOX(KW,S("\"{\"")),Arg("1"),FBOX(KW,S("\":\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("Scope",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ParenStrat"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Fail"),[FBOX(KW,S("\"fail\""))]),PP-Entry(Path1("Id"),[FBOX(KW,S("\"id\""))]),PP-Entry(Path1("Seq"),[Arg("1"),FBOX(KW,S("\";\"")),Arg("2")]),PP-Entry(Path1("LChoice"),[Arg("1"),FBOX(KW,S("\"<+\"")),Arg("2")]),PP-Entry(Path1("GuardedLChoice"),[Arg("1"),FBOX(KW,S("\"<\"")),Arg("2"),FBOX(KW,S("\"+\"")),Arg("3")]),PP-Entry(Path1("Rec"),[FBOX(KW,S("\"rec\"")),Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Not"),[FBOX(KW,S("\"not\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(
 Path1("LGChoice"),[Arg("1"),FBOX(KW,S("\"<++\"")),Arg("2")]),PP-En
(Path1("Bagof"),[FBOX(KW,S("\"bagof\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Some"),[FBOX(KW,S("\"some\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("One"),[FBOX(KW,S("\"one\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("All"),[FBOX(KW,S("\"all\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Thread"),[FBOX(KW,S("\"thread\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("IntCong"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("RealCong"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("StrCong"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("OpCong"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"{\"")),Arg("3"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("OpCong",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Con")
 ,[Arg("1")]),PP-Entry(Path1("StrC"),[Arg("1")]),PP-Entry(Path1("Expl"),[Arg("1"),FBOX(KW,S("\"#\""))]),PP-Entry(Path1("Int"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("Int",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Real"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("Real",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Str"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("Str",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Op"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"{\"")),Arg("3"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("Op",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("Op",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("VarA"),[Arg("1"),Arg("2")]),PP-Entry(Path1("Var"),[Arg("1")]),PP-
 Entry(Path1("Wld"),[FBOX(KW,S("\"_\""))]),PP-Entry(Path1("Sorts"),
[],[H([],[FBOX(KW,S("\"sorts\""))]),Arg("1")])]),PP-Entry(Path("Sorts",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Constructors"),[V([],[H([],[FBOX(KW,S("\"constructors\""))]),Arg("1")])]),PP-Entry(Path("Constructors",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("SortVar"),[Arg("1")]),PP-Entry(Path1("SortNoArgs"),[Arg("1")]),PP-Entry(Path1("Sort"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("Sort",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("OpDecl"),[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path1("OpDeclQ"),[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path1("OpDeclInj"),[FBOX(KW,S("\":\"")),Arg("1")]),PP-Entry(Path1("ConstType"),[Arg("1")]),PP-Entry(Path1("FunType"),[Arg("1"),FBOX(KW,S("\"->\"")),Arg("2")]),PP-Entry(Path("FunType",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\"*\""))])])

Added: spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-Sugar-pretty.pp.af
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-Sugar-pretty.pp.af	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1 @@
+PP-Table([PP-Entry(Path1("Comment"),[H([],[Arg("1"),S("\"/*\""),Arg("2"),S("\"*/\"")])]),PP-Entry(Path("Comment",[selector("2","iter-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("Env"),[H([SOpt(HS,"0")],[S("\"{\""),H([],[Arg("1")]),S("\"}\"")])]),PP-Entry(Path("Env",[selector("1","iter-sep")]),[H([SOpt(HS,"0")],[Arg("1"),S("\",\"")])]),PP-Entry(Path1("Assign"),[H([],[Arg("1"),FBOX(KW,S("\":=\"")),Arg("2")])]),PP-Entry(Path1("--saved-entry--TupleCong"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path("--saved-entry--SwitchChoice",[selector("2","iter-star")]),[V([SOpt(IS,"2"),SOpt(VS,"0")],[H([SOpt(HS,"1")],[FBOX(KW,S("\"case\"")),Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")])]),PP-Entry(Path1("--saved-entry--SwitchChoice"),[V([],[V([SOpt(IS,"2"),SOpt(VS,"0")],[H([SOpt(HS,"1")],[FBOX(KW,S("\"switch\"")),Arg("1")]),Arg("2"),V([SOpt(IS,"2"),SOpt(VS,"0")],[H([SOpt(HS,"1")],[FBOX(KW,S("\"otherwise\"")),FBOX(KW,S("\":\""
 ))]),Arg("2")])]),FBOX(KW,S("\"end\""))])]),PP-Entry(Path("--saved-entry--SwitchChoiceNoOtherwise",[selector("2","iter-star")]),[V([SOpt(IS,"2"),SOpt(VS,"0")],[H([SOpt(HS,"1")],[FBOX(KW,S("\"case\"")),Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")])]),PP-Entry(Path1("--saved-entry--BA"),[H([SOpt(HS,"1")],[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\"")),Arg("1"),FBOX(KW,S("\">\""))]),Arg("2")])]),PP-Entry(Path1("--saved-entry--Con4"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"where\"")),Arg("2"),FBOX(KW,S("\"]\"")),FBOX(KW,S("\"(\"")),Arg("3"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("--saved-entry--Con3"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"where\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path1("--saved-entry--Con1"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"]\""))])]),PP-Entry(Path1("--saved-entry--Anno"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("--saved-entry--RootApp"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\"")),Arg("1"),FBOX(KW,S("\">
 \""))])]),PP-Entry(Path1("--saved-entry--OpDeclInj"),[R([],[S("\"\
,FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("1")])])]),PP-Entry(Path("OpQ",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("OpQ"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("OpDeclQ"),[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path1("NoAnnoList"),[Arg("1")]),PP-Entry(Path("AnnoList",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("AnnoList"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("SwitchChoice",[selector("2","iter-star"),selector("1","seq")]),[FBOX(KW,S("\"case\"")),Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path("SwitchChoiceNoOtherwise",[selector("2","iter-star"),selector("1","seq")]),[FBOX(KW,S("\"case\"")),Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path("TupleCong",[selector("2","iter-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("CongQ",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1
 ("CongQ"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("CharCong"),[Arg("1")]),PP-Entry(Path1("\"stratego-0\""),[Arg("1")]),PP-Entry(Path1("Definition"),[V([],[Arg("1")])]),PP-Entry(Path("Definition",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("ImportTerm"),[FBOX(KW,S("\"import-term\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Module"),[V([],[H([],[FBOX(KW,S("\"module\"")),Arg("1")]),Arg("2")])]),PP-Entry(Path("Module",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("Specification"),[V([SOpt(VS,"1"),SOpt(IS,"2")],[H([],[FBOX(KW,S("\"specification\""))]),Arg("1")])]),PP-Entry(Path("Specification",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Script"),[V([],[H([],[FBOX(KW,S("\"stratego\"")),FBOX(KW,S("\"script\""))]),Arg("1")])]),PP-Entry(Path("Script",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Command"),[Arg("1")]),PP-Entry(Path1("Dump"),[FBOX(KW,S("\":dump\"")),Arg("1")]),P
 P-Entry(Path1("Load"),[FBOX(KW,S("\":load\"")),Arg("1")]),PP-Entry
th1("Eval"),[FBOX(KW,S("\">\"")),Arg("1")]),PP-Entry(Path1("Imports"),[H([],[FBOX(KW,S("\"imports\"")),Arg("1")])]),PP-Entry(Path("Imports",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Rules"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"rules\""))]),V([SOpt(VS,"1")],[Arg("1")])])]),PP-Entry(Path("Rules",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Strategies"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"strategies\""))]),V([SOpt(VS,"1")],[Arg("1")])])]),PP-Entry(Path("Strategies",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Signature"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"signature\""))]),Arg("1")])]),PP-Entry(Path("Signature",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Overlays"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"overlays\""))]),Arg("1")])]),PP-Entry(Path("Overlays",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Sorts"),[V([],[H([],[FBOX(KW,S("\"sorts\""))]),Arg("1")])]),PP-Entry(Path("Sorts",[selector("1","iter-star")]),[A
 rg("1")]),PP-Entry(Path1("Constructors"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"constructors\""))]),A(AOPTIONS([AL([SOpt(HS,"1")]),AL([SOpt(HS,"1")]),AL([SOpt(HS,"1")])]),[],[Arg("1")])])]),PP-Entry(Path("Constructors",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("SortVar"),[Arg("1")]),PP-Entry(Path1("SortNoArgs"),[Arg("1")]),PP-Entry(Path1("Sort"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Sort",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SortList"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("SortList",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SortListTl"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("SortListTl",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SortTuple"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(P
 ath("SortTuple",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW
"\",\""))]),PP-Entry(Path1("Star"),[FBOX(KW,S("\"*\""))]),PP-Entry(Path1("StarStar"),[FBOX(KW,S("\"**\""))]),PP-Entry(Path1("OpDecl"),[R([],[Arg("1"),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("2")])])]),PP-Entry(Path1("OpDeclInj"),[R([],[S("\"\""),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("1")])])]),PP-Entry(Path1("ExtOpDecl"),[R([],[H([SOpt(HS,"1")],[FBOX(KW,S("\"external\"")),Arg("1")]),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("2")])])]),PP-Entry(Path1("ExtOpDeclQ"),[R([],[H([SOpt(HS,"1")],[FBOX(KW,S("\"external\"")),Arg("1")]),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("2")])])]),PP-Entry(Path1("ExtOpDeclInj"),[R([],[H([SOpt(HS,"1")],[FBOX(KW,S("\"external\""))]),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("1")])])]),PP-Entry(Path1("ConstType"),[Arg("1")]),PP-Entry(Path1("FunType"),[Arg("1"),FBOX(KW,S("\"->\"")),Arg("2")]),PP-Entry(Path("FunType",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\"*\""))]),PP-Entry(Path1("Var"),[Arg("1")]),PP-Entry(Path1("ListVar"),[Arg("1")]
 ),PP-Entry(Path1("SeqVar"),[H([SOpt(HS,"0")],[FBOX(KW,S("\":\"")),Arg("1")])]),PP-Entry(Path1("Int"),[Arg("1")]),PP-Entry(Path1("Real"),[Arg("1")]),PP-Entry(Path1("Str"),[Arg("1")]),PP-Entry(Path1("Char"),[Arg("1")]),PP-Entry(Path1("Wld"),[FBOX(KW,S("\"_\""))]),PP-Entry(Path1("BuildDefault"),[FBOX(KW,S("\"_\"")),Arg("1")]),PP-Entry(Path1("BuildDefaultPT"),[FBOX(KW,S("\"_\"")),Arg("1")]),PP-Entry(Path1("Inj"),[Arg("1")]),PP-Entry(Path1("Op"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Op",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("As"),[Arg("1"),FBOX(KW,S("\"@\"")),Arg("2")]),PP-Entry(Path1("Tuple"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"(\"")),H([SOpt(HS,"0")],[Arg("1")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Tuple",[selector("1","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("App"),[H([],[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\""))
 ,Arg("1"),FBOX(KW,S("\">\""))]),Arg("2")])]),PP-Entry(Path1("List"
FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("List",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ListTail"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("ListTail",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Explode"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"#\"")),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("RootApp"),[Arg("1")]),PP-Entry(Path1("Anno"),[Arg("1"),FBOX(KW,S("\"{^\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("AnnoCong"),[Arg("1"),Arg("2")]),PP-Entry(Path1("StrategyCurly"),[FBOX(KW,S("\"{\"")),Arg("1"),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("Con"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"]\"")),FBOX(KW,S("\"(\"")),Arg("3"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Con1"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path1("Con2"),[H([SOpt(HS,"0
 ")],[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"]\"")),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Con3"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"where\"")),Arg("3"),FBOX(KW,S("\"]\""))]),PP-Entry(Path1("Con4"),[Arg("1"),FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"where\"")),Arg("3"),FBOX(KW,S("\"]\"")),FBOX(KW,S("\"(\"")),Arg("4"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("RDefNoArgs"),[V([SOpt(IS,"2")],[H([],[Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")])]),PP-Entry(Path1("RDef"),[V([SOpt(IS,"2")],[H([],[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\":\""))]),Arg("3")])]),PP-Entry(Path("RDef",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("RDefT"),[V([SOpt(IS,"2")],[H([],[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2"),FBOX(KW,S("\"|\"")),Arg("3")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\":\""))]),Arg("4")])]),PP-Entry(Path("RDefT",[sele
 ctor("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S(
,\""))])]),PP-Entry(Path("RDefT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("RDecNoArgs"),[Arg("1")]),PP-Entry(Path1("RDec"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("RDec",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("RDecT"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2"),FBOX(KW,S("\"|\"")),Arg("3")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("RDecT",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("RDecT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("DynRuleIntersectFix"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"/\"")),Arg("1"),FBOX(KW,S("\"\\\\*\""))]),Arg("2")]),PP-Entry(Path("DynRuleIntersectFix",[selector("1","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path
 1("DynRuleUnionFix"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"\\\\\"")),Arg("1"),FBOX(KW,S("\"/*\""))]),Arg("2")]),PP-Entry(Path("DynRuleUnionFix",[selector("1","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("DynRuleIntersect"),[Arg("1"),H([SOpt(HS,"0")],[FBOX(KW,S("\"/\"")),Arg("2"),FBOX(KW,S("\"\\\\\""))]),Arg("3")]),PP-Entry(Path("DynRuleIntersect",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("DynRuleUnion"),[Arg("1"),H([SOpt(HS,"0")],[FBOX(KW,S("\"\\\\\"")),Arg("2"),FBOX(KW,S("\"/\""))]),Arg("3")]),PP-Entry(Path("DynRuleUnion",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("DynRuleIntersectUnion"),[Arg("1"),H([SOpt(HS,"0")],[FBOX(KW,S("\"/\"")),Arg("2"),FBOX(KW,S("\"\\\\\"")),Arg("3"),FBOX(KW,S("\"/\""))]),Arg("4")]),PP-Entry(Path("DynRuleIntersectUnion",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])
 ]),PP-Entry(Path("DynRuleIntersectUnion",[selector("3","iter-star-
")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("DynRuleIntersectUnionFix"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"/\"")),Arg("1"),FBOX(KW,S("\"\\\\\"")),Arg("2"),FBOX(KW,S("\"/*\""))]),Arg("3")]),PP-Entry(Path("DynRuleIntersectUnionFix",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("DynRuleIntersectUnionFix",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("RuleNames"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"~\"")),Arg("1")])]),PP-Entry(Path1("ScopeLabels"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"~\"")),Arg("1")])]),PP-Entry(Path1("SetDynRuleDepends"),[H([],[Arg("1"),FBOX(KW,S("\":\"")),Arg("2"),FBOX(KW,S("\"depends\"")),FBOX(KW,S("\"on\"")),Arg("3")])]),PP-Entry(Path1("SRDefNoArgs"),[Arg("1"),FBOX(KW,S("\"::\"")),Arg("2")]),PP-Entry(Path1("SRDef"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"::\"")),Arg("3")]),PP-Entry(Path("SRDef",[selector("2
 ","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SRDefT"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\"|\"")),Arg("3"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"::\"")),Arg("4")]),PP-Entry(Path("SRDefT",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("SRDefT",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("RuleNoCond"),[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\"->\"")),Arg("2")])]),PP-Entry(Path1("Rule"),[V([],[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\"->\"")),Arg("2")]),Arg("3")])]),PP-Entry(Path1("WhereClause"),[H([],[FBOX(KW,S("\"where\"")),Arg("1")])]),PP-Entry(Path1("WithClause"),[H([],[FBOX(KW,S("\"with\"")),Arg("1")])]),PP-Entry(Path("Rule",[selector("3","iter")]),[Arg("1")]),PP-Entry(Path1("StratRuleNoCond"),[Arg("1"),FBOX(KW,S("\"-->\"")),Arg("2")]),PP-Entry(Path1("StratRule"),[Arg("1"),FBOX(KW,S("\"-->\"")),Arg("2"),FBOX(KW,S("\"where\"")),Arg("3")]),PP-Entry(Path1("Fail"),[FBOX(KW,S("\"f
 ail\""))]),PP-Entry(Path1("Id"),[FBOX(KW,S("\"id\""))]),PP-Entry(P
1("SVar"),[Arg("1")]),PP-Entry(Path1("Let"),[V([],[H([],[FBOX(KW,S("\"let\"")),V([],[Arg("1")])]),H([],[FBOX(KW,S("\"in\"")),Arg("2")]),FBOX(KW,S("\"end\""))])]),PP-Entry(Path("Let",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path("Let",[selector("1","iter-star"),selector("1","alt")]),[Arg("1"),Arg("2")]),PP-Entry(Path1("Cong"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Cong",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("CallNoArgs"),[Arg("1")]),PP-Entry(Path1("Call"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Call",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("CallT"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2"),FBOX(KW,S("\"|\"")),Arg("3")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("CallT",[selector("2","iter-star-sep")]),[H(
 [SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("CallT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("Match"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"?\"")),Arg("1")])]),PP-Entry(Path1("Build"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"!\"")),Arg("1")])]),PP-Entry(Path1("ScopeDefault"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"{\"")),Arg("1"),FBOX(KW,S("\"}\""))])]),PP-Entry(Path1("Scope"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"{\"")),V([],[H([],[Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")]),FBOX(KW,S("\"}\""))])]),PP-Entry(Path("Scope",[selector("1","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("BA"),[Arg("1"),Arg("2")]),PP-Entry(Path1("AM"),[H([],[Arg("1"),FBOX(KW,S("\"=>\"")),Arg("2")])]),PP-Entry(Path1("AngleStrat"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\"")),Arg("1"),FBOX(KW,S("\">\""))])]),PP-Entry(Path1("ParenStrat"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1(
 "LRule"),[H([],[FBOX(KW,S("\"\\\\\"")),Arg("1"),FBOX(KW,S("\"\\\\\
)])]),PP-Entry(Path1("SRule"),[H([],[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Seq"),[V([],[Arg("1"),H([],[FBOX(KW,S("\";\"")),Arg("2")])])]),PP-Entry(Path1("Choice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"+\"")),Arg("2")])])]),PP-Entry(Path1("LChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"<+\"")),Arg("2")])])]),PP-Entry(Path1("RChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"+>\"")),Arg("2")])])]),PP-Entry(Path1("GChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"++\"")),Arg("2")])])]),PP-Entry(Path1("LGChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"<++\"")),Arg("2")])])]),PP-Entry(Path1("RGChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"++>\"")),Arg("2")])])]),PP-Entry(Path1("GuardedLChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"<\"")),Arg("2")]),H([],[FBOX(KW,S("\"+\"")),Arg("3")])])]),PP-Entry(Path1("CondChoice"),[V([SOpt(VS,"0")],[H([SOpt(HS,"1")],[FBOX(KW,S("\"if\"")),Arg("1")]),H([SOpt(HS,"1")],[FBOX(KW,S("\"then\"")),Arg("2")]),H([SOpt(HS,"1")],[FBOX(KW,S("\"else\""
 )),Arg("3")]),FBOX(KW,S("\"end\""))])]),PP-Entry(Path1("SwitchChoiceNoOtherwise"),[V([],[V([SOpt(IS,"2"),SOpt(VS,"0")],[H([SOpt(HS,"1")],[FBOX(KW,S("\"switch\"")),Arg("1")]),Arg("2")]),FBOX(KW,S("\"end\""))])]),PP-Entry(Path("SwitchChoiceNoOtherwise",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("SwitchChoice"),[FBOX(KW,S("\"switch\"")),Arg("1"),Arg("2"),FBOX(KW,S("\"otherwise\"")),FBOX(KW,S("\":\"")),Arg("3"),FBOX(KW,S("\"end\""))]),PP-Entry(Path("SwitchChoice",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("Rec"),[H([],[FBOX(KW,S("\"rec\"")),Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Not"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"not\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Where"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"where\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("With"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"with\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-E
 ntry(Path1("Test"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"test\"")),FBOX(
S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Bagof"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"bagof\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("PrimNoArgs"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"prim\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Prim"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"prim\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\",\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Prim",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("PrimT"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"prim\"")),FBOX(KW,S("\"(\"")),Arg("1"),H([],[FBOX(KW,S("\",\"")),Arg("2"),FBOX(KW,S("\"|\"")),Arg("3")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("PrimT",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("PrimT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("Some"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"some\"")),FBOX
 (KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("One"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"one\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("All"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"all\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Thread"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"thread\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("StrCong"),[Arg("1")]),PP-Entry(Path1("IntCong"),[Arg("1")]),PP-Entry(Path1("RealCong"),[Arg("1")]),PP-Entry(Path1("EmptyTupleCong"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"(\"")),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("TupleCong"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\",\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("TupleCong",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ModCongNoArgs"),[Arg("1")]),PP-Entry(Path1("ModCong"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("ModCong",[selector("2","iter-
 star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Mod")
rg("1"),FBOX(KW,S("\"^\"")),Arg("2")]),PP-Entry(Path1("ListCongNoTail"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("ListCongNoTail",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ListCong"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("ListCong",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ExplodeCong"),[Arg("1"),FBOX(KW,S("\"#\"")),Arg("2")]),PP-Entry(Path1("GenDynRules"),[V([],[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"rules\"")),FBOX(KW,S("\"(\""))]),Arg("1")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("GenDynRules",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("AddScopeLabel"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"+\"")),Arg("2")])]),PP-Entry(Path1("UndefineDynRule"),[V([SOpt(IS,"2")],[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\":-\""))]),Arg("2")])]),PP-Entry(Path1("SetDynRule"),[V([SOpt(IS,"2")],[H([SOpt(HS,"1")],[Arg("1"),FBOX(K
 W,S("\":\""))]),Arg("2")])]),PP-Entry(Path1("AddDynRule"),[V([SOpt(IS,"2")],[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\":+\""))]),Arg("2")])]),PP-Entry(Path1("SetDynRuleMatch"),[V([SOpt(IS,"2")],[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")])]),PP-Entry(Path1("LabeledDynRuleId"),[H([SOpt(HS,"0")],[Arg("1"),S("\".\""),Arg("2")])]),PP-Entry(Path1("AddLabelDynRuleId"),[H([SOpt(HS,"0")],[Arg("1"),S("\"+\""),Arg("2")])]),PP-Entry(Path1("DynRuleId"),[Arg("1")]),PP-Entry(Path1("LabeledDynRuleScopeId"),[H([SOpt(HS,"0")],[Arg("1"),S("\".\""),Arg("2")])]),PP-Entry(Path1("DynRuleScopeId"),[Arg("1")]),PP-Entry(Path1("OverrideDynamicRules"),[FBOX(KW,S("\"override\"")),FBOX(KW,S("\"rules\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path("OverrideDynamicRules",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("ExtendDynamicRules"),[V([],[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"extend\"")),FBOX(KW,S("\"rules\"")),FBOX(KW,S("\"(\""))]),Arg("1")]),FBOX(KW,S("\
 ")\""))])]),PP-Entry(Path("ExtendDynamicRules",[selector("1","iter
ar")]),[Arg("1")]),PP-Entry(Path1("ExtendOverrideDynamicRules"),[FBOX(KW,S("\"extend\"")),FBOX(KW,S("\"override\"")),FBOX(KW,S("\"rules\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path("ExtendOverrideDynamicRules",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("DynRuleScope"),[V([],[V([SOpt(IS,"3")],[H([SOpt(HS,"0")],[FBOX(KW,S("\"{|\"")),Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")]),FBOX(KW,S("\"|}\""))])]),PP-Entry(Path("DynRuleScope",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SDefNoArgs"),[V([SOpt(IS,"2")],[H([],[Arg("1"),FBOX(KW,S("\"=\""))]),Arg("2")])]),PP-Entry(Path1("SDef"),[V([SOpt(IS,"2")],[H([],[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\"=\""))]),Arg("3")])]),PP-Entry(Path("SDef",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("SDefT"),[V([SOpt(IS,"2")],[H([],[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S
 ("\"(\"")),H([],[Arg("2")])]),FBOX(KW,S("\"|\"")),H([SOpt(HS,"0")],[H([],[Arg("3")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\"=\""))]),Arg("4")])]),PP-Entry(Path("SDefT",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("SDefT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("Override"),[FBOX(KW,S("\"override\""))]),PP-Entry(Path1("Extend"),[FBOX(KW,S("\"extend\""))]),PP-Entry(Path1("Internal"),[FBOX(KW,S("\"internal\""))]),PP-Entry(Path1("ProceedNoArgs"),[FBOX(KW,S("\"proceed\""))]),PP-Entry(Path1("Proceed"),[FBOX(KW,S("\"proceed\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path("Proceed",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ProceedT"),[FBOX(KW,S("\"proceed\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("ProceedT",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S(
 "\",\""))]),PP-Entry(Path("ProceedT",[selector("1","iter-star-sep"
,[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("AnnoDef"),[H([],[Arg("1"),Arg("2")])]),PP-Entry(Path1("StringQuotation1"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"$[\"")),Arg("2"),FBOX(KW,S("\"]\""))])]),PP-Entry(Path1("StringQuotation2"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"${\"")),Arg("2"),FBOX(KW,S("\"}\""))])]),PP-Entry(Path1("StringQuotation3"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"$(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("StringQuotation4"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"$<\"")),Arg("2"),FBOX(KW,S("\">\""))])]),PP-Entry(Path("StringQuotation1",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path("StringQuotation2",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path("StringQuotation3",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path("StringQuotation4",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("StringEscape1"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"]\""))])]),PP-Entry(Path1("StringEscape2"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"{\""))
 ,Arg("2"),FBOX(KW,S("\"}\""))])]),PP-Entry(Path1("StringEscape3"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("StringEscape4"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\"")),Arg("2"),FBOX(KW,S("\">\""))])]),PP-Entry(Path1("QStr"),[Arg("1")]),PP-Entry(Path1("QDollar"),[Arg("1")]),PP-Entry(Path1("QBr"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"$\"")),Arg("1"),FBOX(KW,S("\"$\""))])]),PP-Entry(Path1("ExtSDefInl"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"external\"")),H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")])]),FBOX(KW,S("\"|\"")),H([SOpt(HS,"0")],[H([],[Arg("3")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\"=\""))]),Arg("4")])]),PP-Entry(Path("ExtSDefInl",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("ExtSDefInl",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ExtSDef"),[H([],[FBOX(KW,S("\"external\"")),H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")])]),FBOX(KW,S("
 \"|\"")),H([SOpt(HS,"0")],[H([],[Arg("3")]),FBOX(KW,S("\")\""))])]
,PP-Entry(Path("ExtSDef",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("ExtSDef",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("DefaultVarDec"),[Arg("1")]),PP-Entry(Path1("VarDec"),[H([],[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")])]),PP-Entry(Path1("OverlayNoArgs"),[Arg("1"),FBOX(KW,S("\"=\"")),Arg("2")]),PP-Entry(Path1("Overlay"),[V([SOpt(IS,"2")],[H([],[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"=\""))]),Arg("3")])]),PP-Entry(Path("Overlay",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("Mark"),[S("\"@mark@\"")])])

Added: spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-Sugar.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-Sugar.str	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,215 @@
+module Stratego-Sugar
+
+signature
+  constructors
+    RuleNames                : Term -> RuleNames
+                             : List(Id) -> RuleNames
+    RDecT                    : Id * List(Typedid) * List(Typedid) -> RuleDec
+    RDec                     : Id * List(Typedid) -> RuleDec
+    RDecNoArgs               : Id -> RuleDec
+    DynRuleScopeId           : Id -> DynRuleScopeId
+    LabeledDynRuleScopeId    : Id * Term -> DynRuleScopeId
+    DynRuleId                : RuleDec -> DynRuleId
+    AddLabelDynRuleId        : RuleDec * Term -> DynRuleId
+    LabeledDynRuleId         : RuleDec * Term -> DynRuleId
+    SetDynRuleDepends        : DynRuleId * Rule * Term -> DynRuleDef
+    DynRuleAssignAdd         : DynRuleId * Term -> DynRuleDef
+    DynRuleAssign            : DynRuleId * Term -> DynRuleDef
+    SetDynRuleMatch          : DynRuleId * Term -> DynRuleDef
+    AddDynRule               : DynRuleId * Rule -> DynRuleDef
+    SetDynRule               : DynRuleId * Rule -> DynRuleDef
+    UndefineDynRule          : DynRuleId * Term -> DynRuleDef
+    AddScopeLabel            : Id * Term -> DynRuleDef
+    ScopeLabels              : Term -> ScopeLabels
+                             : List(DynRuleScopeId) -> ScopeLabels
+    WithClause               : Strategy -> RuleCond
+    WhereClause              : Strategy -> RuleCond
+    Rule                     : Term * Term * List(RuleCond) -> Rule
+    Rule                     : Term * Term * Strategy -> Rule
+    RuleNoCond               : Term * Term -> Rule
+    RDefT                    : Id * List(Typedid) * List(Typedid) * Rule -> RuleDef
+    RDef                     : Id * List(Typedid) * Rule -> RuleDef
+    RDefNoArgs               : Id * Rule -> RuleDef
+    Overlay                  : Id * List(Id) * Term -> Overlay
+    OverlayNoArgs            : Id * Term -> Overlay
+    SwitchCase               : Strategy * Strategy -> SwitchCase
+    StrategyCurly            : Strategy -> StrategyCurly
+    ListVar                  : LId -> LID
+    ImportWildcard           : ModName -> ImportModName
+    Import                   : ModName -> ImportModName
+    Overlays                 : List(Overlay) -> Decl
+    Rules                    : List(Def) -> Decl
+    Signature                : List(Sdecl) -> Decl
+    Strategies               : List(Def) -> Decl
+    Imports                  : List(ImportModName) -> Decl
+    Specification            : List(Decl) -> Module
+    Module                   : ModName * List(Decl) -> Module
+                             : Strategy -> StrategyMid
+    ParenStrat               : Strategy -> StrategyParen
+    DefaultVarDec            : ID -> Typedid
+    VarDec                   : ID * Type -> Typedid
+    Internal                 : Anno
+    Override                 : Anno
+    Extend                   : Anno
+                             : String -> EmptyId
+    SDef                     : Id * List(Typedid) * Strategy -> StrategyDef
+    SDefNoArgs               : Id * Strategy -> StrategyDef
+    ExtSDef                  : EmptyId * List(Typedid) * List(Typedid) -> StrategyDef
+    ExtSDef                  : Id * List(Typedid) * List(Typedid) -> StrategyDef
+    ExtSDefInl               : Id * List(Typedid) * List(Typedid) * Strategy -> StrategyDef
+    SDefT                    : Id * List(Typedid) * List(Typedid) * Strategy -> StrategyDef
+    DynRuleIntersectUnion    : Strategy * RuleNames * RuleNames * Strategy -> Strategy
+    DynRuleUnion             : Strategy * RuleNames * Strategy -> Strategy
+    DynRuleIntersect         : Strategy * RuleNames * Strategy -> Strategy
+    DynRuleIntersectUnionFix : RuleNames * RuleNames * Strategy -> Strategy
+    DynRuleUnionFix          : RuleNames * Strategy -> Strategy
+    DynRuleIntersectFix      : RuleNames * Strategy -> Strategy
+    GenDynRules              : List(DynRuleDef) -> Strategy
+    DynRuleScope             : ScopeLabels * Strategy -> Strategy
+    Assign                   : Term * Term -> Strategy
+    AM                       : Strategy * Term -> Strategy
+    SwitchChoice             : Strategy * List(SwitchCase) * Strategy -> Strategy
+    SwitchChoiceNoOtherwise  : Strategy * List(SwitchCase) -> Strategy
+    IfThen                   : Strategy * Strategy -> Strategy
+    CondChoice               : Strategy * Strategy * Strategy -> Strategy
+    Proceed                  : List(Strategy) -> Strategy
+    RChoice                  : Strategy * Strategy -> Strategy
+    Choice                   : Strategy * Strategy -> Strategy
+    SRule                    : Rule -> Strategy
+    LRule                    : Rule -> Strategy
+    CallNoArgs               : SVar -> Strategy
+    ExplodeCong              : Strategy * StrategyParen -> Strategy
+    ListCong                 : List(Strategy) * Strategy -> Strategy
+    ListCongNoTail           : List(Strategy) -> Strategy
+    TupleCong                : Strategy * List(Strategy) -> Strategy
+    EmptyTupleCong           : Strategy
+    AnnoCong                 : Strategy * StrategyCurly -> Strategy
+    CongQ                    : String * List(Strategy) -> Strategy
+    CharCong                 : Char -> Strategy
+    RealCong                 : Real -> Strategy
+    IntCong                  : Int -> Strategy
+    StrCong                  : String -> Strategy
+    Prim                     : String * List(Term) -> Strategy
+    PrimNoArgs               : String -> Strategy
+    Test                     : Strategy -> Strategy
+    With                     : Strategy -> Strategy
+    Where                    : Strategy -> Strategy
+    Not                      : Strategy -> Strategy
+    Rec                      : Id * Strategy -> Strategy
+    LChoice                  : Strategy * Strategy -> Strategy
+    ScopeDefault             : Strategy -> Strategy
+    Call                     : SVar * List(Strategy) -> Strategy
+    ImportTerm               : ModName -> Strategy
+    All                      : Strategy -> Strategy
+    One                      : Strategy -> Strategy
+    Some                     : Strategy -> Strategy
+    PrimT                    : String * List(Strategy) * List(Term) -> Strategy
+    GuardedLChoice           : Strategy * StrategyMid * Strategy -> Strategy
+    Seq                      : Strategy * Strategy -> Strategy
+    Scope                    : List(ID) * Strategy -> Strategy
+    Build                    : Term -> Strategy
+    Match                    : Term -> Strategy
+    ProceedNoArgs            : Strategy
+    ProceedT                 : List(Strategy) * List(Term) -> Strategy
+    Id                       : Strategy
+    Fail                     : Strategy
+    CallDynamic              : Term * List(Strategy) * List(Term) -> Strategy
+    CallT                    : SVar * List(Strategy) * List(Term) -> Strategy
+    Let                      : List(Def) * Strategy -> Strategy
+    SVar                     : Id -> SVar
+                             : RuleDef -> Def
+    AnnoDef                  : List(Anno) * RuleDef -> Def
+    AnnoDef                  : List(Anno) * StrategyDef -> Def
+                             : StrategyDef -> Def
+                             : ConstType -> Type
+                             : FunType -> Type
+                             : Type -> RetType
+                             : ConstType -> ArgType
+    FunType                  : List(ArgType) * RetType -> FunType
+    ConstType                : Sort -> ConstType
+    ExtOpDeclInj             : Type -> Opdecl
+    ExtOpDeclQ               : String * Type -> Opdecl
+    ExtOpDecl                : Id * Type -> Opdecl
+    OpDeclInj                : Type -> Opdecl
+    OpDeclQ                  : String * Type -> Opdecl
+    OpDecl                   : Id * Type -> Opdecl
+    SortTuple                : List(Sort) -> Sort
+    SortListTl               : List(Sort) * Sort -> Sort
+    SortList                 : List(Sort) -> Sort
+    Sort                     : Id * List(Sort) -> Sort
+    SortNoArgs               : UCID -> Sort
+    SortVar                  : LCID -> Sort
+    Constructors             : List(Opdecl) -> Sdecl
+    Sorts                    : List(Sort) -> Sdecl
+    Wld                      : Wld
+    App                      : Strategy * Term -> Term
+    NoAnnoList               : PreTerm -> Term
+    AnnoList                 : PreTerm * List(Term) -> Term
+    BuildDefault             : Term -> Term
+    As                       : Var * Term -> Term
+    Anno                     : PreTerm * PreTerm -> Term
+                             : Wld -> Term
+                             : Var -> Term
+                             : LID -> ID
+                             : Id -> ID
+    Var                      : LID -> Var
+    Var                      : Id -> Var
+                             : String -> Char
+                             : String -> Padding
+    QBr                      : String -> StringQuotedPart4
+    QDollar                  : String -> StringQuotedPart4
+    QStr                     : String -> StringQuotedPart4
+    StringEscape4            : Padding * Term -> StringQuotedPart4
+    QBr                      : String -> StringQuotedPart3
+    QDollar                  : String -> StringQuotedPart3
+    QStr                     : String -> StringQuotedPart3
+    StringEscape3            : Padding * Term -> StringQuotedPart3
+    QBr                      : String -> StringQuotedPart2
+    QDollar                  : String -> StringQuotedPart2
+    QStr                     : String -> StringQuotedPart2
+    StringEscape2            : Padding * Term -> StringQuotedPart2
+    QBr                      : String -> StringQuotedPart1
+    QDollar                  : String -> StringQuotedPart1
+    QStr                     : String -> StringQuotedPart1
+    StringEscape1            : Padding * Term -> StringQuotedPart1
+    StringQuotation4         : Padding * List(StringQuotedPart4) -> StringQuotation
+    StringQuotation3         : Padding * List(StringQuotedPart3) -> StringQuotation
+    StringQuotation2         : Padding * List(StringQuotedPart2) -> StringQuotation
+    StringQuotation1         : Padding * List(StringQuotedPart1) -> StringQuotation
+    ListTail                 : List(Term) * Term -> PreTerm
+    List                     : List(Term) -> PreTerm
+    Tuple                    : List(Term) -> PreTerm
+    App                      : Strategy * Term -> PreTerm
+    Char                     : Char -> PreTerm
+    BuildDefaultPT           : PreTerm -> PreTerm
+    As                       : Var * PreTerm -> PreTerm
+    Explode                  : Term * Term -> PreTerm
+    OpQ                      : String * List(Term) -> PreTerm
+    Op                       : Id * List(Term) -> PreTerm
+    Str                      : String -> PreTerm
+    Real                     : Real -> PreTerm
+    Int                      : Int -> PreTerm
+                             : Wld -> PreTerm
+                             : Var -> PreTerm
+                             : StringQuotation -> PreTerm
+                             : String -> String
+                             : String -> Real
+                             : String -> Int
+                             : String -> UCID
+                             : String -> LCID
+                             : String -> LId
+                             : String -> Id
+                             : String -> ModName
+
+
+signature
+  constructors
+    Some : a -> Option(a)
+    None : Option(a)
+
+
+signature
+  constructors
+    Cons : a * List(a) -> List(a)
+    Nil  : List(a)
+    Conc : List(a) * List(a) -> List(a)

Added: spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-pretty.pp.af
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/lib/Stratego-pretty.pp.af	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1 @@
+PP-Table([PP-Entry(Path1("Comment"),[H([],[Arg("1"),S("\"/*\""),Arg("2"),S("\"*/\"")])]),PP-Entry(Path("Comment",[selector("2","iter-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("Env"),[H([SOpt(HS,"0")],[S("\"{\""),H([],[Arg("1")]),S("\"}\"")])]),PP-Entry(Path("Env",[selector("1","iter-sep")]),[H([SOpt(HS,"0")],[Arg("1"),S("\",\"")])]),PP-Entry(Path1("Assign"),[H([],[Arg("1"),FBOX(KW,S("\":=\"")),Arg("2")])]),PP-Entry(Path("OpQ",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("OpQ"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("OpDeclQ"),[Arg("1"),FBOX(KW,S("\":\"")),Arg("2")]),PP-Entry(Path1("NoAnnoList"),[Arg("1")]),PP-Entry(Path("AnnoList",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("AnnoList"),[Arg("1"),FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))]),PP-Entry(Path("TupleCong",[selector("2","iter-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Ent
 ry(Path("CongQ",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("CongQ"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("CharCong"),[Arg("1")]),PP-Entry(Path1("Definition"),[V([],[Arg("1")])]),PP-Entry(Path("Definition",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("ImportTerm"),[FBOX(KW,S("\"import-term\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path1("Module"),[V([],[H([],[FBOX(KW,S("\"module\"")),Arg("1")]),Arg("2")])]),PP-Entry(Path("Module",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("Specification"),[V([SOpt(VS,"1"),SOpt(IS,"2")],[H([],[FBOX(KW,S("\"specification\""))]),Arg("1")])]),PP-Entry(Path("Specification",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Imports"),[H([],[FBOX(KW,S("\"imports\"")),Arg("1")])]),PP-Entry(Path("Imports",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Import"),[Arg("1")]),PP-Entry(Path1("ImportWildcard"),[H([SOpt(H
 S,"0")],[Arg("1"),FBOX(KW,S("\"/\"")),FBOX(KW,S("\"*\""))])]),PP-E
y(Path1("Rules"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"rules\""))]),V([SOpt(VS,"1")],[Arg("1")])])]),PP-Entry(Path("Rules",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Strategies"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"strategies\""))]),V([SOpt(VS,"1")],[Arg("1")])])]),PP-Entry(Path("Strategies",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Signature"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"signature\""))]),Arg("1")])]),PP-Entry(Path("Signature",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Overlays"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"overlays\""))]),Arg("1")])]),PP-Entry(Path("Overlays",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Sorts"),[V([],[H([],[FBOX(KW,S("\"sorts\""))]),Arg("1")])]),PP-Entry(Path("Sorts",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("Constructors"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"constructors\""))]),A(AOPTIONS([AL([SOpt(HS,"1")]),AL([SOpt(HS,"1")]),AL([SOpt(HS,"1")])]),[],[Arg("1")])])])
 ,PP-Entry(Path("Constructors",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("SortVar"),[Arg("1")]),PP-Entry(Path1("SortNoArgs"),[Arg("1")]),PP-Entry(Path1("Sort"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Sort",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SortList"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("SortList",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SortListTl"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("SortListTl",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SortTuple"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path("SortTuple",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Star"),[FBOX(KW,S("\"*\""))]),PP-Entry(Path1("StarStar"),[FBOX(KW,S("\"**\""))]),PP-Entry(P
 ath1("OpDecl"),[R([],[Arg("1"),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")
Arg("2")])])]),PP-Entry(Path1("OpDeclInj"),[R([],[S("\"\""),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("1")])])]),PP-Entry(Path1("ExtOpDecl"),[R([],[H([SOpt(HS,"1")],[FBOX(KW,S("\"external\"")),Arg("1")]),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("2")])])]),PP-Entry(Path1("ExtOpDeclQ"),[R([],[H([SOpt(HS,"1")],[FBOX(KW,S("\"external\"")),Arg("1")]),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("2")])])]),PP-Entry(Path1("ExtOpDeclInj"),[R([],[H([SOpt(HS,"1")],[FBOX(KW,S("\"external\""))]),FBOX(KW,S("\":\"")),H([SOpt(HS,"1")],[Arg("1")])])]),PP-Entry(Path1("ConstType"),[Arg("1")]),PP-Entry(Path1("FunType"),[Arg("1"),FBOX(KW,S("\"->\"")),Arg("2")]),PP-Entry(Path("FunType",[selector("1","iter-sep")]),[Arg("1"),FBOX(KW,S("\"*\""))]),PP-Entry(Path1("Var"),[Arg("1")]),PP-Entry(Path1("ListVar"),[Arg("1")]),PP-Entry(Path1("SeqVar"),[H([SOpt(HS,"0")],[FBOX(KW,S("\":\"")),Arg("1")])]),PP-Entry(Path1("Int"),[Arg("1")]),PP-Entry(Path1("Real"),[Arg("1")]),PP-Entry(Path1("Str"),[Arg("1")]),PP-Ent
 ry(Path1("Char"),[Arg("1")]),PP-Entry(Path1("Wld"),[FBOX(KW,S("\"_\""))]),PP-Entry(Path1("BuildDefaultPT"),[FBOX(KW,S("\"_\"")),Arg("1")]),PP-Entry(Path1("BuildDefault"),[FBOX(KW,S("\"_\"")),Arg("1")]),PP-Entry(Path1("Inj"),[Arg("1")]),PP-Entry(Path1("Op"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Op",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("As"),[Arg("1"),FBOX(KW,S("\"@\"")),Arg("2")]),PP-Entry(Path1("Tuple"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"(\"")),H([SOpt(HS,"0")],[Arg("1")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Tuple",[selector("1","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("App"),[H([],[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\"")),Arg("1"),FBOX(KW,S("\">\""))]),Arg("2")])]),PP-Entry(Path1("List"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("List",[selector("1","iter-star-sep")]),[Arg("1"),FBOX
 (KW,S("\",\""))]),PP-Entry(Path1("ListTail"),[FBOX(KW,S("\"[\"")),
("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("ListTail",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("Explode"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"#\"")),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("RootApp"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\"")),Arg("1"),FBOX(KW,S("\">\""))])]),PP-Entry(Path1("Anno"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"{^\"")),Arg("2"),FBOX(KW,S("\"}\""))])]),PP-Entry(Path1("AnnoCong"),[Arg("1"),Arg("2")]),PP-Entry(Path1("StrategyCurly"),[FBOX(KW,S("\"{\"")),Arg("1"),FBOX(KW,S("\"}\""))]),PP-Entry(Path1("RDefNoArgs"),[V([SOpt(IS,"2")],[H([],[Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")])]),PP-Entry(Path1("RDef"),[V([SOpt(IS,"2")],[H([],[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\":\""))]),Arg("3")])]),PP-Entry(Path("RDef",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry
 (Path1("RDefT"),[V([SOpt(IS,"2")],[H([],[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2"),FBOX(KW,S("\"|\"")),Arg("3")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\":\""))]),Arg("4")])]),PP-Entry(Path("RDefT",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("RDefT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("RDecNoArgs"),[Arg("1")]),PP-Entry(Path1("RDec"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("RDec",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("RDecT"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2"),FBOX(KW,S("\"|\"")),Arg("3")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("RDecT",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("RDecT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Ar
 g("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("DynRuleIntersectFix
[H([SOpt(HS,"0")],[FBOX(KW,S("\"/\"")),Arg("1"),FBOX(KW,S("\"\\\\*\""))]),Arg("2")]),PP-Entry(Path("DynRuleIntersectFix",[selector("1","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("DynRuleUnionFix"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"\\\\\"")),Arg("1"),FBOX(KW,S("\"/*\""))]),Arg("2")]),PP-Entry(Path("DynRuleUnionFix",[selector("1","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("DynRuleIntersect"),[Arg("1"),H([SOpt(HS,"0")],[FBOX(KW,S("\"/\"")),Arg("2"),FBOX(KW,S("\"\\\\\""))]),Arg("3")]),PP-Entry(Path("DynRuleIntersect",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("DynRuleUnion"),[Arg("1"),H([SOpt(HS,"0")],[FBOX(KW,S("\"\\\\\"")),Arg("2"),FBOX(KW,S("\"/\""))]),Arg("3")]),PP-Entry(Path("DynRuleUnion",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("SRDefNoArgs"),[Arg("1"),FBOX(KW,S("\"::\"")),Arg
 ("2")]),PP-Entry(Path1("SRDef"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"::\"")),Arg("3")]),PP-Entry(Path("SRDef",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SRDefT"),[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\"|\"")),Arg("3"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"::\"")),Arg("4")]),PP-Entry(Path("SRDefT",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("SRDefT",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("RuleNoCond"),[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\"->\"")),Arg("2")])]),PP-Entry(Path1("Rule"),[V([],[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\"->\"")),Arg("2")]),Arg("3")])]),PP-Entry(Path1("WhereClause"),[H([],[FBOX(KW,S("\"where\"")),Arg("1")])]),PP-Entry(Path1("WithClause"),[H([],[FBOX(KW,S("\"with\"")),Arg("1")])]),PP-Entry(Path("Rule",[selector("3","iter")]),[Arg("1")]),PP-Entry(Path1("Fail"),[FBOX(KW,S("\"fail\""))]),PP-Entry(Path
 1("Id"),[FBOX(KW,S("\"id\""))]),PP-Entry(Path1("SVar"),[Arg("1")])
-Entry(Path1("Let"),[V([],[H([],[FBOX(KW,S("\"let\"")),V([],[Arg("1")])]),H([],[FBOX(KW,S("\"in\"")),Arg("2")]),FBOX(KW,S("\"end\""))])]),PP-Entry(Path("Let",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path("Let",[selector("1","iter-star"),selector("1","alt")]),[Arg("1"),Arg("2")]),PP-Entry(Path1("Cong"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Cong",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("CallNoArgs"),[Arg("1")]),PP-Entry(Path1("Call"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Call",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("CallT"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2"),FBOX(KW,S("\"|\"")),Arg("3")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("CallT",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1")
 ,FBOX(KW,S("\",\""))])]),PP-Entry(Path("CallT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("CallDynamic"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"call\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\"|\"")),Arg("3"),FBOX(KW,S("\")\""))])]),PP-Entry(Path("CallDynamic",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("CallDynamic",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("Match"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"?\"")),Arg("1")])]),PP-Entry(Path1("Build"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"!\"")),Arg("1")])]),PP-Entry(Path1("ScopeDefault"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"{\"")),Arg("1"),FBOX(KW,S("\"}\""))])]),PP-Entry(Path1("Scope"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"{\"")),V([],[H([],[Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")]),FBOX(KW,S("\"}\""))])]),PP-Entry(Path("Scope",[selector("1","iter-star-sep")
 ]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Pa
("BA"),[H([SOpt(HS,"1")],[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\"")),Arg("1"),FBOX(KW,S("\">\""))]),Arg("2")])]),PP-Entry(Path1("AM"),[H([],[Arg("1"),FBOX(KW,S("\"=>\"")),Arg("2")])]),PP-Entry(Path1("AngleStrat"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\"")),Arg("1"),FBOX(KW,S("\">\""))])]),PP-Entry(Path1("ParenStrat"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("LRule"),[H([],[FBOX(KW,S("\"\\\\\"")),Arg("1"),FBOX(KW,S("\"\\\\\""))])]),PP-Entry(Path1("SRule"),[H([],[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Seq"),[V([],[Arg("1"),H([],[FBOX(KW,S("\";\"")),Arg("2")])])]),PP-Entry(Path1("Choice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"+\"")),Arg("2")])])]),PP-Entry(Path1("LChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"<+\"")),Arg("2")])])]),PP-Entry(Path1("RChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"+>\"")),Arg("2")])])]),PP-Entry(Path1("GChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"++\"")),Arg("2")])])]),PP-Entry(Path1("LGChoi
 ce"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"<++\"")),Arg("2")])])]),PP-Entry(Path1("RGChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"++>\"")),Arg("2")])])]),PP-Entry(Path1("GuardedLChoice"),[V([],[Arg("1"),H([],[FBOX(KW,S("\"<\"")),Arg("2")]),H([],[FBOX(KW,S("\"+\"")),Arg("3")])])]),PP-Entry(Path1("CondChoice"),[V([SOpt(VS,"0")],[H([SOpt(HS,"1")],[FBOX(KW,S("\"if\"")),Arg("1")]),H([SOpt(HS,"1")],[FBOX(KW,S("\"then\"")),Arg("2")]),H([SOpt(HS,"1")],[FBOX(KW,S("\"else\"")),Arg("3")]),FBOX(KW,S("\"end\""))])]),PP-Entry(Path1("IfThen"),[V([SOpt(VS,"0")],[H([SOpt(HS,"1")],[FBOX(KW,S("\"if\"")),Arg("1")]),H([SOpt(HS,"1")],[FBOX(KW,S("\"then\"")),Arg("2")]),FBOX(KW,S("\"end\""))])]),PP-Entry(Path1("SwitchChoiceNoOtherwise"),[V([],[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"switch\"")),Arg("1")]),Arg("2")]),FBOX(KW,S("\"end\""))])]),PP-Entry(Path("SwitchChoiceNoOtherwise",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("SwitchChoice"),[V([],[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"switch\"")
 ),Arg("1")]),Arg("2"),H([],[FBOX(KW,S("\"otherwise\"")),FBOX(KW,S(
:\"")),Arg("3")])]),FBOX(KW,S("\"end\""))])]),PP-Entry(Path("SwitchChoice",[selector("2","iter-star")]),[Arg("1")]),PP-Entry(Path1("SwitchCase"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"case\"")),Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")])]),PP-Entry(Path1("Rec"),[H([],[FBOX(KW,S("\"rec\"")),Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Not"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"not\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Where"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"where\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("With"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"with\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Test"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"test\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Bagof"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"bagof\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("PrimNoArgs"),[H([SOpt(HS,"0")],[
 FBOX(KW,S("\"prim\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("Prim"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"prim\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\",\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path("Prim",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("PrimT"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"prim\"")),FBOX(KW,S("\"(\"")),Arg("1"),H([],[FBOX(KW,S("\",\"")),Arg("2"),FBOX(KW,S("\"|\"")),Arg("3")]),FBOX(KW,S("\")\""))])]),PP-Entry(Path("PrimT",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("PrimT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("Some"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"some\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("One"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"one\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("All"),[H([SOpt(HS,"0")],[FBOX(K
 W,S("\"all\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))])
PP-Entry(Path1("StrCong"),[Arg("1")]),PP-Entry(Path1("IntCong"),[Arg("1")]),PP-Entry(Path1("RealCong"),[Arg("1")]),PP-Entry(Path1("EmptyTupleCong"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"(\"")),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("TupleCong"),[FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\",\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("TupleCong",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ListCongNoTail"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("ListCongNoTail",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ListCong"),[FBOX(KW,S("\"[\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\"]\""))]),PP-Entry(Path("ListCong",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ExplodeCong"),[Arg("1"),FBOX(KW,S("\"#\"")),Arg("2")]),PP-Entry(Path1("GenDynRules"),[V([],[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"rules\"")),FBOX(KW,S("\"(\""))]),Arg("1")]),FBOX(KW,S("
 \")\""))])]),PP-Entry(Path("GenDynRules",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("AddScopeLabel"),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"+\"")),Arg("2")])]),PP-Entry(Path1("UndefineDynRule"),[V([SOpt(IS,"2")],[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\":-\""))]),Arg("2")])]),PP-Entry(Path1("SetDynRule"),[V([SOpt(IS,"2")],[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")])]),PP-Entry(Path1("AddDynRule"),[V([SOpt(IS,"2")],[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\":+\""))]),Arg("2")])]),PP-Entry(Path1("SetDynRuleMatch"),[V([SOpt(IS,"2")],[H([SOpt(HS,"1")],[Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")])]),PP-Entry(Path1("LabeledDynRuleId"),[H([SOpt(HS,"0")],[Arg("1"),S("\".\""),Arg("2")])]),PP-Entry(Path1("AddLabelDynRuleId"),[H([SOpt(HS,"0")],[Arg("1"),S("\"+\""),Arg("2")])]),PP-Entry(Path1("DynRuleId"),[Arg("1")]),PP-Entry(Path1("LabeledDynRuleScopeId"),[H([SOpt(HS,"0")],[Arg("1"),S("\".\""),Arg("2")])]),PP-Entry(Path1("DynRuleScopeId"),[Arg("1")]),PP-Entry(P
 ath1("DynRuleScope"),[V([],[V([SOpt(IS,"3")],[H([SOpt(HS,"0")],[FB
KW,S("\"{|\"")),Arg("1"),FBOX(KW,S("\":\""))]),Arg("2")]),FBOX(KW,S("\"|}\""))])]),PP-Entry(Path("DynRuleScope",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("SDefNoArgs"),[V([SOpt(IS,"2")],[H([],[Arg("1"),FBOX(KW,S("\"=\""))]),Arg("2")])]),PP-Entry(Path1("SDef"),[V([SOpt(IS,"2")],[H([],[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\"=\""))]),Arg("3")])]),PP-Entry(Path("SDef",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("SDefT"),[V([SOpt(IS,"2")],[H([],[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")])]),FBOX(KW,S("\"|\"")),H([SOpt(HS,"0")],[H([],[Arg("3")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\"=\""))]),Arg("4")])]),PP-Entry(Path("SDefT",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path("SDefT",[selector("3","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])])
 ,PP-Entry(Path1("Override"),[FBOX(KW,S("\"override\""))]),PP-Entry(Path1("Extend"),[FBOX(KW,S("\"extend\""))]),PP-Entry(Path1("Internal"),[FBOX(KW,S("\"internal\""))]),PP-Entry(Path1("ProceedNoArgs"),[FBOX(KW,S("\"proceed\""))]),PP-Entry(Path1("Proceed"),[FBOX(KW,S("\"proceed\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\")\""))]),PP-Entry(Path("Proceed",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ProceedT"),[FBOX(KW,S("\"proceed\"")),FBOX(KW,S("\"(\"")),Arg("1"),FBOX(KW,S("\"|\"")),Arg("2"),FBOX(KW,S("\")\""))]),PP-Entry(Path("ProceedT",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("ProceedT",[selector("1","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("AnnoDef"),[H([],[Arg("1"),Arg("2")])]),PP-Entry(Path1("StringQuotation1"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"$[\"")),Arg("2"),FBOX(KW,S("\"]\""))])]),PP-Entry(Path1("StringQuotation2"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"${\"")),Arg("2"),FBOX(K
 W,S("\"}\""))])]),PP-Entry(Path1("StringQuotation3"),[H([SOpt(HS,"
],[FBOX(KW,S("\"$(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("StringQuotation4"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"$<\"")),Arg("2"),FBOX(KW,S("\">\""))])]),PP-Entry(Path("StringQuotation1",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path("StringQuotation2",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path("StringQuotation3",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path("StringQuotation4",[selector("1","iter-star")]),[Arg("1")]),PP-Entry(Path1("StringEscape1"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"[\"")),Arg("2"),FBOX(KW,S("\"]\""))])]),PP-Entry(Path1("StringEscape2"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"{\"")),Arg("2"),FBOX(KW,S("\"}\""))])]),PP-Entry(Path1("StringEscape3"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\""))])]),PP-Entry(Path1("StringEscape4"),[H([SOpt(HS,"0")],[FBOX(KW,S("\"<\"")),Arg("2"),FBOX(KW,S("\">\""))])]),PP-Entry(Path1("QStr"),[Arg("1")]),PP-Entry(Path1("QDollar"),[Arg("1")]),PP-Entry(Path1("QBr"),[H([SOpt(HS,"0")],
 [FBOX(KW,S("\"$\"")),Arg("1"),FBOX(KW,S("\"$\""))])]),PP-Entry(Path1("ExtSDefInl"),[V([SOpt(IS,"2")],[H([],[FBOX(KW,S("\"external\"")),H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")])]),FBOX(KW,S("\"|\"")),H([SOpt(HS,"0")],[H([],[Arg("3")]),FBOX(KW,S("\")\""))]),FBOX(KW,S("\"=\""))]),Arg("4")])]),PP-Entry(Path("ExtSDefInl",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("ExtSDefInl",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("ExtSDef"),[H([],[FBOX(KW,S("\"external\"")),H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\"(\"")),H([],[Arg("2")])]),FBOX(KW,S("\"|\"")),H([SOpt(HS,"0")],[H([],[Arg("3")]),FBOX(KW,S("\")\""))])])]),PP-Entry(Path("ExtSDef",[selector("2","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path("ExtSDef",[selector("3","iter-star-sep")]),[Arg("1"),FBOX(KW,S("\",\""))]),PP-Entry(Path1("DefaultVarDec"),[Arg("1")]),PP-Entry(Path1("VarDec"),[H([],[Arg("1"),FBOX(KW,S("\":\"")),Ar
 g("2")])]),PP-Entry(Path1("OverlayNoArgs"),[Arg("1"),FBOX(KW,S("\"
")),Arg("2")]),PP-Entry(Path1("Overlay"),[V([SOpt(IS,"2")],[H([],[Arg("1"),FBOX(KW,S("\"(\"")),Arg("2"),FBOX(KW,S("\")\"")),FBOX(KW,S("\"=\""))]),Arg("3")])]),PP-Entry(Path("Overlay",[selector("2","iter-star-sep")]),[H([SOpt(HS,"0")],[Arg("1"),FBOX(KW,S("\",\""))])]),PP-Entry(Path1("Mark"),[S("\"@mark@\"")])])

Added: spoofax-imp/trunk/org.strategoxt.imp.types/lib/editor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/lib/editor-common.generated.str	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,254 @@
+module lib/editor-common.generated
+
+imports
+  libstratego-lib
+  libstratego-sglr
+  libstratego-gpp
+
+strategies
+
+  parse-file = parse-typedefinitionlanguage-file
+  parse-typedefinitionlanguage-file =
+    parse-file(
+      strsglr-perror, strsglr-report-parse-error
+    | <import-term(include/TypeDefinitionLanguage.tbl)>
+    )
+
+  parse-string = parse-typedefinitionlanguage-string
+  parse-typedefinitionlanguage-string =
+    parse-string(
+      strsglr-report-parse-error
+    | <import-term(include/TypeDefinitionLanguage.tbl)>
+    )
+  
+  parse-stream = parse-typedefinitionlanguage-stream
+  parse-typedefinitionlanguage-stream =
+    parse-stream(
+      strsglr-report-parse-error
+    | <import-term(include/TypeDefinitionLanguage.tbl)>
+    )
+
+  pp-typedefinitionlanguage-string =
+    ast2abox(|[<import-term(include/TypeDefinitionLanguage.generated.pp.af)>,
+               <import-term(include/TypeDefinitionLanguage.pp.af)>]);
+    box2text-string(|100)
+
+strategies
+  
+  /**
+   * Processes an import during semantic analysis.
+   * Ensures proper caching of files and prevents
+   * processing duplicate imports more than once.
+   *
+   * @param resolve-path  Resolves the filesystem path of this import
+   * @param parse-file    Parses a file (optionally removing definition bodies
+   *                      so only signatures are stored in the cache)
+   * @param record-declarations
+   *                      Performs semantic analysis on a tree
+   */
+  open-import(resolve-path, parse-file, record-declarations):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path       := <resolve-path> import;
+        cache-path := <import-cache-path> path;
+        if not(<IsImported> path) then
+          rules(
+            IsImported: path
+          );
+          ( <is-newer> (cache-path, path);
+            file := <ReadFromFile> cache-path
+          <+
+            file := <parse-file> path;
+            if <file-exists> path then
+              // Only cache if on filesystem (e.g., ignore libstratego-lib)
+              <WriteToBinaryFile> (cache-path, file)
+            end        
+          );
+          {| CurrentFile:
+            rules(CurrentFile := path);
+            <record-declarations> file
+          |}
+        end
+      end
+
+  open-wildcard-import(resolve-path, parse-file, record-declarations, is-source-file):
+    import -> import
+    where
+      if not(!import => COMPLETION(_)) then
+        path := <resolve-path> import;
+        readdir;
+        list-loop(
+          if is-source-file then
+            <open-import(id, parse-file, record-declarations)>
+              $[[path]/[<id>]]
+          <+
+            try(?one-failed)
+          end
+        );
+        not(!one-failed)
+      end
+  
+  import-cache-path:
+    full-path -> cache-path
+    with
+      project-path := <project-path>;
+      cache-dir    := <file-exists <+ mkdir> $[[project-path]/.cache];
+      full-path'   := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
+      cache-path   := $[[cache-dir]/[full-path'].sig]
+
+  project-path = prim("SSL_EXT_projectpath")
+  
+  plugin-path = prim("SSL_EXT_pluginpath")
+  
+  candidate-sorts = prim("SSL_EXT_candidatesorts")
+
+  is-newer:
+    (file1, file2) -> <id>
+    where
+      <gt> (<file-exists; modification-time> file1, <file-exists; modification-time> file2) 
+
+strategies
+  
+  editor-init =
+    // Ensure all dynamic rules are properly scoped
+    try(dr-scope-all-end);
+    dr-scope-all-start
+  
+  refresh-workspace-file:
+    path -> <prim("SSL_EXT_refreshresource", path)>
+  
+  string-starts-with-capital =
+    explode-string; Hd; is-upper
+
+strategies
+  
+  origin-term      = prim("SSL_EXT_origin_term", <id>)
+  origin-text      = prim("SSL_EXT_origin_text", <id>)
+  origin-location  = prim("SSL_EXT_origin_location", <id>)
+  origin-line      = origin-location => (<id>, _, _, _)
+  origin-column    = origin-location => (_, <id>, _, _)
+  origin-strip     = prim("SSL_EXT_origin_strip", <id>)
+  origin-equal(|t) = prim("SSL_EXT_origin_equal", <id>, t)
+  
+  origin-surrounding-comments =
+    prim("SSL_EXT_origin_surrounding_comments", "TypeDefinitionLanguage", <id>)
+    
+  origin-documentation-comment =
+    origin-surrounding-comments;
+    filter(string-as-chars(documentation-comment-chars));
+    concat-strings
+  
+  documentation-comment-chars:
+    ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
+  
+  origin-track-forced(s) =
+    !Some(<id>); all(s); ?Some(<id>)
+
+strategies
+
+  desugar-position(desugar|ast):
+    position -> position'
+    where
+      ast'  := <at-position(!<id>{MARKER()}|position)> ast;
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
+      position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
+   
+  at-position(s|position):
+    c#(t*) -> t'
+    where
+      !position => [i | position']
+    where
+      t' := c#(<at-index(at-position(s|position'))> (i, t*))
+
+  at-position(s|position):
+    t -> t'
+    where
+      !position => [];
+      t' := <s> t
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
+
+  term-at-position(|position):
+    t -> t'
+    where
+      at-position(?t'|position) 
+
+  parent-at-position(|position):
+    t -> t'
+    where
+      !position => [i, _];
+      t' := <subterm-at(|i)> t
+  
+  parent-at-position(|position):
+    t -> <parent-at-position(|position')> t'
+    where
+      !position => [i | position' @ [_, _ | _]];
+      t' := <subterm-at(|i)> t
+
+  subterm-at(|index):
+    _#(t*) -> <index(|<inc> index)> t*
+  
+signature constructors
+
+  COMPLETION : String -> Term
+  NOCONTEXT  : Term   -> Term
+  MARKER     : Term
+
+  // Below are copies of the signatures of the terms used in example
+  // trans/typedefinitionlanguage.str file. These definitions should also be automatically 
+  // generated in the imported include/TypeDefinitionLanguage.str module. However,
+  // to ensure that the example transformation doesn't break when the
+  // syntax is changed, we also hard-coded them here.
+          
+  Module   : ID * List(Entity)   -> Module
+  Entity   : ID * List(Property) -> Entity
+  Property : ID * Type           -> Property
+  Type     : ID                  -> Type
+
+strategies
+  
+  // Set markers for a given file. Use when checking files from a queued strategy.
+  // Current term: (ast-desugared, errors, warnings, notes) tuple
+  // ast: the root node of the file to set markers on 
+  set-markers(|ast) = prim("SSL_EXT_set_markers", ast)
+
+  // Indicate that one or more files need analysis. 
+  // Current term: ss a list of absolute file paths, or a single absolute file path to analyze
+  queue-analysis = 
+       (is-list; list-loop(queue-analysis))
+    <+ prim("SSL_EXT_queue_analysis")
+
+  // Set the total number of work units to complete. Can be called multiple times. 
+  // Current term: number of work units (int).
+  set-total-work-units = prim("SSL_EXT_set_total_work_units")
+  
+  // Complete one work unit and update progress monitors.
+  // Current term: ignored
+  complete-work-unit = prim("SSL_EXT_complete_work_unit")
+  
+  // Queue a strategy for background processing with a progress indicator.
+  // Current term: the term to pass to the background strategy
+  // s: the strategy, as string
+  // description: name of the task (will be shown in progress view)
+  queue-strategy(|s,description) = prim("SSL_EXT_queue_strategy", s, description)
+  
+  // Return the result of this strategy to indicate a non-completed (backgrounded) analysis.
+  // Editor services (hover, resolve) will be delayed until a complete analysis is performed. 
+  set-analysis-backgrounded = !"BACKGROUNDED"
+  

Added: spoofax-imp/trunk/org.strategoxt.imp.types/lib/refactor-common.generated.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/lib/refactor-common.generated.str	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,64 @@
+module lib/refactor-common.generated
+
+imports
+  libstratego-lib
+  lib/editor-common.generated
+  
+
+strategies //transformation
+
+/**
+ * Replaces elements in a list (once, starting from the right)
+ * @param match strategy for partial list
+ * @param new elements List(b)
+ * @type List(a) -> List(a,b)
+ */
+replace-sublist(match-sublist|new-elems): 
+  list -> <
+    at-suffix(match-sublist;!new-elems) <+
+    (
+      init; 
+      replace-sublist(match-sublist|new-elems);
+      at-end(![<last> list])
+    )
+  > list 
+
+/**
+ * Inserts an element at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list element 
+ * @type Term -> Term
+ */
+insert-elem(|pos, elem)=
+  insert-sublist(|pos, [elem])
+
+/**
+ * Inserts a list of elements at a given AST position
+ * @param List(Int), denoting an AST position
+ * @param inserted list elements 
+ * @type Term -> Term
+ */	
+insert-sublist(|pos, elems)=
+  at-position(
+    split-at(|<last> pos);
+    ?(prefix, suffix);
+    <concat>[prefix, elems, suffix]
+    |<init> pos
+  )
+
+
+strategies //user-input
+
+/**
+ * Opens an input dialog for one string value
+ * @type (String, String, String) -> String
+ */
+input-dialog:
+  (title, label, default-value) -> <prim("SSL_EXT_opendialog", title, label, default-value)>
+  
+
+strategies //pp-table
+	
+get-pp-table=
+  import-term(include/EntityRefactorings.generated.pp.af)
+	

Added: spoofax-imp/trunk/org.strategoxt.imp.types/plugin.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/plugin.xml	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<?eclipse version="3.0"?>
+
+<plugin>
+       <extension point="org.eclipse.imp.runtime.languageDescription">
+          <language extensions="td" description="TypeDefinitionLanguage" language="TypeDefinitionLanguage" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.types.TypeDefinitionLanguageValidator" validatorClass="org.strategoxt.imp.types.TypeDefinitionLanguageValidator"></language>
+       </extension>
+       <extension id="org.strategoxt.imp.types.parser" name="TypeDefinitionLanguage Parser" point="org.eclipse.imp.runtime.parser">
+          <parser class="org.strategoxt.imp.types.TypeDefinitionLanguageParseController" language="TypeDefinitionLanguage">
+          </parser>
+       </extension>    
+    </plugin>
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Constants.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Constants.sdf	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,16 @@
+module TDL-Constants
+exports
+  sorts Int Real String StrChar
+  lexical syntax
+    [\-]? [0-9]+ 		-> Int
+    [\-]? [0-9]+ [\.] [0-9]+ 	-> Real
+    "\"" StrChar* "\"" 		-> String
+    ~[\"\\] 			-> StrChar
+    [\\] [\"tnr\\] 		-> StrChar
+
+  sorts Char CharChar
+  lexical syntax
+    "'" CharChar "'"		-> Char
+    ~[\']			-> CharChar
+    [\\] [\'ntr\ ]		-> CharChar
+    Char		 	-> Id {reject}

Added: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Identifiers.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Identifiers.sdf	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,97 @@
+module TDL-Identifiers
+exports
+  sorts ModName ModNamePart
+  lexical syntax
+    {ModNamePart "/"}+ -> ModName
+    [a-zA-Z\.\_] [a-zA-Z0-9\'\.\-\_]* -> ModNamePart
+  lexical restrictions
+    ModName -/- [a-zA-Z0-9\'\.\-\_]
+  lexical syntax
+    "imports" 		-> ModName {reject}
+    "overlays" 		-> ModName {reject}
+    "rules" 		-> ModName {reject}
+    "signature" 	-> ModName {reject}
+    "strategies" 	-> ModName {reject}
+
+  sorts Id LId LCID UCID Wld
+  lexical syntax
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]*     -> Id
+    [a-zA-Z\_] [a-zA-Z0-9\'\-\_]* "*" -> LId
+    [\'] [a-z]+                       -> Id
+
+    [a-z] [a-zA-Z0-9\'\-\_]*  -> LCID
+    [A-Z] [a-zA-Z0-9\'\-\_]*  -> UCID
+
+  lexical restrictions
+    Id   -/- [a-zA-Z0-9\'\_\*]
+    Id   -/- [\-].~[\>]
+    LId  -/- [a-zA-Z0-9\'\-\_]
+    LCID -/- [a-zA-Z0-9\'\-\_]
+    UCID -/- [a-zA-Z0-9\'\-\_]
+
+  lexical syntax
+    "_"     -> Id {reject}
+    "'"     -> Id {reject}
+
+    Keyword -> Id   {reject}
+    Keyword -> LId  {reject}
+    Keyword -> LCID {reject}
+    Keyword -> UCID {reject}
+
+  lexical restrictions
+    "all"
+    "case" %% not reserved kw
+    "constructors"
+    "else" %% not reserved kw
+    "end" %% not reserved kw
+    "external" %% not reserved kw
+    "fail"
+    "id"
+    "if" %% not reserved kw
+    "in"
+    "imports" %% not reserved kw
+    "let"
+    "module"
+    "not"
+    "one"
+    "overlays"
+    "otherwise" %% not reserved kw
+    "prim"
+    "rec" %% not reserved kw
+    "rules"
+    "script"
+    "signature"
+    "some"
+    "sorts"
+    "strategies"
+    "stratego"
+    "switch" %% not reserved kw
+    "test"
+    "then" %% not reserved kw
+    "where"
+    "import-term"
+      -/- [a-zA-Z0-9\'\-\_]
+  
+  sorts Keyword
+  lexical syntax
+    "all"               -> Keyword
+    "constructors" 	-> Keyword
+    "fail" 		-> Keyword
+    "id" 		-> Keyword
+    "in" 		-> Keyword
+    "let" 		-> Keyword
+    "module" 		-> Keyword
+    "not" 		-> Keyword
+    "one" 		-> Keyword
+    "overlays" 		-> Keyword
+    "prim" 		-> Keyword
+    "rules" 		-> Keyword
+    "script" 		-> Keyword
+    "signature" 	-> Keyword
+    "some" 		-> Keyword
+    "sorts" 		-> Keyword
+    "strategies" 	-> Keyword
+    "stratego" 		-> Keyword
+    "test" 		-> Keyword
+    "where" 		-> Keyword
+    "import-term"	-> Keyword

Added: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Layout.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Layout.sdf	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,28 @@
+module TDL-Layout
+exports
+  sorts Ws ShortCom LongCom CommChar Asterisk Eof 
+  lexical syntax
+    [\t\ \n\r]			-> Ws
+
+    "//" ~[\n]* ([\n] | Eof)	-> ShortCom
+    "/*" CommChar* "*/"	-> LongCom
+				-> Eof  
+
+    ~[\*]     -> CommChar
+
+    "*"       -> Asterisk
+    Asterisk  -> CommChar
+
+  lexical restrictions
+    Asterisk -/- [\/]
+    Eof      -/- ~[]
+
+  lexical syntax
+    ShortCom 	-> LAYOUT
+    LongCom 	-> LAYOUT
+    Ws 		-> LAYOUT
+
+  context-free restrictions
+    LAYOUT? -/- [\ \t\n\r]
+    LAYOUT? -/- [\/].[\*]
+    LAYOUT? -/- [\/].[\/]

Added: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Signatures.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Signatures.sdf	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,36 @@
+module TDL-Signatures
+imports
+	TDL-Identifiers
+	TDL-Constants
+	TDL-StringQuotations
+	
+exports
+
+	sorts Sort
+	context-free syntax
+		
+		LCID					-> Sort {cons("SortVar")}
+		UCID					-> Sort {cons("SortNoArgs")}
+		Id "(" {Sort ","}* ")"	-> Sort {cons("Sort")}
+
+	sorts TypeDecl PPTerm
+	context-free syntax
+
+		Id     TypeParams PPTerm	-> TypeDecl {cons("TypeDecl")}
+		String TypeParams PPTerm	-> TypeDecl {cons("TypeDeclQ")}
+
+		String			-> PPTerm {cons("Str")}
+		
+	sorts TypeParams TypeParam 
+	context-free syntax
+		
+									-> TypeParams {cons("NoTypeParams")}
+		"(" {TypeParam ","}+  ")"	-> TypeParams {cons("TypeParams")}
+		Id ":" Sort					-> TypeParam {cons("TypeParam")}
+
+	%%%
+	 %% Restriction is required for the Sort* in Sdecl: List(a) is
+	 %% ambiguous.
+	 %%%
+	context-free restrictions
+		Sort -/- [\(]

Added: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-StringQuotations.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-StringQuotations.sdf	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,73 @@
+module TDL-StringQuotations
+
+imports TDL-Terms
+exports
+
+  sorts
+  	PPTerm
+    StringQuotation
+    StringQuotedPart1 StringQuotedChars1 DollarOpen1 DollarClose1 QuotedBracket1 Dollar1
+    StringQuotedPart2 StringQuotedChars2 DollarOpen2 DollarClose2 QuotedBracket2 Dollar2
+    StringQuotedPart3 StringQuotedChars3 DollarOpen3 DollarClose3 QuotedBracket3 Dollar3
+    StringQuotedPart4 StringQuotedChars4 DollarOpen4 DollarClose4 QuotedBracket4  Dollar4
+    Padding
+
+  context-free syntax
+
+    StringQuotation -> PPTerm
+
+  syntax
+
+    StringQuotation -> <PPTerm-CF>
+
+    "$" "[" Padding StringQuotedPart1*               "]"    -> StringQuotation {cons("StringQuotation1") }
+     Padding "[" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "]"    -> StringQuotedPart1 {cons("StringEscape1")}
+    <StringQuotedChars1-LEX>                                -> StringQuotedPart1 {cons("QStr")}
+    <Dollar1-LEX>                                           -> StringQuotedPart1 {cons("QDollar")}
+    "$" <QuotedBracket1-LEX> "$"                            -> StringQuotedPart1 {cons("QBr")}
+    ~[\[\]\$]+                                              -> <StringQuotedChars1-LEX>
+    [\[\]]                                                  -> <QuotedBracket1-LEX>
+    "$"                                                     -> <Dollar1-LEX>
+
+    "$" "{" Padding StringQuotedPart2*               "}"    -> StringQuotation {cons("StringQuotation2") }
+     Padding "{" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> "}"    -> StringQuotedPart2 {cons("StringEscape2")}
+    <StringQuotedChars2-LEX>                                -> StringQuotedPart2 {cons("QStr")}
+    <Dollar2-LEX>                                           -> StringQuotedPart2 {cons("QDollar")}
+    "$" <QuotedBracket2-LEX> "$"                            -> StringQuotedPart2 {cons("QBr")}
+    ~[\{\}\$]+                                              -> <StringQuotedChars2-LEX>
+    [\{\}]                                                  -> <QuotedBracket2-LEX>
+    "$"                                                     -> <Dollar2-LEX>
+
+    "$" "(" Padding StringQuotedPart3*              ")"     -> StringQuotation {cons("StringQuotation3") }
+    Padding "(" <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ")"     -> StringQuotedPart3 {cons("StringEscape3")}
+    <StringQuotedChars3-LEX>                                -> StringQuotedPart3 {cons("QStr")}
+    <Dollar3-LEX>                                           -> StringQuotedPart3 {cons("QDollar")}
+    "$" <QuotedBracket3-LEX> "$"                            -> StringQuotedPart3 {cons("QBr")}
+    ~[\(\)\$]+                                              -> <StringQuotedChars3-LEX>
+    [\(\)]                                                  -> <QuotedBracket3-LEX>
+    "$"                                                     -> <Dollar3-LEX>
+
+    "$" "<" Padding StringQuotedPart4*               ">"    -> StringQuotation {cons("StringQuotation4") }
+    Padding "<"  <LAYOUT?-CF> <Term-CF> <LAYOUT?-CF> ">"    -> StringQuotedPart4 {cons("StringEscape4")}
+    <StringQuotedChars4-LEX>                                -> StringQuotedPart4 {cons("QStr")}
+    <Dollar4-LEX>                                           -> StringQuotedPart4 {cons("QDollar")}
+    "$" <QuotedBracket4-LEX> "$"                            -> StringQuotedPart4 {cons("QBr")}
+    ~[\<\>\$]+                                              -> <StringQuotedChars4-LEX>
+    [\<\>]                                                  -> <QuotedBracket4-LEX>
+    "$"                                                     -> <Dollar4-LEX>
+   
+    %% Padding is a dummy lexical that will contain the indentation prefix of every quotation
+    <Padding-LEX>                                           -> Padding
+                                                            -> <Padding-LEX> {indentpadding}
+
+  lexical restrictions
+
+    StringQuotedChars1 -/- ~[\[\]\$]   
+    StringQuotedChars2 -/- ~[\{\}\$]    
+    StringQuotedChars3 -/- ~[\(\)\$]    
+    StringQuotedChars4 -/- ~[\<\>\$]
+    Dollar1            -/- [\[\]] . [\$]
+    Dollar2            -/- [\{\}] . [\$]
+    Dollar3            -/- [\(\)] . [\$]
+    Dollar4            -/- [\<\>] . [\$]
+

Added: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Terms.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TDL-Terms.sdf	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,52 @@
+module TDL-Terms
+
+imports
+	TDL-Constants
+	TDL-Identifiers
+	
+exports
+  sorts ID Var Wld
+  context-free syntax
+    Id 				-> Var  {cons("Var")}
+    Id				-> ID
+
+  sorts Term
+  context-free syntax
+    Var 			 -> PreTerm 
+    Var 			 -> Term {prefer}
+	"self"			 -> PreTerm {cons("Self")}
+	"self"			 -> Term {prefer, cons("Self")}
+	
+    "_" 			 -> Wld {cons("Wld")}
+    Wld 			 -> PreTerm 
+    Wld 			 -> Term {prefer}
+
+    Int 			 -> PreTerm {cons("Int")}
+    Real 			 -> PreTerm {cons("Real")}
+    String 			 -> PreTerm {cons("Str")}
+
+    Id "(" {Term ","}* ")" 	 	-> PreTerm {cons("Op")}
+    String "(" {Term ","}* ")"	-> PreTerm {cons("OpQ")}
+
+	PreTerm                     -> Term {cons("NoAnnoList")}
+
+  sorts LID
+  context-free syntax
+    LId 			-> LID  {cons("ListVar")}
+    LID				-> Var  {cons("Var")}
+    LID				-> ID
+
+  context-free syntax
+    Char 			 -> PreTerm {cons("Char")}
+
+    %%"(" {Term ","}* ")" 	 -> PreTerm {cons("Tuple")}
+    "[" {Term ","}* "]" 	 -> PreTerm {cons("List")}
+    "[" {Term ","}* "|" Term "]" -> PreTerm {cons("ListTail")}
+
+  lexical syntax
+  	
+  	"self" -> Keyword
+	
+  context-free restrictions
+    Wld -/- [a-zA-Z0-9\'\-\_]
+

Added: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.generated.pp	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,60 @@
+[
+   SortVar                  -- _1,
+   SortNoArgs               -- _1,
+   Sort                     -- _1 KW["("] _2 KW[")"],
+   Sort.2:iter-star-sep     -- _1 KW[","],
+   TypeDecl                 -- _1 _2 _3,
+   TypeDeclQ                -- _1 _2 _3,
+   Str                      -- _1,
+   NoTypeParams             -- ,
+   TypeParams               -- KW["("] _1 KW[")"],
+   TypeParams.1:iter-sep    -- _1 KW[","],
+   TypeParam                -- _1 KW[":"] _2,
+   Var                      -- _1,
+   Self                     -- KW["self"],
+   Self                     -- KW["self"],
+   Wld                      -- KW["_"],
+   Int                      -- _1,
+   Real                     -- _1,
+   Str                      -- _1,
+   Op                       -- _1 KW["("] _2 KW[")"],
+   Op.2:iter-star-sep       -- _1 KW[","],
+   OpQ                      -- _1 KW["("] _2 KW[")"],
+   OpQ.2:iter-star-sep      -- _1 KW[","],
+   NoAnnoList               -- _1,
+   ListVar                  -- _1,
+   Var                      -- _1,
+   Char                     -- _1,
+   List                     -- KW["["] _1 KW["]"],
+   List.1:iter-star-sep     -- _1 KW[","],
+   ListTail                 -- KW["["] _1 KW["|"] _2 KW["]"],
+   ListTail.1:iter-star-sep -- _1 KW[","],
+   TypeDef                  -- KW["module"] _1 _2,
+   TypeDef.2:iter-star      -- _1,
+   SigPart                  -- V  [H  [KW["signatures"]] _1],
+   SigPart.1:iter-star      -- _1,
+   TypePart                 -- V  [H  [KW["types"]] _1],
+   TypePart.1:iter-star     -- _1,
+   RulePart                 -- V  [H  [KW["rules"]] _1],
+   RulePart.1:iter-star     -- _1,
+   Import                   -- _1,
+   DefaultRelation          -- KW["<:"],
+   TypeRule                 -- _1 _2 _3 KW[":"] _4,
+   TypeRule.1:iter-sep      -- _1 KW["&"],
+   RelationRule             -- _1 _2 _3 _4 _5,
+   RelationRule.1:iter-sep  -- _1 KW["&"],
+   CheckRule                -- _1 _2 _3,
+   CheckRule.1:iter-sep     -- _1 KW["&"],
+   TypeCheck                -- _1 KW[":"] _2,
+   Resolve                  -- KW["@"] _1 KW["="] _2,
+   ResolveCheck             -- KW["@"] _1 KW[":"] _2,
+   Relation                 -- _1 _2 _3,
+   Map                      -- KW["map"] _1,
+   Strategy                 -- _1,
+   SVar                     -- _1,
+   Appl                     -- KW["<"] _1 KW[">"] _2,
+   AM                       -- _1 KW["=>"] _2,
+   Error                    -- _1 _2,
+   Type                     -- _1 KW["->"] _2,
+   Type.1:iter-sep          -- _1 KW["*"]
+]
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.pp	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,2 @@
+%% Pretty printing table (see also TypeDefinitionLanguage.generated.pp)
+[]

Added: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.sdf	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,82 @@
+module TypeDefinitionLanguage
+
+imports TDL-Terms TDL-Signatures TDL-Layout
+
+exports
+	
+	lexical syntax
+		
+		"===" "="* -> SEP
+		"___" "_"* -> SEP
+		"---" "-"* -> SEP
+		
+		%%SEP -> LAYOUT
+		
+	lexical restrictions
+		
+		SEP -/- [\=\_\-]
+		
+	context-free start-symbols
+		Start
+
+	context-free syntax
+		
+		"module" ModName Part* -> Start {cons("TypeDef")}
+
+	sorts Decl 
+	
+	context-free syntax
+		
+		"signatures" ImportModName*	-> Part {cons("SigPart")}
+  		"types" TypeDecl* 			-> Part {cons("TypePart")}
+		"rules" Rule* 				-> Part {cons("RulePart")}
+
+	sorts ImportModName
+
+	context-free syntax
+
+		ModName	-> ImportModName {cons("Import")}
+ 
+ 		"<:"	-> SimpleRelSymbol {cons("DefaultRelation")}
+ 		
+ 		SimpleRelSymbol -> RelSymbol
+ 		
+ 	syntax
+		
+		<ModName-CF> "/" "-" 	-> <ImportModName-CF> {cons("ImportWildcard")}
+			
+		"<" <Id-CF> ":" 			-> <SimpleRelSymbol-CF> {cons("NamedRelation")}
+		<SimpleRelSymbol-CF> "*" 	-> <RelSymbol-CF> {cons("TransitiveClosure")}
+			
+	context-free syntax
+			
+		Term ":" Type	 										-> Rule {ast("TypeRule([], \"---\", <1>, <2>)")}
+		{AnnotatedPremise "&"}+ SEP Term ":" Type 				-> Rule {cons("TypeRule")}
+		Type SimpleRelSymbol Type	 							-> Rule {ast("RelationRule([], \"---\", <1>, <2>, <3>)")}
+		{AnnotatedPremise "&"}+ SEP Type SimpleRelSymbol Type	-> Rule {cons("RelationRule")}
+		{AnnotatedPremise "&"}+ SEP Term 						-> Rule {cons("CheckRule")}
+
+		Term ":" Type 		-> SimplePremise {cons("TypeCheck")}
+		"@" Term "=" Term	-> SimplePremise {cons("Resolve")}
+		"@" Term ":" Type 	-> SimplePremise {cons("ResolveCheck")}
+		Type RelSymbol Type -> SimplePremise {cons("Relation")}
+		
+		SimplePremise		-> Premise
+		"map" SimplePremise	-> Premise {cons("Map")}
+		Strategy			-> Premise {cons("Strategy")}
+		
+		Id 					-> SVar {cons("SVar")}
+		"<" SVar ">" Term	-> Appl {cons("Appl")}
+		
+		Appl				-> Strategy
+		Appl "=>" Term		-> Strategy {cons("AM")} 
+
+		Premise			-> AnnotatedPremise
+		Premise PPTerm	-> AnnotatedPremise {cons("Error")}
+						
+		Term 					-> Type {ast("Type([], <1>)")}
+		{Term "*"}+ "->" Term 	-> Type {cons("Type")}
+
+	context-free syntax %% syntactic sugar
+		
+		
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/trans/check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/trans/check.str	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,19 @@
+module check
+
+imports
+	libstratego-lib
+	include/TypeDefinitionLanguage
+	lib/editor-common.generated
+
+rules
+
+	analyse: t -> t'
+	where
+		tcs := <collect-all(?TypeDecl(<id>, NoTypeParams(), _))> t ;
+		t'  := <alltd(replace-var(|tcs))> t
+
+	replace-var(|cs): Var(c) -> Op(c, [])
+	where
+		<elem> (c, cs) 
+  
+  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-analysis.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-analysis.str	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,118 @@
+module gen-analysis
+
+imports
+
+	include/TypeDefinitionLanguage
+	lib/Stratego-Sugar
+
+rules // module
+
+	gen-analysis: 
+		TypeDef(mname, td-parts) -> Module(mname', [import|str-parts])
+		where
+			mname' := <strcat> (mname, "/gen-analysis") ;
+			import := Imports([Import("lib/typecheck")]) ;
+			str-parts := <filter(gen-analysis)> td-parts
+
+rules // imports
+    
+    gen-analysis: 
+    	SigPart(import*) -> Imports(import*)
+    
+rules // type declarations
+	
+    gen-analysis: 
+    	TypePart(decls) -> Signature([Constructors(<map(gen-analysis)> decls)])
+    
+    gen-analysis: 
+    	TypeDecl(name, params, _) -> OpDecl(name, <gen-analysis> params)
+    	
+    gen-analysis: 
+    	NoTypeParams() -> ConstType(SortNoArgs("TYPE"))
+    
+    gen-analysis: 
+    	TypeParams(params) -> FunType([<map(gen-analysis)> params], ConstType(SortNoArgs("TYPE")))
+    
+    gen-analysis: 
+    	TypeParam(_, sort) -> ConstType(sort)
+    
+rules // typing rules
+	
+	gen-analysis: 
+		RulePart(td-rules) -> Rules(str-rules) 
+		where 
+			str-rules := <filter(gen-analysis)> td-rules ;
+			<Hd> str-rules
+	
+	gen-analysis: 
+		TypeRule(conditions, _, term, type) -> RDefNoArgs("type-of", rule)
+		where
+			clauses := <map(gen-analysis-clause)> conditions ;
+			rule := <gen-str-rule(|term, <gen-analysis> type)> clauses
+	
+	gen-analysis: 
+		RelationRule(conditions, _, type1, op, type2) -> SDefNoArgs("init-relations", Seq(GenDynRules([AddDynRule(DynRuleId(RDecNoArgs("type-rel")), rule)]), Fail())) 
+		where
+			clauses := <filter(gen-analysis-clause)> conditions ;
+			rule := <gen-str-rule-help(|Tuple([Str(<gen-analysis> op), As(Var("self"), <gen-analysis> type1)]), <gen-analysis> type2)> clauses
+	
+	gen-analysis: DefaultRelation() -> "default-rel"
+	gen-analysis: NamedRelation(name) -> name
+	
+	gen-str-rule(|lhs, rhs) = gen-str-rule-help(|As(Var("self"), lhs), rhs)
+	
+	gen-str-rule-help(|lhs, rhs): 
+		[] -> RuleNoCond(lhs, rhs)
+	 
+	gen-str-rule-help(|lhs, rhs): 
+		clauses@[_|_] -> Rule(lhs, rhs,  clauses)
+	
+rules // premises
+	
+	gen-analysis-clause: 
+		Error(cond, _) -> <gen-analysis-clause> cond
+	
+	gen-analysis-clause: Strategy(s) -> WhereClause(s)
+	
+	gen-analysis-clause: premise -> WhereClause(AM(App(str, l), r))
+		where
+			<gen-analysis> premise => (str, lhs, rhs) ;
+			<try(gen-analysis)> lhs => l ;
+			<try(gen-analysis)> rhs => r 
+	
+	gen-analysis-clause: premise -> WhereClause(App(str, tuple))
+		where
+			<gen-analysis> premise => (str, tuple)
+			
+	gen-analysis: 
+		Map(c) -> (Call(SVar("map"), [str]), lhs, rhs)
+		where
+			<gen-analysis> c => (str, lhs, rhs)
+	
+	gen-analysis: 
+		Map(c) -> (Call(SVar("zip"), [str]), lhs)
+		where
+			<gen-analysis> c => (str, lhs)
+			
+	gen-analysis: 
+		TypeCheck(term, type) -> (SVar("type-of"), term, type)
+	
+	gen-analysis: 
+		Resolve(term1, term2) ->  (SVar("resolve"), term1, term2) 
+	
+	gen-analysis: 
+		ResolveCheck(term, type) ->  (Seq(SVar("resolve"), SVar("type-of")), term, type) 
+	
+	gen-analysis:
+		Relation(type1, rel, type2) -> (CallT(SVar("type-rel"), [], [Str(<gen-analysis> rel)]), Tuple([<try(gen-analysis)> type1, <try(gen-analysis)> type2]))
+
+	gen-analysis:
+		Relation(type1, TransitiveClosure(rel), type2) -> (CallT(SVar("trans-type-rel"), [], [Str(<gen-analysis> rel)]), Tuple([<try(gen-analysis)> type1, <try(gen-analysis)> type2]))
+
+rules // self & types
+	
+	gen-analysis: Self() -> Var("self")
+		
+	gen-analysis: Type([], type) -> type
+	gen-analysis: Type([param at Var(_)], type) -> Op("FUN_TYPE", [param, type])
+	gen-analysis: Type(params@[_,_|_], type) -> Op("FUN_TYPE", [List(params), type])

Added: spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-check.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-check.str	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,107 @@
+module gen-check
+
+imports
+
+	include/TypeDefinitionLanguage
+	lib/Stratego-Sugar
+
+	gen-analysis
+	
+rules // module
+
+	gen-check: 
+		TypeDef(mname, td-parts) -> Module(<strcat> (mname, "/gen-check"), [import|str-parts])
+		where
+			import := Imports([Import("lib/typecheck"), Import(<strcat> (mname, "/gen-analysis"))]) ;
+			str-parts := <filter(gen-check)> td-parts
+
+rules // imports
+    
+    gen-check: 
+    	SigPart(import*) -> Imports(import*)
+    
+rules // type declarations
+	
+    gen-check: 
+    	TypePart(decls) -> Rules(<filter(gen-check)> decls)
+    
+    gen-check: 
+    	TypeDecl(name, params, string) -> RDefNoArgs("type-to-string", RuleNoCond(Op(name, <gen-check> params), string))
+    	
+    gen-check: 
+    	NoTypeParams() -> []
+    
+    gen-check: 
+    	TypeParams(params) -> <map(gen-check)> params
+    
+    gen-check: 
+    	TypeParam(name, _) -> Var(name)
+    
+rules // typing rules
+	
+	gen-check: 
+		RulePart(td-rules) -> Rules(str-rules) 
+		where 
+			str-rules := <filter(gen-check)> td-rules ;
+			<Hd> str-rules
+	
+	gen-check: 
+		TypeRule(conditions, sep, term, type) -> <gen-check> CheckRule(conditions, sep, term)
+		
+	gen-check: 
+		CheckRule(conditions, _, term) -> RDefNoArgs("type-check", rule)
+		where
+			checks := <filter(gen-check-error <+ gen-check-default)> conditions ;
+			<Hd> checks ;
+			str := <foldr(!Id(), gen-str-seq)> checks ;
+			rule := <gen-str-rule(|term, App(str, List([])))> []
+			
+	gen-str-seq: (s1, Id()) -> s1
+	gen-str-seq: (s1, s2) -> Seq(s1, s2) where not(<eq> (s2, Id()))
+	
+rules // premises
+	
+	gen-check-error: 
+		Error(p, msg) -> CallT(SVar(name), [Build(msg)|<map(!Match(<try(gen-analysis)>))> matches], <map(try(gen-analysis))> terms)
+		where
+			<gen-check> p => (name, matches, terms)
+			
+	gen-check-default: 
+		p -> CallT(SVar(name), <map(!Match(<try(gen-analysis)>))> matches, <map(try(gen-analysis))> terms)
+		where
+			<gen-check> p => (name, matches, terms)
+			
+	gen-check: Map(p) -> <gen-check ; (app(|"s"), id, id)> p
+		
+	app(|s2): s1 -> <strcat> (s1, s2)
+	
+	gen-check:	 
+		TypeCheck(term, type) -> ("check-type", checks, terms)
+		where
+			(checks, terms) := <needs-check> (term, type)
+	
+	gen-check: 
+		Resolve(term1, term2) -> ("check-resolve", checks, terms)
+		where
+			(checks, terms) := <needs-check> (term1, term2)
+			
+	gen-check: 
+		ResolveCheck(term, type) -> ("check-resolve-type", checks, terms)
+		where
+			(checks, terms) := <needs-check> (term, type)
+			
+	gen-check: 
+		Relation(type1, rel, type2) -> ("check-type-rel", [], [Str(<gen-analysis> rel), type1, type2])
+	
+	gen-check: 
+		Relation(type1, TransitiveClosure(rel), type2) -> ("check-trans-type-rel", [], [Str(<gen-analysis> rel), type1, type2])
+	
+	needs-check: (term1, term2) -> (checks, terms)
+	where
+		if fail then 
+			checks := []; 
+			terms  := [term1, term2] 
+		else 
+			checks := [term2]; 
+			terms  := [term1] 
+		end
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.types/trans/prettyprint.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/trans/prettyprint.str	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,10 @@
+module prettyprint
+
+imports
+  include/TypeDefinitionLanguage
+
+strategies //custom strategy for code formatting
+  	
+prettyprint=
+  where(is-string <+ is-num)
+

Added: spoofax-imp/trunk/org.strategoxt.imp.types/trans/refactorings.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/trans/refactorings.str	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,48 @@
+module refactorings
+
+imports
+  lib/refactor-common.generated
+  include/TypeDefinitionLanguage
+  lib/editor-common.generated  
+
+strategies //renaming
+ 
+rename-entity:
+  (selected, position, ast, path, project-path) -> (ast, new-ast)
+  with  	
+    old-name:=<get-selected-name(|position)> ast;
+    new-name:=<input-dialog>("rename", "Rename Entity:", ""); 
+    new-ast:=<topdown(try(rename-type(|old-name, new-name)))> ast
+
+get-selected-name(|position):
+  ast -> name
+    where
+	  <term-at-position(|position); ?Type(name)> ast <+
+	  <parent-at-position(|position); ?Entity(name, _)> ast 
+
+rename-type(|old-name, new-name):
+  Entity(old-name, y) -> Entity(new-name, y)
+
+rename-type(|old-name, new-name):
+  Type(old-name) -> Type(new-name)
+	
+  
+strategies //extraction
+
+extract-entity:
+  (selected, position, ast, path, project-path) -> (ast, new-ast)
+  with
+    if <is-list> selected then
+  	  properties:= selected;
+  	  insert-position:=<init; at-last(map(inc))> position
+    else //single property selected
+  	  properties:=<![selected]>;
+  	  insert-position:=<init; init; at-last(map(inc))> position
+    end;
+    entity-name:=<input-dialog>("extract", "Extract Entity:", "<Entity Name>");
+    prop-name:=<lower-case> entity-name;
+    new-ast:=<
+      alltd(replace-sublist(?properties|[Property(prop-name, entity-name)]));
+      insert-elem(|insert-position, Entity(entity-name, properties))
+    > ast	
+

Added: spoofax-imp/trunk/org.strategoxt.imp.types/trans/typedefinitionlanguage.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/trans/typedefinitionlanguage.str	Fri Mar 11 22:48:15 2011	(r22378)
@@ -0,0 +1,52 @@
+module typedefinitionlanguage
+
+imports
+  libstratego-lib
+  libstratego-gpp
+  libstratego-aterm
+  libstrc
+  include/TypeDefinitionLanguage
+  lib/editor-common.generated
+  check
+  gen-analysis
+  gen-check
+  prettyprint
+  refactorings
+
+rules // Main editor interface (defined by editor/TypeDefinitionLanguage-Builders and -References.esv)
+  
+  editor-analyse:
+    (ast, path, project-path) -> (ast', errors, warnings, notes)
+    with
+      editor-init;
+      ast' := <analyse> ast;
+      errors   := [];//<collect-all(fail, conc)> ast';
+      warnings := [];//<collect-all(fail, conc)> ast';
+      notes    := []//<collect-all(fail, conc)> ast'
+  
+  generate-analysis = generate-str(gen-analysis|"/gen-analysis")
+  
+  generate-check = generate-str(gen-check|"/gen-check")
+  
+  generate-str(gen|ext): (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"str")> <strcat> (<remove-extension> path, ext);
+      result   := <pp-stratego-string> <gen> ast
+ 
+  // Prints the abstract syntax ATerm of a selection.
+  generate-aterm:
+    (selected, position, ast, path, project-path) -> (filename, result)
+    with
+      filename := <guarantee-extension(|"aterm")> path;
+      result   := selected // we just return the input term
+  
+  editor-resolve:
+    (node, position, ast, path, project-path) -> []
+    where fail
+
+  editor-hover:
+    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]
+
+  editor-complete:
+    (node, position, ast, path, project-path) -> []
+    where fail

From L.C.L.Kats at tudelft.nl  Sat Mar 12 01:24:28 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sat, 12 Mar 2011 00:24:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22379 - in
	spoofax-imp/trunk/experimental/NamingExperiment: editor test trans
Message-ID: <20110312002428.9B84A108C008@mx3.tudelft.nl>

Author: LennartKats
Date: Sat Mar 12 00:24:28 2011
New Revision: 22379
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22379&sc=1

Log:
added a check for shadowing

Added:
   spoofax-imp/trunk/experimental/NamingExperiment/test/example.analyzed.aterm
Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv
   spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str
   spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str

Modified: spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv	Fri Mar 11 22:48:15 2011	(r22378)
+++ spoofax-imp/trunk/experimental/NamingExperiment/editor/NamingExperiment-Builders.esv	Sat Mar 12 00:24:28 2011	(r22379)
@@ -17,7 +17,7 @@
   observer : editor-analyze                                                                                   
                                                                                                               
   builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (meta) (source)  
-  builder  : "Show analyzed syntax (for selection)" = generate-analyzed (openeditor) (realtime)                   
+  builder  : "Show analyzed syntax (for selection)" = generate-analyzed (openeditor) (realtime) (source)                   
                                                                                                               
 
 refactorings

Added: spoofax-imp/trunk/experimental/NamingExperiment/test/example.analyzed.aterm
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/experimental/NamingExperiment/test/example.analyzed.aterm	Sat Mar 12 00:24:28 2011	(r22379)
@@ -0,0 +1,114 @@
+( Module(
+    "M"{[Module(), "M"]}
+  , [ Entity("A"{[Entity(), "A", "M"]}, [Property("x"{[Property(), "x", "A", "M"]}, "B"{[Entity(), "B", "M"]})])
+    , Entity(
+        "B"{[Entity(), "B", "M"]}
+      , [ Property("y"{[Property(), "y", "B", "M"]}, "A"{[Entity(), "A", "M"]})
+        , Function(
+            "f"{[Function(), "f", "B", "M"]}
+          , [Param("a"{[Var(), "a", "f", "B", "M"]}, "A"{[Entity(), "A", "M"]})]
+          , Block(
+              [ VarDeclInit(
+                  "v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]}
+                , "B"{[Entity(), "B", "M"]}
+                , PropAccess(
+                    PropAccess(PropAccess(PropAccess(Var("a"{[Var(), "a", "f", "B", "M"]}), "x"{[Property(), "x", "A", "M"]}), "y"{[Property(), "y", "B", "M"]}), "x"{[Property(), "x", "A", "M"]})
+                  , "x"{[Unresolved(Property()), "x", "B", "M"]}
+                  )
+                )
+              , Assign("v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]}, Var("y"{[Property(), "y", "B", "M"]}))
+              , Assign("v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]}, Call("f"{[Function(), "f", "B", "M"]}, [Var("v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]})]))
+              , VarDecl("v"{[Var(), "v", Anon("l_2201"), "f", "B", "M"]}, "B"{[Entity(), "B", "M"]})
+              ]
+            )
+          )
+        ]
+      )
+    ]
+  )
+, [ Def([Module(), "M"])
+  , Def([Entity(), "A", "M"])
+  , Def([Property(), "x", "A", "M"])
+  , Def([Entity(), "B", "M"])
+  , Def([Property(), "y", "B", "M"])
+  , Def([Function(), "f", "B", "M"])
+  , Def([Var(), "a", "f", "B", "M"])
+  , Def(
+      [Var(), "v", Anon("l_2201"), "f", "B", "M"]
+    )
+  , Def(
+      [Var(), "v", Anon("l_2201"), "f", "B", "M"]
+    )
+  ]
+, [ Use([Entity(), "M"], [Entity(), "B", "M"])
+  , Use([Entity(), "M"], [Entity(), "A", "M"])
+  , Use([Entity(), "M"], [Entity(), "A", "M"])
+  , Use([Entity(), "M"], [Entity(), "B", "M"])
+  , Use(
+      [Var(), Anon("l_2201"), "f", "B", "M"]
+    , [Var(), "a", "f", "B", "M"]
+    )
+  , Use(
+      [Property(), "B", "M"]
+    , [Property(), "x", "A", "M"]
+    )
+  , Use(
+      [Property(), "B", "M"]
+    , [Property(), "y", "B", "M"]
+    )
+  , Use(
+      [Property(), "B", "M"]
+    , [Property(), "x", "A", "M"]
+    )
+  , BadUse([Unresolved(Property()), "x", "B", "M"])
+  , Use(
+      [Var(), Anon("l_2201"), "f", "B", "M"]
+    , [Var(), "v", Anon("l_2201"), "f", "B", "M"]
+    )
+  , Use(
+      [Var(), Anon("l_2201"), "f", "B", "M"]
+    , [Property(), "y", "B", "M"]
+    )
+  , Use(
+      [Var(), Anon("l_2201"), "f", "B", "M"]
+    , [Var(), "v", Anon("l_2201"), "f", "B", "M"]
+    )
+  , Use(
+      [Function(), "B", "M"]
+    , [Function(), "f", "B", "M"]
+    )
+  , Use(
+      [Var(), Anon("l_2201"), "f", "B", "M"]
+    , [Var(), "v", Anon("l_2201"), "f", "B", "M"]
+    )
+  , Use([Entity(), "M"], [Entity(), "B", "M"])
+  ]
+, [ DefData(Type(), [Entity(), "A", "M"], ENTITY("A"{[Entity(), "A", "M"]}))
+  , DefData(
+      Type()
+    , [Property(), "x", "A", "M"]
+    , ENTITY("B"{[Unresolved(Entity()), "B", "M"]})
+    )
+  , DefData(Type(), [Entity(), "B", "M"], ENTITY("B"{[Entity(), "B", "M"]}))
+  , DefData(
+      Type()
+    , [Property(), "y", "B", "M"]
+    , ENTITY("A"{[Unresolved(Entity()), "A", "M"]})
+    )
+  , DefData(
+      ParamTypes()
+    , [Function(), "f", "B", "M"]
+    , [ENTITY("A"{[Unresolved(Entity()), "A", "M"]})]
+    )
+  , DefData(
+      Type()
+    , [Var(), "a", "f", "B", "M"]
+    , ENTITY("A"{[Unresolved(Entity()), "A", "M"]})
+    )
+  , DefData(
+      Type()
+    , [Var(), "v", Anon("l_2201"), "f", "B", "M"]
+    , ENTITY("B"{[Unresolved(Entity()), "B", "M"]})
+    )
+  ]
+)
\ No newline at end of file

Modified: spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Fri Mar 11 22:48:15 2011	(r22378)
+++ spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Sat Mar 12 00:24:28 2011	(r22379)
@@ -85,6 +85,31 @@
   }
 ]] 1 error
 
+test Shadowing of property (allowed) [[
+  entity B {
+    a : A
+    f() {
+      var a : A
+    }
+  }
+]]
+
+test Shadowing of var (not allowed) [[
+  entity B {
+    f() {
+      var a : A
+      { 
+        var a : A
+      }
+    }
+  }
+]] 1 error
+
+test Duplicate entity [[
+  entity B {}
+  entity B {}
+]] 1 error
+
 
 /* TODO: following tests fail because of a limitation in the resolver interface...
 

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str	Fri Mar 11 22:48:15 2011	(r22378)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-generated.str	Sat Mar 12 00:24:28 2011	(r22379)
@@ -48,20 +48,27 @@
   
   get-definition:
     Param(x, _) -> Def([Var(), x | <IndexPath <+ ![]> Var()])
-   
-  // HACK: would be more or less the same as the above
-  //       e.g. get-definition-key: Module(x, _) -> x 
-  get-definition-key:
-    tree -> subterm
-    where
-      one(
-        where(
-          ?_{<id>};
-          ?[_ | _];
-          not(?[Unresolved(_) | _])
-        );
-        ?subterm
-      )
+    
+  get-definition-key:
+    Module(x, _) -> x
+  
+  get-definition-key:
+    Entity(x, _) -> x
+  
+  get-definition-key:
+    Property(x, _) -> x
+  
+  get-definition-key:
+    Function(x, _, _) -> x
+  
+  get-definition-key:
+    VarDecl(x, _) -> x
+  
+  get-definition-key:
+    VarDeclInit(x, _, _) -> x
+  
+  get-definition-key:
+    Param(x, _) -> x
 
 rules // "generated" uri annotation rules
     

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str	Fri Mar 11 22:48:15 2011	(r22378)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/analysis-library.str	Sat Mar 12 00:24:28 2011	(r22379)
@@ -14,6 +14,8 @@
   Use     : List(UriPart) * List(UriPart) -> Summary
   BadUse  : List(UriPart) -> Summary
   DefData : DefDataType * List(UriPart) * Term -> Summary
+
+  // TODO: add a new constructor for URI header/path separation?
   
   // URI header:
   Namespace      : UriPart
@@ -238,13 +240,26 @@
   index-lookup(is-adjust-lookup-enabled |namespace, path):
     x -> def
     where
-      candidates  := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
-      result-path := <index-select(|namespace, path, x)>
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
     <+
       // TODO: optimize: try not to call do-adjust-index-lookup from here
       [_ | path'] := path;
       def         := <index-lookup(is-adjust-lookup-enabled |namespace, path')> x
 
+  index-lookup-outermost:
+    x{[namespace | path]} -> <index-lookup-outermost(id |<index-namespace-unwrap> namespace, path)>
+
+  index-lookup-outermost(is-adjust-lookup-enabled |namespace, path):
+    x -> def
+    where
+      // TODO: optimize: just like index-lookup
+      [_ | path'] := path;
+      def         := <index-lookup-outermost(is-adjust-lookup-enabled |namespace, path')> x
+    <+
+      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
+      def        := <index-select(|namespace, path, x)>
+
   index-lookup-one-level:
     x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
   
@@ -253,7 +268,6 @@
     with
       is-adjusted-lookup-enabled;
       do-adjusted-index-lookup(|namespace, path, x);
-      debug(!"adjustedio");
       mapconcat(\Def(p) -> [Def(p)]\
           <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path')> x\
           <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
@@ -305,7 +319,7 @@
     x{[ns | path]} -> def
     where
       def := ();
-      fatal-err(|"Not implemented")
+      fatal-err(|"Not implemented") // TODO: index-lookup-container
 
   index-namespace-unwrap =
     \Unresolved(n) -> n\ <+ id

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str	Fri Mar 11 22:48:15 2011	(r22378)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/check.str	Sat Mar 12 00:24:28 2011	(r22379)
@@ -10,6 +10,8 @@
 
 rules
 
+  // TODO: don't use index-get-term, but store offsets in the index
+
   constraint-error:
     x{[Unresolved(t) | _]} ->
     (x, $[Unable to resolve [x]])
@@ -21,25 +23,22 @@
       <is-ordered-namespace> namespace
     where
       def  := <index-lookup> x;
-      def' := <index-get-term> def // TODO: don't use index-get-term
+      def' := <index-get-term> def
     where
-      // TODO: use origin-offset / offsets in index data
-      <gt> (<origin-line> def', <origin-line> x)
-    <+
-      <gt> (<origin-column> def', <origin-column> x)
+      <gt> (<origin-offset> def', <origin-offset> x)
   
   constraint-error:
     def -> (def, $[Duplicate definition])
     where
-      x    := <get-definition-key> def;
-      def' := <index-lookup> x;
-      fail // TODO: something with origin-offset / offsets in index data
+      def-child  := <get-definition-key> def;
+      def'       := <index-get-term> <index-lookup-outermost> def-child;
+      not(<origin-equal(|def)> def')
   
   is-ordered-namespace:
     Var() -> Var()
     
   constraint-error:
-    Call(f, a*) -> (f, $[Illegal argument types, expected [<write-to-string> param-types] not [<write-to-string> arg-types]])
+    Call(f, a*) -> (f, $[Illegal argument types, expected [<strip-annos; write-to-string> param-types] not [<strip-annos; write-to-string> arg-types]])
     where
       arg-types   := <map(type-of)> a*;
       def         := <index-lookup> f;
@@ -51,6 +50,9 @@
   constraint-warning = fail
   constraint-note = fail
 
+  origin-offset =
+    prim("SSL_EXT_origin_offset", <id>) => (<id>, _)
+
 /*
 
   // Analysis: does a topdown traversal of the tree,

Modified: spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Fri Mar 11 22:48:15 2011	(r22378)
+++ spoofax-imp/trunk/experimental/NamingExperiment/trans/namingexperiment.str	Sat Mar 12 00:24:28 2011	(r22379)
@@ -39,7 +39,17 @@
     (selected, position, ast, path, project-path) -> (filename, result)
     with
       filename := <guarantee-extension(|"aterm")> path;
-      result   := selected // we just return the input term
+      result   := <desugar-top> selected // we just return the input term
+  
+    desugar-top =
+      alltd(desugar);
+      where(oncetd(?PropAccess(_, _); debug(!"to:"); origin-term; debug(!"was:")))
+
+    desugar:
+      Function(x, a, body) -> Function(PropAccess(m,x), a, body)
+      where
+        m := "something different"
+
   
   // Prints the abstract syntax ATerm of a selection.
   generate-analyzed:

From M.A.Akhter at student.tudelft.nl  Sat Mar 12 10:25:05 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 12 Mar 2011 09:25:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22380 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen esv sdf str
Message-ID: <20110312092505.82DDC7F8014@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Mar 12 09:25:05 2011
New Revision: 22380
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22380&sc=1

Log:
minor fixes in code generation

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Sat Mar 12 00:24:28 2011	(r22379)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Sat Mar 12 09:25:05 2011	(r22380)
@@ -17,21 +17,23 @@
 
 rules
 	
-	emit-build-script: (project-path, packages-root , current-package-root , package-name) -> None()
+	emit-build-script: (project-path, library-root , current-namespace-root , namespace-name) -> None()
 		with 
-			autogen-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", "build.spx.package.generated")
-			;packagespecific-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", $[build.[package-name]])
+			autogen-ant-output-file-name := "build.spx.namespace.generated"
+			;autogen-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", "build.spx.namespace.generated")
+			;ant-output-file-name := $[[<string-replace(|"/", "."); string-replace(|"\\", "."); string-replace(|":", ".")>current-namespace-root].[namespace-name]]
+			;packagespecific-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", $[build.spx.namespace.[ant-output-file-name]])
 		where
 			 <dirname; ensure-directory-exists>autogen-ant-output-path  
 			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>())
 		where
 			 <dirname; ensure-directory-exists>packagespecific-ant-output-path  
-			;<save-to-file>(packagespecific-ant-output-path, <get-packagespecific-ant-script-string>(packages-root , current-package-root , package-name) )
+			;<save-to-file>(packagespecific-ant-output-path, <get-packagespecific-ant-script-string>(library-root , current-namespace-root , namespace-name,autogen-ant-output-file-name) )
 	
 	
 	//TODO : replace package-name with fully qualified namespace. 
 	 
-	get-packagespecific-ant-script-string:(packages-root , current-package-root , package-name) ->
+	get-packagespecific-ant-script-string:(packages-root , current-package-root , package-name, autogen-ant-output-file-name) ->
 $[<?xml version="1.0" encoding="UTF-8" ?>
 <project name="build.[package-name]" default="build-spx-packages">
         
@@ -61,7 +63,7 @@
     <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
 
     
-	<import file="build.spx.package.generated.xml"/>
+	<import file="[autogen-ant-output-file-name].xml"/>
 	
 	<target name="build.[package-name].package">
 		<property name="package.name" value="[package-name]"/>
@@ -81,9 +83,12 @@
 		</antcall>
 	</target>
 	<!-- Main target -->
-  <target name="build-spx-packages" depends="build.spoofax-test.package"/>
+  <target name="build-spx-packages" depends="build.[package-name].package"/>
 </project>] 
 	
+			
+	
+	
 	get-ant-autogeneratedscript : () ->
 $[<?xml version="1.0" encoding="UTF-8" ?>
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Sat Mar 12 00:24:28 2011	(r22379)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Sat Mar 12 09:25:05 2011	(r22380)
@@ -46,9 +46,7 @@
  	store-definition(|resolved-path): 
 			def at definition -> def
 			with
-				debug(!"ok 1")
-				;(package-name, package-gen-relative-path)  := 	<find-spoofax-module-name-string>(resolved-path, def)
-				;debug(!"ok 2")
+				(package-name, package-gen-relative-path)  := 	<find-spoofax-module-name-string>(resolved-path, def)
 				;concept-name := <base-filename>package-name //TODO : get concept-name 
 			with 
 				if not(<is-declared>(package-name, concept-name)) then 
@@ -58,9 +56,9 @@
 							FilePath-of-DeclaredConcept:+ (package-name, concept-name ) -> resolved-path //TODO: not sure yet whether we need it.
 							Package-Gen-Root-of-DeclaredConcept:+(package-name, concept-name )  -> package-gen-relative-path
 					) 
-					;<debug>$[ Storing following declaration - DeclaredConcept : ([package-name],[concept-name]) -> [<pp-aterm>def]]
+					;<debug>$[SymbolTable|Storing following declaration - DeclaredConcept : ([package-name],[concept-name]) -> [<pp-aterm>def]]
 				else
-					<debug>$[ Already exists in the namespace table : ([package-name],[concept-name])]	
+					<debug>$[ SymbolTable|Already exists in the namespace table : ([package-name],[concept-name])]	
 				end 
 	
 	is-declared = get-declarations ; ?[_|_]
@@ -80,8 +78,6 @@
 	map-declarations( declaration-adapter): 
 		list* -> result
 		where 
-				<debug(!"common| mapping declaration >>>> ")> list*
-		where 
 			result :=<map(project-declaration(declaration-adapter))>list*
 		
 				
@@ -89,8 +85,6 @@
 	project-declaration(declaration-adapter):
 		n@(namespace, conceptname) -> result
  		where 
-				<debug(!"common| projecting declaration>>>> ")> n
-		where 
 		 	concept := <get-unique-declaration> n
 		  ;result := <declaration-adapter>(namespace,conceptname , concept)  
 		
@@ -137,12 +131,23 @@
   	 		 	;relative-autogen-path := <dirname>name'  
   	 		 end
 		  	 
-	  		    
-  
+	
   get-qualified-spxmodulename: 
-  	(package-name,concept-name) -> result
+  	(namespace-name,concept-name) -> result
+	where
+		result := namespace-name//TODO : when there is a concept-name added in spx , result will be package-name/conceptname 
+   		    
+  
+  //TODO : remove followind temp fix  
+  get-qualified-spxmodulename1: 
+  	(namespace-name,concept-name) -> result
 	where
-		result := package-name //TODO : when there is a concept-name added in spx , result will be package-name/conceptname 
+		autogen-dir := <Package-Gen-Root-of-DeclaredConcept>(namespace-name,concept-name)
+		;if <eq>("", autogen-dir) then 
+		 		result := namespace-name 
+		else
+			result := $[[autogen-dir]/[namespace-name]]//TODO : when there is a concept-name added in spx , result will be package-name/conceptname
+		end 
   
   
   get-fullyqualified-autogen-path(|extension): 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 00:24:28 2011	(r22379)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 09:25:05 2011	(r22380)
@@ -64,7 +64,7 @@
 	*/		
 	to-esv-import:(p-name , c-name) -> Import(result) 
 		where 
-				result := $[[<get-qualified-spxmodulename>(p-name,c-name)]]
+				result := $[[<get-qualified-spxmodulename1>(p-name,c-name)]]
  
 rules			   
  	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Sat Mar 12 00:24:28 2011	(r22379)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Sat Mar 12 09:25:05 2011	(r22380)
@@ -120,6 +120,6 @@
 
 	to-sdf-import:(p-name , c-name) -> result 
 		where 
-				result := $[[<get-qualified-spxmodulename>(p-name,c-name)]
+				result := $[[<get-qualified-spxmodulename1>(p-name,c-name)]
 									 ]
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Sat Mar 12 00:24:28 2011	(r22379)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Sat Mar 12 09:25:05 2011	(r22380)
@@ -28,15 +28,16 @@
 		where  
 			 	(name, relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
 			 	;<debug> $[Spoofax-lang|Generating signature for the following package : [name]]
-			 	;rules (signature-file-name:=$[[name].signature])
+			 	;sig-file-name := $[[name].signature] 
 			 	;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]] 
-			 	;output-path-str 		:= <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir , <signature-file-name>)
-			 	;output-path-rtree 	:= <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, <signature-file-name>)
-			 	;generated-signatures-string :=  <get-signature-contents(|<signature-file-name>)><get-all-signatures-as-string>
+			 	;output-path-str 		:= <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir , sig-file-name)
+			 	;output-path-rtree 	:= <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, sig-file-name)
+			 	;generated-signatures-string :=  <get-signature-contents(|sig-file-name)><get-all-signatures-as-string>
 			 	;signatures-as-aterm-string := <to-signature-as-rtree >generated-signatures-string
 			 	;<ensure-exists>( project-path , autogen-dir )
 				;<save-to-file>( output-path-str, generated-signatures-string)
-				;<save-to-file>( output-path-rtree, signatures-as-aterm-string)  
+				;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
+				;rules (signature-file-name:=$[[relative-autogen-path]/[sig-file-name]])  
 rules 
 	
 	//generate signature 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Sat Mar 12 00:24:28 2011	(r22379)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Sat Mar 12 09:25:05 2011	(r22380)
@@ -94,7 +94,7 @@
 	*/		
 	to-str-import:(p-name , c-name) -> Import(result) 
 		where 
-				result := $[[<get-qualified-spxmodulename>(p-name,c-name)]
+				result := $[[<get-qualified-spxmodulename1>(p-name,c-name)]
 									 ]
 
 	import-signatures : import* -> <conc>([Import(Name(<signature-file-name>))] , import*)

From g.h.wachsmuth at tudelft.nl  Sat Mar 12 11:41:13 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Sat, 12 Mar 2011 10:41:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22381 - in
	spoofax-imp/trunk/org.strategoxt.imp.types: editor syntax trans
Message-ID: <20110312104113.74E167F8016@mx1.tudelft.nl>

Author: GuidoWachsmuth
Date: Sat Mar 12 10:41:13 2011
New Revision: 22381
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22381&sc=1

Log:
added support for escaping to Stratego

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.generated.pp
   spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.sdf
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-check.str
   spoofax-imp/trunk/org.strategoxt.imp.types/trans/typedefinitionlanguage.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Builders.esv	Sat Mar 12 09:25:05 2011	(r22380)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/editor/TypeDefinitionLanguage-Builders.esv	Sat Mar 12 10:41:13 2011	(r22381)
@@ -19,5 +19,4 @@
   builder  : "Show abstract syntax (for selection)"   = generate-aterm (openeditor) (realtime) (meta) (source)  
   builder  : "Show analysed syntax (for selection)"   = generate-aterm (openeditor) (realtime) (meta)  
   
-  on save  : generate-analysis                    
-  on save  : generate-check                                                                             
+  on save  : generate-all                                                                             

Modified: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.generated.pp
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.generated.pp	Sat Mar 12 09:25:05 2011	(r22380)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.generated.pp	Sat Mar 12 10:41:13 2011	(r22381)
@@ -52,7 +52,7 @@
    Map                      -- KW["map"] _1,
    Strategy                 -- _1,
    SVar                     -- _1,
-   Appl                     -- KW["<"] _1 KW[">"] _2,
+   App                      -- KW["<"] _1 KW[">"] _2,
    AM                       -- _1 KW["=>"] _2,
    Error                    -- _1 _2,
    Type                     -- _1 KW["->"] _2,

Modified: spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.sdf	Sat Mar 12 09:25:05 2011	(r22380)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/syntax/TypeDefinitionLanguage.sdf	Sat Mar 12 10:41:13 2011	(r22381)
@@ -66,7 +66,7 @@
 		Strategy			-> Premise {cons("Strategy")}
 		
 		Id 					-> SVar {cons("SVar")}
-		"<" SVar ">" Term	-> Appl {cons("Appl")}
+		"<" SVar ">" Term	-> Appl {cons("App")}
 		
 		Appl				-> Strategy
 		Appl "=>" Term		-> Strategy {cons("AM")} 

Modified: spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-analysis.str	Sat Mar 12 09:25:05 2011	(r22380)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-analysis.str	Sat Mar 12 10:41:13 2011	(r22381)
@@ -54,10 +54,10 @@
 		RelationRule(conditions, _, type1, op, type2) -> SDefNoArgs("init-relations", Seq(GenDynRules([AddDynRule(DynRuleId(RDecNoArgs("type-rel")), rule)]), Fail())) 
 		where
 			clauses := <filter(gen-analysis-clause)> conditions ;
-			rule := <gen-str-rule-help(|Tuple([Str(<gen-analysis> op), As(Var("self"), <gen-analysis> type1)]), <gen-analysis> type2)> clauses
+			rule := <gen-str-rule-help(|Tuple([<gen-analysis> op, As(Var("self"), <gen-analysis> type1)]), <gen-analysis> type2)> clauses
 	
-	gen-analysis: DefaultRelation() -> "default-rel"
-	gen-analysis: NamedRelation(name) -> name
+	gen-analysis: DefaultRelation() -> Str("default-rel")
+	gen-analysis: NamedRelation(name) -> Str(name)
 	
 	gen-str-rule(|lhs, rhs) = gen-str-rule-help(|As(Var("self"), lhs), rhs)
 	
@@ -104,10 +104,10 @@
 		ResolveCheck(term, type) ->  (Seq(SVar("resolve"), SVar("type-of")), term, type) 
 	
 	gen-analysis:
-		Relation(type1, rel, type2) -> (CallT(SVar("type-rel"), [], [Str(<gen-analysis> rel)]), Tuple([<try(gen-analysis)> type1, <try(gen-analysis)> type2]))
+		Relation(type1, rel, type2) -> (CallT(SVar("type-rel"), [], [<gen-analysis> rel]), Tuple([<try(gen-analysis)> type1, <try(gen-analysis)> type2]))
 
 	gen-analysis:
-		Relation(type1, TransitiveClosure(rel), type2) -> (CallT(SVar("trans-type-rel"), [], [Str(<gen-analysis> rel)]), Tuple([<try(gen-analysis)> type1, <try(gen-analysis)> type2]))
+		Relation(type1, TransitiveClosure(rel), type2) -> (CallT(SVar("trans-type-rel"), [], [<gen-analysis> rel]), Tuple([<try(gen-analysis)> type1, <try(gen-analysis)> type2]))
 
 rules // self & types
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-check.str	Sat Mar 12 09:25:05 2011	(r22380)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/trans/gen-check.str	Sat Mar 12 10:41:13 2011	(r22381)
@@ -51,7 +51,7 @@
 	gen-check: 
 		CheckRule(conditions, _, term) -> RDefNoArgs("type-check", rule)
 		where
-			checks := <filter(gen-check-error <+ gen-check-default)> conditions ;
+			checks := <filter(gen-check)> conditions ;
 			<Hd> checks ;
 			str := <foldr(!Id(), gen-str-seq)> checks ;
 			rule := <gen-str-rule(|term, App(str, List([])))> []
@@ -61,47 +61,52 @@
 	
 rules // premises
 	
-	gen-check-error: 
-		Error(p, msg) -> CallT(SVar(name), [Build(msg)|<map(!Match(<try(gen-analysis)>))> matches], <map(try(gen-analysis))> terms)
+	gen-check: 
+		Error(p, msg) -> CallT(SVar(name), [Build(msg)|checks], terms)
 		where
-			<gen-check> p => (name, matches, terms)
-			
-	gen-check-default: 
-		p -> CallT(SVar(name), <map(!Match(<try(gen-analysis)>))> matches, <map(try(gen-analysis))> terms)
+			<gen-check> p => CallT(SVar(name), checks, terms)
+					
+	gen-check: 
+		Map(p) -> CallT(SVar(name'), checks, terms)
 		where
-			<gen-check> p => (name, matches, terms)
-			
-	gen-check: Map(p) -> <gen-check ; (app(|"s"), id, id)> p
-		
-	app(|s2): s1 -> <strcat> (s1, s2)
+			<gen-check> p => CallT(SVar(name), checks, terms) ;
+			name' := <strcat> (name, "s")
 	
 	gen-check:	 
-		TypeCheck(term, type) -> ("check-type", checks, terms)
+		TypeCheck(term, type) -> CallT(SVar("check-type"), checks, terms)
 		where
 			(checks, terms) := <needs-check> (term, type)
 	
 	gen-check: 
-		Resolve(term1, term2) -> ("check-resolve", checks, terms)
+		Resolve(term1, term2) -> CallT(SVar("check-resolve"), checks, terms)
 		where
 			(checks, terms) := <needs-check> (term1, term2)
 			
 	gen-check: 
-		ResolveCheck(term, type) -> ("check-resolve-type", checks, terms)
+		ResolveCheck(term, type) -> CallT(SVar("check-resolve-type"), checks, terms)
 		where
 			(checks, terms) := <needs-check> (term, type)
 			
 	gen-check: 
-		Relation(type1, rel, type2) -> ("check-type-rel", [], [Str(<gen-analysis> rel), type1, type2])
+		Relation(type1, rel, type2) -> CallT(SVar("check-type-rel"), [], [<gen-analysis> rel, <try(gen-analysis)> type1, <try(gen-analysis)> type2])
 	
 	gen-check: 
-		Relation(type1, TransitiveClosure(rel), type2) -> ("check-trans-type-rel", [], [Str(<gen-analysis> rel), type1, type2])
+		Relation(type1, TransitiveClosure(rel), type2) -> CallT(SVar("check-trans-type-rel"), [], [<gen-analysis> rel, <try(gen-analysis)> type1, <try(gen-analysis)> type2])
+	
+	gen-check:	 
+		Strategy(App(s, term)) -> CallT(SVar("check-strategy"), [s], [<try(gen-analysis)> term])
+	
+	gen-check:	 
+		Strategy(AM(App(s, term1), term2)) -> CallT(SVar("check-strategy"), [s|checks], terms)
+		where
+			(checks, terms) := <needs-check> (term1, term2)
 	
 	needs-check: (term1, term2) -> (checks, terms)
 	where
 		if fail then 
 			checks := []; 
-			terms  := [term1, term2] 
+			terms  := [<try(gen-analysis)> term1, <try(gen-analysis)> term2] 
 		else 
-			checks := [term2]; 
-			terms  := [term1] 
+			checks := [<!Match(<try(gen-analysis)>)> term2]; 
+			terms  := [<try(gen-analysis)> term1] 
 		end
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.types/trans/typedefinitionlanguage.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.types/trans/typedefinitionlanguage.str	Sat Mar 12 09:25:05 2011	(r22380)
+++ spoofax-imp/trunk/org.strategoxt.imp.types/trans/typedefinitionlanguage.str	Sat Mar 12 10:41:13 2011	(r22381)
@@ -24,6 +24,8 @@
       warnings := [];//<collect-all(fail, conc)> ast';
       notes    := []//<collect-all(fail, conc)> ast'
   
+  generate-all = where (generate-analysis ; save-file); where(generate-check ; save-file)
+  
   generate-analysis = generate-str(gen-analysis|"/gen-analysis")
   
   generate-check = generate-str(gen-check|"/gen-check")
@@ -33,6 +35,13 @@
       filename := <guarantee-extension(|"str")> <strcat> (<remove-extension> path, ext);
       result   := <pp-stratego-string> <gen> ast
  
+  save-file: (filename, content) -> <id>
+  where
+  	fd := <fopen> (filename, "w") ;
+	<fputs> (content, fd) ;
+	<fclose> fd ;
+	<refresh-workspace-file> filename
+	
   // Prints the abstract syntax ATerm of a selection.
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, result)

From g.h.wachsmuth at tudelft.nl  Sat Mar 12 11:44:02 2011
From: g.h.wachsmuth at tudelft.nl (Guido Wachsmuth)
Date: Sat, 12 Mar 2011 10:44:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22382 - in
	spoofax-imp/trunk/experimental/TypingExperiment: editor lib
	test trans
Message-ID: <20110312104402.CCF72108C002@mx3.tudelft.nl>

Author: GuidoWachsmuth
Date: Sat Mar 12 10:44:02 2011
New Revision: 22382
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22382&sc=1

Log:
added support for escaping to Stratego

Modified:
   spoofax-imp/trunk/experimental/TypingExperiment/editor/   (props changed)
   spoofax-imp/trunk/experimental/TypingExperiment/lib/typecheck.str
   spoofax-imp/trunk/experimental/TypingExperiment/test/example.pl
   spoofax-imp/trunk/experimental/TypingExperiment/trans/types.td

Modified: spoofax-imp/trunk/experimental/TypingExperiment/lib/typecheck.str
==============================================================================
--- spoofax-imp/trunk/experimental/TypingExperiment/lib/typecheck.str	Sat Mar 12 10:41:13 2011	(r22381)
+++ spoofax-imp/trunk/experimental/TypingExperiment/lib/typecheck.str	Sat Mar 12 10:44:02 2011	(r22382)
@@ -67,7 +67,7 @@
 	check-types(msg|exps, types) = collect-errors(<checks(type-of, fail, msg)> (exps, types))
 	check-types(msg, check|exps) = collect-errors(<checks(type-of, check, fail, msg)> exps)
 	
-	type-error1: _ -> "Type check failed."
+	type-error1: _ -> "Expression is of wrong type."
 	type-error2: (actual, expected) -> $[Expression is of type [<type-to-string> actual] instead of type [<type-to-string> expected]]
 	
 rules
@@ -85,7 +85,7 @@
 	check-resolves(msg, check|refs) = collect-errors(<checks(resolve, check, undeclared-error, msg)> refs)
 	
 	undeclared-error: exp -> $[[<term-to-string> exp] is not declared.]
-	resolve-error1: _ -> "Resolve check failed."
+	resolve-error1: _ -> "Reference to wrong declaration."
 	resolve-error2: (actual, expected) -> $[Reference refers to [<term-to-string> actual] instead of [<term-to-string> expected]]
 
 rules	
@@ -127,5 +127,17 @@
 	check-trans-type-rel(msg|relname): (sub, super) -> (sub, <msg> (sub, super))
 	where not (trans-type-rel(|relname))
 	
-	type-rel-error: (sub, super) -> $[Expression is of type [<type-to-string> sub] instead of type [<type-to-string> super]]
+	type-rel-error: (sub, super) -> $[Expression is of type [<type-to-string> sub] instead of type [<type-to-string> super].]
+	
+rules
+	
+	check-strategy(s|t1, t2) = check-strategy(strategy-error2, s|t1, t2)
+	check-strategy(s, check|t) = check-strategy(strategy-error1, s, check|t)
+
+	check-strategy(msg, s|ref, def) = collect-error(<perform-check(s, fail-error, msg)> (ref, def))
+	check-strategy(msg, s, check|ref) = collect-error(<perform-check(s, check, fail-error, msg)> ref)
+
+	fail-error: exp -> $[Strategy failed on [<term-to-string> exp].]
+	strategy-error1: _ -> "Strategy yields wrong result."
+	strategy-error2: (actual, expected) -> $[Strategy yields [<term-to-string> actual] instead of [<term-to-string> expected].]
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/experimental/TypingExperiment/test/example.pl
==============================================================================
--- spoofax-imp/trunk/experimental/TypingExperiment/test/example.pl	Sat Mar 12 10:41:13 2011	(r22381)
+++ spoofax-imp/trunk/experimental/TypingExperiment/test/example.pl	Sat Mar 12 10:44:02 2011	(r22382)
@@ -4,6 +4,6 @@
 	x = 4;
 	while x {
 		x = x - 1;
-		s = "5";
+		x = "5";
 	}
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/experimental/TypingExperiment/trans/types.td
==============================================================================
--- spoofax-imp/trunk/experimental/TypingExperiment/trans/types.td	Sat Mar 12 10:41:13 2011	(r22381)
+++ spoofax-imp/trunk/experimental/TypingExperiment/trans/types.td	Sat Mar 12 10:44:02 2011	(r22382)
@@ -33,7 +33,7 @@
 	
 	  op: t1 * t2 -> t	"Unknown operator" 
 	& e1: t1
-	& e2: t2
+	& e2: t2 
 	===================== 
 	BinExp(op, e1, e2): t
 		

From M.A.Akhter at student.tudelft.nl  Sat Mar 12 16:49:21 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 12 Mar 2011 15:49:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22383 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen sdf str
Message-ID: <20110312154921.A9CF4CC182@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Mar 12 15:49:21 2011
New Revision: 22383
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22383&sc=1

Log:
fixed issues with module path of generated artifacts and build script

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Sat Mar 12 10:44:02 2011	(r22382)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Sat Mar 12 15:49:21 2011	(r22383)
@@ -17,23 +17,30 @@
 
 rules
 	
-	emit-build-script: (project-path, library-root , current-namespace-root , namespace-name) -> None()
+	emit-build-script: (project-path, library-root , current-package-root , package-name) -> None()
 		with 
-			autogen-ant-output-file-name := "build.spx.namespace.generated"
-			;autogen-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", "build.spx.namespace.generated")
-			;ant-output-file-name := $[[<string-replace(|"/", "."); string-replace(|"\\", "."); string-replace(|":", ".")>current-namespace-root].[namespace-name]]
-			;packagespecific-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", $[build.spx.namespace.[ant-output-file-name]])
+			autogen-ant-output-file-name := "build.spx.package.generated"
+			;autogen-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", "build.spx.package.generated")
+			;ant-package-output-name := $[[<string-replace(|"/", "."); string-replace(|"\\", "."); string-replace(|":", ".")>current-package-root].[package-name]]
+			;packagespecific-ant-output-path := <get-fullyqualified-autogen-path(|"xml")>(project-path,"", $[build.spx.package.[ant-package-output-name]])
 		where
 			 <dirname; ensure-directory-exists>autogen-ant-output-path  
 			;<save-to-file>(autogen-ant-output-path  , <get-ant-autogeneratedscript>())
 		where
 			 <dirname; ensure-directory-exists>packagespecific-ant-output-path  
-			;<save-to-file>(packagespecific-ant-output-path, <get-packagespecific-ant-script-string>(library-root , current-namespace-root , namespace-name,autogen-ant-output-file-name) )
+			;<save-to-file>(
+			 								packagespecific-ant-output-path, 
+			 								<get-packagespecific-ant-script-string>(library-root , 
+			 																												current-package-root , 
+			 																												package-name,
+		 																													ant-package-output-name,
+			 																												autogen-ant-output-file-name) 
+			 								)
 	
 	
-	//TODO : replace package-name with fully qualified namespace. 
+	//TODO : replace package-name with fully qualified package. 
 	 
-	get-packagespecific-ant-script-string:(packages-root , current-package-root , package-name, autogen-ant-output-file-name) ->
+	get-packagespecific-ant-script-string:(packages-root , current-package-root , package-name, package-qname, autogen-ant-output-file-name) ->
 $[<?xml version="1.0" encoding="UTF-8" ?>
 <project name="build.[package-name]" default="build-spx-packages">
         
@@ -50,7 +57,7 @@
     <property name="dist" location="bin/dist"/>
     
 		<!-- Environment configuration for command-line builds -->
-    <property name="build.sdf.imports" value=""/>
+    <property name="build.sdf.imports" value= "-I &quot;${packages.root}&quot;"/>
     <property name="build.stratego.args" value="
                     --library
                     -I &quot;${packages.root}&quot;
@@ -65,9 +72,9 @@
     
 	<import file="[autogen-ant-output-file-name].xml"/>
 	
-	<target name="build.[package-name].package">
+	<target name="build.[package-qname].package">
 		<property name="package.name" value="[package-name]"/>
-		<property name="package.path" value="[packages-root]/[current-package-root]"/>
+		<property name="package.path" location="[packages-root]/[current-package-root]"/>
 		<property name="package.main.sdf.module" value="[package-name]-main"/>
 		<property name="package.main.str.module" value="[package-name]-main"/>
 		<property name="package.main.esv.module" value="[package-name].main"/>
@@ -83,7 +90,7 @@
 		</antcall>
 	</target>
 	<!-- Main target -->
-  <target name="build-spx-packages" depends="build.[package-name].package"/>
+  <target name="build-spx-packages" depends="build.[package-qname].package"/>
 </project>] 
 	
 			
@@ -168,7 +175,10 @@
 				<eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>	
 			
 				<eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
-				<eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+				<eclipse.refreshLocal resource="${libdir}/editor-common.generated.str" depth="infinite"/>
+				
+				<eclipse.refreshLocal resource="${package.path}" depth="infinite"/>
+				<eclipse.refreshLocal resource="${packages.root}" depth="infinite"/>
 				
 				<eclipse.refreshLocal resource="${projectdir}/build.spx.autogenerated.xml" depth="infinite"/>
 				<eclipse.refreshLocal resource="${packagesroot.dir}" depth="infinite"/>
@@ -292,7 +302,6 @@
 		</target>
 	
 </project>
-	
 ]
 
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Sat Mar 12 10:44:02 2011	(r22382)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Sat Mar 12 15:49:21 2011	(r22383)
@@ -55,7 +55,8 @@
 							DeclaredConcept :+ (package-name, concept-name ) -> def
 							FilePath-of-DeclaredConcept:+ (package-name, concept-name ) -> resolved-path //TODO: not sure yet whether we need it.
 							Package-Gen-Root-of-DeclaredConcept:+(package-name, concept-name )  -> package-gen-relative-path
-					) 
+					)
+					  
 					;<debug>$[SymbolTable|Storing following declaration - DeclaredConcept : ([package-name],[concept-name]) -> [<pp-aterm>def]]
 				else
 					<debug>$[ SymbolTable|Already exists in the namespace table : ([package-name],[concept-name])]	
@@ -140,13 +141,15 @@
   
   //TODO : remove followind temp fix  
   get-qualified-spxmodulename1: 
-  	(namespace-name,concept-name) -> result
+  	(package-name,concept-name) -> result
 	where
-		autogen-dir := <Package-Gen-Root-of-DeclaredConcept>(namespace-name,concept-name)
+		autogen-dir := <Package-Gen-Root-of-DeclaredConcept>(package-name,concept-name)
+		;<debug(!"------------> ")>(package-name,concept-name)
+		 ;<debug(!"dir : ")>autogen-dir 
 		;if <eq>("", autogen-dir) then 
-		 		result := namespace-name 
+		 		result := package-name
 		else
-			result := $[[autogen-dir]/[namespace-name]]//TODO : when there is a concept-name added in spx , result will be package-name/conceptname
+			result := $[[autogen-dir]/[package-name]]//TODO : when there is a concept-name added in spx , result will be package-name/conceptname
 		end 
   
   

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Sat Mar 12 10:44:02 2011	(r22382)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Sat Mar 12 15:49:21 2011	(r22383)
@@ -114,6 +114,8 @@
     	\x -> $[[<CurrentDir>]/[x].sdf]\; file-exists
   	<+
     	\x -> $[[<CurrentDir>]/[x].spx]\; file-exists
+  	<+
+  		\x -> $[[<ProjectDir>]/test/[x].spx]\; file-exists // TODO : temporarily adding this. will remove it later
  
  
 	declare-sdf-globals:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Sat Mar 12 10:44:02 2011	(r22382)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Sat Mar 12 15:49:21 2011	(r22383)
@@ -64,7 +64,7 @@
       ;debug(!"sdf-sections : ") 
       ;sections' := <alltd(desugar-sdf-redux)> <list-to-conc-grammars> sections
  		where 
- 			sdf-string := <pp-sdf-string'> 'module(name, [sdf-import-stmt*], [exports(sections')])
+ 			sdf-string := <pp-sdf-string'> 'module(<get-qualified-spxmodulename1>(package-name,concept-name), [sdf-import-stmt*], [exports(sections')])
  		where 
 			<ensure-exists>(project-path, autogen-directory) 
 			;<save-to-file>(output-path , sdf-string )
@@ -74,7 +74,7 @@
 		  declared-concept-entries := <get-all-declared-entries>
 		  ;main-sdf-file-name := $[[main-package-name]-main]
 		  ;sdf-string := 
-$[module [main-sdf-file-name]
+$[module [relative-autogen-path]/[main-sdf-file-name]
 imports
 	[<project-allkeys-declared(to-sdf-import)>declared-concept-entries]   									 
 ]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Sat Mar 12 10:44:02 2011	(r22382)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Sat Mar 12 15:49:21 2011	(r22383)
@@ -37,7 +37,7 @@
 			 	;<ensure-exists>( project-path , autogen-dir )
 				;<save-to-file>( output-path-str, generated-signatures-string)
 				;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
-				;rules (signature-file-name:=$[[relative-autogen-path]/[sig-file-name]])  
+				;rules (signature-import-path:=$[[relative-autogen-path]/[sig-file-name]])  
 rules 
 	
 	//generate signature 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Sat Mar 12 10:44:02 2011	(r22382)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Sat Mar 12 15:49:21 2011	(r22383)
@@ -19,7 +19,7 @@
       (name,relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
       ;sections  := <collect-om(?STRSection(<id>), conc)> def
     with 
-    	import-stmt* := <make-set> <import-signatures> <collect-om(?Imports(<id>) , conc);flatten-list> def
+    	import-stmt* := <make-set> <add-signature-import> <collect-om(?Imports(<id>) , conc);flatten-list> def
       ;str-import-stmt* := [Imports(<map(spximport-to-strimport)>import-stmt* )]
    	with 
    		str-section := <conc> (str-import-stmt* , sections) 
@@ -46,8 +46,8 @@
     	;<debug>output-path-str  
     	;<debug>output-path-rtree  
     where
-    	if signature-file-name then 
-    		import-stmt* := <make-set> <import-signatures> <collect-om(?Imports(<id>) , conc);flatten-list> def
+    	if signature-import-path then 
+    		import-stmt* := <make-set> <add-signature-import> <collect-om(?Imports(<id>) , conc);flatten-list> def
   		else
   			import-stmt* := <make-set> <collect-om(?Imports(<id>) , conc);flatten-list> def
 			end   
@@ -94,10 +94,7 @@
 	*/		
 	to-str-import:(p-name , c-name) -> Import(result) 
 		where 
-				result := $[[<get-qualified-spxmodulename1>(p-name,c-name)]
-									 ]
+				result := $[[<get-qualified-spxmodulename1>(p-name,c-name)]]
 
-	import-signatures : import* -> <conc>([Import(Name(<signature-file-name>))] , import*)
-		where debug 
-		where <debug><signature-file-name>
+	add-signature-import : import* -> <conc>([Import(Name(<signature-import-path>))] , import*)
 		
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Sat Mar 12 21:33:49 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 12 Mar 2011 20:33:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22384 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	esv sdf str utils
Message-ID: <20110312203349.05936108C01B@mx3.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Mar 12 20:33:47 2011
New Revision: 22384
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22384&sc=1

Log:
- added a module debug with debug switches to conditionally turn on/off debugging particular region
- rename few artifacts 
- add documentation 
- fixed issues with the module relative path for the str outputs 
- scoped dynamic rules created while combining esv definition; as we need to support code generation for all the packages

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/signatures-mapper.str
      - copied, changed from r22327, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/map-signatures.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/map-signatures.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Sat Mar 12 15:49:21 2011	(r22383)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Sat Mar 12 20:33:47 2011	(r22384)
@@ -12,30 +12,15 @@
   lib/sdf-parenthesize
 imports 
 	include/SpoofaxLang
+
+imports 
+	utils/debug
 	
 strategies 
 	pp-aterm = pp-aterm-box ; box2text-string(|100)
-	
 
-strategies 
-	
-	enable-stratego-debugging  = rules(DebugStr: x -> x)
-	
-	disable-stratego-debugging = rules(DebugStr:- _ )
-	
-	debug-str = not(DebugStr) <+ debug
-  
-strategies 
 
-	// Dubug switches  
-	enable-sdf-debugging  = rules(DebugSDF: x -> x)
-	
-	disable-sdf-debugging = rules(DebugSDF:- _ )
-	
-	debug-sdf = not(DebugSDF) <+ debug
- 
- 
- rules
+rules
  	
  	/**
  	* Creates a namespace reference table. It stores following in the reference table . 
@@ -144,8 +129,6 @@
   	(package-name,concept-name) -> result
 	where
 		autogen-dir := <Package-Gen-Root-of-DeclaredConcept>(package-name,concept-name)
-		;<debug(!"------------> ")>(package-name,concept-name)
-		 ;<debug(!"dir : ")>autogen-dir 
 		;if <eq>("", autogen-dir) then 
 		 		result := package-name
 		else

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 15:49:21 2011	(r22383)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 20:33:47 2011	(r22384)
@@ -11,6 +11,9 @@
   Module : ID * Imports * List(Section) -> Module
 
 rules 
+
+//TODO : add the ctree as a provider 
+
 	
 	/**
 	* Packs all the esv definitions for the namespace and combine them as a 
@@ -26,8 +29,11 @@
  			;(package-name,relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
  			; main-package-name :=   $[[package-name].main.packed]
  		where 
- 			<map-declarations(store-esv-defintions)>declared-concept-entries
- 			;sections := <conc>(<all-keys-Declared-Language-Description>, 
+ 			{|Declared-Language-Description,Declared-Builders-Description,Declared-Colorer-Description,
+ 				Declared-Folding-Description,Declared-Outliner-Description,Declared-References-Description,
+ 				Declared-Completions-Description:
+ 						<map-declarations(store-esv-defintions)>declared-concept-entries
+ 						;sections := <conc>(<all-keys-Declared-Language-Description>, 
  			 										<all-keys-Declared-Builders-Description> ,  
  			 										<all-keys-Declared-Colorer-Description> , 
  			 										<all-keys-Declared-Folding-Description>,
@@ -35,6 +41,7 @@
  			 										<all-keys-Declared-References-Description>,
  			 										<all-keys-Declared-Completions-Description>
  			 										)
+ 			|} 										
  			;esv-aterm := Module(main-package-name, <get-all-imports>, sections)
  			//saving paked.esv 
  			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Sat Mar 12 15:49:21 2011	(r22383)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Sat Mar 12 20:33:47 2011	(r22384)
@@ -8,7 +8,7 @@
 	  analysis
 	  common
 imports  
-		sdf/map-signatures
+		sdf/signatures-mapper
 
 rules
 	

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/signatures-mapper.str (from r22327, spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/map-signatures.str)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/map-signatures.str	Tue Mar  8 23:42:59 2011	(r22327, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/signatures-mapper.str	Sat Mar 12 20:33:47 2011	(r22384)
@@ -1,4 +1,4 @@
-module sdf/map-signatures
+module sdf/signatures-mappers
 
 imports 
 		common 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Sat Mar 12 15:49:21 2011	(r22383)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Sat Mar 12 20:33:47 2011	(r22384)
@@ -7,7 +7,7 @@
 	common
 	analysis
 imports 
-	sdf/map-signatures
+	sdf/signatures-mapper
 	sdf/analysis
 	sdf/to-sdf
 
@@ -60,10 +60,10 @@
 ]  
  
     	
-	get-all-signatures-as-string 
-  		= <mapconcat(bagof-Get-Operation-Declaration);operation-decl-to-string><all-keys-Get-Operation-Singature>
+	get-all-signatures-as-string = <mapconcat(bagof-Get-Operation-Declaration);operation-decl-to-string><all-keys-Get-Operation-Singature>
   
-  operation-decl-to-string : [] -> $[]
+  operation-decl-to-string : 
+		[] -> $[]
   operation-decl-to-string : 
   	[first-op-decl | rest-op-decl* ] 
   		-> $[[current-op-decl-string] 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/check.str	Sat Mar 12 15:49:21 2011	(r22383)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/check.str	Sat Mar 12 20:33:47 2011	(r22384)
@@ -9,7 +9,7 @@
 	include/SpoofaxLang
 imports 
 	sdf/analysis 
-	sdf/map-signatures 
+	sdf/signatures-mapper
 	str/analysis
 	
 rules 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Sat Mar 12 15:49:21 2011	(r22383)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Sat Mar 12 20:33:47 2011	(r22384)
@@ -13,19 +13,11 @@
 		
 rules
 
-  to-str:
-    (path, def) -> Module(name, str-section)
-    with
-      (name,relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
-      ;sections  := <collect-om(?STRSection(<id>), conc)> def
-    with 
-    	import-stmt* := <make-set> <add-signature-import> <collect-om(?Imports(<id>) , conc);flatten-list> def
-      ;str-import-stmt* := [Imports(<map(spximport-to-strimport)>import-stmt* )]
-   	with 
-   		str-section := <conc> (str-import-stmt* , sections) 
-
-rules
-
+	/** 
+	* Generates Stratego rules from the SPX definition.
+	* It generates from all the resolved module definition. And afterwards it generates a main str definition
+	* for the current package definition.
+	*/	
 	to-str-all: 
 		(def, path , project-path)-> None()
  		with 
@@ -35,17 +27,20 @@
  			<map-declarations(to-str(|project-path))>declared-concept-entries
 			;generate-str-main(|project-path , p-name,relative-autogen-path)
  	
- 	to-str(|project-path):
+ 	/** 
+	* Generates stratego output for the specified package-name, module-name and related definition
+	* 
+	* @param project-path : path to the to project root folder 
+	*/	
+	to-str(|project-path):
 		(package-name,concept-name,def) -> str-string
 		with 
 			autogen-directory := $[[<Autogenerated-Artifacts-Dir>]/[<Package-Gen-Root-of-DeclaredConcept>(package-name,concept-name)]]
 		with 
-    	name := <get-qualified-spxmodulename>(package-name,concept-name)
+    	name := <get-qualified-spxmodulename>(package-name,concept-name) 
     	;output-path-str := <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-directory , name)
     	;output-path-rtree := <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-directory , name)
-    	;<debug>output-path-str  
-    	;<debug>output-path-rtree  
-    where
+     where
     	if signature-import-path then 
     		import-stmt* := <make-set> <add-signature-import> <collect-om(?Imports(<id>) , conc);flatten-list> def
   		else
@@ -55,28 +50,34 @@
    		;sections  := <collect-om(?STRSection(<id>), conc)> def
    		;str-section := <conc>(str-import-stmt* , sections) 
     where 
-    	str-aterm := Module(name, str-section);
+    	str-aterm := Module(<get-qualified-spxmodulename1>(package-name,concept-name), str-section);
  			str-string := <pp-stratego-string> <parenthesize-Stratego> str-aterm
  		where 
 			<ensure-exists>(project-path, autogen-directory) 
 			;<save-to-file>(output-path-str , str-string)
 			;<WriteToBinaryFile>(output-path-rtree , str-aterm)
-	 
+	
+	
+	/** 
+	* Generates stratego MAIN output for the specified package-name
+	* 
+	* @param project-path : path to the to project root folder
+	* @param : package name 
+	* @param : relative output path from the  configured autogenerated directory  
+	*/	
 	generate-str-main(|project-path , main-package-name, relative-autogen-path)=
 		  declared-concept-entries := <get-all-declared-entries>
-		  ;main-package-name' := $[[main-package-name]-main]
-		  ;str-aterm := Module( main-package-name' , [Imports(<project-allkeys-declared(to-str-import)>declared-concept-entries)])
+		  ;package-main-outputfile-name := $[[main-package-name]-main]
+		  ;package-main-str-name := $[[relative-autogen-path]/[package-main-outputfile-name]] 
+		  ;str-aterm := Module( package-main-str-name , [Imports(<project-allkeys-declared(to-str-import)>declared-concept-entries)])
 		  ;str-string := <pp-stratego-string> <parenthesize-Stratego>  str-aterm
 		  ;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]// setting up the autogen directory path
 			;<ensure-exists>(project-path,autogen-dir) // verifying directory exists  
-			;output-path-str := <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir, main-package-name') // PATH to the STR file  
-			;output-path-rtree := <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, main-package-name')  //Path to the RTREE File
+			;output-path-str := <get-fullyqualified-autogen-path(|"str")>(project-path,autogen-dir, package-main-outputfile-name) // PATH to the STR file  
+			;output-path-rtree := <get-fullyqualified-autogen-path(|"rtree")>(project-path,autogen-dir, package-main-outputfile-name)  //Path to the RTREE File
 			;<save-to-file>(output-path-str , str-string ) // Saving stratego contents to STR Path
 			;<WriteToBinaryFile> (output-path-rtree , str-aterm) // Saving Rtree
-			//;<save-to-file>(output-path-rtree , <pp-aterm>str-aterm) 
-			
-			 
-			  								  
+			//;<save-to-file>(output-path-rtree , <pp-aterm>str-aterm)  								  
 rules 
 	
 	//TODO : Still need to handle parameterized Imports
@@ -96,5 +97,23 @@
 		where 
 				result := $[[<get-qualified-spxmodulename1>(p-name,c-name)]]
 
+	
 	add-signature-import : import* -> <conc>([Import(Name(<signature-import-path>))] , import*)
+
+rules
+
+	/*
+	* [Obsolete]
+	*/
+  to-str:
+    (path, def) -> Module(name, str-section)
+    with
+      (name,relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
+      ;sections  := <collect-om(?STRSection(<id>), conc)> def
+    with 
+    	import-stmt* := <make-set> <add-signature-import> <collect-om(?Imports(<id>) , conc);flatten-list> def
+      ;str-import-stmt* := [Imports(<map(spximport-to-strimport)>import-stmt* )]
+   	with 
+   		str-section := <conc> (str-import-stmt* , sections) 
+
 		
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/debug.str	Sat Mar 12 20:33:47 2011	(r22384)
@@ -0,0 +1,19 @@
+module utils/debug
+
+strategies 
+	
+	enable-stratego-debugging  = rules(DebugStr: x -> x)
+	
+	disable-stratego-debugging = rules(DebugStr:- _ )
+	
+	debug-str = not(DebugStr) <+ debug
+  
+strategies 
+
+	// Dubug switches  
+	enable-sdf-debugging  = rules(DebugSDF: x -> x)
+	
+	disable-sdf-debugging = rules(DebugSDF:- _ )
+	
+	debug-sdf = not(DebugSDF) <+ debug
+ 
\ No newline at end of file

From M.A.Akhter at student.tudelft.nl  Sat Mar 12 23:24:33 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 12 Mar 2011 22:24:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22385 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv
Message-ID: <20110312222433.3CD0ECC0C9@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Mar 12 22:24:32 2011
New Revision: 22385
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22385&sc=1

Log:
by default add-package-ctree while generating packed.esv

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 20:33:47 2011	(r22384)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 22:24:32 2011	(r22385)
@@ -27,13 +27,15 @@
 		with 
 			declared-concept-entries  := <get-all-declared-entries>
  			;(package-name,relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
- 			; main-package-name :=   $[[package-name].main.packed]
+ 			; package-main-esv-name :=   $[[package-name].main.packed]
  		where 
  			{|Declared-Language-Description,Declared-Builders-Description,Declared-Colorer-Description,
  				Declared-Folding-Description,Declared-Outliner-Description,Declared-References-Description,
  				Declared-Completions-Description:
  						<map-declarations(store-esv-defintions)>declared-concept-entries
- 						;sections := <conc>(<all-keys-Declared-Language-Description>, 
+ 						;sections := <conc>(
+ 						 							<add-package-ctree>(package-name),  
+ 						 							<all-keys-Declared-Language-Description>, 
  			 										<all-keys-Declared-Builders-Description> ,  
  			 										<all-keys-Declared-Colorer-Description> , 
  			 										<all-keys-Declared-Folding-Description>,
@@ -42,14 +44,18 @@
  			 										<all-keys-Declared-Completions-Description>
  			 										)
  			|} 										
- 			;esv-aterm := Module(main-package-name, <get-all-imports>, sections)
+ 			;esv-aterm := Module(package-main-esv-name, <get-all-imports>, sections) //TODO  : Q>> why do we need imports in main.packed.esv  ?
  			//saving paked.esv 
  			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
- 			;output-path-esv := <get-fullyqualified-autogen-path(|"esv")>(project-path,autogen-dir,main-package-name)
+ 			;output-path-esv := <get-fullyqualified-autogen-path(|"esv")>(project-path,autogen-dir,package-main-esv-name)
 			;<dirname; ensure-directory-exists>output-path-esv 
 			//;<save-to-file>(output-path-esv,<pp-aterm>esv-aterm)
 			;<WriteToBinaryFile>(output-path-esv,esv-aterm)
 
+	add-package-ctree : package-name -> [SemanticProvider(package-output-ctree)]
+		where 
+				package-output-ctree := $[include/[package-name].ctree]
+	
 	/*
 	* Returns all the imports for the current namespace.
 	*/

From M.A.Akhter at student.tudelft.nl  Sat Mar 12 23:25:49 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 12 Mar 2011 22:25:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22386 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv
Message-ID: <20110312222549.6B14A2B8010@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Mar 12 22:25:49 2011
New Revision: 22386
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22386&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 22:24:32 2011	(r22385)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 22:25:49 2011	(r22386)
@@ -12,9 +12,6 @@
 
 rules 
 
-//TODO : add the ctree as a provider 
-
-	
 	/**
 	* Packs all the esv definitions for the namespace and combine them as a 
 	* single *.main.packed.esv and store it in .showdow dir

From M.A.Akhter at student.tudelft.nl  Sun Mar 13 00:42:56 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sat, 12 Mar 2011 23:42:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22387 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	esv sdf str
Message-ID: <20110312234256.8B0402B800D@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Sat Mar 12 23:42:56 2011
New Revision: 22387
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22387&sc=1

Log:
more refactoring . moving codes to generic library for reusing in different modules

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Sat Mar 12 22:25:49 2011	(r22386)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Sat Mar 12 23:42:56 2011	(r22387)
@@ -119,21 +119,27 @@
 		  	 
 	
   get-qualified-spxmodulename: 
-  	(namespace-name,concept-name) -> result
+  	(namespace-name,module-name) -> result
 	where
 		result := namespace-name//TODO : when there is a concept-name added in spx , result will be package-name/conceptname 
    		    
   
   //TODO : remove followind temp fix  
-  get-qualified-spxmodulename1: 
-  	(package-name,concept-name) -> result
+  get-qualified-importpath: 
+  	(package-name,module-name) -> result
 	where
-		autogen-dir := <Package-Gen-Root-of-DeclaredConcept>(package-name,concept-name)
-		;if <eq>("", autogen-dir) then 
-		 		result := package-name
+		autogen-dir := <Package-Gen-Root-of-DeclaredConcept>(package-name,module-name)
+		;<append-if-not-empty(|autogen-dir , "/")>package-name => result //TODO : when there is a module-name added in spx , result will be package-name/conceptname
+	
+  append-if-not-empty(|string-to-append, seperator) : operand ->result
+  where 
+  	if <eq>("", string-to-append) then 
+			result := operand
 		else
-			result := $[[autogen-dir]/[package-name]]//TODO : when there is a concept-name added in spx , result will be package-name/conceptname
+			result := $[[string-to-append][seperator][operand]]//TODO : when there is a concept-name added in spx , result will be package-name/conceptname
 		end 
+   
+   
   
   
   get-fullyqualified-autogen-path(|extension): 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 22:25:49 2011	(r22386)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Sat Mar 12 23:42:56 2011	(r22387)
@@ -74,7 +74,7 @@
 	*/		
 	to-esv-import:(p-name , c-name) -> Import(result) 
 		where 
-				result := $[[<get-qualified-spxmodulename1>(p-name,c-name)]]
+				result := $[[<get-qualified-importpath>(p-name,c-name)]]
  
 rules			   
  	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Sat Mar 12 22:25:49 2011	(r22386)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Sat Mar 12 23:42:56 2011	(r22387)
@@ -64,7 +64,7 @@
       ;debug(!"sdf-sections : ") 
       ;sections' := <alltd(desugar-sdf-redux)> <list-to-conc-grammars> sections
  		where 
- 			sdf-string := <pp-sdf-string'> 'module(<get-qualified-spxmodulename1>(package-name,concept-name), [sdf-import-stmt*], [exports(sections')])
+ 			sdf-string := <pp-sdf-string'> 'module(<get-qualified-importpath>(package-name,concept-name), [sdf-import-stmt*], [exports(sections')])
  		where 
 			<ensure-exists>(project-path, autogen-directory) 
 			;<save-to-file>(output-path , sdf-string )
@@ -120,6 +120,6 @@
 
 	to-sdf-import:(p-name , c-name) -> result 
 		where 
-				result := $[[<get-qualified-spxmodulename1>(p-name,c-name)]
+				result := $[[<get-qualified-importpath>(p-name,c-name)]
 									 ]
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Sat Mar 12 22:25:49 2011	(r22386)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-signature.str	Sat Mar 12 23:42:56 2011	(r22387)
@@ -37,7 +37,8 @@
 			 	;<ensure-exists>( project-path , autogen-dir )
 				;<save-to-file>( output-path-str, generated-signatures-string)
 				;<save-to-file>( output-path-rtree, signatures-as-aterm-string)
-				;rules (signature-import-path:=$[[relative-autogen-path]/[sig-file-name]])  
+				;rules (signature-import-path:= <append-if-not-empty(|relative-autogen-path, "/")> sig-file-name)
+						  
 rules 
 	
 	//generate signature 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str	Sat Mar 12 22:25:49 2011	(r22386)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str	Sat Mar 12 23:42:56 2011	(r22387)
@@ -12,7 +12,7 @@
 	str/desugar
 imports	
 	analysis
-	common
+	utils/debugger
 imports 
 	include/SpoofaxLang
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Sat Mar 12 22:25:49 2011	(r22386)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/to-stratego.str	Sat Mar 12 23:42:56 2011	(r22387)
@@ -50,7 +50,7 @@
    		;sections  := <collect-om(?STRSection(<id>), conc)> def
    		;str-section := <conc>(str-import-stmt* , sections) 
     where 
-    	str-aterm := Module(<get-qualified-spxmodulename1>(package-name,concept-name), str-section);
+    	str-aterm := Module(<get-qualified-importpath>(package-name,concept-name), str-section);
  			str-string := <pp-stratego-string> <parenthesize-Stratego> str-aterm
  		where 
 			<ensure-exists>(project-path, autogen-directory) 
@@ -95,7 +95,7 @@
 	*/		
 	to-str-import:(p-name , c-name) -> Import(result) 
 		where 
-				result := $[[<get-qualified-spxmodulename1>(p-name,c-name)]]
+				result := $[[<get-qualified-importpath>(p-name,c-name)]]
 
 	
 	add-signature-import : import* -> <conc>([Import(Name(<signature-import-path>))] , import*)

From R.B.Vermaas at tudelft.nl  Mon Mar 14 08:44:55 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 14 Mar 2011 07:44:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22388 -
	strategoxt/branches/strategoxt-java/libraries/sglr/lib/stratego/sglr
Message-ID: <20110314074455.C5DCACC1C7@mx4.tudelft.nl>

Author: rob
Date: Mon Mar 14 07:44:53 2011
New Revision: 22388
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22388&sc=1

Log:
remove asfix2me format configuration option for parser

Modified:
   strategoxt/branches/strategoxt-java/libraries/sglr/lib/stratego/sglr/config.str

Modified: strategoxt/branches/strategoxt-java/libraries/sglr/lib/stratego/sglr/config.str
==============================================================================
--- strategoxt/branches/strategoxt-java/libraries/sglr/lib/stratego/sglr/config.str	Sat Mar 12 23:42:56 2011	(r22387)
+++ strategoxt/branches/strategoxt-java/libraries/sglr/lib/stratego/sglr/config.str	Mon Mar 14 07:44:53 2011	(r22388)
@@ -129,23 +129,12 @@
     ?AsFix2()
     ; set-asfix2-format
 
-  set-parse-tree-format =    
-    ?AsFix2ME()  
-    ; set-asfix2me-format
-
   /**
    * Sets the parse tree format to AsFix2
    */
   set-asfix2-format =
     where(prim("STRSGLR_set_asfix2_format"))
 
-  /**
-   * Sets the parse tree format to AsFix2ME
-   */
-  set-asfix2me-format =
-    where(prim("STRSGLR_set_asfix2me_format"))
-
 signature
   constructors
     AsFix2   : ParseTreeFormat
-    AsFix2ME : ParseTreeFormat

From R.B.Vermaas at tudelft.nl  Mon Mar 14 08:45:37 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 14 Mar 2011 07:45:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22389 -
	strategoxt/branches/strategoxt-java/libraries/strc/lib/stratego/strc/strc
Message-ID: <20110314074537.3DF65CC1C7@mx4.tudelft.nl>

Author: rob
Date: Mon Mar 14 07:45:36 2011
New Revision: 22389
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22389&sc=1

Log:
remove c-related strc options

Modified:
   strategoxt/branches/strategoxt-java/libraries/strc/lib/stratego/strc/strc/strc-options.str

Modified: strategoxt/branches/strategoxt-java/libraries/strc/lib/stratego/strc/strc/strc-options.str
==============================================================================
--- strategoxt/branches/strategoxt-java/libraries/strc/lib/stratego/strc/strc/strc-options.str	Mon Mar 14 07:44:53 2011	(r22388)
+++ strategoxt/branches/strategoxt-java/libraries/strc/lib/stratego/strc/strc/strc-options.str	Mon Mar 14 07:45:36 2011	(r22389)
@@ -36,27 +36,7 @@
     ; <set-config> ("--statistics", 1)
     ; <set-config> ("-O", 2)
     ; <set-config> ("-I", [])
-    ; <set-config> ("--C-include", 
-		   ["<srts/stratego.h>", "<stratego-lib/stratego-lib.h>"])
-
-    // @todo consider to include CFLAGS from the environment
-    ; <set-config> ("-Xcc",
-        [ "-I", <xtc-find-path> "SRTS-include"
-        , "-I", <xtc-find-path> "stratego-lib-include"
-        , "-I", <conc-strings>(<xtc-find-path> "ATERM", "/include")
-        | <strc-system-cflags> ()
-        ])
-
-    ; <set-config> ("-Xlinker",
-        [ <xtc-find> "libstratego-lib-native.la"
-        , <xtc-find> "libstratego-runtime.la"
-        , <xtc-find> "libATerm.la"
-        , "-lm"
-        | <strc-system-ldflags> ()
-        ])
-
     ; <set-config> ("--dr", "new")
-    ; <set-config> ("--cc", <xtc-find> "cc")
   )
 
   strc-post-process-strc-config =
@@ -66,20 +46,6 @@
       end
     )
 
-  /**
-   * @todo This does not supported quoted options (with spaces)
-   */
-  strc-system-ldflags =
-    <prim("STRC_SYSTEM_LDFLAGS")> ()
-    ; string-tokenize(| ['\ ', '\n', '\r'])
-
-  /**
-   * @todo This does not supported quoted options (with spaces)
-   */
-  strc-system-cflags =
-    <prim("STRC_SYSTEM_CFLAGS")> ()
-    ; string-tokenize(| ['\ ', '\n', '\r'])
-
   strc-get-include-dirs =
     <conc> (<get-config> "-I"
            , ["-I", <xtc-find-path> "lib.rtree",
@@ -110,10 +76,6 @@
 	where(<set-config>("-m", <id>)); !(),
 	!"--main f | -m f    Main strategy to compile (default: main)\n")
 
-  + ArgOption("--C-include",       
-	where(<post-extend-config>("--C-include", [<id>])); !(), 
-	!"--C-include h      Include header file h (\"file.h\" or <file.h>)")
-
   /**
    * Library options
    */
@@ -136,52 +98,6 @@
         where(<set-config> (DisableInstall(), ())),
         !"--disable-install  If the output is a library, then don't install it in the libdir.")
 
-  /**
-   * C compiler flags
-   */
-  + ArgOption(fail, fail, !"")
-  + ArgOption(fail, fail, !"C compiler options:")
-  + ArgOption(fail, fail, !"")
-
-  + ArgOption("--cc",
-	where(<set-config>("--cc", <id>)); !(),
-	!"--cc <path>        Use C compiler at <path>")
-
-  + ArgOption("-Xcc",
-	where(<post-extend-config>("-Xcc", [<id>])); !(),
-	!"-Xcc <arg>         Pass <arg> on to the C compiler")
-
-  + ArgOption("-CI",
-	where(<post-extend-config>("-Xcc", ["-I", <id>])); !(),
-	!"-CI d              Include C headers from directory d")
-
-  + ArgOption("-CD",
-	where(<post-extend-config>("-Xcc", [<conc-strings> ("-D", <id>)])); !(),
-	!"-CD name=def       Predefine name as a macro, with definition def.")
-
-  /**
-   * Linker flags.
-   */
-  + ArgOption(fail, fail, !"")
-  + ArgOption(fail, fail, !"Linker options:")
-  + ArgOption(fail, fail, !"")
-
-  + ArgOption("--ld",
-	where(<set-config>("--ld", <id>)); !(),
-	!"--ld <path>        Use linker at <path> (default: C compiler)")
-
-  + ArgOption("-Xlinker",
-	where(<post-extend-config>("-Xlinker", [<id>])); !(),
-	!"-Xlinker <arg>     Pass <arg> on to the linker")
-
-  + ArgOption("-CL",
-	where(<post-extend-config>("-Xlinker", [<conc-strings> ("-L", <id>)])); !(),
-	!"-CL d              Include binary libraries from directory d")
-
-  + ArgOption("-Cl",
-	where(<post-extend-config>("-Xlinker", [<conc-strings> ("-l", <id>)])); !(),
-	!"-Cl <lib>          Search the library named <lib> when linking.")
-
   + ArgOption("-la",
 	where(<post-extend-config>("-Xlinker", [<file-exists <+ <concat-strings; xtc-find <+ <exit> 1> ["lib", <id>, ".la"]>])); !(),
 	!"-la <name>         Search the libtool library lib<name>.la when linking.")
@@ -195,10 +111,6 @@
 	where(<extend-config>("-Xcc", [<concat-strings> ["-DDEFAULT_XTC_REPOSITORY=\"", <id>, "\""]])); !(),
 	!"--xtc-repo file    Set default XTC repository in output program to file (default: none).")
 
-  + Option("-c",          
-	where(<set-config>("-c",())); !(),
-	!"-c                 Produce C code only (don't compile)" )
-
   + Option("--ast",
 	where(<set-config>("--ast",())); !(),
 	!"--ast              Produce abstract syntax tree of packed program" )
@@ -234,9 +146,6 @@
         where(<set-config>("--asfix",())); !(),
         !"--asfix            Concrete syntax parts are not imploded")
 
-  + Option("--indent-c",    
-	where(<set-config> ("--indent-c",())); !(),         
-	!"--indent-c         Use this flag if you want the generated C code to use indentation.")
   + Option("--dump-aterms",    
 	where(<set-config> ("--dump-aterms",())); !(),         
 	!"--dump-aterms      Use this flag if you want to dump ATerms for all imported modules (for analysis) in dump.aterm.")

From R.B.Vermaas at tudelft.nl  Mon Mar 14 08:48:26 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 14 Mar 2011 07:48:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22390 - in
	strategoxt-java-backend/trunk/java/tools/org/strategoxt/tools: . lib
Message-ID: <20110314074826.E066C108C02E@mx3.tudelft.nl>

Author: rob
Date: Mon Mar 14 07:48:26 2011
New Revision: 22390
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22390&sc=1

Log:
add parse-stratego for debugging purposes

Added:
   strategoxt-java-backend/trunk/java/tools/org/strategoxt/tools/lib/parse-stratego.str
Modified:
   strategoxt-java-backend/trunk/java/tools/org/strategoxt/tools/tools.str

Added: strategoxt-java-backend/trunk/java/tools/org/strategoxt/tools/lib/parse-stratego.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt-java-backend/trunk/java/tools/org/strategoxt/tools/lib/parse-stratego.str	Mon Mar 14 07:48:26 2011	(r22390)
@@ -0,0 +1,14 @@
+module parse-stratego
+imports 
+  libstratego-lib
+  libstratego-xtc 
+  libstrc
+
+strategies
+
+  parse-stratego-io =
+    xtc-io-wrap(parse-stratego-options, 
+        ps-parse-module-trm
+      ; write-to
+      <+ <xtc-exit> 1
+    )

Modified: strategoxt-java-backend/trunk/java/tools/org/strategoxt/tools/tools.str
==============================================================================
--- strategoxt-java-backend/trunk/java/tools/org/strategoxt/tools/tools.str	Mon Mar 14 07:45:36 2011	(r22389)
+++ strategoxt-java-backend/trunk/java/tools/org/strategoxt/tools/tools.str	Mon Mar 14 07:48:26 2011	(r22390)
@@ -11,3 +11,4 @@
   lib/gen-sdf-mix
   lib/sdf2ast-conflicts
   lib/sdf2parenthesize
+  lib/parse-stratego

From R.B.Vermaas at tudelft.nl  Mon Mar 14 09:03:40 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 14 Mar 2011 08:03:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22391 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110314080340.4F9167F800D@mx1.tudelft.nl>

Author: rob
Date: Mon Mar 14 08:03:39 2011
New Revision: 22391
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22391&sc=1

Log:
remove call to parse-hack to see if amb's have disappeared

Modified:
   strategoxt/branches/strategoxt-java/build.xml

Modified: strategoxt/branches/strategoxt-java/build.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/build.xml	Mon Mar 14 07:48:26 2011	(r22390)
+++ strategoxt/branches/strategoxt-java/build.xml	Mon Mar 14 08:03:39 2011	(r22391)
@@ -17,7 +17,7 @@
 
     <target
         name="all"
-        depends="ensure-dirs,syntax,parse-hack,generate-java,compile-java,jar"
+        depends="ensure-dirs,syntax,generate-java,compile-java,jar"
     />
 
     <target name="test" depends="tests">

From seba at informatik.uni-marburg.de  Mon Mar 14 11:26:25 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Mon, 14 Mar 2011 10:26:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22392 -
	sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver
Message-ID: <20110314102625.301202B802E@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Mon Mar 14 10:26:24 2011
New Revision: 22392
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22392&sc=1

Log:
improved import handling

Added:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ModuleSystemCommands.java
Modified:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Mon Mar 14 08:03:39 2011	(r22391)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Mon Mar 14 10:26:24 2011	(r22392)
@@ -8,31 +8,24 @@
 import static org.sugarj.driver.ATermCommands.getString;
 import static org.sugarj.driver.ATermCommands.isApplication;
 import static org.sugarj.driver.Environment.bin;
-import static org.sugarj.driver.Environment.includePath;
 import static org.sugarj.driver.Environment.sep;
 import static org.sugarj.driver.Log.log;
 
-import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
-import java.io.FileReader;
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.net.MalformedURLException;
 import java.net.URI;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.text.ParseException;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
@@ -85,8 +78,8 @@
   private static Map<Key, Result> resultCache = new HashMap<Key, Result>();
 
   private static List<URI> allInputFiles;
-  private static List<String> pendingInputFiles;
-  private static List<String> currentlyProcessing;
+  private static List<URI> pendingInputFiles;
+  private static List<URI> currentlyProcessing;
 
   private Result driverResult = new Result();
   
@@ -162,9 +155,24 @@
   }
   
   public static Result compile(URI sourceFile) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
+    synchronized (currentlyProcessing) {
+      // TODO we need better circular dependency handling
+      if (currentlyProcessing.contains(sourceFile))
+        throw new IllegalStateException("circular processing");
+      currentlyProcessing.add(sourceFile);
+    }
+
     String source = FileCommands.readFileAsString(sourceFile.getPath());
     String moduleName = FileCommands.fileName(sourceFile);
-    return compile(source, moduleName, sourceFile.getPath());
+    
+    Result res = compile(source, moduleName, sourceFile.getPath());
+
+    synchronized (currentlyProcessing) {
+      currentlyProcessing.remove(sourceFile);
+    }
+    pendingInputFiles.remove(sourceFile);
+
+    return res;
   }
   
   public static Result compile(String source, String moduleName, String file) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
@@ -217,12 +225,6 @@
 
       remainingInput = source;
       
-      // TODO we need better circular dependency handling
-      if (currentlyProcessing.contains(moduleName))
-        throw new IllegalStateException("circular processing");
-
-      currentlyProcessing.add(moduleName);
-      
       driverResult.addEditorService(
         ATermCommands.atermFromString(
           "Builders(\"sugarj checking\", [SemanticObserver(Strategy(\"sugarj-analyze\"))])"));
@@ -264,8 +266,6 @@
       
       // COMPILE the generated java file
       compileGeneratedJavaFile();
-      currentlyProcessing.remove(moduleName);
-      pendingInputFiles.remove(moduleName);
       
       driverResult.setSugaredSyntaxTree(makeSugaredSyntaxTree());
       if (currentTransProg != null)
@@ -571,261 +571,79 @@
     
     log.beginTask("processing", "PROCESS the desugared import declaration.");
     try {
-      String importModule = extractImportedModuleName(toplevelDecl);
-
-      log.beginTask("Generate Java code");
-      try {
-        driverResult.appendToFile(javaOutFile, SDFCommands.prettyPrintJava(toplevelDecl, interp) + "\n");
-      } finally {
-        log.endTask();
-      }
+      String importModule = ModuleSystemCommands.extractImportedModuleName(toplevelDecl, interp);
 
       // TODO handle import declarations with asterisks, e.g. import foo.*;
       
-      String importModuleRelativePath = FileCommands.getRelativeModulePath(importModule);
-      boolean isStdLibModule = importModuleRelativePath.startsWith("org/sugarj/"); 
+      String modulePath = FileCommands.getRelativeModulePath(importModule);
+  
+      boolean success = processImport(modulePath, toplevelDecl);
       
-      List<URI> files = searchClassFiles(importModuleRelativePath, isStdLibModule);
-
-      URI importModuleSourceFile = null;
-      importModuleSourceFile = searchSugjFile(importModuleRelativePath, false);
-      if (importModuleSourceFile == null)
-        importModuleSourceFile = searchJavaFile(importModuleRelativePath, false);
-
-      if (// the imported module was given as input by the user
-          importModuleSourceFile != null && pendingInputFiles.contains(FileCommands.fileName(importModuleSourceFile)) ||
-          // class file could not be found
-          files.isEmpty() && !isStdLibModule && !importModuleRelativePath.endsWith("*") && importModuleSourceFile != null ||
-          // source file is newer then the class file
-          importModuleSourceFile != null && !files.isEmpty() && new File(importModuleSourceFile).lastModified() > new File(files.get(0)).lastModified()) {
-
-        log.log("Need to compile the imported module first ; processing it now.");
-        compile(importModuleSourceFile);
-        log.log("CONTINUE PROCESSING'" + moduleName + "'.");
-        
-        // try again
-        files = searchClassFiles(importModuleRelativePath, isStdLibModule);
-      }
+      URI sourceFile = ModuleSystemCommands.locateSourceFile(modulePath);
       
-      if (!files.isEmpty()) {
-        log.log("Found imported module on the class path.");
-        log.log(files.get(0).toString());
-      }
-      else
-        ATermCommands.setErrorMessage(toplevelDecl, "module not found " + importModule);
-      
-      for (URI importModuleClassFileURI : files)
-      {
-        URL importModuleClassFile = importModuleClassFileURI.toURL();
-        driverResult.addFileDependency(importModuleClassFile.getPath());
-        
-        if (importModuleSourceFile != null)
-          driverResult.addFileDependency(importModuleSourceFile.getPath());
+      if (sourceFile != null &&
+          !modulePath.startsWith("org/sugarj") &&
+          !modulePath.endsWith("*")) {
         
-        log.log(importModuleClassFile.toString());
-        
-        String thisRelativePath = importModuleRelativePath;
-        
-        if (thisRelativePath.endsWith("*"))
-        {
-          thisRelativePath = thisRelativePath.substring(0, thisRelativePath.length() - 1);
-          thisRelativePath += FileCommands.fileName(importModuleClassFile);
-        }
-        
-	      URL importModuleSDFFile =
-	        new URL(importModuleClassFile.getProtocol() + ":" +
-	                importModuleClassFile.getPath().substring(0, importModuleClassFile.getPath().length() - 5) + "sdf"); 
-	      //searchSdfFile(importModuleRelativePath, isStdLibModule);
-
-	      URL importModuleSTRFile = 
-	        new URL(importModuleClassFile.getProtocol() + ":" +
-	                importModuleClassFile.getPath().substring(0, importModuleClassFile.getPath().length() - 5) + "str");
-	      //searchStrFile(importModuleRelativePath, isStdLibModule);
-	      
-	      URL importModuleSERVFile = 
-          new URL(importModuleClassFile.getProtocol() + ":" +
-                  importModuleClassFile.getPath().substring(0, importModuleClassFile.getPath().length() - 5) + "serv");
-	
-	      if (new File(importModuleSDFFile.getPath()).exists()) {
-	        driverResult.addFileDependency(importModuleSDFFile.getPath());
-	        
-	        log.beginTask("Incorporation", "Incorporate the imported grammar " + thisRelativePath);
-	        try {
-	          // build extension of current grammar
-	          String newGrammarName = 
-	            FileCommands.hashFileName("sugarj", currentGrammarModule + thisRelativePath);
-	            
-	
-	          String newGrammar =
-	              Environment.tmpDir + sep + newGrammarName + ".sdf";
-	
-	          String grammar = 
-	            "module " + newGrammarName + "\n"
-            + "imports " + currentGrammarModule + "\n"
-            + "        " + thisRelativePath;
-	          
-	          driverResult.generateFile(newGrammar, grammar);
-	
-	          currentGrammarModule = newGrammarName;
-	          currentGrammarSDF = newGrammar;
-	
-	          availableSDFImports.add(thisRelativePath);
-	        } finally {
-	          log.endTask();
-	        }
-	      }
-	      
-
-	
-	      if (new File(importModuleSTRFile.getPath()).exists()) {
-	        driverResult.addFileDependency(importModuleSTRFile.getPath());
-	        
-	        log.beginTask(
-	            "Incorporation",
-	            "Incorporate the imported desugaring rules " + thisRelativePath);
-	        try {
-	          // build extension of current transformation
-	          String newTransName =
-	            FileCommands.hashFileName("sugarj", currentTransModule + thisRelativePath);
-	
-	          String newTrans = Environment.tmpDir + sep + newTransName + ".str";
-	
-	          String trans =
-	            "module " + newTransName + "\n"
-              + "imports " + currentTransModule + "\n"
-              + "        " + thisRelativePath;
-	          
-	          driverResult.generateFile(newTrans, trans);
-	
-	          currentTransModule = newTransName;
-	          currentTransSTR = newTrans;
-	
-	          availableSTRImports.add(thisRelativePath);
-	
-	          /*
-	           * do not delete any files here, since they are still
-	           * imported into the new grammar
-	           */
-	        } finally {
-	          log.endTask();
-	        }
-	      }
-	      
-	      if (new File(importModuleSERVFile.getPath()).exists()) {
-          driverResult.addFileDependency(importModuleSERVFile.getPath());
+        URI classUri = ModuleSystemCommands.searchFile(modulePath, ".class");
+        if (!success ||
+            pendingInputFiles.contains(sourceFile) ||
+            new File(sourceFile).lastModified() > new File(classUri).lastModified()) {
+
+          log.log("Need to compile the imported module first ; processing it now.");
+          compile(sourceFile);
+          log.log("CONTINUE PROCESSING'" + moduleName + "'.");
           
-          log.beginTask("Incorporation", "Incorporate the imported editor services " + thisRelativePath);
-          try {
-            BufferedReader reader = new BufferedReader(new FileReader(importModuleSERVFile.getPath()));
-            String line;
-            
-            while ((line = reader.readLine()) != null)
-              driverResult.addEditorService(ATermCommands.atermFromString(line));
-          } finally {
-            log.endTask();
-          }
+          // try again
+          success = processImport(modulePath, toplevelDecl);
         }
       }
       
-    } finally {
-      log.endTask();
-    }
-  }
-
-  private String extractImportedModuleName(IStrategoTerm toplevelDecl) throws IOException {
-    String name = null;
-    log.beginTask("Extracting", "Extract name of imported module");
-    try {
-      if (isApplication(toplevelDecl, "TypeImportDec"))
-        name = SDFCommands.prettyPrintJava(toplevelDecl.getSubterm(0), interp);
+      if (!success)
+        ATermCommands.setErrorMessage(toplevelDecl, "module not found " + importModule);
       
-      if (isApplication(toplevelDecl, "TypeImportOnDemandDec"))
-        name = SDFCommands.prettyPrintJava(toplevelDecl.getSubterm(0), interp) + ".*";
-    } finally {
-      log.endTask(name);
-    }
-    return name;
-  }
-
-
-  private URI searchFile(String what, String where, String extension, String relativePath, Set<String> searchPath, boolean searchStdLib) throws MalformedURLException {
-    URI result = null;
-    log.beginTask("Searching", "Search for " + what);
-    try {
-      ClassLoader cl = createClassLoader(where, searchPath, searchStdLib);
-      URL url = cl.getResource(relativePath + extension);
-      if (url != null)
-        result = url.toURI();
-    } catch (URISyntaxException e) {
-      e.printStackTrace();
     } finally {
-      log.endTask(result != null);
+      log.endTask();
     }
-    
-    return result;
   }
   
-//  private URL searchClassFile(String relativePath, boolean searchStdLib) throws MalformedURLException {
-//    return searchFile("class file", "compiled files", ".class", relativePath, includePath, searchStdLib);
-//  }
-  
-  private List<URI> searchClassFiles(String relativePath, boolean searchStdLib) throws MalformedURLException {
-    List<URI> res = new ArrayList<URI>();
+  private boolean processImport(String modulePath, IStrategoTerm importTerm) throws IOException {
+    boolean success = false;
     
-    URI classURL = searchFile("class file", "compiled files", ".class", relativePath, includePath, searchStdLib);
-    
-    if (classURL != null)
-    {
-      res.add(classURL);
-      return res;
+    success |= ModuleSystemCommands.importClass(
+        modulePath, 
+        importTerm, 
+        javaOutFile,
+        interp, 
+        driverResult);
+
+    String grammarModule = ModuleSystemCommands.importSdf(
+        modulePath, 
+        currentGrammarModule, 
+        availableSDFImports, 
+        driverResult);
+    if (grammarModule != null) {
+      success = true;
+      currentGrammarSDF = grammarModule;
+      currentGrammarModule = FileCommands.fileName(grammarModule);
+    }
+    
+    String transModule = ModuleSystemCommands.importStratego(
+        modulePath, 
+        currentTransModule, 
+        availableSTRImports, 
+        driverResult);
+    if (transModule != null) {
+      success = true;
+      currentTransSTR = transModule;
+      currentTransModule = FileCommands.fileName(transModule);
     }
     
-    List<String> path = new ArrayList<String>(includePath);
-    path.add(StdLib.stdLibDir.getPath());
-    
-    if (relativePath.endsWith("/*"))
-      return ResourceList.getResources(relativePath, path, "class");
+    success |= ModuleSystemCommands.importEditorServices(modulePath, driverResult);
     
-    return res;
-  }
-
-  private URI searchJavaFile(String relativePath, boolean searchStdLib) throws MalformedURLException {
-    return searchFile("java file", "source files", ".java", relativePath, Environment.srcPath, searchStdLib);
-  }
-
-  private URI searchSugjFile(String relativePath, boolean searchStdLib) throws MalformedURLException {
-    return searchFile("SugarJ file", "source files", ".sugj", relativePath, Environment.srcPath, searchStdLib);
+    return success;
   }
 
-//  private URL searchSdfFile(String relativePath, boolean searchStdLib) throws MalformedURLException {
-//    return searchFile("compiled grammar", "compiled files", SDF_OUTPUT_EXTENSION, relativePath, includePath, searchStdLib);
-//  }
-
-//  private URL searchStrFile(String relativePath, boolean searchStdLib) throws MalformedURLException {
-//    return searchFile("compiled desugaring", "compiled files", STR_OUTPUT_EXTENSION, relativePath, includePath, searchStdLib);
-//  }
-  
-  private ClassLoader createClassLoader(String what, Collection<String> path, boolean searchStdLib) throws MalformedURLException {
-    // log.beginTask("Creating", "Create a class loader for " + what);
-    try {
-      URL[] urls = new URL[path.size() + 1];
-      
-      int i = 0;
-      for (String include : path)
-        urls[i++] = new File(include).toURI().toURL();
-
-      urls[urls.length - 1] = new File(StdLib.stdLibDir.getPath()).toURI().toURL();
-      
-      /*
-       * we use 'null' as the parent class loader purposely, so
-       * that only the given urls are searched.
-       */
-      return new URLClassLoader(urls, null);
-    } finally {
-      // log.endTask();
-    }
-  }
-  
   private void processJavaTypeDec(IStrategoTerm toplevelDecl) throws IOException {
     log.beginTask(
         "processing",
@@ -909,7 +727,6 @@
               " * for extracted sugar.\n" +
               " */\n" +
               (isPublic ? "public " : "") + "class " + mainModuleName + "{}\n");
-
         
 
         if (isPublic)
@@ -1078,8 +895,8 @@
     initializeCaches();
     
     allInputFiles = new ArrayList<URI>();
-    pendingInputFiles = new ArrayList<String>();
-    currentlyProcessing = new ArrayList<String>();
+    pendingInputFiles = new ArrayList<URI>();
+    currentlyProcessing = new ArrayList<URI>();
   }
   
   private void init(String moduleName) throws FileNotFoundException, IOException, InvalidParseTableException {
@@ -1144,7 +961,7 @@
         URI uri = url.toURI();
         
         allInputFiles.add(uri);
-        pendingInputFiles.add(FileCommands.fileName(uri));
+        pendingInputFiles.add(uri);
       }
       
       for (URI source : allInputFiles)

Added: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ModuleSystemCommands.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ModuleSystemCommands.java	Mon Mar 14 10:26:24 2011	(r22392)
@@ -0,0 +1,244 @@
+package org.sugarj.driver;
+
+import static org.sugarj.driver.ATermCommands.isApplication;
+import static org.sugarj.driver.Environment.includePath;
+import static org.sugarj.driver.Environment.sep;
+import static org.sugarj.driver.Log.log;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.Collection;
+import java.util.List;
+import java.util.Set;
+
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.HybridInterpreter;
+import org.sugarj.stdlib.StdLib;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ */
+public class ModuleSystemCommands {
+  
+  /**
+   * 
+   * @param modulePath
+   * @param importTerm
+   * @param javaOutFile
+   * @param interp
+   * @param driverResult
+   * @return true iff a class file existed.
+   * @throws IOException
+   */
+  public static boolean importClass(String modulePath, IStrategoTerm importTerm, String javaOutFile, HybridInterpreter interp, Result driverResult) throws IOException {
+    if (searchFile(modulePath, ".class") == null)
+      return false;
+    
+    log.beginTask("Generate Java code");
+    try {
+      driverResult.appendToFile(javaOutFile, SDFCommands.prettyPrintJava(importTerm, interp) + "\n");
+    } finally {
+      log.endTask();
+    }
+    
+    return true;
+  }
+  
+  /**
+   * 
+   * @param modulePath
+   * @param currentGrammarModule
+   * @param availableSDFImports
+   * @param driverResult
+   * @return path to new grammar or null if no sdf file existed.
+   * @throws IOException 
+   */
+  public static String importSdf(String modulePath, String currentGrammarModule, List<String> availableSDFImports, Result driverResult) throws IOException {
+    URI sdfUri = searchFile(modulePath, ".sdf");
+    
+    if (sdfUri == null)
+      return null;
+    
+    driverResult.addFileDependency(sdfUri.getPath());
+    
+    log.beginTask("Incorporation", "Incorporate the imported grammar " + modulePath);
+    try {
+      // build extension of current grammar
+      String newGrammarName = 
+        FileCommands.hashFileName("sugarj", currentGrammarModule + modulePath);
+        
+
+      String newGrammar = Environment.tmpDir + sep + newGrammarName + ".sdf";
+
+      String grammar = 
+        "module " + newGrammarName + "\n"
+      + "imports " + currentGrammarModule + "\n"
+      + "        " + modulePath;
+      
+      driverResult.generateFile(newGrammar, grammar);
+
+      availableSDFImports.add(modulePath);
+
+      return newGrammar;
+    } finally {
+      log.endTask();
+    }
+  }
+  
+  /**
+   * 
+   * @param modulePath
+   * @param currentTransModule
+   * @param availableSTRImports
+   * @param driverResult
+   * @return path to new Stratego module or null of no str file existed
+   * @throws IOException 
+   */
+  public static String importStratego(String modulePath, String currentTransModule, List<String> availableSTRImports, Result driverResult) throws IOException {
+    URI strUri = searchFile(modulePath, ".str");
+    
+    if (strUri == null)
+      return null;
+    
+    driverResult.addFileDependency(strUri.getPath());
+    
+    log.beginTask("Incorporation", "Incorporate the imported desugaring rules " + modulePath);
+    try {
+      // build extension of current transformation
+      String newTransName =
+        FileCommands.hashFileName("sugarj", currentTransModule + modulePath);
+
+      String newTrans = Environment.tmpDir + sep + newTransName + ".str";
+
+      String trans =
+          "module " + newTransName + "\n"
+        + "imports " + currentTransModule + "\n"
+        + "        " + modulePath;
+      
+      driverResult.generateFile(newTrans, trans);
+
+      availableSTRImports.add(modulePath);
+
+      return newTrans;
+    } finally {
+      log.endTask();
+    }
+  }
+  
+  /**
+   * 
+   * @param modulePath
+   * @param driverResult
+   * @return true iff a serv file existed.
+   * @throws IOException
+   */
+  public static boolean importEditorServices(String modulePath, Result driverResult) throws IOException {
+    URI servUri = searchFile(modulePath, ".serv");
+    
+    if (servUri == null)
+      return false;
+    
+    driverResult.addFileDependency(servUri.getPath());
+    
+    log.beginTask("Incorporation", "Incorporate the imported editor services " + modulePath);
+    try {
+      BufferedReader reader = new BufferedReader(new FileReader(new File(servUri)));
+      String line;
+      
+      while ((line = reader.readLine()) != null)
+        driverResult.addEditorService(ATermCommands.atermFromString(line));
+      
+      return true;
+    } finally {
+      log.endTask();
+    }
+  }
+  
+  public static URI locateSourceFile(String modulePath) {
+    if (modulePath.startsWith("org/sugarj"))
+      return null;
+    
+    URI result = searchFile(modulePath, ".sugj");
+    
+    if (result == null)
+      result = searchFile(modulePath, ".java");
+    
+    return result;
+  }
+  
+  
+  
+  public static String extractImportedModuleName(IStrategoTerm toplevelDecl, HybridInterpreter interp) throws IOException {
+    String name = null;
+    log.beginTask("Extracting", "Extract name of imported module");
+    try {
+      if (isApplication(toplevelDecl, "TypeImportDec"))
+        name = SDFCommands.prettyPrintJava(toplevelDecl.getSubterm(0), interp);
+      
+      if (isApplication(toplevelDecl, "TypeImportOnDemandDec"))
+        name = SDFCommands.prettyPrintJava(toplevelDecl.getSubterm(0), interp) + ".*";
+    } finally {
+      log.endTask(name);
+    }
+    return name;
+  }
+
+  
+  
+  /**
+   * 
+   * @param relativePath
+   * @param fileExtension including leading "."
+   * @return URI or null.
+   */
+  public static URI searchFile(String relativePath, String fileExtension) {
+    return searchFile(relativePath, fileExtension, includePath);
+  }
+
+  private static URI searchFile(String relativePath, String extension, Set<String> searchPath) {
+    URI result = null;
+    try {
+      ClassLoader cl;
+      try {
+        cl = createClassLoader(searchPath);
+      } catch (MalformedURLException e) {
+        throw new IllegalStateException("could not create class loader", e);
+      }
+      URL url = cl.getResource(relativePath + extension);
+      if (url != null)
+        result = url.toURI();
+    } catch (URISyntaxException e) {
+      e.printStackTrace();
+    }
+    
+    return result;
+  }
+  
+  private static ClassLoader createClassLoader(Collection<String> path) throws MalformedURLException {
+    // log.beginTask("Creating", "Create a class loader for " + what);
+    try {
+      URL[] urls = new URL[path.size() + 1];
+      
+      int i = 0;
+      for (String include : path)
+        urls[i++] = new File(include).toURI().toURL();
+
+      urls[urls.length - 1] = new File(StdLib.stdLibDir.getPath()).toURI().toURL();
+      
+      /*
+       * we use 'null' as the parent class loader purposely, so
+       * that only the given urls are searched.
+       */
+      return new URLClassLoader(urls, null);
+    } finally {
+      // log.endTask();
+    }
+  }
+}

From L.C.L.Kats at tudelft.nl  Mon Mar 14 14:20:05 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 14 Mar 2011 13:20:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22393 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/io
Message-ID: <20110314132005.085ECCC122@mx4.tudelft.nl>

Author: LennartKats
Date: Mon Mar 14 13:20:04 2011
New Revision: 22393
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22393&sc=1

Log:
Added a new java.io.Reader-based API, deprecated the old stream-based one, where we can only guess what the encoding is supposed to be

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/io/SGLR.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/io/SGLR.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/io/SGLR.java	Mon Mar 14 10:26:24 2011	(r22392)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/io/SGLR.java	Mon Mar 14 13:20:04 2011	(r22393)
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.Reader;
 import java.util.Timer;
 import java.util.TimerTask;
 
@@ -78,7 +79,7 @@
 	}
 
 	/**
-	 * @deprecated Call {@link #parse(InputStream, String)} instead.
+	 * @deprecated Call {@link #parse(Reader, String)} instead.
 	 */
 	public final Object parse(InputStream fis)
 			throws BadTokenException, TokenExpectedException, ParseException,
@@ -86,16 +87,40 @@
 		return parse(fis, null, null);
 	}
 
+	/**
+	 * @deprecated Call {@link #parse(Reader, String)} instead.
+	 */
 	public final Object parse(InputStream fis, String filename)
 			throws BadTokenException, TokenExpectedException, ParseException,
 			SGLRException, SGLRException, IOException {
 		return parse(fis, null, null);
 	}
 
-	public Object parse(InputStream fis, String filename, String startSymbol)
+	/**
+	 * @deprecated Call {@link #parse(Reader, String, String)} instead.
+	 */
+	public final Object parse(InputStream fis, String filename, String startSymbol)
+			throws BadTokenException, TokenExpectedException, ParseException,
+			SGLRException, IOException {
+		return parse(new InputStreamReader(fis), filename, startSymbol);
+	}
+
+	public final Object parse(Reader in) throws BadTokenException,
+			TokenExpectedException, ParseException, SGLRException,
+			SGLRException, IOException {
+		return parse(in, null, null);
+	}
+
+	public final Object parse(Reader in, String filename)
+			throws BadTokenException, TokenExpectedException, ParseException,
+			SGLRException, SGLRException, IOException {
+		return parse(in, null, null);
+	}
+
+	public Object parse(Reader in, String filename, String startSymbol)
 			throws BadTokenException, TokenExpectedException, ParseException,
 			SGLRException, IOException {
-		String input = FileTools.loadFileAsString(new InputStreamReader(fis));
+		String input = FileTools.loadFileAsString(in);
 		return parse(input, filename, startSymbol);
 	}
 

From n.bruning at student.tudelft.nl  Mon Mar 14 16:09:57 2011
From: n.bruning at student.tudelft.nl (Nathan Bruning)
Date: Mon, 14 Mar 2011 15:09:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22394 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments
Message-ID: <20110314150957.856F4108C034@mx3.tudelft.nl>

Author: NathanBruning
Date: Mon Mar 14 15:09:56 2011
New Revision: 22394
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22394&sc=1

Log:
Fix NullPointerException for a failing all/map: term is replaced with null

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java	Mon Mar 14 13:20:04 2011	(r22393)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java	Mon Mar 14 15:09:56 2011	(r22394)
@@ -70,7 +70,9 @@
 	
 	@Override
 	public IStrategoTerm replaceTerm(IStrategoTerm term, IStrategoTerm origin) {
-		if (term == origin) {
+		if (term == null) {
+			return term;
+		} else if (term == origin) {
 			return term;
 		} else if (term.isList()) {
 			if (term.getSubtermCount() == origin.getSubtermCount()

From n.bruning at student.tudelft.nl  Mon Mar 14 16:58:05 2011
From: n.bruning at student.tudelft.nl (Nathan Bruning)
Date: Mon, 14 Mar 2011 15:58:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22395 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <20110314155805.4B650CC132@mx4.tudelft.nl>

Author: NathanBruning
Date: Mon Mar 14 15:58:04 2011
New Revision: 22395
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22395&sc=1

Log:
Use EditorIOAgent for path resolving

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Mon Mar 14 15:09:56 2011	(r22394)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Mon Mar 14 15:58:04 2011	(r22395)
@@ -8,17 +8,15 @@
 import java.util.Collections;
 import java.util.Map;
 import org.eclipse.core.resources.IResource;
-import org.eclipse.core.resources.ResourcesPlugin;
-import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
-import org.eclipse.core.runtime.Path;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.io.FileTools;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 import org.strategoxt.imp.runtime.stratego.SourceAttachment;
 import org.strategoxt.lang.WeakValueHashMap;
 
@@ -110,9 +108,11 @@
 			throw new OperationCanceledException();
 		SGLRParseController controller = getController() == null ? null : getController();
 		IResource resource = controller == null ? null : controller.getResource();
-		if(resource==null && filename !=null && new File(filename).exists()){
-			IPath path = new Path(filename).makeRelativeTo(ResourcesPlugin.getWorkspace().getRoot().getLocation());
-			resource=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
+		if(resource==null && filename !=null) {
+			File file = new File(filename);
+			if (file.exists()) {
+				resource = EditorIOAgent.getResource(file);
+			}
 		}
 		if (controller != null || resource != null)
 			SourceAttachment.putSource(result, resource, controller);

From R.B.Vermaas at tudelft.nl  Tue Mar 15 09:39:14 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 15 Mar 2011 08:39:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22396 - hydra/jobs
Message-ID: <20110315083914.5AF9DCC0E8@mx4.tudelft.nl>

Author: rob
Date: Tue Mar 15 08:39:13 2011
New Revision: 22396
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22396&sc=1

Log:
explicitly name editors in the build, disable editor.spoofax for now as it does not build

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Mon Mar 14 15:58:04 2011	(r22395)
+++ hydra/jobs/spoofax-imp.nix	Tue Mar 15 08:39:13 2011	(r22396)
@@ -89,7 +89,13 @@
 	                 ${spoofax}/org.spoofax.interpreter.library.jsglr \
 	                 ${spoofax}/org.spoofax.jsglr \
 	                 ${spoofax}/org.spoofax.terms \
-                     ${spoofaxImp}/org.strategoxt.imp.editors.* \
+                         ${spoofaxImp}/org.strategoxt.imp.editors.aster \
+                         ${spoofaxImp}/org.strategoxt.imp.editors.aterm \
+                         ${spoofaxImp}/org.strategoxt.imp.editors.editorservice \
+                         ${spoofaxImp}/org.strategoxt.imp.editors.pp \
+                         ${spoofaxImp}/org.strategoxt.imp.editors.rtg \
+                         ${spoofaxImp}/org.strategoxt.imp.editors.sdf \
+                         ${spoofaxImp}/org.strategoxt.imp.editors.stratego \
                      ${spoofaxImp}/org.strategoxt.imp.testing \
                          ${spoofaxImp}/org.strategoxt.imp.feature \
 	                 ${spoofaxImp}/org.strategoxt.imp.generator \

From R.B.Vermaas at tudelft.nl  Tue Mar 15 10:00:04 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 15 Mar 2011 09:00:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22397 - hydra/jobs
Message-ID: <20110315090004.DE6D07F8017@mx1.tudelft.nl>

Author: rob
Date: Tue Mar 15 09:00:04 2011
New Revision: 22397
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22397&sc=1

Log:
remove gwt related stuff from org.spoofax.terms

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Mar 15 08:39:13 2011	(r22396)
+++ hydra/jobs/spoofax-imp.nix	Tue Mar 15 09:00:04 2011	(r22397)
@@ -120,7 +120,11 @@
 	        cp -R ${strategoxtJavaBackend} org.strategoxt.strj
 	        
 	        chmod -R +w .
-                rm -f org.spoofax.jsglr/src/org/spoofax/jsglr/shared/RemoteParseTableService* org.spoofax.jsglr/src/org/spoofax/client/JSGLREntryPoint.java org.spoofax.jsglr/src/org/spoofax/jsglr/server/RemoteParseTableServiceImpl.java
+                rm -f \
+                   org.spoofax.jsglr/src/org/spoofax/jsglr/shared/RemoteParseTableService* \
+                   org.spoofax.jsglr/src/org/spoofax/client/JSGLREntryPoint.java \
+                   org.spoofax.jsglr/src/org/spoofax/jsglr/server/RemoteParseTableServiceImpl.java \
+                   org.spoofax.terms/src/org/spoofax/gwt/
                 sed -Ei 's|\.[0-9]\{12\}|.qualifier|g' org.strategoxt.imp.updatesite/site.xml
                 sed -Ei 's/(version="([0-9]+\.){3,}[0-9]+)"/\1-r${spoofaxRev}"/' org.strategoxt.imp.updatesite/site.xml
                 sed -Ei 's|\.[0-9]\{12\}|.qualifier|g' org.strategoxt.imp.feature/feature.xml

From R.B.Vermaas at tudelft.nl  Tue Mar 15 10:23:55 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 15 Mar 2011 09:23:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22398 - hydra/jobs
Message-ID: <20110315092355.883A27F800F@mx1.tudelft.nl>

Author: rob
Date: Tue Mar 15 09:23:55 2011
New Revision: 22398
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22398&sc=1

Log:


Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Mar 15 09:00:04 2011	(r22397)
+++ hydra/jobs/spoofax-imp.nix	Tue Mar 15 09:23:55 2011	(r22398)
@@ -120,7 +120,7 @@
 	        cp -R ${strategoxtJavaBackend} org.strategoxt.strj
 	        
 	        chmod -R +w .
-                rm -f \
+                rm -rf \
                    org.spoofax.jsglr/src/org/spoofax/jsglr/shared/RemoteParseTableService* \
                    org.spoofax.jsglr/src/org/spoofax/client/JSGLREntryPoint.java \
                    org.spoofax.jsglr/src/org/spoofax/jsglr/server/RemoteParseTableServiceImpl.java \

From L.C.L.Kats at tudelft.nl  Tue Mar 15 10:41:47 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 15 Mar 2011 09:41:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22399 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen
Message-ID: <20110315094147.9C85D7F803C@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Mar 15 09:41:47 2011
New Revision: 22399
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22399&sc=1

Log:
Module name seems to be 'common', not 'Common'; breaks with case-sensitive file systems

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Tue Mar 15 09:23:55 2011	(r22398)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/buildscripts.str	Tue Mar 15 09:41:47 2011	(r22399)
@@ -13,7 +13,7 @@
 imports 
 	include/SpoofaxLang
 imports 
-	Common
+	common
 
 rules
 	

From R.B.Vermaas at tudelft.nl  Tue Mar 15 11:00:11 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 15 Mar 2011 10:00:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22400 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110315100011.1D5E0CC0F8@mx4.tudelft.nl>

Author: rob
Date: Tue Mar 15 10:00:10 2011
New Revision: 22400
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22400&sc=1

Log:
rename strategoxt.xml to strategoxt-build.xml

Added:
   strategoxt/branches/strategoxt-java/strategoxt-build.xml
      - copied unchanged from r22387, strategoxt/branches/strategoxt-java/strategoxt.xml
Modified:
   strategoxt/branches/strategoxt-java/build.xml

Modified: strategoxt/branches/strategoxt-java/build.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/build.xml	Tue Mar 15 09:41:47 2011	(r22399)
+++ strategoxt/branches/strategoxt-java/build.xml	Tue Mar 15 10:00:10 2011	(r22400)
@@ -2,7 +2,7 @@
 <project name="org.strategoxt.ant.test" basedir="." default="all">
     <taskdef resource="net/sf/antcontrib/antlib.xml"/>
 
-    <import file="strategoxt.xml" />
+    <import file="strategoxt-build.xml" />
     <property name="version" value="0.17.92"/>
     <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
 
@@ -907,4 +907,4 @@
     </target>
 
 
-</project>
\ No newline at end of file
+</project>

Copied: strategoxt/branches/strategoxt-java/strategoxt-build.xml (from r22387, strategoxt/branches/strategoxt-java/strategoxt.xml)
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ strategoxt/branches/strategoxt-java/strategoxt-build.xml	Tue Mar 15 10:00:10 2011	(r22400, copy of r22387, strategoxt/branches/strategoxt-java/strategoxt.xml)
@@ -0,0 +1,470 @@
+<?xml version="1.0"?>
+<project name="org.strategoxt.ant" basedir="." >
+    <property name="nativepath" value="${sdf}/bin/"/>
+    <property name="version" value="0"/>
+    <property name="revision" value="0"/>
+    <property name="sdf" value=""/>
+    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
+
+    <macrodef name="strj-test">
+        <attribute name="input" />
+        <sequential>
+            <log message="Testing @{input}" />
+            <dirname file="@{input}" property="@{input}.dirname" />
+            <basename file="@{input}" property="@{input}.basename" suffix=".str" />
+            <mkdir dir="${@{input}.dirname}/${@{input}.basename}/test" />
+            <strj-for-test input="@{input}" output="${@{input}.dirname}/${@{input}.basename}/test/Main.java" package="test">
+                <strjargs>
+                    <arg value="-m" />
+                    <arg value="main-${@{input}.basename}" />
+                    <arg value="-la" />
+                    <arg value="stratego-lib" />
+                    <arg value="-la" />
+                    <arg value="stratego-gpp" />
+                    <arg value="-la" />
+                    <arg value="stratego-xtc" />
+                    <arg value="-la" />
+                    <arg value="stratego-aterm" />
+                    <arg value="-la" />
+                    <arg value="stratego-rtg" />
+                    <arg value="-la" />
+                    <arg value="stratego-sglr" />
+                    <arg value="-la" />
+                    <arg value="java-front" />
+                    <arg value="-I" />
+                    <arg value="${syntaxaterm}" />
+                    <arg value="-I" />
+                    <arg value="${syntaxbox}" />
+                    <arg value="-I" />
+                    <arg value="generated/" />
+                    <arg value="-I" />
+                    <arg value="${@{input}.dirname}" />
+                </strjargs>
+                <str-deps>
+                    <srcfiles dir="." includes="*.jar" />
+                </str-deps>
+            </strj-for-test>
+            <javac srcdir="${@{input}.dirname}/${@{input}.basename}"
+                           destdir="${@{input}.dirname}/${@{input}.basename}"
+                           classpath="./strategoxt.jar"
+                           source="1.5"
+                           target="1.5"
+                           nowarn="on"
+                           fork="true"
+                           debug="true"
+                           debuglevel="source"
+                           compiler="classic"
+                    />
+             <java fork="true" classname="test.Main" failonerror="true" dir="${@{input}.dirname}">
+                 <classpath>
+                    <pathelement location="./strategoxt.jar"/>
+                    <pathelement path="${@{input}.dirname}/${@{input}.basename}"/>
+                 </classpath>
+             </java>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="log">
+        <attribute name="message" />
+        <sequential>
+            <echo message="========================================================================================"/>
+            <echo message="@{message}"/>
+            <echo message="========================================================================================"/>
+            <echo message=""/>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="pack-sdf">
+        <attribute name="input" />
+        <attribute name="output" />
+        <element name="args" optional="true"/>
+        <element name="sdf-deps" optional="true"/>
+        <sequential>
+            <uptodate-mio input="@{input}" output="@{output}" type="pack-sdf">
+                <action>
+                    <java classname="run" failonerror="true">
+                        <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                        <args />
+                    </java>
+                </action>
+                <deps>
+                    <sdf-deps />
+                </deps>
+            </uptodate-mio>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="uptodate-io">
+        <attribute name="type" />
+        <attribute name="input" />
+        <attribute name="output" />
+        <element name="action" />
+        <sequential>
+            <condition property="@{input}.@{type}">
+                <uptodate srcfile="@{input}" targetfile="@{output}" />
+            </condition>
+            <if>
+                <equals arg1="${@{input}.@{type}}" arg2="true" />
+                <then>
+                    <echo message="@{output} is up-to-date" />
+                </then>
+                <else>
+                    <log message="@{input} -> @{output}"/>
+                    <action />
+                </else>
+            </if>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="uptodate-mio">
+        <attribute name="type" />
+        <attribute name="input" />
+        <attribute name="output" />
+        <element name="action" />
+        <element name="deps" />
+        <sequential>
+            <condition property="@{input}.@{type}">
+                <uptodate targetfile="@{output}">
+                    <srcfiles dir="." includes="@{input}" />
+                    <deps/>
+                </uptodate>
+            </condition>
+            <if>
+                <equals arg1="${@{input}.@{type}}" arg2="true" />
+                <then>
+                    <echo message="@{output} is up-to-date" />
+                </then>
+                <else>
+                    <log message="@{input} -> @{output}"/>
+                    <action />
+                </else>
+            </if>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="sglri">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="parsetable" />
+        <element name="args" optional="true"/>
+        <sequential>
+            <uptodate-io input="@{input}" output="@{output}" type="sglri">
+                <action>
+                    <java classname="org.spoofax.jsglr.Main" failonerror="true">
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="-p"/>
+                        <arg value="@{parsetable}"/>
+                        <arg value="--implode"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                        <args />
+                    </java>
+                </action>
+            </uptodate-io>
+         </sequential>
+    </macrodef>
+
+    <macrodef name="sdf2rtg">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="main" />
+        <sequential>
+            <uptodate-io input="@{input}" output="@{output}" type="sdf2rtg">
+                <action>
+                    <java classname="run" failonerror="true">
+                        <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="-m"/>
+                        <arg value="@{main}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                        <arg value="--ignore-missing-cons"/>
+                        <arg value="-Xnativepath"/>
+                        <arg value="${nativepath}"/>
+                    </java>
+                </action>
+            </uptodate-io>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="rtg2sig">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="main" />
+        <sequential>
+            <uptodate-io input="@{input}" output="@{output}" type="sdf2rtg">
+                <action>
+                    <java classname="run" failonerror="true">
+                        <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="--module"/>
+                        <arg value="@{main}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                    </java>
+                </action>
+            </uptodate-io>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="sdf2table">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="main" />
+        <sequential>
+            <uptodate-io input="@{input}" output="@{output}" type="sdf2table">
+                <action>
+                    <exec executable="${sdf}/bin/sdf2table">
+                        <arg value="-t"/>
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="-m"/>
+                        <arg value="@{main}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                    </exec>
+                </action>
+            </uptodate-io>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="ppgen">
+        <attribute name="input" />
+        <attribute name="output" />
+        <sequential>
+            <uptodate-io input="@{input}" output="@{output}" type="ppgen">
+                <action>
+                    <java classname="run" failonerror="true">
+                        <arg value="org.strategoxt.tools.main-ppgen"/>
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="-t"/>
+                        <arg value="-b"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}.af"/>
+                    </java>
+                    <java classname="run" failonerror="true">
+                        <arg value="org.strategoxt.tools.main-pp-pp-table"/>
+                        <arg value="-i"/>
+                        <arg value="@{output}.af"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                    </java>
+                </action>
+            </uptodate-io>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="sdf2generated">
+        <attribute name="base" />
+        <attribute name="main" />
+        <attribute name="pp" default="true" />
+        <element name="includeargs" optional="true" />
+        <element name="deps" optional="true" />
+        <sequential>
+            <pack-sdf input="@{base}.sdf" output="@{base}.def">
+                <includeargs />
+                <sdf-deps>
+                    <deps />
+                </sdf-deps>
+            </pack-sdf>
+            <sdf2table input="@{base}.def" output="@{base}.tbl" main="@{main}" />
+
+            <if>
+                <equals arg1="@{pp}" arg2="true" />
+                <then>
+                    <ppgen input="@{base}.def" output="@{base}.pp" />
+                </then>
+            </if>
+
+            <sdf2rtg input="@{base}.def" output="@{base}.rtg" main="@{main}" />
+            <rtg2sig input="@{base}.rtg" output="@{base}.str" main="@{main}" />
+        </sequential>
+    </macrodef>
+
+    <macrodef name="sdf2parenthesize">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="language" />
+        <attribute name="main" />
+        <attribute name="outputmodule" />
+        <element name="args" optional="true" />
+        <sequential>
+            <uptodate-io input="@{input}" output="@{output}" type="sdf2parenthesize">
+                <action>
+                    <java classname="run" failonerror="true">
+                        <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="-m"/>
+                        <arg value="@{main}"/>
+                        <arg value="--lang"/>
+                        <arg value="@{language}"/>
+                        <arg value="--omod"/>
+                        <arg value="@{outputmodule}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                        <args />
+                    </java>
+                </action>
+            </uptodate-io>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="gen-sdf-mix">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="main" />
+        <attribute name="name" />
+        <sequential>
+            <uptodate-io input="@{input}" output="@{output}" type="gen-sdf-mix">
+                <action>
+                    <java classname="run" failonerror="true">
+                        <arg value="org.strategoxt.tools.main-gen-sdf-mix"/>
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="--main"/>
+                        <arg value="@{main}"/>
+                        <arg value="--name"/>
+                        <arg value="@{name}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                        <arg value="-Xnativepath"/>
+                        <arg value="${nativepath}"/>
+                    </java>
+                </action>
+            </uptodate-io>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="strj-for-test">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="package" />
+        <element name="strjargs" optional="true" />
+        <element name="str-deps" optional="true" />
+        <sequential>
+            <uptodate-mio input="@{input}" output="@{output}" type="strj">
+                <action>
+                    <java classname="org.strategoxt.strj.Main" failonerror="true" classpath="./strategoxt.jar" fork="true">
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                        <arg value="-p"/>
+                        <arg value="@{package}"/>
+                        <arg value="-D"/>
+                        <arg value="VERSION_TERM=&quot;${version}&quot;"/>
+                        <arg value="-D"/>
+                        <arg value="SVN_REVISION_TERM=&quot;${revision}&quot;"/>
+                        <strjargs />
+                    </java>
+                </action>
+                <deps>
+                    <str-deps />
+                </deps>
+            </uptodate-mio>
+        </sequential>
+    </macrodef>
+
+
+    <macrodef name="strj">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="package" />
+        <element name="strjargs" optional="true" />
+        <element name="str-deps" optional="true" />
+        <sequential>
+            <uptodate-mio input="@{input}" output="@{output}" type="strj">
+                <action>
+                    <java classname="org.strategoxt.strj.Main" failonerror="true">
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                        <arg value="-p"/>
+                        <arg value="@{package}"/>
+                        <arg value="-D"/>
+                        <arg value="VERSION_TERM=&quot;${version}&quot;"/>
+                        <arg value="-D"/>
+                        <arg value="SVN_REVISION_TERM=&quot;${revision}&quot;"/>
+                        <strjargs />
+                    </java>
+                </action>
+                <deps>
+                    <str-deps />
+                </deps>
+            </uptodate-mio>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="strj-lib">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="package" />
+        <element name="strjlibargs" optional="true" />
+        <element name="str-deps" optional="true" />
+        <sequential>
+            <dirname file="@{input}" property="@{input}.dirname" />
+            <basename file="@{input}" property="@{input}.basename" suffix=".str" />
+            <uptodate-mio input="@{input}" output="@{output}" type="strj-lib">
+                <action>
+                    <strj input="@{input}" output="${@{input}.dirname}/lib${@{input}.basename}.ctree" package="@{package}">
+                        <strjargs>
+                            <arg value="--library"/>
+                            <arg value="-F"/>
+                            <strjlibargs />
+                        </strjargs>
+                    </strj>
+                    <strj input="${@{input}.dirname}/lib${@{input}.basename}.ctree" output="@{output}" package="@{package}">
+                        <strjargs>
+                            <arg value="--library"/>
+                            <strjlibargs />
+                        </strjargs>
+                    </strj>
+                </action>
+                <deps>
+
+                    <str-deps />
+                </deps>
+            </uptodate-mio>
+        </sequential>
+    </macrodef>
+
+    <macrodef name="gen-renamed-sdf-module">
+        <attribute name="input" />
+        <attribute name="output" />
+        <attribute name="main" />
+        <attribute name="name" />
+        <attribute name="prefix" />
+        <sequential>
+            <uptodate-io input="@{input}" output="@{output}" type="gen-renamed-sdf-module">
+                <action>
+                    <java classname="run" failonerror="true">
+                        <arg value="org.strategoxt.tools.main-gen-renamed-sdf-module"/>
+                        <arg value="-i"/>
+                        <arg value="@{input}"/>
+                        <arg value="--main"/>
+                        <arg value="@{main}"/>
+                        <arg value="--name"/>
+                        <arg value="@{name}"/>
+                        <arg value="--prefix"/>
+                        <arg value="@{prefix}"/>
+                        <arg value="-o"/>
+                        <arg value="@{output}"/>
+                        <arg value="-Xnativepath"/>
+                        <arg value="${nativepath}"/>
+                    </java>
+                </action>
+            </uptodate-io>
+        </sequential>
+    </macrodef>
+
+</project>

From R.B.Vermaas at tudelft.nl  Tue Mar 15 11:00:19 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 15 Mar 2011 10:00:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22401 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110315100019.0C1F4108C047@mx3.tudelft.nl>

Author: rob
Date: Tue Mar 15 10:00:18 2011
New Revision: 22401
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22401&sc=1

Log:
rename strategoxt.xml to strategoxt-build.xml

Deleted:
   strategoxt/branches/strategoxt-java/strategoxt.xml

From R.B.Vermaas at tudelft.nl  Tue Mar 15 11:06:49 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Tue, 15 Mar 2011 10:06:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22402 -
	strategoxt/branches/strategoxt-java
Message-ID: <20110315100649.6E6557F8002@mx1.tudelft.nl>

Author: rob
Date: Tue Mar 15 10:06:49 2011
New Revision: 22402
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22402&sc=1

Log:
add strategoxt-build.xml to strategoxt.jar

Modified:
   strategoxt/branches/strategoxt-java/build.xml

Modified: strategoxt/branches/strategoxt-java/build.xml
==============================================================================
--- strategoxt/branches/strategoxt-java/build.xml	Tue Mar 15 10:00:18 2011	(r22401)
+++ strategoxt/branches/strategoxt-java/build.xml	Tue Mar 15 10:06:49 2011	(r22402)
@@ -185,6 +185,7 @@
 
     <target name="jar">
         <jar destfile="strategoxt.jar" manifest="java-backend/java/META-INF/MANIFEST.MF">
+            <fileset dir="." includes="strategoxt-build.xml"/>
             <fileset dir="bin" includes="**/*.class"/>
             <fileset dir="lib" includes="**/*.rtree"/>
             <fileset dir="lib" includes="**/*.af"/>

From M.A.Akhter at student.tudelft.nl  Tue Mar 15 11:11:58 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 15 Mar 2011 10:11:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22403 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	sdf str
Message-ID: <20110315101158.4C00D7F8003@mx1.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Mar 15 10:11:57 2011
New Revision: 22403
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22403&sc=1

Log:
fixed "Module Names have to be case sensitive".   How come I wasn't getting any build errors for that :( ?

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Tue Mar 15 10:06:49 2011	(r22402)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Tue Mar 15 10:11:57 2011	(r22403)
@@ -61,7 +61,7 @@
 	
 	get-all-declared-concept = get-all-declared-entries ; filter(?(namespace, _)); mapconcat(bagof-DeclaredConcept)
 	
-	map-declarations( declaration-adapter): 
+	map-declarations(declaration-adapter): 
 		list* -> result
 		where 
 			result :=<map(project-declaration(declaration-adapter))>list*

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Tue Mar 15 10:06:49 2011	(r22402)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Tue Mar 15 10:11:57 2011	(r22403)
@@ -7,6 +7,7 @@
 imports
 	  analysis
 	  common
+	  utils/debug
 imports  
 		sdf/signatures-mapper
 
@@ -85,9 +86,7 @@
 
 	declare-sdf-globals:
 		i at Import(Name(x)) -> i
-    where 
-    	<debug>$[importing  - [<CurrentDir>]/[x]]
-  	where
+    where
       <open-import(
         resolve-import
       , parse-spoofaxlang-file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str	Tue Mar 15 10:06:49 2011	(r22402)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/str/analysis.str	Tue Mar 15 10:11:57 2011	(r22403)
@@ -12,7 +12,8 @@
 	str/desugar
 imports	
 	analysis
-	utils/debugger
+	utils/debug
+	common
 imports 
 	include/SpoofaxLang
 	
@@ -145,7 +146,7 @@
   
   declare-stratego-globals-top =
     if not(NoAnalysis) then
-    	// with(<declare-str-globals>Import("libstratego-lib"))
+    	//with(<declare-str-globals>Import("libstratego-lib"))
       debug(!"inside stratego-globals-top : "); alltd(declare-str-globals)
     end
 
@@ -209,7 +210,7 @@
   	<+	
   		<open-import(resolve-import-decl, read-stratego-signatures, declare-stratego-globals-top)> moduleName
     <+
-      rules(IsImportedFailed: moduleName)
+      rules(IsImportedFailed: moduleName) ; debug(!"import failed .... ") 
 
   declare-str-globals:
     ImportWildcard(x) -> ImportWildcard(x)

From M.A.Akhter at student.tudelft.nl  Tue Mar 15 11:41:59 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Tue, 15 Mar 2011 10:41:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22404 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv
Message-ID: <20110315104159.4D21B2B8014@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Tue Mar 15 10:41:58 2011
New Revision: 22404
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22404&sc=1

Log:
adding documentation on the rules related to adding default ctree as semanticsprovider

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Tue Mar 15 10:11:57 2011	(r22403)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/esv/to-esv.str	Tue Mar 15 10:41:58 2011	(r22404)
@@ -49,6 +49,12 @@
 			//;<save-to-file>(output-path-esv,<pp-aterm>esv-aterm)
 			;<WriteToBinaryFile>(output-path-esv,esv-aterm)
 
+	
+	/*
+	* Adding package ctree as the default semantic provider0
+	* 
+	* @type packagename -> default semantic provider 
+	*/
 	add-package-ctree : package-name -> [SemanticProvider(package-output-ctree)]
 		where 
 				package-output-ctree := $[include/[package-name].ctree]

From emma at cs.lth.se  Wed Mar 16 13:36:38 2011
From: emma at cs.lth.se (Emma Nilsson-Nyman)
Date: Wed, 16 Mar 2011 12:36:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22405 -
	sglr-recovery/trunk/bridge-definitions/grammars/java
Message-ID: <20110316123638.1AB242B801D@mx2.tudelft.nl>

Author: EmmaNilssonNyman
Date: Wed Mar 16 12:36:37 2011
New Revision: 22405
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22405&sc=1

Log:
Token version of Java-15 bp grammar

Added:
   sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp.manual

Added: sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp.manual
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp.manual	Wed Mar 16 12:36:37 2011	(r22405)
@@ -0,0 +1,234 @@
+grammar Main;
+
+import Layout ;
+
+
+// Islands and bridges
+
+island LBrace : LayoutStartIsland = "{" ;
+island RBrace : LayoutEndIsland = "}"  ;
+bridge from LBrace to RBrace ;
+
+island LABrack : SimpleStartIsland = "<" ;
+island RABrack : SimpleEndIsland = ">" ;
+bridge from LABrack to RABrack ;
+
+island LABrack : SimpleStartIsland = "[" ;
+island RABrack : SimpleEndIsland = "]" ;
+bridge from LBrack to RBrack ;
+
+island LParen : SimpleStartIsland = "(" ; 
+island RParen : SimpleEndIsland = ")" ;
+bridge from LParen to RParen ;
+
+
+// Reefs
+
+reef Layout : LayoutReef = (NEWLINE|TAB|WS)+ ;
+
+reef InstanceofKeyword = "instanceof" ;
+reef SeparatorKeyword = "," ;
+reef SuperKeyword = "super" ;
+reef NewKeyword = "new" ;
+reef ClassKeyword = "class" ;
+reef VoidKeyword = "void" ;
+reef ThisKeyword = "this" ;
+reef PackageKeyword = "package" ;
+reef ImportKeyword = "import" ;
+reef StaticKeyword = "static" ;
+reef InterfaceKeyword = "interface" ;
+reef DefaultKeyword = "default" ;
+reef ExtendsKeyword = "extends" ;
+reef EnumKeyword = "enum" ;
+reef IfKeyword = "if" ;
+reef ElseKeyword = "else" ;
+reef AssertKeyword = "assert" ;
+reef SwitchKeyword = "switch" ;
+reef CaseKeyword = "case" ;
+reef WhileKeyword = "while" ;
+reef DoKeyword = "do" ;
+reef ForKeyword = "for" ;
+reef BreakKeyword = "break" ;
+reef ContinueKeyword = "continue" ;
+reef ReturnKeyword = "return" ;
+reef ThrowKeyword = "throw" ;
+reef SynchronizedKeyword = "synchronized" ;
+reef TryKeyword = "try" ;
+reef FinallyKeyword = "finally" ;
+reef CatchKeyword = "catch" ;
+reef ThrowsKeyword = "throws" ;
+reef ImplementsKeyword = "implements" ;
+reef DotKeyword = "." ;
+reef AndKeyword = "&" ;
+reef BooleanKeyword = "boolean" ;
+reef ByteKeyword = "byte" ;
+reef ShortKeyword = "short" ;
+reef IntKeyword = "int" ;
+reef LongKeyword = "long" ;
+reef CharKeyword = "char" ;
+reef FloatKeyword = "float" ;
+reef DoubleKeyword = "double" ;
+reef PublicKeyword = "public" ;
+reef PrivateKeyword = "private" ;
+reef ProtectedKeyword = "protected" ;
+reef AbstractKeyword = "abstract" ;
+reef FinalKeyword = "final" ;
+reef NativeKeyword = "native" ;
+reef TransientKeyword = "transient" ;
+reef VolatileKeyword = "volatile" ;
+reef StrictfpKeyword = "strictfp" ;
+
+// Ignores
+
+ignore LineComment "//" to NEWLINE ;
+ignore MultiComment "/*" to "*/" ;
+ignore String "\" to "\" ;
+
+
+
+/* Old generated version:
+
+island island0 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ConstrBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ConstrBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "Block" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "Block" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ClassBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ClassBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "SwitchBlock" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "SwitchBlock" ) ;
+bridge from island0 to island1 ;
+
+reef instanceof0 : Keyword = "instanceof" for-sglr ( "InstanceOf" ) ;
+reef separator0 : Keyword = "," for-sglr ( "Invoke" ) ;
+reef super0 : Keyword = "super" for-sglr ( "SuperMethod" ) ;
+reef super1 : Keyword = "super" for-sglr ( "QSuperMethod" ) ;
+reef super2 : Keyword = "super" for-sglr ( "SuperField" ) ;
+reef super3 : Keyword = "super" for-sglr ( "QSuperField" ) ;
+reef new0 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new1 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new2 : Keyword = "new" for-sglr ( "NewInstance" ) ;
+reef separator1 : Keyword = "," for-sglr ( "NewInstance" ) ;
+reef new3 : Keyword = "new" for-sglr ( "QNewInstance" ) ;
+reef separator2 : Keyword = "," for-sglr ( "QNewInstance" ) ;
+reef class0 : Keyword = "class" for-sglr ( "Class" ) ;
+reef void0 : Keyword = "void" for-sglr ( "VoidClass" ) ;
+reef class1 : Keyword = "class" for-sglr ( "VoidClass" ) ;
+reef this0 : Keyword = "this" for-sglr ( "This" ) ;
+reef this1 : Keyword = "this" for-sglr ( "QThis" ) ;
+reef package0 : Keyword = "package" for-sglr ( "PackageDec" ) ;
+reef import0 : Keyword = "import" for-sglr ( "TypeImportDec" ) ;
+reef import1 : Keyword = "import" for-sglr ( "TypeImportOnDemandDec" ) ;
+reef import2 : Keyword = "import" for-sglr ( "StaticImportDec" ) ;
+reef static0 : Keyword = "static" for-sglr ( "StaticImportDec" ) ;
+reef import3 : Keyword = "import" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef static1 : Keyword = "static" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef interface0 : Keyword = "interface" for-sglr ( "AnnoDecHead" ) ;
+reef default0 : Keyword = "default" for-sglr ( "DefaultVal" ) ;
+reef separator3 : Keyword = "," for-sglr ( "AbstractMethodDec" ) ;
+reef separator4 : Keyword = "," for-sglr ( "DeprAbstractMethodDec" ) ;
+reef separator5 : Keyword = "," for-sglr ( "ConstantDec" ) ;
+reef interface1 : Keyword = "interface" for-sglr ( "InterfaceDecHead" ) ;
+reef extends0 : Keyword = "extends" for-sglr ( "ExtendsInterfaces" ) ;
+reef separator6 : Keyword = "," for-sglr ( "ExtendsInterfaces" ) ;
+reef enum0 : Keyword = "enum" for-sglr ( "EnumDecHead" ) ;
+reef separator7 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator8 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator9 : Keyword = "," for-sglr ( "ConstrDecHead" ) ;
+reef this2 : Keyword = "this" for-sglr ( "AltConstrInv" ) ;
+reef separator10 : Keyword = "," for-sglr ( "AltConstrInv" ) ;
+reef super4 : Keyword = "super" for-sglr ( "SuperConstrInv" ) ;
+reef separator11 : Keyword = "," for-sglr ( "SuperConstrInv" ) ;
+reef super5 : Keyword = "super" for-sglr ( "QSuperConstrInv" ) ;
+reef separator12 : Keyword = "," for-sglr ( "QSuperConstrInv" ) ;
+reef static2 : Keyword = "static" for-sglr ( "StaticInit" ) ;
+reef if0 : Keyword = "if" for-sglr ( "If" ) ;
+reef if1 : Keyword = "if" for-sglr ( "If" ) ;
+reef else0 : Keyword = "else" for-sglr ( "If" ) ;
+reef assert0 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef assert1 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef switch0 : Keyword = "switch" for-sglr ( "Switch" ) ;
+reef case0 : Keyword = "case" for-sglr ( "Case" ) ;
+reef default1 : Keyword = "default" for-sglr ( "Default" ) ;
+reef while0 : Keyword = "while" for-sglr ( "While" ) ;
+reef do0 : Keyword = "do" for-sglr ( "DoWhile" ) ;
+reef while1 : Keyword = "while" for-sglr ( "DoWhile" ) ;
+reef for0 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator13 : Keyword = "," for-sglr ( "For" ) ;
+reef for1 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator14 : Keyword = "," for-sglr ( "For" ) ;
+reef separator15 : Keyword = "," for-sglr ( "For" ) ;
+reef for2 : Keyword = "for" for-sglr ( "ForEach" ) ;
+reef break0 : Keyword = "break" for-sglr ( "Break" ) ;
+reef continue0 : Keyword = "continue" for-sglr ( "Continue" ) ;
+reef return0 : Keyword = "return" for-sglr ( "Return" ) ;
+reef throw0 : Keyword = "throw" for-sglr ( "Throw" ) ;
+reef synchronized0 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef try0 : Keyword = "try" for-sglr ( "Try" ) ;
+reef try1 : Keyword = "try" for-sglr ( "Try" ) ;
+reef finally0 : Keyword = "finally" for-sglr ( "Try" ) ;
+reef catch0 : Keyword = "catch" for-sglr ( "Catch" ) ;
+reef separator16 : Keyword = "," for-sglr ( "LocalVarDec" ) ;
+reef separator17 : Keyword = "," for-sglr ( "MethodDecHead" ) ;
+reef separator18 : Keyword = "," for-sglr ( "DeprMethodDecHead" ) ;
+reef void1 : Keyword = "void" for-sglr ( "Void" ) ;
+reef throws0 : Keyword = "throws" for-sglr ( "ThrowsDec" ) ;
+reef separator19 : Keyword = "," for-sglr ( "ThrowsDec" ) ;
+reef separator20 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator21 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator22 : Keyword = "," for-sglr ( "Anno" ) ;
+reef separator23 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator24 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator25 : Keyword = "," for-sglr ( "FieldDec" ) ;
+reef class2 : Keyword = "class" for-sglr ( "ClassDecHead" ) ;
+reef extends1 : Keyword = "extends" for-sglr ( "SuperDec" ) ;
+reef implements0 : Keyword = "implements" for-sglr ( "ImplementsDec" ) ;
+reef separator26 : Keyword = "," for-sglr ( "ImplementsDec" ) ;
+reef separator27 : Keyword = "." for-sglr ( "PackageName" ) ;
+reef separator28 : Keyword = "," for-sglr ( "TypeArgs" ) ;
+reef extends2 : Keyword = "extends" for-sglr ( "WildcardUpperBound" ) ;
+reef super6 : Keyword = "super" for-sglr ( "WildcardLowerBound" ) ;
+reef extends3 : Keyword = "extends" for-sglr ( "TypeBound" ) ;
+reef separator29 : Keyword = "&" for-sglr ( "TypeBound" ) ;
+reef separator30 : Keyword = "," for-sglr ( "TypeParams" ) ;
+reef boolean0 : Keyword = "boolean" for-sglr ( "Boolean" ) ;
+reef byte0 : Keyword = "byte" for-sglr ( "Byte" ) ;
+reef short0 : Keyword = "short" for-sglr ( "Short" ) ;
+reef int0 : Keyword = "int" for-sglr ( "Int" ) ;
+reef long0 : Keyword = "long" for-sglr ( "Long" ) ;
+reef char0 : Keyword = "char" for-sglr ( "Char" ) ;
+reef float0 : Keyword = "float" for-sglr ( "Float" ) ;
+reef double0 : Keyword = "double" for-sglr ( "Double" ) ;
+reef public0 : Keyword = "public" for-sglr ( "Public" ) ;
+reef private0 : Keyword = "private" for-sglr ( "Private" ) ;
+reef protected0 : Keyword = "protected" for-sglr ( "Protected" ) ;
+reef abstract0 : Keyword = "abstract" for-sglr ( "Abstract" ) ;
+reef final0 : Keyword = "final" for-sglr ( "Final" ) ;
+reef static3 : Keyword = "static" for-sglr ( "Static" ) ;
+reef native0 : Keyword = "native" for-sglr ( "Native" ) ;
+reef transient0 : Keyword = "transient" for-sglr ( "Transient" ) ;
+reef volatile0 : Keyword = "volatile" for-sglr ( "Volatile" ) ;
+reef synchronized1 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef strictfp0 : Keyword = "strictfp" for-sglr ( "StrictFP" ) ;
+*/
+

From emma at cs.lth.se  Wed Mar 16 13:52:02 2011
From: emma at cs.lth.se (Emma Nilsson-Nyman)
Date: Wed, 16 Mar 2011 12:52:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22406 - in
	sglr-recovery/trunk/bridge-definitions/grammars: java java-sql
Message-ID: <20110316125202.B42F8108C028@mx3.tudelft.nl>

Author: EmmaNilssonNyman
Date: Wed Mar 16 12:52:02 2011
New Revision: 22406
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22406&sc=1

Log:
token bp grammar for Java-SQL

Added:
   sglr-recovery/trunk/bridge-definitions/grammars/java-sql/Java-SQL.bp.manual
Modified:
   sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp.manual

Added: sglr-recovery/trunk/bridge-definitions/grammars/java-sql/Java-SQL.bp.manual
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/java-sql/Java-SQL.bp.manual	Wed Mar 16 12:52:02 2011	(r22406)
@@ -0,0 +1,325 @@
+grammar Main;
+
+import Layout ;
+
+// Islands and bridges
+
+island LBrace : LayoutStartIsland = "{" ;
+island RBrace : LayoutEndIsland = "}" ;
+bridge from LBrace to RBrace ;
+
+island LABrack : SimpleStartIsland = "<" ;
+island RABrack : SimpleEndIsland = ">" ;
+bridge from LABrack to RABrack ;
+
+island LABrack : SimpleStartIsland = "[" ;
+island RABrack : SimpleEndIsland = "]" ;
+bridge from LBrack to RBrack ;
+
+island LParen : SimpleStartIsland = "(" ; 
+island RParen : SimpleEndIsland = ")" ;
+bridge from LParen to RParen ;
+
+island LSQL : SimpleStartIsland = "<|" ; 
+island RSQL : SimpleEndIsland = "|>" ;
+bridge from LSQL to RSQL ;
+
+
+// Reefs
+
+reef Layout : LayoutReef = (NEWLINE|TAB|WS)+ ;
+
+reef InstanceofKeyword = "instanceof" ;
+reef SeparatorKeyword = "," ;
+reef SuperKeyword = "super" ;
+reef NewKeyword = "new" ;
+reef ClassKeyword = "class" ;
+reef VoidKeyword = "void" ;
+reef ThisKeyword = "this" ;
+reef PackageKeyword = "package" ;
+reef ImportKeyword = "import" ;
+reef StaticKeyword = "static" ;
+reef InterfaceKeyword = "interface" ;
+reef DefaultKeyword = "default" ;
+reef ExtendsKeyword = "extends" ;
+reef EnumKeyword = "enum" ;
+reef IfKeyword = "if" ;
+reef ElseKeyword = "else" ;
+reef AssertKeyword = "assert" ;
+reef SwitchKeyword = "switch" ;
+reef CaseKeyword = "case" ;
+reef WhileKeyword = "while" ;
+reef DoKeyword = "do" ;
+reef ForKeyword = "for" ;
+reef BreakKeyword = "break" ;
+reef ContinueKeyword = "continue" ;
+reef ReturnKeyword = "return" ;
+reef ThrowKeyword = "throw" ;
+reef SynchronizedKeyword = "synchronized" ;
+reef TryKeyword = "try" ;
+reef FinallyKeyword = "finally" ;
+reef CatchKeyword = "catch" ;
+reef ThrowsKeyword = "throws" ;
+reef ImplementsKeyword = "implements" ;
+reef DotKeyword = "." ;
+reef AndKeyword = "&" ;
+reef BooleanKeyword = "boolean" ;
+reef ByteKeyword = "byte" ;
+reef ShortKeyword = "short" ;
+reef IntKeyword = "int" ;
+reef LongKeyword = "long" ;
+reef CharKeyword = "char" ;
+reef FloatKeyword = "float" ;
+reef DoubleKeyword = "double" ;
+reef PublicKeyword = "public" ;
+reef PrivateKeyword = "private" ;
+reef ProtectedKeyword = "protected" ;
+reef AbstractKeyword = "abstract" ;
+reef FinalKeyword = "final" ;
+reef NativeKeyword = "native" ;
+reef TransientKeyword = "transient" ;
+reef VolatileKeyword = "volatile" ;
+reef StrictfpKeyword = "strictfp" ;
+
+reef SQLKeyword = "SQL" ;
+reef DISTINCTKeyword = "DISTINCT" ;
+reef BYKeyword = "BY" ;
+reef SELECTKeyword = "SELECT" ;
+reef FROMKeyword = "FROM" ;
+reef WHEREKeyword = "WHERE" ;
+reef HAVINGKeyword = "HAVING" ;
+reef JOINKeyword = "JOIN" ;
+
+
+// Ignores
+
+ignore LineComment "//" to NEWLINE ;
+ignore MultiComment "/*" to "*/" ;
+ignore String "\" to "\" ;
+
+
+
+/* Old generated version:
+
+island island2 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ConstrBody" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ConstrBody" ) ;
+bridge from island2 to island3 ;
+island startassert0 : SimpleStartIsland = "assert" for-sglr ( "AssertStm" ) ;
+island endassert0 : SimpleEndIsland = ";" for-sglr ( "AssertStm" ) ;
+bridge from startassert0 to endassert0 ;
+island startassert0 : SimpleStartIsland = "assert" for-sglr ( "AssertStm" ) ;
+island endassert0 : SimpleEndIsland = ";" for-sglr ( "AssertStm" ) ;
+bridge from startassert0 to endassert0 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "SwitchBlock" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "SwitchBlock" ) ;
+bridge from island2 to island3 ;
+island startcase0 : SimpleStartIsland = "case" for-sglr ( "Case" ) ;
+island endcase0 : SimpleEndIsland = ":" for-sglr ( "Case" ) ;
+bridge from startcase0 to endcase0 ;
+island startdo0 : SimpleStartIsland = "do" for-sglr ( "DoWhile" ) ;
+island enddo0 : SimpleEndIsland = ";" for-sglr ( "DoWhile" ) ;
+bridge from startdo0 to enddo0 ;
+island startreturn0 : SimpleStartIsland = "return" for-sglr ( "Return" ) ;
+island endreturn0 : SimpleEndIsland = ";" for-sglr ( "Return" ) ;
+bridge from startreturn0 to endreturn0 ;
+island startthrow0 : SimpleStartIsland = "throw" for-sglr ( "Throw" ) ;
+island endthrow0 : SimpleEndIsland = ";" for-sglr ( "Throw" ) ;
+bridge from startthrow0 to endthrow0 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "Block" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "Block" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island2 to island3 ;
+island island4 : SimpleStartIsland = "@" for-sglr ( "Anno" ) ;
+island island5 : SimpleEndIsland = ")" for-sglr ( "Anno" ) ;
+bridge from island4 to island5 ;
+island island4 : SimpleStartIsland = "@" for-sglr ( "SingleElemAnno" ) ;
+island island5 : SimpleEndIsland = ")" for-sglr ( "SingleElemAnno" ) ;
+bridge from island4 to island5 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "{" for-sglr ( "ClassBody" ) ;
+island island3 : SimpleEndIsland = "}" for-sglr ( "ClassBody" ) ;
+bridge from island2 to island3 ;
+island island0 : SimpleStartIsland = "<" for-sglr ( "TypeArgs" ) ;
+island island1 : SimpleEndIsland = ">" for-sglr ( "TypeArgs" ) ;
+bridge from island0 to island1 ;
+island startSUBSTRING0 : SimpleStartIsland = "SUBSTRING" for-sglr ( "Substring" ) ;
+island endSUBSTRING0 : SimpleEndIsland = ")" for-sglr ( "Substring" ) ;
+bridge from startSUBSTRING0 to endSUBSTRING0 ;
+island startUPPER0 : SimpleStartIsland = "UPPER" for-sglr ( "Upper" ) ;
+island endUPPER0 : SimpleEndIsland = ")" for-sglr ( "Upper" ) ;
+bridge from startUPPER0 to endUPPER0 ;
+island startLOWER0 : SimpleStartIsland = "LOWER" for-sglr ( "Lower" ) ;
+island endLOWER0 : SimpleEndIsland = ")" for-sglr ( "Lower" ) ;
+bridge from startLOWER0 to endLOWER0 ;
+island startCONVERT0 : SimpleStartIsland = "CONVERT" for-sglr ( "Convert" ) ;
+island endCONVERT0 : SimpleEndIsland = ")" for-sglr ( "Convert" ) ;
+bridge from startCONVERT0 to endCONVERT0 ;
+island startTRANSLATE0 : SimpleStartIsland = "TRANSLATE" for-sglr ( "Translate" ) ;
+island endTRANSLATE0 : SimpleEndIsland = ")" for-sglr ( "Translate" ) ;
+bridge from startTRANSLATE0 to endTRANSLATE0 ;
+island startTRIM0 : SimpleStartIsland = "TRIM" for-sglr ( "Trim" ) ;
+island endTRIM0 : SimpleEndIsland = ")" for-sglr ( "Trim" ) ;
+bridge from startTRIM0 to endTRIM0 ;
+island startSUBSTRING0 : SimpleStartIsland = "SUBSTRING" for-sglr ( "Substring" ) ;
+island endSUBSTRING0 : SimpleEndIsland = ")" for-sglr ( "Substring" ) ;
+bridge from startSUBSTRING0 to endSUBSTRING0 ;
+island startEXISTS0 : SimpleStartIsland = "EXISTS" for-sglr ( "Exists" ) ;
+island endEXISTS0 : SimpleEndIsland = ")" for-sglr ( "Exists" ) ;
+bridge from startEXISTS0 to endEXISTS0 ;
+island startUNIQUE0 : SimpleStartIsland = "UNIQUE" for-sglr ( "Unique" ) ;
+island endUNIQUE0 : SimpleEndIsland = ")" for-sglr ( "Unique" ) ;
+bridge from startUNIQUE0 to endUNIQUE0 ;
+
+
+reef instanceof0 : Keyword = "instanceof" for-sglr ( "InstanceOf" ) ;
+reef separator42 : Keyword = "," for-sglr ( "Invoke" ) ;
+reef super6 : Keyword = "super" for-sglr ( "SuperMethod" ) ;
+reef super5 : Keyword = "super" for-sglr ( "QSuperMethod" ) ;
+reef super4 : Keyword = "super" for-sglr ( "SuperField" ) ;
+reef super3 : Keyword = "super" for-sglr ( "QSuperField" ) ;
+reef new3 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new2 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new1 : Keyword = "new" for-sglr ( "NewInstance" ) ;
+reef separator41 : Keyword = "," for-sglr ( "NewInstance" ) ;
+reef new0 : Keyword = "new" for-sglr ( "QNewInstance" ) ;
+reef separator40 : Keyword = "," for-sglr ( "QNewInstance" ) ;
+reef class2 : Keyword = "class" for-sglr ( "Class" ) ;
+reef void1 : Keyword = "void" for-sglr ( "VoidClass" ) ;
+reef class1 : Keyword = "class" for-sglr ( "VoidClass" ) ;
+reef this2 : Keyword = "this" for-sglr ( "This" ) ;
+reef this1 : Keyword = "this" for-sglr ( "QThis" ) ;
+reef package0 : Keyword = "package" for-sglr ( "PackageDec" ) ;
+reef import3 : Keyword = "import" for-sglr ( "TypeImportDec" ) ;
+reef import2 : Keyword = "import" for-sglr ( "TypeImportOnDemandDec" ) ;
+reef import1 : Keyword = "import" for-sglr ( "StaticImportDec" ) ;
+reef static3 : Keyword = "static" for-sglr ( "StaticImportDec" ) ;
+reef import0 : Keyword = "import" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef static2 : Keyword = "static" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef interface1 : Keyword = "interface" for-sglr ( "AnnoDecHead" ) ;
+reef default1 : Keyword = "default" for-sglr ( "DefaultVal" ) ;
+reef separator39 : Keyword = "," for-sglr ( "AbstractMethodDec" ) ;
+reef separator38 : Keyword = "," for-sglr ( "DeprAbstractMethodDec" ) ;
+reef separator37 : Keyword = "," for-sglr ( "ConstantDec" ) ;
+reef interface0 : Keyword = "interface" for-sglr ( "InterfaceDecHead" ) ;
+reef extends3 : Keyword = "extends" for-sglr ( "ExtendsInterfaces" ) ;
+reef separator36 : Keyword = "," for-sglr ( "ExtendsInterfaces" ) ;
+reef enum0 : Keyword = "enum" for-sglr ( "EnumDecHead" ) ;
+reef separator35 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator34 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator33 : Keyword = "," for-sglr ( "ConstrDecHead" ) ;
+reef this0 : Keyword = "this" for-sglr ( "AltConstrInv" ) ;
+reef separator32 : Keyword = "," for-sglr ( "AltConstrInv" ) ;
+reef super2 : Keyword = "super" for-sglr ( "SuperConstrInv" ) ;
+reef separator31 : Keyword = "," for-sglr ( "SuperConstrInv" ) ;
+reef super1 : Keyword = "super" for-sglr ( "QSuperConstrInv" ) ;
+reef separator30 : Keyword = "," for-sglr ( "QSuperConstrInv" ) ;
+reef static1 : Keyword = "static" for-sglr ( "StaticInit" ) ;
+reef if1 : Keyword = "if" for-sglr ( "If" ) ;
+reef if0 : Keyword = "if" for-sglr ( "If" ) ;
+reef else0 : Keyword = "else" for-sglr ( "If" ) ;
+reef assert1 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef assert0 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef switch0 : Keyword = "switch" for-sglr ( "Switch" ) ;
+reef case0 : Keyword = "case" for-sglr ( "Case" ) ;
+reef default0 : Keyword = "default" for-sglr ( "Default" ) ;
+reef while1 : Keyword = "while" for-sglr ( "While" ) ;
+reef do0 : Keyword = "do" for-sglr ( "DoWhile" ) ;
+reef while0 : Keyword = "while" for-sglr ( "DoWhile" ) ;
+reef for2 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator29 : Keyword = "," for-sglr ( "For" ) ;
+reef for1 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator28 : Keyword = "," for-sglr ( "For" ) ;
+reef separator27 : Keyword = "," for-sglr ( "For" ) ;
+reef for0 : Keyword = "for" for-sglr ( "ForEach" ) ;
+reef break0 : Keyword = "break" for-sglr ( "Break" ) ;
+reef continue0 : Keyword = "continue" for-sglr ( "Continue" ) ;
+reef return0 : Keyword = "return" for-sglr ( "Return" ) ;
+reef throw0 : Keyword = "throw" for-sglr ( "Throw" ) ;
+reef synchronized1 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef try1 : Keyword = "try" for-sglr ( "Try" ) ;
+reef try0 : Keyword = "try" for-sglr ( "Try" ) ;
+reef finally0 : Keyword = "finally" for-sglr ( "Try" ) ;
+reef catch0 : Keyword = "catch" for-sglr ( "Catch" ) ;
+reef separator26 : Keyword = "," for-sglr ( "LocalVarDec" ) ;
+reef separator25 : Keyword = "," for-sglr ( "MethodDecHead" ) ;
+reef separator24 : Keyword = "," for-sglr ( "DeprMethodDecHead" ) ;
+reef void0 : Keyword = "void" for-sglr ( "Void" ) ;
+reef throws0 : Keyword = "throws" for-sglr ( "ThrowsDec" ) ;
+reef separator23 : Keyword = "," for-sglr ( "ThrowsDec" ) ;
+reef separator22 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator21 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator20 : Keyword = "," for-sglr ( "Anno" ) ;
+reef separator19 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator18 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator17 : Keyword = "," for-sglr ( "FieldDec" ) ;
+reef class0 : Keyword = "class" for-sglr ( "ClassDecHead" ) ;
+reef extends2 : Keyword = "extends" for-sglr ( "SuperDec" ) ;
+reef implements0 : Keyword = "implements" for-sglr ( "ImplementsDec" ) ;
+reef separator16 : Keyword = "," for-sglr ( "ImplementsDec" ) ;
+reef separator15 : Keyword = "." for-sglr ( "PackageName" ) ;
+reef separator14 : Keyword = "," for-sglr ( "TypeArgs" ) ;
+reef extends1 : Keyword = "extends" for-sglr ( "WildcardUpperBound" ) ;
+reef super0 : Keyword = "super" for-sglr ( "WildcardLowerBound" ) ;
+reef extends0 : Keyword = "extends" for-sglr ( "TypeBound" ) ;
+reef separator13 : Keyword = "&" for-sglr ( "TypeBound" ) ;
+reef separator12 : Keyword = "," for-sglr ( "TypeParams" ) ;
+reef boolean0 : Keyword = "boolean" for-sglr ( "Boolean" ) ;
+reef byte0 : Keyword = "byte" for-sglr ( "Byte" ) ;
+reef short0 : Keyword = "short" for-sglr ( "Short" ) ;
+reef int0 : Keyword = "int" for-sglr ( "Int" ) ;
+reef long0 : Keyword = "long" for-sglr ( "Long" ) ;
+reef char0 : Keyword = "char" for-sglr ( "Char" ) ;
+reef float0 : Keyword = "float" for-sglr ( "Float" ) ;
+reef double0 : Keyword = "double" for-sglr ( "Double" ) ;
+reef public0 : Keyword = "public" for-sglr ( "Public" ) ;
+reef private0 : Keyword = "private" for-sglr ( "Private" ) ;
+reef protected0 : Keyword = "protected" for-sglr ( "Protected" ) ;
+reef abstract0 : Keyword = "abstract" for-sglr ( "Abstract" ) ;
+reef final0 : Keyword = "final" for-sglr ( "Final" ) ;
+reef static0 : Keyword = "static" for-sglr ( "Static" ) ;
+reef native0 : Keyword = "native" for-sglr ( "Native" ) ;
+reef transient0 : Keyword = "transient" for-sglr ( "Transient" ) ;
+reef volatile0 : Keyword = "volatile" for-sglr ( "Volatile" ) ;
+reef synchronized0 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef strictfp0 : Keyword = "strictfp" for-sglr ( "StrictFP" ) ;
+reef separator11 : Keyword = "," for-sglr ( "Coalesce" ) ;
+reef separator10 : Keyword = "," for-sglr ( "Values" ) ;
+reef separator9 : Keyword = "," for-sglr ( "Row" ) ;
+reef DISTINCT0 : Keyword = "DISTINCT" for-sglr ( "Distinct" ) ;
+reef BY1 : Keyword = "BY" for-sglr ( "By" ) ;
+reef separator8 : Keyword = "," for-sglr ( "By" ) ;
+reef separator7 : Keyword = "," for-sglr ( "Values" ) ;
+reef SELECT0 : Keyword = "SELECT" for-sglr ( "Select" ) ;
+reef separator6 : Keyword = "," for-sglr ( "Select" ) ;
+reef separator5 : Keyword = "," for-sglr ( "From" ) ;
+reef separator4 : Keyword = "," for-sglr ( "GroupBy" ) ;
+reef HAVING0 : Keyword = "HAVING" for-sglr ( "Having" ) ;
+reef separator3 : Keyword = "," for-sglr ( "TableRef" ) ;
+reef separator2 : Keyword = "," for-sglr ( "TableRef" ) ;
+reef JOIN1 : Keyword = "JOIN" for-sglr ( "NaturalJoin" ) ;
+reef JOIN0 : Keyword = "JOIN" for-sglr ( "Join" ) ;
+reef separator1 : Keyword = "," for-sglr ( "Using" ) ;
+reef BY0 : Keyword = "BY" for-sglr ( "OrderBy" ) ;
+reef separator0 : Keyword = "," for-sglr ( "OrderBy" ) ;
+
+ignore "//" to NEWLINE ;
+ignore "/*" to "*/" ;
+ignore "\" to "\" ;
+
+*/
\ No newline at end of file

Modified: sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp.manual
==============================================================================
--- sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp.manual	Wed Mar 16 12:36:37 2011	(r22405)
+++ sglr-recovery/trunk/bridge-definitions/grammars/java/Java-15.bp.manual	Wed Mar 16 12:52:02 2011	(r22406)
@@ -230,5 +230,9 @@
 reef volatile0 : Keyword = "volatile" for-sglr ( "Volatile" ) ;
 reef synchronized1 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
 reef strictfp0 : Keyword = "strictfp" for-sglr ( "StrictFP" ) ;
+
+ignore "//" to NEWLINE ;
+ignore "/*" to "*/" ;
+ignore "\" to "\" ;
 */
 

From emma at cs.lth.se  Wed Mar 16 14:07:54 2011
From: emma at cs.lth.se (Emma Nilsson-Nyman)
Date: Wed, 16 Mar 2011 13:07:54 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22407 -
	sglr-recovery/trunk/bridge-definitions/grammars/stratego-java
Message-ID: <20110316130754.04B38108C04A@mx3.tudelft.nl>

Author: EmmaNilssonNyman
Date: Wed Mar 16 13:07:53 2011
New Revision: 22407
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22407&sc=1

Log:
Token bp grammar for Stratego-Java

Added:
   sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp.manual
Modified:
   sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp

Modified: sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp
==============================================================================
--- sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp	Wed Mar 16 12:52:02 2011	(r22406)
+++ sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp	Wed Mar 16 13:07:53 2011	(r22407)
@@ -2,7 +2,7 @@
 
 import Layout ;
 
-// Islands and bridges
+// Islands
 island island0 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
 island island1 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
 bridge from island0 to island1 ;
@@ -481,6 +481,7 @@
 reef separator40 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
 reef separator39 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
 reef separator38 : Keyword = "," for-sglr ( "Overlay" ) ;
+
 reef rules1 : Keyword = "rules" for-sglr ( "GenDynRules" ) ;
 reef separator37 : Keyword = "," for-sglr ( "RDec" ) ;
 reef separator36 : Keyword = "," for-sglr ( "RDecT" ) ;
@@ -557,4 +558,4 @@
 // Ignores
 ignore "//" to NEWLINE ;
 ignore "/*" to "*/" ;
-ignore "\" to "\" ;
\ No newline at end of file
+ignore "\" to "\" ;

Added: sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp.manual
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/stratego-java/Stratego-Java-15.bp.manual	Wed Mar 16 13:07:53 2011	(r22407)
@@ -0,0 +1,672 @@
+grammar Main;
+
+import Layout ;
+
+
+// Islands and bridges
+
+island LBrace : LayoutStartIsland = "{" ;
+island RBrace : LayoutEndIsland = "}"  ;
+bridge from LBrace to RBrace ;
+
+island LABrack : SimpleStartIsland = "<" ;
+island RABrack : SimpleEndIsland = ">" ;
+bridge from LABrack to RABrack ;
+
+island LABrack : SimpleStartIsland = "[" ;
+island RABrack : SimpleEndIsland = "]" ;
+bridge from LBrack to RBrack ;
+
+island LParen : SimpleStartIsland = "(" ; 
+island RParen : SimpleEndIsland = ")" ;
+bridge from LParen to RParen ;
+
+island LStratego : LayoutStartIsland = "|[" ;
+island RStratego : LayoutEndIsland = "]|" ;
+bridge from LStratego to RStratego ;
+
+
+// Reefs
+
+reef Layout : LayoutReef = (NEWLINE|TAB|WS)+ ;
+
+reef InstanceofKeyword = "instanceof" ;
+reef SeparatorKeyword = "," ;
+reef SuperKeyword = "super" ;
+reef NewKeyword = "new" ;
+reef ClassKeyword = "class" ;
+reef VoidKeyword = "void" ;
+reef ThisKeyword = "this" ;
+reef PackageKeyword = "package" ;
+reef ImportKeyword = "import" ;
+reef StaticKeyword = "static" ;
+reef InterfaceKeyword = "interface" ;
+reef DefaultKeyword = "default" ;
+reef ExtendsKeyword = "extends" ;
+reef EnumKeyword = "enum" ;
+reef IfKeyword = "if" ;
+reef ElseKeyword = "else" ;
+reef AssertKeyword = "assert" ;
+reef SwitchKeyword = "switch" ;
+reef CaseKeyword = "case" ;
+reef WhileKeyword = "while" ;
+reef DoKeyword = "do" ;
+reef ForKeyword = "for" ;
+reef BreakKeyword = "break" ;
+reef ContinueKeyword = "continue" ;
+reef ReturnKeyword = "return" ;
+reef ThrowKeyword = "throw" ;
+reef SynchronizedKeyword = "synchronized" ;
+reef TryKeyword = "try" ;
+reef FinallyKeyword = "finally" ;
+reef CatchKeyword = "catch" ;
+reef ThrowsKeyword = "throws" ;
+reef ImplementsKeyword = "implements" ;
+reef DotKeyword = "." ;
+reef AndKeyword = "&" ;
+reef BooleanKeyword = "boolean" ;
+reef ByteKeyword = "byte" ;
+reef ShortKeyword = "short" ;
+reef IntKeyword = "int" ;
+reef LongKeyword = "long" ;
+reef CharKeyword = "char" ;
+reef FloatKeyword = "float" ;
+reef DoubleKeyword = "double" ;
+reef PublicKeyword = "public" ;
+reef PrivateKeyword = "private" ;
+reef ProtectedKeyword = "protected" ;
+reef AbstractKeyword = "abstract" ;
+reef FinalKeyword = "final" ;
+reef NativeKeyword = "native" ;
+reef TransientKeyword = "transient" ;
+reef VolatileKeyword = "volatile" ;
+reef StrictfpKeyword = "strictfp" ;
+
+reef RulesKeyword = "rules" ;
+reef ArrowKeyword = "->" ;
+reef WhereKeyword = "where";
+reef NotKeyword = "not" ;
+reef TestKeyword = "test" ;
+reef PrimKeyword = "prim" ;
+reef SortsKeyword = "sorts" ;
+reef ConstructorsKeyword = "constructors" ;
+reef StarKeyword = "*" ;
+reef AssignKeyword = "," ;
+reef LetKeyword = "let" ;
+reef InKeyword = "in" ;
+reef FailKeyword = "fail" ;
+reef IdKeyword = "id" ;
+reef SomeKeyword = "some" ;
+reef OneKeyword = "one" ;
+reef AllKeyword = "all" ;
+reef ImportTermKeyword = "import-term" ;
+reef ModuleKeyword = "module" ;
+reef StrategiesKeyword = "strategies" ;
+reef SignatureKeyword = "signature" ;
+reef OverlaysKeyword = "overlays" ;
+
+
+// Ignores
+
+ignore LineComment "//" to NEWLINE ;
+ignore MultiComment "/*" to "*/" ;
+ignore String "\" to "\" ;
+
+
+/* Old generated version: 
+island island0 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "EnumBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "EnumBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ConstrBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ConstrBody" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "SwitchBlock" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "SwitchBlock" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "Block" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "Block" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ElemValArrayInit" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ElemValArrayInit" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ClassBody" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ClassBody" ) ;
+bridge from island0 to island1 ;
+island starte0 : SimpleStartIsland = "e" for-sglr ( "ToMetaExpr" ) ;
+island ende0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from starte0 to ende0 ;
+island island42 : SimpleStartIsland = "java:expr" for-sglr ( "ToMetaExpr" ) ;
+island island43 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island42 to island43 ;
+island startexpr0 : SimpleStartIsland = "expr" for-sglr ( "ToMetaExpr" ) ;
+island endexpr0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startexpr0 to endexpr0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island98 : SimpleStartIsland = "var-init" for-sglr ( "ToMetaExpr" ) ;
+island island99 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island98 to island99 ;
+island island96 : SimpleStartIsland = "java:bstm" for-sglr ( "ToMetaExpr" ) ;
+island island97 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island96 to island97 ;
+island startbstm0 : SimpleStartIsland = "bstm" for-sglr ( "ToMetaExpr" ) ;
+island endbstm0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startbstm0 to endbstm0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island94 : SimpleStartIsland = "java:bstm*" for-sglr ( "ToMetaListExpr" ) ;
+island island95 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island94 to island95 ;
+island island92 : SimpleStartIsland = "bstm*" for-sglr ( "ToMetaListExpr" ) ;
+island island93 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island92 to island93 ;
+island island90 : SimpleStartIsland = "java:block-stm" for-sglr ( "ToMetaExpr" ) ;
+island island91 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island90 to island91 ;
+island island88 : SimpleStartIsland = "block-stm" for-sglr ( "ToMetaExpr" ) ;
+island island89 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island88 to island89 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island86 : SimpleStartIsland = "java:block-stm*" for-sglr ( "ToMetaListExpr" ) ;
+island island87 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island86 to island87 ;
+island island84 : SimpleStartIsland = "block-stm*" for-sglr ( "ToMetaListExpr" ) ;
+island island85 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island84 to island85 ;
+island island14 : SimpleStartIsland = "java:stm" for-sglr ( "ToMetaExpr" ) ;
+island island15 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island14 to island15 ;
+island startstm0 : SimpleStartIsland = "stm" for-sglr ( "ToMetaExpr" ) ;
+island endstm0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startstm0 to endstm0 ;
+island island82 : SimpleStartIsland = "switch-group" for-sglr ( "ToMetaListExpr" ) ;
+island island83 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island82 to island83 ;
+island island80 : SimpleStartIsland = "java:switch-group" for-sglr ( "ToMetaListExpr" ) ;
+island island81 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island80 to island81 ;
+island island78 : SimpleStartIsland = "java:lvdec" for-sglr ( "ToMetaExpr" ) ;
+island island79 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island78 to island79 ;
+island startlvdec0 : SimpleStartIsland = "lvdec" for-sglr ( "ToMetaExpr" ) ;
+island endlvdec0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startlvdec0 to endlvdec0 ;
+island island76 : SimpleStartIsland = "java:vdec" for-sglr ( "ToMetaExpr" ) ;
+island island77 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island76 to island77 ;
+island startvdec0 : SimpleStartIsland = "vdec" for-sglr ( "ToMetaExpr" ) ;
+island endvdec0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startvdec0 to endvdec0 ;
+island startt0 : SimpleStartIsland = "t" for-sglr ( "ToMetaExpr" ) ;
+island endt0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startt0 to endt0 ;
+island startty0 : SimpleStartIsland = "ty" for-sglr ( "ToMetaExpr" ) ;
+island endty0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startty0 to endty0 ;
+island island74 : SimpleStartIsland = "java:type" for-sglr ( "ToMetaExpr" ) ;
+island island75 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island74 to island75 ;
+island starttype0 : SimpleStartIsland = "type" for-sglr ( "ToMetaExpr" ) ;
+island endtype0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from starttype0 to endtype0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island startambname0 : SimpleStartIsland = "ambname" for-sglr ( "ToMetaExpr" ) ;
+island endambname0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startambname0 to endambname0 ;
+island startename0 : SimpleStartIsland = "ename" for-sglr ( "ToMetaExpr" ) ;
+island endename0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startename0 to endename0 ;
+island startfname0 : SimpleStartIsland = "fname" for-sglr ( "ToMetaExpr" ) ;
+island endfname0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startfname0 to endfname0 ;
+island starttname0 : SimpleStartIsland = "tname" for-sglr ( "ToMetaExpr" ) ;
+island endtname0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from starttname0 to endtname0 ;
+island startpkgtname0 : SimpleStartIsland = "pkgtname" for-sglr ( "ToMetaExpr" ) ;
+island endpkgtname0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startpkgtname0 to endpkgtname0 ;
+island startanno0 : SimpleStartIsland = "anno" for-sglr ( "ToMetaExpr" ) ;
+island endanno0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startanno0 to endanno0 ;
+island startparam0 : SimpleStartIsland = "param" for-sglr ( "ToMetaExpr" ) ;
+island endparam0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startparam0 to endparam0 ;
+island island72 : SimpleStartIsland = "java:param" for-sglr ( "ToMetaExpr" ) ;
+island island73 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island72 to island73 ;
+island island70 : SimpleStartIsland = "param*" for-sglr ( "ToMetaExpr" ) ;
+island island71 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island70 to island71 ;
+island island68 : SimpleStartIsland = "java:param*" for-sglr ( "ToMetaExpr" ) ;
+island island69 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island68 to island69 ;
+island island66 : SimpleStartIsland = "java:formal-param" for-sglr ( "ToMetaExpr" ) ;
+island island67 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island66 to island67 ;
+island island64 : SimpleStartIsland = "formal-param" for-sglr ( "ToMetaExpr" ) ;
+island island65 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island64 to island65 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island62 : SimpleStartIsland = "java:formal-param*" for-sglr ( "ToMetaExpr" ) ;
+island island63 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island62 to island63 ;
+island island60 : SimpleStartIsland = "formal-param*" for-sglr ( "ToMetaExpr" ) ;
+island island61 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island60 to island61 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island58 : SimpleStartIsland = "java:package-dec" for-sglr ( "ToMetaExpr" ) ;
+island island59 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island58 to island59 ;
+island island56 : SimpleStartIsland = "package-dec" for-sglr ( "ToMetaExpr" ) ;
+island island57 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island56 to island57 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island54 : SimpleStartIsland = "java:package-dec?" for-sglr ( "ToMetaExpr" ) ;
+island island55 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island54 to island55 ;
+island island52 : SimpleStartIsland = "package-dec?" for-sglr ( "ToMetaExpr" ) ;
+island island53 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island52 to island53 ;
+island island50 : SimpleStartIsland = "java:import-dec" for-sglr ( "ToMetaExpr" ) ;
+island island51 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island50 to island51 ;
+island island48 : SimpleStartIsland = "import-dec" for-sglr ( "ToMetaExpr" ) ;
+island island49 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island48 to island49 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island46 : SimpleStartIsland = "java:import-dec*" for-sglr ( "ToMetaListExpr" ) ;
+island island47 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island46 to island47 ;
+island island44 : SimpleStartIsland = "import-dec*" for-sglr ( "ToMetaListExpr" ) ;
+island island45 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island44 to island45 ;
+island starte0 : SimpleStartIsland = "e" for-sglr ( "ToMetaExpr" ) ;
+island ende0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from starte0 to ende0 ;
+island island42 : SimpleStartIsland = "java:expr" for-sglr ( "ToMetaExpr" ) ;
+island island43 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island42 to island43 ;
+island startexpr0 : SimpleStartIsland = "expr" for-sglr ( "ToMetaExpr" ) ;
+island endexpr0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startexpr0 to endexpr0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island40 : SimpleStartIsland = "java:compilation-unit" for-sglr ( "ToMetaExpr" ) ;
+island island41 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island40 to island41 ;
+island island38 : SimpleStartIsland = "compilation-unit" for-sglr ( "ToMetaExpr" ) ;
+island island39 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island38 to island39 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island36 : SimpleStartIsland = "java:importdecl" for-sglr ( "ToMetaExpr" ) ;
+island island37 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island36 to island37 ;
+island startimportdecl0 : SimpleStartIsland = "importdecl" for-sglr ( "ToMetaExpr" ) ;
+island endimportdecl0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startimportdecl0 to endimportdecl0 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island34 : SimpleStartIsland = "java:type-dec" for-sglr ( "ToMetaExpr" ) ;
+island island35 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island34 to island35 ;
+island island32 : SimpleStartIsland = "type-dec" for-sglr ( "ToMetaExpr" ) ;
+island island33 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island32 to island33 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island30 : SimpleStartIsland = "java:class-body-dec" for-sglr ( "ToMetaExpr" ) ;
+island island31 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island30 to island31 ;
+island island28 : SimpleStartIsland = "class-body-dec" for-sglr ( "ToMetaExpr" ) ;
+island island29 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island28 to island29 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island26 : SimpleStartIsland = "java:interface-member-dec" for-sglr ( "ToMetaExpr" ) ;
+island island27 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island26 to island27 ;
+island island24 : SimpleStartIsland = "interface-member-dec" for-sglr ( "ToMetaExpr" ) ;
+island island25 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island24 to island25 ;
+island island22 : SimpleStartIsland = "java:constant-dec" for-sglr ( "ToMetaExpr" ) ;
+island island23 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island22 to island23 ;
+island island20 : SimpleStartIsland = "constant-dec" for-sglr ( "ToMetaExpr" ) ;
+island island21 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island20 to island21 ;
+island island18 : SimpleStartIsland = "java:class-body-dec*" for-sglr ( "ToMetaExpr" ) ;
+island island19 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island18 to island19 ;
+island island16 : SimpleStartIsland = "class-body-dec*" for-sglr ( "ToMetaExpr" ) ;
+island island17 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island16 to island17 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaListExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaListExpr" ) ;
+bridge from island4 to island5 ;
+island island14 : SimpleStartIsland = "java:stm" for-sglr ( "ToMetaExpr" ) ;
+island island15 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island14 to island15 ;
+island startstm0 : SimpleStartIsland = "stm" for-sglr ( "ToMetaExpr" ) ;
+island endstm0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startstm0 to endstm0 ;
+island island12 : SimpleStartIsland = "java:imember-dec" for-sglr ( "ToMetaExpr" ) ;
+island island13 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island12 to island13 ;
+island island10 : SimpleStartIsland = "imember-dec" for-sglr ( "ToMetaExpr" ) ;
+island island11 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island10 to island11 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island8 : SimpleStartIsland = "java:imember-dec*" for-sglr ( "ToMetaExpr" ) ;
+island island9 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island8 to island9 ;
+island island6 : SimpleStartIsland = "imember-dec*" for-sglr ( "ToMetaExpr" ) ;
+island island7 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island6 to island7 ;
+island startjava0 : SimpleStartIsland = "java" for-sglr ( "ToMetaExpr" ) ;
+island endjava0 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from startjava0 to endjava0 ;
+island island4 : SimpleStartIsland = "|[" for-sglr ( "ToMetaExpr" ) ;
+island island5 : SimpleEndIsland = "]|" for-sglr ( "ToMetaExpr" ) ;
+bridge from island4 to island5 ;
+island island2 : SimpleStartIsland = "{|" for-sglr ( "DynRuleScope" ) ;
+island island3 : SimpleEndIsland = "|}" for-sglr ( "DynRuleScope" ) ;
+bridge from island2 to island3 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "ScopeDefault" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "ScopeDefault" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "StrategyCurly" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "StrategyCurly" ) ;
+bridge from island0 to island1 ;
+island startif0 : SimpleStartIsland = "if" for-sglr ( "CondChoice" ) ;
+island endif0 : SimpleEndIsland = "end" for-sglr ( "CondChoice" ) ;
+bridge from startif0 to endif0 ;
+island startif0 : SimpleStartIsland = "if" for-sglr ( "IfThen" ) ;
+island endif0 : SimpleEndIsland = "end" for-sglr ( "IfThen" ) ;
+bridge from startif0 to endif0 ;
+island startswitch0 : SimpleStartIsland = "switch" for-sglr ( "SwitchChoiceNoOtherwise" ) ;
+island endswitch0 : SimpleEndIsland = "end" for-sglr ( "SwitchChoiceNoOtherwise" ) ;
+bridge from startswitch0 to endswitch0 ;
+island startswitch0 : SimpleStartIsland = "switch" for-sglr ( "SwitchChoice" ) ;
+island endswitch0 : SimpleEndIsland = "end" for-sglr ( "SwitchChoice" ) ;
+bridge from startswitch0 to endswitch0 ;
+island startlet0 : SimpleStartIsland = "let" for-sglr ( "Let" ) ;
+island endlet0 : SimpleEndIsland = "end" for-sglr ( "Let" ) ;
+bridge from startlet0 to endlet0 ;
+island island0 : SimpleStartIsland = "{" for-sglr ( "Scope" ) ;
+island island1 : SimpleEndIsland = "}" for-sglr ( "Scope" ) ;
+bridge from island0 to island1 ;
+
+
+reef instanceof0 : Keyword = "instanceof" for-sglr ( "InstanceOf" ) ;
+reef separator80 : Keyword = "," for-sglr ( "Invoke" ) ;
+reef super6 : Keyword = "super" for-sglr ( "SuperMethod" ) ;
+reef super5 : Keyword = "super" for-sglr ( "QSuperMethod" ) ;
+reef super4 : Keyword = "super" for-sglr ( "SuperField" ) ;
+reef super3 : Keyword = "super" for-sglr ( "QSuperField" ) ;
+reef new3 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new2 : Keyword = "new" for-sglr ( "NewArray" ) ;
+reef new1 : Keyword = "new" for-sglr ( "NewInstance" ) ;
+reef separator79 : Keyword = "," for-sglr ( "NewInstance" ) ;
+reef new0 : Keyword = "new" for-sglr ( "QNewInstance" ) ;
+reef separator78 : Keyword = "," for-sglr ( "QNewInstance" ) ;
+reef class2 : Keyword = "class" for-sglr ( "Class" ) ;
+reef void1 : Keyword = "void" for-sglr ( "VoidClass" ) ;
+reef class1 : Keyword = "class" for-sglr ( "VoidClass" ) ;
+reef this2 : Keyword = "this" for-sglr ( "This" ) ;
+reef this1 : Keyword = "this" for-sglr ( "QThis" ) ;
+reef package0 : Keyword = "package" for-sglr ( "PackageDec" ) ;
+reef import3 : Keyword = "import" for-sglr ( "TypeImportDec" ) ;
+reef import2 : Keyword = "import" for-sglr ( "TypeImportOnDemandDec" ) ;
+reef import1 : Keyword = "import" for-sglr ( "StaticImportDec" ) ;
+reef static3 : Keyword = "static" for-sglr ( "StaticImportDec" ) ;
+reef import0 : Keyword = "import" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef static2 : Keyword = "static" for-sglr ( "StaticImportOnDemandDec" ) ;
+reef interface1 : Keyword = "interface" for-sglr ( "AnnoDecHead" ) ;
+reef default1 : Keyword = "default" for-sglr ( "DefaultVal" ) ;
+reef separator77 : Keyword = "," for-sglr ( "AbstractMethodDec" ) ;
+reef separator76 : Keyword = "," for-sglr ( "DeprAbstractMethodDec" ) ;
+reef separator75 : Keyword = "," for-sglr ( "ConstantDec" ) ;
+reef interface0 : Keyword = "interface" for-sglr ( "InterfaceDecHead" ) ;
+reef extends3 : Keyword = "extends" for-sglr ( "ExtendsInterfaces" ) ;
+reef separator74 : Keyword = "," for-sglr ( "ExtendsInterfaces" ) ;
+reef enum0 : Keyword = "enum" for-sglr ( "EnumDecHead" ) ;
+reef separator73 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator72 : Keyword = "," for-sglr ( "EnumBody" ) ;
+reef separator71 : Keyword = "," for-sglr ( "ConstrDecHead" ) ;
+reef this0 : Keyword = "this" for-sglr ( "AltConstrInv" ) ;
+reef separator70 : Keyword = "," for-sglr ( "AltConstrInv" ) ;
+reef super2 : Keyword = "super" for-sglr ( "SuperConstrInv" ) ;
+reef separator69 : Keyword = "," for-sglr ( "SuperConstrInv" ) ;
+reef super1 : Keyword = "super" for-sglr ( "QSuperConstrInv" ) ;
+reef separator68 : Keyword = "," for-sglr ( "QSuperConstrInv" ) ;
+reef static1 : Keyword = "static" for-sglr ( "StaticInit" ) ;
+reef if3 : Keyword = "if" for-sglr ( "If" ) ;
+reef if2 : Keyword = "if" for-sglr ( "If" ) ;
+reef else1 : Keyword = "else" for-sglr ( "If" ) ;
+reef assert1 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef assert0 : Keyword = "assert" for-sglr ( "AssertStm" ) ;
+reef switch2 : Keyword = "switch" for-sglr ( "Switch" ) ;
+reef case1 : Keyword = "case" for-sglr ( "Case" ) ;
+reef default0 : Keyword = "default" for-sglr ( "Default" ) ;
+reef while1 : Keyword = "while" for-sglr ( "While" ) ;
+reef do0 : Keyword = "do" for-sglr ( "DoWhile" ) ;
+reef while0 : Keyword = "while" for-sglr ( "DoWhile" ) ;
+reef for2 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator67 : Keyword = "," for-sglr ( "For" ) ;
+reef for1 : Keyword = "for" for-sglr ( "For" ) ;
+reef separator66 : Keyword = "," for-sglr ( "For" ) ;
+reef separator65 : Keyword = "," for-sglr ( "For" ) ;
+reef for0 : Keyword = "for" for-sglr ( "ForEach" ) ;
+reef break0 : Keyword = "break" for-sglr ( "Break" ) ;
+reef continue0 : Keyword = "continue" for-sglr ( "Continue" ) ;
+reef return0 : Keyword = "return" for-sglr ( "Return" ) ;
+reef throw0 : Keyword = "throw" for-sglr ( "Throw" ) ;
+reef synchronized1 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef try1 : Keyword = "try" for-sglr ( "Try" ) ;
+reef try0 : Keyword = "try" for-sglr ( "Try" ) ;
+reef finally0 : Keyword = "finally" for-sglr ( "Try" ) ;
+reef catch0 : Keyword = "catch" for-sglr ( "Catch" ) ;
+reef separator64 : Keyword = "," for-sglr ( "LocalVarDec" ) ;
+reef separator63 : Keyword = "," for-sglr ( "MethodDecHead" ) ;
+reef separator62 : Keyword = "," for-sglr ( "DeprMethodDecHead" ) ;
+reef void0 : Keyword = "void" for-sglr ( "Void" ) ;
+reef throws0 : Keyword = "throws" for-sglr ( "ThrowsDec" ) ;
+reef separator61 : Keyword = "," for-sglr ( "ThrowsDec" ) ;
+reef separator60 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator59 : Keyword = "," for-sglr ( "ArrayInit" ) ;
+reef separator58 : Keyword = "," for-sglr ( "Anno" ) ;
+reef separator57 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator56 : Keyword = "," for-sglr ( "ElemValArrayInit" ) ;
+reef separator55 : Keyword = "," for-sglr ( "FieldDec" ) ;
+reef class0 : Keyword = "class" for-sglr ( "ClassDecHead" ) ;
+reef extends2 : Keyword = "extends" for-sglr ( "SuperDec" ) ;
+reef implements0 : Keyword = "implements" for-sglr ( "ImplementsDec" ) ;
+reef separator54 : Keyword = "," for-sglr ( "ImplementsDec" ) ;
+reef separator53 : Keyword = "." for-sglr ( "PackageName" ) ;
+reef separator52 : Keyword = "," for-sglr ( "TypeArgs" ) ;
+reef extends1 : Keyword = "extends" for-sglr ( "WildcardUpperBound" ) ;
+reef super0 : Keyword = "super" for-sglr ( "WildcardLowerBound" ) ;
+reef extends0 : Keyword = "extends" for-sglr ( "TypeBound" ) ;
+reef separator51 : Keyword = "&" for-sglr ( "TypeBound" ) ;
+reef separator50 : Keyword = "," for-sglr ( "TypeParams" ) ;
+reef boolean0 : Keyword = "boolean" for-sglr ( "Boolean" ) ;
+reef byte0 : Keyword = "byte" for-sglr ( "Byte" ) ;
+reef short0 : Keyword = "short" for-sglr ( "Short" ) ;
+reef int0 : Keyword = "int" for-sglr ( "Int" ) ;
+reef long0 : Keyword = "long" for-sglr ( "Long" ) ;
+reef char0 : Keyword = "char" for-sglr ( "Char" ) ;
+reef float0 : Keyword = "float" for-sglr ( "Float" ) ;
+reef double0 : Keyword = "double" for-sglr ( "Double" ) ;
+reef keyword6 : Keyword = "'" for-sglr ( "Char" ) ;
+reef keyword5 : Keyword = "'" for-sglr ( "Char" ) ;
+reef public0 : Keyword = "public" for-sglr ( "Public" ) ;
+reef private0 : Keyword = "private" for-sglr ( "Private" ) ;
+reef protected0 : Keyword = "protected" for-sglr ( "Protected" ) ;
+reef abstract0 : Keyword = "abstract" for-sglr ( "Abstract" ) ;
+reef final0 : Keyword = "final" for-sglr ( "Final" ) ;
+reef static0 : Keyword = "static" for-sglr ( "Static" ) ;
+reef native0 : Keyword = "native" for-sglr ( "Native" ) ;
+reef transient0 : Keyword = "transient" for-sglr ( "Transient" ) ;
+reef volatile0 : Keyword = "volatile" for-sglr ( "Volatile" ) ;
+reef synchronized0 : Keyword = "synchronized" for-sglr ( "Synchronized" ) ;
+reef strictfp0 : Keyword = "strictfp" for-sglr ( "StrictFP" ) ;
+reef separator49 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator48 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator47 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator46 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator45 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator44 : Keyword = "," for-sglr ( "ToMetaExpr" ) ;
+reef separator43 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator42 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator41 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator40 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator39 : Keyword = "," for-sglr ( "FromMetaExpr" ) ;
+reef separator38 : Keyword = "," for-sglr ( "Overlay" ) ;
+
+reef rules1 : Keyword = "rules" for-sglr ( "GenDynRules" ) ;
+reef separator37 : Keyword = "," for-sglr ( "RDec" ) ;
+reef separator36 : Keyword = "," for-sglr ( "RDecT" ) ;
+reef separator35 : Keyword = "," for-sglr ( "RDecT" ) ;
+reef separator34 : Keyword = "," for-sglr ( "RDef" ) ;
+reef separator33 : Keyword = "," for-sglr ( "RDefT" ) ;
+reef separator32 : Keyword = "," for-sglr ( "RDefT" ) ;
+reef keyword4 : Keyword = "->" for-sglr ( "RuleNoCond" ) ;
+reef keyword3 : Keyword = "->" for-sglr ( "Rule" ) ;
+reef where2 : Keyword = "where" for-sglr ( "Rule" ) ;
+reef keyword2 : Keyword = "->" for-sglr ( "Rule" ) ;
+reef where1 : Keyword = "where" for-sglr ( "WhereClause" ) ;
+reef separator31 : Keyword = "," for-sglr ( "SDef" ) ;
+reef separator30 : Keyword = "," for-sglr ( "Call" ) ;
+reef not0 : Keyword = "not" for-sglr ( "Not" ) ;
+reef where0 : Keyword = "where" for-sglr ( "Where" ) ;
+reef test0 : Keyword = "test" for-sglr ( "Test" ) ;
+reef prim2 : Keyword = "prim" for-sglr ( "PrimNoArgs" ) ;
+reef prim1 : Keyword = "prim" for-sglr ( "Prim" ) ;
+reef separator29 : Keyword = "," for-sglr ( "Prim" ) ;
+reef separator28 : Keyword = "," for-sglr ( "CongQ" ) ;
+reef separator27 : Keyword = "," for-sglr ( "TupleCong" ) ;
+reef separator26 : Keyword = "," for-sglr ( "ListCongNoTail" ) ;
+reef separator25 : Keyword = "," for-sglr ( "ListCong" ) ;
+reef if1 : Keyword = "if" for-sglr ( "CondChoice" ) ;
+reef else0 : Keyword = "else" for-sglr ( "CondChoice" ) ;
+reef if0 : Keyword = "if" for-sglr ( "IfThen" ) ;
+reef switch1 : Keyword = "switch" for-sglr ( "SwitchChoiceNoOtherwise" ) ;
+reef switch0 : Keyword = "switch" for-sglr ( "SwitchChoice" ) ;
+reef case0 : Keyword = "case" for-sglr ( "SwitchCase" ) ;
+reef separator24 : Keyword = "," for-sglr ( "AnnoList" ) ;
+reef separator23 : Keyword = "," for-sglr ( "Tuple" ) ;
+reef separator22 : Keyword = "," for-sglr ( "List" ) ;
+reef separator21 : Keyword = "," for-sglr ( "ListTail" ) ;
+reef separator20 : Keyword = "," for-sglr ( "AnnoList" ) ;
+reef separator19 : Keyword = "," for-sglr ( "SortList" ) ;
+reef separator18 : Keyword = "," for-sglr ( "SortListTl" ) ;
+reef separator17 : Keyword = "," for-sglr ( "SortTuple" ) ;
+reef sorts0 : Keyword = "sorts" for-sglr ( "Sorts" ) ;
+reef constructors0 : Keyword = "constructors" for-sglr ( "Constructors" ) ;
+reef separator16 : Keyword = "," for-sglr ( "Sort" ) ;
+reef separator15 : Keyword = "*" for-sglr ( "FunType" ) ;
+reef keyword1 : Keyword = "->" for-sglr ( "FunType" ) ;
+reef separator14 : Keyword = "," for-sglr ( "Op" ) ;
+reef separator13 : Keyword = "," for-sglr ( "OpQ" ) ;
+reef let0 : Keyword = "let" for-sglr ( "Let" ) ;
+reef in0 : Keyword = "in" for-sglr ( "Let" ) ;
+reef separator12 : Keyword = "," for-sglr ( "CallT" ) ;
+reef separator11 : Keyword = "," for-sglr ( "CallT" ) ;
+reef separator10 : Keyword = "," for-sglr ( "CallDynamic" ) ;
+reef separator9 : Keyword = "," for-sglr ( "CallDynamic" ) ;
+reef separator8 : Keyword = "," for-sglr ( "SDefT" ) ;
+reef separator7 : Keyword = "," for-sglr ( "SDefT" ) ;
+reef separator6 : Keyword = "," for-sglr ( "ExtSDefInl" ) ;
+reef separator5 : Keyword = "," for-sglr ( "ExtSDefInl" ) ;
+reef separator4 : Keyword = "," for-sglr ( "ExtSDef" ) ;
+reef separator3 : Keyword = "," for-sglr ( "ExtSDef" ) ;
+reef fail0 : Keyword = "fail" for-sglr ( "Fail" ) ;
+reef id0 : Keyword = "id" for-sglr ( "Id" ) ;
+reef separator2 : Keyword = "," for-sglr ( "Scope" ) ;
+reef prim0 : Keyword = "prim" for-sglr ( "PrimT" ) ;
+reef separator1 : Keyword = "," for-sglr ( "PrimT" ) ;
+reef separator0 : Keyword = "," for-sglr ( "PrimT" ) ;
+reef some0 : Keyword = "some" for-sglr ( "Some" ) ;
+reef one0 : Keyword = "one" for-sglr ( "One" ) ;
+reef all0 : Keyword = "all" for-sglr ( "All" ) ;
+reef keyword0 : Keyword = "import-term" for-sglr ( "ImportTerm" ) ;
+reef module0 : Keyword = "module" for-sglr ( "Module" ) ;
+reef strategies0 : Keyword = "strategies" for-sglr ( "Strategies" ) ;
+reef signature0 : Keyword = "signature" for-sglr ( "Signature" ) ;
+reef rules0 : Keyword = "rules" for-sglr ( "Rules" ) ;
+reef overlays0 : Keyword = "overlays" for-sglr ( "Overlays" ) ;
+
+ignore "//" to NEWLINE ;
+ignore "/*" to "*/" ;
+ignore "\" to "\" ;
+*/
\ No newline at end of file

From emma at cs.lth.se  Wed Mar 16 14:36:40 2011
From: emma at cs.lth.se (Emma Nilsson-Nyman)
Date: Wed, 16 Mar 2011 13:36:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22408 -
	sglr-recovery/trunk/bridge-definitions/grammars/webdsl
Message-ID: <20110316133640.6F3142B8027@mx2.tudelft.nl>

Author: EmmaNilssonNyman
Date: Wed Mar 16 13:36:40 2011
New Revision: 22408
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22408&sc=1

Log:
Token bp grammar for WebDSL

Added:
   sglr-recovery/trunk/bridge-definitions/grammars/webdsl/WebDSL.bp.manual

Added: sglr-recovery/trunk/bridge-definitions/grammars/webdsl/WebDSL.bp.manual
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sglr-recovery/trunk/bridge-definitions/grammars/webdsl/WebDSL.bp.manual	Wed Mar 16 13:36:40 2011	(r22408)
@@ -0,0 +1,237 @@
+grammar Main;
+
+import Layout ;
+
+
+// Islands and bridges
+
+
+island LBrace : LayoutStartIsland = "{" ;
+island RBrace : LayoutEndIsland = "}" ;
+bridge from LBrace to RBrace ;
+
+island LParen : SimpleStartIsland = "(" ; 
+island RParen : SimpleEndIsland = ")" ;
+bridge from LParen to RParen ;
+
+island LABrack : SimpleStartIsland = "[" ;
+island RABrack : SimpleEndIsland = "]" ;
+bridge from LBrack to RBrack ;
+
+// Reefs
+
+reef CommaKeyword = "," ;
+reef AsKeyword = "as" ;
+reef SlashKeyword = "/" ;
+reef FunctionKeyword = "function" ;
+reef ForKeyword = "for" ;
+reef IfKeyword = "if" ;
+reef ElseKeyword = "else" ;
+reef DotKeyword = "." ;
+reef ReturnKeyword = "return" ;
+reef PlaceholderKeyword = "placeholder" ;
+reef DefineKeyword = "define" ;
+reef ActionKeyword = "action" ;
+reef TemplateKeyword = "template" ;
+reef ParKeyword = "par" ;
+reef ModuleKeyword = "module" ;
+reef ImportsKeyword = "imports" ;
+reef EntityKeyword = "entity" ;
+reef ArrowKeyword = "->" ;
+reef DoubleColonKeyword = "::" ;
+reef ColonKeyword = ":" ;
+reef AssignKeyword = ":=" ;
+reef SemicolonKeyword = ";" ;
+reef FromKeyword = "from" ;
+reef ToKeyword = "to" ;
+reef InKeyword = "in" ;
+reef TitleKeyword = "title" ;
+reef BlockKeyword = "block" ;
+reef VarKeyword = "var" ;
+reef PageKeyword = "page" ;
+reef NavigateKeyword = "navigate" ;
+reef RawOutputKeyword = "rawoutput" ;
+reef RowKeyword = "row" ;
+reef ColumnKeyword = "column" ;
+reef TableKeyword = "table" ;
+reef FormKeyword = "form" ;
+reef LabelKeyword = "label" ;
+reef InputKeyword = "input" ;
+reef SelectKeyword = "select" ;
+reef WhereKeyword = "where" ;
+reef InnerKeyword = "inner" ;
+reef JoinKeyword = "join" ;
+reef GroupKeyword = "group" ;
+reef ByKeyword = "by" ;
+reef OrderKeyword = "order" ;
+reef LimitKeyword = "limit" ;
+reef DescKeyword = "desc" ;
+reef AndKeyword = "and" ;
+
+// Ignores
+
+ignore LineComment "//" to NEWLINE ;
+ignore MultiComment "/*" to "*/" ;
+ignore String "\" to "\" ;
+
+
+/* Old generated version:
+// Islands and bridges
+island island0 : SimpleStartIsland = "[" for-sglr ( "BracketList" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "BracketList" ) ;
+bridge from island0 to island1 ;
+island island2 : SimpleStartIsland = "<" for-sglr ( "JSElement" ) ;
+island island3 : SimpleEndIsland = ">" for-sglr ( "JSElement" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "<" for-sglr ( "XMLEmptyElement" ) ;
+island island3 : SimpleEndIsland = "/>" for-sglr ( "XMLEmptyElement" ) ;
+bridge from island2 to island3 ;
+island island2 : SimpleStartIsland = "<" for-sglr ( "XMLElement" ) ;
+island island3 : SimpleEndIsland = ">" for-sglr ( "XMLElement" ) ;
+bridge from island2 to island3 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "MapCreation" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "MapCreation" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ListCreation" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ListCreation" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ForExp" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ForExp" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ForExpNoFilter" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ForExpNoFilter" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ForExp" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ForExp" ) ;
+bridge from island0 to island1 ;
+island island0 : SimpleStartIsland = "[" for-sglr ( "ForExpNoFilter" ) ;
+island island1 : SimpleEndIsland = "]" for-sglr ( "ForExpNoFilter" ) ;
+bridge from island0 to island1 ;
+island startRef0 : SimpleStartIsland = "Ref" for-sglr ( "RefSort" ) ;
+island endRef0 : SimpleEndIsland = ">" for-sglr ( "RefSort" ) ;
+bridge from startRef0 to endRef0 ;
+
+// Reefs
+reef separator82 : Keyword = "," for-sglr ( "ServiceFunction" ) ;
+reef as3 : Keyword = "as" for-sglr ( "NativeClassFunctionFromStatic" ) ;
+reef separator81 : Keyword = "," for-sglr ( "ThrowStatement" ) ;
+reef separator80 : Keyword = "," for-sglr ( "ThrowTemplate" ) ;
+reef separator79 : Keyword = "," for-sglr ( "DispatchEntry" ) ;
+reef separator78 : Keyword = "/" for-sglr ( "DispatchNavigate" ) ;
+reef separator77 : Keyword = "/" for-sglr ( "DispatchNavigateButton" ) ;
+reef separator76 : Keyword = "," for-sglr ( "DispatchNavigateCall" ) ;
+reef function2 : Keyword = "function" for-sglr ( "NativeFunction" ) ;
+reef separator75 : Keyword = "," for-sglr ( "NativeFunction" ) ;
+reef as2 : Keyword = "as" for-sglr ( "NativeClassAlias" ) ;
+reef separator74 : Keyword = "," for-sglr ( "NativeClassFunction" ) ;
+reef separator73 : Keyword = "," for-sglr ( "NativeClassConstructor" ) ;
+reef separator72 : Keyword = "," for-sglr ( "NativeGenericType" ) ;
+reef separator71 : Keyword = "," for-sglr ( "StringSelectEntity" ) ;
+reef for18 : Keyword = "for" for-sglr ( "Derive" ) ;
+reef separator70 : Keyword = "," for-sglr ( "Derive" ) ;
+reef for17 : Keyword = "for" for-sglr ( "Derive" ) ;
+reef separator69 : Keyword = "," for-sglr ( "Derive" ) ;
+reef for16 : Keyword = "for" for-sglr ( "PagedForAll" ) ;
+reef for15 : Keyword = "for" for-sglr ( "PagedForAllNoFilter" ) ;
+reef for14 : Keyword = "for" for-sglr ( "PagedFor" ) ;
+reef for13 : Keyword = "for" for-sglr ( "PagedForNoFilter" ) ;
+reef separator68 : Keyword = "," for-sglr ( "Enum" ) ;
+reef separator67 : Keyword = "," for-sglr ( "Call" ) ;
+reef separator66 : Keyword = "," for-sglr ( "AccessControlPrincipal" ) ;
+reef separator65 : Keyword = "," for-sglr ( "AccessControlPrincipal" ) ;
+reef separator64 : Keyword = "," for-sglr ( "MatchArgs" ) ;
+reef separator63 : Keyword = "," for-sglr ( "MatchArgs" ) ;
+reef separator62 : Keyword = "," for-sglr ( "Predicate" ) ;
+reef separator61 : Keyword = "," for-sglr ( "Predicate" ) ;
+reef separator60 : Keyword = "," for-sglr ( "AccessControlPointcutElement" ) ;
+reef separator59 : Keyword = "," for-sglr ( "AccessControlPointcut" ) ;
+reef separator58 : Keyword = "," for-sglr ( "AccessControlPointcut" ) ;
+reef separator57 : Keyword = "," for-sglr ( "AccessControlImportRules" ) ;
+reef separator56 : Keyword = "," for-sglr ( "Property" ) ;
+reef separator55 : Keyword = "," for-sglr ( "DerivedProperty" ) ;
+reef separator54 : Keyword = "," for-sglr ( "InlineAnno" ) ;
+reef separator53 : Keyword = "," for-sglr ( "FromClause" ) ;
+reef as1 : Keyword = "as" for-sglr ( "AsAlias" ) ;
+reef separator52 : Keyword = "," for-sglr ( "GroupBy" ) ;
+reef separator51 : Keyword = "," for-sglr ( "OrderByClause" ) ;
+reef separator50 : Keyword = "," for-sglr ( "SelectedPropertiesList" ) ;
+reef separator49 : Keyword = "," for-sglr ( "Paren" ) ;
+reef separator48 : Keyword = "." for-sglr ( "Path" ) ;
+reef function1 : Keyword = "function" for-sglr ( "Function" ) ;
+reef separator47 : Keyword = "," for-sglr ( "Function" ) ;
+reef function0 : Keyword = "function" for-sglr ( "FunctionNoReturn" ) ;
+reef separator46 : Keyword = "," for-sglr ( "FunctionNoReturn" ) ;
+reef return1 : Keyword = "return" for-sglr ( "Return" ) ;
+reef return0 : Keyword = "return" for-sglr ( "ReturnEmpty" ) ;
+reef for12 : Keyword = "for" for-sglr ( "Schedule" ) ;
+reef for11 : Keyword = "for" for-sglr ( "ForStmt" ) ;
+reef for10 : Keyword = "for" for-sglr ( "ForStmtNoFilter" ) ;
+reef for9 : Keyword = "for" for-sglr ( "ForAllStmt" ) ;
+reef for8 : Keyword = "for" for-sglr ( "ForAllStmtNoFilter" ) ;
+reef for7 : Keyword = "for" for-sglr ( "ForCountStmt" ) ;
+reef separator45 : Keyword = "," for-sglr ( "ObjectCreation" ) ;
+reef separator44 : Keyword = "," for-sglr ( "ListCreation" ) ;
+reef separator43 : Keyword = "," for-sglr ( "SetCreation" ) ;
+reef separator42 : Keyword = "," for-sglr ( "TypedListCreation" ) ;
+reef separator41 : Keyword = "," for-sglr ( "TypedSetCreation" ) ;
+reef separator40 : Keyword = "," for-sglr ( "ThisCall" ) ;
+reef separator39 : Keyword = "," for-sglr ( "Call" ) ;
+reef as0 : Keyword = "as" for-sglr ( "Cast" ) ;
+reef for6 : Keyword = "for" for-sglr ( "ForExp" ) ;
+reef for5 : Keyword = "for" for-sglr ( "ForExpNoFilter" ) ;
+reef separator38 : Keyword = "," for-sglr ( "EmailCall" ) ;
+reef separator37 : Keyword = "," for-sglr ( "EventCall" ) ;
+reef separator36 : Keyword = "," for-sglr ( "EventCallElement" ) ;
+reef placeholder3 : Keyword = "placeholder" for-sglr ( "Placeholder" ) ;
+reef placeholder2 : Keyword = "placeholder" for-sglr ( "Placeholder" ) ;
+reef placeholder1 : Keyword = "placeholder" for-sglr ( "PlaceholderWithAjaxCall" ) ;
+reef placeholder0 : Keyword = "placeholder" for-sglr ( "PlaceholderWithAjaxCall" ) ;
+reef separator35 : Keyword = "," for-sglr ( "ThisCall" ) ;
+reef separator34 : Keyword = "," for-sglr ( "Call" ) ;
+reef define1 : Keyword = "define" for-sglr ( "Define" ) ;
+reef separator33 : Keyword = "," for-sglr ( "Define" ) ;
+reef separator32 : Keyword = "," for-sglr ( "TemplateArgs" ) ;
+reef separator31 : Keyword = "," for-sglr ( "TemplateArg" ) ;
+reef define0 : Keyword = "define" for-sglr ( "LocalRedefine" ) ;
+reef separator30 : Keyword = "," for-sglr ( "LocalRedefine" ) ;
+reef separator29 : Keyword = "," for-sglr ( "LocalRedefineArgs" ) ;
+reef for4 : Keyword = "for" for-sglr ( "For" ) ;
+reef for3 : Keyword = "for" for-sglr ( "ForNoFilter" ) ;
+reef for2 : Keyword = "for" for-sglr ( "ForAll" ) ;
+reef for1 : Keyword = "for" for-sglr ( "ForAllNoFilter" ) ;
+reef for0 : Keyword = "for" for-sglr ( "ForCount" ) ;
+reef separator28 : Keyword = "," for-sglr ( "SelectNoElems" ) ;
+reef separator27 : Keyword = "," for-sglr ( "Select" ) ;
+reef separator26 : Keyword = "," for-sglr ( "SelectFromListNoElems" ) ;
+reef separator25 : Keyword = "," for-sglr ( "SelectFromList" ) ;
+reef separator24 : Keyword = "," for-sglr ( "TemplateCase" ) ;
+reef separator23 : Keyword = "," for-sglr ( "TemplateCaseAlt" ) ;
+reef separator22 : Keyword = "," for-sglr ( "TemplateCall" ) ;
+reef separator21 : Keyword = "," for-sglr ( "TemplateCall" ) ;
+reef separator20 : Keyword = "," for-sglr ( "TemplateCallNoBody" ) ;
+reef separator19 : Keyword = "," for-sglr ( "TemplateCallNoAssigns" ) ;
+reef separator18 : Keyword = "," for-sglr ( "TemplateCallPropsNoBody" ) ;
+reef separator17 : Keyword = "," for-sglr ( "TemplateCallPropsNoBody" ) ;
+reef separator16 : Keyword = "," for-sglr ( "TemplateCallProps" ) ;
+reef separator15 : Keyword = "," for-sglr ( "TemplateCallPropsNoArgs" ) ;
+reef separator14 : Keyword = "," for-sglr ( "ArgDefine" ) ;
+reef separator13 : Keyword = "," for-sglr ( "NavigateCall" ) ;
+reef separator12 : Keyword = "," for-sglr ( "NavigateCall" ) ;
+reef separator11 : Keyword = "," for-sglr ( "PageCall" ) ;
+reef separator10 : Keyword = "," for-sglr ( "Submit" ) ;
+reef separator9 : Keyword = "," for-sglr ( "SubmitLink" ) ;
+reef separator8 : Keyword = "," for-sglr ( "Submit" ) ;
+reef separator7 : Keyword = "," for-sglr ( "SubmitLink" ) ;
+reef separator6 : Keyword = "," for-sglr ( "SubmitElem" ) ;
+reef separator5 : Keyword = "," for-sglr ( "SubmitLinkElem" ) ;
+reef separator4 : Keyword = "," for-sglr ( "DownloadLink" ) ;
+reef separator3 : Keyword = "," for-sglr ( "OutputImage" ) ;
+reef separator2 : Keyword = "," for-sglr ( "ActionCall" ) ;
+reef separator1 : Keyword = "," for-sglr ( "Action" ) ;
+reef separator0 : Keyword = "," for-sglr ( "GenericSort" ) ;
+
+// Ignores
+ignore "//" to NEWLINE ;
+ignore "/*" to "*/" ;
+ignore "\" to "\" ;
+*/
\ No newline at end of file

From tobivollebregt at gmail.com  Thu Mar 17 15:08:28 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 17 Mar 2011 14:08:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22409 - in
	spoofax-imp/trunk: org.strategoxt.imp.testing.test/test
	org.strategoxt.imp.testing/syntax
Message-ID: <20110317140828.3346F2B8046@mx2.tudelft.nl>

Author: tvo
Date: Thu Mar 17 14:08:27 2011
New Revision: 22409
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22409&sc=1

Log:
testing plugin: fix typo which caused an amb when starting a
[[[- or """-delimited string right after a test description

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt	Wed Mar 16 13:36:40 2011	(r22408)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt	Thu Mar 17 14:08:27 2011	(r22409)
@@ -4,10 +4,10 @@
 
 start symbol Start
 
-setup Header [[
-   module x 
+setup Header [[[
+   module x
    entity Initial {}
-]]
+]]]
 
 test [[ entity AnonymousTestCase {} ]]
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Wed Mar 16 13:36:40 2011	(r22408)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Mar 17 14:08:27 2011	(r22409)
@@ -32,7 +32,7 @@
   syntax
     "setup" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> -> <ParseTest-CF> {cons("Setup")}
     "setup" <Space-LEX> <Description-CF>                         -> <ParseTest-CF> {cons("SetupEmpty")}
-    
+
     "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> <LAYOUT?-CF> <Result*-CF> -> <ParseTest-CF> {cons("Test")}
     "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <TestStrategy-CF> <LAYOUT?-CF> <StrategoResult-CF>
       -> <StrategoTest-CF> {cons("TestStratego")}
@@ -63,10 +63,10 @@
     Space -/- [\ ]
 
   context-free syntax
-    
+
     "->" "file" PathName -> Result {cons("file"),    deprecated("Use => instead of ->")}
     "->" ATerm           -> Result {cons("pattern"), deprecated("Use => instead of ->")}
-    
+
     "=>" "file" PathName -> Result {cons("file")}
     "=>" ATerm           -> Result {cons("pattern")}
 
@@ -79,10 +79,10 @@
 
     INT "error"       -> Result    {cons("Error")}
     INT "errors"      -> Result    {cons("Errors")}
-    
+
     INT "warning"     -> Result    {cons("Warning")}
     INT "warnings"    -> Result    {cons("Warnings")}
-    
+
     "resolves" ResolveID                       -> Result {cons("Resolves")}
     "resolves" ResolveID "to" ResolveID        -> Result {cons("ResolvesTo")}
     "completes" CompletionID                   -> Result {cons("Completes")}
@@ -91,15 +91,15 @@
     "builds" ID "to" ATerm                     -> Result {cons("BuildsTo")}
     "builds" ID "to" "file" PathName           -> Result {cons("BuildsFile")}
     %% TODO: hover help, refactoring, run, builds to with an 'Output' concrete syntax tree
-    
+
     RegexExp          -> Constraint
-    
+
     ID "#" INT -> ResolveID {cons("Numbered")}
     ID         -> ResolveID {cons("Unnumbered")}
-    
+
     ID "#" INT -> CompletionID {cons("Numbered")}
     ID         -> CompletionID {cons("Unchecked")}
-    
+
     %% Handle a couple of lousy recoveries
     "test"  -> ID    {reject}
     "setup" -> ID    {reject}
@@ -108,11 +108,11 @@
             -> "resolves" {recover, reject}
             -> "=>" {recover, reject}
             -> "->" {recover, reject}
-           
+
   %% test Primitive refactoring test
   %% [[ module x entity X {} ]] refactoring rename at X input Y =>
   %% [[ module x entity Y {} ]]
- 
+
 context-free syntax
 
   %% UNDONE: ATerm syntax patches that should be in our ATerm.def already
@@ -128,16 +128,16 @@
   %% allow function applications without arguments
   %%context-free syntax
   %%  fun:AFun "(" ")" -> ATerm {cons("fun")}
-  
+
     "_"                  -> ATerm  {cons("wildcard")}
     "..."                -> { ATerm ","}+ {cons("wildcardvar")}
 
   context-free syntax
     StringQuotation -> Input
-    
+
   sorts
   syntax
-      
+
   %% Too close to Stratego
   %%  <DQuote1-LEX> <InputChars1-LEX> <DQuote1-LEX> -> <Input-CF> {cons("string")}
     <DQuote2-LEX> <InputChars2-LEX> <DQuote2-LEX> -> <Input-CF> {cons("string")}
@@ -146,7 +146,7 @@
 
   %% Too close to Stratego
   %%<Bracket1-LEX> <InputChars21-LEX> <CloseBracket1-LEX> -> <Input-CF> {cons("string")}
-  
+
     <Bracket2-LEX> <InputChars22-LEX> <CloseBracket2-LEX> -> <Input-CF> {cons("string")}
     <Bracket3-LEX> <InputChars23-LEX> <CloseBracket3-LEX> -> <Input-CF> {cons("string")}
     <Bracket4-LEX> <InputChars24-LEX> <CloseBracket4-LEX> -> <Input-CF> {cons("string")}
@@ -200,8 +200,8 @@
 
   lexical restrictions
     EOLString -/- ~[\n\[\"]
-    EOLQuote1 -/- ~[\"]
-    EOLQuote2 -/- ~[\[]
+    EOLQuote1 -/- [\"]
+    EOLQuote2 -/- [\[]
 
     DQuote1   -/- [\"]
     DQuote2   -/- [\"]
@@ -216,7 +216,7 @@
     "//" ~[\n]* ([\n] | Eof) -> ShortCom
     "/*" CommChar* "*/"      -> LongCom
                              -> Eof
-    
+
     ~[\*]      -> CommChar
 
     "*"        -> Asterisk

From r.t.lindeman at student.tudelft.nl  Thu Mar 17 18:07:21 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 17 Mar 2011 17:07:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22410 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core...
Message-ID: <20110317170721.49599108C023@mx3.tudelft.nl>

Author: RickyLindeman
Date: Thu Mar 17 17:07:20 2011
New Revision: 22410
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22410&sc=1

Log:
* Refactored "Stratego Program" Launching. It is now easier to launch a stratego program from Java code
 * Add support for changing the current stratego term
 * Added some experimental junit plug-in tests

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/LaunchUtils.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/DebuggableHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EnterBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/ExitBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/launch/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/launch/DSMLocalvarDebug (1).launch
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/launch/TestStrategoLauncher.launch
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/setinput.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugElementEventWaiter.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugElementKindEventDetailWaiter.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugElementKindEventWaiter.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugEventWaiter.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/AbstractDebugTest.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/TestAgainException.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/refactoring/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/refactoring/MemberParser.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileSetInput.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncher.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncherOutput.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Test.generated.pp
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventInfoStringExtractor.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/IEventInfoExtractor.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree.dep
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.rtree
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/lib/strategodebuglib.rtree
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl2.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/strategodebuglib.rtree
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoLaunchShortcut.java

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/LaunchUtils.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/LaunchUtils.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,121 @@
+package org.strategoxt.imp.debug.core.str.launching;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.ILaunchConfigurationType;
+import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
+import org.eclipse.debug.core.ILaunchManager;
+
+public class LaunchUtils {
+
+	/**
+	 * Returns the type of configuration this shortcut is applicable to.
+	 * 
+	 * Copied from org.eclipse.jdt.debug.ui.launchConfigurations.JavaLaunchShortcut.
+	 * 
+	 * @return the type of configuration this shortcut is applicable to
+	 */
+	public static ILaunchConfigurationType getStrategoLaunchConfigurationType()
+	{
+    	ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
+
+		ILaunchConfigurationType type = manager.getLaunchConfigurationType(IStrategoConstants.ID_STRATEGO_DEBUG_MODEL+".launchConfigurationType.str"); 
+		return type;
+	}
+	
+	/**
+	 * Creates and returns a new configuration based on the specified type.
+	 * 
+	 * Copied from org.eclipse.jdt.debug.ui.launchConfigurations.JavaLaunchShortcut#createConfiguration(org.eclipse.jdt.core.IType)
+	 * 
+	 * TODO: generateUniqueLaunchConfigurationNameFrom is deprecated, since 3.6 clients should use the generateLaunchConfigurationName(String)
+	 * @param type the stratego file to create a launch configuration for
+	 * @return launch configuration configured to launch the specified type
+	 * @throws CoreException 
+	 */
+	@SuppressWarnings("deprecation")
+	public static ILaunchConfiguration createConfiguration(IFile file) throws CoreException {
+		ILaunchConfiguration config = null;
+
+		ILaunchConfigurationType configType = getStrategoLaunchConfigurationType();
+		String namePrefix = file.getName();
+		ILaunchConfigurationWorkingCopy wc = configType.newInstance(null, DebugPlugin.getDefault().getLaunchManager().generateUniqueLaunchConfigurationNameFrom(namePrefix)); 
+		
+		/*
+		IStrategoConstants.ATTR_STRATEGO_PROGRAM;
+		IStrategoConstants.ATTR_STRATEGO_PROGRAM_ARGUMENTS;
+		IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE;
+		IStrategoConstants.ATTR_STRATEGO_PROJECT;
+		*/
+		// default parameters
+		String program = file.getFullPath().toOSString();
+		List<String> programArguments = new ArrayList<String>();
+		String fulldir = file.getParent().getLocation().toOSString();
+		programArguments.add("-i");
+		programArguments.add(fulldir + "/run.input");
+		programArguments.add("-o");
+		programArguments.add(fulldir + "/run.output");
+
+		boolean recompile = false;
+		wc.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, program);
+		wc.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_ARGUMENTS, programArguments);
+		wc.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE, recompile);
+		IResource[] rs = new IResource[] {file};
+		wc.setMappedResources(rs);
+		config = wc.doSave();
+
+		return config;
+	}
+	
+	/**
+	 * Get the existing launch configurations for the given stratego file.
+	 * 
+	 * @param strategoProgramPath
+	 * @return
+	 */
+    public static List<ILaunchConfiguration> getStrategoLaunchConfigurations(IFile strategoProgramPath, String mode)
+    {
+    	// fetch the stratego config type
+    	ILaunchConfigurationType type = getStrategoLaunchConfigurationType();
+		List<ILaunchConfiguration> candidateConfigs = new ArrayList<ILaunchConfiguration>();
+		if (type != null)
+		{
+			// stratego launch configuration type found!
+			ILaunchConfiguration[] configs = null;
+			try {
+				configs = DebugPlugin.getDefault().getLaunchManager().getLaunchConfigurations(type);
+			} catch (CoreException e) {
+				// Could not get Launch configurations for the stratego launch type.
+				e.printStackTrace();
+			}		
+			if (configs != null)
+			{
+				for(ILaunchConfiguration config : configs)
+				{
+					// find a config that matches the program name
+					String program;
+					try {
+						program = config.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, "");
+						// TODO: should we equal on IPath objects instead of Strings?
+						// TODO: should we also check if the mode is supported for this launch config?
+						if (program.equals(strategoProgramPath.getFullPath().toOSString())) 
+						{
+							candidateConfigs.add(config);
+						}
+					} catch (CoreException e) {
+						// Could not get program name for the stratego launch
+						e.printStackTrace();
+					}
+				}
+			}
+
+		}
+		return candidateConfigs;
+    }
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -144,7 +144,6 @@
 		try {
 			debugSessionSettings.checkJarLibraries();
 		} catch (FileNotFoundException e) {
-			// TODO Auto-generated catch block
 			abort("Could not find required eclipse jars in directory \""+directory+"\".", e);
 		}
 		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
@@ -328,12 +327,7 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		} 
-		/*
-		catch (DebugCompileException e) {
-			// TODO Auto-generated catch block
-			//e.printStackTrace();
-			abort("Could not compile stratego program.", e);
-		}*/
+		// do not catch the DebugCompileException here...
 		return binBase;
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -335,7 +335,7 @@
 						IPath breakPointPath = marker.getResource().getFullPath(); // path to the file in which the breakpoint was set
 						IPath subProjectPath = new Path(parent.getAbsolutePath()); // the dir in which the program is
 						System.out.println("subProjectPath: " + subProjectPath.toOSString());
-						System.out.println("breakPointPath: " + breakPointPath.toOSString());
+						System.out.println("breakPointPath: " + breakPointPath.toOSString() + " " + marker.getAttribute(IMarker.LINE_NUMBER));
 						boolean isPrefix = subProjectPath.isPrefixOf(breakPointPath);
 						return isPrefix;
 					}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/DebuggableHybridInterpreter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/DebuggableHybridInterpreter.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,53 @@
+package org.strategoxt;
+
+import org.spoofax.interpreter.core.InterpreterErrorExit;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.lang.MissingStrategyException;
+import org.strategoxt.lang.StrategoErrorExit;
+import org.strategoxt.lang.StrategoException;
+import org.strategoxt.lang.StrategoExit;
+
+/**
+ * 
+ * This DebuggableHybridInterpreter extends the HybridInterpreter so that it can provide debugging support.
+ * It will execute the stratego code in a separate JVM.
+ * 
+ * @author rlindeman
+ *
+ */
+public class DebuggableHybridInterpreter extends HybridInterpreter {
+
+	public DebuggableHybridInterpreter(ITermFactory termFactory) {
+		super(termFactory);
+	}
+
+	
+	/**
+	 * Invokes a compiled or interpreted strategy bound to this instance.
+	 * 
+	 * Wraps any StrategoException into checked InterpreterException exceptions.
+	 */
+	@Override
+	public boolean invoke(String name)
+			throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
+		
+		try {
+			// launch a JVM
+			// http://www.eclipse.org/articles/Article-Java-launch/launching-java.html
+			//if (!loadedJars) init();
+			return super.invoke(name);
+		} catch (StrategoErrorExit e) {
+			throw new InterpreterErrorExit(e.getMessage(), e.getTerm(), e);
+        } catch (StrategoExit e) {
+            throw new InterpreterExit(e.getValue(), e);
+        } catch (MissingStrategyException e) {
+        	throw new UndefinedStrategyException(e);
+        } catch (StrategoException e) {
+            throw new InterpreterException(e);
+        }
+		//return false;
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -233,6 +233,18 @@
 	}
 	
 	/**
+	 * Replaces the current term with the given term.
+	 * @param term
+	 */
+	public void changeCurrentTerm(String term)
+	{
+		// only possible when suspended
+		ThreadEventHandler handler = eventThread.getMainThreadHandler();
+		handler.setCurrentTerm(term);
+		// do not resume automagically!
+	}
+	
+	/**
 	 * Terminate the Stratego VM. Exits with exitcode 1, abnormal termination.
 	 */
 	public void terminateVM()

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -22,6 +22,7 @@
 import com.sun.jdi.InvalidTypeException;
 import com.sun.jdi.InvocationException;
 import com.sun.jdi.Method;
+import com.sun.jdi.StackFrame;
 import com.sun.jdi.ThreadReference;
 import com.sun.jdi.Value;
 import com.sun.jdi.event.BreakpointEvent;
@@ -94,14 +95,16 @@
 			this.pendingExit = null;
 		}
 	}
-
+	
+	private IEventInfoExtractor extractor = null;
+	
 	protected boolean breakpointEvent(BreakpointEvent event, EventSpecManager eventSpecManager)
 	{
 		executePendingExit();
 		long start = System.nanoTime(); // profile internal
 		boolean suspendThread = false;
 		String eventType = (String) event.request().getProperty("event-type");
-		IEventInfoExtractor extractor = new EventInfoStringExtractor(event);
+		this.extractor = new EventInfoStringExtractor(event);
 		long extractorEnd = System.nanoTime();
 		EventHandler h = EventHandlerFactory.createEventHandler(extractor, eventType);
 		if (h.isEnter())
@@ -119,6 +122,9 @@
 		long suspendCheckEnd = System.nanoTime();
 		if (suspendThread)
 		{
+			System.out.println("suspend");
+			// FIXME: get current term
+			System.out.println(this.strategoState.currentFrame().getCurrentTerm());
 			String[] dynamicRuleNames = getDynamicRuleNames(h);
 			if (dynamicRuleNames != null) {
 				this.strategoState.currentFrame().setDynamicRuleNames(dynamicRuleNames);
@@ -149,12 +155,57 @@
 		EventProfiler.instance.internalProfile(eventType, start-start, extractorEnd-start, processStart-extractorEnd, processEnd-processStart, suspendCheckEnd-processEnd, end-suspendCheckEnd);
 		return suspendThread;
 	}
+	
+	@SuppressWarnings("unchecked")
+	public void setCurrentTerm(String term)
+	{
+		StackFrame fr = null;
+		try {
+			fr = thread.frame(0); // get current frame
+		} catch (IncompatibleThreadStateException e) {
+			e.printStackTrace(); // thread should be suspended
+		} catch (IndexOutOfBoundsException e) {
+			e.printStackTrace(); // invalid index
+		}
+		if (fr == null)
+		{
+			System.out.println("Could not get thread!");
+		}
+		List<Method> methodsC = fr.thisObject().referenceType().methodsByName(DebugCallStrategy.SETCURRENTTERM);
+		Method mCurrent = methodsC.get(0);
+		Value outputCurrent = null; // will be a string representation of an IStrategoTerm, IStrategoList, containing the names of the active dynamic rules
+		try {
+			Value arg = thread.virtualMachine().mirrorOf(term);
+			List<Value> argumentsC = new ArrayList<Value>();
+			argumentsC.add(arg);
+			outputCurrent = fr.thisObject().invokeMethod(thread, mCurrent, argumentsC, ThreadReference.INVOKE_SINGLE_THREADED);
+			this.extractor.updateContents();
+		} catch (InvalidTypeException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (ClassNotLoadedException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (IncompatibleThreadStateException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (InvocationException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		System.out.println(outputCurrent);
+		IStrategoTerm t = this.extractor.getGiven();
+		//System.out.println("BEFORE: " + this.strategoState.currentFrame().getCurrentTerm());
+		this.strategoState.currentFrame().setCurrentTerm(t);
+		//System.out.println("AFTER: " + this.strategoState.currentFrame().getCurrentTerm());
+	}
 
 	@SuppressWarnings("unchecked")
 	private String[] getDynamicRuleNames(EventHandler h)
 	{
 		Method method = null;
 		List<Value> arguments = new ArrayList<Value>();
+		
 		// java method "getDRKeySetString" calls a stratego strategy and returns a list of strings for each dynamic rule
 		List<Method> methods = h.getStackFrame().thisObject().referenceType().methodsByName(DebugCallStrategy.GETDRKEYSETSTRING);
 		// should be only one method!

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventHandler.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -237,6 +237,11 @@
 		
 	}
 	
+	/**
+	 * Create an actual breakpoint from the current state.
+	 * @param currentState
+	 * @return
+	 */
 	protected abstract BreakPoint createBreakPoint(StrategoState currentState);
 
 	public abstract String getEventType();

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventInfoStringExtractor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventInfoStringExtractor.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/EventInfoStringExtractor.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -271,4 +271,13 @@
 
 		return this.varnameStringValue;
 	}
+
+	public void updateContents() {
+		// TODO Auto-generated method stub
+		this.stackFrame = null;
+		this.eventInfoStringValue = null;
+		this.givenTermStringValue = null;
+		this.varnameStringValue = null;
+		init();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/IEventInfoExtractor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/IEventInfoExtractor.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/IEventInfoExtractor.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -42,5 +42,10 @@
 	 * @return
 	 */
 	public StackFrame getStackFrame();
+	
+	/**
+	 * Call this method if the event info has changed in the debuggee.
+	 */
+	public void updateContents();
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleEnterHandler.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -19,6 +19,7 @@
 		String filename = this.getFilename(); // the filename of the stratego file in which we want to set a breakpoint
 		LocationInfo locationInfo = getLocationInfo();
 		RuleEnterBreakPoint b = new RuleEnterBreakPoint(filename, name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
+		b.setVirtual(false);
 		return b;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/RuleExitHandler.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -23,6 +23,7 @@
 		LocationInfo locationInfo = getLocationInfo();
 		
 		RuleExitBreakPoint b = new RuleExitBreakPoint(filename, name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
+		b.setVirtual(false);
 		return b;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyEnterHandler.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -21,6 +21,7 @@
 		LocationInfo locationInfo = getLocationInfo();
 		
 		StrategyEnterBreakPoint b = new StrategyEnterBreakPoint(filename, name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
+		b.setVirtual(false);
 		return b;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyExitHandler.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -22,6 +22,7 @@
 		
 		LocationInfo locationInfo = getLocationInfo();
 		StrategyExitBreakPoint b = new StrategyExitBreakPoint(filename, name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
+		b.setVirtual(false);
 		return b;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/StrategyStepHandler.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -34,7 +34,7 @@
 		//long b3 = System.nanoTime();
 		//EventProfiler.instance.mark("createBreakPoint", "B3", b3 - b2);
 		StrategyStepBreakPoint b = new StrategyStepBreakPoint(filename, name, locationInfo.getStart_line_num(), locationInfo.getStart_token_pos());
-		
+		b.setVirtual(false);
 		//long b4 = System.nanoTime();
 		//EventProfiler.instance.mark("createBreakPoint", "B4", b4 - b3);
 		return b;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/events/ValueExtractor.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -583,4 +583,9 @@
 		}
 		return varname;
 	}
+
+	public void updateContents() {
+		// TODO Auto-generated method stub
+		
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/BreakPoint.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -8,6 +8,11 @@
 	private int startTokenPosition;
 	
 	/**
+	 * True if the breakpoint contains wildcards and cannot be mapped to a single program state.
+	 */
+	private boolean isVirtual = false;
+	
+	/**
 	 * Represents a BreakPoint at the given linenumber (1-based) and given startTokenPosition (1-based).
 	 * The startTokenPosition should be used when multiple statements can be placed at a single line and the debugger is able to distinguish between them.
 	 * @param name
@@ -54,4 +59,31 @@
 	public void setStartTokenPosition(int startTokenPosition) {
 		this.startTokenPosition = startTokenPosition;
 	}
+	
+	/**
+	 * Returns true if the breakpoint contains a wildcard.
+	 * @return
+	 */
+	public boolean isVirtual() {
+		return isVirtual;
+	}
+	
+	public void setVirtual(boolean isVirtual) {
+		this.isVirtual = isVirtual;
+	}
+	
+	
+	
+	/**
+	 * Returns true if the given breakpoint matches this breakpoint.
+	 * The given breakpoint should be a 'real' breakpoint, no wildcards!
+	 * @param breakPoint
+	 * @return
+	 */
+	public abstract boolean match(BreakPoint breakPoint);
+	
+	public abstract boolean isEnter();
+	
+	public abstract boolean isExit();
+
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EnterBreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EnterBreakPoint.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,37 @@
+package org.strategoxt.debug.core.eventspec;
+
+public class EnterBreakPoint extends BreakPoint {
+
+	public EnterBreakPoint(String filename, String name, int lineNumber,
+			int startTokenPosition) {
+		super(filename, name, lineNumber, startTokenPosition);
+		// TODO Auto-generated constructor stub
+	}
+
+	@Override
+	public boolean match(BreakPoint breakPoint) {
+		if (breakPoint.isVirtual())
+		{
+			return false;
+		}
+		else if (breakPoint.isEnter())
+		{
+			return true; // TODO: match on wildcards?
+		}
+		else
+		{
+			return false;
+		}
+	}
+
+	@Override
+	public boolean isEnter() {
+		return true;
+	}
+
+	@Override
+	public boolean isExit() {
+		return false;
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -13,6 +13,9 @@
 	
 	private List<BreakPoint> breakPoints = null;
 	
+	/**
+	 * Creates a new EventSpecList, it contains the active breakpoints.
+	 */
 	public EventSpecList()
 	{
 		this.breakPoints = new ArrayList<BreakPoint>();
@@ -31,5 +34,10 @@
 	public boolean contains(BreakPoint b) {
 		return this.breakPoints.contains(b);
 	}
+	
+	public List<BreakPoint> getBreakPoints()
+	{
+		return this.breakPoints;
+	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -57,18 +57,31 @@
 	}
 
 	/**
-	 * Returns true if the given RuleBreakPoint should suspend the vm.
-	 * @param ruleBreakPoint
+	 * Returns true if the given BreakPoint should suspend the vm.
+	 * BreakPoint current should not be a virtual breakpoint (should not contain wildcards).
+	 * @param current
 	 * @return
 	 */
-	public boolean match(BreakPoint b) {
-		boolean match = false;
-		if (this.eventSpecList.contains(b))
+	public boolean match(BreakPoint current) {
+		if (current == null)
 		{
-			// the given breakpoint matches one of the defined breakpoints
-			match = true;
+			return false;
 		}
-		return match;
+		else if (current.isVirtual())
+		{
+			// The current breakpoint cannot be virtual.
+			return false;
+		}
+		for(BreakPoint definedBreakPoint : this.eventSpecList.getBreakPoints())
+		{
+			// defined breakpoint may have wildcards
+			boolean isMatch = definedBreakPoint.match(current);
+			if (isMatch)
+			{
+				return true;
+			}
+		}
+		return false;
 	}
 
 	public void add(BreakPoint bp) {

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/ExitBreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/ExitBreakPoint.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,37 @@
+package org.strategoxt.debug.core.eventspec;
+
+public class ExitBreakPoint extends BreakPoint {
+
+	public ExitBreakPoint(String filename, String name, int lineNumber,
+			int startTokenPosition) {
+		super(filename, name, lineNumber, startTokenPosition);
+		// TODO Auto-generated constructor stub
+	}
+
+	@Override
+	public boolean match(BreakPoint breakPoint) {
+		if (breakPoint.isVirtual())
+		{
+			return false;
+		}
+		else if (breakPoint.isExit())
+		{
+			return true; // TODO: match on wildcards?
+		}
+		else
+		{
+			return false;
+		}
+	}
+
+	@Override
+	public boolean isEnter() {
+		return false;
+	}
+
+	@Override
+	public boolean isExit() {
+		return true;
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleEnterBreakPoint.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,12 +1,26 @@
 package org.strategoxt.debug.core.eventspec;
 
-public class RuleEnterBreakPoint extends BreakPoint {
+public class RuleEnterBreakPoint extends EnterBreakPoint {
 	
 	public RuleEnterBreakPoint(String filename, String name, int lineNumber, int startTokenPosition) {
 		super(filename, name, lineNumber, startTokenPosition);
 	}
 
 	@Override
+	public boolean match(BreakPoint breakPoint) {
+		if (breakPoint.isVirtual())
+		{
+			return false;
+		}
+		else
+		{
+			// TODO: if this is virtual, check for wildcards
+			// else just use equals
+			return this.equals(breakPoint);
+		}
+	}
+	
+	@Override
 	public int hashCode() {
 		final int prime = 31;
 		int result = 1;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/RuleExitBreakPoint.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,12 +1,27 @@
 package org.strategoxt.debug.core.eventspec;
 
-public class RuleExitBreakPoint extends BreakPoint {
+public class RuleExitBreakPoint extends ExitBreakPoint {
 	
 	public RuleExitBreakPoint(String filename, String name, int lineNumber, int startTokenPosition) {
 		super(filename, name, lineNumber, startTokenPosition);
 	}
 
 	@Override
+	public boolean match(BreakPoint breakPoint) {
+		if (breakPoint.isVirtual())
+		{
+			return false;
+		}
+		else
+		{
+			// TODO: if this is virtual, check for wildcards
+			// else just use equals
+			return this.equals(breakPoint);
+		}
+	}
+	
+	
+	@Override
 	public int hashCode() {
 		final int prime = 37;
 		int result = 1;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyEnterBreakPoint.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,12 +1,26 @@
 package org.strategoxt.debug.core.eventspec;
 
-public class StrategyEnterBreakPoint extends BreakPoint {
+public class StrategyEnterBreakPoint extends EnterBreakPoint {
 	
 	public StrategyEnterBreakPoint(String filename, String name, int lineNumber, int startTokenPosition) {
 		super(filename, name, lineNumber, startTokenPosition);
 	}
 
 	@Override
+	public boolean match(BreakPoint breakPoint) {
+		if (breakPoint.isVirtual())
+		{
+			return false;
+		}
+		else
+		{
+			// TODO: if this is virtual, check for wildcards
+			// else just use equals
+			return this.equals(breakPoint);
+		}
+	}
+	
+	@Override
 	public int hashCode() {
 		final int prime = 41;
 		int result = 1;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyExitBreakPoint.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,11 +1,26 @@
 package org.strategoxt.debug.core.eventspec;
 
-public class StrategyExitBreakPoint extends BreakPoint {
+public class StrategyExitBreakPoint extends ExitBreakPoint {
 	
 	public StrategyExitBreakPoint(String filename, String name, int lineNumber, int startTokenPosition) {
 		super(filename, name, lineNumber, startTokenPosition);
 	}
-
+	
+	@Override
+	public boolean match(BreakPoint breakPoint) 
+	{
+		if (breakPoint.isVirtual())
+		{
+			return false;
+		}
+		else
+		{
+			// TODO: if this is virtual, check for wildcards
+			// else just use equals
+			return this.equals(breakPoint);
+		}
+	}
+	
 	@Override
 	public int hashCode() {
 		final int prime = 43;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/StrategyStepBreakPoint.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -49,4 +49,28 @@
 			return false;
 		return true;
 	}
+
+	@Override
+	public boolean match(BreakPoint breakPoint) {
+		if (breakPoint.isVirtual())
+		{
+			return false;
+		}
+		else
+		{
+			// TODO: if this is virtual, check for wildcards
+			// else just use equals
+			return this.equals(breakPoint);
+		}
+	}
+
+	@Override
+	public boolean isEnter() {
+		return false;
+	}
+
+	@Override
+	public boolean isExit() {
+		return false;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -436,6 +436,7 @@
 		try {
 			// TODO: can we forward the error log messages?
 			org.strategoxt.strj.Main.mainNoExit(c, strj_args);
+			succes = true; // also succes, the program did not call the exit strategy
 		}
 		catch(StrategoExit e)
 		{

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,5 +1,6 @@
 package org.strategoxt.imp.debug.stratego.runtime;
 
+import java.io.File;
 import java.io.IOException;
 import java.net.URL;
 import java.util.ArrayList;
@@ -14,6 +15,8 @@
 	public final static String STRATEGO_DEBUG_RUNTIME_JAR_NAME = "stratego-debug-runtime.jar";
 	public final static String STRATEGO_DEBUG_RUNTIME_JAVA_JAR_NAME = "stratego-debug-runtime-java.jar";
 	
+	private final static String RUNTIME_PROJECT_LOCATION = "org.strategoxt.imp.debug.stratego.runtime";
+	
 	public final static String STRATEGO_DEBUG_RUNTIME_JAR_ENTRY = "/include/" + STRATEGO_DEBUG_RUNTIME_JAR_NAME;
 	public final static String STRATEGO_DEBUG_RUNTIME_JAVA_JAR_ENTRY = "/include/" + STRATEGO_DEBUG_RUNTIME_JAVA_JAR_NAME;
 	/**
@@ -33,6 +36,27 @@
 	public static IPath getPathFromBundle(String pathInBundle)
 	{
 		org.strategoxt.imp.debug.stratego.runtime.Activator runtimeActivator = org.strategoxt.imp.debug.stratego.runtime.Activator.getInstance();
+		if (runtimeActivator == null)
+		{
+			System.out.println("NO RUNTIME ACTIVATOR...");
+		}
+		if (runtimeActivator.getBundle() == null)
+		{
+			System.out.println("NO BUNDLE... " + pathInBundle);
+			String path2lib = "../" + RUNTIME_PROJECT_LOCATION + pathInBundle;
+			System.out.println("try to get from: " + path2lib);
+			File f = new File(path2lib);
+			String resolved = null;
+			try {
+				resolved = f.getCanonicalPath();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+			System.out.println("Resolved to: " + resolved);
+			IPath path = new Path(resolved);
+			return path;
+		}
 		URL pathInBundleURL = runtimeActivator.getBundle().getEntry(pathInBundle);
 		System.out.println("RUNTIME: " + pathInBundleURL);
 		URL fileURL = null;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,13 +1,15 @@
 package org.strategoxt.imp.debug.stratego.runtime.strategies;
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.StringTermReader;
 import org.spoofax.terms.TermFactory;
 import org.strategoxt.lang.Context;
 import org.strategoxt.stratego_lib.dr_rule_sets_hashtable_0_0;
 
 public abstract class DebugCallStrategy extends org.strategoxt.lang.Strategy {
 
-	protected TermFactory factory = new TermFactory();
+	public static TermFactory factory = new TermFactory();
+	public static StringTermReader termReader = new StringTermReader(factory);
 	
 	/**
 	 * Name of the variable that contains the eventInfo. The type of the variable should be String.
@@ -110,6 +112,7 @@
 		this.context = context;
 		this.eventInfo = factory.makeTuple(filename, name, location).toString();
 		this.givenTermString = given.toString();
+		this.current = current;
 		return current;
 	}
 	
@@ -119,6 +122,18 @@
 		this.givenTermString = given.toString();
 		String s = varname.toString();
 		this.varnameString = s;
+		this.current = current;
 		return current;
 	}
+	
+	protected IStrategoTerm current = null;
+	
+	public static String SETCURRENTTERM = "setCurrentTerm";
+	
+	public void setCurrentTerm(String termString)
+	{
+		IStrategoTerm newCurrent = termReader.parseFromString(termString);
+		this.current = newCurrent;
+		this.givenTermString = termString;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_enter_0_4.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -18,7 +18,7 @@
 	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename, IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
 		super.invoke(context, current, filename, name, location, given);
 		nothing();
-		return current;
+		return this.current;
 	}
 	
 	public static String getFullClassName()

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_r_exit_0_4.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -18,7 +18,7 @@
 	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
 		super.invoke(context, current, filename, name, location, given);
 		nothing();
-		return current;
+		return this.current;
 	}
 	
 	public static String getFullClassName()

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_enter_0_4.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -18,7 +18,7 @@
 	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
 		super.invoke(context, current, filename, name, location, given);
 		nothing();
-		return current;
+		return this.current;
 	}
 	
 	public static String getFullClassName()

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_exit_0_4.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -18,7 +18,7 @@
 	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
 		super.invoke(context, current, filename, name, location, given);
 		nothing();
-		return current;
+		return this.current;
 	}
 	
 	public static String getFullClassName()

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_step_0_4.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -24,7 +24,7 @@
 	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm location, IStrategoTerm given) {
 		super.invoke(context, current, filename, name, location, given);
 		nothing();
-		return current;
+		return this.current;
 	}
 	
 	public static String getFullClassName()

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/java_s_var_0_5.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -14,7 +14,7 @@
 	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm filename,	IStrategoTerm name, IStrategoTerm varname, IStrategoTerm location, IStrategoTerm given) {
 		super.invoke(context, current, filename, name, varname, location, given);
 		nothing();
-		return current;
+		return this.current;
 	}
 	
 	public static String getFullClassName()

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree.dep
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree.dep	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.ctree.dep	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,5 +1,5 @@
 strategodebuglib.ctree: \
 	../trans/external-calls.str \
-	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/libstratego-lib.rtree \
-	/nix/store/vhrdwv6n5asnfdv4jz0cwgl0gx7ws95j-strategoxt-0.18pre20635/share/stratego-lib/libstrategolib.rtree \
+	/nix/store/dk913kdyv8747yq5d1pz1cy2w1y1s8q8-strategoxt-1.8pre21513/share/libstratego-lib.rtree \
+	/nix/store/dk913kdyv8747yq5d1pz1cy2w1y1s8q8-strategoxt-1.8pre21513/share/stratego-lib/libstrategolib.rtree \
 	../trans/strategodebuglib.str
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/str-lib/strategodebuglib.rtree
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/trans/strategodebuglib.str	Thu Mar 17 17:07:20 2011	(r22410)
@@ -37,42 +37,42 @@
 	loc-to-string:
 		LocationInfo(start-line-num, start-token-pos, end-line-num, end-token-pos) -> <concat-strings> [start-line-num, ",", start-token-pos, ",", end-line-num, ",", end-token-pos]
 		
-	to-string:
+	name-loc-to-string:
 		(name, loc) -> <concat-strings> [name, <loc-to-string> loc]
 	
 	// strategy enter
     s-enter(|filename, s-name, loc) :
-    	t -> t
+    	t -> t'
     	//where (<debug(!"s-enter: ")> <to-string> (s-name, loc))
-    	where (java-s-enter(|filename, s-name, loc, t))
+    	where (t' := <java-s-enter(|filename, s-name, loc, t)>)
     
     // strategy exit
     s-exit(|filename, s-name, loc) :
-    	t -> t
+    	t -> t'
     	//where (<debug(!"s-exit: ")> <to-string> (s-name, loc))
-    	where (java-s-exit(|filename, s-name, loc, t))
+    	where (t' := <java-s-exit(|filename, s-name, loc, t)>)
     	
     // rule enter
     r-enter(|filename, r-name, loc) :
-    	t -> t
+    	t -> t'
     	//where (<debug(!"r-enter : ")> <to-string> (r-name, loc))
-    	where (java-r-enter(|filename, r-name, loc, t))
+    	where (t' := <java-r-enter(|filename, r-name, loc, t)>)
     
     // rule exit
     r-exit(|filename, r-name, loc) :
-    	t -> t
+    	t -> t'
     	//where (<debug(!"r-exit: ")> <to-string> (r-name, loc))
-    	where (java-r-exit(|filename, r-name, loc, t))
+    	where (t' := <java-r-exit(|filename, r-name, loc, t)>)
     	
     // step
     s-step(|filename, name, loc) :
-    	t -> t
+    	t -> t'
     	//where (<debug(!"s-step: ")> <to-string> (name, loc))
-    	where (java-s-step(|filename, name, loc, t))
+    	where (t' := <java-s-step(|filename, name, loc, t)>)
     	
     // variable assignment
     s-var(|filename, name, var-name, loc):
-    	t -> t
+    	t -> t'
     	//where (<debug(!"s-var: ")> <to-string> (name, loc))
-    	where (java-s-var(|filename, name, var-name, loc, t))
+    	where (t' := <java-s-var(|filename, name, var-name, loc, t)>)
 	
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/META-INF/MANIFEST.MF	Thu Mar 17 17:07:20 2011	(r22410)
@@ -3,11 +3,19 @@
 Bundle-Name: org.strategoxt.imp.debug.stratego.test
 Bundle-SymbolicName: org.strategoxt.imp.debug.stratego.test
 Bundle-Version: 0.1.1.qualifier
-Require-Bundle: org.strategoxt.imp.debug.stratego.core,
- org.junit4;bundle-version="4.5.0",
- org.strategoxt.strj,
- org.eclipse.core.runtime,
+Require-Bundle: org.strategoxt.strj,
+ org.strategoxt.imp.debug.stratego.core,
  org.strategoxt.imp.debug.stratego.runtime,
- org.strategoxt.imp.debug.stratego.transformer
+ org.strategoxt.imp.debug.stratego.transformer,
+ org.strategoxt.imp.debug.ui,
+ org.strategoxt.imp.debug.core,
+ org.eclipse.jdt.launching,
+ org.eclipse.jdt.debug,
+ org.eclipse.jdt.core,
+ org.eclipse.debug.ui,
+ org.eclipse.debug.core,
+ org.eclipse.core.runtime,
+ org.junit4;bundle-version="4.5.0",
+ org.eclipse.jdt.debug.ui
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ClassPath: .

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,14 +1,2 @@
 name	count	sum duration
-find-comments	1	48
-find-functions	1	70
-match-f-and-c	1	449
-is-empty	2	32
-first	2	115
-build-c	1	7
-get-function-name	2	15
-find-comment-by-name	2	271
-main	1	0
-match-comments	1	644
-find-comment-match	2	371
-execute	1	698
-try-find-comment-by-name	2	408
+main	1	76

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,7 +1,4 @@
 name	count	sum duration
-s_var	33	0	118611000	232000	930000	436000	58000
-s_step	67	0	253206000	386000	2574000	1344000	75000
-s_enter	8	0	50766000	55932000	1735000	443000	12000
-r_enter	11	0	39178000	1059000	415000	343000	8000
-s_exit	7	0	25998000	1945000	362000	619000	68000
-r_exit	11	0	40616000	820000	333000	353000	122000
+s_step	3	0	10269000	249000	129000	291000	2344000
+s_enter	1	0	26747000	5564000	143000	240000	19034000
+s_exit	1	0	3824000	2233000	77000	245000	21000

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/launch/DSMLocalvarDebug (1).launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/launch/DSMLocalvarDebug (1).launch	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.pde.ui.JunitLaunchConfig">
+<booleanAttribute key="append.args" value="true"/>
+<booleanAttribute key="askclear" value="false"/>
+<booleanAttribute key="automaticAdd" value="true"/>
+<booleanAttribute key="automaticValidate" value="false"/>
+<stringAttribute key="bootstrap" value=""/>
+<stringAttribute key="checked" value="[NONE]"/>
+<booleanAttribute key="clearConfig" value="false"/>
+<booleanAttribute key="clearws" value="true"/>
+<booleanAttribute key="clearwslog" value="true"/>
+<stringAttribute key="configLocation" value="${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/pde-junit"/>
+<booleanAttribute key="default" value="true"/>
+<booleanAttribute key="includeOptional" value="true"/>
+<stringAttribute key="location" value="${workspace_loc}/../junit-workspace"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMLocalvarDebug.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit4"/>
+<stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.strategoxt.debug.core.control.DSMLocalvarDebug"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl} -consoleLog"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.debug.stratego.test"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dosgi.requiredJavaVersion=1.5 -XX:MaxPermSize=256m -Xms256m -Xmx1024m -Xss8m -server"/>
+<stringAttribute key="pde.version" value="3.3"/>
+<stringAttribute key="product" value="org.eclipse.sdk.ide"/>
+<booleanAttribute key="run_in_ui_thread" value="true"/>
+<booleanAttribute key="show_selected_only" value="false"/>
+<booleanAttribute key="tracing" value="false"/>
+<booleanAttribute key="useCustomFeatures" value="false"/>
+<booleanAttribute key="useDefaultConfig" value="true"/>
+<booleanAttribute key="useDefaultConfigArea" value="false"/>
+<booleanAttribute key="useProduct" value="true"/>
+</launchConfiguration>

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/launch/TestStrategoLauncher.launch
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/launch/TestStrategoLauncher.launch	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.pde.ui.JunitLaunchConfig">
+<setAttribute key="additional_plugins">
+<setEntry value="org.eclipse.debug.core.source:3.6.0.v20100519:default:false"/>
+<setEntry value="org.eclipse.debug.core:3.6.0.v20100519:default:false"/>
+<setEntry value="org.eclipse.debug.ui.source:3.6.3.v20101201_r362:default:false"/>
+<setEntry value="org.eclipse.jdt.core.source:3.6.2.v_A76_R36x:default:false"/>
+<setEntry value="org.eclipse.jdt.debug.source:3.6.1.v20100715_r361:default:false"/>
+<setEntry value="org.eclipse.jdt.debug.ui.source:3.5.2.v20100928a_r362:default:false"/>
+<setEntry value="org.eclipse.jdt.junit.runtime:3.4.200.v20100526-0800:default:false"/>
+<setEntry value="org.eclipse.jdt.source:3.6.1.v201102101200:default:false"/>
+<setEntry value="org.eclipse.jdt.ui.source:3.6.2.r362_v20110203:default:false"/>
+<setEntry value="org.eclipse.jface.text.source:3.6.1.r361_v20100825-0800:default:false"/>
+<setEntry value="org.eclipse.text.source:3.5.0.v20100601-1300:default:false"/>
+<setEntry value="org.eclipse.text:3.5.0.v20100601-1300:default:false"/>
+<setEntry value="org.hamcrest.core:1.1.0.v20090501071000:default:false"/>
+<setEntry value="org.strategoxt.imp.debug.stratego.test:0.1.1.qualifier:default:true"/>
+</setAttribute>
+<booleanAttribute key="append.args" value="true"/>
+<booleanAttribute key="askclear" value="false"/>
+<booleanAttribute key="automaticAdd" value="true"/>
+<booleanAttribute key="automaticValidate" value="false"/>
+<stringAttribute key="bootstrap" value=""/>
+<stringAttribute key="checked" value="[NONE]"/>
+<booleanAttribute key="clearConfig" value="true"/>
+<booleanAttribute key="clearws" value="true"/>
+<booleanAttribute key="clearwslog" value="true"/>
+<stringAttribute key="configLocation" value="${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/pde-junit"/>
+<booleanAttribute key="default" value="false"/>
+<stringAttribute key="featureDefaultLocation" value="workspace"/>
+<stringAttribute key="featurePluginResolution" value="workspace"/>
+<booleanAttribute key="includeOptional" value="true"/>
+<stringAttribute key="location" value="${workspace_loc}/../junit-workspace"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncher.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit4"/>
+<stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.strategoxt.imp.debug.core.str.launching.TestStrategoLauncher"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl} -consoleLog"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.strategoxt.imp.debug.stratego.test"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dosgi.requiredJavaVersion=1.5 -XX:MaxPermSize=256m -Xms256m -Xmx1024m -Xss8m -server"/>
+<stringAttribute key="pde.version" value="3.3"/>
+<stringAttribute key="product" value="org.eclipse.sdk.ide"/>
+<booleanAttribute key="run_in_ui_thread" value="true"/>
+<setAttribute key="selected_features"/>
+<stringAttribute key="selected_target_plugins" value="org.strategoxt.imp.metatooling at default:default,org.eclipse.jdt.apt.ui at default:default,org.eclipse.ui.editors at default:default,org.eclipse.jdt.debug.ui at default:default,org.eclipse.core.databinding.property at default:default,org.strategoxt.imp.debug.core at default:default,org.eclipse.equinox.security at default:default,org.eclipse.ui.navigator.resources at default:default,org.eclipse.core.expressions at default:default,org.eclipse.jsch.core at default:default,org.eclipse.ecf at default:default,org.eclipse.imp.java.hosted at default:default,org.strategoxt.imp.nativebundle at default:default,org.eclipse.ui.workbench at default:default,org.strategoxt.imp.debug.stratego.runtime at default:default,org.eclipse.team.cvs.ssh2 at default:default,org.eclipse.equinox.p2.touchpoint.eclipse at default:default,org.eclipse.imp.runtime at default:default,org.eclipse.ui.cheatsheets at default:default,org.eclipse.equinox.p2.director at default:default,org.eclipse.ui.console at default:defau
 lt,org.strategoxt.imp.editors.editorservice at default:default,com.jcraft.jsch at default:default,org.eclipse.equinox.registry at default:default,org.eclipse.platform at default:default,org.eclipse.ui at default:default,org.spoofax.terms at default:default,org.eclipse.core.jobs at default:default,org.eclipse.ant.launching at default:default,org.spoofax.interpreter.library.jsglr at default:default,org.spoofax.jsglr at default:default,org.eclipse.ecf.filetransfer at default:default,org.tigris.subversion.subclipse.core at default:default,org.eclipse.equinox.p2.jarprocessor at default:default,org.strategoxt.imp.editors.aster at default:default,org.eclipse.imp.smapi at default:default,org.tigris.subversion.clientadapter.javahl at default:default,org.mortbay.jetty.util at default:default,org.eclipse.equinox.util at default:default,org.eclipse.core.filesystem at default:default,org.eclipse.pde.core at default:default,org.eclipse.jdt.debug at default:default,org.eclipse.equinox.p2.garbagecollector at default:default,org.eclipse.core.databinding.ob
 servable at default:default,org.eclipse.equinox.frameworkadmin.equino
efault:default,org.eclipse.team.ui at default:default,org.eclipse.search at default:default,org.tigris.subversion.clientadapter at default:default,org.eclipse.jdt.doc.isv at default:default,org.sat4j.pb at default:default,org.eclipse.equinox.p2.updatechecker at default:default,org.eclipse.update.ui at default:default,org.spoofax.aterm at default:default,org.eclipse.equinox.p2.extensionlocation at default:default,org.eclipse.swt.gtk.linux.x86 at default:false,org.eclipse.compare at default:default,org.eclipse.ui.intro.universal at default:default,org.apache.commons.codec at default:default,org.eclipse.pde.api.tools at default:default,org.eclipse.sdk at default:default,org.eclipse.ecf.provider.filetransfer.httpclient.ssl at default:false,org.eclipse.pde.junit.runtime at default:default,org.eclipse.debug.ui at default:default,org.eclipse.equinox.http.jetty at default:default,org.eclipse.ui.net at default:default,lpg.runtime at default:default,org.strategoxt.imp.debug.stratego.transformer at default:default,com.ibm.wala.shrike at default:default,o
 rg.tigris.subversion.subclipse.tools.usage at default:default,org.eclipse.equinox.p2.directorywatcher at default:default,org.eclipse.jface.text at default:default,org.eclipse.core.filebuffers at default:default,org.junit*3.8.2.v3_8_2_v20100427-1100 at default:default,org.eclipse.imp.prefspecs at default:default,org.eclipse.equinox.simpleconfigurator.manipulator at default:default,org.eclipse.equinox.app at default:default,org.eclipse.core.contenttype at default:default,org.eclipse.help.appserver at default:default,org.eclipse.jface at default:default,org.eclipse.pde at default:default,org.eclipse.core.filesystem.linux.x86 at default:false,org.eclipse.imp.presentation at default:default,org.tigris.subversion.subclipse.doc at default:default,org.eclipse.equinox.p2.artifact.repository at default:default,org.eclipse.equinox.launcher.gtk.linux.x86 at default:false,org.eclipse.equinox.jsp.jasper.registry at default:default,org.eclipse.equinox.p2.ui at default:default,org.eclipse.equinox.p2.ui.sdk.scheduler at default:default,org.eclipse.eq
 uinox.p2.reconciler.dropins at default:default,org.eclipse.ecf.identi
default:default,org.eclipse.update.scheduler at default:default,org.eclipse.update.configurator at 3:true,org.strategoxt.imp.testing at default:default,org.eclipse.pde.ua.core at default:default,org.eclipse.core.runtime at default:true,org.eclipse.jdt.compiler.tool at default:false,org.eclipse.equinox.p2.engine at default:default,org.eclipse.equinox.ds at 1:true,org.eclipse.pde.launching at default:default,org.eclipse.pde.api.tools.ui at default:default,org.eclipse.core.runtime.compatibility.auth at default:default,org.eclipse.ltk.core.refactoring at default:default,org.eclipse.platform.doc.isv at default:default,org.eclipse.equinox.p2.director.app at default:default,org.junit*4.8.1.v4_8_1_v20100427-1100 at default:default,org.sat4j.core at default:default,org.strategoxt.imp.editors.aterm at default:default,org.eclipse.core.resources at default:default,org.eclipse.core.databinding.beans at default:default,org.eclipse.osgi at -1:true,org.eclipse.cvs at default:default,org.eclipse.text at default:default,org.eclipse.update.core.linux at default:
 false,org.eclipse.jdt.junit4.runtime at default:default,org.eclipse.ui.navigator at default:default,org.eclipse.core.externaltools at default:default,org.eclipse.core.runtime.compatibility.registry at default:false,org.eclipse.osgi.util at default:default,org.eclipse.pde.ds.ui at default:default,org.eclipse.core.variables at default:default,org.eclipse.jdt.junit at default:default,org.eclipse.jface.databinding at default:default,org.eclipse.team.cvs.core at default:default,org.eclipse.jdt.doc.user at default:default,org.eclipse.jdt.junit.runtime at default:default,org.eclipse.imp.lpg.ide at default:default,org.eclipse.ui.views.log at default:default,org.eclipse.core.net.linux.x86 at default:false,org.eclipse.core.boot at default:default,org.tigris.subversion.subclipse.ui at default:default,org.eclipse.ui.views at default:default,org.eclipse.equinox.common at 2:true,org.eclipse.ecf.ssl at default:false,org.strategoxt.imp.runtime at default:default,org.eclipse.ui.forms at default:default,org.eclipse.compare.core at default:default,org.eclipse.j
 dt.apt.pluggable.core at default:default,org.eclipse.pde.ui.templates
fault:default,org.objectweb.asm at default:default,org.eclipse.help.base at default:default,org.eclipse.ui.intro at default:default,org.eclipse.imp.preferences at default:default,org.eclipse.pde.ds.core at default:default,org.eclipse.ui.externaltools at default:default,org.apache.commons.httpclient at default:default,org.eclipse.jdt.launching at default:default,org.eclipse.equinox.p2.ui.sdk at default:default,org.eclipse.ltk.ui.refactoring at default:default,org.junit4 at default:default,org.eclipse.pde.ui at default:default,org.eclipse.equinox.launcher at default:default,org.apache.lucene at default:default,org.apache.ant at default:default,org.eclipse.ui.browser at default:default,org.strategoxt.strj at default:default,org.eclipse.ant.core at default:default,org.eclipse.pde.doc.user at default:default,org.eclipse.platform.doc.user at default:default,org.eclipse.rcp at default:default,org.eclipse.equinox.p2.metadata.repository at default:default,org.eclipse.ui.presentations.r21 at default:default,org.eclipse.equinox.p2.operations at default:defa
 ult,org.eclipse.osgi.services at default:default,org.eclipse.jdt.core.manipulation at default:default,org.eclipse.equinox.p2.metadata.generator at default:default,org.eclipse.equinox.concurrent at default:default,org.eclipse.pde.ua.ui at default:default,org.eclipse.pde.build at default:default,org.tmatesoft.svnkit at default:default,org.hamcrest.core at default:default,org.spoofax.interpreter.core at default:default,org.eclipse.core.runtime.compatibility at default:default,org.eclipse.equinox.p2.repository at default:default,com.ibm.icu at default:default,org.eclipse.imp.smapifier at default:default,org.eclipse.imp.metatooling at default:default,org.eclipse.equinox.p2.publisher at default:default,org.eclipse.team.core at default:default,org.eclipse.equinox.p2.core at default:default,org.eclipse.swt at default:default,org.eclipse.team.cvs.ui at default:default,org.eclipse.core.net at default:default,org.strategoxt.imp.editors.rtg at default:default,org.eclipse.equinox.p2.touchpoint.natives at default:default,org.eclipse.core.databinding at def
 ault:default,org.eclipse.equinox.p2.repository.tools at default:defau
org.strategoxt.imp.editors.stratego at default:default,org.eclipse.jdt.ui at default:default,org.eclipse.ui.workbench.compatibility at default:false,org.eclipse.equinox.p2.metadata at default:default,org.eclipse.equinox.frameworkadmin at default:default,org.eclipse.ecf.provider.filetransfer.httpclient at default:default,org.eclipse.ui.views.properties.tabbed at default:default,org.eclipse.update.core at default:default,org.eclipse.ecf.provider.filetransfer.ssl at default:false,org.eclipse.jdt.junit.core at default:default,org.eclipse.equinox.http.servlet at default:default,com.sun.jna at default:default,org.eclipse.imp.xform at default:default,org.eclipse.equinox.jsp.jasper at default:default,org.eclipse.ui.ide.application at default:default,org.eclipse.equinox.event at default:default,javax.servlet at default:default,org.eclipse.pde.runtime at default:default,javax.servlet.jsp at default:default,org.strategoxt.imp.editors.pp at default:default,org.eclipse.ui.workbench.texteditor at default:default,org.eclipse.equinox.p2.updatesite at defau
 lt:default,org.eclipse.help at default:default,org.eclipse.help.ui at default:default,org.eclipse.ecf.provider.filetransfer at default:default,org.eclipse.core.commands at default:default,org.eclipse.jdt.apt.core at default:default,org.strategoxt.imp.generator at default:default,org.eclipse.jdt at default:default,org.apache.commons.logging at default:default,org.apache.lucene.analysis at default:default,org.strategoxt.imp.debug.stratego.core at default:default,org.eclipse.jdt.compiler.apt at default:false,org.eclipse.jsch.ui at default:default,org.eclipse.equinox.preferences at default:default,org.eclipse.jdt.core at default:default,org.eclipse.equinox.security.ui at default:default,org.eclipse.ui.ide at default:default,org.eclipse.equinox.p2.console at default:default,org.tigris.subversion.clientadapter.svnkit at default:default,org.eclipse.debug.core at default:default,org.mortbay.jetty.server at default:default,org.spoofax.compiler at default:default,org.strategoxt.imp.editors.sdf at default:default,org.eclipse.equinox.p2.ql at default:def
 ault,org.eclipse.ant.ui at default:default,org.eclipse.imp.lpg at defaul
efault,org.eclipse.help.webapp at default:default,org.strategoxt.imp.debug.ui at default:default,org.apache.commons.el at default:default,org.eclipse.equinox.http.registry at default:default,org.apache.jasper at default:default,org.eclipse.equinox.simpleconfigurator at 1:true"/>
+<stringAttribute key="selected_workspace_plugins" value="org.strategoxt.imp.debug.ui at default:default,org.strategoxt.imp.debug.stratego.transformer at default:default,org.strategoxt.imp.debug.core at default:default,org.strategoxt.imp.debug.stratego.test at default:default"/>
+<booleanAttribute key="show_selected_only" value="false"/>
+<booleanAttribute key="tracing" value="false"/>
+<booleanAttribute key="useCustomFeatures" value="true"/>
+<booleanAttribute key="useDefaultConfig" value="true"/>
+<booleanAttribute key="useDefaultConfigArea" value="false"/>
+<booleanAttribute key="useProduct" value="true"/>
+</launchConfiguration>

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/lib/strategodebuglib.rtree
==============================================================================
Binary file (source and/or target). No diff available.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,58 +1,33 @@
 item	subitem	count	duration
-SUPERPDE_s_var	D-1	33	74000
-SUPERPDE_s_var	D-2	33	100000
-PDE_s_exit	P-1	7	106000
-PDE_s_exit	P-SUPER	7	129000
-SUPERPDE_r_enter	D-1	11	26000
-SUPERPDE_r_enter	D-2	11	43000
-PDE_r_enter	P-1	11	39000
-PDE_r_enter	P-3	11	32000
-PDE_r_enter	P-2	11	83000
-PDE_r_enter	P-SUPER	11	156000
-SUPERPDE_r_exit	D-1	11	29000
-SUPERPDE_r_exit	D-2	11	39000
-SS_s_step	SUSPEND-3	67	168000
-SS_s_step	SUSPEND-1	67	534000
-SS_s_step	SUSPEND-2	67	285000
-SS_s_enter	SUSPEND-3	8	36000
-SS_s_enter	SUSPEND-1	8	289000
-SS_s_enter	SUSPEND-2	8	62000
-SUPERPDE_s_step	D-1	67	193000
-SUPERPDE_s_step	D-2	67	241000
-PDE_s_step	P-SUPER	67	858000
-EXTRACT	BUILD_EVENTINFO	137	32020000
-EXTRACT	PARSE_VAR	33	6739000
-EXTRACT	VALUE_TERM	137	37202000
-EXTRACT	VALUE_EVENTINFO	137	35118000
-EXTRACT	PARSE_TERM	137	26105000
-EXTRACT	VALUE_VAR	137	149898000
-EXTRACT	PARSE_EVENTINFO	137	75333000
-EXTRACT	FIELD_EVENTINFO	137	40239000
-EXTRACT	BUILD_TERM	137	35104000
-EXTRACT	STACKFRAME	137	40483000
-EXTRACT	THISOBJECT	137	44756000
-SUPERPDE_s_exit	D-1	7	24000
-SUPERPDE_s_exit	D-2	7	30000
-PDE_s_enter	P-1	8	47000
-PDE_s_enter	P-3	8	43000
-PDE_s_enter	P-2	8	1353000
-PDE_s_enter	P-SUPER	8	192000
-SUPERPDE_s_enter	D-1	8	33000
-SUPERPDE_s_enter	D-2	8	57000
-PDE_r_exit	P-1	11	64000
-PDE_r_exit	P-SUPER	11	155000
-SS_r_exit	SUSPEND-3	11	33000
-SS_r_exit	SUSPEND-1	11	215000
-SS_r_exit	SUSPEND-2	11	48000
-SS_r_enter	SUSPEND-3	11	28000
-SS_r_enter	SUSPEND-1	11	216000
-SS_r_enter	SUSPEND-2	11	42000
-SS_s_var	SUSPEND-3	33	73000
-SS_s_var	SUSPEND-1	33	84000
-SS_s_var	SUSPEND-2	33	124000
-SS_s_exit	SUSPEND-3	7	23000
-SS_s_exit	SUSPEND-1	7	515000
-SS_s_exit	SUSPEND-2	7	36000
-PDE_s_var	P-1	33	91000
-PDE_s_var	P-2	33	252000
-PDE_s_var	P-SUPER	33	374000
+PDE_s_enter	P-1	1	17000
+PDE_s_enter	P-3	1	8000
+PDE_s_enter	P-2	1	30000
+PDE_s_enter	P-SUPER	1	53000
+PDE_s_exit	P-1	1	17000
+PDE_s_exit	P-SUPER	1	22000
+SUPERPDE_s_enter	D-1	1	9000
+SUPERPDE_s_enter	D-2	1	14000
+SS_s_step	SUSPEND-3	3	36000
+SS_s_step	SUSPEND-1	3	210000
+SS_s_step	SUSPEND-2	3	22000
+SUPERPDE_s_step	D-1	3	11000
+SUPERPDE_s_step	D-2	3	13000
+SS_s_enter	SUSPEND-3	1	10000
+SS_s_enter	SUSPEND-1	1	179000
+SS_s_enter	SUSPEND-2	1	38000
+PDE_s_step	P-SUPER	3	58000
+SS_s_exit	SUSPEND-3	1	4000
+SS_s_exit	SUSPEND-1	1	225000
+SS_s_exit	SUSPEND-2	1	8000
+EXTRACT	BUILD_EVENTINFO	6	1337000
+EXTRACT	VALUE_TERM	6	1489000
+EXTRACT	VALUE_EVENTINFO	6	2465000
+EXTRACT	PARSE_TERM	6	258000
+EXTRACT	VALUE_VAR	6	5831000
+EXTRACT	PARSE_EVENTINFO	6	7812000
+EXTRACT	FIELD_EVENTINFO	6	10483000
+EXTRACT	BUILD_TERM	6	1307000
+EXTRACT	STACKFRAME	6	6651000
+EXTRACT	THISOBJECT	6	2156000
+SUPERPDE_s_exit	D-1	1	4000
+SUPERPDE_s_exit	D-2	1	4000

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/setinput.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/setinput.str	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,26 @@
+module setinput
+
+imports
+  libstrategolib
+
+
+signature
+  constructors
+  	
+  	Var		: String -> Expression
+  	Number	: Int -> Expression
+  	Add		: Expression * Expression -> Expression
+  	Sub		: Expression * Expression -> Expression
+  	
+  	Print	: Expression -> Statement
+  	Assign	: String * Expression -> Statement
+  	
+  	Function : String * List(Statement) -> Definition
+  	
+  	Comment : String * String -> Definition
+  	
+  	Program : String * List(Definition) -> Program
+  	
+strategies
+	
+	main = debug(!"CURRENT: "); ?Program(progname, def-list); <debug(!"PROGNAME: ")> progname
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugElementEventWaiter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugElementEventWaiter.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ *  Copyright (c) 2000, 2007 IBM Corporation and others.
+ *  All rights reserved. This program and the accompanying materials
+ *  are made available under the terms of the Eclipse Public License v1.0
+ *  which accompanies this distribution, and is available at
+ *  http://www.eclipse.org/legal/epl-v10.html
+ * 
+ *  Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.debug.testplugin;
+
+import org.eclipse.debug.core.DebugEvent;
+
+/**
+ * Waits for an event on a specific element
+ */
+public class DebugElementEventWaiter extends DebugEventWaiter {
+	
+	protected Object fElement;
+	
+	/**
+	 * Constructor
+	 * @param kind
+	 * @param element
+	 */
+	public DebugElementEventWaiter(int kind, Object element) {
+		super(kind);
+		fElement = element;
+	}
+	
+	/**
+	 * @see org.eclipse.jdt.debug.testplugin.DebugEventWaiter#accept(org.eclipse.debug.core.DebugEvent)
+	 */
+	public boolean accept(DebugEvent event) {
+		return super.accept(event) && fElement == event.getSource();
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugElementKindEventDetailWaiter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugElementKindEventDetailWaiter.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,41 @@
+/*******************************************************************************
+ *  Copyright (c) 2000, 2007 IBM Corporation and others.
+ *  All rights reserved. This program and the accompanying materials
+ *  are made available under the terms of the Eclipse Public License v1.0
+ *  which accompanies this distribution, and is available at
+ *  http://www.eclipse.org/legal/epl-v10.html
+ * 
+ *  Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.debug.testplugin;
+
+import org.eclipse.debug.core.DebugEvent;
+
+/**
+ * Wait for the specified event with the specified from the specified element.
+ */
+ at SuppressWarnings("rawtypes")
+public class DebugElementKindEventDetailWaiter extends DebugElementKindEventWaiter {
+
+	protected int fDetail;
+
+	/**
+	 * Constructor
+	 * @param eventKind
+	 * @param elementClass
+	 * @param detail
+	 */
+	public DebugElementKindEventDetailWaiter(int eventKind, Class elementClass, int detail) {
+		super(eventKind, elementClass);
+		fDetail = detail;
+	}
+	
+	/**
+	 * @see org.eclipse.jdt.debug.testplugin.DebugElementKindEventWaiter#accept(org.eclipse.debug.core.DebugEvent)
+	 */
+	public boolean accept(DebugEvent event) {
+		return super.accept(event) && fDetail == event.getDetail();
+	}
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugElementKindEventWaiter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugElementKindEventWaiter.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,44 @@
+/*******************************************************************************
+ *  Copyright (c) 2000, 2007 IBM Corporation and others.
+ *  All rights reserved. This program and the accompanying materials
+ *  are made available under the terms of the Eclipse Public License v1.0
+ *  which accompanies this distribution, and is available at
+ *  http://www.eclipse.org/legal/epl-v10.html
+ * 
+ *  Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.debug.testplugin;
+
+import org.eclipse.debug.core.DebugEvent;
+
+/**
+ * Waits for a type of event on a kind of element.  Compare this to SpecificDebugElementEventWaiter which is
+ * used to wait for a type of event on a specific debug element object.
+ */
+ at SuppressWarnings("rawtypes")
+public class DebugElementKindEventWaiter extends DebugEventWaiter {
+	
+	protected Class fElementClass;
+	
+	/**
+	 * Constructor
+	 * @param eventKind
+	 * @param elementClass
+	 */
+	public DebugElementKindEventWaiter(int eventKind, Class elementClass) {
+		super(eventKind);
+		fElementClass = elementClass;
+	}
+	
+	/**
+	 * @see org.eclipse.jdt.debug.testplugin.DebugEventWaiter#accept(org.eclipse.debug.core.DebugEvent)
+	 */
+	public boolean accept(DebugEvent event) {
+		Object o = event.getSource();
+		return super.accept(event) && fElementClass.isInstance(o);
+	}
+
+}
+
+

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugEventWaiter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/testplugin/DebugEventWaiter.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,228 @@
+/*******************************************************************************
+ *  Copyright (c) 2000, 2007 IBM Corporation and others.
+ *  All rights reserved. This program and the accompanying materials
+ *  are made available under the terms of the Eclipse Public License v1.0
+ *  which accompanies this distribution, and is available at
+ *  http://www.eclipse.org/legal/epl-v10.html
+ * 
+ *  Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.debug.testplugin;
+
+import org.eclipse.debug.core.DebugEvent;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.IDebugEventSetListener;
+
+/**
+ * The <code>DebugEventWaiter</code> is
+ * to wait for a specific kind of debug event.
+ * <p>
+ * When a <code>DebugEventWaiter</code> is created, it
+ * registers itself with the <code>DebugPlugin</code> as
+ * a <code>IDebugEventSetListener</code>.
+ * <p>
+ * NOTE: <code>DebugEventWaiter</code> objects are intended for
+ * one time use only!
+ */
+public class DebugEventWaiter implements IDebugEventSetListener {
+	/**
+	 * The kind of event the waiter is waiting for
+	 */
+	protected int fEventType;
+	
+	protected int[] fEventTypes;
+	private int index = 0;
+
+	/**
+	 * The number of milliseconds the waiter will wait before timing out.
+	 */
+	protected long fTimeout;
+
+	/**
+	 * The <code>IDebugModelManager</code> this waiter is listening to.
+	 */
+	protected DebugPlugin fDebugPlugin;
+
+	/**
+	 * The <code>DebugEvent</code> received.
+	 */
+	protected DebugEvent fEvent;
+	
+	/**
+	 * The event set that was accepted
+	 */
+	protected DebugEvent[] fEventSet;
+
+	/**
+	 * The default timeout value if none is given (20000).
+	 */
+	public static final long DEFAULT_TIMEOUT= 15000;
+
+	private boolean acceptList = false;
+	
+	/**
+	 * Constructor
+	 * Creates a new <code>DebugEventWaiter</code> which
+	 * waits for events of a kind <code>eventType</code>.
+	 * The wait method will wait the default timeout value.
+	 * @param eventType
+	 */
+	public DebugEventWaiter(int eventType) {
+		fDebugPlugin= DebugPlugin.getDefault();
+		fEventType= eventType;
+		fTimeout= DEFAULT_TIMEOUT;
+
+		fDebugPlugin.addDebugEventListener(this);
+	}
+	
+	public DebugEventWaiter(int[] eventTypes) {
+		fDebugPlugin= DebugPlugin.getDefault();
+		fEventTypes= eventTypes;
+		fTimeout= DEFAULT_TIMEOUT;
+		acceptList = true;
+		fDebugPlugin.addDebugEventListener(this);
+	}
+
+	/**
+	 * Answers true if the <code>DebugEvent</code> is acceptable.
+	 * @param event
+	 * @return if the event is accepted or not
+	 */
+	public boolean accept(DebugEvent event) {
+		if (!acceptList)
+		{
+			return event.getKind() == fEventType && event.getDetail() != DebugEvent.EVALUATION_IMPLICIT;
+		}
+		else
+		{
+			// current event
+			int currentEventType = this.fEventTypes[index];
+			boolean accept = event.getKind() == currentEventType && event.getDetail() != DebugEvent.EVALUATION_IMPLICIT;
+			if (!accept)
+			{
+				return false;
+			}
+			else
+			{
+				index++;
+				// if accepted, set next as current
+				return true;
+			}
+		}
+	}
+	/**
+	 * Answers the event name associated with the given flag.
+	 * @return the name of the event kind
+	 */
+	public String getEventKindName() {
+		int currentEventType = -1;
+		if (acceptList)
+		{
+			currentEventType = fEventTypes[index];
+		}
+		else
+		{
+			currentEventType = fEventType;
+		}
+		switch (currentEventType) { // was fEventType
+			case DebugEvent.CREATE :
+				return "Create";
+			case DebugEvent.TERMINATE :
+				return "Terminate";
+			case DebugEvent.RESUME :
+				return "Resume";
+			case DebugEvent.SUSPEND :
+				return "Suspend";
+			default :
+				return "UNKNOWN";
+		}
+	}
+
+	/**
+	 * @see org.eclipse.debug.core.IDebugEventSetListener#handleDebugEvents(org.eclipse.debug.core.DebugEvent[])
+	 */
+	public synchronized void handleDebugEvents(DebugEvent[] events) {
+		printReceived(events);
+		for (int i = 0; i < events.length; i++) {
+			if (accept(events[i])) {
+				fEvent= events[i];
+				fEventSet = events;
+				// TODO: only unregister when all event occurred
+				if (acceptList && index == fEventTypes.length)
+				{
+					unregister();
+					notifyAll();
+					return;
+				}
+				else if (!acceptList)
+				{
+					unregister();
+					notifyAll();
+					return;
+				}
+				
+			}
+		}
+	}
+
+	/**
+	 * Prints a message indicating which event was received.
+	 */
+	protected void printReceived(DebugEvent[] events) {
+		for (int i = 0; i < events.length; i++) {
+			System.out.println(this +" got " + events[i]);
+		}
+	}
+
+	/**
+	 * Sets the number of milliseconds to wait for this callback
+	 * @param milliseconds
+	 */
+	public void setTimeout(long milliseconds) {
+		fTimeout= milliseconds;
+	}
+
+	/**
+	 * Unregisters this waiter as a listener
+	 */
+	public void unregister() {
+		fDebugPlugin.removeDebugEventListener(this);
+	}
+
+	/**
+	 * Returns the source of the accepted event, or <code>null</code>
+	 * if no event was accepted.
+	 * @return the source of the event or <code>null</code>
+	 */
+	public synchronized Object waitForEvent() {
+		if (fEvent == null) {
+			try {
+				wait(fTimeout);
+			} catch (InterruptedException ie) {
+				System.err.println("Interrupted waiting for event");
+			}
+		}
+		unregister();
+		if (fEvent == null)
+			return null;
+		return fEvent.getSource();
+	}
+
+	/**
+	 * Returns the accepted event, if any.
+	 * @return the event if any
+	 */
+	public DebugEvent getEvent() {
+		return fEvent;
+	}
+	
+	/**
+	 * Returns the accepted event set, if any.
+	 * @return the even if any
+	 */
+	public DebugEvent[] getEventSet() {
+		return fEventSet;
+	}	
+}
+

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/AbstractDebugTest.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/AbstractDebugTest.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,610 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.debug.tests;
+
+import java.io.File;
+
+import junit.framework.TestCase;
+
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.OperationCanceledException;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.debug.core.DebugEvent;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.IBreakpointManager;
+import org.eclipse.debug.core.ILaunch;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.ILaunchManager;
+import org.eclipse.debug.core.model.IBreakpoint;
+import org.eclipse.debug.core.model.ILineBreakpoint;
+import org.eclipse.debug.core.model.IProcess;
+import org.eclipse.debug.core.model.IThread;
+import org.eclipse.jdt.core.IJavaProject;
+import org.eclipse.jdt.core.IType;
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.debug.core.IJavaDebugTarget;
+import org.eclipse.jdt.debug.core.IJavaStackFrame;
+import org.eclipse.jdt.debug.core.IJavaThread;
+import org.eclipse.jdt.debug.eval.EvaluationManager;
+import org.eclipse.jdt.debug.eval.IAstEvaluationEngine;
+import org.eclipse.jdt.debug.eval.IEvaluationListener;
+import org.eclipse.jdt.debug.eval.IEvaluationResult;
+import org.eclipse.jdt.debug.testplugin.DebugElementKindEventDetailWaiter;
+import org.eclipse.jdt.debug.testplugin.DebugElementKindEventWaiter;
+import org.eclipse.jdt.debug.testplugin.DebugEventWaiter;
+import org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget;
+
+/**
+ * Tests for launch configurations
+ */
+ at SuppressWarnings({})
+public abstract class AbstractDebugTest extends TestCase implements  IEvaluationListener {
+	
+	/**
+	 * the default timeout
+	 */
+	public static final int DEFAULT_TIMEOUT = 30000;
+	
+	//constants
+	protected static final String JAVA = "java"; //$NON-NLS-1$
+	protected static final String JAVA_EXTENSION = ".java"; //$NON-NLS-1$
+	protected static final String LAUNCHCONFIGURATIONS = "launchConfigurations"; //$NON-NLS-1$
+	protected static final String LAUNCH_EXTENSION = ".launch"; //$NON-NLS-1$
+	protected static final String LOCAL_JAVA_APPLICATION_TYPE_ID = "org.eclipse.jdt.launching.localJavaApplication"; //$NON-NLS-1$
+	protected static final String JAVA_LAUNCH_SHORTCUT_ID = "org.eclipse.jdt.debug.ui.localJavaShortcut"; //$NON-NLS-1$
+	protected static final String TEST_LAUNCH_SHORTCUT = "org.eclipse.jdt.debug.tests.testShortCut";
+	
+	/**
+	 * an evaluation result
+	 */
+	public IEvaluationResult fEvaluationResult;
+	
+	/**
+	 * the java project
+	 */
+	public static IJavaProject fJavaProject;
+	
+	/**
+	 * The last relevant event set - for example, that caused
+	 * a thread to suspend
+	 */
+	protected DebugEvent[] fEventSet;
+	
+	private boolean ignoreErrors = false;
+	
+	/**
+	 * Constructor
+	 * @param name
+	 */
+	public AbstractDebugTest(String name) {
+		super(name);
+		// set error dialog to non-blocking to avoid hanging the UI during test
+		if (ignoreErrors)
+		{
+			//ErrorDialog.AUTOMATED_MODE = true;
+			//SafeRunnable.setIgnoreErrors(true);
+		}
+	}
+	
+	
+	protected void setUp() throws Exception {
+		super.setUp();
+		// RL: skip ProjectCreationDecorator tests..
+		/*
+		if (!ProjectCreationDecorator.isReady()) {
+			new TestSuite(ProjectCreationDecorator.class).run(new TestResult());
+		}*/
+	}
+
+	/**
+	 * Sets the last relevant event set
+	 *
+	 * @param set event set
+	 */
+	protected void setEventSet(DebugEvent[] set) {
+		fEventSet = set;
+	}
+	
+	/**
+	 * Returns the last relevant event set
+	 * 
+	 * @return event set
+	 */
+	protected DebugEvent[] getEventSet() {
+		return fEventSet;
+	}
+	
+	/**
+	 * Returns the launch manager
+	 * 
+	 * @return launch manager
+	 */
+	protected ILaunchManager getLaunchManager() {
+		return DebugPlugin.getDefault().getLaunchManager();
+	}
+	
+
+	
+	/**
+	 * Returns the breakpoint manager
+	 * 
+	 * @return breakpoint manager
+	 */
+	protected IBreakpointManager getBreakpointManager() {
+		return DebugPlugin.getDefault().getBreakpointManager();
+	}	
+	
+	/**
+	 * Returns the 'DebugTests' project.
+	 * 
+	 * @return the test project
+	 */
+	protected IJavaProject getJavaProject() {
+		return getJavaProject("DebugTests");
+	}
+	
+	protected IJavaProject get15Project() {
+		return getJavaProject("OneFive");
+	}
+	
+	/**
+	 * Returns the Java project with the given name.
+	 * 
+	 * @param name project name
+	 * @return the Java project with the given name
+	 */
+	protected IJavaProject getJavaProject(String name) {
+		IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name);
+		return JavaCore.create(project);
+	}
+	
+	
+	/**
+	 * Launches the given configuration and waits for an event. Returns the
+	 * source of the event. If the event is not received, the launch is
+	 * terminated and an exception is thrown.
+	 * 
+	 * @param configuration the configuration to launch
+	 * @param waiter the event waiter to use
+	 * @return Object the source of the event
+	 * @exception Exception if the event is never received.
+	 */
+	protected Object launchAndWait(ILaunchConfiguration configuration, DebugEventWaiter waiter) throws CoreException {
+	    return launchAndWait(configuration, waiter, true);
+	}
+	
+	/**
+	 * Launches the given configuration in debug mode and waits for an event. 
+	 * Returns the source of the event. If the event is not received, the 
+	 * launch is terminated and an exception is thrown.
+	 * 
+	 * @param configuration the configuration to launch
+	 * @param waiter the event waiter to use
+	 * @param register whether to register the launch
+	 * @return Object the source of the event
+	 * @exception Exception if the event is never received.
+	 */
+	protected Object launchAndWait(ILaunchConfiguration configuration, DebugEventWaiter waiter, boolean register) throws CoreException {
+		return launchAndWait(configuration, ILaunchManager.DEBUG_MODE, waiter, register);
+	}
+	
+	/**
+	 * Launches the given configuration and waits for an event. Returns the
+	 * source of the event. If the event is not received, the launch is
+	 * terminated and an exception is thrown.
+	 * 
+	 * @param configuration the configuration to launch
+	 * @param mode the mode to launch the configuration in
+	 * @param waiter the event waiter to use
+	 * @param register whether to register the launch
+	 * @return Object the source of the event
+	 * @exception Exception if the event is never received.
+	 */
+	protected Object launchAndWait(ILaunchConfiguration configuration, String mode, DebugEventWaiter waiter, boolean register) throws CoreException {
+		ILaunch launch = configuration.launch(mode, null, false, register);
+		Object suspendee= waiter.waitForEvent();
+		if (suspendee == null) {
+			StringBuffer buf = new StringBuffer();
+            buf.append("Test case: "); //$NON-NLS-1$
+            buf.append(getName());
+            buf.append("\n"); //$NON-NLS-1$
+            buf.append("Never received event: "); //$NON-NLS-1$
+            buf.append(waiter.getEventKindName());
+            buf.append("\n"); //$NON-NLS-1$
+            if (launch.isTerminated()) {
+            	buf.append("Process exit value: "); //$NON-NLS-1$
+            	buf.append(launch.getProcesses()[0].getExitValue());
+                buf.append("\n"); //$NON-NLS-1$
+            }
+            /*
+            IConsole console = DebugUITools.getConsole(launch.getProcesses()[0]);
+            if (console instanceof TextConsole) {
+                TextConsole textConsole = (TextConsole)console;
+                String string = textConsole.getDocument().get();
+                buf.append("Console output follows:\n"); //$NON-NLS-1$
+                buf.append(string);
+            }*/
+            buf.append("\n"); //$NON-NLS-1$
+            DebugPlugin.log(new Status(IStatus.ERROR, "org.eclipse.jdt.debug.ui.tests", buf.toString())); //$NON-NLS-1$
+			try {
+				launch.terminate();
+			} catch (CoreException e) {
+				e.printStackTrace();
+				fail("Program did not suspend, and unable to terminate launch."); //$NON-NLS-1$
+			}
+			throw new TestAgainException();
+		}
+		setEventSet(waiter.getEventSet());
+		assertNotNull("Program did not suspend, launch terminated.", suspendee); //$NON-NLS-1$
+		return suspendee;		
+	}
+	
+
+	/**
+	 * Launches the given configuration in debug mode, and waits for a breakpoint-caused 
+	 * suspend event in that program. Returns the thread in which the suspend
+	 * event occurred.
+	 * 
+	 * @param config the configuration to launch
+	 * @return thread in which the first suspend event occurred
+	 */	
+	protected StrategoDebugTarget launchToBreakpoint(ILaunchConfiguration config) throws CoreException {
+	    return launchToBreakpoint(config, true);
+	}
+	
+	/**
+	 * Launches the given configuration in debug mode, and waits for a breakpoint-caused 
+	 * suspend event in that program. Returns the thread in which the suspend
+	 * event occurred.
+	 * 
+	 * @param config the configuration to launch
+	 * @param whether to register the launch
+	 * @return thread in which the first suspend event occurred
+	 */	
+	protected StrategoDebugTarget launchToBreakpoint(ILaunchConfiguration config, boolean register) throws CoreException {
+		//Class clazz = org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget.class;
+		// was IJavaThread.class
+		//DebugEventWaiter waiter= new DebugElementKindEventDetailWaiter(DebugEvent.SUSPEND, clazz, DebugEvent.BREAKPOINT);
+		DebugEventWaiter waiter = new DebugEventWaiter(new int[] { DebugEvent.CREATE, DebugEvent.SUSPEND });
+		waiter.setTimeout(DEFAULT_TIMEOUT);
+
+		Object suspendee= launchAndWait(config, waiter, register);
+		//assertTrue("suspendee was not an IJavaThread", suspendee instanceof IJavaThread); //$NON-NLS-1$
+		assertTrue("suspendee was not an StrategoDebugTarget", suspendee instanceof StrategoDebugTarget); //$NON-NLS-1$
+		return (StrategoDebugTarget)suspendee;		
+	}	
+	
+	/**
+	 * Launches the given configuration in debug mode, and waits for a terminate
+	 * event in that program. Returns the debug target in which the terminate
+	 * event occurred.
+	 * 
+	 * @param config the configuration to launch
+	 * @param timeout the number of milliseconds to wait for a terminate event
+	 * @return thread in which the first suspend event occurred
+	 */	
+	protected IJavaDebugTarget launchAndTerminate(ILaunchConfiguration config, int timeout) throws Exception {
+		return launchAndTerminate(config, timeout, true);	
+	}
+	
+	/**
+	 * Launches the given configuration in debug mode, and waits for a terminate
+	 * event in that program. Returns the debug target in which the terminate
+	 * event occurred.
+	 * 
+	 * @param config the configuration to launch
+	 * @param timeout the number of milliseconds to wait for a terminate event
+	 * @param register whether to register the launch
+	 * @return thread in which the first suspend event occurred
+	 */	
+	protected IJavaDebugTarget launchAndTerminate(ILaunchConfiguration config, int timeout, boolean register) throws Exception {
+		DebugEventWaiter waiter= new DebugElementKindEventWaiter(DebugEvent.TERMINATE, IJavaDebugTarget.class);
+		waiter.setTimeout(timeout);
+
+		Object terminatee = launchAndWait(config, waiter, register);		
+		assertNotNull("Program did not terminate.", terminatee); //$NON-NLS-1$
+		assertTrue("terminatee is not an IJavaDebugTarget", terminatee instanceof IJavaDebugTarget); //$NON-NLS-1$
+		IJavaDebugTarget debugTarget = (IJavaDebugTarget) terminatee;
+		assertTrue("debug target is not terminated", debugTarget.isTerminated() || debugTarget.isDisconnected()); //$NON-NLS-1$
+		return debugTarget;		
+	}	
+
+	/**
+	 * Launches the given configuration in debug mode, and waits for a line breakpoint 
+	 * suspend event in that program. Returns the thread in which the suspend
+	 * event occurred.
+	 * 
+	 * @param config the configuration to launch
+	 * @param bp the breakpoint that should cause a suspend event
+	 * @return thread in which the first suspend event occurred
+	 */	
+	protected IJavaThread launchToLineBreakpoint(ILaunchConfiguration config, ILineBreakpoint bp, boolean register) throws Exception {
+		DebugEventWaiter waiter= new DebugElementKindEventDetailWaiter(DebugEvent.SUSPEND, IJavaThread.class, DebugEvent.BREAKPOINT);
+		waiter.setTimeout(DEFAULT_TIMEOUT);
+
+		Object suspendee= launchAndWait(config, waiter, register);
+		assertTrue("suspendee was not an IJavaThread", suspendee instanceof IJavaThread); //$NON-NLS-1$
+		IJavaThread thread = (IJavaThread) suspendee;
+		IBreakpoint hit = getBreakpoint(thread);
+		assertNotNull("suspended, but not by breakpoint", hit); //$NON-NLS-1$
+		assertTrue("hit un-registered breakpoint", bp.equals(hit)); //$NON-NLS-1$
+		assertTrue("suspended, but not by line breakpoint", hit instanceof ILineBreakpoint); //$NON-NLS-1$
+		ILineBreakpoint breakpoint= (ILineBreakpoint) hit;
+		int lineNumber = breakpoint.getLineNumber();
+		int stackLine = thread.getTopStackFrame().getLineNumber();
+		assertTrue("line numbers of breakpoint and stack frame do not match", lineNumber == stackLine); //$NON-NLS-1$
+		
+		return thread;		
+	}
+	
+	
+
+	/**
+	 * Resumes the given thread, and waits for another breakpoint-caused suspend event.
+	 * Returns the thread in which the suspend event occurs.
+	 * 
+	 * @param thread thread to resume
+	 * @return thread in which the first suspend event occurs
+	 */
+	protected IJavaThread resume(IJavaThread thread) throws Exception {
+	    return resume(thread, DEFAULT_TIMEOUT);
+	}	
+	
+	/**
+	 * Resumes the given thread, and waits for another breakpoint-caused suspend event.
+	 * Returns the thread in which the suspend event occurs.
+	 * 
+	 * @param thread thread to resume
+	 * @param timeout timeout in milliseconds
+	 * @return thread in which the first suspend event occurs
+	 */
+	protected IJavaThread resume(IJavaThread thread, int timeout) throws Exception {
+		DebugEventWaiter waiter= new DebugElementKindEventDetailWaiter(DebugEvent.SUSPEND, IJavaThread.class, DebugEvent.BREAKPOINT);
+		waiter.setTimeout(timeout);
+		
+		thread.resume();
+
+		Object suspendee= waiter.waitForEvent();
+		setEventSet(waiter.getEventSet());
+		assertNotNull("Program did not suspend.", suspendee); //$NON-NLS-1$
+		return (IJavaThread)suspendee;
+	}	
+	
+	/**
+	 * Resumes the given thread, and waits for a suspend event caused by the specified
+	 * line breakpoint.  Returns the thread in which the suspend event occurs.
+	 * 
+	 * @param thread thread to resume
+	 * @return thread in which the first suspend event occurs
+	 */
+	protected IJavaThread resumeToLineBreakpoint(IJavaThread resumeThread, ILineBreakpoint bp) throws Exception {
+		DebugEventWaiter waiter= new DebugElementKindEventDetailWaiter(DebugEvent.SUSPEND, IJavaThread.class, DebugEvent.BREAKPOINT);
+		waiter.setTimeout(DEFAULT_TIMEOUT);
+		
+		resumeThread.resume();
+
+		Object suspendee= waiter.waitForEvent();
+		setEventSet(waiter.getEventSet());
+		assertNotNull("Program did not suspend.", suspendee); //$NON-NLS-1$
+		assertTrue("suspendee was not an IJavaThread", suspendee instanceof IJavaThread); //$NON-NLS-1$
+		IJavaThread thread = (IJavaThread) suspendee;
+		IBreakpoint hit = getBreakpoint(thread);
+		assertNotNull("suspended, but not by breakpoint", hit); //$NON-NLS-1$
+		assertTrue("hit un-registered breakpoint", bp.equals(hit)); //$NON-NLS-1$
+		assertTrue("suspended, but not by line breakpoint", hit instanceof ILineBreakpoint); //$NON-NLS-1$
+		ILineBreakpoint breakpoint= (ILineBreakpoint) hit;
+		int lineNumber = breakpoint.getLineNumber();
+		int stackLine = thread.getTopStackFrame().getLineNumber();
+		assertTrue("line numbers of breakpoint and stack frame do not match", lineNumber == stackLine); //$NON-NLS-1$
+		
+		return (IJavaThread)suspendee;
+	}	
+	
+	/**
+	 * Resumes the given thread, and waits for the debug target
+	 * to terminate (i.e. finish/exit the program).
+	 * 
+	 * @param thread thread to resume
+	 */
+	protected void exit(IJavaThread thread) throws Exception {
+		DebugEventWaiter waiter= new DebugElementKindEventWaiter(DebugEvent.TERMINATE, IProcess.class);
+		waiter.setTimeout(DEFAULT_TIMEOUT);
+		
+		thread.resume();
+
+		Object suspendee= waiter.waitForEvent();
+		setEventSet(waiter.getEventSet());
+		assertNotNull("Program did not terminate.", suspendee); //$NON-NLS-1$
+	}	
+		
+
+
+	/**
+	 * Returns the Java model type from the test project with the given name or <code>null</code>
+	 * if none.
+	 * 
+	 * @param typeName
+	 * @return type or <code>null</code>
+	 * @throws Exception
+	 */
+	protected IType getType(String typeName) throws Exception {
+		return getJavaProject().findType(typeName);
+	}
+	
+	
+
+
+
+	
+	
+	/**
+	 * Deletes all existing breakpoints
+	 */
+	protected void removeAllBreakpoints() {
+		IBreakpoint[] bps = getBreakpointManager().getBreakpoints();
+		try {
+			getBreakpointManager().removeBreakpoints(bps, true);
+		} catch (CoreException e) {
+		}
+	}
+	
+	/**
+	 * Returns the first breakpoint the given thread is suspended
+	 * at, or <code>null</code> if none.
+	 * 
+	 * @return the first breakpoint the given thread is suspended
+	 * at, or <code>null</code> if none
+	 */
+	protected IBreakpoint getBreakpoint(IThread thread) {
+		IBreakpoint[] bps = thread.getBreakpoints();
+		if (bps.length > 0) {
+			return bps[0];
+		}
+		return null;
+	}
+	
+	/**
+	 * Evaluates the given snippet in the context of the given stack frame and returns
+	 * the result.
+	 * 
+	 * @param snippet code snippet
+	 * @param frame stack frame context
+	 * @return evaluation result
+	 */
+	protected IEvaluationResult evaluate(String snippet, IJavaStackFrame frame) throws Exception {
+		DebugEventWaiter waiter= new DebugElementKindEventWaiter(DebugEvent.SUSPEND, IJavaThread.class);
+		waiter.setTimeout(DEFAULT_TIMEOUT);
+		
+		IAstEvaluationEngine engine = EvaluationManager.newAstEvaluationEngine(getJavaProject(), (IJavaDebugTarget)frame.getDebugTarget());
+		engine.evaluate(snippet, frame, this, DebugEvent.EVALUATION, true);
+
+		Object suspendee= waiter.waitForEvent();
+		setEventSet(waiter.getEventSet());
+		assertNotNull("Program did not suspend.", suspendee); //$NON-NLS-1$
+		engine.dispose();
+		return fEvaluationResult;
+	}		
+	
+	/**
+	 * @see IEvaluationListener#evaluationComplete(IEvaluationResult)
+	 */
+	public void evaluationComplete(IEvaluationResult result) {
+		fEvaluationResult = result;
+	}
+	
+	/**
+	 * Performs a step over in the given stack frame and returns when complete.
+	 * 
+	 * @param frame stack frame to step in
+	 */
+	protected IJavaThread stepOver(IJavaStackFrame frame) throws Exception {
+		DebugEventWaiter waiter= new DebugElementKindEventDetailWaiter(DebugEvent.SUSPEND, IJavaThread.class, DebugEvent.STEP_END);
+		waiter.setTimeout(DEFAULT_TIMEOUT);
+		
+		frame.stepOver();
+		
+		Object suspendee= waiter.waitForEvent();
+		setEventSet(waiter.getEventSet());
+		assertNotNull("Program did not suspend.", suspendee); //$NON-NLS-1$
+		return (IJavaThread) suspendee;
+	}
+	
+	/**
+	 * Performs a step over in the given stack frame and returns when a breakpoint is hit.
+	 * 
+	 * @param frame stack frame to step in
+	 */
+	protected IJavaThread stepOverToBreakpoint(IJavaStackFrame frame) throws Exception {
+		DebugEventWaiter waiter= new DebugElementKindEventDetailWaiter(DebugEvent.SUSPEND, IJavaThread.class, DebugEvent.BREAKPOINT);
+		waiter.setTimeout(DEFAULT_TIMEOUT);
+		
+		frame.stepOver();
+		
+		Object suspendee= waiter.waitForEvent();
+		setEventSet(waiter.getEventSet());
+		assertNotNull("Program did not suspend.", suspendee); //$NON-NLS-1$
+		return (IJavaThread) suspendee;
+	}	
+
+	/**
+	 * Performs a step into in the given stack frame and returns when complete.
+	 * 
+	 * @param frame stack frame to step in
+	 */
+	protected IJavaThread stepInto(IJavaStackFrame frame) throws Exception {
+		DebugEventWaiter waiter= new DebugElementKindEventDetailWaiter(DebugEvent.SUSPEND, IJavaThread.class, DebugEvent.STEP_END);
+		waiter.setTimeout(DEFAULT_TIMEOUT);
+		
+		frame.stepInto();
+		
+		Object suspendee= waiter.waitForEvent();
+		setEventSet(waiter.getEventSet());
+		assertNotNull("Program did not suspend.", suspendee); //$NON-NLS-1$
+		return (IJavaThread) suspendee;		
+	}
+	
+
+	
+	
+    /**
+     * Wait for builds to complete
+     */
+    public static void waitForBuild() {
+        boolean wasInterrupted = false;
+        do {
+            try {
+                Job.getJobManager().join(ResourcesPlugin.FAMILY_AUTO_BUILD, null);
+                Job.getJobManager().join(ResourcesPlugin.FAMILY_MANUAL_BUILD, null);
+                wasInterrupted = false;
+            } catch (OperationCanceledException e) {
+                e.printStackTrace();
+            } catch (InterruptedException e) {
+                wasInterrupted = true;
+            }
+        } while (wasInterrupted);
+    }	
+    
+	/**
+	 * Returns if the local filesystem is case-sensitive or not
+	 * @return true if the local filesystem is case-sensitive, false otherwise
+	 */
+	protected boolean isFileSystemCaseSensitive() {
+		return Platform.OS_MACOSX.equals(Platform.getOS()) ? false : new File("a").compareTo(new File("A")) != 0; //$NON-NLS-1$ //$NON-NLS-2$
+	}
+	
+
+
+	/**
+	 * Returns the version level of the class files being run, based on the system property <code>java.class.version</code>
+	 * @return the version level of the class files being run in the current VM
+	 *  
+	 *  @since 3.6
+	 */
+	protected String getClassFileVersion() {
+		String version = System.getProperty("java.class.version");
+		if(version.compareTo("48.0") <= 0) {
+			return JavaCore.VERSION_1_4;
+		}
+		if(version.compareTo("49.0") <= 0) {
+			return JavaCore.VERSION_1_5;
+		}
+		return JavaCore.VERSION_1_6;
+	}
+	
+
+	
+}
+

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/TestAgainException.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/TestAgainException.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,25 @@
+/*******************************************************************************
+ * Copyright (c) 2006 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.debug.tests;
+
+/**
+ * Exception to indicate a test should be run again when it fails.
+ * 
+ * @since 3.3
+ */
+public class TestAgainException extends RuntimeException {
+
+	/**
+	 * Generated serial version id 
+	 */
+	private static final long serialVersionUID = 1848804390493463729L;
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/refactoring/MemberParser.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/eclipse/jdt/debug/tests/refactoring/MemberParser.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,531 @@
+/*******************************************************************************
+ * Copyright (c) 2005, 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.debug.tests.refactoring;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Set;
+
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.debug.internal.core.IInternalDebugCoreConstants;
+import org.eclipse.jdt.core.ICompilationUnit;
+import org.eclipse.jdt.core.IField;
+import org.eclipse.jdt.core.IJavaElement;
+import org.eclipse.jdt.core.IJavaProject;
+import org.eclipse.jdt.core.IMember;
+import org.eclipse.jdt.core.IMethod;
+import org.eclipse.jdt.core.IPackageFragment;
+import org.eclipse.jdt.core.IType;
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.core.Signature;
+import org.eclipse.jdt.internal.core.SourceMethod;
+import org.eclipse.jdt.internal.core.SourceType;
+
+/**
+ * Contains methods to find an IMember within a given path subdivided by the '$' character. 
+ * Syntax:
+ * Type$InnerType$MethodNameAndSignature$AnonymousTypeDeclarationNumber$FieldName
+ * eg:<code>
+ * public class Foo{
+ * 		class Inner
+ * 		{
+ * 			public void aMethod()
+ * 			{
+ * 				Object anon = new Object(){
+ * 					int anIntField;
+ * 					String anonTypeMethod() {return "an Example";}				
+ * 				}
+ * 			}
+ * 		}
+ * }</code>
+ * Syntax to get anIntField would be: Foo$Inner$aMethod()V$1$anIntField
+ * Syntax to get the anonymous toString would be: Foo$Inner$aMethod()V$1$anonTypeMethod()QString
+ * In the case of local types, the listed syntax should be Count and then Name, like: CountName
+ * eg:<code>1MyType</code>
+ */
+ at SuppressWarnings({"unchecked","restriction"})
+public class MemberParser{
+	
+	/**
+	 * @param typeQualifiedName
+	 * @return
+	 */
+	private static ArrayList createTypeList(String typeQualifiedName) {
+		typeQualifiedName = typeQualifiedName.replace('$','.');//ensure proper format was used.
+		String parsed[] = typeQualifiedName.split("\\."); //$NON-NLS-1$
+		//make list of types to find
+		ArrayList typeList = new ArrayList();
+		for (int splitNum = 0; splitNum < parsed.length; splitNum++) {
+			typeList.add(parsed[splitNum]);
+		}
+		return typeList;
+	}
+	/**
+	 * @param fragments the scope of which you wish to return compilation units
+	 * @return a handle to all compilation units contained by the given fragments
+	 * @throws JavaModelException
+	 */
+	private static ICompilationUnit[] getAllCompilationUnits(IPackageFragment[] fragments) throws JavaModelException {
+		if(fragments == null)
+			return null;
+		final Set results = new HashSet();
+		for (int fragmentNum = 0; fragmentNum < fragments.length; fragmentNum++) {
+			if(fragments[fragmentNum].containsJavaResources()){
+				ICompilationUnit cunits[] = fragments[fragmentNum].getCompilationUnits();
+				for (int cunitNum = 0; cunitNum < cunits.length; cunitNum++) {
+					results.add(cunits[cunitNum]);								
+				}
+			}
+		}
+		if(results.isEmpty())
+			return null;
+		return (ICompilationUnit[])results.toArray(new ICompilationUnit[results.size()]);
+	}
+	
+	/**
+	 * @param projects the scope of which you wish to return compilation units
+	 * @return a handle to all compilation units contained by the given projects
+	 * @throws JavaModelException
+	 */
+	private static ICompilationUnit[] getAllCompilationUnits(IProject[] projects)  throws JavaModelException{
+		return getAllCompilationUnits(getAllPackageFragments(projects));
+	}	
+	
+	private static ICompilationUnit[] getAllCompilationUnits(String packageName, IProject[] projects)throws JavaModelException {
+		return getAllCompilationUnits(getAllPackageFragments(packageName, projects));
+	}	
+	
+	/**
+	 * @param types
+	 * @return an array of all declared methods for the given types
+	 * @throws JavaModelException
+	 */
+	private static IMethod[] getAllMethods(IType[] types) throws JavaModelException{
+		if(types==null)
+			return null;
+		
+		final Set results = new HashSet();
+		for (int typeNum = 0; typeNum < types.length; typeNum++) {
+			IMethod[] methods = types[typeNum].getMethods();
+			for (int methodNum = 0; methodNum < methods.length; methodNum++) {
+				results.add(methods[methodNum]);
+			}
+		}
+		if(results.isEmpty())
+			return null;
+		return (IMethod[])results.toArray(new SourceMethod[results.size()]);
+	}
+	
+	/**
+	 * @param projects the scope of the return
+	 * @return all package fragments in the scope
+	 * @throws JavaModelException
+	 */
+	private static IPackageFragment[] getAllPackageFragments(IProject[] projects) throws JavaModelException {
+		final Set results = new HashSet();
+		for (int projectNum = 0; projectNum < projects.length; projectNum++) {
+			IJavaProject javaProj = JavaCore.create(projects[projectNum]);
+			if(javaProj!= null && javaProj.exists() && javaProj.hasChildren()){
+				IPackageFragment fragments[] = javaProj.getPackageFragments();
+				for (int fragmentNum = 0; fragmentNum < fragments.length; fragmentNum++) {
+					results.add(fragments[fragmentNum]);
+				}
+			}
+		}
+		if(results.isEmpty())
+			return null;
+		return (IPackageFragment[])results.toArray(new IPackageFragment[results.size()]);
+	}
+	/**
+	 * @return all projects in the workspace
+	 */
+	private static IProject[] getAllProjects(){
+		return ResourcesPlugin.getWorkspace().getRoot().getProjects();
+	}
+	
+	/**
+	 * @param cunits the scope of the search
+	 * @return all types within the scope
+	 * @throws JavaModelException
+	 */
+	private static IType[] getAllTypes(ICompilationUnit[] cunits) throws JavaModelException {
+		if(cunits == null)
+			return null;
+		
+		final Set results = new HashSet();
+		for (int cunitNum = 0; cunitNum < cunits.length; cunitNum++) {
+			IType types[] = cunits[cunitNum].getTypes(); //get all topLevel types
+			for (int typeNum = 0; typeNum < types.length; typeNum++) {
+				results.add(types[typeNum]);
+			}
+		}
+		if(results.isEmpty())
+			return null;	   
+		return (IType[])results.toArray(new IType[results.size()]);
+	}
+	
+	/**
+	 * @param methods the scope of the search
+	 * @return an array of all types declared within the given methods.
+	 * @throws JavaModelException
+	 */
+	private static IType[] getAllTypes(IMethod[] methods) throws JavaModelException {
+		if(methods==null)
+			return null;
+		final Set results = new HashSet();
+		for (int methodNum = 0; methodNum < methods.length; methodNum++) {
+			IJavaElement[] children = methods[methodNum].getChildren();
+			for (int childNum = 0; childNum < children.length; childNum++) {
+				if(children[childNum] instanceof IType)
+					results.add(children[childNum]);
+			}
+		}
+		if(results.isEmpty())
+			return null;
+		return (IType[])results.toArray(new SourceType[results.size()]);
+	}
+	
+	/**Will search within the given type and all of it's children - including methods 
+	 * and anonymous types for other types.
+	 * @param types the scope of the search
+	 * @return all types within the given scope
+	 * @throws JavaModelException
+	 */
+	public static IType[] getAllTypes(IType[] types) throws JavaModelException{
+		if(types == null)
+			return null;
+		
+		final Set results = new HashSet();
+		//get all the obvious type declarations
+		for (int mainTypeNum = 0; mainTypeNum < types.length; mainTypeNum++) {
+			IType declaredTypes[] = types[mainTypeNum].getTypes();
+			for (int declaredTypeNum = 0; declaredTypeNum < declaredTypes.length; declaredTypeNum++) {
+				results.add(declaredTypes[declaredTypeNum]);
+			}
+			//get all the type's method's type declarations
+			types = getAllTypes(getAllMethods(types));
+			for (int methodTypes = 0; methodTypes < types.length; methodTypes++) {
+				results.add(types[methodTypes]);
+			}
+		}
+		if(results.isEmpty())
+			return null;
+		//else
+		return (IType[])results.toArray(new SourceType[results.size()]);//possibly change to new IType
+	}
+	
+	
+	/**
+	 * Returns the Java project with the given name.
+	 * 
+	 * @param name project name
+	 * @return the Java project with the given name
+	 */
+	static protected IJavaProject getJavaProject() {
+		IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject();
+		return JavaCore.create(project);
+	}
+	
+	/**
+	 * @param packageName name of the package
+	 * @param projects where to search
+	 * @return the 1st instance of the given packageName
+	 * @throws JavaModelException
+	 */
+	private static IPackageFragment[] getAllPackageFragments(String packageName, IProject[] projects) throws JavaModelException{
+		final Set results = new HashSet();
+		for (int projectNum = 0; projectNum < projects.length; projectNum++) {
+			IJavaProject javaProj = JavaCore.create(projects[projectNum]);
+			if(javaProj!= null && javaProj.exists() && javaProj.hasChildren()){
+				IPackageFragment fragments[] = javaProj.getPackageFragments();
+				for (int fragmentNum = 0; fragmentNum < fragments.length; fragmentNum++) {
+					if(fragments[fragmentNum].getElementName().equalsIgnoreCase(packageName))
+						results.add(fragments[fragmentNum]);
+				}
+			}
+		}
+		if(results.isEmpty())
+			return null;
+		//else
+		return (IPackageFragment[])results.toArray(new IPackageFragment[results.size()]);
+	}
+	
+	private static IProject getProject(String projectName){
+		return ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);
+	}
+	
+	private static IType getType(ArrayList typeList, ICompilationUnit[] cunits) throws JavaModelException{
+		IType[] types = getAllTypes(cunits);
+		//if 1st letter is a number, it's anonymous
+		boolean targetIsAnonymous = Character.isDigit(typeList.get(0).toString().charAt(0));
+		boolean targetFound=false;
+		char separator = '.';
+		while (true) {//search all types for desired target - will return internally.
+			//check all the types we have
+			int typeNum=0;
+			while(typeNum < types.length) {//search current list of types
+				if(targetIsAnonymous){//must ensure format is same for both.
+					String nameOfCurrentType = types[typeNum].getTypeQualifiedName(separator);
+					nameOfCurrentType = nameOfCurrentType.substring(nameOfCurrentType.lastIndexOf(separator)+1);
+					targetFound = nameOfCurrentType.equalsIgnoreCase(typeList.get(0).toString());
+				}else{
+					targetFound = types[typeNum].getElementName().equalsIgnoreCase(typeList.get(0).toString());
+				}
+				if(targetFound){//yay!
+					typeList.remove(0);
+					if(typeList.isEmpty()){
+						return types[typeNum];//we're at our destination
+					}
+					//else, get all this type's subtypes
+					types = getAllTypes(new IType[]{types[typeNum]});//get next level
+//					check format of this new type
+					targetIsAnonymous = Character.isDigit(typeList.get(0).toString().charAt(0));
+					typeNum = 0;//start again.
+				}
+				else
+					typeNum++;//check the next type
+			}
+			
+			//else, it is not in the top-level types - check in methods
+			types = getAllTypes(getAllMethods(types));
+			if(types==null)
+				return null;//couldn't find it.
+		}//end while		
+	}
+	
+	/**
+	 * Will search the workspace and return the requested type. The more information given, 
+	 * the faster the search
+	 * @param typeName the name of the type, with or without qualifiers - it cannot be null
+	 * 		e.g. "aType.innerType.1.typeInAnonymousType" or even just "typeInAnonymousType" 
+	 * 		or "innerType.1.typeInAnonymousType". 
+	 * @param packageName the elemental name of the package containing the given type - may be null
+	 * @param projectName the elemental name of the project containing the given type - may be null
+	 * @return the IType handle to the requested type
+	 * @throws JavaModelException
+	 */
+	public static IType getType(String typeName, String packageName, String projectName) throws JavaModelException{
+		if(typeName == null)
+			return null;
+		//make list of types to find, in order
+		ArrayList typeList = createTypeList(typeName);
+		//get the proper project(s)
+		IProject[] projects=null;
+		if(projectName!=null && projectName.length()>0){
+			projects = new IProject[] {getProject(projectName)};
+		}
+		else{
+			projects = getAllProjects();
+		}
+		
+		//get the Comp.units for those projects
+		ICompilationUnit cunits[] = null;
+		if(packageName!=null && packageName.length()>0){
+			cunits = getAllCompilationUnits(packageName, projects);
+		}
+		else{
+			cunits = getAllCompilationUnits(projects);
+		}
+		
+		return getType(typeList, cunits);
+	}
+	
+	
+	/**
+	 * @param cu the CompilationUnit containing the toplevel Type
+	 * @param target - the IMember target, listed in full Syntax, as noted in MemberParser 
+	 * eg: EnclosingType$InnerType
+	 * @return the Lowest level inner type specified in input
+	 */
+	public IMember getDeepest(ICompilationUnit cu, String target)
+	{
+		for(int i=0;i<target.length();i++)
+		{
+			if(target.charAt(i)=='$')
+			{//EnclosingType$InnerType$MoreInner
+				String tail = target.substring(i+1);
+				IType enclosure = cu.getType(target.substring(0, i));
+				if(enclosure.exists())
+					return getDeepest(enclosure,tail);
+			}
+		}
+		//has no inner type
+		return cu.getType(target);
+		
+	}
+	
+	/**
+	 * Helper method for getLowestType (ICompilationUnit cu, String input)
+	 * @param top name of enclosing Type
+	 * @param tail the typename, possibly including inner type, 
+	 * separated by $. 
+	 * eg: EnclosingType$InnerType
+	 * @return the designated type, or null if type not found.
+	 */
+	protected IMember getDeepest(IMember top, String tail) {
+		
+		if(tail==null || tail.length()==0 )
+			return top;
+		
+		if(!top.exists())
+			return null;
+		
+		//check if there are more nested elements
+		String head=null;
+		for(int i=0;i<tail.length();i++)
+		{
+			if(tail.charAt(i)=='$')//nested Item?
+			{//Enclosing$Inner$MoreInner
+				head = tail.substring(0,i);
+				tail = tail.substring(i+1);	
+				break;//found next item
+			}
+		}
+		if(head==null)//we are at last item to parse
+		{//swap Members
+			head = tail;
+			tail = null;
+		}
+		
+		if(top instanceof IType)
+			return getNextFromType(top, head, tail);
+		else 
+			if(top instanceof IMethod)
+				return getNextFromMethod(top, head, tail);
+			else
+				if(top instanceof IField)
+					return getNextFromField(top, head, tail);
+		//else there is a problem!
+		return getDeepest(top,tail);			
+	}
+	
+	/**
+	 * @param head the string to parse for a name
+	 * @return the name in the type, given in the format "Occurance#Type"
+	 * e.g. head = "1Type";
+	 */
+	protected String getLocalTypeName(String head) {
+		for(int i=0;i<head.length();i++)
+		{
+			if(!Character.isDigit(head.charAt(i)))
+			{
+				return head.substring(i);
+			}
+			
+		}
+		return IInternalDebugCoreConstants.EMPTY_STRING;//entire thing is a number //$NON-NLS-1$
+	}
+	
+	/**
+	 * @param head the string to parse for an occurrence
+	 * @return the name in the type, given in the format "Occurance#Type"
+	 * e.g. head = "1Type";
+	 */
+	protected int getLocalTypeOccurrence(String head) {
+		for(int i=0;i<head.length();i++)
+		{
+			if(!Character.isDigit(head.charAt(i)))
+				return Integer.parseInt(head.substring(0, i));
+		}
+		return Integer.parseInt(head);//entire thing is a number
+	}
+	
+	/**
+	 * @param head name of method w/ signature at the end
+	 * @return simply the name of the given method, using format:
+	 * methodNameSignature.
+	 * e.g.  head = "someMethod()V"
+	 */
+	protected String getName(String head) {
+		for(int i=0;i<head.length();i++)
+		{
+			if(head.charAt(i)=='(')//nested Item?
+				return head.substring(0,i);
+		}
+		return null;
+	}
+	
+	/**
+	 * @param top the field in which to search
+	 * @param head the next member to find
+	 * @param tail the remaining members to find
+	 * @return the next member down contained by the given Field
+	 */
+	protected IMember getNextFromField(IMember top, String head, String tail) {
+		IField current = (IField)top;
+		
+		IType type = current.getType(getLocalTypeName(head),getLocalTypeOccurrence(head));
+		if(type.exists())	
+			return getDeepest(type,tail);
+		//else
+		return null;//something failed.								
+	}
+	
+	/**
+	 * @param top the member in which to search
+	 * @param head the next member to find
+	 * @param tail the remaining members to find
+	 * @return the next member down contained by the given Method
+	 */
+	protected IMember getNextFromMethod(IMember top, String head, String tail) {
+		//must be a local or anonymous type
+		IMethod current = (IMethod)top;
+		
+		//is next part a Type?
+		IType type = current.getType(getLocalTypeName(head), getLocalTypeOccurrence(head));
+		if(type.exists())	
+			return getDeepest(type,tail);
+		//else
+		return null;
+	}
+	
+	/**
+	 * @param top the member in which to search
+	 * @param head the next member to find
+	 * @param tail the remaining members to find
+	 * @return the next member down contained by the given Type
+	 */
+	protected IMember getNextFromType(IMember top, String head, String tail) {
+		IType current = (IType)top;
+		
+		//is next part a Type?
+		IMember next = current.getType(head);
+		if(next.exists())	
+			return getDeepest(next,tail);
+		//else, is next part a Field?
+		next = current.getField(head);
+		if(next.exists())
+			return getDeepest(next,tail);
+		//else, is next part a Method?
+		next = current.getMethod(getName(head),getSignature(head));
+		if(next.exists())
+			return getDeepest(next,tail);
+		//else
+		return null;//something failed.
+	}
+	
+	/**
+	 * @param head name of method w/ signature at the end
+	 * @return simply the ParameterTypeSignature, using format:
+	 * methodNameSignature.
+	 * e.g.  head = "someMethod()V"
+	 */
+	protected String[] getSignature(String head) {
+		for(int i=0;i<head.length();i++)
+		{
+			if(head.charAt(i)=='(')//nested Item?
+				return Signature.getParameterTypes(head.substring(i));
+		}
+		return null;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,80 @@
+package org.strategoxt.debug.core.control;
+
+import static org.junit.Assert.*;
+import junit.framework.Assert;
+
+import org.StrategoFileManager;
+import org.junit.Test;
+import org.strategoxt.debug.core.eventspec.EnterBreakPoint;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
+import org.strategoxt.debug.core.util.table.EventTable;
+
+public class DSMTestSetInput extends AbstractDSMTest {
+
+	@Test
+	public void testSetInput() throws Exception {
+		// launch the setinput.str
+		// suspend on the first s-enter or r-enter
+		// set the current term
+		// continue
+		
+		String projectName = "setinput";
+		String strategoFilename = "setinput.str";
+		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
+		checkProjectExists(debugSessionSettings);
+		
+		String input = StrategoFileManager.BASE + "/src/stratego/setinput/run.input";
+		String argsForMainClass = "-i " + input;
+		String mainClass = "setinput.setinput";
+		String mainArgs = mainClass + " " + argsForMainClass;
+		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
+		String classpath = cp;
+		
+		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
+		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
+		vmMonitor.setDSM(dsm);
+		
+		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
+		//EventTable eventTable = EventTable.readEventTable(location);
+		EventTable eventTable = dsm.getEventSpecManager().getEventTable();
+		Assert.assertNotNull("EventTable is not initialized, check if the table file exists. ", eventTable);
+		// Assert.assertEquals(6, eventTable.size()); // TODO: find values
+
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester(VMStateTesterCompareType.TopStackFrame);
+		//VMStateTester vmStateTester = null; // TODO: test states...
+		
+		String filename = "";
+		String name = "";
+		int lineNumber = -1;
+		int startTokenPosition = -1;
+		EnterBreakPoint bp = new EnterBreakPoint(filename, name, lineNumber, startTokenPosition);
+		dsm.getEventSpecManager().add(bp);
+		
+		String term;
+		term = "[\"setinput\",\"-i\",\"/home/rlindeman/Documents/TU/strategoxt/spoofax-imp/source/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/run.input\"]";
+		vmStateTester.addStrategoState(VMStateTester.createState("setinput.str", "main", "s-enter", 26, 2, 26, 91, term)); // match-comments[localvar.str]@(47,4)47 39
+
+		// TODO: implement change current term action
+		String action = VMMonitorTestImpl2.CHANGE + "\"theNewCurrentTerm\"";
+		vmMonitor.addAction(action);
+		
+		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		
+		term = "\"theNewCurrentTerm\"";
+		vmStateTester.addStrategoState(VMStateTester.createState("setinput.str", "main", "s-step", 26, 9, 26, 28, term)); // match-comments[localvar.str]@(47,4)47 39
+
+		vmMonitor.addAction(VMMonitorTestImpl2.RESUME);
+		
+		// run
+		vmStateTester.initialize();
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+
+		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs, classpath);
+		System.out.println("EXIT");
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl2.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl2.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -16,9 +16,10 @@
 	public final static String STEP_RETURN = "STEP_RETURN";
 	public final static String RESUME = "RESUME";
 	public final static String TERMINATE = "TERMINATE";
+	public final static String CHANGE = "CHANGE:";
 	
-	private DebugSessionManager debugSessionManager;
-	private VMStateTester vmStateTester;
+	private DebugSessionManager debugSessionManager = null;
+	private VMStateTester vmStateTester = null;
 	
 	private AbstractDSMTest callback = null;
 	
@@ -64,34 +65,37 @@
 		System.out.println("state changed");
 		// catch any exception
 		boolean stateMismatch = false; // true if the current state does not match the expected state
-		try
+		if (vmStateTester != null)
 		{
-			if (vmStateTester.hasNext())
+			try
 			{
-				vmStateTester.next();
-				boolean expected = vmStateTester.compareState(state);
-				String message = "State #" + vmStateTester.getIndex()+ ": Hit " + state.currentFrame() + ", but expected to hit " + vmStateTester.current().currentFrame();
-				Assert.assertTrue(message, expected);
-				System.out.println("current: " + state.currentFrame().getCurrentTerm());
-				for ( Entry<String, IStrategoTerm> entry : state.currentFrame().getVariables().entrySet() )
+				if (vmStateTester.hasNext())
 				{
-					System.out.println("variable entry " + entry.getKey() + " # " + entry.getValue());
+					vmStateTester.next();
+					boolean expected = vmStateTester.compareState(state);
+					String message = "State #" + vmStateTester.getIndex()+ ": Hit " + state.currentFrame() + ", but expected to hit " + vmStateTester.current().currentFrame();
+					Assert.assertTrue(message, expected);
+					System.out.println("current: " + state.currentFrame().getCurrentTerm());
+					for ( Entry<String, IStrategoTerm> entry : state.currentFrame().getVariables().entrySet() )
+					{
+						System.out.println("variable entry " + entry.getKey() + " # " + entry.getValue());
+					}
 				}
-			}
-			else
+				else
+				{
+					String message = "State changed but we did not expect anymore state changes...";
+					Assert.fail(message);
+				}
+				
+			} catch(Exception e)
+			{
+				caughtThrowable(e);
+				stateMismatch = true;
+			} catch (AssertionError e)
 			{
-				String message = "State changed but we did not except anymore state changes...";
-				Assert.fail(message);
+				caughtThrowable(e);
+				stateMismatch = true;
 			}
-			
-		} catch(Exception e)
-		{
-			caughtThrowable(e);
-			stateMismatch = true;
-		} catch (AssertionError e)
-		{
-			caughtThrowable(e);
-			stateMismatch = true;
 		}
 		if (!stateMismatch)
 		{
@@ -153,6 +157,13 @@
 		{
 			this.debugSessionManager.terminateVM();
 		}
+		else if (action.startsWith(CHANGE))
+		{
+			String term = action.substring(CHANGE.length());
+			this.debugSessionManager.changeCurrentTerm(term);
+			// also execute the next action
+			this.nextAction();
+		}
 		else
 		{
 			// action unknown, just do a resume

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileSetInput.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileSetInput.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,92 @@
+package org.strategoxt.debug.core.util.dctests;
+
+import java.io.IOException;
+
+import org.StrategoFileManager;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
+import org.junit.Assert;
+import org.junit.Test;
+import org.strategoxt.debug.core.util.DebugCompiler;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
+
+public class DebugCompileSetInput extends AbstractDebugCompileTest {
+
+	
+	private String baseInputPathString = null;
+	private String strategoFilePathString = null;
+	private String projectName = null;
+	private String mainClass = null;
+	private boolean checkOutput = true;
+	private boolean runJava = true;
+	
+	@Test
+	public void testDebugCompileSetInput() throws Exception {
+		// compile the setinput.str
+		
+		this.baseInputPathString = "src/stratego/setinput"; // folder
+		this.strategoFilePathString = "setinput.str"; // relative to folder
+		this.projectName = "setinput";
+		this.mainClass = "setinput.setinput";
+		checkOutput = false;
+		runJava = false;
+		compileHelper();
+	}
+	
+	private DebugSessionSettings debugSessionSettings = null;
+	
+	private void compileHelper()
+	{
+		IPath strategoFilePath = new Path(this.strategoFilePathString);
+		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(this.baseInputPathString);
+
+		debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
+		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
+		debugSessionSettings.setStrategoFilePath(strategoFilePath);
+		
+		boolean compileSucces = doCompile();
+		
+		if (checkOutput)
+		{
+			checkOutput(debugSessionSettings);
+		}
+
+		// run .class
+		if (runJava && compileSucces)
+		{
+			String input = StrategoFileManager.BASE + "/" + this.baseInputPathString + "/run.input";
+			String argsForMainClass = "-i " + input;
+			//String mainClass = "dynamic.dynamic"; // TODO: java files cannot contain "-", the name may be converted
+			String mainArgs = mainClass + " " + argsForMainClass;
+			
+			String cp = debugSessionSettings.getRunClasspath();
+			String classpath = cp;
+			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
+		}
+	}
+	
+	private boolean doCompile()
+	{
+		DebugCompiler debugCompiler = new DebugCompiler();
+		// mkdir localvar/stratego in workingdir
+		// mkdir localvar/java
+		// mkdir localvar/class
+		IPath binBase = null;
+		boolean compileSucces = false;
+		try {
+			binBase = debugCompiler.debugCompile(debugSessionSettings);
+			compileSucces = true;
+		} catch (IOException e) {
+			e.printStackTrace();
+		} catch (Exception e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		Assert.assertTrue("Debug compiling failed!", compileSucces);
+		Assert.assertNotNull("Bin output directory should be set!", binBase);
+		return compileSucces;
+	}
+	
+}
+

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncher.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncher.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,233 @@
+package org.strategoxt.imp.debug.core.str.launching;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IWorkspace;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.debug.core.DebugEvent;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.ILaunch;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.ILaunchConfigurationType;
+import org.eclipse.debug.core.ILaunchListener;
+import org.eclipse.debug.core.ILaunchManager;
+import org.eclipse.debug.core.model.IBreakpoint;
+import org.eclipse.jdt.debug.testplugin.DebugEventWaiter;
+import org.eclipse.jdt.debug.tests.AbstractDebugTest;
+import org.junit.Before;
+import org.junit.Test;
+import org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget;
+import org.strategoxt.imp.debug.core.str.model.StrategoLineBreakpoint;
+import org.strategoxt.imp.debug.ui.str.launching.StrategoLaunchShortcut;
+
+/**
+ * Inspiration from org.eclipse.jdt.debug.tests.launching.LaunchTests
+ * 
+ * @author rlindeman
+ *
+ */
+public class TestStrategoLauncher extends AbstractDebugTest implements ILaunchListener {
+
+	private boolean added = false; // true if a launch was added
+	private boolean removed = false; // true if a launch was removed
+	private boolean terminated = false; // true if a launch was terminated
+	
+	public TestStrategoLauncher(String name) {
+		super(name);
+		// TODO Auto-generated constructor stub
+	}
+	
+	@Before
+	public void setUp() throws CoreException
+	{
+		// clear all breakpoints
+		if (DebugPlugin.getDefault().getBreakpointManager().hasBreakpoints())
+		{
+			System.out.println("Remove breakpoints");
+			IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints();
+			DebugPlugin.getDefault().getBreakpointManager().removeBreakpoints(breakpoints, true);
+		}
+		// remove existing launch configs
+		ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
+		ILaunchConfigurationType type = manager.getLaunchConfigurationType(IStrategoConstants.ID_STRATEGO_DEBUG_MODEL+".launchConfigurationType.str"); 
+		ILaunchConfiguration[] configurations =  manager.getLaunchConfigurations(type);
+		for (int i = 0; i < configurations.length; i++) {
+			ILaunchConfiguration configuration = configurations[i];
+			System.out.println(configuration.getName());
+			//if (configuration.getName().equals("TESTSTR")) {
+				configuration.delete();
+			//	break;
+			//}
+		}
+		
+		// check if workspace contains stratego-resources project
+		// use the stratego-resources project to test launching stratego programs
+		if (getStrategoResourcesProject() == null)
+		{
+			fail("Project stratego-resources not found in workspace");
+		}
+	}
+	
+	/**
+	 * Returns a IFile in the stratego-resources project, the path shuld be relative to "stratego-resources".
+	 * E.g.: "src-str/test/localvar/localvar.str"
+	 * @param strFile
+	 * @return
+	 */
+	private IFile getFile(String path)
+	{
+		IFile strFile = null;
+		IPath path2str = new Path(path);
+		
+		boolean strFileExists = getStrategoResourcesProject().exists(path2str);
+		assertTrue("File was not found", strFileExists);
+		strFile = getStrategoResourcesProject().getFile(path2str);
+		return strFile;
+	}
+	
+
+
+	@Test
+	public void testLaunch() throws Exception {
+		// /stratego-resources/src-str/test/localvar/localvar.str
+		IFile strFile = getFile("src-str/test/localvar/localvar.str");
+		/*
+		// create breakpoint
+		StrategoLineBreakpoint lineBreakpoint = new StrategoLineBreakpoint(strFile, 48); // 1-based linenumber
+		DebugPlugin.getDefault().getBreakpointManager().addBreakpoint(
+				lineBreakpoint);
+		*/
+		
+		// create the config
+		ILaunchConfiguration config = LaunchUtils.createConfiguration(strFile); // can throw CoreException
+		getLaunchManager().addLaunchListener(this); // listen to launch events
+		// the testcase will sleep a few seconds and will wake up when a launch event occurred.
+		IProgressMonitor monitor = null;
+		
+		System.out.println("LAUNCH...");
+		
+
+		// launch the config ant wait for the suspend event
+		ILaunch launch = config.launch(ILaunchManager.DEBUG_MODE, monitor);
+		System.out.println("STARTED...");
+		synchronized (this) {
+			if (!added) {
+				try {
+					System.out.println("Wait...");
+					wait(30000);
+				} catch (InterruptedException e) {
+				}
+			}
+		}
+		assertTrue("Launch should have been added", added); //$NON-NLS-1$
+		
+		synchronized (this) {
+			for (int i= 0; i < 300; i++) {
+				if (launch.isTerminated()) {
+					terminated= true;
+					break;
+				}
+				try {
+					Thread.sleep(100);
+				} catch (InterruptedException e) {
+				}
+			}
+		}
+		assertTrue("Launch should have been terminated", terminated); //$NON-NLS-1$
+		
+		getLaunchManager().removeLaunch(launch);
+		
+		synchronized (this) {
+			if (!removed) {
+				try {
+					wait(30000);
+				} catch (InterruptedException e) {
+				}
+			}
+		}
+		assertTrue("Launch should have been removed", removed);		 //$NON-NLS-1$
+
+	}
+	
+	@Test
+	public void testBreakpoint() throws Exception {
+		// /stratego-resources/src-str/test/localvar/localvar.str
+		IFile strFile = getFile("src-str/test/localvar/localvar.str");
+		
+		// create breakpoint
+		StrategoLineBreakpoint lineBreakpoint = new StrategoLineBreakpoint(strFile, 48); // 1-based linenumber
+		DebugPlugin.getDefault().getBreakpointManager().addBreakpoint(
+				lineBreakpoint);
+		
+		
+		// create the config
+		ILaunchConfiguration config = StrategoLaunchShortcut.createConfiguration(strFile);
+		getLaunchManager().addLaunchListener(this);
+		
+		System.out.println("LAUNCH TO BREAKPOINT...");
+		
+		   //String typeName = "Breakpoints"; //$NON-NLS-1$
+		   //createLineBreakpoint(52, typeName);
+			StrategoDebugTarget thread = null;
+	       try {
+	    	   boolean register = true;
+	    	   //thread = launchToBreakpoint(config, register);
+	    	   //Class clazz = org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget.class;
+	    	   //DebugEventWaiter waiter= new DebugElementKindEventDetailWaiter(DebugEvent.CREATE, clazz, DebugEvent.BREAKPOINT);
+	    	   DebugEventWaiter waiter= new DebugEventWaiter(DebugEvent.CREATE);
+	    	   thread = (StrategoDebugTarget) launchAndWait(config, waiter, register);
+	           //thread = launchToBreakpoint(typeName, true);
+	           assertNotNull("Breakpoint not hit within timeout period", thread); //$NON-NLS-1$
+	           //ILaunch launch = thread.getLaunch();
+	           //assertFalse("Launch should not be registered", DebugPlugin.getDefault().getLaunchManager().isRegistered(launch)); //$NON-NLS-1$
+	       } finally {
+	           //terminateAndRemove(thread);
+	           removeAllBreakpoints();
+	       }
+	}
+	
+	private IProject strategoResourcesProject = null;
+	
+	private IProject getStrategoResourcesProject()
+	{
+		if (strategoResourcesProject == null)
+		{
+			IWorkspace workspace = ResourcesPlugin.getWorkspace();
+			// check if workspace contains stratego-resources project
+			IProject[] projects = workspace.getRoot().getProjects();
+			for(IProject project : projects)
+			{
+				if ("stratego-resources".equals(project.getName()))
+				{
+					strategoResourcesProject = project;
+				}
+			}
+		}
+		return strategoResourcesProject;
+	}
+	
+	/**
+	 * @see org.eclipse.debug.core.ILaunchListener#launchRemoved(org.eclipse.debug.core.ILaunch)
+	 */
+	public synchronized void launchRemoved(ILaunch launch) {
+		removed = true;
+		notifyAll();
+	}
+
+	/**
+	 * @see org.eclipse.debug.core.ILaunchListener#launchAdded(org.eclipse.debug.core.ILaunch)
+	 */
+	public synchronized void launchAdded(ILaunch launch) {
+		added = true;
+		notifyAll();
+	}
+	
+	/**
+	 * @see org.eclipse.debug.core.ILaunchListener#launchChanged(org.eclipse.debug.core.ILaunch)
+	 */
+	public synchronized void launchChanged(ILaunch launch) {}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncherOutput.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncherOutput.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,5 @@
+package org.strategoxt.imp.debug.core.str.launching;
+
+public class TestStrategoLauncherOutput {
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -13,10 +13,11 @@
  */
 public class MainStrategyTest {
 	public static void main(String[] args) {
-		m1();
-		m2();
-		m3();
-		m4();
+		//m1();
+		m1b();
+		//m2();
+		//m3();
+		//m4();
 	}
 
 	private static void m1() {
@@ -46,6 +47,33 @@
 	}
 
 
+	private static void m1b() {
+		String baseInputPath = "src/stratego/localvardebug";
+		String strategoFilePath = "localvar.str";
+		String strategoSourceBasedir = StrategoFileManager.BASE + "/" + baseInputPath + "/" + strategoFilePath;
+
+		String stratego_input = strategoSourceBasedir;
+		String output_base_dir = StrategoFileManager.WORKING_DIR + "/" + "java_main_test1";
+		String[] l_args = new String[]{
+				"-i", stratego_input
+				, "--gen-dir", output_base_dir};
+		IStrategoTerm result = null;
+		try {
+			//result = org.strategoxt.imp.debug.stratego.transformer.trans.Main.mainNoExit(l_args);
+			org.strategoxt.imp.debug.stratego.transformer.trans.Main.main(l_args);
+			// result = Main.mainNoExit(l_args);
+		} catch(StrategoExit exit)
+		{
+			if (exit.getValue() == StrategoExit.SUCCESS)
+			{
+				System.out.println("SUCCES");
+				result = org.strategoxt.imp.debug.stratego.transformer.strategies.java_store_term_0_0.instance.getStoredTerm();
+				//result = java_store_term_0_0.instance.getStoredTerm();
+				System.out.println(result);
+			}
+		}
+	}
+	
 	private static void m2() {
 		String baseInputPath = "src/stratego/testimports";
 		String strategoFilePath = "localvar.str";

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/lib/strategodebuglib.rtree
==============================================================================
Binary file (source and/or target). No diff available.

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Test.generated.pp
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/syntax/Test.generated.pp	Thu Mar 17 17:07:20 2011	(r22410)
@@ -0,0 +1,215 @@
+[
+   OverlayNoArgs                       -- _1 KW["="] _2,
+   Overlay                             -- _1 KW["("] _2 KW[")"] KW["="] _3,
+   Overlay.2:iter-star-sep             -- _1 KW[","],
+   DynRuleScope                        -- KW["{|"] _1 KW[":"] _2 KW["|}"],
+   ScopeLabels                         -- KW["~"] _1,
+   GenDynRules                         -- KW["rules"] KW["("] _1 KW[")"],
+   GenDynRules.1:iter-star             -- _1,
+   AddScopeLabel                       -- _1 KW["+"] _2,
+   UndefineDynRule                     -- _1 KW[":-"] _2,
+   SetDynRule                          -- _1 KW[":"] _2,
+   AddDynRule                          -- _1 KW[":+"] _2,
+   SetDynRuleMatch                     -- _1 KW[":"] _2,
+   DynRuleAssign                       -- _1 KW[":="] _2,
+   DynRuleAssignAdd                    -- _1 KW[":+="] _2,
+   SetDynRuleDepends                   -- _1 KW[":"] _2 KW["depends"] KW["on"] _3,
+   LabeledDynRuleId                    -- _1 KW["."] _2,
+   AddLabelDynRuleId                   -- _1 KW["+"] _2,
+   DynRuleId                           -- _1,
+   LabeledDynRuleScopeId               -- _1 KW["."] _2,
+   DynRuleScopeId                      -- _1,
+   RDecNoArgs                          -- _1,
+   RDec                                -- _1 KW["("] _2 KW[")"],
+   RDec.2:iter-star-sep                -- _1 KW[","],
+   RDecT                               -- _1 KW["("] _2 KW["|"] _3 KW[")"],
+   RDecT.2:iter-star-sep               -- _1 KW[","],
+   RDecT.3:iter-star-sep               -- _1 KW[","],
+   RuleNames                           -- KW["~"] _1,
+   DynRuleIntersectFix                 -- KW["/"] _1 KW["\\*"] _2,
+   DynRuleIntersect                    -- _1 KW["/"] _2 KW["\\"] _3,
+   DynRuleUnion                        -- _1 KW["\\"] _2 KW["/"] _3,
+   DynRuleIntersectUnion               -- _1 KW["/"] _2 KW["\\"] _3 KW["/"] _4,
+   RDefNoArgs                          -- _1 KW[":"] _2,
+   AnnoDef                             -- _1 _2,
+   AnnoDef.1:iter                      -- _1,
+   RDef                                -- _1 KW["("] _2 KW[")"] KW[":"] _3,
+   RDef.2:iter-star-sep                -- _1 KW[","],
+   RDefT                               -- _1 KW["("] _2 KW["|"] _3 KW[")"] KW[":"] _4,
+   RDefT.2:iter-star-sep               -- _1 KW[","],
+   RDefT.3:iter-star-sep               -- _1 KW[","],
+   RuleNoCond                          -- _1 KW["->"] _2,
+   Rule                                -- _1 KW["->"] _2 KW["where"] _3,
+   Rule                                -- _1 KW["->"] _2 _3,
+   Rule.3:iter                         -- _1,
+   WhereClause                         -- KW["where"] _1,
+   WithClause                          -- KW["with"] _1,
+   SDefNoArgs                          -- _1 KW["="] _2,
+   SDef                                -- _1 KW["("] _2 KW[")"] KW["="] _3,
+   SDef.2:iter-star-sep                -- _1 KW[","],
+   DefaultVarDec                       -- _1,
+   Call                                -- _1 KW["("] _2 KW[")"],
+   Call.2:iter-star-sep                -- _1 KW[","],
+   ScopeDefault                        -- KW["{"] _1 KW["}"],
+   BA                                  -- _1 _2,
+   LChoice                             -- _1 KW["<+"] _2,
+   Rec                                 -- KW["rec"] _1 KW["("] _2 KW[")"],
+   Not                                 -- KW["not"] KW["("] _1 KW[")"],
+   Where                               -- KW["where"] KW["("] _1 KW[")"],
+   With                                -- KW["with"] KW["("] _1 KW[")"],
+   Test                                -- KW["test"] KW["("] _1 KW[")"],
+   PrimNoArgs                          -- KW["prim"] KW["("] _1 KW[")"],
+   Prim                                -- KW["prim"] KW["("] _1 KW[","] _2 KW[")"],
+   Prim.2:iter-star-sep                -- _1 KW[","],
+   StrCong                             -- _1,
+   IntCong                             -- _1,
+   RealCong                            -- _1,
+   CharCong                            -- _1,
+   CongQ                               -- _1 KW["("] _2 KW[")"],
+   CongQ.2:iter-star-sep               -- _1 KW[","],
+   AnnoCong                            -- _1 _2,
+   StrategyCurly                       -- KW["{"] _1 KW["}"],
+   EmptyTupleCong                      -- KW["("] KW[")"],
+   TupleCong                           -- KW["("] _1 KW[","] _2 KW[")"],
+   TupleCong.2:iter-sep                -- _1 KW[","],
+   ListCongNoTail                      -- KW["["] _1 KW["]"],
+   ListCongNoTail.1:iter-star-sep      -- _1 KW[","],
+   ListCong                            -- KW["["] _1 KW["|"] _2 KW["]"],
+   ListCong.1:iter-star-sep            -- _1 KW[","],
+   ExplodeCong                         -- _1 KW["#"] _2,
+   CallNoArgs                          -- _1,
+   LRule                               -- KW["\\"] _1 KW["\\"],
+   SRule                               -- KW["("] _1 KW[")"],
+   Choice                              -- _1 KW["+"] _2,
+   RChoice                             -- _1 KW["+>"] _2,
+   ProceedNoArgs                       -- KW["proceed"],
+   Proceed                             -- KW["proceed"] KW["("] _1 KW[")"],
+   Proceed.1:iter-sep                  -- _1 KW[","],
+   CondChoice                          -- KW["if"] _1 KW["then"] _2 KW["else"] _3 KW["end"],
+   IfThen                              -- KW["if"] _1 KW["then"] _2 KW["end"],
+   SwitchChoiceNoOtherwise             -- KW["switch"] _1 _2 KW["end"],
+   SwitchChoiceNoOtherwise.2:iter-star -- _1,
+   SwitchChoice                        -- KW["switch"] _1 _2 KW["otherwise"] KW[":"] _3 KW["end"],
+   SwitchChoice.2:iter-star            -- _1,
+   SwitchCase                          -- KW["case"] _1 KW[":"] _2,
+   AM                                  -- _1 KW["=>"] _2,
+   Assign                              -- _1 KW[":="] _2,
+   ListVar                             -- _1,
+   Var                                 -- _1,
+   BuildDefaultPT                      -- KW["_"] _1,
+   BuildDefault                        -- KW["_"] _1,
+   Char                                -- _1,
+   AnnoList                            -- _1 KW["{"] _2 KW["}"],
+   AnnoList.2:iter-star-sep            -- _1 KW[","],
+   NoAnnoList                          -- _1,
+   App                                 -- KW["<"] _1 KW[">"] _2,
+   App                                 -- KW["<"] _1 KW[">"] _2,
+   RootApp                             -- _1,
+   RootApp                             -- _1,
+   Tuple                               -- KW["("] _1 KW[")"],
+   Tuple.1:iter-star-sep               -- _1 KW[","],
+   List                                -- KW["["] _1 KW["]"],
+   List.1:iter-star-sep                -- _1 KW[","],
+   ListTail                            -- KW["["] _1 KW["|"] _2 KW["]"],
+   ListTail.1:iter-star-sep            -- _1 KW[","],
+   SortList                            -- KW["["] _1 KW["]"],
+   SortList.1:iter-star-sep            -- _1 KW[","],
+   SortListTl                          -- KW["["] _1 KW["|"] _2 KW["]"],
+   SortListTl.1:iter-star-sep          -- _1 KW[","],
+   SortTuple                           -- KW["("] _1 KW[")"],
+   SortTuple.1:iter-star-sep           -- _1 KW[","],
+   Star                                -- KW["*"],
+   StarStar                            -- KW["**"],
+   Sorts                               -- V  [H  [KW["sorts"]] _1],
+   Sorts.1:iter-star                   -- _1,
+   Constructors                        -- V  [H  [KW["constructors"]] _1],
+   Constructors.1:iter-star            -- _1,
+   SortVar                             -- _1,
+   SortNoArgs                          -- _1,
+   Sort                                -- _1 KW["("] _2 KW[")"],
+   Sort.2:iter-star-sep                -- _1 KW[","],
+   OpDecl                              -- _1 KW[":"] _2,
+   OpDeclQ                             -- _1 KW[":"] _2,
+   OpDeclInj                           -- KW[":"] _1,
+   ExtOpDecl                           -- KW["external"] _1 KW[":"] _2,
+   ExtOpDeclQ                          -- KW["external"] _1 KW[":"] _2,
+   ExtOpDeclInj                        -- KW["external"] KW[":"] _1,
+   ConstType                           -- _1,
+   FunType                             -- _1 KW["->"] _2,
+   FunType.1:iter-sep                  -- _1 KW["*"],
+   Var                                 -- _1,
+   Wld                                 -- KW["_"],
+   Int                                 -- _1,
+   Real                                -- _1,
+   Str                                 -- _1,
+   Op                                  -- _1 KW["("] _2 KW[")"],
+   Op.2:iter-star-sep                  -- _1 KW[","],
+   OpQ                                 -- _1 KW["("] _2 KW[")"],
+   OpQ.2:iter-star-sep                 -- _1 KW[","],
+   Explode                             -- _1 KW["#"] KW["("] _2 KW[")"],
+   Anno                                -- _1 KW["{^"] _2 KW["}"],
+   As                                  -- _1 KW["@"] _2,
+   As                                  -- _1 KW["@"] _2,
+   SVar                                -- _1,
+   Let                                 -- KW["let"] _1 KW["in"] _2 KW["end"],
+   Let.1:iter-star                     -- _1,
+   CallT                               -- _1 KW["("] _2 KW["|"] _3 KW[")"],
+   CallT.2:iter-star-sep               -- _1 KW[","],
+   CallT.3:iter-star-sep               -- _1 KW[","],
+   CallDynamic                         -- KW["call"] KW["("] _1 KW["|"] _2 KW["|"] _3 KW[")"],
+   CallDynamic.2:iter-star-sep         -- _1 KW[","],
+   CallDynamic.3:iter-star-sep         -- _1 KW[","],
+   SDefT                               -- _1 KW["("] _2 KW["|"] _3 KW[")"] KW["="] _4,
+   SDefT.2:iter-star-sep               -- _1 KW[","],
+   SDefT.3:iter-star-sep               -- _1 KW[","],
+   AnnoDef                             -- _1 _2,
+   AnnoDef.1:iter                      -- _1,
+   ExtSDefInl                          -- KW["external"] _1 KW["("] _2 KW["|"] _3 KW[")"] KW["="] _4,
+   ExtSDefInl.2:iter-star-sep          -- _1 KW[","],
+   ExtSDefInl.3:iter-star-sep          -- _1 KW[","],
+   ExtSDef                             -- KW["external"] _1 KW["("] _2 KW["|"] _3 KW[")"],
+   ExtSDef.2:iter-star-sep             -- _1 KW[","],
+   ExtSDef.3:iter-star-sep             -- _1 KW[","],
+   ExtSDef                             -- KW["external"] _1 KW["("] _2 KW["|"] _3 KW[")"],
+   ExtSDef.2:iter-star-sep             -- _1 KW[","],
+   ExtSDef.3:iter-star-sep             -- _1 KW[","],
+   Extend                              -- KW["extend"],
+   Override                            -- KW["override"],
+   Internal                            -- KW["internal"],
+   VarDec                              -- _1 KW[":"] _2,
+   ParenStrat                          -- KW["("] _1 KW[")"],
+   Fail                                -- KW["fail"],
+   Id                                  -- KW["id"],
+   ProceedT                            -- KW["proceed"] KW["("] _1 KW["|"] _2 KW[")"],
+   ProceedT.1:iter-star-sep            -- _1 KW[","],
+   ProceedT.2:iter-star-sep            -- _1 KW[","],
+   ProceedNoArgs                       -- KW["proceed"],
+   Match                               -- KW["?"] _1,
+   Build                               -- KW["!"] _1,
+   Scope                               -- KW["{"] _1 KW[":"] _2 KW["}"],
+   Scope.1:iter-star-sep               -- _1 KW[","],
+   Seq                                 -- _1 KW[";"] _2,
+   GuardedLChoice                      -- _1 KW["<"] _2 KW["+"] _3,
+   PrimT                               -- KW["prim"] KW["("] _1 KW[","] _2 KW["|"] _3 KW[")"],
+   PrimT.2:iter-star-sep               -- _1 KW[","],
+   PrimT.3:iter-star-sep               -- _1 KW[","],
+   Some                                -- KW["some"] KW["("] _1 KW[")"],
+   One                                 -- KW["one"] KW["("] _1 KW[")"],
+   All                                 -- KW["all"] KW["("] _1 KW[")"],
+   ImportTerm                          -- KW["import-term"] KW["("] _1 KW[")"],
+   Module                              -- KW["module"] _1 _2,
+   Module.2:iter-star                  -- _1,
+   Specification                       -- V  [H  [KW["specification"]] _1],
+   Specification.1:iter-star           -- _1,
+   Imports                             -- V  [H  [KW["imports"]] _1],
+   Imports.1:iter-star                 -- _1,
+   Strategies                          -- V  [H  [KW["strategies"]] _1],
+   Strategies.1:iter-star              -- _1,
+   Signature                           -- V  [H  [KW["signature"]] _1],
+   Signature.1:iter-star               -- _1,
+   Import                              -- _1,
+   Rules                               -- V  [H  [KW["rules"]] _1],
+   Rules.1:iter-star                   -- _1,
+   Overlays                            -- V  [H  [KW["overlays"]] _1],
+   Overlays.1:iter-star                -- _1
+]
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Thu Mar 17 17:07:20 2011	(r22410)
@@ -17,3 +17,7 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Import-Package: org.eclipse.jface.text
 Bundle-Vendor: Spoofax.org
+Export-Package: org.strategoxt.imp.debug.ui,
+ org.strategoxt.imp.debug.ui.str,
+ org.strategoxt.imp.debug.ui.str.launching,
+ org.strategoxt.imp.debug.ui.str.model

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoLaunchShortcut.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoLaunchShortcut.java	Thu Mar 17 14:08:27 2011	(r22409)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoLaunchShortcut.java	Thu Mar 17 17:07:20 2011	(r22410)
@@ -1,16 +1,10 @@
 package org.strategoxt.imp.debug.ui.str.launching;
 
-import java.util.ArrayList;
 import java.util.List;
 
 import org.eclipse.core.resources.IFile;
-import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
-import org.eclipse.debug.core.DebugPlugin;
 import org.eclipse.debug.core.ILaunchConfiguration;
-import org.eclipse.debug.core.ILaunchConfigurationType;
-import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
-import org.eclipse.debug.core.ILaunchManager;
 import org.eclipse.debug.ui.DebugUITools;
 import org.eclipse.debug.ui.IDebugModelPresentation;
 import org.eclipse.debug.ui.ILaunchShortcut;
@@ -22,7 +16,7 @@
 import org.eclipse.ui.IEditorInput;
 import org.eclipse.ui.IEditorPart;
 import org.eclipse.ui.dialogs.ElementListSelectionDialog;
-import org.strategoxt.imp.debug.core.str.launching.IStrategoConstants;
+import org.strategoxt.imp.debug.core.str.launching.LaunchUtils;
 import org.strategoxt.imp.debug.ui.Activator;
 
 public class StrategoLaunchShortcut implements ILaunchShortcut {
@@ -72,8 +66,24 @@
         */
 	}
 	
-	
-    protected void searchAndLaunch(Object[] search, String mode) {
+    /**
+     * Returns the LaunchConfigurations that are Stratego launch configs and match the strategoProgramPath.
+     * 
+     * @param strategoProgramPath strategoProgramPath points to a stratego program, the path should start with "/{project-name}"
+     */
+    private ILaunchConfiguration findStrategoLaunchConfiguration(IFile strategoProgramPath, String mode) {
+    	List<ILaunchConfiguration> candidateConfigs = LaunchUtils.getStrategoLaunchConfigurations(strategoProgramPath, mode);
+		int candidateCount = candidateConfigs.size();
+		if (candidateCount == 1) {
+			return (ILaunchConfiguration) candidateConfigs.get(0);
+		} else if (candidateCount > 1) {
+			return chooseConfiguration(candidateConfigs);
+		}
+		return null;
+	}
+
+	protected void searchAndLaunch(Object[] search, String mode) {
+		// TODO: implement!
         /*
     	IType[] types = null;
         if (search != null) {
@@ -111,48 +121,7 @@
         }*/
     }
     
-    /**
-     * Returns the LaunchConfigurations that are Stratego launch configs and match the strategoProgramPath.
-     * 
-     * @param strategoProgramPath strategoProgramPath points to a stratego program, the path should start with "/{project-name}"
-     */
-    private ILaunchConfiguration findStrategoLaunchConfiguration(IFile strategoProgramPath, String mode)
-    {
-    	// fetch the stratego config type
-    	ILaunchConfigurationType type = this.getStrategoLaunchConfigurationType();
-		List<ILaunchConfiguration> candidateConfigs = new ArrayList<ILaunchConfiguration>();
-		if (type != null)
-		{
-			// stratego launch configuration type found!
-			try {
-				ILaunchConfiguration[] configs = DebugPlugin.getDefault().getLaunchManager().getLaunchConfigurations(type);
-				
-				for(ILaunchConfiguration config : configs)
-				{
-					// find a config that matches the program name
-					String program = config.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, "");
-					// TODO: should we equal on IPath objects instead of Strings?
-					if (program.equals(strategoProgramPath.getFullPath().toOSString())) 
-					{
-						System.out.println(config.getModes());
-						candidateConfigs.add(config);
-					}
-					//System.out.println(program);
-				}
-			} catch (CoreException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			}
-		}
-		int candidateCount = candidateConfigs.size();
-		if (candidateCount == 1) {
-			return (ILaunchConfiguration) candidateConfigs.get(0);
-		} else if (candidateCount > 1) {
-			return chooseConfiguration(candidateConfigs);
-		}
-		return null;
-    }
-    
+   
 	/**
 	 * Returns a configuration from the given collection of configurations that should be launched,
 	 * or <code>null</code> to cancel. Default implementation opens a selection dialog that allows
@@ -186,7 +155,7 @@
 	 * 
 	 * @return active workbench window shell
 	 */
-	protected Shell getShell() {
+	public static Shell getShell() {
 		return Activator.getActiveWorkbenchShell();
 	}
 	
@@ -205,54 +174,15 @@
 	 * @param type the stratego file to create a launch configuration for
 	 * @return launch configuration configured to launch the specified type
 	 */
-	protected ILaunchConfiguration createConfiguration(IFile file) {
+	public static ILaunchConfiguration createConfiguration(IFile file) {
 		ILaunchConfiguration config = null;
 		try {
-			ILaunchConfigurationType configType = getStrategoLaunchConfigurationType();
-			String namePrefix = file.getName();
-			ILaunchConfigurationWorkingCopy wc = configType.newInstance(null, DebugPlugin.getDefault().getLaunchManager().generateUniqueLaunchConfigurationNameFrom(namePrefix)); 
-			
-			/*
-			IStrategoConstants.ATTR_STRATEGO_PROGRAM;
-			IStrategoConstants.ATTR_STRATEGO_PROGRAM_ARGUMENTS;
-			IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE;
-			IStrategoConstants.ATTR_STRATEGO_PROJECT;
-			*/
-			// default parameters
-			String program = file.getFullPath().toOSString();
-			List<String> programArguments = new ArrayList<String>();
-			String fulldir = file.getParent().getLocation().toOSString();
-			programArguments.add("-i");
-			programArguments.add(fulldir + "/run.input");
-			programArguments.add("-o");
-			programArguments.add(fulldir + "/run.output");
-
-			boolean recompile = false;
-			wc.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, program);
-			wc.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_ARGUMENTS, programArguments);
-			wc.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE, recompile);
-			IResource[] rs = new IResource[] {file};
-			wc.setMappedResources(rs);
-			config = wc.doSave();
-				
+			config = LaunchUtils.createConfiguration(file);
 		} catch (CoreException ce) {
 			MessageDialog.openError(getShell(), "Error"/*LauncherMessages.JavaLaunchShortcut_3*/, ce.getStatus().getMessage());	
 		}
 		return config;
 	}
 	
-	/**
-	 * Returns the type of configuration this shortcut is applicable to.
-	 * 
-	 * Copied from org.eclipse.jdt.debug.ui.launchConfigurations.JavaLaunchShortcut.
-	 * 
-	 * @return the type of configuration this shortcut is applicable to
-	 */
-	protected ILaunchConfigurationType getStrategoLaunchConfigurationType()
-	{
-    	ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
 
-		ILaunchConfigurationType type = manager.getLaunchConfigurationType(IStrategoConstants.ID_STRATEGO_DEBUG_MODEL+".launchConfigurationType.str"); 
-		return type;
-	}
 }

From M.A.Akhter at student.tudelft.nl  Fri Mar 18 03:19:57 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Fri, 18 Mar 2011 02:19:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22411 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf
Message-ID: <20110318021957.D330B2B8052@mx2.tudelft.nl>

Author: MdAdilAkhter
Date: Fri Mar 18 02:19:55 2011
New Revision: 22411
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22411&sc=1

Log:
renaming module name

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/signatures-mapper.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/signatures-mapper.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/signatures-mapper.str	Thu Mar 17 17:07:20 2011	(r22410)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/signatures-mapper.str	Fri Mar 18 02:19:55 2011	(r22411)
@@ -1,4 +1,4 @@
-module sdf/signatures-mappers
+module sdf/signatures-mapper
 
 imports 
 		common 

From L.C.L.Kats at tudelft.nl  Fri Mar 18 10:48:09 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 18 Mar 2011 09:48:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22412 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms
Message-ID: <20110318094809.959C3CC1EA@mx4.tudelft.nl>

Author: LennartKats
Date: Fri Mar 18 09:48:09 2011
New Revision: 22412
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22412&sc=1

Log:
Return MUTABLE terms if sharing is not allowed for tryMakeUniqueString()

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Fri Mar 18 02:19:55 2011	(r22411)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Fri Mar 18 09:48:09 2011	(r22412)
@@ -164,7 +164,8 @@
         	} else if (name.length() > MAX_POOLED_STRING_LENGTH) {
         		throw new UnsupportedOperationException("String too long to be pooled (newname not allowed): " + name);
         	} else {
-            	StrategoString result = new StrategoString(name, null, STRING_POOL_STORAGE_TYPE);
+            	StrategoString result = new StrategoString(name, null,
+            			isTermSharingAllowed() ? STRING_POOL_STORAGE_TYPE : MUTABLE);
         		asyncStringPool.put(name, new WeakReference<StrategoString>(result));
         		return result;
         	}

From m.dejonge at tudelft.nl  Fri Mar 18 11:18:53 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 18 Mar 2011 10:18:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22413 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	parser stratego
Message-ID: <20110318101854.0129C7F8052@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Mar 18 10:18:52 2011
New Revision: 22413
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22413&sc=1

Log:
parse files outside workspace

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Fri Mar 18 09:48:09 2011	(r22412)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	Fri Mar 18 10:18:52 2011	(r22413)
@@ -110,7 +110,7 @@
 		IResource resource = controller == null ? null : controller.getResource();
 		if(resource==null && filename !=null) {
 			File file = new File(filename);
-			if (file.exists()) {
+			if (file.exists() && EditorIOAgent.isResource(file)) {
 				resource = EditorIOAgent.getResource(file);
 			}
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java	Fri Mar 18 09:48:09 2011	(r22412)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java	Fri Mar 18 10:18:52 2011	(r22413)
@@ -172,4 +172,11 @@
 		assert resources.length == 1;
 		return resources[0];
 	}
+	
+	public static boolean isResource(File file){
+		URI uri = file.toURI();
+		IWorkspace workspace = ResourcesPlugin.getWorkspace();
+		IResource[] resources = workspace.getRoot().findContainersForLocationURI(uri);
+		return resources.length > 0;
+	}
 }

From seba at informatik.uni-marburg.de  Fri Mar 18 12:13:29 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 18 Mar 2011 11:13:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22414 - in
	sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj:
	init transformations
Message-ID: <20110318111329.3E745CC1EA@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Fri Mar 18 11:13:28 2011
New Revision: 22414
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22414&sc=1

Log:
implemented and activated automatic Stratego signature generation for partial grammars

Added:
   sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/
   sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str
Modified:
   sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/init/initTrans.str

Modified: sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/init/initTrans.str
==============================================================================
--- sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/init/initTrans.str	Fri Mar 18 10:18:52 2011	(r22413)
+++ sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/init/initTrans.str	Fri Mar 18 11:13:28 2011	(r22414)
@@ -2,6 +2,8 @@
 imports libstrategolib
         org/sugarj/languages/SugarJ
 
+imports org/sugarj/transformations/GenerateSignatures
+
 signature constructors
   NextToplevelDeclaration : ToplevelDeclaration * Rest -> NextToplevelDeclaration
 
@@ -11,8 +13,12 @@
   
   desugar = fail
   changed-tree(s) = ?t; s; not(equal(|t))
-  traverse(s) = compile-error <+ bottomup(try(s; traverse(s)))
-  internal-main = traverse(desugar)
+  
+  unlocked-bottomup(s) = ?Locked(t) < id + all(unlocked-bottomup(s)); s
+  traverse(s) = compile-error <+ unlocked-bottomup(try(s; traverse(s)))
+  unlock = bottomup(try(?Locked(<id>)))
+  
+  internal-main = traverse(desugar); unlock
   main = io-wrap(internal-main)
 
   sugarj-analyze:
@@ -36,6 +42,10 @@
 
 signature
   constructors
+    Locked : a -> a
+
+signature
+  constructors
     Some : a -> Option(a)
     None : Option(a)
 

Added: sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/transformations/GenerateSignatures.str	Fri Mar 18 11:13:28 2011	(r22414)
@@ -0,0 +1,139 @@
+module org/sugarj/transformations/GenerateSignatures
+
+imports org/sugarj/languages/Sdf2
+        org/sugarj/languages/Stratego
+
+
+strategies
+  desugar =
+    changed-tree(gen-signature)
+
+
+rules
+
+  gen-signature :
+    SugarBody(elems) -> SugarBody(res)
+    where <(map(gen-signature-elem <+ ![<id>])
+            ; concat)> elems => res
+
+
+rules
+
+  gen-signature-elem :
+    grammar-elem(grammar) -> [ Locked(grammar-elem(grammar))
+                             , transformation-elem(sig)
+                             ]
+    where <gen-signature-from-grammar> grammar => sig
+
+
+rules
+
+  gen-signature-from-grammar :
+    syntax(productions) -> Signature([Constructors(opdecls)])
+    where <(map(ensure-list(gen-opdecl-from-prod)) ; concat)> productions => opdecls
+
+  gen-signature-from-grammar :
+    context-free-syntax(productions) -> Signature([Constructors(opdecls)])
+    where <(map(ensure-list(gen-opdecl-from-prod)) ; concat)> productions => opdecls
+
+
+rules
+
+  gen-opdecl-from-prod :
+    prod(arg-symbols, res-symbol, attributes) -> OpDecl(cons, type)
+    where <get-cons-attribute> attributes => cons
+          ; <get-prod-type> (arg-symbols, res-symbol) => type
+
+  get-cons-attribute :
+    attrs(attributes) -> cons
+    where <getfirst(
+             ?term(
+                default(
+                  appl(
+                    unquoted("cons")
+                  , [fun(quoted(<id>))]
+                  )
+                )
+              )
+           )> attributes => consQuoted
+          ; <unquote(?'"')> consQuoted => cons
+
+  get-prod-type :
+    ([], res) -> type
+    where <get-symbol-type> res => type
+
+  get-prod-type :
+    (args, res) -> type
+    where <(map(ensure-list(get-symbol-type)) ; concat)> args => arg-types
+          ; <get-symbol-type> res => res-type
+          ; <(?[]
+              < !res-type
+              + !FunType(arg-types, res-type))> arg-types => type
+
+  ensure-list(s) =
+    s
+    ; (is-list < id + ![<id>])
+    <+ ![]
+
+
+rules
+
+  get-symbol-type :
+    sym -> ConstType(Sort(name, []))
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    start() -> "<START>"
+
+  get-symbol-name :
+    file-start() -> "<Start>"
+
+  get-symbol-name :
+    label(_, sym) -> name
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    sort(name) -> name
+
+  get-symbol-name :
+    parameterized-sort(name, _) -> name
+
+  get-symbol-name :
+    lifting(sym) -> name
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    seq(_, _) -> "seq"
+
+  get-symbol-name :
+    opt(_) -> "opt"
+
+  get-symbol-name :
+    iter(_) -> "iter"
+
+  get-symbol-name :
+    iter-star(_) -> "iter-star"
+
+  get-symbol-name :
+    iter-sep(_, _) -> "iter-sep"
+
+  get-symbol-name :
+    iter-star-sep(_, _) -> "iter-star-sep"
+
+  get-symbol-name :
+    tuple(_, _) -> "tuple"
+
+  get-symbol-name :
+    alt(_, _) -> "alt"
+
+  get-symbol-name :
+    cf(sym) -> name
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    lex(sym) -> name
+    where <get-symbol-name> sym => name
+
+  get-symbol-name :
+    varsym(sym) -> name
+    where <get-symbol-name> sym => name
\ No newline at end of file

From srabbelier at gmail.com  Fri Mar 18 14:31:45 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Fri, 18 Mar 2011 13:31:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22415 -
	spoofax/trunk/org.spoofax.jssglr
Message-ID: <20110318133145.17018CC14D@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Fri Mar 18 13:31:44 2011
New Revision: 22415
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22415&sc=1

Log:
Create org.spoofax.jssglr project.

Added:
   spoofax/trunk/org.spoofax.jssglr/

From srabbelier at gmail.com  Fri Mar 18 15:39:43 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Fri, 18 Mar 2011 14:39:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22416 - in
	spoofax/trunk/org.spoofax.jssglr: . .settings src src/org
	src/org/spoofax src/org/spoofax/jssglr src/org/spoofax/jssglr/client
	src/org/spoofax/jssglr/client/ser...
Message-ID: <20110318143943.CC4F9CC207@mx4.tudelft.nl>

Author: SverreRabbelier
Date: Fri Mar 18 14:39:43 2011
New Revision: 22416
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22416&sc=1

Log:
Initial version

Added:
   spoofax/trunk/org.spoofax.jssglr/.classpath
   spoofax/trunk/org.spoofax.jssglr/.project
   spoofax/trunk/org.spoofax.jssglr/.settings/
   spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gdt.eclipse.core.prefs
   spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs
   spoofax/trunk/org.spoofax.jssglr/src/
   spoofax/trunk/org.spoofax.jssglr/src/org/
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/Worker.gwt.xml
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/Worker.java
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/
   spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java

Added: spoofax/trunk/org.spoofax.jssglr/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/org.spoofax.jssglr/.classpath	Fri Mar 18 14:39:43 2011	(r22416)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.google.gwt.eclipse.core.GWT_CONTAINER"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
+	<classpathentry kind="src" path="/webworker"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.jsglr"/>
+	<classpathentry combineaccessrules="false" kind="src" path="/org.spoofax.terms"/>
+	<classpathentry kind="output" path="war/WEB-INF/classes"/>
+</classpath>

Added: spoofax/trunk/org.spoofax.jssglr/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/org.spoofax.jssglr/.project	Fri Mar 18 14:39:43 2011	(r22416)
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.spoofax.jssglr</name>
+	<comment></comment>
+	<projects>
+		<project>org.spoofax.jsglr</project>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.google.gdt.eclipse.core.webAppProjectValidator</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.google.gwt.eclipse.core.gwtProjectValidator</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>com.google.gwt.eclipse.core.gwtNature</nature>
+	</natures>
+</projectDescription>

Added: spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gdt.eclipse.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gdt.eclipse.core.prefs	Fri Mar 18 14:39:43 2011	(r22416)
@@ -0,0 +1,5 @@
+#Tue Mar 15 14:54:24 CET 2011
+eclipse.preferences.version=1
+jarsExcludedFromWebInfLib=
+warSrcDir=
+warSrcDirIsOutput=false

Added: spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/org.spoofax.jssglr/.settings/com.google.gwt.eclipse.core.prefs	Fri Mar 18 14:39:43 2011	(r22416)
@@ -0,0 +1,5 @@
+#Tue Mar 15 15:12:51 CET 2011
+eclipse.preferences.version=1
+entryPointModules=
+filesCopiedToWebInfLib=gwt-servlet.jar
+gwtCompileSettings=PGd3dC1jb21waWxlLXNldHRpbmdzPjxsb2ctbGV2ZWw+SU5GTzwvbG9nLWxldmVsPjxvdXRwdXQtc3R5bGU+UFJFVFRZPC9vdXRwdXQtc3R5bGU+PGV4dHJhLWFyZ3M+PCFbQ0RBVEFbXV0+PC9leHRyYS1hcmdzPjx2bS1hcmdzPjwhW0NEQVRBWy1YbXg1MTJtXV0+PC92bS1hcmdzPjwvZ3d0LWNvbXBpbGUtc2V0dGluZ3M+

Added: spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/Worker.gwt.xml
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/Worker.gwt.xml	Fri Mar 18 14:39:43 2011	(r22416)
@@ -0,0 +1,15 @@
+<!DOCTYPE document SYSTEM
+    "http://google-web-toolkit.googlecode.com/svn/releases/1.7/distro-source/core/src/gwt-module.dtd">
+<module rename-to="jssglrWorker">
+		<inherits name="com.google.gwt.user.User"/>
+        <inherits name='com.google.gwt.core.Core' />
+        <inherits name='com.google.gwt.webworker.WebWorker' />
+		<inherits name='org.spoofax.JsglrGWT'/>
+
+		<entry-point class="org.spoofax.jssglr.client.Worker"/>
+
+		<set-property name='user.agent' value='gecko1_8' />
+
+        <!-- Use the WebWorker linker for a Dedicated worker-->
+        <add-linker name="dedicatedworker" />
+</module>

Added: spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/Worker.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/Worker.java	Fri Mar 18 14:39:43 2011	(r22416)
@@ -0,0 +1,39 @@
+package org.spoofax.jssglr.client;
+
+import com.google.gwt.webworker.client.DedicatedWorkerEntryPoint;
+import com.google.gwt.webworker.client.MessageEvent;
+import com.google.gwt.webworker.client.MessageHandler;
+
+import org.spoofax.jssglr.client.services.*;
+
+import com.google.gwt.core.client.JavaScriptObject;
+
+/**
+ *
+ * @author Karl Trygve Kalleberg &lt;karltk at spoofax.org&gt;
+ *
+ * Licensed under MPL 1.1/GPL 2.0/LGPL 2.1
+ */
+public class Worker extends DedicatedWorkerEntryPoint {
+
+	private Parser parser;
+
+	private native void nativeOnWorkerLoad() /*-{
+		var oneself = this;
+
+		self.spoofax = {};
+		self.spoofax.createParser = function(lang) {
+			return oneself. at org.spoofax.jssglr.client.Worker::createParser(Ljava/lang/String;)(lang);
+		}
+	}-*/;
+
+	@Override
+	public void onWorkerLoad() {
+		nativeOnWorkerLoad();
+	}
+
+	private JavaScriptObject createParser(String grammarUrl) {
+		parser = new Parser();
+		return parser.asyncInitializeFromURL(grammarUrl);
+	}
+}

Added: spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/org.spoofax.jssglr/src/org/spoofax/jssglr/client/services/Parser.java	Fri Mar 18 14:39:43 2011	(r22416)
@@ -0,0 +1,200 @@
+package org.spoofax.jssglr.client.services;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import org.spoofax.interpreter.terms.ISimpleTerm;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.ParseException;
+import org.spoofax.jsglr.client.ParseTable;
+import org.spoofax.jsglr.client.SGLR;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.jsglr.client.imploder.TermTreeFactory;
+import org.spoofax.jsglr.client.imploder.TreeBuilder;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.spoofax.terms.TermFactory;
+
+import com.google.gwt.core.client.GWT;
+import com.google.gwt.core.client.JavaScriptObject;
+import com.google.gwt.core.client.JsArray;
+import com.google.gwt.http.client.Request;
+import com.google.gwt.http.client.RequestBuilder;
+import com.google.gwt.http.client.RequestCallback;
+import com.google.gwt.http.client.RequestException;
+import com.google.gwt.http.client.Response;
+
+/**
+ * A parser for a specific editor instance.
+ */
+public class Parser {
+
+	// TODO: get list of incremental sorts from some place
+	private final String[] HACK_DEFAULT_INCREMENTAL_SORTS =
+		{ "RuleDec", "SDec",
+		  "MethodDec", "ClassBodyDec", "ClassMemberDec", "ConstrDec", "FieldDec" };
+
+	private final ITermFactory af;
+	private ParseTable parseTable;
+	private TreeBuilder treeBuilder;
+	private SGLR sglr;
+	private Set<String> incrementalSorts;
+	private IStrategoTerm lastResult;
+
+	public Parser() {
+		af = new TermFactory();
+
+		incrementalSorts = new HashSet<String>();
+		for (String s : HACK_DEFAULT_INCREMENTAL_SORTS)
+			incrementalSorts.add(s);
+	}
+
+	public JavaScriptObject asyncInitializeFromURL(String parseTableURL) {
+		final RequestBuilder builder = new RequestBuilder(RequestBuilder.GET, parseTableURL);
+		try {
+			builder.sendRequest( null,  new RequestCallback() {
+				@Override
+				public void onError(Request request, Throwable exception)
+				{
+					GWT.log( "error", exception );
+				}
+				@Override
+				public void onResponseReceived(Request request, Response response) {
+					if(response.getStatusCode() == 200 || response.getStatusCode() == 304) {
+						initialize(response.getText());
+					}
+				}
+			});
+		} catch (final RequestException e) {
+			GWT.log( "error", e);
+		}
+
+		return exposeParser(this);
+	}
+
+	private void initialize(String tableContents) {
+		// TODO: share table across multiple Parser instances
+		IStrategoTerm tableTerm = af.parseFromString(tableContents);
+		try {
+			parseTable = new ParseTable(tableTerm, af);
+			TermTreeFactory factory = new TermTreeFactory(af);
+			treeBuilder = new TreeBuilder(factory);
+			sglr = new SGLR(treeBuilder, parseTable);
+			sglr.setUseStructureRecovery(true);
+//			sglr = new IncrementalSGLR<IStrategoTerm>(parser, C_STYLE, factory, incrementalSorts);
+		} catch (InvalidParseTableException e) {
+			GWT.log("error", e);
+		}
+	}
+
+	public boolean isReady() {
+		return sglr != null;
+	}
+
+	private native JavaScriptObject exposeParser (Parser parser) /*-{
+		var self = this;
+		var parser = {};
+		parser.parse = function (text) {
+			return self. at org.spoofax.jssglr.client.services.Parser::parse(Ljava/lang/String;)(text);
+		};
+		parser.parseAndTokenize = function (lineCount, text) {
+			return self. at org.spoofax.jssglr.client.services.Parser::parseAndTokenize(ILjava/lang/String;)(lineCount, text);
+		};
+		parser.isReady = function() {
+			return self. at org.spoofax.jssglr.client.services.Parser::isReady()();
+		};
+		return parser;
+	}-*/;
+
+	@SuppressWarnings("unchecked")
+	public JavaScriptObject parseAndTokenize(int lines, String text) {
+		final JsArray<JavaScriptObject>[] attrs = new JsArray[lines];
+		for(int i = 0; i < lines; i++) {
+			attrs[i] = (JsArray<JavaScriptObject>) JavaScriptObject.createArray();
+		}
+		final ISimpleTerm o = parse(text);
+		if(o == null) {
+			return makeJsArray(attrs);
+		}
+		final IToken t = ImploderAttachment.get(o).getLeftToken();
+		if(t == null) {
+			return makeJsArray(attrs);
+		}
+		final ITokenizer tok = t.getTokenizer();
+		for(int i = 0; i < tok.getTokenCount(); i++) {
+			final IToken x = tok.getTokenAt(i);
+			//debugToken(x);
+
+			final int start = x.getColumn();
+			final int end = x.getEndOffset() - x.getStartOffset() + start + 1;
+			final String tokentype = convertTokenType(x.getKind());
+			attrs[x.getLine()-1].push(createBespinToken(x.toString(), tokentype, start, end, x.getLine()));
+		}
+		return makeJsArray(attrs);
+	}
+
+	public native static JavaScriptObject createBespinToken(String value, String tokentype, int startColumn, int endColumn, int lineNumber) /*-{
+		return {
+	            type: tokentype,
+				value: value,
+	            start: startColumn,
+	            end: endColumn,
+	            line: lineNumber
+		       };
+	}-*/;
+
+	@SuppressWarnings("unchecked")
+	private JsArray<JavaScriptObject> makeJsArray(JsArray<JavaScriptObject>[] attrs) {
+		JsArray<JavaScriptObject> r = (JsArray<JavaScriptObject>) JavaScriptObject.createArray();
+		for(JavaScriptObject o : attrs)
+			r.push(o);
+		return r;
+	}
+
+	private void debugToken(final IToken x) {
+		System.out.println("line  = " + x.getLine());
+		System.out.println("start = " + x.getColumn());
+		System.out.println("end   = " + (x.getColumn() + x.getEndOffset() - x.getStartOffset() + 1));
+		System.out.println("kind  = " + x.getKind());
+		System.out.println("tag   = " + convertTokenType(x.getKind()));
+		System.out.println("tok   = \"" + x.toString() + "\"");
+	}
+
+	private String convertTokenType(int kind) {
+		switch(kind) {
+		case IToken.TK_LAYOUT: return "comment";
+		case IToken.TK_NUMBER: return "constant.numeric";
+		case IToken.TK_OPERATOR: return "keyword.operator";
+		case IToken.TK_KEYWORD: return "keyword";
+		case IToken.TK_STRING: return "string";
+		default: return "plain";
+		}
+	}
+
+	public IStrategoTerm parse(String text) {
+		try {
+			IStrategoTerm result;
+//			try {
+//				result = sglr.parseIncremental(text, null, null);
+//			} catch (IncrementalSGLRException e) {
+				result = (IStrategoTerm)sglr.parse(text, null, null);
+//			}
+			System.out.println(result);
+			return result;
+		} catch (final TokenExpectedException e) {
+			e.printStackTrace();
+		} catch (final BadTokenException e) {
+			e.printStackTrace();
+		} catch (final ParseException e) {
+			e.printStackTrace();
+		} catch (final SGLRException e) {
+			e.printStackTrace();
+		}
+		return null;
+	}
+}

From srabbelier at gmail.com  Fri Mar 18 15:47:53 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Fri, 18 Mar 2011 14:47:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22417 - ace-sglr
	spoofax/trunk/org.spoofax.ace
Message-ID: <20110318144753.8DA99108C065@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Fri Mar 18 14:47:53 2011
New Revision: 22417
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22417&sc=1

Log:
Move ace directory out of spoofax.

Added:
   ace-sglr/   (props changed)
      - copied from r22416, spoofax/trunk/org.spoofax.ace/
Deleted:
   spoofax/trunk/org.spoofax.ace/

From r.t.lindeman at student.tudelft.nl  Fri Mar 18 15:54:58 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Fri, 18 Mar 2011 14:54:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22418 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model
	org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/cor...
Message-ID: <20110318145458.4C19D108C045@mx3.tudelft.nl>

Author: RickyLindeman
Date: Fri Mar 18 14:54:57 2011
New Revision: 22418
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22418&sc=1

Log:
Changed testcase structure using IAction objects for more control of the DebugSessionManager

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/ActionFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/ChangeTermAction.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/IAction.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/ResumeAction.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/StepIntoAction.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/StepOverAction.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/StepReturnAction.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/TerminateAction.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoVariable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/setinput.str
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepInto.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepReturn.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepping.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl2.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/AbstractDebugCompileTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileDynamic.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileInvalidProgramTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileLocalVar.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileSetInput.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTestImports.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompilerTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoVariable.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoVariable.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoVariable.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -60,24 +60,35 @@
 		this.hasValueChanged = hasValueChanged;
 	}
 
+	/**
+	 * Changes the value of this variable.
+	 */
 	public void setValue(String expression) throws DebugException {
-		// TODO Auto-generated method stub
-		
+		System.out.println("setValue= " + expression);
+		StrategoDebugTarget target = (StrategoDebugTarget) this.getDebugTarget();
+		// TODO: implement proper variable change
+		// currently it just replaces the current term while infact this variable could be the child of some of value.
+		target.getDebugSessionManager().changeCurrentTerm(expression);
 	}
 
 	public void setValue(IValue value) throws DebugException {
 		// TODO Auto-generated method stub
-		
+		System.out.println("setValue = " + value);
 	}
 
+	/**
+	 * Support value modification
+	 */
 	public boolean supportsValueModification() {
-		// TODO Auto-generated method stub
-		return false;
+		return true;
 	}
 
+	/**
+	 * Returns true if the given expression can be parsed as an IStrategoTerm.
+	 */
 	public boolean verifyValue(String expression) throws DebugException {
-		// TODO Auto-generated method stub
-		return false;
+		StrategoDebugTarget target = (StrategoDebugTarget) this.getDebugTarget();
+		return target.getDebugSessionManager().verifyValue(expression);
 	}
 
 	public boolean verifyValue(IValue value) throws DebugException {

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -243,6 +243,17 @@
 		handler.setCurrentTerm(term);
 		// do not resume automagically!
 	}
+
+	/**
+	 * Check if the given expression is parsable.
+	 * @param expression
+	 * @return
+	 */
+	public boolean verifyValue(String expression)
+	{
+		ThreadEventHandler handler = eventThread.getMainThreadHandler();
+		return handler.verifyValue(expression);
+	}
 	
 	/**
 	 * Terminate the Stratego VM. Exits with exitcode 1, abnormal termination.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -4,6 +4,7 @@
 import java.util.List;
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.ParseError;
 import org.spoofax.terms.StringTermReader;
 import org.spoofax.terms.TermFactory;
 import org.strategoxt.debug.core.control.events.EventHandler;
@@ -156,6 +157,26 @@
 		return suspendThread;
 	}
 	
+	/**
+	 * Returns true if the value can be parsed to an IStrategoTerm.
+	 * @param expression
+	 * @return
+	 */
+	public boolean verifyValue(String expression)
+	{
+		// can the expressionbe converted to an IStrategoTerm
+		StringTermReader termReader = EventInfoStringExtractor.termReader;
+		IStrategoTerm term = null;
+		try {
+			term = termReader.parseFromString(expression);
+		}
+		catch(ParseError error)
+		{
+			// RuntimeException
+		}
+		return term != null;
+	}
+	
 	@SuppressWarnings("unchecked")
 	public void setCurrentTerm(String term)
 	{

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -39,5 +39,10 @@
 	{
 		return this.breakPoints;
 	}
+	
+	public void clear()
+	{
+		this.breakPoints.clear();
+	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -93,6 +93,14 @@
 		return this.eventSpecList.remove(bp);
 	}
 	
+	/**
+	 * Removes all breakpoints.
+	 */
+	public void clear()
+	{
+		this.eventSpecList.clear();
+	}
+	
 	// StackFrame in which the step was started
 	private StrategoStackFrame stepFrame = null;
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,2 +1,3 @@
 name	count	sum duration
-main	1	76
+main	1	120
+function-call	1	32

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,4 +1,4 @@
 name	count	sum duration
-s_step	3	0	10269000	249000	129000	291000	2344000
-s_enter	1	0	26747000	5564000	143000	240000	19034000
-s_exit	1	0	3824000	2233000	77000	245000	21000
+s_step	6	0	21591000	226000	218000	387000	2197000
+s_enter	2	0	31188000	5388000	172000	250000	20419000
+s_exit	2	0	8121000	12777000	108000	297000	32000

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,33 +1,33 @@
 item	subitem	count	duration
-PDE_s_enter	P-1	1	17000
-PDE_s_enter	P-3	1	8000
-PDE_s_enter	P-2	1	30000
-PDE_s_enter	P-SUPER	1	53000
-PDE_s_exit	P-1	1	17000
-PDE_s_exit	P-SUPER	1	22000
-SUPERPDE_s_enter	D-1	1	9000
-SUPERPDE_s_enter	D-2	1	14000
-SS_s_step	SUSPEND-3	3	36000
-SS_s_step	SUSPEND-1	3	210000
-SS_s_step	SUSPEND-2	3	22000
-SUPERPDE_s_step	D-1	3	11000
-SUPERPDE_s_step	D-2	3	13000
-SS_s_enter	SUSPEND-3	1	10000
-SS_s_enter	SUSPEND-1	1	179000
-SS_s_enter	SUSPEND-2	1	38000
-PDE_s_step	P-SUPER	3	58000
-SS_s_exit	SUSPEND-3	1	4000
-SS_s_exit	SUSPEND-1	1	225000
-SS_s_exit	SUSPEND-2	1	8000
-EXTRACT	BUILD_EVENTINFO	6	1337000
-EXTRACT	VALUE_TERM	6	1489000
-EXTRACT	VALUE_EVENTINFO	6	2465000
-EXTRACT	PARSE_TERM	6	258000
-EXTRACT	VALUE_VAR	6	5831000
-EXTRACT	PARSE_EVENTINFO	6	7812000
-EXTRACT	FIELD_EVENTINFO	6	10483000
-EXTRACT	BUILD_TERM	6	1307000
-EXTRACT	STACKFRAME	6	6651000
-EXTRACT	THISOBJECT	6	2156000
-SUPERPDE_s_exit	D-1	1	4000
-SUPERPDE_s_exit	D-2	1	4000
+PDE_s_enter	P-1	2	21000
+PDE_s_enter	P-3	2	12000
+PDE_s_enter	P-2	2	34000
+PDE_s_enter	P-SUPER	2	63000
+PDE_s_exit	P-1	2	24000
+PDE_s_exit	P-SUPER	2	36000
+SUPERPDE_s_enter	D-1	2	12000
+SUPERPDE_s_enter	D-2	2	15000
+SS_s_step	SUSPEND-3	6	53000
+SS_s_step	SUSPEND-1	6	257000
+SS_s_step	SUSPEND-2	6	41000
+SUPERPDE_s_step	D-1	6	22000
+SUPERPDE_s_step	D-2	6	30000
+SS_s_enter	SUSPEND-3	2	14000
+SS_s_enter	SUSPEND-1	2	181000
+SS_s_enter	SUSPEND-2	2	38000
+PDE_s_step	P-SUPER	6	108000
+SS_s_exit	SUSPEND-3	2	8000
+SS_s_exit	SUSPEND-1	2	265000
+SS_s_exit	SUSPEND-2	2	13000
+EXTRACT	BUILD_EVENTINFO	11	2486000
+EXTRACT	VALUE_TERM	11	2957000
+EXTRACT	VALUE_EVENTINFO	11	3739000
+EXTRACT	PARSE_TERM	11	432000
+EXTRACT	VALUE_VAR	11	10707000
+EXTRACT	PARSE_EVENTINFO	11	12166000
+EXTRACT	FIELD_EVENTINFO	11	11042000
+EXTRACT	BUILD_TERM	11	2359000
+EXTRACT	STACKFRAME	11	6526000
+EXTRACT	THISOBJECT	11	3825000
+SUPERPDE_s_exit	D-1	2	7000
+SUPERPDE_s_exit	D-2	2	8000

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/setinput.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/setinput.str	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/setinput.str	Fri Mar 18 14:54:57 2011	(r22418)
@@ -23,4 +23,6 @@
   	
 strategies
 	
-	main = debug(!"CURRENT: "); ?Program(progname, def-list); <debug(!"PROGNAME: ")> progname
\ No newline at end of file
+	main = debug(!"CURRENT: "); function-call; ?Program(progname, def-list); <debug(!"PROGNAME: ")> progname
+	
+	function-call = debug(!"function call")
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,10 +1,11 @@
 package org.strategoxt.debug.core.control;
 
-import static org.junit.Assert.*;
 import junit.framework.Assert;
 
 import org.StrategoFileManager;
 import org.junit.Test;
+import org.strategoxt.debug.core.control.actions.ActionFactory;
+import org.strategoxt.debug.core.control.actions.IAction;
 import org.strategoxt.debug.core.eventspec.EnterBreakPoint;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
@@ -20,7 +21,7 @@
 		// continue
 		
 		String projectName = "setinput";
-		String strategoFilename = "setinput.str";
+		//String strategoFilename = "setinput.str";
 		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
 		checkProjectExists(debugSessionSettings);
 		
@@ -54,18 +55,31 @@
 		
 		String term;
 		term = "[\"setinput\",\"-i\",\"/home/rlindeman/Documents/TU/strategoxt/spoofax-imp/source/org.strategoxt.imp.debug.stratego.test/src/stratego/setinput/run.input\"]";
-		vmStateTester.addStrategoState(VMStateTester.createState("setinput.str", "main", "s-enter", 26, 2, 26, 91, term)); // match-comments[localvar.str]@(47,4)47 39
+		vmStateTester.addStrategoState(VMStateTester.createState("setinput.str", "main", "s-enter", 26, 2, 26, 106, term)); // match-comments[localvar.str]@(47,4)47 39
 
-		// TODO: implement change current term action
-		String action = VMMonitorTestImpl2.CHANGE + "\"theNewCurrentTerm\"";
+		// change current term action
+		String actionName = ActionFactory.CHANGE + "\"theNewCurrentTerm\"";
+		vmMonitor.addAction(actionName);
+		// remove the breakpoint
+		IAction action = new IAction() {
+			
+			@Override
+			public void execute(DebugSessionManager dsm) {
+				dsm.getEventSpecManager().clear();
+			}
+			
+			@Override
+			public boolean fireNext() {
+				return true;
+			}
+		};
 		vmMonitor.addAction(action);
-		
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		vmMonitor.addAction(ActionFactory.STEP_OVER);
 		
 		term = "\"theNewCurrentTerm\"";
 		vmStateTester.addStrategoState(VMStateTester.createState("setinput.str", "main", "s-step", 26, 9, 26, 28, term)); // match-comments[localvar.str]@(47,4)47 39
 
-		vmMonitor.addAction(VMMonitorTestImpl2.RESUME);
+		vmMonitor.addAction(ActionFactory.RESUME);
 		
 		// run
 		vmStateTester.initialize();

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepInto.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepInto.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepInto.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -3,6 +3,7 @@
 import junit.framework.Assert;
 
 import org.StrategoFileManager;
+import org.strategoxt.debug.core.control.actions.ActionFactory;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventTable;
@@ -55,7 +56,7 @@
 		term = "Program(\"progname\",[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])])";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", "s-step", 47, 4, 47, 39, term)); // match-comments[localvar.str]@(47,4)47 39
 
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_INTO);
+		vmMonitor.addAction(ActionFactory.STEP_INTO);
 		// perform a STEP_INTO, will hit
 		// 52, 3
 		//find-functions:
@@ -117,11 +118,11 @@
 		term = "[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])]";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "find-functions", "s-step", 55, 4, 55, 54, term)); // find-functions[localvar.str]@(55,4,55,54)
 
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_INTO);
+		vmMonitor.addAction(ActionFactory.STEP_INTO);
 		// perform a STEP_INTO, but current statement cannot be stepped into. a STEP_OVER will occur
 		term = "[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])]";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "find-functions", "r-exit", 55, 19, 55, 41, term)); // Frame 3 @ find-functions[localvar.str]@(52,2,55,54)
-		vmMonitor.addAction(VMMonitorTestImpl2.RESUME);
+		vmMonitor.addAction(ActionFactory.RESUME);
 		
 		vmStateTester.initialize();
 		vmMonitor.setVMStateTester(vmStateTester);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepReturn.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepReturn.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepReturn.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -3,6 +3,7 @@
 import junit.framework.Assert;
 
 import org.StrategoFileManager;
+import org.strategoxt.debug.core.control.actions.ActionFactory;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventTable;
@@ -56,7 +57,7 @@
 		term = "Program(\"progname\",[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])])";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", "s-step", 47, 4, 47, 39, term)); // match-comments[localvar.str]@(47,4)47 39
 
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_RETURN);
+		vmMonitor.addAction(ActionFactory.STEP_RETURN);
 		// perform a STEP_RETURN, will hit s-exit of execute
 		// 37, 3
 		//  execute:
@@ -129,7 +130,7 @@
 		eventType = "s-step";
 		this.addBP(dsm, strategoFilename, lineNumber, startTokenPosition, eventType);
 
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_RETURN);
+		vmMonitor.addAction(ActionFactory.STEP_RETURN);
 		// perform a STEP_RETURN, will hit breakpoint on line 48
 		term = "[Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])]";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", eventType, 48, 6, 48, 40, term)); // match-comments[localvar.str]@(48,6) 48,40

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepping.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepping.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepping.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -3,6 +3,7 @@
 import junit.framework.Assert;
 
 import org.StrategoFileManager;
+import org.strategoxt.debug.core.control.actions.ActionFactory;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventTable;
@@ -55,7 +56,7 @@
 		term = "Program(\"progname\",[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])])";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", eventType, 47, 4, 47, 39, term)); // match-comments[localvar.str]@(47,4)47 39
 
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		vmMonitor.addAction(ActionFactory.STEP_OVER);
 		// perform a STEP_OVER, will hit
 		// 48, 8
 		// c* := <find-comments> definitions* // find comments
@@ -65,7 +66,7 @@
 		term = "[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])]";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", eventType, 47, 11, 47, 25, term)); // match-comments[localvar.str]@(48,6) 48,40
 		
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		vmMonitor.addAction(ActionFactory.STEP_OVER);
 		eventType = "s-step";
 		//this.addBP(dsm, strategoFilename, lineNumber, startTokenPosition, eventType);
 		term = "[Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])]";
@@ -123,7 +124,7 @@
 		term = "Program(\"progname\",[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])])";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", eventType, 47, 4, 47, 39, term)); // match-comments[localvar.str]@(47,4)47 39
 
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		vmMonitor.addAction(ActionFactory.STEP_OVER);
 		// perform a STEP_OVER, will hit
 		// 48, 8
 		// c* := <find-comments> definitions* // find comments
@@ -135,7 +136,7 @@
 		term = "[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])]";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", eventType, 47, 11, 47, 25, term)); // match-comments[localvar.str]@(48,6) 48,40
 		
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		vmMonitor.addAction(ActionFactory.STEP_OVER);
 		// perform a STEP_OVER, will hit
 		// 49, 8
 		// out := <match-f-and-c> (f*, c*)
@@ -146,11 +147,11 @@
 		term = "[Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])]";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", eventType, 48, 6, 48, 40, term)); // match-comments[localvar.str]@(49,6) 49 37
 	
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		vmMonitor.addAction(ActionFactory.STEP_OVER);
 		term = "[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])]";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", eventType, 48, 13, 48, 26, term)); // match-comments[localvar.str]@(49,6) 49 37
 		
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		vmMonitor.addAction(ActionFactory.STEP_OVER);
 		term = "[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\")]";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", eventType, 49, 6, 49, 37, term)); // match-comments[localvar.str]@(49,6) 49 37
 		
@@ -216,7 +217,7 @@
 		term = "Program(\"progname\",[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])])";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", "s-step", 47, 4, 47, 39, term));
 		
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		vmMonitor.addAction(ActionFactory.STEP_OVER);
 		// perform a STEP_OVER, should hit
 		// 48, 8
 		// c* := <find-comments> definitions* // find comments
@@ -225,7 +226,7 @@
 		term = "[Comment(\"fname\",\"laalalalalalalalalal\"),Comment(\"this\",\"this text\"),Comment(\"that\",\"that text\"),Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")]),Function(\"nocomment\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])]";
 		vmStateTester.addStrategoState(VMStateTester.createState("localvar.str", "match-comments", "s-step", 47, 11, 47, 25, term));
 		
-		vmMonitor.addAction(VMMonitorTestImpl2.STEP_OVER);
+		vmMonitor.addAction(ActionFactory.STEP_OVER);
 		// next s-step is (s-step(| "localvar.str", "match-comments", LocationInfo("48", "6", "48", "40"))
 		// for call ; c* := <s-step(| "localvar.str", "match-comments", LocationInfo("48", "13", "48", "26")); find-comments> definitions*
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl2.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl2.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/VMMonitorTestImpl2.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -7,25 +7,20 @@
 import junit.framework.Assert;
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.debug.core.control.actions.ActionFactory;
+import org.strategoxt.debug.core.control.actions.IAction;
 import org.strategoxt.debug.core.model.StrategoState;
 
 public class VMMonitorTestImpl2 implements VMMonitor {
 	
-	public final static String STEP_INTO = "STEP_INTO";
-	public final static String STEP_OVER = "STEP_OVER";
-	public final static String STEP_RETURN = "STEP_RETURN";
-	public final static String RESUME = "RESUME";
-	public final static String TERMINATE = "TERMINATE";
-	public final static String CHANGE = "CHANGE:";
-	
 	private DebugSessionManager debugSessionManager = null;
 	private VMStateTester vmStateTester = null;
 	
 	private AbstractDSMTest callback = null;
 	
-	// list contains String encoded actions: e.g. RESUME, STEP
+	// list contains IAction objects
 	// This action should be performed after a state change, if no actions are in the list left, do a RESUME
-	private List<String> afterStateChangeActions = null;
+	private List<IAction> afterStateChangeActions = null;
 	private int actionIndex = -1;
 	
 	public VMMonitorTestImpl2(AbstractDSMTest callback) {
@@ -104,7 +99,7 @@
 		else
 		{
 			// test failed, stop VM
-			performAction(TERMINATE);
+			this.debugSessionManager.terminateVM();
 		}
 	}
 
@@ -122,53 +117,24 @@
 		}
 	}
 	
-	public void addAction(String action)
+	public void addAction(String actionName)
 	{
-		if (this.afterStateChangeActions == null)
-		{
-			this.afterStateChangeActions = new ArrayList<String>();
-		}
-		this.afterStateChangeActions.add(action);
+		IAction action = ActionFactory.createAction(actionName);
+		getAfterStateChangeActions().add(action);
 	}
 	
-	/**
-	 * Performs the given action on the Stratego VM.
-	 * @param action
-	 */
-	private void performAction(String action)
+	public void addAction(IAction action)
 	{
-		if (RESUME.equals(action))
-		{
-			this.debugSessionManager.resumeVM();
-		}
-		else if (STEP_INTO.equals(action))
-		{
-			this.debugSessionManager.stepInto();
-		}
-		else if (STEP_OVER.equals(action))
-		{
-			this.debugSessionManager.stepOver();
-		}
-		else if (STEP_RETURN.equals(action))
-		{
-			this.debugSessionManager.stepReturn();
-		}
-		else if (TERMINATE.equals(action))
-		{
-			this.debugSessionManager.terminateVM();
-		}
-		else if (action.startsWith(CHANGE))
-		{
-			String term = action.substring(CHANGE.length());
-			this.debugSessionManager.changeCurrentTerm(term);
-			// also execute the next action
-			this.nextAction();
-		}
-		else
+		getAfterStateChangeActions().add(action);
+	}
+	
+	private List<IAction> getAfterStateChangeActions()
+	{
+		if (this.afterStateChangeActions == null)
 		{
-			// action unknown, just do a resume
-			this.debugSessionManager.resumeVM();
+			this.afterStateChangeActions = new ArrayList<IAction>();
 		}
+		return this.afterStateChangeActions;
 	}
 	
 	/**
@@ -179,8 +145,12 @@
 		actionIndex++;
 		if (afterStateChangeActions != null && actionIndex < afterStateChangeActions.size())
 		{
-			String action = afterStateChangeActions.get(actionIndex);
-			performAction(action);
+			IAction action = afterStateChangeActions.get(actionIndex);
+			action.execute(this.debugSessionManager);
+			if (action.fireNext())
+			{
+				this.nextAction();
+			}
 		}
 		else
 		{

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/ActionFactory.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/ActionFactory.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -0,0 +1,45 @@
+package org.strategoxt.debug.core.control.actions;
+
+public class ActionFactory {
+
+	
+	public final static String STEP_INTO = "STEP_INTO";
+	public final static String STEP_OVER = "STEP_OVER";
+	public final static String STEP_RETURN = "STEP_RETURN";
+	public final static String RESUME = "RESUME";
+	public final static String TERMINATE = "TERMINATE";
+	public final static String CHANGE = "CHANGE:";
+	
+	public static IAction createAction(String actionName)
+	{
+		if (RESUME.equals(actionName))
+		{
+			return new ResumeAction();
+		}
+		else if (STEP_INTO.equals(actionName))
+		{
+			return new StepIntoAction();
+		}
+		else if (STEP_OVER.equals(actionName))
+		{
+			return new StepOverAction();
+		}
+		else if (STEP_RETURN.equals(actionName))
+		{
+			return new StepReturnAction();
+		}
+		else if (TERMINATE.equals(actionName))
+		{
+			return new TerminateAction();
+		}
+		else if (actionName.startsWith(CHANGE))
+		{
+			String term = actionName.substring(CHANGE.length());
+			return new ChangeTermAction(term);
+		}
+		else
+		{
+			return null;
+		}
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/ChangeTermAction.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/ChangeTermAction.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -0,0 +1,24 @@
+package org.strategoxt.debug.core.control.actions;
+
+import org.strategoxt.debug.core.control.DebugSessionManager;
+
+public class ChangeTermAction extends IAction {
+
+	private String term = null;
+	
+	public ChangeTermAction(String term)
+	{
+		this.term = term;
+	}
+	
+	@Override
+	public void execute(DebugSessionManager dsm) {
+		dsm.changeCurrentTerm(term);
+	}
+	
+	@Override
+	public boolean fireNext() {
+		return true;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/IAction.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/IAction.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -0,0 +1,13 @@
+package org.strategoxt.debug.core.control.actions;
+
+import org.strategoxt.debug.core.control.DebugSessionManager;
+
+public abstract class IAction {
+
+	public abstract void execute(DebugSessionManager dsm);
+	
+	public boolean fireNext()
+	{
+		return false;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/ResumeAction.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/ResumeAction.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -0,0 +1,12 @@
+package org.strategoxt.debug.core.control.actions;
+
+import org.strategoxt.debug.core.control.DebugSessionManager;
+
+public class ResumeAction extends IAction {
+
+	@Override
+	public void execute(DebugSessionManager dsm) {
+		dsm.resumeVM();
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/StepIntoAction.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/StepIntoAction.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -0,0 +1,12 @@
+package org.strategoxt.debug.core.control.actions;
+
+import org.strategoxt.debug.core.control.DebugSessionManager;
+
+public class StepIntoAction extends IAction {
+
+	@Override
+	public void execute(DebugSessionManager dsm) {
+		dsm.stepInto();
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/StepOverAction.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/StepOverAction.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -0,0 +1,12 @@
+package org.strategoxt.debug.core.control.actions;
+
+import org.strategoxt.debug.core.control.DebugSessionManager;
+
+public class StepOverAction extends IAction {
+
+	@Override
+	public void execute(DebugSessionManager dsm) {
+		dsm.stepOver();
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/StepReturnAction.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/StepReturnAction.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -0,0 +1,12 @@
+package org.strategoxt.debug.core.control.actions;
+
+import org.strategoxt.debug.core.control.DebugSessionManager;
+
+public class StepReturnAction extends IAction {
+
+	@Override
+	public void execute(DebugSessionManager dsm) {
+		dsm.stepReturn();
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/TerminateAction.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/actions/TerminateAction.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -0,0 +1,12 @@
+package org.strategoxt.debug.core.control.actions;
+
+import org.strategoxt.debug.core.control.DebugSessionManager;
+
+public class TerminateAction extends IAction {
+
+	@Override
+	public void execute(DebugSessionManager dsm) {
+		dsm.terminateVM();
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/AbstractDebugCompileTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/AbstractDebugCompileTest.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/AbstractDebugCompileTest.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -3,13 +3,19 @@
 import static org.junit.Assert.fail;
 
 import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.StrategoFileManager;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
 import org.junit.Assert;
+import org.junit.Before;
 import org.other.FileTest;
+import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.FileUtil;
 
 public class AbstractDebugCompileTest {
@@ -90,4 +96,106 @@
 		}
 		return strFiles;
 	}
+	
+	protected String baseInputPathString = null;
+	protected String strategoFilePathString = null;
+	protected String projectName = null;
+	protected String mainClass = null;
+	protected boolean checkOutput = true;
+	protected boolean runJava = true;
+	protected boolean debugCompile = true;
+	protected String[] generateStrategoExtraArguments = null;
+	protected boolean shouldFail = false;
+	
+	/**
+	 * DebugSessionSettings will be created by the test
+	 */
+	private DebugSessionSettings debugSessionSettings = null;
+	
+	@Before
+	public void setUp() {
+		// reset all values
+		baseInputPathString = null;
+		strategoFilePathString = null;
+		projectName = null;
+		mainClass = null;
+		checkOutput = true;
+		runJava = true;
+		debugCompile = true;
+		generateStrategoExtraArguments = null;
+		debugSessionSettings = null;
+		shouldFail = false;
+	}
+	
+	protected void compileHelper()
+	{
+		IPath strategoFilePath = new Path(this.strategoFilePathString);
+		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(this.baseInputPathString);
+
+		debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
+		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
+		debugSessionSettings.setStrategoFilePath(strategoFilePath);
+		
+		if (generateStrategoExtraArguments != null)
+		{
+			debugSessionSettings.setGenerateStrategoExtraArguments(generateStrategoExtraArguments);
+		}
+		
+		boolean compileSucces = doCompile();
+		
+		if (checkOutput)
+		{
+			checkOutput(debugSessionSettings);
+		}
+
+		// run .class
+		if (runJava && compileSucces)
+		{
+			String input = StrategoFileManager.BASE + "/" + this.baseInputPathString + "/run.input";
+			String argsForMainClass = "-i " + input;
+			//String mainClass = "dynamic.dynamic"; // TODO: java files cannot contain "-", the name may be converted
+			String mainArgs = mainClass + " " + argsForMainClass;
+			
+			String cp = debugSessionSettings.getRunClasspath();
+			String classpath = cp;
+			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
+		}
+	}
+	
+	protected boolean doCompile()
+	{
+		DebugCompiler debugCompiler = new DebugCompiler();
+		// mkdir localvar/stratego in workingdir
+		// mkdir localvar/java
+		// mkdir localvar/class
+		IPath binBase = null;
+		boolean compileSucces = false;
+		try {
+			if (debugCompile)
+			{
+				binBase = debugCompiler.debugCompile(debugSessionSettings);
+			}
+			else
+			{
+				binBase = debugCompiler.runCompile(debugSessionSettings);
+			}
+			compileSucces = true;
+		} catch (IOException e) {
+			e.printStackTrace();
+		} catch (Exception e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		if (shouldFail)
+		{
+			// compiling should fail!
+			Assert.assertFalse("Debug compiling should have failed!", compileSucces);
+		} else {
+			Assert.assertTrue("Debug compiling failed!", compileSucces);
+			Assert.assertNotNull("Bin output directory should be set!", binBase);
+		}
+		
+		// debugCompiler.getDebugCompileProgress().printStats();
+		return compileSucces;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileDynamic.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileDynamic.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileDynamic.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,15 +1,6 @@
 package org.strategoxt.debug.core.util.dctests;
 
-import java.io.IOException;
-
-import org.StrategoFileManager;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.Path;
-import org.junit.Assert;
 import org.junit.Test;
-import org.strategoxt.debug.core.util.DebugCompiler;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 
 public class DebugCompileDynamic extends AbstractDebugCompileTest {
 
@@ -21,47 +12,14 @@
 	
 	@Test
 	public void testDebugCompileDynamic() {
-		String baseInputPath = "src/stratego/dynamic";
-		IPath strategoFilePath = new Path("localvar.str");
-		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(baseInputPath);
-
-		String projectName = "dynamic";
-		DebugCompiler debugCompiler = new DebugCompiler();
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
-		debugSessionSettings.setStrategoFilePath(strategoFilePath);
-		// mkdir localvar/stratego in workingdir
-		// mkdir localvar/java
-		// mkdir localvar/class
-		IPath binBase = null;
-		boolean compileSucces = false;
-		try {
-			binBase = debugCompiler.debugCompile(debugSessionSettings);
-			compileSucces = true;
-		} catch (IOException e) {
-			e.printStackTrace();
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		Assert.assertTrue("Debug compiling failed!", compileSucces);
-		Assert.assertNotNull("Bin output directory should be set!", binBase);
-		
-		checkOutput(debugSessionSettings);
+		this.baseInputPathString = "src/stratego/dynamic"; // folder
+		this.strategoFilePathString = "localvar.str"; // relative to folder
+		this.projectName = "dynamic";
+		this.mainClass = "dynamic.dynamic";
+		checkOutput = true;
+		runJava = false;
+		compileHelper();
 		
-		boolean runjava = false;
-		// run .class
-		if (runjava && compileSucces)
-		{
-			String input = StrategoFileManager.BASE + "/src/stratego/dynamic/run.input";
-			String argsForMainClass = "-i " + input;
-			String mainClass = "dynamic.dynamic";
-			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
-		}
 	}
 	
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileInvalidProgramTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileInvalidProgramTest.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileInvalidProgramTest.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,16 +1,6 @@
 package org.strategoxt.debug.core.util.dctests;
 
-import java.io.IOException;
-
-import org.StrategoFileManager;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.Path;
-import org.junit.Assert;
 import org.junit.Test;
-import org.strategoxt.debug.core.util.DebugCompileException;
-import org.strategoxt.debug.core.util.DebugCompiler;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 
 public class DebugCompileInvalidProgramTest extends AbstractDebugCompileTest {
 
@@ -22,52 +12,14 @@
 	@Test
 	public void testCompileInvalidProgram()
 	{
-		String baseInputPath = "src/stratego/invalid-program";
-		IPath strategoFilePath = new Path("program.str");
-		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(baseInputPath);
-		
-		String projectName = "invalidprogram1";
-		DebugCompiler debugCompiler = new DebugCompiler();
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
-		debugSessionSettings.setStrategoFilePath(strategoFilePath);
-		// mkdir localvar/stratego in workingdir
-		// mkdir localvar/java
-		// mkdir localvar/class
-		IPath binBase = null;
-		boolean compileSucces = false;
-		try {
-			binBase = debugCompiler.debugCompile(debugSessionSettings);
-			compileSucces = true;
-			Assert.fail("Debug compiling the invalid program should fail!");
-		} catch (IOException e) {
-			Assert.fail("Should throw a DebugCompileException!");
-			e.printStackTrace();
-		} catch (DebugCompileException e)
-		{
-			e.printStackTrace();
-		} catch (Exception e) {
-			Assert.fail("Should throw a DebugCompileException!");
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		Assert.assertNull(binBase);
-		
-		checkOutput(debugSessionSettings);
-		
-		boolean runjava = false;
-		// run .class
-		if (runjava && compileSucces)
-		{
-			String input = StrategoFileManager.BASE + "/src/stratego/invalid-program/run.input";
-			String argsForMainClass = "-i " + input;
-			String mainClass = "invalidprogram1.invalidprogram1";
-			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
-		}
+		this.baseInputPathString = "src/stratego/invalid-program"; // folder
+		this.strategoFilePathString = "program.str"; // relative to folder
+		this.projectName = "invalidprogram1";
+		this.mainClass = "invalidprogram1.invalidprogram1";
+		checkOutput = true;
+		runJava = false;
+		shouldFail = true;
+		compileHelper();
 		
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileLocalVar.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileLocalVar.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileLocalVar.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,15 +1,6 @@
 package org.strategoxt.debug.core.util.dctests;
 
-import java.io.IOException;
-
-import org.StrategoFileManager;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.Path;
-import org.junit.Assert;
 import org.junit.Test;
-import org.strategoxt.debug.core.util.DebugCompiler;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 
 public class DebugCompileLocalVar extends AbstractDebugCompileTest {
 
@@ -24,47 +15,13 @@
 	
 	@Test
 	public void testDebugCompileLocalVar() {
-		String baseInputPath = "src/stratego/localvar";
-		IPath strategoFilePath = new Path("localvar.str");
-		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(baseInputPath);
-		String projectName = "localvar";
-		DebugCompiler debugCompiler = new DebugCompiler();
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
-		debugSessionSettings.setStrategoFilePath(strategoFilePath);
-		// mkdir localvar/stratego in workingdir
-		// mkdir localvar/java
-		// mkdir localvar/class
-		IPath binBase = null;
-		boolean compileSucces = false;
-		try {
-			binBase = debugCompiler.debugCompile(debugSessionSettings);
-			compileSucces = true;
-		} catch (IOException e) {
-			e.printStackTrace();
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		Assert.assertTrue("Debug compiling failed!", compileSucces);
-		Assert.assertNotNull("Bin output directory should be set!", binBase);
-		
-		debugCompiler.getDebugCompileProgress().printStats();
-		checkOutput(debugSessionSettings);
-		
-		boolean runjava = false;
-		// run .class
-		if (runjava && compileSucces)
-		{
-			String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
-			String argsForMainClass = "-i " + input;
-			String mainClass = "localvar.localvar";
-			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
-		}
+		this.baseInputPathString = "src/stratego/localvar"; // folder
+		this.strategoFilePathString = "localvar.str"; // relative to folder
+		this.projectName = "localvar";
+		this.mainClass = "localvar.localvar";
+		checkOutput = true;
+		runJava = false;
+		compileHelper();
 	}
 	
 	
@@ -73,98 +30,27 @@
 	 */
 	@Test
 	public void testDebugCompileLocalVarOutputRtree() {
-		String baseInputPath = "src/stratego/localvar";
-		IPath strategoFilePath = new Path("localvar.str");
-		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(baseInputPath);
-
-		String projectName = "localvar_rtree";
-		DebugCompiler debugCompiler = new DebugCompiler();
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
-		debugSessionSettings.setStrategoFilePath(strategoFilePath);
-		String[] generateStrategoExtraArguments = new String[] {"--output-rtree"};
-		debugSessionSettings.setGenerateStrategoExtraArguments(generateStrategoExtraArguments );
-		// mkdir localvar/stratego in workingdir
-		// mkdir localvar/java
-		// mkdir localvar/class
-		IPath binBase = null;
-		boolean compileSucces = false;
-		try {
-			// strj -i /home/rlindeman/Documents/TU/strategoxt/spoofax-imp/source/org.strategoxt.imp.debug.stratego.test/working/localvar_rtree/stratego/localvar.rtree -o /home/rlindeman/Documents/TU/strategoxt/spoofax-imp/source/org.strategoxt.imp.debug.stratego.test/working/localvar_rtree/java/localvar_rtree/localvar_rtree.java -I /home/rlindeman/Documents/TU/strategoxt/spoofax-imp/source/org.strategoxt.imp.debug.stratego.test/../org.strategoxt.imp.debug.stratego.core/lib -p localvar_rtree --clean -la org.strategoxt.imp.debug.stratego.runtime.trans
-			binBase = debugCompiler.debugCompile(debugSessionSettings);
-			compileSucces = true;
-		} catch (IOException e) {
-			e.printStackTrace();
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		Assert.assertTrue("Debug compiling failed!", compileSucces);
-		Assert.assertNotNull("Bin output directory should be set!", binBase);
-		
-		debugCompiler.getDebugCompileProgress().printStats();
-		checkOutput(debugSessionSettings);
-		
-		boolean runjava = false;
-		// run .class
-		if (runjava && compileSucces)
-		{
-			String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
-			String argsForMainClass = "-i " + input;
-			String mainClass = "localvar_rtree.localvar_rtree";
-			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
-		}
+		this.baseInputPathString = "src/stratego/localvar"; // folder
+		this.strategoFilePathString = "localvar.str"; // relative to folder
+		this.projectName = "localvar_rtree";
+		this.mainClass = "localvar_rtree.localvar_rtree";
+		checkOutput = true;
+		runJava = false;
+		this.generateStrategoExtraArguments = new String[] {"--output-rtree"};
+		compileHelper();
 	}
 	
 	
 	@Test
 	public void testRunCompileLocalVar() {
-		String baseInputPath = "src/stratego/localvar";
-		IPath strategoFilePath = new Path("localvar.str");
-		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(baseInputPath);
-
-		String projectName = "localvar_run";
-		DebugCompiler debugCompiler = new DebugCompiler();
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
-		debugSessionSettings.setStrategoFilePath(strategoFilePath);
-		// mkdir localvar/stratego in workingdir
-		// mkdir localvar/java
-		// mkdir localvar/class
-		IPath binBase = null;
-		boolean compileSucces = false;
-		try {
-			binBase = debugCompiler.runCompile(debugSessionSettings);
-			compileSucces = true;
-		} catch (IOException e) {
-			e.printStackTrace();
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		Assert.assertTrue("Debug compiling failed!", compileSucces);
-		Assert.assertNotNull("Bin output directory should be set!", binBase);
-		
-		debugCompiler.getDebugCompileProgress().printStats();
-		//checkOutput(debugSessionSettings);
-		
-		boolean runjava = false;
-		// run .class
-		if (runjava && compileSucces)
-		{
-			String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
-			String argsForMainClass = "-i " + input;
-			String mainClass = "localvar_run.localvar_run";
-			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
-		}
+		this.baseInputPathString = "src/stratego/localvar"; // folder
+		this.strategoFilePathString = "localvar.str"; // relative to folder
+		this.projectName = "localvar_run";
+		this.mainClass = "localvar_run.localvar_run";
+		checkOutput = false;
+		runJava = false;
+		debugCompile = false;
+		compileHelper();
 	}
 	
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileSetInput.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileSetInput.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileSetInput.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,30 +1,13 @@
 package org.strategoxt.debug.core.util.dctests;
 
-import java.io.IOException;
-
-import org.StrategoFileManager;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.Path;
-import org.junit.Assert;
 import org.junit.Test;
-import org.strategoxt.debug.core.util.DebugCompiler;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 
 public class DebugCompileSetInput extends AbstractDebugCompileTest {
 
 	
-	private String baseInputPathString = null;
-	private String strategoFilePathString = null;
-	private String projectName = null;
-	private String mainClass = null;
-	private boolean checkOutput = true;
-	private boolean runJava = true;
-	
 	@Test
 	public void testDebugCompileSetInput() throws Exception {
 		// compile the setinput.str
-		
 		this.baseInputPathString = "src/stratego/setinput"; // folder
 		this.strategoFilePathString = "setinput.str"; // relative to folder
 		this.projectName = "setinput";
@@ -33,60 +16,7 @@
 		runJava = false;
 		compileHelper();
 	}
-	
-	private DebugSessionSettings debugSessionSettings = null;
-	
-	private void compileHelper()
-	{
-		IPath strategoFilePath = new Path(this.strategoFilePathString);
-		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(this.baseInputPathString);
 
-		debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
-		debugSessionSettings.setStrategoFilePath(strategoFilePath);
-		
-		boolean compileSucces = doCompile();
-		
-		if (checkOutput)
-		{
-			checkOutput(debugSessionSettings);
-		}
-
-		// run .class
-		if (runJava && compileSucces)
-		{
-			String input = StrategoFileManager.BASE + "/" + this.baseInputPathString + "/run.input";
-			String argsForMainClass = "-i " + input;
-			//String mainClass = "dynamic.dynamic"; // TODO: java files cannot contain "-", the name may be converted
-			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
-		}
-	}
-	
-	private boolean doCompile()
-	{
-		DebugCompiler debugCompiler = new DebugCompiler();
-		// mkdir localvar/stratego in workingdir
-		// mkdir localvar/java
-		// mkdir localvar/class
-		IPath binBase = null;
-		boolean compileSucces = false;
-		try {
-			binBase = debugCompiler.debugCompile(debugSessionSettings);
-			compileSucces = true;
-		} catch (IOException e) {
-			e.printStackTrace();
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		Assert.assertTrue("Debug compiling failed!", compileSucces);
-		Assert.assertNotNull("Bin output directory should be set!", binBase);
-		return compileSucces;
-	}
 	
 }
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTestImports.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTestImports.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTestImports.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,15 +1,6 @@
 package org.strategoxt.debug.core.util.dctests;
 
-import java.io.IOException;
-
-import org.StrategoFileManager;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.Path;
-import org.junit.Assert;
 import org.junit.Test;
-import org.strategoxt.debug.core.util.DebugCompiler;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 
 public class DebugCompileTestImports extends AbstractDebugCompileTest {
 
@@ -21,46 +12,12 @@
 	@Test
 	public void testDebugCompileTestImports()
 	{
-		String baseInputPath = "src/stratego/testimports";
-		IPath strategoFilePath = new Path("localvar.str");
-		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(baseInputPath);
-
-		String projectName = "testimports";
-		DebugCompiler debugCompiler = new DebugCompiler();
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
-		debugSessionSettings.setStrategoFilePath(strategoFilePath);
-		// mkdir localvar/stratego in workingdir
-		// mkdir localvar/java
-		// mkdir localvar/class
-		IPath binBase = null;
-		boolean compileSucces = false;
-		try {
-			binBase = debugCompiler.debugCompile(debugSessionSettings);
-			compileSucces = true;
-		} catch (IOException e) {
-			e.printStackTrace();
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		Assert.assertTrue("Debug compiling failed!", compileSucces);
-		Assert.assertNotNull("Bin output directory should be set!", binBase);
-		
-		checkOutput(debugSessionSettings);
-		
-		boolean runjava = false;
-		// run .class
-		if (runjava && compileSucces)
-		{
-			String input = StrategoFileManager.BASE + "/src/stratego/testimports/run.input";
-			String argsForMainClass = "-i " + input;
-			String mainClass = "testimports.testimports";
-			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
-		}
+		this.baseInputPathString = "src/stratego/testimports"; // folder
+		this.strategoFilePathString = "localvar.str"; // relative to folder
+		this.projectName = "testimports";
+		this.mainClass = "testimports.testimports";
+		checkOutput = true;
+		runJava = false;
+		compileHelper();
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -149,7 +149,8 @@
 			binBase = debugCompiler.debugCompile(debugSessionSettings);
 			compileSucces = true;
 		} catch (IOException e) {
-			e.printStackTrace();
+			//e.printStackTrace();
+			Assert.fail(e.getMessage());
 		} catch(StackOverflowError e) {
 			// change jvm arguments
 			/*
@@ -159,9 +160,10 @@
 			-XX:MaxPermSize=256m
 			-server
 			*/
+			Assert.fail(e.getMessage());
 		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			//e.printStackTrace();
+			Assert.fail(e.getMessage());
 		}
 		Assert.assertTrue("Debug compiling failed!", compileSucces);
 		Assert.assertNotNull("Bin output directory should be set!", binBase);
@@ -235,11 +237,15 @@
 		try {
 			binBase = debugCompiler.runCompile(debugSessionSettings);
 			compileSucces = true;
+		} catch (StackOverflowError e)
+		{
+			Assert.fail(e.getMessage());
 		} catch (IOException e) {
-			e.printStackTrace();
+			//e.printStackTrace();
+			Assert.fail(e.getMessage());
 		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			//e.printStackTrace();
+			Assert.fail(e.getMessage());
 		}
 		Assert.assertTrue("Debug compiling failed!", compileSucces);
 		Assert.assertNotNull("Bin output directory should be set!", binBase);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -8,6 +8,7 @@
 import org.eclipse.core.runtime.Path;
 import org.junit.Assert;
 import org.junit.Test;
+import org.strategoxt.debug.core.util.DebugCompileException;
 import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
@@ -59,20 +60,27 @@
 		// mkdir localvar/stratego in workingdir
 		// mkdir localvar/java
 		// mkdir localvar/class
-		IPath binBase = null;
+		//IPath binBase = null;
 		boolean compileSucces = false;
+		boolean failed = false;
 		try {
-			binBase = debugCompiler.runCompile(debugSessionSettings);
+			debugCompiler.runCompile(debugSessionSettings);
 			compileSucces = true;
+		} catch(DebugCompileException e)
+		{
+			failed = true;
 		} catch (IOException e) {
-			e.printStackTrace();
+			//e.printStackTrace();
+			Assert.fail(e.getMessage());
 		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			//e.printStackTrace();
+			Assert.fail(e.getMessage());
 		}
+		Assert.assertTrue("Should have thrown DebugCompileException!", failed);
+		/*
 		Assert.assertTrue("Debug compiling failed!", compileSucces);
 		Assert.assertNotNull("Bin output directory should be set!", binBase);
-		
+		*/
 		// should have no output
 		//checkOutput(debugSessionSettings);
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompilerTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompilerTest.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompilerTest.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -1,15 +1,6 @@
 package org.strategoxt.debug.core.util.dctests;
 
-import java.io.IOException;
-
-import org.StrategoFileManager;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.Path;
-import org.junit.Assert;
 import org.junit.Test;
-import org.strategoxt.debug.core.util.DebugCompiler;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 
 public class DebugCompilerTest extends AbstractDebugCompileTest {
 	
@@ -21,49 +12,13 @@
 
 	@Test
 	public void testDebugCompileLocalVarDebug() {
-		String baseInputPath = "src/stratego/localvardebug";
-		IPath strategoFilePath = new Path("localvar.str");
-		IPath strategoSourceBasedir = StrategoFileManager.BASE.append(baseInputPath);
-
-		String projectName = "localvardebug";
-
-
-		DebugCompiler debugCompiler = new DebugCompiler();
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
-		debugSessionSettings.setStrategoFilePath(strategoFilePath);
-		// mkdir localvar/stratego in workingdir
-		// mkdir localvar/java
-		// mkdir localvar/class
-		IPath binBase = null;
-		boolean compileSucces = false;
-		try {
-			binBase = debugCompiler.debugCompile(debugSessionSettings);
-			compileSucces = true;
-		} catch (IOException e) {
-			e.printStackTrace();
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		Assert.assertTrue("Debug compiling failed!", compileSucces);
-		Assert.assertNotNull("Bin output directory should be set!", binBase);
-		
-		checkOutput(debugSessionSettings);
-		
-		boolean runjava = false;
-		// run .class
-		if (runjava && compileSucces)
-		{
-			String input = StrategoFileManager.BASE + "/src/stratego/localvardebug/run.input";
-			String argsForMainClass = "-i " + input;
-			String mainClass = "localvardebug.localvardebug";
-			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
-		}
+		this.baseInputPathString = "src/stratego/localvardebug"; // folder
+		this.strategoFilePathString = "localvar.str"; // relative to folder
+		this.projectName = "localvardebug";
+		this.mainClass = "localvardebug.localvardebug";
+		checkOutput = true;
+		runJava = false;
+		compileHelper();
 	}
 
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java	Fri Mar 18 14:47:53 2011	(r22417)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java	Fri Mar 18 14:54:57 2011	(r22418)
@@ -20,7 +20,7 @@
 		//m4();
 	}
 
-	private static void m1() {
+	public static void m1() {
 		String baseInputPath = "src/stratego/localvardebug";
 		String strategoFilePath = "localvar.str";
 		String strategoSourceBasedir = StrategoFileManager.BASE + "/" + baseInputPath + "/" + strategoFilePath;
@@ -47,7 +47,7 @@
 	}
 
 
-	private static void m1b() {
+	public static void m1b() {
 		String baseInputPath = "src/stratego/localvardebug";
 		String strategoFilePath = "localvar.str";
 		String strategoSourceBasedir = StrategoFileManager.BASE + "/" + baseInputPath + "/" + strategoFilePath;
@@ -74,7 +74,7 @@
 		}
 	}
 	
-	private static void m2() {
+	public static void m2() {
 		String baseInputPath = "src/stratego/testimports";
 		String strategoFilePath = "localvar.str";
 		String strategoSourceBasedir = StrategoFileManager.BASE + "/" + baseInputPath + "/" + strategoFilePath;
@@ -97,7 +97,7 @@
 		}
 	}
 	
-	private static void m3() {
+	public static void m3() {
 		// output rtree files
 		// TODO: check for rtree output
 		String baseInputPath = "src/stratego/localvardebug";
@@ -126,7 +126,7 @@
 		}
 	}
 	
-	private static void m4() {
+	public static void m4() {
 		// TODO Auto-generated method stub
 		/*
 		String baseInputPath = "src/stratego/localvardebug";

From r.t.lindeman at student.tudelft.nl  Tue Mar 22 10:33:17 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Tue, 22 Mar 2011 09:33:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22419 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.stratego.runtime
	org.strategoxt.imp.debug.stratego.runtime/META-INF
	org.strategoxt.imp.debug.stratego.runtime/editor...
Message-ID: <20110322093317.8E2F22B8026@mx2.tudelft.nl>

Author: RickyLindeman
Date: Tue Mar 22 09:33:17 2011
New Revision: 22419
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22419&sc=1

Log:
Remove org.strategoxt.imp.runtime dependency from debug.stratego.transformer and debug.stratego.runtime, the parser-extension is not needed.

Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/plugin.xml
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibValidator.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestValidator.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Tue Mar 22 09:33:17 2011	(r22419)
@@ -6,16 +6,15 @@
 Bundle-Activator: org.strategoxt.imp.debug.stratego.runtime.Activator
 Import-Package: org.osgi.framework;version="1.3.0"
 Require-Bundle: org.eclipse.core.runtime,
-  org.eclipse.core.resources,
-  org.eclipse.imp.runtime,
-  org.eclipse.ui,
-  lpg.runtime,
-  org.eclipse.jface.text,
-  org.eclipse.ui.editors,
-  org.eclipse.ui.workbench.texteditor,
-  org.strategoxt.imp.runtime,
-  org.spoofax.jsglr,
-  org.strategoxt.strj
+ org.eclipse.core.resources,
+ org.eclipse.imp.runtime,
+ org.eclipse.ui,
+ lpg.runtime,
+ org.eclipse.jface.text,
+ org.eclipse.ui.editors,
+ org.eclipse.ui.workbench.texteditor,
+ org.spoofax.jsglr,
+ org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Export-Package: org.strategoxt.imp.debug.stratego.runtime;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.generated.custom.xml	Tue Mar 22 09:33:17 2011	(r22419)
@@ -42,7 +42,8 @@
 	<mkdir dir="${lib}" />
 	<mkdir dir="${syntax}" />
 
-	<target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone" />
+	<!-- <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone" /> -->
+	<target name="sdf2imp" /> <!-- skip sdf2imp generation -->
 
 	<target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
 		<java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/build.properties	Tue Mar 22 09:33:17 2011	(r22419)
@@ -1,7 +1,6 @@
 source.. = editor/java/
 output.. = bin/
 bin.includes = META-INF/,\
-               plugin.xml,\
                include/,\
                bin/,\
                lib/,\

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibParseControllerGenerated.java	Tue Mar 22 09:33:17 2011	(r22419)
@@ -1,108 +1,7 @@
 package org.strategoxt.imp.debug.stratego.runtime;
 
-import java.io.InputStream;
-import java.io.IOException;
-import java.io.File;
-import java.io.FileInputStream;
-import org.eclipse.core.runtime.Path;
-import org.eclipse.imp.parser.IParseController;
-import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
-import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
-import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
 
-public class StrjdbgruntimelibParseControllerGenerated extends DynamicParseController 
+public class StrjdbgruntimelibParseControllerGenerated
 { 
-  public static final String LANGUAGE = new String("Strj-dbg-runtime-lib");
 
-  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
-
-  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
-
-  private static volatile Descriptor descriptor;
-
-  private static Throwable notLoadingCause;
-
-  public static synchronized Descriptor getDescriptor()
-  { 
-    if(notLoadingCause != null)
-      throw new RuntimeException(notLoadingCause);
-    if(descriptor == null)
-      createDescriptor();
-    return descriptor;
-  }
-
-  protected static synchronized void setDescriptor(Descriptor descriptor)
-  { 
-    StrjdbgruntimelibParseControllerGenerated.descriptor = descriptor;
-  }
-
-  protected static void createDescriptor()
-  { 
-    try
-    { 
-      InputStream descriptorStream = StrjdbgruntimelibParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
-      InputStream table = StrjdbgruntimelibParseControllerGenerated.class.getResourceAsStream(TABLE);
-      boolean filesystem = false;
-      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
-      { 
-        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
-        filesystem = true;
-      }
-      if(table == null && new File("./" + TABLE).exists())
-      { 
-        table = new FileInputStream("./" + TABLE);
-        filesystem = true;
-      }
-      if(descriptorStream == null)
-        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
-      if(table == null)
-        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
-      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
-      descriptor.setAttachmentProvider(StrjdbgruntimelibParseControllerGenerated.class);
-    }
-    catch(BadDescriptorException exc)
-    { 
-      notLoadingCause = exc;
-      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
-      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
-    }
-    catch(IOException exc)
-    { 
-      notLoadingCause = exc;
-      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
-      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
-    }
-  }
-
-  private static String getPluginLocation()
-  { 
-    return StrjdbgruntimelibParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
-  }
-
-  @Override public IParseController getWrapped()
-  { 
-    if(!isInitialized())
-    { 
-      if(notLoadingCause != null)
-        throw new RuntimeException(notLoadingCause);
-      try
-      { 
-        initialize(this, getDescriptor().getLanguage());
-      }
-      catch(BadDescriptorException exc)
-      { 
-        notLoadingCause = exc;
-        throw new RuntimeException(exc);
-      }
-    }
-    return super.getWrapped();
-  }
-
-  @Override protected void setNotLoadingCause(Throwable value)
-  { 
-    notLoadingCause = value;
-    super.setNotLoadingCause(value);
-  }
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibValidator.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibValidator.java	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/StrjdbgruntimelibValidator.java	Tue Mar 22 09:33:17 2011	(r22419)
@@ -1,12 +1,6 @@
 package org.strategoxt.imp.debug.stratego.runtime;
 
-import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
-import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
-
-public class StrjdbgruntimelibValidator extends MetaFileLanguageValidator 
+public class StrjdbgruntimelibValidator 
 { 
-  @Override public Descriptor getDescriptor()
-  { 
-    return StrjdbgruntimelibParseController.getDescriptor();
-  }
+
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Tue Mar 22 09:33:17 2011	(r22419)
@@ -13,7 +13,6 @@
  org.eclipse.jface.text,
  org.eclipse.ui.editors,
  org.eclipse.ui.workbench.texteditor,
- org.strategoxt.imp.runtime,
  org.spoofax.jsglr,
  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.generated.custom.xml	Tue Mar 22 09:33:17 2011	(r22419)
@@ -42,7 +42,8 @@
 	<mkdir dir="${lib}" />
 	<mkdir dir="${syntax}" />
 
-	<target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone" />
+	<!-- <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone" /> -->
+	<target name="sdf2imp" /> <!-- skip sdf2imp generation -->
 
 	<target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
 		<java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/build.properties	Tue Mar 22 09:33:17 2011	(r22419)
@@ -1,7 +1,6 @@
 source.. = editor/java/
 output.. = bin/
 bin.includes = META-INF/,\
-               plugin.xml,\
                include/,\
                bin/,\
                lib/,\

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestParseControllerGenerated.java	Tue Mar 22 09:33:17 2011	(r22419)
@@ -1,108 +1,7 @@
 package org.strategoxt.imp.debug.stratego.transformer;
 
-import java.io.InputStream;
-import java.io.IOException;
-import java.io.File;
-import java.io.FileInputStream;
-import org.eclipse.core.runtime.Path;
-import org.eclipse.imp.parser.IParseController;
-import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
-import org.strategoxt.imp.runtime.dynamicloading.DescriptorFactory;
-import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
 
-public class TestParseControllerGenerated extends DynamicParseController 
+public class TestParseControllerGenerated 
 { 
-  public static final String LANGUAGE = new String("Test");
 
-  private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
-
-  private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
-
-  private static volatile Descriptor descriptor;
-
-  private static Throwable notLoadingCause;
-
-  public static synchronized Descriptor getDescriptor()
-  { 
-    if(notLoadingCause != null)
-      throw new RuntimeException(notLoadingCause);
-    if(descriptor == null)
-      createDescriptor();
-    return descriptor;
-  }
-
-  protected static synchronized void setDescriptor(Descriptor descriptor)
-  { 
-    TestParseControllerGenerated.descriptor = descriptor;
-  }
-
-  protected static void createDescriptor()
-  { 
-    try
-    { 
-      InputStream descriptorStream = TestParseControllerGenerated.class.getResourceAsStream(DESCRIPTOR);
-      InputStream table = TestParseControllerGenerated.class.getResourceAsStream(TABLE);
-      boolean filesystem = false;
-      if(descriptorStream == null && new File("./" + DESCRIPTOR).exists())
-      { 
-        descriptorStream = new FileInputStream("./" + DESCRIPTOR);
-        filesystem = true;
-      }
-      if(table == null && new File("./" + TABLE).exists())
-      { 
-        table = new FileInputStream("./" + TABLE);
-        filesystem = true;
-      }
-      if(descriptorStream == null)
-        throw new BadDescriptorException("Could not load descriptor file from " + DESCRIPTOR + " (not found in plugin: " + getPluginLocation() + ")");
-      if(table == null)
-        throw new BadDescriptorException("Could not load parse table from " + TABLE + " (not found in plugin: " + getPluginLocation() + ")");
-      descriptor = DescriptorFactory.load(descriptorStream, table, filesystem ? Path.fromPortableString("./") : null);
-      descriptor.setAttachmentProvider(TestParseControllerGenerated.class);
-    }
-    catch(BadDescriptorException exc)
-    { 
-      notLoadingCause = exc;
-      Environment.logException("Bad descriptor for " + LANGUAGE + " plugin", exc);
-      throw new RuntimeException("Bad descriptor for " + LANGUAGE + " plugin", exc);
-    }
-    catch(IOException exc)
-    { 
-      notLoadingCause = exc;
-      Environment.logException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
-      throw new RuntimeException("I/O problem loading descriptor for " + LANGUAGE + " plugin", exc);
-    }
-  }
-
-  private static String getPluginLocation()
-  { 
-    return TestParseController.class.getProtectionDomain().getCodeSource().getLocation().getFile();
-  }
-
-  @Override public IParseController getWrapped()
-  { 
-    if(!isInitialized())
-    { 
-      if(notLoadingCause != null)
-        throw new RuntimeException(notLoadingCause);
-      try
-      { 
-        initialize(this, getDescriptor().getLanguage());
-      }
-      catch(BadDescriptorException exc)
-      { 
-        notLoadingCause = exc;
-        throw new RuntimeException(exc);
-      }
-    }
-    return super.getWrapped();
-  }
-
-  @Override protected void setNotLoadingCause(Throwable value)
-  { 
-    notLoadingCause = value;
-    super.setNotLoadingCause(value);
-  }
 }
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestValidator.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestValidator.java	Fri Mar 18 14:54:57 2011	(r22418)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/TestValidator.java	Tue Mar 22 09:33:17 2011	(r22419)
@@ -1,12 +1,6 @@
 package org.strategoxt.imp.debug.stratego.transformer;
 
-import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
-import org.strategoxt.imp.runtime.services.MetaFileLanguageValidator;
-
-public class TestValidator extends MetaFileLanguageValidator 
+public class TestValidator 
 { 
-  @Override public Descriptor getDescriptor()
-  { 
-    return TestParseController.getDescriptor();
-  }
+
 }
\ No newline at end of file

From tobivollebregt at gmail.com  Tue Mar 22 13:52:52 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 22 Mar 2011 12:52:52 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22420 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110322125252.B0474108C029@mx3.tudelft.nl>

Author: tvo
Date: Tue Mar 22 12:52:52 2011
New Revision: 22420
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22420&sc=1

Log:
Fix NPE in the second completion that happened iff the first completion was at offset 0.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Tue Mar 22 09:33:17 2011	(r22419)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Tue Mar 22 12:52:52 2011	(r22420)
@@ -138,24 +138,25 @@
 	 * Reuse the previous AST if the user just added or deleted a single character.
 	 */
 	private IStrategoTerm tryReusePreviousAst(int offset, String document) {
-		if (offset == 0) return null;
-		if (lastCompletionNode != null && lastDocument.length() == document.length() - 1 && lastOffset == offset - 1) {
-			// Reuse document, ignoring latest typed character
-			String newCharacter = document.substring(offset - 1, offset);
-			String previousDocument = lastDocument.substring(0, offset - 1) + newCharacter + lastDocument.substring(offset - 1);
-			if (documentsSufficientlyEqual(document, previousDocument, offset)) {
-				return reusePreviousAst(offset, document, lastCompletionPrefix + newCharacter);
+		if (offset != 0 && lastCompletionNode != null) {
+			if (lastDocument.length() == document.length() - 1 && lastOffset == offset - 1) {
+				// Reuse document, ignoring latest typed character
+				String newCharacter = document.substring(offset - 1, offset);
+				String previousDocument = lastDocument.substring(0, offset - 1) + newCharacter + lastDocument.substring(offset - 1);
+				if (documentsSufficientlyEqual(document, previousDocument, offset)) {
+					return reusePreviousAst(offset, document, lastCompletionPrefix + newCharacter);
+				}
+			} else if (lastCompletionPrefix.length() > 0
+					&& lastDocument.length() == document.length() + 1 && lastOffset == offset + 1) {
+				// Reuse document, ignoring previously typed character
+				String oldCharacter = lastDocument.substring(offset, offset + 1);
+				String currentDocument = document.substring(0, offset) + oldCharacter + document.substring(offset);
+				if (documentsSufficientlyEqual(currentDocument, lastDocument, offset + 1)) {
+					return reusePreviousAst(offset, document, lastCompletionPrefix.substring(0, lastCompletionPrefix.length() - 1));
+				}
+			} else if (lastDocument.equals(document) && offset == lastOffset) {
+				return reusePreviousAst(offset, document, lastCompletionPrefix);
 			}
-		} else if (lastCompletionNode != null && lastCompletionPrefix.length() > 0
-				&& lastDocument.length() == document.length() + 1 && lastOffset == offset + 1) {
-			// Reuse document, ignoring previously typed character
-			String oldCharacter = lastDocument.substring(offset, offset + 1);
-			String currentDocument = document.substring(0, offset) + oldCharacter + document.substring(offset);
-			if (documentsSufficientlyEqual(currentDocument, lastDocument, offset + 1)) {
-				return reusePreviousAst(offset, document, lastCompletionPrefix.substring(0, lastCompletionPrefix.length() - 1));
-			}
-		} else if (lastCompletionNode != null && lastDocument.equals(document) && offset == lastOffset) {
-			return reusePreviousAst(offset, document, lastCompletionPrefix);
 		}
 		lastDocument = document;
 		lastOffset = offset;

From r.t.lindeman at student.tudelft.nl  Thu Mar 24 00:03:46 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Wed, 23 Mar 2011 23:03:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22421 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug.core/src...
Message-ID: <20110323230346.0C121CC107@mx4.tudelft.nl>

Author: RickyLindeman
Date: Wed Mar 23 23:03:45 2011
New Revision: 22421
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22421&sc=1

Log:
* Added a new HybridInterpreter launch, this launch will run a HybridInterpreter in a seperate JVM
 * The DebuggableHybridInterpreter will use the launch
 * Refactored testcases so they have less boilerplate code

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchUtil.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/TestHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/HybridInterpreterTabGroup.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/DebuggableHybridInterpreter.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventTable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/LineLengthTable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMLocalvarDebug.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestBasic.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestImports.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepInto.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepReturn.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepping.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestTransformerRun.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTransformerDebug.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/AbstractDebugCompileTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/table/EventTableTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/plugin.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/plugin.xml	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/plugin.xml	Wed Mar 23 23:03:45 2011	(r22421)
@@ -11,6 +11,14 @@
             sourceLocatorId="org.strategoxt.imp.debug.core.sourceLookupDirector.str"
             sourcePathComputerId="org.strategoxt.imp.debug.core.sourcePathComputer.str">
       </launchConfigurationType>
+      <launchConfigurationType
+            delegate="org.strategoxt.imp.debug.core.str.launching.HybridInterpreterLaunchDelegate"
+            id="org.strategoxt.imp.debug.core.launchConfigurationType.hybridinterpreter"
+            modes="run, debug"
+            name="Hybrid Interpreter"
+            sourceLocatorId="org.strategoxt.imp.debug.core.sourceLookupDirector.str"
+            sourcePathComputerId="org.strategoxt.imp.debug.core.sourcePathComputer.str">
+      </launchConfigurationType>
    </extension>
    <extension
          point="org.eclipse.debug.core.sourceLocators">

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -0,0 +1,94 @@
+package org.strategoxt.imp.debug.core.str.launching;
+
+import java.io.IOException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.spoofax.interpreter.core.InterpreterErrorExit;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.HybridInterpreter;
+import org.strategoxt.IncompatibleJarException;
+import org.strategoxt.NoInteropRegistererJarException;
+import org.strategoxt.lang.MissingStrategyException;
+import org.strategoxt.lang.StrategoErrorExit;
+import org.strategoxt.lang.StrategoException;
+import org.strategoxt.lang.StrategoExit;
+
+/**
+ * 
+ * This DebuggableHybridInterpreter extends the HybridInterpreter so that it can provide debugging support.
+ * It will execute the stratego code in a separate JVM.
+ * 
+ * @author rlindeman
+ *
+ */
+public class DebuggableHybridInterpreter extends HybridInterpreter {
+
+	public DebuggableHybridInterpreter(ITermFactory termFactory) {
+		super(termFactory);
+	}
+
+	
+	/**
+	 * Creates an interpreter that bases its definition scope on an existing instance.
+	 * 
+	 * TODO: For now just ignore this because the HybridInterpreter will be instantiated in another VM.
+	 * 
+	 * 
+	 * @param interpreter		The interpreter to base this instance on.
+	 * 
+	 * @param reuseRegistries	The names of operator registries that should not be re-created,
+	 *                       	but can be reused from the old instance.
+	 */
+	public DebuggableHybridInterpreter(HybridInterpreter interpreter, String... reuseRegistries) {
+		
+	}
+	
+	private List<URL> loadJars = new ArrayList<URL>();
+	
+	@Override
+	public void loadJars(ClassLoader parentClassLoader, URL... jars)
+	throws SecurityException, NoInteropRegistererJarException, IncompatibleJarException, IOException {
+
+		// save the locations of the jar, so we can load the in the other VM
+		for(URL jarURL : jars)
+		{
+			loadJars.add(jarURL);
+		}
+
+	}
+	
+	/**
+	 * Invokes a compiled or interpreted strategy bound to this instance.
+	 * 
+	 * Wraps any StrategoException into checked InterpreterException exceptions.
+	 */
+	@Override
+	public boolean invoke(String name)
+			throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
+		
+		try {
+			// launch a JVM
+			// http://www.eclipse.org/articles/Article-Java-launch/launching-java.html
+			
+			// TODO: find HybridInterpreter launch config
+			// set the required attributes
+			// and launch
+			
+			return super.invoke(name);
+		} catch (StrategoErrorExit e) {
+			throw new InterpreterErrorExit(e.getMessage(), e.getTerm(), e);
+        } catch (StrategoExit e) {
+            throw new InterpreterExit(e.getValue(), e);
+        } catch (MissingStrategyException e) {
+        	throw new UndefinedStrategyException(e);
+        } catch (StrategoException e) {
+            throw new InterpreterException(e);
+        }
+		//return false;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -0,0 +1,111 @@
+package org.strategoxt.imp.debug.core.str.launching;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.ILaunch;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.IStatusHandler;
+import org.eclipse.debug.core.model.ILaunchConfigurationDelegate;
+import org.strategoxt.debug.core.control.DebugSessionManager;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
+import org.strategoxt.debug.core.util.FileUtil;
+
+public class HybridInterpreterLaunchDelegate implements
+		ILaunchConfigurationDelegate {
+
+	@SuppressWarnings("rawtypes")
+	public void launch(ILaunchConfiguration configuration, String mode,
+			ILaunch launch, IProgressMonitor monitor) throws CoreException {
+		// TODO Auto-generated method stub
+
+		
+		// get name of the strategy
+		String name = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME, (String)null);
+		if (name == null) {
+			abort("Stratego program unspecified.", null);
+			return;
+		}
+		// get required jars that we want to load
+		List requiredJars = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS, (List)null);
+		if (requiredJars == null) {
+			//abort("Stratego program unspecified.", null);
+			requiredJars = new ArrayList<String>();
+		}
+		// get the classpath
+		String classpathAttr = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_CLASSPATH, (String)null);
+		if (classpathAttr == null) {
+			abort("Stratego program unspecified.", null);
+			return;
+		}
+		
+		String flatJarList = "";
+		List<IPath> jarPaths = new ArrayList<IPath>();
+		Iterator iter = requiredJars.iterator();
+		while(iter.hasNext())
+		//for(URL jarURL : loadJars)
+		{
+			Object oNext = iter.next();
+			if (oNext instanceof String)
+			{
+				//String urlPath = jarURL.getPath();
+				String urlPath = (String) oNext;
+				IPath jarPath = new Path(urlPath);
+				jarPaths.add(jarPath);
+				flatJarList += urlPath + " ";
+			}
+		}
+
+		String invokeStrategy = name; // this strategy will be executed
+		String invokeStrategyArguments = name; // the arguments for the strategy
+		String argsForMainClass = flatJarList + " " + invokeStrategy + " " + invokeStrategyArguments;
+		
+		String mainClass = "org.strategoxt.HybridInterpreter";
+		String mainArgs = mainClass + " " + argsForMainClass;
+		
+		//String classpath = FileUtil.convertIPathToClasspath(jarPaths);
+		//String cp = "" + jar + ":" + javaJar; // + ":" + utilsDir+"/strategoxt.jar";
+		//String classpath = cp;
+		
+		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.create(new Path("workingdirectory"), "projectname");
+		IPath libDir = FileUtil.getLibDirectory(); // contains the rtree
+		debugSessionSettings.setJarLibraryDirectory(libDir);
+		DebugSessionManager dsm = new DebugSessionManager();
+		List<IPath> classpaths = jarPaths;
+		IPath tableDirectory = null;
+		dsm.initVM(mainArgs, classpaths, tableDirectory, "LAUNCH");
+		dsm.setupEventListeners();
+		dsm.redirectOutput();
+		dsm.runVM();
+	}
+
+	/**
+	 * Throws an exception with a new status containing the given
+	 * message and optional exception.
+	 * 
+	 * @param message error message
+	 * @param e underlying exception
+	 * @throws CoreException
+	 */
+	private void abort(String message, Throwable e) throws CoreException {
+		// TODO: the plug-in code should be the example plug-in, not Stratego debug model id
+		IStatus status = new Status(IStatus.ERROR, IStrategoConstants.ID_STRATEGO_DEBUG_MODEL, 0, message, e);
+		//throw new CoreException(status);
+		
+		IStatusHandler handler = DebugPlugin.getDefault().getStatusHandler(status);
+		
+		if (handler != null) {
+			Object result = handler.handleStatus(status, null);
+			System.out.println(result);
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -32,4 +32,10 @@
 	 * If the value is false then the application won't get recompiled. Launching may fail if the compiled binaries are not present.
 	 */
 	public static final String ATTR_STRATEGO_PROGRAM_RECOMPILE = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_PROGRAM_RECOMPILE";
+
+	public static final String ATTR_STRATEGO_STRATEGY_NAME = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_STRATEGY_NAME";
+
+	public static final String ATTR_STRATEGO_REQUIRED_JARS = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_REQUIRED_JARS";
+
+	public static final String ATTR_STRATEGO_CLASSPATH = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_CLASSPATH";
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -2,9 +2,6 @@
 
 import java.io.File;
 import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.ServerSocket;
-import java.net.URL;
 import java.text.MessageFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -15,7 +12,6 @@
 import org.eclipse.core.resources.IFolder;
 import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.FileLocator;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
@@ -33,7 +29,6 @@
 import org.eclipse.jdt.launching.IVMRunner;
 import org.eclipse.jdt.launching.JavaRuntime;
 import org.eclipse.jdt.launching.VMRunnerConfiguration;
-import org.osgi.framework.Bundle;
 import org.strategoxt.debug.core.util.DebugCompileException;
 import org.strategoxt.debug.core.util.DebugCompiler;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
@@ -94,9 +89,6 @@
 			programArguments = new ArrayList<String>();
 		}
 				
-		// the started wm will wait for a debugger to connect to this port
-		String port = ""+findFreePort();
-		
 		//String strategoFilePath = file.getLocation().toOSString(); // full path to the stratego program
 		IPath strategoFilePath = new Path(program);
 		IPath strategoSourceBasedir = ResourcesPlugin.getWorkspace().getRoot().getProject(project).getLocation();
@@ -118,40 +110,15 @@
 		String projectName = DebugCompiler.createProjectName(new File(program));
 		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.create(workingDirFolder, projectName);
 		
-		//find the jar library directory in the eclipse plugin
-		Bundle b = org.strategoxt.debug.core.Activator.getDefault().getBundle();
-		
-		IPath path = new Path("lib");
-		Map override = null;
-		URL url = FileLocator.find(b, path, override);
-		URL fileURL = null;
-		try {
-			fileURL = FileLocator.toFileURL(url);
-			//System.out.println("FILE URL:" + fileURL);
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-			//abort("Could not find required directory \"lib\".", e);
-		}
-		//System.out.println("URL: " + fileURL)		
-		
-		String urlPath = fileURL.getPath();
-		IPath directory = new Path(urlPath);
-		System.out.println(directory.toOSString());
 
+		initJarLocations(debugSessionSettings);
 		
-		debugSessionSettings.setJarLibraryDirectory(directory);
-		try {
-			debugSessionSettings.checkJarLibraries();
-		} catch (FileNotFoundException e) {
-			abort("Could not find required eclipse jars in directory \""+directory+"\".", e);
-		}
 		debugSessionSettings.setStrategoSourceBasedir(strategoSourceBasedir);
 		debugSessionSettings.setStrategoFilePath(strategoFilePath);
 		// compile the stratego program
 		IPath binBase = null;
 		try {
-			binBase = prepareProgram(configuration, monitor, mode, debugCompiler, debugSessionSettings);
+			binBase = StrategoLaunchUtil.prepareProgram(configuration, monitor, mode, debugCompiler, debugSessionSettings);
 		} catch (DebugCompileException e) {
 			// could not compile program: Show error message
 			String message = MessageFormat.format("Could not launch Stratego program {0}. Failed to compile the program.", new Object[] { program });
@@ -160,12 +127,6 @@
 		}
 		
 		monitor.subTask("Starting Stratego VM");
-		// Initialize the VMRunner
-		IVMInstall defaultInstall = JavaRuntime.getDefaultVMInstall();
-		System.out.println("default: " + defaultInstall.getName());
-		//IVMRunner vmRunner = defaultInstall.getVMRunner(mode);
-		IVMRunner vmRunner = defaultInstall.getVMRunner(ILaunchManager.RUN_MODE); // always use RUN, so we can control the debug parameters of the VM
-
 		
 		// set up vm arguments
 		String classToLaunch = projectName + "." + projectName;
@@ -175,19 +136,42 @@
 		cpList.add(debugSessionSettings.getStrategoxtJar());
 		cpList.addAll(debugSessionSettings.getRuntimeJars());
 		
-		String[] classPath = FileUtil.convertIPathToStringArray(cpList);		
-		VMRunnerConfiguration vmRunnerConfiguration = new VMRunnerConfiguration(classToLaunch, classPath);
+		String[] classPath = FileUtil.convertIPathToStringArray(cpList);	
+		
+		
+		
 		
 		// setup program arguments
 		System.out.println("Args: " + programArguments);
 		String[] programArgsArray = new String[programArguments.size()];
 		programArgsArray = (String[]) programArguments.toArray(programArgsArray);
-		vmRunnerConfiguration.setProgramArguments(programArgsArray);
-
+		
+		
+		LaunchSettings ls = new LaunchSettings();
+		ls.classToLaunch = classToLaunch;
+		ls.classpath = classPath;
+		ls.programArguments = programArgsArray;
+		ls.mode = mode;
+		
+		launchVM(monitor, ls, debugSessionSettings, launch);
 
+		monitor.done();
+	}
+	
+	private void launchVM(IProgressMonitor monitor, LaunchSettings ls, DebugSessionSettings debugSessionSettings, ILaunch launch) throws CoreException
+	{
+		// Initialize the VMRunner
+		IVMInstall defaultInstall = JavaRuntime.getDefaultVMInstall();
+		IVMRunner vmRunner = defaultInstall.getVMRunner(ILaunchManager.RUN_MODE); // always use RUN, so we can control the debug parameters of the VM
 		
-		// if we arein DEBUG_MODE also set the debugging parameters for the VM as we previously created an IVMRunner in RUN_MODE
-		if (mode.equals(ILaunchManager.DEBUG_MODE)) {
+		VMRunnerConfiguration vmRunnerConfiguration = new VMRunnerConfiguration(ls.classToLaunch, ls.classpath);
+		vmRunnerConfiguration.setProgramArguments(ls.programArguments);
+		
+		// the started wm will wait for a debugger to connect to this port
+		String port = ""+StrategoLaunchUtil.findFreePort();
+		
+		// if we are in DEBUG_MODE also set the debugging parameters for the VM as we previously created an IVMRunner in RUN_MODE
+		if (ls.mode.equals(ILaunchManager.DEBUG_MODE)) {
 			// socket attach
 			//String[] realVMargs = new String[] { "-Xdebug", "-Xrunjdwp:transport=dt_socket,address="+port+",server=y,suspend=y" };
 			// socket listen
@@ -197,9 +181,7 @@
 			vmRunnerConfiguration.setVMArguments(realVMargs);
 		}
 		
-
-		
-		if (mode.equals(ILaunchManager.DEBUG_MODE)) {
+		if (ls.mode.equals(ILaunchManager.DEBUG_MODE)) {
 			monitor.subTask("Attaching to the Stratego VM");
 			StrategoDebugTarget target = new StrategoDebugTarget(debugSessionSettings, launch, port);
 			//(launch,p,requestPort,eventPort );
@@ -213,124 +195,50 @@
 		System.out.println("RUN");
 		vmRunner.run(vmRunnerConfiguration, launch, monitor);
 		monitor.worked(1);
-		
-		monitor.done();
 	}
 	
-	private IPath prepareProgram(ILaunchConfiguration configuration, IProgressMonitor monitor, String mode, DebugCompiler debugCompiler, DebugSessionSettings debugSessionSettings) throws DebugCompileException, CoreException {
-		// program recompile
-		boolean rebuildBinary = false;
-		rebuildBinary = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE, true);
 
 
-		// program arguments
-		List compileArguments = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_COMPILE_ARGUMENTS, (List)null);
-		if (compileArguments == null) {
-			//abort("Stratego program unspecified.", null);
-			compileArguments = new ArrayList<String>();
-		}
-		String[] compileTimeExtraArguments = (String[]) compileArguments.toArray(new String[0]);
-		debugSessionSettings.setCompileTimeExtraArguments(compileTimeExtraArguments);
+	class LaunchSettings {
+		public String classToLaunch;
+		public String[] classpath;
 		
-		IPath binBase = debugSessionSettings.getClassDirectory(); // default
-
-		if (rebuildBinary)
-		{
-			binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
-		}
-		else
-		{
-			// TODO: check if all the necessary files exist in the working dir...
-			// check if binBase contains javafiles
-			IPath binBasePath = binBase;
-			File binBaseFile = binBasePath.toFile();
-			if (!binBaseFile.exists())
-			{
-				// did not compile to class files
-				// try to compile it
-				System.out.println("Class files not found, compile...");
-				binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
-			}
-			else
-			{
-				// check if dir is empty
-				String[] files = binBaseFile.list();
-				if (files == null || files.length == 0)
-				{
-					System.out.println("Class files not found, compile...");
-					binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
-				}
-			}
-			
-			// TODO: check if table file exists
-			File strBase = debugSessionSettings.getStrategoDirectory().toFile();
-			if (!strBase.exists())
-			{
-				System.out.println("Stratego program does not have debug info, compile...");
-				binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
-			} else {
-				String[] files = strBase.list();
-				if (files == null || files.length == 0)
-				{
-					System.out.println("Stratego program does not have debug info, compile...");
-					binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
-				}
-			}
-			
-		}
-		return binBase;
-	}
-
-	private IPath compile(IProgressMonitor monitor, String mode, DebugCompiler debugCompiler, DebugSessionSettings debugSessionSettings) throws DebugCompileException
-	{
-		monitor.subTask("Compiling stratego program");
-		IPath binBase = null;
-		if (mode.equals(ILaunchManager.DEBUG_MODE)) 
-		{
-			binBase = debugCompile(debugCompiler, debugSessionSettings);
-
-		}
-		else if (mode.equals(ILaunchManager.RUN_MODE))
-		{
-			binBase = runCompile(debugCompiler, debugSessionSettings);
-		}
-		monitor.worked(3);
-		return binBase;
+		public String[] programArguments;
+		
+		public String mode;
 	}
 	
-	private IPath debugCompile(DebugCompiler debugCompiler, DebugSessionSettings debugSessionSettings) throws DebugCompileException
-	{
-		// compile for a debug
-		IPath binBase = null;
-		try {
-			binBase = debugCompiler.debugCompile(debugSessionSettings);
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		} 
-		/*
-		catch (DebugCompileException e) {
-			// TODO Auto-generated catch block
-			//e.printStackTrace();
-			abort("Could not compile stratego program.", e);
-		}*/
-		return binBase;
-	}
+
 	
-	private IPath runCompile(DebugCompiler debugCompiler, DebugSessionSettings debugSessionSettings) throws DebugCompileException
-	{
-		// compile for a run
-		IPath binBase = null;
+	/**
+	 * This method tries to set the path to the jars and then will validate if they exist.
+	 * @param debugSessionSettings
+	 * @throws CoreException 
+	 */
+	private void initJarLocations(DebugSessionSettings debugSessionSettings) throws CoreException {
+
+		IPath directory = FileUtil.getLibDirectory();
+		
+		debugSessionSettings.setJarLibraryDirectory(directory);
 		try {
-			binBase = debugCompiler.runCompile(debugSessionSettings);
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		} 
-		// do not catch the DebugCompileException here...
-		return binBase;
+			debugSessionSettings.checkJarLibraries();
+		} catch (FileNotFoundException e) {
+			abort("Could not find required eclipse jars in directory \""+directory+"\".", e);
+		}	
 	}
-	
+
+
+
+
+
+
+
+
+	/**
+	 * Show debug info about the IVMInstall and the VMRunnerConfiguration.
+	 * @param defaultInstall
+	 * @param vmRunnerConfiguration
+	 */
 	public static void showDebugInfo(IVMInstall defaultInstall, VMRunnerConfiguration vmRunnerConfiguration)
 	{
 		// show debug info
@@ -402,26 +310,5 @@
 		}
 	}
 	
-	/**
-	 * Returns a free port number on localhost, or -1 if unable to find a free port.
-	 * 
-	 * @return a free port number on localhost, or -1 if unable to find a free port
-	 */
-	public static int findFreePort() {
-		ServerSocket socket= null;
-		try {
-			socket= new ServerSocket(0);
-			return socket.getLocalPort();
-		} catch (IOException e) { 
-		} finally {
-			if (socket != null) {
-				try {
-					socket.close();
-				} catch (IOException e) {
-				}
-			}
-		}
-		return -1;		
-	}
-	
+
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchUtil.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchUtil.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -0,0 +1,191 @@
+package org.strategoxt.imp.debug.core.str.launching;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.ServerSocket;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.ILaunchManager;
+import org.strategoxt.debug.core.util.DebugCompileException;
+import org.strategoxt.debug.core.util.DebugCompiler;
+import org.strategoxt.debug.core.util.DebugSessionSettings;
+
+/**
+ * This class should take care of all the stuff that needs to be done after validating the LaunchConfig and before launching.
+ * 
+ * This class can be used to compile the program (with debug info) initialize the JVM for the debuggee.
+ * 
+ * @author rlindeman
+ *
+ */
+ at SuppressWarnings("unchecked")
+public class StrategoLaunchUtil {
+
+	
+	/**
+	 * Returns a free port number on localhost, or -1 if unable to find a free port.
+	 * 
+	 * @return a free port number on localhost, or -1 if unable to find a free port
+	 */
+	public static int findFreePort() {
+		ServerSocket socket= null;
+		try {
+			socket= new ServerSocket(0);
+			return socket.getLocalPort();
+		} catch (IOException e) { 
+		} finally {
+			if (socket != null) {
+				try {
+					socket.close();
+				} catch (IOException e) {
+				}
+			}
+		}
+		return -1;		
+	}
+	
+	/**
+	 * Prepares the stratego program before it can be launched.
+	 * @param configuration
+	 * @param monitor
+	 * @param mode
+	 * @param debugCompiler
+	 * @param debugSessionSettings
+	 * @return
+	 * @throws DebugCompileException
+	 * @throws CoreException
+	 */
+	public static IPath prepareProgram(ILaunchConfiguration configuration, IProgressMonitor monitor, String mode, DebugCompiler debugCompiler, DebugSessionSettings debugSessionSettings) throws DebugCompileException, CoreException {
+		// program recompile
+		boolean rebuildBinary = false;
+		rebuildBinary = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM_RECOMPILE, true);
+
+
+		// program arguments
+		List compileArguments = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_COMPILE_ARGUMENTS, (List)null);
+		if (compileArguments == null) {
+			//abort("Stratego program unspecified.", null);
+			compileArguments = new ArrayList<String>();
+		}
+		String[] compileTimeExtraArguments = (String[]) compileArguments.toArray(new String[0]);
+		debugSessionSettings.setCompileTimeExtraArguments(compileTimeExtraArguments);
+		
+		IPath binBase = debugSessionSettings.getClassDirectory(); // default
+
+		if (rebuildBinary)
+		{
+			binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
+		}
+		else
+		{
+			// TODO: check if all the necessary files exist in the working dir...
+			// check if binBase contains javafiles
+			IPath binBasePath = binBase;
+			File binBaseFile = binBasePath.toFile();
+			if (!binBaseFile.exists())
+			{
+				// did not compile to class files
+				// try to compile it
+				System.out.println("Class files not found, compile...");
+				binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
+			}
+			else
+			{
+				// check if dir is empty
+				String[] files = binBaseFile.list();
+				if (files == null || files.length == 0)
+				{
+					System.out.println("Class files not found, compile...");
+					binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
+				}
+			}
+			
+			// TODO: check if table file exists
+			File strBase = debugSessionSettings.getStrategoDirectory().toFile();
+			if (!strBase.exists())
+			{
+				System.out.println("Stratego program does not have debug info, compile...");
+				binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
+			} else {
+				String[] files = strBase.list();
+				if (files == null || files.length == 0)
+				{
+					System.out.println("Stratego program does not have debug info, compile...");
+					binBase = compile(monitor, mode, debugCompiler, debugSessionSettings);
+				}
+			}
+			
+		}
+		return binBase;
+	}
+	
+	
+	private static IPath compile(IProgressMonitor monitor, String mode, DebugCompiler debugCompiler, DebugSessionSettings debugSessionSettings) throws DebugCompileException
+	{
+		monitor.subTask("Compiling stratego program");
+		IPath binBase = null;
+		if (mode.equals(ILaunchManager.DEBUG_MODE)) 
+		{
+			binBase = debugCompile(debugCompiler, debugSessionSettings);
+
+		}
+		else if (mode.equals(ILaunchManager.RUN_MODE))
+		{
+			binBase = runCompile(debugCompiler, debugSessionSettings);
+		}
+		monitor.worked(3);
+		return binBase;
+	}
+	
+	/**
+	 * Calls debugCompile on the DebugCompiler using the given DebugSessionSettings.
+	 * @param debugCompiler
+	 * @param debugSessionSettings
+	 * @return
+	 * @throws DebugCompileException
+	 */
+	private static IPath debugCompile(DebugCompiler debugCompiler, DebugSessionSettings debugSessionSettings) throws DebugCompileException
+	{
+		// compile for a debug
+		IPath binBase = null;
+		try {
+			binBase = debugCompiler.debugCompile(debugSessionSettings);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} 
+		/*
+		catch (DebugCompileException e) {
+			// TODO Auto-generated catch block
+			//e.printStackTrace();
+			abort("Could not compile stratego program.", e);
+		}*/
+		return binBase;
+	}
+	
+	/**
+	 * Calls runCompile on the DebugCompiler using the given DebugSessionSettings.
+	 * @param debugCompiler
+	 * @param debugSessionSettings
+	 * @return
+	 * @throws DebugCompileException
+	 */
+	private static IPath runCompile(DebugCompiler debugCompiler, DebugSessionSettings debugSessionSettings) throws DebugCompileException
+	{
+		// compile for a run
+		IPath binBase = null;
+		try {
+			binBase = debugCompiler.runCompile(debugSessionSettings);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} 
+		// do not catch the DebugCompileException here...
+		return binBase;
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -184,7 +184,7 @@
 		
 
 		
-		manager = new DebugSessionManager(debugSessionSettings, fEventDispatch);
+		manager = new DebugSessionManager(fEventDispatch);
 		
 		DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
 		// we have to know when we get removed, so that we can shut off the debugger

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Wed Mar 23 23:03:45 2011	(r22421)
@@ -42,3 +42,4 @@
  org.strategoxt.imp.debug.stratego.transformer
 Bundle-Activator: org.strategoxt.debug.core.Activator
 Bundle-ActivationPolicy: lazy
+Import-Package: com.ibm.icu.text;version="4.2.1.1"

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -1,12 +1,10 @@
 package org.strategoxt.debug.core.control;
 
-import java.util.ArrayList;
 import java.util.List;
 
 import org.eclipse.core.runtime.IPath;
 import org.strategoxt.debug.core.eventspec.EventSpecManager;
 import org.strategoxt.debug.core.model.StrategoState;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.StreamRedirectThread;
 import org.strategoxt.debug.core.util.VMLauncherHelper;
 
@@ -55,15 +53,33 @@
 	// e.g. thread suspended
 	private VMMonitor vmMonitor = null;
 	
-	private DebugSessionSettings debugSessionSettings = null;
+	//private DebugSessionSettings debugSessionSettings = null;
 	
-	public DebugSessionManager(DebugSessionSettings debugSessionSettings, VMMonitor vmMonitor)
+	/**
+	 * Create a new DebugSessionManager.
+	 * 
+	 * Any debug events will be reported to the VMMonitor.
+	 * 
+	 * @param debugSessionSettings
+	 * @param vmMonitor
+	 */
+	public DebugSessionManager(VMMonitor vmMonitor)
 	{
-		this.debugSessionSettings = debugSessionSettings;
-		this.eventSpecManager = new EventSpecManager(debugSessionSettings);
+		this.eventSpecManager = new EventSpecManager();
 		this.vmMonitor = vmMonitor;
 	}
 	
+	/**
+	 * Creates a new DebugSessionManager.
+	 * 
+	 * @param debugSessionSettings
+	 */
+	public DebugSessionManager()
+	{
+		//this.debugSessionSettings = debugSessionSettings;
+		this.eventSpecManager = new EventSpecManager();
+		this.vmMonitor = null;
+	}
 
 	
 	/**
@@ -73,14 +89,10 @@
 	 * @param mainArgs
 	 * @param classpath
 	 */
-	public void initVM(VirtualMachineManager vmManager, DebugSessionSettings settings, String mainArgs, String classpath, String connectorType) {
+	public void initVM(VirtualMachineManager vmManager, String mainArgs, List<IPath> classpaths, IPath tableDirectory, String connectorType) {
+		this.eventSpecManager.initializeTable(tableDirectory); // read table and offset files from the directory
 		VMLauncherHelper helper = new VMLauncherHelper(vmManager, connectorType);
-		helper.setMainClasspath(classpath);
-		List<IPath> jars = new ArrayList<IPath>();
-		jars.add(settings.getStrategoxtJar());
-		jars.addAll(settings.getRuntimeJars());
-		
-		helper.setDebugJars(jars);
+		helper.setClasspaths(classpaths);
 		this.vm = helper.getTargetVM(mainArgs);
 	}
 	
@@ -91,15 +103,15 @@
 	 * @param mainArgs
 	 * @param classpath
 	 */
-	public void initVM(DebugSessionSettings settings, String mainArgs, String classpath)
+	public void initVM(String mainArgs, List<IPath> classpaths, IPath tableDirectory)
 	{
 		// use default launch
-		this.initVM(settings, mainArgs, classpath, "LAUNCH");
+		this.initVM(mainArgs, classpaths, tableDirectory, "LAUNCH");
 	}
 	
-	public void initVM(DebugSessionSettings settings, String mainArgs, String classpath, String connectorType) {
+	public void initVM(String mainArgs, List<IPath> classpaths, IPath tableDirectory, String connectorType) {
 		VirtualMachineManager vmManager = DebugSessionManager.getVirtualMachineManager();
-		this.initVM(vmManager, settings, mainArgs, classpath, connectorType);
+		this.initVM(vmManager, mainArgs, classpaths, tableDirectory, connectorType);
 	}
 
 	/**
@@ -333,10 +345,11 @@
 		return this.eventSpecManager;
 	}
 
+	/*
 	public DebugSessionSettings getDebugSessionSettings()
 	{
 		return this.debugSessionSettings;
-	}
+	}*/
 	
 	/**
 	 * Returns the StrategoState of Stratego program. 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -1,11 +1,12 @@
 package org.strategoxt.debug.core.eventspec;
 
+import java.io.File;
 import java.util.List;
 
+import org.eclipse.core.runtime.IPath;
 import org.strategoxt.debug.core.control.events.EventHandler;
 import org.strategoxt.debug.core.model.StrategoStackFrame;
 import org.strategoxt.debug.core.model.StrategoState;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.FileUtil;
 import org.strategoxt.debug.core.util.table.EventTable;
 import org.strategoxt.debug.core.util.table.LineLengthTable;
@@ -19,38 +20,42 @@
 	
 	private LineLengthTable lineLengthTable = null;
 	
-	private DebugSessionSettings debugSessionSettings = null;
+	//private DebugSessionSettings debugSessionSettings = null;
+	/**
+	 * A path to the directory that contains the offset and table files.
+	 * Offset is used to convert a linenumber + token_line_offset (relative to the line) to a token_file_offset (relative to the start of the file).
+	 * Table is used to find a breakpoint that is applicable to the given linenumber +token_line_offset. 
+	 */
+	//private IPath tableDirectory = null;
 	
 	// a list of active breakpoints
 	private EventSpecList eventSpecList = null;
 
-	public EventSpecManager(DebugSessionSettings debugSessionSettings) {
+	public EventSpecManager() {
 		eventSpecList = new EventSpecList();
-		this.debugSessionSettings = debugSessionSettings;
-		initializeTable();
 	}
 	
 	/**
 	 * Initializes the EventTable and the LineLengthTable
 	 */
-	private void initializeTable()
+	public void initializeTable(IPath tableDirectory)
 	{
 		String extensionT = "table";
-		List<String> matches = FileUtil.getFilesWithExtension(this.debugSessionSettings.getStrategoDirectory().toFile(), extensionT);
+		List<String> matches = FileUtil.getFilesWithExtension(tableDirectory.toFile(), extensionT);
 		// TODO: use the first match as we only support one file
 		if (matches.size() > 0)
 		{
-			String location = this.debugSessionSettings.getStrategoDirectory() + "/" + matches.get(0);
+			File location = tableDirectory.append(matches.get(0)).toFile();
 			//String location ="/tmp/localvar_str/stratego/localvar.table";
 			this.eventTable = EventTable.readEventTable(location);
 		}
 		
 		String extensionO = "offset";
-		matches = FileUtil.getFilesWithExtension(this.debugSessionSettings.getStrategoDirectory().toFile(), extensionO);
+		matches = FileUtil.getFilesWithExtension(tableDirectory.toFile(), extensionO);
 		// TODO: use the first match as we only support one file
 		if (matches.size() > 0)
 		{
-			String location = this.debugSessionSettings.getStrategoDirectory() + "/" + matches.get(0);
+			File location = tableDirectory.append(matches.get(0)).toFile();
 			//String location ="/tmp/localvar_str/stratego/localvar.table";
 			this.lineLengthTable = LineLengthTable.readLineLengthTable(location);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -184,30 +184,12 @@
 		// create lookup table
 		IPath tableFilename = projectStrategoDir.append(projectName + ".table"); // location of the table
 		// the table contains all debug lookup information for all files in the project
-		generateLookupTable(tableFilename, generatedFiles); // TODO: sort the filenames on their path
+		generateBreakpointLookupTable(tableFilename, generatedFiles); // TODO: sort the filenames on their path
 		
-		// create character offset table
-		// TODO: optimize
-		List<FileLineLengthTable> tables = new ArrayList<FileLineLengthTable>();
-		for(IPath inputFilePath : inputFiles) // TODO: sort the inputFiles on their path
-		{
-			IPath basedir = strategoSourceBasedir; // end with '/'
-			//IPath inputFilePath = new Path(inputFileString);
-			
-			if (basedir.isPrefixOf(inputFilePath)) {
-				//inputFile = inputFile.substring(basedir.length()); // make relative to the basedir
-				inputFilePath = inputFilePath.makeRelativeTo(basedir);
-			}
-			else
-			{
-				System.err.println("inputfile '"+inputFilePath+"' is not located in the strategoSourceBasedir '"+strategoSourceBasedir+"'");
-			}
-			FileLineLengthTable t = new FileLineLengthTable(inputFilePath.toOSString());
-			t.create(basedir);
-			tables.add(t);
-		}
 		IPath charOffsetTableFilename = projectStrategoDir.append((projectName + ".offset")); // location of the character offset table
-		LineLengthTable.writeLineLengthTable(charOffsetTableFilename, tables);
+		generateOffsetTable(charOffsetTableFilename, strategoSourceBasedir, inputFiles);
+
+		debugSessionSettings.setTableDirectory(projectStrategoDir);
 		
 		String libraryName = projectName; // will be the packageName
 		String className = projectName;
@@ -366,7 +348,43 @@
 		return result;
 	}
 	
-	protected void generateLookupTable(IPath tableFilenameString, Collection<IPath> strategoDebugFileNames)
+	/**
+	 * Creates a table with the length per line, so we can convert a linenumber+token_line_offset to a token_file_offset
+	 */
+	protected void generateOffsetTable(IPath charOffsetTableFilename, IPath strategoSourceBasedir, Collection<IPath> inputFiles)
+	{
+		// create character offset table
+		// TODO: optimize
+		List<FileLineLengthTable> tables = new ArrayList<FileLineLengthTable>();
+		for(IPath inputFilePath : inputFiles) // TODO: sort the inputFiles on their path
+		{
+			IPath basedir = strategoSourceBasedir; // end with '/'
+			//IPath inputFilePath = new Path(inputFileString);
+			
+			if (basedir.isPrefixOf(inputFilePath)) {
+				//inputFile = inputFile.substring(basedir.length()); // make relative to the basedir
+				inputFilePath = inputFilePath.makeRelativeTo(basedir);
+			}
+			else
+			{
+				System.err.println("inputfile '"+inputFilePath+"' is not located in the strategoSourceBasedir '"+strategoSourceBasedir+"'");
+			}
+			FileLineLengthTable t = new FileLineLengthTable(inputFilePath.toOSString());
+			t.create(basedir);
+			tables.add(t);
+		}
+		
+		LineLengthTable.writeLineLengthTable(charOffsetTableFilename, tables);
+	}
+	
+	/**
+	 * Creates a table that contains the ranges (linenumber and token offset) for each breakpoint.
+	 * 
+	 * This table makes it easier to find out what breakpoint to set using a given linenumber and token-offset.
+	 * @param tableFilenameString
+	 * @param strategoDebugFileNames
+	 */
+	protected void generateBreakpointLookupTable(IPath tableFilenameString, Collection<IPath> strategoDebugFileNames)
 	{
 		// transform a stratego program to a stratego program with debug information
 		Context context = org.strategoxt.imp.debug.stratego.transformer.trans.Main.init();
@@ -497,15 +515,18 @@
 		// import org.strategoxt.stratego_lib.*;
 		// import org.strategoxt.libstrategodebuglib.*;
 		// import org.strategoxt.lang.*;
-		String classPath = debugSessionSettings.getDebugCompileClasspath();
+		// TODO: need strategoxt.jar runtime jars java-directory
+		//String classPath = debugSessionSettings.getDebugCompileClasspath();
 
+		List<IPath> classpaths = new ArrayList<IPath>();
 		if (debugSessionSettings.getJavaCompileExtraClasspath() != null)
 		{
-			for(String c : debugSessionSettings.getJavaCompileExtraClasspath())
+			for(IPath c : debugSessionSettings.getJavaCompileExtraClasspath())
 			{
-				classPath += java.io.File.pathSeparatorChar + c;
+				classpaths.add(c);
 			}
 		}
+		String classPath = FileUtil.convertIPathToClasspath(classpaths);
 		//log(classPath);
 		// http://www.javaworld.com/javatips/jw-javatip131.html
 		IPath filename = debugSessionSettings.getJavaDirectory().append(mainSourceFileName);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugSessionSettings.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -169,6 +169,10 @@
 		this.runtimeJars = runtimeJars;
 	}
 	
+	/**
+	 * Check if all the required jars can be found.
+	 * @throws FileNotFoundException
+	 */
 	public void checkJarLibraries() throws FileNotFoundException
 	{
 		IPath strategodebuglib = getStrategoDebugLibraryDirectory().append(STRATEGODEBUGLIB_RTREE); // should contain strategodebuglib.rtree
@@ -200,6 +204,7 @@
 		return classPath;
 	}
 	
+	/*
 	public String getRunClasspath()
 	{
 		List<IPath> cpList = new ArrayList<IPath>();
@@ -208,7 +213,7 @@
 		cpList.add(this.getClassDirectory());
 		String classPath = FileUtil.convertIPathToClasspath(cpList);
 		return classPath;
-	}
+	}*/
 	
 	//private static String root = "/home/rlindeman/Documents/TU/webdsl/spoofax-imp/source";
 	//public static String strategoxtjar = root+"/org.strategoxt.imp.debug.stratego.transformer/utils/strategoxt.jar";
@@ -273,13 +278,27 @@
 	/**
 	 * Classpath entry may be used when the stratego program references external strategies defined in java.
 	 */
-	public String[] javaCompileExtraClasspath = null;
+	public IPath[] javaCompileExtraClasspath = null;
 	
-	public void setJavaCompileExtraClasspath(String[] javaCompileExtraClasspath) {
+	public void setJavaCompileExtraClasspath(IPath[] javaCompileExtraClasspath) {
 		this.javaCompileExtraClasspath = javaCompileExtraClasspath;
 	}
 	
-	public String[] getJavaCompileExtraClasspath() {
+	public IPath[] getJavaCompileExtraClasspath() {
 		return javaCompileExtraClasspath;
 	}
+
+	private IPath tableDirectory = null;
+	
+	public void setTableDirectory(IPath tableDirectory) {
+		this.tableDirectory = tableDirectory;
+	}
+	
+	/**
+	 * This directory contains table and offset files
+	 * @return
+	 */
+	public IPath getTableDirectory() {
+		return tableDirectory;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/FileUtil.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -2,10 +2,16 @@
 
 import java.io.File;
 import java.io.FileFilter;
+import java.io.IOException;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
+import org.eclipse.core.runtime.FileLocator;
 import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
+import org.osgi.framework.Bundle;
 
 public class FileUtil {
 
@@ -28,10 +34,24 @@
 	  return oFile.delete();
 	}
 
+	/**
+	 * Returns the filenames (excluding the path) of the files that are in the given directory and have the given extension.
+	 * Subdirectories will not be traversed.
+	 * @param basePath
+	 * @param extension
+	 * @return
+	 */
 	public static List<String> getFilesWithExtension(IPath basePath, final String extension) {
 		return getFilesWithExtension(basePath.toFile(), extension);
 	}
 	
+	/**
+	 * Returns the filenames (excluding the path) of the files that are in the given directory and have the given extension.
+	 * Subdirectories will not be traversed.
+	 * @param basePath
+	 * @param extension
+	 * @return
+	 */
 	public static List<String> getFilesWithExtension(File basePath, final String extension) {
 		
 		List<String> matches = new ArrayList<String>();
@@ -83,6 +103,11 @@
 		return builder.toString();
 	}
 	
+	/**
+	 * Converts the given List<IPath> to a String[]. the toOSString-method is used to generate a String from the IPath.
+	 * @param list
+	 * @return
+	 */
 	public static String[] convertIPathToStringArray(List<IPath> list)
 	{
 		String[] cp = new String[list.size()];
@@ -92,4 +117,29 @@
 		}
 		return cp;
 	}
+	
+	@SuppressWarnings("rawtypes")
+	public static IPath getLibDirectory()
+	{
+		//find the jar library directory in the eclipse plugin
+		Bundle b = org.strategoxt.debug.core.Activator.getDefault().getBundle();
+		
+		IPath path = new Path("lib");
+		Map override = null;
+		URL url = FileLocator.find(b, path, override);
+		URL fileURL = null;
+		try {
+			fileURL = FileLocator.toFileURL(url);
+			//System.out.println("FILE URL:" + fileURL);
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+			//abort("Could not find required directory \"lib\".", e);
+		}
+		//System.out.println("URL: " + fileURL)		
+		
+		String urlPath = fileURL.getPath();
+		IPath directory = new Path(urlPath);
+		return directory;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -1,5 +1,8 @@
 package org.strategoxt.debug.core.util;
 
+import java.util.List;
+
+import org.eclipse.core.runtime.IPath;
 import org.strategoxt.debug.core.control.DebugSessionManager;
 
 
@@ -28,11 +31,10 @@
 	 * @param mainArgs
 	 * @param classpath
 	 */
-	public static void run(DebugSessionSettings debugSessionSettings, String mainArgs, String classpath)
+	public static void run(String mainArgs, List<IPath> classpaths, IPath tableDirectory)
 	{
-		//DebugSessionSettings debugSessionSettings = new DebugSessionSettings("/tmp", projectName);
-		DebugSessionManager manager = new DebugSessionManager(debugSessionSettings, null);
-		manager.initVM(manager.getDebugSessionSettings(), mainArgs, classpath);
+		DebugSessionManager manager = new DebugSessionManager();
+		manager.initVM(mainArgs, classpaths, tableDirectory);
 		manager.setupEventListeners();
 		manager.redirectOutput();
 		System.out.println("RUN");

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/VMLauncherHelper.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -127,7 +127,7 @@
 		
 		//System.out.println("CP:" + classpath);
 		Connector.Argument opts = (Connector.Argument) arguments.get("options");
-		String classpath = this.getDebugProgramClasspath();
+		String classpath = FileUtil.convertIPathToClasspath(this.getClasspaths());
 		String optionValue = "-Xss8m -Xms256m -Xmx1024m -XX:MaxPermSize=256m -server " + "-classpath " + classpath;
 		opts.setValue(optionValue);
 		
@@ -215,50 +215,29 @@
 		}
 		
 	}
-
-
-	/*
-	public void setDefaultClasspath() {
-		String cp = this.defaultClasspath + ":" + this.defaultJars;
-		this.classpath = cp;
-	}
-	*/
-	
-	private List<IPath> debugJars;
 	
-	public void setDebugJars(List<IPath> debugJars)
-	{
-		this.debugJars = debugJars;
-	}
-
-
-	private String mainClasspath = null;
+	/**
+	 * The VM will use this classpath.
+	 */
+	private List<IPath> classpaths = null;
 	
 	/**
-	 * Set the classpath needed for the main java program (set the debug jars using the setJars() method)
+	 * Set the classpath that will be used when launching the VM. 
+	 * 
+	 * All required jars should be on the classpath (strategoxt.jar, runtime.jar, application-directory)
 	 * @param cp
 	 */
-	public void setMainClasspath(String mainClasspath) {
-		this.mainClasspath = mainClasspath;
+	public void setClasspaths(List<IPath> classpaths) {
+		this.classpaths = classpaths;
 	}
 	
 	/**
-	 * Returns the classpath that contains the main java application plus the additional jars needed for debugging.
+	 * Returns all classpaths for the VM.
 	 * @return
 	 */
-	public String getDebugProgramClasspath()
-	{
-		String cp = this.mainClasspath; // should not end with a ':'
-		for(IPath path : this.debugJars)
-		{
-			cp += ":" + path.toOSString();
-		}
-		log("CP: " + cp);
-		return cp;
+	public List<IPath> getClasspaths() {
+		return classpaths;
 	}
 	
-	private void log(String message)
-	{
-		System.out.println();
-	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventTable.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventTable.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/EventTable.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -1,6 +1,7 @@
 package org.strategoxt.debug.core.util.table;
 
 import java.io.BufferedReader;
+import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.io.IOException;
@@ -42,7 +43,7 @@
 	 * @param location
 	 * @return
 	 */
-	public static EventTable readEventTable(String location)
+	public static EventTable readEventTable(File location)
 	{
 		EventTable eventTable = null; // return value
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/LineLengthTable.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/LineLengthTable.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/LineLengthTable.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -2,6 +2,7 @@
 
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
+import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.io.FileWriter;
@@ -31,7 +32,7 @@
 		return tablesPerFile.get(filename);
 	}
 	
-	public static LineLengthTable readLineLengthTable(String location)
+	public static LineLengthTable readLineLengthTable(File location)
 	{
 		LineLengthTable lineLengthTable = null; // return value
 		

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/ClasspathHandler.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -33,18 +33,24 @@
 		return jars;
 	}
 	
+	/**
+	 * Tries to get the path from the bundle using the runtime plugin activator.
+	 * If the activator is null, use the ../RUNTIME_PROJECT_LOCATION path.
+	 * @param pathInBundle
+	 * @return
+	 */
 	public static IPath getPathFromBundle(String pathInBundle)
 	{
 		org.strategoxt.imp.debug.stratego.runtime.Activator runtimeActivator = org.strategoxt.imp.debug.stratego.runtime.Activator.getInstance();
 		if (runtimeActivator == null)
 		{
-			System.out.println("NO RUNTIME ACTIVATOR...");
+			//System.out.println("NO RUNTIME ACTIVATOR...");
 		}
 		if (runtimeActivator.getBundle() == null)
 		{
-			System.out.println("NO BUNDLE... " + pathInBundle);
+			//System.out.println("NO BUNDLE... " + pathInBundle);
 			String path2lib = "../" + RUNTIME_PROJECT_LOCATION + pathInBundle;
-			System.out.println("try to get from: " + path2lib);
+			//System.out.println("try to get from: " + path2lib);
 			File f = new File(path2lib);
 			String resolved = null;
 			try {
@@ -53,12 +59,12 @@
 				// TODO Auto-generated catch block
 				e.printStackTrace();
 			}
-			System.out.println("Resolved to: " + resolved);
+			//System.out.println("Resolved to: " + resolved);
 			IPath path = new Path(resolved);
 			return path;
 		}
 		URL pathInBundleURL = runtimeActivator.getBundle().getEntry(pathInBundle);
-		System.out.println("RUNTIME: " + pathInBundleURL);
+		//System.out.println("RUNTIME: " + pathInBundleURL);
 		URL fileURL = null;
 		try {
 			fileURL = FileLocator.toFileURL(pathInBundleURL);
@@ -69,7 +75,7 @@
 		
 		String urlPath = fileURL.getPath();
 		IPath path = new Path(urlPath);
-		System.out.println("OSSTRING: " + path.toOSString());
+		//System.out.println("OSSTRING: " + path.toOSString());
 		return path;
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/StrategoFileManager.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -4,6 +4,8 @@
 
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Platform;
+import org.strategoxt.eclipse.ant.StrategoJarAntPropertyProvider;
 
 public class StrategoFileManager {
 	
@@ -36,4 +38,31 @@
 		IPath path = new Path(parent);
 		return path;
 	}
+	
+	/**
+	 * Returns the location of the strategoxt.jar (it should be in the org.strategoxt.strj plugin somewhere)
+	 * @return
+	 */
+	public static String getStrategoXTJar()
+	{
+		System.out.println(Platform.isRunning());
+		if (Platform.isRunning())
+		{
+			String strategoxtJar = StrategoJarAntPropertyProvider.getStrategoJarPath();
+			return strategoxtJar;
+		}
+		String result = org.strategoxt.stratego_lib.Main.class.getProtectionDomain().getCodeSource().getLocation().getFile();
+		/*
+		if (Platform.getOS().equals(Platform.OS_WIN32)) {
+			// FIXME: proper paths on Windows
+			result = result.substring(1);
+		}*/
+		if (!result.endsWith(".jar")) { // ensure correct jar at development time
+			String result2 = result + "/../strategoxt.jar";
+			if (new File(result2).exists()) return result2;
+			result2 = result + "/java/strategoxt.jar";
+			if (new File(result2).exists()) return result2;
+		}
+		return result;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -2,23 +2,58 @@
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 
 import junit.framework.Assert;
 
+import org.StrategoFileManager;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
 import org.spoofax.terms.StringTermReader;
 import org.spoofax.terms.TermFactory;
 import org.strategoxt.debug.core.eventspec.BreakPoint;
 import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
 import org.strategoxt.debug.core.util.DebugSessionSettings;
+import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventEntry;
 import org.strategoxt.debug.core.util.table.EventTable;
+import org.strategoxt.imp.debug.stratego.runtime.ClasspathHandler;
 
 public abstract class AbstractDSMTest {
 
 	protected TermFactory termFactory = new TermFactory();
 	protected StringTermReader termReader = new StringTermReader(termFactory);
 	
+	/**
+	 * Although we won't compile in DSM testcases, the settings will hold some important paths. 
+	 */
+	protected DebugSessionSettings debugSessionSettings = null;
+	
+	/**
+	 * Project name is the name of the folder that is the base directory that contains the necessary files.
+	 * @param projectName
+	 */
+	protected void createDebugSessionSettings(String projectName)
+	{
+		// Although we won't compile in DSM testcases we still construct the settings some we can query the object for some paths..
+		this.debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
+		this.debugSessionSettings.setTableDirectory(debugSessionSettings.getStrategoDirectory());
+		checkProjectExists(debugSessionSettings);
+	}
+	
+	protected VMMonitorTestImpl2 vmMonitor = null;
+	
+	protected DebugSessionManager createDebugSessionManager() {
+		this.vmMonitor = new VMMonitorTestImpl2(this);
+		DebugSessionManager dsm = new DebugSessionManager(vmMonitor);
+		vmMonitor.setDSM(dsm);
+
+		Assert.assertNotNull(this.debugSessionSettings);
+		dsm.getEventSpecManager().initializeTable(this.debugSessionSettings.getTableDirectory());
+		return dsm;
+	}
+	
 	
 	protected void addBP(DebugSessionManager dsm, String filename, int lineNumber, int startTokenPosition, String eventType)
 	{
@@ -43,10 +78,25 @@
 	 * @param classpath
 	 * @return
 	 */
-	public DebugSessionManager start(DebugSessionManager manager, String mainArgs, String classpath, String connectorType)
+	public DebugSessionManager start(DebugSessionManager manager, String mainArgs, String connectorType)
 	{
+		// set the application binary directory on the classpath
+		// any applications requiring additional jars should already be set on the classpath using addToClasspath
+		this.addToClasspath(debugSessionSettings.getClassDirectory());
+		// set strategoxt.jar on the classpath
+		String strategoXTJar = StrategoFileManager.getStrategoXTJar();
+		this.addToClasspath(new Path(strategoXTJar));
+		// set runtime jars on the classpath
+		this.addToClasspath(ClasspathHandler.getClasspathEntries());
+		
+		Assert.assertNotNull(debugSessionSettings);
+		Assert.assertNotNull(classpaths);
+		
+		IPath tableDirectory = this.debugSessionSettings.getTableDirectory();
+		Assert.assertNotNull(tableDirectory);
+		
 		long start = System.currentTimeMillis();
-		manager.initVM(manager.getDebugSessionSettings(), mainArgs, classpath, connectorType);
+		manager.initVM(mainArgs, classpaths, tableDirectory, connectorType);
 		manager.setupEventListeners();
 		manager.redirectOutput();
 		manager.runVM();
@@ -59,25 +109,29 @@
 		return manager;
 	}
 	
+	private List<IPath> classpaths = new ArrayList<IPath>();
+	
 	/**
-	 * classPath contains the binary files of the compiled strj program
-	 * @param mainArgs
-	 * @param classpath
+	 * Path can point to a folder or a jar.
+	 * @param path
 	 */
-	public DebugSessionManager start(DebugSessionManager manager, String mainArgs, String classpath)
+	protected void addToClasspath(IPath path)
 	{
-		// Default use the sun launch
-		return this.start(manager, mainArgs, classpath, "LAUNCH");
-		/*
-		manager.initVM(manager.getDebugSessionSettings(), mainArgs, classpath);
-		manager.setupEventListeners();
-		manager.redirectOutput();
-		manager.runVM();
-		// runVM waits for the threads to end
-		// check if any Exceptions were thrown
-		checkThreadFailures();
-		return manager;
-		*/
+		classpaths.add(path);
+	}
+	
+	/**
+	 * Adds multiple paths to the classpath.
+	 * @param path
+	 */
+	protected void addToClasspath(Collection<IPath> path)
+	{
+		classpaths.addAll(path);
+	}
+	
+	public DebugSessionManager start(DebugSessionManager manager, String mainArgs)
+	{
+		return this.start(manager, mainArgs, "LAUNCH");
 	}
 	
 	private List<Throwable> exceptions = new ArrayList<Throwable>();

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMLocalvarDebug.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMLocalvarDebug.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMLocalvarDebug.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -1,8 +1,6 @@
 package org.strategoxt.debug.core.control;
 
 import org.StrategoFileManager;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 
 public class DSMLocalvarDebug extends AbstractDSMTest {
 
@@ -11,23 +9,17 @@
 	public void testDSM1()
 	{
 		String projectName = "localvar";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
 		
+		DebugSessionManager dsm = createDebugSessionManager();		
 	
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestBasic.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestBasic.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestBasic.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -8,8 +8,6 @@
 import org.strategoxt.debug.core.eventspec.BreakPoint;
 import org.strategoxt.debug.core.eventspec.RuleEnterBreakPoint;
 import org.strategoxt.debug.core.eventspec.StrategyEnterBreakPoint;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventEntry;
 import org.strategoxt.debug.core.util.table.EventTable;
 
@@ -20,20 +18,15 @@
 	public void testDSM1()
 	{
 		String projectName = "localvar";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
 		
+		DebugSessionManager dsm = createDebugSessionManager();
+
 		// which breakpoints will be hit?
 		VMStateTester vmStateTester = new VMStateTester(VMStateTesterCompareType.Name);
 		String term = "Function(\"fname\",[Assign(\"var_foo\",Add(Number(2),Number(7))),Print(\"var_foo\")])";
@@ -49,7 +42,7 @@
 		
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 	}
 	
 	// stratego program should already be compiled
@@ -57,19 +50,14 @@
 	public void testDSM2()
 	{
 		String projectName = "localvar";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
 		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		// which breakpoints will be hit?
 		VMStateTester vmStateTester = new VMStateTester(VMStateTesterCompareType.Name);
@@ -92,27 +80,25 @@
 		dsm.getEventSpecManager().add(bp);
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 	}
 	
 	@org.junit.Test
 	public void testBreakPointAtS_Step()
 	{
 		String projectName = "localvar";
+		createDebugSessionSettings(projectName);
+
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass; // Arguments when program is run
-		String mainClasspath = debugSessionSettings.getClassDirectory().toOSString(); // classpath when program is run
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
-		
+
+		// create DSM
+		DebugSessionManager dsm = createDebugSessionManager();
+
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
 		EventTable eventTable = dsm.getEventSpecManager().getEventTable();
@@ -157,27 +143,23 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, mainClasspath);
+		start(dsm, mainArgs);
 	}
-	
+
 	@org.junit.Test
 	public void testStepVarBreakPoint()
 	{
 		String projectName = "localvar";
+		createDebugSessionSettings(projectName);
+		
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
 		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -225,29 +207,24 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 	}
 	
 	@org.junit.Test
 	public void testBreakpointLookup()
 	{
+		// TODO: project should be compiled with debug info!
 		String projectName = "localvar";
+		createDebugSessionSettings(projectName);
+
 		String strategoFilename = "localvar.str";
-		// TODO: project should be compiled with debug info!
-		
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -284,6 +261,6 @@
 		dsm.getEventSpecManager().add(bp);
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestDynamic.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -3,8 +3,6 @@
 import junit.framework.Assert;
 
 import org.StrategoFileManager;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventTable;
 
 public class DSMTestDynamic extends AbstractDSMTest {
@@ -18,20 +16,16 @@
 	public void testStepBreakPoint()
 	{
 		String projectName = "dynamic";
+		createDebugSessionSettings(projectName);
+
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/dynamic/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "dynamic.dynamic";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+	
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -90,7 +84,7 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 	}
 	
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestImports.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestImports.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestImports.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -3,8 +3,6 @@
 import junit.framework.Assert;
 
 import org.StrategoFileManager;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventTable;
 
 public class DSMTestImports extends AbstractDSMTest {
@@ -21,19 +19,14 @@
 		String localvarFilename = "localvar.str";
 		String utilsFilename = "localmod/util/utils.str";
 		
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/testimports/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "testimports.testimports";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
 		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -68,6 +61,6 @@
 		
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSetInput.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -7,8 +7,6 @@
 import org.strategoxt.debug.core.control.actions.ActionFactory;
 import org.strategoxt.debug.core.control.actions.IAction;
 import org.strategoxt.debug.core.eventspec.EnterBreakPoint;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventTable;
 
 public class DSMTestSetInput extends AbstractDSMTest {
@@ -21,20 +19,16 @@
 		// continue
 		
 		String projectName = "setinput";
+		createDebugSessionSettings(projectName);
+
 		//String strategoFilename = "setinput.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/setinput/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "setinput.setinput";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -88,7 +82,7 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 		System.out.println("EXIT");
 	}
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -0,0 +1,163 @@
+package org.strategoxt.debug.core.control;
+
+import org.eclipse.core.runtime.Path;
+import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
+
+/**
+ * Try to launch a debug session using the output from a spoofax project (all the stuff in the include dir)
+ * @author rlindeman
+ *
+ */
+public class DSMTestSpoofax  extends AbstractDSMTest {
+
+	// stratego program should already be compiled
+	@org.junit.Test
+	public void testDSM1()
+	{
+		String includeDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include";
+		//String utilsDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/utils";
+		String javaJar = includeDir+"/orgexamplelang1-java.jar";
+		String jar = includeDir+"/orgexamplelang1.jar";
+		
+		String projectName = "stub";
+		createDebugSessionSettings(projectName);
+
+
+		// dynamically load language.jar, it will assume the language-java.jar is already on the classpath
+		String invokeStrategy = "main12"; // will converted to a java name e.g.: main12_0_0
+		String loadJars = javaJar + " " + jar;
+		String invokeStrategyArguments = "str.args";
+		String argsForMainClass = loadJars + " " + invokeStrategy + " " + invokeStrategyArguments;
+		
+		String mainClass = "org.strategoxt.HybridInterpreter"; // launch the interpreter
+		String mainArgs = mainClass + " " + argsForMainClass;
+
+		// TODO: this.debugSessionSettings.getClassDirectory() is also added but should not be used
+		this.addToClasspath(new Path(jar));
+		this.addToClasspath(new Path(javaJar));
+
+		
+		DebugSessionManager dsm = createDebugSessionManager();		
+	
+		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs);
+	}
+	
+	
+	@org.junit.Test
+	public void testDSM2()
+	{
+		String includeDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include";
+		//String utilsDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/utils";
+		String javaJar = includeDir+"/orgexamplelang1-java.jar";
+		String jar = includeDir+"/orgexamplelang1.jar";
+		
+		String projectName = "stub";
+		createDebugSessionSettings(projectName);
+
+		//String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
+		//String argsForMainClass = "-i " + input; // Interpreter hasother args
+		// dynamically load language.jar, it will assume the language-java.jar is already on the classpath
+		String invokeStrategy = "main12"; // will converted to a java name e.g.: main12_0_0
+		String argsForMainClass = javaJar + " " + jar + " " + invokeStrategy + " " + "str.args";
+		//String mainClass = "trans.trans"; // does not have a Main method
+		//String mainClass = "org.example.lang1.strategies.Main";
+		String mainClass = "org.strategoxt.HybridInterpreter";
+		String mainArgs = mainClass + " " + argsForMainClass;
+
+		// TODO: this.debugSessionSettings.getClassDirectory() is also added but should not be used
+		this.addToClasspath(new Path(jar));
+		this.addToClasspath(new Path(javaJar));
+
+		
+		DebugSessionManager dsm = createDebugSessionManager();
+		
+		// TODO: use event table
+		
+		/*
+		(s-step(
+           | "test-main.str"
+           , "main12"
+           , LocationInfo("8", "6", "8", "20")
+           )
+		 */
+		// set breakpoint
+		String filename = "test-main.str";
+		String strategyName = "main12";
+		StrategyStepBreakPoint bp = new StrategyStepBreakPoint(filename, strategyName, 8, 6);
+		dsm.getEventSpecManager().add(bp);
+		
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester(VMStateTesterCompareType.Name);
+		String term = null;
+		term = "\"\""; // empty string
+		vmStateTester.addStrategoState("main12", termReader.parseFromString(term));
+		
+		vmStateTester.initialize();
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs);
+	}
+	
+	@org.junit.Test
+	public void testDSM3()
+	{
+		String includeDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include";
+		//String utilsDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/utils";
+		String javaJar = includeDir+"/orgexamplelang1-java.jar";
+		String jar = includeDir+"/orgexamplelang1.jar";
+		
+		String projectName = "stub";
+		createDebugSessionSettings(projectName);
+
+		//String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
+		//String argsForMainClass = "-i " + input; // Interpreter hasother args
+		// dynamically load language.jar, it will assume the language-java.jar is already on the classpath
+		String invokeStrategy = "main12"; // will converted to a java name e.g.: main12_0_0
+		String argsForMainClass = javaJar + " " + jar + " " + invokeStrategy + " " + "str.args";
+		//String mainClass = "trans.trans"; // does not have a Main method
+		//String mainClass = "org.example.lang1.strategies.Main";
+		String mainClass = "org.strategoxt.HybridInterpreter";
+		String mainArgs = mainClass + " " + argsForMainClass;
+
+		// TODO: this.debugSessionSettings.getClassDirectory() is also added but should not be used
+		this.addToClasspath(new Path(jar));
+		this.addToClasspath(new Path(javaJar));
+		
+		DebugSessionManager dsm = createDebugSessionManager();
+		
+		// TODO: use event table
+		
+		/*
+		(s-step(
+           | "test-main.str"
+           , "main12"
+           , LocationInfo("8", "6", "8", "20")
+           )
+		 */
+		
+		// TODO: change current term
+		
+		// set breakpoint
+		String filename = "test-main.str";
+		String strategyName = "main12";
+		StrategyStepBreakPoint bp = new StrategyStepBreakPoint(filename, strategyName, 8, 6);
+		dsm.getEventSpecManager().add(bp);
+		
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester(VMStateTesterCompareType.Name);
+		String term = null;
+		term = "\"\""; // empty string
+		vmStateTester.addStrategoState("main12", termReader.parseFromString(term));
+		
+		vmStateTester.initialize();
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs);
+	}
+}
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepInto.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepInto.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepInto.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -4,8 +4,6 @@
 
 import org.StrategoFileManager;
 import org.strategoxt.debug.core.control.actions.ActionFactory;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventTable;
 
 public class DSMTestStepInto extends AbstractDSMTest {
@@ -22,19 +20,14 @@
 	{
 		String projectName = "localvar";
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -74,7 +67,7 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 		System.out.println("EXIT");
 	}
 	
@@ -84,19 +77,14 @@
 		// perform a step_into when the current statement cannot be stepped into
 		String projectName = "localvar";
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -130,7 +118,7 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 		System.out.println("EXIT");
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepReturn.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepReturn.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepReturn.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -4,8 +4,6 @@
 
 import org.StrategoFileManager;
 import org.strategoxt.debug.core.control.actions.ActionFactory;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventTable;
 
 public class DSMTestStepReturn extends AbstractDSMTest {
@@ -22,19 +20,14 @@
 	{
 		String projectName = "localvar";
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -76,7 +69,7 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 		System.out.println("EXIT");
 	}
 	
@@ -87,19 +80,14 @@
 		// the step should be cancelled
 		String projectName = "localvar";
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -146,7 +134,7 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 		System.out.println("EXIT");
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepping.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepping.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestStepping.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -4,8 +4,6 @@
 
 import org.StrategoFileManager;
 import org.strategoxt.debug.core.control.actions.ActionFactory;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
 import org.strategoxt.debug.core.util.table.EventTable;
 
 public class DSMTestStepping extends AbstractDSMTest {
@@ -22,19 +20,14 @@
 	{
 		String projectName = "localvar";
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+	
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -80,7 +73,7 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 		System.out.println("EXIT");
 	}
 	
@@ -90,19 +83,14 @@
 		// step over at the last statement in a rule or strategy
 		String projectName = "localvar";
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -161,7 +149,7 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 		System.out.println("EXIT");
 	}
 	
@@ -173,19 +161,14 @@
 		
 		String projectName = "localvar";
 		String strategoFilename = "localvar.str";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/run.input";
 		String argsForMainClass = "-i " + input;
 		String mainClass = "localvar.localvar";
 		String mainArgs = mainClass + " " + argsForMainClass;
-		String cp = /*strategoxtjar + ":" + libstrategodebuglib + ":" + strjdebugruntime + ":" + */ debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		String classpath = cp;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+	
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		//String location = debugSessionSettings.getStrategoDirectory() + "/" + projectName + ".table";
 		//EventTable eventTable = EventTable.readEventTable(location);
@@ -241,7 +224,7 @@
 
 		System.out.println("RUN");
 		// start the debug session
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 		System.out.println("EXIT");
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestTransformerRun.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestTransformerRun.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestTransformerRun.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -4,8 +4,8 @@
 import java.io.IOException;
 
 import org.StrategoFileManager;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
 
 public class DSMTestTransformerRun extends AbstractDSMTest {
 
@@ -15,8 +15,7 @@
 	{
 		// run the transformer without debug info
 		String projectName = "transformer_run";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/localvar.str"; // program that will be debug transformed
 		String output = StrategoFileManager.WORKING_DIR + "/transformer_test_run1";
@@ -24,7 +23,7 @@
 		String mainClass = "transformer_run.transformer_run";
 		String mainArgs = mainClass + " " + argsForMainClass;
 		
-		String cp = debugSessionSettings.getClassDirectory().toOSString();
+
 		String transformerProject = "../org.strategoxt.imp.debug.stratego.transformer";
 		File f = new File(transformerProject);
 		try {
@@ -34,17 +33,19 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
-		String classpath = cp + ":" + transformerProject + "/" + "include/stratego-transformer-java.jar";
+		IPath transformerPath = new Path(transformerProject);
+		IPath strategoTransformerJavaJarPath = transformerPath.append("include").append("stratego-transformer-java.jar");
+		// the transformer requires the external strategies defined in stratego-transformer-java.jar
+		this.addToClasspath(strategoTransformerJavaJarPath);
+
 		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		System.out.println("RUN");
 		// start the debug session
 		//String connectorType = "LAUNCH";
 		//String connectorType = "LISTEN";
 		//String connectorType = "ATTACH"; // attach to VM that is suspended
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTransformerDebug.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTransformerDebug.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTransformerDebug.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -4,8 +4,8 @@
 import java.io.IOException;
 
 import org.StrategoFileManager;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
 
 public class DSMTransformerDebug extends AbstractDSMTest {
 
@@ -15,8 +15,7 @@
 	{
 		// run the transformer with debug info
 		String projectName = "transformer_debug";
-		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.createTest(StrategoFileManager.WORKING_DIR, projectName);
-		checkProjectExists(debugSessionSettings);
+		createDebugSessionSettings(projectName);
 		
 		String input = StrategoFileManager.BASE + "/src/stratego/localvar/localvar.str"; // program that will be debug transformed
 		String output = StrategoFileManager.WORKING_DIR + "/transformer_test_debug1";
@@ -24,8 +23,6 @@
 		String mainClass = "transformer_debug.transformer_debug";
 		String mainArgs = mainClass + " " + argsForMainClass;
 		
-		String cp = debugSessionSettings.getClassDirectory().toOSString(); // was binBase
-		
 		String transformerProject = "../org.strategoxt.imp.debug.stratego.transformer";
 		File f = new File(transformerProject);
 		try {
@@ -35,12 +32,13 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
+		IPath transformerPath = new Path(transformerProject);
+		IPath strategoTransformerJavaJarPath = transformerPath.append("include").append("stratego-transformer-java.jar");
+		// the transformer requires the external strategies defined in stratego-transformer-java.jar
+		this.addToClasspath(strategoTransformerJavaJarPath);
+
 		
-		String classpath = cp + ":" + transformerProject + "/" + "include/stratego-transformer-java.jar";;
-		
-		VMMonitorTestImpl2 vmMonitor = new VMMonitorTestImpl2(this);
-		DebugSessionManager dsm = new DebugSessionManager(debugSessionSettings, vmMonitor);
-		vmMonitor.setDSM(dsm);
+		DebugSessionManager dsm = createDebugSessionManager();
 		
 		/*
 		// TODO: test breakpoints
@@ -61,6 +59,6 @@
 		//String connectorType = "LAUNCH";
 		//String connectorType = "LISTEN";
 		//String connectorType = "ATTACH"; // attach to VM that is suspended
-		start(dsm, mainArgs, classpath);
+		start(dsm, mainArgs);
 	}
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/TestHybridInterpreter.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/TestHybridInterpreter.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -0,0 +1,23 @@
+package org.strategoxt.debug.core.control;
+
+import org.junit.Test;
+import org.strategoxt.HybridInterpreter;
+
+/**
+ * Launch the HybridInterpreter.
+ * 
+ * @author rlindeman
+ *
+ */
+public class TestHybridInterpreter {
+
+	@Test
+	public void testname() throws Exception {
+		String includeDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include";
+		String jar = includeDir+"/orgexamplelang1.jar";
+		String javaJar = includeDir+"/orgexamplelang1-java.jar";
+		String main = "main";
+		String[] args = new String[] {javaJar, jar, main};
+		HybridInterpreter.main(args);
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/AbstractDebugCompileTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/AbstractDebugCompileTest.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/AbstractDebugCompileTest.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -155,10 +155,11 @@
 			String argsForMainClass = "-i " + input;
 			//String mainClass = "dynamic.dynamic"; // TODO: java files cannot contain "-", the name may be converted
 			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
+			// require strategoxt.jar runtime.jar and runtime-java.jar and the classpath of the actual application
+
+			List<IPath> classpaths = null;
+			Assert.assertNotNull(classpaths);
+			org.strategoxt.debug.core.util.Runner.run(mainArgs, classpaths, debugSessionSettings.getTableDirectory());
 		}
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformer.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -2,6 +2,8 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
 
 import org.StrategoFileManager;
 import org.eclipse.core.runtime.IPath;
@@ -135,8 +137,8 @@
 				, "-la", "org.strategoxt.imp.debug.stratego.transformer.strategies"
 		                                          };
 		
-		String[] javaCompileExtraClasspath = new String[] {
-				transformerProject + "/" + "include/stratego-transformer-java.jar"
+		IPath[] javaCompileExtraClasspath = new IPath[] {
+				new Path(transformerProject + "/" + "include/stratego-transformer-java.jar")
 		};
 		debugSessionSettings.setCompileTimeExtraArguments(compileTimeExtraArguments);
 		debugSessionSettings.setJavaCompileExtraClasspath(javaCompileExtraClasspath);
@@ -180,17 +182,19 @@
 			String mainClass = "transformer_debug.transformer_debug";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String cp = debugSessionSettings.getRunClasspath();
+			List<IPath> classpaths = new ArrayList<IPath>();
+			// TODO: add strategoxt, add runtime jars, add application classpath
+			//String cp = debugSessionSettings.getRunClasspath();
 			if (debugSessionSettings.getJavaCompileExtraClasspath() != null)
 			{
-				for(String c : debugSessionSettings.getJavaCompileExtraClasspath())
+				for(IPath c : debugSessionSettings.getJavaCompileExtraClasspath())
 				{
-					cp += ":" + c;
+					classpaths.add(c);
 				}
 			}
-			String classpath = cp;
 			System.out.println("ARGS: " + mainArgs);
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
+			IPath tableDirectory = null;
+			org.strategoxt.debug.core.util.Runner.run(mainArgs, classpaths, tableDirectory);
 		}
 		debugCompiler.getDebugCompileProgress().printStats();
 	}
@@ -224,8 +228,8 @@
 				, "-la", "strc"
 				, "-la", "org.strategoxt.imp.debug.stratego.transformer.strategies"
 		                                          };
-		String[] javaCompileExtraClasspath = new String[] {
-				transformerProject + "/" + "include/stratego-transformer-java.jar"
+		IPath[] javaCompileExtraClasspath = new IPath[] {
+				new Path(transformerProject + "/" + "include/stratego-transformer-java.jar")
 		};
 		debugSessionSettings.setCompileTimeExtraArguments(compileTimeExtraArguments);
 		debugSessionSettings.setJavaCompileExtraClasspath(javaCompileExtraClasspath);
@@ -262,17 +266,20 @@
 			String mainClass = "transformer_run.transformer_run";
 			String mainArgs = mainClass + " " + argsForMainClass;
 			
-			String cp = debugSessionSettings.getRunClasspath();
+			List<IPath> classpaths = new ArrayList<IPath>();
+			// TODO: add strategoxt, add runtime jars, add application classpath
+			//String cp = debugSessionSettings.getRunClasspath();
 			if (debugSessionSettings.getJavaCompileExtraClasspath() != null)
 			{
-				for(String c : debugSessionSettings.getJavaCompileExtraClasspath())
+				for(IPath c : debugSessionSettings.getJavaCompileExtraClasspath())
 				{
-					cp += ":" + c;
+					classpaths.add(c);
 				}
 			}
-			String classpath = cp;
+
 			System.out.println("ARGS: " + mainArgs);
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
+			IPath tableDirectory = debugSessionSettings.getTableDirectory();
+			org.strategoxt.debug.core.util.Runner.run(mainArgs, classpaths, tableDirectory);
 		}
 		debugCompiler.getDebugCompileProgress().printStats();
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/dctests/DebugCompileTransformerError.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -2,6 +2,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.List;
 
 import org.StrategoFileManager;
 import org.eclipse.core.runtime.IPath;
@@ -93,11 +94,13 @@
 			String argsForMainClass = "-i " + input;// + " -o " + output;
 			String mainClass = "transformer_error.transformer_error";
 			String mainArgs = mainClass + " " + argsForMainClass;
-			
-			String cp = debugSessionSettings.getRunClasspath();
-			String classpath = cp;
+
+			// TODO: strategoxt.jar, runtime.jars, application directory
 			System.out.println("ARGS: " + mainArgs);
-			org.strategoxt.debug.core.util.Runner.run(debugSessionSettings, mainArgs, classpath);
+			List<IPath> classpaths = null;
+			IPath tableDirectory = null;
+			Assert.assertNotNull(classpaths);
+			org.strategoxt.debug.core.util.Runner.run(mainArgs, classpaths, tableDirectory);
 		}
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/table/EventTableTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/table/EventTableTest.java	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/util/table/EventTableTest.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -1,5 +1,6 @@
 package org.strategoxt.debug.core.util.table;
 
+import java.io.File;
 import java.util.List;
 
 import junit.framework.Assert;
@@ -21,7 +22,7 @@
 	@Test
 	public void testReadTable()
 	{
-		String location = "working/localvar/stratego/localvar.table";
+		File location = new File("working/localvar/stratego/localvar.table");
 		EventTable eventTable = EventTable.readEventTable(location);
 		Assert.assertNotNull("EventTable is not initialized, check if the table file exists. ", eventTable);
 		Assert.assertEquals(74, eventTable.size());

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/plugin.xml	Tue Mar 22 12:52:52 2011	(r22420)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/plugin.xml	Wed Mar 23 23:03:45 2011	(r22421)
@@ -9,6 +9,12 @@
             id="org.strategoxt.imp.debug.ui.launchConfigurationTabGroup.str"
             type="org.strategoxt.imp.debug.core.launchConfigurationType.str">
       </launchConfigurationTabGroup>
+      <launchConfigurationTabGroup
+            class="org.strategoxt.imp.debug.ui.str.launching.HybridInterpreterTabGroup"
+            description="Run or debug a Stratego program with the HybridInterpreter"
+            id="org.strategoxt.imp.debug.ui.launchConfigurationTabGroup.hybridinterpreter"
+            type="org.strategoxt.imp.debug.core.launchConfigurationType.hybridinterpreter">
+      </launchConfigurationTabGroup>
    </extension>
    <extension
          point="org.eclipse.debug.ui.launchConfigurationTypeImages">

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/HybridInterpreterTabGroup.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/HybridInterpreterTabGroup.java	Wed Mar 23 23:03:45 2011	(r22421)
@@ -0,0 +1,24 @@
+package org.strategoxt.imp.debug.ui.str.launching;
+
+import org.eclipse.debug.ui.AbstractLaunchConfigurationTabGroup;
+import org.eclipse.debug.ui.CommonTab;
+import org.eclipse.debug.ui.ILaunchConfigurationDialog;
+import org.eclipse.debug.ui.ILaunchConfigurationTab;
+import org.eclipse.debug.ui.sourcelookup.SourceLookupTab;
+
+public class HybridInterpreterTabGroup extends
+		AbstractLaunchConfigurationTabGroup {
+
+	public HybridInterpreterTabGroup() {
+		// TODO Auto-generated constructor stub
+	}
+
+	public void createTabs(ILaunchConfigurationDialog dialog, String mode) {
+		setTabs(new ILaunchConfigurationTab[] {
+				//new StrategoMainTab(), // TODO: implement HybridInterpreter tab
+				new SourceLookupTab(), // was sourcelookuptab
+				new CommonTab()
+		});
+	}
+
+}

From L.C.L.Kats at tudelft.nl  Thu Mar 24 10:26:35 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 24 Mar 2011 09:26:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22422 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: syntax trans
Message-ID: <20110324092635.2AD787F8062@mx1.tudelft.nl>

Author: LennartKats
Date: Thu Mar 24 09:26:32 2011
New Revision: 22422
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22422&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Wed Mar 23 23:03:45 2011	(r22421)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Mar 24 09:26:32 2011	(r22422)
@@ -24,35 +24,37 @@
     "start" "symbol" ID -> Header {cons("TopSort")}
     "language" ID       -> Header {cons("Language")}
 
-    ParseTest    -> TestDecl
+    Test         -> TestDecl
     StrategoTest -> TestDecl
     VarDecl      -> TestDecl
 
   %% The description syntax is very ambiguous if comments are allowed around it. So, we forbid comments.
   syntax
-    "setup" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> -> <ParseTest-CF> {cons("Setup")}
-    "setup" <Space-LEX> <Description-CF>                         -> <ParseTest-CF> {cons("SetupEmpty")}
+    %% TODO: support tests with no fragment (other than the setup blocks) but only a condition
+    
+    "setup" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> -> <Test-CF> {cons("Setup")}
+    "setup" <Space-LEX> <Description-CF>                         -> <Test-CF> {cons("SetupEmpty")}
 
-    "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> <LAYOUT?-CF> <Result*-CF> -> <ParseTest-CF> {cons("Test")}
-    "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <TestStrategy-CF> <LAYOUT?-CF> <StrategoResult-CF>
+    "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <Input-CF> <LAYOUT?-CF> <Result*-CF> -> <Test-CF> {cons("Test")}
+    "test" <Space-LEX> <Description-CF> <LAYOUT?-CF> <TestStratego-CF> <LAYOUT?-CF> <StrategoResult-CF>
       -> <StrategoTest-CF> {cons("TestStratego")}
-    "test" <Space-LEX> <Description-CF> -> <ParseTest-CF> {cons("TestEmpty")}
+    "test" <Space-LEX> <Description-CF> -> <Test-CF> {cons("TestEmpty")}
 
   context-free syntax
     ID "=" ATerm -> VarDecl {cons("VarDecl")}
 
   context-free syntax
-               -> StrategoResult {cons("StrategySuccess")}
-    "succeeds" -> StrategoResult {cons("StrategySuccess")}
-    "fails"    -> StrategoResult {cons("StrategyFails")}
-    "=>" ATerm -> StrategoResult {cons("StrategyEquals")}
-    "->" ATerm -> StrategoResult {cons("StrategyEquals"), deprecated("Use => instead of ->")}
-    Strategy   -> TestStrategy
-
-    String                               -> TestStrategy {reject}
-    "[" {Strategy ","}* "]"              -> TestStrategy {reject}
-    "[" {Strategy ","}* "|" Strategy "]" -> TestStrategy {reject}
-    Strategy "=>" Term                   -> TestStrategy {reject}
+               -> StrategoResult {cons("StrategoSuccess")}
+    "succeeds" -> StrategoResult {cons("StrategoSuccess")}
+    "fails"    -> StrategoResult {cons("StrategoFails")}
+    "=>" ATerm -> StrategoResult {cons("StrategoEquals")}
+    "->" ATerm -> StrategoResult {cons("StrategoEquals"), deprecated("Use => instead of ->")}
+    Strategy   -> TestStratego
+
+    String                               -> TestStratego {reject}
+    "[" {Strategy ","}* "]"              -> TestStratego {reject}
+    "[" {Strategy ","}* "|" Strategy "]" -> TestStratego {reject}
+    Strategy "=>" Term                   -> TestStratego {reject}
     "succeeds"                           -> Term {reject}
     "fails"                              -> Term {reject}
 
@@ -87,9 +89,17 @@
     "resolves" ResolveID "to" ResolveID        -> Result {cons("ResolvesTo")}
     "completes" CompletionID                   -> Result {cons("Completes")}
     "completes" CompletionID "to" CompletionID -> Result {cons("CompletesTo")}
+    
+    %% TODO: implement the following:
+    TestStratego                               -> Result {cons("Stratego")} 
     "builds" ID                                -> Result {cons("Builds")}
-    "builds" ID "to" ATerm                     -> Result {cons("BuildsTo")}
+    "builds" ID "to" ATerm                     -> Result {cons("BuildsToTerm")}
+    "builds" ID "to" Output                    -> Result {cons("BuildsToTree")}
     "builds" ID "to" "file" PathName           -> Result {cons("BuildsFile")}
+    "runs" ID                                  -> Result {cons("Runs")}
+    "runs" ID "to" ATerm                       -> Result {cons("RunsTo")}
+    "runs" ID "to" Output                      -> Result {cons("RunsToTre")}
+    "runs" ID "to" "file" PathName             -> Result {cons("RunsFile")}
     %% TODO: hover help, refactoring, run, builds to with an 'Output' concrete syntax tree
 
     RegexExp          -> Constraint
@@ -146,11 +156,22 @@
 
   %% Too close to Stratego
   %%<Bracket1-LEX> <InputChars21-LEX> <CloseBracket1-LEX> -> <Input-CF> {cons("string")}
-
     <Bracket2-LEX> <InputChars22-LEX> <CloseBracket2-LEX> -> <Input-CF> {cons("string")}
     <Bracket3-LEX> <InputChars23-LEX> <CloseBracket3-LEX> -> <Input-CF> {cons("string")}
     <Bracket4-LEX> <InputChars24-LEX> <CloseBracket4-LEX> -> <Input-CF> {cons("string")}
 
+  %% Too close to Stratego
+  %%  <DQuote1-LEX> <InputChars1-LEX> <DQuote1-LEX> -> <Output-CF> {cons("string")}
+    <DQuote2-LEX> <InputChars2-LEX> <DQuote2-LEX> -> <Output-CF> {cons("string")}
+    <DQuote3-LEX> <InputChars3-LEX> <DQuote3-LEX> -> <Output-CF> {cons("string")}
+    <DQuote4-LEX> <InputChars4-LEX> <DQuote4-LEX> -> <Output-CF> {cons("string")}
+
+  %% Too close to Stratego
+  %%<Bracket1-LEX> <InputChars21-LEX> <CloseBracket1-LEX> -> <Output-CF> {cons("string")}
+    <Bracket2-LEX> <InputChars22-LEX> <CloseBracket2-LEX> -> <Output-CF> {cons("string")}
+    <Bracket3-LEX> <InputChars23-LEX> <CloseBracket3-LEX> -> <Output-CF> {cons("string")}
+    <Bracket4-LEX> <InputChars24-LEX> <CloseBracket4-LEX> -> <Output-CF> {cons("string")}
+
   sorts Name Description
   context-free syntax
     EOLString -> Description {cons("description")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Wed Mar 23 23:03:45 2011	(r22421)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Mar 24 09:26:32 2011	(r22422)
@@ -42,7 +42,7 @@
       else
         messages' := ([], [], [])
       end
-    ; if !expectations; debug(!"expects") => [] then
+    ; if !expectations => [] then
         warnings := <filter(check-expectation(|input, messages'))> [Success()]
       else
         warnings := <filter(check-expectation(|input, messages'))> expectations
@@ -116,9 +116,9 @@
     ; not(<aterm-eq> (exploded, <aterm-appl0-to-fun> p))
 
   check-expectation(|ast, messages) :
-    <not(is-semantic-failure-allowed)> -> $[Unexpected message(s)!!: [<grab-messages> messages]]
+    <not(is-semantic-failure-allowed)> -> $[Unexpected message(s): [<grab-messages> messages]]
     where
-      not(!messages => ([], [], []))
+      not(!messages => ([], [], _))
   
   is-semantic-failure-allowed =
     Fails() + ?Errors(_) + ?Error(_) + ?Warning(_) + ?Warnings(_)

From L.C.L.Kats at tudelft.nl  Thu Mar 24 10:29:24 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 24 Mar 2011 09:29:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22423 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	services stratego
Message-ID: <20110324092924.A96192B800C@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Mar 24 09:29:24 2011
New Revision: 22423
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22423&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Thu Mar 24 09:26:32 2011	(r22422)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Thu Mar 24 09:29:24 2011	(r22423)
@@ -604,7 +604,7 @@
 		return null;
 	}
 	
-	private void configureRuntime(IResource resource) {
+	public void configureRuntime(IResource resource) {
 		assert getLock().isHeldByCurrentThread();
 		
 		try {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetPrimitive.java	Thu Mar 24 09:26:32 2011	(r22422)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginOffsetPrimitive.java	Thu Mar 24 09:29:24 2011	(r22423)
@@ -13,7 +13,7 @@
  * @author Maartje de Jonge
  */
 public class OriginOffsetPrimitive extends AbstractOriginPrimitive {
-
+	
 	public OriginOffsetPrimitive() {
 		super("SSL_EXT_origin_offset");
 	}
@@ -34,6 +34,7 @@
 	}
 
 	private static int getEndPosNode(ISimpleTerm node){
+		// XXX: why deviate from the normal inclusive end offset convention??
 		return getRightToken(node).getEndOffset()+1; //exclusive end
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Thu Mar 24 09:26:32 2011	(r22422)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Thu Mar 24 09:29:24 2011	(r22423)
@@ -16,6 +16,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.TermVisitor;
 import org.spoofax.terms.attachments.ParentAttachment;
+import org.strategoxt.imp.generator.generator;
 import org.strategoxt.imp.generator.position_of_term_1_0;
 import org.strategoxt.imp.generator.term_at_position_0_1;
 import org.strategoxt.imp.runtime.Environment;
@@ -129,6 +130,7 @@
 		TestOrigin testOrigin = new TestOrigin();
 		testOrigin.origin = origin;
 		
+		generator.init(context);
 		IStrategoTerm perfectMatch = position_of_term_1_0.instance.invoke(context, ast, testOrigin);
 		if (perfectMatch != null) {
 			return (IStrategoList) perfectMatch;

From L.C.L.Kats at tudelft.nl  Thu Mar 24 10:30:44 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 24 Mar 2011 09:30:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22424 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax
Message-ID: <20110324093044.9D55B108C023@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Mar 24 09:30:44 2011
New Revision: 22424
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22424&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/plugin.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/plugin.xml	Thu Mar 24 09:29:24 2011	(r22423)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/plugin.xml	Thu Mar 24 09:30:44 2011	(r22424)
@@ -3,7 +3,7 @@
 
 <plugin>
        <extension point="org.eclipse.imp.runtime.languageDescription">
-          <language extensions="spo" description="SpoofaxLang" language="SpoofaxLang" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.editors.spoofax.SpoofaxLangValidator" validatorClass="org.strategoxt.imp.editors.spoofax.SpoofaxLangValidator"></language>
+          <language extensions="spx" description="SpoofaxLang" language="SpoofaxLang" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.editors.spoofax.SpoofaxLangValidator" validatorClass="org.strategoxt.imp.editors.spoofax.SpoofaxLangValidator"></language>
        </extension>
        <extension id="org.strategoxt.imp.editors.spoofax.parser" name="SpoofaxLang Parser" point="org.eclipse.imp.runtime.parser">
           <parser class="org.strategoxt.imp.editors.spoofax.SpoofaxLangParseController" language="SpoofaxLang">

From L.C.L.Kats at tudelft.nl  Thu Mar 24 10:33:10 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 24 Mar 2011 09:33:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22425 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax: editor
	syntax trans/sdf
Message-ID: <20110324093310.2745D2B8026@mx2.tudelft.nl>

Author: LennartKats
Date: Thu Mar 24 09:33:09 2011
New Revision: 22425
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22425&sc=1

Log:
- moving towards {"Label"} for constructors instead of {cons("Label")}
- syntax highlighting tweaks
- fixed minor ambiguities
- added experimental @ syntax for namespaces in syntax

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/check.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv	Thu Mar 24 09:30:44 2011	(r22424)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/editor/SpoofaxLang-Colorer.esv	Thu Mar 24 09:33:09 2011	(r22425)
@@ -6,4 +6,13 @@
                                                                       
   // This file can be used for custom colorer rules.                  
   //                                                                  
-  // See the imported file for a brief introduction and examples.     
\ No newline at end of file
+  // See the imported file for a brief introduction and examples.     
+  
+  
+  _.Constructor : 64 64 255 bold
+  Namespace     : darkgreen 
+  Label         : gray
+  
+  _.namespaceref  : 0   96  96 italic
+  _.namespaceref2 : 0   96  96 italic
+  _.namespacedef  : 0   96  96 italic
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Thu Mar 24 09:30:44 2011	(r22424)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/SpoofaxLang.sdf	Thu Mar 24 09:33:09 2011	(r22425)
@@ -5,6 +5,7 @@
 imports
   SPXCommon
   Concepts
+  Naming
   EditorServiceMix[ESV]
   Stratego-AttributesMix[STR] [
     "imports" ImportModName* -> Decl {cons("Imports")}
@@ -66,37 +67,51 @@
     "package" QIDWithDots                -> Import {cons("PackageImport")}
     "(" Import ")"                       -> Import {bracket, deprecated} %% SDF-style import
     
-    "project"           -> ModuleName {reject}
-    "retain"            -> ModuleName {reject}
-    "with"              -> ModuleName {reject} %% future use?
-    "unimports"         -> ModuleName {reject}
+    "project"           -> Reserved
+    "retain"            -> Reserved
+    "with"              -> Reserved %% future use?
+    "unimports"         -> Reserved
+    
+    "imports"           -> Reserved
+    "overlays"          -> Reserved
+    "rules"             -> Reserved
+    "signature"         -> Reserved
+    "strategies"        -> Reserved
+    "attributes"        -> Reserved
+    
+    "aliases"           -> Reserved
+    "lexical"           -> Reserved
+    "priorities"        -> Reserved
+    "context-free"      -> Reserved
+    "definition"        -> Reserved
+    "syntax"            -> Reserved
+    "variables"         -> Reserved
+    "module"            -> Reserved
+    "imports"           -> Reserved
+    "exports"           -> Reserved
+    "hiddens"           -> Reserved
+    "left"              -> Reserved
+    "right"             -> Reserved
+    "assoc"             -> Reserved
+    "non-assoc"         -> Reserved
+    "bracket"           -> Reserved
+    "sorts"             -> Reserved
+    "bracket"           -> Reserved
+    "sorts"             -> Reserved
+    "restrictions"      -> Reserved
+    "scopes"            -> Reserved
+    
+    Reserved            -> ReservedName[[ESV]]
     
     ReservedName[[ESV]] -> ModuleName {reject}
     
-    "imports"           -> ModuleName {reject}
-    "overlays"          -> ModuleName {reject}
-    "rules"             -> ModuleName {reject}
-    "signature"         -> ModuleName {reject}
-    "strategies"        -> ModuleName {reject}
-    "attributes"        -> ModuleName {reject}
-    
-    "aliases"           -> ModuleName {reject}
-    "lexical"           -> ModuleName {reject}
-    "priorities"        -> ModuleName {reject}
-    "context-free"      -> ModuleName {reject}
-    "definition"        -> ModuleName {reject}
-    "syntax"            -> ModuleName {reject}
-    "variables"         -> ModuleName {reject}
-    "module"            -> ModuleName {reject}
-    "imports"           -> ModuleName {reject}
-    "exports"           -> ModuleName {reject}
-    "hiddens"           -> ModuleName {reject}
-    "left"              -> ModuleName {reject}
-    "right"             -> ModuleName {reject}
-    "assoc"             -> ModuleName {reject}
-    "non-assoc"         -> ModuleName {reject}
-    "bracket"           -> ModuleName {reject}
-    "sorts"             -> ModuleName {reject}
-    "bracket"           -> ModuleName {reject}
-    "sorts"             -> ModuleName {reject}
-    "restrictions"      -> ModuleName {reject}
+
+  context-free syntax %% simplified constructors, highlight annos
+    
+    Constructor                 -> Attribute[[SDF]] {prefer, cons("Constructor")}
+    "recover"                   -> Attribute[[SDF]] {prefer, ast("term(default(fun(unquoted(\"recover\"))))")}
+    "incremental"               -> Attribute[[SDF]] {prefer, ast("term(default(fun(unquoted(\"incremental\"))))")}
+    "deprecated"                -> Attribute[[SDF]] {prefer, ast("term(default(fun(unquoted(\"deprecated\"))))")}
+    "deprecated" "(" STRING ")" -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"deprecated\"), [fun(quoted(<1>))])))")}
+    "cons" "(" Constructor ")"  -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"cons\"), [fun(quoted(<1>))])))")}
+    StrCon[[SDF]]               -> Constructor
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Thu Mar 24 09:30:44 2011	(r22424)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/analysis.str	Thu Mar 24 09:33:09 2011	(r22425)
@@ -48,9 +48,11 @@
     prod @ prod(lhs, sort, _) -> <id>
     where
       x:= <get-rhs-sort-name>sort
-   where
+    with
   		<store-operation-declaration>prod
     with
+      <topdown(try(store-namespace-def))> lhs
+    with
       <Declaration> x
     <+
       file := <CurrentFile>
@@ -64,6 +66,11 @@
       )
     with
       <alltd(declare-sdf-use)> lhs
+  
+  store-namespace-def:
+    namespacedef(name, sort) -> <id>
+    where
+      rules(NamespaceSort: name -> sort)
       
 	declare-sdf-globals:
 		lex-syntax at lexical-syntax(lex-defintions) ->lex-syntax

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/check.str	Thu Mar 24 09:30:44 2011	(r22424)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/check.str	Thu Mar 24 09:33:09 2011	(r22425)
@@ -19,7 +19,7 @@
 rules // Local checks
   
   context-free-syntax-warning:
-    prod(p*, s, a*) -> (target, $[Missing {cons("Label")} attribute to label the abstract syntax])
+    prod(p*, s, a*) -> (target, $[Missing {"Label"} attribute to label the abstract syntax])
     where
       (
         not(<occurrences(?sort(_))> p* => 1; <occurrences(?lit(_))> p* => 0)
@@ -28,6 +28,7 @@
       );
       if !a* => attrs(a'*) then
         not(<one(term(default(appl(unquoted("cons" + "ast"), [fun(quoted(not("\"\"")))]))))> a'*);
+        not(<one(?Constructor(_))> a'*);
         not(<one(bracket() + reject())> a'*);
         not(!s; (sort("Keyword") + sort("\"Keyword\""))); 
         target := a*

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Thu Mar 24 09:30:44 2011	(r22424)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/sdf/to-sdf.str	Thu Mar 24 09:33:09 2011	(r22425)
@@ -29,7 +29,7 @@
       (name, relative-autogen-path) := <find-spoofax-module-name-string>(path, def)
       ;sdf-import-stmt* := 'imports( <map(spximport-to-sdfimport)>import-stmt* )
       ;sections  := <collect-om(?SDFSection(<id>) + ?SDFSectionEH(_, <id>), conc)> def
-      ;sections' := <alltd(desugar-sdf-redux)> <list-to-conc-grammars> sections
+      ;sections' := <topdown(repeat(desugar-sdf-redux))> <list-to-conc-grammars> sections
  
  rules
  
@@ -74,10 +74,10 @@
 		  declared-concept-entries := <get-all-declared-entries>
 		  ;main-sdf-file-name := $[[main-package-name]-main]
 		  ;sdf-string := 
-$[module [relative-autogen-path]/[main-sdf-file-name]
-imports
-	[<project-allkeys-declared(to-sdf-import)>declared-concept-entries]   									 
-]
+       $[module [relative-autogen-path]/[main-sdf-file-name]
+         imports
+	         [<project-allkeys-declared(to-sdf-import)>declared-concept-entries]   									 
+        ]
 			;autogen-dir :=$[[<Autogenerated-Artifacts-Dir>]/[relative-autogen-path]]
 			;output-path := <get-fullyqualified-autogen-path(|"sdf")>(project-path, autogen-dir , main-sdf-file-name)
 			;<ensure-exists>(project-path, autogen-dir) 
@@ -96,9 +96,23 @@
     box2text-string(|80)			 
 
 rules
-  // TODO: also support {"Module(<2>, <1>)"}
+  // TODO: also support Constructor("Module(<2>, <1>)") => {ast("...")}?
+  //desugar-sdf-redux:
+  //  term(default(fun(quoted(s)))) -> term(default(appl(unquoted("cons"), [fun(quoted(s))])))
+
+  desugar-sdf-redux:
+    Constructor(s) -> term(default(appl(unquoted("cons"), [fun(quoted(s))])))
+
+  desugar-sdf-redux:
+    namespacedef(_, s) -> s
+
+  desugar-sdf-redux:
+    namespaceref(n) -> sort(s')
+    where
+      s' := <NamespaceSort <+ !"ID"> n
+
   desugar-sdf-redux:
-    term(default(fun(quoted(s)))) -> term(default(appl(unquoted("cons"), [fun(quoted(s))])))
+    namespaceref2(n, s) -> s
   
   list-to-conc-grammars:
     [g1, g2 | gs] -> conc-grammars(g1, <list-to-conc-grammars> [g2 | gs])

From L.C.L.Kats at tudelft.nl  Thu Mar 24 10:34:03 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 24 Mar 2011 09:34:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22426 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax
Message-ID: <20110324093403.54481108C01D@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Mar 24 09:34:03 2011
New Revision: 22426
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22426&sc=1

Log:
experimental syntax for namespaces

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Naming.sdf

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Naming.sdf
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/syntax/Naming.sdf	Thu Mar 24 09:34:03 2011	(r22426)
@@ -0,0 +1,37 @@
+module Naming
+
+imports Common
+
+exports
+
+context-free syntax
+  
+  Namespace "@=" Symbol[[SDF]] -> Symbol[[SDF]] {cons("namespacedef")}
+  
+  IdCon[[SDF]] -> Namespace
+
+syntax
+  
+  %% controlled layout for "@"
+
+  "@" <Namespace-CF> -> <Symbol[[SDF]]-CF> {cons("namespaceref")}
+  
+  <Namespace-CF> "@" <Symbol[[SDF]]-CF> -> <Symbol[[SDF]]-CF> {cons("namespaceref2")}
+
+context-free syntax
+
+%%  "scopes" ScopeList* -> Section {cons("Scopes")}
+%%  
+%%  "@" Namespace ":" Scope -> ScopeList {cons("ScopeList")}
+%%  
+%%  ID+ -> Scope {cons("Scope")}
+
+  "scope" "(" {Namespace ","}+ ")" -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"scope\"), [fun(quoted(<1>))])))")}
+
+%%  "scope" "(" "*" ")" -> Attribute[[SDF]] {prefer, ast("term(default(appl(unquoted(\"scope\"), [fun(quoted(\"*\"))])))")}
+
+  
+
+lexical restrictions
+  
+  Sort[[SDF]] -/- [\@]

From L.C.L.Kats at tudelft.nl  Thu Mar 24 15:38:45 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 24 Mar 2011 14:38:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22427 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing:
	editor/java/org/strategoxt/imp/testing syntax trans
Message-ID: <20110324143845.33AFB108C013@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Mar 24 14:38:44 2011
New Revision: 22427
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22427&sc=1

Log:
some more syntax updates, and abstract syntax fixes

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java	Thu Mar 24 09:34:03 2011	(r22426)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java	Thu Mar 24 14:38:44 2011	(r22427)
@@ -33,12 +33,7 @@
     return descriptor;
   }
 
-  protected static synchronized void setDescriptor(Descriptor descriptor)
-  { 
-    SpoofaxTestingParseControllerGenerated.descriptor = descriptor;
-  }
-
-  protected static void createDescriptor()
+  private static void createDescriptor()
   { 
     try
     { 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Mar 24 09:34:03 2011	(r22426)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Mar 24 14:38:44 2011	(r22427)
@@ -93,13 +93,13 @@
     %% TODO: implement the following:
     TestStratego                               -> Result {cons("Stratego")} 
     "builds" ID                                -> Result {cons("Builds")}
-    "builds" ID "to" ATerm                     -> Result {cons("BuildsToTerm")}
-    "builds" ID "to" Output                    -> Result {cons("BuildsToTree")}
-    "builds" ID "to" "file" PathName           -> Result {cons("BuildsFile")}
-    "runs" ID                                  -> Result {cons("Runs")}
-    "runs" ID "to" ATerm                       -> Result {cons("RunsTo")}
-    "runs" ID "to" Output                      -> Result {cons("RunsToTre")}
-    "runs" ID "to" "file" PathName             -> Result {cons("RunsFile")}
+    "builds" ID "to" ATerm                     -> Result {cons("BuildsTo")}
+    %%"builds" ID "to" Output                  -> Result {cons("BuildsToTree")}
+    "builds" ID "to" "file" PathName           -> Result {cons("BuildsToFile")}
+    "runs" ID "using" STRING                   -> Result {cons("Runs")}
+    "runs" ID "using" STRING "to" ATerm        -> Result {cons("RunsTo")}
+    %%"runs" ID "using" STRING "to" Output     -> Result {cons("RunsToTree")}
+    "runs" ID "using" STRING "to" "file" PathName -> Result {cons("RunsToFile")}
     %% TODO: hover help, refactoring, run, builds to with an 'Output' concrete syntax tree
 
     RegexExp          -> Constraint

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Mar 24 09:34:03 2011	(r22426)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Thu Mar 24 14:38:44 2011	(r22427)
@@ -36,7 +36,7 @@
     ; if not(<?[_ | _]; all(is-parse-only-test)> expectations) then
         // TODO: set starting directory to project path using invoke-plugin-strategy
         plugin-strategy-invoke(|<Language>, "editor-init")
-      ; input'    := (input, <project-path>, <InputFile>)
+      ; input'    := (input, <InputFile>, <project-path>)
       ; messages  := <plugin-strategy-invoke(|<Language>, <spt-get-observer>)> input'
       ; messages' := <strip-and-record-analyzed-ast <+ reset-analyzed-ast> <try(?Some(<id>))> messages
       else
@@ -154,7 +154,16 @@
     BuildsTo(_, _) -> $[Not implemented: [<write-to-string>]]
 
   check-expectation(|ast, messages) :
-    BuildsFile(_, _) -> $[Not implemented: [<write-to-string>]]
+    BuildsToFile(_, _) -> $[Not implemented: [<write-to-string>]]
+
+  check-expectation(|ast, messages) :
+    Runs(x, y) -> <check-expectation(|ast, messages)> RunsTo(x, y, wildcard())
+
+  check-expectation(|ast, messages) :
+    RunsTo(_, _, _) -> $[Not implemented: [<write-to-string>]]
+
+  check-expectation(|ast, messages) :
+    RunsToFile(_, _, _) -> $[Not implemented: [<write-to-string>]]
 
   check-expectation(|ast, messages) :
     VarDecl(_, _) -> $[Not implemented: [<write-to-string>]]
@@ -194,7 +203,7 @@
     where
       plugin-strategy-invoke(|<Language>, "editor-init")
     ; s' := SDefT(d, [], [], s)
-    ; result := <plugin-strategy-evaluate(<not(StrategyFails)> expectation
+    ; result := <plugin-strategy-evaluate(<not(StrategoFails)> expectation
                                           |<Language>, s')> ()
     ; try(<grab-strategy-success-result(|d, result)> expectation)
     ; if !result => Error(error) then
@@ -204,23 +213,23 @@
       end
 
   check-expectation(|result) :
-    StrategyFails() -> $[Failure expected: <pre>[<write-to-string> result']</pre>]
+    StrategoFails() -> $[Failure expected: <pre>[<write-to-string> result']</pre>]
     where
       !result => Some(result')
 
   grab-strategy-success-result(|d, result) :
-    StrategySuccess() -> StrategySuccess()
+    StrategoSuccess() -> StrategoSuccess()
     where
       !result => Some(result')
     ; rules(GrabbedNotes :+= (d, $[Result: [<write-to-string> result'] (no => expectation specified)]))
 
   check-expectation(|result) :
-    <not(StrategyFails)> -> $[Failure unexpected: <pre>[trace]</pre>]
+    <not(StrategoFails)> -> $[Failure unexpected: <pre>[trace]</pre>]
     where
       !result => Fail(trace)
 
   check-expectation(|result) :
-    StrategyEquals(p) -> $[Unexpected result: [<write-to-string> result']]
+    StrategoEquals(p) -> $[Unexpected result: [<write-to-string> result']]
     where
       !result => Some(result')
     ; result'' := <explode-aterm> result'

From r.t.lindeman at student.tudelft.nl  Thu Mar 24 17:12:28 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 24 Mar 2011 16:12:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22428 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core...
Message-ID: <20110324161228.4FF422B8069@mx2.tudelft.nl>

Author: RickyLindeman
Date: Thu Mar 24 16:12:27 2011
New Revision: 22428
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22428&sc=1

Log:
Implemented the launch delegate for the HybridInterpreterLaunch so the DebuggableHybridInterpreter can use it.

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/LineBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofaxExtra.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestHybridInterpreterLauncher.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/LaunchUtils.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncher.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoLaunchShortcut.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -5,6 +5,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
+import org.eclipse.debug.core.ILaunchManager;
 import org.spoofax.interpreter.core.InterpreterErrorExit;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.InterpreterExit;
@@ -46,6 +50,7 @@
 	 */
 	public DebuggableHybridInterpreter(HybridInterpreter interpreter, String... reuseRegistries) {
 		
+		super(interpreter, reuseRegistries);
 	}
 	
 	private List<URL> loadJars = new ArrayList<URL>();
@@ -60,6 +65,17 @@
 			loadJars.add(jarURL);
 		}
 
+		super.loadJars(parentClassLoader, jars);
+	}
+	
+	private List<String> getLoadJarsAsList()
+	{
+		List<String> list = new ArrayList<String>();
+		for(URL jarURL : this.loadJars)
+		{
+			list.add(jarURL.getPath());
+		}
+		return list;
 	}
 	
 	/**
@@ -75,11 +91,43 @@
 			// launch a JVM
 			// http://www.eclipse.org/articles/Article-Java-launch/launching-java.html
 			
-			// TODO: find HybridInterpreter launch config
+			// find HybridInterpreter launch config
+			ILaunchConfigurationWorkingCopy configWC = LaunchUtils.createHybridInterpreterLaunchConfigurationWorkingCopy();
+			if (configWC == null)
+			{
+				System.err.println("No config working copy!");
+			}
 			// set the required attributes
+			
+			// strategy name
+			// IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME
+			configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME, name);
+			
+			// required jars
+			// IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS
+			configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS, getLoadJarsAsList());
+			
+			// also set the path to the project, breakpoints 
+			// IStrategoConstants.ATTR_STRATEGO_PROGRAM
+			// TODO: set the project path, so we can filter breakpoints limited to this project
+			configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String) null);
+			//org.example.lang1
+			// classpath
+			// IStrategoConstants.ATTR_STRATEGO_CLASSPATH
+			
+			
 			// and launch
+			try {
+				ILaunchConfiguration config = configWC.doSave();
+				config.launch(ILaunchManager.DEBUG_MODE, null);
+			} catch (CoreException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
 			
-			return super.invoke(name);
+			// TODO: wait for launch to finish
+			boolean result = super.invoke(name);
+			return result;
 		} catch (StrategoErrorExit e) {
 			throw new InterpreterErrorExit(e.getMessage(), e.getTerm(), e);
         } catch (StrategoExit e) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -13,12 +13,17 @@
 import org.eclipse.debug.core.DebugPlugin;
 import org.eclipse.debug.core.ILaunch;
 import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.ILaunchManager;
 import org.eclipse.debug.core.IStatusHandler;
 import org.eclipse.debug.core.model.ILaunchConfigurationDelegate;
-import org.strategoxt.debug.core.control.DebugSessionManager;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
-import org.strategoxt.debug.core.util.DebugSessionSettingsFactory;
+import org.eclipse.jdt.launching.IVMInstall;
+import org.eclipse.jdt.launching.IVMRunner;
+import org.eclipse.jdt.launching.JavaRuntime;
+import org.eclipse.jdt.launching.VMRunnerConfiguration;
 import org.strategoxt.debug.core.util.FileUtil;
+import org.strategoxt.debug.core.util.StringUtil;
+import org.strategoxt.eclipse.ant.StrategoJarAntPropertyProvider;
+import org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget;
 
 public class HybridInterpreterLaunchDelegate implements
 		ILaunchConfigurationDelegate {
@@ -32,7 +37,7 @@
 		// get name of the strategy
 		String name = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME, (String)null);
 		if (name == null) {
-			abort("Stratego program unspecified.", null);
+			abort("Strategy name unspecified.", null);
 			return;
 		}
 		// get required jars that we want to load
@@ -42,13 +47,14 @@
 			requiredJars = new ArrayList<String>();
 		}
 		// get the classpath
-		String classpathAttr = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_CLASSPATH, (String)null);
+		//String classpathAttr = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_CLASSPATH, (String)null);
+		/*
 		if (classpathAttr == null) {
-			abort("Stratego program unspecified.", null);
+			abort("Classpath unspecified.", null);
 			return;
-		}
+		}*/
 		
-		String flatJarList = "";
+		//String flatJarList = "";
 		List<IPath> jarPaths = new ArrayList<IPath>();
 		Iterator iter = requiredJars.iterator();
 		while(iter.hasNext())
@@ -61,31 +67,93 @@
 				String urlPath = (String) oNext;
 				IPath jarPath = new Path(urlPath);
 				jarPaths.add(jarPath);
-				flatJarList += urlPath + " ";
+				//flatJarList += urlPath + " ";
 			}
 		}
 
 		String invokeStrategy = name; // this strategy will be executed
 		String invokeStrategyArguments = name; // the arguments for the strategy
-		String argsForMainClass = flatJarList + " " + invokeStrategy + " " + invokeStrategyArguments;
 		
 		String mainClass = "org.strategoxt.HybridInterpreter";
-		String mainArgs = mainClass + " " + argsForMainClass;
+
+		String[] jarArray = FileUtil.convertIPathToStringArray(jarPaths); // + invokeStrategy + " " + invokeStrategyArguments;
+		String[] args = new String[] { invokeStrategy, invokeStrategyArguments };
+
+		List<IPath> classpaths = jarPaths;
+		// also add strategoxt.jar
+		classpaths.add(new Path(StrategoJarAntPropertyProvider.getStrategoJarPath()));
+		
+		LaunchSettings ls = new LaunchSettings();
+		ls.classToLaunch = mainClass;
+		ls.classpath = FileUtil.convertIPathToStringArray(classpaths);
 		
-		//String classpath = FileUtil.convertIPathToClasspath(jarPaths);
+		ls.programArguments = StringUtil.concat(jarArray, args);
+		ls.mode = ILaunchManager.DEBUG_MODE;
+		
+		launchVM(monitor, launch, ls);
 		//String cp = "" + jar + ":" + javaJar; // + ":" + utilsDir+"/strategoxt.jar";
 		//String classpath = cp;
 		
+		/*
 		DebugSessionSettings debugSessionSettings = DebugSessionSettingsFactory.create(new Path("workingdirectory"), "projectname");
 		IPath libDir = FileUtil.getLibDirectory(); // contains the rtree
 		debugSessionSettings.setJarLibraryDirectory(libDir);
 		DebugSessionManager dsm = new DebugSessionManager();
-		List<IPath> classpaths = jarPaths;
+
 		IPath tableDirectory = null;
 		dsm.initVM(mainArgs, classpaths, tableDirectory, "LAUNCH");
 		dsm.setupEventListeners();
 		dsm.redirectOutput();
 		dsm.runVM();
+		*/
+	}
+	
+	class LaunchSettings {
+		public String classToLaunch;
+		public String[] classpath;
+		
+		public String[] programArguments;
+		
+		public String mode;
+	}
+	
+	private void launchVM(IProgressMonitor monitor, ILaunch launch, LaunchSettings ls) throws CoreException
+	{
+		// Initialize the VMRunner
+		IVMInstall defaultInstall = JavaRuntime.getDefaultVMInstall();
+		IVMRunner vmRunner = defaultInstall.getVMRunner(ILaunchManager.RUN_MODE); // always use RUN, so we can control the debug parameters of the VM
+		
+		VMRunnerConfiguration vmRunnerConfiguration = new VMRunnerConfiguration(ls.classToLaunch, ls.classpath);
+		vmRunnerConfiguration.setProgramArguments(ls.programArguments);
+		
+		// the started wm will wait for a debugger to connect to this port
+		String port = ""+StrategoLaunchUtil.findFreePort();
+		
+		// if we are in DEBUG_MODE also set the debugging parameters for the VM as we previously created an IVMRunner in RUN_MODE
+		if (ls.mode.equals(ILaunchManager.DEBUG_MODE)) {
+			// socket attach
+			//String[] realVMargs = new String[] { "-Xdebug", "-Xrunjdwp:transport=dt_socket,address="+port+",server=y,suspend=y" };
+			// socket listen
+			String[] realVMargs = new String[] { "-Xdebug", "-Xrunjdwp:transport=dt_socket,address="+port+",suspend=y" };
+		//String[] realVMargs = new String[] { "-Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=y" };
+		//String[] realVMargs = new String[] { "-Xdebug" };
+			vmRunnerConfiguration.setVMArguments(realVMargs);
+		}
+		
+		if (ls.mode.equals(ILaunchManager.DEBUG_MODE)) {
+			monitor.subTask("Attaching to the Stratego VM");
+			StrategoDebugTarget target = new StrategoDebugTarget(launch, port);
+			//(launch,p,requestPort,eventPort );
+			launch.addDebugTarget(target);
+			monitor.worked(1);
+		}
+		
+		// start the VM with the stratego program
+		// using attach, run before the StrategoDebugTarget is initialized
+		// using listen, run after the StrategoDebugTarget is initialized
+		System.out.println("RUN");
+		vmRunner.run(vmRunnerConfiguration, launch, monitor);
+		monitor.worked(1);
 	}
 
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/LaunchUtils.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/LaunchUtils.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/LaunchUtils.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -30,6 +30,19 @@
 	}
 	
 	/**
+	 * Returns the type of the HybridInterpreterLaunchConfiguration.
+	 * @return
+	 */
+	public static ILaunchConfigurationType getHybridInterpreterLaunchConfigurationType()
+	{
+		ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
+		
+		//LaunchConfigurationType[] types = manager.getLaunchConfigurationTypes();
+		ILaunchConfigurationType type = manager.getLaunchConfigurationType(IStrategoConstants.ID_STRATEGO_DEBUG_MODEL + ".launchConfigurationType.hybridinterpreter");
+		return type;
+	}
+	
+	/**
 	 * Creates and returns a new configuration based on the specified type.
 	 * 
 	 * Copied from org.eclipse.jdt.debug.ui.launchConfigurations.JavaLaunchShortcut#createConfiguration(org.eclipse.jdt.core.IType)
@@ -40,7 +53,7 @@
 	 * @throws CoreException 
 	 */
 	@SuppressWarnings("deprecation")
-	public static ILaunchConfiguration createConfiguration(IFile file) throws CoreException {
+	public static ILaunchConfiguration createStrategoLaunchConfiguration(IFile file) throws CoreException {
 		ILaunchConfiguration config = null;
 
 		ILaunchConfigurationType configType = getStrategoLaunchConfigurationType();
@@ -74,6 +87,31 @@
 	}
 	
 	/**
+	 * Create a LaunchConfig for a HybridInterpreterLaunch. The caller of this method should set the appropriate attributes.
+	 * @return
+	 */
+	@SuppressWarnings("deprecation")
+	public static ILaunchConfigurationWorkingCopy createHybridInterpreterLaunchConfigurationWorkingCopy()
+	{
+		//ILaunchConfiguration config = null;
+		ILaunchConfigurationType configType = getHybridInterpreterLaunchConfigurationType();
+		
+		String namePrefix = "spoofax launchh";
+		String name = DebugPlugin.getDefault().getLaunchManager().generateUniqueLaunchConfigurationNameFrom(namePrefix);
+
+		ILaunchConfigurationWorkingCopy wc = null;
+		try {
+			wc = configType.newInstance(null, name);
+		} catch (CoreException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		// the attributes should be set in the caller of this method!
+		
+		return wc;
+	}
+	
+	/**
 	 * Get the existing launch configurations for the given stratego file.
 	 * 
 	 * @param strategoProgramPath

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -153,12 +153,12 @@
 		ls.programArguments = programArgsArray;
 		ls.mode = mode;
 		
-		launchVM(monitor, ls, debugSessionSettings, launch);
+		launchVM(monitor, ls, launch);
 
 		monitor.done();
 	}
 	
-	private void launchVM(IProgressMonitor monitor, LaunchSettings ls, DebugSessionSettings debugSessionSettings, ILaunch launch) throws CoreException
+	private void launchVM(IProgressMonitor monitor, LaunchSettings ls, ILaunch launch) throws CoreException
 	{
 		// Initialize the VMRunner
 		IVMInstall defaultInstall = JavaRuntime.getDefaultVMInstall();
@@ -183,7 +183,7 @@
 		
 		if (ls.mode.equals(ILaunchManager.DEBUG_MODE)) {
 			monitor.subTask("Attaching to the Stratego VM");
-			StrategoDebugTarget target = new StrategoDebugTarget(debugSessionSettings, launch, port);
+			StrategoDebugTarget target = new StrategoDebugTarget(launch, port);
 			//(launch,p,requestPort,eventPort );
 			launch.addDebugTarget(target);
 			monitor.worked(1);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -99,6 +99,10 @@
 		// convert linenumber and offset relative to the line to the total character offset
 		// NOTE: take care with 0-based and 1-based indices, also newlines are counted as characters
 		LineLengthTable t = this.fTarget.getDebugSessionManager().getEventSpecManager().getLineLengthTable();
+		if (t == null)
+		{
+			return -1;
+		}
 		FileLineLengthTable ft = t.getFileLineLengthTable(this.frameData.getFilename());
 		int linenumber = frameData.getCurrentLocationInfo().getEnd_line_num(); // one-based index
 		int end_token_pos = frameData.getCurrentLocationInfo().getEnd_token_pos();
@@ -110,6 +114,10 @@
 	public int getCharStart() throws DebugException {
 		// NOTE: take care with 0-based and 1-based indices, also newlines are counted as characters
 		LineLengthTable t = this.fTarget.getDebugSessionManager().getEventSpecManager().getLineLengthTable();
+		if (t == null)
+		{
+			return -1;
+		}
 		FileLineLengthTable ft = t.getFileLineLengthTable(this.frameData.getFilename());
 		int linenumber = frameData.getCurrentLocationInfo().getStart_line_num(); // one-based index
 		int start_token_pos = frameData.getCurrentLocationInfo().getStart_token_pos();

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -29,12 +29,12 @@
 import org.strategoxt.debug.core.control.DebugSessionManager;
 import org.strategoxt.debug.core.control.VMMonitor;
 import org.strategoxt.debug.core.eventspec.BreakPoint;
+import org.strategoxt.debug.core.eventspec.LineBreakPoint;
 import org.strategoxt.debug.core.eventspec.RuleEnterBreakPoint;
 import org.strategoxt.debug.core.eventspec.StrategyEnterBreakPoint;
 import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
 import org.strategoxt.debug.core.model.StrategoStackFrame;
 import org.strategoxt.debug.core.model.StrategoState;
-import org.strategoxt.debug.core.util.DebugSessionSettings;
 import org.strategoxt.debug.core.util.VMLauncherHelper;
 import org.strategoxt.debug.core.util.table.EventEntry;
 import org.strategoxt.debug.core.util.table.EventTable;
@@ -154,7 +154,7 @@
 	}
 	
 	
-	public StrategoDebugTarget(DebugSessionSettings debugSessionSettings, ILaunch launch, final String port) throws CoreException {
+	public StrategoDebugTarget(ILaunch launch, final String port) throws CoreException {
 		super(null);
 		this.fLaunch = launch;
 		// running threads
@@ -323,16 +323,18 @@
 	public boolean supportsBreakpoint(IBreakpoint breakpoint) {
 		if (breakpoint.getModelIdentifier().equals(IStrategoConstants.ID_STRATEGO_DEBUG_MODEL)) {
 			try {
-				String program = getLaunch().getLaunchConfiguration().getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String)null);
+				//if (getLaunch() instanceof StrategoL)
+				ILaunch launch = getLaunch();
+				String program = launch.getLaunchConfiguration().getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String)null);
 				// program-dir = get the dir of the program
 				// library-dirs = get the "-I" paths
 				// the given breakpoint should be a resource in a subdir of program-dir or one of the library-dirs
+				IMarker marker = breakpoint.getMarker();
+				IPath breakPointPath = marker.getResource().getFullPath(); // path to the file in which the breakpoint was set
 				if (program != null) {
-					IMarker marker = breakpoint.getMarker();
 					if (marker != null) {
 						IPath programPath = new Path(program);
 						File parent = programPath.toFile().getParentFile();
-						IPath breakPointPath = marker.getResource().getFullPath(); // path to the file in which the breakpoint was set
 						IPath subProjectPath = new Path(parent.getAbsolutePath()); // the dir in which the program is
 						System.out.println("subProjectPath: " + subProjectPath.toOSString());
 						System.out.println("breakPointPath: " + breakPointPath.toOSString() + " " + marker.getAttribute(IMarker.LINE_NUMBER));
@@ -340,6 +342,11 @@
 						return isPrefix;
 					}
 				}
+				else
+				{
+					// if launch did not define a program path, we have a HybridInterpreter launch, just except the breakpoint
+					return true;
+				}
 				// TODO: implement -I directories
 			} catch (CoreException e) {
 			}			
@@ -451,6 +458,13 @@
 		
 		// returns the type of events (s-step/r-enter/s-enter/s-exit/r-exit) can occur at the given linenumber
 		// the event type determines the breakpoint type
+		if ( this.manager.getEventSpecManager().getEventTable() == null)
+		{
+			// the table and offset files were not found
+			// just use a line breakpoint.
+			return new LineBreakPoint(filename, "", linenumber, -1);
+			
+		}
 		List<EventEntry> entries = this.manager.getEventSpecManager().getEventTable().getEventEntries(filename, linenumber);
 
 		// prefer s-step over enter/exit breakpoints

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.eclipse.jdi.TimeoutException;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.ParseError;
 import org.spoofax.terms.StringTermReader;
@@ -249,11 +250,15 @@
 		} catch (InvocationException e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
+		} catch (TimeoutException e) {
+			// TODO: what happened in the debuggee?
+			// something took too long....
+			e.printStackTrace();
 		}
 		//Value output = thread.invokeMethod(thread, method, arguments, ThreadReference.INVOKE_SINGLE_THREADED);
 		if (output == null)
 		{
-			return null;
+			return new String[0];
 		}
 		StrategoTermBuilder builder = new StrategoTermBuilder();
 		String s = builder.buildString(output); // instance of String
@@ -386,6 +391,19 @@
 		//System.out.println(event.exception());
 		// Step to the catch
 		EventRequestManager mgr = event.virtualMachine().eventRequestManager();
+		com.sun.jdi.ObjectReference ref = event.exception();
+		com.sun.jdi.ReferenceType refType =ref.referenceType();
+		for(Object obj : refType.allFields())
+		{
+			//System.out.println(obj.toString());
+		}
+		com.sun.jdi.Field field1 = refType.fieldByName("stackTrace");
+		com.sun.jdi.Field field2 = refType.fieldByName("detailMessage");
+		//com.sun.jdi.Value val1 = refType.getValue(field1);
+		//com.sun.jdi.Value val2 = refType.getValue(field2);
+		//System.out.println(val1.toString());
+		//System.out.println(val2.toString());
+		
 		StepRequest req = mgr.createStepRequest(thread, StepRequest.STEP_MIN,
 				StepRequest.STEP_INTO);
 		req.addCountFilter(1); // next step only

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -40,6 +40,11 @@
 	 */
 	public void initializeTable(IPath tableDirectory)
 	{
+		if (tableDirectory == null)
+		{
+			System.err.println("No table directory...");
+			return;
+		}
 		String extensionT = "table";
 		List<String> matches = FileUtil.getFilesWithExtension(tableDirectory.toFile(), extensionT);
 		// TODO: use the first match as we only support one file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/LineBreakPoint.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/LineBreakPoint.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -0,0 +1,43 @@
+package org.strategoxt.debug.core.eventspec;
+
+public class LineBreakPoint extends BreakPoint {
+
+	public LineBreakPoint(String filename, String name, int lineNumber,
+			int startTokenPosition) {
+		super(filename, name, lineNumber, startTokenPosition);
+	}
+
+	@Override
+	public boolean match(BreakPoint breakPoint) {
+		if (breakPoint.isVirtual())
+		{
+			return false;
+		}
+		else
+		{
+			boolean onSameLine = breakPoint.getLineNumber() == this.getLineNumber();
+			return onSameLine;
+		}
+	}
+
+	@Override
+	public boolean isEnter() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+
+	@Override
+	public boolean isExit() {
+		// TODO Auto-generated method stub
+		return false;
+	}
+	
+	/**
+	 * LineBreakPoints are virtual because we don't know the token offset.
+	 * @return
+	 */
+	public boolean isVirtual() {
+		return false;
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -18,6 +18,7 @@
 import com.sun.jdi.request.ClassPrepareRequest;
 import com.sun.jdi.request.EventRequest;
 import com.sun.jdi.request.EventRequestManager;
+import com.sun.jdi.request.ExceptionRequest;
 import com.sun.jdi.request.MethodEntryRequest;
 import com.sun.jdi.request.MethodExitRequest;
 import com.sun.jdi.request.ThreadDeathRequest;
@@ -40,6 +41,8 @@
 	
 	public static final boolean useBreakpoints = true;
 	
+	public static final boolean useExceptionRequests = true;
+	
 	public static void installDebugEventRequests(VirtualMachine vm, boolean watchFields, String[] excludes)
 	{
 		EventRequestManager mgr = vm.eventRequestManager();
@@ -54,11 +57,13 @@
 			str_cpr.enable();
 		}
 		// want all exceptions 
-		/*
-		ExceptionRequest excReq = mgr.createExceptionRequest(null, true, true); // suspend so we can step 
-		excReq.setSuspendPolicy(EventRequest.SUSPEND_ALL);
-		excReq.enable();*/
-
+		
+		if (useExceptionRequests)
+		{
+			ExceptionRequest excReq = mgr.createExceptionRequest(null, true, true); // suspend so we can step 
+			excReq.setSuspendPolicy(EventRequest.SUSPEND_ALL);
+			excReq.enable();
+		}
 
 		
 		if (useMethodRequests)

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/editor/java/org/strategoxt/imp/debug/stratego/runtime/strategies/DebugCallStrategy.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -113,6 +113,7 @@
 		this.eventInfo = factory.makeTuple(filename, name, location).toString();
 		this.givenTermString = given.toString();
 		this.current = current;
+		System.out.println("TEST " + name.toString() + " D:"+getDRKeySetString()); // adding this will prevent a TimeoutException (I think because it will trigger a ClassLoad...)
 		return current;
 	}
 	
@@ -123,6 +124,7 @@
 		String s = varname.toString();
 		this.varnameString = s;
 		this.current = current;
+		System.out.println("TEST " + name.toString() + " D:"+getDRKeySetString()); // adding this will prevent a TimeoutException (I think because it will trigger a ClassLoad...)
 		return current;
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofax.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -1,6 +1,9 @@
 package org.strategoxt.debug.core.control;
 
+import static org.junit.Assert.*;
+
 import org.eclipse.core.runtime.Path;
+import org.junit.Test;
 import org.strategoxt.debug.core.eventspec.StrategyStepBreakPoint;
 
 /**
@@ -49,6 +52,58 @@
 	public void testDSM2()
 	{
 		String includeDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include";
+		String javaJar = includeDir+"/orgexamplelang1-java.jar";
+		String jar = includeDir+"/orgexamplelang1.jar";
+		
+		String projectName = "stub";
+		createDebugSessionSettings(projectName);
+
+		// dynamically load language.jar, it will assume the language-java.jar is already on the classpath
+		String invokeStrategy = "main12"; // will converted to a java name e.g.: main12_0_0
+		String argsForMainClass = javaJar + " " + jar + " " + invokeStrategy + " " + "str.args";
+		String mainClass = "org.strategoxt.HybridInterpreter";
+		String mainArgs = mainClass + " " + argsForMainClass;
+
+		// TODO: this.debugSessionSettings.getClassDirectory() is also added but should not be used
+		this.addToClasspath(new Path(jar));
+		this.addToClasspath(new Path(javaJar));
+
+		
+		DebugSessionManager dsm = createDebugSessionManager();
+		
+		// TODO: use event table
+		
+		/*
+		(s-step(
+           | "test-main.str"
+           , "main12"
+           , LocationInfo("8", "6", "8", "20")
+           )
+		 */
+		// set breakpoint
+		String filename = "test-main.str";
+		String strategyName = "main12";
+		StrategyStepBreakPoint bp = new StrategyStepBreakPoint(filename, strategyName, 8, 6);
+		dsm.getEventSpecManager().add(bp);
+		
+		// which breakpoints will be hit?
+		VMStateTester vmStateTester = new VMStateTester(VMStateTesterCompareType.Name);
+		String term = null;
+		term = "\"\""; // empty string
+		vmStateTester.addStrategoState("main12", termReader.parseFromString(term));
+		
+		vmStateTester.initialize();
+		vmMonitor.setVMStateTester(vmStateTester);
+		
+		System.out.println("RUN");
+		// start the debug session
+		start(dsm, mainArgs);
+	}
+	
+	@org.junit.Test
+	public void testDSM3()
+	{
+		String includeDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include";
 		//String utilsDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/utils";
 		String javaJar = includeDir+"/orgexamplelang1-java.jar";
 		String jar = includeDir+"/orgexamplelang1.jar";
@@ -69,7 +124,6 @@
 		// TODO: this.debugSessionSettings.getClassDirectory() is also added but should not be used
 		this.addToClasspath(new Path(jar));
 		this.addToClasspath(new Path(javaJar));
-
 		
 		DebugSessionManager dsm = createDebugSessionManager();
 		
@@ -82,6 +136,9 @@
            , LocationInfo("8", "6", "8", "20")
            )
 		 */
+		
+		// TODO: change current term
+		
 		// set breakpoint
 		String filename = "test-main.str";
 		String strategyName = "main12";
@@ -102,9 +159,28 @@
 		start(dsm, mainArgs);
 	}
 	
-	@org.junit.Test
-	public void testDSM3()
-	{
+	@Test
+	public void testDSM4() throws Exception {
+		// test another JVM connect type
+		
+		// launch in terminal:
+		/*
+		/usr/lib/jvm/java-6-sun/jre/bin/java -Xrunjdwp:transport=dt_socket,server=y,address=8000 -Xss8m -Xms256m -Xmx1024m -XX:MaxPermSize=256m -server -Dvisualvm.display.name=FooBar -classpath /home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include/orgexamplelang1.jar /home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include/orgexamplelang1-java.jar /home/rlindeman/Documents/TU/strategoxt/spoofax-imp/source/org.strategoxt.imp.debug.stratego.test/working/stub/class /home/rlindeman/Applications/development/eclipse/helios_sdk/eclipse/plugins/org.strategoxt.strj_0.17.92.201103221248/java/strategoxt.jar /home/rlindeman/Documents/TU/strategoxt/spoofax-imp/source/org.strategoxt.imp.debug.stratego.runtime/include/stratego-debug-runtime.jar /home/rlindeman/Documents/TU/strategoxt/spoofax-imp/source/org.strategoxt.imp.debug.stratego.runtime/include/stratego-debug-runtime-java.jar org.strategoxt.HybridInterpreter 
 /home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include/orgexamplelang1-java.jar /home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include/orgexamplelang1.jar main12 str.args
+		
+		
+		Listening for transport dt_socket at address: 8000
+Exception in thread "main" java.lang.NoClassDefFoundError: /home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org/example/lang1/include/orgexamplelang1-java/jar
+Caused by: java.lang.ClassNotFoundException: .home.rlindeman.Applications.development.eclipse.helios_sdk.workspace.org.example.lang1.include.orgexamplelang1-java.jar
+	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
+	at java.security.AccessController.doPrivileged(Native Method)
+	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
+	at java.lang.ClassLoader.loadClass(ClassLoader.java:307)
+	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)
+	at java.lang.ClassLoader.loadClass(ClassLoader.java:248)
+Could not find the main class: /home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include/orgexamplelang1-java.jar.  Program will exit.
+
+		
+		*/
 		String includeDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/include";
 		//String utilsDir = "/home/rlindeman/Applications/development/eclipse/helios_sdk/workspace/org.example.lang1/utils";
 		String javaJar = includeDir+"/orgexamplelang1-java.jar";
@@ -158,6 +234,7 @@
 		
 		System.out.println("RUN");
 		// start the debug session
+		//start(dsm, mainArgs, "ATTACH");
 		start(dsm, mainArgs);
 	}
 }
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofaxExtra.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/DSMTestSpoofaxExtra.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -0,0 +1,10 @@
+package org.strategoxt.debug.core.control;
+
+/**
+ * test executing some more spoofax strategies such as editor-resolve that probably has some hook to eclipse
+ * @author rlindeman
+ *
+ */
+public class DSMTestSpoofaxExtra {
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestHybridInterpreterLauncher.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestHybridInterpreterLauncher.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -0,0 +1,274 @@
+package org.strategoxt.imp.debug.core.str.launching;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.StrategoFileManager;
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.resources.IWorkspace;
+import org.eclipse.core.resources.ResourcesPlugin;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.debug.core.DebugEvent;
+import org.eclipse.debug.core.DebugPlugin;
+import org.eclipse.debug.core.ILaunch;
+import org.eclipse.debug.core.ILaunchConfiguration;
+import org.eclipse.debug.core.ILaunchConfigurationType;
+import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
+import org.eclipse.debug.core.ILaunchListener;
+import org.eclipse.debug.core.ILaunchManager;
+import org.eclipse.debug.core.model.IBreakpoint;
+import org.eclipse.jdt.debug.testplugin.DebugEventWaiter;
+import org.eclipse.jdt.debug.tests.AbstractDebugTest;
+import org.junit.Before;
+import org.junit.Test;
+import org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget;
+import org.strategoxt.imp.debug.core.str.model.StrategoLineBreakpoint;
+import org.strategoxt.imp.debug.stratego.runtime.ClasspathHandler;
+import org.strategoxt.imp.debug.ui.str.launching.StrategoLaunchShortcut;
+
+public class TestHybridInterpreterLauncher extends AbstractDebugTest implements ILaunchListener {
+
+
+	private boolean added = false; // true if a launch was added
+	private boolean removed = false; // true if a launch was removed
+	private boolean terminated = false; // true if a launch was terminated
+	
+	
+	
+	public TestHybridInterpreterLauncher(String name) {
+		super(name);
+		// TODO Auto-generated constructor stub
+	}
+	
+	@Before
+	public void setUp() throws CoreException
+	{
+		// clear all breakpoints
+		if (DebugPlugin.getDefault().getBreakpointManager().hasBreakpoints())
+		{
+			System.out.println("Remove breakpoints");
+			IBreakpoint[] breakpoints = DebugPlugin.getDefault().getBreakpointManager().getBreakpoints();
+			DebugPlugin.getDefault().getBreakpointManager().removeBreakpoints(breakpoints, true);
+		}
+		// remove existing launch configs
+		ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
+		ILaunchConfigurationType type = manager.getLaunchConfigurationType(IStrategoConstants.ID_STRATEGO_DEBUG_MODEL+".launchConfigurationType.hybridinterpreter"); 
+		ILaunchConfiguration[] configurations =  manager.getLaunchConfigurations(type);
+		for (int i = 0; i < configurations.length; i++) {
+			ILaunchConfiguration configuration = configurations[i];
+			System.out.println(configuration.getName());
+			//if (configuration.getName().equals("TESTSTR")) {
+				configuration.delete();
+			//	break;
+			//}
+		}
+		
+		// check if workspace contains stratego-resources project
+		// use the stratego-resources project to test launching stratego programs
+		if (getStrategoResourcesProject() == null)
+		{
+			fail("Project stratego-resources not found in workspace");
+		}
+	}
+	
+	/**
+	 * Returns a IFile in the stratego-resources project, the path shuld be relative to "stratego-resources".
+	 * E.g.: "src-str/test/localvar/localvar.str"
+	 * @param strFile
+	 * @return
+	 */
+	private IFile getFile(String path)
+	{
+		IFile strFile = null;
+		IPath path2str = new Path(path);
+		
+		boolean strFileExists = getStrategoResourcesProject().exists(path2str);
+		assertTrue("File was not found", strFileExists);
+		strFile = getStrategoResourcesProject().getFile(path2str);
+		return strFile;
+	}
+	
+
+
+	@Test
+	public void testLaunch() throws Exception {
+		// /stratego-resources/src-str/test/localvar/localvar.str
+		IFile strFile = getFile("src-str/test/localvar/localvar.str");
+		/*
+		// create breakpoint
+		StrategoLineBreakpoint lineBreakpoint = new StrategoLineBreakpoint(strFile, 48); // 1-based linenumber
+		DebugPlugin.getDefault().getBreakpointManager().addBreakpoint(
+				lineBreakpoint);
+		*/
+		
+		// create the config
+		// find HybridInterpreter launch config
+		ILaunchConfigurationWorkingCopy configWC = LaunchUtils.createHybridInterpreterLaunchConfigurationWorkingCopy();
+		if (configWC == null)
+		{
+			System.err.println("No config working copy!");
+		}
+		// set the required attributes
+		
+		// strategy name
+		// IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME
+		String name = "foo";
+		configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME, name);
+		
+		// required jars
+		// IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS
+		//String strategoXTJar = StrategoFileManager.getStrategoXTJar();
+		List<IPath> paths = ClasspathHandler.getClasspathEntries();
+		List list = new ArrayList();
+		for(IPath p : paths)
+		{
+			list.add(p.toOSString());
+		}
+		configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS, list);
+		
+		// classpath
+		// IStrategoConstants.ATTR_STRATEGO_CLASSPATH
+		
+		
+		// and save
+		ILaunchConfiguration config = null;
+		try {
+			config = configWC.doSave();
+			//config.launch(ILaunchManager.DEBUG_MODE, null);
+		} catch (CoreException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		
+		
+		getLaunchManager().addLaunchListener(this); // listen to launch events
+		// the testcase will sleep a few seconds and will wake up when a launch event occurred.
+		IProgressMonitor monitor = null;
+		
+		System.out.println("LAUNCH...");
+		
+
+		// launch the config ant wait for the suspend event
+		ILaunch launch = config.launch(ILaunchManager.DEBUG_MODE, monitor);
+		System.out.println("STARTED...");
+		synchronized (this) {
+			if (!added) {
+				try {
+					System.out.println("Wait...");
+					wait(30000);
+				} catch (InterruptedException e) {
+				}
+			}
+		}
+		assertTrue("Launch should have been added", added); //$NON-NLS-1$
+		
+		synchronized (this) {
+			for (int i= 0; i < 300; i++) {
+				if (launch.isTerminated()) {
+					terminated= true;
+					break;
+				}
+				try {
+					Thread.sleep(100);
+				} catch (InterruptedException e) {
+				}
+			}
+		}
+		assertTrue("Launch should have been terminated", terminated); //$NON-NLS-1$
+		
+		getLaunchManager().removeLaunch(launch);
+		
+		synchronized (this) {
+			if (!removed) {
+				try {
+					wait(30000);
+				} catch (InterruptedException e) {
+				}
+			}
+		}
+		assertTrue("Launch should have been removed", removed);		 //$NON-NLS-1$
+
+	}
+	
+	//Test
+	public void testBreakpoint() throws Exception {
+		// /stratego-resources/src-str/test/localvar/localvar.str
+		IFile strFile = getFile("src-str/test/localvar/localvar.str");
+		
+		// create breakpoint
+		StrategoLineBreakpoint lineBreakpoint = new StrategoLineBreakpoint(strFile, 48); // 1-based linenumber
+		DebugPlugin.getDefault().getBreakpointManager().addBreakpoint(
+				lineBreakpoint);
+		
+		
+		// create the config
+		ILaunchConfiguration config = StrategoLaunchShortcut.createConfiguration(strFile);
+		getLaunchManager().addLaunchListener(this);
+		
+		System.out.println("LAUNCH TO BREAKPOINT...");
+		
+		   //String typeName = "Breakpoints"; //$NON-NLS-1$
+		   //createLineBreakpoint(52, typeName);
+			StrategoDebugTarget thread = null;
+	       try {
+	    	   boolean register = true;
+	    	   //thread = launchToBreakpoint(config, register);
+	    	   //Class clazz = org.strategoxt.imp.debug.core.str.model.StrategoDebugTarget.class;
+	    	   //DebugEventWaiter waiter= new DebugElementKindEventDetailWaiter(DebugEvent.CREATE, clazz, DebugEvent.BREAKPOINT);
+	    	   DebugEventWaiter waiter= new DebugEventWaiter(DebugEvent.CREATE);
+	    	   thread = (StrategoDebugTarget) launchAndWait(config, waiter, register);
+	           //thread = launchToBreakpoint(typeName, true);
+	           assertNotNull("Breakpoint not hit within timeout period", thread); //$NON-NLS-1$
+	           //ILaunch launch = thread.getLaunch();
+	           //assertFalse("Launch should not be registered", DebugPlugin.getDefault().getLaunchManager().isRegistered(launch)); //$NON-NLS-1$
+	       } finally {
+	           //terminateAndRemove(thread);
+	           removeAllBreakpoints();
+	       }
+	}
+	
+	private IProject strategoResourcesProject = null;
+	
+	private IProject getStrategoResourcesProject()
+	{
+		if (strategoResourcesProject == null)
+		{
+			IWorkspace workspace = ResourcesPlugin.getWorkspace();
+			// check if workspace contains stratego-resources project
+			IProject[] projects = workspace.getRoot().getProjects();
+			for(IProject project : projects)
+			{
+				if ("stratego-resources".equals(project.getName()))
+				{
+					strategoResourcesProject = project;
+				}
+			}
+		}
+		return strategoResourcesProject;
+	}
+	
+	/**
+	 * @see org.eclipse.debug.core.ILaunchListener#launchRemoved(org.eclipse.debug.core.ILaunch)
+	 */
+	public synchronized void launchRemoved(ILaunch launch) {
+		removed = true;
+		notifyAll();
+	}
+
+	/**
+	 * @see org.eclipse.debug.core.ILaunchListener#launchAdded(org.eclipse.debug.core.ILaunch)
+	 */
+	public synchronized void launchAdded(ILaunch launch) {
+		added = true;
+		notifyAll();
+	}
+	
+	/**
+	 * @see org.eclipse.debug.core.ILaunchListener#launchChanged(org.eclipse.debug.core.ILaunch)
+	 */
+	public synchronized void launchChanged(ILaunch launch) {}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncher.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncher.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/core/str/launching/TestStrategoLauncher.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -103,7 +103,7 @@
 		*/
 		
 		// create the config
-		ILaunchConfiguration config = LaunchUtils.createConfiguration(strFile); // can throw CoreException
+		ILaunchConfiguration config = LaunchUtils.createStrategoLaunchConfiguration(strFile); // can throw CoreException
 		getLaunchManager().addLaunchListener(this); // listen to launch events
 		// the testcase will sleep a few seconds and will wake up when a launch event occurred.
 		IProgressMonitor monitor = null;

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoLaunchShortcut.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoLaunchShortcut.java	Thu Mar 24 14:38:44 2011	(r22427)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/src/org/strategoxt/imp/debug/ui/str/launching/StrategoLaunchShortcut.java	Thu Mar 24 16:12:27 2011	(r22428)
@@ -177,7 +177,7 @@
 	public static ILaunchConfiguration createConfiguration(IFile file) {
 		ILaunchConfiguration config = null;
 		try {
-			config = LaunchUtils.createConfiguration(file);
+			config = LaunchUtils.createStrategoLaunchConfiguration(file);
 		} catch (CoreException ce) {
 			MessageDialog.openError(getShell(), "Error"/*LauncherMessages.JavaLaunchShortcut_3*/, ce.getStatus().getMessage());	
 		}

From R.B.Vermaas at tudelft.nl  Fri Mar 25 11:36:15 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 25 Mar 2011 10:36:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22429 - hydra
Message-ID: <20110325103615.59788CC10C@mx4.tudelft.nl>

Author: rob
Date: Fri Mar 25 10:36:14 2011
New Revision: 22429
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22429&sc=1

Log:
extend LOCAL_CLASSPATH in stead of overriding

Modified:
   hydra/spoofax-fun.nix

Modified: hydra/spoofax-fun.nix
==============================================================================
--- hydra/spoofax-fun.nix	Thu Mar 24 16:12:27 2011	(r22428)
+++ hydra/spoofax-fun.nix	Fri Mar 25 10:36:14 2011	(r22429)
@@ -29,7 +29,7 @@
     export M2_REPO=/tmp/m3
     ulimit -s unlimited
 
-    export LOCALCLASSPATH="utils/aster.jar:utils/make_permissive.jar:utils/sdf2imp.jar:utils/strategoxt.jar"
+    export LOCALCLASSPATH="utils/aster.jar:utils/make_permissive.jar:utils/sdf2imp.jar:utils/strategoxt.jar:$LOCALCLASSPATH"
     export ANT_OPTS="-Xss8m -Xmx2048m"
 
     for d in */build.main.xml ; do

From seba at informatik.uni-marburg.de  Fri Mar 25 12:53:59 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 25 Mar 2011 11:53:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22430 - in
	sugarj/branches/SugarJ-editor-services:
	case-studies/concretesyntax case-studies/editor/util
	case-studies/foo case-studies/javaclosure
	case-studies/javaclosure/...
Message-ID: <20110325115359.63882CC124@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Fri Mar 25 11:53:58 2011
New Revision: 22430
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22430&sc=1

Log:


Modified:
   sugarj/branches/SugarJ-editor-services/case-studies/concretesyntax/ConcreteJava.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/editor/util/Strategies.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/foo/FooEditorServices.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/foo/Test.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Syntax.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Test.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Transformation.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Test.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Transformation.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchema.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaCompiled.sugj
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/FileCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ModuleSystemCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java

Modified: sugarj/branches/SugarJ-editor-services/case-studies/concretesyntax/ConcreteJava.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/concretesyntax/ConcreteJava.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/concretesyntax/ConcreteJava.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -25,8 +25,9 @@
   
   context-free syntax
     "~id:"  StrategoTerm  -> JavaID  {cons("FromMetaExpr")}
+//    "~"  StrategoTerm  -> JavaID  {cons("FromMetaExpr"), avoid}
 
-
+ 
 
 %%%
  %% Expressions
@@ -221,6 +222,7 @@
     "~type:"     StrategoTerm -> JavaType {cons("FromMetaExpr")}
     "~"          StrategoTerm -> JavaArrayBaseType {cons("FromMetaExpr")}
     "~arraybasetype:"     StrategoTerm -> JavaArrayBaseType {cons("FromMetaExpr")}
+    "~"  StrategoTerm -> JavaRefType {cons("FromMetaExpr"), avoid}
     "~reftype:"  StrategoTerm -> JavaRefType {cons("FromMetaExpr")}
 
 %%%

Modified: sugarj/branches/SugarJ-editor-services/case-studies/editor/util/Strategies.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/editor/util/Strategies.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/editor/util/Strategies.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -7,6 +7,6 @@
       (filename, result)
       with
         filename := <guarantee-extension(|"ast")> path;
-        result   := <id> selected
+        result   := selected
 
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/foo/FooEditorServices.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/foo/FooEditorServices.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/foo/FooEditorServices.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -5,20 +5,19 @@
 import foo.FooSugar;
 
 public editor services FooEditorServices {
-  colorer C1
-    keyword : 255 168 55 bold      
-  
-  colorer C2
-    _.TypeName : red
+  colorer
     _.MyId     : BLUE
     _.Foo      : green
-  
-  builders
-    observer : sugarj-analyze
+ 
+  completions
+    completion keyword : "nil"
+    completion template : "TYPE " <JavaId> " = nil;"
+    completion template : JavaId = "SugarJ" 
 }
 
 class Test2 {
   TYPE v = nil;
   String x = nil;
   String y = null;
+  String z = "abc";
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/foo/FooSugar.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -1,7 +1,7 @@
 package foo;
 
 import org.sugarj.languages.Java;
-
+   
 /**
  * SugarJ extension that saves one character
  * by introducing a new 'nil' keyword in place
@@ -29,4 +29,26 @@
   rules
     constraint-error : 
       Foo -> (<id>, "don't use nil, stupid")
+  
+  
+  // foo declarations
+  context-free syntax
+    AnnoOrSugarMod* "foo" JavaId "{" "}" -> SugarDec {cons("FooDec")}
+  
+  signature constructors
+    FooDec : List(AnnoOrSugarMod) * JavaId -> SugarDec
+  
+  desugarings
+    desugar-foodec-alt
+  
+  rules
+    desugar-foodec :
+      FooDec(mods, name) -> SugarDec(SugarDecHead(mods, name), SugarBody([]))
+    
+    desugar-foodec2 :
+      FooDec(mods, name) -> EditorServicesDec(EditorServicesDecHead(mods, name), EditorServicesBody([]))
+    
+    desugar-foodec-alt :
+      foo at FooDec(mods, name) -> [<desugar-foodec> foo, <desugar-foodec2> foo]
 }
+   
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/foo/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/foo/Test.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/foo/Test.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -3,9 +3,11 @@
 import foo.FooSugar;
 import foo.FooEditorServices;
 
+import foo.FooTest;
 
 public class Test {
   TYPE v = nil;
   String x = nil;
   String y = null;
-}
\ No newline at end of file
+}
+

Modified: sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Syntax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Syntax.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Syntax.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -6,13 +6,9 @@
  * http://javac.info/closures-v06a.html
  */
 public sugar Syntax {
-  signature constructors
-    FunctionType   : JavaType * JavaType -> JavaType
-    BlockLambda : JavaType * JavaFormalParam * JavaBlock -> JavaLambda
-  
   context-free syntax
-    "#" JavaType "(" JavaType ")" -> JavaType {cons("FunctionType")}
-    "#" JavaType "(" JavaFormalParam ")" JavaBlock -> JavaExpr {cons("BlockLambda")}
+    "#" JavaType "(" JavaType ")" -> JavaType {cons("ClosureType")}
+    "#" JavaType "(" JavaFormalParam ")" JavaBlock -> JavaExpr {cons("Closure")}
   
   %% The remaining priorities follow by transitivity.
   context-free priorities

Modified: sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Test.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Test.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -3,7 +3,7 @@
 import java.util.List;
 import java.util.ArrayList;
 
-import javaclosure.Function;
+import javaclosure.Closure;
 import javaclosure.Syntax;
 import javaclosure.Transformation;
 
@@ -26,7 +26,7 @@
   	}
   	
   	return s;
-  }
+  } 
   
   public static Test<Integer> create() {
 		Test<Integer> t = new Test<Integer>();

Modified: sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Transformation.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Transformation.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Transformation.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -10,29 +10,29 @@
  */
 public sugar Transformation {
   desugarings
-    transFun
-    transLambda
+    desugar-closure-type
+    desugar-closure
   
   rules
-	transFun :
-      FunctionType(result, argument)
+	desugar-closure-type :
+      ClosureType(result, argument)
       ->
       ClassOrInterfaceType(
       	TypeName(
             PackageOrTypeName(Id("javaclosure")),
-            Id("Function")),
+            Id("Closure")),
         Some(TypeArgs([result', argument'])))
     with result' := <toRefType> result;
          argument' := <toRefType> argument
   
 
-    transLambda :
-      BlockLambda(result, Param(mods, argument, Id(x)), body)
+    desugar-closure :
+      Closure(result, Param(mods, argument, Id(x)), body)
       ->
       NewInstance(
         None(),
         ClassOrInterfaceType(
-          TypeName(PackageOrTypeName(Id("javaclosure")), Id("Function")),
+          TypeName(PackageOrTypeName(Id("javaclosure")), Id("Closure")),
           Some(TypeArgs([result', argument']))),
         [],
         Some(ClassBody(

Modified: sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Test.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Test.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -30,7 +30,7 @@
   
   public static Test<Integer> create() {
 		Test<Integer> t = new Test<Integer>();
-		t.list.add(1);
+		t.list.add(1); 
 		t.list.add(2);
 		t.list.add(3);
 		t.list.add(4);

Modified: sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Transformation.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Transformation.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/concrete/Transformation.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -12,25 +12,25 @@
  */
 public sugar Transformation {
   desugarings
-    transFun
-    transLambda
+    desugar-closure-type
+    desugar-closure
   
   
   rules
-    transFun :
-         java |[ #~result(~argument) ]|
-      -> java |[ javaclosure.Function<? extends ~reftype:result', ? super ~reftype:argument'> ]|
+    desugar-closure-type :
+         |[ #~result(~argument) ]|
+      -> |[ javaclosure.Closure<? extends ~result', ? super ~argument'> ]|
     with
       result'   := <toRefType> result;
       argument' := <toRefType> argument
 
-    transLambda :
-         java |[ #~result(~argument ~id:x) ~block:body ]|
-      -> java |[ new javaclosure.Function<~result', ~argument'>() {
-        	         public ~result' invoke(~argument' ~id:x)
-        	           ~block:body
-                 } ]|
+    desugar-closure :
+         |[ #~result(~argument ~id:x) ~block:body ]|
+      -> |[ new javaclosure.Closure<~result', ~argument'>() {
+        	    public ~result' invoke(~argument' ~id:x)
+        	      ~block:body
+            } ]|
       with
         result' := <toRefType> result;
         argument' := <toRefType> argument
-}
\ No newline at end of file
+}  
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/Test.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -13,6 +13,7 @@
 
 import xml.XmlEditor;
 
+import editor.util.Strategies;
 import editor.ASTBuilder;
 
 /*

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlEditor.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -20,4 +20,8 @@
     
   outliner XmlOutliner
     ElemName._
+  
+  completions
+    completion template : ElemName = "author"
+    completion template : "<{lib}author title=\"<AttVal>\">\n</{lib}author>"
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/XmlSyntax.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -230,9 +230,7 @@
 
 
 
-  desugarings
-    \ Comment(_, com, _) -> Comment(com) \
-
+/*
 	signature
 	  constructors
 	    ElemName         : QName -> ElemName
@@ -297,5 +295,5 @@
 	    QName            : Option(Qualifier) * NCName -> QName
 	                     : String -> NCName
 	                     : String -> Comment
-
+*/
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -7,6 +7,7 @@
 import xml.XmlTextTools;
 import xml.XmlEditor;
 
+import xml.schema.AsEditorService;
 import xml.schema.SharedStrategies;
 import xml.schema.XmlSchemaJavaSyntax;
 
@@ -53,12 +54,13 @@
     xsdDec : 
       XsdSugarDec(XsdSugarDecHead(mods, name), doc) 
       ->
-      SugarDec(SugarDecHead(mods, name), <xsdBody> doc)
+      [SugarDec(SugarDecHead(mods, name), SugarBody(<xsdBody> doc)),
+       EditorServicesDec(EditorServicesDecHead(mods, name), EditorServicesBody(<schema-editor> doc))]
       
     xsdBody :
       XsdSugarBody(XMLSchemaDoc(xsd))
       -> 
-      SugarBody(<xsd2stratego; map(!transformation-elem(<id>))> xsd)
+      <xsd2stratego; map(!transformation-elem(<id>))> xsd
 
   rules
     val-type : type -> <concat-strings> ["validate-type-", type]
@@ -87,7 +89,7 @@
       -> result
       where
         <xml-attr-value2string> attval => namespace; 
-        <mapconcat(xsdElement2stratego(|namespace);ensure-list <+ !["failed to translate:",<id>])> contents => result
+        <mapconcat(xsdElement2stratego(|namespace);ensure-list <+ ![("translation failed", <id>)])> contents => result
    
     // root element 
     xsdElement2stratego(|namespace) :

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -1,9 +1,9 @@
 package xml.schema;
   
 import xml.schema.XmlSchema;
-import xml.schema.AsDesugaring;
- 
-public xmlschema BookSchema {   
+import xml.schema.AsEditorService;
+
+public xmlschema BookSchema {
   <{http://www.w3.org/2001/XMLSchema}schema targetNamespace="lib">
     
     <{http://www.w3.org/2001/XMLSchema}element name="book" type="BookType">

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -7,8 +7,16 @@
 import xml.Test; 
 import xml.XmlJavaSyntax;
 
+import xml.XmlEditor;
+
 import xml.schema.BookSchema;
 
+public editor services MyEditor {
+  completions
+    completion proposer : my-editor-completion
+    completion trigger : "<" 
+}
+
 public class BookSchemaTest extends Test {
   public static void main(String[] args) throws SAXException {
     ContentHandler ch = new BookSchemaTest();
@@ -17,6 +25,7 @@
       <{lib}book title="Sweetness and Power: The Place of Sugar in Modern History">
         <{lib}author name="Sidney W. Mintz">
         </{lib}author>
+        
       </{lib}book>;
   }
 } 
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchema.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchema.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchema.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -3,6 +3,8 @@
 import xml.schema.AsDesugaring;
 import xml.schema.XmlSchemaJavaSyntax;
 
+import xml.schema.XmlSchemaCompiled;
+
 public xmlschema XmlSchema {
   <{http://www.w3.org/2001/XMLSchema}schema 
     targetNamespace="http://www.w3.org/2001/XMLSchema">
@@ -26,7 +28,7 @@
       
       <{http://www.w3.org/2001/XMLSchema}attribute name="targetNamespace" type="StringType">
       </{http://www.w3.org/2001/XMLSchema}attribute>
-    </{http://www.w3.org/2001/XMLSchema}complexType>
+    </{http://www.w3.org/2001/XMLSchema}complexType> 
     
     <{http://www.w3.org/2001/XMLSchema}complexType name="ComplexType">
       <{http://www.w3.org/2001/XMLSchema}sequence>

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaCompiled.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaCompiled.sugj	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaCompiled.sugj	Fri Mar 25 11:53:58 2011	(r22430)
@@ -8,9 +8,7 @@
 
 public sugar XmlSchemaCompiled {
 
-
 rules
-
   xml-validate =
     ?Element(
        ElemName(
@@ -100,124 +98,130 @@
                 ; if is-error then id else id end
               end)> attrs => err1
           ; <(repeat-strategy(
-                ?x
-                ; \ [x|xs] -> <({err:
-                                  \ doc at Element(
-                                          ElemName(
-                                            QName(
-                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                            , "element"
-                                            )
-                                          )
-                                        , attributes
-                                        , contents
-                                        , ElemName(
-                                            QName(
-                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                            , "element"
-                                            )
-                                          )
-                                        ) -> err
-                                    where <(validate-type-ElementType
-                                            <+ ![ ( doc
-                                                  , <concat-strings> [ "no type definition "
-                                                                     , "ElementType"
-                                                                     , " for element "
-                                                                     , "element"
-                                                                     , " found"
-                                                                     ]
-                                                  )
-                                                ])> doc => err \
-                                }
-                                <+ ![ ( <id>
-                                      , <concat-strings> ["expected element: ", "element", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                      )
-                                    ])
-                               ; (is-error <+ !xs)> x \
-                ; ?serr
-                ; if is-error then
-                    !x
-                    ; ?x
-                    ; \ [x|xs] -> <({err:
-                                      \ doc at Element(
-                                              ElemName(
-                                                QName(
-                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                , "complexType"
-                                                )
-                                              )
-                                            , attributes
-                                            , contents
-                                            , ElemName(
-                                                QName(
-                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                , "complexType"
-                                                )
-                                              )
-                                            ) -> err
-                                        where <(validate-type-ComplexType
-                                                <+ ![ ( doc
-                                                      , <concat-strings> [ "no type definition "
-                                                                         , "ComplexType"
-                                                                         , " for element "
-                                                                         , "complexType"
-                                                                         , " found"
-                                                                         ]
+                {x, serr:
+                  ?x
+                  ; \ [x|xs] -> <({err:
+                                    \ doc at Element(
+                                            ElemName(
+                                              QName(
+                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                              , "element"
+                                              )
+                                            )
+                                          , attributes
+                                          , contents
+                                          , ElemName(
+                                              QName(
+                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                              , "element"
+                                              )
+                                            )
+                                          ) -> err
+                                      where <(validate-type-ElementType
+                                              <+ ![ ( doc
+                                                    , <concat-strings> [ "no type definition "
+                                                                       , "ElementType"
+                                                                       , " for element "
+                                                                       , "element"
+                                                                       , " found"
+                                                                       ]
+                                                    )
+                                                  ])> doc => err \
+                                  }
+                                  <+ ![ ( <id>
+                                        , <concat-strings> ["expected element: ", "element", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                        )
+                                      ])
+                                 ; (is-error <+ !xs)> x \
+                  ; ?serr
+                  ; if is-error then
+                      !x
+                      ; {x, serr:
+                          ?x
+                          ; \ [x|xs] -> <({err:
+                                            \ doc at Element(
+                                                    ElemName(
+                                                      QName(
+                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                      , "complexType"
                                                       )
-                                                    ])> doc => err \
-                                    }
-                                    <+ ![ ( <id>
-                                          , <concat-strings> ["expected element: ", "complexType", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                          )
-                                        ])
-                                   ; (is-error <+ !xs)> x \
-                    ; ?serr
-                    ; if is-error then
-                        !x
-                        ; ?x
-                        ; \ [x|xs] -> <({err:
-                                          \ doc at Element(
-                                                  ElemName(
-                                                    QName(
-                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                    , "simpleType"
                                                     )
-                                                  )
-                                                , attributes
-                                                , contents
-                                                , ElemName(
-                                                    QName(
-                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                    , "simpleType"
+                                                  , attributes
+                                                  , contents
+                                                  , ElemName(
+                                                      QName(
+                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                      , "complexType"
+                                                      )
                                                     )
-                                                  )
-                                                ) -> err
-                                            where <(validate-type-SimpleType
-                                                    <+ ![ ( doc
-                                                          , <concat-strings> [ "no type definition "
-                                                                             , "SimpleType"
-                                                                             , " for element "
-                                                                             , "simpleType"
-                                                                             , " found"
-                                                                             ]
-                                                          )
-                                                        ])> doc => err \
-                                        }
-                                        <+ ![ ( <id>
-                                              , <concat-strings> ["expected element: ", "simpleType", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                              )
-                                            ])
-                                       ; (is-error <+ !xs)> x \
-                        ; ?serr
-                        ; if is-error then !x ; fail <+ !serr else id end
-                        <+ !serr
-                      else
-                        id
-                      end
-                    <+ !serr
-                  else
-                    id
-                  end
+                                                  ) -> err
+                                              where <(validate-type-ComplexType
+                                                      <+ ![ ( doc
+                                                            , <concat-strings> [ "no type definition "
+                                                                               , "ComplexType"
+                                                                               , " for element "
+                                                                               , "complexType"
+                                                                               , " found"
+                                                                               ]
+                                                            )
+                                                          ])> doc => err \
+                                          }
+                                          <+ ![ ( <id>
+                                                , <concat-strings> ["expected element: ", "complexType", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                )
+                                              ])
+                                         ; (is-error <+ !xs)> x \
+                          ; ?serr
+                          ; if is-error then
+                              !x
+                              ; {x, serr:
+                                  ?x
+                                  ; \ [x|xs] -> <({err:
+                                                    \ doc at Element(
+                                                            ElemName(
+                                                              QName(
+                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                              , "simpleType"
+                                                              )
+                                                            )
+                                                          , attributes
+                                                          , contents
+                                                          , ElemName(
+                                                              QName(
+                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                              , "simpleType"
+                                                              )
+                                                            )
+                                                          ) -> err
+                                                      where <(validate-type-SimpleType
+                                                              <+ ![ ( doc
+                                                                    , <concat-strings> [ "no type definition "
+                                                                                       , "SimpleType"
+                                                                                       , " for element "
+                                                                                       , "simpleType"
+                                                                                       , " found"
+                                                                                       ]
+                                                                    )
+                                                                  ])> doc => err \
+                                                  }
+                                                  <+ ![ ( <id>
+                                                        , <concat-strings> ["expected element: ", "simpleType", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                        )
+                                                      ])
+                                                 ; (is-error <+ !xs)> x \
+                                  ; ?serr
+                                  ; if is-error then !x ; fail <+ !serr else id end
+                                }
+                              <+ !serr
+                            else
+                              id
+                            end
+                        }
+                      <+ !serr
+                    else
+                      id
+                    end
+                }
               )
               ; if is-error then
                   id
@@ -270,165 +274,173 @@
                 end
                 ; if is-error then id else id end
               end)> attrs => err1
-          ; <(((?x
-                ; \ [x|xs] -> <({err:
-                                  \ doc at Element(
-                                          ElemName(
-                                            QName(
-                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                            , "choice"
-                                            )
-                                          )
-                                        , attributes
-                                        , contents
-                                        , ElemName(
-                                            QName(
-                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                            , "choice"
-                                            )
-                                          )
-                                        ) -> err
-                                    where <(validate-type-ComplexTypeNested
-                                            <+ ![ ( doc
-                                                  , <concat-strings> [ "no type definition "
-                                                                     , "ComplexTypeNested"
-                                                                     , " for element "
-                                                                     , "choice"
-                                                                     , " found"
-                                                                     ]
-                                                  )
-                                                ])> doc => err \
-                                }
-                                <+ ![ ( <id>
-                                      , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                      )
-                                    ])
-                               ; (is-error <+ !xs)> x \
-                ; ?serr
-                ; if is-error then
-                    !x
-                    ; ?x
-                    ; \ [x|xs] -> <({err:
-                                      \ doc at Element(
-                                              ElemName(
-                                                QName(
-                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                , "choice"
-                                                )
-                                              )
-                                            , attributes
-                                            , contents
-                                            , ElemName(
-                                                QName(
-                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                , "choice"
-                                                )
-                                              )
-                                            ) -> err
-                                        where <(validate-type-ComplexTypeNestedMax
-                                                <+ ![ ( doc
-                                                      , <concat-strings> [ "no type definition "
-                                                                         , "ComplexTypeNestedMax"
-                                                                         , " for element "
-                                                                         , "choice"
-                                                                         , " found"
-                                                                         ]
-                                                      )
-                                                    ])> doc => err \
-                                    }
-                                    <+ ![ ( <id>
-                                          , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                          )
-                                        ])
-                                   ; (is-error <+ !xs)> x \
-                    ; ?serr
-                    ; if is-error then
-                        !x
-                        ; ?x
-                        ; \ [x|xs] -> <({err:
-                                          \ doc at Element(
-                                                  ElemName(
-                                                    QName(
-                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                    , "sequence"
-                                                    )
-                                                  )
-                                                , attributes
-                                                , contents
-                                                , ElemName(
-                                                    QName(
-                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                    , "sequence"
-                                                    )
-                                                  )
-                                                ) -> err
-                                            where <(validate-type-ComplexTypeNested
-                                                    <+ ![ ( doc
-                                                          , <concat-strings> [ "no type definition "
-                                                                             , "ComplexTypeNested"
-                                                                             , " for element "
-                                                                             , "sequence"
-                                                                             , " found"
-                                                                             ]
-                                                          )
-                                                        ])> doc => err \
-                                        }
-                                        <+ ![ ( <id>
-                                              , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                              )
-                                            ])
-                                       ; (is-error <+ !xs)> x \
-                        ; ?serr
-                        ; if is-error then
-                            !x
-                            ; ?x
-                            ; \ [x|xs] -> <({err:
-                                              \ doc at Element(
-                                                      ElemName(
-                                                        QName(
-                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                        , "sequence"
-                                                        )
-                                                      )
-                                                    , attributes
-                                                    , contents
-                                                    , ElemName(
-                                                        QName(
-                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                        , "sequence"
-                                                        )
-                                                      )
-                                                    ) -> err
-                                                where <(validate-type-ComplexTypeNestedMax
-                                                        <+ ![ ( doc
-                                                              , <concat-strings> [ "no type definition "
-                                                                                 , "ComplexTypeNestedMax"
-                                                                                 , " for element "
-                                                                                 , "sequence"
-                                                                                 , " found"
-                                                                                 ]
-                                                              )
-                                                            ])> doc => err \
-                                            }
-                                            <+ ![ ( <id>
-                                                  , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                                  )
-                                                ])
-                                           ; (is-error <+ !xs)> x \
-                            ; ?serr
-                            ; if is-error then !x ; fail <+ !serr else id end
-                            <+ !serr
-                          else
-                            id
-                          end
-                        <+ !serr
-                      else
-                        id
-                      end
-                    <+ !serr
-                  else
-                    id
-                  end)
+          ; <(({x, serr:
+                 ?x
+                 ; \ [x|xs] -> <({err:
+                                   \ doc at Element(
+                                           ElemName(
+                                             QName(
+                                               Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                             , "choice"
+                                             )
+                                           )
+                                         , attributes
+                                         , contents
+                                         , ElemName(
+                                             QName(
+                                               Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                             , "choice"
+                                             )
+                                           )
+                                         ) -> err
+                                     where <(validate-type-ComplexTypeNested
+                                             <+ ![ ( doc
+                                                   , <concat-strings> [ "no type definition "
+                                                                      , "ComplexTypeNested"
+                                                                      , " for element "
+                                                                      , "choice"
+                                                                      , " found"
+                                                                      ]
+                                                   )
+                                                 ])> doc => err \
+                                 }
+                                 <+ ![ ( <id>
+                                       , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                       )
+                                     ])
+                                ; (is-error <+ !xs)> x \
+                 ; ?serr
+                 ; if is-error then
+                     !x
+                     ; {x, serr:
+                         ?x
+                         ; \ [x|xs] -> <({err:
+                                           \ doc at Element(
+                                                   ElemName(
+                                                     QName(
+                                                       Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                     , "choice"
+                                                     )
+                                                   )
+                                                 , attributes
+                                                 , contents
+                                                 , ElemName(
+                                                     QName(
+                                                       Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                     , "choice"
+                                                     )
+                                                   )
+                                                 ) -> err
+                                             where <(validate-type-ComplexTypeNestedMax
+                                                     <+ ![ ( doc
+                                                           , <concat-strings> [ "no type definition "
+                                                                              , "ComplexTypeNestedMax"
+                                                                              , " for element "
+                                                                              , "choice"
+                                                                              , " found"
+                                                                              ]
+                                                           )
+                                                         ])> doc => err \
+                                         }
+                                         <+ ![ ( <id>
+                                               , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                               )
+                                             ])
+                                        ; (is-error <+ !xs)> x \
+                         ; ?serr
+                         ; if is-error then
+                             !x
+                             ; {x, serr:
+                                 ?x
+                                 ; \ [x|xs] -> <({err:
+                                                   \ doc at Element(
+                                                           ElemName(
+                                                             QName(
+                                                               Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                             , "sequence"
+                                                             )
+                                                           )
+                                                         , attributes
+                                                         , contents
+                                                         , ElemName(
+                                                             QName(
+                                                               Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                             , "sequence"
+                                                             )
+                                                           )
+                                                         ) -> err
+                                                     where <(validate-type-ComplexTypeNested
+                                                             <+ ![ ( doc
+                                                                   , <concat-strings> [ "no type definition "
+                                                                                      , "ComplexTypeNested"
+                                                                                      , " for element "
+                                                                                      , "sequence"
+                                                                                      , " found"
+                                                                                      ]
+                                                                   )
+                                                                 ])> doc => err \
+                                                 }
+                                                 <+ ![ ( <id>
+                                                       , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                       )
+                                                     ])
+                                                ; (is-error <+ !xs)> x \
+                                 ; ?serr
+                                 ; if is-error then
+                                     !x
+                                     ; {x, serr:
+                                         ?x
+                                         ; \ [x|xs] -> <({err:
+                                                           \ doc at Element(
+                                                                   ElemName(
+                                                                     QName(
+                                                                       Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                     , "sequence"
+                                                                     )
+                                                                   )
+                                                                 , attributes
+                                                                 , contents
+                                                                 , ElemName(
+                                                                     QName(
+                                                                       Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                     , "sequence"
+                                                                     )
+                                                                   )
+                                                                 ) -> err
+                                                             where <(validate-type-ComplexTypeNestedMax
+                                                                     <+ ![ ( doc
+                                                                           , <concat-strings> [ "no type definition "
+                                                                                              , "ComplexTypeNestedMax"
+                                                                                              , " for element "
+                                                                                              , "sequence"
+                                                                                              , " found"
+                                                                                              ]
+                                                                           )
+                                                                         ])> doc => err \
+                                                         }
+                                                         <+ ![ ( <id>
+                                                               , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                               )
+                                                             ])
+                                                        ; (is-error <+ !xs)> x \
+                                         ; ?serr
+                                         ; if is-error then !x ; fail <+ !serr else id end
+                                       }
+                                     <+ !serr
+                                   else
+                                     id
+                                   end
+                               }
+                             <+ !serr
+                           else
+                             id
+                           end
+                       }
+                     <+ !serr
+                   else
+                     id
+                   end
+               }
                ; if is-error then
                    id
                  else
@@ -497,206 +509,216 @@
             end
             ; if is-error then id else id end)> attrs => err1
           ; <(repeat-strategy(
-                ?x
-                ; \ [x|xs] -> <({err:
-                                  \ doc at Element(
-                                          ElemName(
-                                            QName(
-                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                            , "choice"
-                                            )
-                                          )
-                                        , attributes
-                                        , contents
-                                        , ElemName(
-                                            QName(
-                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                            , "choice"
-                                            )
-                                          )
-                                        ) -> err
-                                    where <(validate-type-ComplexTypeNested
-                                            <+ ![ ( doc
-                                                  , <concat-strings> [ "no type definition "
-                                                                     , "ComplexTypeNested"
-                                                                     , " for element "
-                                                                     , "choice"
-                                                                     , " found"
-                                                                     ]
-                                                  )
-                                                ])> doc => err \
-                                }
-                                <+ ![ ( <id>
-                                      , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                      )
-                                    ])
-                               ; (is-error <+ !xs)> x \
-                ; ?serr
-                ; if is-error then
-                    !x
-                    ; ?x
-                    ; \ [x|xs] -> <({err:
-                                      \ doc at Element(
-                                              ElemName(
-                                                QName(
-                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                , "choice"
-                                                )
-                                              )
-                                            , attributes
-                                            , contents
-                                            , ElemName(
-                                                QName(
-                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                , "choice"
-                                                )
-                                              )
-                                            ) -> err
-                                        where <(validate-type-ComplexTypeNestedMax
-                                                <+ ![ ( doc
-                                                      , <concat-strings> [ "no type definition "
-                                                                         , "ComplexTypeNestedMax"
-                                                                         , " for element "
-                                                                         , "choice"
-                                                                         , " found"
-                                                                         ]
-                                                      )
-                                                    ])> doc => err \
-                                    }
-                                    <+ ![ ( <id>
-                                          , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                          )
-                                        ])
-                                   ; (is-error <+ !xs)> x \
-                    ; ?serr
-                    ; if is-error then
-                        !x
-                        ; ?x
-                        ; \ [x|xs] -> <({err:
-                                          \ doc at Element(
-                                                  ElemName(
-                                                    QName(
-                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                    , "sequence"
-                                                    )
-                                                  )
-                                                , attributes
-                                                , contents
-                                                , ElemName(
-                                                    QName(
-                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                    , "sequence"
+                {x, serr:
+                  ?x
+                  ; \ [x|xs] -> <({err:
+                                    \ doc at Element(
+                                            ElemName(
+                                              QName(
+                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                              , "choice"
+                                              )
+                                            )
+                                          , attributes
+                                          , contents
+                                          , ElemName(
+                                              QName(
+                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                              , "choice"
+                                              )
+                                            )
+                                          ) -> err
+                                      where <(validate-type-ComplexTypeNested
+                                              <+ ![ ( doc
+                                                    , <concat-strings> [ "no type definition "
+                                                                       , "ComplexTypeNested"
+                                                                       , " for element "
+                                                                       , "choice"
+                                                                       , " found"
+                                                                       ]
                                                     )
-                                                  )
-                                                ) -> err
-                                            where <(validate-type-ComplexTypeNested
-                                                    <+ ![ ( doc
-                                                          , <concat-strings> [ "no type definition "
-                                                                             , "ComplexTypeNested"
-                                                                             , " for element "
-                                                                             , "sequence"
-                                                                             , " found"
-                                                                             ]
-                                                          )
-                                                        ])> doc => err \
-                                        }
-                                        <+ ![ ( <id>
-                                              , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                              )
-                                            ])
-                                       ; (is-error <+ !xs)> x \
-                        ; ?serr
-                        ; if is-error then
-                            !x
-                            ; ?x
-                            ; \ [x|xs] -> <({err:
-                                              \ doc at Element(
-                                                      ElemName(
-                                                        QName(
-                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                        , "sequence"
-                                                        )
+                                                  ])> doc => err \
+                                  }
+                                  <+ ![ ( <id>
+                                        , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                        )
+                                      ])
+                                 ; (is-error <+ !xs)> x \
+                  ; ?serr
+                  ; if is-error then
+                      !x
+                      ; {x, serr:
+                          ?x
+                          ; \ [x|xs] -> <({err:
+                                            \ doc at Element(
+                                                    ElemName(
+                                                      QName(
+                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                      , "choice"
                                                       )
-                                                    , attributes
-                                                    , contents
-                                                    , ElemName(
-                                                        QName(
-                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                        , "sequence"
-                                                        )
+                                                    )
+                                                  , attributes
+                                                  , contents
+                                                  , ElemName(
+                                                      QName(
+                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                      , "choice"
                                                       )
-                                                    ) -> err
-                                                where <(validate-type-ComplexTypeNestedMax
-                                                        <+ ![ ( doc
-                                                              , <concat-strings> [ "no type definition "
-                                                                                 , "ComplexTypeNestedMax"
-                                                                                 , " for element "
-                                                                                 , "sequence"
-                                                                                 , " found"
-                                                                                 ]
+                                                    )
+                                                  ) -> err
+                                              where <(validate-type-ComplexTypeNestedMax
+                                                      <+ ![ ( doc
+                                                            , <concat-strings> [ "no type definition "
+                                                                               , "ComplexTypeNestedMax"
+                                                                               , " for element "
+                                                                               , "choice"
+                                                                               , " found"
+                                                                               ]
+                                                            )
+                                                          ])> doc => err \
+                                          }
+                                          <+ ![ ( <id>
+                                                , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                )
+                                              ])
+                                         ; (is-error <+ !xs)> x \
+                          ; ?serr
+                          ; if is-error then
+                              !x
+                              ; {x, serr:
+                                  ?x
+                                  ; \ [x|xs] -> <({err:
+                                                    \ doc at Element(
+                                                            ElemName(
+                                                              QName(
+                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                              , "sequence"
                                                               )
-                                                            ])> doc => err \
-                                            }
-                                            <+ ![ ( <id>
-                                                  , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                                  )
-                                                ])
-                                           ; (is-error <+ !xs)> x \
-                            ; ?serr
-                            ; if is-error then
-                                !x
-                                ; ?x
-                                ; \ [x|xs] -> <({err:
-                                                  \ doc at Element(
-                                                          ElemName(
-                                                            QName(
-                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                            , "element"
                                                             )
-                                                          )
-                                                        , attributes
-                                                        , contents
-                                                        , ElemName(
-                                                            QName(
-                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                            , "element"
+                                                          , attributes
+                                                          , contents
+                                                          , ElemName(
+                                                              QName(
+                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                              , "sequence"
+                                                              )
                                                             )
-                                                          )
-                                                        ) -> err
-                                                    where <(validate-type-ElementType
-                                                            <+ ![ ( doc
-                                                                  , <concat-strings> [ "no type definition "
-                                                                                     , "ElementType"
-                                                                                     , " for element "
-                                                                                     , "element"
-                                                                                     , " found"
-                                                                                     ]
-                                                                  )
-                                                                ])> doc => err \
+                                                          ) -> err
+                                                      where <(validate-type-ComplexTypeNested
+                                                              <+ ![ ( doc
+                                                                    , <concat-strings> [ "no type definition "
+                                                                                       , "ComplexTypeNested"
+                                                                                       , " for element "
+                                                                                       , "sequence"
+                                                                                       , " found"
+                                                                                       ]
+                                                                    )
+                                                                  ])> doc => err \
+                                                  }
+                                                  <+ ![ ( <id>
+                                                        , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                        )
+                                                      ])
+                                                 ; (is-error <+ !xs)> x \
+                                  ; ?serr
+                                  ; if is-error then
+                                      !x
+                                      ; {x, serr:
+                                          ?x
+                                          ; \ [x|xs] -> <({err:
+                                                            \ doc at Element(
+                                                                    ElemName(
+                                                                      QName(
+                                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                      , "sequence"
+                                                                      )
+                                                                    )
+                                                                  , attributes
+                                                                  , contents
+                                                                  , ElemName(
+                                                                      QName(
+                                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                      , "sequence"
+                                                                      )
+                                                                    )
+                                                                  ) -> err
+                                                              where <(validate-type-ComplexTypeNestedMax
+                                                                      <+ ![ ( doc
+                                                                            , <concat-strings> [ "no type definition "
+                                                                                               , "ComplexTypeNestedMax"
+                                                                                               , " for element "
+                                                                                               , "sequence"
+                                                                                               , " found"
+                                                                                               ]
+                                                                            )
+                                                                          ])> doc => err \
+                                                          }
+                                                          <+ ![ ( <id>
+                                                                , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                                )
+                                                              ])
+                                                         ; (is-error <+ !xs)> x \
+                                          ; ?serr
+                                          ; if is-error then
+                                              !x
+                                              ; {x, serr:
+                                                  ?x
+                                                  ; \ [x|xs] -> <({err:
+                                                                    \ doc at Element(
+                                                                            ElemName(
+                                                                              QName(
+                                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                              , "element"
+                                                                              )
+                                                                            )
+                                                                          , attributes
+                                                                          , contents
+                                                                          , ElemName(
+                                                                              QName(
+                                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                              , "element"
+                                                                              )
+                                                                            )
+                                                                          ) -> err
+                                                                      where <(validate-type-ElementType
+                                                                              <+ ![ ( doc
+                                                                                    , <concat-strings> [ "no type definition "
+                                                                                                       , "ElementType"
+                                                                                                       , " for element "
+                                                                                                       , "element"
+                                                                                                       , " found"
+                                                                                                       ]
+                                                                                    )
+                                                                                  ])> doc => err \
+                                                                  }
+                                                                  <+ ![ ( <id>
+                                                                        , <concat-strings> ["expected element: ", "element", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                                        )
+                                                                      ])
+                                                                 ; (is-error <+ !xs)> x \
+                                                  ; ?serr
+                                                  ; if is-error then !x ; fail <+ !serr else id end
                                                 }
-                                                <+ ![ ( <id>
-                                                      , <concat-strings> ["expected element: ", "element", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                                      )
-                                                    ])
-                                               ; (is-error <+ !xs)> x \
-                                ; ?serr
-                                ; if is-error then !x ; fail <+ !serr else id end
-                                <+ !serr
-                              else
-                                id
-                              end
-                            <+ !serr
-                          else
-                            id
-                          end
-                        <+ !serr
-                      else
-                        id
-                      end
-                    <+ !serr
-                  else
-                    id
-                  end
+                                              <+ !serr
+                                            else
+                                              id
+                                            end
+                                        }
+                                      <+ !serr
+                                    else
+                                      id
+                                    end
+                                }
+                              <+ !serr
+                            else
+                              id
+                            end
+                        }
+                      <+ !serr
+                    else
+                      id
+                    end
+                }
               )
               ; if is-error then
                   id
@@ -750,206 +772,216 @@
                 ; if is-error then id else id end
               end)> attrs => err1
           ; <(repeat-strategy(
-                ?x
-                ; \ [x|xs] -> <({err:
-                                  \ doc at Element(
-                                          ElemName(
-                                            QName(
-                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                            , "choice"
-                                            )
-                                          )
-                                        , attributes
-                                        , contents
-                                        , ElemName(
-                                            QName(
-                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                            , "choice"
-                                            )
-                                          )
-                                        ) -> err
-                                    where <(validate-type-ComplexTypeNested
-                                            <+ ![ ( doc
-                                                  , <concat-strings> [ "no type definition "
-                                                                     , "ComplexTypeNested"
-                                                                     , " for element "
-                                                                     , "choice"
-                                                                     , " found"
-                                                                     ]
-                                                  )
-                                                ])> doc => err \
-                                }
-                                <+ ![ ( <id>
-                                      , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                      )
-                                    ])
-                               ; (is-error <+ !xs)> x \
-                ; ?serr
-                ; if is-error then
-                    !x
-                    ; ?x
-                    ; \ [x|xs] -> <({err:
-                                      \ doc at Element(
-                                              ElemName(
-                                                QName(
-                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                , "choice"
-                                                )
-                                              )
-                                            , attributes
-                                            , contents
-                                            , ElemName(
-                                                QName(
-                                                  Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                , "choice"
-                                                )
-                                              )
-                                            ) -> err
-                                        where <(validate-type-ComplexTypeNestedMax
-                                                <+ ![ ( doc
-                                                      , <concat-strings> [ "no type definition "
-                                                                         , "ComplexTypeNestedMax"
-                                                                         , " for element "
-                                                                         , "choice"
-                                                                         , " found"
-                                                                         ]
-                                                      )
-                                                    ])> doc => err \
-                                    }
-                                    <+ ![ ( <id>
-                                          , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                          )
-                                        ])
-                                   ; (is-error <+ !xs)> x \
-                    ; ?serr
-                    ; if is-error then
-                        !x
-                        ; ?x
-                        ; \ [x|xs] -> <({err:
-                                          \ doc at Element(
-                                                  ElemName(
-                                                    QName(
-                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                    , "sequence"
-                                                    )
-                                                  )
-                                                , attributes
-                                                , contents
-                                                , ElemName(
-                                                    QName(
-                                                      Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                    , "sequence"
+                {x, serr:
+                  ?x
+                  ; \ [x|xs] -> <({err:
+                                    \ doc at Element(
+                                            ElemName(
+                                              QName(
+                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                              , "choice"
+                                              )
+                                            )
+                                          , attributes
+                                          , contents
+                                          , ElemName(
+                                              QName(
+                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                              , "choice"
+                                              )
+                                            )
+                                          ) -> err
+                                      where <(validate-type-ComplexTypeNested
+                                              <+ ![ ( doc
+                                                    , <concat-strings> [ "no type definition "
+                                                                       , "ComplexTypeNested"
+                                                                       , " for element "
+                                                                       , "choice"
+                                                                       , " found"
+                                                                       ]
                                                     )
-                                                  )
-                                                ) -> err
-                                            where <(validate-type-ComplexTypeNested
-                                                    <+ ![ ( doc
-                                                          , <concat-strings> [ "no type definition "
-                                                                             , "ComplexTypeNested"
-                                                                             , " for element "
-                                                                             , "sequence"
-                                                                             , " found"
-                                                                             ]
-                                                          )
-                                                        ])> doc => err \
-                                        }
-                                        <+ ![ ( <id>
-                                              , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                              )
-                                            ])
-                                       ; (is-error <+ !xs)> x \
-                        ; ?serr
-                        ; if is-error then
-                            !x
-                            ; ?x
-                            ; \ [x|xs] -> <({err:
-                                              \ doc at Element(
-                                                      ElemName(
-                                                        QName(
-                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                        , "sequence"
-                                                        )
+                                                  ])> doc => err \
+                                  }
+                                  <+ ![ ( <id>
+                                        , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                        )
+                                      ])
+                                 ; (is-error <+ !xs)> x \
+                  ; ?serr
+                  ; if is-error then
+                      !x
+                      ; {x, serr:
+                          ?x
+                          ; \ [x|xs] -> <({err:
+                                            \ doc at Element(
+                                                    ElemName(
+                                                      QName(
+                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                      , "choice"
                                                       )
-                                                    , attributes
-                                                    , contents
-                                                    , ElemName(
-                                                        QName(
-                                                          Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                        , "sequence"
-                                                        )
+                                                    )
+                                                  , attributes
+                                                  , contents
+                                                  , ElemName(
+                                                      QName(
+                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                      , "choice"
                                                       )
-                                                    ) -> err
-                                                where <(validate-type-ComplexTypeNestedMax
-                                                        <+ ![ ( doc
-                                                              , <concat-strings> [ "no type definition "
-                                                                                 , "ComplexTypeNestedMax"
-                                                                                 , " for element "
-                                                                                 , "sequence"
-                                                                                 , " found"
-                                                                                 ]
+                                                    )
+                                                  ) -> err
+                                              where <(validate-type-ComplexTypeNestedMax
+                                                      <+ ![ ( doc
+                                                            , <concat-strings> [ "no type definition "
+                                                                               , "ComplexTypeNestedMax"
+                                                                               , " for element "
+                                                                               , "choice"
+                                                                               , " found"
+                                                                               ]
+                                                            )
+                                                          ])> doc => err \
+                                          }
+                                          <+ ![ ( <id>
+                                                , <concat-strings> ["expected element: ", "choice", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                )
+                                              ])
+                                         ; (is-error <+ !xs)> x \
+                          ; ?serr
+                          ; if is-error then
+                              !x
+                              ; {x, serr:
+                                  ?x
+                                  ; \ [x|xs] -> <({err:
+                                                    \ doc at Element(
+                                                            ElemName(
+                                                              QName(
+                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                              , "sequence"
                                                               )
-                                                            ])> doc => err \
-                                            }
-                                            <+ ![ ( <id>
-                                                  , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                                  )
-                                                ])
-                                           ; (is-error <+ !xs)> x \
-                            ; ?serr
-                            ; if is-error then
-                                !x
-                                ; ?x
-                                ; \ [x|xs] -> <({err:
-                                                  \ doc at Element(
-                                                          ElemName(
-                                                            QName(
-                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                            , "element"
                                                             )
-                                                          )
-                                                        , attributes
-                                                        , contents
-                                                        , ElemName(
-                                                            QName(
-                                                              Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
-                                                            , "element"
+                                                          , attributes
+                                                          , contents
+                                                          , ElemName(
+                                                              QName(
+                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                              , "sequence"
+                                                              )
                                                             )
-                                                          )
-                                                        ) -> err
-                                                    where <(validate-type-ElementType
-                                                            <+ ![ ( doc
-                                                                  , <concat-strings> [ "no type definition "
-                                                                                     , "ElementType"
-                                                                                     , " for element "
-                                                                                     , "element"
-                                                                                     , " found"
-                                                                                     ]
-                                                                  )
-                                                                ])> doc => err \
+                                                          ) -> err
+                                                      where <(validate-type-ComplexTypeNested
+                                                              <+ ![ ( doc
+                                                                    , <concat-strings> [ "no type definition "
+                                                                                       , "ComplexTypeNested"
+                                                                                       , " for element "
+                                                                                       , "sequence"
+                                                                                       , " found"
+                                                                                       ]
+                                                                    )
+                                                                  ])> doc => err \
+                                                  }
+                                                  <+ ![ ( <id>
+                                                        , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                        )
+                                                      ])
+                                                 ; (is-error <+ !xs)> x \
+                                  ; ?serr
+                                  ; if is-error then
+                                      !x
+                                      ; {x, serr:
+                                          ?x
+                                          ; \ [x|xs] -> <({err:
+                                                            \ doc at Element(
+                                                                    ElemName(
+                                                                      QName(
+                                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                      , "sequence"
+                                                                      )
+                                                                    )
+                                                                  , attributes
+                                                                  , contents
+                                                                  , ElemName(
+                                                                      QName(
+                                                                        Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                      , "sequence"
+                                                                      )
+                                                                    )
+                                                                  ) -> err
+                                                              where <(validate-type-ComplexTypeNestedMax
+                                                                      <+ ![ ( doc
+                                                                            , <concat-strings> [ "no type definition "
+                                                                                               , "ComplexTypeNestedMax"
+                                                                                               , " for element "
+                                                                                               , "sequence"
+                                                                                               , " found"
+                                                                                               ]
+                                                                            )
+                                                                          ])> doc => err \
+                                                          }
+                                                          <+ ![ ( <id>
+                                                                , <concat-strings> ["expected element: ", "sequence", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                                )
+                                                              ])
+                                                         ; (is-error <+ !xs)> x \
+                                          ; ?serr
+                                          ; if is-error then
+                                              !x
+                                              ; {x, serr:
+                                                  ?x
+                                                  ; \ [x|xs] -> <({err:
+                                                                    \ doc at Element(
+                                                                            ElemName(
+                                                                              QName(
+                                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                              , "element"
+                                                                              )
+                                                                            )
+                                                                          , attributes
+                                                                          , contents
+                                                                          , ElemName(
+                                                                              QName(
+                                                                                Some(URIPrefix("http://www.w3.org/2001/XMLSchema"))
+                                                                              , "element"
+                                                                              )
+                                                                            )
+                                                                          ) -> err
+                                                                      where <(validate-type-ElementType
+                                                                              <+ ![ ( doc
+                                                                                    , <concat-strings> [ "no type definition "
+                                                                                                       , "ElementType"
+                                                                                                       , " for element "
+                                                                                                       , "element"
+                                                                                                       , " found"
+                                                                                                       ]
+                                                                                    )
+                                                                                  ])> doc => err \
+                                                                  }
+                                                                  <+ ![ ( <id>
+                                                                        , <concat-strings> ["expected element: ", "element", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
+                                                                        )
+                                                                      ])
+                                                                 ; (is-error <+ !xs)> x \
+                                                  ; ?serr
+                                                  ; if is-error then !x ; fail <+ !serr else id end
                                                 }
-                                                <+ ![ ( <id>
-                                                      , <concat-strings> ["expected element: ", "element", " of namespace: ", "http://www.w3.org/2001/XMLSchema"]
-                                                      )
-                                                    ])
-                                               ; (is-error <+ !xs)> x \
-                                ; ?serr
-                                ; if is-error then !x ; fail <+ !serr else id end
-                                <+ !serr
-                              else
-                                id
-                              end
-                            <+ !serr
-                          else
-                            id
-                          end
-                        <+ !serr
-                      else
-                        id
-                      end
-                    <+ !serr
-                  else
-                    id
-                  end
+                                              <+ !serr
+                                            else
+                                              id
+                                            end
+                                        }
+                                      <+ !serr
+                                    else
+                                      id
+                                    end
+                                }
+                              <+ !serr
+                            else
+                              id
+                            end
+                        }
+                      <+ !serr
+                    else
+                      id
+                    end
+                }
               )
               ; if is-error then
                   id

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Fri Mar 25 11:53:58 2011	(r22430)
@@ -2,8 +2,6 @@
 
 import static org.sugarj.driver.Log.log;
 
-import java.io.File;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -20,11 +18,12 @@
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.jsglr.client.imploder.Token;
 import org.spoofax.terms.StrategoListIterator;
+import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.ParentAttachment;
 import org.spoofax.terms.attachments.ParentTermFactory;
+import org.spoofax.terms.io.InlinePrinter;
 import org.spoofax.terms.io.TAFTermReader;
 import org.strategoxt.HybridInterpreter;
-import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.tools.sdf_desugar_0_0;
@@ -71,10 +70,10 @@
     }
   }
   
-  public static ITermFactory factory = new ParentTermFactory(Environment.getTermFactory());
+  public static ITermFactory factory = new ParentTermFactory(new TermFactory());
 
   public static IStrategoTerm atermFromFile(String filename) throws IOException {
-    IStrategoTerm term = org.sugarj.driver.Environment.terms.get(filename);
+    IStrategoTerm term = Environment.terms.get(filename);
     
     if (term != null)
       return term;
@@ -86,13 +85,18 @@
     return new TAFTermReader(factory).parseFromString(s);
   }
 
+  public static String atermToFile(IStrategoTerm aterm) throws IOException {
+    String file = FileCommands.newTempFile("ast");
+    atermToFile(aterm, file);
+    return file;
+  }
+  
   public static void atermToFile(IStrategoTerm aterm, String filename)
       throws IOException {
-    org.sugarj.driver.Environment.terms.put(filename, aterm);
-
-    FileWriter writer = new FileWriter(new File(filename));
-    aterm.writeAsString(writer, Integer.MAX_VALUE);
-    writer.close();
+    Environment.terms.put(filename, aterm);
+    InlinePrinter printer = new InlinePrinter();
+    aterm.prettyPrint(printer);
+    FileCommands.writeToFile(filename, printer.getString());
   }
 
   public static boolean isApplication(IStrategoTerm term, String cons) {
@@ -304,8 +308,15 @@
     IToken left = ImploderAttachment.getLeftToken(toplevelDecl);
     IToken right = ImploderAttachment.getRightToken(toplevelDecl);
     
+    String file = "no file";
+    try {
+      file = atermToFile(toplevelDecl);
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+    
     if (left == null || right == null)
-      throw new IllegalStateException(msg + ": " + toplevelDecl);
+      throw new IllegalStateException(msg + ": " + file);
     
     for (int i = left.getIndex(), max = right.getIndex(); i <= max; i++) {
       Token tok = ((Token) left.getTokenizer().getTokenAt(i));
@@ -315,7 +326,7 @@
         break;
     }
     
-    log.log(msg + ": " + toplevelDecl);
+    log.log(msg + ": " + file);
   }
   
 }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Fri Mar 25 11:53:58 2011	(r22430)
@@ -43,6 +43,7 @@
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.lang.Context;
 import org.strategoxt.permissivegrammars.make_permissive;
+import org.strategoxt.strj.strj;
 import org.strategoxt.tools.tools;
 import org.sugarj.driver.caching.ModuleKeyCache;
 import org.sugarj.driver.transformations.extraction.extraction;
@@ -53,6 +54,8 @@
  */
 public class Driver{
   
+  public final static String VERSION = "editor-services-0.1";
+  
   private static class Key {
     private String source;
     private String moduleName;
@@ -114,6 +117,8 @@
   private Context sdfContext;
   private Context makePermissiveContext;
   private Context extractionContext;
+  private Context strjContext;
+  
   private String currentTransProg;
   
   /**
@@ -449,7 +454,7 @@
           for (IStrategoTerm term : ATermCommands.getList(toplevelDecl))
             processToplevelDeclaration(term);
         else
-          throw new IllegalArgumentException("unexpected toplevel declaration, desugaring probably failed");
+          throw new IllegalArgumentException("unexpected toplevel declaration, desugaring probably failed: " + toplevelDecl.toString(5));
       } catch (Exception e) {
         ATermCommands.setErrorMessage(toplevelDecl, e.getLocalizedMessage() != null ? e.getLocalizedMessage() : e.toString());
         sugaredTypeOrSugarDecls.add(lastSugaredToplevelDecl);
@@ -492,7 +497,7 @@
         "desugaring",
         "DESUGAR the current toplevel declaration.");
     try {
-      currentTransProg = STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(), strParser);
+      currentTransProg = STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(), strParser, strjContext);
 
       return STRCommands.assimilate(currentTransProg, term, interp);
     } finally {
@@ -562,7 +567,7 @@
     }
   }
 
-  private void processImportDec(IStrategoTerm toplevelDecl) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
+  private void processImportDec(IStrategoTerm toplevelDecl) {
     
     sugaredImportDecls.add(lastSugaredToplevelDecl);
     
@@ -588,7 +593,7 @@
         URI classUri = ModuleSystemCommands.searchFile(modulePath, ".class");
         if (!success ||
             pendingInputFiles.contains(sourceFile) ||
-            new File(sourceFile).lastModified() > new File(classUri).lastModified()) {
+            (classUri != null && new File(sourceFile).lastModified() > new File(classUri).lastModified())) {
 
           log.log("Need to compile the imported module first ; processing it now.");
           compile(sourceFile);
@@ -602,6 +607,8 @@
       if (!success)
         ATermCommands.setErrorMessage(toplevelDecl, "module not found " + importModule);
       
+    } catch (Exception e) {
+      throw new RuntimeException(e);
     } finally {
       log.endTask();
     }
@@ -665,7 +672,7 @@
   }
 
   private void processSugarDec(IStrategoTerm toplevelDecl) throws IOException,
-      InvalidParseTableException {
+      InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
     log.beginTask(
         "processing",
         "PROCESS the desugared sugar declaration.");
@@ -720,15 +727,6 @@
         log.log("The name of the sugar is '" + extName + "'.");
         log.log("The full name of the sugar is '" + fullExtName + "'.");
 
-        if (extName.equals(mainModuleName))
-          driverResult.appendToFile(
-              javaOutFile,
-              "/* auto-generated dummy class as replacement\n" + 
-              " * for extracted sugar.\n" +
-              " */\n" +
-              (isPublic ? "public " : "") + "class " + mainModuleName + "{}\n");
-        
-
         if (isPublic)
           log.log("The sugar is public.");
         else
@@ -748,13 +746,12 @@
           bin + sep + relPackageNameSep()
               + extName + ".sdf";
   
-      FileCommands.createFile(sdfExtension);
-  
       String strExtension =
           bin + sep + relPackageNameSep()
               + extName + ".str";
-  
-      FileCommands.createFile(strExtension);
+      
+      FileCommands.delete(sdfExtension);
+      FileCommands.delete(strExtension);
 
       String sdfImports = " imports " + StringCommands.printListSeparated(availableSDFImports, " ") + "\n";
       String strImports = " imports " + StringCommands.printListSeparated(availableSTRImports, " ") + "\n";
@@ -765,21 +762,24 @@
         if (nativeModule.length() > 1)
             // remove quotes
           nativeModule = nativeModule.substring(1, nativeModule.length() - 1);
-            
+          
+        if (FileCommands.exists(ModuleSystemCommands.searchFile(nativeModule, ".sdf"))) {
           availableSDFImports.add(nativeModule);
+          driverResult.generateFile(
+              sdfExtension, 
+              "module " + fullExtName + "\n" 
+              + sdfImports 
+              + "imports " + nativeModule);
+        }
+
+        if (FileCommands.exists(ModuleSystemCommands.searchFile(nativeModule, ".str"))) {
           availableSTRImports.add(nativeModule);
-        
-        driverResult.generateFile(
-            sdfExtension, 
-            "module " + fullExtName + "\n" 
-            + sdfImports 
-            + "imports " + nativeModule);
-        
-        driverResult.generateFile(
-            strExtension, 
-            "module " + fullExtName + "\n" 
-            + strImports
-            + "imports " + nativeModule);
+          driverResult.generateFile(
+              strExtension, 
+              "module " + fullExtName + "\n" 
+              + strImports
+              + "imports " + nativeModule);
+        }
       }
       else {
         // this is a list of SDF and Stratego statements
@@ -787,85 +787,82 @@
   
         IStrategoTerm sdfExtract = fixSDF(extractSDF(sugarBody, extractionContext), interp);
         IStrategoTerm strExtract = extractSTR(sugarBody, extractionContext);
-  
-        String sdfExtensionHead =
-          "module " + fullExtName + "\n" 
-          + sdfImports
-          + (isPublic ? "exports " : "hiddens ") + "\n"
-          + "  (/)" + "\n";
-
-        String sdfExtensionContent = SDFCommands.prettyPrintSDF(sdfExtract, interp);
-
-        String sdfSource = SDFCommands.makePermissiveSdf(sdfExtensionHead + sdfExtensionContent, makePermissiveContext);
-        driverResult.generateFile(sdfExtension, sdfSource);
-
-        
-        String strExtensionTerm = 
-            "Module(" + "\"" + fullExtName+ "\"" + ", " 
-                      + strExtract + ")" + "\n";
-
-        String strExtensionContent = SDFCommands.prettyPrintSTR(ATermCommands.atermFromString(strExtensionTerm), interp);
-        
-        int index = strExtensionContent.indexOf('\n');
-        if (index >= 0)
-          strExtensionContent =
-            strExtensionContent.substring(0, index + 1) + "\n"
-            + strImports + "\n"
-            + strExtensionContent.substring(index + 1);
-        else
-          strExtensionContent += strImports;
-          
-        
-        driverResult.generateFile(strExtension, strExtensionContent);
         
-        availableSDFImports.add(fullExtName);
-        availableSTRImports.add(fullExtName);
-      }
-
-
-      if (CommandExecution.FULL_COMMAND_LINE) {
-        System.out.println("  Wrote SDF file to '" + new File(sdfExtension).getAbsolutePath() + "'.");
-        System.out.println("  Wrote Stratego file to '" + new File(strExtension).getAbsolutePath() + "'.");
-      }
-      
-      String currentGrammarName =
-        FileCommands.hashFileName("sugarj", currentGrammarModule + fullExtName);
-
-      currentGrammarSDF =
-          Environment.tmpDir + sep + currentGrammarName + ".sdf";
+        if (!ATermCommands.isList(sdfExtract) || !ATermCommands.getList(sdfExtract).isEmpty()) {
+          String sdfExtensionHead =
+            "module " + fullExtName + "\n" 
+            + sdfImports
+            + (isPublic ? "exports " : "hiddens ") + "\n"
+            + "  (/)" + "\n";
+  
+          String sdfExtensionContent = SDFCommands.prettyPrintSDF(sdfExtract, interp);
+  
+          String sdfSource = SDFCommands.makePermissiveSdf(sdfExtensionHead + sdfExtensionContent, makePermissiveContext);
+          driverResult.generateFile(sdfExtension, sdfSource);
+          availableSDFImports.add(fullExtName);
+          
+          if (CommandExecution.FULL_COMMAND_LINE)
+            log.log("Wrote SDF file to '" + new File(sdfExtension).getAbsolutePath() + "'.");
+          
+          String currentGrammarName =
+            FileCommands.hashFileName("sugarj", currentGrammarModule + fullExtName);
 
-      driverResult.generateFile(currentGrammarSDF, 
-          "module " + currentGrammarName + "\n"
-          + "imports " + currentGrammarModule + "\n" 
-          + "        " + fullExtName);
-      currentGrammarModule = currentGrammarName;
+          currentGrammarSDF =
+              Environment.tmpDir + sep + currentGrammarName + ".sdf";
 
+          driverResult.generateFile(currentGrammarSDF, 
+              "module " + currentGrammarName + "\n"
+              + "imports " + currentGrammarModule + "\n" 
+              + "        " + fullExtName);
+          currentGrammarModule = currentGrammarName;
+        }
 
-      String currentTransName =
-        FileCommands.hashFileName("sugarj", currentTransModule + fullExtName);
+        if (!ATermCommands.isList(strExtract) || !ATermCommands.getList(strExtract).isEmpty() || // or if no sdf file was generated
+            !(!ATermCommands.isList(sdfExtract) || !ATermCommands.getList(sdfExtract).isEmpty())) {
+          String strExtensionTerm = 
+              "Module(" + "\"" + fullExtName+ "\"" + ", " 
+                        + strExtract + ")" + "\n";
+  
+          String strExtensionContent = SDFCommands.prettyPrintSTR(ATermCommands.atermFromString(strExtensionTerm), interp);
+          
+          int index = strExtensionContent.indexOf('\n');
+          if (index >= 0)
+            strExtensionContent =
+              strExtensionContent.substring(0, index + 1) + "\n"
+              + strImports + "\n"
+              + strExtensionContent.substring(index + 1);
+          else
+            strExtensionContent += strImports;
+            
+          
+          driverResult.generateFile(strExtension, strExtensionContent);
+          availableSTRImports.add(fullExtName);
+          
+          if (CommandExecution.FULL_COMMAND_LINE)
+            log.log("Wrote Stratego file to '" + new File(strExtension).getAbsolutePath() + "'.");
+          
+          String currentTransName =
+            FileCommands.hashFileName("sugarj", currentTransModule + fullExtName);
 
-      currentTransSTR = Environment.tmpDir + sep + currentTransName + ".str";
+          currentTransSTR = Environment.tmpDir + sep + currentTransName + ".str";
 
-      driverResult.generateFile(currentTransSTR,
-          "module " + currentTransName + "\n" 
-          + "imports " + currentTransModule + "\n"
-          + "        " + fullExtName);
-      currentTransModule = currentTransName;
-      
-      skipCache = true;
+          driverResult.generateFile(currentTransSTR,
+              "module " + currentTransName + "\n" 
+              + "imports " + currentTransModule + "\n"
+              + "        " + fullExtName);
+          currentTransModule = currentTransName;
+        }
+      }
     } finally {
       log.endTask();
     }
   }
 
-  private void checkCurrentGrammar() throws IOException, InvalidParseTableException {
+  private void checkCurrentGrammar() throws IOException, InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
     log.beginTask("checking grammar", "CHECK current grammar");
     
     try {
-      boolean wocache = Environment.wocache;
-      Environment.wocache = true;
-      SDFCommands.check(currentGrammarSDF, currentGrammarModule, sdfContext);
-      Environment.wocache = wocache;
+      SDFCommands.compile(currentGrammarSDF, currentGrammarModule, driverResult.getFileDependencies(), sdfParser, sdfContext, makePermissiveContext);
     } finally {
       log.endTask();
     }
@@ -875,10 +872,7 @@
     log.beginTask("checking transformation", "CHECK current transformation");
     
     try {
-      boolean wocache = Environment.wocache;
-      Environment.wocache = true;
-      STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(), strParser);
-      Environment.wocache = wocache;
+      STRCommands.compile(currentTransSTR, "main", driverResult.getFileDependencies(), strParser, strjContext);
     } finally {
       log.endTask();
     }
@@ -921,12 +915,14 @@
     availableSTRImports = new ArrayList<String>();
 
     inputTreeBuilder = new RetractableTreeBuilder();
-    interp = new HybridInterpreter();
-    sdfContext = tools.init();
-    makePermissiveContext = make_permissive.init();
-    extractionContext = extraction.init();
     
-    // XXX need to load ANY parse table, preferable an empty one.
+    interp = new HybridInterpreter(); //TODO (ATermCommands.factory);
+    sdfContext = tools.init(interp.getCompiledContext());
+    makePermissiveContext = make_permissive.init(interp.getCompiledContext());
+    extractionContext = extraction.init(interp.getCompiledContext());
+    strjContext = strj.init(interp.getCompiledContext());
+    
+    // XXX need to load ANY parse table, preferably an empty one.
     parser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.sdfTbl.getPath()), "Sdf2Module");
     
     sdfParser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.sdfTbl.getPath()), "Sdf2Module");
@@ -941,6 +937,7 @@
     // log.log("This is the extensible java compiler.");
     try {
       initialize();
+      new Driver().init("");
       
       String[] sources = handleOptions(args);
 
@@ -1206,8 +1203,8 @@
     if (Environment.cacheDir == null)
       return;
     
-    String sdfCache = FileCommands.findFile("sdfCache", Environment.cacheDir);
-    String strCache = FileCommands.findFile("strCache", Environment.cacheDir);
+    String sdfCache = FileCommands.findFile("sdfCache" + "-" + VERSION, Environment.cacheDir);
+    String strCache = FileCommands.findFile("strCache" + "-" + VERSION, Environment.cacheDir);
 
     if (SDFCommands.sdfCache == null && sdfCache != null)
       try {
@@ -1247,12 +1244,12 @@
     String strCache = FileCommands.findFile("strCache", Environment.cacheDir);
 
     if (sdfCache == null) {
-      sdfCache = Environment.cacheDir + sep + "sdfCache";
+      sdfCache = Environment.cacheDir + sep + "sdfCache" + "-" + VERSION;
       FileCommands.createFile(sdfCache);
     }
 
     if (strCache == null) {
-      strCache = Environment.cacheDir + sep + "strCache";
+      strCache = Environment.cacheDir + sep + "strCache" + "-" + VERSION;
       FileCommands.createFile(strCache);
     }
     

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/FileCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/FileCommands.java	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/FileCommands.java	Fri Mar 25 11:53:58 2011	(r22430)
@@ -28,8 +28,6 @@
 
   private final static boolean DO_DELETE = false;
 
-  public static Set<String> keepFiles = new HashSet<String>();
-
   public static String newTempFile(String suffix) throws IOException {
     File f =
         File.createTempFile(
@@ -43,13 +41,15 @@
   }
 
   public static void delete(String file) throws IOException {
-    if (DO_DELETE)
-      if (!keepFiles.contains(file))
-        new File(file).delete();
+    new File(file).delete();
   }
 
   public static void copyFile(String from, String to) throws IOException {
-    copyFile(new FileInputStream(from), new FileOutputStream(to));
+    FileInputStream fis = new FileInputStream(from);
+    FileOutputStream fos = new FileOutputStream(to);
+    copyFile(fis, fos);
+    fis.close();
+    fos.close();
   }
   
   public static void copyFile(InputStream in, OutputStream out) throws IOException {
@@ -72,12 +72,16 @@
   public static void writeToFile(String file, String content)
       throws IOException {
     FileCommands.createFile(file);
-    new FileOutputStream(file).write(content.getBytes());
+    FileOutputStream fos = new FileOutputStream(file);
+    fos.write(content.getBytes());
+    fos.close();
   }
 
   public static void appendToFile(String file, String content)
       throws IOException {
-    new FileOutputStream(file, true).write(content.getBytes());
+    FileOutputStream fos = new FileOutputStream(file, true);
+    fos.write(content.getBytes());
+    fos.close();
   }
 
   // from http://snippets.dzone.com/posts/show/1335
@@ -180,6 +184,8 @@
     while ((len = in.read(b)) > 0)
       out.write(b, 0, len);
 
+    in.close();
+    out.close();
     delete(tmp.getAbsolutePath());
   }
 
@@ -295,6 +301,10 @@
   public static boolean exists(String file) {
     return new File(file).exists();
   }
+  
+  public static boolean exists(URI file) {
+    return new File(file).exists();
+  }
 
   public static String hashFileName(String prefix, int hash) {
     return prefix + (hash < 0 ? "1" + Math.abs(hash) : "0" + hash);

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ModuleSystemCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ModuleSystemCommands.java	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ModuleSystemCommands.java	Fri Mar 25 11:53:58 2011	(r22430)
@@ -15,6 +15,7 @@
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 
@@ -165,10 +166,10 @@
     if (modulePath.startsWith("org/sugarj"))
       return null;
     
-    URI result = searchFile(modulePath, ".sugj");
+    URI result = searchFile(modulePath, ".sugj", Collections.singleton(Environment.src));
     
     if (result == null)
-      result = searchFile(modulePath, ".java");
+      result = searchFile(modulePath, ".java", Collections.singleton(Environment.src));
     
     return result;
   }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Fri Mar 25 11:53:58 2011	(r22430)
@@ -171,6 +171,9 @@
       log.endTask(result != null);
     }
     
+    if (result != null && !new File(result).exists())
+      return null;
+    
     return result;
   }
   
@@ -221,10 +224,10 @@
     String def = FileCommands.newTempFile("def");
     String permissiveDef = FileCommands.newTempFile("def-permissive");
     
-    FileCommands.writeToFile(def, "definition\n" + source);
+    FileCommands.writeToFile(def, sdfToDef(source));
     makePermissive(def, permissiveDef, context);
     
-    return FileCommands.readFileAsString(permissiveDef).substring(11); // drop "definition\n"
+    return defToSdf(FileCommands.readFileAsString(permissiveDef)); // drop "definition\n"
   }
   
   private static void makePermissive(String def, String permissiveDef, Context context) throws IOException {
@@ -333,12 +336,12 @@
    * @return
    * @throws IOException 
    */
-  public static String prettyPrintSDF(IStrategoTerm term, HybridInterpreter interp) {
+  public static String prettyPrintSDF(IStrategoTerm term, HybridInterpreter interp) throws IOException {
     IStrategoTerm string = pp_sdf_string_0_0.instance.invoke(interp.getCompiledContext(), term);
     if (string != null)
       return Term.asJavaString(string);
     
-    throw new RuntimeException("pretty printing SDF AST failed: " + term);
+    throw new RuntimeException("pretty printing SDF AST failed: " + ATermCommands.atermToFile(term));
   }
   
   /**
@@ -348,12 +351,19 @@
    * @return
    * @throws IOException 
    */
-  public static String prettyPrintSTR(IStrategoTerm term, HybridInterpreter interp) {
+  public static String prettyPrintSTR(IStrategoTerm term, HybridInterpreter interp) throws IOException {
     IStrategoTerm string = pp_stratego_string_0_0.instance.invoke(interp.getCompiledContext(), term);
     if (string != null)
       return Term.asJavaString(string);
     
-    throw new RuntimeException("pretty printing STR AST failed: " + term);
+    throw new RuntimeException("pretty printing STR AST failed: " + ATermCommands.atermToFile(term));
+  }
+  
+  private static String sdfToDef(String sdf) {
+    return "definition\n" + sdf;
   }
   
+  private static String defToSdf(String def) {
+    return def.substring(11);
+  }
 }

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Fri Mar 25 10:36:14 2011	(r22429)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Fri Mar 25 11:53:58 2011	(r22430)
@@ -17,11 +17,14 @@
 
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.InvalidParseTableException;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.jsglr.shared.BadTokenException;
 import org.spoofax.jsglr.shared.SGLRException;
 import org.spoofax.jsglr.shared.TokenExpectedException;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
+import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.strj.Main;
 import org.sugarj.driver.caching.ModuleKey;
@@ -45,7 +48,7 @@
   /**
    *  Compiles a {@code *.str} file to a single {@code *.java} file. 
    */
-  private static void strj(String str, String java, String main) throws IOException {
+  private static void strj(String str, String java, String main, Context strjContext) throws IOException {
     
     /*
      * We can include as many paths as we want here, checking the
@@ -73,7 +76,7 @@
       }
     
     try {
-    Main.mainNoExit(cmd.toArray(new String[cmd.size()]));
+    Main.mainNoExit(strjContext, cmd.toArray(new String[cmd.size()]));
     }
     catch (StrategoExit e) {
       if (e.getValue() != 0)
@@ -86,12 +89,12 @@
   }
   
   
-  public static String compile(String str, String main, Collection<String> dependentFiles, JSGLRI strParser) throws IOException, InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
+  public static String compile(String str, String main, Collection<String> dependentFiles, JSGLRI strParser, Context strjContext) throws IOException, InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
     ModuleKey key = getModuleKeyForAssimilation(str, main, dependentFiles, strParser);
     String prog = lookupAssimilationInCache(key);
     
     if (prog == null) {
-      prog = generateAssimilator(key, str, main);
+      prog = generateAssimilator(key, str, main, strjContext);
       cacheAssimilator(key, prog);
     }
     return prog;
@@ -99,14 +102,15 @@
     
   private static String generateAssimilator(ModuleKey key,
                                             String str,
-                                            String main) throws IOException {
+                                            String main,
+                                            Context strjContext) throws IOException {
     log.beginTask("Generating", "Generate the assimilator");
     try {
       String dir = FileCommands.newTempDir();
       FileCommands.createDir(dir + sep + "sugarj");
       String javaFilename = FileCommands.fileName(str).replace("-", "_");
       String java = dir + sep + "sugarj" + sep + javaFilename + ".java";
-      strj(str, java, main);
+      strj(str, java, main, strjContext);
       
       if (!JavaCommands.javac(java, dir, Environment.includePath))
         throw new RuntimeException("java compilation failed");
@@ -130,7 +134,6 @@
     log.beginTask("Caching", "Cache assimilator");
     try {
       strCache.put(key, prog);
-      FileCommands.keepFiles.add(new File(prog).getParent());
 
       if (CommandExecution.CACHE_INFO)
         log.log("Cache Location: " + prog);
@@ -159,6 +162,9 @@
       log.endTask(result != null);
     }
     
+    if (result != null && !new File(result).exists())
+      return null;
+    
     return result;
   }
 
@@ -192,6 +198,16 @@
       
       if (newInterp.invoke("internal-main")) {
         IStrategoTerm term = newInterp.current();
+        
+        IToken left = ImploderAttachment.getLeftToken(in);
+        IToken right = ImploderAttachment.getRightToken(in);
+        String sort = ImploderAttachment.getSort(in);
+        
+        try {
+          ImploderAttachment.putImploderAttachment(term, false, sort, left, right);
+        } catch (Exception e) {
+          log.log("origin annotation failed");
+        }
         return term;
       }
       else

From R.B.Vermaas at tudelft.nl  Fri Mar 25 15:29:09 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 25 Mar 2011 14:29:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22431 - hydra
Message-ID: <20110325142909.8E8C3108C003@mx3.tudelft.nl>

Author: rob
Date: Fri Mar 25 14:29:09 2011
New Revision: 22431
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22431&sc=1

Log:
hack

Modified:
   hydra/spoofax-fun.nix

Modified: hydra/spoofax-fun.nix
==============================================================================
--- hydra/spoofax-fun.nix	Fri Mar 25 11:53:58 2011	(r22430)
+++ hydra/spoofax-fun.nix	Fri Mar 25 14:29:09 2011	(r22431)
@@ -32,6 +32,10 @@
     export LOCALCLASSPATH="utils/aster.jar:utils/make_permissive.jar:utils/sdf2imp.jar:utils/strategoxt.jar:$LOCALCLASSPATH"
     export ANT_OPTS="-Xss8m -Xmx2048m"
 
+    mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=${version}-SNAPSHOT -DgroupId=${name} -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
+
+    mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e || true
+
     for d in */build.main.xml ; do
       export dir="`dirname $d`"
       header "Prebuilding $dir..."
@@ -46,7 +50,6 @@
       cd ..
     done
 
-    mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=${version}-SNAPSHOT -DgroupId=${name} -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
     mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
   '';
 	      

From R.B.Vermaas at tudelft.nl  Fri Mar 25 15:47:28 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 25 Mar 2011 14:47:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22432 - hydra
Message-ID: <20110325144728.9698B7F800F@mx1.tudelft.nl>

Author: rob
Date: Fri Mar 25 14:47:28 2011
New Revision: 22432
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22432&sc=1

Log:
revert hack

Modified:
   hydra/spoofax-fun.nix

Modified: hydra/spoofax-fun.nix
==============================================================================
--- hydra/spoofax-fun.nix	Fri Mar 25 14:29:09 2011	(r22431)
+++ hydra/spoofax-fun.nix	Fri Mar 25 14:47:28 2011	(r22432)
@@ -32,9 +32,6 @@
     export LOCALCLASSPATH="utils/aster.jar:utils/make_permissive.jar:utils/sdf2imp.jar:utils/strategoxt.jar:$LOCALCLASSPATH"
     export ANT_OPTS="-Xss8m -Xmx2048m"
 
-    mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=${version}-SNAPSHOT -DgroupId=${name} -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
-
-    mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e || true
 
     for d in */build.main.xml ; do
       export dir="`dirname $d`"
@@ -50,6 +47,7 @@
       cd ..
     done
 
+    mvn org.sonatype.tycho:maven-tycho-plugin:generate-poms -Dversion=${version}-SNAPSHOT -DgroupId=${name} -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags}
     mvn package -Dtycho.targetPlatform=${eclipse}/eclipse ${mvnFlags} -e
   '';
 	      

From seba at informatik.uni-marburg.de  Fri Mar 25 18:27:34 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 25 Mar 2011 17:27:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22433 - in
	sugarj/branches/SugarJ-editor-services: compiler/org/sugarj/driver
	editor/editor/java/org/sugarj/editor editor/syntax
	stdlib/org/sugarj/stdlib
Message-ID: <20110325172734.EBC80108C02A@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Fri Mar 25 17:27:34 2011
New Revision: 22433
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22433&sc=1

Log:


Modified:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java
   sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java
   sugarj/branches/SugarJ-editor-services/editor/syntax/SugarJ.sdf
   sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/stdlib/StdLib.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Fri Mar 25 14:47:28 2011	(r22432)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Fri Mar 25 17:27:34 2011	(r22433)
@@ -920,7 +920,7 @@
     sdfContext = tools.init(interp.getCompiledContext());
     makePermissiveContext = make_permissive.init(interp.getCompiledContext());
     extractionContext = extraction.init(interp.getCompiledContext());
-    strjContext = strj.init(interp.getCompiledContext());
+    strjContext = org.strategoxt.strj.Main.init(interp.getCompiledContext());
     
     // XXX need to load ANY parse table, preferably an empty one.
     parser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.sdfTbl.getPath()), "Sdf2Module");

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Fri Mar 25 14:47:28 2011	(r22432)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/SDFCommands.java	Fri Mar 25 17:27:34 2011	(r22433)
@@ -44,8 +44,6 @@
  */
 public class SDFCommands {
   
-  private final static String SDF_2_TABLE = StdLib.binDir.getPath() + "sdf2table";
-  
   private final static Pattern SDF_FILE_PATTERN = Pattern.compile(".*\\.sdf");
   
   public static ModuleKeyCache<String> sdfCache = null;
@@ -87,19 +85,32 @@
   }
   
   private static void sdf2Table(String def, String tbl, String module) throws IOException {
-    String[] cmd = new String[] {
-        "bash",
-        SDF_2_TABLE,
+    sdf2Table(def, tbl, module, false);
+  }
+  
+  private static void sdf2Table(String def, String tbl, String module, boolean normalize) throws IOException {
+    String[] cmd; 
+    
+    if (!normalize)
+      cmd = new String[] {
         "-i", toCygwinPath(def),
         "-o", toCygwinPath(tbl),
         "-m", module
-    };
+      };
+    else
+      cmd = new String[] {
+        "-i", toCygwinPath(def),
+        "-o", toCygwinPath(tbl),
+        "-m", module,
+        "-n"
+      };
     
-    IStrategoTerm termArgs[] = new IStrategoTerm[cmd.length - 2];
+    IStrategoTerm termArgs[] = new IStrategoTerm[cmd.length];
     for (int i = 0; i < termArgs.length; i++)
-      termArgs[i] = ATermCommands.makeString(cmd[i+2], null);
+      termArgs[i] = ATermCommands.makeString(cmd[i], null);
     
     Context context = stratego_xtc.init();
+    SDFBundleCommand.getInstance().init();
     SDFBundleCommand.getInstance().invoke(context, "sdf2table", termArgs);
     
     if (!new File(tbl).exists())
@@ -107,15 +118,7 @@
   }
 
   private static void normalizeTable(String def, String module) throws IOException {
-    String[] cmd = new String[] {
-        "bash",
-        SDF_2_TABLE,
-        "-i", toCygwinPath(def),
-        "-m", module,
-        "-n"
-    };
-    
-    CommandExecution.executeWithPrefix("sdf2table", cmd);
+    sdf2Table(def, FileCommands.newTempFile("tbl"), module, true);
   }
   
   public static void check(String sdf, String module, Context sdfContext) throws IOException {

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Fri Mar 25 14:47:28 2011	(r22432)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Fri Mar 25 17:27:34 2011	(r22433)
@@ -115,7 +115,6 @@
       if (!JavaCommands.javac(java, dir, Environment.includePath))
         throw new RuntimeException("java compilation failed");
         
-
       String jarfile = FileCommands.newTempFile("jar");
       JavaCommands.jar(dir, jarfile);
 

Modified: sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java	Fri Mar 25 14:47:28 2011	(r22432)
+++ sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java	Fri Mar 25 17:27:34 2011	(r22433)
@@ -49,7 +49,7 @@
 
     
     Environment.atomicImportParsing = true;
-    Environment.generateJavaFile = true;
+    // Environment.generateJavaFile = true;
 
     // use this to temporarily deactivate caching
     // Environment.wocache = true;

Modified: sugarj/branches/SugarJ-editor-services/editor/syntax/SugarJ.sdf
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/syntax/SugarJ.sdf	Fri Mar 25 14:47:28 2011	(r22432)
+++ sugarj/branches/SugarJ-editor-services/editor/syntax/SugarJ.sdf	Fri Mar 25 17:27:34 2011	(r22433)
@@ -1,150 +1,7 @@
 module SugarJ
-imports org/sugarj/languages/Java
-        org/sugarj/languages/Sdf2
-        org/sugarj/languages/Stratego
-
 exports
-  sorts SugarDec
-        TypeOrSugarDec
-        SugarMod
-        %% SuperExtension
-        AnnoOrSugarMod
-        %% ExtensionType
-        SugarBody
-        SugarDecHead
-        NativeSugarDecHead
-        NativeSugarBody
-        SugarCompilationUnit
-        ToplevelDeclaration
-        SugarJLayout
-
   context-free start-symbols
     SugarCompilationUnit
-
-  lexical syntax
-    [\ \t\12\r\n] -> SugarJLayout
-    JavaComment -> SugarJLayout
-    "%%" line:~[\n]* "\n"	-> SugarJLayout {cons("line"),category("Comment")}
-
-  context-free restrictions
-    SugarJLayout? -/- [\ \t\12\n\r\%]
-    SugarJLayout?  -/- [\/].[\*]
-    SugarJLayout?  -/- [\/].[\/]
-
-
-  context-free syntax
-  	JavaPackageDec? JavaImportDec* TypeOrSugarDec*  -> SugarCompilationUnit {prefer,cons("SugarCompilationUnit")}
-  	
-  	JavaTypeDec -> TypeOrSugarDec {cons("JavaTypeDec")}
-  	SugarDec -> TypeOrSugarDec
- 
-  context-free syntax
-    SugarDecHead SugarBody
-      -> SugarDec {cons("SugarDec")}
-
-    NativeSugarDecHead NativeSugarBody ";"
-      -> SugarDec {cons("SugarDec")}
-
-    %% JavaTypeName -> ExtensionType
-
-
-  context-free syntax %% for SyntaxDecHead
-    AnnoOrSugarMod* "sugar" JavaId   %% SuperSugar?
-      -> SugarDecHead {cons("SugarDecHead")}
-
-     AnnoOrSugarMod* JavaNative "sugar" JavaId
-      -> NativeSugarDecHead {cons("NativeSugarDecHead")}
-
-  	JavaAnno -> AnnoOrSugarMod
-  	SugarMod -> AnnoOrSugarMod
-  	
-    JavaPublic    -> SugarMod
-    %% JavaPrivate   -> SugarMod
-
-    %% "extends" {SugarType ","}*
-    %%   -> SuperSugar {cons("SuperSugarDec")}
-
-  lexical restrictions
-    "sugar" -/-  [a-zA-Z0-9\'\-\_]
-    
-  context-free syntax
-    "{" SugarDef  "}" -> SugarBody {cons("SugarBody")}
-    "=" StrategoModName   -> NativeSugarBody {cons("NativeSugarBody")}
-
-
-
-
-
-
-
-%% embedding of SDF and Stratego
-
-sorts Grammar Transformation Desugaring SugarDef SugarDefElem
-
-  context-free start-symbols SugarDef
-
-  context-free syntax
-    Grammar        -> SugarDefElem {cons("grammar-elem")}
-    Transformation -> SugarDefElem {cons("transformation-elem")}
-
-    SugarDefElem* -> SugarDef
-
-
-  context-free syntax
-    "sorts" Sdf2Symbols -> Grammar {cons("sorts")}
-
-%%    "start-symbols"                Sdf2Symbols -> Grammar {cons("kernel-start-symbols")} 
-%%    "lexical" "start-symbols"      Sdf2Symbols -> Grammar {cons("lexical-start-symbols")}
-%%    "context-free" "start-symbols" Sdf2Symbols -> Grammar {cons("context-free-start-symbols")}
-
-    "syntax"                Sdf2Productions -> Grammar {cons("syntax")}
-    "lexical" "syntax"      Sdf2Productions -> Grammar {cons("lexical-syntax")}
-    "context-free" "syntax" Sdf2Productions -> Grammar {cons("context-free-syntax")}
-    "variables"             Sdf2Productions -> Grammar {cons("variables")}
-    "lexical" "variables"   Sdf2Productions -> Grammar {cons("lexical-variables")}
-
-    "priorities"                Sdf2Priorities -> Grammar  {cons("priorities")}
-    "lexical"      "priorities" Sdf2Priorities -> Grammar {cons("lexical-priorities")}
-    "context-free" "priorities" Sdf2Priorities -> Grammar {cons("context-free-priorities")}
-
-    "restrictions"                Sdf2Restrictions -> Grammar  {cons("restrictions")}
-    "lexical"      "restrictions" Sdf2Restrictions -> Grammar {cons("lexical-restrictions")}
-    "context-free" "restrictions" Sdf2Restrictions -> Grammar {cons("context-free-restrictions")}
-
-    "aliases" Sdf2Aliases -> Grammar  {cons("aliases")}
-
-  lexical syntax
-  	"sorts" -> StrategoId {reject}
-  	"lexical" -> StrategoId {reject}
-  	"context-free" -> StrategoId {reject}
-  	"variables" -> StrategoId {reject}
-  	"priorities" -> StrategoId {reject}
-  	"restrictions" -> StrategoId {reject}
-  	"aliases" -> StrategoId {reject}
-
-  context-free syntax
-    "strategies" StrategoDef*   -> Transformation {cons("Strategies")}
-    "signature" StrategoSdecl*  -> Transformation {cons("Signature")}
-    "rules" StrategoDef*        -> Transformation {cons("Rules")}
-    "overlays" StrategoOverlay* -> Transformation {cons("Overlays")}
-
   
-  lexical syntax
-    "desugarings" -> StrategoKeyword
-
-  context-free syntax
-    "desugarings" Desugaring* -> Transformation {cons("Desugarings")}  
-
   context-free syntax
-    StrategoStrategy -> Desugaring {cons("PureDesugaring")}
-    
-    StrategoStrategy ":" Sdf2Symbol "->" Sdf2Symbol Sdf2Attributes 
-      -> Desugaring {cons("InjectDesugaring")}
-
-  lexical restrictions
-    "desugarings" -/- [a-zA-Z0-9\'\-\_]
-
-
-
-  lexical syntax
-         -> "}" {recover, reject}
+    "abc" -> SugarCompilationUnit {cons("abc")}
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/stdlib/StdLib.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/stdlib/StdLib.java	Fri Mar 25 14:47:28 2011	(r22432)
+++ sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/stdlib/StdLib.java	Fri Mar 25 17:27:34 2011	(r22433)
@@ -1,6 +1,9 @@
 package org.sugarj.stdlib;
 
 import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
@@ -11,28 +14,65 @@
 public class StdLib {
 
   public static URL stdLibDir;
+  private static String stdLibTmpDir;
   static {
     stdLibDir = StdLib.class.getProtectionDomain().getCodeSource().getLocation();
+
+    try {
+      File f = File.createTempFile("org.sugarj.stdlib", "");
+      f.delete();
+      f.mkdir();
+      stdLibTmpDir = f.getPath();
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+  }
+
+  private static URI ensureFile(String ressource) {
+    try {
+      URI uri = StdLib.class.getClassLoader().getResource(ressource).toURI();
+      if (uri != null && uri.getPath() != null && new File(uri.getPath()).exists())
+        return uri;
+    } catch (URISyntaxException e) {
+    }
+      
+    
+    File f = new File(stdLibTmpDir + "/" + ressource);
+    f.getParentFile().mkdirs();
+    
+    try {
+      InputStream in = StdLib.class.getClassLoader().getResourceAsStream(ressource);
+      FileOutputStream fos = new FileOutputStream(f);
+      byte[] bs = new byte[256];
+      while (in.read(bs) >= 0)
+        fos.write(bs);
+      fos.close();
+      in.close();
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+    
+    return f.toURI();
   }
+  
 
-  public static URI sugarjDef = new File(stdLibDir.getPath() + "/" + "org/sugarj/languages/SugarJ.def").toURI();
-  public static URI javaDef = new File(stdLibDir.getPath() + "/" + "org/sugarj/languages/Java-15.def").toURI();
-  public static URI sdfDef = new File(stdLibDir.getPath() + "/" + "org/sugarj/languages/Sdf2.def").toURI();
-  public static URI sdfTbl = new File(stdLibDir.getPath() + "/" + "org/sugarj/languages/Sdf2.tbl").toURI();
-  public static URI strategoDef = new File(stdLibDir.getPath() + "/" + "org/sugarj/languages/Stratego.def").toURI();
-  public static URI strategoTbl = new File(stdLibDir.getPath() + "/" + "org/sugarj/languages/Stratego.tbl").toURI();
-  public static URI editorServiceDef = new File(stdLibDir.getPath() + "/" + "org/sugarj/languages/EditorServices.def").toURI();
+  
+  public static URI sugarjDef = ensureFile("org/sugarj/languages/SugarJ.def");
+  public static URI javaDef = ensureFile("org/sugarj/languages/Java-15.def");
+  public static URI sdfDef = ensureFile("org/sugarj/languages/Sdf2.def");
+  public static URI sdfTbl = ensureFile("org/sugarj/languages/Sdf2.tbl");
+  public static URI strategoDef = ensureFile("org/sugarj/languages/Stratego.def");
+  public static URI strategoTbl = ensureFile("org/sugarj/languages/Stratego.tbl");
+  public static URI editorServiceDef = ensureFile("org/sugarj/languages/EditorServices.def");
 
-  public static URI initGrammar = new File(stdLibDir.getPath() + "/" + "org/sugarj/init/initGrammar.sdf").toURI();
+  public static URI initGrammar = ensureFile("org/sugarj/init/initGrammar.sdf");
   public static String initGrammarModule = "org/sugarj/init/initGrammar";
-  public static URI initGrammarAtomicImports = new File(stdLibDir.getPath() + "/" + "org/sugarj/init/initGrammar_atomicImports.sdf").toURI();
+  public static URI initGrammarAtomicImports = ensureFile("org/sugarj/init/initGrammar_atomicImports.sdf");
   public static String initGrammarAtomicImportsModule = "org/sugarj/init/initGrammar_atomicImports";
-  public static URI initGrammarXTBL = new File(stdLibDir.getPath() + "/" + "org/sugarj/init/initGrammar.xtbl").toURI();
-  public static URI initTrans = new File(stdLibDir.getPath() + "/" + "org/sugarj/init/initTrans.str").toURI();
+  public static URI initGrammarXTBL = ensureFile("org/sugarj/init/initGrammar.xtbl");
+  public static URI initTrans = ensureFile("org/sugarj/init/initTrans.str");
   public static String initTransModule = "org/sugarj/init/initTrans";
 
-  public static URI binDir = new File(System.getProperty("user.home") + "/.nix-profile/bin").toURI();
-  
   public static void main(String args[]) throws URISyntaxException {
     exists(javaDef);
     exists(sdfDef);
@@ -44,7 +84,6 @@
     exists(initGrammarXTBL);
     exists(initTrans);
     exists(stdLibDir.toURI());
-    exists(binDir);
   }
   
   private static void exists(URI uri) {

From seba at informatik.uni-marburg.de  Fri Mar 25 18:28:13 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Fri, 25 Mar 2011 17:28:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22434 - in
	spoofax-imp/trunk:
	org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20110325172813.8DD65CC1AD@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Fri Mar 25 17:28:13 2011
New Revision: 22434
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22434&sc=1

Log:
support for running tools as standalone applications, i.e. not as a plug-in

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	Fri Mar 25 17:27:34 2011	(r22433)
+++ spoofax-imp/trunk/org.strategoxt.imp.nativebundle/src/org/strategoxt/imp/nativebundle/SDFBundleCommand.java	Fri Mar 25 17:28:13 2011	(r22434)
@@ -14,7 +14,6 @@
 import java.util.Map.Entry;
 
 import org.eclipse.core.runtime.FileLocator;
-import org.eclipse.core.runtime.Platform;
 import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -55,8 +54,7 @@
 		binaryPath = getBinaryPath();
 		binaryExtension = getBinaryExtension();
 		
-		String os = Platform.getOS();
-		if (os.equals(Platform.OS_LINUX) || os.equals(Platform.OS_MACOSX)) {
+		if (isLinuxOS() || isMacOS()) {
 			EditorIOAgent agent = new EditorIOAgent();
 			boolean success = makeExecutable(agent, "sdf2table") && makeExecutable(agent, "implodePT");
 			if (!success)
@@ -70,30 +68,40 @@
 		if (System.getenv("SPOOFAX_NATIVE_PATH") != null)
 			return System.getenv("SPOOFAX_NATIVE_PATH");
 		
-		String os = Platform.getOS();
 		String subdir;
-		if (os.equals(Platform.OS_LINUX)) {
+		if (isLinuxOS()) {
 			subdir = "linux";
-		} else if (os.equals(Platform.OS_WIN32)){
+		} else if (isWindowsOS()) {
 			subdir = "cygwin";
-		} else if (os.equals(Platform.OS_MACOSX)) {
+		} else if (isMacOS()){
 			subdir = "macosx";
 		} else {
 			throw new UnsupportedOperationException("Platform is not supported"); // TODO: print platform
 		}
 		
-		URL url = Activator.getInstance().getContext().getBundle().getResource(NATIVE_PATH + subdir);
-		File result = new File(FileLocator.toFileURL(url).getPath());
+		File result; 
+		if (Activator.getInstance() != null) {
+			URL url = Activator.getInstance().getContext().getBundle().getResource(NATIVE_PATH + subdir);
+			result = new File(FileLocator.toFileURL(url).getPath());
+		}
+		else {
+			URL url = getClass().getClassLoader().getResource(NATIVE_PATH + subdir);
+			result = new File(url.getPath());
+		}
+		
 		if (!result.exists())
 			throw new FileNotFoundException(result.getAbsolutePath());
 		return result.getAbsolutePath() + File.separator;
 	}
 	
 	public String getBinaryExtension() {
-		return Platform.getOS().equals(Platform.OS_WIN32) ? ".exe" : "";
+		return isWindowsOS() ? ".exe" : "";
 	}
 	
 	public static SDFBundleCommand getInstance() {
+		if (!(instance instanceof SDFBundleCommand))
+			instance = new SDFBundleCommand();
+		
 		return (SDFBundleCommand) instance;
 	}
 	
@@ -105,12 +113,12 @@
 			init();
 		} catch (IOException e) {
 			Environment.logException("Could not determine the binary path for the native tool bundle (" 
-					+ Platform.getOS() + "/" + Platform.getOSArch()
+					+ System.getProperty("os.name") + "/" + System.getProperty("os.arch")
 					+ ")", e);
 			return proceed.invoke(context, args, commandStrategy);
 		} catch (RuntimeException e) {
-			Environment.logException("Failed to initialize the native tool bundle (" + Platform.getOS()
-					+ "/" + Platform.getOSArch() + ")", e);
+			Environment.logException("Failed to initialize the native tool bundle (" + System.getProperty("os.name")
+					+ "/" + System.getProperty("os.arch") + ")", e);
 			return proceed.invoke(context, args, commandStrategy);
 		}
 		
@@ -130,8 +138,7 @@
 		if (args.getTermType() != LIST)
 			return null;
 		
-		String os = Platform.getOS();
-		if (os.equals(Platform.OS_LINUX) || os.equals(Platform.OS_MACOSX)) {
+		if (isLinuxOS() || isMacOS()) {
 			if (!makeExecutable(context.getIOAgent(), command)) {
 				EditorIOAgent io = (EditorIOAgent) context.getIOAgent();
 				Environment.logException("chmod of " + binaryPath + command + binaryExtension + " failed, log:\n" + io.getLog());
@@ -147,7 +154,7 @@
 	public boolean invoke(Context context, String command, IStrategoTerm[] argList) {
 		String[] commandArgs = SSL_EXT_call.toCommandArgs(binaryPath + command, argList);
 		// Disabled this check since Windows x64 might identify differently?
-		//String[] environment = Platform.getOS() == Platform.OS_WIN32
+		//String[] environment = isWindowsOS()
 		//	? createWindowsEnvironment()
 		//	: null;
 		String[] environment = windowsEnvironment;
@@ -211,4 +218,17 @@
 			return false;
 		}
 	}
+	
+	private boolean isLinuxOS() {
+		String os = System.getProperty("os.name").toLowerCase();
+		return os.contains("nix") || os.contains("nux");
+	}
+
+	private boolean isWindowsOS() {
+		return System.getProperty("os.name").toLowerCase().contains("win");
+	}
+
+	private boolean isMacOS() {
+		return System.getProperty("os.name").toLowerCase().contains("mac");
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java	Fri Mar 25 17:27:34 2011	(r22433)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/EditorIOAgent.java	Fri Mar 25 17:28:13 2011	(r22434)
@@ -175,7 +175,13 @@
 	
 	public static boolean isResource(File file){
 		URI uri = file.toURI();
-		IWorkspace workspace = ResourcesPlugin.getWorkspace();
+		IWorkspace workspace; 
+	    try {
+	    	workspace = ResourcesPlugin.getWorkspace();
+	    } catch (IllegalStateException e) {
+	    	// there is no workspace, i.e. not running as a plug-in
+	    	return false;
+	    }
 		IResource[] resources = workspace.getRoot().findContainersForLocationURI(uri);
 		return resources.length > 0;
 	}

From L.C.L.Kats at tudelft.nl  Sun Mar 27 14:13:33 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 27 Mar 2011 12:13:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22435 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder
Message-ID: <20110327121333.2775D7F8031@mx1.tudelft.nl>

Author: LennartKats
Date: Sun Mar 27 12:13:32 2011
New Revision: 22435
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22435&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Tokenizer.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TreeBuilder.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java	Fri Mar 25 17:28:13 2011	(r22434)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/IToken.java	Sun Mar 27 12:13:32 2011	(r22435)
@@ -23,7 +23,7 @@
 	/** Token kind for a generic keyword token. */
 	public static final int TK_KEYWORD = 4;
 	
-	/** Token kind for a generic keyword token. */
+	/** Token kind for a generic operator token. */
 	public static final int TK_OPERATOR = 5;
 	
 	/** Token kind for a meta-variable. */
@@ -47,11 +47,14 @@
 	/** Token kind for an erroneous token. */
 	public static final int TK_ERROR_EOF_UNEXPECTED = 12;
 	
+	/** Token kind for a meta-esape operator. */
+	public static final int TK_ESCAPE_OPERATOR = 13;
+	
 	/** A reserved token kind for internal use only. */
-	public static final int TK_RESERVED = 13;
+	public static final int TK_RESERVED = 63;
 	
 	/** A special value indicating no token kind is specified or desired. */
-	public static final int TK_NO_TOKEN_KIND = 14;
+	public static final int TK_NO_TOKEN_KIND = 64;
 	
 	int getKind();
 	

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Tokenizer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Tokenizer.java	Fri Mar 25 17:28:13 2011	(r22434)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/Tokenizer.java	Sun Mar 27 12:13:32 2011	(r22435)
@@ -104,8 +104,8 @@
 	
 	public IToken getTokenAtOffset(int offset) {
 		assert isAmbigous() || 
-			getTokenCount() < 2 || getTokenAt(getTokenCount() - 1).getStartOffset()
-			== getTokenAt(getTokenCount() - 2).getEndOffset() + 1
+			getTokenCount() < 2 || internalGetTokenAt(getTokenCount() - 1).getStartOffset()
+			== internalGetTokenAt(getTokenCount() - 2).getEndOffset() + 1
 			: "Unordered tokens at end of tokenizer";
 		Token key = new Token(this, -1, -1, -1, offset, offset - 1, TK_RESERVED);
 		int resultIndex = Collections.binarySearch(tokens, key);
@@ -117,7 +117,7 @@
 			return currentToken();
 		if (resultIndex >= getTokenCount())
 			throw new IndexOutOfBoundsException("No token at offset " + offset);
-		return /*resultIndex == -1 ? null :*/ getTokenAt(resultIndex);
+		return /*resultIndex == -1 ? null :*/ internalGetTokenAt(resultIndex);
 	}
 	
 	public final Token makeToken(int endOffset, int kind, boolean allowEmptyToken) {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TreeBuilder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TreeBuilder.java	Fri Mar 25 17:28:13 2011	(r22434)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/imploder/TreeBuilder.java	Sun Mar 27 12:13:32 2011	(r22435)
@@ -356,7 +356,8 @@
 		// Don't use tokens here in case tokenizer is disabled
 		IToken leftToken = rightToken.getStartOffset() == lastOffset ? rightToken : tokenizer.getTokenAtOffset(lastOffset);
 		String contents = tokenizer.toString(lastOffset, offset - 1);
-		assert disableTokens || (contents.equals(tokenizer.toString(leftToken, rightToken)) && lastOffset == leftToken.getStartOffset());
+		assert disableTokens || tokenizer.isAmbigous()
+			|| (contents.equals(tokenizer.toString(leftToken, rightToken)) && lastOffset == leftToken.getStartOffset());
 		
 		Object result = factory.createStringTerminal(sort, leftToken, rightToken, getPaddedLexicalValue(label, contents, lastOffset));
 		String constructor = label.getMetaVarConstructor();

From seba at informatik.uni-marburg.de  Sun Mar 27 23:27:37 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Sun, 27 Mar 2011 21:27:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22436 -
	sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver
Message-ID: <20110327212737.C5D0C7F800C@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Sun Mar 27 21:27:37 2011
New Revision: 22436
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22436&sc=1

Log:


Modified:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Sun Mar 27 12:13:32 2011	(r22435)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Sun Mar 27 21:27:37 2011	(r22436)
@@ -43,7 +43,6 @@
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.lang.Context;
 import org.strategoxt.permissivegrammars.make_permissive;
-import org.strategoxt.strj.strj;
 import org.strategoxt.tools.tools;
 import org.sugarj.driver.caching.ModuleKeyCache;
 import org.sugarj.driver.transformations.extraction.extraction;
@@ -225,6 +224,7 @@
    */
   private void process(String source, String moduleName) throws IOException, TokenExpectedException, BadTokenException, ParseException, InvalidParseTableException, SGLRException {
     log.beginTask("processing", "BEGIN PROCESSING " + moduleName);
+    boolean success = false;
     try {
       init(moduleName);
 
@@ -275,13 +275,16 @@
       driverResult.setSugaredSyntaxTree(makeSugaredSyntaxTree());
       if (currentTransProg != null)
         driverResult.registerEditorDesugarings(currentTransProg);
+      
+      success = true;
     }
     catch (CommandExecution.ExecutionError e) {
       // TODO do something more sensible
       e.printStackTrace();
+      success = false;
     }
     finally {
-      log.endTask();
+      log.endTask(success, "done processing " + moduleName, "failed processing " + moduleName);
     }
   }
 
@@ -493,6 +496,7 @@
   private IStrategoTerm currentDesugar(IStrategoTerm term) throws IOException,
       InvalidParseTableException, TokenExpectedException, BadTokenException, SGLRException {
     // assimilate toplevelDec using current transformation
+
     log.beginTask(
         "desugaring",
         "DESUGAR the current toplevel declaration.");
@@ -788,70 +792,67 @@
         IStrategoTerm sdfExtract = fixSDF(extractSDF(sugarBody, extractionContext), interp);
         IStrategoTerm strExtract = extractSTR(sugarBody, extractionContext);
         
-        if (!ATermCommands.isList(sdfExtract) || !ATermCommands.getList(sdfExtract).isEmpty()) {
-          String sdfExtensionHead =
-            "module " + fullExtName + "\n" 
-            + sdfImports
-            + (isPublic ? "exports " : "hiddens ") + "\n"
-            + "  (/)" + "\n";
-  
-          String sdfExtensionContent = SDFCommands.prettyPrintSDF(sdfExtract, interp);
-  
-          String sdfSource = SDFCommands.makePermissiveSdf(sdfExtensionHead + sdfExtensionContent, makePermissiveContext);
-          driverResult.generateFile(sdfExtension, sdfSource);
-          availableSDFImports.add(fullExtName);
-          
-          if (CommandExecution.FULL_COMMAND_LINE)
-            log.log("Wrote SDF file to '" + new File(sdfExtension).getAbsolutePath() + "'.");
-          
-          String currentGrammarName =
-            FileCommands.hashFileName("sugarj", currentGrammarModule + fullExtName);
-
-          currentGrammarSDF =
-              Environment.tmpDir + sep + currentGrammarName + ".sdf";
-
-          driverResult.generateFile(currentGrammarSDF, 
-              "module " + currentGrammarName + "\n"
-              + "imports " + currentGrammarModule + "\n" 
-              + "        " + fullExtName);
-          currentGrammarModule = currentGrammarName;
-        }
-
-        if (!ATermCommands.isList(strExtract) || !ATermCommands.getList(strExtract).isEmpty() || // or if no sdf file was generated
-            !(!ATermCommands.isList(sdfExtract) || !ATermCommands.getList(sdfExtract).isEmpty())) {
-          String strExtensionTerm = 
-              "Module(" + "\"" + fullExtName+ "\"" + ", " 
-                        + strExtract + ")" + "\n";
-  
-          String strExtensionContent = SDFCommands.prettyPrintSTR(ATermCommands.atermFromString(strExtensionTerm), interp);
-          
-          int index = strExtensionContent.indexOf('\n');
-          if (index >= 0)
-            strExtensionContent =
-              strExtensionContent.substring(0, index + 1) + "\n"
-              + strImports + "\n"
-              + strExtensionContent.substring(index + 1);
-          else
-            strExtensionContent += strImports;
-            
-          
-          driverResult.generateFile(strExtension, strExtensionContent);
-          availableSTRImports.add(fullExtName);
-          
-          if (CommandExecution.FULL_COMMAND_LINE)
-            log.log("Wrote Stratego file to '" + new File(strExtension).getAbsolutePath() + "'.");
+        
+        String sdfExtensionHead =
+          "module " + fullExtName + "\n" 
+          + sdfImports
+          + (isPublic ? "exports " : "hiddens ") + "\n"
+          + "  (/)" + "\n";
+
+        String sdfExtensionContent = SDFCommands.prettyPrintSDF(sdfExtract, interp);
+
+        String sdfSource = SDFCommands.makePermissiveSdf(sdfExtensionHead + sdfExtensionContent, makePermissiveContext);
+        driverResult.generateFile(sdfExtension, sdfSource);
+        availableSDFImports.add(fullExtName);
+        
+        if (CommandExecution.FULL_COMMAND_LINE)
+          log.log("Wrote SDF file to '" + new File(sdfExtension).getAbsolutePath() + "'.");
+        
+        String currentGrammarName =
+          FileCommands.hashFileName("sugarj", currentGrammarModule + fullExtName);
+
+        currentGrammarSDF =
+            Environment.tmpDir + sep + currentGrammarName + ".sdf";
+
+        driverResult.generateFile(currentGrammarSDF, 
+            "module " + currentGrammarName + "\n"
+            + "imports " + currentGrammarModule + "\n" 
+            + "        " + fullExtName);
+        currentGrammarModule = currentGrammarName;
+
+
+        String strExtensionTerm = 
+            "Module(" + "\"" + fullExtName+ "\"" + ", " 
+                      + strExtract + ")" + "\n";
+
+        String strExtensionContent = SDFCommands.prettyPrintSTR(ATermCommands.atermFromString(strExtensionTerm), interp);
+        
+        int index = strExtensionContent.indexOf('\n');
+        if (index >= 0)
+          strExtensionContent =
+            strExtensionContent.substring(0, index + 1) + "\n"
+            + strImports + "\n"
+            + strExtensionContent.substring(index + 1);
+        else
+          strExtensionContent += strImports;
           
-          String currentTransName =
-            FileCommands.hashFileName("sugarj", currentTransModule + fullExtName);
-
-          currentTransSTR = Environment.tmpDir + sep + currentTransName + ".str";
+        
+        driverResult.generateFile(strExtension, strExtensionContent);
+        availableSTRImports.add(fullExtName);
+        
+        if (CommandExecution.FULL_COMMAND_LINE)
+          log.log("Wrote Stratego file to '" + new File(strExtension).getAbsolutePath() + "'.");
+        
+        String currentTransName =
+          FileCommands.hashFileName("sugarj", currentTransModule + fullExtName);
 
-          driverResult.generateFile(currentTransSTR,
-              "module " + currentTransName + "\n" 
-              + "imports " + currentTransModule + "\n"
-              + "        " + fullExtName);
-          currentTransModule = currentTransName;
-        }
+        currentTransSTR = Environment.tmpDir + sep + currentTransName + ".str";
+
+        driverResult.generateFile(currentTransSTR,
+            "module " + currentTransName + "\n" 
+            + "imports " + currentTransModule + "\n"
+            + "        " + fullExtName);
+        currentTransModule = currentTransName;
       }
     } finally {
       log.endTask();
@@ -916,17 +917,17 @@
 
     inputTreeBuilder = new RetractableTreeBuilder();
     
-    interp = new HybridInterpreter(); //TODO (ATermCommands.factory);
-    sdfContext = tools.init(interp.getCompiledContext());
-    makePermissiveContext = make_permissive.init(interp.getCompiledContext());
-    extractionContext = extraction.init(interp.getCompiledContext());
-    strjContext = org.strategoxt.strj.Main.init(interp.getCompiledContext());
-    
     // XXX need to load ANY parse table, preferably an empty one.
     parser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.sdfTbl.getPath()), "Sdf2Module");
     
     sdfParser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.sdfTbl.getPath()), "Sdf2Module");
     strParser = new JSGLRI(org.strategoxt.imp.runtime.Environment.loadParseTable(StdLib.strategoTbl.getPath()), "StrategoModule");
+
+    interp = new HybridInterpreter(); //TODO (ATermCommands.factory);
+    sdfContext = tools.init();
+    makePermissiveContext = make_permissive.init();
+    extractionContext = extraction.init();
+    strjContext = org.strategoxt.strj.strj.init();
   }
   
   /**
@@ -937,7 +938,6 @@
     // log.log("This is the extensible java compiler.");
     try {
       initialize();
-      new Driver().init("");
       
       String[] sources = handleOptions(args);
 
@@ -1240,8 +1240,8 @@
     if (Environment.cacheDir == null || Environment.rocache)
       return;
     
-    String sdfCache = FileCommands.findFile("sdfCache", Environment.cacheDir);
-    String strCache = FileCommands.findFile("strCache", Environment.cacheDir);
+    String sdfCache = FileCommands.findFile("sdfCache" + "-" + VERSION , Environment.cacheDir);
+    String strCache = FileCommands.findFile("strCache" + "-" + VERSION, Environment.cacheDir);
 
     if (sdfCache == null) {
       sdfCache = Environment.cacheDir + sep + "sdfCache" + "-" + VERSION;

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Sun Mar 27 12:13:32 2011	(r22435)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Sun Mar 27 21:27:37 2011	(r22436)
@@ -27,6 +27,8 @@
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoExit;
 import org.strategoxt.strj.Main;
+import org.strategoxt.strj.main_strj_0_0;
+import org.strategoxt.strj.strj_0_0;
 import org.sugarj.driver.caching.ModuleKey;
 import org.sugarj.driver.caching.ModuleKeyCache;
 import org.sugarj.stdlib.StdLib;
@@ -76,7 +78,9 @@
       }
     
     try {
-    Main.mainNoExit(strjContext, cmd.toArray(new String[cmd.size()]));
+      // XXX strj does not create Java file with non-fresh context
+      Context c = org.strategoxt.strj.strj.init();
+      c.invokeStrategyCLI(main_strj_0_0.instance, "strj", cmd.toArray(new String[cmd.size()]));
     }
     catch (StrategoExit e) {
       if (e.getValue() != 0)

From m.dejonge at tudelft.nl  Mon Mar 28 14:25:12 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 28 Mar 2011 12:25:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22437 - in
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp:
	project services util
Message-ID: <20110328122512.EF2D87F804D@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Mar 28 12:25:12 2011
New Revision: 22437
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22437&sc=1

Log:
- extract entity refactoring removed from example project (text-reconstruction bust be fixed for new branch)
- custom pretty-print removed
- text-reconstruction: some fixes related to renaming on analyzed trees
- new-name dialog primitive is called

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str	Sun Mar 27 21:27:37 2011	(r22436)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-common-trans.str	Mon Mar 28 12:25:12 2011	(r22437)
@@ -320,16 +320,19 @@
 strategies //user-input
 
 /**
- * Opens an input dialog for one string value
- * @type (String, String, String) -> String
+ * Opens an input dialog for one string value that represents an identifier
+ * The language is used to check if the input value matches the identifier pattern
+ * @type (String, String, String, String) -> String
  */
 input-dialog:
-  (title, label, default-value) -> <prim("SSL_EXT_opendialog", title, label, default-value)>
+  (language, title, label, default-value) -> <prim("SSL_EXT_newnamedialog", language, title, label, default-value)>
   
+input-dialog:
+  (title, label, default-value) -> <input-dialog>("", title, label, default-value)
 
 strategies //pp-table
 	
 get-pp-table=
-  import-term(include/EntityRefactorings.generated.pp.af)
+  import-term(include/{sdf-name}.generated.pp.af)
 	
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	Sun Mar 27 21:27:37 2011	(r22436)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	Mon Mar 28 12:25:12 2011	(r22437)
@@ -27,7 +27,6 @@
   lib/editor-common.generated
   check
   generate
-  prettyprint
   refactorings
 
 rules // Main editor interface (defined by editor/{sdf-name}-Builders and -References.esv)
@@ -203,77 +202,17 @@
 strategies //renaming
  
 rename-entity:
-  (selected, position, ast, path, project-path) -> (ast, new-ast)
-  with  	
-    old-name:=<get-selected-name(|position)> ast;
-    new-name:=<input-dialog>("rename", "Rename Entity:", ""); 
-    new-ast:=<topdown(try(rename-type(|old-name, new-name)))> ast
-
-get-selected-name(|position):
-  ast -> name
-    where
-	  <term-at-position(|position); ?Type(name)> ast <+
-	  <parent-at-position(|position); ?Entity(name, _)> ast 
+  (selected-name, position, ast, path, project-path) -> [(ast, new-ast)]
+  with
+  	<parent-at-position(|position); (?Entity(_,_) <+ ?Type(_))> ast;
+    new-name:=<input-dialog>("{<get-sdf-main-module>}", "rename", "Rename Entity:", ""); 
+    new-ast:=<topdown(try(rename-type(|selected-name, new-name)))> ast
 
 rename-type(|old-name, new-name):
   Entity(old-name, y) -> Entity(new-name, y)
 
 rename-type(|old-name, new-name):
   Type(old-name) -> Type(new-name)
-	
-  
-strategies //extraction
-
-extract-entity:
-  (selected, position, ast, path, project-path) -> (ast, new-ast)
-  with
-    if <is-list> selected then
-  	  properties:= selected;
-  	  insert-position:=<init; at-last(map(inc))> position
-    else //single property selected
-  	  properties:=<![selected]>;
-  	  insert-position:=<init; init; at-last(map(inc))> position
-    end;
-    entity-name:=<input-dialog>("extract", "Extract Entity:", "<Entity Name>");
-    prop-name:=<lower-case> entity-name;
-    new-ast:=<
-      alltd(replace-sublist(?properties|[Property(prop-name, entity-name)]));
-      insert-elem(|insert-position, Entity(entity-name, properties))
-    > ast	
-
-}
-end;
-
-if not(<file-exists> "trans/prettyprint.str") then
-  <output-text-file(|["trans"], "prettyprint.str")>
-${module prettyprint
-
-imports
-  include/{sdf-name}
-
-strategies //custom strategy for code formatting
-  
-prettyprint:
-  Module(x, y) ->
-  $[module [x]
-  	
-    [<map(prettyprint); separate-by(|"\n\n"); concat-strings> y]]
-    
-prettyprint:
-  Entity(x, y) ->
-  $[entity [x]${$
-      [<map(prettyprint); separate-by(|"\n"); concat-strings> y]
-    $}$]
-    
-prettyprint:
-  Property(x, y) -> $[[x] : [<prettyprint> y]]
-  
-prettyprint:
-  Type(t) -> $[[t]]
-	
-prettyprint=
-  where(is-string <+ is-num)
 
 }
 end
-

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Sun Mar 27 21:27:37 2011	(r22436)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Mon Mar 28 12:25:12 2011	(r22437)
@@ -39,10 +39,8 @@
           ~~
             
           pp-table: get-pp-table
-          pretty-print: prettyprint
           ~~
           refactoring ID: "Rename Entity" = rename-entity (source) (cursor)
-          refactoring Property*: "Extract Entity" =  extract-entity (source) 
 
           ~~
           ~// on save: generate-java

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Sun Mar 27 21:27:37 2011	(r22436)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Mon Mar 28 12:25:12 2011	(r22437)
@@ -29,12 +29,17 @@
 			pp <+ (ast2abox(|[pp-table]); box2text-string(|100))|
 			pp-table
 		)
-	> REPLACEMENT(oldnode, <construct-text-by-compare(pp|pp-table)> (oldnode, newnode))
+	> REPLACEMENT(oldnode, <construct-text-by-compare(
+		pp <+ (ast2abox(|[pp-table]); box2text-string(|100))|
+		pp-table)> (oldnode, newnode)) //TODO: refactor
 
 construct-textual-change(pp|pp-table):
 	(oldnode, newnode) -> (0, 0, "")
 	where
 		<eq> (oldnode, newnode)
+
+construct-textual-change(pp|pp-table) =
+	map(construct-textual-change(pp|pp-table))
 	
 rules //text reconstruction for AST nodes
 
@@ -69,10 +74,10 @@
 construct-text-by-compare(pp|pp-table): (origin-node, node) -> text
 	where
 		ast-changes:=<collect-ast-changes> (origin-node, node); //debug(!"ast-changes: ");
-		text-changes:=<map(ast-change-to-text-change(pp|pp-table)); flatten-list> ast-changes;
+		text-changes:=<map(ast-change-to-text-change(pp|pp-table)); flatten-list> ast-changes; //debug(!"txt-changes: ");
 		text:=<
-			apply-text-changes; 
-			remove-indentation(|<origin-indent-value-node> node)
+			apply-text-changes; //debug(!"applied: ");
+			remove-indentation(|<origin-indent-value-node> node) //;debug(!"indent-corr: ")
 		>(text-changes, <origin-text-with-comments> node, <origin-offset-with-comments> node)					
 
 construct-text-base-list(pp|pp-table)=
@@ -351,16 +356,28 @@
 
 rules //helpers compare nodes
 	
-same-signature=
+same-signature =
 	?(trm1, trm2);
-	<eq>(<get-constructor> trm1, <get-constructor> trm2);
-	<eq>(<get-arguments; length> trm1, <get-arguments; length> trm2);
-	<not(is-list)> trm1; <not(is-list)> trm2
+	where(
+		<eq>(<get-constructor> trm1, <get-constructor> trm2);
+		<eq>(<get-arguments; length> trm1, <get-arguments; length> trm2);
+		<not(is-list)> trm1; <not(is-list)> trm2
+	)
 	
 unmodified-list=
 	?(lst1, lst2);
 	<zip; map(equal <+ origin-equivalent)> (lst1, lst2)
 
+origin-equivalent=
+	?(t1,t2);
+	where(
+		<eq>(<origin-term> t1, <origin-term> t2) <+
+		<same-signature; all(not(origin-term))> (t1,t2)
+	) 
+	
+origin-equivalent(|t1):
+	t2 -> <origin-equivalent> (t1,t2)
+	
 rules //translating ast-changes to text changes
 
 rules //Replacement
@@ -496,7 +513,7 @@
 	(text-changes, text, offset) -> changed-text
 	where 
 		start-offset:=<Fst> offset;
-		ordered-text-changes:=<filter(is-modification); sort-list(LSort(compare-text-change))> text-changes;
+		ordered-text-changes:=<make-set; filter(is-modification); sort-list(LSort(compare-text-change))> text-changes;
 		changed-text:= <foldr(!(start-offset, text), apply-textual-change); Snd> ordered-text-changes
 
 apply-textual-change:
@@ -517,16 +534,12 @@
 		(heads, suffix):=<split-at(|pos-end)> old-chars; 
 		result-text:=<conc-strings> (<implode-string> prefix, text-change, <implode-string> suffix) 
 		
-compare-text-change= 
+compare-text-change = 
 		?(((start-x, end-x),x), ((start-y, end-y),y));
 		not(
 			<lt> (start-x, start-y) <+ 
 			<eq> (start-x, start-y); <lt> (end-x, end-y)
 		)
 
-is-modification=
-		?((start-x, end-x),x); 
-		not(
-			<eq> (start-x, end-x); 
-			<eq> (x, "") 
-		)
+is-modification =
+	not(?((t, t),"")) 

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str	Sun Mar 27 21:27:37 2011	(r22436)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str	Mon Mar 28 12:25:12 2011	(r22437)
@@ -11,13 +11,6 @@
 	?(t1,t2);
 	<origin-equal(|t1)> t2
 	
-origin-equivalent=
-	?(t1,t2);
-	<eq>(<origin-term> t1, <origin-term> t2)
-	
-origin-equivalent(|t1):
-	t2 -> <origin-equivalent> (t1,t2)
-	
 origin-set-relation(|or-node) =
 	?node;
 	!Some(or-node); 
@@ -215,4 +208,4 @@
  */
 support-sublist(s)=
 	try(?[h|[]]; !h); 
-	((origin-sublist-term; s) <+s)
+	((origin-sublist-term; s) <+s)
\ No newline at end of file

From m.dejonge at tudelft.nl  Mon Mar 28 14:31:39 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 28 Mar 2011 12:31:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22438 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading parser/ast services stratego
Message-ID: <20110328123139.EB233CC07E@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Mar 28 12:31:39 2011
New Revision: 22438
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22438&sc=1

Log:
- new-name dialog that validates input by checking ID-pattern and (potential)keywords
- Refactorings: selected node is set by checking the expected Sort and/or Constructor
- Multi-file support: applying textchanges to files known in the workbench, save-resources before applying refactoring

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/MessageDialogPrimitive.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java   (contents, props changed)
      - copied, changed from r22426, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DialogPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SaveAllResourcesPrimitive.java   (contents, props changed)
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DialogPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginRootPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginSourceTextPrimitive.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	Mon Mar 28 12:25:12 2011	(r22437)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	Mon Mar 28 12:31:39 2011	(r22438)
@@ -20,6 +20,7 @@
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
+import org.strategoxt.imp.runtime.parser.ast.StrategoSubList;
 import org.strategoxt.imp.runtime.services.BuilderMap;
 import org.strategoxt.imp.runtime.services.CustomStrategyBuilder;
 import org.strategoxt.imp.runtime.services.IBuilder;
@@ -109,8 +110,10 @@
 		if(ppStrategyTerm!=null)
 			ppStrategy=termContents(termAt(ppStrategyTerm, 0));
 		
+		IStrategoTerm node = controller.getEditor().getSelectionAst(false);
 		for (IStrategoAppl builder : collectTerms(d.getDocument(), "Refactoring")) {
-			if(isDefinedOnSelection(builder)){
+			IStrategoTerm[] semanticNodes = termAt(builder,0).getAllSubterms();
+			if(getMatchingSelectionNode(semanticNodes, node) != null){
 				String caption = termContents(termAt(builder, 1));
 				String strategy = termContents(termAt(builder, 2));
 				IStrategoList options = termAt(builder, 3);			
@@ -146,7 +149,8 @@
 							source, 
 							ppTable,
 							ppStrategy,
-							controller.getResource()
+							controller.getResource(), 
+							semanticNodes
 						)
 					);
 				}
@@ -154,43 +158,9 @@
 		}
 	}
 
-	private static boolean isDefinedOnSelection(IStrategoAppl builder)
+	private static IStrategoTerm getMatchingSelectionNode(IStrategoTerm[] semanticNodes, IStrategoTerm node)
 			throws BadDescriptorException {
-		ArrayList<NodeMapping<String>> mappings=new ArrayList<NodeMapping<String>>();
-		for (IStrategoTerm semanticNode : termAt(builder,0).getAllSubterms()) {
-			NodeMapping<String> aMapping = NodeMapping.create(semanticNode, "");
-			mappings.add(aMapping);
-		}
-		if(mappings.size()==0){
-			return true; //no sort restriction specified
-		}
-		// XXX: the builder doesn't run in the UI thread for real-time builds
-		EditorState editor = EditorState.getActiveEditor();
-		IStrategoTerm node= editor.getSelectionAst(false);
-		
-		if (node == null)
-			return false;
-		
-		IStrategoTerm ancestor = InputTermBuilder.getMatchingAncestor(node, false);
-		IStrategoTerm selectionNode = node;
-		boolean isMatch=false;
-		do {
-			isMatch = NodeMapping.getFirstAttribute(mappings, tryGetName(selectionNode), getSort(selectionNode), 0)!=null;
-			selectionNode = getParent(selectionNode);
-		} while(!isMatch && selectionNode!=null && selectionNode!=getParent(ancestor));
-		//Sublist with single element
-		/* XXX: this makes no sense .. taking the constructor of a list?
-		if(!isMatch && (!isTermList(ancestor) && isTermList(getParent(ancestor)){
-			IStrategoTerm singleElementList= new AstNodeFactory().createSublist((ListAstNode)ancestor.getParent(), ancestor, ancestor, true);
-			isMatch= NodeMapping.getFirstAttribute(mappings, singleElementList.getConstructor(), singleElementList.getSort(), 0)!=null;
-		}
-		*/
-		return isMatch;
-	}
-	
-	private static String tryGetName(IStrategoTerm term) {
-		IStrategoConstructor cons = tryGetConstructor(term);
-		return cons == null ? null : cons.getName();
+		return InputTermBuilder.getMatchingNode(semanticNodes, node, false);
 	}
 
 	private static void addDerivedBuilders(EditorState derivedFromEditor, Set<IBuilder> builders)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java	Mon Mar 28 12:25:12 2011	(r22437)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java	Mon Mar 28 12:31:39 2011	(r22438)
@@ -36,6 +36,7 @@
 
 		int i = 0;
 		for (IStrategoTerm child : StrategoListIterator.iterable(list)) {
+			i++;
 			if (child == firstChild) {
 				indexStart = i;
 				isStartChildFound = true;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Mon Mar 28 12:25:12 2011	(r22437)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Mon Mar 28 12:31:39 2011	(r22438)
@@ -2,20 +2,25 @@
 
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getSort;
 import static org.spoofax.terms.Term.tryGetConstructor;
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
 import static org.spoofax.terms.attachments.ParentAttachment.getRoot;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Map;
 
 import org.eclipse.core.resources.IResource;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.parser.ast.StrategoSubList;
 import org.strategoxt.imp.runtime.stratego.SourceAttachment;
 import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
 import org.strategoxt.lang.Context;
@@ -177,4 +182,62 @@
 			result = getParent(result);
 		return result;
 	}
+
+	/**
+	 * Gets a node that has either the same character offsets or has only one
+	 * child with the same character offsets as the node given,
+	 * meeting the additional criteria that this node matches the semantic nodes. 
+	 * Returns null in case no match is found
+	 * 
+	 * @param semanticNodes
+	 *             Define Sorts and/or Constructors that shold apply. (example: Stm+ ID)
+	 * @param allowMultiChildParent
+	 *             Also fetch the first parent if it has multiple children (e.g., Call("foo", "bar")).
+	 */
+	public static final IStrategoTerm getMatchingNode(IStrategoTerm[] semanticNodes,
+			IStrategoTerm node, boolean allowMultiChildParent) throws BadDescriptorException {
+		if (node == null)
+			return null;
+		IStrategoTerm ancestor = InputTermBuilder.getMatchingAncestor(node, allowMultiChildParent);
+		IStrategoTerm selectionNode = node;
+		ArrayList<NodeMapping<String>> mappings = new ArrayList<NodeMapping<String>>();
+		for (IStrategoTerm semanticNode : semanticNodes) {
+			NodeMapping<String> aMapping = NodeMapping.create(semanticNode, "");
+			mappings.add(aMapping);
+		}
+		if (mappings.size() == 0) {
+			return ancestor; // no sort restriction specified, so use policy to
+							 // return the node furthest up the ancestor
+							 // chain
+		}
+		boolean isMatch = isMatchOnConstructorOrSort(mappings, selectionNode);
+		while (!isMatch && selectionNode != null && selectionNode != getParent(ancestor)) {
+			selectionNode = getParent(selectionNode);
+			isMatch = isMatchOnConstructorOrSort(mappings, selectionNode);
+		}
+		/* XXX: this makes no sense .. taking the constructor of a list? */
+		// Creates a sublist with single element.
+		// Usecase: extract refactoring is defined on a (sub)list (refactoring
+		// X+: ...) and should be applicable when only one X is selected
+		if (!isMatch && !ancestor.isList() && getParent(ancestor).isList()) {
+			selectionNode = StrategoSubList.createSublist((IStrategoList) getParent(ancestor),
+					ancestor, ancestor, true);
+			isMatch = isMatchOnConstructorOrSort(mappings, selectionNode);
+		}
+		if (isMatch) {
+			return selectionNode;
+		}
+		return null;
+	}
+
+	private static boolean isMatchOnConstructorOrSort(ArrayList<NodeMapping<String>> mappings,
+			IStrategoTerm selectionNode) {
+		return NodeMapping.getFirstAttribute(mappings, tryGetName(selectionNode),
+				getSort(selectionNode), 0) != null;
+	}
+
+	private static String tryGetName(IStrategoTerm term) {
+		IStrategoConstructor cons = tryGetConstructor(term);
+		return cons == null ? null : cons.getName();
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Mon Mar 28 12:25:12 2011	(r22437)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Mon Mar 28 12:31:39 2011	(r22438)
@@ -2,6 +2,7 @@
 
 import static org.spoofax.interpreter.core.Tools.asJavaString;
 import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermList;
 import static org.spoofax.interpreter.core.Tools.isTermTuple;
 import static org.spoofax.interpreter.core.Tools.termAt;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.hasImploderOrigin;
@@ -19,14 +20,12 @@
 import org.eclipse.core.filebuffers.LocationKind;
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
-import org.eclipse.core.resources.ResourcesPlugin;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.imp.parser.ISourcePositionLocator;
 import org.eclipse.jface.dialogs.ErrorDialog;
 import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.IDocument;
@@ -37,7 +36,6 @@
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
 import org.spoofax.interpreter.library.IOAgent;
-import org.spoofax.interpreter.terms.ISimpleTerm;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.attachments.OriginAttachment;
 import org.strategoxt.imp.generator.construct_textual_change_1_1;
@@ -45,8 +43,9 @@
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.MonitorStateWatchDog;
 import org.strategoxt.imp.runtime.RuntimeActivator;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.TermReader;
-import org.strategoxt.imp.runtime.parser.SGLRParseController;
+import org.strategoxt.imp.runtime.stratego.SourceAttachment;
 import org.strategoxt.imp.runtime.stratego.StrategoConsole;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.Strategy;
@@ -76,13 +75,15 @@
 	
 	private final boolean source;
 	
+	private final IStrategoTerm[] semanticNodes;
+	
 	/**
 	 * Creates a new Stratego refactoring.
 	 */
 	public StrategoRefactoring(StrategoObserver observer, String caption, String builderRule,
 			boolean cursor, boolean source,
 			String ppTable, String ppStrategy,
-			IResource resource) { //TODO Check if the refactoring is defined for the given Sort-Constructor
+			IResource resource, IStrategoTerm[] semanticNodes) { //TODO Check if the refactoring is defined for the given Sort-Constructor
 		this.cursor=cursor;
 		this.source=source;
 		this.ppTable=ppTable;
@@ -91,6 +92,7 @@
 		this.caption = caption;
 		this.builderRule = builderRule;
 		this.resource=resource;
+		this.semanticNodes = semanticNodes;
 	}
 	
 	public String getCaption() {
@@ -151,7 +153,7 @@
 				}
 			}
 		};
-		job.setUser(true);
+		//job.setUser(true);
 		job.schedule();
 		activeJobs.put(caption, job);
 		return job;
@@ -162,18 +164,14 @@
 		IStrategoTerm textReplaceTerm=null;
 		//IFile file = null;
 
-		String resultText = null;
-		int startLocation = -1;
-		int endLocation = -1;
-
 		observer.getLock().lock();
 		try {
 			try {
 				builderResult = getBuilderResult(editor, node);
 				if(builderResult!=null){	
-					if (isInvalidResultTerm(builderResult)) { //TODO: multifile support [(fname, oldnode, newnode), ...]
-						Environment.logException("Illegal refactoring result (must be a tuple '(original-node, newnode)')");
-						openError(editor, "Illegal refactoring result (must be a tuple '(original-node, newnode)': )" + builderResult);
+					if (!isValidResultTerm(builderResult)) {
+						Environment.logException("Illegal refactoring result (must be a list with tuples '(original-node, newnode)')");
+						openError(editor, "Illegal refactoring result (must be a list with tuples '(original-node, newnode)': )" + builderResult);
 						return;
 					}
 					textReplaceTerm=getTextReplacement(builderResult);
@@ -184,18 +182,11 @@
 							observer.scheduleUpdate(editor.getParseController());
 						return;
 					}
-					//file = ...;
-					startLocation=Tools.asJavaInt(termAt(textReplaceTerm, 0));
-					endLocation=Tools.asJavaInt(termAt(textReplaceTerm, 1));
-					resultText = asJavaString(termAt(textReplaceTerm, 2));
-					try {		
-						applyTextChange(editor, termAt(builderResult,0), startLocation, endLocation, resultText); //TODO refactor text-change handling (in files)
-					} catch (BadLocationException e) {
-						reportGenericException(editor, e);
-					} catch (CoreException e) {
-						// TODO Auto-generated catch block
-						e.printStackTrace();
-					}
+					assert(textReplaceTerm.getSubtermCount() == builderResult.getSubtermCount());
+					//TODO: check locations to make sure that all changes can be applied (or none)
+					for (int i = 0; i < builderResult.getSubtermCount(); i++) {
+						applyTextChange(termAt(builderResult.getSubterm(i),0), textReplaceTerm.getSubterm(i));							
+					}					
 				}					
 			} catch (InterpreterErrorExit e) {
 				reportGenericException(editor, e);
@@ -218,12 +209,13 @@
 		}		
 	}
 	
-	public static void applyTextChange(EditorState editor, ISimpleTerm originalTerm, final int position_start, final int position_end,
-			final String text) throws BadLocationException, CoreException {
-		SGLRParseController controller = editor.getParseController();
-		ISourcePositionLocator locator = controller.getSourcePositionLocator();
-		final IPath path = locator.getPath(OriginAttachment.tryGetOrigin((IStrategoTerm) originalTerm));
-		final IPath wsPath =path.makeRelativeTo(ResourcesPlugin.getWorkspace().getRoot().getLocation());
+	private void applyTextChange(IStrategoTerm originalTerm, IStrategoTerm textReplaceTerm) {
+		final int startLocation=Tools.asJavaInt(termAt(textReplaceTerm, 0));
+		final int endLocation=Tools.asJavaInt(termAt(textReplaceTerm, 1));
+		final String resultText = asJavaString(termAt(textReplaceTerm, 2));
+		final IStrategoTerm originTerm = OriginAttachment.tryGetOrigin(originalTerm);
+		final IPath wsPath = SourceAttachment.getResource(originTerm).getFullPath();
+		
 		Job job = new UIJob("apply textchange") {
 			
 			@Override
@@ -233,7 +225,7 @@
 					manager.connect(wsPath, LocationKind.IFILE, monitor);
 					ITextFileBuffer buffer= manager.getTextFileBuffer(wsPath, LocationKind.IFILE);
 					IDocument doc = buffer.getDocument();
-					doc.replace(position_start, position_end-position_start, text);
+					doc.replace(startLocation, endLocation - startLocation, resultText);
 					buffer.commit(monitor, true); 
 				} catch (BadLocationException e) {
 					Environment.logException("Bad location of the replaced fragment", e);
@@ -250,10 +242,9 @@
 			}
 		};
 		job.setSystem(true);
-		job.schedule();
+		job.schedule();		
 	}
 
-
 	private IStrategoTerm getBuilderResult(EditorState editor, IStrategoTerm node)
 			throws UndefinedStrategyException, InterpreterErrorExit, InterpreterExit,
 			InterpreterException {
@@ -277,11 +268,23 @@
 		return resultTerm;
 	}
 
-	private boolean isInvalidResultTerm(IStrategoTerm resultTerm) {
+	private boolean isValidResultTerm(IStrategoTerm resultTerm) {
+		if(isTermList(resultTerm)){
+			for (int i = 0; i < resultTerm.getSubtermCount(); i++) {
+				if(!isAstChangeTuple(resultTerm.getSubterm(i))){
+					return false;
+				}
+			}
+			return true;
+		}
+		return false;
+	}
+	
+	private boolean isAstChangeTuple(IStrategoTerm resultTerm) {
 		return 
-			!isTermTuple(resultTerm) || 
-			!hasImploderOrigin(termAt(resultTerm, 0)) ||
-			resultTerm.getSubtermCount()!=2;
+			isTermTuple(resultTerm) && 
+			hasImploderOrigin(termAt(resultTerm, 0)) &&
+			resultTerm.getSubtermCount()==2;
 	}
 	
 	private IStrategoTerm getTextReplacement(IStrategoTerm resultTuple) {
@@ -309,7 +312,13 @@
 
 	protected IStrategoTerm invokeObserver(IStrategoTerm node) throws UndefinedStrategyException,
 			InterpreterErrorExit, InterpreterExit, InterpreterException {
-		node = InputTermBuilder.getMatchingAncestor(node, false);
+		//node = InputTermBuilder.getMatchingAncestor(node, false);
+		try {
+			node = InputTermBuilder.getMatchingNode(semanticNodes, node, false);
+		} catch (BadDescriptorException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
 		IStrategoTerm inputTerm = observer.getInputBuilder().makeInputTerm(node, true, source);
 		IStrategoTerm result = observer.invoke(builderRule, inputTerm, getResource(node));
 		return result;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Mon Mar 28 12:25:12 2011	(r22437)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Mon Mar 28 12:31:39 2011	(r22438)
@@ -10,7 +10,7 @@
 	public static final String REGISTRY_NAME = "sdf2imp";
 	
 	public IMPLibrary() {
-		add(new DialogPrimitive());
+		add(new NameDialogPrimitive());
 		add(new SubtermPrimitive());
 		add(new ProjectPathPrimitive());
 		add(new PluginPathPrimitive());
@@ -27,9 +27,7 @@
 		add(new OriginCommentBeforePrimitive());
 		add(new OriginCommentAfterPrimitive());
 		add(new TextChangePrimitive());
-		add(new OriginSourceTextPrimitive());
 		add(new OriginPositionPrimitive());
-		add(new OriginRootPrimitive());
 		add(new OriginOffsetWithLayoutPrimitive());
 		add(new QueueAnalysisPrimitive());
 		add(new QueueStrategyPrimitive());
@@ -42,6 +40,8 @@
 		add(new OriginSeparatingWhitespacePrimitive());
 		add(new OriginSeparatorPrimitive());
 		add(new OriginSeparatorWithLayoutPrimitive());
+		add(new SaveAllResourcesPrimitive());
+		add(new MessageDialogPrimitive());
 	}
 
 	public String getOperatorRegistryName() {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/MessageDialogPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/MessageDialogPrimitive.java	Mon Mar 28 12:31:39 2011	(r22438)
@@ -0,0 +1,74 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import static org.spoofax.interpreter.core.Tools.isTermList;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.jface.dialogs.IDialogConstants;
+import org.eclipse.jface.dialogs.InputDialog;
+import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.progress.UIJob;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Fail;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Maartje de Jonge
+ */
+public class MessageDialogPrimitive extends AbstractPrimitive {
+
+	public MessageDialogPrimitive() {
+		super("SSL_EXT_openmessagedialog", 0, 3); 
+	}
+	
+	@Override
+	public boolean call(final IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+		
+		if (!isTermString(tvars[0])) return false;
+		if (!isTermString(tvars[1])) return false;
+		if (!isTermString(tvars[2])) return false;
+		
+		final String title = ((IStrategoString)tvars[0]).stringValue(); 
+		final String message = ((IStrategoString)tvars[1]).stringValue();
+		final String type = ((IStrategoString)tvars[2]).stringValue();
+		final  Boolean[] dialogResultOk={false};
+
+		Job job = new UIJob("user input") {
+			@Override
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				MessageDialog dialog;
+				if (type.equals("WARNING"))
+					dialog = new MessageDialog(null, title, null, message, MessageDialog.WARNING, new String[]{IDialogConstants.OK_LABEL, IDialogConstants.CANCEL_LABEL}, 1);
+				else if (type.equals("ERROR"))
+					dialog = new MessageDialog(null, title, null, message, MessageDialog.ERROR, new String[]{IDialogConstants.OK_LABEL}, 0);
+				else if (type.equals("INFO"))
+					dialog = new MessageDialog(null, title, null, message, MessageDialog.INFORMATION, new String[]{IDialogConstants.OK_LABEL}, 0);
+				else
+					dialog = new MessageDialog(null, title, null, message, MessageDialog.NONE, new String[]{IDialogConstants.OK_LABEL, IDialogConstants.CANCEL_LABEL}, 0);					
+
+				if (dialog.open() == 0) {
+					dialogResultOk[0]=true;
+				} 
+				return Status.OK_STATUS;
+			}
+		};
+		job.setSystem(true);
+		job.schedule();	
+		try {
+			job.join();
+		} catch (InterruptedException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		return job.getResult()==Status.OK_STATUS && dialogResultOk[0]==true;
+	}
+}

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java (from r22426, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DialogPrimitive.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/DialogPrimitive.java	Thu Mar 24 09:34:03 2011	(r22426, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/NameDialogPrimitive.java	Mon Mar 28 12:31:39 2011	(r22438)
@@ -1,12 +1,18 @@
 package org.strategoxt.imp.runtime.stratego;
 
-import static org.spoofax.interpreter.core.Tools.isTermList;
+import static org.spoofax.interpreter.core.Tools.asJavaString;
 import static org.spoofax.interpreter.core.Tools.isTermString;
-
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.imp.language.Language;
+import org.eclipse.imp.language.LanguageRegistry;
+import org.eclipse.imp.language.ServiceFactory;
+import org.eclipse.imp.services.ILanguageSyntaxProperties;
+import org.eclipse.jface.dialogs.IInputValidator;
 import org.eclipse.jface.dialogs.InputDialog;
 import org.eclipse.ui.progress.UIJob;
 import org.spoofax.interpreter.core.IContext;
@@ -15,40 +21,48 @@
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.KeywordRecognizer;
+import org.spoofax.jsglr.client.ParseTable;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.services.SyntaxProperties;
 
 /**
  * @author Maartje de Jonge
  */
-public class DialogPrimitive extends AbstractPrimitive {
+public class NameDialogPrimitive extends AbstractPrimitive {
 
-	public DialogPrimitive() {
-		super("SSL_EXT_opendialog", 0, 3); 
+	public NameDialogPrimitive() {
+		super("SSL_EXT_newnamedialog", 0, 4);
 	}
 	
 	@Override
 	public boolean call(final IContext env, Strategy[] svars, IStrategoTerm[] tvars)
-			throws InterpreterException {
-		
-		if (!isTermString(tvars[0]) && !isTermList(tvars[0])) return false;
-		if (!isTermString(tvars[1])) return false;
-		if (!isTermString(tvars[2])) return false;
-		
-		final String title = ((IStrategoString)tvars[0]).stringValue(); 
-		final String message = ((IStrategoString)tvars[1]).stringValue();
-		final String input = ((IStrategoString)tvars[2]).stringValue();
-		
+			throws InterpreterException {		
+		for (int i = 0; i < tvars.length; i++) {
+			if (!isTermString(tvars[i])) return false;			
+		}
+		final Language language = LanguageRegistry.findLanguage(asJavaString(tvars[0]));
+		final IInputValidator idValidator = getIdentifierValidator(language);				
+		final String title = ((IStrategoString)tvars[1]).stringValue(); 
+		final String message = ((IStrategoString)tvars[2]).stringValue();
+		final String input = ((IStrategoString)tvars[3]).stringValue();
+		final  Boolean[] dialogResultOk={false};
 		Job job = new UIJob("user input") {
 			@Override
 			public IStatus runInUIThread(IProgressMonitor monitor) {
-				InputDialog dialog = new InputDialog(null, title, message, input, null);
+				InputDialog dialog = new InputDialog(null, title, message, input, idValidator);
 				if (dialog.open() == InputDialog.OK) {
 					String userInput=dialog.getValue();
 					env.setCurrent(env.getFactory().makeString(userInput));
+					dialogResultOk[0]=true;
 				} 
 				return Status.OK_STATUS;
 			}
 		};
 		job.setSystem(true);
+		job.setPriority(Job.SHORT);
 		job.schedule();	
 		try {
 			job.join();
@@ -56,6 +70,61 @@
 			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
-		return job.getResult()==Status.OK_STATUS;
+		return job.getResult()==Status.OK_STATUS && dialogResultOk[0]==true;
+	}
+
+	private IInputValidator getIdentifierValidator(final Language language) {
+		IInputValidator validator = null;
+		if (language != null) {
+			SyntaxProperties syntax = getSyntaxProperties(language);
+			final Pattern idPattern = syntax.getIdentifierLexical();
+			final KeywordRecognizer keywordRecognizer = getKeyWordRecognizer(language);
+			validator = new IInputValidator() {
+				public String isValid(String newText) {
+					if(newText.equals("")){
+						return ""; //disable but do not show error message for empty input 
+					}
+					if(idPattern != null){
+						Matcher matcher = idPattern.matcher(newText);
+						if(!(matcher.matches())){
+							return "Error: name should match identifier pattern '" + 
+							idPattern.pattern()+ "'. \n(" + language.getName() + "-Syntax.esv)";
+						}
+					}
+					if(keywordRecognizer !=null &&  keywordRecognizer.isKeyword(newText)){
+						return "Error: This name is used as a keyword in '" + language.getName() + "'";					
+					}
+					return null;
+				}
+			};
+		}
+		return validator;
+	}
+
+	private KeywordRecognizer getKeyWordRecognizer(Language language) {
+		ParseTable pt = null;
+		try {
+			pt = Environment.getParseTableProvider(language).get();
+			return pt.getKeywordRecognizer();
+		} catch (Exception e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+			return null;
+		} 
+	}
+	
+	private static SyntaxProperties getSyntaxProperties(Language language) {
+		SyntaxProperties result = null;
+		Descriptor descriptor = Environment.getDescriptor(language);
+		if (descriptor != null) {
+			try {
+				result = (SyntaxProperties) descriptor.createService(ILanguageSyntaxProperties.class, null);
+			} catch (BadDescriptorException e) {
+				Environment.logException("Could not read syntax properties", e);
+			}
+		} else {
+			result = (SyntaxProperties) ServiceFactory.getInstance().getSyntaxProperties(language);
+		}
+		return result != null ? result : new SyntaxProperties(null, null, null, null, null, null, null);
 	}
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SaveAllResourcesPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SaveAllResourcesPrimitive.java	Mon Mar 28 12:31:39 2011	(r22438)
@@ -0,0 +1,53 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.ui.IWorkbenchWindow;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.progress.UIJob;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Maartje de Jonge
+ */
+public class SaveAllResourcesPrimitive extends AbstractPrimitive {
+
+	public SaveAllResourcesPrimitive() {
+		super("SSL_EXT_saveresources", 0, 1);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {		
+		if (!isTermString(tvars[0]))
+			return false;
+		Job job = new UIJob("Save editors") {
+			@Override
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				IWorkbenchWindow activeWorkbenchWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
+				if (activeWorkbenchWindow == null)
+					throw new IllegalStateException("Must be called from UI thread");
+				PlatformUI.getWorkbench().saveAllEditors(false);
+				return Status.OK_STATUS;
+			}
+		};
+		job.setSystem(true);
+		job.schedule();
+		try {
+			job.join();
+		} catch (InterruptedException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		return job.getResult()==Status.OK_STATUS;
+	}
+}

From tobivollebregt at gmail.com  Tue Mar 29 10:37:44 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 29 Mar 2011 08:37:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22439 -
	spoofax-imp/trunk/org.strategoxt.imp.generator
Message-ID: <20110329083744.A68267F8018@mx1.tudelft.nl>

Author: tvo
Date: Tue Mar 29 08:37:42 2011
New Revision: 22439
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22439&sc=1

Log:
Fix build if pkg-config isn't from nix and PKG_CONFIG_PATH isn't set

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Mon Mar 28 12:31:39 2011	(r22438)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Tue Mar 29 08:37:42 2011	(r22439)
@@ -4,6 +4,8 @@
 JAVA_FRONT ?= ${HOME}/.nix-profile
 SDF        ?= ${HOME}/.nix-profile
 
+export PKG_CONFIG_PATH += ${STRATEGOXT}/lib/pkgconfig:${JAVA_FRONT}/lib/pkgconfig:${SDF}/lib/pkgconfig
+
 STRS     = $(wildcard src/*.str) \
            $(wildcard src/sdf2imp/*.str) \
            $(wildcard src/sdf2imp/lib/*.str) \
@@ -19,7 +21,7 @@
 SYNTAX   = src/syntax/EditorService.tbl src/syntax/EditorService.pp src/syntax/EditorService-pretty.pp.af src/syntax/EditorService.str src/syntax/Stratego-Java-EditorService.tbl
 
 STRCFLAGS = \
-	-la stratego-xtc \
+    -la stratego-xtc \
     -la stratego-lib \
     -la stratego-gpp \
     -la stratego-tool-doc \
@@ -54,7 +56,7 @@
 	-I ${STRATEGOXT}/share/sdf/sdf-front \
 	-I ${JAVA_FRONT}/share/java-front \
 	-I src/syntax \
-    `pkg-config --variable=strcflags java-front`
+	`pkg-config --variable=strcflags java-front`
 
 all : sdf2imp java jar syntax
 

From tobivollebregt at gmail.com  Tue Mar 29 10:37:50 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 29 Mar 2011 08:37:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22440 -
	spoofax-imp/trunk
Message-ID: <20110329083750.38972CC043@mx4.tudelft.nl>

Author: tvo
Date: Tue Mar 29 08:37:49 2011
New Revision: 22440
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22440&sc=1

Log:
Notes about building org.strategoxt.imp.generator

Modified:
   spoofax-imp/trunk/INSTALL

Modified: spoofax-imp/trunk/INSTALL
==============================================================================
--- spoofax-imp/trunk/INSTALL	Tue Mar 29 08:37:42 2011	(r22439)
+++ spoofax-imp/trunk/INSTALL	Tue Mar 29 08:37:49 2011	(r22440)
@@ -22,3 +22,18 @@
 
 If you have any problems building, try contacting us
 through our support page at http://strategoxt.org/Spoofax/Support.
+
+BUILDING ORG.STRATEGOXT.IMP.GENERATOR FROM SOURCE
+
+  1) Install ecj: javac will (probably) run out of memory in the last step.
+
+  2) Install nix, see http://nixos.org/nix
+
+  3) Install latest build of Stratego/XT:
+
+	nix-channel --add http://hydra.nixos.org/jobset/strategoxt/strategoxt-packages/channel/latest
+	nix-channel --update
+	nix-env -i aterm sdf2-bundle strategoxt java-front strc-java
+
+  4) Build the org.strategoxt.imp.generator project in Eclipse or run make
+     manually, either should work.

From L.C.L.Kats at tudelft.nl  Tue Mar 29 16:56:48 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 29 Mar 2011 14:56:48 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22441 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms
Message-ID: <20110329145648.65C437F8026@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Mar 29 14:56:48 2011
New Revision: 22441
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22441&sc=1

Log:


Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/SimpleTermVisitor.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermVisitor.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/SimpleTermVisitor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/SimpleTermVisitor.java	Tue Mar 29 08:37:49 2011	(r22440)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/SimpleTermVisitor.java	Tue Mar 29 14:56:48 2011	(r22441)
@@ -12,14 +12,17 @@
 public abstract class SimpleTermVisitor implements ISimpleTermVisitor {
 	
 	public final boolean visit(ISimpleTerm term) {
+		preVisit(term);
 		Iterator<ISimpleTerm> iterator = tryGetListIterator(term); 
 		for (int i = 0, max = term.getSubtermCount(); i < max; i++) {
 			ISimpleTerm child = iterator == null ? term.getSubterm(i) : iterator.next();
-			preVisit(child);
 			boolean isDone = visit(child);
-			postVisit(child);
-			if (isDone || isDone(null)) return true;
+			if (isDone || isDone(null)) {
+				postVisit(term);
+				return true;
+			}
 		}
+		postVisit(term);
 		return false;
 	}
 
@@ -37,7 +40,7 @@
 		return null;
 	}
 	
-	public void postVisit(ISimpleTerm node) {
+	public void postVisit(ISimpleTerm term) {
 		// No default implementation
 	}
 	

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermVisitor.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermVisitor.java	Tue Mar 29 08:37:49 2011	(r22440)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermVisitor.java	Tue Mar 29 14:56:48 2011	(r22441)
@@ -14,14 +14,17 @@
 public abstract class TermVisitor implements ITermVisitor {
 	
 	public final boolean visit(IStrategoTerm term) {
+		preVisit(term);
 		Iterator<IStrategoTerm> iterator = tryGetListIterator(term); 
 		for (int i = 0, max = term.getSubtermCount(); i < max; i++) {
 			IStrategoTerm child = iterator == null ? term.getSubterm(i) : iterator.next();
-			preVisit(child);
 			boolean isDone = visit(child);
-			postVisit(child);
-			if (isDone || isDone(null)) return true;
+			if (isDone || isDone(null)) {
+				postVisit(term);
+				return true;
+			}
 		}
+		postVisit(term);
 		return false;
 	}
 
@@ -45,9 +48,9 @@
 //Local interface avoids abstract method and subsequent @Override annotation requirement
 
 interface ITermVisitor {
-	void preVisit(IStrategoTerm node);
+	void preVisit(IStrategoTerm term);
 
-	void postVisit(IStrategoTerm node);
+	void postVisit(IStrategoTerm term);
 	
-	boolean isDone(IStrategoTerm node);
+	boolean isDone(IStrategoTerm term);
 }
\ No newline at end of file

From seba at informatik.uni-marburg.de  Tue Mar 29 21:46:58 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 29 Mar 2011 19:46:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22442 - in
	sugarj/branches/SugarJ-editor-services:
	case-studies/javaclosure case-studies/xml
	compiler/org/sugarj/driver stdlib/org/sugarj/stdlib
Message-ID: <20110329194658.B8C697F8006@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Tue Mar 29 19:46:58 2011
New Revision: 22442
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22442&sc=1

Log:
more support for running the compiler from the CLI

Added:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/DriverCLI.java
Deleted:
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Function.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/BookTest.java
Modified:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Environment.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Result.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java
   sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/stdlib/StdLib.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Tue Mar 29 14:56:48 2011	(r22441)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/ATermCommands.java	Tue Mar 29 19:46:58 2011	(r22442)
@@ -94,9 +94,13 @@
   public static void atermToFile(IStrategoTerm aterm, String filename)
       throws IOException {
     Environment.terms.put(filename, aterm);
+    FileCommands.writeToFile(filename, atermToString(aterm));
+  }
+  
+  public static String atermToString(IStrategoTerm aterm) {
     InlinePrinter printer = new InlinePrinter();
     aterm.prettyPrint(printer);
-    FileCommands.writeToFile(filename, printer.getString());
+    return printer.getString();
   }
 
   public static boolean isApplication(IStrategoTerm term, String cons) {
@@ -139,7 +143,13 @@
   }
   
   public static IStrategoTerm makeTuple(IStrategoTerm... ts) {
-    return factory.makeTuple(ts);
+    return makeTuple(null, ts);
+  }
+  
+  public static IStrategoTerm makeTuple(IToken tok, IStrategoTerm... ts) {
+    IStrategoTerm t = factory.makeTuple(ts);
+    setAttachment(t, "Tuple", tok, ts);
+    return t;
   }
   
   public static IStrategoTerm makeSome(IStrategoTerm term, IToken noneToken) {

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Tue Mar 29 14:56:48 2011	(r22441)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Tue Mar 29 19:46:58 2011	(r22442)
@@ -941,12 +941,7 @@
       
       String[] sources = handleOptions(args);
 
-      URL[] urls = new URL[Environment.srcPath.size()];
-      int i = 0;
-      for (String path : Environment.srcPath)
-        urls[i++] = new File(path).toURI().toURL();
-
-      ClassLoader loader = new URLClassLoader(urls);
+      ClassLoader loader = new URLClassLoader(new URL[] {new File(Environment.src).toURI().toURL()});
       
       for (String source : sources)
       {
@@ -961,10 +956,10 @@
         pendingInputFiles.add(uri);
       }
       
-      for (URI source : allInputFiles)
-        compile(source);
-      
-      storeCaches();
+      for (URI source : allInputFiles) {
+        Result res = compile(source);
+        DriverCLI.processResultCLI(res, source.getPath(), new File(".").getAbsolutePath());
+      }
       
     } catch (Exception e) {
       e.printStackTrace();
@@ -1061,7 +1056,7 @@
 
     if (line.hasOption("sourcepath"))
       for (String path : line.getOptionValue("sourcepath").split(Environment.classpathsep))
-        Environment.srcPath.add(path);
+        Environment.src = path;
  
     if (line.hasOption("d"))
       Environment.bin = line.getOptionValue("d");

Added: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/DriverCLI.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/DriverCLI.java	Tue Mar 29 19:46:58 2011	(r22442)
@@ -0,0 +1,295 @@
+package org.sugarj.driver;
+
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getTokenizer;
+import static org.spoofax.terms.Term.tryGetConstructor;
+import static org.sugarj.driver.Log.log;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.MultiBadTokenException;
+import org.spoofax.jsglr.client.ParseTimeoutException;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.jsglr.client.imploder.Token;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.spoofax.terms.TermVisitor;
+import org.strategoxt.HybridInterpreter;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * @author Sebastian Erdweg <seba at informatik uni-marburg de>
+ *
+ */
+public class DriverCLI {
+  
+  private static class Error {
+    public String msg;
+    public int lineStart;
+    public int lineEnd;
+    public int columnStart;
+    public int columEnd;
+    
+    Error(String msg, IToken left, IToken right) {
+      this.msg = msg;
+      this.lineStart = left.getLine();
+      this.columnStart = left.getColumn();
+      this.lineEnd = right.getLine();
+      this.columEnd = right.getColumn();
+    }
+    
+    /**
+     * start of file error
+     * @param msg
+     */
+    Error(String msg) {
+      this.msg = msg;
+      this.lineStart = 0;
+      this.columnStart = 0;
+      this.lineEnd = 0;
+      this.columEnd = 0;
+    }
+  }
+  
+  static void processResultCLI(Result res, String file, String project) throws IOException {
+    log.log("");
+    
+    for (BadTokenException e : res.getCollectedErrors())
+      log.log("syntax error: line " + e.getLineNumber() + " column " + e.getColumnNumber() + ": " + e.getMessage());
+    
+    IToken tok = ImploderAttachment.getRightToken(res.getSugaredSyntaxTree());
+    
+    IStrategoTerm tuple = ATermCommands.makeTuple(
+        tok,
+        res.getSugaredSyntaxTree(), 
+        ATermCommands.makeString(file, tok), 
+        ATermCommands.makeString(project, tok));
+    
+    List<Error> errors = gatherNonFatalErrors(res.getSugaredSyntaxTree());
+    
+    for (Error error : errors)
+      log.log("error: line " + error.lineStart + " column " + error.columnStart + " to line " + error.lineEnd + " column " + error.columEnd + ":\n  " + error.msg);
+    
+    IStrategoTerm errorTree = STRCommands.assimilate("sugarj-analyze", res.getDesugaringsFile(), tuple, new HybridInterpreter());
+    
+    assert errorTree.getTermType() == IStrategoTerm.TUPLE && errorTree.getSubtermCount() == 4 :
+      "error in sugarj-analyze, did not return tuple with 4 elements";
+    
+    IStrategoList semErrors = Tools.termAt(errorTree, 1);
+    IStrategoList warnings = Tools.termAt(errorTree, 2);
+    IStrategoList notes = Tools.termAt(errorTree, 3);
+    
+    
+    for (IStrategoTerm error : semErrors.getAllSubterms())
+      if (error.getTermType() == IStrategoTerm.LIST)
+        for (IStrategoTerm deepError : error.getAllSubterms())
+          reportCLI(deepError, "error");
+      else
+        reportCLI(error, "error");
+    for (IStrategoTerm warning : warnings.getAllSubterms())
+      if (warning.getTermType() == IStrategoTerm.LIST)
+        for (IStrategoTerm deepWarning : warning.getAllSubterms())
+          reportCLI(deepWarning, "warning");
+      else
+        reportCLI(warning, "warning");
+    for (IStrategoTerm note : notes.getAllSubterms())
+      if (note.getTermType() == IStrategoTerm.LIST)
+        for (IStrategoTerm deepNote : note.getAllSubterms())
+          reportCLI(deepNote, "note");
+      else
+        reportCLI(note, "note");
+    
+    System.out.println(ATermCommands.atermToFile(errorTree));
+  }
+  
+  private static void reportCLI(IStrategoTerm pairOrList, String kind) throws IOException {
+    assert pairOrList.getTermType() == IStrategoTerm.TUPLE && pairOrList.getSubtermCount() == 2;
+    
+    IStrategoTerm term = Tools.termAt(pairOrList, 0);
+    IStrategoString msg = Tools.termAt(pairOrList, 1);
+    
+    IToken left = ImploderAttachment.getLeftToken(term);
+    IToken right = ImploderAttachment.getRightToken(term);
+    
+    if (left == null && right != null)
+      left = right;
+    else if (left != null && right == null)
+      right = left;
+    
+    if (left == null || right == null)
+      log.log("error: " + msg + "\n  in tree " + ATermCommands.atermToFile(term));
+    else
+      log.log("error: line " + left.getLine() + " column " + left.getColumn() + " to line " + right.getLine() + " column " + right.getColumn() + ":\n  " + msg);
+  }
+  
+  
+  
+  /**
+   * Report WATER + INSERT errors from parse tree
+   */
+  private static List<Error> gatherNonFatalErrors(IStrategoTerm top) {
+    List<Error> errors = new ArrayList<Error>();
+    ITokenizer tokenizer = getTokenizer(top);
+    for (int i = 0, max = tokenizer.getTokenCount(); i < max; i++) {
+      IToken token = tokenizer.getTokenAt(i);
+      String error = token.getError();
+      if (error != null) {
+        if (error == ITokenizer.ERROR_SKIPPED_REGION) {
+          i = findRightMostWithSameError(token, null);
+          reportSkippedRegion(token, tokenizer.getTokenAt(i), errors);
+        } else if (error.startsWith(ITokenizer.ERROR_WARNING_PREFIX)) {
+          i = findRightMostWithSameError(token, null);
+          reportWarningAtTokens(token, tokenizer.getTokenAt(i), error, errors);
+        } else if (error.startsWith(ITokenizer.ERROR_WATER_PREFIX)) {
+          i = findRightMostWithSameError(token, ITokenizer.ERROR_WATER_PREFIX);
+          reportErrorAtTokens(token, tokenizer.getTokenAt(i), error, errors);
+        } else {
+          i = findRightMostWithSameError(token, null);
+          // UNDONE: won't work for multi-token errors (as seen in SugarJ)
+          reportErrorAtTokens(token, tokenizer.getTokenAt(i), error, errors);
+        }
+      }
+    }
+    gatherAmbiguities(top, errors);
+    
+    return errors;
+  }
+
+  private static int findRightMostWithSameError(IToken token, String prefix) {
+    String expectedError = token.getError();
+    ITokenizer tokenizer = token.getTokenizer();
+    int i = token.getIndex();
+    for (int max = tokenizer.getTokenCount(); i + 1 < max; i++) {
+      String error = tokenizer.getTokenAt(i + 1).getError();
+      if (error != expectedError
+          && (error == null || prefix == null || !error.startsWith(prefix)))
+        break;
+    }
+    return i;
+  }
+
+  
+  private static final IStrategoConstructor ambCons = Environment.getTermFactory().makeConstructor("amb", 1);
+  
+    /**
+     * Report recoverable errors (e.g., inserted brackets).
+     * 
+     * @param outerBeginOffset  The begin offset of the enclosing construct.
+     */
+  private static void gatherAmbiguities(IStrategoTerm term, final List<Error> errors) {
+    new TermVisitor() {
+      IStrategoTerm ambStart;
+      
+      public void preVisit(IStrategoTerm term) {
+        if (ambStart == null && ambCons == tryGetConstructor(term)) {
+          reportAmbiguity(term, errors);
+          ambStart = term;
+        }
+      }
+      
+      @Override
+      public void postVisit(IStrategoTerm term) {
+        if (term == ambStart) ambStart = null;
+      }
+    }.visit(term);
+  }
+  
+  private static void reportAmbiguity(IStrategoTerm amb, List<Error> errors) {
+    reportWarningAtTokens(getLeftToken(amb), getRightToken(amb),
+        "Fragment is ambiguous", errors);
+  }
+  
+
+  private static void reportSkippedRegion(IToken left, IToken right, List<Error> errors) {
+    // Report entire region
+    reportErrorAtTokens(left, right, ITokenizer.ERROR_SKIPPED_REGION, errors);
+  }
+
+
+  private static void reportTokenExpected(ITokenizer tokenizer, TokenExpectedException exception, List<Error> errors) {
+    String message = exception.getShortMessage();
+    reportErrorNearOffset(tokenizer, exception.getOffset(), message, errors);
+  }
+  
+  private static void reportBadToken(ITokenizer tokenizer, BadTokenException exception, List<Error> errors) {
+    String message;
+    if (exception.isEOFToken() || tokenizer.getTokenCount() <= 1) {
+      message = exception.getShortMessage();
+    } else {
+      IToken token = tokenizer.getTokenAtOffset(exception.getOffset());
+      token = findNextNonEmptyToken(token);
+      message = ITokenizer.ERROR_WATER_PREFIX + ": " + token.toString().trim();
+    }
+    reportErrorNearOffset(tokenizer, exception.getOffset(), message, errors);
+  }
+  
+  private static void reportMultiBadToken(ITokenizer tokenizer, MultiBadTokenException exception, List<Error> errors) {
+    for (BadTokenException e : exception.getCauses()) {
+      reportException(tokenizer, e, errors); // use double dispatch
+    }
+  }
+  
+  private static void reportTimeOut(ITokenizer tokenizer, ParseTimeoutException exception, List<Error> errors) {
+    String message = "Internal parsing error: " + exception.getMessage();
+    reportErrorAtFirstLine(message, errors);
+    reportMultiBadToken(tokenizer, exception, errors);
+  }
+  
+  private static void reportException(ITokenizer tokenizer, Exception exception, List<Error> errors) {
+    try {
+      throw exception;
+    } catch (ParseTimeoutException e) {
+      reportTimeOut(tokenizer, (ParseTimeoutException) exception, errors);
+    } catch (TokenExpectedException e) {
+      reportTokenExpected(tokenizer, (TokenExpectedException) exception, errors);
+    } catch (MultiBadTokenException e) {
+      reportMultiBadToken(tokenizer, (MultiBadTokenException) exception, errors);
+    } catch (BadTokenException e) {
+      reportBadToken(tokenizer, (BadTokenException) exception, errors);
+    } catch (Exception e) {
+      String message = "Internal parsing error: " + exception;
+      reportErrorAtFirstLine(message, errors);
+    }
+  }
+
+  private static void reportErrorNearOffset(ITokenizer tokenizer, int offset, String message, List<Error> errors) {
+    IToken errorToken = tokenizer.getErrorTokenOrAdjunct(offset);
+    reportErrorAtTokens(errorToken, errorToken, message, errors);
+  }
+   
+  private static IToken findNextNonEmptyToken(IToken token) {
+    ITokenizer tokenizer = token.getTokenizer();
+    IToken result = null;
+    for (int i = token.getIndex(), max = tokenizer.getTokenCount(); i < max; i++) {
+      result = tokenizer.getTokenAt(i);
+      if (result.getLength() != 0 && !Token.isWhiteSpace(result)) break;
+    }
+    return result;
+  }
+  
+  private static void reportErrorAtTokens(final IToken left, final IToken right, String message, List<Error> errors) {
+    if (left.getStartOffset() > right.getEndOffset()) {
+      reportErrorNearOffset(left.getTokenizer(), left.getStartOffset(), message, errors);
+    } else {
+      errors.add(new Error(message, left, right));
+    }
+  }
+  
+  private static void reportWarningAtTokens(final IToken left, final IToken right, final String message, List<Error> errors) {
+    errors.add(new Error(message, left, right));
+  }
+  
+  private static void reportErrorAtFirstLine(String message, List<Error> errors) {
+    errors.add(new Error(message));
+  }
+}

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Environment.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Environment.java	Tue Mar 29 14:56:48 2011	(r22441)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Environment.java	Tue Mar 29 19:46:58 2011	(r22442)
@@ -51,12 +51,9 @@
   public static String tmpDir = System.getProperty("java.io.tmpdir");
   
   
-  public static Set<String> srcPath = new HashSet<String>();
-  
   public static Set<String> includePath = new HashSet<String>();
   
   public static void init() throws IOException {
-    srcPath.add(src);
     includePath.add(bin);
   }
 

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Result.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Result.java	Tue Mar 29 14:56:48 2011	(r22441)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Result.java	Tue Mar 29 19:46:58 2011	(r22442)
@@ -22,6 +22,7 @@
   private Set<BadTokenException> collectedErrors = new HashSet<BadTokenException>();
   private IStrategoTerm sugaredSyntaxTree = null;
   private String generatedClassFile;
+  private String desugaringsFile;
 
   void addFileDependency(String file) throws IOException {
     fileDependencyHashes.put(file, FileCommands.fileHash(file));
@@ -90,6 +91,11 @@
   }
   
   void registerEditorDesugarings(String jarfile) throws IOException {
+    desugaringsFile = jarfile;
     editorServices = new HashSet<IStrategoTerm>(ATermCommands.registerSemanticProvider(editorServices, jarfile));
   }
+  
+  String getDesugaringsFile() {
+    return desugaringsFile;
+  }
 }
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Tue Mar 29 14:56:48 2011	(r22441)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/STRCommands.java	Tue Mar 29 19:46:58 2011	(r22442)
@@ -26,9 +26,7 @@
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoExit;
-import org.strategoxt.strj.Main;
 import org.strategoxt.strj.main_strj_0_0;
-import org.strategoxt.strj.strj_0_0;
 import org.sugarj.driver.caching.ModuleKey;
 import org.sugarj.driver.caching.ModuleKeyCache;
 import org.sugarj.stdlib.StdLib;
@@ -194,12 +192,16 @@
   }
 
   public static IStrategoTerm assimilate(String jarfile, IStrategoTerm in, HybridInterpreter interp) throws IOException {
+    return assimilate("internal-main", jarfile, in, interp);
+  }
+  
+  public static IStrategoTerm assimilate(String strategy, String jarfile, IStrategoTerm in, HybridInterpreter interp) throws IOException {
     try {
       HybridInterpreter newInterp = new HybridInterpreter(interp);
       newInterp.loadJars(new File(jarfile).toURI().toURL());
       newInterp.setCurrent(in);
       
-      if (newInterp.invoke("internal-main")) {
+      if (newInterp.invoke(strategy)) {
         IStrategoTerm term = newInterp.current();
         
         IToken left = ImploderAttachment.getLeftToken(in);

Modified: sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/stdlib/StdLib.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/stdlib/StdLib.java	Tue Mar 29 14:56:48 2011	(r22441)
+++ sugarj/branches/SugarJ-editor-services/stdlib/org/sugarj/stdlib/StdLib.java	Tue Mar 29 19:46:58 2011	(r22442)
@@ -29,15 +29,11 @@
   }
 
   private static URI ensureFile(String ressource) {
-    try {
-      URI uri = StdLib.class.getClassLoader().getResource(ressource).toURI();
-      if (uri != null && uri.getPath() != null && new File(uri.getPath()).exists())
-        return uri;
-    } catch (URISyntaxException e) {
-    }
-      
+    File f = new File(stdLibDir.getPath() + File.separator + ressource);
+    if (f.exists())
+      return f.toURI();
     
-    File f = new File(stdLibTmpDir + "/" + ressource);
+    f = new File(stdLibTmpDir + "/" + ressource);
     f.getParentFile().mkdirs();
     
     try {

From seba at informatik.uni-marburg.de  Tue Mar 29 21:47:22 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 29 Mar 2011 19:47:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22443 -
	sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor
Message-ID: <20110329194722.7E5AF108C004@mx3.tudelft.nl>

Author: SebastianErdweg
Date: Tue Mar 29 19:47:22 2011
New Revision: 22443
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22443&sc=1

Log:
removed unneeded configuration

Modified:
   sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java

Modified: sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java	Tue Mar 29 19:46:58 2011	(r22442)
+++ sugarj/branches/SugarJ-editor-services/editor/editor/java/org/sugarj/editor/SugarJParser.java	Tue Mar 29 19:47:22 2011	(r22443)
@@ -43,7 +43,6 @@
     Environment.includePath.add(new StrategoJarAntPropertyProvider().getAntPropertyValue(""));
 
     assert projectPath != null;
-    Environment.srcPath.add(projectPath);
     Environment.src = projectPath;
     Environment.bin = outputPath != null ? outputPath : projectPath;
 
@@ -60,8 +59,6 @@
     CommandExecution.SUB_SILENT_EXECUTION = false;
     CommandExecution.FULL_COMMAND_LINE = true;
     
-    // TODO compile files into the project folder
-
     try {
       result = Driver.compile(input, FileCommands.fileName(filename), filename);
     } catch (Throwable e) {

From L.C.L.Kats at tudelft.nl  Tue Mar 29 22:04:05 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 29 Mar 2011 20:04:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22444 -
	spoofax-imp/trunk/experimental/NamingExperiment/test
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	spoofax-imp/trunk/o...
Message-ID: <20110329200405.4D96CCC037@mx4.tudelft.nl>

Author: LennartKats
Date: Tue Mar 29 20:04:04 2011
New Revision: 22444
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22444&sc=1

Log:
Updated testing language syntax: quotation brackets can now be used to mark selections in tested fragments

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java
Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/generate.str
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java

Modified: spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Tue Mar 29 20:04:04 2011	(r22444)
@@ -2,7 +2,7 @@
 
 language NamingExperiment
 
-setup [[
+setup Header [[
   module M
     
   entity A {
@@ -14,34 +14,35 @@
   entity B {
     q : Q
   }
-]] 1 error
+]] => _ // Entity(_, _) //1 error
 
 test Resolve local property access [[
   entity B {
-    x : A
+    [[x]] : A
     f() {
-      var v : A = x
+      var v : A = [[x]]
     }
   }
-]] resolves x#3 to x#2
+]] resolves #2 to #1
+// TODO: occurrence highlighting, ref resolv, lang-specific identifiers?
 
 test Resolve parameter access [[
   entity B {
     x : A
-    f(x : A) {
-      var v : A = x
+    f([[x]] : A) {
+      var v : A = [[x]]
     }
   }
-]] resolves x#4 to x#3
+]] resolves #2 to #1
 
 test Resolve property access [[
   entity B {
-    y : A
+    yyyyy : A
     f(a : A) {
-      var v : A = a.x.y.x
+      var v : A = a.x.y
     }
   }
-]]
+]] //completes y to yyyyz
 
 test Resolve property access fails [[
   entity B {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -28,6 +28,7 @@
 import org.eclipse.core.runtime.Path;
 import org.eclipse.imp.language.ILanguageService;
 import org.eclipse.imp.language.Language;
+import org.eclipse.imp.language.ServiceFactory;
 import org.eclipse.imp.parser.IParseController;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -156,7 +157,23 @@
 	// LOADING SERVICES
 	
 	/**
+	 * Creates a new parse controller for this descriptor's language.
+	 * May be a {@link DynamicParseController} or possibly a custom
+	 * implementation of {@link IParseController}.
+	 */
+	public IParseController createParseController() throws BadDescriptorException {
+		IParseController result = ServiceFactory.getInstance().getParseController(getLanguage());
+		if (result instanceof DynamicParseController) {
+			((DynamicParseController) result).initialize(null, getLanguage());
+		}
+		return result;
+	}
+	
+	/**
 	 * Creates a new service of a particular type.
+	 * 
+	 * For parse controllers, {@link #createParseController()}
+	 * should be used instead, as these may have custom Java implementations.
 	 */
 	public synchronized<T extends ILanguageService> T createService(Class<T> type, SGLRParseController controller)
 			throws BadDescriptorException {
@@ -309,8 +326,14 @@
 	 */
 	public Class<?> getAttachmentProvider() {
 		try {
-			if (attachmentProvider == null)
-				attachmentProvider = createService(IParseController.class, null).getClass();
+			if (attachmentProvider == null) {
+				// might be better, but unnecessary as long as setAttachmentProvider is called
+				// IParseController parser = createParseController();
+				// if (parser instanceof DynamicParseController)
+				// 	parser = ((DynamicParseController) parser).getWrapped();
+				IParseController parser = createService(IParseController.class, null);
+				attachmentProvider = parser.getClass();
+			}
 			return attachmentProvider;
 		} catch (BadDescriptorException e) { // Unexpected exception
 			Environment.logException("Unable to instantiate parse controller class", e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -7,10 +7,9 @@
 import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.TextAttribute;
 import org.eclipse.jface.text.source.ISourceViewer;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.widgets.Display;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.services.TokenColorer;
 
 /**
  * Dynamic proxy class to a token colorer.
@@ -21,10 +20,6 @@
  */
 public class DynamicTokenColorer extends AbstractService<ITokenColorer> implements ITokenColorer {
 	
-	private static final int GRAY_COMPONENT = 96;
-	
-	private static volatile Color gray;
-	
 	private IParseController lastParseController;
 	
 	private volatile boolean isReinitializing;
@@ -32,7 +27,7 @@
 	public DynamicTokenColorer() {
 		super(ITokenColorer.class);
 		if (EditorState.isUIThread())
-			getGrayColor(); // initialize color while we're in the SWT main thread
+			TokenColorer.getGrayColor(); // initialize color while we're in the SWT main thread
 	}
 	
 	public IRegion calculateDamageExtent(IRegion seed, IParseController controller) {
@@ -45,7 +40,7 @@
 		if (!isInitialized()) initialize(controller);
 		lastParseController = controller;
 		TextAttribute result = getWrapped().getColoring(controller, token);
-		if (isReinitializing) result = toGray(result);
+		if (isReinitializing) result = TokenColorer.toGray(result);
 		return result;
 	}
 	
@@ -75,20 +70,4 @@
 		super.reinitialize(newDescriptor);
 		isReinitializing = false;
 	}
-
-	private TextAttribute toGray(TextAttribute attribute) {
-		return attribute == null
-				? new TextAttribute(getGrayColor())
-				: new TextAttribute(getGrayColor(), attribute.getBackground(), attribute.getStyle(), attribute.getFont());
-	}
-	
-	private static Color getGrayColor() {
-		if (gray == null) {
-			synchronized (DynamicTokenColorer.class) {
-				if (gray == null)
-					gray = new Color(Display.getCurrent(), GRAY_COMPONENT, GRAY_COMPONENT, GRAY_COMPONENT);
-			}
-		}
-		return gray;
-	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -14,6 +14,7 @@
 import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.TextAttribute;
 import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.widgets.Display;
 import org.spoofax.interpreter.terms.ISimpleTerm;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -21,6 +22,7 @@
 import org.spoofax.jsglr.client.imploder.Token;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicTokenColorer;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 
 /**
@@ -28,6 +30,10 @@
  */
 public class TokenColorer implements ITokenColorer {
 	
+	private static final int GRAY_COMPONENT = 110;
+	
+	private static volatile Color gray;
+	
 	private final List<TextAttributeMapping> envMappings, nodeMappings, tokenMappings;
 	
 	private boolean isLazyColorsInited;
@@ -105,6 +111,8 @@
 			tokenKind = IToken.TK_UNKNOWN;
 		} else if (tokenKind == IToken.TK_ERROR_KEYWORD) {
 			tokenKind = IToken.TK_KEYWORD;
+		} else if (tokenKind == IToken.TK_ESCAPE_OPERATOR) {
+			return new TextAttribute(getGrayColor());
 		}
 		 
 		TextAttribute tokenColor = getColoring(tokenMappings, constructor, sort, tokenKind);
@@ -196,4 +204,20 @@
 		return new Region(0, getRightToken(ast).getTokenizer().getInput().length() - 1);
 		// return seed;
 	}
+
+	public static TextAttribute toGray(TextAttribute attribute) {
+		return attribute == null
+				? new TextAttribute(getGrayColor())
+				: new TextAttribute(getGrayColor(), attribute.getBackground(), attribute.getStyle(), attribute.getFont());
+	}
+	
+	public static Color getGrayColor() {
+		if (gray == null) {
+			synchronized (DynamicTokenColorer.class) {
+				if (gray == null)
+					gray = new Color(Display.getCurrent(), GRAY_COMPONENT, GRAY_COMPONENT, GRAY_COMPONENT);
+			}
+		}
+		return gray;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing.test/test/setup-test.spt	Tue Mar 29 20:04:04 2011	(r22444)
@@ -15,10 +15,10 @@
   [[ entity x { a : x } ]] 1 warnings
 
 test reference resolving
-  [[ entity Y { y : Y } ]] resolves Y#2 to Y#1
+  [[ entity [[Y]] { y : [[Y]] } ]] resolves #2 to #1
 
 test reference resolving
-  [[ entity Y { y : Initial } ]] resolves Initial#2 to Initial#1
+  [[ entity Y { y : [[Initial]] } ]] resolves #2
 
 setup Footer [[
     entity Z {}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Tue Mar 29 20:04:04 2011	(r22444)
@@ -376,7 +376,7 @@
             <antcall target="stratego.jar.deletehelper"/>
             <antcall target="stratego.jvm.helper">
                 <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
-                <param name="build.stratego.extraargs" value="-la java-front -la org.strategoxt.imp.testing.strategies"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
             </antcall>
             <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
             <!-- copy imported terms -->
@@ -448,4 +448,4 @@
             <delete file="${include}/${sdfmodule}.def"/>
             <delete dir="${src-gen}/trans"/>
         </target>
-    </project>
+    </project>
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/FragmentParser.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -1,5 +1,8 @@
 package org.strategoxt.imp.testing;
 
+import static java.lang.Math.max;
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermString;
 import static org.spoofax.interpreter.core.Tools.listAt;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
@@ -54,6 +57,9 @@
 	private static final IStrategoConstructor SETUP_3 =
 		Environment.getTermFactory().makeConstructor("Setup", 3);
 	
+	private static final IStrategoConstructor QUOTEPART_1 =
+		Environment.getTermFactory().makeConstructor("QuotePart", 1);
+	
 	private static final int EXCLUSIVE = 1;
 	
 	private final WeakValueHashMap<String, IStrategoTerm> failParseCache =
@@ -66,7 +72,7 @@
 	
 	private JSGLRI parser;
 
-	private List<int[]> setupRegions;
+	private List<OffsetRegion> setupRegions;
 	
 	private boolean isLastSyntaxCorrect;
 
@@ -89,19 +95,19 @@
 			if (descriptor == null) return null;
 			
 			IParseController controller;
-			controller = descriptor.createService(IParseController.class, null);
+			controller = descriptor.createParseController();
 			if (controller instanceof DynamicParseController)
 				controller = ((DynamicParseController) controller).getWrapped();
 			if (controller instanceof SGLRParseController) {
 				SGLRParseController sglrController = (SGLRParseController) controller;
 				controller.initialize(path, project, null);
-				JSGLRI parser = sglrController.getParser(); 
-				JSGLRI result = new JSGLRI(parser.getParseTable(), parser.getStartSymbol(), (SGLRParseController) controller);
+				JSGLRI result = sglrController.getParser(); 
+				//JSGLRI result = new JSGLRI(parser.getParseTable(), parser.getStartSymbol(), (SGLRParseController) controller);
 				result.setTimeout(FRAGMENT_PARSE_TIMEOUT);
 				result.setUseRecovery(true);
 				return result;
 			} else {
-				throw new IllegalStateException("SGLRParseController expected");
+				throw new IllegalStateException("SGLRParseController expected: " + controller.getClass().getName());
 			}
 		} catch (BadDescriptorException e) {
 			Environment.logWarning("Could not load parser for testing language");
@@ -111,13 +117,13 @@
 		return null;
 	}
 
-	public IStrategoTerm parse(ITokenizer oldTokenizer, IStrategoTerm fragment)
+	public IStrategoTerm parse(ITokenizer oldTokenizer, IStrategoTerm fragment, boolean ignoreSetup)
 			throws TokenExpectedException, BadTokenException, SGLRException, IOException {
 		
 		// TODO: use context-independent caching key
 		//       (requires offset adjustments for reuse...)
-		// String fragmentInputCompact = createTestFragmentString(oldTokenizer, fragment, true);
-		String fragmentInput = createTestFragmentString(oldTokenizer, fragment, false);
+		// String fragmentInputCompact = createTestFragmentString(oldTokenizer, fragment, ignoreSetup, true);
+		String fragmentInput = createTestFragmentString(oldTokenizer, fragment, ignoreSetup, false);
 		boolean successExpected = isSuccessExpected(fragment);
 		IStrategoTerm parsed = getCache(successExpected).get(fragmentInput/*Compact*/);
 		if (parsed != null) {
@@ -143,93 +149,95 @@
 		return parsed;
 	}
 
-	private WeakValueHashMap<String, IStrategoTerm> getCache(
-			boolean parseSuccess) {
+	private WeakValueHashMap<String, IStrategoTerm> getCache(boolean parseSuccess) {
 		return parseSuccess ? successParseCache : failParseCache;
 	}
 
 	private String createTestFragmentString(ITokenizer tokenizer, IStrategoTerm term,
-			boolean compactWhitespace) {
+			boolean ignoreSetup, boolean compactWhitespace) {
 		
-		int fragmentStart = getLeftToken(term).getStartOffset();
-		int fragmentEnd = getRightToken(term).getEndOffset();
-		/*
-		int fragmentOffset = getLeftToken(term).getStartOffset();
-		IToken endToken = getRightToken(term);
-		StringBuilder result = new StringBuilder(tokenizer.toString(tokenizer.getTokenAt(0), endToken));
-		for (int i = 0; i < fragmentOffset; i++) {
-			switch (result.charAt(i)) {
-				case ' ': case '\t': case '\r': case '\n':
-					break;
-				default:
-					result.setCharAt(i, ' ');
-			}
-		}
-		*/
+		IStrategoTerm fragmentHead = term.getSubterm(1);
+		IStrategoTerm fragmentTail = term.getSubterm(2);
+		int fragmentStart = getLeftToken(fragmentHead).getStartOffset();
+		int fragmentEnd = getRightToken(fragmentTail).getEndOffset();
 		String input = tokenizer.getInput();
 		StringBuilder result = new StringBuilder(
-			compactWhitespace ? input.length() + 16
-			                  : input.length());
+			compactWhitespace ? input.length() + 16 : input.length());
 		
 		boolean addedFragment = false;
 		int index = 0;
 		
-		for (int[] setupRegion : setupRegions) {
-			int setupStart = setupRegion[0];
-			int setupEnd = setupRegion[1];
-			if (!addedFragment && setupStart >= fragmentStart) {
-				addWhitespace(input, index, fragmentStart - 1, result);
-				result.append(input, fragmentStart, fragmentEnd + EXCLUSIVE);
-				index = fragmentEnd + 1;
-				addedFragment = true;
-			}
-			if (setupStart != fragmentStart) { // fragment is setup region
-				addWhitespace(input, index, setupStart - 1, result);
-				result.append(input, setupStart, setupEnd + EXCLUSIVE);
-				index = setupEnd + 1;
+		if (!ignoreSetup) {
+			for (OffsetRegion setupRegion : setupRegions) {
+				int setupStart = setupRegion.startOffset;
+				int setupEnd = setupRegion.endOffset;
+				if (!addedFragment && setupStart >= fragmentStart) {
+					addWhitespace(input, index, fragmentStart - 1, result);
+					appendFragment(fragmentHead, input, result);
+					appendFragment(fragmentTail, input, result);
+					index = fragmentEnd + 1;
+					addedFragment = true;
+				}
+				if (fragmentStart != setupStart) { // only if fragment != setup region
+					addWhitespace(input, index, setupStart - 1, result);
+					if (setupEnd >= index) {
+						result.append(input, max(setupStart, index), setupEnd + EXCLUSIVE);
+						index = setupEnd + 1;
+					}
+				}
 			}
 		}
 		
 		if (!addedFragment) {
 			addWhitespace(input, index, fragmentStart - 1, result);
-			result.append(input, fragmentStart, fragmentEnd + EXCLUSIVE);
+			appendFragment(fragmentHead, input, result);
+			appendFragment(fragmentTail, input, result);
 			index = fragmentEnd + 1;
 		}
 		
 		addWhitespace(input, index, input.length() - 1, result);
 		
-		/*
-		for (IToken token : tokenizer) {
-			int length = token.getLength();
-			if (length == 0) {
-				// skip
-			} else if (token.getKind() == IToken.TK_STRING
-				&& ((token.getStartOffset() >= fragmentStart && token.getEndOffset() <= fragmentEnd)
-					|| isSetupToken(token))) {
-				result.append(token);
-			} else if (!compactWhitespace) {
-				for (int c = 0; c < length; c++)
-					result.append(token.charAt(c) == '\n' ? '\n' : ' ');
-			}
-		}
-		*/
 		assert result.length() == input.length();
 		return result.toString(); 
 	}
 
+	private void appendFragment(IStrategoTerm term, String input, StringBuilder output) {
+		IToken left = getLeftToken(term);
+		IToken right = getRightToken(term);
+		if (tryGetConstructor(term) == QUOTEPART_1) {
+			output.append(input, left.getStartOffset(), right.getEndOffset() + EXCLUSIVE);
+		} else if (isTermString(term)) {
+			// Brackets: treat as whitespace
+			assert asJavaString(term).length() <= 4 : "Bracket expected: " + term;
+			addWhitespace(input, left.getStartOffset(), right.getEndOffset(), output);
+		} else {
+			// Other: recurse
+			for (int i = 0; i < term.getSubtermCount(); i++) {
+				appendFragment(term.getSubterm(i), input, output);
+			}
+		}
+	}
+
 	private static void addWhitespace(String input, int startOffset, int endOffset, StringBuilder output) {
 		for (int i = startOffset; i <= endOffset; i++)
 			output.append(input.charAt(i) == '\n' ? '\n' : ' ');
 	}
 	
-	private List<int[]> getSetupRegions(IStrategoTerm ast) {
-		final List<int[]> results = new ArrayList<int[]>();
+	private List<OffsetRegion> getSetupRegions(IStrategoTerm ast) {
+		final List<OffsetRegion> results = new ArrayList<OffsetRegion>();
 		new TermVisitor() {
 			public void preVisit(IStrategoTerm term) {
 				if (tryGetConstructor(term) == SETUP_3) {
-					IStrategoTerm input = term.getSubterm(2).getSubterm(1);
-					int[] region = { getLeftToken(input).getStartOffset(), getRightToken(input).getEndOffset() };
-					results.add(region);
+					new TermVisitor() {
+						public final void preVisit(IStrategoTerm term) {
+							if (tryGetConstructor(term) == QUOTEPART_1) {
+								term = term.getSubterm(0);
+								results.add(new OffsetRegion(
+									getLeftToken(term).getStartOffset(),
+									getRightToken(term).getEndOffset()));
+							}
+						}
+					}.visit(term);
 				}
 			}
 		}.visit(ast);
@@ -251,7 +259,7 @@
 	*/
 	
 	private boolean isSuccessExpected(IStrategoTerm fragment) {
-		IStrategoAppl test = (IStrategoAppl) getParent(getParent(fragment));
+		IStrategoAppl test = (IStrategoAppl) getParent(getParent(getParent(fragment)));
 		if (test.getConstructor() == SETUP_3) return true;
 		IStrategoList expectations = listAt(test, test.getSubtermCount() - 1);
 		for (IStrategoTerm expectation : StrategoListIterator.iterable(expectations)) {
@@ -271,4 +279,21 @@
 			((Token) token).setError(null);
 		}
 	}
+	
+	/**
+	 * An (inclusive) offset tuple.
+	 * 
+	 * @author Lennart Kats <lennart add lclnet.nl>
+	 */
+	static class OffsetRegion {
+		int startOffset, endOffset;
+		OffsetRegion(int startOffset, int endOffset) {
+			this.startOffset = startOffset;
+			this.endOffset = endOffset;
+		}
+		@Override
+		public String toString() {
+			return "(" + startOffset + "," + endOffset + ")";
+		}
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/Retokenizer.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -2,24 +2,35 @@
 
 import static org.spoofax.jsglr.client.imploder.AbstractTokenizer.findRightMostLayoutToken;
 import static org.spoofax.jsglr.client.imploder.AbstractTokenizer.getTokenAfter;
+import static org.spoofax.jsglr.client.imploder.IToken.TK_ESCAPE_OPERATOR;
 import static org.spoofax.jsglr.client.imploder.IToken.TK_LAYOUT;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getSort;
+import static org.spoofax.terms.Term.isTermString;
+import static org.spoofax.terms.Term.tryGetConstructor;
+import static org.spoofax.terms.attachments.ParentAttachment.getParent;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.jsglr.client.imploder.Token;
 import org.spoofax.jsglr.client.imploder.Tokenizer;
+import org.spoofax.terms.TermVisitor;
+import org.strategoxt.imp.runtime.Environment;
 
 /** 
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class Retokenizer {
 	
+	private static final IStrategoConstructor QUOTEPART_1 =
+		Environment.getTermFactory().makeConstructor("QuotePart", 1);
+	
 	private final Tokenizer oldTokenizer;
 	
 	private final Tokenizer newTokenizer;
@@ -59,7 +70,7 @@
 		copyTokensUpToIndex(oldTokenizer.getTokenCount() - 1);
 	}
 	
-	public void copyTokensFromFragment(IStrategoTerm fragment, IStrategoTerm parsedFragment, int startOffset, int endOffset) {
+	public void copyTokensFromFragment(IStrategoTerm fragmentHead, IStrategoTerm fragmentTail, IStrategoTerm parsedFragment, int startOffset, int endOffset) {
 		Tokenizer fragmentTokenizer = (Tokenizer) ImploderAttachment.getTokenizer(parsedFragment);
 		IToken startToken, endToken;
 		if (fragmentTokenizer.getStartOffset() <= startOffset) {
@@ -85,7 +96,31 @@
 		ImploderAttachment.putImploderAttachment(parsedFragment, parsedFragment.isList(), old.getSort(), startToken, endToken);
 		
 		// Reassign new tokens to unparsed fragment
-		ImploderAttachment.putImploderAttachment(fragment, fragment.isList(), getSort(fragment), startToken, endToken);
+		recolorMarkingBrackets(fragmentTail, fragmentTokenizer);
+		assignTokens(fragmentHead, startToken, endToken);
+		assignTokens(fragmentTail, startToken, endToken);
+	}
+
+	private void assignTokens(IStrategoTerm tree, final IToken startToken, final IToken endToken) {
+		// HACK: asssign the same tokens to all tree nodes in fragments
+		//       (breaks some editor services)
+		new TermVisitor() {
+			public void preVisit(IStrategoTerm term) {
+				ImploderAttachment.putImploderAttachment(term, false, getSort(term), startToken, endToken);
+			}
+		}.visit(tree);
+	}
+
+	private void recolorMarkingBrackets(IStrategoTerm term, final ITokenizer tokenizer) {
+		new TermVisitor() {
+			public void preVisit(IStrategoTerm term) {
+				if (isTermString(term) && tryGetConstructor(getParent(term)) != QUOTEPART_1) {
+					IToken token1 = getLeftToken(term);
+					IToken token2 = tokenizer.getTokenAtOffset(token1.getStartOffset());
+					token2.setKind(TK_ESCAPE_OPERATOR);
+				}
+			}
+		}.visit(term);
 	}
 	
 	private void moveTokenErrorsToRange(Tokenizer tokenizer, int startIndex, int endIndex) {

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SelectionFetcher.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -0,0 +1,57 @@
+package org.strategoxt.imp.testing;
+
+import static org.spoofax.jsglr.client.imploder.AbstractTokenizer.getTokenAfter;
+import static org.spoofax.jsglr.client.imploder.AbstractTokenizer.getTokenBefore;
+import static org.spoofax.jsglr.client.imploder.IToken.TK_ESCAPE_OPERATOR;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getRightToken;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.terms.TermVisitor;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * Lamely-named class for fetching selections in test
+ * fragment (e.g., foo in [[ module [[foo]] ]]). 
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SelectionFetcher {
+	
+	public IStrategoList fetch(IStrategoTerm parsedFragment) {
+		final List<IStrategoTerm> results = new ArrayList<IStrategoTerm>();
+		new TermVisitor() {
+			public void preVisit(IStrategoTerm term) {
+				IToken left = getTokenBefore(getLeftToken(term));
+				IToken right = getTokenAfter(getRightToken(term));
+				if (isOpenQuote(left) && isCloseQuote(right)) {
+					results.add(term);
+				}
+			}
+		}.visit(parsedFragment);
+		return Environment.getTermFactory().makeList(results);
+	}
+
+	private boolean isOpenQuote(IToken left) {
+		return left != null && left.getKind() == TK_ESCAPE_OPERATOR && isQuoteOpenText(left.toString());
+	}
+
+	private boolean isCloseQuote(IToken right) {
+		return right != null && right.getKind() == TK_ESCAPE_OPERATOR && !isQuoteOpenText(right.toString());
+	}
+
+	private boolean isQuoteOpenText(String contents) {
+		// HACK: inspect string contents to find out if it's an open or close quote
+		if (contents.contains("[")) {
+			return true;
+		} else {
+			assert contents.contains("]");
+			return false;
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingJSGLRI.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -38,8 +38,11 @@
 	
 	private static final int PARSE_TIMEOUT = 20 * 1000;
 	
-	private static final IStrategoConstructor STRING_3 =
-		Environment.getTermFactory().makeConstructor("string", 3);
+	private static final IStrategoConstructor INPUT_4 =
+		Environment.getTermFactory().makeConstructor("Input", 4);
+	
+	private static final IStrategoConstructor OUTPUT_4 =
+		Environment.getTermFactory().makeConstructor("Output", 4);
 	
 	private static final IStrategoConstructor ERROR_1 =
 		Environment.getTermFactory().makeConstructor("Error", 1);
@@ -48,6 +51,8 @@
 		Environment.getTermFactory().makeConstructor("Language", 1);
 	
 	private final FragmentParser fragmentParser = new FragmentParser();
+	
+	private final SelectionFetcher selections = new SelectionFetcher();
 
 	public SpoofaxTestingJSGLRI(JSGLRI template) {
 		super(template.getParseTable(), template.getStartSymbol(), template.getController());
@@ -77,18 +82,21 @@
 		IStrategoTerm result = new TermTransformer(factory, true) {
 			@Override
 			public IStrategoTerm preTransform(IStrategoTerm term) {
-				if (tryGetConstructor(term) == STRING_3) {
-					IStrategoTerm fragment = termAt(term, 1);
-					retokenizer.copyTokensUpToIndex(getLeftToken(fragment).getIndex() - 1);
+				IStrategoConstructor cons = tryGetConstructor(term);
+				if (cons == INPUT_4 || cons == OUTPUT_4) {
+					IStrategoTerm fragmentHead = termAt(term, 1);
+					IStrategoTerm fragmentTail = termAt(term, 2);
+					retokenizer.copyTokensUpToIndex(getLeftToken(fragmentHead).getIndex() - 1);
 					try {
-						IStrategoTerm parsed = testedParser.parse(oldTokenizer, fragment);
-						int oldFragmentEndIndex = getRightToken(fragment).getIndex();
-						retokenizer.copyTokensFromFragment(fragment, parsed,
-								getLeftToken(fragment).getStartOffset(), getRightToken(fragment).getEndOffset());
+						IStrategoTerm parsed = testedParser.parse(oldTokenizer, term, cons == OUTPUT_4);
+						int oldFragmentEndIndex = getRightToken(fragmentTail).getIndex();
+						retokenizer.copyTokensFromFragment(fragmentHead, fragmentTail, parsed,
+								getLeftToken(fragmentHead).getStartOffset(), getRightToken(fragmentTail).getEndOffset());
 						if (!testedParser.isLastSyntaxCorrect())
 							parsed = factory.makeAppl(ERROR_1, parsed);
 						ImploderAttachment implodement = ImploderAttachment.get(term);
-						term = factory.annotateTerm(term, nonParentFactory.makeList(parsed));
+						IStrategoList selected = selections.fetch(parsed);
+						term = factory.annotateTerm(term, nonParentFactory.makeListCons(parsed, selected));
 						term.putAttachment(implodement.clone());
 						retokenizer.skipTokensUpToIndex(oldFragmentEndIndex);
 					} catch (IOException e) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseController.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseController.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -9,6 +9,7 @@
 	
 	@Override
 	public IParseController getWrapped() {
+		getDescriptor().setAttachmentProvider(SpoofaxTestingParseController.class);
 		IParseController result = super.getWrapped();
 		if (result instanceof SGLRParseController) {
 			JSGLRI parser = ((SGLRParseController) result).getParser();

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/SpoofaxTestingParseControllerGenerated.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -33,7 +33,12 @@
     return descriptor;
   }
 
-  private static void createDescriptor()
+  protected static synchronized void setDescriptor(Descriptor descriptor)
+  { 
+    SpoofaxTestingParseControllerGenerated.descriptor = descriptor;
+  }
+
+  protected static void createDescriptor()
   { 
     try
     { 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/lib/editor-common.generated.str	Tue Mar 29 20:04:04 2011	(r22444)
@@ -143,7 +143,7 @@
     ['*' | c*] -> <ltrim(' ' + '\t' + '\n' + '\r')> c*
   
   origin-track-forced(s) =
-    !Some(<id>); all(s); ?Some(<id>)
+    ![<id>]; all(s); ?[<id>]
 
 strategies
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Tue Mar 29 20:04:04 2011	(r22444)
@@ -85,30 +85,33 @@
     INT "warning"     -> Result    {cons("Warning")}
     INT "warnings"    -> Result    {cons("Warnings")}
 
-    "resolves" ResolveID                       -> Result {cons("Resolves")}
-    "resolves" ResolveID "to" ResolveID        -> Result {cons("ResolvesTo")}
-    "completes" CompletionID                   -> Result {cons("Completes")}
-    "completes" CompletionID "to" CompletionID -> Result {cons("CompletesTo")}
-    
-    %% TODO: implement the following:
-    TestStratego                               -> Result {cons("Stratego")} 
-    "builds" ID                                -> Result {cons("Builds")}
-    "builds" ID "to" ATerm                     -> Result {cons("BuildsTo")}
-    %%"builds" ID "to" Output                  -> Result {cons("BuildsToTree")}
-    "builds" ID "to" "file" PathName           -> Result {cons("BuildsToFile")}
-    "runs" ID "using" STRING                   -> Result {cons("Runs")}
-    "runs" ID "using" STRING "to" ATerm        -> Result {cons("RunsTo")}
-    %%"runs" ID "using" STRING "to" Output     -> Result {cons("RunsToTree")}
-    "runs" ID "using" STRING "to" "file" PathName -> Result {cons("RunsToFile")}
-    %% TODO: hover help, refactoring, run, builds to with an 'Output' concrete syntax tree
-
-    RegexExp          -> Constraint
-
-    ID "#" INT -> ResolveID {cons("Numbered")}
-    ID         -> ResolveID {cons("Unnumbered")}
+    "resolves"                                 -> Result {cons("ResolvesUnnumbered")}
+    "resolves" Numbered                        -> Result {cons("Resolves")}
+    "resolves" Numbered "to" Numbered          -> Result {cons("ResolvesTo")}
+    "completes" OptNumbered                    -> Result {cons("Completes")}
+    "completes" OptNumbered "to" ID            -> Result {cons("CompletesTo")}
+    
+    TestStratego                          -> Result {cons("Stratego")} 
+    "builds" ID Pattern                   -> Result {cons("Builds")}
+    "runs" ID "(" STRING ")" Pattern      -> Result {cons("Runs")}
+    "refactors" ID "(" STRING ")" Pattern -> Result {cons("Refactors")}
+    
+                         -> Pattern {cons("wildcard")}
+    "to" "file" PathName -> Pattern {cons("File")}
+    "to" Output          -> Pattern {cons("Fragment")}
+    "to" ATerm           -> Pattern {cons("ATerm")}
+
+    RegexExp          -> Result
+
+    "#" INT  -> Numbered {cons("Numbered")}
+    Numbered -> OptNumbered
+             -> OptNumbered {cons("Unnumbered")}
+    
+    %%ID "#" INT -> ResolveID {cons("Numbered")}
+    %%ID         -> ResolveID {cons("Unnumbered")}
 
-    ID "#" INT -> CompletionID {cons("Numbered")}
-    ID         -> CompletionID {cons("Unchecked")}
+    %%ID "#" INT -> CompletionID {cons("Numbered")}
+    %%ID         -> CompletionID {cons("Unchecked")}
 
     %% Handle a couple of lousy recoveries
     "test"  -> ID    {reject}
@@ -147,73 +150,69 @@
 
   sorts
   syntax
+      
+    %% magic
 
-  %% Too close to Stratego
-  %%  <DQuote1-LEX> <InputChars1-LEX> <DQuote1-LEX> -> <Input-CF> {cons("string")}
-    <DQuote2-LEX> <InputChars2-LEX> <DQuote2-LEX> -> <Input-CF> {cons("string")}
-    <DQuote3-LEX> <InputChars3-LEX> <DQuote3-LEX> -> <Input-CF> {cons("string")}
-    <DQuote4-LEX> <InputChars4-LEX> <DQuote4-LEX> -> <Input-CF> {cons("string")}
-
-  %% Too close to Stratego
-  %%<Bracket1-LEX> <InputChars21-LEX> <CloseBracket1-LEX> -> <Input-CF> {cons("string")}
-    <Bracket2-LEX> <InputChars22-LEX> <CloseBracket2-LEX> -> <Input-CF> {cons("string")}
-    <Bracket3-LEX> <InputChars23-LEX> <CloseBracket3-LEX> -> <Input-CF> {cons("string")}
-    <Bracket4-LEX> <InputChars24-LEX> <CloseBracket4-LEX> -> <Input-CF> {cons("string")}
-
-  %% Too close to Stratego
-  %%  <DQuote1-LEX> <InputChars1-LEX> <DQuote1-LEX> -> <Output-CF> {cons("string")}
-    <DQuote2-LEX> <InputChars2-LEX> <DQuote2-LEX> -> <Output-CF> {cons("string")}
-    <DQuote3-LEX> <InputChars3-LEX> <DQuote3-LEX> -> <Output-CF> {cons("string")}
-    <DQuote4-LEX> <InputChars4-LEX> <DQuote4-LEX> -> <Output-CF> {cons("string")}
-
-  %% Too close to Stratego
-  %%<Bracket1-LEX> <InputChars21-LEX> <CloseBracket1-LEX> -> <Output-CF> {cons("string")}
-    <Bracket2-LEX> <InputChars22-LEX> <CloseBracket2-LEX> -> <Output-CF> {cons("string")}
-    <Bracket3-LEX> <InputChars23-LEX> <CloseBracket3-LEX> -> <Output-CF> {cons("string")}
-    <Bracket4-LEX> <InputChars24-LEX> <CloseBracket4-LEX> -> <Output-CF> {cons("string")}
+    <Bracket2-LEX> <StringPart2-CF> <TailParts2-CF> <CBracket2-LEX> -> <Input-CF> {cons("Input")}
+    <Bracket3-LEX> <StringPart3-CF> <TailParts3-CF> <CBracket3-LEX> -> <Input-CF> {cons("Input")}
+    <Bracket4-LEX> <StringPart4-CF> <TailParts4-CF> <CBracket4-LEX> -> <Input-CF> {cons("Input")}
+
+    <Bracket2-LEX> <StringPart2-CF> <TailParts2-CF> <TailParts2-CF> -> <Output-CF> {cons("Output")}
+    <Bracket3-LEX> <StringPart3-CF> <TailParts3-CF> <TailParts3-CF> -> <Output-CF> {cons("Output")}
+    <Bracket4-LEX> <StringPart4-CF> <TailParts4-CF> <TailParts4-CF> -> <Output-CF> {cons("Output")}
+    
+                                                      -> <TailParts2-CF> {cons("Done")}
+    <MarkedPart2-CF> <StringPart2-CF> <TailParts2-CF> -> <TailParts2-CF> {cons("More")}
+                                                      -> <TailParts3-CF> {cons("Done")}
+    <MarkedPart3-CF> <StringPart3-CF> <TailParts3-CF> -> <TailParts3-CF> {cons("More")}
+                                                      -> <TailParts4-CF> {cons("Done")}
+    <MarkedPart4-CF> <StringPart4-CF> <TailParts4-CF> -> <TailParts4-CF> {cons("More")}
+    
+    <NFBracket2-LEX> <StringPart2-CF> <NFCBracket2-LEX> -> <MarkedPart2-CF> {cons("Marked")}
+    <NFBracket3-LEX> <StringPart3-CF> <NFCBracket3-LEX> -> <MarkedPart3-CF> {cons("Marked")}
+    <NFBracket4-LEX> <StringPart4-CF> <NFCBracket4-LEX> -> <MarkedPart4-CF> {cons("Marked")}
+    
+    <InputChars2-LEX> -> <StringPart2-CF> {cons("QuotePart")}
+    <InputChars3-LEX> -> <StringPart3-CF> {cons("QuotePart")}
+    <InputChars4-LEX> -> <StringPart4-CF> {cons("QuotePart")}
 
-  sorts Name Description
   context-free syntax
     EOLString -> Description {cons("description")}
 
-  sorts Sort EOLString
   lexical syntax
 
     (~[\n\[\"]|EOLQuote1|EOLQuote2)* -> EOLString
     [\"]                             -> EOLQuote1
     [\[]                             -> EOLQuote2
 
-  sorts
-    InputChars1 InputChars2 InputChars3 InputChars4
-    DQuote1 DQuote2 DQuote3
-    InputChars21 InputChars22 InputChars23 InputChars24
-    Bracket1 Bracket2 Bracket3
-
   lexical syntax
-    ~[\"]* -> InputChars1
-    (~[\"]  | DQuote1)*                      -> InputChars2
-    (~[\"]  | DQuote1 | DQuote2)*            -> InputChars3
-    (~[\"]  | DQuote1 | DQuote2 | DQuote3 )* -> InputChars4
-
-    "\""       -> DQuote1
-    "\"\""     -> DQuote2
-    "\"\"\""   -> DQuote3
-    "\"\"\"\"" -> DQuote4
-
-    ~[\[]* -> InputChars21
-    (~[\[]  | Bracket1)*                        -> InputChars22
-    (~[\[]  | Bracket1 | Bracket2)*             -> InputChars23
-    (~[\[]  | Bracket1 | Bracket2 | Bracket3 )* -> InputChars24
+
+    (~[\[\]]  | Bracket1 | CBracket1)*                         -> InputChars2
+    (~[\[\]]  | Bracket1 | Bracket2 | CBracket1 | CBracket2)*  -> InputChars3
+    (~[\[\]]  | Bracket1 | Bracket2 | Bracket3 
+              | CBracket1 | CBracket2 | CBracket3)*            -> InputChars4
 
     "["    -> Bracket1
     "[["   -> Bracket2
     "[[["  -> Bracket3
     "[[[[" -> Bracket4
 
-    "]"    -> CloseBracket1
-    "]]"   -> CloseBracket2
-    "]]]"  -> CloseBracket3
-    "]]]]" -> CloseBracket4
+    "]"    -> CBracket1
+    "]]"   -> CBracket2
+    "]]]"  -> CBracket3
+    "]]]]" -> CBracket4
+
+    %% non-follow-restricted:
+
+    "["    -> NFBracket1
+    "[["   -> NFBracket2
+    "[[["  -> NFBracket3
+    "[[[[" -> NFBracket4
+    
+    "]"    -> NFCBracket1
+    "]]"   -> NFCBracket2
+    "]]]"  -> NFCBracket3
+    "]]]]" -> NFCBracket4
 
   sorts PathName
   lexical syntax
@@ -223,14 +222,16 @@
     EOLString -/- ~[\n\[\"]
     EOLQuote1 -/- [\"]
     EOLQuote2 -/- [\[]
+    
+    %% InputChars2 -/- ~[\[\]]
 
-    DQuote1   -/- [\"]
-    DQuote2   -/- [\"]
-    DQuote3   -/- [\"]
-
-    Bracket1   -/- [\[]
-    Bracket2   -/- [\[]
-    Bracket3   -/- [\[]
+    Bracket1   -/- [\[].~[\[]
+    Bracket2   -/- [\[].~[\[] %% allow [[[[x]]  ]]
+    Bracket3   -/- [\[].~[\[]
+
+    CBracket1   -/- [\]]
+    CBracket2   -/- [\]]
+    CBracket3   -/- [\]]
 
   sorts ShortCom LongCom CommChar Asterisk Eof
   lexical syntax

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-complete.str	Tue Mar 29 20:04:04 2011	(r22444)
@@ -17,14 +17,14 @@
 
 rules
 
-  check-expectation(|ast, messages) :
-    Completes(x) -> <check-expectation(|ast, messages)> CompletesTo(x, wildcard())
+  check-expectation(|ast, selections, messages) :
+    Completes(x) -> <check-expectation(|ast, selections, messages)> CompletesTo(x, wildcard())
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     CompletesTo(from, to) -> error
     where
-      [from']   := <find-matching-ids(|ast)> from;
-      [to']     := <find-matching-ids(|ast)> to
+      from' := <resolve-selection(|selections)> from;
+      to'   := <resolve-selection(|selections)> to
     with
       from''    := <get-completion-input-term> from';
       resolvers := <spt-get-content-proposers>;
@@ -58,8 +58,5 @@
     where
       !expected => wildcard()
     <+
-      !expected => Unchecked(x);
-      <oncetd(?x)> result
-    <+
-      oncetd(origin-equal(|expected))
+      <oncetd(strip-annos; ?expeceted)> result
       
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check-resolve.str	Tue Mar 29 20:04:04 2011	(r22444)
@@ -10,50 +10,41 @@
   check
 
 rules
+
+  check-expectation(|ast, selections, messages) :
+    ResolvesTo(_, _) -> $[No reference resolving defined for [<Language>]]
+    where
+      spt-get-reference-resolvers => []
   
   check-error:
-    Test(_, _, input{ast}, expectations) -> error*
+    Test(_, _, input{a*}, expectations) -> error*
     where
-      resolve* := <collect-all(?Unnumbered(_) + ?Numbered(_, _), conc)> expectations;
-      error*   := <filter(add-matching-ids(|ast); check-error-resolve)> resolve*
-  
-  check-error-resolve:
-    (x, []) -> (x, $[Identifier not found in input])
-  
-  check-error-resolve:
-    (x, [_, _ | _]) -> (x, $[Add a #number to indicate the occurrence to use])
-  
-  add-matching-ids(|ast):
-    expected -> (expected, <find-matching-ids(|ast)> expected)
-  
-  find-matching-ids(|ast):
-    Unnumbered(x) -> <collect-all(?x, conc)> ast
+      !a* => [ast | selections];
+      reference* := <collect-all(?Numbered(_) + ?Unnumbered(), conc)> expectations;
+      error*     := <filter(check-selection(|selections))> reference*
   
-  find-matching-ids(|ast):
-    Unchecked(x) -> [x]
+  check-selection(|selections):
+    Numbered(n) -> (n, $[Identifier not found in input])
+    where
+      not(resolve-selection(|selections))
   
-  find-matching-ids(|ast):
-    Numbered(x, nr) -> results'
-    with
-      results  := <collect-all(?x, conc)> ast;
-      results' := <![<index> (<string-to-int> nr, results)] <+ ![]>
+  resolve-selection(|selections):
+    Numbered(n) -> selection
+    where
+      n'        := <string-to-int> n;
+      selection := <index(|n')> selections
   
-  find-matching-ids(|ast):
-    wildcard() -> wildcard()
+  resolve-selection(|selections):
+    Unnumbered() -> <resolve-selection(|selections)> Numbered("1")
   
-  check-expectation(|ast, messages) :
-    Resolves(x) -> <check-expectation(|ast, messages)> ResolvesTo(x, wildcard())
-
-  check-expectation(|ast, messages) :
-    ResolvesTo(_, _) -> $[No reference resolving defined for [<Language>]]
-    where
-      spt-get-reference-resolvers => []
+  check-expectation(|ast, selections, messages) :
+    Resolves(x) -> <check-expectation(|ast, selections, messages)> ResolvesTo(x, wildcard())
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     ResolvesTo(from, to) -> error
     where
-      [from'] := <find-matching-ids(|ast)> from;
-      [to']   := <find-matching-ids(|ast)> to
+      from' := <resolve-selection(|selections)> from;
+      to'   := <resolve-selection(|selections)> to
     with
       from''    := <get-service-input-term> from';
       resolvers := <spt-get-reference-resolvers>;

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/check.str	Tue Mar 29 20:04:04 2011	(r22444)
@@ -32,7 +32,7 @@
   check-warning:
     Test(_,description(d), i, expectations) -> (d, warnings)
     where
-      input := <Test-get-input <+ !FailsParsing()>i
+      (input, selections) := <Test-get-input <+ !(FailsParsing(), [])>i
     ; if not(<?[_ | _]; all(is-parse-only-test)> expectations) then
         // TODO: set starting directory to project path using invoke-plugin-strategy
         plugin-strategy-invoke(|<Language>, "editor-init")
@@ -43,9 +43,9 @@
         messages' := ([], [], [])
       end
     ; if !expectations => [] then
-        warnings := <filter(check-expectation(|input, messages'))> [Success()]
+        warnings := <filter(check-expectation(|input, selections, messages'))> [Success()]
       else
-        warnings := <filter(check-expectation(|input, messages'))> expectations
+        warnings := <filter(check-expectation(|input, selections, messages'))> expectations
       end
     ; not([])
 
@@ -60,21 +60,24 @@
   external plugin-strategy-invoke(|language, name)
   
   Test-get-input :
-    file(f) -> <resolve-path(|<current-path>) ; read-text-file ; spt-parse-string>f
+    file(f) -> (<resolve-path(|<current-path>) ; read-text-file ; spt-parse-string>f, [])
     
   Test-get-input :
-    string(_,s,_){a*} -> parsed'
+    Input(_,_,_,_){a*} -> (parsed', selections)
     where
-      !a* => [parsed];
+      !a* => [parsed | selections];
       if !parsed => Error(_) then
         parsed' := FailsParsing()
       else
         parsed' := parsed
       end
     <+
-      parsed' := <spt-parse-string> s
+      // UNDONE: parsing from Stratego is no longer supported atm
+      // parsed' := <spt-parse-string> s
+      warn(|"No ast annotation found")
+    ; parsed' := FailsParsing()
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     <not(Fails + FailsParsing)> -> parse-failed
     where
       if !ast => FailsParsing() + !ast => error(_, _) then
@@ -86,36 +89,36 @@
   extract-parse-error =
     ?error(_, [localized(<id>, _) | _])
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     <not(Fails)> -> $[Observer fails: [details]]
     where
       !messages => Fail(details)
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     _ -> $[Observer error: [details]]
     where
       !messages => Error(details)
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     FailsParsing() -> $[Failure expected]
     where
       not(!ast => FailsParsing());
       not(!ast => error(_, _))
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     pattern(p) -> $[Does not match pattern: [<write-to-string> ast]]
     where
       exploded := <explode-aterm> ast
     ; not(<aterm-eq> (exploded, <aterm-appl0-to-fun> p))
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     file(f) -> $[Does not match pattern: [<write-to-string> ast]]
     where
       exploded := <explode-aterm> ast
     ; p := <resolve-path(|<current-path>); ReadFromFile; explode-aterm> f
     ; not(<aterm-eq> (exploded, <aterm-appl0-to-fun> p))
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     <not(is-semantic-failure-allowed)> -> $[Unexpected message(s): [<grab-messages> messages]]
     where
       not(!messages => ([], [], _))
@@ -124,48 +127,42 @@
     Fails() + ?Errors(_) + ?Error(_) + ?Warning(_) + ?Warnings(_)
   + ?Completes(_) + ?CompletesTo(_, _)
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     Errors(n) -> $[[n] errors expected: [<grab-errors> messages]]
     where
       !messages => (errors, _, _)
     ; not(<eq> (<length> errors, <string-to-int> n))
 
-  check-expectation(|ast, messages) :
-    Error(n) -> <check-expectation(|ast, messages)> Errors(n)
+  check-expectation(|ast, selections, messages) :
+    Error(n) -> <check-expectation(|ast, selections, messages)> Errors(n)
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     Warnings(n) -> $[[n] warning(s) expected: [<grab-warnings> messages]]
     where
       !messages => ([], warnings, _)
     ; not(<eq> (<length> warnings, <string-to-int> n))
 
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     Warnings(n) -> $[No error(s) expected: [<grab-errors> messages]]
     where
       !messages => ([_ | _], _, _)
 
-  check-expectation(|ast, messages) :
-    Warning(n) -> <check-expectation(|ast, messages)> Warnings(n)
+  check-expectation(|ast, selections, messages) :
+    Warning(n) -> <check-expectation(|ast, selections, messages)> Warnings(n)
 
-  check-expectation(|ast, messages) :
-    Builds(x) -> <check-expectation(|ast, messages)> BuildsTo(x, wildcard())
+  check-expectation(|ast, selections, messages) :
+    Builds(_, _) -> $[Not implemented: [<write-to-string>]]
 
-  check-expectation(|ast, messages) :
-    BuildsTo(_, _) -> $[Not implemented: [<write-to-string>]]
+  check-expectation(|ast, selections, messages) :
+    Runs(_, _, _) -> $[Not implemented: [<write-to-string>]]
 
-  check-expectation(|ast, messages) :
-    BuildsToFile(_, _) -> $[Not implemented: [<write-to-string>]]
+  check-expectation(|ast, selections, messages) :
+    Refactors(_, _, _) -> $[Not implemented: [<write-to-string>]]
 
-  check-expectation(|ast, messages) :
-    Runs(x, y) -> <check-expectation(|ast, messages)> RunsTo(x, y, wildcard())
+  check-expectation(|ast, selections, messages) :
+    Stratego(_) -> $[Not implemented: [<write-to-string>]]
 
-  check-expectation(|ast, messages) :
-    RunsTo(_, _, _) -> $[Not implemented: [<write-to-string>]]
-
-  check-expectation(|ast, messages) :
-    RunsToFile(_, _, _) -> $[Not implemented: [<write-to-string>]]
-
-  check-expectation(|ast, messages) :
+  check-expectation(|ast, selections, messages) :
     VarDecl(_, _) -> $[Not implemented: [<write-to-string>]]
     
   is-parse-only-test =

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/generate.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/generate.str	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/generate.str	Tue Mar 29 20:04:04 2011	(r22444)
@@ -82,14 +82,17 @@
           stmt* := <test-to-java-stmts>tst
 
   to-java-test-decl :
-    Test(_, description(d), string(_,s,_), _) -> 
+    Test(_, description(d), Input(_,s,_,_), _) -> 
       $[  String input = "[s']"; 
           String description = "[d']";
           IStrategoTerm ast = parser.parse(input, description);
       ]
       with 
         d' := <escape-string>d
-      ; s' := <escape-string>s    
+      ; s' := <escape-string> <input-to-string> s    
+
+  input-to-string =
+    with(fail|"Not implemented!")
 
   to-java-test-decl :
     Test(_, description(d), file(f), _) -> 
@@ -161,8 +164,8 @@
     if ?(file(f), position, ast, path, project-path) then
       abs := <resolve-path(|path)>f
     ; if not(file-exists) then
-        if <oncetd(?Test(_, _, _, _) ; oncetd(?file(f)); ?Test(_, _, string(_,s,_), _))>ast then
-          result := <spt-parse-string>s 
+        if <oncetd(?Test(_, _, _, _) ; oncetd(?file(f)); ?Test(_, _, Input(_,s,_,_), _))>ast then
+          result := <spt-parse-string> <input-to-string> s 
         else
           fatal-err-msg(|$[Could not find a string input for generating AST.])  
         end 

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Tue Mar 29 20:04:04 2011	(r22444)
@@ -68,8 +68,9 @@
       filename := <guarantee-extension(|"aterm")> path
   
   editor-hover:
-    (string(_,s,_){ast}, _, _, _, _) -> hover
+    (Input(_, _, _, _){a*}, _, _, _, _) -> hover
     where
+      !a* => [ast | _];
       hover := <spt-pp-aterm ; hover-input-string>ast 
   
   hover-input-string =

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/interpreter/terms/IStrategoTermBuilder.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -22,6 +22,7 @@
     public IStrategoReal makeReal(double d);
     public IStrategoTuple makeTuple(IStrategoTerm... terms);
     public IStrategoString makeString(String s);
+    public IStrategoList makeList();
     public IStrategoList makeList(IStrategoTerm... terms);
     public IStrategoList makeList(Collection<IStrategoTerm> terms);
 

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/AbstractTermFactory.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -17,6 +17,7 @@
 
 public abstract class AbstractTermFactory implements ITermFactory {
 
+	@Deprecated
 	public static final IStrategoList EMPTY_LIST = new StrategoList(null, null, null, IStrategoTerm.MAXIMALLY_SHARED);
 
     public static final IStrategoTerm[] EMPTY = new IStrategoTerm[0];
@@ -100,6 +101,10 @@
         return makeList(terms, null);
     }
 
+    public IStrategoList makeList() {
+        return makeList(EMPTY, null);
+    }
+
     public IStrategoList makeList(Collection<IStrategoTerm> terms) {
         return makeList(terms.toArray(new IStrategoTerm[terms.size()]));
     }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Tue Mar 29 19:47:22 2011	(r22443)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/TermFactory.java	Tue Mar 29 20:04:04 2011	(r22444)
@@ -90,7 +90,8 @@
     	return results;
     }
     
-    protected IStrategoList makeList() {
+    @Override
+	public IStrategoList makeList() {
     	return isTermSharingAllowed() ? EMPTY_LIST : new StrategoList(null, null, null, defaultStorageType);
     }
     

From seba at informatik.uni-marburg.de  Tue Mar 29 22:10:13 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 29 Mar 2011 20:10:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22445 -
	sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver
Message-ID: <20110329201013.81840CC104@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Tue Mar 29 20:10:12 2011
New Revision: 22445
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22445&sc=1

Log:
signal compilation failure

Modified:
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
   sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/DriverCLI.java

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Tue Mar 29 20:04:04 2011	(r22444)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/Driver.java	Tue Mar 29 20:10:12 2011	(r22445)
@@ -958,7 +958,8 @@
       
       for (URI source : allInputFiles) {
         Result res = compile(source);
-        DriverCLI.processResultCLI(res, source.getPath(), new File(".").getAbsolutePath());
+        if (!DriverCLI.processResultCLI(res, source.getPath(), new File(".").getAbsolutePath()))
+          throw new RuntimeException("compilation of " + source.getPath() + " failed");
       }
       
     } catch (Exception e) {

Modified: sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/DriverCLI.java
==============================================================================
--- sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/DriverCLI.java	Tue Mar 29 20:04:04 2011	(r22444)
+++ sugarj/branches/SugarJ-editor-services/compiler/org/sugarj/driver/DriverCLI.java	Tue Mar 29 20:10:12 2011	(r22445)
@@ -30,6 +30,7 @@
 /**
  * @author Sebastian Erdweg <seba at informatik uni-marburg de>
  *
+ * large chunk copied and adapted from org.strategoxt.imp.runtime.parser.ParseErrorHandler
  */
 public class DriverCLI {
   
@@ -61,12 +62,15 @@
     }
   }
   
-  static void processResultCLI(Result res, String file, String project) throws IOException {
+  static boolean processResultCLI(Result res, String file, String project) throws IOException {
     log.log("");
     
+    boolean success = res.getCollectedErrors().isEmpty();
+    
     for (BadTokenException e : res.getCollectedErrors())
       log.log("syntax error: line " + e.getLineNumber() + " column " + e.getColumnNumber() + ": " + e.getMessage());
     
+    
     IToken tok = ImploderAttachment.getRightToken(res.getSugaredSyntaxTree());
     
     IStrategoTerm tuple = ATermCommands.makeTuple(
@@ -76,9 +80,11 @@
         ATermCommands.makeString(project, tok));
     
     List<Error> errors = gatherNonFatalErrors(res.getSugaredSyntaxTree());
+    success &= errors.isEmpty();
     
     for (Error error : errors)
       log.log("error: line " + error.lineStart + " column " + error.columnStart + " to line " + error.lineEnd + " column " + error.columEnd + ":\n  " + error.msg);
+
     
     IStrategoTerm errorTree = STRCommands.assimilate("sugarj-analyze", res.getDesugaringsFile(), tuple, new HybridInterpreter());
     
@@ -89,6 +95,7 @@
     IStrategoList warnings = Tools.termAt(errorTree, 2);
     IStrategoList notes = Tools.termAt(errorTree, 3);
     
+    success &= semErrors.isEmpty() && warnings.isEmpty() && notes.isEmpty();
     
     for (IStrategoTerm error : semErrors.getAllSubterms())
       if (error.getTermType() == IStrategoTerm.LIST)
@@ -109,7 +116,9 @@
       else
         reportCLI(note, "note");
     
-    System.out.println(ATermCommands.atermToFile(errorTree));
+    // System.out.println(ATermCommands.atermToFile(errorTree));
+    
+    return success;
   }
   
   private static void reportCLI(IStrategoTerm pairOrList, String kind) throws IOException {

From seba at informatik.uni-marburg.de  Tue Mar 29 22:10:34 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 29 Mar 2011 20:10:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22446 - in
	sugarj/branches/SugarJ-editor-services/case-studies:
	javaclosure xml/schema
Message-ID: <20110329201034.A8F71CC037@mx4.tudelft.nl>

Author: SebastianErdweg
Date: Tue Mar 29 20:10:34 2011
New Revision: 22446
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22446&sc=1

Log:
few case study fixes

Added:
   sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Closure.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsEditorService.sugj
Modified:
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj
   sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj

Added: sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Closure.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/case-studies/javaclosure/Closure.sugj	Tue Mar 29 20:10:34 2011	(r22446)
@@ -0,0 +1,5 @@
+package javaclosure;
+public interface Closure<Res, Arg> 
+{ 
+  public Res invoke(Arg arg);
+}

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj	Tue Mar 29 20:10:12 2011	(r22445)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsDesugaring.sugj	Tue Mar 29 20:10:34 2011	(r22446)
@@ -291,7 +291,8 @@
           ?x;
           strategy~s; ?serr;
           if is-error
-            then !x; strategy~(<any-error-free-strategy> ss) <+ !serr
+            then 
+              !x; strategy~(<any-error-free-strategy> ss) <+ !serr
             else id
           end
          }

Added: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsEditorService.sugj
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/AsEditorService.sugj	Tue Mar 29 20:10:34 2011	(r22446)
@@ -0,0 +1,16 @@
+package xml.schema;
+
+import xml.XmlSyntax;
+import xml.schema.XmlSchemaJavaSyntax;
+
+public sugar AsEditorService {
+  rules
+    schema-editor :
+      XsdSugarBody(XMLSchemaDoc(xsd)) -> <schema-editor> xsd
+    
+    schema-editor :
+      Document(pre, el, post) -> <schema-editor-element> el
+
+    schema-editor-element :
+      el -> []    
+}
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj	Tue Mar 29 20:10:12 2011	(r22445)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchema.sugj	Tue Mar 29 20:10:34 2011	(r22446)
@@ -1,7 +1,6 @@
 package xml.schema;
   
 import xml.schema.XmlSchema;
-import xml.schema.AsEditorService;
 
 public xmlschema BookSchema {
   <{http://www.w3.org/2001/XMLSchema}schema targetNamespace="lib">

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj	Tue Mar 29 20:10:12 2011	(r22445)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/BookSchemaTest.sugj	Tue Mar 29 20:10:34 2011	(r22446)
@@ -11,11 +11,6 @@
 
 import xml.schema.BookSchema;
 
-public editor services MyEditor {
-  completions
-    completion proposer : my-editor-completion
-    completion trigger : "<" 
-}
 
 public class BookSchemaTest extends Test {
   public static void main(String[] args) throws SAXException {
@@ -25,7 +20,6 @@
       <{lib}book title="Sweetness and Power: The Place of Sugar in Modern History">
         <{lib}author name="Sidney W. Mintz">
         </{lib}author>
-        
       </{lib}book>;
   }
 } 
\ No newline at end of file

Modified: sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj
==============================================================================
--- sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj	Tue Mar 29 20:10:12 2011	(r22445)
+++ sugarj/branches/SugarJ-editor-services/case-studies/xml/schema/XmlSchemaJavaSyntax.sugj	Tue Mar 29 20:10:34 2011	(r22446)
@@ -2,7 +2,7 @@
 
 import org.sugarj.languages.Java;
 
-import xml.XmlSyntax;
+import xml.XmlJavaSyntax;
  
 public sugar XmlSchemaJavaSyntax {
   

From tobivollebregt at gmail.com  Wed Mar 30 13:17:32 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 30 Mar 2011 11:17:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22447 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
Message-ID: <20110330111732.85E9D2B804B@mx2.tudelft.nl>

Author: tvo
Date: Wed Mar 30 11:17:32 2011
New Revision: 22447
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22447&sc=1

Log:
Remove duplication

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Tue Mar 29 20:10:34 2011	(r22446)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Wed Mar 30 11:17:32 2011	(r22447)
@@ -100,36 +100,32 @@
 
 	private static ContentProposalTemplate[] readCompletionTemplates(Descriptor descriptor) {
 		Set<ContentProposalTemplate> results = new HashSet<ContentProposalTemplate>();
-		ITermFactory factory = Environment.getTermFactory();
 		
 		for (IStrategoAppl template : collectTerms(descriptor.getDocument(), "CompletionTemplate")) {
-			IStrategoTerm prefixTerm = termAt(template, 0);
-			boolean noPrefix = "Placeholder".equals(cons(prefixTerm));
-			String prefix = noPrefix ? "" : termContents(prefixTerm);
-			IStrategoList completionParts = termAt(template, 1);
-			IStrategoTerm anno = termAt(template, 2);
-			completionParts = factory.makeListCons(prefixTerm, completionParts);
-			if (noPrefix)
-				completionParts = factory.makeListCons(factory.makeString(""), completionParts);
-			results.add(new ContentProposalTemplate(prefix, null, completionParts, "Blank".equals(cons(anno))));
+			results.add(parseContentProposalTemplate(template, 0, null));
 		}
 
 		for (IStrategoAppl template : collectTerms(descriptor.getDocument(), "CompletionTemplateWithSort")) {
 			String sort = termContents(termAt(template, 0));
-			IStrategoTerm prefixTerm = termAt(template, 1);
-			boolean noPrefix = "Placeholder".equals(cons(prefixTerm));
-			String prefix = noPrefix ? "" : termContents(prefixTerm);
-			IStrategoList completionParts = termAt(template, 2);
-			IStrategoTerm anno = termAt(template, 3);
-			completionParts = factory.makeListCons(prefixTerm, completionParts);
-			if (noPrefix)
-				completionParts = factory.makeListCons(factory.makeString(""), completionParts);
-			results.add(new ContentProposalTemplate(prefix, sort, completionParts, "Blank".equals(cons(anno))));
+			results.add(parseContentProposalTemplate(template, 1, sort));
 		}
 		
 		return results.toArray(new ContentProposalTemplate[0]);
 	}
 
+	private static ContentProposalTemplate parseContentProposalTemplate(IStrategoAppl template, int index, String sort) {
+		ITermFactory factory = Environment.getTermFactory();
+		IStrategoTerm prefixTerm = termAt(template, index + 0);
+		boolean noPrefix = "Placeholder".equals(cons(prefixTerm));
+		String prefix = noPrefix ? "" : termContents(prefixTerm);
+		IStrategoList completionParts = termAt(template, index + 1);
+		IStrategoTerm anno = termAt(template, index + 2);
+		completionParts = factory.makeListCons(prefixTerm, completionParts);
+		if (noPrefix)
+			completionParts = factory.makeListCons(factory.makeString(""), completionParts);
+		return new ContentProposalTemplate(prefix, sort, completionParts, "Blank".equals(cons(anno)));
+	}
+
 	private static Set<Pattern> readTriggers(Descriptor descriptor) throws BadDescriptorException {
 		Set<Pattern> results = new HashSet<Pattern>();
 		

From tobivollebregt at gmail.com  Wed Mar 30 13:17:39 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 30 Mar 2011 11:17:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22448 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110330111739.BF45B2B8061@mx2.tudelft.nl>

Author: tvo
Date: Wed Mar 30 11:17:39 2011
New Revision: 22448
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22448&sc=1

Log:
Remove unnecessary code

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Mar 30 11:17:32 2011	(r22447)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Mar 30 11:17:39 2011	(r22448)
@@ -213,7 +213,6 @@
 
 		for (IStrategoList cons = (IStrategoList) proposals; !cons.isEmpty(); cons = cons.tail()) {
 			IStrategoTerm proposal = cons.head();
-			boolean confirmed = false;
 			String newText;
 			IStrategoList newTextParts;
 			IStrategoString description;
@@ -224,26 +223,16 @@
 				description = emptyString;
 			} else if (proposal.getTermType() == LIST) {
 				newTextParts = (IStrategoList) proposal;
-				String head = newTextParts.size() == 0 ? "" : asJavaString(newTextParts.head());
-				if (head.length() >= prefix.length()) {
-					if (startsWithCaseInsensitive(head, prefix)) confirmed = true;
-					else continue;
-				}
 				newText = proposalPartsToDisplayString(newTextParts);
 				description = emptyString;
 			} else {
 				IStrategoTerm newTextTerm = termAt(proposal, 0);
 				if (proposal.getTermType() != TUPLE || proposal.getSubtermCount() != 2
-						|| (newTextTerm.getTermType() != LIST && termAt(proposal, 0).getTermType() != STRING)
+						|| (newTextTerm.getTermType() != LIST && newTextTerm.getTermType() != STRING)
 						|| termAt(proposal, 1).getTermType() != STRING)
 					return createErrorProposal(error, offset);
 				if (newTextTerm.getTermType() == LIST) {
 					newTextParts = (IStrategoList) newTextTerm;
-					String head = newTextParts.size() == 0 ? "" : asJavaString(newTextParts.head());
-					if (head.length() >= prefix.length()) {
-						if (startsWithCaseInsensitive(head, prefix)) confirmed = true;
-						else continue;
-					}
 					newText = proposalPartsToDisplayString(newTextParts);
 				} else {
 					newTextParts = factory.makeList(newTextTerm);
@@ -251,7 +240,7 @@
 				}
 				description = termAt(proposal, 1);
 			}
-			if (!confirmed && (newTextParts.isEmpty() || !startsWithCaseInsensitive(newText,prefix)))
+			if (newTextParts.isEmpty() || !startsWithCaseInsensitive(newText,prefix))
 				continue;
 			results.add(new ContentProposal(this, newText, newText, prefix, offsetRegion, newTextParts, description.stringValue()));
 		}

From tobivollebregt at gmail.com  Wed Mar 30 13:17:46 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 30 Mar 2011 11:17:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22449 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading services
Message-ID: <20110330111746.B4F61CC086@mx4.tudelft.nl>

Author: tvo
Date: Wed Mar 30 11:17:46 2011
New Revision: 22449
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22449&sc=1

Log:
Refactoring completion support to unify keywords, templates and semantic proposals

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposalTemplate.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Wed Mar 30 11:17:39 2011	(r22448)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	Wed Mar 30 11:17:46 2011	(r22449)
@@ -21,7 +21,7 @@
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
-import org.strategoxt.imp.runtime.services.ContentProposalTemplate;
+import org.strategoxt.imp.runtime.services.Completion;
 import org.strategoxt.imp.runtime.services.ContentProposer;
 import org.strategoxt.imp.runtime.services.ContentProposerListener;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
@@ -30,7 +30,7 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class ContentProposerFactory extends AbstractServiceFactory<IContentProposer> {
-	
+
 	public ContentProposerFactory() {
 		super(IContentProposer.class, true);
 	}
@@ -52,28 +52,32 @@
 			Environment.logException("Could not eagerly initialize the content proposal service", e);
 		}
 	}
-	
+
 	@Override
 	public IContentProposer create(Descriptor descriptor, SGLRParseController controller) throws BadDescriptorException {
 		String completionFunction = descriptor.getProperty("CompletionProposer", null);
 		StrategoObserver feedback = descriptor.createService(StrategoObserver.class, controller);
 
 		Pattern identifierLexical = SyntaxPropertiesFactory.readIdentifierLexical(descriptor, true);
+
 		Set<String> completionKeywords = readCompletionKeywords(descriptor);
-		ContentProposalTemplate[] templates = readCompletionTemplates(descriptor);
-		for (ContentProposalTemplate template : templates) {
+		Set<Completion> templates = readCompletionTemplates(descriptor);
+
+		for (Completion template : templates) {
 			completionKeywords.remove(template.getPrefix());
 		}
-		String[] keywords = completionKeywords.toArray(new String[0]);
+		for (String keyword : completionKeywords) {
+			templates.add(Completion.makeKeyword(keyword));
+		}
 
 		registerListener(descriptor, controller);
-		
-		return new ContentProposer(feedback, completionFunction, identifierLexical, keywords, templates);
+
+		return new ContentProposer(feedback, completionFunction, identifierLexical, templates);
 	}
 
 	private static void registerListener(Descriptor descriptor, SGLRParseController controller)
 			throws BadDescriptorException {
-		
+
 		try {
 			UniversalEditor editor = controller.getEditor().getEditor();
 			ISourceViewer viewer = editor.getServiceControllerManager().getSourceViewer();
@@ -86,7 +90,7 @@
 
 	private static Set<String> readCompletionKeywords(Descriptor descriptor) {
 		Set<String> results = new HashSet<String>();
-		
+
 		for (IStrategoAppl keyword : collectTerms(descriptor.getDocument(), "CompletionKeyword")) {
 			String literal = termContents(termAt(keyword, 0));
 			IStrategoAppl type = termAt(keyword, 1);
@@ -98,9 +102,9 @@
 		return results;
 	}
 
-	private static ContentProposalTemplate[] readCompletionTemplates(Descriptor descriptor) {
-		Set<ContentProposalTemplate> results = new HashSet<ContentProposalTemplate>();
-		
+	private static Set<Completion> readCompletionTemplates(Descriptor descriptor) {
+		Set<Completion> results = new HashSet<Completion>();
+
 		for (IStrategoAppl template : collectTerms(descriptor.getDocument(), "CompletionTemplate")) {
 			results.add(parseContentProposalTemplate(template, 0, null));
 		}
@@ -109,11 +113,11 @@
 			String sort = termContents(termAt(template, 0));
 			results.add(parseContentProposalTemplate(template, 1, sort));
 		}
-		
-		return results.toArray(new ContentProposalTemplate[0]);
+
+		return results;
 	}
 
-	private static ContentProposalTemplate parseContentProposalTemplate(IStrategoAppl template, int index, String sort) {
+	private static Completion parseContentProposalTemplate(IStrategoAppl template, int index, String sort) {
 		ITermFactory factory = Environment.getTermFactory();
 		IStrategoTerm prefixTerm = termAt(template, index + 0);
 		boolean noPrefix = "Placeholder".equals(cons(prefixTerm));
@@ -123,12 +127,12 @@
 		completionParts = factory.makeListCons(prefixTerm, completionParts);
 		if (noPrefix)
 			completionParts = factory.makeListCons(factory.makeString(""), completionParts);
-		return new ContentProposalTemplate(prefix, sort, completionParts, "Blank".equals(cons(anno)));
+		return Completion.makeTemplate(prefix, sort, completionParts, "Blank".equals(cons(anno)));
 	}
 
 	private static Set<Pattern> readTriggers(Descriptor descriptor) throws BadDescriptorException {
 		Set<Pattern> results = new HashSet<Pattern>();
-		
+
 		for (IStrategoAppl trigger : collectTerms(descriptor.getDocument(), "CompletionTrigger")) {
 			try {
 				String pattern = termContents(termAt(trigger, 0));

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Completion.java	Wed Mar 30 11:17:46 2011	(r22449)
@@ -0,0 +1,132 @@
+package org.strategoxt.imp.runtime.services;
+
+import static org.spoofax.interpreter.core.Tools.termAt;
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.cons;
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.termContents;
+
+import org.eclipse.jface.viewers.StyledString;
+import org.eclipse.swt.graphics.TextStyle;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * Objects of this class are blueprints for different proposal types.
+ *
+ * @author Tobi Vollebregt
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class Completion {
+
+	private static LazyColor keywordColor = new LazyColor(127, 0, 85);
+
+	private static LazyColor identifierColor = new LazyColor(64, 64, 255);
+
+	public static Completion makeKeyword(String literal) {
+		return new Completion(literal, null, null, false, null, keywordColor);
+	}
+
+	public static Completion makeTemplate(String prefix, String sort, IStrategoList completionParts, boolean blankLineRequired) {
+		return new Completion(prefix, sort, completionParts, blankLineRequired, null, keywordColor);
+	}
+
+	public static Completion makeSemantic(IStrategoList completionParts, String description) {
+		final String prefix = ((IStrategoString) completionParts.head()).stringValue();
+		final LazyColor color = completionParts.size() == 1 ? identifierColor : null; // identifier proposal?
+		return new Completion(prefix, null, completionParts, false, description, color);
+	}
+
+	private final String prefix;
+
+	private final String sort;
+
+	private final IStrategoList newTextParts;
+
+	private final boolean blankLineRequired;
+
+	private final String description;
+
+	private final LazyColor color;
+
+	protected Completion(String prefix, String sort, IStrategoList newTextParts, boolean blankLineRequired, String description, LazyColor color) {
+		this.prefix = prefix;
+		this.sort = sort;
+		this.newTextParts = newTextParts;
+		this.blankLineRequired = blankLineRequired;
+		this.description = description;
+		this.color = color;
+	}
+
+	public final String getPrefix() {
+		return prefix;
+	}
+
+	public final String getSort() {
+		return sort;
+	}
+
+	public final IStrategoList getNewTextParts() {
+		return newTextParts;
+	}
+
+	public final boolean isBlankLineRequired() {
+		return blankLineRequired;
+	}
+
+	public String getDescription() {
+		return description != null ? description : getNewText();
+	}
+
+	public String getName() {
+		final String newText = getNewText();
+		if (newText == null || newText.indexOf("\n") != -1 || newText.indexOf("\t") != -1) {
+			return getPrefix().replace("\\n", "").replace("\\t", "  ");
+		}
+		return newText;
+	}
+
+	public StyledString getStyledName() {
+		final String name = getName();
+		return new StyledString(name, new StyledString.Styler() {
+			@Override
+			public void applyStyles(TextStyle textStyle) {
+				if (color != null) {
+					textStyle.foreground = color.get();
+				}
+			}
+		});
+	}
+
+	public final String getNewText() {
+		if (newTextParts == null)
+			return null;
+		StringBuilder result = new StringBuilder();
+		for (IStrategoTerm part : newTextParts.getAllSubterms()) {
+			if ("Placeholder".equals(cons(part))) {
+				IStrategoString placeholder = termAt(part, 0);
+				String contents = placeholder.stringValue();
+				contents = contents.substring(1, contents.length() - 1); // strip < >
+				result.append(contents);
+			} else {
+				result.append(termContents(part));
+			}
+		}
+		return AutoEditStrategy.formatInsertedText(result.toString(), "");
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (obj == this) return true;
+		if (!(obj instanceof Completion)) return false;
+		final Completion that = (Completion) obj;
+		return this.getName().equals(that.getName())
+			&& ((this.getNewTextParts() == null && that.getNewTextParts() == null)
+					|| (this.getNewTextParts() != null && this.getNewTextParts().equals(that.getNewTextParts())));
+	}
+
+	@Override
+	public int hashCode() {
+		return this.getName().hashCode();
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Wed Mar 30 11:17:39 2011	(r22448)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Wed Mar 30 11:17:46 2011	(r22449)
@@ -1,27 +1,19 @@
 /**
- * 
+ *
  */
 package org.strategoxt.imp.runtime.services;
 
-import static org.eclipse.core.runtime.Platform.OS_MACOSX;
 import static org.spoofax.interpreter.core.Tools.termAt;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.cons;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.termContents;
 
-import org.eclipse.core.runtime.Platform;
 import org.eclipse.imp.editor.SourceProposal;
 import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.contentassist.ICompletionProposalExtension6;
 import org.eclipse.jface.viewers.StyledString;
-import org.eclipse.jface.viewers.StyledString.Styler;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.graphics.Color;
-import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.Point;
-import org.eclipse.swt.graphics.TextStyle;
-import org.eclipse.swt.widgets.Display;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -29,70 +21,24 @@
 
 /**
  * A content proposal that selects the lexical at the cursor location.
- * 
+ *
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class ContentProposal extends SourceProposal implements ICompletionProposalExtension6 {
-	
-	private static final boolean USE_BIG_FONT = Platform.getOS() == OS_MACOSX;
 
-	private static Color identifierColor;
-	
-	private static Color keywordColor;
-	
-	private static Font keywordFont;
-	
-	private static volatile boolean justApplied; 
-	
+	private static volatile boolean justApplied;
+
 	private final ContentProposer proposer;
-	
-	private final IStrategoList newTextParts;
-	
-	private final ContentProposalTemplate template;
-	
-	/**
-	 * Creates a new keyword-based content proposal.
-	 */
-	public ContentProposal(ContentProposer proposer, String proposal, String newText, String prefix, Region region,
-			int cursorLoc, String addlInfo) {
-		
-		super(proposal, newText, prefix, region, cursorLoc, addlInfo);
-		this.proposer = proposer;
-		this.newTextParts = null;
-		this.template = null;
-	}
-	
-	/**
-	 * Creates a new template-based content proposal.
-	 */
-	public ContentProposal(ContentProposer proposer, String proposalPrefix,
-			ContentProposalTemplate proposal, String prefix, Region region) {
-		
-		super(proposal.getName(), proposalPrefix, prefix, region, null);
-		this.proposer = proposer;
-		this.newTextParts = proposal.getCompletionParts();
-		this.template = proposal;
-	}
 
-	/**
-	 * Creates a new semantic content proposal.
-	 */
-	public ContentProposal(ContentProposer proposer, String proposal, String newText, String prefix, Region region, 
-			IStrategoList newTextParts, String addlInfo) {
-		
-		super(proposal, newText, prefix, region, addlInfo);
-		assert newTextParts != null;
-		this.proposer = proposer;
-		this.newTextParts = newTextParts;
-		this.template = null;
-	}
+	private final IStrategoList newTextParts;
 
-	private boolean isKeywordProposal() {
-		return newTextParts == null;
-	}
+	private final Completion completion;
 
-	private boolean isTemplateProposal() {
-		return template != null;
+	public ContentProposal(ContentProposer proposer, Completion completion, String prefix, Region region) {
+		super(completion.getName(), completion.getPrefix(), prefix, region, null);
+		this.proposer = proposer;
+		this.newTextParts = completion.getNewTextParts();
+		this.completion = completion;
 	}
 
 	@Override
@@ -103,11 +49,11 @@
 			return proposalPartsToSelection(document, newTextParts, getRange().getOffset() - getPrefix().length());
 		}
 	}
-	
+
 	@Override
 	public String getAdditionalProposalInfo() {
 		// TODO: support newlines and tabs in proposal descriptions?
-		return template != null ? template.getDescription() : super.getAdditionalProposalInfo();
+		return completion.getDescription();
 	}
 
 	private Point proposalPartsToSelection(IDocument document, IStrategoList proposalParts, int offset) {
@@ -115,14 +61,15 @@
 		for (IStrategoList cons = proposalParts.tail(); !cons.isEmpty(); cons = cons.tail()) {
 			IStrategoTerm partTerm = cons.head();
 			String part = proposalPartToString(document, partTerm);
-			if ("Placeholder".equals(cons(partTerm)) 
+			// TVO: hack to put selection at first placeholder?
+			if ("Placeholder".equals(cons(partTerm))
 					|| proposer.getCompletionLexical().matcher(part).matches())
 				return new Point(offset + i, part.length());
 			i += part.length();
 		}
 		return new Point(offset + i, 0);
 	}
-	
+
 	private String proposalPartsToString(IDocument document, IStrategoList proposalParts) {
 		StringBuilder result = new StringBuilder();
 		for (IStrategoList cons = proposalParts; !cons.isEmpty(); cons = cons.tail()) {
@@ -130,7 +77,7 @@
 		}
 		return result.toString();
 	}
-	
+
 	private String proposalPartToString(IDocument document, IStrategoTerm part) {
 		try {
 			String lineStart = AutoEditStrategy.getLineBeforeOffset(document, getRange().getOffset());
@@ -147,7 +94,7 @@
 			return termContents(part);
 		}
 	}
-	
+
 	@Override
 	public void apply(IDocument document) {
 		try {
@@ -162,13 +109,13 @@
 		}
 		proposer.onProposalApplied();
 	}
-	
+
 	protected static boolean pollJustApplied() {
 		boolean result = justApplied;
 		justApplied = false;
 		return result;
 	}
-	
+
 	@Override
 	public String getNewText() {
 		assert newTextParts == null : "Don't use me if newTextParts != null";
@@ -176,57 +123,6 @@
 	}
 
 	public StyledString getStyledDisplayString() {
-		return new StyledString(getDisplayString(), new ContentProposalStyler());
-	}
-	
-	private class ContentProposalStyler extends Styler {
-
-		@Override
-		public void applyStyles(TextStyle style) {
-			if (isKeywordProposal() || isTemplateProposal()) {
-				// UNDONE: style.font = getKeywordFont();
-				style.foreground = getKeywordColor();
-			} else if (newTextParts.size() == 1) { // identifier proposal
-				style.foreground = getIdentifierColor();
-			}
-		}
-		
-		private Color getIdentifierColor() {
-			if (identifierColor == null)
-				identifierColor = new Color(Display.getCurrent(), 64, 64, 255);
-			return identifierColor;
-		}
-		
-		private Color getKeywordColor() {
-			if (keywordColor == null)
-				keywordColor = new Color(Display.getCurrent(), 127, 0, 85);
-			return keywordColor;
-		}
-		
-		@SuppressWarnings("unused")
-		private Font getKeywordFont() {
-			// HACK: hardcoded font size
-			// TODO: use non-hard coded font?
-	        //       e.g. FontData[] fontData= JFaceResources.getFontDescriptor("org.eclipse.jdt.ui.editors.textfont").getFontData();
-			//            if (fontData != null && fontData.length > 0) ...
-			if (keywordFont == null)
-				keywordFont = new Font(Display.getCurrent(), "Courier new", USE_BIG_FONT ? 13 : 12, SWT.BOLD);
-			return keywordFont;
-		}
-	}
-	
-	@Override
-	public boolean equals(Object obj) {
-		if (!(obj instanceof ContentProposal))
-			return false;
-		ContentProposal other = (ContentProposal) obj;
-		return other.getDisplayString().equals(getDisplayString())
-			&& other.newTextParts.equals(newTextParts) 
-			&& isKeywordProposal() == other.isKeywordProposal();
-	}
-	
-	@Override
-	public int hashCode() {
-		return getDisplayString().hashCode();
+		return completion.getStyledName();
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Mar 30 11:17:39 2011	(r22448)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Mar 30 11:17:46 2011	(r22449)
@@ -1,6 +1,5 @@
 package org.strategoxt.imp.runtime.services;
 
-import static org.spoofax.interpreter.core.Tools.asJavaString;
 import static org.spoofax.interpreter.core.Tools.termAt;
 import static org.spoofax.interpreter.terms.IStrategoTerm.LIST;
 import static org.spoofax.interpreter.terms.IStrategoTerm.STRING;
@@ -10,6 +9,7 @@
 import static org.strategoxt.imp.runtime.stratego.SourceAttachment.getResource;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
 import java.util.HashSet;
@@ -30,7 +30,6 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.terms.TermFactory;
-import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.ast.AstSortInspector;
 import org.strategoxt.imp.runtime.stratego.CandidateSortsPrimitive;
@@ -38,45 +37,40 @@
 
 /**
  * Content completion.
- * 
+ *
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class ContentProposer implements IContentProposer {
 
 	public static String COMPLETION_TOKEN = "CONTENTCOMPLETE" + Math.abs(new Random().nextInt());
-	
+
 	private static final boolean IGNORE_TEMPLATE_PREFIX_CASE = false;
-	
-	private final StringBuilder proposalBuilder = new StringBuilder();
-	
+
 	private final StrategoObserver observer;
-	
+
 	private final String completionFunction;
-	
+
 	private final Pattern identifierLexical;
-	
-	private final String[] keywords;
-	
-	private final ContentProposalTemplate[] templates;
-	
+
+	private final Set<Completion> templates;
+
 	private final ContentProposerParser parser; // mutable state
-	
-	public ContentProposer(StrategoObserver observer, String completionFunction, Pattern identifierLexical, String[] keywords, ContentProposalTemplate[] templates) {
+
+	public ContentProposer(StrategoObserver observer, String completionFunction, Pattern identifierLexical, Set<Completion> templates) {
 		this.observer = observer;
 		this.completionFunction = completionFunction;
 		this.identifierLexical = identifierLexical;
-		this.keywords = keywords;
 		this.templates = templates;
 		this.parser = new ContentProposerParser(identifierLexical);
 	}
-	
+
 	public ICompletionProposal[] getContentProposals(IParseController controller, int offset, ITextViewer viewer) {
 		String document = viewer.getDocument().get();
-		
+
 		if (!identifierLexical.matcher(COMPLETION_TOKEN).matches())
 			return createErrorProposal("No proposals available - completion lexical must allow letters and numbers", offset);
-		
-		boolean avoidReparse = completionFunction == null && templates.length == 0;
+
+		boolean avoidReparse = completionFunction == null && templates.size() == 0;
 		IStrategoTerm ast = parser.parse(controller, offset, document, avoidReparse);
 		int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
 		Set<String> sorts = new AstSortInspector(ast).getSortsAtOffset(offset - prefixLength, offset);
@@ -86,9 +80,10 @@
 		printCompletionTip(controller, sorts);
 
 		ICompletionProposal[] results =
-			toProposals(invokeCompletionFunction(controller, sorts), document,
+			computeAllCompletionProposals(invokeCompletionFunction(controller, sorts), document,
 					parser.getCompletionPrefix(), offset, sorts);
-		
+
+		// TVO: there is an interface for this AFAIK
 		/* UNDONE: automatic proposal insertion
 		if (results.length == 1 && results[0] instanceof SourceProposal) {
 			results[0].apply(viewer.getDocument());
@@ -98,21 +93,21 @@
 			return null;
 		}
 		*/
-		
+
 		return results;
     }
 
 	private ICompletionProposal[] getParseFailureProposals(IParseController controller,
 			String document, int offset, Set<String> sorts) {
-		
+
 		String startSymbol = Environment.getDescriptor(controller.getLanguage()).getStartSymbol();
-		
+
 		if (startSymbol != null && document.trim().indexOf('\n') == -1) {
 			// Empty document completion
 			String prefix = parser.readPrefix(offset, document);
 			sorts.add(startSymbol);
 			printCompletionTip(controller, sorts);
-			ICompletionProposal[] proposals = toProposals(TermFactory.EMPTY_LIST, document, prefix, offset, sorts);
+			ICompletionProposal[] proposals = computeAllCompletionProposals(TermFactory.EMPTY_LIST, document, prefix, offset, sorts);
 			if (proposals.length != 0) return proposals;
 		}
 		if (parser.isFatalSyntaxError()) {
@@ -140,21 +135,21 @@
 			}
 		}
 	}
-	
+
 	protected Pattern getCompletionLexical() {
 		return identifierLexical;
 	}
-	
+
 	protected ContentProposerParser getParser() {
 		return parser;
 	}
-		
+
 	protected void onProposalApplied() {
 		observer.setRushNextUpdate(true);
 		parser.getParser().getErrorHandler().setRushNextUpdate(true);
 		parser.getParser().scheduleParserUpdate(0, false);
 	}
-	
+
 	private IStrategoTerm invokeCompletionFunction(final IParseController controller, final Set<String> sorts) {
 		if (completionFunction == null) {
 			return Environment.getTermFactory().makeList();
@@ -184,91 +179,96 @@
 				}
 			}
 			Runner runner = new Runner();
-			
+
 			// UNDONE: causes deadlock with updater thread
 			//         (which acquires the display lock to display monitor updates)
 			//if (EditorState.isUIThread()) {
-			//	Display.getCurrent().syncExec(runner);	
+			//	Display.getCurrent().syncExec(runner);
 			//} else {
 				runner.run();
 			//}
 			return runner.result;
 		}
 	}
-	
-	private ICompletionProposal[] toProposals(IStrategoTerm proposals, String document, String prefix, int offset, Set<String> sorts) {
-		Debug.startTimer();
-		
-		String error = "No proposals available - '" + completionFunction
-				+ "' did not return a ([proposal], description) list";
 
-		if (proposals.getTermType() != LIST)
+	private ICompletionProposal[] computeAllCompletionProposals(IStrategoTerm proposals, String document, String prefix, int offset, Set<String> sorts) {
+
+		// dynamically computed blueprints, i.e. from semantic analysis
+		Set<Completion> results = toCompletions(proposals, document, prefix, offset, sorts);
+
+		if (results == null) {
+			String error = "No proposals available - '" + completionFunction
+					+ "' did not return a ([proposal], description) list";
+
 			return createErrorProposal(error, offset);
+		}
+
+		// static blueprints, i.e. keywords and templates
+		results.addAll(templates);
+
+		return filterCompletions(results, document, prefix, offset, sorts);
+	}
 
-		ITermFactory factory = Environment.getTermFactory();
-		IStrategoString emptyString = factory.makeString("");
-		Region offsetRegion = new Region(offset, 0);
-		
-		Set<ICompletionProposal> results = getKeywordAndTemplateProposals(document, prefix, offsetRegion, offset, sorts);
+	private Set<Completion> toCompletions(IStrategoTerm proposals, String document, String prefix, int offset, Set<String> sorts) {
+
+		if (proposals.getTermType() != LIST)
+			return null;
+
+		final ITermFactory factory = Environment.getTermFactory();
+		final IStrategoString emptyString = factory.makeString("");
+		final Set<Completion> results = new HashSet<Completion>();
 
 		for (IStrategoList cons = (IStrategoList) proposals; !cons.isEmpty(); cons = cons.tail()) {
 			IStrategoTerm proposal = cons.head();
-			String newText;
 			IStrategoList newTextParts;
 			IStrategoString description;
-			
-			if (proposal.getTermType() == STRING) {
-				newTextParts = factory.makeList(proposal);
-				newText = ((IStrategoString) proposal).stringValue();
-				description = emptyString;
-			} else if (proposal.getTermType() == LIST) {
-				newTextParts = (IStrategoList) proposal;
-				newText = proposalPartsToDisplayString(newTextParts);
-				description = emptyString;
-			} else {
-				IStrategoTerm newTextTerm = termAt(proposal, 0);
-				if (proposal.getTermType() != TUPLE || proposal.getSubtermCount() != 2
-						|| (newTextTerm.getTermType() != LIST && newTextTerm.getTermType() != STRING)
-						|| termAt(proposal, 1).getTermType() != STRING)
-					return createErrorProposal(error, offset);
-				if (newTextTerm.getTermType() == LIST) {
-					newTextParts = (IStrategoList) newTextTerm;
-					newText = proposalPartsToDisplayString(newTextParts);
-				} else {
-					newTextParts = factory.makeList(newTextTerm);
-					newText = ((IStrategoString) newTextTerm).stringValue();
-				}
-				description = termAt(proposal, 1);
+
+			switch (proposal.getTermType()) {
+				case STRING:
+					newTextParts = factory.makeList(proposal);
+					description = emptyString;
+					break;
+
+				case LIST:
+					newTextParts = (IStrategoList) proposal;
+					description = emptyString;
+					break;
+
+				case TUPLE:
+					if (proposal.getSubtermCount() != 2)
+						return null;
+					IStrategoTerm newTextTerm = termAt(proposal, 0);
+					switch (newTextTerm.getTermType()) {
+						case STRING: newTextParts = factory.makeList(newTextTerm); break;
+						case LIST:   newTextParts = (IStrategoList) newTextTerm;   break;
+						default:     return null;
+					}
+					description = termAt(proposal, 1);
+					break;
+
+				default:
+					return null;
 			}
-			if (newTextParts.isEmpty() || !startsWithCaseInsensitive(newText,prefix))
-				continue;
-			results.add(new ContentProposal(this, newText, newText, prefix, offsetRegion, newTextParts, description.stringValue()));
-		}
-		
-		return toSortedArray(results);
-	}
-	
-	private static boolean startsWithCaseInsensitive(String s, String prefix) {
-		return s.length() >= prefix.length() && s.regionMatches(true, 0, prefix, 0, prefix.length());
-	}
-	
-	private String proposalPartsToDisplayString(IStrategoList proposalParts) {
-		proposalBuilder.setLength(0);
-		for (IStrategoList cons = proposalParts; !cons.isEmpty(); cons = cons.tail()) {
-			IStrategoTerm part = cons.head();
-			if (part.getTermType() != STRING) return null;
-			proposalBuilder.append(asJavaString(part));
-		}
-		if (proposalBuilder.indexOf("\\n") != -1 || proposalBuilder.indexOf("\\t") != -1) {
-			return asJavaString(proposalParts.head());
-		} else {
-			return proposalBuilder.toString();
+
+			// empty list of new text parts is wrong
+			if (newTextParts.isEmpty() || termAt(newTextParts, 0).getTermType() != STRING) {
+				return null;
+			}
+
+			// description must be a string
+			if (description.getTermType() != STRING) {
+				return null;
+			}
+
+			results.add(Completion.makeSemantic(newTextParts, description.stringValue()));
 		}
+
+		return results;
 	}
 
-	private static ICompletionProposal[] toSortedArray(Set<ICompletionProposal> results) {
+	private static ICompletionProposal[] toSortedArray(ArrayList<ICompletionProposal> results) {
 		ICompletionProposal[] resultArray = results.toArray(new ICompletionProposal[results.size()]);
-		
+
 		Arrays.sort(resultArray, new Comparator<ICompletionProposal>() {
 			public int compare(ICompletionProposal o1, ICompletionProposal o2) {
 				return o1.getDisplayString().compareToIgnoreCase(o2.getDisplayString());
@@ -276,50 +276,22 @@
 		});
 		return resultArray;
 	}
-	
-	private Set<ICompletionProposal> getKeywordAndTemplateProposals(String document, String prefix,
-			Region offsetRegion, int offset, Set<String> sorts) {
-		
-		Set<ICompletionProposal> results = new HashSet<ICompletionProposal>();
+
+	private ICompletionProposal[] filterCompletions(Set<Completion> completions, String document, String prefix,
+			int offset, Set<String> sorts) {
+
+		final ArrayList<ICompletionProposal> results = new ArrayList<ICompletionProposal>();
+		final Region offsetRegion = new Region(offset, 0);
 		boolean backTrackResultsOnly = false;
-		
-		// TODO: simplify - turn completion keywords in completion templates?
-		//       right now we have code clone mccabe insanity...
-		for (String proposal : keywords) {
-			if (!backTrackResultsOnly && proposal.regionMatches(IGNORE_TEMPLATE_PREFIX_CASE, 0, prefix, 0, prefix.length())) {
-				if (prefix.length() > 0 || identifierLexical.matcher(proposal).lookingAt())
-					results.add(new ContentProposal(this, proposal, proposal, prefix, offsetRegion,
-							offset + proposal.length() - prefix.length(), ""));
-			} /*else*/ {
-				Matcher matcher = identifierLexical.matcher(proposal);
-				if (matcher.find() && (matcher.start() > 0 || matcher.end() < proposal.length())) {
-					// Handle completion literals with special characters, like "(disabled)"
-					if (matcher.start() == 0 && !matcher.find(matcher.end()))
-						continue;
-					do {
-						if (document.regionMatches(offset - matcher.start() - prefix.length(), proposal, 0, matcher.start()) 
-								&& proposal.regionMatches(matcher.start(), prefix, 0, prefix.length())) {
-							
-							String subProposal = proposal.substring(matcher.start());
-							if (!backTrackResultsOnly) results.clear();
-							backTrackResultsOnly = true;
-							results.add(new ContentProposal(this, proposal, subProposal, prefix,
-									offsetRegion, offset + matcher.end() - matcher.start() - prefix.length(), ""));
-							break;
-						}
-					} while (matcher.find(matcher.end()));
-				}
-			}
-		}
-		
-		for (ContentProposalTemplate proposal : templates) {
+
+		for (Completion proposal : completions) {
 			String proposalPrefix = proposal.getPrefix();
 			if (proposal.getSort() != null && !sorts.contains(proposal.getSort()))
 				continue;
 			if (!backTrackResultsOnly && proposalPrefix.regionMatches(IGNORE_TEMPLATE_PREFIX_CASE, 0, prefix, 0, prefix.length())) {
 				if (!proposal.isBlankLineRequired() || isBlankBeforeOffset(document, offset - prefix.length()))
 					if (prefix.length() > 0 || identifierLexical.matcher(proposalPrefix).lookingAt() || proposalPrefix.length() == 0)
-						results.add(new ContentProposal(this, proposal.getPrefix(), proposal, prefix, offsetRegion));
+						results.add(new ContentProposal(this, proposal, prefix, offsetRegion));
 			} /*else*/ {
 				Matcher matcher = identifierLexical.matcher(proposalPrefix);
 				if (matcher.find() && (matcher.start() > 0 || matcher.end() < proposalPrefix.length())) {
@@ -327,22 +299,22 @@
 					if (matcher.start() == 0 && !matcher.find(matcher.end()))
 						continue;
 					do {
-						if (document.regionMatches(offset - matcher.start() - prefix.length(), proposalPrefix, 0, matcher.start()) 
+						if (document.regionMatches(offset - matcher.start() - prefix.length(), proposalPrefix, 0, matcher.start())
 								&& proposalPrefix.regionMatches(matcher.start(), prefix, 0, prefix.length())) {
-							
+
 							// TODO: respect proposal.isBlankLineRequired() here?
 							String bigPrefix = proposalPrefix.substring(0, matcher.start() + prefix.length());
 							if (!backTrackResultsOnly) results.clear();
 							backTrackResultsOnly = true;
-							results.add(new ContentProposal(this, proposal.getPrefix(), proposal, bigPrefix, offsetRegion));
+							results.add(new ContentProposal(this, proposal, bigPrefix, offsetRegion));
 							break;
 						}
 					} while (matcher.find(matcher.end()));
 				}
 			}
 		}
-		
-		return results;
+
+		return toSortedArray(results);
 	}
 
 	private static boolean isBlankBeforeOffset(String document, int offset) {
@@ -359,5 +331,5 @@
 	private ICompletionProposal[] createErrorProposal(String error, int offset) {
 		return new ICompletionProposal[] { new ErrorProposal(error, offset) };
 	}
-	
+
 }

From tobivollebregt at gmail.com  Wed Mar 30 13:17:55 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 30 Mar 2011 11:17:55 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22450 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime: META-INF
	src/org/strategoxt/imp/runtime/services
Message-ID: <20110330111755.08810CC0F0@mx4.tudelft.nl>

Author: tvo
Date: Wed Mar 30 11:17:54 2011
New Revision: 22450
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22450&sc=1

Log:
Linked mode model & ui added for placeholders

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Wed Mar 30 11:17:46 2011	(r22449)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/META-INF/MANIFEST.MF	Wed Mar 30 11:17:54 2011	(r22450)
@@ -14,7 +14,7 @@
  org.eclipse.jface,
  org.eclipse.jface.text,
  org.eclipse.ui.editors,
- org.eclipse.ui.workbench,
+ org.eclipse.ui.workbench.texteditor,
  org.eclipse.ui,
  org.eclipse.ui.ide,
  org.eclipse.ui.console,

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Wed Mar 30 11:17:46 2011	(r22449)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Wed Mar 30 11:17:54 2011	(r22450)
@@ -1,19 +1,29 @@
-/**
- *
- */
 package org.strategoxt.imp.runtime.services;
 
 import static org.spoofax.interpreter.core.Tools.termAt;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.cons;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.termContents;
 
+import java.util.HashMap;
+
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.imp.editor.SourceProposal;
 import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.IDocument;
+import org.eclipse.jface.text.ITextViewer;
 import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.contentassist.ICompletionProposalExtension6;
+import org.eclipse.jface.text.link.LinkedModeModel;
+import org.eclipse.jface.text.link.LinkedModeUI;
+import org.eclipse.jface.text.link.LinkedPosition;
+import org.eclipse.jface.text.link.LinkedPositionGroup;
 import org.eclipse.jface.viewers.StyledString;
 import org.eclipse.swt.graphics.Point;
+import org.eclipse.ui.progress.UIJob;
+import org.eclipse.ui.texteditor.link.EditorLinkedModeUI;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -23,6 +33,7 @@
  * A content proposal that selects the lexical at the cursor location.
  *
  * @author Lennart Kats <lennart add lclnet.nl>
+ * @author Tobi Vollebregt
  */
 public class ContentProposal extends SourceProposal implements ICompletionProposalExtension6 {
 
@@ -34,11 +45,14 @@
 
 	private final Completion completion;
 
-	public ContentProposal(ContentProposer proposer, Completion completion, String prefix, Region region) {
+	private final ITextViewer viewer;
+
+	public ContentProposal(ContentProposer proposer, Completion completion, String prefix, Region region, ITextViewer viewer) {
 		super(completion.getName(), completion.getPrefix(), prefix, region, null);
 		this.proposer = proposer;
 		this.newTextParts = completion.getNewTextParts();
 		this.completion = completion;
+		this.viewer = viewer;
 	}
 
 	@Override
@@ -61,10 +75,6 @@
 		for (IStrategoList cons = proposalParts.tail(); !cons.isEmpty(); cons = cons.tail()) {
 			IStrategoTerm partTerm = cons.head();
 			String part = proposalPartToString(document, partTerm);
-			// TVO: hack to put selection at first placeholder?
-			if ("Placeholder".equals(cons(partTerm))
-					|| proposer.getCompletionLexical().matcher(part).matches())
-				return new Point(offset + i, part.length());
 			i += part.length();
 		}
 		return new Point(offset + i, 0);
@@ -95,6 +105,54 @@
 		}
 	}
 
+	private LinkedModeModel buildLinkedModeModel(IDocument document, int offset, IStrategoList proposalParts) throws BadLocationException {
+		HashMap<String, LinkedPositionGroup> groups = new HashMap<String, LinkedPositionGroup>();
+		int i = 0;
+		for (IStrategoList cons = proposalParts; !cons.isEmpty(); cons = cons.tail()) {
+			IStrategoTerm partTerm = cons.head();
+			String part = proposalPartToString(document, partTerm);
+			if ("Placeholder".equals(cons(partTerm))
+					// HACK: we should migrate to semantic completion returning Placeholder cons too when it wants placeholders
+					|| (cons != proposalParts && proposer.getCompletionLexical().matcher(part).matches())) {
+				LinkedPositionGroup group = groups.get(part);
+				if (group == null) {
+					group = new LinkedPositionGroup();
+					groups.put(part, group);
+				}
+				group.addPosition(new LinkedPosition(document, offset + i, part.length(), 0));
+			}
+			i += part.length();
+		}
+		if (!groups.isEmpty()) {
+			LinkedModeModel model = new LinkedModeModel();
+			for (LinkedPositionGroup group : groups.values()) {
+				model.addGroup(group);
+			}
+			return model;
+		}
+		return null;
+	}
+
+	private void goToLinkedMode(ITextViewer viewer, int offset, IDocument doc, int exitPos, IStrategoList proposalParts) throws BadLocationException {
+		final LinkedModeModel model = buildLinkedModeModel(doc, offset, proposalParts);
+		if (model != null) {
+			model.forceInstall();
+
+			final LinkedModeUI ui = new EditorLinkedModeUI(model, viewer);
+			ui.setExitPosition(viewer, exitPos, 0, Integer.MAX_VALUE);
+
+			final Job job = new UIJob("going into linked mode") {
+				@Override
+				public IStatus runInUIThread(IProgressMonitor monitor) {
+					ui.enter();
+					return Status.OK_STATUS;
+				}
+			};
+			job.setSystem(true);
+			job.schedule();
+		}
+	}
+
 	@Override
 	public void apply(IDocument document) {
 		try {
@@ -104,6 +162,12 @@
 					: proposalPartsToString(document, newTextParts);
 			justApplied = true;
 			document.replace(range.getOffset(), range.getLength(), newText.substring(getPrefix().length()));
+
+			if (newTextParts != null) {
+				Point selection = proposalPartsToSelection(document, newTextParts, range.getOffset() - getPrefix().length());
+				goToLinkedMode(viewer, range.getOffset() - getPrefix().length(), document, selection.x, newTextParts);
+			}
+
 		} catch (BadLocationException e) {
 			Environment.logException("Could not apply content proposal", e);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Mar 30 11:17:46 2011	(r22449)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Wed Mar 30 11:17:54 2011	(r22450)
@@ -75,13 +75,13 @@
 		int prefixLength = parser.getCompletionPrefix() == null ? 0 : parser.getCompletionPrefix().length();
 		Set<String> sorts = new AstSortInspector(ast).getSortsAtOffset(offset - prefixLength, offset);
 		if (parser.getCompletionNode() == null)
-			return getParseFailureProposals(controller, document, offset, sorts);
+			return getParseFailureProposals(controller, document, offset, sorts, viewer);
 
 		printCompletionTip(controller, sorts);
 
 		ICompletionProposal[] results =
 			computeAllCompletionProposals(invokeCompletionFunction(controller, sorts), document,
-					parser.getCompletionPrefix(), offset, sorts);
+					parser.getCompletionPrefix(), offset, sorts, viewer);
 
 		// TVO: there is an interface for this AFAIK
 		/* UNDONE: automatic proposal insertion
@@ -98,7 +98,7 @@
     }
 
 	private ICompletionProposal[] getParseFailureProposals(IParseController controller,
-			String document, int offset, Set<String> sorts) {
+			String document, int offset, Set<String> sorts, ITextViewer viewer) {
 
 		String startSymbol = Environment.getDescriptor(controller.getLanguage()).getStartSymbol();
 
@@ -107,7 +107,7 @@
 			String prefix = parser.readPrefix(offset, document);
 			sorts.add(startSymbol);
 			printCompletionTip(controller, sorts);
-			ICompletionProposal[] proposals = computeAllCompletionProposals(TermFactory.EMPTY_LIST, document, prefix, offset, sorts);
+			ICompletionProposal[] proposals = computeAllCompletionProposals(TermFactory.EMPTY_LIST, document, prefix, offset, sorts, viewer);
 			if (proposals.length != 0) return proposals;
 		}
 		if (parser.isFatalSyntaxError()) {
@@ -191,7 +191,7 @@
 		}
 	}
 
-	private ICompletionProposal[] computeAllCompletionProposals(IStrategoTerm proposals, String document, String prefix, int offset, Set<String> sorts) {
+	private ICompletionProposal[] computeAllCompletionProposals(IStrategoTerm proposals, String document, String prefix, int offset, Set<String> sorts, ITextViewer viewer) {
 
 		// dynamically computed blueprints, i.e. from semantic analysis
 		Set<Completion> results = toCompletions(proposals, document, prefix, offset, sorts);
@@ -206,7 +206,7 @@
 		// static blueprints, i.e. keywords and templates
 		results.addAll(templates);
 
-		return filterCompletions(results, document, prefix, offset, sorts);
+		return filterCompletions(results, document, prefix, offset, sorts, viewer);
 	}
 
 	private Set<Completion> toCompletions(IStrategoTerm proposals, String document, String prefix, int offset, Set<String> sorts) {
@@ -278,7 +278,7 @@
 	}
 
 	private ICompletionProposal[] filterCompletions(Set<Completion> completions, String document, String prefix,
-			int offset, Set<String> sorts) {
+			int offset, Set<String> sorts, ITextViewer viewer) {
 
 		final ArrayList<ICompletionProposal> results = new ArrayList<ICompletionProposal>();
 		final Region offsetRegion = new Region(offset, 0);
@@ -291,7 +291,7 @@
 			if (!backTrackResultsOnly && proposalPrefix.regionMatches(IGNORE_TEMPLATE_PREFIX_CASE, 0, prefix, 0, prefix.length())) {
 				if (!proposal.isBlankLineRequired() || isBlankBeforeOffset(document, offset - prefix.length()))
 					if (prefix.length() > 0 || identifierLexical.matcher(proposalPrefix).lookingAt() || proposalPrefix.length() == 0)
-						results.add(new ContentProposal(this, proposal, prefix, offsetRegion));
+						results.add(new ContentProposal(this, proposal, prefix, offsetRegion, viewer));
 			} /*else*/ {
 				Matcher matcher = identifierLexical.matcher(proposalPrefix);
 				if (matcher.find() && (matcher.start() > 0 || matcher.end() < proposalPrefix.length())) {
@@ -306,7 +306,7 @@
 							String bigPrefix = proposalPrefix.substring(0, matcher.start() + prefix.length());
 							if (!backTrackResultsOnly) results.clear();
 							backTrackResultsOnly = true;
-							results.add(new ContentProposal(this, proposal, bigPrefix, offsetRegion));
+							results.add(new ContentProposal(this, proposal, bigPrefix, offsetRegion, viewer));
 							break;
 						}
 					} while (matcher.find(matcher.end()));

From r.t.lindeman at student.tudelft.nl  Wed Mar 30 13:41:59 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Wed, 30 Mar 2011 11:41:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22451 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core/META-INF
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug...
Message-ID: <20110330114159.D02E07F8019@mx1.tudelft.nl>

Author: RickyLindeman
Date: Wed Mar 30 11:41:58 2011
New Revision: 22451
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22451&sc=1

Log:
* Moved character offset converter to stratego.transformer project
* DebuggableHybridInterpreter only launches a debug run if the strategy name starts with "test" to prevent way to many debug launches. (temporary fix)
* limit source lookup to the current project

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/FileLineLengthTable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/LineLengthTable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/java_create_fll_table_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/charoffset-converter.str
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/FileLineLengthTable.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/LineLengthTable.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoSourcePathComputerDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/LineBreakPoint.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Wed Mar 30 11:41:58 2011	(r22451)
@@ -10,7 +10,8 @@
  org.eclipse.jdt.launching;bundle-version="3.5.0",
  org.strategoxt.strj,
  org.eclipse.jdt.core;bundle-version="3.5.0",
- org.strategoxt.imp.debug.stratego.core
+ org.strategoxt.imp.debug.stratego.core,
+ org.strategoxt.imp.debug.stratego.transformer
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Export-Package: org.strategoxt.imp.debug.core.str.launching,

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -6,6 +6,7 @@
 import java.util.List;
 
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.debug.core.ILaunchConfiguration;
 import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
 import org.eclipse.debug.core.ILaunchManager;
@@ -32,6 +33,8 @@
  */
 public class DebuggableHybridInterpreter extends HybridInterpreter {
 
+	private String projectpath = null;
+	
 	public DebuggableHybridInterpreter(ITermFactory termFactory) {
 		super(termFactory);
 	}
@@ -88,41 +91,9 @@
 			throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
 		
 		try {
-			// launch a JVM
-			// http://www.eclipse.org/articles/Article-Java-launch/launching-java.html
-			
-			// find HybridInterpreter launch config
-			ILaunchConfigurationWorkingCopy configWC = LaunchUtils.createHybridInterpreterLaunchConfigurationWorkingCopy();
-			if (configWC == null)
+			if (name.startsWith("test"))
 			{
-				System.err.println("No config working copy!");
-			}
-			// set the required attributes
-			
-			// strategy name
-			// IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME
-			configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME, name);
-			
-			// required jars
-			// IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS
-			configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS, getLoadJarsAsList());
-			
-			// also set the path to the project, breakpoints 
-			// IStrategoConstants.ATTR_STRATEGO_PROGRAM
-			// TODO: set the project path, so we can filter breakpoints limited to this project
-			configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String) null);
-			//org.example.lang1
-			// classpath
-			// IStrategoConstants.ATTR_STRATEGO_CLASSPATH
-			
-			
-			// and launch
-			try {
-				ILaunchConfiguration config = configWC.doSave();
-				config.launch(ILaunchManager.DEBUG_MODE, null);
-			} catch (CoreException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
+				tryLaunch(name);
 			}
 			
 			// TODO: wait for launch to finish
@@ -139,4 +110,61 @@
         }
 		//return false;
 	}
+	
+	private void tryLaunch(String name)
+	{
+		// launch a JVM
+		// http://www.eclipse.org/articles/Article-Java-launch/launching-java.html
+		
+		// find HybridInterpreter launch config
+		ILaunchConfigurationWorkingCopy configWC = LaunchUtils.createHybridInterpreterLaunchConfigurationWorkingCopy();
+		if (configWC == null)
+		{
+			System.err.println("No config working copy!");
+		}
+		// set the required attributes
+		
+		// strategy name
+		// IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME
+		configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_STRATEGY_NAME, name);
+		
+		// required jars
+		// IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS
+		configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_REQUIRED_JARS, getLoadJarsAsList());
+		
+		// also set the path to the project, breakpoints 
+		// IStrategoConstants.ATTR_STRATEGO_PROGRAM
+		configWC.setAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String) null);
+		//org.example.lang1
+		// classpath
+		// IStrategoConstants.ATTR_STRATEGO_CLASSPATH
+		
+		// set the project path, so we can filter breakpoints limited to this project
+		configWC.setAttribute(IStrategoConstants.ATTR_PROJECT_DIRECTORY, this.getProjectpath());
+
+		// set metadata directory
+		configWC.setAttribute(IStrategoConstants.ATTR_METADATA_DIRECTORY, (String) null);
+
+		// and launch
+		try {
+			ILaunchConfiguration config = configWC.doSave();
+			// TODO: only launch if we have breakpoints
+			// Use the Descriptor
+			// We also need EditorIOAgent
+			config.launch(ILaunchManager.DEBUG_MODE, null);
+		} catch (CoreException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+	}
+
+
+	public String getProjectpath() {
+		return projectpath;
+	}
+
+
+	public void setProjectpath(String projectpath) {
+		this.projectpath = projectpath;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/HybridInterpreterLaunchDelegate.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -54,6 +54,22 @@
 			return;
 		}*/
 		
+		// get name of the directory that contains metadata (such as charoffset.table)
+		//String metadataDirectory = configuration.getAttribute(IStrategoConstants.ATTR_METADATA_DIRECTORY, (String)null);
+		//if (metadataDirectory == null) {
+			//abort("Strategy name unspecified.", null);
+			//return;
+		//}
+		
+		// get the project path
+		String projectPath = configuration.getAttribute(IStrategoConstants.ATTR_PROJECT_DIRECTORY, (String) null);
+		String metadataDirectory = null;
+		if (projectPath != null)
+		{
+			IPath p = new Path(projectPath);
+			metadataDirectory = p.append("trans-debug").toOSString();
+		}
+		
 		//String flatJarList = "";
 		List<IPath> jarPaths = new ArrayList<IPath>();
 		Iterator iter = requiredJars.iterator();
@@ -89,6 +105,7 @@
 		
 		ls.programArguments = StringUtil.concat(jarArray, args);
 		ls.mode = ILaunchManager.DEBUG_MODE;
+		ls.metadataDirectory = metadataDirectory;
 		
 		launchVM(monitor, launch, ls);
 		//String cp = "" + jar + ":" + javaJar; // + ":" + utilsDir+"/strategoxt.jar";
@@ -115,6 +132,8 @@
 		public String[] programArguments;
 		
 		public String mode;
+		
+		public String metadataDirectory;
 	}
 	
 	private void launchVM(IProgressMonitor monitor, ILaunch launch, LaunchSettings ls) throws CoreException
@@ -142,7 +161,7 @@
 		
 		if (ls.mode.equals(ILaunchManager.DEBUG_MODE)) {
 			monitor.subTask("Attaching to the Stratego VM");
-			StrategoDebugTarget target = new StrategoDebugTarget(launch, port);
+			StrategoDebugTarget target = new StrategoDebugTarget(launch, port, ls.metadataDirectory);
 			//(launch,p,requestPort,eventPort );
 			launch.addDebugTarget(target);
 			monitor.worked(1);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/IStrategoConstants.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -38,4 +38,8 @@
 	public static final String ATTR_STRATEGO_REQUIRED_JARS = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_REQUIRED_JARS";
 
 	public static final String ATTR_STRATEGO_CLASSPATH = ID_STRATEGO_DEBUG_MODEL + ".ATTR_STRATEGO_CLASSPATH";
+	
+	public static final String ATTR_METADATA_DIRECTORY = ID_STRATEGO_DEBUG_MODEL + ".ATTR_METADATA_DIRECTORY";
+	
+	public static final String ATTR_PROJECT_DIRECTORY = ID_STRATEGO_DEBUG_MODEL + ".ATTR_PROJECT_DIRECTORY";
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoLaunchDelegate.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -183,7 +183,7 @@
 		
 		if (ls.mode.equals(ILaunchManager.DEBUG_MODE)) {
 			monitor.subTask("Attaching to the Stratego VM");
-			StrategoDebugTarget target = new StrategoDebugTarget(launch, port);
+			StrategoDebugTarget target = new StrategoDebugTarget(launch, port, null);
 			//(launch,p,requestPort,eventPort );
 			launch.addDebugTarget(target);
 			monitor.worked(1);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoSourcePathComputerDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoSourcePathComputerDelegate.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/StrategoSourcePathComputerDelegate.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -14,21 +14,25 @@
 	 */
 	public ISourceContainer[] computeSourceContainers(ILaunchConfiguration configuration, IProgressMonitor monitor) throws CoreException {
 		// TODO: does this work?
+		String project = configuration.getAttribute(IStrategoConstants.ATTR_PROJECT_DIRECTORY, (String) null);
 		//String path = configuration.getAttribute(IStrategoConstants.ATTR_STRATEGO_PROGRAM, (String)null);
 		ISourceContainer sourceContainer = null;
-		/*
-		if (path != null) {
-			IResource resource = ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(path));
+		
+		if (project != null) {
+			org.eclipse.core.resources.IResource resource = org.eclipse.core.resources.ResourcesPlugin.getWorkspace().getRoot().findMember(new org.eclipse.core.runtime.Path(project).lastSegment());
 			if (resource != null) {
-				IContainer container = resource.getParent();
-				if (container.getType() == IResource.PROJECT) {
-					sourceContainer = new ProjectSourceContainer((IProject)container, false);
-				} else if (container.getType() == IResource.FOLDER) {
-					sourceContainer = new FolderSourceContainer(container, false);
+				//org.eclipse.core.resources.IContainer container = resource.getParent();
+				if (resource.getType() == org.eclipse.core.resources.IResource.PROJECT) {
+					sourceContainer = new org.eclipse.debug.core.sourcelookup.containers.ProjectSourceContainer((org.eclipse.core.resources.IProject)resource, false);
 				}
+				/*
+				else if (container.getType() == org.eclipse.core.resources.IResource.FOLDER) {
+					sourceContainer = new org.eclipse.debug.core.sourcelookup.containers.FolderSourceContainer(container, false);
+				}
+				*/
 			}
 		}
-		*/
+		
 		if (sourceContainer == null) {
 			sourceContainer = new WorkspaceSourceContainer();
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -12,8 +12,8 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.TermFactory;
 import org.strategoxt.debug.core.model.StrategoStackFrame;
-import org.strategoxt.debug.core.util.table.FileLineLengthTable;
-import org.strategoxt.debug.core.util.table.LineLengthTable;
+import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.FileLineLengthTable;
+import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.LineLengthTable;
 
 public class EStrategoStackFrame extends StrategoDebugElement implements IStackFrame {
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/StrategoDebugTarget.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -154,7 +154,7 @@
 	}
 	
 	
-	public StrategoDebugTarget(ILaunch launch, final String port) throws CoreException {
+	public StrategoDebugTarget(ILaunch launch, final String port, String metadataDirectory) throws CoreException {
 		super(null);
 		this.fLaunch = launch;
 		// running threads
@@ -185,6 +185,10 @@
 
 		
 		manager = new DebugSessionManager(fEventDispatch);
+		if (metadataDirectory != null)
+		{
+			manager.init(new Path(metadataDirectory));
+		}
 		
 		DebugPlugin.getDefault().getBreakpointManager().addBreakpointListener(this);
 		// we have to know when we get removed, so that we can shut off the debugger

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/DebugSessionManager.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -80,6 +80,17 @@
 		this.eventSpecManager = new EventSpecManager();
 		this.vmMonitor = null;
 	}
+	
+	/**
+	 * This directory contains metadata such as the "linelength.offset" file
+	 */
+	private IPath metadataDirectory = null;
+	
+	public void init(IPath metadataDirectory)
+	{
+		this.metadataDirectory = metadataDirectory;
+		this.eventSpecManager.initializeTable(this.metadataDirectory);
+	}
 
 	
 	/**
@@ -89,8 +100,8 @@
 	 * @param mainArgs
 	 * @param classpath
 	 */
-	public void initVM(VirtualMachineManager vmManager, String mainArgs, List<IPath> classpaths, IPath tableDirectory, String connectorType) {
-		this.eventSpecManager.initializeTable(tableDirectory); // read table and offset files from the directory
+	public void initVM(VirtualMachineManager vmManager, String mainArgs, List<IPath> classpaths, String connectorType) {
+
 		VMLauncherHelper helper = new VMLauncherHelper(vmManager, connectorType);
 		helper.setClasspaths(classpaths);
 		this.vm = helper.getTargetVM(mainArgs);
@@ -103,15 +114,15 @@
 	 * @param mainArgs
 	 * @param classpath
 	 */
-	public void initVM(String mainArgs, List<IPath> classpaths, IPath tableDirectory)
+	public void initVM(String mainArgs, List<IPath> classpaths)
 	{
 		// use default launch
-		this.initVM(mainArgs, classpaths, tableDirectory, "LAUNCH");
+		this.initVM(mainArgs, classpaths, "LAUNCH");
 	}
 	
-	public void initVM(String mainArgs, List<IPath> classpaths, IPath tableDirectory, String connectorType) {
+	public void initVM(String mainArgs, List<IPath> classpaths, String connectorType) {
 		VirtualMachineManager vmManager = DebugSessionManager.getVirtualMachineManager();
-		this.initVM(vmManager, mainArgs, classpaths, tableDirectory, connectorType);
+		this.initVM(vmManager, mainArgs, classpaths, connectorType);
 	}
 
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/EventThread.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -386,6 +386,30 @@
 		if (trace != null) { // only want threads we care about
 			trace.exceptionEvent(event); // Forward event
 		}
+		/*
+		try {
+			int count = event.thread().frameCount();
+			if (count > 0)
+			{
+				com.sun.jdi.StackFrame sf = event.thread().frame(0);
+				java.util.List visVars = sf.visibleVariables();
+				if (visVars != null && visVars.size() > 0)
+				{
+					LocalVariable lv = (LocalVariable) visVars.get(0);
+					com.sun.jdi.Value val = sf.getValue(lv);
+					System.out.println("VAL: " + val);
+				}
+				//java.util.List list = event.thread().frames();
+				//System.out.println("exception");
+			}
+		} catch (IncompatibleThreadStateException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (AbsentInformationException e) {
+			// TODO Auto-generated catch block
+			//e.printStackTrace();
+		}
+		*/
 		return false; // resume thread
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/control/ThreadEventHandler.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -391,6 +391,7 @@
 		//System.out.println(event.exception());
 		// Step to the catch
 		EventRequestManager mgr = event.virtualMachine().eventRequestManager();
+		/*
 		com.sun.jdi.ObjectReference ref = event.exception();
 		com.sun.jdi.ReferenceType refType =ref.referenceType();
 		for(Object obj : refType.allFields())
@@ -403,6 +404,7 @@
 		//com.sun.jdi.Value val2 = refType.getValue(field2);
 		//System.out.println(val1.toString());
 		//System.out.println(val2.toString());
+		*/
 		
 		StepRequest req = mgr.createStepRequest(thread, StepRequest.STEP_MIN,
 				StepRequest.STEP_INTO);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecList.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -1,7 +1,8 @@
 package org.strategoxt.debug.core.eventspec;
 
-import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
+import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
  * Contains current breakpoints
@@ -12,13 +13,14 @@
 public class EventSpecList {
 	
 	private List<BreakPoint> breakPoints = null;
+	//private Collection<BreakPoint> bp = null;
 	
 	/**
 	 * Creates a new EventSpecList, it contains the active breakpoints.
 	 */
 	public EventSpecList()
 	{
-		this.breakPoints = new ArrayList<BreakPoint>();
+		this.breakPoints = new CopyOnWriteArrayList<BreakPoint>();
 	}
 
 	public void add(BreakPoint b)
@@ -35,7 +37,7 @@
 		return this.breakPoints.contains(b);
 	}
 	
-	public List<BreakPoint> getBreakPoints()
+	public Collection<BreakPoint> getBreakPoints()
 	{
 		return this.breakPoints;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -9,7 +9,7 @@
 import org.strategoxt.debug.core.model.StrategoState;
 import org.strategoxt.debug.core.util.FileUtil;
 import org.strategoxt.debug.core.util.table.EventTable;
-import org.strategoxt.debug.core.util.table.LineLengthTable;
+import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.LineLengthTable;
 
 public class EventSpecManager {
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/LineBreakPoint.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/LineBreakPoint.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/LineBreakPoint.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -16,7 +16,8 @@
 		else
 		{
 			boolean onSameLine = breakPoint.getLineNumber() == this.getLineNumber();
-			return onSameLine;
+			boolean sameFile = breakPoint.getFilename().equals(this.getFilename());
+			return onSameLine && sameFile;
 		}
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -18,8 +18,6 @@
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.TermFactory;
-import org.strategoxt.debug.core.util.table.FileLineLengthTable;
-import org.strategoxt.debug.core.util.table.LineLengthTable;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoExit;
 
@@ -187,7 +185,7 @@
 		generateBreakpointLookupTable(tableFilename, generatedFiles); // TODO: sort the filenames on their path
 		
 		IPath charOffsetTableFilename = projectStrategoDir.append((projectName + ".offset")); // location of the character offset table
-		generateOffsetTable(charOffsetTableFilename, strategoSourceBasedir, inputFiles);
+		//generateOffsetTable(charOffsetTableFilename, strategoSourceBasedir, inputFiles);
 
 		debugSessionSettings.setTableDirectory(projectStrategoDir);
 		
@@ -254,6 +252,7 @@
 				"-i", stratego_input
 				, "--gen-dir", strOutputBasedir
 				, "--base-dir", sourceBasedir 
+				, "--charoffset-converter" // create charoffset table
 			};
 
 		String[] transformer_args = StringUtil.concat(basic_args, debugSessionSettings.getGenerateStrategoExtraArguments());
@@ -295,11 +294,11 @@
 			{
 				if (subterm.getTermType() == IStrategoTerm.TUPLE)
 				{
-					// should be a tuple: (status, filename)
+					// should be a tuple: (status, generated-filename, input-filename)
 					IStrategoTerm[] tupleTerms = subterm.getAllSubterms();
 					if (tupleTerms.length != 3)
 					{
-						// tuple should have two items
+						// tuple should have three items
 						System.err.println("ERROR, has no three items!");
 					}
 					else
@@ -349,35 +348,6 @@
 	}
 	
 	/**
-	 * Creates a table with the length per line, so we can convert a linenumber+token_line_offset to a token_file_offset
-	 */
-	protected void generateOffsetTable(IPath charOffsetTableFilename, IPath strategoSourceBasedir, Collection<IPath> inputFiles)
-	{
-		// create character offset table
-		// TODO: optimize
-		List<FileLineLengthTable> tables = new ArrayList<FileLineLengthTable>();
-		for(IPath inputFilePath : inputFiles) // TODO: sort the inputFiles on their path
-		{
-			IPath basedir = strategoSourceBasedir; // end with '/'
-			//IPath inputFilePath = new Path(inputFileString);
-			
-			if (basedir.isPrefixOf(inputFilePath)) {
-				//inputFile = inputFile.substring(basedir.length()); // make relative to the basedir
-				inputFilePath = inputFilePath.makeRelativeTo(basedir);
-			}
-			else
-			{
-				System.err.println("inputfile '"+inputFilePath+"' is not located in the strategoSourceBasedir '"+strategoSourceBasedir+"'");
-			}
-			FileLineLengthTable t = new FileLineLengthTable(inputFilePath.toOSString());
-			t.create(basedir);
-			tables.add(t);
-		}
-		
-		LineLengthTable.writeLineLengthTable(charOffsetTableFilename, tables);
-	}
-	
-	/**
 	 * Creates a table that contains the ranges (linenumber and token offset) for each breakpoint.
 	 * 
 	 * This table makes it easier to find out what breakpoint to set using a given linenumber and token-offset.

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugEventRequestInstaller.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -60,6 +60,7 @@
 		
 		if (useExceptionRequests)
 		{
+			//createExceptionRequest(ReferenceType refType, boolean notifyCaught, boolean notifyUncaught)
 			ExceptionRequest excReq = mgr.createExceptionRequest(null, true, true); // suspend so we can step 
 			excReq.setSuspendPolicy(EventRequest.SUSPEND_ALL);
 			excReq.enable();

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/Runner.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -34,7 +34,8 @@
 	public static void run(String mainArgs, List<IPath> classpaths, IPath tableDirectory)
 	{
 		DebugSessionManager manager = new DebugSessionManager();
-		manager.initVM(mainArgs, classpaths, tableDirectory);
+		manager.init(tableDirectory); // read table and offset files from the directory
+		manager.initVM(mainArgs, classpaths);
 		manager.setupEventListeners();
 		manager.redirectOutput();
 		System.out.println("RUN");

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/count.tsv	Wed Mar 30 11:41:58 2011	(r22451)
@@ -1,3 +1,3 @@
 name	count	sum duration
-main	1	120
-function-call	1	32
+foo	4	205
+main12	4	977

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/internalcount.tsv	Wed Mar 30 11:41:58 2011	(r22451)
@@ -1,4 +1,5 @@
 name	count	sum duration
-s_step	6	0	21591000	226000	218000	387000	2197000
-s_enter	2	0	31188000	5388000	172000	250000	20419000
-s_exit	2	0	8121000	12777000	108000	297000	32000
+s_var	12	0	48209000	196000	558000	242000	13000
+s_step	40	0	134140000	337000	1683000	1372000	19228000
+s_enter	8	0	56668000	5738000	1716000	604000	10000
+s_exit	8	0	25611000	1707000	315000	435000	103000

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/profiler.tsv	Wed Mar 30 11:41:58 2011	(r22451)
@@ -1,33 +1,42 @@
 item	subitem	count	duration
-PDE_s_enter	P-1	2	21000
-PDE_s_enter	P-3	2	12000
-PDE_s_enter	P-2	2	34000
-PDE_s_enter	P-SUPER	2	63000
-PDE_s_exit	P-1	2	24000
-PDE_s_exit	P-SUPER	2	36000
-SUPERPDE_s_enter	D-1	2	12000
-SUPERPDE_s_enter	D-2	2	15000
-SS_s_step	SUSPEND-3	6	53000
-SS_s_step	SUSPEND-1	6	257000
-SS_s_step	SUSPEND-2	6	41000
-SUPERPDE_s_step	D-1	6	22000
-SUPERPDE_s_step	D-2	6	30000
-SS_s_enter	SUSPEND-3	2	14000
-SS_s_enter	SUSPEND-1	2	181000
-SS_s_enter	SUSPEND-2	2	38000
-PDE_s_step	P-SUPER	6	108000
-SS_s_exit	SUSPEND-3	2	8000
-SS_s_exit	SUSPEND-1	2	265000
-SS_s_exit	SUSPEND-2	2	13000
-EXTRACT	BUILD_EVENTINFO	11	2486000
-EXTRACT	VALUE_TERM	11	2957000
-EXTRACT	VALUE_EVENTINFO	11	3739000
-EXTRACT	PARSE_TERM	11	432000
-EXTRACT	VALUE_VAR	11	10707000
-EXTRACT	PARSE_EVENTINFO	11	12166000
-EXTRACT	FIELD_EVENTINFO	11	11042000
-EXTRACT	BUILD_TERM	11	2359000
-EXTRACT	STACKFRAME	11	6526000
-EXTRACT	THISOBJECT	11	3825000
-SUPERPDE_s_exit	D-1	2	7000
-SUPERPDE_s_exit	D-2	2	8000
+SUPERPDE_s_var	D-1	12	51000
+SUPERPDE_s_var	D-2	12	67000
+PDE_s_exit	P-1	8	68000
+PDE_s_exit	P-SUPER	8	148000
+SS_s_step	SUSPEND-3	40	176000
+SS_s_step	SUSPEND-1	40	499000
+SS_s_step	SUSPEND-2	40	415000
+SS_s_enter	SUSPEND-3	8	42000
+SS_s_enter	SUSPEND-1	8	384000
+SS_s_enter	SUSPEND-2	8	117000
+SUPERPDE_s_step	D-1	40	175000
+SUPERPDE_s_step	D-2	40	215000
+PDE_s_step	P-SUPER	40	816000
+EXTRACT	BUILD_EVENTINFO	68	14671000
+EXTRACT	PARSE_VAR	12	2396000
+EXTRACT	VALUE_TERM	68	15451000
+EXTRACT	VALUE_EVENTINFO	68	15454000
+EXTRACT	PARSE_TERM	68	3631000
+EXTRACT	VALUE_VAR	68	64117000
+EXTRACT	PARSE_EVENTINFO	68	56330000
+EXTRACT	FIELD_EVENTINFO	68	32001000
+EXTRACT	BUILD_TERM	68	12826000
+EXTRACT	STACKFRAME	68	18707000
+EXTRACT	THISOBJECT	68	22555000
+SUPERPDE_s_exit	D-1	8	28000
+SUPERPDE_s_exit	D-2	8	38000
+PDE_s_enter	P-1	8	59000
+PDE_s_enter	P-3	8	53000
+PDE_s_enter	P-2	8	1293000
+PDE_s_enter	P-SUPER	8	208000
+SUPERPDE_s_enter	D-1	8	45000
+SUPERPDE_s_enter	D-2	8	58000
+SS_s_var	SUSPEND-3	12	56000
+SS_s_var	SUSPEND-1	12	52000
+SS_s_var	SUSPEND-2	12	51000
+SS_s_exit	SUSPEND-3	8	30000
+SS_s_exit	SUSPEND-1	8	286000
+SS_s_exit	SUSPEND-2	8	67000
+PDE_s_var	P-1	12	65000
+PDE_s_var	P-2	12	110000
+PDE_s_var	P-SUPER	12	248000

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/debug/core/control/AbstractDSMTest.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -47,10 +47,10 @@
 	protected DebugSessionManager createDebugSessionManager() {
 		this.vmMonitor = new VMMonitorTestImpl2(this);
 		DebugSessionManager dsm = new DebugSessionManager(vmMonitor);
+		dsm.init(this.debugSessionSettings.getTableDirectory());
 		vmMonitor.setDSM(dsm);
 
 		Assert.assertNotNull(this.debugSessionSettings);
-		dsm.getEventSpecManager().initializeTable(this.debugSessionSettings.getTableDirectory());
 		return dsm;
 	}
 	
@@ -96,7 +96,8 @@
 		Assert.assertNotNull(tableDirectory);
 		
 		long start = System.currentTimeMillis();
-		manager.initVM(mainArgs, classpaths, tableDirectory, connectorType);
+		manager.initVM(mainArgs, classpaths, connectorType);
+		manager.init(tableDirectory); // read table and offset files from the directory
 		manager.setupEventListeners();
 		manager.redirectOutput();
 		manager.runVM();

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.test/test/java/org/strategoxt/imp/debug/stratego/transformer/MainStrategyTest.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -14,8 +14,8 @@
 public class MainStrategyTest {
 	public static void main(String[] args) {
 		//m1();
-		m1b();
-		//m2();
+		//m1b();
+		m2();
 		//m3();
 		//m4();
 	}
@@ -53,10 +53,11 @@
 		String strategoSourceBasedir = StrategoFileManager.BASE + "/" + baseInputPath + "/" + strategoFilePath;
 
 		String stratego_input = strategoSourceBasedir;
-		String output_base_dir = StrategoFileManager.WORKING_DIR + "/" + "java_main_test1";
+		String output_base_dir = StrategoFileManager.WORKING_DIR + "/" + "java_main_test1b";
 		String[] l_args = new String[]{
 				"-i", stratego_input
-				, "--gen-dir", output_base_dir};
+				, "--gen-dir", output_base_dir
+				, "--charoffset-converter"};
 		IStrategoTerm result = null;
 		try {
 			//result = org.strategoxt.imp.debug.stratego.transformer.trans.Main.mainNoExit(l_args);
@@ -83,7 +84,8 @@
 		String output_base_dir = StrategoFileManager.WORKING_DIR + "/" + "java_main_test2";
 		String[] l_args = new String[]{
 				"-i", stratego_input
-				, "--gen-dir", output_base_dir};
+				, "--gen-dir", output_base_dir
+				, "--charoffset-converter"};
 		IStrategoTerm result = null;
 		try {
 			result = org.strategoxt.imp.debug.stratego.transformer.trans.Main.mainNoExit(l_args);

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Wed Mar 30 11:41:58 2011	(r22451)
@@ -25,4 +25,5 @@
    org.osgi.framework,
    org.strategoxt.imp.runtime.dynamicloading",
  org.strategoxt.imp.debug.stratego.transformer.strategies;uses:="org.strategoxt.lang,org.spoofax.interpreter.terms",
+ org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util,
  org.strategoxt.imp.debug.stratego.transformer.trans;uses:="org.spoofax.interpreter.core,org.strategoxt.lang,org.spoofax.interpreter.terms"

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/InteropRegisterer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/InteropRegisterer.java	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/InteropRegisterer.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -12,6 +12,7 @@
 				, java_monitor_start_0_1.instance
 				, java_monitor_end_0_1.instance
 				, java_timer_print_0_0.instance
+				, java_create_fll_table_0_3.instance
 		});
 	}
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/FileLineLengthTable.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/FileLineLengthTable.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -0,0 +1,180 @@
+package org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
+public class FileLineLengthTable {
+
+	/**
+	 * Initialize the lengthPerLine array with this number of entries.
+	 * When the current file has more lines, the array will be copied to a larger array.
+	 */
+	public static final int DEFAULT_LINE_COUNT = 50;
+	
+	// currently just one stratego file
+	private int[] lengthPerLine = null;
+	
+	private int[] characterOffsetPerLine = null;
+	
+	private String filename = null;
+	
+	/**
+	 * Filename should be relative to baseDir.
+	 * @param baseDir
+	 * @param filename
+	 */
+	public FileLineLengthTable(String filename)
+	{
+		this.filename = filename;
+		this.lengthPerLine = new int[DEFAULT_LINE_COUNT];
+		this.characterOffsetPerLine = new int[DEFAULT_LINE_COUNT];
+	}
+	
+	
+	public void create(File baseDir)
+	{
+		new File(baseDir, filename);
+		File absLocation = new File(baseDir, filename);
+		BufferedReader br = null;
+		try {
+			br = new BufferedReader(new FileReader(absLocation));
+		} catch (FileNotFoundException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+		if (br == null) {
+			return;
+		}
+		String strLine;
+		// Read File Line By Line
+		int linenumber = 0;
+		try {
+			while ((strLine = br.readLine()) != null) {
+				// Print the content on the console
+				//System.out.println(strLine);
+				// TODO: Fix tabs?
+				int length = strLine.length() + 1; // also count the newline character
+				this.setLineLength(linenumber, length);
+				linenumber++;
+			}
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} finally {
+			try {
+				// Close the input stream
+				br.close();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+		}
+		// clean up the array, make it smaller so it will fit exactly.
+		this.lengthPerLine = compact(this.lengthPerLine, linenumber);
+		
+		createCharacterOffset();
+	}
+	
+	/**
+	 * Use a zero-based linenumber.
+	 * @param linenumber
+	 * @param length
+	 */
+	private void setLineLength(int linenumber, int length)
+	{
+		if (this.lengthPerLine.length <= linenumber)
+		{
+			// increase the size
+			this.lengthPerLine = expand(this.lengthPerLine, this.lengthPerLine.length + DEFAULT_LINE_COUNT);
+		}
+		this.lengthPerLine[linenumber] = length;
+	}
+	
+	private void createCharacterOffset()
+	{
+		this.characterOffsetPerLine = new int[this.lengthPerLine.length];
+		int sum = 0;
+		for(int i = 0; i < this.lengthPerLine.length; i++)
+		{
+			this.characterOffsetPerLine[i] = sum;
+			// next offset will be the previous offset plus the length of the current line
+			sum += this.lengthPerLine[i];
+		}
+	}
+	
+	protected void setEntry(int linenumber, int lineLength, int lineOffset)
+	{
+		// linelength
+		if (this.lengthPerLine.length <= linenumber)
+		{
+			// increase the size
+			this.lengthPerLine = expand(this.lengthPerLine, this.lengthPerLine.length + DEFAULT_LINE_COUNT);
+		}
+		this.lengthPerLine[linenumber] = lineLength;
+		// lineoffset
+		if (this.characterOffsetPerLine.length <= linenumber)
+		{
+			// increase the size
+			this.characterOffsetPerLine = expand(this.characterOffsetPerLine, this.characterOffsetPerLine.length + DEFAULT_LINE_COUNT);
+		}
+		this.characterOffsetPerLine[linenumber] = lineOffset;
+	}
+	
+	public int size()
+	{
+		return this.lengthPerLine.length;
+	}
+	
+	/**
+	 * Use a zero based linenumber.
+	 * @param linenumber
+	 * @return
+	 */
+	public int getLineLength(int linenumber)
+	{
+		return this.lengthPerLine[linenumber];
+	}
+	
+	public int getLineOffset(int linenumber)
+	{
+		return this.characterOffsetPerLine[linenumber];
+	}
+	
+	public String getFilename()
+	{
+		return this.filename;
+	}
+	
+	
+	/**
+	 * Create a new array with the given size and copy the contents of oldArray to the new array.
+	 * Every value after the last value set by the oldArray will be -1.
+	 * @param array
+	 * @param size
+	 * @return
+	 */
+	private static int[] expand(int[] oldArray, int size) {
+	    int[] temp = new int[size];
+	    System.arraycopy(oldArray, 0, temp, 0, oldArray.length);
+	    // fill everything with a -1 afterthe last valid value
+	    for(int j = oldArray.length; j < size; j++)
+	        temp[j] = -1;
+	    return temp;
+	}
+	
+	/**
+	 * Compact the given oldArray to the given size. Any element beyond the size are dropped.
+	 * @param oldArray
+	 * @param size
+	 * @return
+	 */
+	private static int[] compact(int[] oldArray, int size)
+	{
+		 int[] temp = new int[size];
+		 System.arraycopy(oldArray, 0, temp, 0, size);
+		 return temp;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/LineLengthTable.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/ffl_util/LineLengthTable.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -0,0 +1,150 @@
+package org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class LineLengthTable {
+
+	private Map<String, FileLineLengthTable> tablesPerFile = null;
+	
+	public LineLengthTable()
+	{
+		tablesPerFile = new HashMap<String, FileLineLengthTable>();
+	}
+	
+	public FileLineLengthTable getFileLineLengthTable(String filename)
+	{
+		if (!tablesPerFile.containsKey(filename))
+		{
+			tablesPerFile.put(filename, new FileLineLengthTable(filename));
+		}
+		return tablesPerFile.get(filename);
+	}
+	
+	public static LineLengthTable readLineLengthTable(File location)
+	{
+		LineLengthTable lineLengthTable = null; // return value
+		
+		BufferedReader reader = null;
+		try {
+			reader = new BufferedReader(new FileReader(location));
+		} catch (FileNotFoundException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+		if (reader == null)
+		{
+			// could not open file
+			System.out.println("Could not open file " + location);
+			return lineLengthTable;
+		}
+	    String line;
+	    int i = 0;
+	    try {
+	    	lineLengthTable = new LineLengthTable();
+			while ((line = reader.readLine()) != null)
+			{
+				String cells[] = line.split("\t");
+				// should have length 4
+				if (cells.length != 4)
+				{
+					System.err.println("Row " + i + " does not have 4 cells...");
+				}
+				String filename = cells[0];
+				String linenumberString = trimQuotes(cells[1]);
+				String lineLengthString = trimQuotes(cells[2]);
+				String lineOffsetString = trimQuotes(cells[3]);
+
+				int linenumber = Integer.parseInt(linenumberString);
+				int lineLength = Integer.parseInt(lineLengthString);
+				int lineOffset = Integer.parseInt(lineOffsetString);
+				
+				lineLengthTable.getFileLineLengthTable(filename).setEntry(linenumber, lineLength, lineOffset);
+				// next line please...
+				i++;
+			}
+		} catch (IOException e) {
+			System.out.println("Failed at row " + i);
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		return lineLengthTable;
+	}
+	
+	public static void writeLineLengthTable(File location, List<FileLineLengthTable> tables)
+	{
+		BufferedWriter writer = null;
+		try {
+			writer = new BufferedWriter(new FileWriter(location));
+		} catch (IOException e1) {
+			// TODO Auto-generated catch block
+			e1.printStackTrace();
+		}
+
+	    try {
+	    	for(FileLineLengthTable table : tables)
+	    	{
+	    		int size = table.size();
+	    		String name = table.getFilename();
+	    		for(int i = 0; i < size; i++)
+	    		{
+	    			writer.write(name); // filename
+	    			writer.write("\t");
+	    			writer.write(""+i);// linenumber
+	    			writer.write("\t");
+	    			writer.write(""+table.getLineLength(i)); // line length
+	    			writer.write("\t");
+	    			writer.write(""+table.getLineOffset(i)); // summarized offset
+	    			writer.newLine();
+	    		}
+	    		writer.flush();
+	    	}
+	    	writer.flush();
+
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} finally {
+			try {
+				writer.close();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+		}
+	}
+	
+	/**
+	 * Trims the quotes.
+	 * <p>
+	 * For example,
+	 * <ul>
+	 * <li>("a.b") => a.b
+	 * <li>("a.b) => "a.b
+	 * <li>(a.b") => a.b"
+	 * <li>(""a.b"") => "a.b"
+	 * </ul>
+	 * 
+	 * @param value
+	 *            the string may have quotes
+	 * @return the string without quotes
+	 */
+	public static String trimQuotes(String value) {
+		if (value == null)
+			return value;
+
+		value = value.trim();
+		if (value.startsWith("\"") && value.endsWith("\""))
+			return value.substring(1, value.length() - 1);
+
+		return value;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/java_create_fll_table_0_3.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/editor/java/org/strategoxt/imp/debug/stratego/transformer/strategies/java_create_fll_table_0_3.java	Wed Mar 30 11:41:58 2011	(r22451)
@@ -0,0 +1,105 @@
+package org.strategoxt.imp.debug.stratego.transformer.strategies;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.FileLineLengthTable;
+import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.LineLengthTable;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class java_create_fll_table_0_3 extends Strategy {
+
+	public static java_create_fll_table_0_3 instance = new java_create_fll_table_0_3();
+	
+	public IStrategoTerm invoke(Context context, IStrategoTerm current,	IStrategoTerm table_filename, IStrategoTerm base_dir, IStrategoTerm input_files)
+	{
+		System.out.println("CREATE FLL");
+		String tf = table_filename.toString();
+		File charOffsetTableFilename = new File(LineLengthTable.trimQuotes(tf));
+		
+		String bd = base_dir.toString();
+		File strategoSourceBasedir = new File(LineLengthTable.trimQuotes(bd));
+		
+		Collection<File> inputFiles = new ArrayList<File>();
+		if (input_files.isList())
+		{
+			IStrategoList list = (IStrategoList) input_files;
+			for(int i = 0; i < list.size(); i++)
+			{
+				String inputfile = LineLengthTable.trimQuotes(list.getSubterm(i).toString());
+				inputFiles.add(new File(inputfile));
+			}
+		}
+		
+		generateOffsetTable(charOffsetTableFilename, strategoSourceBasedir, inputFiles);
+		return table_filename;
+	}
+	
+	/**
+	 * Returns true if file has parent path that is equal to the path of prefix.
+	 * @param file
+	 * @param prefix
+	 * @return
+	 */
+	private boolean isPrefixOf(File file, File prefix)
+	{
+		if (file == null || prefix == null)
+		{
+			return false;
+		}
+		File parent = file.getParentFile();
+		while(parent != null && !prefix.equals(parent))
+		{
+			parent = parent.getParentFile();
+		}
+		
+		return prefix.equals(parent);
+	}
+	
+	/**
+	 * Creates a table with the length per line, so we can convert a linenumber+token_line_offset to a token_file_offset
+	 */
+	protected void generateOffsetTable(File charOffsetTableFilename, File strategoSourceBasedir, Collection<File> inputFiles)
+	{
+		// create character offset table
+		// TODO: optimize
+		List<FileLineLengthTable> tables = new ArrayList<FileLineLengthTable>();
+		for(File inputFilePath : inputFiles) // TODO: sort the inputFiles on their path
+		{
+			File basedir = strategoSourceBasedir; // end with '/'
+			String filename = "";
+			//IPath inputFilePath = new Path(inputFileString);
+			if (isPrefixOf(inputFilePath, basedir)) {
+				//inputFile = inputFile.substring(basedir.length()); // make relative to the basedir
+				//inputFilePath = inputFilePath.makeRelativeTo(basedir);
+				try {
+					int length = basedir.getCanonicalPath().length();
+					filename = inputFilePath.getCanonicalPath().substring(length+1); // +1 removes the leading "/"
+				} catch (IOException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			}
+			else
+			{
+				System.err.println("inputfile '"+inputFilePath+"' is not located in the strategoSourceBasedir '"+strategoSourceBasedir+"'");
+			}
+			if (filename == null || "".equals(filename))
+			{
+				System.err.println("Filename not set!");
+			}
+			FileLineLengthTable t = new FileLineLengthTable(filename);
+			t.create(basedir);
+			tables.add(t);
+		}
+		
+		LineLengthTable.writeLineLengthTable(charOffsetTableFilename, tables);
+	}
+	
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/charoffset-converter.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/charoffset-converter.str	Wed Mar 30 11:41:58 2011	(r22451)
@@ -0,0 +1,43 @@
+module charoffset-converter
+
+imports 
+	libstratego-lib
+
+imports stratego-transformer
+
+strategies
+	
+	// use a java strategy to read multiple files and create an offset-table
+	// every filepath in input-files should have base-dir as prefix path
+	// output will be saved in table-filename
+	create-file-line-length-table(/*|table-filename, base-dir, input-files**/) =
+		?transformer-result* // [ (status, generated-filename, input-filename), ...]
+		; base-dir := <get-base-path>
+		; output-base-path := <get-config> "--gen-dir"
+		; table-filename := $[[output-base-path]/linelength.offset]
+		; <debug(!"transformer-result: ")> transformer-result*
+		; input-files* := <map(
+		  	debug
+		  	/*; ?(status, generated-filename, input-filename)*/
+		  	; Third 
+		  	  //; !input-filename
+		  	)> transformer-result*
+		; <debug(!"table-filename: ")> table-filename
+		; <debug(!"base-dir: ")> base-dir
+		; <debug(!"input-files*: ")> input-files*
+		; java-create-fll-table(|table-filename, base-dir, input-files*)
+
+	external java-create-fll-table(|table-filename, base-dir, input-files*)
+	
+	// only create if option "--charoffset-converter" is set	
+	// current term = [ (status, generated-filename, input-filename), ...]
+	file-line-length-table-helper =
+		?transformer-result
+	  	; (
+	  	(<get-config> "--charoffset-converter")
+	  		<
+	  			// create charoffset-table
+	  			<create-file-line-length-table> transformer-result // success, make charoffset-table
+	  		+
+	  			id //fail, skip
+	  	)
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str	Wed Mar 30 11:17:54 2011	(r22450)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/trans/stratego-transformer.str	Wed Mar 30 11:41:58 2011	(r22451)
@@ -9,6 +9,8 @@
 
   traverse-imports
   	
+  charoffset-converter // convert line-based offsets to file-based offsets
+  	
 rules // Main editor interface (defined by editor/Test-Builders and -References.esv)
  
 
@@ -28,6 +30,13 @@
 	
 	execute-wrap = java-monitor-start(|"execute"); execute ; java-monitor-end(|"execute"); java-monitor-end(|"main"); java-timer-print
 	
+	// let user specify its own base-dir, base-dir is the toplevel directory containing the stratego files (in eclipse it would be the project dir)
+	// if not specified use the directory of stratego-input-path
+	get-base-path =  
+	(<get-config> "--base-dir") 
+		< (<get-config> "--base-dir")
+		+ (stratego-input-path := <get-config> "-i";<dirname> stratego-input-path)
+	
 	execute =
 		//check-options ; 
 		library-paths* := <get-config-I> // ; debug(!"-I: ")
@@ -36,14 +45,16 @@
 		//; base-path := <dirname> stratego-input-path 
 		// let user specify its own base-dir, base-dir is the toplevel directory containing the stratego files (in eclipse it would be the project dir)
 		// if not specified use the directory of stratego-input-path
-		; ((<get-config> "--base-dir") <+ (<dirname> stratego-input-path)) ; ?base-path
+		; get-base-path ; ?base-path
+		; debug(!"base-path:")
+		; <debug(!"stratego-input-path:")> stratego-input-path
 		//; stratego-file := <base-filename> stratego-input-path
 		// make stratego-input-path absolute, and strip the basepath
 		; (parent, stratego-file) := <split-path(|base-path)> stratego-input-path
 		; 
 		  <check-input-file> stratego-input-path // check if the input file exists
 		  <
-		  	 !(base-path, output-base-path, stratego-file) ; apply-debug-project(|library-paths*); java-store-term
+		  	 !(base-path, output-base-path, stratego-file) ; apply-debug-project(|library-paths*); java-store-term; file-line-length-table-helper
 		  + 
 		  	debug(!"Failure: Cannot add debug information! ")
 		  	
@@ -89,6 +100,11 @@
 			, where(<extend-config> ("-I", [<id>]))
  			, !"-I directory     Stratego files in this external directory will also be debug-transformed when they are used as imports by the main stratego program."
 		)
+		+ Option("--charoffset-converter"
+			, <set-config> ("--charoffset-converter", ())
+			, !"--charoffset-converter     Create line offset table."
+			
+		)
   get-config-I =
     <get-config> "-I" <+ ![]
 

From tobivollebregt at gmail.com  Wed Mar 30 14:09:24 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Wed, 30 Mar 2011 12:09:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22452 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20110330120924.CF26A2B803A@mx2.tudelft.nl>

Author: tvo
Date: Wed Mar 30 12:09:24 2011
New Revision: 22452
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22452&sc=1

Log:
Number arguments in Stratego editor (Spoofax/231)

(same name for all arguments is much more severe with linked mode)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Wed Mar 30 11:41:58 2011	(r22451)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Wed Mar 30 12:09:24 2011	(r22452)
@@ -47,7 +47,7 @@
     RDecT(x, s*, t*) -> (<remove-quote> x, <length> s*, <length> t*)
 
   signature-of:
-    ExtSDef(x, s*, t*) -> (<remove-quote> x, <length> s*, <length> t*) 
+    ExtSDef(x, s*, t*) -> (<remove-quote> x, <length> s*, <length> t*)
 
   signature-of:
     CallT(SVar(x), s*, t*) -> (<remove-quote> x, <length> s*, <length> t*)
@@ -62,11 +62,11 @@
     Op(x, t*) -> (<remove-quote> x, <length> t*)
 
   signature-of:
-    OpDecl(x, t) -> (<remove-quote> x, <dec> <occurrences(?ConstType(_))> t) 
+    OpDecl(x, t) -> (<remove-quote> x, <dec> <occurrences(?ConstType(_))> t)
 
   signature-of:
     ExtOpDecl(x, t) -> (<remove-quote> x, <dec> <occurrences(?ConstType(_))> t)
-    
+
   signature-of:
     Overlay(x, t*, _) -> (<remove-quote> x, <length> t*)
 
@@ -78,11 +78,11 @@
 
   signature-of:
     DynRuleScopeId(x) -> <remove-quote> x
-  
+
   remove-quote:
     COMPLETION(s) -> COMPLETION(<remove-quote> s)
-  
-  remove-quote: 
+
+  remove-quote:
     s -> s'
     with
       if explode-string => ['\'' | s_tail] then
@@ -107,7 +107,7 @@
     signature-of; (?_{<Declaration>} <+ ?(_{<Declaration>}, _) <+ ?(_{<Declaration>}, _, _))
 
 rules // Helpers
-  
+
   declare-definition:
     def -> cookie
     with
@@ -137,7 +137,7 @@
     one(?_{cookie} + ?SVar(_{cookie}))
 
   external SRTS-EXT-newint(|)
-  
+
 rules // Declare globals
 
   declare-globals-top =
@@ -174,7 +174,7 @@
     ExtOpDecl(x, t) -> <id>
     with
      redeclare-definition
-  
+
   declare-globals:
     Overlay(x, t, d) -> Overlay(x', t, d)
     with
@@ -192,7 +192,7 @@
     full-path -> ast
     with
       ast := <id>
-  
+
   declare-globals:
     Import(x) -> Import(x)
     with
@@ -228,7 +228,7 @@
      <+ full-path := <file-exists> $[[<ProjectDir>]/syntax/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/syn/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/src/syntax/[x]]
-  
+
   read-stratego-signatures:
     str -> <to-signatures> file
     where
@@ -240,7 +240,7 @@
       else
         file := <parse-stratego-file> str
       end
-  
+
   fetch-library-ast:
     x -> <pack-stratego-parse-stratego> (IncludeFromPath(x), [])
 
@@ -252,10 +252,10 @@
     SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
     with
       s' := <collect-all(?RDecT(_, _, _))> s
-   
+
   remove-stratego-bodies:
     Import(_) -> ()
-   
+
   remove-stratego-bodies:
     ImportWildcard(_) -> ()
 
@@ -289,7 +289,7 @@
         ["fold", "bigfold"];
       <map(declare-dr-rule(|x, cookie, s'*, t'*))>
         ["once", "bagof", "bigbagof", "all-keys", "innermost-scope", "break", "break-bp", "continue", "chain", "bigchain"]
-      
+
   declare-dr-rule(|x,cookie,s,t) =
     ?prefix;
     sig := ($[[prefix]-[x]], s, t);
@@ -361,7 +361,7 @@
     with
       {| DeclareCookie:
         t'* := <map(declare-tvar)> t*;
-        d'  := <declare-bodies-top> d 
+        d'  := <declare-bodies-top> d
       |}
 
   declare-bodies:
@@ -395,7 +395,7 @@
     with
       t1' := <declare-match> t1;
       w'  := <declare-bodies-top> w;
-      t2' := <declare-bodies-top> t2 
+      t2' := <declare-bodies-top> t2
 
   declare-bodies:
     LRule(r) -> LRule(r')
@@ -415,12 +415,12 @@
   declare-bodies:
     DynRuleScopeId(x) -> DynRuleScopeId(x')
     where
-      x' := x{<declare-cookie-of>} 
+      x' := x{<declare-cookie-of>}
 
   declare-bodies:
     LabeledDynRuleScopeId(x, t) -> LabeledDynRuleScopeId(x', t')
     where
-      x' := x{<signature-of; DeclareCookie>}; 
+      x' := x{<signature-of; DeclareCookie>};
       t' := <declare-bodies-top> t
 
   declare-bodies:
@@ -529,7 +529,7 @@
       rules(
         ContentProposals := proposals
       )
-  
+
   propose-completion:
     Rule(lhs, rhs @ Var(COMPLETION(_)), _) -> proposals
     where
@@ -540,10 +540,20 @@
       rules(
         ContentProposals := proposals
       )
-  
+
   filter-by-prefix(|prefix) =
     filter(one(string-starts-with(|prefix); not(?"")))
-  
+
+  numbered-arguments =
+    ?(n, prefix);
+    if <gt> (n, 1) then
+      <range> (1, <inc> n);
+      map(\t -> <conc-strings> (prefix, <int-to-string> t)\);
+      separate-by(|", ")
+    else
+      ![prefix]
+    end
+
   signature-to-proposal:
     (x, 0) -> [x | parentheses]
     with
@@ -558,7 +568,7 @@
     where
       <gt> (n, 0)
     with
-      t* := <separate-by(|", ")> <copy> (n, "t") // TODO: number (Spoofax/231)
+      t* := <numbered-arguments> (n, "t")
 
   signature-to-proposal:
     (x, 0, 0) -> [x, ""]
@@ -568,15 +578,15 @@
     where
       <gt> (n, 0)
     with
-      t* := <separate-by(|", ")> <copy> (n, "s")
+      t* := <numbered-arguments> (n, "s")
 
   signature-to-proposal:
     (x, n, m) -> [x, "(", s*, "|", t*, ")"]
     where
       <gt> (m, 0)
     with
-      s* := <separate-by(|", ")> <copy> (n, "s");
-      t* := <separate-by(|", ")> <copy> (m, "t")
+      s* := <numbered-arguments> (n, "s");
+      t* := <numbered-arguments> (m, "t")
 
   signature-to-proposal:
     (x, [DR_DUMMY()], [DR_DUMMY()]) -> x // strategy param (wildcard arity)
@@ -636,7 +646,7 @@
         IsNoConflict
       )
 
-  // FIXME: name sdefs after constructors to fix constructor conflict errors 
+  // FIXME: name sdefs after constructors to fix constructor conflict errors
   constraint-error:
     OpDecl(x{cookie}, s*) -> [(x, $[Conflicts with strategy '[y_name]']),
                               (y, $[Conflicts with constructor [x]/[<length> s*]])]
@@ -651,10 +661,10 @@
 
   constraint-error:
     Rule(_, t, _) -> <constraint-error-bad-build> t
-  
+
   constraint-error:
     BA(_, t) -> <constraint-error-bad-build> t
-  
+
   constraint-error:
     App(_, t) -> <constraint-error-bad-build> t
 
@@ -685,7 +695,7 @@
       filter(not(?RootApp(_) + ?App(_, _)));
       map(!(<id>, "Build symbol in match pattern")) => builds;
       require([])
-  
+
   constraint-warning:
     Assign(v @ Var(x), _) -> (x, $[Variable '[x]' may be bound already])
     where

From R.B.Vermaas at tudelft.nl  Wed Mar 30 16:05:49 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 30 Mar 2011 14:05:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22453 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
Message-ID: <20110330140549.7141CCC0D2@mx4.tudelft.nl>

Author: rob
Date: Wed Mar 30 14:05:48 2011
New Revision: 22453
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22453&sc=1

Log:
SGLRParseController.getResource(): return null if path == null

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Mar 30 12:09:24 2011	(r22452)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	Wed Mar 30 14:05:48 2011	(r22453)
@@ -157,6 +157,10 @@
     
     public IFile getResource() {
     	IPath path = getPath();
+    	
+    	if(path == null)
+    		return null;
+    	
     	if (getProject() == null) {
     		// HACK: out-of-project resource (Spoofax/95)
     		return ResourcesPlugin.getWorkspace().getRoot().getFile(path);

From R.B.Vermaas at tudelft.nl  Thu Mar 31 08:34:38 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 31 Mar 2011 06:34:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22454 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
Message-ID: <20110331063438.B23CE7F800E@mx1.tudelft.nl>

Author: rob
Date: Thu Mar 31 06:34:38 2011
New Revision: 22454
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22454&sc=1

Log:
add openEditor variant with offset argument, to allow to jump to specific place in the file

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Wed Mar 30 14:05:48 2011	(r22453)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	Thu Mar 31 06:34:38 2011	(r22454)
@@ -6,7 +6,9 @@
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.model.ISourceProject;
 import org.eclipse.imp.parser.IParseController;
+import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.IDocument;
+import org.eclipse.jface.text.IRegion;
 import org.eclipse.jface.text.Region;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.widgets.Display;
@@ -20,6 +22,7 @@
 import org.eclipse.ui.ide.IDE;
 import org.eclipse.ui.texteditor.AbstractTextEditor;
 import org.eclipse.ui.texteditor.IDocumentProvider;
+import org.eclipse.ui.texteditor.ITextEditor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.client.imploder.IToken;
 import org.spoofax.jsglr.client.imploder.ITokenizer;
@@ -239,6 +242,19 @@
 	}
 
 	/**
+	 * Asynchronously opens or activates an editor and jump to specified offset.
+	 * 
+	 * Exceptions are swallowed and logged.
+	 */
+	public static void asyncOpenEditor(Display display, final IFile file, final int offset, final boolean activate) {
+		display.asyncExec(new Runnable() {
+			public void run() {
+				openEditor(file, offset, activate);
+			}
+		});
+	}
+
+	/**
 	 * Opens a new editor. Must be invoked from the UI thread.
 	 * 
 	 * PartInitExceptions are swallowed and logged.
@@ -254,5 +270,24 @@
 		} catch (PartInitException e) {
 			Environment.logException("Cannot open an editor for " + file, e);
 		}
+	}
+	
+	/**
+	 * Opens a new editor and jump to offset. Must be invoked from the UI thread.
+	 * 
+	 * PartInitExceptions are swallowed and logged.
+	 */
+	public static void openEditor(final IFile file, final int offset, final boolean activate) {
+		if (!isUIThread())
+			throw new IllegalStateException("Must be called from UI thread");
+		
+		IWorkbenchPage page =
+			PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
+		try {
+			ITextEditor ite = (ITextEditor) IDE.openEditor(page, file, UniversalEditor.EDITOR_ID, activate);
+			ite.selectAndReveal(offset, 0);
+		} catch (PartInitException e) {
+			Environment.logException("Cannot open an editor for " + file, e);
+		}
 	}
 }

From tobivollebregt at gmail.com  Thu Mar 31 09:58:27 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 31 Mar 2011 07:58:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22455 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110331075827.F2C6F2B800E@mx2.tudelft.nl>

Author: tvo
Date: Thu Mar 31 07:58:27 2011
New Revision: 22455
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22455&sc=1

Log:
Get completion prefix always from lexical identifier at offset;
the "prefix" in the tree may extend (far) beyond offset.

(The old behaviour violates assumptions in ContentProposal, i.e.
that newText starts at offset - prefix.length(). Also too many
completions were filtered out sometimes due to this.)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Thu Mar 31 06:34:38 2011	(r22454)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Thu Mar 31 07:58:27 2011	(r22455)
@@ -156,16 +156,18 @@
 	@Override
 	public void apply(IDocument document) {
 		try {
-	        Region range = getRange();
-			String newText = newTextParts == null
+			final Region range = getRange();
+			final String newText = newTextParts == null
 					? getNewText()
 					: proposalPartsToString(document, newTextParts);
+			final String prefix = getPrefix();
 			justApplied = true;
-			document.replace(range.getOffset(), range.getLength(), newText.substring(getPrefix().length()));
+			assert document.get(range.getOffset() - prefix.length(), prefix.length()).equals(prefix);
+			document.replace(range.getOffset(), range.getLength(), newText.substring(prefix.length()));
 
 			if (newTextParts != null) {
-				Point selection = proposalPartsToSelection(document, newTextParts, range.getOffset() - getPrefix().length());
-				goToLinkedMode(viewer, range.getOffset() - getPrefix().length(), document, selection.x, newTextParts);
+				Point selection = proposalPartsToSelection(document, newTextParts, range.getOffset() - prefix.length());
+				goToLinkedMode(viewer, range.getOffset() - prefix.length(), document, selection.x, newTextParts);
 			}
 
 		} catch (BadLocationException e) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Thu Mar 31 06:34:38 2011	(r22454)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerParser.java	Thu Mar 31 07:58:27 2011	(r22455)
@@ -29,55 +29,55 @@
 
 /**
  * Content completion parsing and tree construction
- * 
+ *
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class ContentProposerParser {
-	
+
 	protected static final IStrategoConstructor COMPLETION_CONSTRUCTOR =
 		getTermFactory().makeConstructor("COMPLETION", 1);
-	
+
 	protected static final IStrategoConstructor COMPLETION_UNKNOWN =
 		getTermFactory().makeConstructor("NOCONTEXT", 1);
 
 	private static final long REINIT_PARSE_DELAY = 4000;
-	
+
 	private final Pattern identifierLexical;
-	
+
 	private SGLRParseController parser;
-	
+
 	private IStrategoTerm lastParserAst;
-	
+
 	private IStrategoTerm lastCompletionAst;
-	
+
 	private IStrategoTerm lastCompletionNode;
-	
+
 	private String lastCompletionPrefix;
-	
+
 	private String lastDocument;
-	
+
 	private int lastOffset;
-	
+
 	private IStrategoTerm completionNode;
-	
+
 	private String completionPrefix;
-	
+
 	public ContentProposerParser(Pattern identifierLexical) {
 		this.identifierLexical = identifierLexical;
 	}
-	
+
 	protected SGLRParseController getParser() {
 		return parser;
 	}
-	
+
 	public IStrategoTerm getCompletionNode() {
 		return completionNode;
 	}
-	
+
 	public String getCompletionPrefix() {
 		return completionPrefix;
 	}
-	
+
 	public boolean isFatalSyntaxError() {
 		return lastCompletionAst == null && lastParserAst == null && completionNode == null;
 	}
@@ -86,7 +86,7 @@
 		lastCompletionNode = completionNode;
 		lastCompletionPrefix = completionPrefix;
 		completionNode = null;
-		
+
 		SGLRParseController controller = this.parser = getParser(icontroller);
 		IStrategoTerm ast = tryReusePreviousAst(offset, document);
 		if (ast != null) return ast;
@@ -94,8 +94,8 @@
 		String documentWithToken = document.substring(0, offset) + COMPLETION_TOKEN + document.substring(offset);
 		ast = parse(controller, offset, documentWithToken, avoidReparse);
 		if (ast == null) return null;
-		
-		IStrategoTerm result = identifyCompletionNode(ast, COMPLETION_TOKEN);
+
+		IStrategoTerm result = identifyCompletionNode(ast, offset, document, COMPLETION_TOKEN);
 		if (completionNode == null) result = addNoContextNode(ast, offset, document);
 		return result;
 	}
@@ -103,7 +103,7 @@
 	private IStrategoTerm parse(SGLRParseController controller, int offset, String document, boolean avoidReparse) {
 		JSGLRI parser = controller.getParser();
 		IStrategoTerm result;
-		
+
 		controller.scheduleParserUpdate(REINIT_PARSE_DELAY, true); // cancel current parse
 		Debug.startTimer();
 		controller.getParseLock().lock();
@@ -162,7 +162,7 @@
 		lastOffset = offset;
 		return null;
 	}
-	
+
 	/**
 	 * @return Whether doc1 and doc2 are equal disregarding the last
 	 * identifierLexical immediately before offset. If there is no
@@ -174,7 +174,7 @@
 		if (s1 == null || s2 == null) return false;
 		return s1.equals(s2);
 	}
-	
+
 	/**
 	 * @return s with the occurrence of p immediately before endIndex removed,
 	 * or null if p does not match before endIndex. Note: only examines the
@@ -190,7 +190,7 @@
 		}
 		return null;
 	}
-	
+
 	private IStrategoTerm reusePreviousAst(int offset, String document, String prefix) {
 		completionPrefix = prefix;
 		lastDocument = document;
@@ -213,7 +213,7 @@
 			return null;
 		}
 	}
-	
+
 	private IStrategoTerm forceUseOldAst(SGLRParseController parser, int offset, String document) {
 		if (parser.getCurrentAst() != lastParserAst) { // parser has a more recent AST
 			lastParserAst = parser.getCurrentAst();
@@ -232,15 +232,15 @@
 			controller = ((DynamicParseController) controller).getWrapped();
 		return (SGLRParseController) controller;
 	}
-	
-	private IStrategoTerm identifyCompletionNode(final IStrategoTerm ast, final String completionToken) {
+
+	private IStrategoTerm identifyCompletionNode(final IStrategoTerm ast, final int offset, final String document, final String completionToken) {
 		class Visitor extends TermVisitor {
 			IStrategoTerm result = ast;
 			public void preVisit(IStrategoTerm node) {
 				if (isTermString(node)) {
 					String value = ((IStrategoString) node).stringValue();
 					if (value.indexOf(completionToken) > -1) {
-						putCompletionNode(node, value.replace(completionToken, ""), false);
+						putCompletionNode(node, readPrefix(offset, document), false);
 						result = getRoot(completionNode);
 					}
 				}
@@ -250,7 +250,7 @@
 		visitor.visit(ast);
 		return visitor.result;
 	}
-	
+
 	/**
 	 * Creates a new abstract syntax tree with the given node
 	 * replaced by a COMPLETION(prefix) term,
@@ -258,9 +258,9 @@
 	 */
 	private void putCompletionNode(IStrategoTerm node, final String prefix, final boolean noContext) {
 		final ParentTermFactory factory = new ParentTermFactory(Environment.getTermFactory());
-		
+
 		final IStrategoTerm targetNode = tryGetCompletionNodeWrappingTerm(node);
-		
+
 		new TermTransformer(factory, true) {
 			@Override
 			public IStrategoTerm preTransform(IStrategoTerm current) {
@@ -293,11 +293,11 @@
 		assert getParent(node) == null || tryGetConstructor(getParent(node)) != COMPLETION_CONSTRUCTOR;
 		return node;
 	}
-	
+
 	private IStrategoTerm addNoContextNode(IStrategoTerm ast, final int offset, String document) {
 		class Visitor extends TermVisitor {
 			IStrategoTerm targetNode, lastNode;
-			
+
 			public void preVisit(IStrategoTerm node) {
 				if (getLeftToken(node).getStartOffset() <= offset
 						&& offset <= getRightToken(node).getEndOffset()) {
@@ -315,7 +315,7 @@
 		}
 		return ast;
 	}
-	
+
 	/**
 	 * Read the identifier at the offset location, using
 	 * the identifier lexical regular expression.
@@ -333,5 +333,5 @@
 		}
 		return document.substring(0, offset);
 	}
-	
+
 }

From tobivollebregt at gmail.com  Thu Mar 31 09:58:35 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 31 Mar 2011 07:58:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22456 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110331075835.9C8FFCC057@mx4.tudelft.nl>

Author: tvo
Date: Thu Mar 31 07:58:35 2011
New Revision: 22456
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22456&sc=1

Log:
Replace the selection on completion, instead of inserting at the left end.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Mar 31 07:58:27 2011	(r22455)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	Thu Mar 31 07:58:35 2011	(r22456)
@@ -25,6 +25,7 @@
 import org.eclipse.jface.text.ITextViewer;
 import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.contentassist.ICompletionProposal;
+import org.eclipse.swt.graphics.Point;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -281,9 +282,12 @@
 			int offset, Set<String> sorts, ITextViewer viewer) {
 
 		final ArrayList<ICompletionProposal> results = new ArrayList<ICompletionProposal>();
-		final Region offsetRegion = new Region(offset, 0);
+		final Point selection = viewer.getSelectedRange();
+		final Region offsetRegion = new Region(selection.x, selection.y);
 		boolean backTrackResultsOnly = false;
 
+		assert offset == offsetRegion.getOffset();
+
 		for (Completion proposal : completions) {
 			String proposalPrefix = proposal.getPrefix();
 			if (proposal.getSort() != null && !sorts.contains(proposal.getSort()))

From R.B.Vermaas at tudelft.nl  Thu Mar 31 10:10:01 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 31 Mar 2011 08:10:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22457 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing: . META-INF
	editor editor/java/org/strategoxt/imp/testing/strategies trans
Message-ID: <20110331081001.1C6622B8013@mx2.tudelft.nl>

Author: rob
Date: Thu Mar 31 08:10:00 2011
New Revision: 22457
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22457&sc=1

Log:
initial version of spoofax test runner

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_init_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Thu Mar 31 07:58:35 2011	(r22456)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/META-INF/MANIFEST.MF	Thu Mar 31 08:10:00 2011	(r22457)
@@ -4,7 +4,7 @@
 Bundle-SymbolicName: org.strategoxt.imp.testing; singleton:=true
 Bundle-Version: 1.0.0.qualifier
 Bundle-Activator: org.strategoxt.imp.testing.Activator
-Import-Package: org.osgi.framework;version="1.3.0"
+Import-Package: org.osgi.framework
 Require-Bundle: org.strategoxt.imp.runtime,
  org.eclipse.core.runtime,
  org.eclipse.core.resources,
@@ -20,7 +20,8 @@
  org.eclipse.jdt.junit,
  org.eclipse.jdt.core,
  org.spoofax.terms,
- org.strategoxt.strj
+ org.strategoxt.strj,
+ org.eclipse.ui.forms
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Export-Package: org.strategoxt.imp.testing

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Builders.esv	Thu Mar 31 07:58:35 2011	(r22456)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/Spoofax-Testing-Builders.esv	Thu Mar 31 08:10:00 2011	(r22457)
@@ -16,8 +16,8 @@
                                                                                                                                
   observer : editor-analyze                                                                                   
                                                                                                                                
-  builder  : "Generate JUnit test"            = generate-java (openeditor)               
   builder  : "Show abstract syntax (for selection)"          = generate-aterm (openeditor) (realtime) (meta) (source)  
   builder  : "Generate missing output file with current AST" = generate-ast-file (cursor)              
+  builder  : "Run testsuites" = test-runner
                                                                                                                                
   //on save : generate-java                                                                                                    
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Thu Mar 31 07:58:35 2011	(r22456)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/InteropRegisterer.java	Thu Mar 31 08:10:00 2011	(r22457)
@@ -17,6 +17,12 @@
         		   plugin_get_property_values_0_1.instance,
         		   get_service_input_term_0_1.instance,
         		   open_editor_0_0.instance,
+        		   testview_init_0_0.instance,
+        		   testview_add_testsuite_0_0.instance,
+        		   testview_add_testcase_0_3.instance,
+        		   testview_start_testcase_0_2.instance,
+        		   testview_finish_testcase_0_3.instance,
+        		   parse_spt_string_0_0.instance,
         		   get_completion_input_term_0_1.instance });
          }
        }

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java	Thu Mar 31 08:10:00 2011	(r22457)
@@ -0,0 +1,70 @@
+package org.strategoxt.imp.testing.strategies;
+
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.io.IOException;
+
+import org.eclipse.imp.language.Language;
+import org.eclipse.imp.language.LanguageRegistry;
+import org.eclipse.imp.parser.IParseController;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.shared.BadTokenException;
+import org.spoofax.jsglr.shared.SGLRException;
+import org.spoofax.jsglr.shared.TokenExpectedException;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
+import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
+import org.strategoxt.imp.runtime.parser.JSGLRI;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+/**
+ * parse-spt-string strategy to get AST of Spoofax-Testing testsuite, 
+ * where the input fragments have been annotated with the AST of the input.
+ */
+public class parse_spt_string_0_0 extends Strategy {
+
+	public static parse_spt_string_0_0 instance = new parse_spt_string_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		if (!isTermString(current)) return null;
+		String input = ((IStrategoString)current ).stringValue();
+		
+		Language l = LanguageRegistry.findLanguage("Spoofax-Testing");
+		Descriptor d = Environment.getDescriptor(l);
+		IStrategoTerm result = null;
+		try {				
+			IParseController ip = d.createParseController();
+			if (ip instanceof DynamicParseController)
+				ip = ((DynamicParseController) ip).getWrapped();
+			if (ip instanceof SGLRParseController) {
+				SGLRParseController sglrController = (SGLRParseController) ip;
+				JSGLRI res = sglrController.getParser(); 
+				res.setUseRecovery(true);
+			    result = res.parse(input, "string");
+			}
+		} catch (BadDescriptorException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (TokenExpectedException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (BadTokenException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (SGLRException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		} catch (IOException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		
+		return result;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testcase_0_3.java	Thu Mar 31 08:10:00 2011	(r22457)
@@ -0,0 +1,47 @@
+package org.strategoxt.imp.testing.strategies;
+
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.lang.reflect.Method;
+
+import org.eclipse.jface.dialogs.InputDialog;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.ui.IViewPart;
+import org.eclipse.ui.PartInitException;
+import org.eclipse.ui.PlatformUI;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class testview_add_testcase_0_3 extends Strategy {
+
+	public static testview_add_testcase_0_3 instance = new testview_add_testcase_0_3();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1, IStrategoTerm arg2) {
+		if (!isTermString(arg0) || !isTermString(arg1) ) return null;
+		
+		final String ts = ((IStrategoString)arg0).stringValue();
+		final String desc = ((IStrategoString)arg1).stringValue();
+		final int offset = ((IStrategoInt)arg2).intValue();
+		
+		Display.getDefault().syncExec(new Runnable() {
+            public void run() {
+			  	try {       
+					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+					// Using reflection, because if I use a cast, I get a ClassCastException 
+					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+					Method m = a.getClass().getMethod("addTestcase", new Class[] {String.class, String.class, int.class}) ;
+					m.invoke(a, ts, desc, offset);
+			  	} catch(Exception e) {
+			  		e.printStackTrace();
+			  	}  
+            }
+		});
+		
+		return current;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_add_testsuite_0_0.java	Thu Mar 31 08:10:00 2011	(r22457)
@@ -0,0 +1,42 @@
+package org.strategoxt.imp.testing.strategies;
+
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.lang.reflect.Method;
+
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.ui.IViewPart;
+import org.eclipse.ui.PlatformUI;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class testview_add_testsuite_0_0 extends Strategy {
+
+	public static testview_add_testsuite_0_0 instance = new testview_add_testsuite_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		if (!isTermString(current)) return null;
+
+		final String name = ((IStrategoString)current).stringValue();
+		
+		Display.getDefault().syncExec(new Runnable() {
+            public void run() {
+			  	try {       
+					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+					// Using reflection, because if I use a cast, I get a ClassCastException 
+					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+					Method m = a.getClass().getMethod("addTestsuite", new Class[] {String.class}) ;
+					m.invoke(a, name);
+			  	} catch(Exception e) {
+			  		e.printStackTrace();
+			  	}  
+            }
+		});
+		
+		return current;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_finish_testcase_0_3.java	Thu Mar 31 08:10:00 2011	(r22457)
@@ -0,0 +1,52 @@
+package org.strategoxt.imp.testing.strategies;
+
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.lang.reflect.Method;
+
+import org.eclipse.jface.dialogs.InputDialog;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.ui.IViewPart;
+import org.eclipse.ui.PartInitException;
+import org.eclipse.ui.PlatformUI;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class testview_finish_testcase_0_3 extends Strategy {
+
+	public static testview_finish_testcase_0_3 instance = new testview_finish_testcase_0_3();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1, IStrategoTerm arg2) {
+		if (!isTermString(arg0) || !isTermString(arg1) ) return null;
+		
+		final String ts = ((IStrategoString)arg0).stringValue();
+		final String desc = ((IStrategoString)arg1).stringValue();
+		final String appl = ((IStrategoAppl)arg2).getConstructor().getName();
+		
+		Display.getDefault().syncExec(new Runnable() {
+            public void run() {
+			  	try {
+					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+					// Using reflection, because if I use a cast, I get a ClassCastException 
+					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+					Method m = a.getClass().getMethod("finishTestcase", new Class[] {String.class, String.class, boolean.class}) ;
+					if(appl.equals("True")) {
+						m.invoke(a, ts, desc, true);
+					} else {
+						m.invoke(a, ts, desc, false);
+					}
+			  	} catch(Exception e) {
+			  		e.printStackTrace();
+			  	}  
+            }
+		});
+		
+		return current;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_init_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_init_0_0.java	Thu Mar 31 08:10:00 2011	(r22457)
@@ -0,0 +1,35 @@
+package org.strategoxt.imp.testing.strategies;
+
+import java.lang.reflect.Method;
+
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.ui.IViewPart;
+import org.eclipse.ui.PlatformUI;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class testview_init_0_0 extends Strategy {
+
+	public static testview_init_0_0 instance = new testview_init_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		Display.getDefault().syncExec(new Runnable() {
+            public void run() {
+			  	try {       
+					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+					// Using reflection, because if I use a cast, I get a ClassCastException 
+					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+					Method m = a.getClass().getMethod("reset", new Class[] {}) ;
+					m.invoke(a);
+			  	} catch(Exception e) {
+			  		e.printStackTrace();
+			  	}  
+            }
+		});
+		
+		return current;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_open_0_0.java	Thu Mar 31 08:10:00 2011	(r22457)
@@ -0,0 +1,35 @@
+package org.strategoxt.imp.testing.strategies;
+
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import org.eclipse.jface.dialogs.InputDialog;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.ui.PartInitException;
+import org.eclipse.ui.PlatformUI;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class testview_open_0_0 extends Strategy {
+
+	public static testview_open_0_0 instance = new testview_open_0_0();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+		if (!isTermString(current)) return null;
+		
+		Display.getDefault().syncExec(new Runnable() {
+            public void run() {
+				try {
+					PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunview");
+				} catch (PartInitException e) {
+					e.printStackTrace();
+				}
+            }
+		});
+		
+		return current;
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/testview_start_testcase_0_2.java	Thu Mar 31 08:10:00 2011	(r22457)
@@ -0,0 +1,46 @@
+package org.strategoxt.imp.testing.strategies;
+
+import static org.spoofax.interpreter.core.Tools.isTermString;
+
+import java.lang.reflect.Method;
+
+import org.eclipse.jface.dialogs.InputDialog;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.ui.IViewPart;
+import org.eclipse.ui.PartInitException;
+import org.eclipse.ui.PlatformUI;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+
+public class testview_start_testcase_0_2 extends Strategy {
+
+	public static testview_start_testcase_0_2 instance = new testview_start_testcase_0_2();
+	
+	@Override
+	public IStrategoTerm invoke(Context context, IStrategoTerm current, IStrategoTerm arg0, IStrategoTerm arg1) {
+		if (!isTermString(arg0) || !isTermString(arg1) ) return null;
+		
+		final String ts = ((IStrategoString)arg0).stringValue();
+		final String desc = ((IStrategoString)arg1).stringValue();
+		
+		Display.getDefault().syncExec(new Runnable() {
+            public void run() {
+			  	try {       
+					IViewPart a = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView("org.strategoxt.imp.testing.views.testrunviewpart");
+					// Using reflection, because if I use a cast, I get a ClassCastException 
+					// cannot cast type <x> to <x>. Probably because of some different classloader issue.
+					Method m = a.getClass().getMethod("startTestcase", new Class[] {String.class, String.class}) ;
+					m.invoke(a, ts, desc);
+			  	} catch(Exception e) {
+			  		e.printStackTrace();
+			  	}  
+            }
+		});
+		
+		return current;
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml	Thu Mar 31 07:58:35 2011	(r22456)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/plugin.xml	Thu Mar 31 08:10:00 2011	(r22457)
@@ -2,6 +2,15 @@
 <?eclipse version="3.0"?>
 
 <plugin>
+   <extension
+         point="org.eclipse.ui.views">
+      <view
+            name="Spoofax Test Runner"
+            class="org.strategoxt.imp.testing.views.TestRunViewPart"
+            id="org.strategoxt.imp.testing.views.testrunviewpart">
+      </view>
+   </extension>
+
        <extension point="org.eclipse.imp.runtime.languageDescription">
           <language extensions="spt" description="Spoofax-Testing" language="Spoofax-Testing" derivedFrom="DynamicRoot" validator="org.strategoxt.imp.testing.SpoofaxTestingValidator" validatorClass="org.strategoxt.imp.testing.SpoofaxTestingValidator"></language>
        </extension>

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Thu Mar 31 07:58:35 2011	(r22456)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/spoofax_testing.str	Thu Mar 31 08:10:00 2011	(r22457)
@@ -11,7 +11,7 @@
   check
   generate
   file-resolving
-
+  test-runner
 rules
     
   editor-analyze:

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/trans/test-runner.str	Thu Mar 31 08:10:00 2011	(r22457)
@@ -0,0 +1,72 @@
+module test-runner
+
+imports
+  libstratego-lib
+  libstratego-aterm
+  include/Spoofax-Testing
+  editor-common.generated
+  spoofax_testing
+  check
+  
+signature constructors 
+  True  : Boolean  
+  False : Boolean
+
+strategies
+  find(s) =
+  	abspath => base
+  ; readdir
+  ; filter(
+      !$[[base]/[<id>]]
+    ; if <isdir> <filemode> then
+        find(s)
+      else
+        s
+      end
+    )
+  ; flatten-list
+  
+  test-runner =
+    testview-init 
+  ; find-all-testsuites-in-project 
+  ; map(testview-add-testsuite)
+  ; map(try(run-testsuite))
+  ; !None()
+  
+  find-all-testsuites-in-project =
+    <find(has-extension(|"spt"))> "." 
+  ; string-sort
+
+  origin-offset =
+    prim("SSL_EXT_origin_offset", <id>) => (<id>, _)
+    
+  run-testsuite :
+    file -> (ast, [])
+    where
+      ast  := <read-text-file; parse-spt-string> file
+    ; testcases := <collect-all(testview-add-testcase(|file, <test-to-description>,<origin-offset>))>ast
+    ; <map(run-testcase(|file))>testcases
+    
+  run-testcase(|file) = 
+    ?tst
+  ; test-to-description => name
+  ; testview-start-testcase(|file, name)
+  ; if errors := <check-warning>tst ; not((id,[])) then
+      testview-finish-testcase(|file, name, False())
+    else
+      testview-finish-testcase(|file, name, True()) 
+    end
+    
+  test-to-description = 
+    ?Test(_, description(<id>), _, _)  
+  + ?TestStratego(_, description(<id>), _, _)  
+  + ?TestEmpty(_, description(<id>))
+
+  external testview-init(|)
+  external testview-add-testsuite(|)
+  external testview-add-testcase(|testsuite, description, linenr)
+  external testview-start-testcase(|testsuite, description)
+  external testview-finish-testcase(|testsuite, description, result)
+  external parse-spt-string(|)
+    
+  
\ No newline at end of file

From tobivollebregt at gmail.com  Thu Mar 31 10:44:25 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 31 Mar 2011 08:44:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22458 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110331084425.D0BDF7F8016@mx1.tudelft.nl>

Author: tvo
Date: Thu Mar 31 08:44:25 2011
New Revision: 22458
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22458&sc=1

Log:
Fix off-by-one error in new selection when inserting a proposal
that contains tabs or newlines in the first new text part.

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Thu Mar 31 08:10:00 2011	(r22457)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Thu Mar 31 08:44:25 2011	(r22458)
@@ -71,7 +71,7 @@
 	}
 
 	private Point proposalPartsToSelection(IDocument document, IStrategoList proposalParts, int offset) {
-		int i = termContents(proposalParts.head()).length();
+		int i = AutoEditStrategy.formatInsertedText(termContents(proposalParts.head()), "").length();
 		for (IStrategoList cons = proposalParts.tail(); !cons.isEmpty(); cons = cons.tail()) {
 			IStrategoTerm partTerm = cons.head();
 			String part = proposalPartToString(document, partTerm);

From tobivollebregt at gmail.com  Thu Mar 31 11:14:29 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Thu, 31 Mar 2011 09:14:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22459 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110331091429.99C887F8016@mx1.tudelft.nl>

Author: tvo
Date: Thu Mar 31 09:14:29 2011
New Revision: 22459
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22459&sc=1

Log:
Better fix (as far as I can see)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Thu Mar 31 08:44:25 2011	(r22458)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	Thu Mar 31 09:14:29 2011	(r22459)
@@ -71,8 +71,8 @@
 	}
 
 	private Point proposalPartsToSelection(IDocument document, IStrategoList proposalParts, int offset) {
-		int i = AutoEditStrategy.formatInsertedText(termContents(proposalParts.head()), "").length();
-		for (IStrategoList cons = proposalParts.tail(); !cons.isEmpty(); cons = cons.tail()) {
+		int i = 0;
+		for (IStrategoList cons = proposalParts; !cons.isEmpty(); cons = cons.tail()) {
 			IStrategoTerm partTerm = cons.head();
 			String part = proposalPartToString(document, partTerm);
 			i += part.length();

From R.B.Vermaas at tudelft.nl  Thu Mar 31 12:45:39 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 31 Mar 2011 10:45:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22460 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies
Message-ID: <20110331104539.2EB5DCC0FE@mx4.tudelft.nl>

Author: rob
Date: Thu Mar 31 10:45:38 2011
New Revision: 22460
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22460&sc=1

Log:
turn off recovery for test-runner

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java	Thu Mar 31 09:14:29 2011	(r22459)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/strategies/parse_spt_string_0_0.java	Thu Mar 31 10:45:38 2011	(r22460)
@@ -43,9 +43,9 @@
 				ip = ((DynamicParseController) ip).getWrapped();
 			if (ip instanceof SGLRParseController) {
 				SGLRParseController sglrController = (SGLRParseController) ip;
-				JSGLRI res = sglrController.getParser(); 
-				res.setUseRecovery(true);
-			    result = res.parse(input, "string");
+				JSGLRI parser = sglrController.getParser(); 
+				parser.setUseRecovery(false);
+			    result = parser.parse(input, "string");
 			}
 		} catch (BadDescriptorException e) {
 			// TODO Auto-generated catch block

From R.B.Vermaas at tudelft.nl  Thu Mar 31 13:14:27 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 31 Mar 2011 11:14:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22461 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views
Message-ID: <20110331111427.297F12B8019@mx2.tudelft.nl>

Author: rob
Date: Thu Mar 31 11:14:26 2011
New Revision: 22461
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22461&sc=1

Log:
forgot to add view code

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunContentProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunLabelProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunContentProvider.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunContentProvider.java	Thu Mar 31 11:14:26 2011	(r22461)
@@ -0,0 +1,51 @@
+package org.strategoxt.imp.testing.views;
+
+import org.eclipse.jface.viewers.ITreeContentProvider;
+import org.eclipse.jface.viewers.Viewer;
+import org.strategoxt.imp.testing.model.TestRun;
+import org.strategoxt.imp.testing.model.TestcaseRun;
+import org.strategoxt.imp.testing.model.TestsuiteRun;
+
+
+public class TestRunContentProvider implements ITreeContentProvider {
+
+	public void dispose() {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
+		// TODO Auto-generated method stub
+		
+	}
+
+	public Object[] getElements(Object inputElement) {
+		return getChildren(inputElement);
+	}
+
+	public Object[] getChildren(Object parentElement) {
+	    if(parentElement instanceof TestRun) {
+	    	TestRun tr = (TestRun) parentElement;
+	    	return tr.getTestSuites().toArray() ;
+	    } else if (parentElement instanceof TestsuiteRun) {
+	    	TestsuiteRun tsr = (TestsuiteRun) parentElement;
+	    	return tsr.getTestcases().toArray();
+	    } 
+	    return new Object[] {};
+	}
+
+	public Object getParent(Object element) {
+	    if (element instanceof TestsuiteRun) {
+	    	TestsuiteRun tsr = (TestsuiteRun) element;
+	    	return tsr.getParent();
+	    } else if (element instanceof TestcaseRun) {
+	    	TestcaseRun tcr = (TestcaseRun) element;
+	    	return tcr.getParent();
+	    } 
+    	return null ;
+	}
+
+	public boolean hasChildren(Object element) {
+		return getChildren(element).length > 0;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunLabelProvider.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunLabelProvider.java	Thu Mar 31 11:14:26 2011	(r22461)
@@ -0,0 +1,67 @@
+package org.strategoxt.imp.testing.views;
+
+import org.eclipse.jface.viewers.ITableColorProvider;
+import org.eclipse.jface.viewers.ITableFontProvider;
+import org.eclipse.jface.viewers.ITableLabelProvider;
+import org.eclipse.jface.viewers.LabelProvider;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.Font;
+import org.eclipse.swt.graphics.Image;
+import org.eclipse.swt.widgets.Display;
+import org.strategoxt.imp.testing.model.TestcaseRun;
+import org.strategoxt.imp.testing.model.TestsuiteRun;
+
+public class TestRunLabelProvider extends LabelProvider implements ITableLabelProvider, ITableFontProvider, ITableColorProvider {
+	
+	
+	@Override
+	public Image getImage(Object element) {
+		return super.getImage(element);
+	}
+	
+	@Override
+	public String getText(Object element) {
+		if(element instanceof TestsuiteRun) {
+			TestsuiteRun tsr = (TestsuiteRun)element;
+			return tsr.getName();
+		} else if(element instanceof TestcaseRun) {
+			TestcaseRun tcr = (TestcaseRun)element;
+			String lbl = tcr.getDescription();
+			if(tcr.isFinished()) {
+				lbl = lbl + " (" + String.format("%.2f", tcr.getDuration()/1000.0) +"s)";
+				if (! tcr.hasSucceeded() ) {
+					lbl += " : FAILED";
+				}
+			}
+			return lbl;
+		}
+		return super.getText(element);
+	}
+
+	public Color getForeground(Object element, int columnIndex) {
+		if(element instanceof TestcaseRun) {
+			TestcaseRun tcr = (TestcaseRun)element;
+			if(tcr.isFinished() && !tcr.hasSucceeded())
+				return new Color(Display.getCurrent(), 159, 63, 63);
+		}
+		return null;
+	}
+
+	public Color getBackground(Object element, int columnIndex) {
+		return null;
+	}
+
+	public Font getFont(Object element, int columnIndex) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public Image getColumnImage(Object element, int columnIndex) {
+		return getImage(element);
+	}
+
+	public String getColumnText(Object element, int columnIndex) {
+		return getText(element);
+	}
+
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java	Thu Mar 31 11:14:26 2011	(r22461)
@@ -0,0 +1,214 @@
+package org.strategoxt.imp.testing.views;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.jdt.internal.junit.ui.JUnitProgressBar;
+import org.eclipse.jface.viewers.DoubleClickEvent;
+import org.eclipse.jface.viewers.IDoubleClickListener;
+import org.eclipse.jface.viewers.IStructuredSelection;
+import org.eclipse.jface.viewers.TreeViewer;
+import org.eclipse.jface.viewers.ViewerSorter;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Tree;
+import org.eclipse.swt.widgets.TreeColumn;
+import org.eclipse.ui.forms.widgets.FormToolkit;
+import org.eclipse.ui.part.ViewPart;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
+import org.strategoxt.imp.testing.model.TestRun;
+import org.strategoxt.imp.testing.model.TestcaseRun;
+import org.strategoxt.imp.testing.model.TestsuiteRun;
+
+
+public class TestRunViewPart extends ViewPart {
+
+    private final FormToolkit toolkit = new FormToolkit(Display.getCurrent());
+    private TestRun testrun = null;
+    private Label lblRatio;
+    private JUnitProgressBar pb;
+    private TreeViewer treeViewer;
+	private int nrFailedTests = 0;
+    
+    public TestRunViewPart() {
+    	
+    }
+    
+    /**
+     * Create contents of the view part.
+     * @param parent
+     */
+    @Override
+    public void createPartControl(Composite parent) {
+        parent.setLayout(new FormLayout());
+       
+        pb = new JUnitProgressBar(parent);
+        FormData fd_pb = new FormData();
+        fd_pb.left = new FormAttachment(0, 10);
+        fd_pb.top = new FormAttachment(0, 10);
+        pb.setLayoutData(fd_pb);
+        toolkit.adapt(pb, true, true);
+       
+        Label lblTests = new Label(parent, SWT.NONE);
+        fd_pb.right = new FormAttachment(100, -100);
+        FormData fd_lblTests = new FormData();
+        fd_lblTests.top = new FormAttachment(0, 11);
+        fd_lblTests.right = new FormAttachment(100, -65);
+        lblTests.setLayoutData(fd_lblTests);
+        toolkit.adapt(lblTests, true, true);
+        lblTests.setText("Tests");
+       
+        lblRatio = new Label(parent, SWT.NONE);
+        lblRatio.setAlignment(SWT.LEFT);
+        lblRatio.setSize(55, 25);
+        FormData fd_lblRatio = new FormData();
+        fd_lblRatio.right = new FormAttachment(100, -10);
+        fd_lblRatio.top = new FormAttachment(0, 11);
+        lblRatio.setLayoutData(fd_lblRatio);
+        toolkit.adapt(lblRatio, true, true);
+       
+        treeViewer = new TreeViewer(parent, SWT.BORDER);
+        Tree tv = treeViewer.getTree();
+        FormData fd_tv = new FormData();
+        fd_tv.bottom = new FormAttachment(100, -10);
+        fd_tv.top = new FormAttachment(0, 35);
+        fd_tv.left = new FormAttachment(0, 10);
+        fd_tv.right = new FormAttachment(100, -10);
+        tv.setLayoutData(fd_tv);
+        toolkit.paintBordersFor(tv);
+
+		TreeColumn column = new TreeColumn(treeViewer.getTree(),SWT.NONE);
+		column.setWidth(10);
+		column.setText("");
+		
+        treeViewer.setContentProvider(new TestRunContentProvider());
+        treeViewer.setLabelProvider(new TestRunLabelProvider());
+        treeViewer.setSorter(new ViewerSorter());
+        treeViewer.addDoubleClickListener(new IDoubleClickListener() {
+			
+			public void doubleClick(DoubleClickEvent event) {
+				Object selectObject = ((IStructuredSelection)treeViewer.getSelection()).getFirstElement();
+
+				String file = null;
+				int offset = 0;
+				
+				if (selectObject instanceof TestcaseRun) {
+					TestcaseRun tcr = (TestcaseRun) selectObject ;
+					file = tcr.getParent().getName();
+					offset = tcr.getOffset();
+				} else if(selectObject instanceof TestsuiteRun) {
+					file = ((TestsuiteRun)selectObject).getName();
+					offset = 1;
+				}
+
+				if(file != null) {
+					File f = new File(file);
+					IResource res;
+					try {
+						res = EditorIOAgent.getResource(f);
+						EditorState.asyncOpenEditor(Display.getDefault(), (IFile)res, offset, true);
+					} catch (FileNotFoundException e) {
+						// TODO Auto-generated catch block
+						e.printStackTrace();
+					}
+				}
+			}
+		});
+        
+        createActions();
+        initializeToolBar();
+        initializeMenu();
+        
+        reset();
+
+		testrun = new TestRun();
+
+		treeViewer.expandAll();
+        
+        updateHeader();
+    }
+    
+    private void updateHeader() {
+    	int nrTests = testrun.getNrTests();
+    	if(testrun == null) {
+    		lblRatio.setText("0 / 0");
+    	} else {
+    		lblRatio.setText(String.format("%d / %d    ", (nrTests-nrFailedTests), nrTests));
+    	}
+        pb.setMaximum(nrTests);
+    }
+    
+	public void dispose() {
+        toolkit.dispose();
+        super.dispose();
+    }
+
+    /**
+     * Create the actions.
+     */
+    private void createActions() {
+        // Create the actions
+    }
+
+    /**
+     * Initialize the toolbar.
+     */
+    private void initializeToolBar() {
+    }
+
+    /**
+     * Initialize the menu.
+     */
+    private void initializeMenu() {
+    }
+
+    @Override
+    public void setFocus() {
+    }
+    
+    public void reset() {
+		nrFailedTests = 0;
+    	testrun = new TestRun();
+		treeViewer.setInput(testrun);
+		pb.reset();
+    }
+    
+    public void refresh() {
+    	updateHeader();
+    	treeViewer.refresh();
+    	treeViewer.expandAll();
+    }
+    
+    public void addTestsuite(String name) {
+    	testrun.addTestsuite(name);
+    	refresh();
+    }
+
+    public void addTestcase(String testsuite, String description, int offset) {
+    	TestsuiteRun ts = testrun.getTestsuite(testsuite);
+    	ts.addTestCase(description, offset);
+    	refresh();
+    }
+    
+    public void startTestcase(String testsuite, String description) {
+    	TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(description);
+    	tcr.start();
+    }
+
+    public void finishTestcase(String testsuite, String description, boolean succeeded) {
+    	TestcaseRun tcr = testrun.getTestsuite(testsuite).getTestcase(description);
+    	tcr.finished(succeeded);
+    	if(!succeeded) 
+    		nrFailedTests++;
+    	pb.step(nrFailedTests);
+    	refresh();
+    }
+}

From R.B.Vermaas at tudelft.nl  Thu Mar 31 13:43:12 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 31 Mar 2011 11:43:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22462 - in
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse:
	. jdt jdt/internal jdt/internal/junit jdt/internal/junit/ui
Message-ID: <20110331114312.051037F8021@mx1.tudelft.nl>

Author: rob
Date: Thu Mar 31 11:43:11 2011
New Revision: 22462
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22462&sc=1

Log:
add JUnitProgressBar code (no changes to original) to the plugin, as it is not reachable via junit plugin jar

Added:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/ui/
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java

Added: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/eclipse/jdt/internal/junit/ui/JUnitProgressBar.java	Thu Mar 31 11:43:11 2011	(r22462)
@@ -0,0 +1,181 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     Stephan Michels, stephan at apache.org - 104944 [JUnit] Unnecessary code in JUnitProgressBar
+ *******************************************************************************/
+package org.eclipse.jdt.internal.junit.ui;
+
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.ControlAdapter;
+import org.eclipse.swt.events.ControlEvent;
+import org.eclipse.swt.events.DisposeEvent;
+import org.eclipse.swt.events.DisposeListener;
+import org.eclipse.swt.events.PaintEvent;
+import org.eclipse.swt.events.PaintListener;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.GC;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.widgets.Canvas;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+
+/**
+ * A progress bar with a red/green indication for success or failure.
+ */
+public class JUnitProgressBar extends Canvas {
+	private static final int DEFAULT_WIDTH = 160;
+	private static final int DEFAULT_HEIGHT = 18;
+
+	private int fCurrentTickCount= 0;
+	private int fMaxTickCount= 0;
+	private int fColorBarWidth= 0;
+	private Color fOKColor;
+	private Color fFailureColor;
+	private Color fStoppedColor;
+	private boolean fError;
+	private boolean fStopped= false;
+
+	public JUnitProgressBar(Composite parent) {
+		super(parent, SWT.NONE);
+
+		addControlListener(new ControlAdapter() {
+			public void controlResized(ControlEvent e) {
+				fColorBarWidth= scale(fCurrentTickCount);
+				redraw();
+			}
+		});
+		addPaintListener(new PaintListener() {
+			public void paintControl(PaintEvent e) {
+				paint(e);
+			}
+		});
+		addDisposeListener(new DisposeListener() {
+			public void widgetDisposed(DisposeEvent e) {
+				fFailureColor.dispose();
+				fOKColor.dispose();
+				fStoppedColor.dispose();
+			}
+		});
+		Display display= parent.getDisplay();
+		fFailureColor= new Color(display, 159, 63, 63);
+		fOKColor= new Color(display, 95, 191, 95);
+		fStoppedColor= new Color(display, 120, 120, 120);
+	}
+
+	public void setMaximum(int max) {
+		fMaxTickCount= max;
+	}
+
+	public void reset() {
+		fError= false;
+		fStopped= false;
+		fCurrentTickCount= 0;
+		fMaxTickCount= 0;
+		fColorBarWidth= 0;
+		redraw();
+	}
+
+	public void reset(boolean hasErrors, boolean stopped, int ticksDone, int maximum) {
+		boolean noChange= fError == hasErrors && fStopped == stopped && fCurrentTickCount == ticksDone && fMaxTickCount == maximum;
+		fError= hasErrors;
+		fStopped= stopped;
+		fCurrentTickCount= ticksDone;
+		fMaxTickCount= maximum;
+		fColorBarWidth= scale(ticksDone);
+		if (! noChange)
+			redraw();
+	}
+
+	private void paintStep(int startX, int endX) {
+		GC gc = new GC(this);
+		setStatusColor(gc);
+		Rectangle rect= getClientArea();
+		startX= Math.max(1, startX);
+		gc.fillRectangle(startX, 1, endX-startX, rect.height-2);
+		gc.dispose();
+	}
+
+	private void setStatusColor(GC gc) {
+		if (fStopped)
+			gc.setBackground(fStoppedColor);
+		else if (fError)
+			gc.setBackground(fFailureColor);
+		else
+			gc.setBackground(fOKColor);
+	}
+
+	public void stopped() {
+		fStopped= true;
+		redraw();
+	}
+
+	private int scale(int value) {
+		if (fMaxTickCount > 0) {
+			Rectangle r= getClientArea();
+			if (r.width != 0)
+				return Math.max(0, value*(r.width-2)/fMaxTickCount);
+		}
+		return value;
+	}
+
+	private void drawBevelRect(GC gc, int x, int y, int w, int h, Color topleft, Color bottomright) {
+		gc.setForeground(topleft);
+		gc.drawLine(x, y, x+w-1, y);
+		gc.drawLine(x, y, x, y+h-1);
+
+		gc.setForeground(bottomright);
+		gc.drawLine(x+w, y, x+w, y+h);
+		gc.drawLine(x, y+h, x+w, y+h);
+	}
+
+	private void paint(PaintEvent event) {
+		GC gc = event.gc;
+		Display disp= getDisplay();
+
+		Rectangle rect= getClientArea();
+		gc.fillRectangle(rect);
+		drawBevelRect(gc, rect.x, rect.y, rect.width-1, rect.height-1,
+			disp.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW),
+			disp.getSystemColor(SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW));
+
+		setStatusColor(gc);
+		fColorBarWidth= Math.min(rect.width-2, fColorBarWidth);
+		gc.fillRectangle(1, 1, fColorBarWidth, rect.height-2);
+	}
+
+	public Point computeSize(int wHint, int hHint, boolean changed) {
+		checkWidget();
+		Point size= new Point(DEFAULT_WIDTH, DEFAULT_HEIGHT);
+		if (wHint != SWT.DEFAULT) size.x= wHint;
+		if (hHint != SWT.DEFAULT) size.y= hHint;
+		return size;
+	}
+
+	public void step(int failures) {
+		fCurrentTickCount++;
+		int x= fColorBarWidth;
+
+		fColorBarWidth= scale(fCurrentTickCount);
+
+		if (!fError && failures > 0) {
+			fError= true;
+			x= 1;
+		}
+		if (fCurrentTickCount == fMaxTickCount)
+			fColorBarWidth= getClientArea().width-1;
+		paintStep(x, fColorBarWidth);
+	}
+
+	public void refresh(boolean hasErrors) {
+		fError= hasErrors;
+		redraw();
+	}
+
+}

From R.B.Vermaas at tudelft.nl  Thu Mar 31 13:57:09 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Thu, 31 Mar 2011 11:57:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22463 -
	spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views
Message-ID: <20110331115709.96767108C00E@mx3.tudelft.nl>

Author: rob
Date: Thu Mar 31 11:57:09 2011
New Revision: 22463
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22463&sc=1

Log:
fix offset bug

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java	Thu Mar 31 11:43:11 2011	(r22462)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/editor/java/org/strategoxt/imp/testing/views/TestRunViewPart.java	Thu Mar 31 11:57:09 2011	(r22463)
@@ -106,7 +106,6 @@
 					offset = tcr.getOffset();
 				} else if(selectObject instanceof TestsuiteRun) {
 					file = ((TestsuiteRun)selectObject).getName();
-					offset = 1;
 				}
 
 				if(file != null) {

From L.C.L.Kats at tudelft.nl  Thu Mar 31 15:40:34 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 31 Mar 2011 13:40:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22464 - in
	spoofax-imp/trunk: experimental/NamingExperiment/test
	org.strategoxt.imp.testing/syntax
Message-ID: <20110331134034.15E64108C016@mx3.tudelft.nl>

Author: LennartKats
Date: Thu Mar 31 13:40:33 2011
New Revision: 22464
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22464&sc=1

Log:
revised testing syntax

Modified:
   spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
   spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf

Modified: spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt
==============================================================================
--- spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Thu Mar 31 11:57:09 2011	(r22463)
+++ spoofax-imp/trunk/experimental/NamingExperiment/test/test1.spt	Thu Mar 31 13:40:33 2011	(r22464)
@@ -14,7 +14,7 @@
   entity B {
     q : Q
   }
-]] => _ // Entity(_, _) //1 error
+]] 1 error
 
 test Resolve local property access [[
   entity B {
@@ -23,7 +23,7 @@
       var v : A = [[x]]
     }
   }
-]] resolves #2 to #1
+]] resolve #2 to #1
 // TODO: occurrence highlighting, ref resolv, lang-specific identifiers?
 
 test Resolve parameter access [[
@@ -33,7 +33,7 @@
       var v : A = [[x]]
     }
   }
-]] resolves #2 to #1
+]] resolve #2 to #1
 
 test Resolve property access [[
   entity B {
@@ -42,7 +42,7 @@
       var v : A = a.x.y
     }
   }
-]] //completes y to yyyyz
+]] complete to "yyyy"
 
 test Resolve property access fails [[
   entity B {

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Mar 31 11:57:09 2011	(r22463)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/syntax/Spoofax-Testing.sdf	Thu Mar 31 13:40:33 2011	(r22464)
@@ -69,13 +69,20 @@
     "->" "file" PathName -> Result {cons("file"),    deprecated("Use => instead of ->")}
     "->" ATerm           -> Result {cons("pattern"), deprecated("Use => instead of ->")}
 
-    "=>" "file" PathName -> Result {cons("file")}
-    "=>" ATerm           -> Result {cons("pattern")}
+    "=>" "file" PathName -> Result {cons("file"), deprecated("Use 'parse to file' instead")}
+    "=>" ATerm           -> Result {cons("pattern"), deprecated("Use 'parse to' instead")}
+
+    "parse" "to" "file" PathName -> Result {cons("file")}
+    "parse" "to" ATerm   -> Result {cons("pattern")}
+
+    "fails" "parsing"    -> Result {cons("FailsParsing"), deprecated("Use 'parse fails' instead")}
+    "succeeds" "parsing" -> Result {cons("SuccessParsing"), deprecated("Use 'parse succeeds' instead")}
 
     "fails"              -> Result {cons("Fails")}
-    "fails" "parsing"    -> Result {cons("FailsParsing")}
+    "parse" "fails"      -> Result {cons("FailsParsing")}
     "succeeds"           -> Result {cons("Success")}
-    "succeeds" "parsing" -> Result {cons("SuccessParsing")}
+    "parse" "succeeds"   -> Result {cons("SuccessParsing")}
+    "parse"              -> Result {cons("SuccessParsing")}
 
     "file" PathName -> Input {cons("file")}
 
@@ -85,21 +92,22 @@
     INT "warning"     -> Result    {cons("Warning")}
     INT "warnings"    -> Result    {cons("Warnings")}
 
-    "resolves"                                 -> Result {cons("ResolvesUnnumbered")}
-    "resolves" Numbered                        -> Result {cons("Resolves")}
-    "resolves" Numbered "to" Numbered          -> Result {cons("ResolvesTo")}
-    "completes" OptNumbered                    -> Result {cons("Completes")}
-    "completes" OptNumbered "to" ID            -> Result {cons("CompletesTo")}
+    "resolve"                                 -> Result {cons("ResolvesUnnumbered")}
+    "resolve" Numbered                        -> Result {cons("Resolves")}
+    "resolve" Numbered "to" Numbered          -> Result {cons("ResolvesTo")}
+    "complete" OptNumbered                    -> Result {cons("Completes")}
+    "complete" OptNumbered "to" STRING        -> Result {cons("CompletesTo")}
     
     TestStratego                          -> Result {cons("Stratego")} 
-    "builds" ID Pattern                   -> Result {cons("Builds")}
-    "runs" ID "(" STRING ")" Pattern      -> Result {cons("Runs")}
-    "refactors" ID "(" STRING ")" Pattern -> Result {cons("Refactors")}
+    "build" ID Pattern                   -> Result {cons("Builds")}
+    "run" ID "(" STRING ")" Pattern      -> Result {cons("Runs")}
+    "refactor" ID "(" STRING ")" Pattern -> Result {cons("Refactors")}
     
                          -> Pattern {cons("wildcard")}
     "to" "file" PathName -> Pattern {cons("File")}
     "to" Output          -> Pattern {cons("Fragment")}
     "to" ATerm           -> Pattern {cons("ATerm")}
+    "fails"              -> Pattern {cons("Fails")}
 
     RegexExp          -> Result
 

From r.t.lindeman at student.tudelft.nl  Thu Mar 31 15:43:43 2011
From: r.t.lindeman at student.tudelft.nl (Ricky Lindeman)
Date: Thu, 31 Mar 2011 13:43:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22465 - in
	spoofax-imp/trunk: org.strategoxt.imp.debug.core/META-INF
	org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching
	org.strategoxt.imp.debug...
Message-ID: <20110331134343.C6577108C012@mx3.tudelft.nl>

Author: RickyLindeman
Date: Thu Mar 31 13:43:43 2011
New Revision: 22465
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22465&sc=1

Log:
* DebuggableHybridInterpreter launches a debug vm when isDebugLaunchEnabled=true
* Small manifest fixes

Added:
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
   spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Thu Mar 31 13:40:33 2011	(r22464)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/META-INF/MANIFEST.MF	Thu Mar 31 13:43:43 2011	(r22465)
@@ -10,11 +10,27 @@
  org.eclipse.jdt.launching;bundle-version="3.5.0",
  org.strategoxt.strj,
  org.eclipse.jdt.core;bundle-version="3.5.0",
- org.strategoxt.imp.debug.stratego.core,
- org.strategoxt.imp.debug.stratego.transformer
+ org.strategoxt.imp.debug.stratego.core
 Bundle-ActivationPolicy: lazy
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
-Export-Package: org.strategoxt.imp.debug.core.str.launching,
- org.strategoxt.imp.debug.core.str.model
+Export-Package: org.strategoxt.imp.debug.core.str.launching;
+  uses:="org.eclipse.debug.core,
+   org.eclipse.debug.core.sourcelookup,
+   org.eclipse.core.runtime,
+   org.eclipse.jdt.launching,
+   org.strategoxt.debug.core.util,
+   org.strategoxt,
+   org.eclipse.core.resources,
+   org.spoofax.interpreter.terms,
+   org.eclipse.debug.core.model",
+ org.strategoxt.imp.debug.core.str.model;
+  uses:="org.eclipse.debug.core,
+   org.eclipse.core.runtime,
+   org.eclipse.core.runtime.jobs,
+   org.spoofax.interpreter.terms,
+   org.eclipse.core.resources,
+   org.strategoxt.debug.core.control,
+   org.eclipse.debug.core.model,
+   org.strategoxt.debug.core.model"
 Bundle-ClassPath: .
 Bundle-Vendor: Spoofax.org

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Thu Mar 31 13:40:33 2011	(r22464)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/launching/DebuggableHybridInterpreter.java	Thu Mar 31 13:43:43 2011	(r22465)
@@ -6,7 +6,6 @@
 import java.util.List;
 
 import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.IPath;
 import org.eclipse.debug.core.ILaunchConfiguration;
 import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
 import org.eclipse.debug.core.ILaunchManager;
@@ -33,6 +32,12 @@
  */
 public class DebuggableHybridInterpreter extends HybridInterpreter {
 
+	/**
+	 * If true calling invoke will launch a debug session.
+	 * If false calling invoke will just return the result (no debug JVM is started)
+	 */
+	private boolean isDebugLaunchEnabled = false;
+	
 	private String projectpath = null;
 	
 	public DebuggableHybridInterpreter(ITermFactory termFactory) {
@@ -91,8 +96,9 @@
 			throws InterpreterErrorExit, InterpreterExit, UndefinedStrategyException, InterpreterException {
 		
 		try {
-			if (name.startsWith("test"))
+			if (this.isDebugLaunchEnabled())
 			{
+				// TODO: limit the number of simultaneous launches...
 				tryLaunch(name);
 			}
 			
@@ -167,4 +173,12 @@
 	public void setProjectpath(String projectpath) {
 		this.projectpath = projectpath;
 	}
+	
+	public boolean isDebugLaunchEnabled() {
+		return isDebugLaunchEnabled;
+	}
+	
+	public void setDebugLaunchEnabled(boolean isDebugLaunchEnabled) {
+		this.isDebugLaunchEnabled = isDebugLaunchEnabled;
+	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java	Thu Mar 31 13:40:33 2011	(r22464)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.core/src/org/strategoxt/imp/debug/core/str/model/EStrategoStackFrame.java	Thu Mar 31 13:43:43 2011	(r22465)
@@ -12,8 +12,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.TermFactory;
 import org.strategoxt.debug.core.model.StrategoStackFrame;
-import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.FileLineLengthTable;
-import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.LineLengthTable;
+import org.strategoxt.debug.core.util.table.OffsetTable;
 
 public class EStrategoStackFrame extends StrategoDebugElement implements IStackFrame {
 
@@ -98,32 +97,31 @@
 	public int getCharEnd() throws DebugException {
 		// convert linenumber and offset relative to the line to the total character offset
 		// NOTE: take care with 0-based and 1-based indices, also newlines are counted as characters
-		LineLengthTable t = this.fTarget.getDebugSessionManager().getEventSpecManager().getLineLengthTable();
+		OffsetTable t = this.fTarget.getDebugSessionManager().getEventSpecManager().getOffsetTable();
 		if (t == null)
 		{
 			return -1;
 		}
-		FileLineLengthTable ft = t.getFileLineLengthTable(this.frameData.getFilename());
 		int linenumber = frameData.getCurrentLocationInfo().getEnd_line_num(); // one-based index
+		int lineOffset = t.getLineOffset(this.frameData.getFilename(), linenumber - 1); // convert linenumber to zero-based index
+
 		int end_token_pos = frameData.getCurrentLocationInfo().getEnd_token_pos();
-		int lineOffset = ft.getLineOffset(linenumber - 1); // convert linenumber to zero-based index
 		int charEnd = lineOffset + end_token_pos - 1; // convert charoffset to zero-based index
 		return charEnd;
 	}
 
 	public int getCharStart() throws DebugException {
 		// NOTE: take care with 0-based and 1-based indices, also newlines are counted as characters
-		LineLengthTable t = this.fTarget.getDebugSessionManager().getEventSpecManager().getLineLengthTable();
+		OffsetTable t = this.fTarget.getDebugSessionManager().getEventSpecManager().getOffsetTable();
 		if (t == null)
 		{
 			return -1;
 		}
-		FileLineLengthTable ft = t.getFileLineLengthTable(this.frameData.getFilename());
 		int linenumber = frameData.getCurrentLocationInfo().getStart_line_num(); // one-based index
+		int lineOffset = t.getLineOffset(this.frameData.getFilename(), linenumber - 1); // convert linenumber to zero-based index
+
 		int start_token_pos = frameData.getCurrentLocationInfo().getStart_token_pos();
-		int lineOffset = ft.getLineOffset(linenumber - 1); // convert linenumber to zero-based index
 		int charStart = lineOffset + start_token_pos - 1; // convert charoffset to zero-based index
-		System.out.println("asd");
 		return charStart;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Thu Mar 31 13:40:33 2011	(r22464)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/META-INF/MANIFEST.MF	Thu Mar 31 13:43:43 2011	(r22465)
@@ -7,7 +7,7 @@
  .
 Export-Package: org.strategoxt.debug.core;uses:="org.eclipse.core.runtime,org.osgi.framework",
  org.strategoxt.debug.core.control;
-  uses:="org.strategoxt.debug.core.util,
+  uses:="org.eclipse.core.runtime,
    com.sun.jdi.event,
    org.strategoxt.debug.core.eventspec,
    com.sun.jdi,
@@ -20,16 +20,17 @@
    com.sun.jdi,
    org.strategoxt.debug.core.eventspec,
    org.strategoxt.debug.core.model",
- org.strategoxt.debug.core.eventspec;uses:="org.strategoxt.debug.core.util,org.strategoxt.debug.core.util.table,org.strategoxt.debug.core.model",
+ org.strategoxt.debug.core.eventspec;uses:="org.eclipse.core.runtime,org.strategoxt.debug.core.util.table,org.strategoxt.debug.core.model",
  org.strategoxt.debug.core.model;uses:="org.spoofax.interpreter.terms",
  org.strategoxt.debug.core.util;
   uses:="com.sun.jdi.request,
+   org.eclipse.core.runtime,
    org.spoofax.interpreter.terms,
    org.eclipse.jdt.core.compiler,
    com.sun.jdi.connect,
    com.sun.jdi,
    org.spoofax.interpreter.library",
- org.strategoxt.debug.core.util.table;uses:="org.strategoxt.debug.core.model"
+ org.strategoxt.debug.core.util.table;uses:="org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util,org.strategoxt.debug.core.model"
 Bundle-Vendor: org.strategoxt.imp.debug.stratego.core
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Require-Bundle: org.eclipse.jdt.debug,

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Thu Mar 31 13:40:33 2011	(r22464)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/eventspec/EventSpecManager.java	Thu Mar 31 13:43:43 2011	(r22465)
@@ -9,6 +9,7 @@
 import org.strategoxt.debug.core.model.StrategoState;
 import org.strategoxt.debug.core.util.FileUtil;
 import org.strategoxt.debug.core.util.table.EventTable;
+import org.strategoxt.debug.core.util.table.OffsetTable;
 import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.LineLengthTable;
 
 public class EventSpecManager {
@@ -227,11 +228,21 @@
 		return this.eventTable;
 	}
 	
-	public LineLengthTable getLineLengthTable()
+	private LineLengthTable getLineLengthTable()
 	{
 		return this.lineLengthTable;
 	}
 	
+	private OffsetTable offsetTable = null;
+	
+	public OffsetTable getOffsetTable(){
+		if (this.offsetTable == null)
+		{
+			this.offsetTable = new OffsetTable(getLineLengthTable());
+		}
+		return this.offsetTable;
+	}
+	
 	private void log(String message){
 		System.out.println(message);
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Thu Mar 31 13:40:33 2011	(r22464)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/DebugCompiler.java	Thu Mar 31 13:43:43 2011	(r22465)
@@ -171,7 +171,7 @@
 		// strOutputBasedir + strategoFilePath will be the output stratego file (with debug information)
 		// TODO: removed , strategoSourceBasedir, strategoFilePath, strOutputBasedir
 		Map<IPath, IPath> result = generateStratego(debugSessionSettings, libraryPaths); // str to str (with debug info)
-		Collection<IPath> inputFiles = result.keySet();
+		//Collection<IPath> inputFiles = result.keySet();
 		Collection<IPath> generatedFiles = result.values();
 		// TODO check if files are actually created!
 		if (generatedFiles == null || generatedFiles.isEmpty())
@@ -184,7 +184,8 @@
 		// the table contains all debug lookup information for all files in the project
 		generateBreakpointLookupTable(tableFilename, generatedFiles); // TODO: sort the filenames on their path
 		
-		IPath charOffsetTableFilename = projectStrategoDir.append((projectName + ".offset")); // location of the character offset table
+		// create in the generateStratego
+		//IPath charOffsetTableFilename = projectStrategoDir.append((projectName + ".offset")); // location of the character offset table
 		//generateOffsetTable(charOffsetTableFilename, strategoSourceBasedir, inputFiles);
 
 		debugSessionSettings.setTableDirectory(projectStrategoDir);

Added: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.core/src/org/strategoxt/debug/core/util/table/OffsetTable.java	Thu Mar 31 13:43:43 2011	(r22465)
@@ -0,0 +1,28 @@
+package org.strategoxt.debug.core.util.table;
+
+import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.FileLineLengthTable;
+import org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util.LineLengthTable;
+
+public class OffsetTable {
+
+	private LineLengthTable t;
+	
+	public OffsetTable(LineLengthTable t)
+	{
+		this.t = t;
+	}
+	
+	/**
+	 * 
+	 * @param filename
+	 * @param i i is a zero-based index
+	 * @return
+	 */
+	public int getLineOffset(String filename, int i) {
+		// TODO Auto-generated method stub
+		FileLineLengthTable ft = t.getFileLineLengthTable(filename);
+		int lineOffset = ft.getLineOffset(i);
+		return lineOffset;
+	}
+
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Thu Mar 31 13:40:33 2011	(r22464)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.runtime/META-INF/MANIFEST.MF	Thu Mar 31 13:43:43 2011	(r22465)
@@ -18,11 +18,9 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
 Export-Package: org.strategoxt.imp.debug.stratego.runtime;
-  uses:="org.eclipse.imp.preferences,
-   org.eclipse.imp.parser,
+  uses:="org.eclipse.core.runtime,
+   org.eclipse.imp.preferences,
    org.eclipse.imp.runtime,
-   org.strategoxt.imp.runtime.services,
-   org.osgi.framework,
-   org.strategoxt.imp.runtime.dynamicloading",
+   org.osgi.framework",
  org.strategoxt.imp.debug.stratego.runtime.strategies;uses:="org.strategoxt.lang,org.spoofax.interpreter.terms,org.spoofax.terms",
  org.strategoxt.imp.debug.stratego.runtime.trans;uses:="org.spoofax.interpreter.core,org.strategoxt.lang,org.spoofax.interpreter.terms"

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Thu Mar 31 13:40:33 2011	(r22464)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.stratego.transformer/META-INF/MANIFEST.MF	Thu Mar 31 13:43:43 2011	(r22465)
@@ -17,13 +17,7 @@
  org.strategoxt.strj
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Bundle-ActivationPolicy: lazy
-Export-Package: org.strategoxt.imp.debug.stratego.transformer;
-  uses:="org.eclipse.imp.preferences,
-   org.eclipse.imp.parser,
-   org.eclipse.imp.runtime,
-   org.strategoxt.imp.runtime.services,
-   org.osgi.framework,
-   org.strategoxt.imp.runtime.dynamicloading",
+Export-Package: org.strategoxt.imp.debug.stratego.transformer;uses:="org.eclipse.imp.preferences,org.eclipse.imp.runtime,org.osgi.framework",
  org.strategoxt.imp.debug.stratego.transformer.strategies;uses:="org.strategoxt.lang,org.spoofax.interpreter.terms",
  org.strategoxt.imp.debug.stratego.transformer.strategies.ffl_util,
  org.strategoxt.imp.debug.stratego.transformer.trans;uses:="org.spoofax.interpreter.core,org.strategoxt.lang,org.spoofax.interpreter.terms"

Modified: spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Thu Mar 31 13:40:33 2011	(r22464)
+++ spoofax-imp/trunk/org.strategoxt.imp.debug.ui/META-INF/MANIFEST.MF	Thu Mar 31 13:43:43 2011	(r22465)
@@ -17,7 +17,23 @@
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
 Import-Package: org.eclipse.jface.text
 Bundle-Vendor: Spoofax.org
-Export-Package: org.strategoxt.imp.debug.ui,
- org.strategoxt.imp.debug.ui.str,
- org.strategoxt.imp.debug.ui.str.launching,
- org.strategoxt.imp.debug.ui.str.model
+Export-Package: org.strategoxt.imp.debug.ui;
+  uses:="org.eclipse.ui,
+   org.eclipse.ui.plugin,
+   org.osgi.framework,
+   org.eclipse.swt.widgets",
+ org.strategoxt.imp.debug.ui.str;uses:="org.eclipse.debug.core,org.eclipse.core.runtime",
+ org.strategoxt.imp.debug.ui.str.launching;
+  uses:="org.eclipse.debug.core,
+   org.eclipse.debug.ui,
+   org.eclipse.ui,
+   org.eclipse.core.resources,
+   org.eclipse.jface.viewers,
+   org.eclipse.swt.widgets",
+ org.strategoxt.imp.debug.ui.str.model;
+  uses:="org.eclipse.debug.ui,
+   org.eclipse.debug.ui.actions,
+   org.eclipse.core.runtime,
+   org.eclipse.ui,
+   org.eclipse.jface.viewers,
+   org.eclipse.debug.core.model"

From m.dejonge at tudelft.nl  Thu Mar 31 16:00:30 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 31 Mar 2011 14:00:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r22466 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax
Message-ID: <20110331140030.7E6B92B8037@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Mar 31 14:00:30 2011
New Revision: 22466
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=22466&sc=1

Log:
recover rule for | seems useful (I sometimes forget).
Missing | led to bad recovery in .. xxx([|]<yyy>) ..

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	Thu Mar 31 13:43:43 2011	(r22465)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/syntax/Stratego-Sugar.def	Thu Mar 31 14:00:30 2011	(r22466)
@@ -11,6 +11,7 @@
     
   lexical syntax
     -> ";" {recover, cons("INSERTION")}
+    -> "|" {recover, cons("INSERTION")}
 
 exports
   sorts Overlay

