From R.B.Vermaas at tudelft.nl  Mon Jan  4 13:06:49 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 04 Jan 2010 12:06:49 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20463 - rob - in hydra:
	. jobs
Message-ID: <201001041206.o04C6nHj032527@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-04 12:06:49 +0000 (Mon, 04 Jan 2010)
New Revision: 20463

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20463&view=rev

Modified:
   hydra/build.nix
   hydra/jobs/strategoxt.nix

Log:
 * removed wrong order of phases from nixbuild, for now make check after install for strategoxt packages

Changes:

Modified: hydra/build.nix
===================================================================
--- hydra/build.nix	2010-01-04 10:40:00 UTC (rev 20462)
+++ hydra/build.nix	2010-01-04 12:06:49 UTC (rev 20463)
@@ -84,6 +84,9 @@
       doCheck =
         if specpkgs ? checkSupported then specpkgs.checkSupported else true;
 
+      # make check after make install, here in stead of as default in nixbuild
+      phases = "unpackPhase patchPhase configurePhase buildPhase installPhase checkPhase fixupPhase distPhase finalPhase";
+
       meta.maintainers = if specpkgs ? notifyAddresses then specpkgs.notifyAddresses else [] ;
 
     });

Modified: hydra/jobs/strategoxt.nix
===================================================================
--- hydra/jobs/strategoxt.nix	2010-01-04 10:40:00 UTC (rev 20462)
+++ hydra/jobs/strategoxt.nix	2010-01-04 12:06:49 UTC (rev 20463)
@@ -97,6 +97,8 @@
         doCheck = true ;
         cygwinConfigureEnableShared = true;
 
+        phases = "unpackPhase patchPhase configurePhase buildPhase installPhase checkPhase fixupPhase distPhase finalPhase";
+  
       } ;
 
   } ;



From L.C.L.Kats at tudelft.nl  Mon Jan  4 13:33:45 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Jan 2010 12:33:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20464 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001041233.o04CXjxW000314@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-04 12:33:45 +0000 (Mon, 04 Jan 2010)
New Revision: 20464

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20464&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java

Log:
JSGLR-6: "getting ambiguities where sglri does not give any"


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-04 12:06:49 UTC (rev 20463)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-04 12:33:45 UTC (rev 20464)
@@ -353,8 +353,10 @@
             List<IParseNode> newArgs = filterTree(args, false);
 
             if (filterReject && parseTable.hasRejects()) {
+                // FIXME: report as normal parse error
+                //        (or allow this if recovery is enabled and report it in ParseErrorHandler)
                 if (hasRejectProd(t)) 
-                    throw new FilterException(parser, "Unexpected reject annotation");
+                    throw new FilterException(parser, "Unexpected reject annotation in " + yieldTree(t));
             }
 
             t = new ParseNode(node.label, newArgs);

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2010-01-04 12:06:49 UTC (rev 20463)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTable.java	2010-01-04 12:33:45 UTC (rev 20464)
@@ -9,6 +9,7 @@
 
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -85,7 +86,7 @@
         this.factory = factory;
         applAFun = factory.makeAFun("appl", 2, false);
         ambAFun = factory.makeAFun("amb", 1, false);
-        injection1Appl = factory.parse("prod([<term>],cf(sort(<term>)),<term>)");
+        injection1Appl = factory.parse("prod([<term>],cf(<term>),<term>)");
         injection2Appl = factory.parse("prod([<term>],lex(sort(<str>)),<term>)");
         litStringAppl = factory.parse("lit(<str>)");
     }
@@ -581,7 +582,8 @@
     }
 
     public List<Priority> getPriorities(Label prodLabel) {
-        if (priorityCache == null) priorityCache = new HashMap<Label, List<Priority>>();        
+        if (priorityCache == null) priorityCache =
+            Collections.synchronizedMap(new HashMap<Label, List<Priority>>());        
         List<Priority> results = priorityCache.get(prodLabel);
         if (results != null) return results;
         



From L.C.L.Kats at tudelft.nl  Mon Jan  4 13:37:47 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Jan 2010 12:37:47 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20465 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001041237.o04Cbloe000350@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-04 12:37:47 +0000 (Mon, 04 Jan 2010)
New Revision: 20465

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20465&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/MultiBadTokenException.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Label.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTimeoutException.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java

Log:
Added a new MultiBadTokenException class (subclassed by ParseTimeoutException) to collect parse errors when recovery fails.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Label.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Label.java	2010-01-04 12:33:45 UTC (rev 20464)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Label.java	2010-01-04 12:37:47 UTC (rev 20465)
@@ -53,4 +53,14 @@
     public boolean isInjection() {
         return injection;
     }
+    
+    @Override
+    public boolean equals(Object obj) {
+        return obj instanceof Label && ((Label) obj).labelNumber == labelNumber;
+    }
+    
+    @Override
+    public int hashCode() {
+        return labelNumber;
+    }
 }

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/MultiBadTokenException.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/MultiBadTokenException.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/MultiBadTokenException.java	2010-01-04 12:37:47 UTC (rev 20465)
@@ -0,0 +1,48 @@
+package org.spoofax.jsglr;
+
+import java.util.Set;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class MultiBadTokenException extends BadTokenException {
+
+    private static final long serialVersionUID = -1082868203048369423L;
+
+    private final Set<BadTokenException> causes;
+    
+    public MultiBadTokenException(SGLR parser, Set<BadTokenException> causes) {
+        this(parser, causes, getFirst(causes));
+    }
+    
+    protected MultiBadTokenException(SGLR parser, Set<BadTokenException> causes, BadTokenException primary) {
+        super(parser, primary.getToken(), primary.getOffset(), primary.getLineNumber(), primary.getColumnNumber());
+        this.causes = causes;
+    }
+    
+    protected MultiBadTokenException(SGLR parser, Set<BadTokenException> causes,
+            int primaryToken, int primaryOffset,
+            int primaryLineNumber, int primaryColumnNumber) {
+        super(parser, primaryToken, primaryOffset, primaryLineNumber, primaryColumnNumber);
+        this.causes = causes;
+    }
+
+    private static BadTokenException getFirst(Set<BadTokenException> causes) {
+        if (causes.isEmpty()) throw new IllegalArgumentException("Set of causes is empty");
+        return causes.iterator().next();
+    }
+    
+    public Set<BadTokenException> getCauses() {
+        return causes;
+    }
+    
+    @Override
+    @Deprecated
+    /**
+     * @deprecated Use getCauses() instead.
+     */
+    public BadTokenException getCause() {
+        if (causes != null && !causes.isEmpty()) return causes.iterator().next();
+        return null;
+    }
+}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTimeoutException.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTimeoutException.java	2010-01-04 12:33:45 UTC (rev 20464)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseTimeoutException.java	2010-01-04 12:37:47 UTC (rev 20465)
@@ -1,11 +1,14 @@
 package org.spoofax.jsglr;
 
+import java.util.Set;
+
 /**
  * Exception thrown when the parser times out.
  * 
  * @author Lennart Kats <L.C.L.Kats add tudelft.nl>
  */
-public class ParseTimeoutException extends BadTokenException {
+public class ParseTimeoutException extends MultiBadTokenException {
+    
     private static final long serialVersionUID = -8773024983956495431L;
 
     @Override
@@ -13,7 +16,7 @@
         return "Parser time out";
     }
     
-    public ParseTimeoutException(SGLR parser, int token, int offset, int lineNumber, int columnNumber) {
-        super(parser, token, offset, lineNumber, columnNumber);
+    public ParseTimeoutException(SGLR parser, int token, int offset, int lineNumber, int columnNumber, Set<BadTokenException> causes) {
+        super(parser, causes, token, offset, lineNumber, columnNumber);
     }
 }
\ No newline at end of file

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java	2010-01-04 12:33:45 UTC (rev 20464)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RangeList.java	2010-01-04 12:37:47 UTC (rev 20465)
@@ -2,7 +2,6 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 
 /**
@@ -46,10 +45,10 @@
     }
 
     private static List<Range> toSortedList(Range[] ranges) {
+        Arrays.sort(ranges);
         List<Range> results = new ArrayList<Range>(ranges.length);
         for (Range range : ranges)
             results.add(range);
-        Collections.sort(results);
         return results;
     }
     

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2010-01-04 12:33:45 UTC (rev 20464)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2010-01-04 12:37:47 UTC (rev 20465)
@@ -13,7 +13,7 @@
     private SGLR myParser;    
     private StructureSkipSuggestion erroneousRegion;    
     private int errorDetectionLocation;
-    private static int NR_OF_LINES_TILL_SUCCESS=3;
+    public static int NR_OF_LINES_TILL_SUCCESS=3;
 
     /**
      * Supports error recovery by selecting the region containing the error

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-01-04 12:33:45 UTC (rev 20464)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-01-04 12:37:47 UTC (rev 20465)
@@ -13,8 +13,10 @@
 import java.io.PushbackInputStream;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Queue;
+import java.util.Set;
 import java.util.Timer;
 import java.util.TimerTask;
 import java.util.concurrent.CancellationException;
@@ -110,6 +112,8 @@
 
     private boolean reduceRecoverOnly;
     
+    private final Set<BadTokenException> collectedErrors = new LinkedHashSet<BadTokenException>();
+    
     //Keeps track of the indentation for each line
     //public IndentationHandler getIndentHandler() {
       //  return indentHandler;
@@ -170,9 +174,13 @@
             throw new NoRecoveryRulesException(this);
     }
     
-    public RecoveryBase getRecoverHandler() {
+    public RecoverAlgorithm getRecoverHandler() {
         return recoverHandler;
     }
+    
+    public Set<BadTokenException> getCollectedErrors() {
+        return collectedErrors;
+    }
 
     //TODO: Recovery choices (???): structure / structure+bridge / structure+fine-grained / structure+bridge+fine-grained / old backtrack
     /**
@@ -322,6 +330,9 @@
                 //System.out.print((char)currentToken);             
             } while (currentToken != SGLR.EOF && activeStacks.size() > 0);
             
+            if (acceptingStack == null) {
+                collectedErrors.add(createBadTokenException()); 
+            }
             if(useIntegratedRecovery && acceptingStack==null){                
                 recoverIntegrator.recover();                              
                 if(acceptingStack==null && activeStacks.size()>0)
@@ -334,7 +345,7 @@
            
         } catch (CancellationException e) {
             throw new ParseTimeoutException(this, currentToken, tokensSeen - 1, lineNumber,
-                    columnNumber);
+                    columnNumber, collectedErrors);
         }           
                 
         logAfterParsing();    
@@ -370,11 +381,14 @@
         lineNumber = 1;        
         currentInputStream = new PushbackInputStream(fis, 1024);
         acceptingStack = null; 
+        collectedErrors.clear();
         history.keepInitialState(this);
     }    
 
-    private void reportInvalidToken(Frame singlePreviousStack)
-            throws BadTokenException, TokenExpectedException {
+    private BadTokenException createBadTokenException() {
+        Frame singlePreviousStack = activeStacks.size() == 1
+                ? activeStacks.get(0)
+                : null;
         if (singlePreviousStack != null) {
             Action action = singlePreviousStack.peek().getSingularAction();
             
@@ -397,12 +411,12 @@
                 } while (action != null);
 
                 if (expected.length() > 0)
-                    throw new TokenExpectedException(this, expected.toString(), currentToken,
+                    return new TokenExpectedException(this, expected.toString(), currentToken,
                                                      tokensSeen - 1, lineNumber, columnNumber);
             }
         }
         
-        throw new BadTokenException(this, currentToken, tokensSeen - 1, lineNumber,
+        return new BadTokenException(this, currentToken, tokensSeen - 1, lineNumber,
                                            columnNumber);
     }
 
@@ -1058,10 +1072,6 @@
     
     private void logAfterParsing()
             throws BadTokenException, TokenExpectedException {
-        Frame singlePreviousStack;
-        singlePreviousStack = activeStacks.size() == 1
-        ? activeStacks.get(0)
-        : null;
         if (isLogging()) {
             Tools.logger("Number of lines: ", lineNumber);
             Tools.logger("Maximum ", maxBranches, " parse branches reached at token ",
@@ -1077,7 +1087,13 @@
         }
 
         if (acceptingStack == null) {
-            reportInvalidToken(singlePreviousStack);
+            BadTokenException bad = createBadTokenException();
+            if (collectedErrors.isEmpty()) {
+                throw bad;
+            } else {
+                collectedErrors.add(bad);
+                throw new MultiBadTokenException(this, collectedErrors);
+            }
         }
 
         if (isDebugging()) {



From L.C.L.Kats at tudelft.nl  Mon Jan  4 13:40:59 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Jan 2010 12:40:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20466 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms
	strc-java/trunk/java strc-java/trunk/java/runtime/org/strategoxt
	strc-java/trunk/java/runtime/org/strategoxt/lang
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override
	strc-java/trunk/java/tools/org/strategoxt/tools/lib
	strc-java/trunk/test strc-java/trunk/test/strc1
	strc-java/trunk/trans
Message-ID: <201001041240.o04CexCB000382@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-04 12:40:58 +0000 (Mon, 04 Jan 2010)
New Revision: 20466

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20466&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkdtemp.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_topdown_fputs.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/gpp-performance.str
   strc-java/trunk/test/strc1/test112.str
   strc-java/trunk/test/strc1/test113.str
   strc-java/trunk/test/strc1/test114.str
   strc-java/trunk/test/strc1/test115.str
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Strategy.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/InlinePrinter.java
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/StackSaver.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatLibrary.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/strc-compat.str
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str
   strc-java/trunk/test/Makefile.am
   strc-java/trunk/trans/java-dead-assigns.str
   strc-java/trunk/trans/s2j.str
   strc-java/trunk/trans/strj-options.str
   strc-java/trunk/trans/strj.str

Log:
- Added a copy constructor to HybridInterpreter to make multiple instances in a lightweight fashion
- Added SSL_mkdtemp
- ...

Changes (first 1000 lines of the diffs):

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -154,6 +154,10 @@
      public ITermFactory getFactory() {         return context.getFactory();+    }
+    
+    public ITermFactory getProgramFactory() {
+        return context.getProgramFactory();
     }      public final void load(InputStream stream) throws IOException, InterpreterException {
Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/StrategoSignature.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -34,6 +34,8 @@
 
     private final IStrategoConstructor CTOR_SDefT;
 
+    private final IStrategoConstructor CTOR_AnnoDef;
+
     private final IStrategoConstructor CTOR_As;
 
     private final IStrategoConstructor CTOR_Wld;
@@ -78,6 +80,7 @@
         CTOR_ConstType = factory.makeConstructor("ConstType", 1);// todo
         CTOR_FunType = factory.makeConstructor("FunType", 2);// todo
         CTOR_SDefT = factory.makeConstructor("SDefT", 4);// todo
+        CTOR_AnnoDef = factory.makeConstructor("AnnoDef", 2);
         CTOR_As = factory.makeConstructor("As", 2);// todo
         CTOR_Wld = factory.makeConstructor("Wld", 0);// todo
         CTOR_Build = factory.makeConstructor("Build", 1);
@@ -153,6 +156,10 @@
         return CTOR_SDefT;
     }
 
+    public IStrategoConstructor getAnnoDef() {
+        return CTOR_AnnoDef;
+    }
+
     public IStrategoConstructor getAs() {
         return CTOR_As;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/IOAgent.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -190,9 +190,19 @@
     }
     
     public String createTempFile(String prefix) throws IOException {
-        return File.createTempFile(prefix, null).getPath(); 
+        return File.createTempFile(prefix, null).getPath();
     }
     
+    public String createTempDir(String prefix) throws IOException {
+        File result;
+        do {
+            result = File.createTempFile(prefix, null);
+            result.delete();
+        } while (!result.mkdir());
+        result.deleteOnExit();
+        return result.getPath();
+    }
+    
     public boolean mkdir(String fn) {
         return openFile(fn).mkdir();
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -44,6 +44,7 @@
         add(new SSL_mkdir());
         add(new SSL_P_tmpdir());
         add(new SSL_mkstemp());
+        add(new SSL_mkdtemp());
         add(new SSL_filemode());
         add(new SSL_S_ISDIR());
         add(new SSL_divi());

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkdtemp.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkdtemp.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_mkdtemp.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -0,0 +1,55 @@
+package org.spoofax.interpreter.library.ssl;
+
+import static org.spoofax.interpreter.core.Tools.*;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SSL_mkdtemp extends AbstractPrimitive {
+    
+    public SSL_mkdtemp() {
+        super("SSL_mkdtemp", 0, 1);
+    }
+
+    /**
+     * Create a new temp file.
+     * 
+     * Stratego types: String -> String * Int.
+     */
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+            throws InterpreterException {
+        
+        if (tvars[0].getTermType() != IStrategoTerm.STRING)
+            return false;
+        
+        // HACK: We ignore the template directory, and just use it as a filename prefix
+        String prefix = new File(javaString(tvars[0])).getName();
+        if (prefix.endsWith("XXXXXX"))
+            prefix = prefix.substring(0, prefix.length() - 6);
+        
+        SSLLibrary op = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+        IOAgent agent = op.getIOAgent();
+        ITermFactory factory = env.getFactory();
+         
+        try {
+            String name = agent.createTempDir(prefix);
+            env.setCurrent(factory.makeString(name));
+            return true;
+        } catch (IOException e) {
+            return false;
+        }
+    }
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_perror.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -7,6 +7,8 @@
  */
 package org.spoofax.interpreter.library.ssl;
 
+import static org.spoofax.interpreter.core.Tools.*;
+
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.library.AbstractPrimitive;
@@ -24,10 +26,10 @@
             throws InterpreterException {
         
         String message = tvars[0].getTermType() == IStrategoTerm.STRING
-            ? tvars[0] + " - "
-            : "";
+            ? asJavaString(tvars[0])
+            : "(no details on this error; perror not supported)";
         
-        System.err.println("ERROR: " + message + "<perror() not supported on this platform>");
+        System.err.println("ERROR: " + message);
         return true;
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_stream.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -14,6 +14,7 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
@@ -38,7 +39,8 @@
         try {
             env.setCurrent(env.getFactory().parseFromStream(is));
         } catch(IOException e) {
-            throw new InterpreterException(e);
+            or.getIOAgent().getOutputStream(IOAgent.CONST_STDERR).println("SSL_read_term_from_stream: " + e.getMessage());
+            return false;
         }
         return true;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_string.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_string.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_read_term_from_string.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -11,13 +11,17 @@
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOAgent;
 import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ParseError;
 
 public class SSL_read_term_from_string extends AbstractPrimitive {
+    
+    private static final String NAME = "SSL_read_term_from_string";
 
     SSL_read_term_from_string() {
-        super("SSL_read_term_from_string", 0, 1);
+        super(NAME, 0, 1);
     }
     
     @Override
@@ -27,8 +31,13 @@
         if(!Tools.isTermString(tvars[0]))
             return false;
         
-        IStrategoTerm t = env.getFactory().parseFromString(Tools.javaString(tvars[0]));
-        env.setCurrent(t);
+        try {
+            IStrategoTerm t = env.getFactory().parseFromString(Tools.javaString(tvars[0]));
+            env.setCurrent(t);
+        } catch (ParseError e) {
+            SSLLibrary.instance(env).getIOAgent().getOutputStream(IOAgent.CONST_STDERR).println(NAME + ": " + e.getMessage());
+            return false;
+        }
         return true;
     }
 

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/CallT.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -12,6 +12,7 @@
 import org.spoofax.interpreter.core.IContext;
 import org.spoofax.interpreter.core.InterpreterException;
 import org.spoofax.interpreter.core.Tools;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
 import org.spoofax.interpreter.core.VarScope;
 import org.spoofax.interpreter.stratego.SDefT.SVar;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -42,7 +43,7 @@
     	SDefT sdef = env.lookupSVar(name);
     	
         if (sdef == null)
-            throw new InterpreterException("Not found '" + name + "'");
+            throw new UndefinedStrategyException("Not found '" + name + "'");
         
         boolean isCompiledStrategy = sdef.isCompiledStrategy();
         if (!isCompiledStrategy)
@@ -131,7 +132,7 @@
         SDefT sdef = env.lookupSVar(name); //getsdef(env);
     	
         if (sdef == null)
-            throw new InterpreterException("Not found '" + name + "'");
+            throw new UndefinedStrategyException("Not found '" + name + "'");
         
         boolean isCompiledStrategy = sdef.isCompiledStrategy();
         if (!isCompiledStrategy)

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Strategy.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Strategy.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/stratego/Strategy.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -62,6 +62,7 @@
     }
     
     public boolean evaluate(IContext env) throws InterpreterException {
+        // XXX: Don't use exceptions for control flow
     	class Finished extends InterpreterException {
 			private static final long serialVersionUID = -857185250056951094L;
 			boolean result;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/InlinePrinter.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/InlinePrinter.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/InlinePrinter.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -12,9 +12,11 @@
 	}
 
 	public void print(String string) {
-		if (string.matches("^ *$")) {
-			return ;
+		/* UNDONE: don't break empty strategostrings
+	    if (string.matches("^ *$")) {
+		    return ;
 		}
+		*/
 		out.append(string);
 	}
 
@@ -37,9 +39,11 @@
 	}
 
 	public void println(String string, boolean b) {
+	    /*
 		if (string.matches("^ *$")) {
 			return ;
 		}
+		*/
 		out.append(string);
 	}
 

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/java/Makefile.am	2010-01-04 12:40:58 UTC (rev 20466)
@@ -15,6 +15,7 @@
   runtime/org/strategoxt/lang/compat/override/jsglr_parser_compat/Main.java \
   runtime/org/strategoxt/lang/compat/override/stratego_aterm_compat/Main.java \
   runtime/org/strategoxt/lang/compat/override/performance_tweaks/Main.java \
+  runtime/org/strategoxt/lang/compat/override/gpp_performance/Main.java \
   runtime/org/strategoxt/lang/compat/override/xtc_compat/Main.java \
   runtime/org/strategoxt/lang/compat/override/native_calls_compat/Main.java \
   runtime/org/strategoxt/lang/compat/override/java_integration/Main.java \
@@ -175,8 +176,8 @@
 		exit 1 ;\
 	fi
 
-lib/org/strategoxt/stratego_gpp/Main.java : $(STRATEGOXT)/share/libstratego-gpp.ctree ../trans/strj
-	$(STRJ) -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/sdf/gpp -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.stratego_gpp -la stratego-lib -la stratego-lib -la stratego-sglr
+lib/org/strategoxt/stratego_gpp/Main.java : $(STRATEGOXT)/share/libstratego-gpp.ctree ../trans/strj runtime/org/strategoxt/lang/compat/override/gpp_performance/Main.java
+	$(STRJ) -I $(STRATEGOXT)/share -I $(STRATEGOXT)/share/sdf/gpp -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.stratego_gpp -la stratego-lib -la stratego-lib -la stratego-sglr -la org.strategoxt.lang.compat.override.gpp_performance
 
 lib/org/strategoxt/stratego_aterm/Main.java : $(STRATEGOXT)/share/libstratego-aterm.ctree runtime/org/strategoxt/lang/compat/override/stratego_aterm_compat/Main.java ../trans/strj
 	$(STRJ) -I $(STRATEGOXT)/share -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.stratego_aterm -la stratego-lib -la stratego-gpp -la org.strategoxt.lang.compat.override.stratego_aterm_compat
@@ -210,6 +211,9 @@
 runtime/org/strategoxt/lang/compat/override/performance_tweaks/Main.java : runtime/org/strategoxt/lang/compat/override/performance-tweaks.str ../trans/strj
 	$(STRJ) -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.performance_tweaks -la stratego-lib
 
+runtime/org/strategoxt/lang/compat/override/gpp_performance/Main.java : runtime/org/strategoxt/lang/compat/override/gpp-performance.str ../trans/strj
+	$(STRJ) -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.gpp_performance -la stratego-lib -la stratego-gpp
+
 runtime/org/strategoxt/lang/compat/override/xtc_compat/Main.java : runtime/org/strategoxt/lang/compat/override/xtc-compat.str ../trans/strj
 	$(STRJ) -i $< -o $@ $(STRJFLAGS) -p org.strategoxt.lang.compat.override.xtc_compat -la stratego-lib -la stratego-xtc
 

Modified: strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/java/runtime/org/strategoxt/HybridInterpreter.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -16,6 +16,7 @@
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.StackTracer;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.core.VarScope;
 import org.spoofax.interpreter.library.IOperatorRegistry;
 import org.spoofax.interpreter.stratego.SDefT;
 import org.spoofax.interpreter.terms.IStrategoString;
@@ -70,6 +71,23 @@
 		compiledContext = new HybridCompiledContext(termFactory);
 	}
 	
+	/**
+	 * Creates an interpreter that bases its definition scope on an existing instance.
+	 */
+	public HybridInterpreter(HybridInterpreter interpreter) {
+		this(interpreter.getFactory(), ((org.spoofax.interpreter.core.Context) interpreter.getContext()).getProgramFactory());
+		getContext().setVarScope(new VarScope(interpreter.getContext().getVarScope()));
+		interpreter.init();
+		for (IOperatorRegistry registry : interpreter.getCompiledContext().getOperatorRegistries()) {
+			if (getContext().getOperatorRegistry(registry.getOperatorRegistryName()) == null)
+				addOperatorRegistry(registry);
+		}
+		registeredLibraries = interpreter.registeredLibraries;
+		loadedJars = interpreter.loadedJars;
+		setIOAgent(interpreter.getIOAgent());
+		setCurrent(interpreter.current());
+	}
+	
 	public static void main(String... args) {
 		if (args == null || args.length < 1) {
 			System.out.println(USAGE);
@@ -246,7 +264,7 @@
 	 * (If not invoked, load() ensures lazy initialization.)
 	 */
 	public void init() {
-		if (!registeredLibraries) {
+		if (!registeredLibraries && !loadedJars) {
 			registeredLibraries = true;
 			registerLibraries();
 		}
@@ -278,6 +296,14 @@
 		return compiledContext;
 	}
 	
+	public static Context getCompiledContext(IContext context) {
+		return ((HybridContext) context).getCompiledContext();
+	}
+	
+	public static IContext getContext(Context context) {
+		return ((HybridCompiledContext) context).getContext();
+	}
+	
 	/**
 	 * Invokes a compiled or interpreted strategy bound to this instance.
 	 * 
@@ -332,6 +358,10 @@
 		public StackTracer getStackTracer() {
 			return compiledContext;
 		}
+		
+		public Context getCompiledContext() {
+			return compiledContext;
+		}
 	}
 	
 	/**
@@ -345,6 +375,10 @@
 			super(factory);
 		}
 		
+		public IContext getContext() {
+			return HybridInterpreter.this.getContext();
+		}
+
 		@Override
 		public void addOperatorRegistry(IOperatorRegistry or) {
 			super.addOperatorRegistry(or);

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropSDefT.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -9,6 +9,7 @@
 import org.spoofax.interpreter.stratego.SDefT;
 import org.spoofax.interpreter.stratego.StupidFormatter;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.HybridInterpreter;
 
 /**
  * Adapts an {@link Strategy} strategy to a {@link SDefT},
@@ -24,40 +25,46 @@
 	
 	private static final String[] NO_STRINGS = {};
 	
-	private final Context compiledContext;
-	
 	private final String strategyClassName;
 	
 	private final ClassLoader classLoader;
 	
 	private Strategy strategy;
 
-	public InteropSDefT(Strategy strategy, IContext context, Context compiledContext) {
+	public InteropSDefT(Strategy strategy, IContext context) {
 		super(context.getVarScope());
 		this.strategyClassName = null;
 		this.classLoader = null;
-		this.compiledContext = compiledContext;
 		this.strategy = strategy;
 	}
+	
+	@Deprecated
+	public InteropSDefT(Strategy strategy, IContext context, Context compiledContext) {
+		this(strategy, context);
+	}
 
 	/**
 	 * Creates a new InteropSDefT that dynamically loads the specified strategy class.
 	 */
-	public InteropSDefT(ClassLoader classLoader, String strategyClassName, IContext context, Context compiledContext) {
+	public InteropSDefT(ClassLoader classLoader, String strategyClassName, IContext context) {
 		super(context.getVarScope());
 		this.classLoader = classLoader;
 		this.strategyClassName = strategyClassName;
-		this.compiledContext = compiledContext;
 	}
+	
+	@Deprecated
+	public InteropSDefT(ClassLoader classLoader, String strategyClassName, IContext context, Context compiledContext) {
+		this(classLoader, strategyClassName, context);
+	}
 
-	public static SDefT[] toInteropSDefTs(Strategy[] strategies, IContext context, Context compiledContext) {
+	public static SDefT[] toInteropSDefTs(Strategy[] strategies, IContext context) {
 		SDefT[] results = new SDefT[strategies.length];
 		for (int i = 0; i < strategies.length; i++) {
 			Strategy strategy = strategies[i];
 			if (strategy instanceof InteropStrategy) {
 				results[i] = ((InteropStrategy) strategy).getDefinition();
 			} else {
-				results[i] = new InteropSDefT(strategy, context, compiledContext);
+				results[i] = new InteropSDefT(strategy, context);
 			}
 		}
 		return results;
@@ -148,7 +155,7 @@
 				for (int i = 0; i < sargs.length; i++) {
 					sargDefs[i] = new SDefT("s" + i, NO_SVARS, NO_STRINGS, sargs[i], env.getVarScope());
 				}
-				return InteropSDefT.this.evaluate(env, InteropStrategy.toInteropStrategies(sargDefs, env), targs);
+				return InteropSDefT.this.evaluate(env, InteropStrategy.toInteropStrategies(sargDefs), targs);
 			}
 		};
 	}
@@ -175,7 +182,7 @@
 			targs[i] = targ;
 		}
 		
-		return evaluate(env, InteropStrategy.toInteropStrategies(sargs, env), targs);
+		return evaluate(env, InteropStrategy.toInteropStrategies(sargs), targs);
 	}
 
 	private boolean evaluate(IContext env, Strategy[] sargs, IStrategoTerm[] targs)
@@ -183,7 +190,8 @@
 		
 		IStrategoTerm result;
 		try {
-			result = getStrategy().invokeDynamic(compiledContext, env.current(), sargs, targs);
+			Context context = HybridInterpreter.getCompiledContext(env);
+			result = getStrategy().invokeDynamic(context, env.current(), sargs, targs);
 		} catch (StrategoErrorExit e) {
 			throw new InterpreterErrorExit(e.getMessage(), e.getTerm(), e);
 		} catch (StrategoExit e) {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/InteropStrategy.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -9,6 +9,7 @@
 import org.spoofax.interpreter.core.VarScope;
 import org.spoofax.interpreter.stratego.SDefT;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.HybridInterpreter;
 
 /**
  * Adapts an {@link SDefT} definition to a {@link Strategy},
@@ -20,21 +21,18 @@
 	
 	private final SDefT definition;
 	
-	private final IContext context;
-	
-	public InteropStrategy(SDefT definition, IContext context) {
+	public InteropStrategy(SDefT definition) {
 		this.definition = definition;
-		this.context = context;
 	}
 	
-	public static Strategy[] toInteropStrategies(SDefT[] definitions, IContext context) {
+	public static Strategy[] toInteropStrategies(SDefT[] definitions) {
 		Strategy[] results = new Strategy[definitions.length];
 		for (int i = 0; i < definitions.length; i++) {
 			SDefT definition = definitions[i];
 			if (definition instanceof InteropSDefT) {
 				results[i] = ((InteropSDefT) definition).getStrategy();
 			} else {
-				results[i] = new InteropStrategy(definitions[i], context);
+				results[i] = new InteropStrategy(definitions[i]);
 			}
 		}
 		return results;
@@ -42,6 +40,7 @@
 	
 	@Override
 	public IStrategoTerm invokeDynamic(Context compiledContext, IStrategoTerm current, Strategy[] sargs, IStrategoTerm[] targs) {
+		IContext context = HybridInterpreter.getContext(compiledContext);
 		VarScope oldScope = context.getVarScope();
 		try {
 		    VarScope defScope = definition.getScope();
@@ -71,7 +70,8 @@
 		
 		SDefT.SVar[] sparams = definition.getStrategyParams();
 		String[] tparams = definition.getTermParams();
-		SDefT[] sargs2 = InteropSDefT.toInteropSDefTs(sargs, context, compiledContext);
+		IContext context = HybridInterpreter.getContext(compiledContext);
+		SDefT[] sargs2 = InteropSDefT.toInteropSDefTs(sargs, context);
 		if (sparams.length != sargs.length || tparams.length != targs.length) {
 			throw new InterpreterException("Illegal number of arguments passed to strategy "
 					+ getName() + ": " + Arrays.toString(sargs) + "|" + Arrays.toString(targs));

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/StackSaver.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/StackSaver.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/StackSaver.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -67,11 +67,17 @@
 		try {
 			return result.get();
 		} catch (ExecutionException e) {
-			if (e.getCause() instanceof RuntimeException)
-				throw (RuntimeException) e.getCause();
-			if (e.getCause() instanceof Error)
-				throw (Error) e.getCause();
-			throw new StrategoException("Unexpected exception", e);
+			try {
+				throw e.getCause();
+			} catch (StrategoErrorExit f) {
+				throw new StrategoErrorExit(f.getMessage(), f.getTerm(), e.getCause());
+			} catch (StrategoExit f) {
+				throw new StrategoExit(f.getValue(), e.getCause());
+			} catch (StrategoException f) {
+				throw new StrategoException(f.getMessage(), e.getCause());
+			} catch (Throwable f) {
+				throw new RuntimeException(e.getCause());
+			}
 		} catch (InterruptedException e) {
 			throw new RuntimeException(e);
 		} finally {

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/StrategoExit.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -16,7 +16,7 @@
         this.value = value;
     }
     
-    public StrategoExit(int value, String message, Throwable cause) {
+    protected StrategoExit(int value, String message, Throwable cause) {
     	super(message, cause);
     	this.value = value;
     }
@@ -25,10 +25,6 @@
     	this(value, "Legal exit: return code " + valueToString(value), cause);
     }
     
-    public StrategoExit(int value, String message) {
-    	this(value, message, null);
-    }
-    
     public StrategoExit(StrategoExit cause) {
     	this(cause.getValue(), cause);
     }

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatLibrary.java	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/CompatLibrary.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -13,6 +13,7 @@
 		add(new SSL_EXT_call());
 		add(new SSL_EXT_java_call());
 		add(new SSL_EXT_read_text_from_stream());
+		add(new SSL_EXT_topdown_fputs());
 	}
 
 	public String getOperatorRegistryName() {

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_topdown_fputs.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_topdown_fputs.java	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/SSL_EXT_topdown_fputs.java	2010-01-04 12:40:58 UTC (rev 20466)
@@ -0,0 +1,64 @@
+package org.strategoxt.lang.compat;
+
+import static org.spoofax.interpreter.core.Tools.*;
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.Writer;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.library.IOAgent;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+import aterm.stream.BufferedOutputStreamWriter;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SSL_EXT_topdown_fputs extends AbstractPrimitive {
+	
+	protected SSL_EXT_topdown_fputs() {
+		super("SSL_EXT_topdown_fputs", 0, 1);
+	}
+
+	@Override
+	public boolean call(IContext env,
+			org.spoofax.interpreter.stratego.Strategy[] svars,
+			IStrategoTerm[] tvars) throws InterpreterException {
+		
+		IStrategoTerm streamTerm = tvars[0];
+
+		if (streamTerm.getTermType() != APPL || streamTerm.getSubtermCount() != 1 || streamTerm.getSubterm(0).getTermType() != INT)
+			return false;
+		
+		int streamInt = asJavaInt(streamTerm.getSubterm(0)); 
+
+		SSLLibrary or = SSLLibrary.instance(env);
+		OutputStream out = or.getIOAgent().getOutputStream(streamInt);
+		BufferedOutputStreamWriter writer = new BufferedOutputStreamWriter(out);
+		
+		try {
+			invoke(env.current(), writer);
+			writer.flush();
+			return true;
+		} catch (IOException e) {
+			or.getIOAgent().getOutputStream(IOAgent.CONST_STDERR).println(getName() + ": " + e.getMessage());
+			return false;
+		}
+	}
+	
+	public void invoke(IStrategoTerm tree, Writer writer) throws IOException {
+		for (int i = 0, size = tree.getSubtermCount(); i < size; i++) {
+			IStrategoTerm child = tree.getSubterm(i);
+			if (child.getSubtermCount() > 0) {
+				invoke(child, writer);
+			} else if (child.getTermType() == STRING) {
+				writer.write(asJavaString(child));
+			} 
+		}
+	}
+}

Added: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/gpp-performance.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/gpp-performance.str	                        (rev 0)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/gpp-performance.str	2010-01-04 12:40:58 UTC (rev 20466)
@@ -0,0 +1,9 @@
+module gpp-performance
+
+imports
+  libstratego-gpp
+
+rules
+
+  override gpp-topdown-fputs(|stream) =
+    prim("SSL_EXT_topdown_fputs", stream)

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/strc-compat.str
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/strc-compat.str	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/override/strc-compat.str	2010-01-04 12:40:58 UTC (rev 20466)
@@ -7,6 +7,7 @@
 
 imports
   libstratego-lib
+  libstratego-xtc
   libstrc
   strj-version
 

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str
===================================================================
--- strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/java/tools/org/strategoxt/tools/lib/pp-pp-table.str	2010-01-04 12:40:58 UTC (rev 20466)
@@ -12,8 +12,8 @@
     )
   
   pp-pp-table =
-    if [is-string, is-list => l] then // HACK: allow calling with <call>
-      ![l]
+    if [is-string, ?pp] then // HACK: allow calling with <call>
+      ![pp]
     end
   ; ast2abox(|[<import-term(pp-table-pretty.pp.af)>])
   ; box2text-string(|80)

Modified: strc-java/trunk/test/Makefile.am
===================================================================
--- strc-java/trunk/test/Makefile.am	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/test/Makefile.am	2010-01-04 12:40:58 UTC (rev 20466)
@@ -34,6 +34,7 @@
 		  test91 test92 test93 test94 test95 test96			 \
 		  test97 test98	test99 test100 test101 test102 test103		 \
 		  test104 test105 test106 test107 test108 test109 test110 test111		 \
+		  test112 test113 test114 test115 \
 		  io-test10 io-test11 io-test1 io-test2 io-test3	 \
                   qcons-test01 qcons-test02 qcons-test03 qcons-test04		 \
                   test-chain01 test-chain02 test-chain03			 \

Copied: strc-java/trunk/test/strc1/test112.str (from rev 20423, strategoxt/trunk/strc-core/tests/test1/test112.str)
===================================================================
--- strc-java/trunk/test/strc1/test112.str	                        (rev 0)
+++ strc-java/trunk/test/strc1/test112.str	2010-01-04 12:40:58 UTC (rev 20466)
@@ -0,0 +1,65 @@
+/**
+ * Test for $[ string quotation syntax. ]
+ * As this tests for indentation using the regular string syntax,
+ * this test is ironically very badly formatted.
+ */
+module test112
+imports libstratego-lib
+
+strategies
+  
+  show(|s) = where(write-to-string; debug(!s)); say(id)
+
+  main =
+    x := $[ 1
+            2 ];
+    !$[ Indent me: [x]]; show(|1) =>
+"Indent me: 1
+           2";
+    
+    !$[ Indent
+           me too: [x] ]; show(|2) =>
+"Indent
+   me too: 1
+           2";
+    
+    y := $[- [x] -
+             3];
+    
+    !${ me
+    [three]: {y} }; show(|3) =>
+"me
+[three]: - 1
+           2 -
+           3";
+    
+    !$[]; show(|4) => "";
+    !$[[""]]; show(|5) => "";
+    !$[ - ["a"]
+          b
+      ]; show(|6) =>
+"- a
+  b
+";
+    !$[ 1
+["2"]3]; show(|7) =>
+"1
+23";
+
+    z := "z";
+    !$< <z> <z> $<z>$ >; show(|8) =>
+"z z $z$";
+
+    !$<$ $<x>$ <z>$$>$$ >; show(|9) =>
+"$ $1
+   2$ z$>$";
+
+    !$<$ $<x>$ <z>$<">">$ >; show(|10) =>
+"$ $1
+   2$ z$>$";
+
+    !${ block {"{"} foo $}$  }; show(|11) =>
+"block { foo }";
+
+    !$[ 1[2]3 ]; show(|12) => "123"
+


Property changes on: strc-java/trunk/test/strc1/test112.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-annos/strc-core/tests/test1/test112.str:19217-19721
/strategoxt/branches/strategoxt-with/strc-core/tests/test1/test112.str:18038-18120

Copied: strc-java/trunk/test/strc1/test113.str (from rev 20423, strategoxt/trunk/strc-core/tests/test1/test113.str)
===================================================================
--- strc-java/trunk/test/strc1/test113.str	                        (rev 0)
+++ strc-java/trunk/test/strc1/test113.str	2010-01-04 12:40:58 UTC (rev 20466)
@@ -0,0 +1,71 @@
+/**
+ * Test for $[ string quotation syntax ] in combination with tabs (STR-783.)
+ * Sander likes tabs.
+ */
+module test113
+
+imports
+  libstratego-lib
+
+strategies
+  
+	show(|s) = where(write-to-string; debug(!s)); say(id)
+
+	main =
+		s := $[ Sorry! ];
+		!$[		I like tabs.
+					[s]
+				[s]];
+		show(|1) => x =>
+"I like tabs.
+	Sorry!
+Sorry!";
+        !$[ Sometimes, I like tabs with my spaces.
+            	[x]
+            [s]];
+		show(|2) =>
+"Sometimes, I like tabs with my spaces.
+	I like tabs.
+		Sorry!
+	Sorry!
+Sorry!";
+		!$[ Sometimes, I even like spaces with my tabs.
+			  Makes people angry and confused sometimes.
+		      Again, [s] Shame on me. [s]
+		    [s] [s] ];
+		show(|3) =>
+"Sometimes, I even like spaces with my tabs.
+  Makes people angry and confused sometimes.
+  Again, Sorry! Shame on me. Sorry!
+Sorry! Sorry!";
+	n := $[	1
+		2 ];
+	!$[
+		tabs go here
+			0
+			[n]
+	]; show(|4) =>
+"
+	tabs go here
+		0
+		1
+		2
+";
+	!$[	tabs go here
+			0
+			[n]
+	]; show(|5) =>
+"tabs go here
+	0
+	1
+	2
+";
+	!$[ tabs go here
+			0
+			[n]
+	]; show(|6) =>
+"tabs go here
+	0
+	1
+	2
+"


Property changes on: strc-java/trunk/test/strc1/test113.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-annos/strc-core/tests/test1/test113.str:19217-19721
/strategoxt/branches/strategoxt-with/strc-core/tests/test1/test113.str:18038-18120

Copied: strc-java/trunk/test/strc1/test114.str (from rev 20423, strategoxt/trunk/strc-core/tests/test1/test114.str)
===================================================================
--- strc-java/trunk/test/strc1/test114.str	                        (rev 0)
+++ strc-java/trunk/test/strc1/test114.str	2010-01-04 12:40:58 UTC (rev 20466)
@@ -0,0 +1,13 @@
+module test114a
+
+imports
+  libstratego-lib
+  libstratego-sdf
+
+signature constructors
+  
+  sort : Term -> Term
+
+strategies
+
+  main = !sort(1); sort(id)


Property changes on: strc-java/trunk/test/strc1/test114.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-annos/strc-core/tests/test1/test114.str:19217-19721
/strategoxt/branches/strategoxt-with/strc-core/tests/test1/test114.str:18038-18120

Copied: strc-java/trunk/test/strc1/test115.str (from rev 20423, strategoxt/trunk/strc-core/tests/test1/test115.str)
===================================================================
--- strc-java/trunk/test/strc1/test115.str	                        (rev 0)
+++ strc-java/trunk/test/strc1/test115.str	2010-01-04 12:40:58 UTC (rev 20466)
@@ -0,0 +1,7 @@
+module test115
+
+imports
+  libstratego-lib
+  libstratego-sdf
+  test114
+


Property changes on: strc-java/trunk/test/strc1/test115.str
___________________________________________________________________
Added: svn:mergeinfo
   + /strategoxt/branches/strategoxt-annos/strc-core/tests/test1/test115.str:19217-19721
/strategoxt/branches/strategoxt-with/strc-core/tests/test1/test115.str:18038-18120

Modified: strc-java/trunk/trans/java-dead-assigns.str
===================================================================
--- strc-java/trunk/trans/java-dead-assigns.str	2010-01-04 12:37:47 UTC (rev 20465)
+++ strc-java/trunk/trans/java-dead-assigns.str	2010-01-04 12:40:58 UTC (rev 20466)
@@ -69,7 +69,7 @@
   is-container-stm =
     ?Labeled(_, _) + ?Block(_) + ?If(_, _) + ?If(_, _, _)
   + ?Try(_, _) + ?Try(_, _, _) + ?Synchronized(_, _)
-  + ?While(_, _) + ?DoWhile(_, _) + ?For(_, _) + ?For(_, _, _, _)
+  + ?While(_, _) + ?DoWhile(_, _) + ?ForEach(_, _, _) + ?For(_, _, _, _)
 

(79 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Mon Jan  4 15:21:53 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Jan 2010 14:21:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20468 - LennartKats -
 in spoofax-imp/trunk: . org.eclipse.imp org.strategoxt.imp.editors.aterm
 org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm
 org.strategoxt.imp.editors.editorservice
 org.strategoxt.imp.editors.editorservice/editor/java/org/strategoxt/imp/editors/editorservice
 org.strategoxt.imp.editors.sdf
 org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf
 org.strategoxt.imp.editors.sdf/trans org.strategoxt.imp.editors.stratego
 org.strategoxt.imp.editors.stratego/.externalToolBuilders
 org.strategoxt.imp.editors.stratego/editor
 org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego
 org.strategoxt.imp.editors.stratego/lib
 org.strategoxt.imp.editors.stratego/trans org.strategoxt.imp.feature
 org.strategoxt.imp.generator/src/sdf2imp
 org.strategoxt.imp.generator/src/sdf2imp/project
 org.strategoxt.imp.generator/src/sdf2imp/services
 org.strategoxt.imp.generator/src/sd! f2imp/util
 org.strategoxt.imp.generator/src/syntax
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
 org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
 org.strategoxt.imp.runtime
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
 org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
 org.strategoxt.imp.updatesite
Message-ID: <201001041421.o04ELr6K002040@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-04 14:21:48 +0000 (Mon, 04 Jan 2010)
New Revision: 20468

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20468&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/IDynamicLanguageService.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ReferenceResolverDelegate.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.common.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.common.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.common.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.common.xml
Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/java/org/strategoxt/imp/editors/editorservice/EditorServiceParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/editor/java/org/strategoxt/imp/editors/sdf/SDFParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/trans/sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.externalToolBuilders/Stratego-Sugar build.main.xml.launch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/.project
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.main.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Colorer.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/java/org/strategoxt/imp/editors/stratego/StrategoSugarParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/main.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-builder-xml.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-parse-controller.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-folding-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/input.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/output.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Comments.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/ReferencesService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Stratego-Java-EditorService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/AntDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Debug.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractServiceFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicFoldingUpdater.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicOutliner.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicReferenceResolver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicStrategoFeedback.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/FoldingUpdaterFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/OutlinerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ParseControllerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ReferenceResolverFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/StrategoObserverFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/SyntaxPropertiesFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TokenColorerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AmbAsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AsfixImploder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstMessageHandler.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/tokens/SGLRTokenizer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/BuilderButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/DocumentationProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/NodeMapping.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Outliner.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/SidePaneEditorHelper.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPAnnoLocationPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/SourceMappings.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoConsole.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
- Added content and keyword completion support
  (operates purely on the abstract syntax level; doesn't require grammar changes)
- Better parse errors if recovery fails or regions are skipped
- Added F3 keybinding for reference resolving
- Refactored dynamic editor loading
- Some fixes


Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2010-01-04 13:38:36 UTC (rev 20467)
+++ spoofax-imp/trunk/Makefile	2010-01-04 14:21:48 UTC (rev 20468)
@@ -10,9 +10,8 @@
 
 %.ant : .PHONY
 	cd $* && ANT_OPTS=-Xss4m CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar \
-	    ant -f build.main.xml -Dexternaldef=../org.strategoxt.imp.generator/src/syntax/EditorService.def \
-	                             -Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib \
-	                             -Declipse.spoofaximp.strategojar=utils/strategoxt.jar
+	    ant -f build.main.xml -Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib \
+	                          -Declipse.spoofaximp.strategojar=utils/strategoxt.jar
 
 check : all
 	$(MAKE) -C org.strategoxt.imp.generator check

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-04 13:38:36 UTC (rev 20467)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-04 14:21:48 UTC (rev 20468)
@@ -16,7 +16,7 @@
  		if (!sIsFullyInitialized)
  			initializeRegistryAsNeeded();
 -		IPath path= EditorInputUtils.getPath(editorInput);
-+		IPath path= EditorInputUtils.getFile(editorInput).getLocation(); // LK
++		IPath path= EditorInputUtils.getFile(editorInput).getFullPath(); // LK
  
  		return findLanguage(path, docProvider.getDocument(editorInput));
  	}
@@ -58,6 +58,20 @@
        public void initialize() {          IRegionSelectionService regionSelector= (IRegionSelectionService) fTextEditor.getAdapter(IRegionSelectionService.class);+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/HyperlinkDetector.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/HyperlinkDetector.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/editor/HyperlinkDetector.java	(working copy)
+@@ -87,7 +87,8 @@
+         // to the beginning of the file and give it a nominal length.
+ 
+         final int targetStart= (nodeLocator.getStartOffset(target) < 0) ? 0 : nodeLocator.getStartOffset(target);
+-        final int targetLength= 0; // nodeLocator.getEndOffset(target) - targetStart + 1;
++        // LK
++        final int targetLength= targetStart == 0 ? 0 : nodeLocator.getEndOffset(target) - targetStart + 1;
+ 
+         // Use the file path info to determine whether the target editor is the same as
+         // the source editor, and initialize the TargetLink accordingly.
 Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ParserScheduler.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ParserScheduler.java	(revision 22255)
@@ -94,7 +108,15 @@
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/internal/PresentationController.java	(revision 22255)
 +++ org.eclipse.imp.runtime/src/org/eclipse/imp/editor/internal/PresentationController.java	(working copy)
-@@ -109,6 +109,9 @@
+@@ -13,6 +13,7 @@
+ 
+ import java.io.PrintStream;
+ import java.util.ArrayList;
++import java.util.EmptyStackException;
+ import java.util.Iterator;
+ import java.util.List;
+ import java.util.Stack;
+@@ -109,6 +110,9 @@
          IRegion bigRegion= fColorer.calculateDamageExtent(region, fParseCtlr);
  
          if (bigRegion != null) {
@@ -104,7 +126,33 @@
              fWorkItems.push(bigRegion);
          }
      }
-@@ -157,7 +160,7 @@
+@@ -118,13 +122,18 @@
+ //            if (fWorkItems.size() == 0) {
+ //                ConsoleUtil.findConsoleStream(PresentationController.CONSOLE_NAME).println("PresentationController.update() called, but no damage in the work queue?");
+ //            }
+-            synchronized (fWorkItems) {
+-                for(int n= fWorkItems.size() - 1; !monitor.isCanceled() && n >= 0; n--) {
+-                    Region damage= (Region) fWorkItems.get(n);
+-                    changeTextPresentationForRegion(controller, monitor, damage);
+-                }
+-                if (!monitor.isCanceled())
+-                    fWorkItems.removeAllElements();
++        	// LK: locking using fWorkItems as syncroot can result in deadlocks
++            synchronized (this) {
++            	try {
++	                while (!monitor.isCanceled() && !fWorkItems.isEmpty()) {
++	                    Region damage = (Region) fWorkItems.pop();
++	                    changeTextPresentationForRegion(controller, monitor, damage);
++	                }
++	                // if (!monitor.isCanceled())
++	                //    fWorkItems.removeAllElements();
++            	} catch (EmptyStackException e) {
++            		// Ignore
++            	}
+             }
+         }
+     }
+@@ -157,7 +166,7 @@
              int offset= locator.getStartOffset(token);
              int end= locator.getEndOffset(token);
  
@@ -113,7 +161,15 @@
                  continue;
              }
              changeTokenPresentation(parseController, presentation, token, locator);
-@@ -201,7 +204,7 @@
+@@ -190,6 +199,7 @@
+             	// SMS 16 Sep 2008
+             	int charCount;
+             	if (fSourceViewer != null) {
++            		if (fSourceViewer.getDocument() == null) return; // LK: handle closed documents better
+             		charCount = fSourceViewer.getDocument().getLength();
+             	} else {
+             		charCount = 0;
+@@ -201,7 +211,7 @@
              	int lastLength = presentation.getLastStyleRange().length;
              	int end = lastStart + lastLength;
          		TextPresentation newPresentation = null;
@@ -151,7 +207,17 @@
  
      public Object getAdapter(Class required) {
          if (IContentOutlinePage.class.equals(required)) {
-@@ -1771,7 +1782,8 @@
+@@ -697,7 +708,8 @@
+         IFile file= EditorInputUtils.getFile(editorInput);
+         IPath filePath= EditorInputUtils.getPath(editorInput);
+         try {
+-            ISourceProject srcProject= (file != null) ? ModelFactory.open(file.getProject()) : null;
++        	// LK: check file.getProject() for null for out-of-workspace files
++            ISourceProject srcProject= (file != null && file.getProject() != null) ? ModelFactory.open(file.getProject()) : null;
+ 
+             fLanguageServiceManager.getParseController().initialize(filePath, srcProject, fAnnotationCreator);
+         } catch (ModelException e) {
+@@ -1771,7 +1783,8 @@
                  if (fServiceControllerManager.getPresentationController() != null) {
  //                  System.out.println("Scheduling repair for damage to region " + damage.getOffset() + ":" + damage.getLength() + " in doc of length " + fDocument.getLength());
                      fServiceControllerManager.getPresentationController().damage(damage);
@@ -161,7 +227,7 @@
  //                      System.out.println("** Forcing repair for hyperlink damage to region " + damage.getOffset() + ":" + damage.getLength() + " in doc of length " + fDocument.getLength());
                          fServiceControllerManager.getPresentationController().update(fLanguageServiceManager.getParseController(), fProgressMonitor);
                      }
-@@ -1845,6 +1857,7 @@
+@@ -1845,6 +1858,7 @@
      }
  
      public IParseController getParseController() {
@@ -169,6 +235,29 @@
          return fLanguageServiceManager.getParseController();
      }
      
+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/SourceProposal.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/SourceProposal.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/editor/SourceProposal.java	(working copy)
+@@ -155,6 +155,18 @@
+     public Image getImage() {
+         return null;
+     }
++    
++    public String getNewText() { // LK
++		return fNewText;
++	}
++    
++    public Region getRange() { // LK
++		return fRange;
++	}
++    
++    public String getPrefix() { // LK
++		return fPrefix;
++	}
+ 
+     public IContextInformation getContextInformation() {
+         return null;
 Index: org.eclipse.imp.runtime/src/org/eclipse/imp/utils/AnnotationUtils.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/utils/AnnotationUtils.java	(revision 22255)

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.common.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.common.xml	2010-01-04 13:38:36 UTC (rev 20467)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.common.xml	2010-01-04 14:21:48 UTC (rev 20468)
@@ -1,275 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
-<project name="common">
-    
-        <target name="spoofaximp" depends="stratego.ctree,sdf2table,sdf2imp"/>
-    
-        <!-- Initialization -->
-        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
-        <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
-            <isset property="externaldef"/>
-        </condition>
-        <condition property="externaljarimport" value=":${externaljar}" else="">
-            <isset property="externaljar"/>
-        </condition>
-        <fail if="externaljar" unless="externaljarflags"/>
-        <condition property="externaljarflags" value="${externaljarflags}" else="">
-            <isset property="externaljarflags"/>
-        </condition>
-        <mkdir dir="${build}"/>
-        <mkdir dir="${src-gen}"/>
-        <mkdir dir="${dist}"/>
-        <mkdir dir="${include}"/>
-        <mkdir dir="${lib}"/>
-
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
-        
-        <target name="sdf2imp.eclipse" if="eclipse.running">
-            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
-                <arg value="${include}/${esvmodule}.packed.esv"/>
-            </java>
-        </target>
-        
-        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
-            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
-                <arg value="-i"/>
-                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
-                <arg value="-p"/>
-                <arg value="${include}/${sdfmodule}.tbl"/>
-            </java>
-        </target>
-    
-        <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
-                <arg value="-i"/>
-                <srcfile/>
-                <arg value="-o"/>
-                <targetfile/>
-                <arg value="-m"/>
-                <arg value="${sdfmodule}"/>
-                
-                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
-                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
-            </apply>
-        </target>
-        
-        <target name="make-permissive" depends="pack-sdf,copy-sdf">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.def"/>
-                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
-            <antcall target="make-permissive.helper"/>
-        </target>
-    
-        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}-Permissive.def"/>
-                <arg line="--optimize on"/>
-            </java>
-        </target>
-
-        <target name="utils-files">
-            <mkdir dir="utils"/>
-            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
-            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
-            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
-        </target>
-    
-        <target name="pack-sdf" unless="externaldef">
-            <dependset>
-                <srcfileset dir="${syntax}">
-                    <include name="**/*.sdf"/>
-                </srcfileset>
-                <targetfileset file="${include}/${sdfmodule}.def"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
-            <antcall target="pack-sdf.helper"/>
-        </target>
-    
-        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
-            <java classname="start" failonerror="true">
-                <arg value="org.strategoxt.tools.main-pack-sdf"/>
-                <arg value="-i"/>
-                <arg value="${syntax}/${sdfmodule}.sdf"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-I"/>
-                <arg value="${syntax}"/>
-                <arg value="-I"/>
-                <arg value="${lib}"/>
-                <arg line="${build.sdf.imports}"/>
-            </java>
-        </target>
-    
-        <target name="copy-sdf" if="externaldef">
-            <copy file="${externaldef}" todir="${include}" preservelastmodified="true"/>
-        </target>
-    
-        <target name="copy-jar" if="externaljar">
-            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
-        </target>
-    
-        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.rtg"/>
-                <targetfileset file="${include}/${sdfmodule}.str"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
-            <antcall target="rtg2sig.helper"/>
-        </target>
-    
-        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
-            <java classname="start" failonerror="true">
-                <arg value="org.strategoxt.tools.main-rtg2sig"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.rtg"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.str"/>
-                <arg value="--module"/>
-                <arg value="${sdfmodule}"/>
-            </java>
-        </target>
-        
-        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.def"/>
-                <targetfileset file="${include}/${sdfmodule}.rtg"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
-            <antcall target="sdf2rtg.helper"/>
-        </target>
-    
-        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
-            <java classname="start" failonerror="true">
-                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-m"/>
-                <arg value="${sdfmodule}"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.rtg"/>
-                <arg value="--ignore-missing-cons"/>
-                <arg value="-Xnativepath"/>
-                <arg value="${build.strategoxt.sdf}"/>
-            </java>
-        </target>
-        
-        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.def"/>
-                <targetfileset file="${include}/${sdfmodule}.pp"/>
-                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
-            <antcall target="ppgen.helper"/>
-        </target>
-    
-        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
-            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
-            <java classname="start" failonerror="false">
-                <arg value="org.strategoxt.tools.main-ppgen"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.pp.af"/>
-                <arg value="-t"/>
-            </java>
-            <java classname="start" failonerror="false">
-                <arg value="org.strategoxt.tools.pp-pp-table"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.pp.af"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.pp"/>
-            </java>
-        </target>
-    
-        <!-- Stratego to Java interpreter -->
-        <target name="stratego.ctree" depends="rtg2sig,ppgen">
-            <dependset>
-                <srcfileset dir="${basedir}">
-                    <include name="**/*.str"/>
-                </srcfileset>
-                <targetfileset file="${include}/${strmodule}.ctree"/>
-            </dependset>
-            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
-            <antcall target="copy-jar"/>
-            <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${include}"/>
-                <param name="build.stratego.extraargs" value="-F --library"/>
-                <param name="build.stratego.extension" value="ctree"/>
-                <param name="build.stratego.compiler" value="strc"/>
-            </antcall>
-        </target>
-    
-        <!-- Stratego to Java compiler -->
-        <target name="stratego.jar" depends="rtg2sig,ppgen">
-            <dependset>
-                <srcfileset dir="${basedir}">
-                    <include name="**/*.str"/>
-                </srcfileset>
-                <targetfileset file="${src-gen}/trans/Main.java"/>
-            </dependset>
-            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
-            <antcall target="copy-jar"/>
-            <antcall target="stratego.jvm.helper">
-                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
-                <param name="build.stratego.extraargs" value="-la java-front"/>
-                <param name="build.stratego.extension" value="java"/>
-            </antcall>
-            <javac classpath="utils/strategoxt.jar${externaljarimport}" srcdir="${src-gen}/trans" destdir="${build}" source="1.5" debug="on"/>
-            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
-        </target>
-            
-        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
-            <java classname="org.strategoxt.strj.Main" failonerror="true">
-                <arg value="-i"/>
-                <arg value="${trans}/${strmodule}.str"/>
-                <arg value="-o"/>
-                <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
-                <arg value="-p"/>
-                <arg value="trans"/>
-                <arg value="-clean"/>
-                <arg line="${build.stratego.args}"/>
-                <arg line="${build.stratego.extraargs}"/>
-                <arg line="${externaljarflags}"/>
-                <arg line="${externaldefimport}"/>
-            </java>
-            <mkdir dir="${build}/trans"/>
-        </target>
-                
-        <!-- Stratego to C-based native executable -->
-        <target name="stratego.c">
-            <antcall target="stratego.c.helper">
-                <param name="build.stratego.outputpath" value="${basedir}/include"/>
-                <param name="build.stratego.extraargs" value=""/>
-                <param name="build.stratego.extension" value=""/>
-                <param name="build.stratego.compiler" value="strc"/>
-            </antcall>
-        </target>
-        
-        <!-- Helper target for calling the stratego compiler -->
-        <target name="stratego.c.helper" depends="rtg2sig,ppgen" if="build.stratego.enabled">
-            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
-                <arg value="-i"/>
-                <srcfile/>
-                <arg value="-o"/>
-                <targetfile/>
-                <arg line="${build.stratego.args}"/>
-                <arg line="${build.stratego.extraargs}"/>
-                <arg line="${externaldefimport}"/>
-                
-                <fileset file="${trans}/${strmodule}.str"/>
-                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
-            </apply>
-        </target>
-        
-        <target name="clean" description="clean up">
-            <delete dir="${build}"/>
-            <delete file="${src-gen}/trans/Main.java"/>
-        </target>
-    </project>
\ No newline at end of file

Copied: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml (from rev 20450, spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.common.xml)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	2010-01-04 14:21:48 UTC (rev 20468)
@@ -0,0 +1,279 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<project name="build.generated">
+    
+        <target name="spoofaximp.default" depends="sdf2table,ppgen,stratego.ctree,sdf2imp"/>
+    
+        <!-- Initialization -->
+        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
+        <dirname property="externaldefdir" file="${externaldef}"/>
+        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
+            <isset property="externaldef"/>
+        </condition>
+        <condition property="externaljarimport" value=":${externaljar}" else="">
+            <isset property="externaljar"/>
+        </condition>
+        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
+            <isset property="eclipse.running"/>
+        </condition>
+        <condition property="externaljarflags" value="${externaljarflags}" else="">
+            <isset property="externaljarflags"/>
+        </condition>
+        <mkdir dir="${build}"/>
+        <mkdir dir="${src-gen}"/>
+        <mkdir dir="${dist}"/>
+        <mkdir dir="${include}"/>
+        <mkdir dir="${lib}"/>
+
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        
+        <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
+            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
+                <arg value="${include}/${esvmodule}.packed.esv"/>
+            </java>
+        </target>
+        
+        <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg,utils-files">
+            <echo message="Property eclipse.running is not set; assuming Eclipse is not running"/>
+            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
+                <arg value="-p"/>
+                <arg value="${include}/${sdfmodule}.tbl"/>
+            </java>
+        </target>
+    
+        <target name="sdf2table" depends="make-permissive">
+            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                
+                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
+                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
+            </apply>
+        </target>
+        
+        <target name="make-permissive" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
+            <antcall target="make-permissive.helper"/>
+        </target>
+    
+        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
+            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-Permissive.def"/>
+                <arg line="--optimize on"/>
+            </java>
+        </target>
+
+        <target name="utils-files">
+            <mkdir dir="utils"/>
+            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
+        </target>
+    
+        <target name="pack-sdf" unless="externaldef">
+            <dependset>
+                <srcfileset dir="${syntax}">
+                    <include name="**/*.sdf"/>
+                </srcfileset>
+                <targetfileset file="${include}/${sdfmodule}.def"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
+            <antcall target="pack-sdf.helper"/>
+        </target>
+    
+        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
+            <java classname="start" failonerror="true">
+                <arg value="org.strategoxt.tools.main-pack-sdf"/>
+                <arg value="-i"/>
+                <arg value="${syntax}/${sdfmodule}.sdf"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-I"/>
+                <arg value="${syntax}"/>
+                <arg value="-I"/>
+                <arg value="${lib}"/>
+                <arg line="${build.sdf.imports}"/>
+            </java>
+        </target>
+    
+        <target name="copy-sdf" if="externaldef">
+            <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
+        </target>
+    
+        <target name="copy-jar" if="externaljar">
+            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
+        </target>
+    
+        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.rtg"/>
+                <targetfileset file="${include}/${sdfmodule}.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
+            <antcall target="rtg2sig.helper"/>
+        </target>
+    
+        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
+            <java classname="start" failonerror="true">
+                <arg value="org.strategoxt.tools.main-rtg2sig"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.str"/>
+                <arg value="--module"/>
+                <arg value="${sdfmodule}"/>
+            </java>
+        </target>
+        
+        <target name="sdf2rtg" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.rtg"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
+            <antcall target="sdf2rtg.helper"/>
+        </target>
+    
+        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
+            <java classname="start" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.rtg"/>
+                <arg value="--ignore-missing-cons"/>
+                <arg value="-Xnativepath"/>
+                <arg value="${build.strategoxt.sdf}"/>
+            </java>
+        </target>
+        
+        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}.pp"/>
+                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
+            <antcall target="ppgen.helper"/>
+        </target>
+    
+        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
+            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
+            <java classname="start" failonerror="false">
+                <arg value="org.strategoxt.tools.main-ppgen"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+                <arg value="-t"/>
+            </java>
+            <java classname="start" failonerror="false">
+                <arg value="org.strategoxt.tools.pp-pp-table"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.pp.af"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}.pp"/>
+            </java>
+        </target>
+    
+        <!-- Stratego to Java interpreter -->
+        <target name="stratego.ctree" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                </srcfileset>
+                <targetfileset file="${include}/${strmodule}.ctree"/>
+            </dependset>
+            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${include}"/>
+                <param name="build.stratego.extraargs" value="-F"/>
+                <param name="build.stratego.extension" value="ctree"/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+    
+        <!-- Stratego to Java compiler -->
+        <target name="stratego.jar" depends="rtg2sig">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jvm.helper">
+                <param name="build.stratego.outputpath" value="${src-gen}/trans"/>
+                <param name="build.stratego.extraargs" value="-la java-front"/>
+                <param name="build.stratego.extension" value="java"/>
+            </antcall>
+            <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.jar"/>
+        </target>
+            
+        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled" depends="utils-files">
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans}/${strmodule}.str"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputpath}/${strmodule}.${build.stratego.extension}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+            </java>
+            <mkdir dir="${build}/trans"/>
+        </target>
+                
+        <!-- Stratego to C-based native executable -->
+        <target name="stratego.c">
+            <antcall target="stratego.c.helper">
+                <param name="build.stratego.outputpath" value="${basedir}/include"/>
+                <param name="build.stratego.extraargs" value=""/>
+                <param name="build.stratego.extension" value=""/>
+                <param name="build.stratego.compiler" value="strc"/>
+            </antcall>
+        </target>
+        
+        <!-- Helper target for calling the stratego compiler -->
+        <target name="stratego.c.helper" depends="rtg2sig" if="build.stratego.enabled">
+            <apply executable="${build.strategoxt.stratego}/${build.stratego.compiler}" dest="${build.stratego.outputpath}" failonerror="true">
+                <arg value="-i"/>
+                <srcfile/>
+                <arg value="-o"/>
+                <targetfile/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaldefimport}"/>
+                
+                <fileset file="${trans}/${strmodule}.str"/>
+                <mapper type="glob" from="*.str" to="*.${build.stratego.extension}"/>
+            </apply>
+        </target>
+        
+        <target name="clean" description="clean up">
+            <delete dir="${build}"/>
+            <delete file="${src-gen}/trans/Main.java"/>
+        </target>
+    </project>
\ No newline at end of file


Property changes on: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
___________________________________________________________________
Added: svn:mergeinfo
   + 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.main.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.main.xml	2010-01-04 13:38:36 UTC (rev 20467)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.main.xml	2010-01-04 14:21:48 UTC (rev 20468)
@@ -22,8 +22,8 @@
                         -I &quot;${trans}&quot; -I &quot;${basedir}&quot;
                         -la stratego-lib -la stratego-sglr -la stratego-gpp -la stratego-xtc -la stratego-aterm"/>
         
+        <property name="externaldef" location="syntax/ATerm.def"/>
         <!-- External .def and .jar locations
-        <property name="externaldef" location="syntax/${sdfmodule}.def"/>
         <property name="externaljar" value="../lib.jar"/>
         <property name="externaljarflags" value="-la org.lib"/>
         -->
@@ -34,8 +34,8 @@
         </condition>
         <property name="build.strategoxt.stratego" location="${user.home}/.nix-profile/bin"/>
     
-        <import file="build.common.xml"/>
+        <import file="build.generated.xml"/>
     
         <!-- Main target -->
-        <target name="all" depends="spoofaximp"/>
-    </project>
\ No newline at end of file
+        <target name="all" depends="sdf2table,stratego.ctree,sdf2imp"/>
+    </project>

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermParseController.java	2010-01-04 13:38:36 UTC (rev 20467)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/editor/java/org/strategoxt/imp/editors/aterm/ATermParseController.java	2010-01-04 14:21:48 UTC (rev 20468)
@@ -11,17 +11,17 @@
 
 public class ATermParseController extends DynamicParseController 
 { 
-  private static final String LANGUAGE = "ATerm";
+  public static final String LANGUAGE = new String("ATerm");
 
   private static final String TABLE = "/include/" + LANGUAGE + ".tbl";
 
   private static final String DESCRIPTOR = "/include/" + LANGUAGE + ".packed.esv";
 
-  private static Descriptor descriptor;
+  private static volatile Descriptor descriptor;
 
   private static Throwable notLoadingCause;
 
-  public static Descriptor getDescriptor()
+  public static synchronized Descriptor getDescriptor()
   { 
     if(notLoadingCause != null)
       throw new RuntimeException(notLoadingCause);
@@ -70,7 +70,7 @@
         throw new RuntimeException(notLoadingCause);
       try
       { 
-        initialize(getDescriptor().getLanguage());
+        initialize(this, getDescriptor().getLanguage());
       }
       catch(BadDescriptorException exc)
       { 

Deleted: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.common.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.common.xml	2010-01-04 13:38:36 UTC (rev 20467)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.common.xml	2010-01-04 14:21:48 UTC (rev 20468)
@@ -1,275 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-
-<project name="common">
-    
-        <target name="spoofaximp" depends="stratego.ctree,sdf2table,sdf2imp"/>
-    
-        <!-- Initialization -->
-        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
-        <dirname property="externaldefdir" file="${externaldef}"/>
-        <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
-            <isset property="externaldef"/>
-        </condition>
-        <condition property="externaljarimport" value=":${externaljar}" else="">
-            <isset property="externaljar"/>
-        </condition>
-        <fail if="externaljar" unless="externaljarflags"/>
-        <condition property="externaljarflags" value="${externaljarflags}" else="">
-            <isset property="externaljarflags"/>
-        </condition>
-        <mkdir dir="${build}"/>
-        <mkdir dir="${src-gen}"/>
-        <mkdir dir="${dist}"/>
-        <mkdir dir="${include}"/>
-        <mkdir dir="${lib}"/>
-
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
-        
-        <target name="sdf2imp.eclipse" if="eclipse.running">
-            <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder">
-                <arg value="${include}/${esvmodule}.packed.esv"/>
-            </java>
-        </target>
-        
-        <target name="sdf2imp.standalone" unless="eclipse.running" depends="utils-files">
-            <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
-                <arg value="-i"/>
-                <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
-                <arg value="-p"/>
-                <arg value="${include}/${sdfmodule}.tbl"/>
-            </java>
-        </target>
-    
-        <target name="sdf2table" depends="make-permissive">
-            <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
-                <arg value="-i"/>
-                <srcfile/>
-                <arg value="-o"/>
-                <targetfile/>
-                <arg value="-m"/>
-                <arg value="${sdfmodule}"/>
-                
-                <fileset file="${include}/${sdfmodule}-Permissive.def"/>
-                <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
-            </apply>
-        </target>
-        
-        <target name="make-permissive" depends="pack-sdf,copy-sdf">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.def"/>
-                <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
-            <antcall target="make-permissive.helper"/>
-        </target>
-    
-        <target name="make-permissive.helper" unless="permissive-grammar.available" depends="utils-files">
-            <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}-Permissive.def"/>
-                <arg line="--optimize on"/>
-            </java>
-        </target>
-
-        <target name="utils-files">
-            <mkdir dir="utils"/>
-            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
-            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
-            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
-        </target>
-    
-        <target name="pack-sdf" unless="externaldef">
-            <dependset>
-                <srcfileset dir="${syntax}">
-                    <include name="**/*.sdf"/>
-                </srcfileset>
-                <targetfileset file="${include}/${sdfmodule}.def"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
-            <antcall target="pack-sdf.helper"/>
-        </target>
-    
-        <target name="pack-sdf.helper" unless="pack-sdf.available" depends="utils-files">
-            <java classname="start" failonerror="true">
-                <arg value="org.strategoxt.tools.main-pack-sdf"/>
-                <arg value="-i"/>
-                <arg value="${syntax}/${sdfmodule}.sdf"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-I"/>
-                <arg value="${syntax}"/>
-                <arg value="-I"/>
-                <arg value="${lib}"/>
-                <arg line="${build.sdf.imports}"/>
-            </java>
-        </target>
-    
-        <target name="copy-sdf" if="externaldef">
-            <copy file="${externaldef}" todir="${include}" preservelastmodified="true"/>
-        </target>
-    
-        <target name="copy-jar" if="externaljar">
-            <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
-        </target>
-    
-        <target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.rtg"/>
-                <targetfileset file="${include}/${sdfmodule}.str"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
-            <antcall target="rtg2sig.helper"/>
-        </target>
-    
-        <target name="rtg2sig.helper" unless="rtg2sig.available" depends="utils-files">
-            <java classname="start" failonerror="true">
-                <arg value="org.strategoxt.tools.main-rtg2sig"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.rtg"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.str"/>
-                <arg value="--module"/>
-                <arg value="${sdfmodule}"/>
-            </java>
-        </target>
-        
-        <target name="sdf2rtg" if="build.stratego.enabled" depends="pack-sdf,copy-sdf">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.def"/>
-                <targetfileset file="${include}/${sdfmodule}.rtg"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
-            <antcall target="sdf2rtg.helper"/>
-        </target>
-    
-        <target name="sdf2rtg.helper" unless="sdf2rtg.available" depends="utils-files">
-            <java classname="start" failonerror="true">
-                <arg value="org.strategoxt.tools.main-sdf2rtg"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-m"/>
-                <arg value="${sdfmodule}"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.rtg"/>
-                <arg value="--ignore-missing-cons"/>
-                <arg value="-Xnativepath"/>
-                <arg value="${build.strategoxt.sdf}"/>
-            </java>
-        </target>
-        
-        <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
-            <dependset>
-                <srcfileset file="${include}/${sdfmodule}.def"/>
-                <targetfileset file="${include}/${sdfmodule}.pp"/>
-                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
-            </dependset>
-            <available file="${include}/${sdfmodule}.pp" property="ppgen.available"/>
-            <antcall target="ppgen.helper"/>
-        </target>
-    
-        <target name="ppgen.helper" unless="ppgen.available" depends="utils-files">
-            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
-            <java classname="start" failonerror="false">
-                <arg value="org.strategoxt.tools.main-ppgen"/>
-                <arg value="-i"/>
-                <arg value="${include}/${sdfmodule}.def"/>
-                <arg value="-o"/>
-                <arg value="${include}/${sdfmodule}.pp.af"/>

(7418 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Tue Jan  5 11:30:22 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 05 Jan 2010 10:30:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20469 - LennartKats -
	in spoofax/trunk/spoofax:
	org.spoofax.interpreter.adapter.asm/src/org/spoofax/interpreter/adapter/asm
	org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm
	org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj
	org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms
Message-ID: <201001051030.o05AUMUm018193@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-05 10:30:21 +0000 (Tue, 05 Jan 2010)
New Revision: 20469

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20469&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoPlaceholder.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoPlaceholder.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.asm/src/org/spoofax/interpreter/adapter/asm/ASMFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/WrappedATermFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTermBuilder.java

Log:
Added a new placeholder term type in order to support the {ast} attribute in the standard imploder.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.asm/src/org/spoofax/interpreter/adapter/asm/ASMFactory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.asm/src/org/spoofax/interpreter/adapter/asm/ASMFactory.java	2010-01-04 14:21:48 UTC (rev 20468)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.asm/src/org/spoofax/interpreter/adapter/asm/ASMFactory.java	2010-01-05 10:30:21 UTC (rev 20469)
@@ -28,6 +28,7 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoPlaceholder;
 import org.spoofax.interpreter.terms.IStrategoReal;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -76,6 +77,11 @@
 		// TODO Auto-generated method stub
 		return null;
 	}
+	
+	public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
+		// TODO Auto-generated method stub
+		return null;
+	}
 
 	public IStrategoAppl makeAppl(IStrategoConstructor ctr,
 			IStrategoTerm... terms) {

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/WrappedATermFactory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/WrappedATermFactory.java	2010-01-04 14:21:48 UTC (rev 20468)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.aterm/src/org/spoofax/interpreter/adapter/aterm/WrappedATermFactory.java	2010-01-05 10:30:21 UTC (rev 20469)
@@ -18,6 +18,7 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoPlaceholder;
 import org.spoofax.interpreter.terms.IStrategoReal;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -111,6 +112,10 @@
     public IStrategoAppl makeAppl(IStrategoConstructor ctr, IStrategoTerm... kids) {
         return ctr.instantiate(this, kids);
     }
+    
+    public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
+        throw new NotImplementedException();
+    }
 
     public IStrategoConstructor makeConstructor(String name, int arity) {
         return wrapConstructor(realFactory.makeAFun(name, arity, false));

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	2010-01-04 14:21:48 UTC (rev 20468)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.adapter.ecj/src/org/spoofax/interpreter/adapter/ecj/ECJFactory.java	2010-01-05 10:30:21 UTC (rev 20469)
@@ -36,6 +36,7 @@
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoInt;
 import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoPlaceholder;
 import org.spoofax.interpreter.terms.IStrategoReal;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -289,7 +290,12 @@
     private Javadoc getJavadoc(IStrategoTerm term) {
         return ((WrappedJavadoc)term).getWrappee();
     }
+    
+    public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
+        throw new NotImplementedException();
+    }
 
+    @Deprecated
     public IStrategoAppl makeAppl(IStrategoConstructor ctr, IStrategoList terms) {
         return makeAppl(ctr, terms.getAllSubterms());
     }

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoPlaceholder.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoPlaceholder.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicStrategoPlaceholder.java	2010-01-05 10:30:21 UTC (rev 20469)
@@ -0,0 +1,32 @@
+package org.spoofax.interpreter.terms;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class BasicStrategoPlaceholder extends BasicStrategoAppl implements IStrategoPlaceholder {
+
+    public BasicStrategoPlaceholder(IStrategoConstructor ctor, IStrategoTerm template) {
+        super(ctor, new IStrategoTerm[] { template });
+    }
+    
+    public IStrategoTerm getTemplate() {
+        return getSubterm(0);
+    }
+    
+    @Override
+    public int getTermType() {
+        return PLACEHOLDER;
+    }
+
+    @Override
+    public String toString() {
+        return "<" + getTemplate() + ">";
+    }
+    
+    @Override
+    public void prettyPrint(ITermPrinter pp) {
+        pp.print("<");
+        getTemplate().prettyPrint(pp);
+        pp.print(">");
+    }
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	2010-01-04 14:21:48 UTC (rev 20468)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	2010-01-05 10:30:21 UTC (rev 20469)
@@ -39,6 +39,8 @@
     private static final Set<String> stringPool =
         Collections.synchronizedSet(new HashSet<String>());
     
+    private IStrategoConstructor placeholderConstructor;
+    
     public IStrategoTerm parseFromFile(String path) throws IOException {
         return parseFromStream(new FileInputStream(path));
     }
@@ -58,6 +60,7 @@
         case '[': return parseAnno(bis, parseList(bis));
         case '(': return parseAnno(bis, parseTuple(bis));
         case '"': return parseAnno(bis, parseString(bis));
+        case '<': return parsePlaceholder(bis);
         default:
             bis.unread(ch);
             if (Character.isLetter(ch)) {
@@ -172,6 +175,11 @@
             return makeAppl(c, new IStrategoTerm[0]);
         }
     }
+    
+    private IStrategoTerm parsePlaceholder(PushbackInputStream bis) throws IOException {
+        IStrategoTerm template = parseFromStream(bis);
+        return makePlaceholder(template);
+    }
 
     private IStrategoTerm parseTuple(PushbackInputStream bis) throws IOException {
         //System.err.println("tuple");
@@ -324,6 +332,12 @@
         }
         return result;
     }
+    
+    public IStrategoPlaceholder makePlaceholder(IStrategoTerm template) {
+        if (placeholderConstructor == null)
+            placeholderConstructor = makeConstructor("<>", 1);
+        return new BasicStrategoPlaceholder(placeholderConstructor, template);
+    }
 
     public IStrategoInt makeInt(int i) {
         return new BasicStrategoInt(i, null);

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoPlaceholder.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoPlaceholder.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoPlaceholder.java	2010-01-05 10:30:21 UTC (rev 20469)
@@ -0,0 +1,10 @@
+package org.spoofax.interpreter.terms;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public interface IStrategoPlaceholder extends IStrategoTerm {
+
+    IStrategoTerm getTemplate();
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java	2010-01-04 14:21:48 UTC (rev 20468)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTerm.java	2010-01-05 10:30:21 UTC (rev 20469)
@@ -19,6 +19,7 @@
     public static final int TUPLE = 7;
     public static final int REF = 8;
     public static final int BLOB = 9;
+    public static final int PLACEHOLDER = 10;
     
     public static final int MUTABLE = 0;
     public static final int IMMUTABLE = 1;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTermBuilder.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTermBuilder.java	2010-01-04 14:21:48 UTC (rev 20468)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/IStrategoTermBuilder.java	2010-01-05 10:30:21 UTC (rev 20469)
@@ -23,6 +23,7 @@
     public IStrategoAppl makeAppl(IStrategoConstructor ctr, IStrategoList kids);
     public IStrategoAppl makeAppl(IStrategoConstructor ctr, IStrategoTerm... terms);
 
+    public IStrategoPlaceholder makePlaceholder(IStrategoTerm template);
     public IStrategoInt makeInt(int i);
     public IStrategoReal makeReal(double d);
     public IStrategoTuple makeTuple(IStrategoTerm... terms);



From L.C.L.Kats at tudelft.nl  Tue Jan  5 11:38:59 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 05 Jan 2010 10:38:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20470 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl
	strc-java/trunk/java
Message-ID: <201001051038.o05AcxXe018237@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-05 10:38:58 +0000 (Tue, 05 Jan 2010)
New Revision: 20470

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20470&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getPlaceholder.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_isPlaceholder.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_makePlaceholder.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Added primitives to manipulate placeholders

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractPrimitive.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractPrimitive.java	2010-01-05 10:30:21 UTC (rev 20469)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/AbstractPrimitive.java	2010-01-05 10:38:58 UTC (rev 20470)
@@ -19,7 +19,7 @@
     protected int svars;
     protected int tvars;
     
-    protected AbstractPrimitive(String name, int svars, int tvars) {
+    public AbstractPrimitive(String name, int svars, int tvars) {
         this.name = name;
         this.svars = svars;
         this.tvars = tvars;

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2010-01-05 10:30:21 UTC (rev 20469)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	2010-01-05 10:38:58 UTC (rev 20470)
@@ -139,6 +139,9 @@
         add(new SSL_checksum());
         add(new SSL_newname());
         add(new SSL_stacktrace_get_all_frame_names());
+        add(new SSL_isPlaceholder());
+        add(new SSL_makePlaceholder());
+        add(new SSL_getPlaceholder());
      }
 
     public AbstractPrimitive lookup(String s) {

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getPlaceholder.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getPlaceholder.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_getPlaceholder.java	2010-01-05 10:38:58 UTC (rev 20470)
@@ -0,0 +1,31 @@
+package org.spoofax.interpreter.library.ssl;
+
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoPlaceholder;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SSL_getPlaceholder extends AbstractPrimitive {
+
+    protected SSL_getPlaceholder() {
+        super("SSL_getPlaceholder", 0, 1);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        
+        if (tvars[0].getTermType() == PLACEHOLDER) {
+            env.setCurrent(((IStrategoPlaceholder) tvars[0]).getTemplate());
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_isPlaceholder.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_isPlaceholder.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_isPlaceholder.java	2010-01-05 10:38:58 UTC (rev 20470)
@@ -0,0 +1,25 @@
+package org.spoofax.interpreter.library.ssl;
+
+import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SSL_isPlaceholder extends AbstractPrimitive {
+
+    protected SSL_isPlaceholder() {
+        super("SSL_isPlaceholder", 0, 1);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        
+        return tvars[0].getTermType() == PLACEHOLDER;
+    }
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_makePlaceholder.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_makePlaceholder.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_makePlaceholder.java	2010-01-05 10:38:58 UTC (rev 20470)
@@ -0,0 +1,24 @@
+package org.spoofax.interpreter.library.ssl;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SSL_makePlaceholder extends AbstractPrimitive {
+
+    protected SSL_makePlaceholder() {
+        super("SSL_makePlaceholder", 0, 1);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        
+        env.setCurrent(env.getFactory().makePlaceholder(tvars[0]));
+        return true;
+    }
+
+}

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Tue Jan  5 13:12:11 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 05 Jan 2010 12:12:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20471 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms
	strc-java/trunk/java
Message-ID: <201001051212.o05CCBYI020277@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-05 12:12:11 +0000 (Tue, 05 Jan 2010)
New Revision: 20471

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20471&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
Placeholder parsing fix.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	2010-01-05 10:38:58 UTC (rev 20470)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/terms/BasicTermFactory.java	2010-01-05 12:12:11 UTC (rev 20471)
@@ -22,6 +22,7 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.WeakHashMap;
+import java.util.concurrent.locks.ReadWriteLock;
 
 import org.spoofax.NotImplementedException;
 
@@ -69,7 +70,7 @@
             else if(Character.isDigit(ch))
                 return parseAnno(bis, parseNumber(bis));
         }
-        throw new ParseError("Invalid term : '" + (char)ch + "'");
+        throw new ParseError("Invalid term: '" + (char)ch + "'");
     }
     
     private IStrategoTerm parseAnno(PushbackInputStream bis, IStrategoTerm term) throws IOException {
@@ -178,6 +179,9 @@
     
     private IStrategoTerm parsePlaceholder(PushbackInputStream bis) throws IOException {
         IStrategoTerm template = parseFromStream(bis);
+        parseSkip(bis);
+        if (bis.read() != '>')
+            throw new ParseError("Expected: '>'");
         return makePlaceholder(template);
     }
 

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Tue Jan  5 13:13:30 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 05 Jan 2010 12:13:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20472 - LennartKats -
	in spoofax-imp/trunk: org.eclipse.imp
	org.strategoxt.imp.editors.stratego/trans org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
Message-ID: <201001051213.o05CDU7A020285@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-05 12:13:29 +0000 (Tue, 05 Jan 2010)
New Revision: 20472

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20472&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTreeModelBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/LabelProviderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TreeModelBuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TreeModelBuilder.java
Removed:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicOutliner.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/OutlinerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Outliner.java
Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/IDynamicLanguageService.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ReferenceResolverDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java

Log:
Added quick outline support by migrating from the deprecated IOutliner interface to TreeModelBuilderBase and ILabelProvider.

Changes (first 1000 lines of the diffs):

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-05 12:13:29 UTC (rev 20472)
@@ -42,6 +42,20 @@
  	            // Replace the file editor mapping even if it already pointed to the universal editor,
  	            // since the persisted association turns into a FileEditorMapping when re-read, thus
  	            // losing the icon (which FileEditorMapping gets from the IEditorDescriptor).
+Index: org.eclipse.imp.runtime/src/org/eclipse/imp/services/base/TreeModelBuilderBase.java
+===================================================================
+--- org.eclipse.imp.runtime/src/org/eclipse/imp/services/base/TreeModelBuilderBase.java	(revision 22255)
++++ org.eclipse.imp.runtime/src/org/eclipse/imp/services/base/TreeModelBuilderBase.java	(working copy)
+@@ -23,7 +23,8 @@
+ 
+     private Stack<ModelTreeNode> fItemStack= new Stack<ModelTreeNode>();
+ 
+-    public final ModelTreeNode buildTree(Object rootASTNode) {
++    // LK: public interface shouldn't be final
++    public ModelTreeNode buildTree(Object rootASTNode) {
+         fItemStack.push(fModelRoot= createTopItem(new ModelTreeNode(rootASTNode)));
+         try {
+             visitTree(rootASTNode);
 Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ServiceControllerManager.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ServiceControllerManager.java	(revision 22255)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2010-01-05 12:13:29 UTC (rev 20472)
@@ -36,6 +36,7 @@
   editor-complete:
     (node, position, ast, path, project-path) -> proposals
     with
+      // TODO: Optimize - only a local analysis is needed for editor-complete
       // Ensure all dynamic rules are properly scoped
       try(dr-scope-all-end);
       dr-scope-all-start

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-01-05 12:13:29 UTC (rev 20472)
@@ -48,13 +48,20 @@
       </docProvider>
    </extension>
    <extension
-         point="org.eclipse.imp.runtime.outliner">
-      <outliner
-            class="org.strategoxt.imp.runtime.dynamicloading.DynamicOutliner"
+         point="org.eclipse.imp.runtime.labelProvider">
+      <labelProvider
+            class="org.strategoxt.imp.runtime.services.LabelProvider"
             language="DynamicRoot">
-      </outliner>
+      </labelProvider>
    </extension>
    <extension
+         point="org.eclipse.imp.runtime.modelTreeBuilder">
+      <treeBuilder
+            class="org.strategoxt.imp.runtime.dynamicloading.DynamicTreeModelBuilder"
+            language="DynamicRoot">
+      </treeBuilder>
+   </extension>
+   <extension
          point="org.eclipse.imp.runtime.autoEditStrategy">
       <autoEditStrategy
             class="org.eclipse.imp.services.base.DefaultAutoIndentStrategy"

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -79,13 +79,14 @@
 	private void initializeFactories() throws BadDescriptorException {
 		serviceFactories.add(new ParseControllerFactory());
 		serviceFactories.add(new FoldingUpdaterFactory());
-		serviceFactories.add(new OutlinerFactory());
+		serviceFactories.add(new TreeModelBuilderFactory());
 		serviceFactories.add(new ReferenceResolverFactory());
 		serviceFactories.add(new StrategoObserverFactory());
 		serviceFactories.add(new SyntaxPropertiesFactory());
 		serviceFactories.add(new TokenColorerFactory());
 		serviceFactories.add(new BuilderFactory());
 		serviceFactories.add(new ContentProposerFactory());
+		serviceFactories.add(new LabelProviderFactory());
 	}
 	
 	/**

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicOutliner.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicOutliner.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicOutliner.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -1,38 +0,0 @@
-package org.strategoxt.imp.runtime.dynamicloading;
-
-import org.eclipse.imp.parser.IParseController;
-import org.eclipse.imp.services.IOutliner;
-import org.eclipse.swt.widgets.Tree;
-import org.eclipse.ui.texteditor.ITextEditor;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-public class DynamicOutliner extends AbstractService<IOutliner> implements IOutliner {
-	
-	private ITextEditor editor;
-	
-	private Tree tree; 
-
-	public DynamicOutliner() {
-		super(IOutliner.class);
-	}
-
-	public void createOutlinePresentation(IParseController controller, int offset) {
-		initialize(controller);
-		
-		if (editor != null) getWrapped().setEditor(editor);
-		if (tree != null) getWrapped().setTree(tree);
-		
-		getWrapped().createOutlinePresentation(controller, offset);
-	}
-
-	public void setEditor(ITextEditor editor) {
-		this.editor = editor;
-	}
-
-	public void setTree(Tree tree) {
-		this.tree = tree;
-	}
-
-}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -6,6 +6,7 @@
 import org.eclipse.jface.text.IRegion;
 import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.TextAttribute;
+import org.eclipse.jface.text.source.ISourceViewer;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.widgets.Display;
 import org.strategoxt.imp.runtime.EditorState;
@@ -58,8 +59,11 @@
 		}
 
 		try {
-			if (lastEditor != null && !lastEditor.getTitleImage().isDisposed())
-				lastEditor.updateColoring(new Region(0, lastEditor.getServiceControllerManager().getSourceViewer().getDocument().getLength()));
+			if (lastEditor != null && !lastEditor.getTitleImage().isDisposed()) {
+				ISourceViewer sourceViewer = lastEditor.getServiceControllerManager().getSourceViewer();
+				if (sourceViewer.getDocument() != null)
+					lastEditor.updateColoring(new Region(0, sourceViewer.getDocument().getLength()));
+			}
 		} catch (NullPointerException e) {
 			// TODO: find out what's causing this NPE
 		}

Copied: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTreeModelBuilder.java (from rev 20468, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicOutliner.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTreeModelBuilder.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTreeModelBuilder.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -0,0 +1,48 @@
+package org.strategoxt.imp.runtime.dynamicloading;
+
+import org.eclipse.imp.editor.ModelTreeNode;
+import org.eclipse.imp.services.base.TreeModelBuilderBase;
+import org.strategoxt.imp.runtime.parser.ast.AstNodeLocator;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class DynamicTreeModelBuilder extends TreeModelBuilderBase implements IDynamicLanguageService {
+
+	private final DynamicService service = new DynamicService();
+
+	@Override
+	public ModelTreeNode buildTree(Object root) {
+		if (root == null) return super.buildTree(root); // HACK
+		service.initialize(AstNodeLocator.impObjectToAstNode(root).getParseController());
+		return service.getWrapped().buildTree(root);
+	}
+	
+	@Override
+	protected void visitTree(Object root) {
+		if (root != null)
+			throw new IllegalStateException("Method call not expected");		
+	}
+
+	public void prepareForReinitialize() {
+		service.prepareForReinitialize();
+	}
+
+	public void reinitialize(Descriptor newDescriptor) throws BadDescriptorException {
+		service.reinitialize(newDescriptor);
+	}
+	
+	/**
+	 * The dynamic wrapper class that houses the implementation of this service.
+	 * (Since TreeModelBuilderBase burned our base class, we use an inner class for this.)
+	 * 
+	 * @author Lennart Kats <lennart add lclnet.nl>
+	 */
+	private static class DynamicService extends AbstractService<TreeModelBuilderBase> {
+
+		public DynamicService() {
+			super(TreeModelBuilderBase.class);
+		}
+	}
+
+}
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/IDynamicLanguageService.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/IDynamicLanguageService.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/IDynamicLanguageService.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -1,15 +1,12 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
 import org.eclipse.imp.language.ILanguageService;
-import org.eclipse.imp.parser.IParseController;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public interface IDynamicLanguageService extends ILanguageService {
 
-	void initialize(IParseController controller);
-
 	void prepareForReinitialize();
 	
 	/**

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/LabelProviderFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/LabelProviderFactory.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/LabelProviderFactory.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -0,0 +1,25 @@
+package org.strategoxt.imp.runtime.dynamicloading;
+
+import org.eclipse.imp.services.ILabelProvider;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
+import org.strategoxt.imp.runtime.services.LabelProvider;
+
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LabelProviderFactory extends AbstractServiceFactory<ILabelProvider> {
+
+	public LabelProviderFactory() {
+		super(ILabelProvider.class);
+	}
+	
+	@Override
+	public ILabelProvider create(Descriptor descriptor, SGLRParseController controller)
+			throws BadDescriptorException {
+		
+		return new LabelProvider();
+	}
+
+
+}

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/OutlinerFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/OutlinerFactory.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/OutlinerFactory.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -1,36 +0,0 @@
-package org.strategoxt.imp.runtime.dynamicloading;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.eclipse.imp.services.IOutliner;
-import org.spoofax.interpreter.terms.IStrategoAppl;
-import org.strategoxt.imp.runtime.parser.SGLRParseController;
-import org.strategoxt.imp.runtime.services.NodeMapping;
-import org.strategoxt.imp.runtime.services.Outliner;
-
-import static org.strategoxt.imp.runtime.dynamicloading.TermReader.*;
-
-/**
- * @author Lennart Kats <lennart add lclnet.nl>
- */
-class OutlinerFactory extends AbstractServiceFactory<IOutliner> {
-	
-	public OutlinerFactory() {
-		super(IOutliner.class);
-	}
-
-	@Override
-	public IOutliner create(Descriptor d, SGLRParseController controller) throws BadDescriptorException {
-		// TODO: "FoldAll" folding rules
-		
-		List<NodeMapping> outlined = new ArrayList<NodeMapping>(); 
-		Object outlineme = new Object();
-		
-		for (IStrategoAppl rule : collectTerms(d.getDocument(), "OutlineRule")) {
-			outlined.add(NodeMapping.create(rule, outlineme));
-		}
-		
-		return new Outliner(outlined);
-	}
-}

Copied: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TreeModelBuilderFactory.java (from rev 20468, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/OutlinerFactory.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TreeModelBuilderFactory.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/TreeModelBuilderFactory.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -0,0 +1,35 @@
+package org.strategoxt.imp.runtime.dynamicloading;
+
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.eclipse.imp.services.ILabelProvider;
+import org.eclipse.imp.services.base.TreeModelBuilderBase;
+import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
+import org.strategoxt.imp.runtime.services.NodeMapping;
+import org.strategoxt.imp.runtime.services.TreeModelBuilder;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+class TreeModelBuilderFactory extends AbstractServiceFactory<TreeModelBuilderBase> {
+	
+	public TreeModelBuilderFactory() {
+		super(TreeModelBuilderBase.class);
+	}
+
+	@Override
+	public TreeModelBuilderBase create(Descriptor d, SGLRParseController controller) throws BadDescriptorException {
+		List<NodeMapping> outlined = new ArrayList<NodeMapping>(); 
+		Object outlineme = new Object();
+		
+		for (IStrategoAppl rule : collectTerms(d.getDocument(), "OutlineRule")) {
+			outlined.add(NodeMapping.create(rule, outlineme));
+		}
+		
+		return new TreeModelBuilder(outlined, d.createService(ILabelProvider.class, controller));
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/AbstractSGLRI.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -12,6 +12,7 @@
 import lpg.runtime.Monitor;
 import lpg.runtime.PrsStream;
 
+import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
@@ -156,7 +157,9 @@
 	 */
 	protected RootAstNode internalImplode(ATerm asfix) {
 		AstNode imploded = imploder.implode(asfix, currentTokenizer);
-		return RootAstNode.makeRoot(imploded, getController() == null ? null : getController().getResource());
+		SGLRParseController controller = getController() == null ? null : getController();
+		IResource resource = controller == null ? null : controller.getResource();
+		return RootAstNode.makeRoot(imploded, controller, resource);
 	}
 	
 	/**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -395,7 +395,7 @@
 	}
 	
 	public AstNodeLocator getSourcePositionLocator() {
-		return new AstNodeLocator();
+		return new AstNodeLocator(this);
 	}
 	
 	public ILanguageSyntaxProperties getSyntaxProperties() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -15,6 +15,7 @@
 import org.spoofax.interpreter.terms.ITermPrinter;
 import org.spoofax.interpreter.terms.InlinePrinter;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRToken;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
@@ -71,6 +72,10 @@
 		return getRoot().getResource();
 	}
 	
+	public SGLRParseController getParseController() {
+		return getRoot().getParseController();
+	}
+	
 	// (concrete type exposed by IAst interface)
 	public final ArrayList<AstNode> getChildren() {
 		assert EMPTY_LIST.size() == 0 && (children.size() == 0 || children.get(0).getParent() == this);
@@ -189,18 +194,19 @@
 		return children.iterator();
 	}
 	
-	@Override
-	@Deprecated
 	/**
-	 * @deprecated Does not clone the tokens, which still point back to the original.
+	 * Creates a "deep" clone of this AstNode,
+	 * but maintains a shallow clone of all tokens,
+	 * which still point back to the original AST.
 	 */
-	public AstNode clone() {
+	public AstNode cloneIgnoreTokens() {
+		// TODO: create a better AstNode.clone() method? this is a bit of a cop-out...
 		try {
 			AstNode result = (AstNode) super.clone();
 			ArrayList<AstNode> children = result.children;
 			ArrayList<AstNode> newChildren = new ArrayList<AstNode>(children.size());
 			for (int i = 0, size = children.size(); i < size; i++) {
-				AstNode newChild = children.get(i).clone();
+				AstNode newChild = children.get(i).cloneIgnoreTokens();
 				newChild.parent = result;
 				newChildren.add(newChild);
 			}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeLocator.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -4,7 +4,9 @@
 
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IPath;
+import org.eclipse.imp.editor.ModelTreeNode;
 import org.eclipse.imp.parser.ISourcePositionLocator;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRToken;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
@@ -16,11 +18,15 @@
  * @author Karl Trygve Kalleberg <karltk add strategoxt.org>
  */
 public class AstNodeLocator implements ISourcePositionLocator {
+	
+	private final SGLRParseController controller;
+	
+	public AstNodeLocator(SGLRParseController controller) {
+		this.controller = controller;
+	}
 
 	public IStrategoAstNode findNode(Object root, int startOffset, int endOffset) {
-		IStrategoAstNode ast = root instanceof SGLRToken
-				? ((SGLRToken) root).getAstNode()
-				: (AstNode) root;
+		IStrategoAstNode ast = impObjectToAstNode(root);
 		
 		if (ast.getLeftIToken().getStartOffset() <= startOffset && endOffset <= ast.getRightIToken().getEndOffset()) {
 		    for (Object child : ast.getChildren()) {
@@ -38,31 +44,52 @@
 		return findNode(root, offset, offset);
 	}
 	
-	public int getStartOffset(Object token) {
-		// TODO: return -1 if not in the same AST as originating parse controller
-		if (token instanceof AstNode)
-			token = ((AstNode) token).getLeftIToken();
-
-		return ((IToken) token).getStartOffset();
+	public int getStartOffset(Object element) {
+		SGLRToken token;
+		IStrategoAstNode node;
+		if (element instanceof IToken) {
+			token = (SGLRToken) element;
+			node = token.getAstNode();
+		} else {
+			node = impObjectToAstNode(element);
+			token = (SGLRToken) node.getLeftIToken();
+		}
+		// Should return -1 if not using the same controller, per HyperLinkDetector
+		return node == null || node.getParseController() == controller
+				? token.getStartOffset()
+				: -1;
 	}
 
-	public int getEndOffset(Object token) {
-		if (token instanceof AstNode)
-			token = ((AstNode) token).getRightIToken();
+	public int getEndOffset(Object element) {
+		IToken token;
+		if (element instanceof IToken) {
+			token = (SGLRToken) element;
+		} else {
+			AstNode node = impObjectToAstNode(element);
+			token = node.getRightIToken();
+		}
 
-		return ((IToken) token).getEndOffset();
+		return token.getEndOffset();
 	}
 	
-	public int getLength(Object token) {
-		return getEndOffset(token) - getStartOffset(token);
+	public int getLength(Object element) {
+		return getEndOffset(element) - getStartOffset(element);
 	}
 	
-	public IPath getPath(Object node) {
-		if (node instanceof SGLRToken)
-			node = ((SGLRToken) node).getAstNode();
-
-		IResource resource = ((IStrategoAstNode) node).getResource();
+	public IPath getPath(Object element) {
+		IResource resource = impObjectToAstNode(element).getResource();
 		return resource.getLocation();
 	}
+
+	public static AstNode impObjectToAstNode(Object element) {
+		if (element instanceof ModelTreeNode) {
+			element = ((ModelTreeNode) element).getASTNode();
+			if (element instanceof ModelTreeNode)
+				element = ((ModelTreeNode) element).getASTNode();
+		}
+		if (element instanceof SGLRToken)
+			element = ((SGLRToken) element).getAstNode();
+		return (AstNode) element;
+	}
 	
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/RootAstNode.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -1,33 +1,40 @@
 package org.strategoxt.imp.runtime.parser.ast;
 
 import org.eclipse.core.resources.IResource;
+import org.strategoxt.imp.runtime.parser.SGLRParseController;
 
 public class RootAstNode extends AstNode {
 	
+	private final SGLRParseController controller;
+	
 	private final IResource resource;
 	
 	@Override
 	public IResource getResource() {
 		return resource;
 	}
+	
+	@Override
+	public SGLRParseController getParseController() {
+		return controller;
+	}
 
-	protected RootAstNode(AstNode ast, IResource resource) {
-		
+	protected RootAstNode(AstNode ast, SGLRParseController controller, IResource resource) {
 		super(ast.getSort(), ast.getLeftIToken(), ast.getRightIToken(), ast.getConstructor(),
 				ast.getChildren());
 		
 		this.resource = resource;
+		this.controller = controller;
 		
 		overrideReferences(getLeftIToken(), getRightIToken(), getChildren(), ast);
 	}
 	
-	public static RootAstNode makeRoot(AstNode ast, IResource resource) {
-		return new RootAstNode(ast, resource);
+	public static RootAstNode makeRoot(AstNode ast, SGLRParseController controller, IResource resource) {
+		return new RootAstNode(ast, controller, resource);
 	}
 	
 	@Override
-	@Deprecated
-	public RootAstNode clone() {
-		return (RootAstNode) super.clone();
+	public RootAstNode cloneIgnoreTokens() {
+		return (RootAstNode) super.cloneIgnoreTokens();
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -130,11 +130,11 @@
 		controller.getParseLock().lock();
 		try {
 			if (completionFunction == null && controller.getCurrentAst() != null) {
-				ast = controller.getCurrentAst().clone();
+				ast = controller.getCurrentAst().cloneIgnoreTokens();
 			} else {
 				ast = parser.parse(document.toCharArray(), controller.getPath().toPortableString());
 				lastParserAst = controller.getCurrentAst();
-				lastCompletionAst = ast.clone();
+				lastCompletionAst = ast.cloneIgnoreTokens();
 			}
 		} catch (SGLRException e) {
 			Environment.logException("Could not reparse input for content completion", e);
@@ -268,7 +268,7 @@
 	private RootAstNode getPreviousAst(SGLRParseController parser) {
 		return parser.getCurrentAst() == lastParserAst
 				? lastCompletionAst
-				: lastParserAst.clone();
+				: lastParserAst.cloneIgnoreTokens();
 	}
 
 	private static SGLRParseController getParser(IParseController controller) {

Copied: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java (from rev 20468, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Outliner.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -0,0 +1,89 @@
+package org.strategoxt.imp.runtime.services;
+
+import static org.strategoxt.imp.runtime.parser.tokens.TokenKind.*;
+import lpg.runtime.IPrsStream;
+import lpg.runtime.IToken;
+
+import org.eclipse.imp.services.ILabelProvider;
+import org.eclipse.jface.viewers.ILabelProviderListener;
+import org.eclipse.swt.graphics.Image;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.parser.ast.AstNode;
+import org.strategoxt.imp.runtime.parser.ast.AstNodeLocator;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class LabelProvider implements ILabelProvider {
+
+	public Image getImage(Object element) {
+		return null;
+	}
+
+	public String getText(Object element) {
+		AstNode node = AstNodeLocator.impObjectToAstNode(element);
+		String caption = getCaption(node);
+		
+		if (caption == null) {
+			Environment.logException(
+				"Unable to infer the caption of this AST node: " +
+				node.getSort() + "." + node.getConstructor()
+			);
+			caption = node.getConstructor();
+		}
+		return caption;
+		
+	}
+
+	private String getCaption(AstNode node) {
+		// TODO: add user-defined outline captions, perhaps just using Stratego
+		// HACK: Hardcoded outlining, until we have support for patterns
+		String constructor = node == null ? null : node.getConstructor();
+		
+		if ("MethodDec".equals(constructor)) {
+			return node.getChildren().get(0).getChildren().get(3).toString();
+		} else if ("ClassDec".equals(constructor)) {
+			return node.getChildren().get(0).getChildren().get(1).toString();
+		} else if ("Rules".equals(constructor)) {
+			return "rules";
+		} else if ("Strategies".equals(constructor)) {
+			return "strategies";
+		} else {
+			return getIdentifier(node);
+		}
+	}
+	
+	private String getIdentifier(AstNode node) {
+		IPrsStream stream = node.getLeftIToken().getIPrsStream();
+		int i = node.getLeftIToken().getTokenIndex();
+		int end = node.getRightIToken().getTokenIndex();
+		
+		do {
+			IToken token = stream.getTokenAt(i);
+			int kind = token.getKind();
+
+			if (kind == TK_IDENTIFIER.ordinal() || kind == TK_STRING.ordinal())
+				return token.toString();
+			
+		} while (i++ < end);
+		
+		return null;
+	}
+
+	public boolean isLabelProperty(Object element, String property) {
+		return true; // TODO: Optimize LabelProvider.isLabelProperty?
+	}
+
+	public void addListener(ILabelProviderListener listener) {
+		// Do nothing
+	}
+
+	public void removeListener(ILabelProviderListener listener) {
+		// Do nothing
+	}
+
+	public void dispose() {
+		// Do nothing
+	}
+
+}

Deleted: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Outliner.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Outliner.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Outliner.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -1,141 +0,0 @@
-package org.strategoxt.imp.runtime.services;
-
-import static org.strategoxt.imp.runtime.parser.tokens.TokenKind.*;
-
-import java.util.List;
-import java.util.Stack;
-
-import lpg.runtime.IPrsStream;
-import lpg.runtime.IToken;
-
-import org.eclipse.imp.parser.IParseController;
-import org.strategoxt.imp.runtime.Environment;
-import org.strategoxt.imp.runtime.parser.ast.AbstractVisitor;
-import org.strategoxt.imp.runtime.parser.ast.AstNode;
-
-/**
- * Base class for an outliner.
- * 
- * @author Lennart Kats <L.C.L.Kats add tudelft.nl>
- */
-public class Outliner extends org.eclipse.imp.services.base.OutlinerBase {
-	// TODO: Re-implement outline based on TreeModelBuilderBase, ILabelProvider
-	//       to get the nice quick outline feature
-	
-	/*
-	 * A shadow copy of the outline stack maintained in the super class,
-	 * holding all pushed AST nodes (rather than outline items).
-	 * 
-	 * (When not using a strongly typed visitor, this
-	 *  should be the most efficient and simple way of determining
-	 *  whether an outline item should be popped.)
-	 */
-	private Stack<AstNode> outlineStack = new Stack<AstNode>();
-	
-	private final List<NodeMapping> rules;
-	
-	public Outliner(List<NodeMapping> rules) {
-		this.rules = rules;
-	}	
-	
-    private class OutlineVisitor extends AbstractVisitor {
-		public boolean preVisit(AstNode node) {
-			if (NodeMapping.hasAttribute(rules, node.getConstructor(), node.getSort(), 0))
-				outline(node);
-			
-			return true;
-		}
-
-		public void postVisit(AstNode node) {
-			endOutline(node);
-		}
-	}
-	
-	// Interface implementation
-	
-	@Override
-	protected final void sendVisitorToAST(Object node) {
-		((AstNode) node).accept(new OutlineVisitor());
-	}
-	
-	@Override
-	protected boolean significantChange(IParseController controller) {
-		return true; // HACK: parent method is now LPG specific
-	}
-	
-	// Helper methods
-	
-	// These help select an outline item's caption,
-	// in case the outline descriptor didn't include a pattern
-	// to find it.
-	
-	protected void outline(AstNode node) {
-		String caption = getIdentifierHelper(node);
-		
-		if (caption != null) {
-			outline(node, caption);
-		} else {
-			Environment.logException(
-				"Unable to infer the caption of this AST node: " +
-				node.getSort() + "." + node.getConstructor()
-			);
-		}
-	}
-
-	private String getIdentifierHelper(AstNode node) {
-		// HACK: Hardcoded outlining, until we have support for patterns
-		String constructor = node == null ? null : node.getConstructor();
-		
-		if ("MethodDec".equals(constructor)) {
-			return node.getChildren().get(0).getChildren().get(3).toString();
-		} else if ("ClassDec".equals(constructor)) {
-			return node.getChildren().get(0).getChildren().get(1).toString();
-		} else if ("Rules".equals(constructor)) {
-			return "rules";
-		} else if ("Strategies".equals(constructor)) {
-			return "strategies";
-		} else {
-			return getIdentifier(node);
-		}
-	}
-	
-	protected void outline(AstNode node, String caption) {
-		if (outlineStack.isEmpty()) {
-			pushTopItem(caption, node);
-		} else {
-			pushSubItem(caption, node);
-		}
-		
-		outlineStack.push(node);
-	}
-	
-	protected void endOutline(AstNode node) {
-		if (!outlineStack.isEmpty() && outlineStack.peek() == node) {
-			if (outlineStack.size() > 1) // don't pop top items
-				popSubItem();
-			
-			outlineStack.pop();
-		}
-	}
-	
-	// TODO2: Optimize - cache getIdentifier?
-	
-	// TODO: Don't return identifier tokens in list or optional AST nodes
-	
-	private String getIdentifier(AstNode node) {
-		IPrsStream stream = node.getLeftIToken().getIPrsStream();
-		int i = node.getLeftIToken().getTokenIndex();
-		int end = node.getRightIToken().getTokenIndex();
-		
-		do {
-			IToken token = stream.getTokenAt(i);
-			int kind = token.getKind();
-
-			if (kind == TK_IDENTIFIER.ordinal() || kind == TK_STRING.ordinal())
-				return token.toString();
-			
-		} while (i++ < end);
-		
-		return null;
-	}
-}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ReferenceResolverDelegate.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ReferenceResolverDelegate.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ReferenceResolverDelegate.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -16,7 +16,6 @@
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
-import org.strategoxt.imp.runtime.parser.ast.AstNode;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
 /**
@@ -30,7 +29,6 @@
 		final EditorState editor = EditorState.getActiveEditor();
 		if (editor != null) {
 			// Can't run this in the main thread since we're acquiring the environment lock
-			IStrategoAstNode ast = editor.getCurrentAst();
 			final IStrategoAstNode reference = editor.getSelectionAst(false);
 			new Job("Go to definition") {
 				@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -541,10 +541,6 @@
 	public void prepareForReinitialize() {
 		// Do nothing
 	}
-	
-	public void initialize(IParseController controller) {
-		// Unused
-	}
 
 	public void reinitialize(Descriptor newDescriptor) throws BadDescriptorException {
 		synchronized (getSyncRoot()) {

Copied: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TreeModelBuilder.java (from rev 20468, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/Outliner.java)
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TreeModelBuilder.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/TreeModelBuilder.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -0,0 +1,76 @@
+package org.strategoxt.imp.runtime.services;
+
+import java.util.List;
+import java.util.Stack;
+
+import org.eclipse.imp.services.ILabelProvider;
+import org.eclipse.imp.services.base.TreeModelBuilderBase;
+import org.strategoxt.imp.runtime.parser.ast.AbstractVisitor;
+import org.strategoxt.imp.runtime.parser.ast.AstNode;
+import org.strategoxt.imp.runtime.parser.ast.RootAstNode;
+
+/**
+ * Base class for an outliner.
+ * 
+ * @author Lennart Kats <L.C.L.Kats add tudelft.nl>
+ */
+public class TreeModelBuilder extends TreeModelBuilderBase {
+	
+	/**
+	 * A shadow copy of the outline stack maintained in the super class,
+	 * holding all pushed AST nodes (rather than outline items).
+	 * 
+	 * (When not using a strongly typed visitor, this
+	 *  should be the most efficient and simple way of determining
+	 *  whether an outline item should be popped.)
+	 */
+	private final Stack<AstNode> treeStack = new Stack<AstNode>();
+	
+	private final List<NodeMapping> rules;
+	
+	private final ILabelProvider labelProvider;
+	
+	public TreeModelBuilder(List<NodeMapping> rules, ILabelProvider labelProvider) {
+		this.rules = rules;
+		this.labelProvider = labelProvider;
+	}	
+	
+    private class TreeModelVisitor extends AbstractVisitor {
+		public boolean preVisit(AstNode node) {
+			if (NodeMapping.hasAttribute(rules, node.getConstructor(), node.getSort(), 0))
+				startItem(node);
+			
+			return true;
+		}
+
+		public void postVisit(AstNode node) {
+			endItem(node);
+		}
+	}
+	
+	// Interface implementation
+	
+	@Override
+	public void visitTree(Object node) {
+		((AstNode) node).accept(new TreeModelVisitor());
+	}
+	
+	void startItem(AstNode node) {
+		String label = labelProvider.getText(node);
+		if (treeStack.isEmpty() && node instanceof RootAstNode) {
+			// Skip the top node: already added by TreeModelBuilderBase
+		} else if (label == null || label.length() == 0) {
+			// Skip empty-label nodes
+		} else {
+			pushSubItem(node);
+			treeStack.push(node);
+		}
+	}
+	
+	void endItem(AstNode node) {
+		if (!treeStack.isEmpty() && treeStack.peek() == node) {
+			popSubItem();
+			treeStack.pop();
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java	2010-01-05 12:12:11 UTC (rev 20471)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPImplodeAsfixStrategy.java	2010-01-05 12:13:29 UTC (rev 20472)
@@ -52,7 +52,7 @@
 		}
 		
 		AstNode result = imploder.implode(asfixATerm, tokenizer);
-		result = RootAstNode.makeRoot(result, getResource(inputFile));
+		result = RootAstNode.makeRoot(result, null, getResource(inputFile));
 		return result.getTerm();
 		
 		// TODO: Make a RootAstNode object from this tree and for IMPSGLRIPrimitive

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
===================================================================

(23 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Tue Jan  5 13:43:13 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 05 Jan 2010 12:43:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20473 - LennartKats -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
	spoofax-imp/trunk/org.strategoxt.imp.generator/lib
Message-ID: <201001051243.o05ChDJq020591@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-05 12:43:12 +0000 (Tue, 05 Jan 2010)
New Revision: 20473

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20473&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar

Log:
Added a lexical restriction so fine-grained recovery doesn't water out "*/" block comment endings.


Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr	2010-01-05 12:13:29 UTC (rev 20472)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/insert-sections.astr	2010-01-05 12:43:12 UTC (rev 20473)
@@ -6,7 +6,7 @@
 attributes
 
   def insert-sections:
-    sections ->
+    modules ->
     |[ sorts
          WATEREOF
   
@@ -24,8 +24,8 @@
     where
       if-switch(|INSERTIONS_ON())
     with
-      p1* := sections.lexical-insert-prods;
-      p2* := sections.kernel-insert-prods
+      p1* := modules.lexical-insert-prods;
+      p2* := modules.kernel-insert-prods
   
   eq insert-sections:
     sections -> |[ context-free syntax ]|
@@ -60,17 +60,11 @@
     lit(x) -> id
     where
       id.root;
-      oncetd(
-        ?lit(_);
-        id.eq(|lit(x));
-        id.is-list-head
-      )
+      oncetd({ y, ys:
+        ?prod([y @ lit(_) | _], _, _);
+        x.eq(|y)
+      })
   
-  def Test is-list-head:
-    [x | _] -> id
-    where
-      not(id.parent => [_ | _])
-  
 attributes // Simple opening literals (e.g., "{")
 
   // FIXME: open prods rule gives more false positives than any other rule
@@ -197,21 +191,39 @@
 attributes // Non-nestable region keywords (e.g., "attributes" or "strategies")
 
   eq lexical-insert-prods:
-    lit @ lit(_) -> |[ -> ~lit {recover, cons("INSERTION")} ]|
+    prod([lit @ lit(_) | _], _, _) -> |[ -> ~lit {recover, cons("INSERTION")} ]|
     where
       if-switch(|NONNESTABLE_ON())
     where
+      id.is-nonnestable-prod
+    where
+      id.root;
+      collect-all(
+        prod([id.eq(|lit) | id], id, id); id.in-context-free-section
+      );
+      all(id.is-nonnestable-prod)
+  
+  def Test is-nonnestable-prod:
+    prod @ prod([lit @ lit(_) | _], _, _) -> id
+    where
       id.in-context-free-section
     where
-      id.current-prod.direct-contained-sorts => [_ | _]
+      id.direct-contained-sorts => [_ | _]
     where
-      not(id.current-prod.is-contained-by(|id.current-sort))
+      not(id.is-contained-by(|id.current-sort))
+    // With expression/statement start symbols, the following is not a good idea
+    //<+
+    //  id.all-start-symbols.one(
+    //    {sort: ?sort(sort); prod.is-contained-by(|sort) }
+    //  )
+  
+  def Test is-list-head:
+    x -> id
+    with
+      not(?[_ | _])
     where
-      if-switch(|OPEN_BRACKETS_ON())
-    <+
-      not(lit.is-used-as-opening-literal)
-    where
-      id.all-start-symbols.one({sort: ?sort(sort); lit.current-prod.is-contained-by(|sort) })
+      id.parent => [_ | _];
+      not(id.parent => [_ | _])
 
 attributes // Start production literals (e.g., "module")
 

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr	2010-01-05 12:13:29 UTC (rev 20472)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr	2010-01-05 12:43:12 UTC (rev 20473)
@@ -78,7 +78,7 @@
     )
   + SwitchOption(|
       NONNESTABLE_ON()
-    , "on"
+    , "off"
     , "Add insertion rules for keywords starting non-nestable regions"
     )
   + SwitchOption(|
@@ -120,19 +120,19 @@
 strategies
 
   add-permissive-sections:
-    definition(modules) -> definition(modules')
+    d @ definition(modules) -> definition(modules')
     with
       input-length := <collect(?prod(_, _, _)); length>;
       log(|Info(), ["Number of productions to analyze: ", input-length]);
       
       // Analyze all sections, but only add results to the first
-      modules' := <one(add-permissive-sections)> modules
+      modules' := <one(add-permissive-sections(|d))> modules
 
-  add-permissive-sections:
+  add-permissive-sections(|modules):
     "module"#([name, x, sections]) ->
     "module"#([name, x, sections'])
     with
-      added         := id.all-permissive-sections;
+      added         := modules.all-permissive-sections;
       output-length := <collect(?prod(_, _, _)); length> added;
       log(|Info(), ["Number of productions generated:  ", output-length]);
       

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	2010-01-05 12:13:29 UTC (rev 20472)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/water-sections.astr	2010-01-05 12:43:12 UTC (rev 20473)
@@ -2,25 +2,30 @@
 
 attributes
   
-  // TODO: WATER -> LAYOUT rule should be in lexical syntax
+  // TODO: WATER -> LAYOUT rule should be in lexical syntax?
 
-  // TODO: WATERTOKENSEPARATOR should be based on the definition of LAYOUT
+  // XXX: WATERTOKENSEPARATOR should be based on the definition of LAYOUT
+  
+  // XXX: WATERTOKENSTAR should be based on the language's block comments
 
   def water-sections:
     id ->
     |[ sorts
-         WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR
+         WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR
        
        lexical syntax
          ~%% Water-based recovery rule set-up
          [A-Za-z0-9\_]                  -> WATERTOKENSTART {recover}
          WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN
-         ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {recover}
+         ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover}
+         "*"                            -> WATERTOKENSTAR {recover}
          WATERTOKEN                     -> WATER
          WATERTOKENSEPARATOR            -> WATER
+         WATERTOKENSTAR                 -> WATER
   
        lexical restrictions    
-         WATERTOKEN -/- [A-Za-z0-9\_]
+         WATERTOKEN     -/- [A-Za-z0-9\_]
+         WATERTOKENSTAR -/- [\/]
   
        context-free syntax
          WATER -> LAYOUT {cons("WATER")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Wed Jan  6 11:24:10 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 06 Jan 2010 10:24:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20474 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.stratego/editor
	org.strategoxt.imp.editors.stratego/trans
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/syntax
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201001061024.o06AOAhw006935@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-06 10:24:10 +0000 (Wed, 06 Jan 2010)
New Revision: 20474

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20474&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Log:
Added completion triggers: e.g., "<" or "->" triggers a completion in Stratego.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-06 10:24:10 UTC (rev 20474)
@@ -10,6 +10,13 @@
   completion proposer : editor-complete
   
   completion lexical : [a-zA-Z0-9\'\-\_]+
+
+  completion trigger : "-> [A-Za-z]"
+  completion trigger : "([^A-Za-z0-9_]) <" // trigger for '-> <' but not for 'a < b'
+  completion trigger : "\n ?<"
+  completion trigger : "!"
+  completion trigger : "\?"
+  // completion trigger : ":= [A-Za-z]" // may not always work
                                                                                    
   reference _ : editor-resolve
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-06 10:24:10 UTC (rev 20474)
@@ -23,17 +23,18 @@
         rules(WarnAnalysis: _)
       end
     with
-      {| DeclareCookie:
-        <basic-desugar-top> ast;
-        with(<declare-globals> Import("libstratego-lib"));
-        if not(NoAnalysis) then
-          declare-globals-top
-        end;
-        declare-bodies-top => ast';
-        rules(
-          DecoratedAst := ast'
-        )
-      |}
+      <basic-desugar-top> ast;
+      with(<declare-globals> Import("libstratego-lib"));
+      ast' := <analyze-ast-local>
+ 
+  analyze-ast-local =
+    if not(NoAnalysis) then
+      declare-globals-top
+    end;
+    declare-bodies-top => ast';
+    rules(
+      DecoratedAst := ast'
+    )
 
 rules // Projections and lookup
 
@@ -81,7 +82,13 @@
 
   signature-of:
     DynRuleScopeId(x) -> x
+  
+  signature-of = is-tuple // already a signature
 
+  is-constructor =
+    declaration-of;
+    not(?OpDecl(_, _) + ?ExtOpDecl(_, _))
+
   is-congruence-signature:
     (x, s, 0) -> (x, s, [])
     where
@@ -514,7 +521,13 @@
       )
   
   signature-to-proposal:
-    (x, 0) -> ([x], "")
+    (x, 0) -> ([x | parentheses], "")
+    with
+      if is-constructor then
+        parentheses := ["()"]
+      else
+        parentheses := []
+      end
 
   signature-to-proposal:
     (x, n) -> ([x, "(", t*, ")"], "")
@@ -661,8 +674,7 @@
   constraint-warning:
     Var(x) -> (x, $[Conflicts with nullary constructor: use '[x]()' instead])
     where
-      declaration-of;
-      require(not(?OpDecl(_, _) + ?ExtOpDecl(_, _)))
+      require(is-constructor)
 
   constraint-warning:
     CallT(SVar(<"debug" + "say">), [t], []) -> (s, $[Should be '![s]'])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2010-01-06 10:24:10 UTC (rev 20474)
@@ -36,12 +36,7 @@
   editor-complete:
     (node, position, ast, path, project-path) -> proposals
     with
-      // TODO: Optimize - only a local analysis is needed for editor-complete
-      // Ensure all dynamic rules are properly scoped
-      try(dr-scope-all-end);
-      dr-scope-all-start
-    with
-      <analyze-ast> (ast, path, project-path);
+      <basic-desugar-top; analyze-ast-local> ast;
       proposals := <ContentProposals>
  
   editor-resolve:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2010-01-06 10:24:10 UTC (rev 20474)
@@ -22,7 +22,7 @@
           ~~
           ~~// This file can be used for custom analysis and builder rules.
           ~~// See the imported file for a brief introduction and examples.
-        builders // new heading: ensure proper pretty printer table layout
+        builders
           ~~
           provider: ~provider
           observer: editor-analyze

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-references-descriptor.str	2010-01-06 10:24:10 UTC (rev 20474)
@@ -28,10 +28,11 @@
           ~~// hover help, occurrence highlighting rules.
           ~~// See the imported file for a brief introduction and examples.
           ~~
-        references // new heading: ensure proper pretty printer table layout
+        references
           ~~
           completion proposer: editor-complete
           completion lexical: [A-Za-z0-9_]+
+          completion trigger: ":"
           ~~
           reference _ : editor-resolve
           hover     _ : editor-hover
@@ -75,12 +76,15 @@
           ~//
           ~//   completion proposer : completion-function-call  
           ~//   completion lexical  : [A-Za-z0-9_]+
+          ~//   completion trigger  : "\."
           ~//   completion keyword  : "keyword"
           ~//
           ~// This sets completion-function-call as the completion strategy,
           ~// and declares that [A-Za-z0-9_]+ may be used as a lexical pattern
           ~// to parse identifiers (used when the input file has syntax errors).
-          ~// It also defines a keyword completion for the keyword "keyword."
+          ~// The completion trigger uses a regular expression to specify that  
+          ~// completions should be proposed as the user types ".".
+          ~// Finally, the above also defines a completion for the keyword "keyword."
           ~
           ~~// All semantic services may make use of the
           ~~// dynamic rules created by the observer.

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2010-01-06 10:24:10 UTC (rev 20474)
@@ -4,6 +4,7 @@
    CompletionProposer   -- R [ H [ KW["completion"] KW["proposer"] ] KW[":"] _1 ],
    CompletionLexical    -- R [ H [ KW["completion"] KW["lexical"] ] KW[":"] _1 ],
    CompletionKeyword    -- R [ H [ KW["completion"] KW["keyword"] ] KW[":"] H [ _1 _2 ] ],
+   CompletionTrigger    -- R [ H [ KW["completion"] KW["trigger"] ] KW[":"] H [ _1 _2 ] ],
    HoverRule            -- R [ H [ KW["hover"]     _1 ] KW[":"] _2 ],
    OccurrenceRule       -- R [ H [ KW["occurrence"] _1 ] H [ KW[":"] _2 ] ],
    SemanticProvider     -- R [ H [ KW["provider" ] ] KW[":"] _1 ],

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-01-06 10:24:10 UTC (rev 20474)
@@ -11,6 +11,7 @@
 import org.eclipse.imp.editor.UniversalEditor;
 import org.eclipse.imp.language.Language;
 import org.eclipse.imp.model.ISourceProject;
+import org.eclipse.imp.parser.IParseController;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.jface.text.Region;
 import org.eclipse.swt.graphics.Point;
@@ -71,7 +72,10 @@
 	 * 
 	 * @throws IllegalStateException  if not called from the UI thread
 	 */
-	public static EditorState getEditorFor(DynamicParseController parseController) {
+	public static EditorState getEditorFor(IParseController parseController) {
+		if (parseController instanceof SGLRParseController)
+			return ((SGLRParseController) parseController).getEditor();
+		
 		EditorState activeEditor = getActiveEditor();
 		if (activeEditor != null && activeEditor.getEditor().getParseController() == parseController)
 			return activeEditor;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/ContentProposerFactory.java	2010-01-06 10:24:10 UTC (rev 20474)
@@ -8,10 +8,15 @@
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
+import org.eclipse.imp.parser.IParseController;
 import org.eclipse.imp.services.IContentProposer;
+import org.eclipse.jface.text.source.ISourceViewer;
 import org.spoofax.interpreter.terms.IStrategoAppl;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.services.ContentProposer;
+import org.strategoxt.imp.runtime.services.ContentProposerListener;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 
 /**
@@ -22,39 +27,88 @@
 	private static final String DEFAULT_LEXICAL = "[A-Za-z_0-9]+";
 	
 	public ContentProposerFactory() {
-		super(IContentProposer.class);
+		super(IContentProposer.class, true);
 	}
+
+	/**
+	 * Eagerly initializes the content proposer service listener.
+	 * (Normally, it is only initialized after the user hits control-space,
+	 *  but we want it to be triggered by other events as well.)
+	 */
+	public static void eagerInit(Descriptor descriptor, IParseController controller, EditorState editor) {
+		try {
+			if (editor != null && controller instanceof SGLRParseController) {
+				((SGLRParseController) controller).setEditor(editor);
+				registerListener(descriptor, (SGLRParseController) controller);
+			}
+		} catch (BadDescriptorException e) {
+			Environment.logException("Could not eagerly initialize the content proposal service", e);
+		} catch (RuntimeException e) {
+			Environment.logException("Could not eagerly initialize the content proposal service", e);
+		}
+	}
 	
 	@Override
 	public IContentProposer create(Descriptor descriptor, SGLRParseController controller) throws BadDescriptorException {
 		String completionFunction = descriptor.getProperty("CompletionProposer", null);
-		String completionLexical = descriptor.getProperty("CompletionLexical", DEFAULT_LEXICAL);
 		StrategoObserver feedback = descriptor.createService(StrategoObserver.class, controller);
 
-		Pattern completionPattern;
+		Pattern completionPattern = readCompletionPattern(descriptor);		
+		Set<String> completionKeywords = readCompletionKeywords(descriptor);
+		String[] keywords = completionKeywords.toArray(new String[0]);
+
+		registerListener(descriptor, controller);
+		
+		return new ContentProposer(feedback, completionFunction, completionPattern, keywords);
+	}
+
+	private static void registerListener(Descriptor descriptor, SGLRParseController controller)
+			throws BadDescriptorException {
+		ISourceViewer viewer = controller.getEditor().getEditor().getServiceControllerManager().getSourceViewer();
+		Set<Pattern> triggers = readTriggers(descriptor);
+		ContentProposerListener.register(triggers, viewer);
+	}
+
+	private static Pattern readCompletionPattern(Descriptor descriptor) throws BadDescriptorException {
 		try {
-			completionPattern = Pattern.compile(completionLexical);
-			if (completionPattern.matcher("").matches())
+			String completionLexical = descriptor.getProperty("CompletionLexical", DEFAULT_LEXICAL);
+			Pattern result = Pattern.compile(completionLexical);
+			if (result.matcher("").matches())
 				throw new PatternSyntaxException("Completion lexical matches the empty string", completionLexical, 0);
-			if (!completionPattern.matcher(ContentProposer.createCompletionToken()).matches())
+			if (!result.matcher(ContentProposer.COMPLETION_TOKEN).matches())
 				throw new PatternSyntaxException("Completion lexical allow letters and numbers", completionLexical, 0);
+			return result;
 		} catch (PatternSyntaxException e) {
 			throw new BadDescriptorException("Illegal completion lexical in editor descriptor", e);
 		}
-		Set<String> completionKeywords = new HashSet<String>();
+	}
+
+	private static Set<String> readCompletionKeywords(Descriptor descriptor) {
+		Set<String> results = new HashSet<String>();
 		
 		for (IStrategoAppl keyword : collectTerms(descriptor.getDocument(), "CompletionKeyword")) {
 			String literal = termContents(termAt(keyword, 0));
 			IStrategoAppl type = termAt(keyword, 1);
 			if (cons(type).equals("Disable"))
-				completionKeywords.remove(literal);
+				results.remove(literal);
 			else
-				completionKeywords.add(literal);
+				results.add(literal);
 		}
+		return results;
+	}
+
+	private static Set<Pattern> readTriggers(Descriptor descriptor) throws BadDescriptorException {
+		Set<Pattern> results = new HashSet<Pattern>();
 		
-		String[] keywords = completionKeywords.toArray(new String[0]); 
-		
-		return new ContentProposer(feedback, completionFunction, completionPattern, keywords);
+		for (IStrategoAppl trigger : collectTerms(descriptor.getDocument(), "CompletionTrigger")) {
+			try {
+				String pattern = termContents(termAt(trigger, 0));
+				Pattern compiledPattern = Pattern.compile(pattern);
+				results.add(compiledPattern);
+			} catch (PatternSyntaxException e) {
+				throw new BadDescriptorException("Illegal trigger pattern in editor descriptor");
+			}
+		}
+		return results;
 	}
-
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	2010-01-06 10:24:10 UTC (rev 20474)
@@ -18,6 +18,7 @@
 import org.eclipse.jface.text.IRegion;
 import org.eclipse.jface.text.Region;
 import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 
 /**
@@ -67,8 +68,10 @@
 		
 		IParseController result = super.getWrapped(); 
 
-		if (lastEditor == null && EditorState.isUIThread())
+		if (lastEditor == null && EditorState.isUIThread()) {
 			lastEditor = EditorState.getEditorFor(this);
+			ContentProposerFactory.eagerInit(Environment.getDescriptor(getLanguage()), result, lastEditor);
+		}
 		return result;
 	}
 
@@ -126,8 +129,10 @@
 	public void reinitialize(Descriptor newDescriptor) throws BadDescriptorException {
 		super.reinitialize(newDescriptor);
 		isReinitialized = true;
-		if (lastEditor != null)
+		if (lastEditor != null) {
 			lastEditor.scheduleParserUpdate(REINIT_PARSE_DELAY);
+			ContentProposerFactory.eagerInit(Environment.getDescriptor(getLanguage()), getWrapped(), lastEditor);
+		}
 	}
 
 	public Object parse(String input, IProgressMonitor monitor) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StringAstNode.java	2010-01-06 10:24:10 UTC (rev 20474)
@@ -27,6 +27,10 @@
 		return value = SGLRToken.toString(getLeftIToken(), getRightIToken());
 	}
 
+	public void setValue(String value) {
+		this.value = value;
+	}
+
 	@Override
 	public String yield() {
 		return getValue();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-05 12:43:12 UTC (rev 20473)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-06 10:24:10 UTC (rev 20474)
@@ -24,6 +24,7 @@
 import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.contentassist.ICompletionProposal;
 import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.widgets.Display;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -56,6 +57,8 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class ContentProposer implements IContentProposer {
+
+	public static String COMPLETION_TOKEN = "CONTENTCOMPLETE" + Math.abs(new Random().nextInt());
 	
 	private static final String COMPLETION_CONSTRUCTOR = "COMPLETION";
 	
@@ -77,6 +80,8 @@
 	
 	private RootAstNode lastCompletionAst;
 	
+	private String lastDocumentWithoutIdentifier;
+	
 	private AstNode currentCompletionNode;
 	
 	private String currentCompletionPrefix;
@@ -91,12 +96,11 @@
 	public ICompletionProposal[] getContentProposals(IParseController controller, int offset, ITextViewer viewer) {
 		currentCompletionNode = null;
 		String document = viewer.getDocument().get();
-		String completionToken = createCompletionToken();
 		
-		if (!completionLexical.matcher(completionToken).matches())
+		if (!completionLexical.matcher(COMPLETION_TOKEN).matches())
 			return createErrorProposal("No proposals available - completion lexical must allow letters and numbers", offset);
 		
-		constructAst(getParser(controller), offset, document, completionToken);
+		constructAst(getParser(controller), offset, document);
 		
 		if (currentCompletionNode == null) {
 			if (lastCompletionAst == null && lastParserAst == null)
@@ -107,49 +111,56 @@
 
 		ICompletionProposal[] results = toProposals(invokeCompletionFunction(), document, offset);
 		
+		/* UNDONE: automatic proposal insertion
 		if (results.length == 1 && results[0] instanceof SourceProposal) {
 			results[0].apply(viewer.getDocument());
 			Point selection = ((SourceProposal) results[0]).getSelection(viewer.getDocument());
 			viewer.setSelectedRange(selection.x, selection.y);
 			return null;
 		}
+		*/
+		
 		return results;
     }
 
-	public static String createCompletionToken() {
-		return "CONTENTCOMPLETE" + Math.abs(new Random().nextInt());
+	private RootAstNode constructAst(SGLRParseController controller, int offset, String document) {
+		this.parser = controller;
+		RootAstNode ast = tryReusePreviousAst(offset, document);
+		if (ast != null) return ast;
+
+		String documentWithToken = document.substring(0, offset) + COMPLETION_TOKEN + document.substring(offset);
+		ast = parse(controller, offset, documentWithToken);
+		if (ast == null) return null;
+		
+		RootAstNode result = identifyCompletionNode(ast, COMPLETION_TOKEN);
+		if (currentCompletionNode == null) result = insertNewCompletionNode(ast, offset, document);
+		return result;
 	}
 
-	private RootAstNode constructAst(SGLRParseController controller, int offset, String document, String completionToken) {
-		this.parser = controller;
-		document = document.substring(0, offset) + completionToken + document.substring(offset);
+	private RootAstNode parse(SGLRParseController controller, int offset, String document) {
 		JSGLRI parser = controller.getParser();
-		RootAstNode ast;
+		RootAstNode result;
 		
 		controller.scheduleParserUpdate(DynamicParseController.REINIT_PARSE_DELAY, true);
 		controller.getParseLock().lock();
 		try {
 			if (completionFunction == null && controller.getCurrentAst() != null) {
-				ast = controller.getCurrentAst().cloneIgnoreTokens();
+				// Don't reparse for keyword completion
+				result = controller.getCurrentAst().cloneIgnoreTokens();
 			} else {
-				ast = parser.parse(document.toCharArray(), controller.getPath().toPortableString());
+				result = parser.parse(document.toCharArray(), controller.getPath().toPortableString());
 				lastParserAst = controller.getCurrentAst();
-				lastCompletionAst = ast.cloneIgnoreTokens();
+				lastCompletionAst = result.cloneIgnoreTokens();
 			}
 		} catch (SGLRException e) {
 			Environment.logException("Could not reparse input for content completion", e);
-			ast = getPreviousAst(controller);
+			result = forceUseMostRecentAst(controller, offset, document);
 		} catch (IOException e) {
 			Environment.logException("Could not reparse input for content completion", e);
-			ast = getPreviousAst(controller);
+			result = forceUseMostRecentAst(controller, offset, document);
 		} finally {
 			controller.getParseLock().unlock();
 		}
-
-		if (ast == null) return null;
-		
-		RootAstNode result = identifyCompletionNode(ast, completionToken);
-		if (currentCompletionNode == null) result = insertNewCompletionNode(ast, offset, document);
 		return result;
 	}
 
@@ -157,9 +168,20 @@
 		if (completionFunction == null) {
 			return Environment.getTermFactory().makeList();
 		} else {
-			synchronized (observer.getSyncRoot()) {
-				return observer.invokeSilent(completionFunction, currentCompletionNode);
+			// TODO: is using this lock in the main thread a deadlock risk?
+			//       and does syncExec mitigate that risk?
+			// TODO: apply syncExec in other cases where a lock is used in the main thread?
+			class Runner implements Runnable {
+				IStrategoTerm result;
+				public void run() {
+					synchronized (observer.getSyncRoot()) {
+						result = observer.invokeSilent(completionFunction, currentCompletionNode);
+					}
+				}
 			}
+			Runner runner = new Runner();
+			Display.getCurrent().syncExec(runner);
+			return runner.result;
 		}
 	}
 	
@@ -264,11 +286,26 @@
 	private ICompletionProposal[] createErrorProposal(String error, int offset) {
 		return new ICompletionProposal[] { new ErrorProposal(error, offset) };
 	}
+
+	private RootAstNode tryReusePreviousAst(int offset, String document) {
+		String documentWithoutIdentifier = document.substring(0, offset) + document.substring(offset);
+		if (documentWithoutIdentifier.equals(lastDocumentWithoutIdentifier)) {
+			replacePrefix(currentCompletionNode, getPrefix(offset, document));
+			return lastCompletionAst;
+		} else {
+			return null;
+		}
+	}
 	
-	private RootAstNode getPreviousAst(SGLRParseController parser) {
-		return parser.getCurrentAst() == lastParserAst
-				? lastCompletionAst
-				: lastParserAst.cloneIgnoreTokens();
+	private RootAstNode forceUseMostRecentAst(SGLRParseController parser, int offset, String document) {
+		if (parser.getCurrentAst() != lastParserAst) { // parser has a more recent AST
+			lastParserAst = parser.getCurrentAst();
+			lastCompletionAst = parser.getCurrentAst();
+			currentCompletionNode = null;
+		} else {
+			replacePrefix(currentCompletionNode, getPrefix(offset, document));
+		}
+		return lastCompletionAst;
 	}
 
 	private static SGLRParseController getParser(IParseController controller) {
@@ -352,6 +389,13 @@
 		return document.substring(0, offset);
 	}
 	
+	private void replacePrefix(AstNode completionNode, String prefix) {
+		if (completionNode.getConstructor() == COMPLETION_UNKNOWN)
+			completionNode = completionNode.getChildren().get(0);
+		StringAstNode prefixNode = (StringAstNode) completionNode.getChildren().get(0);
+		prefixNode.setValue(prefix);
+	}
+	
 	private void insertNewCompletionNode(AstNode node, String prefix) {
 		// Create a new UNKNOWN(COMPLETION(prefix)) node
 		AstNode newNode = createCompletionNode(prefix, node.getLeftIToken(), node.getRightIToken());

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java	2010-01-06 10:24:10 UTC (rev 20474)
@@ -0,0 +1,82 @@
+package org.strategoxt.imp.runtime.services;
+
+import java.util.Map;
+import java.util.Set;
+import java.util.WeakHashMap;
+import java.util.regex.Pattern;
+
+import org.eclipse.jface.text.BadLocationException;
+import org.eclipse.jface.text.IDocument;
+import org.eclipse.jface.text.ITextListener;
+import org.eclipse.jface.text.ITextOperationTarget;
+import org.eclipse.jface.text.TextEvent;
+import org.eclipse.jface.text.source.ISourceViewer;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * Activates the content proposer based on text events.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ContentProposerListener implements ITextListener {
+	
+	private static final Map<ISourceViewer, ContentProposerListener> asyncListeners =
+		new WeakHashMap<ISourceViewer, ContentProposerListener>();
+	
+	private final Set<Pattern> patterns;
+	
+	private final ISourceViewer viewer;
+	
+	private ContentProposerListener(Set<Pattern> patterns, ISourceViewer viewer) {
+		this.patterns = patterns;
+		this.viewer = viewer;
+	}
+
+	public static void register(Set<Pattern> triggers, ISourceViewer viewer) {
+		synchronized (asyncListeners) {
+			ContentProposerListener oldListener = asyncListeners.remove(viewer);
+			if (oldListener != null)
+				viewer.removeTextListener(oldListener);
+			
+			if (viewer instanceof ITextOperationTarget) {
+				if (!triggers.isEmpty()) {
+					ContentProposerListener listener = new ContentProposerListener(triggers, viewer);
+					viewer.addTextListener(listener);
+					asyncListeners.put(viewer, listener);
+				}
+			} else {
+				Environment.logWarning("Source viewer is not an ITextOperationTarget; could not register content proposer triggers");
+			}
+		}
+	}
+
+	public void textChanged(TextEvent event) {
+		try {
+			if (event.getDocumentEvent() != null // not just a visual change
+					&& event.getText() != null && event.getText().length() == 1 // single keypress
+					&& matchesPatterns(event.getDocumentEvent().getDocument(), event.getOffset())) {
+				viewer.setSelectedRange(event.getOffset() + 1, 0);
+				((ITextOperationTarget) viewer).doOperation(ISourceViewer.CONTENTASSIST_PROPOSALS);
+			}
+		} catch (BadLocationException e) {
+			Environment.logException("Exception when checking for content proposal triggers", e);
+		} catch (RuntimeException e) {
+			Environment.logException("Exception when checking for content proposal triggers", e);
+		}
+	}
+	
+	private boolean matchesPatterns(IDocument document, int offset) throws BadLocationException {
+		for (Pattern pattern : patterns) {
+			for (int startOffset = offset; startOffset >= 0; startOffset--) {
+				String substring = document.get(startOffset, offset - startOffset + 1);
+				if (pattern.matcher(substring).matches()) {
+					return true;
+				}
+				char c = substring.charAt(0);
+				if (c == '\n' || c == '\r')
+					break; // looked back far enough
+			}
+		}
+		return false;
+	}
+}



From L.C.L.Kats at tudelft.nl  Wed Jan  6 11:42:35 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 06 Jan 2010 10:42:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20475 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/strc
	strc-java/trunk/trans
Message-ID: <201001061042.o06AgZwB007102@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-06 10:42:35 +0000 (Wed, 06 Jan 2010)
New Revision: 20475

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20475&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str
   strc-java/trunk/trans/strj.str

Log:
- Disabled concrete syntax signatures when -F is specified (before, it didn't generate signatures at all when this option was specified)
- Enabled signatures in STRJ again


Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2010-01-06 10:24:10 UTC (rev 20474)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/strc/strc.str	2010-01-06 10:42:35 UTC (rev 20475)
@@ -63,7 +63,7 @@
       else
         log-timed(
           defs-to-external-defs
-          ; if not(<get-config> "--no-concrete-syntax-externals") then
+          ; if not(<get-config> "--no-concrete-syntax-externals" + <get-config> "-F") then
               where(
                 pp-stratego-string
               ; print-to

Modified: strc-java/trunk/trans/strj.str
===================================================================
--- strc-java/trunk/trans/strj.str	2010-01-06 10:24:10 UTC (rev 20474)
+++ strc-java/trunk/trans/strj.str	2010-01-06 10:42:35 UTC (rev 20475)
@@ -50,7 +50,7 @@
     end
   ; try(mark-always-needed(|<get-config> "-m", 0, 0))
   ; strc-optimize
-  // TODO; strc-export-external-defs!
+  ; strc-export-external-defs
   ; strc-output-frontend
   ; s2j
   ; with(clean-output-dir)



From L.C.L.Kats at tudelft.nl  Wed Jan  6 11:44:46 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 06 Jan 2010 10:44:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20476 - LennartKats -
	strategoxt/trunk/stratego-libraries/lib/spec/lang
Message-ID: <201001061044.o06Aik5K007118@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-06 10:44:46 +0000 (Wed, 06 Jan 2010)
New Revision: 20476

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20476&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str

Log:
Changed 'with' to use report-with-failure(|m,t) instead of report-failure(s) for efficiency. Both have been around since 0.17, but the latter was introduced in an earlier baseline, so hopefully this won't cause any trouble...

Changes:

Modified: strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str
===================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str	2010-01-06 10:42:35 UTC (rev 20475)
+++ strategoxt/trunk/stratego-libraries/lib/spec/lang/with.str	2010-01-06 10:44:46 UTC (rev 20476)
@@ -31,7 +31,6 @@
     ; report-failure(log(|Critical(), message, term); exit)
   
   /**
-   * @obsolete
    * @internal
    */
   report-with-failure(|message, trace) =



From L.C.L.Kats at tudelft.nl  Wed Jan  6 11:45:25 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 06 Jan 2010 10:45:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20477 - LennartKats -
	strategoxt/trunk/strc-core/lib/stratego/strc/front
Message-ID: <201001061045.o06AjPBB007139@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-06 10:45:25 +0000 (Wed, 06 Jan 2010)
New Revision: 20477

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20477&view=rev

Modified:
   strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str

Log:
Changed 'with' to use report-with-failure(|m,t) instead of report-failure(s) for efficiency. Both have been around since 0.17, but the latter was introduced in an earlier baseline, so hopefully this won't cause any trouble...

Changes:

Modified: strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str
===================================================================
--- strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str	2010-01-06 10:44:46 UTC (rev 20476)
+++ strategoxt/trunk/strc-core/lib/stratego/strc/front/desugar.str	2010-01-06 10:45:25 UTC (rev 20477)
@@ -184,16 +184,15 @@
     where
       message := <conc-strings> ("Internal error: with clause failed unexpectedly in rule ", <name>)
     ; x := <new>
+    ; y := <new>
     ; with := Strat |[
         where(
           s
-          <+ { x: ?x
+          <+ { x, y: ?x
            ; prim("SSL_stacktrace_get_all_frame_names",|)
-           ; // TODO: call report-failure(|~str:message {^[]}, x) instead
-             report-failure(
-                log(|Critical(){^[]}, ~str:message {^[]}, x)
-              ; exit(|)
-              )
+           ; ?y
+           ; !x
+           ; report-with-failure(|~str:message {^[]}, y)
              }
         )
       ]|



From L.C.L.Kats at tudelft.nl  Wed Jan  6 14:24:59 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 06 Jan 2010 13:24:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20479 - LennartKats -
	in spoofax-imp/trunk: . org.eclipse.imp
	org.strategoxt.imp.editors.stratego/editor
	org.strategoxt.imp.editors.stratego/trans
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201001061324.o06DOxoT009454@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-06 13:24:58 +0000 (Wed, 06 Jan 2010)
New Revision: 20479

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20479&view=rev

Modified:
   spoofax-imp/trunk/Makefile
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ReferenceResolverDelegate.java

Log:
Added a caching strategy to avoid reparsing with every character typed while providing content proposals.

Changes:

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2010-01-06 12:57:24 UTC (rev 20478)
+++ spoofax-imp/trunk/Makefile	2010-01-06 13:24:58 UTC (rev 20479)
@@ -24,8 +24,10 @@
 	$(MAKE) -C org.strategoxt.imp.generator new-libs
 
 org.eclipse.imp/org.eclipse.imp.runtime.patch : .PHONY
-	if [ "$(ECLIPSE_IMP)" != "" ]; then \
+	@if [ "$(ECLIPSE_IMP)" != "" ]; then \
 	  (cd $(ECLIPSE_IMP); svn diff org.eclipse.imp.runtime) > $@; \
+	else \
+	  echo ECLIPSE_IMP variable not set; will not create new .patch file; \
 	fi
 
 .PHONY :

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-06 12:57:24 UTC (rev 20478)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-06 13:24:58 UTC (rev 20479)
@@ -72,20 +72,6 @@
  
      public void initialize() {
          IRegionSelectionService regionSelector= (IRegionSelectionService) fTextEditor.getAdapter(IRegionSelectionService.class);
-Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/HyperlinkDetector.java
-===================================================================
---- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/HyperlinkDetector.java	(revision 22255)
-+++ org.eclipse.imp.runtime/src/org/eclipse/imp/editor/HyperlinkDetector.java	(working copy)
-@@ -87,7 +87,8 @@
-         // to the beginning of the file and give it a nominal length.
- 
-         final int targetStart= (nodeLocator.getStartOffset(target) < 0) ? 0 : nodeLocator.getStartOffset(target);
--        final int targetLength= 0; // nodeLocator.getEndOffset(target) - targetStart + 1;
-+        // LK
-+        final int targetLength= targetStart == 0 ? 0 : nodeLocator.getEndOffset(target) - targetStart + 1;
- 
-         // Use the file path info to determine whether the target editor is the same as
-         // the source editor, and initialize the TargetLink accordingly.
 Index: org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ParserScheduler.java
 ===================================================================
 --- org.eclipse.imp.runtime/src/org/eclipse/imp/editor/ParserScheduler.java	(revision 22255)

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-06 12:57:24 UTC (rev 20478)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-06 13:24:58 UTC (rev 20479)
@@ -11,12 +11,14 @@
   
   completion lexical : [a-zA-Z0-9\'\-\_]+
 
+/* TODO: re-enable completion triggers in a later release
   completion trigger : "-> [A-Za-z]"
   completion trigger : "([^A-Za-z0-9_]) <" // trigger for '-> <' but not for 'a < b'
   completion trigger : "\n ?<"
   completion trigger : "!"
   completion trigger : "\?"
   // completion trigger : ":= [A-Za-z]" // may not always work
+*/
                                                                                    
   reference _ : editor-resolve
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-06 12:57:24 UTC (rev 20478)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-06 13:24:58 UTC (rev 20479)
@@ -82,12 +82,10 @@
 
   signature-of:
     DynRuleScopeId(x) -> x
-  
-  signature-of = is-tuple // already a signature
 
   is-constructor =
-    declaration-of;
-    not(?OpDecl(_, _) + ?ExtOpDecl(_, _))
+    (?(_, _); DeclareCookie; Declaration <+ declaration-of);
+    (?OpDecl(_, _) + ?ExtOpDecl(_, _))
 
   is-congruence-signature:
     (x, s, 0) -> (x, s, [])
@@ -96,8 +94,6 @@
 
   declare-cookie-of =
     signature-of; DeclareCookie
-  <+
-    signature-of-congruence; DeclareCookie
 
   declaration-of =
     signature-of; (?_{<Declaration>} <+ ?(_{<Declaration>}, _) <+ ?(_{<Declaration>}, _, _))
@@ -176,18 +172,31 @@
     where
       not(!x => COMPLETION(_))
     where
-      <IsImported> x
+      <IsImported + IsImportedFailed> x
     <+
-      <import-library> x;
-      declare-globals-top;
-      rules(IsImported: x)
+      dr-ignore-state(
+        <import-library> x;
+        declare-globals-top;
+        rules(
+          IsImported: x
+          MissingIndirectImports: x -> <bagof-MissingImport>
+        )
+      <+
+        <try(resolve-import-path)> $[[x].str];
+        (import-from-cache <+ import-rtree <+ import-str);
+        declare-globals-top;
+        rules(
+          IsImported: x
+          MissingIndirectImports: x -> <bagof-MissingImport>
+        )
+      | "MissingImport"
+      )
     <+
-      <try(resolve-import-path)> $[[x].str];
-      (import-from-cache <+ import-rtree <+ import-str);
-      declare-globals-top;
-      rules(IsImported: x)
-    <+
-      rules(IsImportMissing := x); fail
+      rules(
+        MissingImport :+= x
+        IsImportedFailed: x
+      );
+      fail
 
   declare-globals:
     ImportWildcard(x) -> ImportWildcard(x)
@@ -247,6 +256,7 @@
         full-path := <file-exists> $[[<CurrentDir>]/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/trans/[x]]
+     <+ full-path := <file-exists> $[[<ProjectDir>]/lib/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/src/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/syntax/[x]]
      <+ full-path := <file-exists> $[[<ProjectDir>]/src/syntax/[x]]
@@ -561,28 +571,28 @@
     where
       require(is-declared)
     where
-      not(IsImportMissing)
+      not(MissingImport)
 
   global-constraint-error:
     Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
     where
       require(is-declared)
     where
-      not(IsImportMissing)
+      not(MissingImport)
 
   global-constraint-warning:
     CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' not defined])
     where
       require(is-declared)
     where
-      IsImportMissing
+      MissingImport
 
   global-constraint-warning:
     Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
     where
       require(is-declared)
     where
-      IsImportMissing
+      MissingImport
 
   constraint-error:
     Var(x) -> (x, $[Variable '[x]' is not declared])
@@ -595,6 +605,13 @@
       require(<IsImported> x)
 
   global-constraint-error:
+    Import(x) -> (x, $[Unable to import indirect imports: [missing-indirect']])
+    where
+      missing-indirect := <MissingIndirectImports> x;
+      require(!missing-indirect => []);
+      missing-indirect' := <separate-by(|", ")> missing-indirect
+
+  global-constraint-error:
     DynRuleScopeId(x) -> (x, $[Dynamic rule '[x]' not defined])
     where
       require(is-declared)
@@ -674,7 +691,7 @@
   constraint-warning:
     Var(x) -> (x, $[Conflicts with nullary constructor: use '[x]()' instead])
     where
-      require(is-constructor)
+      require(not(is-constructor))
 
   constraint-warning:
     CallT(SVar(<"debug" + "say">), [t], []) -> (s, $[Should be '![s]'])

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-06 12:57:24 UTC (rev 20478)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-06 13:24:58 UTC (rev 20479)
@@ -42,7 +42,7 @@
 /**
  * Content completion.
  * 
- * Works in 6 steps:
+ * Works in 6 or so steps:
  * 
  * 1. control-space/completion token event
  * 2. create source text with "_CONTENT_COMPLETE_a124142_" dummy literal
@@ -80,12 +80,16 @@
 	
 	private RootAstNode lastCompletionAst;
 	
-	private String lastDocumentWithoutIdentifier;
+	private AstNode lastCompletionNode;
 	
+	private String lastDocument;
+	
 	private AstNode currentCompletionNode;
 	
 	private String currentCompletionPrefix;
 	
+	private String lastCompletionPrefix;
+	
 	public ContentProposer(StrategoObserver observer, String completionFunction, Pattern completionLexical, String[] keywords) {
 		this.observer = observer;
 		this.completionFunction = completionFunction;
@@ -94,6 +98,8 @@
 	}
 	
 	public ICompletionProposal[] getContentProposals(IParseController controller, int offset, ITextViewer viewer) {
+		lastCompletionNode = currentCompletionNode;
+		lastCompletionPrefix = currentCompletionPrefix;
 		currentCompletionNode = null;
 		String document = viewer.getDocument().get();
 		
@@ -108,6 +114,9 @@
 			else
 				return createErrorProposal("No proposals available - could not identify proposal context", offset);
 		}
+		
+		if (currentCompletionPrefix.length() > 0 && !completionLexical.matcher(currentCompletionPrefix).matches())
+			Environment.logWarning("Identifier does not match completion lexical pattern: '" + currentCompletionPrefix + "'");
 
 		ICompletionProposal[] results = toProposals(invokeCompletionFunction(), document, offset);
 		
@@ -287,11 +296,41 @@
 		return new ICompletionProposal[] { new ErrorProposal(error, offset) };
 	}
 
+	/**
+	 * Reuse the previous AST if the user just added or deleted a single character.
+	 */
 	private RootAstNode tryReusePreviousAst(int offset, String document) {
-		String documentWithoutIdentifier = document.substring(0, offset) + document.substring(offset);
-		if (documentWithoutIdentifier.equals(lastDocumentWithoutIdentifier)) {
-			replacePrefix(currentCompletionNode, getPrefix(offset, document));
-			return lastCompletionAst;
+		if (offset == 0) return null;
+		if (lastCompletionNode != null && lastDocument.length() == document.length() - 1) {
+			String newCharacter = document.substring(offset - 1, offset);
+			String previousDocument = lastDocument.substring(0, offset - 1) + newCharacter + lastDocument.substring(offset - 1);
+			if (document.equals(previousDocument))
+				return reusePreviousAst(document, lastCompletionPrefix + newCharacter);
+		} else if (lastCompletionNode != null && lastCompletionPrefix.length() > 0 && lastDocument.length() == document.length() + 1) {
+			String previousDocument = lastDocument.substring(0, offset) + lastDocument.substring(offset + 1);
+			if (document.equals(previousDocument))
+				return reusePreviousAst(document, lastCompletionPrefix.substring(0, lastCompletionPrefix.length() - 1));
+		}
+		System.err.println("AWWWW ... NO REUSE");
+		lastDocument = document;
+		return null;
+	}
+
+	private RootAstNode reusePreviousAst(String document, String prefix) {
+		currentCompletionPrefix = prefix;
+		lastDocument = document;
+		String prefixInAst = sanitizePrefix(currentCompletionPrefix);
+		if (prefixInAst == null)
+			return null;
+		currentCompletionNode = lastCompletionNode;
+		replacePrefix(currentCompletionNode, prefixInAst);
+		return lastCompletionAst;
+	}
+
+	private String sanitizePrefix(String prefix) {
+		Matcher matcher = completionLexical.matcher(prefix);
+		if (matcher.lookingAt()) {
+			return prefix.substring(0, matcher.end());
 		} else {
 			return null;
 		}
@@ -348,8 +387,6 @@
 		children.add(new StringAstNode(prefix, null, left, right));
 		currentCompletionPrefix = prefix;
 		currentCompletionNode = new AstNode(null, left, right, COMPLETION_CONSTRUCTOR, children);
-		if (prefix.length() > 0 && !completionLexical.matcher(prefix).matches())
-			Environment.logWarning("Identifier does not match completion lexical pattern: '" + prefix + "'");
 		return currentCompletionNode;
 	}
 	
@@ -390,7 +427,7 @@
 	}
 	
 	private void replacePrefix(AstNode completionNode, String prefix) {
-		if (completionNode.getConstructor() == COMPLETION_UNKNOWN)
+		if (completionNode.getConstructor() != COMPLETION_CONSTRUCTOR)
 			completionNode = completionNode.getChildren().get(0);
 		StringAstNode prefixNode = (StringAstNode) completionNode.getChildren().get(0);
 		prefixNode.setValue(prefix);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java	2010-01-06 12:57:24 UTC (rev 20478)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/LabelProvider.java	2010-01-06 13:24:58 UTC (rev 20479)
@@ -44,10 +44,8 @@
 			return node.getChildren().get(0).getChildren().get(3).toString();
 		} else if ("ClassDec".equals(constructor)) {
 			return node.getChildren().get(0).getChildren().get(1).toString();
-		} else if ("Rules".equals(constructor)) {
-			return "rules";
-		} else if ("Strategies".equals(constructor)) {
-			return "strategies";
+		} else if (node.getChildren().size() == 1 && node.getChildren().get(0).isList()) {
+			return node.getLeftIToken().toString(); // e.g., "rules", "strategies"
 		} else {
 			return getIdentifier(node);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ReferenceResolverDelegate.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ReferenceResolverDelegate.java	2010-01-06 12:57:24 UTC (rev 20478)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ReferenceResolverDelegate.java	2010-01-06 13:24:58 UTC (rev 20479)
@@ -53,7 +53,7 @@
 				return;
 			
 			int targetStart = locator.getStartOffset(target) < 0 ? 0 : locator.getStartOffset(target);
-			int targetLength = targetStart == 0 ? 0 : locator.getEndOffset(target) - targetStart + 1;
+			int targetLength = 0; // targetStart == 0 ? 0 : locator.getEndOffset(target) - targetStart + 1;
 			IPath path = locator.getPath(target);
 			
 			openLink(new TargetLink(reference.toString(), 0, 0, path, targetStart, targetLength, null));



From L.C.L.Kats at tudelft.nl  Wed Jan  6 14:33:12 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 06 Jan 2010 13:33:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20480 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.stratego/trans
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201001061333.o06DXCpE009530@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-06 13:33:12 +0000 (Wed, 06 Jan 2010)
New Revision: 20480

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20480&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java

Log:
- Fix for infinite loop on circular Stratego imports (reported by Sander V)
- Added .cache to the list of derived resources

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-06 13:24:58 UTC (rev 20479)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-06 13:33:12 UTC (rev 20480)
@@ -174,11 +174,11 @@
     where
       <IsImported + IsImportedFailed> x
     <+
+      rules(IsImported: x);
       dr-ignore-state(
         <import-library> x;
         declare-globals-top;
         rules(
-          IsImported: x
           MissingIndirectImports: x -> <bagof-MissingImport>
         )
       <+
@@ -186,7 +186,6 @@
         (import-from-cache <+ import-rtree <+ import-str);
         declare-globals-top;
         rules(
-          IsImported: x
           MissingIndirectImports: x -> <bagof-MissingImport>
         )
       | "MissingImport"

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2010-01-06 13:24:58 UTC (rev 20479)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2010-01-06 13:33:12 UTC (rev 20480)
@@ -232,6 +232,7 @@
 		IResource includeDir = project.findMember("include");
 		IResource editorDir = project.findMember("editor");
 		IResource buildFile = project.findMember("build.generated.xml");
+		IResource cacheDir = project.findMember(".cache");
 
 		if (!(includeDir instanceof IContainer && editorDir instanceof IContainer))
 			throw new IOException("/include and /editor directories must exist");
@@ -248,6 +249,8 @@
 			if (buildFile != null)
 				buildFile.setDerived(true);
 		}
+		
+		if (cacheDir.exists()) cacheDir.setDerived(true);
 	}
 	
 	public IResource getTargetDescriptor(IResource mainDescriptor) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-06 13:24:58 UTC (rev 20479)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-06 13:33:12 UTC (rev 20480)
@@ -114,9 +114,6 @@
 			else
 				return createErrorProposal("No proposals available - could not identify proposal context", offset);
 		}
-		
-		if (currentCompletionPrefix.length() > 0 && !completionLexical.matcher(currentCompletionPrefix).matches())
-			Environment.logWarning("Identifier does not match completion lexical pattern: '" + currentCompletionPrefix + "'");
 
 		ICompletionProposal[] results = toProposals(invokeCompletionFunction(), document, offset);
 		
@@ -311,7 +308,6 @@
 			if (document.equals(previousDocument))
 				return reusePreviousAst(document, lastCompletionPrefix.substring(0, lastCompletionPrefix.length() - 1));
 		}
-		System.err.println("AWWWW ... NO REUSE");
 		lastDocument = document;
 		return null;
 	}



From L.C.L.Kats at tudelft.nl  Wed Jan  6 14:56:05 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 06 Jan 2010 13:56:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20481 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <201001061356.o06Du53e009952@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-06 13:56:05 +0000 (Wed, 06 Jan 2010)
New Revision: 20481

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20481&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Log:
More work on Stratego "imports" errors.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-06 13:33:12 UTC (rev 20480)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-06 13:56:05 UTC (rev 20481)
@@ -172,27 +172,29 @@
     where
       not(!x => COMPLETION(_))
     where
-      <IsImported + IsImportedFailed> x
+      <IsImported> x
     <+
       rules(IsImported: x);
       dr-ignore-state(
         <import-library> x;
         declare-globals-top;
+        with(<debug> ("missing1:", x, <bagof-MissingImports>));
         rules(
-          MissingIndirectImports: x -> <bagof-MissingImport>
+          MissingIndirectImports: x -> <bagof-MissingImports>
         )
       <+
         <try(resolve-import-path)> $[[x].str];
         (import-from-cache <+ import-rtree <+ import-str);
         declare-globals-top;
+        with(<debug> ("missing2:", x, <bagof-MissingImports>));
         rules(
-          MissingIndirectImports: x -> <bagof-MissingImport>
+          MissingIndirectImports: x -> <bagof-MissingImports>
         )
-      | "MissingImport"
+      | "MissingImports"
       )
     <+
       rules(
-        MissingImport :+= x
+        MissingImports :+= x
         IsImportedFailed: x
       );
       fail
@@ -205,10 +207,16 @@
       rules(IsImported: ImportWildcard(x));
       path := <resolve-import-path> x;
       readdir;
-      list-loop(
-        if has-extension(|"str") then
-          try(<declare-globals> Import($[[path]/[<remove-extension>]]))
-        end
+      dr-ignore-state(
+        list-loop(
+          if has-extension(|"str") then
+            try(<declare-globals> Import($[[path]/[<remove-extension>]]))
+          end
+        );
+        rules(
+          MissingIndirectImports: ImportWildcard(x) -> <bagof-MissingImports>
+        )
+      | "MissingImports"
       )
 
   import-library =
@@ -278,6 +286,8 @@
 
   declare-dynrule:
     dec @ RDecT(x, s*, t*) -> RDecT(x', s*, t*)
+    where
+      not(!x => COMPLETION(_))
     with
       x' := x{<declare-cookie-of>}
     <+
@@ -494,8 +504,13 @@
       x' := x
     with
       t'* := <declare-bodies-top> t*;
-      s'* := <declare-bodies-top> s*
+      s'* := <map(declare-bodies-svar <+ declare-bodies-top)> s*
 
+  declare-bodies-svar:
+    CallT(SVar(x), [], []) -> CallT(SVar(x'), [], [])
+    with
+      x' := x{<declare-cookie-of <+ !"unknown">} // always allow in case of higher-order args
+
   declare-bodies:
     Op(x, t*) -> Op(x', t'*)
     where
@@ -570,28 +585,28 @@
     where
       require(is-declared)
     where
-      not(MissingImport)
+      not(MissingImports)
 
   global-constraint-error:
     Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
     where
       require(is-declared)
     where
-      not(MissingImport)
+      not(MissingImports)
 
   global-constraint-warning:
     CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' not defined])
     where
       require(is-declared)
     where
-      MissingImport
+      MissingImports
 
   global-constraint-warning:
     Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
     where
       require(is-declared)
     where
-      MissingImport
+      MissingImports
 
   constraint-error:
     Var(x) -> (x, $[Variable '[x]' is not declared])
@@ -601,16 +616,25 @@
   global-constraint-error:
     Import(x) -> (x, $[Unable to import '[x]'])
     where
-      require(<IsImported> x)
+      require(not(<IsImportedFailed> x))
 
   global-constraint-error:
-    Import(x) -> (x, $[Unable to import indirect imports: [missing-indirect']])
+    Import(x) -> (x, $[Indirect import failure: [x] -> [<write-to-string> <MissingIndirectImports>] [missing-indirect']])
     where
       missing-indirect := <MissingIndirectImports> x;
-      require(!missing-indirect => []);
+      require(!missing-indirect => [])
+    with
       missing-indirect' := <separate-by(|", ")> missing-indirect
 
   global-constraint-error:
+    ImportWildcard(x) -> (x, $[Indirect import failure: [missing-indirect']])
+    where
+      missing-indirect := <MissingIndirectImports> ImportWildcard(x);
+      require(!missing-indirect => [])
+    with
+      missing-indirect' := <separate-by(|", ")> missing-indirect
+
+  global-constraint-error:
     DynRuleScopeId(x) -> (x, $[Dynamic rule '[x]' not defined])
     where
       require(is-declared)



From L.C.L.Kats at tudelft.nl  Fri Jan  8 11:53:09 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Jan 2010 10:53:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20485 - LennartKats -
	in aster/trunk: tests trans
Message-ID: <201001081053.o08Ar9Gf016013@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-08 10:53:09 +0000 (Fri, 08 Jan 2010)
New Revision: 20485

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20485&view=rev

Modified:
   aster/trunk/tests/Makefile.am
   aster/trunk/trans/io.str

Log:
Working on Java compatibility

Changes:

Modified: aster/trunk/tests/Makefile.am
===================================================================
--- aster/trunk/tests/Makefile.am	2010-01-08 09:29:12 UTC (rev 20484)
+++ aster/trunk/tests/Makefile.am	2010-01-08 10:53:09 UTC (rev 20485)
@@ -31,7 +31,7 @@
 CLEANFILES = $(RUNTESTS) $(RUNTESTS:=.str) $(FAILTESTS:=.rtree)
 
 %.str : %.astr $(top_srcdir)/trans/aster
-	$(top_srcdir)/trans/aster -i $< -o $@ --verbose 2
+	java -jar $(top_srcdir)/trans/java/aster.jar -i $< -o $@ --verbose 2  # $(top_srcdir)/trans/aster -i $< -o $@ --verbose 2
 
 %$(EXEEXT) : %.str
 	strc -i $< -m main-`basename $*` $(STRCFLAGS) >/dev/null

Modified: aster/trunk/trans/io.str
===================================================================
--- aster/trunk/trans/io.str	2010-01-08 09:29:12 UTC (rev 20484)
+++ aster/trunk/trans/io.str	2010-01-08 10:53:09 UTC (rev 20485)
@@ -7,21 +7,62 @@
   libstrc
 
 strategies
-  
+   
   // We parse individual files using libstrc.
-  // Using pack-stratego isn't really an option as long as
+  // Using pack-stratego as is isn't really an option as long as
   // we want to support both .str/.rtree and .astr files
   
   input-stratego-file =
     xtc-ensure-file => FILE(file);
     parse-stratego-trm( // TODO: if-java-platform(import-term)
-    | [ "-i", file
+    | <debug(!"options:")> [ "-i", file
       , "--default-syntax", "Stratego-Attributes"
-      , "-I", <xtc-find; dirname <+ !"../syntax"> "Stratego-Attributes.tbl"
-      , "-I", <xtc-find; dirname <+ !"../runtime"> "aster-runtime.rtree"
+      , "-I", <stratego-attributes-table-path>
+      , "-I", <stratego-attributes-in-stratego-table-path>
+      , "-I", <aster-runtime-path>
       | <get-config <+ ![]> "-I"
       ]
     )
+  
+  stratego-attributes-table-path =
+    if-c-platform(
+      <xtc-find; dirname> "Stratego-Attributes.tbl"
+    <+
+      !"../syntax" // bootstrapping: before install
+    );
+    if-java-platform(
+      TablePath
+    <+
+      path := <new-temp-dir>;
+      rules(TablePath := path);
+      with(<WriteToBinaryFile> ($[[path]/Stratego-Attributes.tbl], <import-term(Stratego-Attributes.tbl)>))
+    )
+  
+  stratego-attributes-in-stratego-table-path =
+    if-c-platform(
+      <xtc-find; dirname> "Stratego-Attributes-in-Stratego.tbl"
+    );
+    if-java-platform(
+      MetaTablePath
+    <+
+      path := <new-temp-dir>;
+      rules(MetaTablePath := path);
+      with(<WriteToBinaryFile> ($[[path]/Stratego-Attributes-in-Stratego.tbl], <import-term(Stratego-Attributes-in-Stratego.tbl)>))
+    )
+  
+  aster-runtime-path =
+    if-c-platform(
+      <xtc-find; dirname> "aster-runtime.rtree"
+    <+
+      !"../runtime" // bootstrapping: before install
+    );
+    if-java-platform(
+      RuntimePath
+    <+
+      path := <new-temp-dir>;
+      rules(RuntimePath := path);
+      with(<WriteToBinaryFile> ($[[path]/aster-runtime.rtree], <import-term(aster-runtime.rtree)>))
+    )
 
   output-stratego-file =
     write-to;



From L.C.L.Kats at tudelft.nl  Fri Jan  8 11:58:27 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Jan 2010 10:58:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20486 - LennartKats -
	strc-java/trunk/trans
Message-ID: <201001081058.o08AwRn3016076@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-08 10:58:27 +0000 (Fri, 08 Jan 2010)
New Revision: 20486

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20486&view=rev

Modified:
   strc-java/trunk/trans/strj-options.str
   strc-java/trunk/trans/strj.str

Log:
Check if output dir exists, even when generating library signatures

Changes:

Modified: strc-java/trunk/trans/strj-options.str
===================================================================
--- strc-java/trunk/trans/strj-options.str	2010-01-08 10:53:09 UTC (rev 20485)
+++ strc-java/trunk/trans/strj-options.str	2010-01-08 10:58:27 UTC (rev 20486)
@@ -12,6 +12,7 @@
   s2j-options
   s2j
   strj-version
+  strj
 
 strategies
 
@@ -32,6 +33,7 @@
     )
   ; display-version
   ; strc-announce
+  ; where(output-dirname) // ensure dir exists
   ; if <get-config> "-o"; base-filename; not(<eq> (<id>, <jify>)); not(<get-config> "-F") then
       <get-config> "-o"
     ; fatal-err(|"Output file name is not a legal Java name")

Modified: strc-java/trunk/trans/strj.str
===================================================================
--- strc-java/trunk/trans/strj.str	2010-01-08 10:53:09 UTC (rev 20485)
+++ strc-java/trunk/trans/strj.str	2010-01-08 10:58:27 UTC (rev 20486)
@@ -125,7 +125,7 @@
    ; if has-extension(|"java") then
        dirname
      end
-   ; try(file-exists <+ mkdir)
+   ; try(file-exists <+ mkdir <+ fatal-err(|"Output directory does not exist"))
    ; rules(OutputDirName := <id>)
    <+
      strc-getoutfile(!"")



From m.dejonge at tudelft.nl  Fri Jan  8 12:09:01 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 08 Jan 2010 11:09:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20487 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001081109.o08B91XT016544@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2010-01-08 11:09:01 +0000 (Fri, 08 Jan 2010)
New Revision: 20487

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20487&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java

Log:
currentPlusNext
dedent not allowed in forward siblings

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2010-01-08 10:58:27 UTC (rev 20486)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2010-01-08 11:09:01 UTC (rev 20487)
@@ -33,9 +33,26 @@
     }
     
     public ArrayList<StructureSkipSuggestion> getCurrentSkipSuggestions(int failureIndex) throws IOException {
+        ArrayList<StructureSkipSuggestion> result = getCurrentRegionSkips(failureIndex);  
+        ArrayList<StructureSkipSuggestion> includeNexts=new ArrayList<StructureSkipSuggestion>();
+        for (StructureSkipSuggestion skip : result) {
+            if(skip.getEndSkip().getIndentValue() < skip.getStartSkip().getIndentValue()){
+                for (StructureSkipSuggestion skipFW : selectRegion(skip.getIndexHistoryEnd())) {
+                    includeNexts.add(mergeRegions(skipFW, skip));
+                }
+            }                
+        }        
+        result.addAll(includeNexts);
+        return result;
+    }
+
+    private ArrayList<StructureSkipSuggestion> getCurrentRegionSkips(
+            int failureIndex) throws IOException {
+        ArrayList<StructureSkipSuggestion> result=new ArrayList<StructureSkipSuggestion>();
         if (failureIndex>0 && isScopeOpeningLine(failureIndex) && getHistory().getLine(failureIndex-1).getIndentValue()==getHistory().getLine(failureIndex).getIndentValue())
-            return selectRegion(failureIndex-1);
-        return selectRegion(failureIndex);
+            result.addAll(selectRegion(failureIndex-1));
+        result.addAll(selectRegion(failureIndex));
+        return result;
     }
     
     public ArrayList<StructureSkipSuggestion> getPriorSkipSuggestions(int failureIndex) throws IOException {
@@ -67,14 +84,14 @@
         ArrayList<StructureSkipSuggestion> nextSiblings=getCurrentAndNextSkipSuggestions(failureIndex);
         ArrayList<StructureSkipSuggestion> prevRegionSuggestions=selectPrevRegion(failureIndex);
         if(prevRegionSuggestions.isEmpty()){
-            prevRegionSuggestions=getCurrentSkipSuggestions(failureIndex);
+            prevRegionSuggestions=getCurrentRegionSkips(failureIndex);
             nextSiblings.remove(0);
         }
         for (StructureSkipSuggestion priorSuggestion : prevRegionSuggestions) {
             for (int i = 0; i < nextSiblings.size(); i++) {
                 StructureSkipSuggestion nextSuggestion=nextSiblings.get(i);
                 StructureSkipSuggestion mergedSkip=mergeRegions(nextSuggestion, priorSuggestion);
-                fwSkips.add(mergedSkip);            
+                fwSkips.add(mergedSkip);                
             }
         }
         return fwSkips;
@@ -141,7 +158,7 @@
     public StructureSkipSuggestion getErroneousPrefix(int failureIndex) throws IOException {
         StructureSkipSuggestion prefix=new StructureSkipSuggestion();
         if(getHistory().getIndexLastLine()>=0)
-            prefix.setSkipLocations(getHistory().getLine(0), getHistory().getLine(failureIndex), 0, failureIndex);
+            prefix.setSkipLocations(IndentInfo.cloneIndentInfo(getHistory().getLine(0)), IndentInfo.cloneIndentInfo(getHistory().getLine(failureIndex)), 0, failureIndex);
         return prefix;
     }
 
@@ -168,7 +185,7 @@
             while (lineIndex < prevRegion.getIndexHistoryEnd()) {
                 int indentOfLine=getHistory().getLine(lineIndex).getIndentValue();
                 if(indentOfLine==indentOfLevel){                    
-                    ArrayList<StructureSkipSuggestion> regions = selectRegion(lineIndex);              
+                    ArrayList<StructureSkipSuggestion> regions = selectRegion(lineIndex); 
                     if(regions.size()>0){
                         //System.out.println("index: "+lineIndex +" indent: "+indentOfLevel);
                         lineIndex=regions.get(0).getIndexHistoryEnd();
@@ -291,7 +308,10 @@
         int fwMax=failureIndex+MAX_NR_OF_LINES;
         int lineIndex=failureIndex;
         int nrOfStructs=0;
-        do{
+        int indentValueStart=-1;
+        if(currRegions.size()>0)
+            indentValueStart=currRegions.get(0).getStartSkip().getIndentValue();
+        do{   
             nrOfStructs++;
             for (StructureSkipSuggestion r : currRegions) {
                 if(r.getAdditionalTokens().length==0)
@@ -299,8 +319,13 @@
             }            
             if(!currRegions.isEmpty()){
                 lineIndex=currRegions.get(0).getIndexHistoryEnd();
-                System.out.println(currRegions.get(0).getIndexHistoryStart()+" => "+ currRegions.get(0).getIndexHistoryEnd());
-                currRegions=selectRegion(currRegions.get(0).getIndexHistoryEnd());
+                if (currRegions.get(0).getStartSkip().getIndentValue()>=indentValueStart) {
+                    //System.out.println(currRegions.get(0).getIndexHistoryStart()+" => "+ currRegions.get(0).getIndexHistoryEnd());
+                    currRegions = selectRegion(currRegions.get(0)
+                            .getIndexHistoryEnd());
+                }
+                else
+                    currRegions.clear(); //no dedent allowed
             }
         }while (nrOfStructs<MAX_NR_OF_STRUCTURES && lineIndex<fwMax && !currRegions.isEmpty());
         return nextRegions;



From L.C.L.Kats at tudelft.nl  Fri Jan  8 13:40:19 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Jan 2010 12:40:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20488 - LennartKats -
	strc-java/trunk/trans
Message-ID: <201001081240.o08CeJgP017548@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-08 12:40:18 +0000 (Fri, 08 Jan 2010)
New Revision: 20488

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20488&view=rev

Modified:
   strc-java/trunk/trans/strj.str

Log:


Changes:

Modified: strc-java/trunk/trans/strj.str
===================================================================
--- strc-java/trunk/trans/strj.str	2010-01-08 11:09:01 UTC (rev 20487)
+++ strc-java/trunk/trans/strj.str	2010-01-08 12:40:18 UTC (rev 20488)
@@ -122,7 +122,7 @@
      OutputDirName
    <+
      <get-config> "-o"
-   ; if has-extension(|"java") then
+   ; if has-extension(|"java") + has-extension(|"ctree") then
        dirname
      end
    ; try(file-exists <+ mkdir <+ fatal-err(|"Output directory does not exist"))



From m.dejonge at tudelft.nl  Fri Jan  8 13:45:39 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 08 Jan 2010 12:45:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20489 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001081245.o08CjdxV017574@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2010-01-08 12:45:38 +0000 (Fri, 08 Jan 2010)
New Revision: 20489

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20489&view=rev

Added:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedOnRegion.java
Removed:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/BackTrackRecovery2.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/CoarseGrainedRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/EofRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentationDisambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NoRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserPosition.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoverAlgorithm.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryBase.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructureRecoveryAlgorithm.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/BacktrackPosition.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Frame.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Link.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoverDisambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoverNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java

Log:
fine-grained and structure recovery

Changes (first 1000 lines of the diffs):

Deleted: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/BackTrackRecovery2.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/BackTrackRecovery2.java	2010-01-08 12:40:18 UTC (rev 20488)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/BackTrackRecovery2.java	2010-01-08 12:45:38 UTC (rev 20489)
@@ -1,287 +0,0 @@
-package org.spoofax.jsglr;
-
-import java.io.IOException;
-import java.util.ArrayList;
-
-
-import org.spoofax.ArrayDeque;
-
-// TODO: Start all Javadoc comments with a /** token
-
-/*
- * Assumption: some recover productions are implemented in the syntax definition
- * Examples: -> } {avoid}, [a-zA-Z]+ -> LAYOUT {avoid}
- * 
- * Algorithm: 
- * - During parsing: keep a set with parser states for recovering, ignore recover productions
- * - Recovering: Reset parser on last inserted parser state, collect and process recover-productions, continue by backtracking on parser states
- * - Fine tuning: The criteria for inserting recover positions influences quality and performance. 
- */
-public class BackTrackRecovery2 extends RecoverAlgorithm {
-
-    //recover parameters
-    private final static int NEW_LINE_INTERVAL =1; //Interval decides when to add a recover position
-    private final static int NEW_LINE_CHAR=10;
-    private final static int STREAM_INTERVAL=15; //Interval for inserting recover positions. Remark: big interval increases quality but may increase recover time
-    private final static int POSITION_CLEANUP=120; // for reason of performance it pays off to keeps the list with recover positions short (big list increases non-error parse time)
-    private final static int MAX_LOOPS=50; //protection against infinity
-    
-    
-    private int newLineCount; //Supports approach for inserting recoverPositions based on newline tokens             
-    private ArrayList<BacktrackPosition> backtrackPositions; //List to collect parser states. Positions also keeps a collection of recover nodes
-    private int positionIndex;//indicates the position from where recovering takes place
-    private int addNodeIndex; //indicates on backtrack position the collected recovernodes has to be added
-    
-    /**
-     * Recover algorithm based on backtracking
-     */
-    public BackTrackRecovery2()
-    {   
-        super();
-        backtrackPositions = new ArrayList<BacktrackPosition>();
-    }
-    
-    public void initialize(SGLR parser) {//TODO: clear, init, constructor
-        super.initialize(parser);
-        backtrackPositions.clear(); 
-        newLineCount =0;
-        positionIndex =-1;
-        addNodeIndex =-1;  
-        keepBackTrackPoint(); // keep the initial stack as backtrack point
-    }
-    
-    /**
-     * Keep nodes during recovery
-     * @see org.spoofax.jsglr.RecoverAlgorithm#handleRecoverProduction(org.spoofax.jsglr.Frame, org.spoofax.jsglr.State, int, int, org.spoofax.jsglr.IParseNode)
-     */
-    public void handleRecoverProduction(Frame st0, State s, int length,
-            int numberOfAvoids, IParseNode t) {        
-        if (inRecoverMode) {
-            Frame st1 = createRecoverNode(st0, s, length, numberOfAvoids, t);
-            addRecoverNode(st1, st0); 
-        }
-    } 
-        
-    /**
-     * Recover node stacks are collected in handleRecoverProductions and processed as normal stacks in second round  (non-Javadoc)
-     * @see org.spoofax.jsglr.RecoverAlgorithm#haltsOnRecoverProduction(org.spoofax.jsglr.Frame)
-     */
-    public boolean haltsOnRecoverProduction(Frame st0) {
-        return true;
-    }
-    
-    /**
-     * Keeps node in accessory backtrack position
-     */
-    private void addRecoverNode(Frame st, Frame parent)
-    {
-        RecoverNode rn = new RecoverNode(st, myParser.tokensSeen, myParser.lineNumber, myParser.columnNumber, parent);
-        backtrackPositions.get(addNodeIndex).recoverNodes.add(rn);        
-    }   
-        
-    /*
-     * (non-Javadoc)
-     * @see org.spoofax.jsglr.IRecoverAlgorithm#afterParseStep()
-     */
-    public void afterParseStep() {
-        if(keepStackCriteria()){ 
-            keepBackTrackPoint();
-            if(backtrackPositions.size()>POSITION_CLEANUP) //removing early inserted positions improves non-error parsing performance
-            {
-                int third = POSITION_CLEANUP /3;
-                ArrayList<BacktrackPosition> cleanedPositions = new ArrayList<BacktrackPosition>();
-                cleanedPositions.add(backtrackPositions.get(0));
-                cleanedPositions.add(backtrackPositions.get(third));
-                cleanedPositions.addAll(backtrackPositions.subList(2*third, POSITION_CLEANUP));                
-                backtrackPositions=cleanedPositions;                
-            }
-        }      
-        
-    }
-      
-    /*
-     * Keeps active stacks and current parser state for reason of recovery
-     */
-    private void keepBackTrackPoint() {
-        BacktrackPosition recPos=new BacktrackPosition(myParser.activeStacks, myParser.tokensSeen, myParser.lineNumber, myParser.columnNumber);                     
-        backtrackPositions.add(recPos);
-    }
-    
-    private boolean keepStackCriteria() { //Todo: experiment with criteria        
-        return checkNewLineCount();
-        //return checkStreamPosition();         
-    }
-
-    private boolean checkStreamPosition() {
-        return myParser.tokensSeen % STREAM_INTERVAL == 0;
-    }
-
-    private boolean checkNewLineCount() {
-        if(newLineCount>NEW_LINE_INTERVAL)
-        {
-            newLineCount=0;
-            return true;
-        }
-        if(myParser.currentToken == NEW_LINE_CHAR)
-        {
-            newLineCount++;
-            
-        }
-        return false;
-    }
-
-    protected void prepareForRecovery() {
-        inRecoverMode=true;
-        //recovering starts with the first (backwards) unexplored backtrack position
-        for (int i = backtrackPositions.size()-1; i > -1; i--) {
-            if(backtrackPositions.get(i).isVisited ==false){
-                positionIndex =i;
-                break;
-            }
-        }
-    } 
-
-    public boolean meetsRecoverCriteria() {
-        return myParser.acceptingStack == null && exceededMax ==false;
-    }
-    
-    /*
-     * Sets parser variables on recover position and tries recovering. 
-     * After failure, continues with previous recover position
-     */
-    protected void doRecoverLoops() throws IOException {   
-        BacktrackPosition rp=backtrackPositions.get(positionIndex);
-        //collect recover nodes if this is not already done
-        if (rp.isVisited ==false) {
-            addNodeIndex=positionIndex;
-            collectRecoverNodes(getIntervalEnd());
-            rp.isVisited =true;
-        }
-        //set parser on current recover position
-        myParser.activeStacks.clear();
-        setTokenIndex(rp);
-        setParserFields(rp);        
-        boolean hasRecovered = tryRecover();//recover with all recover nodes from current recover position to last recover position
-        if(hasRecovered) { //parsing continued            
-            for (Frame actStack : myParser.activeStacks) {
-                //needed to keep stack accessable for next recovery
-                //Bugfix: +1 because node comes after shifter
-                RecoverNode rn = new RecoverNode(actStack, myParser.tokensSeen+1, myParser.lineNumber, myParser.columnNumber, null);
-                backtrackPositions.get(addNodeIndex).recoverNodes.add(rn);               
-            }
-        }
-        else { 
-            int newIndex = Math.max(0, positionIndex -1); //backtrack idea
-            nrOfLoops+=1;
-            if(nrOfLoops>MAX_LOOPS)
-            {
-                exceededMax =true;
-            }
-            if(exceededMax == false){
-                positionIndex = newIndex;
-                doRecoverLoops();//retry recovering with all new collected recover nodes plus recover nodes one position earlier
-            }
-        }        
-        
-    }
-    
-    private int getIntervalEnd() {
-        BacktrackPosition rp = backtrackPositions.get(addNodeIndex);                    
-        setTokenIndex(rp);
-        myParser.activeStacks.addAll(rp.recoverStacks);  
-        setParserFields(rp);
-        int endInterval;
-        if(addNodeIndex == backtrackPositions.size()-1)
-        {
-            endInterval = recoverTokenCount;
-        }
-        else
-        {
-            endInterval = backtrackPositions.get(addNodeIndex +1).tokensSeen;
-        }
-        return endInterval;
-    }   
-    
-    private void setTokenIndex(ParserPosition rp) {        
-        tokenIndex = rp.tokensSeen;       
-    }  
-    
-    /*
-     * Collects recover nodes for recoverPosition 
-     */
-    private void collectRecoverNodes(int endInterval) throws IOException {           
-        //collect till end position is reached
-        while(tokenIndex < endInterval) 
-        {
-            tryReadRecoverToken();
-            myParser.updateParserFields(myParser.currentToken);             
-            myParser.doParseStep();                    
-        }        
-    }
-    
-    /*
-     * Stacks resulting from recover productions are collected in the first round
-     * This stacks are added to the active stacks in the next round of recover-parsing.
-     * Remark on quality-performance trade-off: a recovering with two recover-productions near [add stack criteria]
-     * the error position may be preferred above one recover production on an earlier position 
-     */
-    private boolean tryRecover() throws IOException {
-        ArrayDeque<RecoverNode> rnNodes = new ArrayDeque<RecoverNode>();
-        addNodeIndex=positionIndex;
-        //collect all relevant recover nodes
-        int i=positionIndex;        
-        while(i < backtrackPositions.size())
-        {
-            rnNodes.addAll(backtrackPositions.get(i).recoverNodes);
-            backtrackPositions.get(i).recoverNodes.clear(); //list will contain newly produced recover nodes             
-            i++;
-        }         
-        //do recovering till original position is reached
-        while(tokenIndex < recoverTokenCount) 
-        {
-            //nodes are added to position covering the corresponding stream interval
-            if (addNodeIndex<backtrackPositions.size()-1) {
-                if (tokenIndex == backtrackPositions.get(addNodeIndex + 1).tokensSeen){
-                    addNodeIndex++;                    
-                }
-            }
-            tryReadRecoverToken();
-            myParser.updateParserFields(myParser.currentToken); 
-            activateRecoverFrames(rnNodes); //recover nodes for current position are added to active stacks
-            myParser.doParseStep();                    
-        }
-        return myParser.activeStacks.size() > 0 || myParser.acceptingStack !=null;
-    }    
-    
-    /*
-     * Add recover nodes meeting the current position in stream
-     */
-    private void activateRecoverFrames(ArrayDeque<RecoverNode> rnNodes) {
-        boolean inspectR=true; //try adding recover nodes for this token position
-        while (rnNodes.size() > 0 && inspectR) {
-            if (myParser.tokensSeen == rnNodes.peek().tokensSeen) {
-                RecoverNode recNode = rnNodes.removeFirst();
-                addRecoverState(recNode);
-            }
-            else
-                inspectR =false; //list is sorted
-        }
-    }
-    
-    //a link or a new state is added to include recover stack in the GSS stack object
-    private void addRecoverState(RecoverNode recNode) {
-        Frame st1 = myParser.findStack(myParser.activeStacks, recNode.recoverStack.state);
-        if(st1==null || recNode.parentStack ==null)
-            myParser.activeStacks.add(recNode.recoverStack);
-        else {
-            Link nl = st1.findDirectLink(recNode.parentStack);
-            Link oldLink = recNode.recoverStack.findDirectLink(recNode.parentStack);
-
-            if (nl == null) { //no need to handle ambiguity, just skip!?
-                nl = st1.addLink(recNode.parentStack, oldLink.label, oldLink.length);
-                nl.recoverCount = oldLink.recoverCount;
-            }
-        }
-    }    
-    
-}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/BacktrackPosition.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/BacktrackPosition.java	2010-01-08 12:40:18 UTC (rev 20488)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/BacktrackPosition.java	2010-01-08 12:45:38 UTC (rev 20489)
@@ -4,16 +4,26 @@
 
 import org.spoofax.ArrayDeque;
 
-public class BacktrackPosition extends ParserPosition {
+public class BacktrackPosition {
+    public final int tokensSeen;
     public final ArrayDeque<Frame> recoverStacks;
     public final ArrayList<RecoverNode> recoverNodes; 
-    public boolean isVisited;    
+    public boolean isVisited;
+    private int indexHistory;    
     
-    public BacktrackPosition( ArrayDeque<Frame> activeStacks, int tokSeen, int line, int col)
+    public int getIndexHistory() {
+        return indexHistory;
+    }
+    
+    public BacktrackPosition( ArrayDeque<Frame> activeStacks, int tokSeen)
     {
-        super(tokSeen, line, col);
+        tokensSeen=tokSeen;
         recoverStacks = new ArrayDeque<Frame>(activeStacks);        
         recoverNodes=new ArrayList<RecoverNode>();        
     }
 
+    public void setIndexHistory(int i) {
+        indexHistory=i;
+    }
+
 }

Deleted: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/CoarseGrainedRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/CoarseGrainedRecovery.java	2010-01-08 12:40:18 UTC (rev 20488)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/CoarseGrainedRecovery.java	2010-01-08 12:45:38 UTC (rev 20489)
@@ -1,106 +0,0 @@
-package org.spoofax.jsglr;
-
-import java.io.IOException;
-import java.util.ArrayList;
-
-/**
- * Assumption: a coarse-grained recover syntax is defined as grammar
- * Example: ~[\ \t\12\r\n]+ -> WATER  {avoid}, WATER    ClassBodyDecStar -> ClassBodyDecStar, ...
- * Algorithm: 
- * - During parsing: keep a set with parser states for recovering created by recover productions
- * - Recovering: Reset parser on last inserted recover candidate, continue parsing
- * @author maartje
- *
- */
-public class CoarseGrainedRecovery extends RecoverAlgorithm {
-
-    private final static int MAX_RECOVER_NODES = 160; //performance + protection against infinity    
-    
-    protected ArrayList<RecoverNode> recoverNodes; //candidates for recovery, accessed by backtracking
-        
-    /*
-     * Looks for recoveries, every attempt starts with the last inserted candidate
-     */
-    public CoarseGrainedRecovery()
-    {
-        super();
-        recoverNodes = new ArrayList<RecoverNode>();        
-    }
-    
-    //Set initial values
-    public void initialize(SGLR parser) {
-        super.initialize(parser);
-        recoverNodes.clear();
-    }
-
-    //Says wether the reovery nodes have to be parsed during normal parsing
-    public boolean haltsOnRecoverProduction(Frame st0) {
-        return true;
-    }
-
-    public void handleRecoverProduction(Frame st0, State s, int length,
-            int numberOfAvoids, IParseNode t) {
-        Frame st1 = createRecoverNode(st0, s, length, numberOfAvoids, t);
-        addRecoverNode(st1, st0);        
-    }    
-    
-    private void addRecoverNode(Frame st, Frame parent)
-    {
-        RecoverNode rn = new RecoverNode(st, myParser.tokensSeen, myParser.lineNumber, myParser.columnNumber, parent);
-        recoverNodes.add(rn);   
-        if(recoverNodes.size()>MAX_RECOVER_NODES) //removing early inserted positions improves non-error parsing performance
-        { 
-            final int halfMax = MAX_RECOVER_NODES/2;
-            ArrayList<RecoverNode> cleanedPositions = new ArrayList<RecoverNode>();
-            cleanedPositions.addAll(recoverNodes.subList(halfMax, recoverNodes.size()-1));                
-            recoverNodes=cleanedPositions;                
-        }
-    }   
-   
-    public boolean meetsRecoverCriteria() {
-        return myParser.acceptingStack == null && this.recoverNodes.size()>0;
-    }    
-    
-    
-    /*
-     * Sets parser on last inserted recovery node
-     * (non-Javadoc)
-     * @see org.spoofax.jsglr.IRecoverAlgorithm#prepareForRecovery()
-     */
-    protected void prepareForRecovery() throws IOException {
-        RecoverNode rn = recoverNodes.remove(recoverNodes.size()-1);        
-        tokenIndex = rn.tokensSeen-1;
-        tryReadRecoverToken();
-        setParserFields(rn);        
-        myParser.activeStacks.add(rn.recoverStack);        
-        while(recoverNodes.size()>0 && recoverNodes.get(recoverNodes.size()-1).tokensSeen==rn.tokensSeen)
-        {
-            RecoverNode rnLast = recoverNodes.remove(recoverNodes.size()-1); 
-            myParser.activeStacks.add(rnLast.recoverStack); 
-        }        
-        myParser.doParseStep(); //first recover step
-        Tools.debug("Recover Start: "+(char)myParser.currentToken);
-    }
-
-    /*
-     * Parses the recovery token list starting from a recovery node
-     * (non-Javadoc)
-     * @see org.spoofax.jsglr.IRecoverAlgorithm#doRecoverLoops()
-     */
-    protected void doRecoverLoops() throws IOException {
-        //do recovering till original position is reached
-        while(tokenIndex < recoverTokenCount && myParser.activeStacks.size()> 0) 
-        {            
-            tryReadRecoverToken();
-            myParser.updateParserFields(myParser.currentToken);            
-            myParser.doParseStep();                    
-            Tools.debug("Recover: "+(char)myParser.currentToken);
-        }        
-        if(myParser.activeStacks.size()==0 && meetsRecoverCriteria()){
-            prepareForRecovery(); //backtracks to unexplored recover node
-            doRecoverLoops();
-        }
-        
-    }        
-    
-}

Deleted: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/EofRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/EofRecovery.java	2010-01-08 12:40:18 UTC (rev 20488)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/EofRecovery.java	2010-01-08 12:45:38 UTC (rev 20489)
@@ -1,40 +0,0 @@
-package org.spoofax.jsglr;
-
-import java.io.IOException;
-import org.spoofax.ArrayDeque;
-
-public class EofRecovery {
-    
-    private static final int MAX_PARSE_STEPS=20;
-    private SGLR myParser;
-    
-    public EofRecovery(SGLR sglr){
-        myParser=sglr;
-    }
-    
-    public void enforceAccept(ArrayDeque<Frame> stackNodes) throws IOException { 
-        myParser.setEnforcePrefixAccept(true);
-        myParser.activeStacks.clear();
-        myParser.activeStacks.addAll(stackNodes);
-        myParser.currentToken = -1;
-        ArrayDeque<Frame> oldStacks=new ArrayDeque<Frame>();
-        oldStacks.addAll(myParser.activeStacks);
-        int nrOfSteps=0;
-        while (myParser.activeStacks.size()>0 && nrOfSteps<MAX_PARSE_STEPS) {
-            //logStackNodes();
-            myParser.doParseStep(); 
-            nrOfSteps++;
-            if(myParser.acceptingStack!=null)
-               break;            
-        }
-        myParser.setEnforcePrefixAccept(false); 
-    }
-    
-    private void logStackNodes() {
-        Tools.debug("------- Stack nodes:  ------");
-        for (Frame frame : myParser.activeStacks) {               
-            Tools.debug(frame.state.stateNumber);
-        }
-        Tools.debug("---------------------");
-    }
-}

Added: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedOnRegion.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedOnRegion.java	                        (rev 0)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedOnRegion.java	2010-01-08 12:45:38 UTC (rev 20489)
@@ -0,0 +1,151 @@
+package org.spoofax.jsglr;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+
+import org.spoofax.ArrayDeque;
+
+public class FineGrainedOnRegion {
+    private static final int MAX_RECOVERIES_PER_LINE = 3;
+    private static final int MAX_NR_OF_LINES = 25;
+    private int acceptRecoveryPosition;
+    private int regionStartPosition;
+    private int regionEndPosition;
+    private ArrayList<BacktrackPosition> choicePoints;
+    private SGLR mySGLR;
+    
+    private ParserHistory getHistory() {
+        return mySGLR.getHistory();
+    }
+   
+    public void setRegionInfo(StructureSkipSuggestion erroneousRegion, int acceptPosition){
+        regionStartPosition=erroneousRegion.getStartSkip().getTokensSeen();
+        regionEndPosition=erroneousRegion.getEndSkip().getTokensSeen();
+        acceptRecoveryPosition=acceptPosition;
+        int lastIndex=Math.min(erroneousRegion.getIndexHistoryEnd(), getHistory().getIndexLastLine());
+        if(lastIndex<0 || erroneousRegion.getIndexHistoryStart()<0 || erroneousRegion.getIndexHistoryStart()>erroneousRegion.getIndexHistoryEnd()){
+            System.err.println("Something went wrong with the region index");
+            return;
+        }            
+        for (int i = erroneousRegion.getIndexHistoryStart(); i < lastIndex; i++) {
+            IndentInfo line= getHistory().getLine(i);
+            if(line.getStackNodes()!=null && line.getStackNodes().size()>0){
+                BacktrackPosition btPoint=new BacktrackPosition(line.getStackNodes(), line.getTokensSeen());
+                btPoint.setIndexHistory(i);
+                choicePoints.add(btPoint);
+            }            
+        }        
+    }
+    
+    public boolean recover() throws IOException{
+       // System.out.println("FINE GRAINED RECOVERY STARTED");
+        mySGLR.setFineGrainedOnRegion(true);
+        boolean succeeded=recoverFrom(choicePoints.size()-1, new ArrayList<RecoverNode>());
+        mySGLR.setFineGrainedOnRegion(false);
+        return succeeded;
+    }
+    
+    private boolean recoverFrom(int indexCP, ArrayList<RecoverNode> candidates) throws IOException {
+        int loops=choicePoints.size()-1-indexCP;
+        if(indexCP<-1*MAX_RECOVERIES_PER_LINE)//first line 3 times explored
+            return false;
+        if(loops>MAX_NR_OF_LINES)//max nr of lines explored in backtracking
+            return false;
+        int indexChoichePoints=Math.max(0, indexCP);
+        BacktrackPosition btPosition=choicePoints.get(indexChoichePoints);
+        mySGLR.activeStacks.clear();
+        mySGLR.activeStacks.addAll(btPosition.recoverStacks);
+        getHistory().deleteLinesFrom(btPosition.getIndexHistory());
+        getHistory().setTokenIndex(btPosition.tokensSeen);
+        int endPos=regionEndPosition;
+        if(indexChoichePoints<choicePoints.size()-MAX_RECOVERIES_PER_LINE)
+            endPos=choicePoints.get(indexChoichePoints+MAX_RECOVERIES_PER_LINE).tokensSeen;        
+        ArrayList<RecoverNode> newCandidates=recoverParse(candidates, endPos, true);
+        if(mySGLR.activeStacks.size()>0 || mySGLR.acceptingStack!=null){
+            //if (loops<=MAX_RECOVERIES_PER_LINE) {
+                ///*
+                ArrayDeque<Frame> stacks = new ArrayDeque<Frame>();
+                stacks.addAll(mySGLR.activeStacks);
+                mySGLR.setFineGrainedOnRegion(false);
+                //extra set of recover stacks
+                mySGLR.activeStacks.clear();
+                mySGLR.activeStacks.addAll(btPosition.recoverStacks);
+                getHistory().setTokenIndex(btPosition.tokensSeen);
+                recoverParse(newCandidates, endPos, false);
+                for (Frame frame : stacks) {
+                    mySGLR.addStack(frame);
+                }
+            //}
+            //*/
+            return true;
+        }
+        return recoverFrom(indexCP-1, newCandidates);    
+    }
+
+    private ArrayList<RecoverNode> recoverParse(ArrayList<RecoverNode> candidates, int endRecoverSearchPos, boolean keepHistory) throws IOException {
+       // System.out.println("RECOVER PARSE");
+        ArrayList<RecoverNode> newCandidates=new ArrayList<RecoverNode>();
+        boolean firstRound=false;//true;
+        while(getHistory().getTokenIndex()<=acceptRecoveryPosition && mySGLR.acceptingStack==null){
+            int curTokIndex=getHistory().getTokenIndex();
+            addCurrentCandidates(candidates, curTokIndex);
+            getHistory().readRecoverToken(mySGLR, keepHistory);
+            mySGLR.doParseStep();
+            //char logToken=(char)mySGLR.currentToken;
+            //if(logToken==' '){logToken='^';}
+            //if(logToken==SGLR.EOF){logToken='$';}
+            //System.out.print(logToken);
+            if(curTokIndex<=endRecoverSearchPos && !firstRound){
+                int oldSize=newCandidates.size();
+                newCandidates.addAll(collectNewRecoverCandidates(curTokIndex));
+                //if(newCandidates.size()>oldSize)
+                  //  System.out.println("CANDIDATES: " + (newCandidates.size()-oldSize));
+            }
+            firstRound=false;
+            //if(getHistory().getTokenIndex()==endRecoverSearchPos)
+              //  System.out.print("@End Search@");
+            mySGLR.clearRecoverStacks();
+        }
+        //System.out.println("Nr. of candidates found: "+newCandidates.size());
+        return newCandidates;
+    }
+
+    private ArrayList<RecoverNode> collectNewRecoverCandidates(int tokenIndex) {
+        ArrayList<RecoverNode> results=new ArrayList<RecoverNode>();
+        for (Frame recoverStack : mySGLR.getRecoverStacks()) {
+            RecoverNode rn = new RecoverNode(recoverStack, tokenIndex);
+            results.add(rn);
+        }
+        return results;
+    }
+
+    private void addCurrentCandidates(ArrayList<RecoverNode> candidates, int tokenPosition) {
+        for (RecoverNode recoverNode : candidates) {//TODO: improve efficiency by using a sorted list
+            if(tokenPosition==recoverNode.tokensSeen){
+                //mySGLR.activeStacks.add(recoverNode.recoverStack);
+                mySGLR.addStack(recoverNode.recoverStack);
+                //System.out.println("Stack added, new count: "+ mySGLR.activeStacks.size());
+            }
+        }
+        
+    }
+
+    public FineGrainedOnRegion(SGLR parser){
+        mySGLR=parser;
+        choicePoints=new ArrayList<BacktrackPosition>();
+    }
+
+    public boolean parseRemainingTokens() throws IOException {
+        // TODO what if parsing fails here???
+        while(!getHistory().hasFinishedRecoverTokens() && mySGLR.activeStacks.size()>0 && mySGLR.acceptingStack==null){        
+            getHistory().readRecoverToken(mySGLR, true);
+            //System.out.print((char)mySGLR.currentToken);
+            mySGLR.doParseStep();            
+        }  
+        return mySGLR.activeStacks.size()>0 || mySGLR.acceptingStack!=null;
+        
+    }
+
+}

Deleted: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java	2010-01-08 12:40:18 UTC (rev 20488)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedRepair.java	2010-01-08 12:45:38 UTC (rev 20489)
@@ -1,272 +0,0 @@
-package org.spoofax.jsglr;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.spoofax.ArrayDeque;
-
-import aterm.ATerm;
-
-public class FineGrainedRepair {
-    
-    private static final int MAX_RECOVERIES_PER_REGION = 3;
-    
-    private static final int RECOVERY_COUNT_REGION_SIZE = 25;
-
-    private SGLR myParser;
-    private ArrayList<IndentInfo> newLinePoints; 
-    private int indexLineRecovery;
-    private IndentationDisambiguator indentComparer;
-    private int endRecovery;
-    
-    private ParserHistory getHistory() {
-        return myParser.getHistory();        
-    }
-    
-    public FineGrainedRepair(SGLR sglr){
-        myParser=sglr;  
-        myParser.setMaxNrOfRecoveries(MAX_RECOVERIES_PER_REGION);
-        myParser.setLengthAvoidCheck(RECOVERY_COUNT_REGION_SIZE);
-        newLinePoints=new ArrayList<IndentInfo>();
-        indexLineRecovery=-1;
-        indentComparer=new IndentationDisambiguator();
-        bpSuggestions=new HashMap<Integer, char[]>();
-    }
-    
-    public void findRecoverBranch(ArrayList<IndentInfo> lines, int endTokenIndex) throws IOException{
-        endRecovery=endTokenIndex;
-        indexLineRecovery=-1;
-        newLinePoints=lines;       
-        if(newLinePoints.size()==0)
-            return;         
-        myParser.setFineGrainedMode(true);       
-        myParser.activeStacks.clear();
-        if(getFirstBPSuggestPosition() > 0){
-            applyBridgeSuggestions(); 
-        }
-        //else if(searchIndentDeviation()){
-          //  recoverOnDeviatingLine();                
-        //}
-        if (recoveryNotSucceeded()) {
-            forwardRecovery();
-        }
-        myParser.setFineGrainedMode(false);
-    }
-
-    private void recoverOnDeviatingLine() throws IOException {
-        IndentInfo recoverLine = newLinePoints.get(indexLineRecovery); 
-        setParserForRecovery(recoverLine);            
-        myParser.setFineGrainedMode(false);
-        getHistory().readRecoverToken(myParser, false);            
-        myParser.doParseStep();            
-        myParser.setFineGrainedMode(true);
-        if(indexLineRecovery<newLinePoints.size()-1){
-            IndentInfo nextLine = newLinePoints.get(indexLineRecovery+1); 
-            recoverLineAndContinueParse(false, nextLine.getTokensSeen()+1);
-        }
-        else
-            recoverLineAndContinueParse(true, endRecovery);
-    }
-
-    private void applyBridgeSuggestions() throws IOException {
-        removeLinesAfterFirstBP();
-        IndentInfo recoverLine = newLinePoints.get(newLinePoints.size()-1); 
-        setParserForRecovery(recoverLine);  
-        myParser.setFineGrainedMode(false);
-        handleBPPriorSuggestions();
-        recoverLineAndContinueParse(true, endRecovery);
-    }
-
-    private void forwardRecovery() throws IOException {
-        if(lastLineRecovered())
-            return;    
-        setIndexOnLastLine();
-        IndentInfo recoverLine = newLinePoints.get(indexLineRecovery);         
-        setParserForRecovery(recoverLine);  
-        myParser.setFineGrainedMode(true);
-        recoverLineAndContinueParse(true, endRecovery);                
-        if(recoveryNotSucceeded())
-            forwardRecovery();        
-    }
-
-    private boolean recoveryNotSucceeded() {
-        // TODO Auto-generated method stub
-        return myParser.activeStacks.size()==0;
-    }
-
-    private void setIndexOnLastLine() {             
-        if(newLinePoints.size()>1 && indexLineRecovery < newLinePoints.size()-2)
-            indexLineRecovery= newLinePoints.size()-2;
-        else
-            indexLineRecovery = newLinePoints.size()-1;
-    }
-    
-    private void recoverLineAndContinueParse(boolean recoverEndOnNewLine, int lastRecoverToken) throws IOException{
-        //Tools.debug("Enter recoverLineAndContinueParse");
-        while (myParser.activeStacks.size() > 0 && !getHistory().hasFinishedRecoverTokens()){
-            handleBPSuggestions();
-            getHistory().readRecoverToken(myParser, false);            
-            Tools.debug((char)myParser.currentToken + "  ("+getHistory().getTokenIndex()+")");  
-            //myParser.logRecoverSituation();
-            myParser.doParseStep();            
-            if(myParser.currentToken=='\n'){
-                if(recoverEndOnNewLine){                   
-                    myParser.setFineGrainedMode(false);
-                }
-                if(getHistory().getTokenIndex() > getLastNewLinePoint().getTokensSeen() && (getHistory().getTokenIndex() <= endRecovery)){
-                    AddNewLinePoint();
-                }                
-            }
-            if(getHistory().getTokenIndex() > lastRecoverToken+1){                 
-                myParser.setFineGrainedMode(false);
-            }                 
-        }
-        myParser.setFineGrainedMode(false);
-    }
-    
-    private void AddNewLinePoint() {
-        // TODO Auto-generated method stub
-        IndentInfo newLinePoint = new IndentInfo(-1, getHistory().getTokenIndex(), -1);
-        newLinePoint.fillStackNodes(myParser.activeStacks);
-        newLinePoints.add(newLinePoint);        
-    }
-    
-    private IndentInfo getLastNewLinePoint() {
-        IndentInfo recoverStart;
-        recoverStart= newLinePoints.get(newLinePoints.size()-1);
-        return recoverStart;
-    }
-    
-    private void setParserForRecovery(IndentInfo recoverStart) {        
-        myParser.activeStacks.addAll(recoverStart.getStackNodes());
-        //myParser.setRecoverStartPos(recoverStart.getTokensSeen());
-        getHistory().setTokenIndex(recoverStart.getTokensSeen());
-    }
-
-    private boolean searchIndentDeviation() {
-        if (newLinePoints.size()<2)
-            return false;        
-        int startTok=newLinePoints.get(0).getTokensSeen();
-        for (int i = 1; i < newLinePoints.size(); i++) {
-            IndentInfo line =newLinePoints.get(i);            
-            if(line.structureStartPosition()>startTok){            
-                Link lnk = line.getReductionLink();
-                if(lnk!=null){                    
-                    IParseNode pNode =lnk.label;
-                    if(pNode!=null){
-                        ATerm t = pNode.toParseTree(myParser.getParseTable());                    
-                        int beginIndent = findBeginIndent(line);                    
-                        indentComparer.evaluateIndentation(t, beginIndent);
-                        int devValue=indentComparer.getIndentDeviationListElements();
-                        if(devValue>0){
-                            int errorLineIndex=findIndexLine(line.structureStartPosition() + indentComparer.getPosFirstErrorListElement());
-                            //debugErrorLine(line, beginIndent, devValue, errorLineIndex);
-                            indexLineRecovery=errorLineIndex;
-                            return true;
-                        }
-                    }
-                }
-            }
-        }
-        return false;
-    }
-
-    private void debugErrorLine(IndentInfo line, int beginIndent, int devValue,
-            int errorLineIndex) {
-        IndentInfo errorLine = newLinePoints.get(errorLineIndex);
-        Tools.debug("Start-Indent: "+ beginIndent);
-        Tools.debug("Indent: "+ line.getIndentValue());
-        Tools.debug("Line: "+ line.getLineNumber());
-        Tools.debug("Score: "+devValue);
-        Tools.debug("Error-Line: "+ errorLine.getLineNumber());                
-        //Tools.debug(t);
-    }
-    
-    private int findBeginIndent(IndentInfo indInf){ 
-        int i = findIndexLine(indInf.structureStartPosition());
-        if(i>=0)
-            return newLinePoints.get(i).getIndentValue();
-        return -1;
-    }
-    
-    private int findIndexLine(int tokPos){        
-        for (int i = newLinePoints.size()-1; i >= 0; i--) {
-            IndentInfo lineInList=newLinePoints.get(i);
-            if(lineInList.getTokensSeen()<= tokPos)
-                return i;
-        }        
-        return -1;
-    }
-
-    private boolean lastLineRecovered() {        
-        return indexLineRecovery>=newLinePoints.size()-1;
-    }   
-    
-    //$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ BP Integration &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
-    
-        
-    private Map<Integer, char[]> bpSuggestions;
-    
-    public void setBpSuggestions(Map<Integer, char[]> bpSuggestions) {
-        this.bpSuggestions = bpSuggestions;
-    }
-
-    private void removeLinesAfterFirstBP() {
-        int nextBPPos = getFirstBPSuggestPosition();
-        if(nextBPPos >= 0){
-            while (newLinePoints.size()>1) {
-                if(newLinePoints.get(newLinePoints.size()-1).getTokensSeen()>=nextBPPos){
-                    newLinePoints.remove(newLinePoints.size()-1);
-                }
-                else
-                    break;
-            }
-        }
-    }
-    
-    private int getFirstBPSuggestPosition(){
-        int result = -1;
-        for (Integer aKey : bpSuggestions.keySet()) {
-            int keyValue = aKey.intValue();
-            if(result ==-1 || keyValue<result)
-                result = keyValue;
-        }
-        return result;
-    }  
-      
-    private void handleBPSuggestions() throws IOException{
-        Integer tokIndex=new Integer(getHistory().getTokenIndex());
-        if(bpSuggestions.containsKey(tokIndex)){
-            //Tools.debug((char)myParser.currentToken);
-            processBPSuggestions(tokIndex);
-        }
-    }
-
-    private void processBPSuggestions(Integer tokIndex) throws IOException {
-        char[] insertions = bpSuggestions.get(tokIndex);
-        for (int i = 0; i < insertions.length; i++) {
-            ArrayDeque<Frame> oldAct = new ArrayDeque<Frame>();
-            oldAct.addAll(myParser.activeStacks);
-            myParser.currentToken = insertions[i];
-            myParser.doParseStep();
-            myParser.activeStacks.addAll(oldAct);
-            Tools.debug("BP-Insertion: "+ insertions[i]);
-        }
-    }
-    
-    private void handleBPPriorSuggestions() throws IOException{
-        if(newLinePoints.size()!=1)
-            return;
-        int firstRecoverPos=newLinePoints.get(0).getTokensSeen();   
-        int firstBPSuggestion=getFirstBPSuggestPosition();
-        if(-1 < firstBPSuggestion && firstBPSuggestion < firstRecoverPos){            
-            processBPSuggestions(new Integer(firstBPSuggestion));
-        }
-    }
-    
-    boolean isWhiteSpace(char c){
-        return c==' ' || c=='\t'|| c=='\n';
-    }
-}

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Frame.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Frame.java	2010-01-08 12:40:18 UTC (rev 20488)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Frame.java	2010-01-08 12:45:38 UTC (rev 20489)
@@ -108,6 +108,14 @@
         return null;
     }   
     
+    public ArrayList<Link> getAllLinks() {
+        ArrayList<Link> links=new ArrayList<Link>();
+        for (int i = 0; i < stepsCount; i++) {
+            links.add(steps[i]);
+        }        
+        return links;
+    }   
+    
 
     public Link addLink(Frame st0, IParseNode n, int length) {
         if(Tools.tracing) {

Deleted: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java	2010-01-08 12:40:18 UTC (rev 20488)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IStructureSkipper.java	2010-01-08 12:45:38 UTC (rev 20489)
@@ -1,44 +0,0 @@
-package org.spoofax.jsglr;
-
-import java.io.IOException;
-import java.util.ArrayList;
-
-public interface IStructureSkipper {
-
-    ParserHistory getHistory();
-    
-    public abstract void setFailureIndex(int failureIndex);
-
-    public abstract void clear();
-
-    public abstract StructureSkipSuggestion getErroneousPrefix()
-            throws IOException;
-
-    public abstract ArrayList<StructureSkipSuggestion> getCurrentSkipSuggestions()
-            throws IOException;
-
-    public abstract ArrayList<StructureSkipSuggestion> getPreviousSkipSuggestions()
-            throws IOException;
-
-    public abstract ArrayList<StructureSkipSuggestion> getPriorSkipSuggestions()
-            throws IOException;
-
-    public abstract ArrayList<StructureSkipSuggestion> getParentSkipSuggestions()
-            throws IOException;
-
-    public abstract ArrayList<StructureSkipSuggestion> getSibblingForwardSuggestions()
-            throws IOException;
-
-    public abstract ArrayList<StructureSkipSuggestion> getSibblingBackwardSuggestions()
-            throws IOException;
-
-    public abstract ArrayList<StructureSkipSuggestion> getSibblingSurroundingSuggestions()
-            throws IOException;
-
-    public abstract ArrayList<StructureSkipSuggestion> getZoomOnPreviousSuggestions(
-            StructureSkipSuggestion prevRegion) throws IOException;
-
-    public abstract ArrayList<StructureSkipSuggestion> getPickErroneousChild(
-            StructureSkipSuggestion prevRegion) throws IOException;
-
-}
\ No newline at end of file

Deleted: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentationDisambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentationDisambiguator.java	2010-01-08 12:40:18 UTC (rev 20488)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentationDisambiguator.java	2010-01-08 12:45:38 UTC (rev 20489)
@@ -1,235 +0,0 @@
-package org.spoofax.jsglr;
-

(1696 diff lines omitted)


From L.C.L.Kats at tudelft.nl  Fri Jan  8 13:55:21 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Jan 2010 12:55:21 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20490 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.stratego/trans
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building
Message-ID: <201001081255.o08CtLfS017694@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-08 12:55:21 +0000 (Fri, 08 Jan 2010)
New Revision: 20490

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20490&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-08 12:45:38 UTC (rev 20489)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-08 12:55:21 UTC (rev 20490)
@@ -17,9 +17,11 @@
         ProjectDir  := project-path
       );
       if <file-exists> $[[project-path]/.disable-global-analysis] then
+        <debug(!"analysis disabled: ")> project-path;
         rules(NoAnalysis: _)
       end;
       if <file-exists> $[[project-path]/.warn-global-analysis] then
+        <debug(!"analysis limited to warnings only: ")> project-path;
         rules(WarnAnalysis: _)
       end
     with
@@ -28,7 +30,7 @@
       ast' := <analyze-ast-local>
  
   analyze-ast-local =
-    if not(NoAnalysis) then
+    if not(NoAnalysis) then // TODO: only do this if no analysis done before
       declare-globals-top
     end;
     declare-bodies-top => ast';
@@ -178,7 +180,6 @@
       dr-ignore-state(
         <import-library> x;
         declare-globals-top;
-        with(<debug> ("missing1:", x, <bagof-MissingImports>));
         rules(
           MissingIndirectImports: x -> <bagof-MissingImports>
         )
@@ -186,7 +187,6 @@
         <try(resolve-import-path)> $[[x].str];
         (import-from-cache <+ import-rtree <+ import-str);
         declare-globals-top;
-        with(<debug> ("missing2:", x, <bagof-MissingImports>));
         rules(
           MissingIndirectImports: x -> <bagof-MissingImports>
         )
@@ -508,8 +508,10 @@
 
   declare-bodies-svar:
     CallT(SVar(x), [], []) -> CallT(SVar(x'), [], [])
-    with
-      x' := x{<declare-cookie-of <+ !"unknown">} // always allow in case of higher-order args
+    where
+      x' := x{<declare-cookie-of>}
+    <+
+      fail // TODO: special exception for higher-order args
 
   declare-bodies:
     Op(x, t*) -> Op(x', t'*)
@@ -584,30 +586,12 @@
     CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' not defined])
     where
       require(is-declared)
-    where
-      not(MissingImports)
 
   global-constraint-error:
     Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
     where
       require(is-declared)
-    where
-      not(MissingImports)
 
-  global-constraint-warning:
-    CallT(SVar(x), s*, t*) -> (x, $[Strategy or rule '[x]' not defined])
-    where
-      require(is-declared)
-    where
-      MissingImports
-
-  global-constraint-warning:
-    Op(x, t*) -> (x, $[Constructor [x]/[<length> t*] not declared])
-    where
-      require(is-declared)
-    where
-      MissingImports
-
   constraint-error:
     Var(x) -> (x, $[Variable '[x]' is not declared])
     where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2010-01-08 12:45:38 UTC (rev 20489)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	2010-01-08 12:55:21 UTC (rev 20490)
@@ -24,7 +24,7 @@
         errors   := <collect-all(constraint-error, conc)> ast';
         warnings := <collect-all(constraint-warning, conc)> ast'
       else
-        if WarnAnalysis then
+        if WarnAnalysis + MissingImports then
           errors   := <collect-all(constraint-error, conc)> ast';
           warnings := <collect-all(global-constraint-error + constraint-warning, conc)> ast'
         else

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2010-01-08 12:45:38 UTC (rev 20489)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/building/DynamicDescriptorBuilder.java	2010-01-08 12:55:21 UTC (rev 20490)
@@ -236,7 +236,7 @@
 
 		if (!(includeDir instanceof IContainer && editorDir instanceof IContainer))
 			throw new IOException("/include and /editor directories must exist");
-
+		
 		if (!includeDir.isDerived()) {
 			includeDir.setDerived(true);
 			for (IResource member : ((IContainer) includeDir).members()) {
@@ -250,7 +250,7 @@
 				buildFile.setDerived(true);
 		}
 		
-		if (cacheDir.exists()) cacheDir.setDerived(true);
+		if (cacheDir != null && cacheDir.exists()) cacheDir.setDerived(true);
 	}
 	
 	public IResource getTargetDescriptor(IResource mainDescriptor) {



From L.C.L.Kats at tudelft.nl  Fri Jan  8 14:18:29 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Jan 2010 13:18:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20491 - LennartKats -
	in spoofax-imp/trunk:
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201001081318.o08DIT5S018122@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-08 13:18:29 +0000 (Fri, 08 Jan 2010)
New Revision: 20491

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20491&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/StandAloneSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java

Log:
Changed to use the new JSGLR interfaces

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java	2010-01-08 12:55:21 UTC (rev 20490)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java	2010-01-08 13:18:29 UTC (rev 20491)
@@ -14,7 +14,6 @@
 import org.spoofax.jsglr.NoRecoveryRulesException;
 import org.spoofax.jsglr.ParseTable;
 import org.spoofax.jsglr.SGLRException;
-import org.spoofax.jsglr.StructureRecoveryAlgorithm;
 import org.strategoxt.imp.editors.stratego.StrategoSugarParseController;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
@@ -64,7 +63,7 @@
 		try {
 			Language strategoSugar = LanguageRegistry.findLanguage(StrategoSugarParseController.LANGUAGE);
 			JSGLRI parser = new JSGLRI(Environment.getParseTable(strategoSugar), "Module");
-			if (parser.getParseTable().hasRecovers()) parser.setRecoverHandler(new StructureRecoveryAlgorithm());
+			if (parser.getParseTable().hasRecovers()) parser.setUseRecovery(true);
 			return parser;
 		} catch (NoRecoveryRulesException e) {
 			throw new StrategoException("Could not load stratego parse table", e);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2010-01-08 12:55:21 UTC (rev 20490)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2010-01-08 13:18:29 UTC (rev 20491)
@@ -8,10 +8,8 @@
 import org.spoofax.jsglr.BadTokenException;
 import org.spoofax.jsglr.Disambiguator;
 import org.spoofax.jsglr.FilterException;
-import org.spoofax.jsglr.NoRecovery;
 import org.spoofax.jsglr.NoRecoveryRulesException;
 import org.spoofax.jsglr.ParseTable;
-import org.spoofax.jsglr.RecoverAlgorithm;
 import org.spoofax.jsglr.SGLR;
 import org.spoofax.jsglr.SGLRException;
 import org.spoofax.jsglr.TokenExpectedException;
@@ -29,7 +27,7 @@
 	
 	private ParseTable parseTable;
 	
-	private RecoverAlgorithm recoverHandler = new NoRecovery();
+	private boolean useRecovery = false;
 	
 	private SGLR parser;
 	
@@ -58,11 +56,11 @@
 	}
 	
 	/**
-	 * @see SGLR#setRecoverHandler(RecoverAlgorithm)
+	 * @see SGLR#setUseStructureRecovery(boolean)
 	 */
-	public void setRecoverHandler(RecoverAlgorithm recoverHandler) throws NoRecoveryRulesException {
-		this.recoverHandler = recoverHandler;
-		parser.setRecoverHandler(recoverHandler);
+	public void setUseRecovery(boolean useRecovery) throws NoRecoveryRulesException {
+		this.useRecovery = useRecovery;
+		parser.setUseStructureRecovery(useRecovery);
 	}
 	
 	public ParseTable getParseTable() {
@@ -97,7 +95,7 @@
 		if (disambiguator != null) parser.setDisambiguator(disambiguator);
 		else disambiguator = parser.getDisambiguator();
 		try {
-			parser.setRecoverHandler(recoverHandler);
+			setUseRecovery(useRecovery);
 		} catch (NoRecoveryRulesException e) {
 			// Already handled/logged this error in setRecoverHandler()
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-01-08 12:55:21 UTC (rev 20490)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-01-08 13:18:29 UTC (rev 20491)
@@ -33,7 +33,6 @@
 import org.spoofax.jsglr.ParseTimeoutException;
 import org.spoofax.jsglr.SGLRException;
 import org.spoofax.jsglr.StartSymbolException;
-import org.spoofax.jsglr.StructureRecoveryAlgorithm;
 import org.spoofax.jsglr.TokenExpectedException;
 import org.spoofax.jsglr.Tools;
 import org.strategoxt.imp.runtime.Debug;
@@ -174,7 +173,7 @@
 		parser = new JSGLRI(table, startSymbol, this, tokenManager);
 		parser.setKeepAmbiguities(true);
 		try {
-			parser.setRecoverHandler(new StructureRecoveryAlgorithm());
+			parser.setUseRecovery(true);
 		} catch (NoRecoveryRulesException e) {
 			Environment.logException("No recovery rules available for " + language.getName() + " editor", e);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/StandAloneSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/StandAloneSGLRI.java	2010-01-08 12:55:21 UTC (rev 20490)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/StandAloneSGLRI.java	2010-01-08 13:18:29 UTC (rev 20491)
@@ -9,7 +9,6 @@
 import org.spoofax.jsglr.InvalidParseTableException;
 import org.spoofax.jsglr.NoRecoveryRulesException;
 import org.spoofax.jsglr.ParseTable;
-import org.spoofax.jsglr.RecoverAlgorithm;
 import org.spoofax.jsglr.SGLRException;
 import org.spoofax.jsglr.TokenExpectedException;
 import org.strategoxt.imp.runtime.Environment;
@@ -41,9 +40,9 @@
 		}
 	}
 	
-	public void setRecoverHandler(RecoverAlgorithm recoverHandler) throws NoRecoveryRulesException {
+	public void setUseRecovery(boolean useRecovery) throws NoRecoveryRulesException {
 		if (parser instanceof JSGLRI) {
-			((JSGLRI) parser).setRecoverHandler(recoverHandler);
+			((JSGLRI) parser).setUseRecovery(useRecovery);
 		} else {
 			throw new UnsupportedOperationException("C-SGLR does not support error recovery");
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java	2010-01-08 12:55:21 UTC (rev 20490)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPParseStringPTPrimitive.java	2010-01-08 13:18:29 UTC (rev 20491)
@@ -12,7 +12,6 @@
 import org.spoofax.jsglr.NoRecoveryRulesException;
 import org.spoofax.jsglr.ParseTable;
 import org.spoofax.jsglr.SGLRException;
-import org.spoofax.jsglr.StructureRecoveryAlgorithm;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
 import org.strategoxt.lang.LazyTerm;
@@ -52,7 +51,7 @@
 		String path = getLastPath();		
 		JSGLRI parser = new JSGLRI(table, startSymbol);
 		try {
-			parser.setRecoverHandler(new StructureRecoveryAlgorithm());
+			parser.setUseRecovery(true);
 		} catch (NoRecoveryRulesException e) {
 			if (!isNoRecoveryWarned.containsKey(table)) {
 				Environment.logException(NAME + ": warning - no recovery rules available in parse table", e);



From m.dejonge at tudelft.nl  Fri Jan  8 14:31:16 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 08 Jan 2010 13:31:16 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20492 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001081331.o08DVGCa018258@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2010-01-08 13:31:16 +0000 (Fri, 08 Jan 2010)
New Revision: 20492

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20492&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java

Log:
bug

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2010-01-08 13:18:29 UTC (rev 20491)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2010-01-08 13:31:16 UTC (rev 20492)
@@ -61,6 +61,9 @@
                 }
             }
         }
+        else if(tokenIndex<0 || tokenIndex>recoverTokenCount){
+            System.err.println("Unexpected token index"+tokenIndex);
+        }
         else{
             myParser.currentToken = recoverTokenStream[tokenIndex];
             if(keepRecoveredLines){



From L.C.L.Kats at tudelft.nl  Fri Jan  8 14:42:59 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Jan 2010 13:42:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20493 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001081342.o08Dgxmu018337@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-08 13:42:59 +0000 (Fri, 08 Jan 2010)
New Revision: 20493

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20493&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2010-01-08 13:31:16 UTC (rev 20492)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2010-01-08 13:42:59 UTC (rev 20493)
@@ -13,7 +13,7 @@
     private SGLR myParser;    
     private StructureSkipSuggestion erroneousRegion;    
     private int errorDetectionLocation;
-    private static int NR_OF_LINES_TILL_SUCCESS=3;
+    public static int NR_OF_LINES_TILL_SUCCESS=3;
     private int acceptPosition;
 
     public int getAcceptPosition() {        

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-01-08 13:31:16 UTC (rev 20492)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-01-08 13:42:59 UTC (rev 20493)
@@ -113,7 +113,7 @@
     
     /* START: FINE GRAINED ON REGION */
     private boolean fineGrainedOnRegion;
-    public void setFineGrainedOnRegion(boolean fineGrainedMode) {
+    protected void setFineGrainedOnRegion(boolean fineGrainedMode) {
         fineGrainedOnRegion=fineGrainedMode;
         recoverStacks=new ArrayDeque<Frame>();
     }
@@ -127,7 +127,7 @@
         return recoverStacks;
     }
 
-    public void setUseFineGrained(boolean useFG) {
+    protected void setUseFineGrained(boolean useFG) {
         recoverIntegrator.setUseFineGrained(useFG);        
     }
     /* END: FINE GRAINED ON REGION */
@@ -160,7 +160,6 @@
      * Structure-based recovery without bridge parsing.
      * 
     */
-    @Deprecated
     public final void setUseStructureRecovery(boolean useRecovery) throws NoRecoveryRulesException {        
         setUseStructureRecovery(useRecovery, null);
     }



From L.C.L.Kats at tudelft.nl  Fri Jan  8 14:43:34 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Jan 2010 13:43:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20494 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <201001081343.o08DhYSJ018343@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-08 13:43:34 +0000 (Fri, 08 Jan 2010)
New Revision: 20494

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20494&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-08 13:42:59 UTC (rev 20493)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-08 13:43:34 UTC (rev 20494)
@@ -87,7 +87,7 @@
          id="org.spoofax.jsglr"
          download-size="0"
          install-size="0"
-         version="0.2.1.qualifier"
+         version="0.2.2.qualifier"
          unpack="false"/>
 
    <plugin



From L.C.L.Kats at tudelft.nl  Fri Jan  8 16:30:30 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Jan 2010 15:30:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20495 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <201001081530.o08FUUE5019828@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-08 15:30:30 +0000 (Fri, 08 Jan 2010)
New Revision: 20495

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20495&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Log:
Mac case-insensitive file system fix.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2010-01-08 13:43:34 UTC (rev 20494)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	2010-01-08 15:30:30 UTC (rev 20495)
@@ -318,6 +318,7 @@
                 <arg line="${externaljarflags}"/>
                 <arg line="${externaldefimport}"/>
             </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
             <mkdir dir="${build}/trans"/>
         </target>
                 



From L.C.L.Kats at tudelft.nl  Fri Jan  8 16:38:14 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 08 Jan 2010 15:38:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20496 - LennartKats -
	in spoofax-imp/trunk/org.strategoxt.imp.editors.stratego:
	editor trans
Message-ID: <201001081538.o08FcEw3019912@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-08 15:38:14 +0000 (Fri, 08 Jan 2010)
New Revision: 20496

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20496&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Log:
Congruence error fix

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-08 15:30:30 UTC (rev 20495)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-08 15:38:14 UTC (rev 20496)
@@ -17,6 +17,7 @@
   completion trigger : "\n ?<"
   completion trigger : "!"
   completion trigger : "\?"
+  completion trigger : "\{\| "
   // completion trigger : ":= [A-Za-z]" // may not always work
 */
                                                                                    

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-08 15:30:30 UTC (rev 20495)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-08 15:38:14 UTC (rev 20496)
@@ -96,6 +96,8 @@
 
   declare-cookie-of =
     signature-of; DeclareCookie
+  <+
+    signature-of-congruence; DeclareCookie
 
   declaration-of =
     signature-of; (?_{<Declaration>} <+ ?(_{<Declaration>}, _) <+ ?(_{<Declaration>}, _, _))
@@ -434,8 +436,8 @@
   declare-bodies:
     LabeledDynRuleScopeId(x, t) -> LabeledDynRuleScopeId(x', t')
     where
-      x' := x{<declare-cookie-of>}; 
-      t' := <declare-bodies-top> t 
+      x' := x{<signature-of; DeclareCookie>}; 
+      t' := <declare-bodies-top> t
 
   declare-bodies:
     Assign(t1, t2) -> Assign(t1', t2')



From L.C.L.Kats at tudelft.nl  Mon Jan 11 11:51:25 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 11 Jan 2010 10:51:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20497 - LennartKats -
	strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr
Message-ID: <201001111051.o0BApPDv019023@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-11 10:51:25 +0000 (Mon, 11 Jan 2010)
New Revision: 20497

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20497&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse-table.str
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str

Log:
Really fixed bogus parse table error now.

Changes:

Modified: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse-table.str
===================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse-table.str	2010-01-08 15:38:14 UTC (rev 20496)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse-table.str	2010-01-11 10:51:25 UTC (rev 20497)
@@ -27,6 +27,7 @@
     MemoOpenParseTable
   <+
     ?trm
+    ; not(?ParseTable(_))
     ; open-parse-table => tbl
     ; rules(MemoOpenParseTable : trm -> tbl)
 

Modified: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str
===================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str	2010-01-08 15:38:14 UTC (rev 20496)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str	2010-01-11 10:51:25 UTC (rev 20497)
@@ -128,7 +128,7 @@
     parse-stream-pt(on-parse-error | tbl, start-symbol, "stream")
     
   parse-stream-pt(on-parse-error | tbl, start-symbol, path) =
-    where(<try(not(?ParseTable(_)); memo-open-parse-table)> tbl => ParseTable(internal-tbl))
+    where(<try(memo-open-parse-table)> tbl => ParseTable(internal-tbl))
     ; ?Stream(stream)
     ; prim("STRSGLR_parse_stream_pt", on-parse-error | stream, internal-tbl, start-symbol, path)
 



From L.C.L.Kats at tudelft.nl  Mon Jan 11 16:42:23 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 11 Jan 2010 15:42:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20498 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr
Message-ID: <201001111542.o0BFgNlH023004@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-11 15:42:23 +0000 (Mon, 11 Jan 2010)
New Revision: 20498

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20498&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/.project

Log:
fixed JSGLR project name

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/.project
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/.project	2010-01-11 10:51:25 UTC (rev 20497)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/.project	2010-01-11 15:42:23 UTC (rev 20498)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>org.spoofax.jsglr [spoofax-recovery branch]</name>
+	<name>org.spoofax.jsglr</name>
 	<comment></comment>
 	<projects>
 	</projects>



From L.C.L.Kats at tudelft.nl  Tue Jan 12 11:35:29 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 12 Jan 2010 10:35:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20499 - LennartKats -
	in spoofax-imp/trunk: org.eclipse.imp
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201001121035.o0CAZTIp008919@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-12 10:35:29 +0000 (Tue, 12 Jan 2010)
New Revision: 20499

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20499&view=rev

Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:
Fixed nullpointer exception when showing annotations

Changes:

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-11 15:42:23 UTC (rev 20498)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-12 10:35:29 UTC (rev 20499)
@@ -286,7 +286,7 @@
 +		if (annotations == null) return;
 +		for (Iterator<Annotation> iter = annotations.iterator(); iter.hasNext(); ) {
 +    		Annotation annotation = iter.next();
-+    		if (annotation instanceof ILineDiffInfo)
++    		if (annotation.getText() == null || annotation instanceof ILineDiffInfo)
 +    			iter.remove();
 +    	}
 +	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java	2010-01-11 15:42:23 UTC (rev 20498)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/AnnotationHover.java	2010-01-12 10:35:29 UTC (rev 20499)
@@ -39,7 +39,7 @@
 		if (annotations == null) return;
 		for (Iterator<Annotation> iter = annotations.iterator(); iter.hasNext(); ) {
     		Annotation annotation = iter.next();
-    		if (annotation instanceof ILineDiffInfo)
+    		if (annotation.getText() == null || annotation instanceof ILineDiffInfo)
     			iter.remove();
     	}
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-11 15:42:23 UTC (rev 20498)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-12 10:35:29 UTC (rev 20499)
@@ -1,7 +1,8 @@
 package org.strategoxt.imp.runtime.services;
 
-import static org.spoofax.interpreter.core.Tools.*;
-import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+import static org.spoofax.interpreter.core.Tools.termAt;
+import static org.spoofax.interpreter.terms.IStrategoTerm.LIST;
+import static org.spoofax.interpreter.terms.IStrategoTerm.TUPLE;
 
 import java.io.File;
 import java.io.IOException;
@@ -205,7 +206,7 @@
 		try {
 			URL[] classpath = new URL[jars.size()];
 			for (int i = 0; i < classpath.length; i++) {
-				classpath[i] = descriptor.getBasePath().append(jars.get(i)).toFile().toURL();
+				classpath[i] = descriptor.getBasePath().append(jars.get(i)).toFile().toURI().toURL();
 			}
 			runtime.loadJars(classpath);
 		} catch (SecurityException e) {



From L.C.L.Kats at tudelft.nl  Tue Jan 12 11:35:33 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 12 Jan 2010 10:35:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20500 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.aterm
	org.strategoxt.imp.editors.editorservice
	org.strategoxt.imp.editors.sdf org.strategoxt.imp.editors.stratego
Message-ID: <201001121035.o0CAZXUd008922@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-12 10:35:33 +0000 (Tue, 12 Jan 2010)
New Revision: 20500

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20500&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	2010-01-12 10:35:29 UTC (rev 20499)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/build.generated.xml	2010-01-12 10:35:33 UTC (rev 20500)
@@ -243,6 +243,7 @@
                 <arg line="${externaljarflags}"/>
                 <arg line="${externaldefimport}"/>
             </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
             <mkdir dir="${build}/trans"/>
         </target>
                 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml	2010-01-12 10:35:29 UTC (rev 20499)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/build.generated.xml	2010-01-12 10:35:33 UTC (rev 20500)
@@ -243,6 +243,7 @@
                 <arg line="${externaljarflags}"/>
                 <arg line="${externaldefimport}"/>
             </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
             <mkdir dir="${build}/trans"/>
         </target>
                 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	2010-01-12 10:35:29 UTC (rev 20499)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.sdf/build.generated.xml	2010-01-12 10:35:33 UTC (rev 20500)
@@ -243,6 +243,7 @@
                 <arg line="${externaljarflags}"/>
                 <arg line="${externaldefimport}"/>
             </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
             <mkdir dir="${build}/trans"/>
         </target>
                 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	2010-01-12 10:35:29 UTC (rev 20499)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/build.generated.xml	2010-01-12 10:35:33 UTC (rev 20500)
@@ -243,6 +243,7 @@
                 <arg line="${externaljarflags}"/>
                 <arg line="${externaldefimport}"/>
             </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
             <mkdir dir="${build}/trans"/>
         </target>
                 



From m.dejonge at tudelft.nl  Tue Jan 12 14:05:35 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 12 Jan 2010 13:05:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20501 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001121305.o0CD5ZJT011250@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2010-01-12 13:05:34 +0000 (Tue, 12 Jan 2010)
New Revision: 20501

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20501&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedOnRegion.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentInfo.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java

Log:
- block comment region recovery

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedOnRegion.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedOnRegion.java	2010-01-12 10:35:33 UTC (rev 20500)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/FineGrainedOnRegion.java	2010-01-12 13:05:34 UTC (rev 20501)
@@ -15,6 +15,7 @@
     private int regionEndPosition;
     private ArrayList<BacktrackPosition> choicePoints;
     private SGLR mySGLR;
+    private int maxPerLine;
     
     private ParserHistory getHistory() {
         return mySGLR.getHistory();
@@ -36,7 +37,11 @@
                 btPoint.setIndexHistory(i);
                 choicePoints.add(btPoint);
             }            
-        }        
+        } 
+        maxPerLine=MAX_RECOVERIES_PER_LINE;
+        if(erroneousRegion.getIndexHistoryEnd()-erroneousRegion.getIndexHistoryStart()==1){
+            maxPerLine=2;            
+        }
     }
     
     public boolean recover() throws IOException{
@@ -47,9 +52,9 @@
         return succeeded;
     }
     
-    private boolean recoverFrom(int indexCP, ArrayList<RecoverNode> candidates) throws IOException {
+    private boolean recoverFrom(int indexCP, ArrayList<RecoverNode> candidates) throws IOException {        
         int loops=choicePoints.size()-1-indexCP;
-        if(indexCP<-1*MAX_RECOVERIES_PER_LINE)//first line 3 times explored
+        if(indexCP<-1*maxPerLine)//first line 3 times explored
             return false;
         if(loops>MAX_NR_OF_LINES)//max nr of lines explored in backtracking
             return false;
@@ -60,8 +65,8 @@
         getHistory().deleteLinesFrom(btPosition.getIndexHistory());
         getHistory().setTokenIndex(btPosition.tokensSeen);
         int endPos=regionEndPosition;
-        if(indexChoichePoints<choicePoints.size()-MAX_RECOVERIES_PER_LINE)
-            endPos=choicePoints.get(indexChoichePoints+MAX_RECOVERIES_PER_LINE).tokensSeen;        
+        if(indexChoichePoints<choicePoints.size()-maxPerLine)
+            endPos=choicePoints.get(indexChoichePoints+maxPerLine).tokensSeen;        
         ArrayList<RecoverNode> newCandidates=recoverParse(candidates, endPos, true);
         if(mySGLR.activeStacks.size()>0 || mySGLR.acceptingStack!=null){
             //if (loops<=MAX_RECOVERIES_PER_LINE) {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentInfo.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentInfo.java	2010-01-12 10:35:33 UTC (rev 20500)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/IndentInfo.java	2010-01-12 13:05:34 UTC (rev 20501)
@@ -63,7 +63,7 @@
     public int maxReduceLength() {
         int maxPathLength = 0;
         for (Frame activeStack : stackNodes) {
-            for (Path p : activeStack.findAllPaths(3)) {//3=> shifted_LO, reduced_LO, ReducedCodeFragment
+            for (Path p : activeStack.findAllPaths(2)) {//3=> shifted_LO, reduced_LO, ReducedCodeFragment
                 int length = p.getLength(); //length => total_length, p => reduce_length, p.p => layout_length (-shift), p.p.p => shift_length (=1)                 
                 if(length > maxPathLength){
                     maxPathLength = length;                   

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2010-01-12 10:35:33 UTC (rev 20500)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2010-01-12 13:05:34 UTC (rev 20501)
@@ -341,7 +341,7 @@
         boolean isSecondLine=true;
         ArrayList<Integer> endLocations=new ArrayList<Integer>();
         int indexNextLine=skipLine(indexStartLine);        
-        while(myParser.currentToken!=SGLR.EOF){            
+        while(myParser.currentToken!=SGLR.EOF && indexNextLine>=0){            
             IndentInfo nextLine = getHistory().getLine(indexNextLine);
             int indentSkipPosition=nextLine.getIndentValue();
             indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
@@ -508,4 +508,18 @@
         return mergedSkip;
     }
 
+    public ArrayList<StructureSkipSuggestion> getBlockSuggestions(
+            int structStartIndex) throws IOException {
+        ArrayList<StructureSkipSuggestion> result=getCurrentRegionSkips(structStartIndex);
+        int endIndex=Math.min(getHistory().getIndexLastLine()+1, structStartIndex + MAX_NR_OF_LINES);
+        for (int i = structStartIndex; i < endIndex; i++) {
+            IndentInfo startSkip=IndentInfo.cloneIndentInfo(getHistory().getLine(structStartIndex));
+            IndentInfo endSkip=IndentInfo.cloneIndentInfo(getHistory().getLine(i));
+            StructureSkipSuggestion block=new StructureSkipSuggestion();
+            block.setSkipLocations(startSkip, endSkip, structStartIndex, i);
+            result.add(block);
+        }        
+        return result;
+    }
+
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2010-01-12 10:35:33 UTC (rev 20500)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2010-01-12 13:05:34 UTC (rev 20501)
@@ -62,6 +62,7 @@
             }
         }
         else if(tokenIndex<0 || tokenIndex>recoverTokenCount){
+            myParser.currentToken =SGLR.EOF;
             System.err.println("Unexpected token index"+tokenIndex);
         }
         else{
@@ -223,11 +224,24 @@
        for (int i = 0; i < newLinePoints.size()-1; i++) {
            IndentInfo currLine=newLinePoints.get(i);
            IndentInfo nextLine=newLinePoints.get(i+1);
-           System.out.print("("+i+")"+getFragment(currLine.getTokensSeen(), nextLine.getTokensSeen()-1));
+           String stackDescription="";
+           for (Frame node : currLine.getStackNodes()) {
+               stackDescription+=node.state.stateNumber+";";
+           }
+           System.out.print("("+i+")"+"["+currLine.getIndentValue()+"]"+"{"+stackDescription+"}"+getFragment(currLine.getTokensSeen(), nextLine.getTokensSeen()-1));
        }
        IndentInfo currLine=newLinePoints.get(newLinePoints.size()-1);
-       System.out.print("("+(newLinePoints.size()-1)+")"+getFragment(currLine.getTokensSeen(), getIndexLastToken()-1));
+       System.out.print("("+(newLinePoints.size()-1)+")"+"["+currLine.getIndentValue()+"]"+getFragment(currLine.getTokensSeen(), getIndexLastToken()-1));
 
     }
+
+    public int getLineOfTokenPosition(int tokPos) {        
+        for (int i = 1; i < newLinePoints.size(); i++) {
+            IndentInfo line=newLinePoints.get(i);
+            if(line.getTokensSeen()>tokPos)
+                return i-1;
+        }
+        return newLinePoints.size()-1;
+    }
     
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2010-01-12 10:35:33 UTC (rev 20500)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RecoveryConnector.java	2010-01-12 13:05:34 UTC (rev 20501)
@@ -143,9 +143,14 @@
         if (skipSucceeded) { 
             getHistory().deleteLinesFrom(skipRecovery.getStartIndexErrorFragment());//TODO: integrate with FG and BP
             getHistory().resetRecoveryIndentHandler(skipRecovery.getStartLineErrorFragment().getIndentValue());
-            boolean whiteSpaceRecovery=parseErrorFragmentAsWhiteSpace(true);
-            if(whiteSpaceRecovery)
+            boolean whiteSpaceRecovery=parseErrorFragmentAsWhiteSpace(false);//true
+            //System.err.println("MMM");
+            //getHistory().logHistory();
+            if(whiteSpaceRecovery){
                 parseRemainingTokens(true);
+                //System.err.println("MMM");
+                //getHistory().logHistory();
+            }
             //whiteSpaceParse();
             //whiteSpaceParse(errorFragment); 
             if(recoverySucceeded()){
@@ -154,6 +159,7 @@
             }
             else{
                 Tools.debug("WhiteSpace Repair unexpectly fails");
+                recover();
                 //System.err.print("*************** WS-Fails unexpected");
             }/*
             if(!parseRemainingTokens())

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2010-01-12 10:35:33 UTC (rev 20500)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/RegionRecovery.java	2010-01-12 13:05:34 UTC (rev 20501)
@@ -78,6 +78,7 @@
      * Selects erroneous region based on layout 
      */
     public boolean selectErroneousFragment() throws IOException { 
+        boolean eofReached=myParser.currentToken==SGLR.EOF;
         acceptPosition=-1;
         NewStructureSkipper newRegionSelector=new NewStructureSkipper(myParser);
         int failureIndex=getHistory().getIndexLastLine();
@@ -130,6 +131,18 @@
         ArrayList<StructureSkipSuggestion> decomposedRegions=newRegionSelector.getZoomOnPreviousSuggestions(erroneousRegion);
         boolean findSmallerPart=trySetErroneousRegion(decomposedRegions);
         if(!findSmallerPart){
+            if(eofReached){
+                int structStart=getHistory().getLastLine().structureStartPosition();
+                //System.out.print(getHistory().getFragment(structStart-10, structStart));
+                //System.out.print("$$");
+                //System.out.print(getHistory().getFragment(structStart, structStart+10));
+                int structStartIndex=getHistory().getLineOfTokenPosition(structStart);
+                ArrayList<StructureSkipSuggestion> structRegions=newRegionSelector.getBlockSuggestions(structStartIndex);
+                if(trySetErroneousRegion(structRegions)){            
+                    return true;
+                }
+            }
+            
             int indexAccept;
             if(getHistory().getIndexLastLine()>=failureIndex+NR_OF_LINES_TILL_SUCCESS)
                 indexAccept=failureIndex+NR_OF_LINES_TILL_SUCCESS;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-01-12 10:35:33 UTC (rev 20500)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-01-12 13:05:34 UTC (rev 20501)
@@ -331,7 +331,7 @@
         lineNumber = 1;        
         currentInputStream = new PushbackInputStream(fis, 1024);
         acceptingStack = null; 
-        history.keepInitialState(this);
+        //history.keepInitialState(this);
         collectedErrors.clear();
     }    
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java	2010-01-12 10:35:33 UTC (rev 20500)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/StructuralTokenRecognizer.java	2010-01-12 13:05:34 UTC (rev 20501)
@@ -2,7 +2,7 @@
 
 public class StructuralTokenRecognizer {
     
-    private final static String[] closingTokens={"}", ")", "]|", ">", "|", "]"};
+    private final static String[] closingTokens={"}", ")", "]|", ">", "|", "]", "*/"};
     private final static String[] openingTokens={"{", "(", "|[", "<", "|", "["};
     private final static String[] separatorTokens={",", ";", "<+", "+>", "+", ">", "<", "=>", "->", "&&", "&", "||", "|"};
     



From R.B.Vermaas at tudelft.nl  Wed Jan 13 14:14:20 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 13 Jan 2010 13:14:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20502 - rob - in hydra:
	. webdsl
Message-ID: <201001131314.o0DDEK4J000667@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-13 13:14:20 +0000 (Wed, 13 Jan 2010)
New Revision: 20502

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20502&view=rev

Added:
   hydra/webdsl/
   hydra/webdsl/application.ini
   hydra/webdsl/tests.nix

Log:
initial test for compiling researchr with webdsl

Changes:

Added: hydra/webdsl/application.ini
===================================================================
--- hydra/webdsl/application.ini	                        (rev 0)
+++ hydra/webdsl/application.ini	2010-01-13 13:14:20 UTC (rev 20502)
@@ -0,0 +1,14 @@
+export BACKEND=servlet
+export TOMCATPATH=/opt/tomcat
+export APPNAME=researchr
+export DBSERVER=localhost
+export DBUSER=webdsluser
+export DBPASSWORD=
+export DBNAME=webdsldb
+export DBMODE=create-drop
+export SMTPHOST=localhost
+export SMTPPORT=25
+export SMTPUSER=
+export SMTPPASS=
+export SMTPSSL=false
+export SMTPTLS=false

Added: hydra/webdsl/tests.nix
===================================================================
--- hydra/webdsl/tests.nix	                        (rev 0)
+++ hydra/webdsl/tests.nix	2010-01-13 13:14:20 UTC (rev 20502)
@@ -0,0 +1,28 @@
+{ nixpkgs ? ../../nixpkgs
+}:
+let 
+  pkgs = import nixpkgs {};
+in
+{
+  researchr = { 
+    webdsl
+  , researchrSrc ? { outPath = ../../researchr; rev = 1234; }  
+  } :
+    pkgs.stdenv.mkDerivation {
+      name = "researchr-r${toString researchrSrc.rev}";
+      buildInputs = [webdsl];
+      buildCommand = ''
+        ensureDir $out/nix-support        
+        ulimit -s unlimited 
+
+        header "Copying sources"        
+        cp -vR ${researchrSrc}/* .
+        cp ${./application.ini} .
+
+        header "Building"
+        webdsl build        
+
+        touch $out/nix-support/hydra-build-products
+      '';
+  };
+}



From R.B.Vermaas at tudelft.nl  Wed Jan 13 14:19:20 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 13 Jan 2010 13:19:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20503 - rob -
	hydra/webdsl
Message-ID: <201001131319.o0DDJKQZ000722@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-13 13:19:20 +0000 (Wed, 13 Jan 2010)
New Revision: 20503

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20503&view=rev

Modified:
   hydra/webdsl/tests.nix

Log:
use i686-linux to build researchr

Changes:

Modified: hydra/webdsl/tests.nix
===================================================================
--- hydra/webdsl/tests.nix	2010-01-13 13:14:20 UTC (rev 20502)
+++ hydra/webdsl/tests.nix	2010-01-13 13:19:20 UTC (rev 20503)
@@ -1,7 +1,7 @@
 { nixpkgs ? ../../nixpkgs
 }:
 let 
-  pkgs = import nixpkgs {};
+  pkgs = import nixpkgs { system = "i686-linux"; };
 in
 {
   researchr = { 



From R.B.Vermaas at tudelft.nl  Wed Jan 13 14:33:33 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 13 Jan 2010 13:33:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20504 - rob -
	hydra/webdsl
Message-ID: <201001131333.o0DDXXYI000914@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-13 13:33:33 +0000 (Wed, 13 Jan 2010)
New Revision: 20504

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20504&view=rev

Modified:
   hydra/webdsl/tests.nix

Log:
debugging researchr build

Changes:

Modified: hydra/webdsl/tests.nix
===================================================================
--- hydra/webdsl/tests.nix	2010-01-13 13:19:20 UTC (rev 20503)
+++ hydra/webdsl/tests.nix	2010-01-13 13:33:33 UTC (rev 20504)
@@ -17,8 +17,9 @@
 
         header "Copying sources"        
         cp -vR ${researchrSrc}/* .
-        cp ${./application.ini} .
+        cp -v ${./application.ini} .
 
+        ls -l 
         header "Building"
         webdsl build        
 



From R.B.Vermaas at tudelft.nl  Wed Jan 13 14:36:20 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 13 Jan 2010 13:36:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20505 - rob -
	hydra/webdsl
Message-ID: <201001131336.o0DDaK7L000969@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-13 13:36:20 +0000 (Wed, 13 Jan 2010)
New Revision: 20505

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20505&view=rev

Modified:
   hydra/webdsl/tests.nix

Log:
use full name of application.ini

Changes:

Modified: hydra/webdsl/tests.nix
===================================================================
--- hydra/webdsl/tests.nix	2010-01-13 13:33:33 UTC (rev 20504)
+++ hydra/webdsl/tests.nix	2010-01-13 13:36:20 UTC (rev 20505)
@@ -17,7 +17,7 @@
 
         header "Copying sources"        
         cp -vR ${researchrSrc}/* .
-        cp -v ${./application.ini} .
+        cp -v ${./application.ini} application.ini
 
         ls -l 
         header "Building"



From R.B.Vermaas at tudelft.nl  Wed Jan 13 14:39:15 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Wed, 13 Jan 2010 13:39:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20506 - rob -
	hydra/webdsl
Message-ID: <201001131339.o0DDdFDu001015@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-13 13:39:15 +0000 (Wed, 13 Jan 2010)
New Revision: 20506

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20506&view=rev

Modified:
   hydra/webdsl/tests.nix

Log:
remove debug statement

Changes:

Modified: hydra/webdsl/tests.nix
===================================================================
--- hydra/webdsl/tests.nix	2010-01-13 13:36:20 UTC (rev 20505)
+++ hydra/webdsl/tests.nix	2010-01-13 13:39:15 UTC (rev 20506)
@@ -19,7 +19,6 @@
         cp -vR ${researchrSrc}/* .
         cp -v ${./application.ini} application.ini
 
-        ls -l 
         header "Building"
         webdsl build        
 



From L.C.L.Kats at tudelft.nl  Fri Jan 15 11:26:10 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 15 Jan 2010 10:26:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20507 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards
Message-ID: <201001151026.o0FAQAVi005986@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-15 10:26:10 +0000 (Fri, 15 Jan 2010)
New Revision: 20507

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20507&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java

Log:
Wizard: allow dots in package names and languages names without a capital.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2010-01-13 13:39:15 UTC (rev 20506)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/wizards/NewEditorWizardPage.java	2010-01-15 10:26:10 UTC (rev 20507)
@@ -178,7 +178,7 @@
 			setErrorStatus("Project name must be valid");
 			return;
 		}
-		if (!toLanguageName(getInputLanguageName()).equals(getInputLanguageName())) {
+		if (!toLanguageName(getInputLanguageName()).equalsIgnoreCase(getInputLanguageName())) {
 			setErrorStatus("Language name must be valid");
 			return;
 		}
@@ -187,8 +187,9 @@
 			setErrorStatus("Package name must be specified");
 			return;
 		}
-		if (!getInputPackageName().toLowerCase().equals(toPackageName(getInputPackageName()))
-				|| getInputPackageName().indexOf("..") != -1) {
+		if (!getInputPackageName().equalsIgnoreCase(toPackageName(getInputPackageName()))
+				|| getInputPackageName().indexOf("..") != -1
+				|| getInputPackageName().endsWith(".")) {
 			setErrorStatus("Package name must be valid");
 			return;
 		}
@@ -227,7 +228,6 @@
 	}
 
 	private static String toLanguageName(String name) {
-		// TODO: be more flexible in language names
 		char[] input = name.replace(' ', '-').toCharArray();
 		StringBuilder output = new StringBuilder();
 		int i = 0;
@@ -249,7 +249,22 @@
 	}
 	
 	private static String toPackageName(String name) {
-		return toLanguageName(name).toLowerCase().replace('-', '_');
+		char[] input = name.replace(' ', '-').toCharArray();
+		StringBuilder output = new StringBuilder();
+		int i = 0;
+		while (i < input.length) {
+			char c = input[i++];
+			if (Character.isLetter(c) || c == '.' || c == '_') {
+				output.append(c);
+				break;
+			}
+		}
+		while (i < input.length) {
+			char c = input[i++];
+			if (Character.isLetterOrDigit(c) || c == '.' || c == '_')
+				output.append(c);
+		}
+		return output.toString();
 	}
 	
 	private static String toExtension(String name) {



From L.C.L.Kats at tudelft.nl  Fri Jan 15 11:30:19 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 15 Jan 2010 10:30:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20508 - LennartKats -
	in strc-java/trunk: java/runtime/org/strategoxt/lang trans
Message-ID: <201001151030.o0FAUJg6006037@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-15 10:30:19 +0000 (Fri, 15 Jan 2010)
New Revision: 20508

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20508&view=rev

Modified:
   strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_repeat_1_0.java
   strc-java/trunk/trans/strj.str

Log:
Added a stop condition to the repeat strategy, since it no longer triggers a StackOverFlowException.

Changes:

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_repeat_1_0.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_repeat_1_0.java	2010-01-15 10:26:10 UTC (rev 20507)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/SRTS_EXT_repeat_1_0.java	2010-01-15 10:30:19 UTC (rev 20508)
@@ -1,11 +1,17 @@
 package org.strategoxt.lang;
 
+import java.util.HashSet;
+import java.util.Set;
+
 import org.spoofax.interpreter.terms.IStrategoTerm;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class SRTS_EXT_repeat_1_0 extends Strategy {
+
+	private static final int INSANE_LOOP_COUNT = 100000;
+	
 	public static SRTS_EXT_repeat_1_0 instance = new SRTS_EXT_repeat_1_0();
 	
 	@Override
@@ -13,11 +19,27 @@
 		IStrategoTerm result = current;
 		IStrategoTerm next = s.invoke(context, result);
 		
+		int count = 0;
+		
 		while (next != null) {
+			if (++count > INSANE_LOOP_COUNT)
+				return invokeSuspiciously(context, result, s);
 			result = next;
 			next = s.invoke(context, result);
 		}
 
 		return result;
 	}
-}
\ No newline at end of file
+
+	private IStrategoTerm invokeSuspiciously(Context context, IStrategoTerm next, Strategy s) {
+		Set<IStrategoTerm> valuesSeen = new HashSet<IStrategoTerm>();
+		IStrategoTerm result;
+		do {
+			result = next;
+			next = s.invoke(context, result);
+			if (!valuesSeen.add(next))
+				throw new StrategoException("Infinite loop detected in repeat strategy");
+		} while (next != null);
+		return result;
+	}
+}

Modified: strc-java/trunk/trans/strj.str
===================================================================
--- strc-java/trunk/trans/strj.str	2010-01-15 10:26:10 UTC (rev 20507)
+++ strc-java/trunk/trans/strj.str	2010-01-15 10:30:19 UTC (rev 20508)
@@ -89,16 +89,17 @@
   output-java :
     ast -> name
     with
-      name := <output-filename <+ fatal-err(|"Unexpected output")> ast
+      name := <output-filename <+ fatal-err(|"Internal error: unexpected output")> ast
     ; if FastPrettyPrinting then
         if-c-platform(
           <parenthesize-Java5; pp-java-native> ast
         ; (rename-to(!name) <+ <fatal-err(|"Could not open output file")> name)
         )
       else
-          file := <fopen <+ fatal-err(|"Could not open output file")> (name, "w")
-        ; box  := <pp-java5-to-abox> ast
-        ; <box2text-stream(|80, file)> box
+          file := <fopen; debug(!-1) <+ fatal-err(|"Could not open output file")> (name, "w")
+        ; box  := <debug(!0); pp-java5-to-abox; debug(!1)> ast
+        ; with(<debug(!"1.5")> <pp-java5-to-string> ast)
+        ; <debug(!2); box2text-stream(|80, file)> box
         ; <fclose> file
       end
     <+



From R.B.Vermaas at tudelft.nl  Fri Jan 15 13:35:40 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 15 Jan 2010 12:35:40 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20509 - rob - hydra/jobs
Message-ID: <201001151235.o0FCZew0008566@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-15 12:35:40 +0000 (Fri, 15 Jan 2010)
New Revision: 20509

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20509&view=rev

Modified:
   hydra/jobs/strategoxt.nix

Log:
add aterm+sdf to channel

Changes:

Modified: hydra/jobs/strategoxt.nix
===================================================================
--- hydra/jobs/strategoxt.nix	2010-01-15 10:30:19 UTC (rev 20508)
+++ hydra/jobs/strategoxt.nix	2010-01-15 12:35:40 UTC (rev 20509)
@@ -67,7 +67,7 @@
 
   systemPkgs = import nixpkgs {inherit system;};
 
-  jobs = rec {
+  jobs = {
 
     tarball = 
       makeStrategoXTTarball {
@@ -101,6 +101,8 @@
   
       } ;
 
+    aterm = aterm systemPkgs ;
+    sdf2Bundle = sdf2Bundle systemPkgs ;
   } ;
 
 in jobs



From R.B.Vermaas at tudelft.nl  Fri Jan 15 14:09:14 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 15 Jan 2010 13:09:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20510 - rob - hydra
Message-ID: <201001151309.o0FD9Ecn009204@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-15 13:09:14 +0000 (Fri, 15 Jan 2010)
New Revision: 20510

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20510&view=rev

Modified:
   hydra/baseline.nix

Log:
remove javafront from baseline

Changes:

Modified: hydra/baseline.nix
===================================================================
--- hydra/baseline.nix	2010-01-15 12:35:40 UTC (rev 20509)
+++ hydra/baseline.nix	2010-01-15 13:09:14 UTC (rev 20510)
@@ -9,7 +9,5 @@
   strategoxt        = pkgs.strategoPackages018.strategoxt ;
   strategoxtTarball = pkgs.strategoPackages018.strategoxt.src ;
 
-  javaFront        = pkgs.strategoPackages018.javafront ;
-  javaFrontTarball = pkgs.strategoPackages018.javafront.src ;
 }
 



From R.B.Vermaas at tudelft.nl  Fri Jan 15 14:11:45 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 15 Jan 2010 13:11:45 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20511 - rob - hydra
Message-ID: <201001151311.o0FDBjLe009265@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-15 13:11:45 +0000 (Fri, 15 Jan 2010)
New Revision: 20511

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20511&view=rev

Added:
   hydra/baseline-java.nix

Log:


Changes:

Added: hydra/baseline-java.nix
===================================================================
--- hydra/baseline-java.nix	                        (rev 0)
+++ hydra/baseline-java.nix	2010-01-15 13:11:45 UTC (rev 20511)
@@ -0,0 +1,5 @@
+pkgs : 
+  (import ./baseline.nix pkgs) // {
+  javaFront        = pkgs.strategoPackages018.javafront ;
+  javaFrontTarball = pkgs.strategoPackages018.javafront.src ; 
+  }



From R.B.Vermaas at tudelft.nl  Fri Jan 15 14:25:13 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 15 Jan 2010 13:25:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20512 - rob - hydra/jobs
Message-ID: <201001151325.o0FDPD60009420@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-15 13:25:13 +0000 (Fri, 15 Jan 2010)
New Revision: 20512

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20512&view=rev

Modified:
   hydra/jobs/aspectj-front.nix
   hydra/jobs/dryad-compiler.nix
   hydra/jobs/strc-java.nix

Log:
use baseline-java.nix

Changes:

Modified: hydra/jobs/aspectj-front.nix
===================================================================
--- hydra/jobs/aspectj-front.nix	2010-01-15 13:11:45 UTC (rev 20511)
+++ hydra/jobs/aspectj-front.nix	2010-01-15 13:25:13 UTC (rev 20512)
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit aspectjFrontCheckout ;
         inherit hydraConfig ;
-        baselineNix = "${hydraConfig}/baseline.nix" ;
+        baselineNix = "${hydraConfig}/baseline-java.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/dryad-compiler.nix
===================================================================
--- hydra/jobs/dryad-compiler.nix	2010-01-15 13:11:45 UTC (rev 20511)
+++ hydra/jobs/dryad-compiler.nix	2010-01-15 13:25:13 UTC (rev 20512)
@@ -17,7 +17,7 @@
         inherit dryad ;
         inherit javaFront ;
         inherit hydraConfig ;
-        baselineNix = "${hydraConfig}/baseline.nix" ;
+        baselineNix = "${hydraConfig}/baseline-java.nix" ;
         inherit nixpkgs; 
       } ; 
    

Modified: hydra/jobs/strc-java.nix
===================================================================
--- hydra/jobs/strc-java.nix	2010-01-15 13:11:45 UTC (rev 20511)
+++ hydra/jobs/strc-java.nix	2010-01-15 13:25:13 UTC (rev 20512)
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit strcJavaCheckout ;
         inherit hydraConfig ;
-        baselineNix = "${hydraConfig}/baseline.nix" ;
+        baselineNix = "${hydraConfig}/baseline-java.nix" ;
         inherit nixpkgs; 
       } ; 
    



From R.B.Vermaas at tudelft.nl  Fri Jan 15 14:25:38 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 15 Jan 2010 13:25:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20513 - rob - hydra/jobs
Message-ID: <201001151325.o0FDPcQ9009425@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-15 13:25:38 +0000 (Fri, 15 Jan 2010)
New Revision: 20513

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20513&view=rev

Modified:
   hydra/jobs/pil.nix

Log:
use baseline-java.nix

Changes:

Modified: hydra/jobs/pil.nix
===================================================================
--- hydra/jobs/pil.nix	2010-01-15 13:25:13 UTC (rev 20512)
+++ hydra/jobs/pil.nix	2010-01-15 13:25:38 UTC (rev 20513)
@@ -13,7 +13,7 @@
         inherit officialRelease ; 
         inherit pilCheckout ;
         inherit hydraConfig ;
-        baselineNix = "${hydraConfig}/baseline.nix" ;
+        baselineNix = "${hydraConfig}/baseline-java.nix" ;
         inherit nixpkgs; 
         makeDebs = true;
 #        makeRPMs = true;



From L.C.L.Kats at tudelft.nl  Fri Jan 15 16:21:07 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 15 Jan 2010 15:21:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20514 - LennartKats -
	in spoofax-imp/trunk: org.eclipse.imp
	org.strategoxt.imp.generator/src/sdf2imp/services
	org.strategoxt.imp.generator/src/syntax org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <201001151521.o0FFL7Lk010982@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-15 15:21:06 +0000 (Fri, 15 Jan 2010)
New Revision: 20514

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20514&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/SubListAstNode.java
Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java

Log:
- Allow builders to apply to sublists, as required for Maartje's refactoring work
- Added a (cursor) attribute so builders can be applied to the cursor location, even if there is no text selection
- Added a null-pointer check for a problem encountered by Nathan

Changes:

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-15 15:21:06 UTC (rev 20514)
@@ -31,14 +31,15 @@
  		                    return lang;
  		                }
  		            } else {
-@@ -383,7 +387,9 @@
+@@ -383,7 +387,10 @@
          for (String ext : extensions) {
  	        IFileEditorMapping mapping= findMappingFor(ext, mappings);
  
 -	        if (mapping == null || mapping.getDefaultEditor().getId().equals(sUniversalEditor.getId())) {
 +	        if (mapping == null
 +	        		|| (!(mapping instanceof IMPFileEditorMapping) // LK: mapping may already be a IMPFileEditorMapping 
-+	        		     && mapping.getDefaultEditor().getId().equals(sUniversalEditor.getId()))) {
++	        			 && (mapping.getDefaultEditor() == null
++	        		         || mapping.getDefaultEditor().getId().equals(sUniversalEditor.getId())))) {
  	            // Replace the file editor mapping even if it already pointed to the universal editor,
  	            // since the persisted association turns into a FileEditorMapping when re-read, thus
  	            // losing the icon (which FileEditorMapping gets from the IEditorDescriptor).

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	2010-01-15 15:21:06 UTC (rev 20514)
@@ -61,8 +61,9 @@
           ~// and the generate-java rule is used to carry out the tranformation.
           ~// Builder definitions can also specify any combination of the following annotations:
           ~//
+          ~//   (cursor)      The builder should always transform the tree node at the cursor.
           ~//   (meta)        Indicates the builder should only be available to meta-programmers
-          ~//                 (i.e., not when the plugin is deployed to end-users)
+          ~//                 (i.e., not when the plugin is deployed to end-users).
           ~//   (openeditor)  Indicates an editor should be opened with the result.
           ~//   (persistent)  Indicates that the resulting file should be saved to disk.
           ~//   (realtime)    Indicates that the resulting editor should be updated in real-time

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/BuildersService.sdf	2010-01-15 15:21:06 UTC (rev 20514)
@@ -25,3 +25,4 @@
     "(realtime)"   -> BuilderOption {cons("RealTime")}
     "(persistent)" -> BuilderOption {cons("Persistent")}
     "(meta)"       -> BuilderOption {cons("Meta")}
+    "(cursor)"     -> BuilderOption {cons("Cursor")}

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	2010-01-15 15:21:06 UTC (rev 20514)
@@ -15,6 +15,7 @@
    RealTime             -- KW["(realtime)"],
    Persistent           -- KW["(persistent)"],
    Meta                 -- KW["(meta)"],
+   Cursor               -- KW["(cursor)"],
    Strategy             -- _1,
    Attribute            -- H hs=0 [ KW["id"] KW["."] _1 ],
    Analysis             -- V is=2 [H hs=0 [ KW["analysis"] _1 ] A(l,l,l) [_2] ],

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/plugin.xml	2010-01-15 15:21:06 UTC (rev 20514)
@@ -272,7 +272,7 @@
             commandId="org.strategoxt.imp.runtime.transformCommand"
             contextId="org.eclipse.ui.textEditorScope"
             schemeId="org.eclipse.ui.defaultAcceleratorConfiguration"
-            sequence="CTRL+T"/>
+            sequence="M1+T"/>
       <key
             commandId="org.eclipse.ui.project.buildProject"
             contextId="org.eclipse.ui.contexts.window"

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-01-15 15:21:06 UTC (rev 20514)
@@ -1,8 +1,5 @@
 package org.strategoxt.imp.runtime;
 
-import java.util.HashSet;
-import java.util.Set;
-
 import lpg.runtime.IPrsStream;
 import lpg.runtime.IToken;
 
@@ -31,6 +28,7 @@
 import org.strategoxt.imp.runtime.parser.ast.AstNode;
 import org.strategoxt.imp.runtime.parser.tokens.SGLRToken;
 import org.strategoxt.imp.runtime.parser.tokens.TokenKind;
+import org.strategoxt.imp.runtime.stratego.StrategoTermPath;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
 /**
@@ -180,20 +178,9 @@
 		IStrategoAstNode startNode = ((SGLRToken) start).getAstNode();
 		IStrategoAstNode endNode = ((SGLRToken) end).getAstNode();
 
-		return findCommonAncestor(startNode, endNode);
+		return StrategoTermPath.findCommonAncestor(startNode, endNode);
 	}
 
-	private static IStrategoAstNode findCommonAncestor(IStrategoAstNode node1, IStrategoAstNode node2) {
-		Set<IStrategoAstNode> node1Ancestors = new HashSet<IStrategoAstNode>();
-		for (IStrategoAstNode n = node1; n != null; n = n.getParent())
-			node1Ancestors.add(n);
-		
-		for (IStrategoAstNode n = node2; n != null; n = n.getParent())
-			if (node1Ancestors.contains(n)) return n;
-		
-		throw new IllegalStateException("Could not find common ancestor for nodes: " + node1 + "," + node2);
-	}
-
 	/**
 	 * Asynchronously opens or activates an editor.
 	 * 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2010-01-15 15:21:06 UTC (rev 20514)
@@ -38,6 +38,7 @@
 			boolean realTime = false;
 			boolean persistent = false;
 			boolean meta = false;
+			boolean cursor = false;
 			
 			for (IStrategoTerm option : options.getAllSubterms()) {
 				String type = cons(option);
@@ -49,12 +50,14 @@
 					persistent = true;
 				} else if (type.equals("Meta")) {
 					meta = true;
+				} else if (type.equals("Cursor")) {
+					cursor = true;
 				} else {
 					throw new BadDescriptorException("Unknown builder annotation: " + type);
 				}
 			}
 			if (!meta || d.isDynamicallyLoaded())			
-				builders.add(new StrategoBuilder(feedback, caption, strategy, openEditor, realTime, persistent));
+				builders.add(new StrategoBuilder(feedback, caption, strategy, openEditor, realTime, cursor, persistent));
 		}
 		
 		return new BuilderMap(builders);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNode.java	2010-01-15 15:21:06 UTC (rev 20514)
@@ -78,7 +78,7 @@
 	
 	// (concrete type exposed by IAst interface)
 	public final ArrayList<AstNode> getChildren() {
-		assert EMPTY_LIST.size() == 0 && (children.size() == 0 || children.get(0).getParent() == this);
+		assert EMPTY_LIST.size() == 0 && (children.size() == 0 || children.get(0).getParent() == this || this instanceof SubListAstNode);
 		
 		return children;
 	}
@@ -158,6 +158,9 @@
 		overrideReferences(leftToken, rightToken, children, null);
 	}
 	
+	/**
+	 * Set/override references to parent nodes.
+	 */
 	protected void overrideReferences(IToken leftToken, IToken rightToken, ArrayList<AstNode> children, AstNode oldNode) {
 		IPrsStream parseStream = leftToken.getIPrsStream();
 		int tokenIndex = leftToken.getTokenIndex();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/AstNodeFactory.java	2010-01-15 15:21:06 UTC (rev 20514)
@@ -2,6 +2,8 @@
 
 import java.util.ArrayList;
 
+import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
+
 import lpg.runtime.IToken;
 
 /**
@@ -63,4 +65,19 @@
 		
 		return result;
 	}
+	
+	public AstNode createSublist(ListAstNode list, IStrategoAstNode startChild, IStrategoAstNode endChild) {
+		ArrayList<AstNode> children = new ArrayList<AstNode>();
+		int startOffset = list.getChildren().indexOf(startChild);
+		int endOffset = list.getChildren().indexOf(endChild);
+		
+		for (int i = startOffset; i <= endOffset; i++) {
+			children.add(list.getChildren().get(i));
+		}
+		
+		AstNode result = new SubListAstNode(list, list.getElementSort(), startChild.getLeftIToken(), endChild.getLeftIToken(), children);
+		list.overrideReferences(list.getLeftIToken(), list.getRightIToken(), list.getChildren(), result);
+		result.setParent(list);
+		return result;
+	}
 }

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/SubListAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/SubListAstNode.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/SubListAstNode.java	2010-01-15 15:21:06 UTC (rev 20514)
@@ -0,0 +1,32 @@
+package org.strategoxt.imp.runtime.parser.ast;
+
+import java.util.ArrayList;
+
+import lpg.runtime.IToken;
+
+/**
+ * An artificial partial list AST node.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SubListAstNode extends ListAstNode {
+
+	private final ListAstNode completeList;
+
+	public SubListAstNode(ListAstNode completeList, String elementSort, IToken leftToken, IToken rightToken, ArrayList<AstNode> children) {
+		super(elementSort, leftToken, rightToken, children);
+		this.completeList = completeList;
+	}
+
+	public ListAstNode getCompleteList() {
+		return completeList;
+	}
+	
+	public AstNode getFirstChild() {
+		return getChildren().get(0);
+	}
+	
+	public AstNode getLastChild() {
+		return getChildren().get(getChildren().size() - 1);
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-01-15 15:21:06 UTC (rev 20514)
@@ -50,14 +50,17 @@
 	
 	private final boolean openEditor;
 	
+	private final boolean cursor;
+	
 	private final boolean persistent;
 	
-	public StrategoBuilder(StrategoObserver observer, String caption, String builderRule, boolean openEditor, boolean realTime, boolean persistent) {
+	public StrategoBuilder(StrategoObserver observer, String caption, String builderRule, boolean openEditor, boolean realTime, boolean cursor, boolean persistent) {
 		this.observer = observer;
 		this.caption = caption;
 		this.builderRule = builderRule;
 		this.openEditor = openEditor;
 		this.realTime = realTime;
+		this.cursor = cursor;
 		this.persistent = persistent;
 	}
 	
@@ -74,7 +77,7 @@
 		synchronized (observer.getSyncRoot()) {
 			try {
 				if (node == null) {
-					node = editor.getSelectionAst(true);
+					node = editor.getSelectionAst(!cursor);
 					if (node == null) node = editor.getParseController().getCurrentAst();
 				}
 				if (node == null) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2010-01-15 13:25:38 UTC (rev 20513)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2010-01-15 15:21:06 UTC (rev 20514)
@@ -1,6 +1,9 @@
 package org.strategoxt.imp.runtime.stratego;
 
+import static java.util.Arrays.asList;
+
 import java.util.ArrayList;
+import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -9,6 +12,9 @@
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.ast.AbstractVisitor;
 import org.strategoxt.imp.runtime.parser.ast.AstNode;
+import org.strategoxt.imp.runtime.parser.ast.AstNodeFactory;
+import org.strategoxt.imp.runtime.parser.ast.ListAstNode;
+import org.strategoxt.imp.runtime.parser.ast.SubListAstNode;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
 
 /**
@@ -23,6 +29,8 @@
 	}
 	
 	public static IStrategoList createPath(IStrategoAstNode node) {
+		if (node instanceof SubListAstNode)
+			node = ((SubListAstNode) node).getCompleteList();
 		LinkedList<IStrategoTerm> results = new LinkedList<IStrategoTerm>();
 		
 		while (node.getParent() != null) {
@@ -37,6 +45,8 @@
 	}
 	
 	public static List<Integer> createPathList(IStrategoAstNode node) {
+		if (node instanceof SubListAstNode)
+			node = ((SubListAstNode) node).getCompleteList();
 		LinkedList<Integer> results = new LinkedList<Integer>();
 		
 		while (node.getParent() != null) {
@@ -58,9 +68,44 @@
 	}
 
 	/**
+	 * Find the common ancestor of two AST nodes, creating a SubListAstNode if they are in the same list ancestor.
+	 */
+	public static IStrategoAstNode findCommonAncestor(IStrategoAstNode node1, IStrategoAstNode node2) {
+		if (node1 == null) return node2;
+		if (node2 == null) return node1;
+		
+		LinkedHashSet<IStrategoAstNode> node1Ancestors = new LinkedHashSet<IStrategoAstNode>();
+		for (IStrategoAstNode n = node1; n != null; n = n.getParent())
+			node1Ancestors.add(n);
+		
+		for (IStrategoAstNode n = node2, n2Child = node2; n != null; n2Child = n, n = n.getParent())
+			if (node1Ancestors.contains(n)) {
+				return tryCreateListCommonAncestor(n, node1Ancestors, n2Child);
+			}
+		
+		throw new IllegalStateException("Could not find common ancestor for nodes: " + node1 + "," + node2);
+	}
+	
+	private static IStrategoAstNode tryCreateListCommonAncestor(IStrategoAstNode commonAncestor, LinkedHashSet<IStrategoAstNode> ancestors1, IStrategoAstNode child2) {
+		if (commonAncestor != child2 && ((AstNode) commonAncestor).isList()) {
+			List<IStrategoAstNode> ancestors1List = asList(ancestors1.toArray(new IStrategoAstNode[ancestors1.size()]));
+			int i = ancestors1List.indexOf(commonAncestor);
+			if (i == 0)
+				return commonAncestor;
+			IStrategoAstNode child1 = ancestors1List.get(i - 1);
+			return new AstNodeFactory().createSublist((ListAstNode) commonAncestor, child1, child2); 
+		} else {
+			return commonAncestor;
+		}
+	}
+
+	/**
 	 * Attempts to find a corresponding selection subtree in a new ast.
 	 */
 	public static IStrategoAstNode findCorrespondingSubtree(IStrategoAstNode newAst, IStrategoAstNode selection) {
+		if (selection instanceof SubListAstNode)
+			return findCorrespondingSublist(newAst, (SubListAstNode) selection);
+		
 		IStrategoAstNode oldAst = getRoot(selection);
 		IStrategoAstNode oldParent = oldAst;
 		IStrategoAstNode newParent = newAst;
@@ -111,6 +156,12 @@
 		return newAst;
 	}
 
+	private static IStrategoAstNode findCorrespondingSublist(IStrategoAstNode newAst, SubListAstNode selection) {
+		IStrategoAstNode start = findCorrespondingSubtree(newAst, selection.getFirstChild());
+		IStrategoAstNode end = findCorrespondingSubtree(newAst, selection.getLastChild());
+		return findCommonAncestor(start, end);
+	}
+
 	private static boolean constructorEquals(IStrategoAstNode first, IStrategoAstNode second) {
 		return first.getConstructor() == null
 				? second.getConstructor() == null



From L.C.L.Kats at tudelft.nl  Fri Jan 15 16:39:38 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 15 Jan 2010 15:39:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20515 - LennartKats -
	strc-java/trunk/tools
Message-ID: <201001151539.o0FFdcnN011149@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-15 15:39:38 +0000 (Fri, 15 Jan 2010)
New Revision: 20515

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20515&view=rev

Modified:
   strc-java/trunk/tools/strj-jar

Log:


Changes:

Modified: strc-java/trunk/tools/strj-jar
===================================================================
--- strc-java/trunk/tools/strj-jar	2010-01-15 15:21:06 UTC (rev 20514)
+++ strc-java/trunk/tools/strj-jar	2010-01-15 15:39:38 UTC (rev 20515)
@@ -74,7 +74,7 @@
 INPUT2=
 INPUT3=
 if head -n 1 $INPUT | grep '^package' &>/dev/null; then
-  PACKAGE="`head $INPUT -n 1 | sed 's/package //; s/\;//'`."
+  PACKAGE="`head -n 1 $INPUT | sed 's/package //; s/\;//'`."
   # PACKAGEDIR=`echo "$PACKAGE" | sed 's!\.!/!g	'`
   INPUT2="$INPUTDIR/Main.java"
   INPUTDIR2=`cd $INPUTDIR; pwd` # canonicalize



From L.C.L.Kats at tudelft.nl  Fri Jan 15 16:41:19 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 15 Jan 2010 15:41:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20516 - LennartKats -
	strc-java/trunk/trans
Message-ID: <201001151541.o0FFfJ37011171@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-15 15:41:19 +0000 (Fri, 15 Jan 2010)
New Revision: 20516

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20516&view=rev

Modified:
   strc-java/trunk/trans/strj.str

Log:
Removed debugging code (oops)

Changes:

Modified: strc-java/trunk/trans/strj.str
===================================================================
--- strc-java/trunk/trans/strj.str	2010-01-15 15:39:38 UTC (rev 20515)
+++ strc-java/trunk/trans/strj.str	2010-01-15 15:41:19 UTC (rev 20516)
@@ -96,10 +96,9 @@
         ; (rename-to(!name) <+ <fatal-err(|"Could not open output file")> name)
         )
       else
-          file := <fopen; debug(!-1) <+ fatal-err(|"Could not open output file")> (name, "w")
-        ; box  := <debug(!0); pp-java5-to-abox; debug(!1)> ast
-        ; with(<debug(!"1.5")> <pp-java5-to-string> ast)
-        ; <debug(!2); box2text-stream(|80, file)> box
+          file := <fopen <+ fatal-err(|"Could not open output file")> (name, "w")
+        ; box  := <pp-java5-to-abox> ast
+        ; <box2text-stream(|80, file)> box
         ; <fclose> file
       end
     <+



From L.C.L.Kats at tudelft.nl  Fri Jan 15 16:45:20 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 15 Jan 2010 15:45:20 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20517 - LennartKats -
	spoofax-imp/trunk
Message-ID: <201001151545.o0FFjKq5011211@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-15 15:45:20 +0000 (Fri, 15 Jan 2010)
New Revision: 20517

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20517&view=rev

Modified:
   spoofax-imp/trunk/Makefile

Log:
Fix build with 64-bit Java.

Changes:

Modified: spoofax-imp/trunk/Makefile
===================================================================
--- spoofax-imp/trunk/Makefile	2010-01-15 15:41:19 UTC (rev 20516)
+++ spoofax-imp/trunk/Makefile	2010-01-15 15:45:20 UTC (rev 20517)
@@ -9,7 +9,7 @@
 	$(MAKE) -C org.strategoxt.imp.generator all
 
 %.ant : .PHONY
-	cd $* && ANT_OPTS=-Xss4m CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar \
+	cd $* && ANT_OPTS="-Xss4m -Xmx512m" CLASSPATH=utils/strategoxt.jar:utils/sdf2imp.jar:utils/make_permissive.jar \
 	    ant -f build.main.xml -Declipse.spoofaximp.jars=../org.strategoxt.imp.generator/lib \
 	                          -Declipse.spoofaximp.strategojar=utils/strategoxt.jar
 



From L.C.L.Kats at tudelft.nl  Fri Jan 15 18:08:27 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 15 Jan 2010 17:08:27 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20518 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
Message-ID: <201001151708.o0FH8RQj012796@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-15 17:08:26 +0000 (Fri, 15 Jan 2010)
New Revision: 20518

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20518&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java

Log:
Fixed a new installation bug encountered by Nathan (maybe)

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java	2010-01-15 15:45:20 UTC (rev 20517)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/AbstractService.java	2010-01-15 17:08:26 UTC (rev 20518)
@@ -78,9 +78,9 @@
 
 	protected void initialize(IParseController controller, Language language) {
 		// (Thrown exceptions are shown directly in the editor view.)
+		this.language = language;
 		if (controller instanceof DynamicParseController)
 			this.parseController = (SGLRParseController) ((DynamicParseController) controller).getWrapped();
-		this.language = language;
 		if (getWrapped() == null) // (trigger descriptor init)
 			throw new RuntimeException("Failed to initialize language " + language.getName());
 		if (!this.language.getName().equals(language.getName()))



From m.dejonge at tudelft.nl  Mon Jan 18 11:48:35 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jan 2010 10:48:35 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20519 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001181048.o0IAmZHR009477@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2010-01-18 10:48:34 +0000 (Mon, 18 Jan 2010)
New Revision: 20519

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20519&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java

Log:
bug fix: endless loop in notes.str

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2010-01-15 17:08:26 UTC (rev 20518)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2010-01-18 10:48:34 UTC (rev 20519)
@@ -52,7 +52,7 @@
     public void readRecoverToken(SGLR myParser, boolean keepRecoveredLines) throws IOException{  
         if (hasFinishedRecoverTokens()) {             
             if(myParser.currentToken!=SGLR.EOF){                
-                if(getIndexLastToken()>0 && recoverTokenStream[getIndexLastToken()]!=SGLR.EOF){
+                if(getIndexLastToken()>=0 && recoverTokenStream[getIndexLastToken()]!=SGLR.EOF){
                     myParser.readNextToken();
                     indentHandler.updateIndentation(myParser.currentToken);
                     keepToken((char)myParser.currentToken);   



From L.C.L.Kats at tudelft.nl  Tue Jan 19 11:11:36 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 19 Jan 2010 10:11:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20520 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.stratego/lib
	org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <201001191011.o0JABaeR029175@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-19 10:11:36 +0000 (Tue, 19 Jan 2010)
New Revision: 20520

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20520&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str

Log:
Fixed an infinite loop in the reference resolver, found by Danny.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.str	2010-01-18 10:48:34 UTC (rev 20519)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib/editor-common.str	2010-01-19 10:11:36 UTC (rev 20520)
@@ -6,7 +6,7 @@
     position -> position'
     where
       ast'  := <at-position(!<id>{MARKER()}|position)> ast;
-      ast'' := <topdown(repeat(preserve-annos(desugar)))> ast';
+      ast'' := <topdown(repeat(preserve-annos({?x; desugar; not(?x)})))> ast';
       position' := <position-of-term({?_{a*}; <one(?MARKER())> a*})> ast''
    
   at-position(s|position):

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2010-01-18 10:48:34 UTC (rev 20519)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-example-trans.str	2010-01-19 10:11:36 UTC (rev 20520)
@@ -207,7 +207,7 @@
     position -> position'
     where
       ast'  := <at-position(!<id>${$MARKER()$}$|position)> ast;
-      ast'' := <topdown(repeat(preserve-annos(desugar)))> ast';
+      ast'' := <topdown(repeat(preserve-annos(${$?x; desugar; not(?x)$}$)))> ast';
       position' := <position-of-term({$[{?_{a*}; <one(?MARKER())> a*}]})> ast''
    
   at-position(s|position):



From L.C.L.Kats at tudelft.nl  Tue Jan 19 11:13:51 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 19 Jan 2010 10:13:51 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20521 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.stratego/editor
	org.strategoxt.imp.editors.stratego/trans org.strategoxt.imp.feature
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.updatesite
Message-ID: <201001191013.o0JADpoB029186@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-19 10:13:50 +0000 (Tue, 19 Jan 2010)
New Revision: 20521

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20521&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/StartupDescriptorLoader.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
- Avoid spawning (way too) many threads when loading a new editor project
- Avoid locking in some cases in order to eliminate deadlocks
- Improved content completion performance (turns out that after Stratego was done in <<1 second, the Java code was taking 2 seconds to verify uniqueness of all proposals...)

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-19 10:13:50 UTC (rev 20521)
@@ -11,15 +11,18 @@
   
   completion lexical : [a-zA-Z0-9\'\-\_]+
 
-/* TODO: re-enable completion triggers in a later release
-  completion trigger : "-> [A-Za-z]"
-  completion trigger : "([^A-Za-z0-9_]) <" // trigger for '-> <' but not for 'a < b'
+// TODO: enable completion triggers in a later release?
+  completion trigger : "->[ \n\t]*[A-Za-z]"
+  completion trigger : "([^A-Za-z0-9_ ]) ?<" // trigger for ':= <' but not for 'a < b'
+  completion trigger : "(where|with)[ \n\t]*<"
+  completion trigger : "\[<"
   completion trigger : "\n ?<"
   completion trigger : "!"
   completion trigger : "\?"
   completion trigger : "\{\| "
-  // completion trigger : ":= [A-Za-z]" // may not always work
-*/
+  completion trigger : ":[ \n\t]*[A-Za-z]"
+  completion trigger : ":= [A-Za-z]"
+
                                                                                    
   reference _ : editor-resolve
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-19 10:13:50 UTC (rev 20521)
@@ -26,17 +26,17 @@
       end
     with
       <basic-desugar-top> ast;
-      with(<declare-globals> Import("libstratego-lib"));
-      ast' := <analyze-ast-local>
- 
+      declare-globals-top;
+      ast' := <declare-bodies-top>;
+      rules(
+        DecoratedAst := ast'
+      )
+
   analyze-ast-local =
-    if not(NoAnalysis) then // TODO: only do this if no analysis done before
+    if not(bagof-Declaration => [_ | _]) then // TODO: nicer "has done global analysis" check
       declare-globals-top
     end;
-    declare-bodies-top => ast';
-    rules(
-      DecoratedAst := ast'
-    )
+    declare-bodies-top
 
 rules // Projections and lookup
 
@@ -143,7 +143,10 @@
 rules // Declare globals
 
   declare-globals-top =
-    alltd(declare-globals)
+    if not(NoAnalysis) then
+      with(<declare-globals> Import("libstratego-lib"));
+      alltd(declare-globals)
+    end
 
   declare-globals:
     SDefT(x, s*, t*, s) -> SDefT(x', s*, t*, s')
@@ -179,7 +182,7 @@
       <IsImported> x
     <+
       rules(IsImported: x);
-      dr-ignore-state(
+      {| MissingImports:
         <import-library> x;
         declare-globals-top;
         rules(
@@ -192,8 +195,7 @@
         rules(
           MissingIndirectImports: x -> <bagof-MissingImports>
         )
-      | "MissingImports"
-      )
+      |}
     <+
       rules(
         MissingImports :+= x
@@ -529,10 +531,10 @@
     where
       signature-of; one(?COMPLETION(prefix)) <+ one(?COMPLETION(prefix))
     with
-      all-signatures := <all-keys-DeclareCookie>;
+      all-signatures := <filter-by-prefix(|prefix)> <all-keys-DeclareCookie>;
       switch !completion
         case ?Var(_):
-          all-signatures' := <filter(?(_, _))> all-signatures
+          all-signatures' := <try(filter(?(_, _)); not([]))> all-signatures
         case ?SVar(_):
           all-signatures' := <filter(?(_, _, _))> all-signatures
         case ?DynRuleScopeId(_):
@@ -542,12 +544,30 @@
         otherwise: // unknown context
           all-signatures' := <filter(not(is-congruence-signature))> all-signatures
       end;
-      all-signatures'' := <filter(one(string-starts-with(|prefix); not("")))> all-signatures';
-      proposals := <map(signature-to-proposal)> all-signatures'';
+      proposals := <map(signature-to-proposal)> all-signatures';
       rules(
         ContentProposals := proposals
       )
   
+  propose-completion:
+    Rule(lhs, rhs @ Var(COMPLETION(_)), _) -> proposals
+    where
+      <not(oncetd(?RootApp(_) + ?App(_, _)))> lhs
+    with
+      lhs'      := <topdown(try(\As(_, e) -> e\))> lhs;
+      proposals := [([<pp-stratego-string> lhs'], "") | <propose-completion> rhs];
+      rules(
+        ContentProposals := proposals
+      )
+  
+  /*do-something:
+    Some(Some(a @ _)) -> <id> 1
+    where
+      <*/
+  
+  filter-by-prefix(|prefix) =
+    filter(one(string-starts-with(|prefix); not(?"")))
+  
   signature-to-proposal:
     (x, 0) -> ([x | parentheses], "")
     with

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-19 10:13:50 UTC (rev 20521)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.3.0"
+      version="0.3.1"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/DynamicDescriptorLoader.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -1,13 +1,17 @@
 package org.strategoxt.imp.metatooling.loading;
 
-import static org.eclipse.core.resources.IMarker.*;
-import static org.eclipse.core.resources.IResourceDelta.*;
+import static org.eclipse.core.resources.IMarker.SEVERITY_ERROR;
+import static org.eclipse.core.resources.IResourceDelta.CONTENT;
+import static org.eclipse.core.resources.IResourceDelta.MOVED_FROM;
+import static org.eclipse.core.resources.IResourceDelta.MOVED_TO;
+import static org.eclipse.core.resources.IResourceDelta.REPLACED;
 
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.Queue;
 import java.util.Set;
 
 import org.eclipse.core.resources.IFile;
@@ -22,6 +26,7 @@
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.jobs.Job;
+import org.spoofax.ArrayDeque;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.metatooling.building.DynamicDescriptorBuilder;
 import org.strategoxt.imp.runtime.Environment;
@@ -38,14 +43,21 @@
  */
 public class DynamicDescriptorLoader implements IResourceChangeListener {
 	
+	private static final int SCHEDULE_DELAY = 300;
+	
 	private static final DynamicDescriptorLoader instance = new DynamicDescriptorLoader();
 	
+	private final Queue<IResourceChangeEvent> asyncEventQueue =
+		new ArrayDeque<IResourceChangeEvent>();
+	
 	private final Set<String> asyncIgnoreOnce =
 		Collections.synchronizedSet(new HashSet<String>());
 	
 	private final AstMessageHandler asyncMessageHandler =
 		new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
 	
+	private boolean isAsyncEventHandlerActive;
+	
 	private DynamicDescriptorLoader() {
 		// use getInstance() instead
 	}
@@ -86,20 +98,41 @@
 		if (event.getType() == IResourceChangeEvent.POST_CHANGE && isSignificantChange(event.getDelta())) {
 			// TODO: aggregate multiple events into a single job?
 			//       this seems to spawn way to many threads
-			Job job = new WorkspaceJob("Updating editor descriptor runtime") {
-				@Override
-				public IStatus runInWorkspace(IProgressMonitor monitor) {
-					// TODO: Finer-grained locking? (that seems to lead to deadlocks)
-					synchronized (Environment.getSyncRoot()) {
+			synchronized (asyncEventQueue) {
+				asyncEventQueue.add(event);
+				if (!isAsyncEventHandlerActive)
+					startEventHandler(event);
+			}
+		}
+	}
+
+	private void startEventHandler(IResourceChangeEvent event) {
+		isAsyncEventHandlerActive = true;
+		Job job = new WorkspaceJob("Updating editor descriptor runtime") {
+			@Override
+			public IStatus runInWorkspace(IProgressMonitor monitor) {
+				// TODO: Finer-grained locking? (that seems to lead to deadlocks)
+				synchronized (Environment.getSyncRoot()) {
+					for (;;) {
+	 					IResourceChangeEvent event;
+						synchronized (asyncEventQueue) {
+							if (asyncEventQueue.isEmpty()) {
+								isAsyncEventHandlerActive = false;
+								return Status.OK_STATUS;
+							}
+							event = asyncEventQueue.remove();
+						}
+						// (monitor updates acquire display lock)
 						monitor.beginTask("Scanning workspace", IProgressMonitor.UNKNOWN);
 						postResourceChanged(event.getDelta(), monitor);
-						return Status.OK_STATUS;
 					}
 				}
-			};
-			job.setRule(event.getResource());
-			job.schedule();
-		}
+			}
+		};
+		// UNDONE: locking the workspace is a clear deadlock risk
+		//         (so locking small parts is likely almost as bad)
+		// job.setRule(/*event.getResource()*/ResourcesPlugin.getWorkspace().getRoot());
+		job.schedule(SCHEDULE_DELAY);
 	}
 	
 	public void postResourceChanged(IResourceDelta delta, IProgressMonitor monitor) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/StartupDescriptorLoader.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/StartupDescriptorLoader.java	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/loading/StartupDescriptorLoader.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -55,19 +55,19 @@
 	*/
 	
 	private static void loadAllServices() {
-		for (final IProject project : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
-			if (project.isOpen()) {
-				try {
-					synchronized (Environment.getSyncRoot()) {
+		synchronized (Environment.getSyncRoot()) {
+			for (final IProject project : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
+				if (project.isOpen()) {
+					try {
 						project.accept(new IResourceVisitor() {
 							public boolean visit(IResource resource) throws CoreException {
 								loader.updateResource(resource, new NullProgressMonitor(), true);
 								return true;
 							}
 						});
+					} catch (CoreException e) {
+						Environment.logException("Error loading descriptors for project " + project.getName(), e);
 					}
-				} catch (CoreException e) {
-					Environment.logException("Error loading descriptors for project " + project.getName(), e);
 				}
 			}
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -99,7 +99,8 @@
 	// ACCESSORS
 	
 	public static boolean isUIThread() {
-		return Display.getCurrent() != null;
+		// return Display.getCurrent() != null; // may exist in multiple threads
+		return PlatformUI.getWorkbench().getActiveWorkbenchWindow() != null;
 	}
 
 	public UniversalEditor getEditor() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -71,6 +71,8 @@
 	
 	private static Thread mainThread;
 	
+	private static boolean isInitialized;
+	
 	static {
 		wrappedFactory = new UnsharedWrappedATermFactory();
 		factory = new PureFactory();
@@ -80,15 +82,26 @@
 		unmanagedTables = Collections.synchronizedMap(new HashMap<String, ParseTableProvider>());
 		wrappedAstNodeFactory = new WrappedAstNodeFactory();
 		atermConverter = new ATermConverter(factory, wrappedAstNodeFactory, true);
-		// TODO: report missing -Xss option; only complain about server mode in meta editor
-		if (!isServerMode()) logWarning("Ensure eclipse is started with -vmwargs -server for best performance");
+		checkJVMOptions();
 	}
-	
-	private static boolean isServerMode() {
+
+	private static void checkJVMOptions() {
+		boolean ssOption = false;
+		boolean serverOption = false;
+		boolean mxOption = false;
+		
 		for (String arg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {
-			if (arg.startsWith("-server")) return true;
+			if (arg.startsWith("-server")) serverOption = true;
+			if (arg.startsWith("-Xss") || arg.startsWith("-ss")) ssOption = true;
+			if (arg.startsWith("-Xmx") || arg.startsWith("-mx")) mxOption = true;
 		}
-		return false;
+		
+		if (!serverOption)
+			Environment.logWarning("Make sure Eclipse is started with -vmwargs -server (can be set in eclipse.ini) for best performance");
+		if (!mxOption)
+			Environment.logWarning("Make sure Eclipse is started with -vmargs -Xmx 512m (can be set in eclipse.ini) for at least 512 MiB heap space");
+		if (!ssOption)
+			Environment.logWarning("Make sure Eclipse is started with -vmargs -Xss 8m (can be set in eclipse.ini) for an 8 MiB stack size");
 	}
 	
 	// TODO: Split up shared and non-shared environment entities?
@@ -101,6 +114,10 @@
 	 */
 	public static Object getSyncRoot() {
 		// TODO: disallow main thread locking everywhere except in the startup loader?
+		if (!isInitialized && EditorState.isUIThread())
+			isInitialized = true;
+		else if (!Thread.holdsLock(Environment.class) && EditorState.isUIThread())
+			Environment.logWarning("Acquired environment lock from main thread");
 		return Environment.class;
 	}
 	
@@ -110,7 +127,9 @@
 	
 	private static void initMainThread() {
 		Thread thread = Thread.currentThread();
-		if (thread.getName().equals("main"))
+		// TODO: is main thread == EditorState.isUIThread() thread?
+		//       because the OSX main thread seems to be "Thread-0"
+		if ("main".equals(thread.getName()) || EditorState.isUIThread())
 			mainThread = thread;
 	}
 	
@@ -152,11 +171,11 @@
 	
 	// ENVIRONMENT ACCESS AND MANIPULATION
 	
-	public static synchronized HybridInterpreter createInterpreter() {
+	public static HybridInterpreter createInterpreter() {
 		return createInterpreter(false);
 	}
 
-	public static synchronized HybridInterpreter createInterpreter(boolean noGlobalLock) {
+	public static HybridInterpreter createInterpreter(boolean noGlobalLock) {
 		HybridInterpreter result =	noGlobalLock
 			? new HybridInterpreter(getTermFactory())
 			: new HybridInterpreter(getTermFactory()) {
@@ -194,7 +213,7 @@
 		return result;
 	}
 	
-	public static synchronized ParseTable registerParseTable(Language language, InputStream parseTable)
+	public static ParseTable registerParseTable(Language language, InputStream parseTable)
 			throws IOException, InvalidParseTableException {
 		
 		Debug.startTimer();
@@ -280,7 +299,7 @@
 	
 	public static void logWarning(String message) {
 		if (Debug.ENABLED) STDERR.println("Warning: " + message);
-		Status status = new Status(IStatus.WARNING, RuntimeActivator.PLUGIN_ID, 0, message, null);
+		Status status = new Status(IStatus.WARNING, RuntimeActivator.PLUGIN_ID, 0, message, new RuntimeException(message));
 		RuntimeActivator activator = RuntimeActivator.getInstance();
 		if (activator != null) activator.getLog().log(status);
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -51,6 +51,7 @@
 		basePath = basePath.removeLastSegments(2); // strip off /include/filename.main.esv
 		Debug.log("Loading editor services for ", descriptor.getName());
 		
+		// TODO: Optimize - lazily load parse table using ParseTableProvider?
 		Descriptor result = load(descriptor.getContents(true), null, basePath);
 		assert source.getName().endsWith(".main.esv");
 		oldDescriptors.put(source, result);
@@ -96,12 +97,10 @@
 			init();
 			input = new PushbackInputStream(input, 100);
 			
-			synchronized (Environment.getSyncRoot()) {
-				IStrategoAppl document = tryReadTerm((PushbackInputStream) input);
-				if (document == null)
-					document = (IStrategoAppl) descriptorParser.parse(input, "(descriptor)").getTerm();
-				return new Descriptor(document);
-			}
+			IStrategoAppl document = tryReadTerm((PushbackInputStream) input);
+			if (document == null)
+				document = (IStrategoAppl) descriptorParser.parse(input, "(descriptor)").getTerm();
+			return new Descriptor(document);
 		} catch (SGLRException e) {
 			throw new BadDescriptorException("Could not parse descriptor file", e);
 		}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicTokenColorer.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -10,7 +10,6 @@
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.widgets.Display;
 import org.strategoxt.imp.runtime.EditorState;
-import org.strategoxt.imp.runtime.Environment;
 
 /**
  * Dynamic proxy class to a token colorer.
@@ -31,7 +30,7 @@
 
 	public DynamicTokenColorer() {
 		super(ITokenColorer.class);
-		if (Environment.isMainThread())
+		if (EditorState.isUIThread())
 			getGrayColor(); // initialize color while we're in the SWT main thread
 	}
 	

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/JSGLRI.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -112,7 +112,7 @@
 		try {
 			return parser.parse(inputStream, getStartSymbol());
 		} catch (FilterException e) {
-			if (parser.getDisambiguator().getFilterPriorities()) {
+			if (e.getCause() == null && parser.getDisambiguator().getFilterPriorities()) {
 				Environment.logException("Parse filter failure - disabling priority filters and trying again", e);
 				getDisambiguator().setFilterPriorities(false);
 				try {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -0,0 +1,93 @@
+/**
+ * 
+ */
+package org.strategoxt.imp.runtime.services;
+
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+
+import org.eclipse.imp.editor.SourceProposal;
+import org.eclipse.jface.text.IDocument;
+import org.eclipse.jface.text.Region;
+import org.eclipse.jface.text.contentassist.ICompletionProposalExtension6;
+import org.eclipse.jface.viewers.StyledString;
+import org.eclipse.jface.viewers.StyledString.Styler;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.graphics.TextStyle;
+import org.spoofax.interpreter.terms.IStrategoList;
+
+/**
+ * A content proposal that selects the lexical at the cursor location.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class ContentProposal extends SourceProposal implements ICompletionProposalExtension6 {
+	
+	private final ContentProposer proposer;
+	
+	private final IStrategoList newTextParts;
+	
+	public ContentProposal(ContentProposer proposer, String proposal, String newText, String prefix, Region region,
+			int cursorLoc, String addlInfo) {
+		super(proposal, newText, prefix, region, cursorLoc, addlInfo);
+		this.proposer = proposer;
+		this.newTextParts = null;
+	}
+
+	public ContentProposal(ContentProposer proposer, String proposal, String newText, String prefix, Region region, 
+			IStrategoList newTextParts, String addlInfo) {
+		super(proposal, newText, prefix, region, addlInfo);
+		this.proposer = proposer;
+		this.newTextParts = newTextParts;
+	}
+
+	@Override
+	public Point getSelection(IDocument document) {
+		if (newTextParts == null)
+			return super.getSelection(document);
+		else
+			return proposalPartsToSelection(newTextParts, getRange().getOffset() - getPrefix().length());
+	}
+
+	private Point proposalPartsToSelection(IStrategoList proposalParts, int offset) {
+		int i = asJavaString(proposalParts.head()).length();
+		for (IStrategoList cons = proposalParts.tail(); !cons.isEmpty(); cons = cons.tail()) {
+			String part = asJavaString(cons.head());
+			if (proposer.getCompletionLexical().matcher(part).matches())
+				return new Point(offset + i, part.length());
+			i += part.length();
+		}
+		return new Point(offset + i, 0);
+	}
+	
+	@Override
+	public void apply(IDocument document) {
+		super.apply(document);
+		proposer.getObserver().setRushNextUpdate(true);
+		proposer.getParser().getErrorHandler().setRushNextUpdate(true);
+		proposer.getParser().scheduleParserUpdate(0, false);
+	}
+
+	public StyledString getStyledDisplayString() {
+		return new StyledString(getDisplayString(), new ContentProposalStyler());
+	}
+	
+	private class ContentProposalStyler extends Styler {
+
+		@Override
+		public void applyStyles(TextStyle style) {
+			// TODO: styles for keywords, identifiers, and other
+			style.foreground = style.foreground;
+		}
+		
+	}
+	
+	@Override
+	public boolean equals(Object obj) {
+		return obj instanceof ContentProposal && ((ContentProposal) obj).getDisplayString().equals(getDisplayString());
+	}
+	
+	@Override
+	public int hashCode() {
+		return getDisplayString().hashCode();
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -1,7 +1,10 @@
 package org.strategoxt.imp.runtime.services;
 
-import static org.spoofax.interpreter.core.Tools.*;
-import static org.spoofax.interpreter.terms.IStrategoTerm.*;
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.termAt;
+import static org.spoofax.interpreter.terms.IStrategoTerm.LIST;
+import static org.spoofax.interpreter.terms.IStrategoTerm.STRING;
+import static org.spoofax.interpreter.terms.IStrategoTerm.TUPLE;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -16,19 +19,16 @@
 import lpg.runtime.IToken;
 
 import org.eclipse.imp.editor.ErrorProposal;
-import org.eclipse.imp.editor.SourceProposal;
 import org.eclipse.imp.parser.IParseController;
 import org.eclipse.imp.services.IContentProposer;
-import org.eclipse.jface.text.IDocument;
 import org.eclipse.jface.text.ITextViewer;
 import org.eclipse.jface.text.Region;
 import org.eclipse.jface.text.contentassist.ICompletionProposal;
-import org.eclipse.swt.graphics.Point;
-import org.eclipse.swt.widgets.Display;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoString;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.jsglr.SGLRException;
+import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
 import org.strategoxt.imp.runtime.parser.JSGLRI;
@@ -63,6 +63,8 @@
 	private static final String COMPLETION_CONSTRUCTOR = "COMPLETION";
 	
 	private static final String COMPLETION_UNKNOWN = "NOCONTEXT";
+
+	private static final long REINIT_PARSE_DELAY = 4000;
 	
 	private final StringBuilder proposalBuilder = new StringBuilder();
 	
@@ -128,6 +130,18 @@
 		
 		return results;
     }
+	
+	protected Pattern getCompletionLexical() {
+		return completionLexical;
+	}
+	
+	protected SGLRParseController getParser() {
+		return parser;
+	}
+	
+	protected StrategoObserver getObserver() {
+		return observer;
+	}
 
 	private RootAstNode constructAst(SGLRParseController controller, int offset, String document) {
 		this.parser = controller;
@@ -147,23 +161,30 @@
 		JSGLRI parser = controller.getParser();
 		RootAstNode result;
 		
-		controller.scheduleParserUpdate(DynamicParseController.REINIT_PARSE_DELAY, true);
+		controller.scheduleParserUpdate(REINIT_PARSE_DELAY, true);
+		Debug.startTimer();
 		controller.getParseLock().lock();
+		Debug.stopTimer("Completion acquired parse lock");
 		try {
 			if (completionFunction == null && controller.getCurrentAst() != null) {
 				// Don't reparse for keyword completion
 				result = controller.getCurrentAst().cloneIgnoreTokens();
 			} else {
-				result = parser.parse(document.toCharArray(), controller.getPath().toPortableString());
+				Debug.startTimer();
+				try {
+					result = parser.parse(document.toCharArray(), controller.getPath().toPortableString());
+				} finally {
+					Debug.stopTimer("Completion parsed");
+				}
 				lastParserAst = controller.getCurrentAst();
 				lastCompletionAst = result.cloneIgnoreTokens();
 			}
 		} catch (SGLRException e) {
 			Environment.logException("Could not reparse input for content completion", e);
-			result = forceUseMostRecentAst(controller, offset, document);
+			result = forceUseOldAst(controller, offset, document);
 		} catch (IOException e) {
 			Environment.logException("Could not reparse input for content completion", e);
-			result = forceUseMostRecentAst(controller, offset, document);
+			result = forceUseOldAst(controller, offset, document);
 		} finally {
 			controller.getParseLock().unlock();
 		}
@@ -175,8 +196,6 @@
 			return Environment.getTermFactory().makeList();
 		} else {
 			// TODO: is using this lock in the main thread a deadlock risk?
-			//       and does syncExec mitigate that risk?
-			// TODO: apply syncExec in other cases where a lock is used in the main thread?
 			class Runner implements Runnable {
 				IStrategoTerm result;
 				public void run() {
@@ -186,32 +205,34 @@
 				}
 			}
 			Runner runner = new Runner();
-			Display.getCurrent().syncExec(runner);
+			
+			// UNDONE: causes deadlock with updater thread
+			//         (which acquires the display lock to display monitor updates)
+			//if (EditorState.isUIThread()) {
+			//	Display.getCurrent().syncExec(runner);	
+			//} else {
+				runner.run();
+			//}
 			return runner.result;
 		}
 	}
 	
-	private ICompletionProposal[] toProposals(IStrategoTerm term, String document, int offset) {
-		if (term == null)
+	private ICompletionProposal[] toProposals(IStrategoTerm proposals, String document, int offset) {
+		Debug.startTimer();
+		if (proposals == null)
 			return createErrorProposal("No proposals available - completion strategy failed", offset);
 		
 		String error = "No proposals available - '" + completionFunction
 				+ "' did not return a ([proposal], description) list";
-		Set<IStrategoTerm> resultTerms = new HashSet<IStrategoTerm>(term.getSubtermCount());
 
-		if (term.getTermType() != LIST)
+		if (proposals.getTermType() != LIST)
 			return createErrorProposal(error, offset);
 		
-		// Create a set first, removing duplicates
-		for (IStrategoList cons = (IStrategoList) term; !cons.isEmpty(); cons = cons.tail()) {
-			IStrategoTerm proposal = cons.head();
-			resultTerms.add(proposal);
-		}
-		
 		Region offsetRegion = new Region(offset, 0);
 		Set<ICompletionProposal> results = getKeywordProposals(document, currentCompletionPrefix, offsetRegion, offset);
 
-		for (IStrategoTerm proposal : resultTerms) {
+		for (IStrategoList cons = (IStrategoList) proposals; !cons.isEmpty(); cons = cons.tail()) {
+			IStrategoTerm proposal = cons.head();
 			if (proposal.getTermType() != TUPLE || proposal.getSubtermCount() != 2
 					|| termAt(proposal, 0).getTermType() != LIST
 					|| termAt(proposal, 1).getTermType() != STRING)
@@ -221,7 +242,7 @@
 			if (newTextParts.isEmpty() || !newText.startsWith(currentCompletionPrefix))
 				continue;
 			IStrategoString description = termAt(proposal, 1);
-			results.add(new SPISourceProposal(newText, newText, currentCompletionPrefix, offsetRegion, newTextParts, description.stringValue())); 
+			results.add(new ContentProposal(this, newText, newText, currentCompletionPrefix, offsetRegion, newTextParts, description.stringValue())); 
 		}
 		
 		return toSortedArray(results);
@@ -247,17 +268,6 @@
 		}
 		return proposalBuilder.toString();
 	}
-
-	private Point proposalPartsToSelection(IStrategoList proposalParts, int offset) {
-		int i = asJavaString(proposalParts.head()).length();
-		for (IStrategoList cons = proposalParts.tail(); !cons.isEmpty(); cons = cons.tail()) {
-			String part = asJavaString(cons.head());
-			if (completionLexical.matcher(part).matches())
-				return new Point(offset + i, part.length());
-			i += part.length();
-		}
-		return new Point(offset + i, 0);
-	}
 	
 	private Set<ICompletionProposal> getKeywordProposals(String document, String prefix, Region offsetRegion, int offset) {
 		Set<ICompletionProposal> results = new HashSet<ICompletionProposal>();
@@ -267,7 +277,7 @@
 		for (String proposal : keywords) {
 			Matcher matcher = completionLexical.matcher(proposal);
 			if (!specialCharsOnly && proposal.regionMatches(true, 0, prefix, 0, prefix.length())) {
-				results.add(new SPISourceProposal(proposal, proposal, prefix, offsetRegion,
+				results.add(new ContentProposal(this, proposal, proposal, prefix, offsetRegion,
 						offset + proposal.length() - prefix.length(), ""));
 			} else if (matcher.find() && (matcher.start() > 0 || matcher.end() < proposal.length())) {
 				// Handle completion literals with special characters, like "(disabled)"
@@ -279,7 +289,7 @@
 						String subProposal = proposal.substring(matcher.start());
 						if (!specialCharsOnly) results.clear();
 						specialCharsOnly = true;
-						results.add(new SPISourceProposal(proposal, subProposal, prefix,
+						results.add(new ContentProposal(this, proposal, subProposal, prefix,
 								offsetRegion, offset + matcher.end() - matcher.start() - prefix.length(), ""));
 						continue proposals;
 					}
@@ -299,14 +309,18 @@
 	private RootAstNode tryReusePreviousAst(int offset, String document) {
 		if (offset == 0) return null;
 		if (lastCompletionNode != null && lastDocument.length() == document.length() - 1) {
+			// Reuse document, ignoring latest typed character
 			String newCharacter = document.substring(offset - 1, offset);
 			String previousDocument = lastDocument.substring(0, offset - 1) + newCharacter + lastDocument.substring(offset - 1);
 			if (document.equals(previousDocument))
 				return reusePreviousAst(document, lastCompletionPrefix + newCharacter);
 		} else if (lastCompletionNode != null && lastCompletionPrefix.length() > 0 && lastDocument.length() == document.length() + 1) {
+			// Reuse document, ignoring previously typed character
 			String previousDocument = lastDocument.substring(0, offset) + lastDocument.substring(offset + 1);
 			if (document.equals(previousDocument))
 				return reusePreviousAst(document, lastCompletionPrefix.substring(0, lastCompletionPrefix.length() - 1));
+		} else if (lastCompletionNode != null && lastDocument.equals(document)) {
+			return reusePreviousAst(document, lastCompletionPrefix);
 		}
 		lastDocument = document;
 		return null;
@@ -325,19 +339,23 @@
 
 	private String sanitizePrefix(String prefix) {
 		Matcher matcher = completionLexical.matcher(prefix);
-		if (matcher.lookingAt()) {
+		if (prefix.length() == 0) {
+			return "";
+		} else if (matcher.lookingAt()) {
 			return prefix.substring(0, matcher.end());
 		} else {
 			return null;
 		}
 	}
 	
-	private RootAstNode forceUseMostRecentAst(SGLRParseController parser, int offset, String document) {
+	private RootAstNode forceUseOldAst(SGLRParseController parser, int offset, String document) {
 		if (parser.getCurrentAst() != lastParserAst) { // parser has a more recent AST
 			lastParserAst = parser.getCurrentAst();
 			lastCompletionAst = parser.getCurrentAst();
 			currentCompletionNode = null;
 		} else {
+			if (currentCompletionNode == null)
+				return null;
 			replacePrefix(currentCompletionNode, getPrefix(offset, document));
 		}
 		return lastCompletionAst;
@@ -453,41 +471,4 @@
 		return;
 	}
 	
-	/**
-	 * A content proposal that selects the lexical at the cursor location.
-	 * 
-	 * @author Lennart Kats <lennart add lclnet.nl>
-	 */
-	private class SPISourceProposal extends SourceProposal {
-		
-		private final IStrategoList newTextParts;
-		
-		public SPISourceProposal(String proposal, String newText, String prefix, Region region,
-				int cursorLoc, String addlInfo) {
-			super(proposal, newText, prefix, region, cursorLoc, addlInfo);
-			this.newTextParts = null;
-		}
-
-		public SPISourceProposal(String proposal, String newText, String prefix, Region region, 
-				IStrategoList newTextParts, String addlInfo) {
-			super(proposal, newText, prefix, region, addlInfo);
-			this.newTextParts = newTextParts;
-		}
-
-		@Override
-		public Point getSelection(IDocument document) {
-			if (newTextParts == null)
-				return super.getSelection(document);
-			else
-				return proposalPartsToSelection(newTextParts, getRange().getOffset() - getPrefix().length());
-		}
-		
-		@Override
-		public void apply(IDocument document) {
-			super.apply(document);
-			observer.setRushNextUpdate(true);
-			parser.getErrorHandler().setRushNextUpdate(true);
-			parser.scheduleParserUpdate(0, false);
-		}
-	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposerListener.java	2010-01-19 10:13:50 UTC (rev 20521)
@@ -67,14 +67,17 @@
 	
 	private boolean matchesPatterns(IDocument document, int offset) throws BadLocationException {
 		for (Pattern pattern : patterns) {
+			boolean foundNewLine = false;
 			for (int startOffset = offset; startOffset >= 0; startOffset--) {
 				String substring = document.get(startOffset, offset - startOffset + 1);
 				if (pattern.matcher(substring).matches()) {
 					return true;
 				}
 				char c = substring.charAt(0);
-				if (c == '\n' || c == '\r')
-					break; // looked back far enough
+				if (c == '\n' /*|| c == '\r'*/) {
+					if (foundNewLine) break; // looked back far enough
+					foundNewLine = true;
+				}
 			}
 		}
 		return false;

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-01-19 10:11:36 UTC (rev 20520)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-01-19 10:13:50 UTC (rev 20521)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.3.0.jar" id="org.strategoxt.imp" version="0.3.0">
+   <feature url="features/org.strategoxt.imp_0.3.1.jar" id="org.strategoxt.imp" version="0.3.1">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP"/>



From L.C.L.Kats at tudelft.nl  Tue Jan 19 13:47:09 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 19 Jan 2010 12:47:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20522 - LennartKats -
	in spoofax-imp/trunk: org.eclipse.imp
	org.strategoxt.imp.editors.stratego/editor
	org.strategoxt.imp.editors.stratego/trans org.strategoxt.imp.runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201001191247.o0JCl9G8031225@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-19 12:47:08 +0000 (Tue, 19 Jan 2010)
New Revision: 20522

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20522&view=rev

Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java

Log:
Added some font/color styles to content completion.

Changes:

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-19 10:13:50 UTC (rev 20521)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-19 12:47:08 UTC (rev 20522)
@@ -218,7 +218,15 @@
  
              fLanguageServiceManager.getParseController().initialize(filePath, srcProject, fAnnotationCreator);
          } catch (ModelException e) {
-@@ -1771,7 +1783,8 @@
+@@ -1491,6 +1503,7 @@
+             ContentAssistant ca= new ContentAssistant();
+             ca.setContentAssistProcessor(fServiceControllerManager.getCompletionProcessor(), IDocument.DEFAULT_CONTENT_TYPE);
+             ca.setInformationControlCreator(getInformationControlCreator(sourceViewer));
++            ca.enableColoredLabels(true); // LK
+             return ca;
+         }
+ 
+@@ -1771,7 +1784,8 @@
                  if (fServiceControllerManager.getPresentationController() != null) {
  //                  System.out.println("Scheduling repair for damage to region " + damage.getOffset() + ":" + damage.getLength() + " in doc of length " + fDocument.getLength());
                      fServiceControllerManager.getPresentationController().damage(damage);
@@ -228,7 +236,7 @@
  //                      System.out.println("** Forcing repair for hyperlink damage to region " + damage.getOffset() + ":" + damage.getLength() + " in doc of length " + fDocument.getLength());
                          fServiceControllerManager.getPresentationController().update(fLanguageServiceManager.getParseController(), fProgressMonitor);
                      }
-@@ -1845,6 +1858,7 @@
+@@ -1845,6 +1859,7 @@
      }
  
      public IParseController getParseController() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-19 10:13:50 UTC (rev 20521)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-References.esv	2010-01-19 12:47:08 UTC (rev 20522)
@@ -11,7 +11,7 @@
   
   completion lexical : [a-zA-Z0-9\'\-\_]+
 
-// TODO: enable completion triggers in a later release?
+/* TODO: enable completion triggers in a later release?
   completion trigger : "->[ \n\t]*[A-Za-z]"
   completion trigger : "([^A-Za-z0-9_ ]) ?<" // trigger for ':= <' but not for 'a < b'
   completion trigger : "(where|with)[ \n\t]*<"
@@ -22,8 +22,8 @@
   completion trigger : "\{\| "
   completion trigger : ":[ \n\t]*[A-Za-z]"
   completion trigger : ":= [A-Za-z]"
-
-                                                                                   
+*/
+                                                                                 
   reference _ : editor-resolve
 
   hover _ : editor-hover
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-19 10:13:50 UTC (rev 20521)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-19 12:47:08 UTC (rev 20522)
@@ -560,11 +560,6 @@
         ContentProposals := proposals
       )
   
-  /*do-something:
-    Some(Some(a @ _)) -> <id> 1
-    where
-      <*/
-  
   filter-by-prefix(|prefix) =
     filter(one(string-starts-with(|prefix); not(?"")))
   
@@ -585,7 +580,7 @@
       t* := <separate-by(|", ")> <copy> (n, "t")
 
   signature-to-proposal:
-    (x, 0, 0) -> <signature-to-proposal> (x, 0)
+    (x, 0, 0) -> ([x, ""], "")
 
   signature-to-proposal:
     (x, n, 0) -> ([x, "(", t*, ")"], "")

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2010-01-19 10:13:50 UTC (rev 20521)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/Spoofax-IMP (with assertions).launch	2010-01-19 12:47:08 UTC (rev 20522)
@@ -25,6 +25,7 @@
 <stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-server -Xmx1024m -Xms256m -XX:MaxPermSize=256M -Xverify:none -ea:org.strategoxt.imp.runtime.Debug -ea:org.strategoxt.imp... -ea:org.spoofax... -Xss4m"/>
 <stringAttribute key="pde.version" value="3.3"/>
 <stringAttribute key="product" value="org.eclipse.sdk.ide"/>
+<booleanAttribute key="restart" value="false"/>
 <booleanAttribute key="show_selected_only" value="false"/>
 <stringAttribute key="templateConfig" value="${target_home}/configuration/config.ini"/>
 <booleanAttribute key="tracing" value="false"/>

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2010-01-19 10:13:50 UTC (rev 20521)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/Environment.java	2010-01-19 12:47:08 UTC (rev 20522)
@@ -116,7 +116,7 @@
 		// TODO: disallow main thread locking everywhere except in the startup loader?
 		if (!isInitialized && EditorState.isUIThread())
 			isInitialized = true;
-		else if (!Thread.holdsLock(Environment.class) && EditorState.isUIThread())
+		else if (!Thread.holdsLock(Environment.class) && EditorState.isUIThread() && Debug.ENABLED)
 			Environment.logWarning("Acquired environment lock from main thread");
 		return Environment.class;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	2010-01-19 10:13:50 UTC (rev 20521)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposal.java	2010-01-19 12:47:08 UTC (rev 20522)
@@ -11,8 +11,12 @@
 import org.eclipse.jface.text.contentassist.ICompletionProposalExtension6;
 import org.eclipse.jface.viewers.StyledString;
 import org.eclipse.jface.viewers.StyledString.Styler;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.graphics.Color;
+import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.graphics.TextStyle;
+import org.eclipse.swt.widgets.Display;
 import org.spoofax.interpreter.terms.IStrategoList;
 
 /**
@@ -21,7 +25,13 @@
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class ContentProposal extends SourceProposal implements ICompletionProposalExtension6 {
+
+	private static Color identifierColor;
 	
+	private static Color keywordColor;
+	
+	private static Font keywordFont;
+	
 	private final ContentProposer proposer;
 	
 	private final IStrategoList newTextParts;
@@ -40,6 +50,10 @@
 		this.newTextParts = newTextParts;
 	}
 
+	private boolean isKeywordProposal() {
+		return newTextParts == null;
+	}
+
 	@Override
 	public Point getSelection(IDocument document) {
 		if (newTextParts == null)
@@ -75,15 +89,39 @@
 
 		@Override
 		public void applyStyles(TextStyle style) {
-			// TODO: styles for keywords, identifiers, and other
-			style.foreground = style.foreground;
+			if (isKeywordProposal()) { // keyword proposal
+				style.font = getKeywordFont();
+				style.foreground = getKeywordColor();
+			} else if (newTextParts.size() == 1) { // identifier proposal
+				style.foreground = getIdentifierColor();
+			}
 		}
 		
+		private Color getIdentifierColor() {
+			if (identifierColor == null)
+				identifierColor = new Color(Display.getCurrent(), 64, 64, 255);
+			return identifierColor;
+		}
+		
+		private Color getKeywordColor() {
+			if (keywordColor == null)
+				keywordColor = new Color(Display.getCurrent(), 127, 0, 85);
+			return keywordColor;
+		}
+		
+		private Font getKeywordFont() {
+			if (keywordFont == null)
+				keywordFont = new Font(Display.getCurrent(), "Courier new", 13, SWT.BOLD);
+			return keywordFont;
+		}
 	}
 	
 	@Override
 	public boolean equals(Object obj) {
-		return obj instanceof ContentProposal && ((ContentProposal) obj).getDisplayString().equals(getDisplayString());
+		if (!(obj instanceof ContentProposal))
+			return false;
+		ContentProposal other = (ContentProposal) obj;
+		return other.getDisplayString().equals(getDisplayString()) && isKeywordProposal() == other.isKeywordProposal();
 	}
 	
 	@Override



From L.C.L.Kats at tudelft.nl  Wed Jan 20 11:31:00 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 20 Jan 2010 10:31:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20523 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001201031.o0KAV0PI017135@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-20 10:31:00 +0000 (Wed, 20 Jan 2010)
New Revision: 20523

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20523&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/MultiBadTokenException.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/MultiBadTokenException.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/MultiBadTokenException.java	2010-01-19 12:47:08 UTC (rev 20522)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/MultiBadTokenException.java	2010-01-20 10:31:00 UTC (rev 20523)
@@ -41,7 +41,7 @@
     /**
      * @deprecated Use getCauses() instead.
      */
-    public BadTokenException getCause() {
+    public Throwable getCause() {
         if (causes != null && !causes.isEmpty()) return causes.iterator().next();
         return null;
     }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2010-01-19 12:47:08 UTC (rev 20522)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2010-01-20 10:31:00 UTC (rev 20523)
@@ -343,6 +343,7 @@
         int indexNextLine=skipLine(indexStartLine);        
         while(myParser.currentToken!=SGLR.EOF && indexNextLine>=0){            
             IndentInfo nextLine = getHistory().getLine(indexNextLine);
+            // FIXME: get nextLine may be null 
             int indentSkipPosition=nextLine.getIndentValue();
             indentShift shift=calculateShift(indentStartLine, indentSkipPosition);
             switch (shift) {



From L.C.L.Kats at tudelft.nl  Wed Jan 20 18:26:37 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 20 Jan 2010 17:26:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20524 - LennartKats - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading services
Message-ID: <201001201726.o0KHQbaa022764@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-20 17:26:36 +0000 (Wed, 20 Jan 2010)
New Revision: 20524

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20524&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:
Working on SPI-29: ATerm editors should inherit the builders of the editor they are derived from

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2010-01-20 10:31:00 UTC (rev 20523)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2010-01-20 17:26:36 UTC (rev 20524)
@@ -1,18 +1,25 @@
 package org.strategoxt.imp.runtime.dynamicloading;
 
-import static org.strategoxt.imp.runtime.dynamicloading.TermReader.*;
+import static org.spoofax.interpreter.core.Tools.termAt;
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.collectTerms;
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.cons;
+import static org.strategoxt.imp.runtime.dynamicloading.TermReader.termContents;
 
 import java.util.LinkedHashSet;
 import java.util.Set;
 
+import org.eclipse.imp.editor.UniversalEditor;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.services.BuilderMap;
 import org.strategoxt.imp.runtime.services.IBuilder;
 import org.strategoxt.imp.runtime.services.IBuilderMap;
 import org.strategoxt.imp.runtime.services.StrategoBuilder;
+import org.strategoxt.imp.runtime.services.StrategoBuilderListener;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 
 /**
@@ -27,6 +34,18 @@
 	@Override
 	public IBuilderMap create(Descriptor d, SGLRParseController controller) throws BadDescriptorException {
 		Set<IBuilder> builders = new LinkedHashSet<IBuilder>();
+		
+		if (d.getLanguage().getName().equals("ATerm"))
+			addSourceBuilders(controller, builders);
+
+		addBuilders(d, controller, builders, false);
+		
+		return new BuilderMap(builders);
+	}
+
+	private static void addBuilders(Descriptor d, SGLRParseController controller, Set<IBuilder> builders,
+			boolean operateOnATerms) throws BadDescriptorException {
+		
 		StrategoObserver feedback = d.createService(StrategoObserver.class, controller);
 		
 		for (IStrategoAppl builder : collectTerms(d.getDocument(), "Builder")) {
@@ -57,10 +76,24 @@
 				}
 			}
 			if (!meta || d.isDynamicallyLoaded())			
-				builders.add(new StrategoBuilder(feedback, caption, strategy, openEditor, realTime, cursor, persistent));
+				builders.add(new StrategoBuilder(feedback, caption, strategy, openEditor, realTime, cursor, persistent, operateOnATerms));
 		}
+	}
+
+	private static void addSourceBuilders(SGLRParseController controller, Set<IBuilder> builders)
+			throws BadDescriptorException {
 		
-		return new BuilderMap(builders);
+		if (controller.getEditor() == null || controller.getEditor().getEditor() == null)
+			return;
+		UniversalEditor editor = controller.getEditor().getEditor();
+		StrategoBuilderListener listener = StrategoBuilderListener.getListener(editor);
+		if (listener == null)
+			return;
+		UniversalEditor sourceEditor = listener.getSourceEditor();
+		if (sourceEditor == null)
+			return;
+		EditorState sourceEditorState = EditorState.getEditorFor(sourceEditor.getParseController());
+		addBuilders(sourceEditorState.getDescriptor(), sourceEditorState.getParseController(), builders, true);
 	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-01-20 10:31:00 UTC (rev 20523)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-01-20 17:26:36 UTC (rev 20524)
@@ -1,6 +1,10 @@
 package org.strategoxt.imp.runtime.services;
 
-import static org.spoofax.interpreter.core.Tools.*;
+import static org.spoofax.interpreter.core.Tools.asJavaString;
+import static org.spoofax.interpreter.core.Tools.isTermAppl;
+import static org.spoofax.interpreter.core.Tools.isTermString;
+import static org.spoofax.interpreter.core.Tools.isTermTuple;
+import static org.spoofax.interpreter.core.Tools.termAt;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;
@@ -54,7 +58,9 @@
 	
 	private final boolean persistent;
 	
-	public StrategoBuilder(StrategoObserver observer, String caption, String builderRule, boolean openEditor, boolean realTime, boolean cursor, boolean persistent) {
+	private final boolean operateOnATerms;
+	
+	public StrategoBuilder(StrategoObserver observer, String caption, String builderRule, boolean openEditor, boolean realTime, boolean cursor, boolean persistent, boolean operateOnATerms) {
 		this.observer = observer;
 		this.caption = caption;
 		this.builderRule = builderRule;
@@ -62,6 +68,7 @@
 		this.realTime = realTime;
 		this.cursor = cursor;
 		this.persistent = persistent;
+		this.operateOnATerms = operateOnATerms;
 	}
 	
 	public String getCaption() {
@@ -85,7 +92,10 @@
 					return;
 				}
 				
-				IStrategoTerm resultTerm = observer.invoke(builderRule, node);
+				IStrategoTerm inputTerm = operateOnATerms
+						? observer.makeATermInputTerm(node, true) 
+						: observer.makeInputTerm(node, true);
+				IStrategoTerm resultTerm = observer.invoke(builderRule, inputTerm, node.getResource());
 				if (resultTerm == null) {
 					observer.reportRewritingFailed();
 					Environment.logException("Builder failed:\n" + observer.getLog());

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2010-01-20 10:31:00 UTC (rev 20523)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2010-01-20 17:26:36 UTC (rev 20524)
@@ -24,8 +24,8 @@
 	/**
 	 * Maps target editors to their builder listener.
 	 */
-	private static final Map<UniversalEditor, StrategoBuilderListener> asyncListeners =
-		new WeakHashMap<UniversalEditor, StrategoBuilderListener>();
+	private static final Map<IEditorPart, StrategoBuilderListener> asyncListeners =
+		new WeakHashMap<IEditorPart, StrategoBuilderListener>();
 	
 	private final String builder;
 	
@@ -57,11 +57,31 @@
 			StrategoBuilderListener listener = asyncListeners.get(editor);
 			if (listener != null) listener.setEnabled(false);
 			listener = new StrategoBuilderListener(editor, target, file, builder, node);
-			asyncListeners.put(editor, listener);
+			asyncListeners.put(target, listener);
 			editor.addModelListener(listener);
 		}
 	}
 	
+	public static StrategoBuilderListener getListener(IEditorPart targetEditor) {
+		synchronized (asyncListeners) {
+			return asyncListeners.get(targetEditor);
+		}
+	}
+	
+	/**
+	 * Gets the source editor for this builder, if has not been garbage collected.
+	 */
+	public UniversalEditor getSourceEditor() {
+		return editor.get();
+	}
+	
+	/**
+	 * Gets the target editor for this builder, if has not been garbage collected.
+	 */
+	public IEditorPart getTargetEditor() {
+		return targetEditor.get();
+	}
+	
 	public AnalysisRequired getAnalysisRequired() {
 		return AnalysisRequired.SYNTACTIC_ANALYSIS;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-20 10:31:00 UTC (rev 20523)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-20 17:26:36 UTC (rev 20524)
@@ -58,6 +58,8 @@
 import org.strategoxt.imp.runtime.stratego.adapter.WrappedAstNode;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.StrategoException;
+import org.strategoxt.stratego_aterm.implode_aterm_0_0;
+import org.strategoxt.stratego_aterm.stratego_aterm;
 import org.strategoxt.stratego_lib.set_config_0_0;
 
 /**
@@ -405,7 +407,7 @@
 		return invoke(function, input, node.getResource());
 	}
 
-	private static IStrategoTerm makeInputTerm(IStrategoAstNode node, boolean includeSubNode) {
+	protected IStrategoTuple makeInputTerm(IStrategoAstNode node, boolean includeSubNode) {
 		ITermFactory factory = Environment.getTermFactory();
 		String path = node.getResource().getProjectRelativePath().toPortableString();
 		String absolutePath = node.getResource().getProject().getLocation().toOSString();
@@ -428,6 +430,30 @@
 			return factory.makeTuple(inputParts);
 		}
 	}
+
+	protected IStrategoTuple makeATermInputTerm(IStrategoAstNode node, boolean includeSubNode) {
+		assert Thread.holdsLock(getSyncRoot());
+		stratego_aterm.init(runtime.getCompiledContext());
+		
+		ITermFactory factory = Environment.getTermFactory();
+		String path = node.getResource().getProjectRelativePath().toPortableString();
+		String absolutePath = node.getResource().getProject().getLocation().toOSString();
+		
+		if (includeSubNode) {
+			IStrategoTerm term = node.getTerm();
+			// TODO: implement position term paths for ATerm builders
+			IStrategoTerm[] inputParts = {
+					implode_aterm_0_0.instance.invoke(runtime.getCompiledContext(), term),
+					factory.makeString("POSITIONS NOT IMPLEMENTED FOR ATERM BUILDERS"),
+					getRoot(node).getTerm(),
+					factory.makeString(path),
+					factory.makeString(absolutePath)
+				};
+			return factory.makeTuple(inputParts);
+		} else {
+			throw new org.spoofax.NotImplementedException();
+		}
+	}
 	
 	/**
 	 * Invoke a Stratego function with a specific term its input,



From R.B.Vermaas at tudelft.nl  Fri Jan 22 11:08:56 2010
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Fri, 22 Jan 2010 10:08:56 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20525 - rob -
	hydra/webdsl
Message-ID: <201001221008.o0MA8u5r025553@proliant.st.ewi.tudelft.nl>

Author: rob
Date: 2010-01-22 10:08:56 +0000 (Fri, 22 Jan 2010)
New Revision: 20525

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20525&view=rev

Modified:
   hydra/webdsl/tests.nix

Log:
add ant to build inputs of webdsl researchr test

Changes:

Modified: hydra/webdsl/tests.nix
===================================================================
--- hydra/webdsl/tests.nix	2010-01-20 17:26:36 UTC (rev 20524)
+++ hydra/webdsl/tests.nix	2010-01-22 10:08:56 UTC (rev 20525)
@@ -10,7 +10,7 @@
   } :
     pkgs.stdenv.mkDerivation {
       name = "researchr-r${toString researchrSrc.rev}";
-      buildInputs = [webdsl];
+      buildInputs = [webdsl pkgs.ant];
       buildCommand = ''
         ensureDir $out/nix-support        
         ulimit -s unlimited 



From L.C.L.Kats at tudelft.nl  Mon Jan 25 12:06:57 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 25 Jan 2010 11:06:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20526 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator
	org.strategoxt.imp.generator/src/sdf2imp/project
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201001251106.o0PB6vaD032111@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-25 11:06:57 +0000 (Mon, 25 Jan 2010)
New Revision: 20526

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20526&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-packed-descriptor-file.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2010-01-22 10:08:56 UTC (rev 20525)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	2010-01-25 11:06:57 UTC (rev 20526)
@@ -37,8 +37,7 @@
 STRJ=`if which strj >/dev/null; then echo strj; elif [ -e strategoxt.jar ]; then echo java -server -Xss4m -jar strategoxt.jar; else echo Please install strj or put strategoxt.jar into the current directory. >&2; exit 1; fi`
 
 SDFINCLUDES = \
-    -Idef ${HOME}/.nix-profile/share/java-front/Stratego-Java-EBlock.def \
-    -Idef ${HOME}/opt/java-front/share/java-front/Stratego-Java-EBlock.def
+    -Idef ${HOME}/.nix-profile/share/java-front/Stratego-Java-EBlock.def
 
 # I don't care much for nullary constructor warnings unless it's about lowercase ones, such as 'start'
 STRCSTFU=2>&1 | grep -vE 'warning ] Nullary constructor .*[A-Z]|warning ] multiple external| \[ExtSDef\(|stratego-trm|module-name-checked|module-name-checked"' \
@@ -67,12 +66,12 @@
 
 sdf2imp : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
 	strc -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
-	     -la ${HOME}/.nix-profile/lib/libjava-front.la $(STRCSTFU)
-	rm sdf2imp.c sdf2imp.lo sdf2imp.o
+	     -la ${HOME}/.nix-profile/lib/libjava-front.la
+	rm -f sdf2imp.c sdf2imp.lo sdf2imp.o
 
 src-gen/org/strategoxt/imp/generator/sdf2imp.java : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
 	$(STRJ) -clean -O 3 -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
-	        -la java-front --library -p org.strategoxt.imp.generator $(STRCSTFU)
+	        -la java-front --library -p org.strategoxt.imp.generator
 
 lib/sdf2imp.jar : src-gen/org/strategoxt/imp/generator/sdf2imp.java
 	strj-jar -i $< -o $@ -cp src-gen

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-packed-descriptor-file.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-packed-descriptor-file.str	2010-01-22 10:08:56 UTC (rev 20525)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-packed-descriptor-file.str	2010-01-25 11:06:57 UTC (rev 20526)
@@ -2,6 +2,7 @@
 
 imports
   libstratego-lib
+  sdf2imp/services/common
   sdf2imp/util/input
   sdf2imp/util/output
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2010-01-22 10:08:56 UTC (rev 20525)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2010-01-25 11:06:57 UTC (rev 20526)
@@ -13,7 +13,6 @@
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.strategoxt.imp.runtime.EditorState;
-import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.services.BuilderMap;
 import org.strategoxt.imp.runtime.services.IBuilder;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java	2010-01-22 10:08:56 UTC (rev 20525)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DescriptorFactory.java	2010-01-25 11:06:57 UTC (rev 20526)
@@ -110,7 +110,7 @@
 		byte[] buffer = new byte[6];
 		int bufferSize = input.read(buffer);
 		if (bufferSize != -1) input.unread(buffer, 0, bufferSize);
-		if ((bufferSize == 6 && buffer.toString().equals("Module")) || BAFReader.isBinaryATerm(input)) { 
+		if ((bufferSize == 6 && new String(buffer).equals("Module")) || BAFReader.isBinaryATerm(input)) { 
 			return (IStrategoAppl) Environment.getTermFactory().parseFromStream(input);
 		} else {
 			return null;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-22 10:08:56 UTC (rev 20525)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-25 11:06:57 UTC (rev 20526)
@@ -38,6 +38,8 @@
 import org.strategoxt.imp.runtime.parser.ast.ListAstNode;
 import org.strategoxt.imp.runtime.parser.ast.RootAstNode;
 import org.strategoxt.imp.runtime.parser.ast.StringAstNode;
+import org.strategoxt.lang.Term;
+import org.strategoxt.lang.terms.TermFactory;
 
 /**
  * Content completion.
@@ -201,6 +203,10 @@
 				public void run() {
 					synchronized (observer.getSyncRoot()) {
 						result = observer.invokeSilent(completionFunction, currentCompletionNode);
+						if (result == null) {
+							observer.reportRewritingFailed();
+							result = TermFactory.EMPTY_LIST;
+						}
 					}
 				}
 			}
@@ -219,8 +225,6 @@
 	
 	private ICompletionProposal[] toProposals(IStrategoTerm proposals, String document, int offset) {
 		Debug.startTimer();
-		if (proposals == null)
-			return createErrorProposal("No proposals available - completion strategy failed", offset);
 		
 		String error = "No proposals available - '" + completionFunction
 				+ "' did not return a ([proposal], description) list";

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	2010-01-22 10:08:56 UTC (rev 20525)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	2010-01-25 11:06:57 UTC (rev 20526)
@@ -57,6 +57,7 @@
 
 	public String getLinkText(Object oNode) {
 		IStrategoAstNode node = getReferencedNode(oNode);
+		if (node == null) return null;
 		
 		String function = NodeMapping.getFirstAttribute(helpFunctions, node.getConstructor(), null, 0);
 		if (function == null) function = wildcardHelperFunction;



From m.dejonge at tudelft.nl  Mon Jan 25 15:55:29 2010
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 25 Jan 2010 14:55:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20527 - MaartjeDeJonge -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001251455.o0PEtT1p002610@proliant.st.ewi.tudelft.nl>

Author: MaartjeDeJonge
Date: 2010-01-25 14:55:29 +0000 (Mon, 25 Jan 2010)
New Revision: 20527

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20527&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java

Log:
bugfix: nullpointer "findCurrentEnd"

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2010-01-25 11:06:57 UTC (rev 20526)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/NewStructureSkipper.java	2010-01-25 14:55:29 UTC (rev 20527)
@@ -341,7 +341,7 @@
         boolean isSecondLine=true;
         ArrayList<Integer> endLocations=new ArrayList<Integer>();
         int indexNextLine=skipLine(indexStartLine);        
-        while(myParser.currentToken!=SGLR.EOF && indexNextLine>=0){            
+        while(myParser.currentToken!=SGLR.EOF && 0<=indexNextLine && indexNextLine<=getHistory().getIndexLastLine()){            
             IndentInfo nextLine = getHistory().getLine(indexNextLine);
             // FIXME: get nextLine may be null 
             int indentSkipPosition=nextLine.getIndentValue();



From L.C.L.Kats at tudelft.nl  Mon Jan 25 17:01:04 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 25 Jan 2010 16:01:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20528 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.generator/src/sdf2imp/util
	org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
Message-ID: <201001251601.o0PG14cT004391@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-25 16:01:04 +0000 (Mon, 25 Jan 2010)
New Revision: 20528

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20528&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java

Log:
Completed SPI-29: ATerm editors should inherit the builders of the editor they are derived from

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str	2010-01-25 14:55:29 UTC (rev 20527)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str	2010-01-25 16:01:04 UTC (rev 20528)
@@ -4,8 +4,8 @@
 module sdf2imp/util/ide-support
 
 imports
-
   libstratego-lib
+  libstratego-sglr
 
 strategies
 
@@ -41,3 +41,22 @@
 
   simplify-ambiguity-element:
     x#(_) -> x
+
+rules
+
+  position-of-term(is-term):
+    t -> []
+    where
+      is-term
+  
+  position-of-term(is-term):
+    _#(t*) -> <position-of-term(is-term|0)> t*
+  
+  position-of-term(is-term|start-index):
+    [t | t*] -> position
+    where
+      if i* := <position-of-term(is-term)> t then
+        position := [start-index | i*]
+      else
+        position := <position-of-term(is-term | <inc> start-index)> t*
+      end
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java	2010-01-25 14:55:29 UTC (rev 20527)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java	2010-01-25 16:01:04 UTC (rev 20528)
@@ -56,6 +56,10 @@
 			return null;
 		} catch (IOException e) {
 			return null;
+		} catch (RuntimeException e) {
+			context.getIOAgent().getOutputStream(IOAgent.CONST_STDERR).println("parse-stratego-file (" + file + "): " + e.getMessage());
+			Environment.logException("Parsing of " + file + " failed", e);
+			return null;
 		}
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-25 14:55:29 UTC (rev 20527)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/ContentProposer.java	2010-01-25 16:01:04 UTC (rev 20528)
@@ -38,7 +38,6 @@
 import org.strategoxt.imp.runtime.parser.ast.ListAstNode;
 import org.strategoxt.imp.runtime.parser.ast.RootAstNode;
 import org.strategoxt.imp.runtime.parser.ast.StringAstNode;
-import org.strategoxt.lang.Term;
 import org.strategoxt.lang.terms.TermFactory;
 
 /**

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-25 14:55:29 UTC (rev 20527)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-25 16:01:04 UTC (rev 20528)
@@ -441,10 +441,9 @@
 		
 		if (includeSubNode) {
 			IStrategoTerm term = node.getTerm();
-			// TODO: implement position term paths for ATerm builders
 			IStrategoTerm[] inputParts = {
 					implode_aterm_0_0.instance.invoke(runtime.getCompiledContext(), term),
-					factory.makeString("POSITIONS NOT IMPLEMENTED FOR ATERM BUILDERS"),
+					StrategoTermPath.createPathFromParsedATerm(node, runtime.getCompiledContext()),
 					getRoot(node).getTerm(),
 					factory.makeString(path),
 					factory.makeString(absolutePath)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	2010-01-25 14:55:29 UTC (rev 20527)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoReferenceResolver.java	2010-01-25 16:01:04 UTC (rev 20528)
@@ -57,7 +57,8 @@
 
 	public String getLinkText(Object oNode) {
 		IStrategoAstNode node = getReferencedNode(oNode);
-		if (node == null) return null;
+		if (node == null)
+			return null;
 		
 		String function = NodeMapping.getFirstAttribute(helpFunctions, node.getConstructor(), null, 0);
 		if (function == null) function = wildcardHelperFunction;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2010-01-25 14:55:29 UTC (rev 20527)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2010-01-25 16:01:04 UTC (rev 20528)
@@ -9,13 +9,21 @@
 
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.strategoxt.imp.generator.position_of_term_1_0;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.ast.AbstractVisitor;
 import org.strategoxt.imp.runtime.parser.ast.AstNode;
 import org.strategoxt.imp.runtime.parser.ast.AstNodeFactory;
 import org.strategoxt.imp.runtime.parser.ast.ListAstNode;
 import org.strategoxt.imp.runtime.parser.ast.SubListAstNode;
+import org.strategoxt.imp.runtime.services.ContentProposer;
 import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
+import org.strategoxt.imp.runtime.stratego.adapter.IWrappedAstNode;
+import org.strategoxt.lang.Context;
+import org.strategoxt.lang.Strategy;
+import org.strategoxt.stratego_aterm.explode_aterm_0_0;
+import org.strategoxt.stratego_aterm.implode_aterm_0_0;
+import org.strategoxt.stratego_lib.oncetd_1_0;
 
 /**
  * Maintains aterm paths, lists of nodes on the path to the root from a given AST node.
@@ -58,6 +66,35 @@
 		
 		return results;
 	}
+	
+	/**
+	 * Creates a term path given the AST Node of a parsed ATerm file.
+	 * The resulting path relates to the actual AST, ignoring the 'appl' etc constructors
+	 * of the ATerm syntax.
+	 */
+	public static IStrategoList createPathFromParsedATerm(final IStrategoAstNode node, Context context) {
+		IStrategoTerm top = node.getRoot().getTerm();
+		final IStrategoTerm marker = context.getFactory().makeString(ContentProposer.COMPLETION_TOKEN);
+		top = oncetd_1_0.instance.invoke(context, top, new Strategy() {
+			@Override
+			public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+				if (current instanceof IWrappedAstNode && ((IWrappedAstNode) current).getNode() == node) {
+					return explode_aterm_0_0.instance.invoke(context, marker);
+				} else {
+					return null;
+				}
+			}
+		});
+		top = implode_aterm_0_0.instance.invoke(context, top);
+		IStrategoTerm result = position_of_term_1_0.instance.invoke(context, top, new Strategy() {
+			@Override
+			public IStrategoTerm invoke(Context context, IStrategoTerm current) {
+				return marker.equals(current) ? current : null;
+			}
+		});
+		assert result != null;
+		return (IStrategoList) result;
+	}
 
 	private static int indexOfIdentical(List<?> children, IStrategoAstNode node) {
 		int index = 0;

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2010-01-25 14:55:29 UTC (rev 20527)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2010-01-25 16:01:04 UTC (rev 20528)
@@ -37,6 +37,8 @@
 	 */
 	String yield();
 	
+	IStrategoAstNode getRoot();
+	
 	// SPECIALIZED FROM PARENT INTERFACE
 	
 	IStrategoAstNode getNextAst();



From L.C.L.Kats at tudelft.nl  Tue Jan 26 17:36:30 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 26 Jan 2010 16:36:30 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20529 - LennartKats -
	strategoxt/trunk/strc-core/tools
Message-ID: <201001261636.o0QGaUPf025071@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-26 16:36:30 +0000 (Tue, 26 Jan 2010)
New Revision: 20529

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20529&view=rev

Modified:
   strategoxt/trunk/strc-core/tools/str

Log:


Changes:

Modified: strategoxt/trunk/strc-core/tools/str
===================================================================
--- strategoxt/trunk/strc-core/tools/str	2010-01-25 16:01:04 UTC (rev 20528)
+++ strategoxt/trunk/strc-core/tools/str	2010-01-26 16:36:30 UTC (rev 20529)
@@ -113,7 +113,7 @@
   if echo "$@" | grep '^module ' >/dev/null; then
     PROGRAM="$@"
   else
-    PROGRAM="module foo imports libstratego-lib libstratego-xtc libstratego-sglr libstratego-rtg libstrc rules main =
+    PROGRAM="module foo imports libstratego-lib libstratego-xtc libstratego-sglr libstratego-rtg libstratego-aterm libstrc rules main =
 $@"
   fi
   echo "$PROGRAM" |
@@ -121,7 +121,7 @@
   INPUTFILE=$TEMPFILE
 fi
 
-(strc $FOPTION $LOPTION $COPTION $MOPTION $OOPTION $IOPTION $LAOPTION --format-check 0 -Xcc -O0 -la stratego-lib -la stratego-xtc -la strc -la stratego-sglr -la stratego-rtg -I . -i $INPUTFILE -o $TEMPFILE.out --statistics 0 || exit 1) 2>&1 | grep -vE '^ *[ig]cc|warning ] Mismatch between basename|info ] Compiling|libtool: '
+(strc $FOPTION $LOPTION $COPTION $MOPTION $OOPTION $IOPTION $LAOPTION --format-check 0 -Xcc -O0 -la stratego-lib -la stratego-xtc -la stratego-aterm -la strc -la stratego-sglr -la stratego-rtg -I . -i $INPUTFILE -o $TEMPFILE.out --statistics 0 || exit 1) 2>&1 | grep -vE '^ *[ig]cc|warning ] Mismatch between basename|info ] Compiling|libtool: '
 RET=$?
 
 rm -f $TEMPFILE



From L.C.L.Kats at tudelft.nl  Tue Jan 26 18:34:53 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 26 Jan 2010 17:34:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20530 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core
	spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter
Message-ID: <201001261734.o0QHYr4m025786@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-26 17:34:53 +0000 (Tue, 26 Jan 2010)
New Revision: 20530

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20530&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java

Log:
SPI-30: Dynamically loaded editors and ATerm editors should allow a custom strategy to be executed

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/core/Interpreter.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -74,7 +74,7 @@
         return success;     }
 
-    protected SDefT lookupUncifiedSVar(String name) {
+    public SDefT lookupUncifiedSVar(String name) {
         try {
             SDefT def = context.lookupSVar(cify(name) + "_0_0");             
Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def	2010-01-26 17:34:53 UTC (rev 20530)
@@ -109,12 +109,15 @@
 	IntCon 					-> ATerm {cons("int")}
 	RealCon					-> ATerm {cons("real")}
 	fun:AFun 				-> ATerm {cons("fun")}
-	fun:AFun "(" args:{ATerm ","}* ")" 	-> ATerm {cons("appl")}  %% changed from + to *
-	         "(" args:{ATerm ","}* ")" 	-> ATerm {cons("tuple")} %% added for tuple support
+	fun:AFun "(" args:{ATerm ","}* ")" 	-> ATerm {cons("appl")} %% changed from + to *
+	NoAFun   "(" args:{ATerm ","}* ")" 	-> ATerm {cons("appl")} %% added for tuple support
 	"<" type:ATerm ">" 			-> ATerm {cons("placeholder")}
 	"[" elems:{ATerm ","}* "]" 		-> ATerm {cons("list")}
 	trm:ATerm Annotation 			-> ATerm {cons("annotated")}
 
+  lexical syntax
+    ^[]* -> NoAFun %% added for tuple support
+
   context-free syntax
 	"{" annos:{ ATerm ","}+ "}" 		-> Annotation {cons("default")}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/EditorState.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -154,26 +154,28 @@
 	/**
 	 * Gets the abstract syntax subtree for the selection in the editor.
 	 * 
-	 * @param ignoreEmptyEmpySelection
+	 * @param ignoreEmptyEmptySelection
 	 *            If true, null is returned if the selection is 0 characters wide.
 	 * 
 	 * @see SGLRParseController#getCurrentAst()
 	 *            Gets the entire AST.
 	 */
-	public final synchronized IStrategoAstNode getSelectionAst(boolean ignoreEmptyEmpySelection) {
+	public final synchronized IStrategoAstNode getSelectionAst(boolean ignoreEmptyEmptySelection) {
 		Point selection = getEditor().getSelection();
-		if (ignoreEmptyEmpySelection && selection.y == 0)
+		if (ignoreEmptyEmptySelection && selection.y == 0)
 			return null;
 		
 		IToken start = getParseController().getTokenIterator(new Region(selection.x, 0), true).next();
-		IToken end = getParseController().getTokenIterator(new Region(selection.x + selection.y, 0), true).next();
+		IToken end = getParseController().getTokenIterator(new Region(selection.x + selection.y - 1, 0), true).next();
 		
 		IPrsStream tokens = start.getIPrsStream();
 		int layout = TokenKind.TK_LAYOUT.ordinal();
+		int eof = TokenKind.TK_EOF.ordinal();
+		
 		while (start.getKind() == layout && start.getTokenIndex() < tokens.getSize())
 			start = tokens.getTokenAt(start.getTokenIndex() + 1);
 		
-		while (end.getKind() == layout && end.getTokenIndex() > 0)
+		while ((end.getKind() == layout || end.getKind() == eof) && end.getTokenIndex() > 0)
 			end = tokens.getTokenAt(end.getTokenIndex() - 1);
 		
 		IStrategoAstNode startNode = ((SGLRToken) start).getAstNode();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/BuilderFactory.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -15,6 +15,7 @@
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.services.BuilderMap;
+import org.strategoxt.imp.runtime.services.CustomStrategyBuilder;
 import org.strategoxt.imp.runtime.services.IBuilder;
 import org.strategoxt.imp.runtime.services.IBuilderMap;
 import org.strategoxt.imp.runtime.services.StrategoBuilder;
@@ -27,23 +28,26 @@
 public class BuilderFactory extends AbstractServiceFactory<IBuilderMap> {
 	
 	public BuilderFactory() {
-		super(IBuilderMap.class, true);
+		super(IBuilderMap.class, false); // not cached; depends on derived editor relation
 	}
 
 	@Override
 	public IBuilderMap create(Descriptor d, SGLRParseController controller) throws BadDescriptorException {
 		Set<IBuilder> builders = new LinkedHashSet<IBuilder>();
 		
-		if (d.getLanguage().getName().equals("ATerm"))
-			addSourceBuilders(controller, builders);
+		EditorState derivedFromEditor = getDerivedFromEditor(controller);
+		
+		if (d.isATermEditor() && derivedFromEditor != null)
+			addDerivedBuilders(derivedFromEditor, builders);
 
-		addBuilders(d, controller, builders, false);
+		addBuilders(d, controller, builders, null);
+		addCustomStrategyBuilder(d, controller, builders, derivedFromEditor);
 		
 		return new BuilderMap(builders);
 	}
 
 	private static void addBuilders(Descriptor d, SGLRParseController controller, Set<IBuilder> builders,
-			boolean operateOnATerms) throws BadDescriptorException {
+			EditorState derivedFromEditor) throws BadDescriptorException {
 		
 		StrategoObserver feedback = d.createService(StrategoObserver.class, controller);
 		
@@ -75,24 +79,40 @@
 				}
 			}
 			if (!meta || d.isDynamicallyLoaded())			
-				builders.add(new StrategoBuilder(feedback, caption, strategy, openEditor, realTime, cursor, persistent, operateOnATerms));
+				builders.add(new StrategoBuilder(feedback, caption, strategy, openEditor, realTime, cursor, persistent, derivedFromEditor));
 		}
 	}
 
-	private static void addSourceBuilders(SGLRParseController controller, Set<IBuilder> builders)
+	private static void addDerivedBuilders(EditorState derivedFromEditor, Set<IBuilder> builders)
 			throws BadDescriptorException {
 		
+		if (derivedFromEditor != null)
+			addBuilders(derivedFromEditor.getDescriptor(), derivedFromEditor.getParseController(), builders, derivedFromEditor);
+	}
+
+	private static void addCustomStrategyBuilder(Descriptor d, SGLRParseController controller,
+			Set<IBuilder> builders, EditorState derivedFromEditor) throws BadDescriptorException {
+		
+		if (d.isATermEditor() && derivedFromEditor != null) {
+			StrategoObserver feedback = derivedFromEditor.getDescriptor().createService(StrategoObserver.class, controller);
+			builders.add(new CustomStrategyBuilder(feedback, derivedFromEditor));
+		} else if (d.isDynamicallyLoaded()) {
+			StrategoObserver feedback = d.createService(StrategoObserver.class, controller);
+			builders.add(new CustomStrategyBuilder(feedback, null));
+		}
+	}
+
+	private static EditorState getDerivedFromEditor(SGLRParseController controller) {
 		if (controller.getEditor() == null || controller.getEditor().getEditor() == null)
-			return;
+			return null;
 		UniversalEditor editor = controller.getEditor().getEditor();
 		StrategoBuilderListener listener = StrategoBuilderListener.getListener(editor);
 		if (listener == null)
-			return;
+			return null;
 		UniversalEditor sourceEditor = listener.getSourceEditor();
 		if (sourceEditor == null)
-			return;
-		EditorState sourceEditorState = EditorState.getEditorFor(sourceEditor.getParseController());
-		addBuilders(sourceEditorState.getDescriptor(), sourceEditorState.getParseController(), builders, true);
+			return null;
+		return EditorState.getEditorFor(sourceEditor.getParseController());
 	}
 
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/Descriptor.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -214,6 +214,14 @@
 		return dynamicallyLoaded;
 	}
 	
+	public boolean isATermEditor() {
+		try {
+			return "ATerm".equals(getLanguage().getName());
+		} catch (BadDescriptorException e) {
+			return false;
+		}
+	}
+	
 	public void setDynamicallyLoaded(boolean dynamicallyLoaded) {
 		this.dynamicallyLoaded = dynamicallyLoaded;
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -0,0 +1,134 @@
+/**
+ * 
+ */
+package org.strategoxt.imp.runtime.services;
+
+import static java.util.Collections.synchronizedMap;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.jface.dialogs.IInputValidator;
+import org.eclipse.jface.dialogs.InputDialog;
+import org.spoofax.interpreter.core.InterpreterErrorExit;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.core.InterpreterExit;
+import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.stratego.adapter.IStrategoAstNode;
+
+/**
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class CustomStrategyBuilder extends StrategoBuilder {
+	
+	private static final Map<String, String> initialValues =
+		synchronizedMap(new HashMap<String, String>());
+	
+	public CustomStrategyBuilder(StrategoObserver observer, EditorState derivedFromEditor) {
+		super(observer, "Apply custom rule...", null, true, true, false, false, derivedFromEditor);
+	}
+	
+	@Override
+	public void execute(EditorState editor, IStrategoAstNode node, IFile errorReportFile,
+			boolean isRebuild) {
+		
+		String builderRule = inputBuilderRule(editor);
+		if (builderRule != null) {
+			setBuilderRule(builderRule);
+			super.execute(editor, node, errorReportFile, isRebuild);
+		}
+	}
+	
+	private String inputBuilderRule(EditorState editor) {
+		IInputValidator validator = 
+			new IInputValidator() {
+				public String isValid(String name) {
+					return getObserver().getRuntime().lookupUncifiedSVar(name) == null
+							? "No rule or strategy with this name"
+							: null;
+				}
+			};
+		
+		synchronized (getObserver().getSyncRoot()) {
+			InputDialog dialog = new InputDialog(null, "Apply custom rule", "Enter the name of the rewrite rule or strategy to apply", getInitialValue(editor), validator);
+			if (dialog.open() == InputDialog.OK) {
+				setInitialValue(editor, dialog.getValue());
+				return dialog.getValue();
+			} else {
+				return null;
+			}
+		}
+	}
+	
+	@Override
+	protected IStrategoTerm invokeObserver(IStrategoAstNode node)
+			throws UndefinedStrategyException, InterpreterErrorExit, InterpreterExit,
+			InterpreterException {
+
+		// Try invoke using (term)
+		IStrategoTerm input = getObserver().implodeATerm(getObserver().getImplodableNode(node).getTerm());
+		IStrategoTerm result = getObserver().invoke(getBuilderRule(), input, node.getResource());
+		if (result != null) return addFileName(result, node.getResource());
+		String[] trace1 = getObserver().getRuntime().getCompiledContext().getTrace();
+		
+		// Try invoke using (term, ast, ...) tuple
+		result = super.invokeObserver(node);
+		if (result != null) return result;
+		String[] trace2 = getObserver().getRuntime().getCompiledContext().getTrace();
+		
+		// Report the previous stack trace if the new one is very short
+		if (trace2.length == 1)
+			getObserver().getRuntime().getCompiledContext().setTrace(trace1);
+
+		return null;
+	}
+	
+	private IStrategoTuple addFileName(IStrategoTerm result, IResource resource) {
+		ITermFactory factory = getObserver().getRuntime().getFactory();
+		// TODO: name like foo.1.aterm, foo.2.aterm, etc.
+		IPath source = resource.getProjectRelativePath().removeFileExtension();
+		String counter = "2";
+		if (source.getFileExtension() != null) {
+			try {
+				int prevCounter = Integer.parseInt(source.getFileExtension());
+				source.removeFileExtension();
+				counter = String.valueOf(prevCounter + 1);
+			} catch (NumberFormatException e) {
+				// Leave the counter at 2
+			}
+		}
+		String target = source.addFileExtension(counter + "." + "aterm").toPortableString();
+		return factory.makeTuple(factory.makeString(target), result);
+	}
+
+	private void setInitialValue(EditorState editor, String value) {
+		initialValues.put(editor.getLanguage().getName(), value);
+	}
+
+	private String getInitialValue(EditorState editor) {
+		String language = editor.getLanguage().getName();
+		String result = initialValues.get(language);
+		if (result != null) return result;
+		IBuilderMap allBuilders;
+		try {
+			allBuilders = editor.getDescriptor().createService(IBuilderMap.class, editor.getParseController());
+			for (IBuilder builder : allBuilders.getAll()) {
+				if (builder instanceof StrategoBuilder && ((StrategoBuilder) builder).getBuilderRule() != null)
+					result = ((StrategoBuilder) builder).getBuilderRule();
+			}
+		} catch (BadDescriptorException e) {
+			Environment.logException(e);
+		}	
+		
+		return result == null ? "" : result;
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilder.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -48,7 +48,7 @@
 
 	private final String caption;
 	
-	private final String builderRule;
+	private String builderRule;
 	
 	private final boolean realTime;
 	
@@ -58,9 +58,17 @@
 	
 	private final boolean persistent;
 	
-	private final boolean operateOnATerms;
+	private final EditorState derivedFromEditor;
 	
-	public StrategoBuilder(StrategoObserver observer, String caption, String builderRule, boolean openEditor, boolean realTime, boolean cursor, boolean persistent, boolean operateOnATerms) {
+	/**
+	 * Creates a new Stratego builder.
+	 * 
+	 * @param derivedFromEditor  The editor the present editor is derived from, if the present editor is an ATerm editor.
+	 */
+	public StrategoBuilder(StrategoObserver observer, String caption, String builderRule,
+			boolean openEditor, boolean realTime, boolean cursor, boolean persistent,
+			EditorState derivedFromEditor) {
+		
 		this.observer = observer;
 		this.caption = caption;
 		this.builderRule = builderRule;
@@ -68,15 +76,32 @@
 		this.realTime = realTime;
 		this.cursor = cursor;
 		this.persistent = persistent;
-		this.operateOnATerms = operateOnATerms;
+		this.derivedFromEditor = derivedFromEditor;
 	}
 	
 	public String getCaption() {
 		return caption;
 	}
 	
+	public String getBuilderRule() {
+		return builderRule;
+	}
+	
+	protected StrategoObserver getObserver() {
+		return observer;
+	}
+	
+	protected EditorState getDerivedFromEditor() {
+		return derivedFromEditor;
+	}
+	
+	protected void setBuilderRule(String builderRule) {
+		this.builderRule = builderRule;
+	}
+	
 	public void execute(EditorState editor, IStrategoAstNode node, IFile errorReportFile, boolean isRebuild) {
 		// TODO: refactor
+		assert derivedFromEditor == null || editor.getDescriptor().isATermEditor();
 		String filename = null;
 		String result = null;
 		String errorReport = null;
@@ -92,10 +117,7 @@
 					return;
 				}
 				
-				IStrategoTerm inputTerm = operateOnATerms
-						? observer.makeATermInputTerm(node, true) 
-						: observer.makeInputTerm(node, true);
-				IStrategoTerm resultTerm = observer.invoke(builderRule, inputTerm, node.getResource());
+				IStrategoTerm resultTerm = invokeObserver(node);
 				if (resultTerm == null) {
 					observer.reportRewritingFailed();
 					Environment.logException("Builder failed:\n" + observer.getLog());
@@ -159,8 +181,13 @@
 				if (openEditor && !isRebuild) {
 					IEditorPart target = openEditor(file, realTime);
 					if (!persistent) new File(file.getLocationURI()).delete();
-					if (realTime)
+					// Create a listene *and* editor-derived editor relation
+					StrategoBuilderListener listener = 
 						StrategoBuilderListener.addListener(editor.getEditor(), target, file, getCaption(), node);
+					if (!realTime || editor == target || derivedFromEditor != null)
+						listener.setEnabled(false);
+					if (derivedFromEditor != null) // ensure we get builders from the source
+						listener.setSourceEditor(derivedFromEditor.getEditor());
 				}
 			}
 		} catch (CoreException e) {
@@ -169,6 +196,16 @@
 		}
 	}
 
+	protected IStrategoTerm invokeObserver(IStrategoAstNode node) throws UndefinedStrategyException,
+			InterpreterErrorExit, InterpreterExit, InterpreterException {
+		
+		IStrategoTerm inputTerm = derivedFromEditor != null
+				? observer.makeATermInputTerm(node, true) 
+				: observer.makeInputTerm(node, true);
+		IStrategoTerm result = observer.invoke(builderRule, inputTerm, node.getResource());
+		return result;
+	}
+
 	private IStrategoString ppATerm(IStrategoTerm term) {
 		Context context = observer.getRuntime().getCompiledContext();
 		term = aterm_escape_strings_0_0.instance.invoke(context, term);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoBuilderListener.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -29,7 +29,7 @@
 	
 	private final String builder;
 	
-	private final WeakReference<UniversalEditor> editor;
+	private WeakReference<UniversalEditor> editor;
 	
 	private final WeakReference<IEditorPart> targetEditor;
 	
@@ -52,13 +52,14 @@
 		this.selection = selection;
 	}
 
-	public static void addListener(UniversalEditor editor, IEditorPart target, IFile file, String builder, IStrategoAstNode node) {
+	public static StrategoBuilderListener addListener(UniversalEditor editor, IEditorPart target, IFile file, String builder, IStrategoAstNode node) {
 		synchronized (asyncListeners) {
 			StrategoBuilderListener listener = asyncListeners.get(editor);
 			if (listener != null) listener.setEnabled(false);
 			listener = new StrategoBuilderListener(editor, target, file, builder, node);
 			asyncListeners.put(target, listener);
 			editor.addModelListener(listener);
+			return listener;
 		}
 	}
 	
@@ -75,6 +76,10 @@
 		return editor.get();
 	}
 	
+	public void setSourceEditor(UniversalEditor editor) {
+		this.editor = new WeakReference<UniversalEditor>(editor);
+	}
+	
 	/**
 	 * Gets the target editor for this builder, if has not been garbage collected.
 	 */

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -440,11 +440,11 @@
 		String absolutePath = node.getResource().getProject().getLocation().toOSString();
 		
 		if (includeSubNode) {
-			IStrategoTerm term = node.getTerm();
+			node = getImplodableNode(node);
 			IStrategoTerm[] inputParts = {
-					implode_aterm_0_0.instance.invoke(runtime.getCompiledContext(), term),
+					implodeATerm(node.getTerm()),
 					StrategoTermPath.createPathFromParsedATerm(node, runtime.getCompiledContext()),
-					getRoot(node).getTerm(),
+					implodeATerm(getRoot(node).getTerm()),
 					factory.makeString(path),
 					factory.makeString(absolutePath)
 				};
@@ -453,6 +453,20 @@
 			throw new org.spoofax.NotImplementedException();
 		}
 	}
+
+	protected IStrategoTerm implodeATerm(IStrategoTerm term) {
+		return implode_aterm_0_0.instance.invoke(runtime.getCompiledContext(), term);
+	}
+
+	protected IStrategoAstNode getImplodableNode(IStrategoAstNode node) {
+		if (node.isList() && node.getChildren().size() == 1)
+			node = (IStrategoAstNode) node.getChildren().get(0);
+		for (; node != null; node = node.getParent()) {
+			if (implodeATerm(node.getTerm()) != null)
+				return node;
+		}
+		throw new IllegalStateException("Could not identify selected AST node from ATerm editor");
+	}
 	
 	/**
 	 * Invoke a Stratego function with a specific term its input,
@@ -560,7 +574,8 @@
 	
 	public HybridInterpreter getRuntime() {
 		assert Thread.holdsLock(getSyncRoot());
-		
+		if (runtime == null) init(new NullProgressMonitor());
+		if (runtime == null) initRuntime(new NullProgressMonitor()); // create empty runtime
 		return runtime;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -86,14 +86,12 @@
 			}
 		});
 		top = implode_aterm_0_0.instance.invoke(context, top);
-		IStrategoTerm result = position_of_term_1_0.instance.invoke(context, top, new Strategy() {
+		return (IStrategoList) position_of_term_1_0.instance.invoke(context, top, new Strategy() {
 			@Override
 			public IStrategoTerm invoke(Context context, IStrategoTerm current) {
 				return marker.equals(current) ? current : null;
 			}
 		});
-		assert result != null;
-		return (IStrategoList) result;
 	}
 
 	private static int indexOfIdentical(List<?> children, IStrategoAstNode node) {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2010-01-26 16:36:30 UTC (rev 20529)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/adapter/IStrategoAstNode.java	2010-01-26 17:34:53 UTC (rev 20530)
@@ -39,6 +39,8 @@
 	
 	IStrategoAstNode getRoot();
 	
+	boolean isList();
+	
 	// SPECIALIZED FROM PARENT INTERFACE
 	
 	IStrategoAstNode getNextAst();



From L.C.L.Kats at tudelft.nl  Wed Jan 27 10:31:34 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Jan 2010 09:31:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20531 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201001270931.o0R9VY3l006824@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-27 09:31:33 +0000 (Wed, 27 Jan 2010)
New Revision: 20531

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20531&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java

Log:
Minor fixes to custom rule builder

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java	2010-01-26 17:34:53 UTC (rev 20530)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/CustomStrategyBuilder.java	2010-01-27 09:31:33 UTC (rev 20531)
@@ -75,7 +75,9 @@
 			InterpreterException {
 
 		// Try invoke using (term)
-		IStrategoTerm input = getObserver().implodeATerm(getObserver().getImplodableNode(node).getTerm());
+		IStrategoTerm input = getDerivedFromEditor() == null
+				? node.getTerm()
+				: getObserver().implodeATerm(getObserver().getImplodableNode(node).getTerm());
 		IStrategoTerm result = getObserver().invoke(getBuilderRule(), input, node.getResource());
 		if (result != null) return addFileName(result, node.getResource());
 		String[] trace1 = getObserver().getRuntime().getCompiledContext().getTrace();
@@ -94,20 +96,25 @@
 	
 	private IStrategoTuple addFileName(IStrategoTerm result, IResource resource) {
 		ITermFactory factory = getObserver().getRuntime().getFactory();
-		// TODO: name like foo.1.aterm, foo.2.aterm, etc.
 		IPath source = resource.getProjectRelativePath().removeFileExtension();
+		String target = addCounter(source).addFileExtension("aterm").toPortableString();
+		return factory.makeTuple(factory.makeString(target), result);
+	}
+
+	private IPath addCounter(IPath path) {
+		if (getDerivedFromEditor() == null)
+			return path;
 		String counter = "2";
-		if (source.getFileExtension() != null) {
+		if (path.getFileExtension() != null) {
 			try {
-				int prevCounter = Integer.parseInt(source.getFileExtension());
-				source.removeFileExtension();
+				int prevCounter = Integer.parseInt(path.getFileExtension());
+				path.removeFileExtension();
 				counter = String.valueOf(prevCounter + 1);
 			} catch (NumberFormatException e) {
 				// Leave the counter at 2
 			}
 		}
-		String target = source.addFileExtension(counter + "." + "aterm").toPortableString();
-		return factory.makeTuple(factory.makeString(target), result);
+		return path.addFileExtension(counter);
 	}
 
 	private void setInitialValue(EditorState editor, String value) {



From L.C.L.Kats at tudelft.nl  Wed Jan 27 14:07:43 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Jan 2010 13:07:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20532 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego
Message-ID: <201001271307.o0RD7hRk010921@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-27 13:07:42 +0000 (Wed, 27 Jan 2010)
New Revision: 20532

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20532&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java

Log:
Fixed .meta file handling for Stratego imports (encountered by Nathan)

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java	2010-01-27 09:31:33 UTC (rev 20531)
+++ spoofax-imp/trunk/org.strategoxt.imp.metatooling/src/org/strategoxt/imp/metatooling/stratego/IMPParseStrategoFileStrategy.java	2010-01-27 13:07:42 UTC (rev 20532)
@@ -75,7 +75,7 @@
 	}
 
 	private JSGLRI processMetaFile(String file, JSGLRI parser) throws InvalidParseTableException {
-		String metaFileName = file.substring(file.length() - 4) + ".meta";
+		String metaFileName = file.substring(0, file.length() - 4) + ".meta";
 		MetaFile metaFile = MetaFile.read(metaFileName);
 		ParseTable table = null;
 		if (metaFile != null) {



From L.C.L.Kats at tudelft.nl  Wed Jan 27 16:27:22 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Jan 2010 15:27:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20533 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr
Message-ID: <201001271527.o0RFRMb5012570@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-27 15:27:22 +0000 (Wed, 27 Jan 2010)
New Revision: 20533

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20533&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java

Log:
Fixed a bug in JSGLR's preference count heuristic filter and in the Stratego primitives that control it.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-27 13:07:42 UTC (rev 20532)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-27 15:27:22 UTC (rev 20533)
@@ -75,11 +75,17 @@
         return filterDirectPreference;
     }
     
+    /**
+     * For preference count filtering, see {@link #setFilterPreferenceCount(boolean)}.
+     */
     @Deprecated
     public final void setFilterIndirectPreference(boolean filterIndirectPreference) {
         this.filterIndirectPreference = filterIndirectPreference;
     }
     
+    /**
+     * For preference count filtering, see {@link #getFilterPreferenceCount()}.
+     */
     @Deprecated
     public boolean getFilterIndirectPreference() {
         return filterIndirectPreference;
@@ -147,7 +153,6 @@
     }
     
     public final void setHeuristicFilters(boolean heuristicFilters) {
-        setFilterIndirectPreference(heuristicFilters);
         setFilterPreferenceCount(heuristicFilters);
         setFilterInjectionCount(heuristicFilters);
     }
@@ -870,7 +875,7 @@
             }
 
             if ((rightPreferCount > leftPreferCount && rightAvoidCount <= leftAvoidCount)
-                    || (rightPreferCount == leftPreferCount && rightAvoidCount < leftPreferCount)) {
+                    || (rightPreferCount == leftPreferCount && rightAvoidCount < leftAvoidCount)) {
                 if (r != FILTER_DRAW) {
                     Tools.logger("Symmetric eagerness priority: ", left, " == ", right);
                     r = FILTER_DRAW;

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	2010-01-27 13:07:42 UTC (rev 20532)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	2010-01-27 15:27:22 UTC (rev 20533)
@@ -47,7 +47,7 @@
 				filterSettings.setFilterDirectPreference(false);
 			}
 		});
-		add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filter_direct_eagernes") { // (sic)
+		add(new AbstractFilterSetting(filterSettings, "STRSGLR_get_filter_direct_eagernes") { // (sic)
 			@Override
 			public boolean get() {
 				return filterSettings.getFilterDirectPreference();
@@ -55,21 +55,21 @@
 		});
 		
 		add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filter_eagernes_on") { // (sic)
-			@Override @Deprecated
+			@Override
 			public void set() {
-				filterSettings.setFilterIndirectPreference(true);
+				filterSettings.setFilterPreferenceCount(false);
 			}
 		});
 		add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filter_eagernes_off") { // (sic)
-			@Override @Deprecated
+			@Override
 			public void set() {
-				filterSettings.setFilterIndirectPreference(false);
+				filterSettings.setFilterPreferenceCount(false);
 			}
 		});
-		add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filter_eagernes") { // (sic)
+		add(new AbstractFilterSetting(filterSettings, "STRSGLR_get_filter_eagernes") { // (sic)
 			@Override
 			public boolean get() {
-				return filterSettings.getFilterDirectPreference();
+				return filterSettings.getFilterPreferenceCount();
 			}
 		});
 



From L.C.L.Kats at tudelft.nl  Wed Jan 27 16:28:53 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Jan 2010 15:28:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20534 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001271528.o0RFSrkN012583@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-27 15:28:53 +0000 (Wed, 27 Jan 2010)
New Revision: 20534

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20534&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-27 15:27:22 UTC (rev 20533)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-27 15:28:53 UTC (rev 20534)
@@ -33,9 +33,6 @@
     
     private boolean filterDirectPreference;
     
-    @Deprecated
-    private boolean filterIndirectPreference;
-    
     private boolean filterPreferenceCount;
     
     private boolean filterInjectionCount;
@@ -80,7 +77,7 @@
      */
     @Deprecated
     public final void setFilterIndirectPreference(boolean filterIndirectPreference) {
-        this.filterIndirectPreference = filterIndirectPreference;
+        // No such setting
     }
     
     /**
@@ -88,7 +85,7 @@
      */
     @Deprecated
     public boolean getFilterIndirectPreference() {
-        return filterIndirectPreference;
+        // No such setting
     }
     
     public final void setFilterInjectionCount(boolean filterInjectionCount) {
@@ -168,8 +165,7 @@
     public final void setDefaultFilters() {
         filterAny = true;
         filterCycles = false; // TODO: filterCycles; enable by default
-        filterDirectPreference = true;        
-        filterIndirectPreference = false;        
+        filterDirectPreference = true;  
         filterPreferenceCount = false;        
         filterInjectionCount = false;        
         filterTopSort = true;        



From L.C.L.Kats at tudelft.nl  Wed Jan 27 16:34:36 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Jan 2010 15:34:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20535 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	strc-java/trunk/java
Message-ID: <201001271534.o0RFYaLC012630@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-27 15:34:36 +0000 (Wed, 27 Jan 2010)
New Revision: 20535

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20535&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   strc-java/trunk/java/spoofax-libs.jar

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-27 15:28:53 UTC (rev 20534)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-27 15:34:36 UTC (rev 20535)
@@ -77,7 +77,7 @@
      */
     @Deprecated
     public final void setFilterIndirectPreference(boolean filterIndirectPreference) {
-        // No such setting
+        throw new UnsupportedOperationException();
     }
     
     /**
@@ -85,7 +85,7 @@
      */
     @Deprecated
     public boolean getFilterIndirectPreference() {
-        // No such setting
+        throw new UnsupportedOperationException();
     }
     
     public final void setFilterInjectionCount(boolean filterInjectionCount) {

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Thu Jan 28 16:11:33 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Thu, 28 Jan 2010 15:11:33 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20536 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.editors.stratego/trans
	org.strategoxt.imp.feature
	org.strategoxt.imp.generator/src/sdf2imp/util
	org.strategoxt.imp.updatesite
Message-ID: <201001281511.o0SFBXsx032688@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-28 15:11:33 +0000 (Thu, 28 Jan 2010)
New Revision: 20536

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20536&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-27 15:34:36 UTC (rev 20535)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-28 15:11:33 UTC (rev 20536)
@@ -189,12 +189,14 @@
           MissingIndirectImports: x -> <bagof-MissingImports>
         )
       <+
-        <try(resolve-import-path)> $[[x].str];
-        (import-from-cache <+ import-rtree <+ import-str);
-        declare-globals-top;
-        rules(
-          MissingIndirectImports: x -> <bagof-MissingImports>
-        )
+        path := <try(resolve-import-path)> $[[x].str];
+        if not(!$[[<CurrentDir>]/[<CurrentFile>]] => path) then
+          (import-from-cache <+ import-rtree <+ import-str);
+          declare-globals-top;
+          rules(
+            MissingIndirectImports: x -> <bagof-MissingImports>
+          )
+        end
       |}
     <+
       rules(

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-27 15:34:36 UTC (rev 20535)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-28 15:11:33 UTC (rev 20536)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.3.1"
+      version="0.3.2.1"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str	2010-01-27 15:34:36 UTC (rev 20535)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/ide-support.str	2010-01-28 15:11:33 UTC (rev 20536)
@@ -40,7 +40,9 @@
     [x] -> $[list of [<simplify-ambiguity-element> x]]
 
   simplify-ambiguity-element:
-    x#(_) -> x
+    x#(_) -> x'
+    with
+      x' := <is-string <+ write-to-string> x
 
 rules
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-01-27 15:34:36 UTC (rev 20535)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-01-28 15:11:33 UTC (rev 20536)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.3.1.jar" id="org.strategoxt.imp" version="0.3.1">
+   <feature url="features/org.strategoxt.imp_0.3.2.jar" id="org.strategoxt.imp" version="0.3.2">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP"/>



From L.C.L.Kats at tudelft.nl  Fri Jan 29 10:19:10 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 09:19:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20538 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
Message-ID: <201001290919.o0T9JAIF017669@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 09:19:10 +0000 (Fri, 29 Jan 2010)
New Revision: 20538

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20538&view=rev

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java

Log:
Fixed yet another disambiguator error (rare null pointer exception)

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-28 16:34:08 UTC (rev 20537)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-29 09:19:10 UTC (rev 20538)
@@ -1020,14 +1020,17 @@
             while (prod.isInjection()) {
                 t = ((ParseNode) t).getKids().get(0);
 
-                int prodTypeX = getProductionType(t);
+                
+                if (t instanceof ParseNode) {
+                    int prodTypeX = getProductionType(t);
 
-                if (t instanceof ParseNode && prodTypeX != ProductionType.PREFER
+                    if (prodTypeX != ProductionType.PREFER
                         && prodTypeX != ProductionType.AVOID) {
-                    prod = getLabel(t);
-                } else {
-                    return t;
+                        prod = getLabel(t);
+                        continue;
+                    }
                 }
+                return t;
             }
         }
         return t;

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2010-01-28 16:34:08 UTC (rev 20537)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParserHistory.java	2010-01-29 09:19:10 UTC (rev 20538)
@@ -177,6 +177,7 @@
     }
     
     public IndentInfo getLine(int index){
+        // FIXME: throw an IndexOutOfBoundsException: this is indicates a programmer error
         if(index < 0 || index > getIndexLastLine())
             return null;
         return newLinePoints.get(index);



From L.C.L.Kats at tudelft.nl  Fri Jan 29 10:50:09 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 09:50:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20539 - LennartKats -
	strc-java/trunk/java
Message-ID: <201001290950.o0T9o9r1017882@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 09:50:09 +0000 (Fri, 29 Jan 2010)
New Revision: 20539

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20539&view=rev

Modified:
   strc-java/trunk/java/spoofax-libs.jar

Log:


Changes:

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Fri Jan 29 10:50:32 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 09:50:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20540 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.updatesite
Message-ID: <201001290950.o0T9oW1U017894@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 09:50:32 +0000 (Fri, 29 Jan 2010)
New Revision: 20540

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20540&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
New 0.3.2.2 release

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-29 09:50:09 UTC (rev 20539)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-29 09:50:32 UTC (rev 20540)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.3.2.1"
+      version="0.3.2.2"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">
@@ -94,7 +94,7 @@
          id="org.eclipse.imp.lpg"
          download-size="0"
          install-size="0"
-         version="0.1.84"
+         version="0.1.84.qualifier"
          unpack="false"/>
 
    <plugin
@@ -108,21 +108,21 @@
          id="lpg.runtime"
          download-size="0"
          install-size="0"
-         version="2.0.17"
+         version="2.0.17.qualifier"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.smapi"
          download-size="0"
          install-size="0"
-         version="0.1.89.2"
+         version="0.1.89.qualifier"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.smapifier"
          download-size="0"
          install-size="0"
-         version="0.1.89.2"
+         version="0.1.89.qualifier"
          unpack="false"/>
 
    <plugin
@@ -143,21 +143,21 @@
          id="org.eclipse.imp.metatooling"
          download-size="0"
          install-size="0"
-         version="0.1.92"
+         version="0.1.92.qualifier"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.preferences"
          download-size="0"
          install-size="0"
-         version="0.1.86"
+         version="0.1.86.qualifier"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.prefspecs"
          download-size="0"
          install-size="0"
-         version="0.1.89"
+         version="0.1.89.qualifier"
          unpack="false"/>
 
    <plugin
@@ -209,14 +209,14 @@
          id="org.eclipse.imp.java.hosted"
          download-size="0"
          install-size="0"
-         version="0.1.2"
+         version="0.1.2.qualifier"
          unpack="false"/>
 
    <plugin
          id="org.eclipse.imp.lpg.ide"
          download-size="0"
          install-size="0"
-         version="0.1.87"
+         version="0.1.87.qualifier"
          unpack="false"/>
 
    <plugin

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt	2010-01-29 09:50:09 UTC (rev 20539)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/how-not-to.txt	2010-01-29 09:50:32 UTC (rev 20540)
@@ -1,14 +1,16 @@
 Ways to Shoot Yourself in the Foot When Creating an Eclipse Update Site
 
-1.  DON'T strictly follow these steps; failure to do so at any point will result in various forms of fun unexplained or misleading failures at deployment time
+1.  DON'T strictly follow these steps; failure to do so at any point will result in various forms of fun unexplained or misleading failures at or after deployment time
 2.  DON'T update the versions of all involved plugins and the org.strategoxt.imp.feature project
-3.  DON'T open feature.xml in Eclipse and all versions to those in the projects using the "Versions" button
-4.  DON'T open site.xml in Eclipse and choose "Add Feature" and add the new feature (be sure you DON'T put it in the category so it won't show up)
-5.  Or DON'T pick "Synchronize all" if you made an update site already
-6.  There is no number 6.
-7.  DON'T choose "Build All"; if you pick "Build" it will act like its building but won't build all plugins
-8.  Especially DON'T invoke your favorite deity through prayer and/or song at this point
-9.  When you upload the update site, be sure you DON'T skip artifacts.xml and content.xml so Eclipse will magically fail when updating
-10. DON'T specify the "unpack" attribute in feature.xml; let Eclipse surprise you instead (the little checkbox won't tell you what happens)
-11. If you're using a testing directory for updates, be sure you DON'T adapt site.xml with the new url
-12. Finally, to test it, DON'T use a clean Eclipse installation and DON'T use a clean workspace (Eclipse 3.4+ may do workspace-based caching!)
+4.  DON'T specify the "unpack" attribute in feature.xml; let Eclipse surprise you instead (the little checkbox won't tell you what happens)
+5.  DON'T delete the content.jar and artifacts.jar after cleaning up the update dir.
+6.  There is no number 6
+7.  DON'T open feature.xml in Eclipse and set all versions to those in the projects using the "Versions" button
+8.  DON'T open site.xml in Eclipse and choose "Add Feature" and add the new feature (be sure you DON'T put it in the category so it won't show up)
+9.  Or DON'T pick "Synchronize all" if you made an update site already
+10. DON'T choose "Build All"; if you pick "Build" it will act like its building but won't build all plugins
+11. Especially DON'T invoke your favorite deity through prayer and/or song at this point
+12. If you're using a testing directory for updates, be sure you DON'T adapt site.xml with the new url
+13. Finally, to test it, DON'T use a clean Eclipse installation and DON'T use a clean workspace (Eclipse 3.4+ may do workspace-based caching!)
+14. ???
+15. Profit
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-01-29 09:50:09 UTC (rev 20539)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-01-29 09:50:32 UTC (rev 20540)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.3.2.jar" id="org.strategoxt.imp" version="0.3.2">
+   <feature url="features/org.strategoxt.imp_0.3.2.2.jar" id="org.strategoxt.imp" version="0.3.2.2">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP"/>



From L.C.L.Kats at tudelft.nl  Fri Jan 29 10:51:10 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 09:51:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20541 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <201001290951.o0T9pAks017899@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 09:51:10 +0000 (Fri, 29 Jan 2010)
New Revision: 20541

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20541&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Log:
Disabled support for transient Stratego imports

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-29 09:50:32 UTC (rev 20540)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-29 09:51:10 UTC (rev 20541)
@@ -255,12 +255,18 @@
 
    to-signatures =
      basic-desugar-top;
-     topdown(try(remove-strategy-body))
+     topdown(try(remove-stratego-bodies))
 
-   remove-strategy-body:
+   remove-stratego-bodies:
      SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
      with
        s' := <collect-all(?RDecT(_, _, _))> s
+   
+   remove-stratego-bodies:
+     Import(_) -> ()
+   
+   remove-stratego-bodies:
+     ImportWildcard(_) -> ()
 
    resolve-import-path:
      x -> full-path



From L.C.L.Kats at tudelft.nl  Fri Jan 29 11:55:25 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 10:55:25 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20542 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor
Message-ID: <201001291055.o0TAtPjK018620@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 10:55:25 +0000 (Fri, 29 Jan 2010)
New Revision: 20542

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20542&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Folding.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Outliner.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv

Log:
Added missing files. Changed outliner to use constructors instead of (mix-dependent) sorts.

Changes:

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Folding.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Folding.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Folding.esv	2010-01-29 10:55:25 UTC (rev 20542)
@@ -0,0 +1,8 @@
+module Stratego-Sugar-Folding
+
+imports Stratego-Sugar-Folding.generated
+
+folding
+  
+  // This file can be used for custom folding rules.
+  // See the imported file for a brief introduction and examples.
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Outliner.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Outliner.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Outliner.esv	2010-01-29 10:55:25 UTC (rev 20542)
@@ -0,0 +1,19 @@
+module Stratego-Sugar-Outliner
+
+// imports Stratego-Sugar-Outliner.generated
+
+outliner
+  
+  // This file can be used for custom outliner rules.
+  // See the imported file for a brief introduction and examples.
+  
+  Module
+  _.Rules
+  _.Strategies
+  _.Overlays
+  _.SDefNoArgs
+  _.SDefT
+  _.SDef
+  _.RDefNoArgs
+  _.RDefT
+  _.RDef
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Syntax.esv	2010-01-29 10:55:25 UTC (rev 20542)
@@ -0,0 +1,8 @@
+module Stratego-Sugar-Syntax
+
+imports Stratego-Sugar-Syntax.generated
+
+language
+                                                                   
+  // This file can be used for custom syntax rules.                
+  // See the imported file for a brief introduction and examples.  
\ No newline at end of file



From L.C.L.Kats at tudelft.nl  Fri Jan 29 15:19:28 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 14:19:28 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20543 - LennartKats -
	strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr
Message-ID: <201001291419.o0TEJS3J021414@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 14:19:28 +0000 (Fri, 29 Jan 2010)
New Revision: 20543

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20543&view=rev

Modified:
   strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str

Log:
Made open-parse-table optional for two more parse-* API strategies.

Changes:

Modified: strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str
===================================================================
--- strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str	2010-01-29 10:55:25 UTC (rev 20542)
+++ strategoxt/trunk/stratego-libraries/sglr/lib/stratego/sglr/parse.str	2010-01-29 14:19:28 UTC (rev 20543)
@@ -187,7 +187,7 @@
     ?path; parse-file-pt(on-open-error, on-parse-error | tbl, start-symbol, path)
 
   parse-file-pt(on-open-error, on-parse-error | tbl, start-symbol, path) =
-    where(!tbl => ParseTable(internal-tbl))
+    where(<try(memo-open-parse-table)> tbl => ParseTable(internal-tbl))
     ; (<fopen> (<id>, "r") => stream <+ on-open-error; fail)
     ; finally(
         parse-stream-pt(on-parse-error | tbl, start-symbol, path)
@@ -253,7 +253,7 @@
     ?file; parse-xtc-file-pt(on-open-error, on-parse-error |tbl, start-symbol, <path-of-xtc-file> file)
 
   parse-xtc-file-pt(on-open-error, on-parse-error |tbl, start-symbol, path) =
-    where(!tbl => ParseTable(internal-tbl))
+    where(<try(memo-open-parse-table)> tbl => ParseTable(internal-tbl))
     
     ; let open-stream =
             ?FILE(<id>); (<fopen> (<id>, "r") <+ on-open-error)



From L.C.L.Kats at tudelft.nl  Fri Jan 29 15:24:07 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 14:24:07 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20544 - LennartKats -
	strategoxt/trunk/news-archive
Message-ID: <201001291424.o0TEO7LF021438@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 14:24:07 +0000 (Fri, 29 Jan 2010)
New Revision: 20544

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20544&view=rev

Modified:
   strategoxt/trunk/news-archive/NEWS-0.18

Log:
Populating change log

Changes:

Modified: strategoxt/trunk/news-archive/NEWS-0.18
===================================================================
--- strategoxt/trunk/news-archive/NEWS-0.18	2010-01-29 14:19:28 UTC (rev 20543)
+++ strategoxt/trunk/news-archive/NEWS-0.18	2010-01-29 14:24:07 UTC (rev 20544)
@@ -4,7 +4,58 @@
 
 ---------++!! Summary of Changes
 
+- Added a new indentation-safe string interpolation syntax, which
+  can be (ab)used to quickly construct strings. Strings
+  can be quoted using $[ ... ], and anti-quoted using [ ... ].
+  Alternatively, ${, $(, or $< and corresponding anti-quotations
+  may also be used.
 
+  Example:
+
+    x      := $[ A extends B ];
+    method := $[ void foo() {
+                   ...
+                 }
+              ];
+    !$[
+        class Foo [x] {
+          [method]
+        }
+    ]
+
+  is equivalent to (note the indentation):
+
+  !$[
+  class Foo A extends B {
+    void foo() {
+      ...
+    }
+  }
+  ]
+
+  and is evaluated by a concat-strings application, resulting in
+  a nicely indented string.
+
+  Internally, asfix-imploder takes care of the indentation using a
+  new {indentpadding} SDF annotation, which adds indentation padding
+  to any lexical. (Using backtracking, this asfix-imploder modification
+  should have very little performance effect on existing applications.)
+
+  When needed, quotation characters can be escaped using dollars:
+  $[ $]$ ] is equivalent to " ] ".
+
+  Use responsibly!
+
+- Option -O 2 now only inlines "internal" strategies and strategies
+  defined within a "let". Option -O 3 now provides the old behavior,
+  which leads to longer compilation times and larger executables at
+  a questionable increase in runtime performance.
+  
+- Simplified the parsing API to eliminate parse table memoization.
+  For example, parse-file(|<import-term(YourTable.tbl)>) now parses
+  using YourTable.tbl.
+
+
 ---------++!! Detailed List of Issues
 
 The full list of issues closed in this release is available at:



From L.C.L.Kats at tudelft.nl  Fri Jan 29 16:31:53 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 15:31:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20545 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	strc-java/trunk/java
Message-ID: <201001291531.o0TFVrSs022134@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 15:31:53 +0000 (Fri, 29 Jan 2010)
New Revision: 20545

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20545&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseReject.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
   strc-java/trunk/java/spoofax-libs.jar

Log:
No longer throw an exception when a rejected/reserved keyword is used, but recover from the syntax error.

Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-29 14:24:07 UTC (rev 20544)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Disambiguator.java	2010-01-29 15:31:53 UTC (rev 20545)
@@ -354,9 +354,7 @@
             List<IParseNode> newArgs = filterTree(args, false);
 
             if (filterReject && parseTable.hasRejects()) {
-                // FIXME: report as normal parse error
-                //        (or allow this if recovery is enabled and report it in ParseErrorHandler)
-                if (hasRejectProd(t)) 
+                if (hasRejectProd(t) && !parser.useIntegratedRecovery) 
                     throw new FilterException(parser, "Unexpected reject annotation in " + yieldTree(t));
             }
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseReject.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseReject.java	2010-01-29 14:24:07 UTC (rev 20544)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/ParseReject.java	2010-01-29 15:31:53 UTC (rev 20545)
@@ -19,7 +19,9 @@
 
     @Override
     public ATerm toParseTree(ParseTable pt) {
-        throw new NotImplementedException();
+        // Reject nodes shouldn't normally be outputted to a tree,
+        // but in error recovery mode they can be
+        return super.toParseTree(pt);
     }
 
     @Override

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-01-29 14:24:07 UTC (rev 20544)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/SGLR.java	2010-01-29 15:31:53 UTC (rev 20545)
@@ -104,7 +104,7 @@
     
     private RecoveryConnector recoverIntegrator;
     
-    private boolean useIntegratedRecovery;
+    protected boolean useIntegratedRecovery;
     
     public ParserHistory getHistory() {
         return history;

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-29 14:24:07 UTC (rev 20544)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	2010-01-29 15:31:53 UTC (rev 20545)
@@ -182,28 +182,19 @@
       <IsImported> x
     <+
       rules(IsImported: x);
-      {| MissingImports:
-        <import-library> x;
-        declare-globals-top;
-        rules(
-          MissingIndirectImports: x -> <bagof-MissingImports>
-        )
-      <+
-        path := <try(resolve-import-path)> $[[x].str];
-        if not(!$[[<CurrentDir>]/[<CurrentFile>]] => path) then
-          (import-from-cache <+ import-rtree <+ import-str);
-          declare-globals-top;
-          rules(
-            MissingIndirectImports: x -> <bagof-MissingImports>
-          )
-        end
-      |}
+      <import-library> x;
+      declare-globals-top
     <+
+      path := <try(resolve-import-path)> $[[x].str];
+      if not(!$[[<CurrentDir>]/[<CurrentFile>]] => path) then
+        (import-from-cache <+ debug(!"not cached:"); import-rtree <+ import-str);
+        declare-globals-top
+      end
+    <+
       rules(
         MissingImports :+= x
         IsImportedFailed: x
-      );
-      fail
+      )
 
   declare-globals:
     ImportWildcard(x) -> ImportWildcard(x)
@@ -218,12 +209,14 @@
           if has-extension(|"str") then
             try(<declare-globals> Import($[[path]/[<remove-extension>]]))
           end
-        );
-        rules(
-          MissingIndirectImports: ImportWildcard(x) -> <bagof-MissingImports>
         )
       | "MissingImports"
       )
+    <+
+      rules(
+        MissingImports :+= x
+        IsImportedFailed: x
+      )
 
   import-library =
     <pack-stratego-parse-stratego> (IncludeFromPath(<id>), [])
@@ -240,7 +233,7 @@
      where
        rtree := <try(resolve-import-path)> <guarantee-extension(|"rtree")>;
        (<is-newer> (rtree, str) + not(<file-exists> str));
-       signatures := <ReadFromFile; to-signatures> rtree
+       signatures := <file-exists; ReadFromFile; to-signatures> rtree
      with
        <WriteToBinaryFile> (<import-cache-path>, signatures)        
 
@@ -628,22 +621,6 @@
       require(not(<IsImportedFailed> x))
 
   global-constraint-error:
-    Import(x) -> (x, $[Indirect import failure: [x] -> [<write-to-string> <MissingIndirectImports>] [missing-indirect']])
-    where
-      missing-indirect := <MissingIndirectImports> x;
-      require(!missing-indirect => [])
-    with
-      missing-indirect' := <separate-by(|", ")> missing-indirect
-
-  global-constraint-error:
-    ImportWildcard(x) -> (x, $[Indirect import failure: [missing-indirect']])
-    where
-      missing-indirect := <MissingIndirectImports> ImportWildcard(x);
-      require(!missing-indirect => [])
-    with
-      missing-indirect' := <separate-by(|", ")> missing-indirect
-
-  global-constraint-error:
     DynRuleScopeId(x) -> (x, $[Dynamic rule '[x]' not defined])
     where
       require(is-declared)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2010-01-29 14:24:07 UTC (rev 20544)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ParseErrorHandler.java	2010-01-29 15:31:53 UTC (rev 20545)
@@ -284,7 +284,7 @@
 		}
 		
 		//post visit: report error				
-		if (isErrorProduction(attrs, WATER)) {
+		if (isErrorProduction(attrs, WATER) || isRejectProduction(attrs)) {
 			IToken token = tokenizer.makeErrorToken(startOffset, offset - 1);
 			tokenizer.changeTokenKinds(startOffset, offset - 1, TokenKind.TK_LAYOUT, TokenKind.TK_ERROR);
 			reportErrorAtTokens(token, token, UNEXPECTED_TOKEN_PREFIX + token + UNEXPECTED_TOKEN_POSTFIX);
@@ -513,7 +513,7 @@
 			while (!attrList.isEmpty()) {
 				ATermAppl attr = (ATermAppl) attrList.getFirst();
 				attrList = attrList.getNext();
-				if (attr.getName().equals("term")) {
+				if (attr.getChildCount() == 1 && attr.getName().equals("term")) {
 					ATermAppl details = applAt(attr, 0);
 					if (details.getName().equals("cons")) {
 						details = applAt(details, 0);					
@@ -525,6 +525,20 @@
 		return false;
 	}
 	
+	private static boolean isRejectProduction(ATermAppl attrs) {	
+		if ("attrs".equals(attrs.getName())) {
+			ATermList attrList = termAt(attrs, 0);
+		
+			while (!attrList.isEmpty()) {
+				ATermAppl attr = (ATermAppl) attrList.getFirst();
+				attrList = attrList.getNext();
+				if (attr.getChildCount() == 0 &&  attr.getName().equals("reject"))
+					return true;
+			}
+		}
+		return false;
+	}
+	
 	private static String getDeprecatedProductionMessage(ATermAppl attrs) {
 		if ("attrs".equals(attrs.getName())) {
 			ATermList attrList = termAt(attrs, 0);

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Fri Jan 29 17:17:34 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 16:17:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20546 - LennartKats -
	sglr-recovery/trunk/permissive-grammars/trans/make-permissive
	spoofax-imp/trunk/org.strategoxt.imp.generator/lib
Message-ID: <201001291617.o0TGHYRk022970@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 16:17:34 +0000 (Fri, 29 Jan 2010)
New Revision: 20546

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20546&view=rev

Modified:
   sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar

Log:
Disabled the insertion production optimization since it seems it might cause recovery rules to be considered together for larger literals: e.g., a recovery for / and * could insert /*

Changes:

Modified: sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr
===================================================================
--- sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr	2010-01-29 15:31:53 UTC (rev 20545)
+++ sglr-recovery/trunk/permissive-grammars/trans/make-permissive/make-permissive.astr	2010-01-29 16:17:34 UTC (rev 20546)
@@ -50,9 +50,14 @@
 
       add-permissive-sections;
       
+      /* Disabled:
+         Adding rules for separate characters may cause them to be used to
+         construct larger literals. E.g. -> [\39] and -> [\42] might together
+         reduce to "/*"; the start of a block comment 
       if-switch(!OPTIMIZE_ON(),
         optimize-sdf
       );
+      */
       
       sdf-desugar;      
       parenthesize-Sdf2;
@@ -94,7 +99,7 @@
   + SwitchOption(| // TODO: Optimize by default?
       OPTIMIZE_ON()
     , "off"
-    , "Optimize the inserted literals to character groups"
+    , "Optimize the inserted literals to character groups (disabled in this version)"
     )
   + ArgOption(
       "-m"

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)



From L.C.L.Kats at tudelft.nl  Fri Jan 29 17:22:58 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Fri, 29 Jan 2010 16:22:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20547 - LennartKats -
	spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax
Message-ID: <201001291622.o0TGMw7A023050@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-29 16:22:58 +0000 (Fri, 29 Jan 2010)
New Revision: 20547

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20547&view=rev

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def

Log:


Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def	2010-01-29 16:17:34 UTC (rev 20546)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.aterm/syntax/ATerm.def	2010-01-29 16:22:58 UTC (rev 20547)
@@ -116,7 +116,7 @@
 	trm:ATerm Annotation 			-> ATerm {cons("annotated")}
 
   lexical syntax
-    ^[]* -> NoAFun %% added for tuple support
+    ~[]* -> NoAFun %% added for tuple support
 
   context-free syntax
 	"{" annos:{ ATerm ","}+ "}" 		-> Annotation {cons("default")}



From L.C.L.Kats at tudelft.nl  Sun Jan 31 14:19:59 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 31 Jan 2010 13:19:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20548 - LennartKats -
	spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr
	strc-java/trunk/java
	strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr
	strc-java/trunk/trans
Message-ID: <201001311319.o0VDJxdd024990@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-31 13:19:59 +0000 (Sun, 31 Jan 2010)
New Revision: 20548

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20548&view=rev

Removed:
   strc-java/trunk/java/bin/
Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
   strc-java/trunk/java/Makefile.am
   strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java
   strc-java/trunk/java/spoofax-libs.jar
   strc-java/trunk/trans/strj-options.str

Log:


Changes:

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF	2010-01-29 16:22:58 UTC (rev 20547)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/META-INF/MANIFEST.MF	2010-01-31 13:19:59 UTC (rev 20548)
@@ -3,7 +3,8 @@
 Bundle-Name: Scannerless Generalized LR parser
 Bundle-SymbolicName: org.spoofax.jsglr
 Bundle-Version: 0.2.2.qualifier
-Export-Package: org.spoofax.jsglr
+Export-Package: org.spoofax,
+ org.spoofax.jsglr
 Bundle-Vendor: Spoofax.org
 Require-Bundle: org.spoofax.aterm,
  org.junit,

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java
===================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	2010-01-29 16:22:58 UTC (rev 20547)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/Main.java	2010-01-31 13:19:59 UTC (rev 20548)
@@ -33,20 +33,15 @@
         boolean filter = true;
         boolean waitForProfiler = false;
         boolean timing = false;
+        boolean heuristicFilters = false;
         
-        int skip = 0;
         for(int i=0;i<args.length;i++) {
-            if(skip > 0)
-                skip--;
             if(args[i].equals("-p")) {
-                parseTable = args[i + 1];
-                skip = 1;
+                parseTable = args[++i];
             } else if(args[i].equals("-i")) {
-                input = args[i + 1];
-                skip = 1;
+                input = args[++i];
             } else if(args[i].equals("-o")) {
-                output = args[i + 1];
-                skip = 1;
+                output = args[++i];
             } else if(args[i].equals("-d")) {
                 debugging = true;
             } else if(args[i].equals("-v")) {
@@ -55,10 +50,15 @@
                 filter = false;
             } else if(args[i].equals("-c")) {
                 detectCycles = false;
+            } else if(args[i].equals("--heuristic-filters")) {
+                heuristicFilters = args[++i].equals("on");
             } else if(args[i].equals("--wait-for-profiler")) {
                 waitForProfiler = true;
             } else if(args[i].equals("--timing")) {
             	timing = true;
+            } else {
+                System.err.println("Unknown option: " + args[i]);
+                System.exit(1);
             }
         }
 
@@ -76,6 +76,7 @@
         Tools.setLogging(logging);
         sglr.getDisambiguator().setFilterCycles(detectCycles);
         sglr.getDisambiguator().setFilterAny(filter);
+        sglr.getDisambiguator().setHeuristicFilters(heuristicFilters);
         
         long parsingTime = parseFile(input, output, sglr, null);
         

Modified: strc-java/trunk/java/Makefile.am
===================================================================
--- strc-java/trunk/java/Makefile.am	2010-01-29 16:22:58 UTC (rev 20547)
+++ strc-java/trunk/java/Makefile.am	2010-01-31 13:19:59 UTC (rev 20548)
@@ -169,7 +169,7 @@
 lib/org/strategoxt/stratego_rtg/rtg.tbl : $(STRATEGOXT)/share/sdf/stratego-regular/rtg.tbl
 	[ -e lib/org/strategoxt/stratego_rtg ] || mkdir lib/org/strategoxt/stratego_rtg
 	$(ATERM)/bin/baffle -ws -i $< -o $@
-	@if [ `du -b $@ | grep -o '[0-9]*'` -lt 500 ]; then \
+	@if [ `du -k $@ | grep -o '[0-9]*'` -lt 1 ]; then \
 		echo $@ corrupted >&2; \
 		ls -l $@; \
 		rm $@; \

Modified: strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java
===================================================================
--- strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	2010-01-29 16:22:58 UTC (rev 20547)
+++ strc-java/trunk/java/runtime/org/strategoxt/lang/compat/sglr/SGLRCompatLibrary.java	2010-01-31 13:19:59 UTC (rev 20548)
@@ -57,7 +57,7 @@
 		add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filter_eagernes_on") { // (sic)
 			@Override
 			public void set() {
-				filterSettings.setFilterPreferenceCount(false);
+				filterSettings.setFilterPreferenceCount(true);
 			}
 		});
 		add(new AbstractFilterSetting(filterSettings, "STRSGLR_set_filter_eagernes_off") { // (sic)

Modified: strc-java/trunk/java/spoofax-libs.jar
===================================================================
(Binary files differ)

Modified: strc-java/trunk/trans/strj-options.str
===================================================================
--- strc-java/trunk/trans/strj-options.str	2010-01-29 16:22:58 UTC (rev 20547)
+++ strc-java/trunk/trans/strj-options.str	2010-01-31 13:19:59 UTC (rev 20548)
@@ -31,8 +31,7 @@
   ; parse-options(
       strj-options
     )
-  ; display-version
-  ; strc-announce
+  //; display-version
   ; where(output-dirname) // ensure dir exists
   ; if <get-config> "-o"; base-filename; not(<eq> (<id>, <jify>)); not(<get-config> "-F") then
       <get-config> "-o"



From L.C.L.Kats at tudelft.nl  Sun Jan 31 14:23:11 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 31 Jan 2010 13:23:11 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20549 - LennartKats -
	aster/trunk/tests
Message-ID: <201001311323.o0VDNBeM025021@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-31 13:23:11 +0000 (Sun, 31 Jan 2010)
New Revision: 20549

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20549&view=rev

Modified:
   aster/trunk/tests/Makefile.am

Log:


Changes:

Modified: aster/trunk/tests/Makefile.am
===================================================================
--- aster/trunk/tests/Makefile.am	2010-01-31 13:19:59 UTC (rev 20548)
+++ aster/trunk/tests/Makefile.am	2010-01-31 13:23:11 UTC (rev 20549)
@@ -31,8 +31,10 @@
 CLEANFILES = $(RUNTESTS) $(RUNTESTS:=.str) $(FAILTESTS:=.rtree)
 
 %.str : %.astr $(top_srcdir)/trans/aster
-	java -jar $(top_srcdir)/trans/java/aster.jar -i $< -o $@ --verbose 2  # $(top_srcdir)/trans/aster -i $< -o $@ --verbose 2
+	$(top_srcdir)/trans/aster -i $< -o $@ --verbose 2  # $(top_srcdir)/trans/aster -i $< -o $@ --verbose 2
 
+# java -Xss8m -Xmx512m -jar $(top_srcdir)/trans/java/aster.jar -i $< -o $@ --verbose 2  # $(top_srcdir)/trans/aster -i $< -o $@ --verbose 2
+
 %$(EXEEXT) : %.str
 	strc -i $< -m main-`basename $*` $(STRCFLAGS) >/dev/null
 



From L.C.L.Kats at tudelft.nl  Sun Jan 31 15:23:23 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 31 Jan 2010 14:23:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20550 - LennartKats -
	in spoofax-imp/trunk: org.strategoxt.imp.feature
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <201001311423.o0VENN8b025605@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-31 14:23:23 +0000 (Sun, 31 Jan 2010)
New Revision: 20550

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20550&view=rev

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SWTSafeLock.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java

Log:
Introduced a new SWTSafeLock class that ensures the SWT event loop runs while acquiring a lock from the main thread, in order to work around Eclipse's crappy threading model a bit.

Changes:

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-31 13:23:11 UTC (rev 20549)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	2010-01-31 14:23:23 UTC (rev 20550)
@@ -2,7 +2,7 @@
 <feature
       id="org.strategoxt.imp"
       label="Spoofax/IMP"
-      version="0.3.2.2"
+      version="0.3.2.3"
       plugin="org.strategoxt.imp.runtime">
 
    <description url="http://strategoxt.org/Stratego/Spoofax-IMP">

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SWTSafeLock.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SWTSafeLock.java	                        (rev 0)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SWTSafeLock.java	2010-01-31 14:23:23 UTC (rev 20550)
@@ -0,0 +1,46 @@
+/**
+ * 
+ */
+package org.strategoxt.imp.runtime;
+
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.ReentrantLock;
+
+import org.eclipse.swt.widgets.Display;
+
+/**
+ * A Reentrant lock implementation that ensures the SWT event loop runs
+ * while acquiring a lock from the main thread, thus avoiding a certain
+ * class of dead locks.
+ * 
+ * @author Lennart Kats <lennart add lclnet.nl>
+ */
+public class SWTSafeLock extends ReentrantLock {
+
+	private static final long serialVersionUID = 1448450448343689240L;
+
+	private static final long EVENT_RATE = 50;
+	
+	public SWTSafeLock(boolean fair) {
+		super(fair);
+	}
+	
+	public SWTSafeLock() {
+		// Default constructor (unfair)
+	}
+
+	@Override
+	public void lock() {
+		if (Environment.isMainThread()) {
+			try {
+				while (!tryLock(EVENT_RATE, TimeUnit.MILLISECONDS)) {
+					while (Display.getCurrent().readAndDispatch());
+				}
+			} catch (InterruptedException e) {
+				throw new RuntimeException(e);
+			}
+		} else {
+			super.lock();
+		}
+	}
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-01-31 13:23:11 UTC (rev 20549)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/SGLRParseController.java	2010-01-31 14:23:23 UTC (rev 20550)
@@ -38,6 +38,7 @@
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.SWTSafeLock;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.dynamicloading.DynamicParseController;
@@ -66,7 +67,7 @@
 	
 	private final TokenKindManager tokenManager = new TokenKindManager();
 	
-	private final ReentrantLock parseLock = new ReentrantLock(true);
+	private final SWTSafeLock parseLock = new SWTSafeLock(true);
 	
 	private final JSGLRI parser;
 	
@@ -265,6 +266,7 @@
 			}
 			
 			//if (isStartupParsed) Job.getJobManager().endRule(resource);
+			isAborted = false;
 			parseLock.unlock();
 		}
 
@@ -272,12 +274,10 @@
 	}
 	
 	public void scheduleParserUpdate(long delay, boolean abortFirst) {
-		if (abortFirst) {
+		if (abortFirst && parseLock.isLocked()) {
 			isAborted = true;
-			getParser().asyncAbort();
-			parseLock.lock();
-			isAborted = false;
-			parseLock.unlock();
+			if (!parseLock.isLocked())
+				isAborted = false;
 		}
 		if (getEditor() != null)
 			getEditor().scheduleParserUpdate(delay);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-31 13:23:11 UTC (rev 20549)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	2010-01-31 14:23:23 UTC (rev 20550)
@@ -13,7 +13,6 @@
 import java.util.Map;
 import java.util.WeakHashMap;
 import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
 
 import lpg.runtime.IAst;
 
@@ -46,6 +45,7 @@
 import org.strategoxt.imp.runtime.Debug;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
+import org.strategoxt.imp.runtime.SWTSafeLock;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
 import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
 import org.strategoxt.imp.runtime.dynamicloading.IDynamicLanguageService;
@@ -81,7 +81,7 @@
 	
 	private final AstMessageHandler messages = new AstMessageHandler(AstMessageHandler.ANALYSIS_MARKER_TYPE);
 	
-	private Lock observerSchedulerLock = new ReentrantLock();
+	private Lock observerSchedulerLock = new SWTSafeLock(true);
 	
 	private Job asyncObserverScheduler;
 	



From L.C.L.Kats at tudelft.nl  Sun Jan 31 16:39:22 2010
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Sun, 31 Jan 2010 15:39:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - 20551 - LennartKats -
	in spoofax-imp/trunk: org.eclipse.imp
	org.strategoxt.imp.generator/lib
	org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime
	org.strategoxt.imp.updatesite
Message-ID: <201001311539.o0VFdMtq026403@proliant.st.ewi.tudelft.nl>

Author: LennartKats
Date: 2010-01-31 15:39:21 +0000 (Sun, 31 Jan 2010)
New Revision: 20551

You can view the changes in this commit at:
   https://svn.strategoxt.org/viewvc/StrategoXT?rev=20551&view=rev

Modified:
   spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
   spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SWTSafeLock.java
   spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml

Log:
New update site version and included new make-permissive release.

Changes:

Modified: spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch
===================================================================
--- spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-31 14:23:23 UTC (rev 20550)
+++ spoofax-imp/trunk/org.eclipse.imp/org.eclipse.imp.runtime.patch	2010-01-31 15:39:21 UTC (rev 20551)
@@ -162,6 +162,15 @@
                  continue;
              }
              changeTokenPresentation(parseController, presentation, token, locator);
+@@ -176,7 +185,7 @@
+         
+        // SMS 21 Jun 2007:  negative (possibly 0) length style ranges seem to cause problems;
+         // but if you have one it should lead to an IllegalArgumentException in changeTextPresentation(..)
+-        if (styleRange.length <= 0 || styleRange.start + styleRange.length > this.fSourceViewer.getDocument().getLength()) {
++        if (styleRange.length <= 0 ||  this.fSourceViewer.getDocument() == null || styleRange.start + styleRange.length > this.fSourceViewer.getDocument().getLength()) {
+         } else {
+             presentation.addStyleRange(styleRange);
+         }
 @@ -190,6 +199,7 @@
              	// SMS 16 Sep 2008
              	int charCount;

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/lib/make_permissive.jar
===================================================================
(Binary files differ)

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SWTSafeLock.java
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SWTSafeLock.java	2010-01-31 14:23:23 UTC (rev 20550)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/SWTSafeLock.java	2010-01-31 15:39:21 UTC (rev 20551)
@@ -33,6 +33,7 @@
 	public void lock() {
 		if (Environment.isMainThread()) {
 			try {
+				// TODO: Could the SWTSafeLock cause trouble, e.g. by launching multiple content proposers?
 				while (!tryLock(EVENT_RATE, TimeUnit.MILLISECONDS)) {
 					while (Display.getCurrent().readAndDispatch());
 				}

Modified: spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml
===================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-01-31 14:23:23 UTC (rev 20550)
+++ spoofax-imp/trunk/org.strategoxt.imp.updatesite/site.xml	2010-01-31 15:39:21 UTC (rev 20551)
@@ -3,7 +3,7 @@
    <description name="Spoofax/IMP" url="http://www.lclnet.nl/update">
       Spoofax/IMP update site
    </description>
-   <feature url="features/org.strategoxt.imp_0.3.2.2.jar" id="org.strategoxt.imp" version="0.3.2.2">
+   <feature url="features/org.strategoxt.imp_0.3.2.3.jar" id="org.strategoxt.imp" version="0.3.2.3">
       <category name="Spoofax/IMP"/>
    </feature>
    <category-def name="Spoofax/IMP" label="Spoofax/IMP"/>



