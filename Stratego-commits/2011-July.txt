From tobivollebregt at gmail.com  Fri Jul  1 15:10:34 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Fri, 01 Jul 2011 13:10:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23104 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml: .
	.settings META-INF src src/org src/org/spoofax
	src/org/spoofax/interpreter src/org/spoofax/interpre...
Message-ID: <20110701131034.7F8D1CC06F@mx4.tudelft.nl>

Author: tvo
Date: Fri Jul  1 13:10:34 2011
New Revision: 23104
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23104&sc=1

Log:
XML library

(see test code and comments for usage)

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.classpath
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.project
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.settings/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.settings/org.eclipse.jdt.core.prefs
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/META-INF/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/build.properties
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XMLAbstractPrimitive.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XMLLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_get_parse_errors.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_parse_base.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_parse_file.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_parse_string.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_set_feature.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/test/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/test/XMLLibraryTest.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/tests/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/tests/Makefile
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/tests/data/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/tests/src/   (props changed)
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/tests/src/parse-xml-test.str

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.classpath
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.classpath	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.project
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.project	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.spoofax.interpreter.library.xml</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.settings/org.eclipse.jdt.core.prefs
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/.settings/org.eclipse.jdt.core.prefs	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,8 @@
+#Thu Apr 21 17:14:07 CEST 2011
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.5

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/META-INF/MANIFEST.MF
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/META-INF/MANIFEST.MF	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,10 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: org.spoofax.interpreter.library.xml
+Bundle-SymbolicName: org.spoofax.interpreter.library.xml
+Bundle-Version: 1.0.0.qualifier
+Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Require-Bundle: org.junit;bundle-version="4.8.1",
+ org.spoofax.interpreter.core,
+ org.spoofax.terms;bundle-version="1.0.0"
+Export-Package: org.spoofax.interpreter.library.xml

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/build.properties
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/build.properties	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,4 @@
+source.. = src/
+output.. = bin/
+bin.includes = META-INF/,\
+               .

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,211 @@
+package org.spoofax.interpreter.library.xml;
+
+import java.util.ArrayList;
+import java.util.Stack;
+
+import org.spoofax.interpreter.terms.IStrategoConstructor;
+import org.spoofax.interpreter.terms.IStrategoList;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.xml.sax.Attributes;
+import org.xml.sax.SAXParseException;
+import org.xml.sax.helpers.DefaultHandler;
+
+/**
+ * SAX ContentHandler which builds IStrategoTerms that represent the
+ * XML document using the ITermFactory passed to the constructor.
+ *
+ * If the parser is namespace aware, then the resulting ATerm has the structure:
+ *
+ *  Element   : QName * List(Attribute) * List(Element) -> Element
+ *  Attribute : QName * String -> Attribute
+ *  Text      : String -> Element
+ *  QName     : String * String
+ *
+ * If the parser is not namespace aware, then it has this structure:
+ *
+ *  Element   : String * List(Attribute) * List(Element) -> Element
+ *  Attribute : String * String -> Attribute
+ *  Text      : String -> Element
+ *
+ * For text-content-only elements, Text nodes are included if the
+ * http://spoofax.org/sax/features/character-data feature is enabled.
+ *
+ * For mixed-content elements, Text nodes are included if the
+ * http://spoofax.org/sax/features/mixed-content feature is enabled.
+ *
+ * @author Tobi Vollebregt
+ */
+public class StrategoTermBuilder extends DefaultHandler {
+
+	private static class Element {
+		public final String uri;
+
+		public final String localName;
+
+		public final String qName;
+
+		public final IStrategoList attributes;
+
+		public final ArrayList<IStrategoTerm> childs;
+
+		public Element(String uri, String localName, String qName, IStrategoList attributes) {
+			this.uri = uri;
+			this.localName = localName;
+			this.qName = qName;
+			this.attributes = attributes;
+			this.childs = new ArrayList<IStrategoTerm>();
+		}
+	}
+
+	private final IStrategoConstructor elementCons;
+
+	private final IStrategoConstructor attributeCons;
+
+	private final IStrategoConstructor textCons;
+
+	private final IStrategoConstructor qNameCons;
+
+	private final IStrategoConstructor noneCons;
+
+	private final ITermFactory factory;
+
+	private final Stack<Element> stack = new Stack<Element>();
+
+	private final StringBuilder textBuilder = new StringBuilder();
+
+	private final ArrayList<SAXParseException> errors = new ArrayList<SAXParseException>();
+
+	private final boolean allowMixedContent;
+
+	private final boolean allowTextContent;
+
+	private final boolean namespaceAware;
+
+	public StrategoTermBuilder(ITermFactory factory, XMLLibrary library) {
+		this.factory = factory;
+
+		elementCons = factory.makeConstructor("Element", 3);
+		attributeCons = factory.makeConstructor("Attribute", 2);
+		textCons = factory.makeConstructor("Text", 1);
+		qNameCons = factory.makeConstructor("QName", 2);
+		noneCons = factory.makeConstructor("None", 0);
+
+		allowMixedContent = library.getAllowMixedContent();
+		allowTextContent = library.getAllowCharacterContent();
+		namespaceAware = library.obtainParser().isNamespaceAware();
+
+		// This dummy element collects the root element.
+		stack.push(new Element(null, null, null, null));
+	}
+
+	public IStrategoTerm getRootElement() {
+		return stack.peek().childs.get(0);
+	}
+
+	public ArrayList<SAXParseException> getErrors() {
+		return errors;
+	}
+
+	@Override
+	public void startElement(String uri, String localName, String qName, Attributes attributes) {
+		// Store text parsed before this start tag if mixed content is allowed.
+		if (allowMixedContent && textBuilder.length() > 0) {
+			Element parent = stack.peek();
+			IStrategoTerm contents = factory.makeString(textBuilder.toString());
+			IStrategoTerm textNode = factory.makeAppl(textCons, contents);
+
+			parent.childs.add(textNode);
+		}
+
+		textBuilder.setLength(0);
+		stack.push(new Element(uri, localName, qName, attributesToStrategoList(attributes)));
+	}
+
+	private IStrategoTerm makeName(String uri, String localName, String qName)
+	{
+		if (namespaceAware) {
+			IStrategoTerm uriTerm = uri.isEmpty() ? factory.makeAppl(noneCons) : factory.makeString(uri);
+			IStrategoTerm localNameTerm = factory.makeString(uri.isEmpty() ? qName : localName);
+			return factory.makeAppl(qNameCons, uriTerm, localNameTerm);
+		}
+		else {
+			return factory.makeString(qName);
+		}
+	}
+
+	private IStrategoTerm makeName(Element element)
+	{
+		return makeName(element.uri, element.localName, element.qName);
+	}
+
+	private IStrategoTerm makeName(Attributes attributes, int index)
+	{
+		return makeName(attributes.getURI(index), attributes.getLocalName(index), attributes.getQName(index));
+	}
+
+	private IStrategoList attributesToStrategoList(Attributes attributes) {
+		final int sz = attributes.getLength();
+		final IStrategoTerm[] strategoAttributes = new IStrategoTerm[sz];
+		for (int i = 0; i < sz; ++i) {
+			IStrategoTerm name = makeName(attributes, i);
+			IStrategoTerm value = factory.makeString(attributes.getValue(i));
+			strategoAttributes[i] = factory.makeAppl(attributeCons, name, value);
+		}
+		return factory.makeList(strategoAttributes);
+	}
+
+	@Override
+	public void endElement(String uri, String localName, String qName) {
+		Element element = stack.pop();
+		Element parent = stack.peek();
+
+		// Store text parsed before this end tag if either mixed content is allowed
+		// or text-only content is allowed and the element has no children.
+		if ((allowMixedContent || (allowTextContent && element.childs.isEmpty())) && textBuilder.length() > 0) {
+			IStrategoTerm contents = factory.makeString(textBuilder.toString());
+			IStrategoTerm textNode = factory.makeAppl(textCons, contents);
+
+			element.childs.add(textNode);
+		}
+
+		textBuilder.setLength(0);
+		parent.childs.add(elementToStrategoTerm(element));
+	}
+
+	private IStrategoTerm elementToStrategoTerm(Element element) {
+		IStrategoTerm name = makeName(element);
+		IStrategoTerm childs = childsToStrategoList(element.childs);
+
+		return factory.makeAppl(elementCons, name, element.attributes, childs);
+	}
+
+	private IStrategoTerm childsToStrategoList(ArrayList<IStrategoTerm> childs) {
+		IStrategoTerm[] strategoChilds = new IStrategoTerm[childs.size()];
+		childs.toArray(strategoChilds);
+		return factory.makeList(strategoChilds);
+	}
+
+	@Override
+	public void characters(char[] ch, int start, int length) {
+		if (allowMixedContent || allowTextContent) {
+			textBuilder.append(ch, start, length);
+		}
+	}
+
+	@Override
+	public void ignorableWhitespace(char[] ch, int start, int length) {
+		characters(ch, start, length);
+	}
+
+	@Override
+	public void warning(SAXParseException pe) {
+		errors.add(pe);
+	}
+
+	@Override
+	public void error(SAXParseException pe) {
+		errors.add(pe);
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XMLAbstractPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XMLAbstractPrimitive.java	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,17 @@
+package org.spoofax.interpreter.library.xml;
+
+import org.spoofax.interpreter.library.AbstractPrimitive;
+
+/**
+ * @author Tobi Vollebregt
+ */
+public abstract class XMLAbstractPrimitive extends AbstractPrimitive {
+
+	protected final XMLLibrary library;
+
+	public XMLAbstractPrimitive(XMLLibrary library, String name, int svars, int tvars) {
+		super(name, svars, tvars);
+		this.library = library;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XMLLibrary.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XMLLibrary.java	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,104 @@
+package org.spoofax.interpreter.library.xml;
+
+import java.util.ArrayList;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+
+import org.spoofax.interpreter.library.AbstractStrategoOperatorRegistry;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
+
+/**
+ * Library that adds XML parsing capabilities to Spoofax.
+ *
+ * The XMLLibrary instance is used to cache the parser and parser factory,
+ * and to store some state, so the library is not thread safe.
+ *
+ * @author Tobi Vollebregt
+ */
+public class XMLLibrary extends AbstractStrategoOperatorRegistry {
+
+	public static final String REGISTRY_NAME = "XML";
+
+	private SAXParserFactory parserFactory;
+	private SAXParser parser;
+	private boolean allowMixedContent = false;
+	private boolean allowCharacterContent = true;
+	private Exception lastException;
+	private ArrayList<SAXParseException> lastErrors;
+
+	public XMLLibrary() {
+		add(new XML_get_parse_errors(this));
+		add(new XML_parse_file(this));
+		add(new XML_parse_string(this));
+		add(new XML_set_feature(this));
+	}
+
+	public String getOperatorRegistryName() {
+		return REGISTRY_NAME;
+	}
+
+	public SAXParserFactory obtainParserFactory() {
+		if (parserFactory == null) {
+			parserFactory = SAXParserFactory.newInstance();
+		}
+		return parserFactory;
+	}
+
+	public SAXParser obtainParser() {
+		if (parser == null) {
+			try {
+				parser = obtainParserFactory().newSAXParser();
+			} catch (ParserConfigurationException e) {
+				setLastException(e);
+			} catch (SAXException e) {
+				setLastException(e);
+			}
+		}
+		return parser;
+	}
+
+	public void purgeParser() {
+		parser = null;
+	}
+
+	public void clearErrors() {
+		lastException = null;
+		lastErrors = null;
+	}
+
+	public boolean getAllowMixedContent() {
+		return allowMixedContent;
+	}
+
+	public void setAllowMixedContent(boolean allowMixedContent) {
+		this.allowMixedContent = allowMixedContent;
+	}
+
+	public boolean getAllowCharacterContent() {
+		return allowCharacterContent;
+	}
+
+	public void setAllowCharacterContent(boolean allowCharacterContent) {
+		this.allowCharacterContent = allowCharacterContent;
+	}
+
+	public Exception getLastException() {
+		return lastException;
+	}
+
+	public void setLastException(Exception lastException) {
+		this.lastException = lastException;
+	}
+
+	public ArrayList<SAXParseException> getLastErrors() {
+		return lastErrors;
+	}
+
+	public void setLastErrors(ArrayList<SAXParseException> lastErrors) {
+		this.lastErrors = lastErrors;
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_get_parse_errors.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_get_parse_errors.java	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,70 @@
+package org.spoofax.interpreter.library.xml;
+
+import java.util.ArrayList;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.xml.sax.SAXParseException;
+
+/**
+ * Return the errors that occurred during the last invocation of XML_parse_file,
+ * XML_parse_string or XML_set_feature. Errors are returned as a list of strings.
+ *
+ * This primitive fails if there weren't any errors, i.e. if a list is returned,
+ * it has at least one element.
+ *
+ * @author Tobi Vollebregt
+ */
+public class XML_get_parse_errors extends XMLAbstractPrimitive {
+
+	private static final String NAME = "XML_get_parse_errors";
+
+	public XML_get_parse_errors(XMLLibrary library) {
+		super(library, NAME, 0, 0);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars)
+			throws InterpreterException {
+
+		final Exception fatalError = library.getLastException();
+		final ArrayList<SAXParseException> nonFatalErrors = library.getLastErrors();
+
+		// Any errors at all?
+		if (fatalError == null
+				&& (nonFatalErrors == null || nonFatalErrors.isEmpty())) {
+			// No
+			return false;
+		} else {
+			// Yes: convert them to Stratego terms
+
+			final ITermFactory factory = env.getFactory();
+			final ArrayList<IStrategoTerm> errors = new ArrayList<IStrategoTerm>();
+
+			if (nonFatalErrors != null) {
+				for (SAXParseException pe : nonFatalErrors) {
+					errors.add(factory.makeString(toString(pe)));
+				}
+			}
+
+			if (fatalError != null) {
+				if (fatalError instanceof SAXParseException) {
+					errors.add(factory.makeString(toString((SAXParseException) fatalError)));
+				} else {
+					errors.add(factory.makeString(fatalError.getMessage()));
+				}
+			}
+
+			env.setCurrent(factory.makeList(errors));
+			return true;
+		}
+	}
+
+	private static String toString(SAXParseException pe) {
+		return pe.getMessage() + " [line " + pe.getLineNumber() + ", column " + pe.getColumnNumber() + "]";
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_parse_base.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_parse_base.java	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,76 @@
+package org.spoofax.interpreter.library.xml;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import javax.xml.parsers.SAXParser;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.xml.sax.SAXException;
+
+/**
+ * Base class for XML_parse_string and XML_parse_file
+ *
+ * @author Tobi Vollebregt
+ */
+public abstract class XML_parse_base extends XMLAbstractPrimitive {
+
+    public XML_parse_base(XMLLibrary library, String name) {
+        super(library, name, 0, 1);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+        if (tvars[0].getTermType() != IStrategoTerm.STRING) {
+            return false;
+        }
+
+        library.clearErrors();
+
+        final String input = ((IStrategoString) tvars[0]).stringValue();
+        final InputStream in = makeInputStream(env, input);
+
+        if (in == null) {
+            return false;
+        }
+
+        final IStrategoTerm result = parse(env, in);
+
+        if (result == null) {
+            return false;
+        }
+
+        env.setCurrent(result);
+        return true;
+    }
+
+    protected abstract InputStream makeInputStream(IContext env, String input);
+
+    protected IStrategoTerm parse(IContext env, InputStream in) {
+        final SAXParser parser = library.obtainParser();
+
+        if (parser == null) {
+            return null;
+        }
+
+        final StrategoTermBuilder builder = new StrategoTermBuilder(env.getFactory(), library);
+        IStrategoTerm result = null;
+
+        try {
+        	parser.getXMLReader().setErrorHandler(builder);
+            parser.parse(in, builder);
+            result = builder.getRootElement();
+        } catch (SAXException e) {
+        	library.setLastException(e);
+        } catch (IOException e) {
+        	library.setLastException(e);
+        }
+
+      	library.setLastErrors(builder.getErrors());
+        return result;
+    }
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_parse_file.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_parse_file.java	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,38 @@
+package org.spoofax.interpreter.library.xml;
+
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.ssl.SSLLibrary;
+
+/**
+ * This primitive takes a filename (String) as input and tries to parse this
+ * file using a SAX XML parser.
+ *
+ * The strategy fails if the parse fails for any reason. In that case some
+ * error messages may be available using XML_get_parse_errors.
+ *
+ * @see StrategoTermBuilder for the output format
+ *
+ * @author Tobi Vollebregt
+ */
+public class XML_parse_file extends XML_parse_base {
+
+    public XML_parse_file(XMLLibrary library) {
+        super(library, "XML_parse_file");
+    }
+
+    @Override
+    protected InputStream makeInputStream(IContext env, String input) {
+        InputStream in = null;
+
+        try {
+            in = SSLLibrary.instance(env).getIOAgent().openInputStream(input);
+        } catch (FileNotFoundException e) {
+            library.setLastException(e);
+        }
+
+        return in;
+    }
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_parse_string.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_parse_string.java	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,29 @@
+package org.spoofax.interpreter.library.xml;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+
+import org.spoofax.interpreter.core.IContext;
+
+/**
+ * This primitive takes a String as input and tries to parse this String
+ * using a SAX XML parser.
+ *
+ * The strategy fails if the parse fails for any reason. In that case some
+ * error messages may be available using XML_get_parse_errors.
+ *
+ * @see StrategoTermBuilder for the output format
+ * 
+ * @author Tobi Vollebregt
+ */
+public class XML_parse_string extends XML_parse_base {
+
+    public XML_parse_string(XMLLibrary library) {
+        super(library, "XML_parse_string");
+    }
+
+    @Override
+    protected InputStream makeInputStream(IContext env, String input) {
+        return new ByteArrayInputStream(input.getBytes());
+    }
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_set_feature.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/XML_set_feature.java	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,88 @@
+package org.spoofax.interpreter.library.xml;
+
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParserFactory;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoInt;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.xml.sax.SAXException;
+
+/**
+ * Sets a feature to be enabled/disabled for any subsequent parses.
+ *
+ * A list of standard features can be found here:
+ * http://www.saxproject.org/apidoc/org/xml/sax/package-summary.html#package_description
+ *
+ * Additionally the following two Spoofax-specific features are recognized:
+ *
+ *  - http://spoofax.org/sax/features/mixed-content, default: false
+ *    If set, include text nodes between elements in the result.
+ *
+ *  - http://spoofax.org/sax/features/character-data, default: true
+ *    If set, include character data as a text node in elements that do not
+ *    have any child elements. Has no effect if mixed-content is already set.
+ *
+ * @author Tobi Vollebregt
+ */
+public class XML_set_feature extends XMLAbstractPrimitive {
+
+	private static final String PREFIX = "http://spoofax.org/sax/features/";
+	private static final String MIXED_CONTENT = PREFIX + "mixed-content";
+	private static final String CHARACTER_DATA = PREFIX + "character-data";
+
+	public XML_set_feature(XMLLibrary library) {
+		super(library, "XML_set_feature", 0, 2);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+
+		if (tvars[0].getTermType() != IStrategoTerm.STRING
+				|| tvars[1].getTermType() != IStrategoTerm.INT) {
+			return false;
+		}
+
+		library.clearErrors();
+
+		final String feature = ((IStrategoString) tvars[0]).stringValue();
+		final boolean enable = ((IStrategoInt) tvars[1]).intValue() != 0;
+
+		if (feature.startsWith(PREFIX)) {
+			if (feature.equals(MIXED_CONTENT)) {
+				library.setAllowMixedContent(enable);
+				return true;
+			}
+			else if (feature.equals(CHARACTER_DATA)) {
+				library.setAllowCharacterContent(enable);
+				return true;
+			}
+			else {
+				library.setLastException(new Exception("Feature \"" + feature + "\" not recognized"));
+				return false;
+			}
+		}
+		else {
+			final SAXParserFactory parserFactory = library.obtainParserFactory();
+
+			if (parserFactory == null) {
+				return false;
+			}
+
+			try {
+				parserFactory.setFeature(feature, enable);
+			    library.purgeParser();
+				return true;
+			} catch (SAXException e) {
+				library.setLastException(e);
+			} catch (ParserConfigurationException e) {
+				library.setLastException(e);
+			} 
+
+			return false;
+		}
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/test/XMLLibraryTest.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/test/XMLLibraryTest.java	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,31 @@
+package org.spoofax.interpreter.library.xml.test;
+
+import java.io.IOException;
+
+import org.spoofax.interpreter.core.InterpreterException;
+import org.spoofax.interpreter.library.xml.XMLLibrary;
+import org.spoofax.interpreter.test.AbstractInterpreterTest;
+
+/**
+ * Test harness for the XMLLibrary.
+ * Based on: org.spoofax.interpreter.test.library.LibraryTest
+ *
+ * @author Tobi Vollebregt
+ */
+public class XMLLibraryTest extends AbstractInterpreterTest {
+
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp("tests/data");
+		itp.addOperatorRegistry(new XMLLibrary());
+	}
+
+	public void testParseXml() throws IOException, InterpreterException {
+		interpTest("parse-xml-test", "(22,0)");
+	}
+
+	public void interpTest(String test, String result) throws IOException, InterpreterException {
+		super.interpTest(test, "()", result);
+	}
+
+}

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/tests/Makefile
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/tests/Makefile	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,9 @@
+
+TEST_SRC=$(wildcard src/*.str)
+
+TEST_CTREE=$(patsubst src/%.str,data/%.ctree,$(TEST_SRC))
+
+all: $(TEST_CTREE)
+
+data/%.ctree : src/%.str
+	strc -i $< -F | baffle -wt -o $@

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/tests/src/parse-xml-test.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/tests/src/parse-xml-test.str	Fri Jul  1 13:10:34 2011	(r23104)
@@ -0,0 +1,193 @@
+module parse-xml-test
+imports stratego-lib
+
+strategies
+
+  main =
+    xml-set-feature(|"http://xml.org/sax/features/namespaces", 0);
+    // xml-set-feature(|"http://xml.org/sax/features/validation", 1);
+    test-suite(!"parse-xml-test",
+      simple-tests
+    ; whitespace-tests
+    ; entity-tests
+    ; namespace-tests
+    ; parse-error-tests
+    )
+
+strategies
+
+  xml-set-feature = ?(a, b); prim("XML_set_feature", a, b)
+  xml-set-feature(|a, b) = prim("XML_set_feature", a, b)
+  xml-parse-string = ?t; prim("XML_parse_string", t)
+  xml-get-parse-errors = prim("XML_get_parse_errors")
+
+  with-feature(s | feature, enable) =
+  	xml-set-feature(|feature, enable); s;
+  	xml-set-feature(|feature, <subti> (1, enable)) 
+
+  with-mixed-content(s) =
+  	with-feature(s | "http://spoofax.org/sax/features/mixed-content", 1)
+
+  without-character-data(s) =
+  	with-feature(s | "http://spoofax.org/sax/features/character-data", 0)
+
+  with-namespaces(s) =
+  	with-feature(s | "http://xml.org/sax/features/namespaces", 1)
+
+// namespace aware
+signature
+  constructors
+    Element   : QName * List(Attribute) * List(Element) -> Element
+    Attribute : QName * String -> Attribute
+    Text      : String -> Element
+    QName     : String * String -> QName
+
+// not namespace aware 
+signature
+  constructors
+    Element   : String * List(Attribute) * List(Element) -> Element
+    Attribute : String * String -> Attribute
+    Text      : String -> Element
+
+strategies
+
+  simple-tests =
+    apply-test(
+      !"combined open/close tag"
+    , xml-parse-string
+    , !"<root/>"
+    , !Element("root", [], [])
+      )
+  ; apply-test(
+      !"separate open/close tag"
+    , xml-parse-string
+    , !"<root></root>"
+    , !Element("root", [], [])
+    )
+  ; apply-test(
+      !"attributes"
+    , xml-parse-string
+    , !"<root a=\"1\" b='2'/>"
+    , !Element("root", [Attribute("a", "1"), Attribute("b", "2")], [])
+    )
+  ; apply-test(
+       !"child elements"
+    , xml-parse-string
+     , !"<root><a>1</a><b>2</b></root>"
+     , !Element("root", [], [Element("a", [], [Text("1")]), Element("b", [], [Text("2")])])
+    )
+  ; apply-test(
+      !"comments"
+    , xml-parse-string
+    , !"<root><!-- this is a comment --></root>"
+    , !Element("root", [], [])
+    )
+  ; apply-test(
+      !"cdata"
+    , xml-parse-string
+    , !"<root><![CDATA[this is CDATA ]]>this is PCDATA</root>"
+    , !Element("root", [], [Text("this is CDATA this is PCDATA")])
+    )
+
+  whitespace-tests =
+    apply-test(
+      !"mixed content 0"
+    , without-character-data(xml-parse-string)
+    , !"<root> <a/> </root>"
+    , !Element("root", [], [Element("a", [], [])])
+    )
+  ; apply-test(
+      !"mixed content 1"
+    , xml-parse-string
+    , !"<root> <a/> </root>"
+    , !Element("root", [], [Element("a", [], [])])
+    )
+  ; apply-test(
+      !"mixed content 2"
+    , with-mixed-content(xml-parse-string)
+    , !"<root> <a/> </root>"
+    , !Element("root", [], [Text(" "), Element("a", [], []), Text(" ")])
+    )
+  ; apply-test(
+       !"text content 0"
+    , without-character-data(xml-parse-string)
+    , !"<root> foo </root>"
+    , !Element("root", [], [])
+    )
+  ; apply-test(
+       !"text content 1"
+    , xml-parse-string
+    , !"<root> foo </root>"
+    , !Element("root", [], [Text(" foo ")])
+    )
+  ; apply-test(
+       !"text content 2"
+    , with-mixed-content(xml-parse-string)
+    , !"<root> foo </root>"
+    , !Element("root", [], [Text(" foo ")])
+    )
+
+  entity-tests =
+    apply-test(
+      !"basic entity test"
+    , xml-parse-string
+    , !"<root>&quot;&amp;&apos;&lt;&gt;</root>"
+    , !Element("root", [], [Text("\"&'<>")])
+    )
+  ; apply-test(
+      !"numeric entity test"
+    , xml-parse-string
+    , !"<root>&#0065;&#0097;&#x0042;&#x0062;</root>"
+    , !Element("root", [], [Text("AaBb")])
+    )
+  ; apply-test(
+      !"custom entity test"
+    , xml-parse-string
+    , !"<!DOCTYPE test [<!ENTITY fb \"foobar\">]><root>&fb;</root>"
+    , !Element("root", [], [Text("foobar")])
+    )
+  ; apply-and-show(
+      !"unknown entity test"
+    , not(xml-parse-string) ; xml-get-parse-errors
+    , !"<root>&fb;</root>"
+    )
+
+  namespace-tests =
+    // source of the example: http://www.w3.org/TR/xml-names/
+    apply-test(
+      !"namespace test 0"
+    , xml-parse-string
+    , !"<x xmlns:edi='http://ecommerce.example.org/schema'><edi:foo/></x>"
+    , !Element("x", [Attribute("xmlns:edi","http://ecommerce.example.org/schema")], [Element("edi:foo", [], [])])
+    )
+  ; apply-test(
+      !"namespace test 1"
+    , with-namespaces(xml-parse-string)
+    , !"<x xmlns:edi='http://ecommerce.example.org/schema'><edi:foo/></x>"
+    , !Element(QName(None(), "x"), [], [Element(QName("http://ecommerce.example.org/schema", "foo"), [], [])])
+    )
+
+  parse-error-tests =
+    // Possibly other XML parser implementations are capable of recovering
+    // from the errors and returning an approximation of the input document.
+    // If so, s/not/try/ for those tests.
+    apply-and-show(
+      !"parse error 0"
+    , not(xml-parse-string) ; xml-get-parse-errors ; is-list
+    , !"<wrong>"
+    )
+  ;	apply-and-show(
+      !"parse error 1"
+    , not(xml-parse-string) ; xml-get-parse-errors ; is-list
+    , !"<wrong>&amp</wrong>"
+    )
+  ;	apply-and-show(
+      !"parse error 2"
+    , not(xml-parse-string) ; xml-get-parse-errors ; is-list
+    , !"<wrong>5 < 3</wrong>"
+    )
+  ;	apply-and-show(
+      !"parse error 3"
+    , not(with-namespaces(xml-parse-string)) ; xml-get-parse-errors ; is-list
+    , !"<wrong><edi:foo/></wrong>"
+    )

From tobivollebregt at gmail.com  Mon Jul  4 13:08:29 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 04 Jul 2011 11:08:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23105 - in
	spoofax/trunk/spoofax/org.spoofax.interpreter.core: META-INF
	src/java/org/spoofax/interpreter/library/ssl
	src/java/org/spoofax/interpreter/test
Message-ID: <20110704110829.01F25CC06C@mx4.tudelft.nl>

Author: tvo
Date: Mon Jul  4 11:08:28 2011
New Revision: 23105
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23105&sc=1

Log:
* add SSL_filesize (ported from Strategy to AbstractPrimitive...)
* export org.spoofax.interpreter.test from org.spoofax.interpreter.core

Added:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_filesize.java
Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
   spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AbstractInterpreterTest.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF	Fri Jul  1 13:10:34 2011	(r23104)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/META-INF/MANIFEST.MF	Mon Jul  4 11:08:28 2011	(r23105)
@@ -13,5 +13,6 @@
  org.spoofax.interpreter.library.ssl,
  org.spoofax.interpreter.stratego,
  org.spoofax.interpreter.terms,
- org.spoofax.interpreter.terms.saf
+ org.spoofax.interpreter.terms.saf,
+ org.spoofax.interpreter.test
 Bundle-Vendor: Spoofax.org

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	Fri Jul  1 13:10:34 2011	(r23104)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSLLibrary.java	Mon Jul  4 11:08:28 2011	(r23105)
@@ -143,7 +143,8 @@
         add(new SSL_isPlaceholder());
         add(new SSL_makePlaceholder());
         add(new SSL_getPlaceholder());
-     }
+        add(new SSL_filesize());
+    }
 
     public AbstractPrimitive lookup(String s) {
         return get(s);

Added: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_filesize.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/library/ssl/SSL_filesize.java	Mon Jul  4 11:08:28 2011	(r23105)
@@ -0,0 +1,48 @@
+package org.spoofax.interpreter.library.ssl;
+
+import java.io.File;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoString;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+
+/**
+ * Primitive to determine the size of a file.
+ *
+ * Fails if and only if:
+ * - the input is not a string, or
+ * - the file does not exist, or
+ * - the file is not a normal file.
+ *
+ * The file size is returned as a real as this is the smallest type that can
+ * represent file sizes accurately.  (for integer values reals are exact)
+ *
+ * @author Tobi Vollebregt
+ */
+public class SSL_filesize extends AbstractPrimitive {
+
+    protected SSL_filesize() {
+        super("SSL_filesize", 0, 1);
+    }
+
+    @Override
+    public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+
+       if (tvars[0].getTermType() != IStrategoTerm.STRING)
+           return false;
+
+       IStrategoString filename = (IStrategoString) tvars[0];
+       SSLLibrary library = (SSLLibrary) env.getOperatorRegistry(SSLLibrary.REGISTRY_NAME);
+       File file = library.getIOAgent().openFile(filename.stringValue());
+
+       if (!file.isFile()) {
+           return false;
+       }
+
+       env.setCurrent(env.getFactory().makeReal(file.length()));
+       return true;
+    }
+
+}

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AbstractInterpreterTest.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AbstractInterpreterTest.java	Fri Jul  1 13:10:34 2011	(r23104)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.core/src/java/org/spoofax/interpreter/test/AbstractInterpreterTest.java	Mon Jul  4 11:08:28 2011	(r23105)
@@ -61,7 +61,7 @@
         if(unitTestDebug) {
             System.out.println("Input : " + input);
         }
-        assertTrue(runInterp(test, input));
+        assertTrue("main strategy failed", runInterp(test, input));
         IStrategoTerm x = output;
         IStrategoTerm y = itp.current();
         if(unitTestDebug) {
@@ -74,7 +74,7 @@
         if(unitTestDebug) {
             System.out.println(succeeded);
         }
-        assertTrue(succeeded);
+        assertTrue("actual output differs from expected output", succeeded);
     }
 
     private boolean runInterp(String test, IStrategoTerm input) throws IOException, InterpreterException {

From L.C.L.Kats at tudelft.nl  Mon Jul  4 21:09:19 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Mon, 04 Jul 2011 19:09:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23106 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20110704190919.66FB52B800F@mx2.tudelft.nl>

Author: LennartKats
Date: Mon Jul  4 19:09:18 2011
New Revision: 23106
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23106&sc=1

Log:
fixed bad import

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Mon Jul  4 11:08:28 2011	(r23105)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Mon Jul  4 19:09:18 2011	(r23106)
@@ -2,7 +2,7 @@
 
 imports
 	sdf2imp/util/construct-text
-	sdf2imp/util/origin-strategies
+	sdf2imp/util/origin-tracking
 		
 rules //rules that translate AST-changes to Textual changes
 
@@ -253,4 +253,4 @@
 
 assert-valid-offset =
 	?(s,e,_);
-	with(<leq>(s,e))
\ No newline at end of file
+	with(<leq>(s,e))

From tobivollebregt at gmail.com  Tue Jul  5 15:34:04 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 05 Jul 2011 13:34:04 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23107 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib
Message-ID: <20110705133404.999B6108C03C@mx3.tudelft.nl>

Author: tvo
Date: Tue Jul  5 13:34:04 2011
New Revision: 23107
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23107&sc=1

Log:
fix ambiguities in Stratego SDF embedding

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Sdf2.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Sdf2.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Sdf2.sdf	Mon Jul  4 19:09:18 2011	(r23106)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/lib/Stratego-Sdf2.sdf	Tue Jul  5 13:34:04 2011	(r23107)
@@ -100,7 +100,7 @@
     SymbolMetaVar -> MetaVar
 
   lexical restrictions
-    SymbolMetaVar -/- [A-Za-z0-9]
+    SymbolMetaVar -/- [A-Za-z0-9\']
 
 %%%
  %% Grammar: Section 7.2
@@ -135,7 +135,7 @@
     SortMetaVar -> MetaVar
 
   lexical restrictions
-    SortMetaVar -/- [A-Za-z0-9]
+    SortMetaVar -/- [A-Za-z0-9\']
 
 %%%
  %% CharClass: Section 7.4.2
@@ -156,7 +156,7 @@
     StrConMetaVar -> MetaVar
 
   lexical restrictions
-    StrConMetaVar -/- [A-Za-z0-9]
+    StrConMetaVar -/- [A-Za-z0-9\']
 
 %%%
  %% Groups and priorities
@@ -177,7 +177,7 @@
     "as" [0-9\']* -> AssocMetaVar
 
   lexical restrictions
-    AssocMetaVar -/- [A-Za-z0-9]
+    AssocMetaVar -/- [A-Za-z0-9\']
 
   variables %% section 8.4.1
     "restr" [0-9\']*     -> Restriction

From tobivollebregt at gmail.com  Tue Jul  5 15:36:14 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 05 Jul 2011 13:36:14 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23108 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template
Message-ID: <20110705133614.57A72108C03C@mx3.tudelft.nl>

Author: tvo
Date: Tue Jul  5 13:36:14 2011
New Revision: 23108
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23108&sc=1

Log:
TemplateLang: add generation of CONTENTCOMPLETE injections

(got lost when converting to SpoofaxLang...)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Tue Jul  5 13:34:04 2011	(r23107)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/template/to-sdf.str	Tue Jul  5 13:36:14 2011	(r23108)
@@ -24,7 +24,7 @@
     with
       // FIXME: desugaring should have been performed before the current strategy is invoked.
       sdf-section*  := <templatelang-desugar-top; map(template-section-to-sdf)> section*;
-      sdf-section'* := <add-lexical-restrictions> sdf-section*
+      sdf-section'* := <add-contentcomplete; add-lexical-restrictions> sdf-section*
     with
       contracts(
         contract-requires(ListOf(?context-free-syntax(_) + ?lexical-restrictions(_)) | sdf-section'*)
@@ -44,6 +44,18 @@
       p* := <declare-template-definition-main; map(template-production-to-sdf)> prod*
 
   /** @type List(grammar) -> List(grammar) */
+  add-contentcomplete:
+    sdf-section* -> [sdf-section*, injections*]
+    with
+      A* := <collect-om(?sort(_)); nub; string-sort-ex> sdf-section*;
+      p* := <map(sort-to-contentcomplete)> A*;
+      if !p* => [] then
+        injections* := []
+      else
+        injections* := [context-free-syntax(p*)]
+      end
+
+  /** @type List(grammar) -> List(grammar) */
   add-lexical-restrictions:
     sdf-section* -> [sdf-section*, restrictions*]
     with

From m.dejonge at tudelft.nl  Sat Jul  9 11:28:41 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 09 Jul 2011 09:28:41 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23109 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading services stratego
Message-ID: <20110709092841.17DE5CC15B@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Jul  9 09:28:40 2011
New Revision: 23109
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23109&sc=1

Log:
- generalizing user input refactoring: configurable wizard page, IdentifierInput block
- support for desugaring:  desugared term as attachment of input term, fuzzy origin term in case origin is lost after desugaring/resugaring
- bugfix: path to (sub)list terms in analyzed tree

Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringIdentifierInput.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringPage.java   (contents, props changed)
      - copied, changed from r23096, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringPageTextField.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTermFuzzyPrimitive.java   (contents, props changed)
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringPageTextField.java
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringWizard.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LayoutStructure.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Tue Jul  5 13:36:14 2011	(r23108)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -5,9 +5,14 @@
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.collectTerms;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.cons;
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.termContents;
+
+import java.util.ArrayList;
 import java.util.LinkedHashSet;
 import java.util.Set;
+import java.util.regex.Pattern;
 
+import org.eclipse.imp.language.Language;
+import org.eclipse.imp.services.ILanguageSyntaxProperties;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.IAction;
 import org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation;
@@ -15,6 +20,7 @@
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.KeywordRecognizer;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
@@ -24,7 +30,9 @@
 import org.strategoxt.imp.runtime.services.RefactoringMap;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 import org.strategoxt.imp.runtime.services.StrategoRefactoring;
+import org.strategoxt.imp.runtime.services.StrategoRefactoringIdentifierInput;
 import org.strategoxt.imp.runtime.services.StrategoRefactoringWizard;
+import org.strategoxt.imp.runtime.services.SyntaxProperties;
 
 public class RefactoringFactory extends AbstractServiceFactory<IRefactoringMap> {
 
@@ -54,7 +62,9 @@
 			IStrategoTerm[] semanticNodes = termAt(builder,0).getAllSubterms();
 			String caption = termContents(termAt(builder, 1));
 			String strategy = termContents(termAt(builder, 2));
-			IStrategoList options = termAt(builder, 3);			
+			ArrayList<StrategoRefactoringIdentifierInput> inputFields = 
+				getInputFields(builder, controller.getEditor());
+			IStrategoList options = termAt(builder, 3);
 			boolean cursor = false;
 			boolean source = false;
 			boolean meta = false;
@@ -87,11 +97,63 @@
 						source, 
 						ppTable,
 						ppStrategy,
-						semanticNodes
+						semanticNodes,
+						inputFields
 					)
 				);
 			}
 		}
 		return refactorings;
 	}
+	
+	private static ArrayList<StrategoRefactoringIdentifierInput> getInputFields(
+			IStrategoAppl builder, EditorState editor) {
+		ArrayList<StrategoRefactoringIdentifierInput> inputFields = new ArrayList<StrategoRefactoringIdentifierInput>();
+		//TODO: read them from builder
+		StrategoRefactoringIdentifierInput idInput1 = 
+			new StrategoRefactoringIdentifierInput(
+				"New name", 
+				"", 
+				getIdPattern(editor), 
+				getKeywordRecognizer(editor),
+				getLanguageName(editor)
+			);
+		inputFields.add(idInput1);
+		return inputFields;
+	}
+
+	private static String getLanguageName(EditorState editor) {
+		try {
+			return editor.getDescriptor().getLanguage().getName();
+		} catch (Exception e) {
+			e.printStackTrace();
+			return "<MyLanguage>";
+		}
+	}
+
+	private static Pattern getIdPattern(EditorState editor) {
+		Descriptor descriptor = editor.getDescriptor();
+		SyntaxProperties syntax = null;
+		if (descriptor != null) {
+			try {
+				syntax = (SyntaxProperties) descriptor.createService(ILanguageSyntaxProperties.class, null);
+			} catch (BadDescriptorException e) {
+				Environment.logException("Could not read syntax properties", e);
+				e.printStackTrace();
+			}
+		} 
+		return syntax != null ? syntax.getIdentifierLexical() : null;
+	}
+
+	private static KeywordRecognizer getKeywordRecognizer(EditorState editor) {
+		try {
+			return editor.getParseController().getParser().getParseTable().getKeywordRecognizer();
+		}
+		catch (Exception e){
+			Environment.logException("Could not fetch keyword recognizer", e);
+			e.printStackTrace();
+			return null;
+		}
+	}
+
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Tue Jul  5 13:36:14 2011	(r23108)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -18,6 +18,7 @@
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.terms.attachments.DesugaredOriginAttachment;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
@@ -78,8 +79,8 @@
 		IStrategoList termPath = StrategoTermPath.getTermPathWithOrigin(context, resultingAst, node);
 		IStrategoTerm targetTerm;
 		IStrategoTerm rootTerm;
-		
 		if (termPath != null) {
+			DesugaredOriginAttachment.setAllTermsAsDesugaredOrigins(resultingAst);
 			targetTerm = StrategoTermPath.getTermAtPath(context, resultingAst, termPath);
 			rootTerm = resultingAst;
 		} else {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java	Tue Jul  5 13:36:14 2011	(r23108)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -1,28 +1,17 @@
 package org.strategoxt.imp.runtime.services;
 
-import java.util.regex.Pattern;
-
-import org.eclipse.imp.language.Language;
-import org.eclipse.imp.language.ServiceFactory;
-import org.eclipse.imp.services.ILanguageSyntaxProperties;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.ActionContributionItem;
 import org.eclipse.jface.action.IAction;
+import org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.MenuItem;
 import org.eclipse.swt.widgets.Shell;
-import org.eclipse.ui.IKeyBindingService;
 import org.eclipse.ui.IWorkbenchWindowPulldownDelegate;
-import org.eclipse.ui.internal.KeyBindingService;
-import org.spoofax.jsglr.client.KeywordRecognizer;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.dynamicloading.Descriptor;
-import org.eclipse.ltk.core.refactoring.Refactoring;
-import org.eclipse.ltk.ui.refactoring.RefactoringWizard;
-import org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation;
 
 public class RefactoringButtonDelegate extends ToolbarButtonDelegate implements IWorkbenchWindowPulldownDelegate {
 
@@ -49,45 +38,17 @@
 		refactoring.prepareExecute(editor);
 		StrategoRefactoringWizard wizard = new StrategoRefactoringWizard(
 			(StrategoRefactoring) refactoring, 
-			refactoring.getCaption(),
-			getIdPattern(editor),
-			getKeywordRecognizer(editor)
+			refactoring.getCaption()
 		);
 		RefactoringWizardOpenOperation operation= new RefactoringWizardOpenOperation(wizard);
 		Shell shell = editor.getEditor().getSite().getShell();
 		try {
 			operation.run(shell, refactoring.getCaption());
-		} catch (InterruptedException exception) {
-			// Do nothing
-		}
-	}
-	
-	private static Pattern getIdPattern(EditorState editor) {
-		Descriptor descriptor = editor.getDescriptor();
-		SyntaxProperties syntax = null;
-		if (descriptor != null) {
-			try {
-				syntax = (SyntaxProperties) descriptor.createService(ILanguageSyntaxProperties.class, null);
-			} catch (BadDescriptorException e) {
-				Environment.logException("Could not read syntax properties", e);
-				e.printStackTrace();
-			}
-		} 
-		return syntax != null ? syntax.getIdentifierLexical() : null;
-	}
-
-	private KeywordRecognizer getKeywordRecognizer(EditorState editor) {
-		try {
-			return editor.getParseController().getParser().getParseTable().getKeywordRecognizer();
-		}
-		catch (Exception e){
-			Environment.logException("Could not fetch keyword recognizer", e);
+		} catch (Exception e) {
 			e.printStackTrace();
-			return null;
 		}
 	}
 
-
 	@Override
 	protected void populateMenu(Menu menu) {
 		System.out.println("last action: "+lastAction);

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Tue Jul  5 13:36:14 2011	(r23108)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -6,7 +6,9 @@
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.hasImploderOrigin;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
 
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashSet;
 
 import org.eclipse.core.resources.IFile;
@@ -26,7 +28,12 @@
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.IStrategoTuple;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.TermFactory;
+import org.spoofax.terms.attachments.DesugaredOriginAttachment;
 import org.spoofax.terms.attachments.OriginAttachment;
 import org.strategoxt.imp.generator.construct_textual_change_1_1;
 import org.strategoxt.imp.runtime.EditorState;
@@ -53,8 +60,12 @@
 	private final boolean source;
 	
 	private final IStrategoTerm[] semanticNodes;
-		
-	protected IStrategoTerm userInput;
+			
+	protected final ArrayList<StrategoRefactoringIdentifierInput> inputFields;
+
+	public ArrayList<StrategoRefactoringIdentifierInput> getInputFields() {
+		return inputFields;
+	}
 
 	private IStrategoTerm node;
 	
@@ -73,20 +84,16 @@
 		// TODO 
 		return "org.eclipse.jdt.ui.edit.text.java.rename.element";
 	}
-
-	public void setUserInputTerm(IStrategoTerm inputTerm) {
-		userInput = inputTerm;
-	}
 	
 	public void prepareExecute(EditorState editor) {
 		this.node = getSelectionNode(editor);
 		fileChanges.clear();
-		userInput = null;
+		//inputFields.clear(); set default values?
 	}
 
 	public StrategoRefactoring(StrategoObserver observer, String caption, String builderRule,
 			boolean cursor, boolean source, String ppTable, String ppStrategy,
-			IStrategoTerm[] semanticNodes) {
+			IStrategoTerm[] semanticNodes, ArrayList<StrategoRefactoringIdentifierInput> inputFields) {
 		this.cursor=cursor;
 		this.source=source;
 		this.ppTable=ppTable;
@@ -96,6 +103,7 @@
 		this.builderRule = builderRule;
 		this.semanticNodes = semanticNodes;
 		fileChanges = new HashSet<TextFileChange>();
+		this.inputFields = inputFields;
 	}
 	
 	@Override
@@ -222,7 +230,11 @@
 	}
 	
 	private IStrategoTerm getBuilderResult() {
-		IStrategoTerm inputTerm = observer.getInputBuilder().makeInputTermRefactoring(userInput, node, true, source);
+		IStrategoTerm userInputTerm = mkInputTerm();
+		IStrategoTerm inputTerm = observer.getInputBuilder().makeInputTermRefactoring(userInputTerm, node, true, source);
+		
+		DesugaredOriginAttachment.setAllTermsAsDesugaredOrigins(inputTerm.getSubterm(3));
+		
 		IStrategoTerm result = null;
 		try {
 			result = observer.invoke(builderRule, inputTerm, getResource());
@@ -242,6 +254,26 @@
 		return result;
 	}
 
+	private IStrategoTerm mkInputTerm() {
+		IStrategoTerm[] inputTerms = new IStrategoTerm[inputFields.size()];
+		for (int i = 0; i < inputTerms.length; i++) {
+			inputTerms[i] = inputFields.get(i).getInputValue();
+		}
+		ITermFactory factory = Environment.getTermFactory();
+		try {
+			IStrategoTuple inputTuple = factory.makeTuple(inputTerms, TermFactory.EMPTY_LIST);
+			return inputTuple;
+		} catch (Exception e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+			return null;
+		}
+		catch (AssertionError err) {
+			err.printStackTrace();
+			return null;
+		}
+	}
+
 	private IResource getResource() {
 		return SourceAttachment.getResource(node);
 	}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringIdentifierInput.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringIdentifierInput.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -0,0 +1,86 @@
+package org.strategoxt.imp.runtime.services;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.eclipse.ltk.core.refactoring.RefactoringStatus;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.ModifyEvent;
+import org.eclipse.swt.events.ModifyListener;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Text;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.jsglr.client.KeywordRecognizer;
+import org.strategoxt.imp.runtime.Environment;
+
+public class StrategoRefactoringIdentifierInput {
+	
+	private final Pattern idPattern;
+	private final KeywordRecognizer keywordRecognizer;
+	private final String labelText;
+	private final String defaultName;
+	private final String languageName;
+	private String inputValue;
+	
+	public StrategoRefactoringIdentifierInput(
+			String label, 
+			String defaultValue,
+			Pattern idPattern, 
+			KeywordRecognizer keywordRecognizer,
+			String languageName
+	){
+		this.labelText = label;
+		this.defaultName = defaultValue;
+		this.inputValue = defaultValue;
+		this.idPattern = idPattern;
+		this.keywordRecognizer = keywordRecognizer;
+		this.languageName = languageName;
+	}
+	
+	public void setInputArea(Composite result, ModifyListener modListener) {
+		Label label= new Label(result, SWT.NONE);
+		label.setText(labelText);
+		final Text identifierField = new Text(result, SWT.SINGLE | SWT.LEFT | SWT.BORDER);
+		identifierField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
+		identifierField.setText(defaultName);
+		inputValue = defaultName;
+		identifierField.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				inputValue = identifierField.getText();
+			}
+		});
+		if(modListener != null){
+			identifierField.addModifyListener(modListener);
+		}
+	}
+	
+	public RefactoringStatus validateUserInput() {
+		String inputString = inputValue;
+		if (idPattern != null){
+			Matcher matcher = idPattern.matcher(inputString);
+			if(!(matcher.matches())){
+				if(inputString.trim().equals("")){
+					return RefactoringStatus.createErrorStatus(""); //suppress error messages for empty fields
+				}
+				String errorMessage = 
+					"Value of '" + this.labelText + 
+					"' should match identifier pattern '" + 
+					idPattern.pattern() + "', defined in " + languageName + "-Syntax.esv file."; 
+				return RefactoringStatus.createErrorStatus(errorMessage);
+			}
+		}
+		if(keywordRecognizer !=null &&  keywordRecognizer.isKeyword(inputString)){
+			String errorMessage = "Value of '" + this.labelText +"' is used as a keyword.";					
+			return RefactoringStatus.createErrorStatus(errorMessage);
+		}
+		return new RefactoringStatus();
+	}
+	
+	public IStrategoTerm getInputValue(){
+		ITermFactory factory = Environment.getTermFactory();
+		return factory.makeString(inputValue);
+	}
+}

Copied and modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringPage.java (from r23096, spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringPageTextField.java)
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringPageTextField.java	Thu Jun 23 16:09:11 2011	(r23096, copy source)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringPage.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -1,35 +1,19 @@
 package org.strategoxt.imp.runtime.services;
 
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
+import java.util.ArrayList;
 
 import org.eclipse.ltk.core.refactoring.RefactoringStatus;
 import org.eclipse.ltk.ui.refactoring.UserInputWizardPage;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ModifyEvent;
 import org.eclipse.swt.events.ModifyListener;
-import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Text;
-import org.spoofax.interpreter.terms.ITermFactory;
-import org.spoofax.jsglr.client.KeywordRecognizer;
-import org.strategoxt.imp.runtime.Environment;
 
-public class RefactoringPageTextField extends UserInputWizardPage {
-
-	private final Pattern idPattern;
-	private final KeywordRecognizer keywordRecognizer;
+public class StrategoRefactoringPage extends UserInputWizardPage {
 	
-	private Text identifierField;
-	private String labelText = "&New name:";
-	private String defaultName = "";
-
-	public RefactoringPageTextField(Pattern idPattern, KeywordRecognizer keywordRecognizer) {
+	public StrategoRefactoringPage() {
 		super("SpoofaxRefactoringInputPage");
-		this.idPattern = idPattern; 
-		this.keywordRecognizer = keywordRecognizer;
 	}
 
 	public void createControl(Composite parent) {
@@ -38,27 +22,19 @@
 		GridLayout layout= new GridLayout();
 		layout.numColumns= 2;
 		result.setLayout(layout);
-		Label label= new Label(result, SWT.NONE);
-		label.setText(labelText);
-
-		identifierField= createNameField(result);
-		identifierField.setText(defaultName);
-		identifierField.addModifyListener(new ModifyListener() {
+		ModifyListener modListener = new ModifyListener() {
 			public void modifyText(ModifyEvent event) {
 				handleInputChanged();
 			}
-		});
-		identifierField.setFocus();
-		identifierField.selectAll();
+		};
+		ArrayList<StrategoRefactoringIdentifierInput> inputFields = 
+			getStrategoRefactoring().getInputFields();
+		for (StrategoRefactoringIdentifierInput input : inputFields) {
+			input.setInputArea(result, modListener);
+		}
 		handleInputChanged();
 	}
 
-	private Text createNameField(Composite result) {
-		Text field= new Text(result, SWT.SINGLE | SWT.LEFT | SWT.BORDER);
-		field.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
-		return field;
-	}
-
 	private StrategoRefactoring getStrategoRefactoring() {
 		return (StrategoRefactoring) getRefactoring();
 	}
@@ -74,31 +50,13 @@
 			setMessage("", NONE);
 		}
 		setPageComplete(!status.hasError());
-		
-		//set userinput value
-		StrategoRefactoring refactoring = getStrategoRefactoring();
-		ITermFactory factory = Environment.getTermFactory();
-		refactoring.setUserInputTerm(factory.makeString(identifierField.getText()));
 	}
 
 	private RefactoringStatus validateUserInput() {
-		String inputString = identifierField.getText();
-		if (idPattern != null){
-			Matcher matcher = idPattern.matcher(inputString);
-			if(!(matcher.matches())){
-				if(inputString.trim().equals("")){
-					return RefactoringStatus.createErrorStatus(""); //suppress error messages for empty fields
-				}
-				String errorMessage = "Name should match identifier pattern '" + 
-				idPattern.pattern() + "', defined in <myLanguage>-Syntax.esv file."; 
-				return RefactoringStatus.createErrorStatus(errorMessage);
-			}
-		}
-		if(keywordRecognizer !=null &&  keywordRecognizer.isKeyword(inputString)){
-			String errorMessage = "This name is used as a keyword.";					
-			return RefactoringStatus.createErrorStatus(errorMessage);
+		RefactoringStatus status = new RefactoringStatus();
+		for (StrategoRefactoringIdentifierInput input : getStrategoRefactoring().getInputFields()) {
+			status.merge(input.validateUserInput());
 		}
-		//todo: warnings for all empty fields?
-		return new RefactoringStatus();
+		return status;
 	}
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringWizard.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringWizard.java	Tue Jul  5 13:36:14 2011	(r23108)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringWizard.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -1,19 +1,16 @@
 package org.strategoxt.imp.runtime.services;
 
-import java.util.regex.Pattern;
-
 import org.eclipse.ltk.ui.refactoring.RefactoringWizard;
-import org.spoofax.jsglr.client.KeywordRecognizer;
 
 
 public class StrategoRefactoringWizard extends RefactoringWizard {
 	
-	RefactoringPageTextField inputPage;
+	StrategoRefactoringPage inputPage;
 	
-	public StrategoRefactoringWizard(StrategoRefactoring refactoring, String pageTitle, Pattern idPattern, KeywordRecognizer keywordRecognizer) {
+	public StrategoRefactoringWizard(StrategoRefactoring refactoring, String pageTitle) {
 		super(refactoring, DIALOG_BASED_USER_INTERFACE | PREVIEW_EXPAND_FIRST_NODE);
 		setDefaultPageTitle(pageTitle);
-		inputPage = new RefactoringPageTextField(idPattern, keywordRecognizer);
+		inputPage = new StrategoRefactoringPage();
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Tue Jul  5 13:36:14 2011	(r23108)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -27,7 +27,12 @@
 		add(new LanguageDescriptionPrimitive());
 		add(new OverrideInputPrimitive());
 
+		//origin term strategies
 		add(new OriginSublistTermPrimitive());
+		add(new OriginDesugaredTermPrimitive());
+		add(new OriginTermFuzzyPrimitive());
+		
+		//layout strategies
 		add(new OriginSurroundingCommentsPrimitive());
 		add(new OriginLayoutPrefixPrimitive());
 		add(new OriginCommentsAfterPrimitive());
@@ -37,7 +42,7 @@
 		add(new OriginDeletionOffsetPrimitive());
 		add(new OriginInsertBeforeOffsetPrimitive());
 		add(new OriginInsertAtEndOffsetPrimitive());
-		add(new OriginTextWithLayoutPrimitive());
+		add(new OriginTextWithLayoutPrimitive());		
 	}
 
 	public String getOperatorRegistryName() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LayoutStructure.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LayoutStructure.java	Tue Jul  5 13:36:14 2011	(r23108)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/LayoutStructure.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -10,7 +10,9 @@
 import org.spoofax.jsglr.client.imploder.ITokenizer;
 import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.jsglr.client.imploder.Token;
+import org.spoofax.terms.attachments.OriginAttachment;
 import org.strategoxt.imp.runtime.parser.ast.StrategoSubList;
+import org.strategoxt.stratego_lib.assert_1_0;
 
 /**
  * Provides access to the layout structure (text fragments and offsets) surrounding a node
@@ -35,14 +37,28 @@
 	private int prefixSeparationStartIndex; //valid index (0 if node contains leftmost token)
 
 	public LayoutStructure(IStrategoTerm node) {
-		this.node = node;
-		tokens = getLeftToken(node).getTokenizer();
+		this.node = ImploderAttachment.getImploderOrigin(node);
 		listParent = getParentList(); //could be null
+		assertImploderInfo();
+		tokens = getLeftToken(node).getTokenizer();
 		analyzeSuffix();
 		analyzePrefix();
 		//logAnalysisResults();
 	}
 
+	private void assertImploderInfo() {
+		assert (node != null) : 
+			"Error: Layout analysis can only be applied to nodes with associated origin term";
+		if(listParent != null){
+			assert (ImploderAttachment.hasImploderOrigin(listParent)) :
+				"Unexpected Error: list-parent of imploder-origin must have imploder info";
+			for (int i = 0; i < listParent.getSubtermCount(); i++) {
+				assert (ImploderAttachment.hasImploderOrigin(listParent.getSubterm(i))) :
+					"Unexpected Error: subterms of origin-list must have imploder info";
+			}
+		}
+	}
+
 	/**
 	 * Comments preceding and associated with the node
 	 */

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -0,0 +1,22 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.attachments.DesugaredOriginAttachment;
+
+/**
+ * Origin term after desugaring
+ * @author Maartje de Jonge
+ */
+public class OriginDesugaredTermPrimitive extends AbstractOriginPrimitive {
+	
+	public OriginDesugaredTermPrimitive() {
+		super("SSL_EXT_origin_term_desugared");
+	}
+
+	@Override
+	protected IStrategoTerm call(IContext env, IStrategoTerm origin) {
+		return DesugaredOriginAttachment.getDesugaredOrigin(origin);
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTermFuzzyPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginTermFuzzyPrimitive.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -0,0 +1,58 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.spoofax.terms.StrategoAppl;
+import org.spoofax.terms.attachments.OriginAttachment;
+import org.spoofax.terms.attachments.ParentAttachment;
+
+/**
+ * Returns what is most probably the origin term (retrieved from inspecting the subterms) 
+ * 
+ * @author Maartje de Jonge
+ */
+public class OriginTermFuzzyPrimitive extends AbstractPrimitive {
+
+	public OriginTermFuzzyPrimitive() {
+		super("SSL_EXT_origin_term_fuzzy", 0, 1);
+	}
+
+	@Override
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		if(tvars.length != 1 || svars.length !=0)
+			return false;
+		IStrategoTerm term = tvars[0];
+		IStrategoTerm originTerm = OriginAttachment.getOrigin(term);
+		if(originTerm != null){
+			env.setCurrent(originTerm);
+			return true; //fuzzy origin term not needed
+		}
+		if(!(term instanceof StrategoAppl)){
+			return false; //only fuzzy origin term for appl terms
+		}
+		for (int i = 0; i < term.getSubtermCount(); i++) {
+			IStrategoTerm originSubTerm = OriginAttachment.getOrigin(term.getSubterm(i));
+			if(originSubTerm != null){
+				IStrategoTerm parent = ParentAttachment.getParent(originSubTerm);
+				if(isOriginRelatedFuzzy(term, parent)){
+					env.setCurrent(parent); //Term with the same signature and at least one origin related child 
+					return true;
+				}				
+			}
+		}
+		return false;
+	}
+
+	private boolean isOriginRelatedFuzzy(IStrategoTerm term, IStrategoTerm parent) {
+		return 
+			parent != null &&
+			ImploderAttachment.hasImploderOrigin(parent) &&
+			parent.getSubtermCount() == term.getSubtermCount() &&
+			parent instanceof StrategoAppl &&
+			term instanceof StrategoAppl &&
+			((StrategoAppl)parent).getConstructor().equals(((StrategoAppl)term).getConstructor());
+	}	
+}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Tue Jul  5 13:36:14 2011	(r23108)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/StrategoTermPath.java	Sat Jul  9 09:28:40 2011	(r23109)
@@ -8,12 +8,14 @@
 import static org.spoofax.terms.attachments.ParentAttachment.getParent;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.TermVisitor;
 import org.spoofax.terms.attachments.ParentAttachment;
 import org.strategoxt.imp.generator.generator;
@@ -101,7 +103,15 @@
 			return null;
 		
 		if (isTermList(origin)) {
-			// Lists have no origin information; don't try to find the node.
+			// Lists have no origin information, try to find the node by its first child.
+			if (origin.getSubtermCount() > 0) {
+				IStrategoList subtermPath = getTermPathWithOrigin(context, ast, origin.getSubterm(0));
+				if (subtermPath != null){
+					IStrategoTerm[] originPath = Arrays.copyOf(subtermPath.getAllSubterms(), subtermPath.getSubtermCount()-1);
+					TermFactory factory = new TermFactory();
+					return factory.makeList(originPath);
+				}
+			}
 			return null;
 		}
 		

From m.dejonge at tudelft.nl  Sat Jul  9 11:30:19 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 09 Jul 2011 09:30:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23110 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments
Message-ID: <20110709093019.C79887F8007@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Jul  9 09:30:19 2011
New Revision: 23110
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23110&sc=1

Log:
- support for desugaring:  desugared term as attachment of input term

Added:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java   (contents, props changed)

Added: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java	Sat Jul  9 09:30:19 2011	(r23110)
@@ -0,0 +1,76 @@
+package org.spoofax.terms.attachments;
+
+import org.spoofax.interpreter.terms.ISimpleTerm;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.terms.TermVisitor;
+
+/** 
+ * @author Maartje de Jonge
+ * use of this class: 
+ * - DesugaredOriginAttachment is attached to the origin term of a term and stores the
+ * desugared form of the origin term.  
+ * - DesugaredOrigins are attached after the desugaring/analysis is applied 
+ */
+public class DesugaredOriginAttachment extends AbstractTermAttachment {
+
+	private static final long serialVersionUID = 314969147583453260L;
+	
+	public static TermAttachmentType<DesugaredOriginAttachment> TYPE =
+		new VolatileTermAttachmentType<DesugaredOriginAttachment>(DesugaredOriginAttachment.class);
+	
+	protected IStrategoTerm desugaredOrigin;
+
+	/**
+	 * Creates a new desugared origin attachment.
+	 * 
+	 * Should not be called directly, as origin attachment instances
+	 * should not be shared.
+	 * 
+	 * @see #setOrigin(ISimpleTerm, IStrategoTerm)
+	 */
+	protected DesugaredOriginAttachment(IStrategoTerm desugared) {
+		this.desugaredOrigin = desugared;
+	}
+	
+	public TermAttachmentType<DesugaredOriginAttachment> getAttachmentType() {
+		return TYPE;
+	}
+	
+	public static DesugaredOriginAttachment get(ISimpleTerm term) {
+		return term.getAttachment(TYPE);
+	}
+	
+	public IStrategoTerm getDesugaredOrigin() {
+		return desugaredOrigin;
+	}
+
+	public void setDesugaredOrigin(IStrategoTerm desugared) {
+		this.desugaredOrigin = desugared;
+	}
+	
+	public static IStrategoTerm getDesugaredOrigin(ISimpleTerm term) {
+		IStrategoTerm origin = OriginAttachment.getOrigin(term);
+		if (origin != null) term = origin;
+		DesugaredOriginAttachment attachment = term.getAttachment(TYPE);
+		return attachment == null ? null : attachment.getDesugaredOrigin();
+	}
+		
+	public static void setDesugaredOrigin(IStrategoTerm term, IStrategoTerm desugared) {
+		OriginAttachment.tryGetOrigin(term).putAttachment(new DesugaredOriginAttachment(desugared));
+	}
+	
+	@Override
+	public String toString() {
+		return "" + desugaredOrigin;
+	}
+	
+	public static void setAllTermsAsDesugaredOrigins(IStrategoTerm trm) {
+		class Visitor extends TermVisitor {
+			public void preVisit(IStrategoTerm term) {
+				DesugaredOriginAttachment.setDesugaredOrigin(term, term);
+			}
+		}
+		Visitor visitor = new Visitor();
+		visitor.visit(trm);
+	}
+}

From m.dejonge at tudelft.nl  Sat Jul  9 11:33:24 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 09 Jul 2011 09:33:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23111 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20110709093324.553BDCC168@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Jul  9 09:33:24 2011
New Revision: 23111
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23111&sc=1

Log:
user input

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str	Sat Jul  9 09:30:19 2011	(r23110)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str	Sat Jul  9 09:33:24 2011	(r23111)
@@ -13,7 +13,7 @@
 rules //rename refactoring
 
   rename-refactoring:
-    (newname, selected, position, ast, path, project-path) -> 
+    ((newname), selected, position, ast, path, project-path) -> 
     (ast-changes, [], <conc> (pre-condition-errors, semantic-errors), warnings)
     where 
       (renamings, asts, pre-condition-errors)  := <prepare-renaming> (newname, selected, ast, path);

From m.dejonge at tudelft.nl  Sat Jul  9 11:40:37 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 09 Jul 2011 09:40:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23112 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20110709094037.A3B5CCC178@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Jul  9 09:40:36 2011
New Revision: 23112
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23112&sc=1

Log:
- support for desugaring:  desugared term used as "origin detecting ast changes

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Sat Jul  9 09:33:24 2011	(r23111)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Sat Jul  9 09:40:36 2011	(r23112)
@@ -26,7 +26,7 @@
 		<is-tuple> t;
 		<has-origin-term> oldnode		
 	with
-		reconstructed-text := <construct-text-from-old(pp)> (oldnode, newnode); 
+		reconstructed-text := <topdown(try(strip-annos)); construct-text-from-old(pp)> (oldnode, newnode); 
 		(start-offset, end-offset, newText) := <ast-change-to-text-change(pp)> REPLACEMENT(oldnode, reconstructed-text)
 
 construct-textual-change(pp):
@@ -56,8 +56,11 @@
 	construct-text-by-pp(pp) <+
 	pp
 
-construct-text-from-origin-desugared(pp) = 
-	fail //TODO: (<origin term; desugar>, <id>) resugar?
+construct-text-from-origin-desugared(pp):
+	node -> <construct-text-from-origin(pp)> (origin-desugared-node, node)
+	where 
+		origin-desugared-node := <origin-term-desugared; topdown(try(strip-annos))> node 
+	//TODO: apply-resugaring here?
 
 construct-text-from-origin(pp):
 	node -> <construct-text-from-origin(pp)> (origin-node, node)

From m.dejonge at tudelft.nl  Sat Jul  9 11:44:46 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 09 Jul 2011 09:44:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23113 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20110709094446.A623CCC178@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Jul  9 09:44:46 2011
New Revision: 23113
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23113&sc=1

Log:
refactoring that removes debug applications (simple testcase for sugar preservation)

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/remove-debug.str

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/remove-debug.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/remove-debug.str	Sat Jul  9 09:44:46 2011	(r23113)
@@ -0,0 +1,45 @@
+module remove-debug
+
+imports
+  libstrc
+  lib-reconstruction/construct-text
+
+rules //remove debug refactoring
+
+  remove-debug-refactoring:
+    (_, selected, position, ast, path, project-path) -> 
+    (ast-changes, [], <conc> (pre-condition-errors, semantic-errors), warnings)
+    where 
+    	ast-changes := [(selected, <topdown(try(remove-debug))> selected)];
+    	pre-condition-errors := [];
+    	semantic-errors := [];
+    	warnings := []
+
+  remove-debug-builder:
+    (selected, position, ast, path, project-path) -> ("x.aterm", <construct-textual-change(fail)> ast-change)
+    where 
+    	ast-change := (selected, <topdown(try(remove-debug))> selected)
+    	
+
+rules //remove debug rules
+
+  remove-debug:
+  	Seq(s, <debug-call>) -> s
+  	
+  remove-debug:
+  	Seq(<debug-call>, s) -> s
+  	
+  remove-debug:
+  	GuardedLChoice(<debug-call>, s1, s2) -> s1
+
+  remove-debug:
+  	GuardedLChoice(s1, <debug-call>, s2) -> LChoice(Where(s1), s2)
+
+  remove-debug:
+  	GuardedLChoice(s1, s2, <debug-call>) -> Seq(Where(s1), s2)
+
+  //support some common patterns
+  //where(<debug> term)
+
+  debug-call =
+  	?CallT(SVar("debug"{_}), _, [])
\ No newline at end of file

From m.dejonge at tudelft.nl  Sat Jul  9 12:22:57 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 09 Jul 2011 10:22:57 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23114 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110709102257.3E4292B800A@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Jul  9 10:22:57 2011
New Revision: 23114
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23114&sc=1

Log:
separate logic mkinput on-source/on-analyzed ast
TODO: support sublists for analyzed asts

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Sat Jul  9 09:44:46 2011	(r23113)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Sat Jul  9 10:22:57 2011	(r23114)
@@ -72,25 +72,42 @@
 	 * Create an input term for a control rule.
 	 */
 	public IStrategoTuple makeInputTerm(IStrategoTerm node, boolean includeSubNode, boolean useSourceAst) {
+		if(useSourceAst)
+			return makeInputTermSourceAst(node, includeSubNode);
+		return makeInputTermResultingAst(node, includeSubNode);
+	}
+
+	public IStrategoTuple makeInputTermResultingAst(IStrategoTerm node, boolean includeSubNode) {
+		IStrategoTerm resultingAst; 
+		if (this.resultingAst != null) 
+			resultingAst = this.resultingAst;
+		else {
+			IResource resource = SourceAttachment.getResource(node);
+			resultingAst = resultingAsts.get(resource);
+		}
 		Context context = runtime.getCompiledContext();
-		IResource resource = SourceAttachment.getResource(node);
-		IStrategoTerm resultingAst = useSourceAst ? null : resultingAsts.get(resource);
-		if (!useSourceAst && this.resultingAst != null) resultingAst = this.resultingAst;
 		IStrategoList termPath = StrategoTermPath.getTermPathWithOrigin(context, resultingAst, node);
-		IStrategoTerm targetTerm;
-		IStrategoTerm rootTerm;
-		if (termPath != null) {
-			DesugaredOriginAttachment.setAllTermsAsDesugaredOrigins(resultingAst);
-			targetTerm = StrategoTermPath.getTermAtPath(context, resultingAst, termPath);
-			rootTerm = resultingAst;
-		} else {
-			targetTerm = node;
-			termPath = StrategoTermPath.createPath(node);
-			rootTerm = getRoot(node);
-		}
-		
+		if (termPath == null)
+			return makeInputTermSourceAst(node, includeSubNode);
+		DesugaredOriginAttachment.setAllTermsAsDesugaredOrigins(resultingAst);
+		IStrategoTerm targetTerm = StrategoTermPath.getTermAtPath(context, resultingAst, termPath);
+		IStrategoTerm rootTerm = resultingAst;		
+		return makeInputTerm(node, includeSubNode, termPath, targetTerm, rootTerm);
+	}
+
+	public IStrategoTuple makeInputTermSourceAst(IStrategoTerm node, boolean includeSubNode) {
+		IStrategoTerm targetTerm = node;
+		IStrategoList termPath = StrategoTermPath.createPath(node);
+		IStrategoTerm rootTerm = getRoot(node);
+		return makeInputTerm(node, includeSubNode, termPath, targetTerm, rootTerm);
+	}
+
+	private IStrategoTuple makeInputTerm(IStrategoTerm node, boolean includeSubNode,
+			IStrategoList termPath, IStrategoTerm targetTerm,
+			IStrategoTerm rootTerm) {
 		ITermFactory factory = Environment.getTermFactory();
 		assert factory.getDefaultStorageType() == IStrategoTerm.MUTABLE;
+		IResource resource = SourceAttachment.getResource(node);
 		String path = resource == null ? "input" : resource.getProjectRelativePath().toPortableString();
 		String absolutePath = resource == null ? "." : tryGetProjectPath(resource);
 		

From m.dejonge at tudelft.nl  Sat Jul  9 17:39:13 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 09 Jul 2011 15:39:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23115 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	parser/ast services
Message-ID: <20110709153913.3DE6F7F8064@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Jul  9 15:39:12 2011
New Revision: 23115
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23115&sc=1

Log:
selected sublist in analysed AST

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java	Sat Jul  9 10:22:57 2011	(r23114)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/parser/ast/StrategoSubList.java	Sat Jul  9 15:39:12 2011	(r23115)
@@ -10,6 +10,7 @@
 
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
 import org.spoofax.terms.StrategoListIterator;
 import org.spoofax.terms.StrategoWrapped;
 import org.spoofax.terms.attachments.ParentAttachment;
@@ -58,9 +59,15 @@
 		list.overrideReferences(getLeftToken(list), getRightToken(list), children, result);
 		setParent(result, list);
 		*/
-		
 		putParent(result, ParentAttachment.get(list));
-		putImploderAttachment(result, true, getElementSort(list), getLeftToken(firstChild), getRightToken(lastChild));
+		if(ImploderAttachment.get(firstChild) != null && ImploderAttachment.get(lastChild) != null)
+			putImploderAttachment(
+				result, 
+				true, 
+				getElementSort(list), 
+				getLeftToken(firstChild), 
+				getRightToken(lastChild)
+			);
 		return result;
 	}
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Sat Jul  9 10:22:57 2011	(r23114)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Sat Jul  9 15:39:12 2011	(r23115)
@@ -91,10 +91,34 @@
 			return makeInputTermSourceAst(node, includeSubNode);
 		DesugaredOriginAttachment.setAllTermsAsDesugaredOrigins(resultingAst);
 		IStrategoTerm targetTerm = StrategoTermPath.getTermAtPath(context, resultingAst, termPath);
+		if(node instanceof StrategoSubList){
+			if(!(targetTerm instanceof IStrategoList))
+				return makeInputTermSourceAst(node, includeSubNode);
+			targetTerm = mkSubListTarget(resultingAst, (IStrategoList)targetTerm, (StrategoSubList)node);
+			if(targetTerm == null) //only accept sublists that correspond to selection
+				return makeInputTermSourceAst(node, includeSubNode); 
+		}
 		IStrategoTerm rootTerm = resultingAst;		
 		return makeInputTerm(node, includeSubNode, termPath, targetTerm, rootTerm);
 	}
 
+	private IStrategoTerm mkSubListTarget(IStrategoTerm resultingAst, IStrategoList targetTerm, StrategoSubList node) {
+		IStrategoTerm firstChild = getResultingTerm(resultingAst, node.getFirstChild());
+		IStrategoTerm lastChild = getResultingTerm(resultingAst, node.getLastChild());
+		if(firstChild == null || lastChild == null)
+			return null;
+		return StrategoSubList.createSublist(targetTerm, firstChild, lastChild, false);
+	}
+
+	private IStrategoTerm getResultingTerm(IStrategoTerm resultingAst, IStrategoTerm originTerm) {
+		Context context = runtime.getCompiledContext();
+		IStrategoList pathFirstChild = StrategoTermPath.getTermPathWithOrigin(context, resultingAst, originTerm);
+		IStrategoTerm firstChild = null;
+		if(pathFirstChild != null)
+			firstChild = StrategoTermPath.getTermAtPath(context, resultingAst, pathFirstChild);
+		return firstChild;
+	}
+
 	public IStrategoTuple makeInputTermSourceAst(IStrategoTerm node, boolean includeSubNode) {
 		IStrategoTerm targetTerm = node;
 		IStrategoList termPath = StrategoTermPath.createPath(node);

From tobivollebregt at gmail.com  Mon Jul 11 11:02:22 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 11 Jul 2011 09:02:22 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23116 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml
Message-ID: <20110711090222.1F2D7108C067@mx3.tudelft.nl>

Author: tvo
Date: Mon Jul 11 09:02:21 2011
New Revision: 23116
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23116&sc=1

Log:
XML lib: QName -> Name, for consistency with parse-xml-info

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java	Sat Jul  9 15:39:12 2011	(r23115)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java	Mon Jul 11 09:02:21 2011	(r23116)
@@ -17,10 +17,10 @@
  *
  * If the parser is namespace aware, then the resulting ATerm has the structure:
  *
- *  Element   : QName * List(Attribute) * List(Element) -> Element
- *  Attribute : QName * String -> Attribute
+ *  Element   : Name * List(Attribute) * List(Element) -> Element
+ *  Attribute : Name * String -> Attribute
  *  Text      : String -> Element
- *  QName     : String * String
+ *  Name     : String * String
  *
  * If the parser is not namespace aware, then it has this structure:
  *
@@ -64,7 +64,7 @@
 
 	private final IStrategoConstructor textCons;
 
-	private final IStrategoConstructor qNameCons;
+	private final IStrategoConstructor nameCons;
 
 	private final IStrategoConstructor noneCons;
 
@@ -88,7 +88,7 @@
 		elementCons = factory.makeConstructor("Element", 3);
 		attributeCons = factory.makeConstructor("Attribute", 2);
 		textCons = factory.makeConstructor("Text", 1);
-		qNameCons = factory.makeConstructor("QName", 2);
+		nameCons = factory.makeConstructor("Name", 2);
 		noneCons = factory.makeConstructor("None", 0);
 
 		allowMixedContent = library.getAllowMixedContent();
@@ -127,7 +127,7 @@
 		if (namespaceAware) {
 			IStrategoTerm uriTerm = uri.isEmpty() ? factory.makeAppl(noneCons) : factory.makeString(uri);
 			IStrategoTerm localNameTerm = factory.makeString(uri.isEmpty() ? qName : localName);
-			return factory.makeAppl(qNameCons, uriTerm, localNameTerm);
+			return factory.makeAppl(nameCons, uriTerm, localNameTerm);
 		}
 		else {
 			return factory.makeString(qName);

From tobivollebregt at gmail.com  Tue Jul 12 11:10:46 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 12 Jul 2011 09:10:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23117 -
	strategoxt/trunk/xml-front/syn/xml
Message-ID: <20110712091046.374E72B805B@mx2.tudelft.nl>

Author: tvo
Date: Tue Jul 12 09:10:45 2011
New Revision: 23117
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23117&sc=1

Log:
Fix ambiguity in XML syntax + removed some unused productions.

The ambiguity is that, when more than one consecutive CharDataPart is present,
the CharDataParts aren't put greedily into a *single* CharData.
(And multiple consecutive CharData is valid too...)

In the C tooling this ambiguity was eaten by implode-asfix. (though visible when using sglri)
In JSGLR, it made it impossible to parse certain XML files of a few KB only within a finite amount of time and memory.
(More precisely, recognizing was fine, but at least one of tree building / disambiguation / tree outputting was impossible.)

Modified:
   strategoxt/trunk/xml-front/syn/xml/xml-document.sdf
   strategoxt/trunk/xml-front/syn/xml/xml-text.sdf

Modified: strategoxt/trunk/xml-front/syn/xml/xml-document.sdf
==============================================================================
--- strategoxt/trunk/xml-front/syn/xml/xml-document.sdf	Mon Jul 11 09:02:21 2011	(r23116)
+++ strategoxt/trunk/xml-front/syn/xml/xml-document.sdf	Tue Jul 12 09:10:45 2011	(r23117)
@@ -12,16 +12,13 @@
     Element -> Content
     Comment -> Content {cons("Comment")}
     PI      -> Content
+
   syntax
 
     CharData      -> <Content-CF>
-    CDataSection  -> <Content-CF>
 
     "<"
     <LAYOUT?-CF> <QName-CF> <LAYOUT?-CF> <Attribute*-CF> <LAYOUT?-CF>
       ">" <Content-CF>* "</"
     <LAYOUT?-CF> <QName-CF> <LAYOUT?-CF>
     ">"  -> <Element-CF> {cons("Element")}
-
-
-

Modified: strategoxt/trunk/xml-front/syn/xml/xml-text.sdf
==============================================================================
--- strategoxt/trunk/xml-front/syn/xml/xml-text.sdf	Mon Jul 11 09:02:21 2011	(r23116)
+++ strategoxt/trunk/xml-front/syn/xml/xml-text.sdf	Tue Jul 12 09:10:45 2011	(r23117)
@@ -1,9 +1,6 @@
 module xml-text
 exports
 
-  lexical syntax
-    [\ \t\n\13] -> WhiteSpaceChar
-
   syntax
 
     CharDataPart+ -> CharData {cons("Text")}
@@ -14,6 +11,16 @@
 
     <CharDataText-LEX> -> FooCharDataText
 
+  restrictions
+
+	%% Must be followed by `<' ...
+    CharData -/- ~[\<]
+
+	%% ... unless the `<' starts a CDATASection
+    %% (It would be better to lift CDATASections from child to sibling of Text,
+    %%  but this would change the structure of the AST...) 
+    CharData -/- [\<].[\!].[\[].[C].[D].[A].[T].[A].[\[]
+
   lexical syntax
 
     ~[\<\&]+ -> CharDataText
@@ -51,4 +58,3 @@
 
     CloseBracket     -/- [\]]
     TwoCloseBrackets -/- [\>]
-    CharDataToken    -/- ~[\<\&\]\ \t\n\13]
\ No newline at end of file

From m.dejonge at tudelft.nl  Thu Jul 14 17:08:53 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 14 Jul 2011 15:08:53 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23121 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading services stratego
Message-ID: <20110714150853.B3EA47F8019@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Jul 14 15:08:53 2011
New Revision: 23121
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23121&sc=1

Log:
DesugaredOriginAttachment
- assigned during desugaring
- tracked during transformation (refactoring)
PPStrategy
- pptable not used any more
- default pp strategy based on language name

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Thu Jul 14 14:54:39 2011	(r23120)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Thu Jul 14 15:08:53 2011	(r23121)
@@ -11,12 +11,7 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import org.eclipse.imp.language.Language;
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
-import org.eclipse.jface.action.Action;
-import org.eclipse.jface.action.IAction;
-import org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation;
-import org.eclipse.swt.widgets.Shell;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -26,12 +21,10 @@
 import org.strategoxt.imp.runtime.parser.SGLRParseController;
 import org.strategoxt.imp.runtime.services.IRefactoring;
 import org.strategoxt.imp.runtime.services.IRefactoringMap;
-import org.strategoxt.imp.runtime.services.InputTermBuilder;
 import org.strategoxt.imp.runtime.services.RefactoringMap;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 import org.strategoxt.imp.runtime.services.StrategoRefactoring;
 import org.strategoxt.imp.runtime.services.StrategoRefactoringIdentifierInput;
-import org.strategoxt.imp.runtime.services.StrategoRefactoringWizard;
 import org.strategoxt.imp.runtime.services.SyntaxProperties;
 
 public class RefactoringFactory extends AbstractServiceFactory<IRefactoringMap> {
@@ -50,14 +43,12 @@
 	private static Set<IRefactoring> collectRefactorings(Descriptor d, SGLRParseController controller) throws BadDescriptorException {
 		Set<IRefactoring> refactorings = new LinkedHashSet<IRefactoring>();
 		StrategoObserver feedback = d.createService(StrategoObserver.class, controller);
-		IStrategoAppl ppTableTerm = TermReader.findTerm(d.getDocument(), "PPTable");
-		String ppTable=null;
-		if (ppTableTerm !=null)
-			ppTable=termContents(termAt(ppTableTerm, 0));
 		IStrategoAppl ppStrategyTerm = TermReader.findTerm(d.getDocument(), "PrettyPrint");
-		String ppStrategy=null;
-		if(ppStrategyTerm!=null)
-			ppStrategy=termContents(termAt(ppStrategyTerm, 0));		
+		String ppStrategy = null;
+		if(ppStrategyTerm != null)
+			ppStrategy=termContents(termAt(ppStrategyTerm, 0));
+		else
+			ppStrategy = ("pp-" + d.getLanguage().getName() + "-string").toLowerCase();
 		for (IStrategoAppl builder : collectTerms(d.getDocument(), "Refactoring")) {
 			IStrategoTerm[] semanticNodes = termAt(builder,0).getAllSubterms();
 			String caption = termContents(termAt(builder, 1));
@@ -95,7 +86,6 @@
 						strategy,
 						cursor, 
 						source, 
-						ppTable,
 						ppStrategy,
 						semanticNodes,
 						inputFields

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Thu Jul 14 14:54:39 2011	(r23120)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/InputTermBuilder.java	Thu Jul 14 15:08:53 2011	(r23121)
@@ -18,7 +18,6 @@
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.jsglr.client.imploder.IToken;
-import org.spoofax.terms.attachments.DesugaredOriginAttachment;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
@@ -89,7 +88,6 @@
 		IStrategoList termPath = StrategoTermPath.getTermPathWithOrigin(context, resultingAst, node);
 		if (termPath == null)
 			return makeInputTermSourceAst(node, includeSubNode);
-		DesugaredOriginAttachment.setAllTermsAsDesugaredOrigins(resultingAst);
 		IStrategoTerm targetTerm = StrategoTermPath.getTermAtPath(context, resultingAst, termPath);
 		if(node instanceof StrategoSubList){
 			if(!(targetTerm instanceof IStrategoList))

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Thu Jul 14 14:54:39 2011	(r23120)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoObserver.java	Thu Jul 14 15:08:53 2011	(r23121)
@@ -51,6 +51,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.attachments.OriginTermFactory;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.IncompatibleJarException;
 import org.strategoxt.imp.debug.core.str.launching.DebuggableHybridInterpreter;
@@ -118,7 +119,7 @@
 	private UpdateJob updateJob;
 	
 	private boolean wasExceptionLogged;
-	
+		
 	/**
 	 * Value is true when the user enabled debugging for this language.
 	 * 
@@ -483,9 +484,12 @@
 			getLock().lock();
 			try {
 				resultingAsts.remove(SourceAttachment.getResource(ast));
-				feedback = invokeSilent(feedbackFunction,
-						getInputBuilder().makeInputTerm(ast, false), SourceAttachment.getResource(ast));
-	
+				feedback = invokeSilent(
+					feedbackFunction,
+					getInputBuilder().makeInputTerm(ast, false), 
+					SourceAttachment.getResource(ast),
+					true
+				);	
 				if (feedback == null) {
 					reportRewritingFailed();
 					String log = getLog();
@@ -500,6 +504,7 @@
 			}
 		 	if (feedback != null && !monitor.isCanceled()) {
 				// TODO: figure out how this was supposed to be synchronized??
+				//DesugaredOriginAttachment.setAllTermsAsDesugaredOrigins(feedback.getSubterm(0));
 				presentToUser(SourceAttachment.getResource(ast), feedback);
 		 	}
 		} finally {
@@ -651,7 +656,12 @@
 	 */
 	public IStrategoTerm invoke(String function, IStrategoTerm term, IResource resource)
 			throws UndefinedStrategyException, InterpreterErrorExit, InterpreterExit, InterpreterException {
-		
+		return invoke(function, term, resource, false);
+	}
+
+	private IStrategoTerm invoke(String function, IStrategoTerm term, IResource resource,
+			boolean assignDesugaredOrigins) throws InterpreterErrorExit, InterpreterExit,
+			UndefinedStrategyException, InterpreterException {
 		getLock().lock();
 		try {
 			if (runtime == null) initialize(new NullProgressMonitor());
@@ -675,7 +685,14 @@
 				// to prevent exessive use of cpu and memory (each invoke will start a new VM!)
 				((DebuggableHybridInterpreter) runtime).setDebugLaunchEnabled(this.isDebuggerEnabled());
 			}
-			boolean success = runtime.invoke(function);
+			boolean success = false;
+	    	if (runtime.getFactory() instanceof OriginTermFactory){
+	    		((OriginTermFactory)runtime.getFactory()).setAssignDesugaredOrigins(assignDesugaredOrigins);
+	    		success = runtime.invoke(function);
+	    		((OriginTermFactory)runtime.getFactory()).setAssignDesugaredOrigins(false);
+	    	}
+	    	else
+	    		success = runtime.invoke(function);
 			
 			// Cleanup input term.
 			IStrategoTerm result = runtime.current();
@@ -711,12 +728,16 @@
 	 * Logs and swallows all exceptions.
 	 */
 	public IStrategoTerm invokeSilent(String function, IStrategoTerm input, IResource resource) {
+		return invokeSilent(function, input, resource, false);
+	}
+
+	private IStrategoTerm invokeSilent(String function, IStrategoTerm input, IResource resource,
+			boolean assignDesugaredOrigins) {
 		assert getLock().isHeldByCurrentThread();
 		IStrategoTerm result = null;
-		
 		try {
 			wasExceptionLogged = true;
-			result = invoke(function, input, resource);
+			result = invoke(function, input, resource, assignDesugaredOrigins);
 			wasExceptionLogged = false;
 		} catch (InterpreterExit e) {
 			if (descriptor.isDynamicallyLoaded()) StrategoConsole.activateConsole();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Thu Jul 14 14:54:39 2011	(r23120)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Thu Jul 14 15:08:53 2011	(r23121)
@@ -3,12 +3,11 @@
 import static org.spoofax.interpreter.core.Tools.isTermList;
 import static org.spoofax.interpreter.core.Tools.isTermTuple;
 import static org.spoofax.interpreter.core.Tools.termAt;
-import static org.spoofax.jsglr.client.imploder.ImploderAttachment.hasImploderOrigin;
 import static org.spoofax.jsglr.client.imploder.ImploderAttachment.getLeftToken;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.hasImploderOrigin;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashSet;
 
 import org.eclipse.core.resources.IFile;
@@ -28,12 +27,10 @@
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
-import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.terms.TermFactory;
-import org.spoofax.terms.attachments.DesugaredOriginAttachment;
 import org.spoofax.terms.attachments.OriginAttachment;
 import org.strategoxt.imp.generator.construct_textual_change_1_1;
 import org.strategoxt.imp.runtime.EditorState;
@@ -44,9 +41,7 @@
 import org.strategoxt.lang.Strategy;
 
 public class StrategoRefactoring extends Refactoring implements IRefactoring {
-	
-	private final String ppTable;
-	
+		
 	private final String ppStrategy;
 	
 	private final StrategoObserver observer;
@@ -92,11 +87,10 @@
 	}
 
 	public StrategoRefactoring(StrategoObserver observer, String caption, String builderRule,
-			boolean cursor, boolean source, String ppTable, String ppStrategy,
+			boolean cursor, boolean source, String ppStrategy,
 			IStrategoTerm[] semanticNodes, ArrayList<StrategoRefactoringIdentifierInput> inputFields) {
 		this.cursor=cursor;
 		this.source=source;
-		this.ppTable=ppTable;
 		this.ppStrategy=ppStrategy;
 		this.observer = observer;
 		this.caption = caption;
@@ -233,7 +227,7 @@
 		IStrategoTerm userInputTerm = mkInputTerm();
 		IStrategoTerm inputTerm = observer.getInputBuilder().makeInputTermRefactoring(userInputTerm, node, true, source);
 		
-		DesugaredOriginAttachment.setAllTermsAsDesugaredOrigins(inputTerm.getSubterm(3));
+		//DesugaredOriginAttachment.setAllTermsAsDesugaredOrigins(inputTerm.getSubterm(3));
 		
 		IStrategoTerm result = null;
 		try {
@@ -318,12 +312,6 @@
 	}
 	
 	private IStrategoTerm getTextReplacement(IStrategoTerm resultTuple) {
-		IStrategoTerm ppTableTerm;
-		if (ppTable == null)
-			ppTableTerm=observer.getRuntime().getCompiledContext().getFactory().makeString("");
-		else {
-			ppTableTerm = observer.invokeSilent(ppTable, null, getResource());
-		}
 		IStrategoTerm textreplace=construct_textual_change_1_1.instance.invoke(
 				observer.getRuntime().getCompiledContext(), 
 				resultTuple, 
@@ -334,8 +322,7 @@
 							return observer.invokeSilent(ppStrategy, current, getResource());
 						return null;
 					}
-				},
-				ppTableTerm
+				}
 			);
 		return textreplace;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java	Thu Jul 14 14:54:39 2011	(r23120)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginDesugaredTermPrimitive.java	Thu Jul 14 15:08:53 2011	(r23121)
@@ -1,7 +1,8 @@
 package org.strategoxt.imp.runtime.stratego;
 
 import org.spoofax.interpreter.core.IContext;
-import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;
+import org.spoofax.interpreter.library.AbstractPrimitive;
+import org.spoofax.interpreter.stratego.Strategy;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.terms.attachments.DesugaredOriginAttachment;
 
@@ -9,14 +10,20 @@
  * Origin term after desugaring
  * @author Maartje de Jonge
  */
-public class OriginDesugaredTermPrimitive extends AbstractOriginPrimitive {
+public class OriginDesugaredTermPrimitive extends AbstractPrimitive {
 	
 	public OriginDesugaredTermPrimitive() {
-		super("SSL_EXT_origin_term_desugared");
+		super("SSL_EXT_origin_term_desugared", 0, 1);
 	}
 
 	@Override
-	protected IStrategoTerm call(IContext env, IStrategoTerm origin) {
-		return DesugaredOriginAttachment.getDesugaredOrigin(origin);
+	public boolean call(IContext env, Strategy[] svars, IStrategoTerm[] tvars) {
+		if(tvars.length != 1 || svars.length !=0)
+			return false;
+		IStrategoTerm desugaredTerm = DesugaredOriginAttachment.getDesugaredOrigin(tvars[0]);
+		if(desugaredTerm == null)
+			return false;
+		env.setCurrent(desugaredTerm);
+		return true;
 	}
 }

From m.dejonge at tudelft.nl  Thu Jul 14 16:54:39 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 14 Jul 2011 14:54:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23120 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments
Message-ID: <20110714145439.6EEB8CC25C@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Jul 14 14:54:39 2011
New Revision: 23120
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23120&sc=1

Log:
DesugaredOriginAttachment
- assigned during desugaring
- tracked during transformation (refactoring)

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java	Thu Jul 14 10:38:23 2011	(r23119)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/DesugaredOriginAttachment.java	Thu Jul 14 14:54:39 2011	(r23120)
@@ -6,10 +6,8 @@
 
 /** 
  * @author Maartje de Jonge
- * use of this class: 
- * - DesugaredOriginAttachment is attached to the origin term of a term and stores the
+ * - DesugaredOriginAttachment is attached during analysis/desugaring and stores the
  * desugared form of the origin term.  
- * - DesugaredOrigins are attached after the desugaring/analysis is applied 
  */
 public class DesugaredOriginAttachment extends AbstractTermAttachment {
 
@@ -26,7 +24,7 @@
 	 * Should not be called directly, as origin attachment instances
 	 * should not be shared.
 	 * 
-	 * @see #setOrigin(ISimpleTerm, IStrategoTerm)
+	 * @see #setDesugaredOrigin(ISimpleTerm, IStrategoTerm)
 	 */
 	protected DesugaredOriginAttachment(IStrategoTerm desugared) {
 		this.desugaredOrigin = desugared;
@@ -40,37 +38,43 @@
 		return term.getAttachment(TYPE);
 	}
 	
-	public IStrategoTerm getDesugaredOrigin() {
+	private IStrategoTerm getDesugaredOrigin() {
 		return desugaredOrigin;
 	}
 
-	public void setDesugaredOrigin(IStrategoTerm desugared) {
-		this.desugaredOrigin = desugared;
-	}
-	
-	public static IStrategoTerm getDesugaredOrigin(ISimpleTerm term) {
-		IStrategoTerm origin = OriginAttachment.getOrigin(term);
-		if (origin != null) term = origin;
+	public static IStrategoTerm getDesugaredOrigin(IStrategoTerm term) {
 		DesugaredOriginAttachment attachment = term.getAttachment(TYPE);
 		return attachment == null ? null : attachment.getDesugaredOrigin();
 	}
 		
 	public static void setDesugaredOrigin(IStrategoTerm term, IStrategoTerm desugared) {
-		OriginAttachment.tryGetOrigin(term).putAttachment(new DesugaredOriginAttachment(desugared));
+		/*
+		assert(
+			DesugaredOriginAttachment.getDesugaredOrigin(term) == null ||
+			DesugaredOriginAttachment.getDesugaredOrigin(term) == desugared
+		) : "Desugared origin is set only once";
+		assert(OriginAttachment.getOrigin(desugared) != null) : 
+			"desugared origin term must have an origin term";
+		if(DesugaredOriginAttachment.getDesugaredOrigin(term) == null)
+		*/
+		term.putAttachment(new DesugaredOriginAttachment(desugared));
 	}
 	
 	@Override
 	public String toString() {
 		return "" + desugaredOrigin;
 	}
-	
+/*	
 	public static void setAllTermsAsDesugaredOrigins(IStrategoTerm trm) {
 		class Visitor extends TermVisitor {
-			public void preVisit(IStrategoTerm term) {
-				DesugaredOriginAttachment.setDesugaredOrigin(term, term);
+			public void preVisit(IStrategoTerm visited) {
+				if(OriginAttachment.getOrigin(visited) != null)
+					DesugaredOriginAttachment.setDesugaredOrigin(visited, visited);
 			}
 		}
 		Visitor visitor = new Visitor();
 		visitor.visit(trm);
+		System.out.println();
 	}
+*/
 }

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java	Thu Jul 14 10:38:23 2011	(r23119)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/OriginTermFactory.java	Thu Jul 14 14:54:39 2011	(r23120)
@@ -10,6 +10,7 @@
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.StrategoAppl;
 
 /**
  * A factory creating ATerms from AST nodes.
@@ -23,7 +24,19 @@
 	 * Whether to reassign the origin for terms that already have an origin.
 	 */
 	private static boolean REASSIGN_ORIGINS = false;
-	
+
+	/**
+	 * Whether to assign new terms as desugared origins
+	 */
+	private boolean assignDesugaredOrigins = false;
+
+	/**
+	 * Sets whether to assign new terms as desugared origins
+	 */
+	public void setAssignDesugaredOrigins(boolean assignDesugaredOrigins) {
+		this.assignDesugaredOrigins = assignDesugaredOrigins;
+	}
+
 	public OriginTermFactory(ITermFactory baseFactory) {
 		super(MUTABLE, baseFactory);
 		assert !(baseFactory instanceof OriginTermFactory);
@@ -50,14 +63,14 @@
 		
 		IStrategoList annos = oldTerm.getAnnotations();
 		IStrategoAppl result = makeAppl(constructor, ensureChildLinks(kids, oldTerm), annos);
-		
-		return (IStrategoAppl) ensureLink(result, oldTerm);
+		//TODO: child links only when same signature
+		return (IStrategoAppl) ensureLink(result, oldTerm, false);
 	}
 	
 	@Override
 	public IStrategoTuple replaceTuple(IStrategoTerm[] kids, IStrategoTuple old) {
 		IStrategoTuple result = makeTuple(ensureChildLinks(kids, old), old.getAnnotations());
-		return (IStrategoTuple) ensureLink(result, old);
+		return (IStrategoTuple) ensureLink(result, old, false);
 	}
 	
 	@Override
@@ -81,14 +94,26 @@
 			} else {
 				return term;
 			}
-		} else if (term.getTermType() == origin.getTermType() && term.getSubtermCount() == origin.getSubtermCount()) {
+		} else if (
+			haveSameSignature(term, origin)
+		) {
 			ensureChildLinks(term.getAllSubterms(), origin);
-			return ensureLink(term, origin);
+			return ensureLink(term, origin, false);
 		} else {
-			return ensureLink(term, origin);
+			return ensureLink(term, origin, false);
 		}
 	}
 
+	private boolean haveSameSignature(IStrategoTerm term, IStrategoTerm origin) {
+		if(term instanceof StrategoAppl && origin instanceof StrategoAppl){
+			if(!((StrategoAppl)term).getConstructor().equals(((StrategoAppl)origin).getConstructor()))
+				return false;
+		}
+		return 	
+			term.getTermType() == origin.getTermType() && 
+			term.getSubtermCount() == origin.getSubtermCount();
+	}
+
 	/**
 	 * @param origin
 	 *            The origin term. For lists, this must be the exact
@@ -96,7 +121,7 @@
 	 */
 	public IStrategoTerm makeLink(IStrategoTerm term, IStrategoTerm origin) {
 		assert isOriginRoot(origin);
-		if (term.isList()) {
+		if (term.isList()) { 
 			if (term.getSubtermCount() == origin.getSubtermCount()
 				&& origin.isList()) {
 				return makeListLink((IStrategoList) term, (IStrategoList) origin);
@@ -116,6 +141,21 @@
 	}
 	
 	/**
+	 * @param origin
+	 *            The origin term. For lists, this must be the exact
+	 *            corresponding term with the same offset and length.
+	 */
+	public IStrategoTerm makeLinkDesugared(IStrategoTerm term, IStrategoTerm desugared) {
+		if (!term.isList() && DesugaredOriginAttachment.get(term) == null) {
+			if (term.getStorageType() == MUTABLE)
+				DesugaredOriginAttachment.setDesugaredOrigin(term, desugared);
+		} else if (REASSIGN_ORIGINS) {
+			throw new NotImplementedException("Not implemented: unwrapping of possibly already wrapped term");
+		}
+		return term;
+	}
+
+	/**
 	 * Replaces all subterms in a list,
 	 * maintaining only the outer annotations.
 	 */
@@ -141,7 +181,7 @@
 		} else {
 			IStrategoTerm head = terms.head();
 			IStrategoList tail = terms.tail();
-			IStrategoTerm newHead = ensureLink(head, old.head());
+			IStrategoTerm newHead = ensureLink(head, old.head(), false);
 			IStrategoList newTail = makeListLink(tail, old.tail());
 			
 			/* UNDONE: Origin tracking for Cons nodes
@@ -162,7 +202,7 @@
 		IStrategoTerm[] oldKids = old.getAllSubterms();
 		if (oldKids == kids) return kids; // no changes; happens with interpreter's all
 		for (int i = 0; i < kids.length; i++) {
-			kids[i] = ensureLink(kids[i], oldKids[i]);
+			kids[i] = ensureLink(kids[i], oldKids[i], true);
 		}
 		return kids;
 		/* Before opimization (avoid array copy and exit if kids == oldTerm.getAllSubterms())
@@ -175,13 +215,20 @@
 		*/
 	}
 	
-	protected IStrategoTerm ensureLink(IStrategoTerm term, IStrategoTerm old) {
+	protected IStrategoTerm ensureLink(IStrategoTerm term, IStrategoTerm old, boolean isChildLink) {
 		if (term == old || isOriginRoot(term)) {
-			return term;
-		} else {
-			IStrategoTerm originRoot = getOriginRoot(old);
-			return originRoot == null ? term : makeLink(term, originRoot);
+			return term; //TODO: track desugared origins for not origin root lists?
+		}		
+		if(assignDesugaredOrigins){
+			//do not trust child link heuristic
+			if(!isChildLink) DesugaredOriginAttachment.setDesugaredOrigin(term, term);
+		} 
+		else {
+			IStrategoTerm desugared = DesugaredOriginAttachment.getDesugaredOrigin(old);
+			if(desugared != null) term = makeLinkDesugared(term, desugared);			
 		}
+		IStrategoTerm originRoot = getOriginRoot(old);
+		return originRoot == null ? term : makeLink(term, originRoot);
 	}
 	
 	protected IStrategoTerm getOriginRoot(IStrategoTerm term) {
@@ -198,7 +245,7 @@
 	public IStrategoTerm annotateTerm(IStrategoTerm term,
 			IStrategoList annotations) {
 		IStrategoTerm result = super.annotateTerm(term, annotations);
-		ensureLink(result, term);
+		ensureLink(result, term, false);
 		return result;
 	}
 }

From seba at informatik.uni-marburg.de  Thu Jul 14 12:37:43 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 14 Jul 2011 10:37:43 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23118 - in
	sugarj/trunk: case-studies/concretesyntax
	compiler/org/sugarj/driver compiler/org/sugarj/driver/path
	editor/editor editor/editor/java/org/sugarj/editor feature ...
Message-ID: <20110714103743.9E2D47F8063@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Thu Jul 14 10:37:42 2011
New Revision: 23118
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23118&sc=1

Log:
fixed multi-project integration

Modified:
   sugarj/trunk/case-studies/concretesyntax/Java.sugj
   sugarj/trunk/compiler/org/sugarj/driver/Driver.java
   sugarj/trunk/compiler/org/sugarj/driver/Environment.java
   sugarj/trunk/compiler/org/sugarj/driver/Result.java
   sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java
   sugarj/trunk/compiler/org/sugarj/driver/path/Path.java
   sugarj/trunk/editor/editor/SugarJ-Builders.esv
   sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseController.java
   sugarj/trunk/feature/feature.xml
   sugarj/trunk/update-site/site.xml

Modified: sugarj/trunk/case-studies/concretesyntax/Java.sugj
==============================================================================
--- sugarj/trunk/case-studies/concretesyntax/Java.sugj	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/case-studies/concretesyntax/Java.sugj	Thu Jul 14 10:37:42 2011	(r23118)
@@ -25,6 +25,8 @@
   
   context-free syntax
     "~id:"  StrategoTerm  -> JavaID  {cons("FromMetaExpr")}
+    "~Id:"  StrategoTerm  -> JavaId  {cons("FromMetaExpr")}
+
 //    "~"  StrategoTerm  -> JavaID  {cons("FromMetaExpr"), avoid}
 
  
@@ -319,6 +321,10 @@
     "~string:" <StrategoTerm-CF> -> JavaStringChars {cons("FromMetaExpr"), prefer}
     "~char:"   <StrategoTerm-CF> <LAYOUT?-CF> -> JavaSingleChar  {cons("FromMetaExpr"), prefer}
   
+  context-free syntax
+    "java_method-dec"  "|[" JavaMethodDec  "]|" -> StrategoTerm {cons("ToMetaExpr")}
+    "java"             "|[" JavaMethodDec  "]|" -> StrategoTerm {cons("ToMetaExpr")}
+                       "|[" JavaMethodDec  "]|" -> StrategoTerm {cons("ToMetaExpr")}
    
   
   strategies

Modified: sugarj/trunk/compiler/org/sugarj/driver/Driver.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/compiler/org/sugarj/driver/Driver.java	Thu Jul 14 10:37:42 2011	(r23118)
@@ -779,7 +779,7 @@
             log.logErr("could not read dependency file " + dep);
           }
           
-          if (res != null && res.getSourceFile() != null)
+          if (res != null && res.getSourceFile() != null && res.getSourceFile().getBasePath().toString().equals(environment.getRoot()))
             sourceFile = res.getSourceFile();
         }
         

Modified: sugarj/trunk/compiler/org/sugarj/driver/Environment.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Environment.java	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/compiler/org/sugarj/driver/Environment.java	Thu Jul 14 10:37:42 2011	(r23118)
@@ -30,6 +30,7 @@
   public static String sep = "/";
   public static String classpathsep = File.pathSeparator;
 
+  
   /**
    * @author Sebastian Erdweg <seba at informatik uni-marburg de>
    */
@@ -79,7 +80,6 @@
   private String bin = ".";
   
   
-  
   /* 
    * parse all imports simultaneously, i.e., not one after the other
    */

Modified: sugarj/trunk/compiler/org/sugarj/driver/Result.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/Result.java	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/compiler/org/sugarj/driver/Result.java	Thu Jul 14 10:37:42 2011	(r23118)
@@ -109,7 +109,7 @@
   }
   
   public boolean isUpToDate(int inputHash, Environment env) throws IOException {
-    if (inputHash != sourceFileHash)
+    if (sourceFileHash == null || inputHash != sourceFileHash)
       return false;
     
     for (Entry<Path, Integer> entry : generatedFileHashes.entrySet())
@@ -199,16 +199,18 @@
       result.sourceFile = (RelativePath) Path.readPath(ois, env);
       result.sourceFileHash = ois.readInt();
       
+      boolean reallocate = result.sourceFile.getBasePath().toString().equals(env.getRoot());
+      
       int numDependencies = ois.readInt();
       for (int i = 0; i < numDependencies; i++) {
-        Path file = Path.readPath(ois, env);
+        Path file = Path.readPath(ois, env, reallocate);
         int hash = ois.readInt();
         result.dependencies.put(file, hash);
       }
       
       int numGeneratedFiles = ois.readInt();
       for (int i = 0; i< numGeneratedFiles; i++) {
-        Path file = Path.readPath(ois, env);
+        Path file = Path.readPath(ois, env, reallocate);
         int hash = ois.readInt();
         result.generatedFileHashes.put(file, hash);
       }

Modified: sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/compiler/org/sugarj/driver/SDFCommands.java	Thu Jul 14 10:37:42 2011	(r23118)
@@ -56,7 +56,7 @@
   /*
    * timeout for parsing files (in milliseconds)
    */
-  private static long PARSE_TIMEOUT = 30000;
+  private static long PARSE_TIMEOUT = 5000;
   
   static {
     try {

Modified: sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/compiler/org/sugarj/driver/STRCommands.java	Thu Jul 14 10:37:42 2011	(r23118)
@@ -201,7 +201,8 @@
   
   public static IStrategoTerm assimilate(String strategy, Path jarfile, IStrategoTerm in, HybridInterpreter interp) throws IOException {
     try {
-      HybridInterpreter newInterp = new HybridInterpreter(interp);
+      // XXX try release loaded classes by creating a completely new interpreter
+      HybridInterpreter newInterp = new HybridInterpreter(interp.getFactory());
       newInterp.loadJars(jarfile.getFile().toURI().toURL());
       newInterp.setCurrent(in);
       

Modified: sugarj/trunk/compiler/org/sugarj/driver/path/Path.java
==============================================================================
--- sugarj/trunk/compiler/org/sugarj/driver/path/Path.java	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/compiler/org/sugarj/driver/path/Path.java	Thu Jul 14 10:37:42 2011	(r23118)
@@ -33,9 +33,18 @@
     return o instanceof Path && ((Path) o).getAbsolutePath().equals(getAbsolutePath());
   }
   
+//  /**
+//   * @throws IllegalArgumentException if this is not a descendant of p
+//   */
+//  public abstract RelativePath makeRelativeTo(Path p);
+
   public static Path readPath(ObjectInputStream ois, Environment env) throws IOException, ClassNotFoundException {
+    return readPath(ois, env, true);
+  }
+  
+  public static Path readPath(ObjectInputStream ois, Environment env, boolean reallocate) throws IOException, ClassNotFoundException {
     Path p = (Path) ois.readObject();
-    return reallocate(p, env);
+    return reallocate ? reallocate(p, env) : p;
   }
   
   public static Path reallocate(Path p, Environment env) {

Modified: sugarj/trunk/editor/editor/SugarJ-Builders.esv
==============================================================================
--- sugarj/trunk/editor/editor/SugarJ-Builders.esv	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/editor/editor/SugarJ-Builders.esv	Thu Jul 14 10:37:42 2011	(r23118)
@@ -12,5 +12,4 @@
   provider : include/sugarj.ctree                                                                             
   provider : include/sugarj-java.jar                                                                          
                                                                                                               
-  builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (source)  
-                                                                                                              
+  builder  : "Show abstract syntax (for selection)" = generate-aterm (openeditor) (realtime) (source)

Modified: sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseController.java
==============================================================================
--- sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseController.java	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/editor/editor/java/org/sugarj/editor/SugarJParseController.java	Thu Jul 14 10:37:42 2011	(r23118)
@@ -84,7 +84,7 @@
             IPath path = root.getPath();
             boolean externalPath = root.getResource() == null;
             String p = externalPath ? path.toString() : projectPath + "/" + path.makeRelativeTo(project.getRawProject().getFullPath());
-            if (root.getKind() == IPackageFragmentRoot.K_SOURCE)
+            if (root.getKind() == IPackageFragmentRoot.K_SOURCE && project.getRawProject().getFullPath().isPrefixOf(path))
               sourcePath.add(p);
             else if (root.getKind() == IPackageFragmentRoot.K_BINARY)
               includePath.add(p);

Modified: sugarj/trunk/feature/feature.xml
==============================================================================
--- sugarj/trunk/feature/feature.xml	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/feature/feature.xml	Thu Jul 14 10:37:42 2011	(r23118)
@@ -2,7 +2,7 @@
 <feature
       id="org.sugarj.editor"
       label="Sugarclipse"
-      version="1.2.3.qualifier"
+      version="1.2.8.qualifier"
       provider-name="sugarj.org">
 
    <description url="http://sugarj.org">

Modified: sugarj/trunk/update-site/site.xml
==============================================================================
--- sugarj/trunk/update-site/site.xml	Tue Jul 12 09:10:45 2011	(r23117)
+++ sugarj/trunk/update-site/site.xml	Thu Jul 14 10:37:42 2011	(r23118)
@@ -3,7 +3,7 @@
    <description name="SugarJ" url="sugarj.org/update">
       SugarJ
    </description>
-   <feature url="features/org.sugarj.editor_1.2.3.201106021749.jar" id="org.sugarj.editor" version="1.2.3.201106021749">
+   <feature url="features/org.sugarj.editor_1.2.8.201107141204.jar" id="org.sugarj.editor" version="1.2.8.201107141204">
       <category name="SugarJ"/>
    </feature>
    <category-def name="SugarJ" label="SugarJ">

From m.dejonge at tudelft.nl  Thu Jul 14 18:16:01 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 14 Jul 2011 16:16:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23122 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20110714161601.B077A108C016@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Jul 14 16:16:00 2011
New Revision: 23122
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23122&sc=1

Log:
force origin tracking for desugaring/analysis

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Thu Jul 14 15:08:53 2011	(r23121)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Thu Jul 14 16:16:00 2011	(r23122)
@@ -143,7 +143,7 @@
   declare-globals-top =
     if not(NoAnalysis) then
       with(<declare-globals> Import("libstratego-lib"));
-      alltd(declare-globals)
+      alltd(origin-track-forced(declare-globals))
     end
 
   declare-globals:
@@ -313,7 +313,7 @@
 rules // Declarations inside definition bodies
 
   declare-bodies-top =
-    alltd(propose-completion <+ declare-bodies)
+    alltd(propose-completion <+ origin-track-forced(declare-bodies))
 
   declare-bodies:
     SDefT(x, s*, t*, s) -> SDefT(x, s'*, t'*, s')

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	Thu Jul 14 15:08:53 2011	(r23121)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	Thu Jul 14 16:16:00 2011	(r23122)
@@ -4,6 +4,7 @@
 imports
   libstratego-lib
   libstrc
+  lib/editor-common.generated
 
 signature constructors
 
@@ -23,7 +24,7 @@
 rules
 
   basic-desugar-top =
-    topdown(try(basic-desugar))
+    topdown(try(origin-track-forced(basic-desugar)))
 
   basic-desugar:
     SDef(x, a*, s) -> SDefT(x, a*, [], s)

From seba at informatik.uni-marburg.de  Thu Jul 14 12:38:24 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Thu, 14 Jul 2011 10:38:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23119 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110714103824.216872B8017@mx2.tudelft.nl>

Author: SebastianErdweg
Date: Thu Jul 14 10:38:23 2011
New Revision: 23119
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23119&sc=1

Log:
eliminate recursion while disambiguating a parse tree

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/CycleParseNode.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java	Thu Jul 14 10:37:42 2011	(r23118)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/AbstractParseNode.java	Thu Jul 14 10:38:23 2011	(r23119)
@@ -51,6 +51,7 @@
 
     abstract public int getNodeType();
     abstract public AbstractParseNode[] getChildren();
+    abstract public int getLabel();
     
     protected static final int NO_HASH_CODE = 0;
 

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/CycleParseNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/CycleParseNode.java	Thu Jul 14 10:37:42 2011	(r23118)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/CycleParseNode.java	Thu Jul 14 10:38:23 2011	(r23119)
@@ -90,5 +90,11 @@
 			return false;
 		return true;
 	}
+	
+	@Override
+    public int getLabel() {
+		return target.getLabel();
+	}
+
 
 }

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Thu Jul 14 10:37:42 2011	(r23118)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Thu Jul 14 10:38:23 2011	(r23119)
@@ -7,11 +7,18 @@
  */
 package org.spoofax.jsglr.client;
 
+import static org.spoofax.jsglr.client.AbstractParseNode.AMBIGUITY;
+import static org.spoofax.jsglr.client.AbstractParseNode.AVOID;
+import static org.spoofax.jsglr.client.AbstractParseNode.CYCLE;
+import static org.spoofax.jsglr.client.AbstractParseNode.PARSENODE;
+import static org.spoofax.jsglr.client.AbstractParseNode.PARSE_PRODUCTION_NODE;
+import static org.spoofax.jsglr.client.AbstractParseNode.PREFER;
+import static org.spoofax.jsglr.client.AbstractParseNode.REJECT;
 import static org.spoofax.terms.Term.termAt;
-import static org.spoofax.jsglr.client.AbstractParseNode.*;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Stack;
 
 import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
@@ -399,126 +406,115 @@
 		}
 	}
 
+	
 	/**
-	 * @param inAmbiguityCluster  We're inside an amb and can return null to reject this branch.
+	 * Performs a depth-first traversal of the parse tree to
+	 * filter ambiguities. 
 	 */
-	private AbstractParseNode filterTree(AbstractParseNode t, boolean inAmbiguityCluster) throws FilterException {
+	public AbstractParseNode filterTree(AbstractParseNode node,
+			boolean inAmbiguityCluster) throws FilterException {
 		// SG_FilterTreeRecursive
 		if (Tools.debugging) {
-			Tools.debug("filterTree(node)    - ", t);
+			Tools.debug("filterTree(node)    - ", node);
 		}
 
-		// parseTable.setTreeBuilder(new Asfix2TreeBuilder());
-		switch (t.getNodeType()) {
-		case AMBIGUITY:
-			if (!inAmbiguityCluster) {
-				// (some cycle stuff should be done here)
-				final AbstractParseNode[] ambs = t.getChildren();
-				t = filterAmbiguities(ambs);
-			} else {
-				// FIXME: hasRejectProd(Amb) can never succeed?
-				if (filterReject && parseTable.hasRejects() && hasRejectProd(t)) {
-					return null;
-				}
-				final AbstractParseNode[] ambs = t.getChildren();
-				return filterAmbiguities(ambs);
-
-			}
-			break;
-		case PARSENODE: case AVOID: case PREFER: case REJECT:
-			final ParseNode node = (ParseNode) t;
-			final AbstractParseNode[] args = node.getChildren();
-			final AbstractParseNode[] newArgs =
-				t.isParseProductionChain() ? null : filterTree(args, false);
-			// TODO: assert that parse production chains do not have reject nodes?
-
-			if (filterReject && parseTable.hasRejects() && hasRejectProd(t)) {
-				if (inAmbiguityCluster) {
-					return null;
-				} else {
-					rejectedBranch = t;
+		// nodes to be processed
+		Stack<AbstractParseNode> input = new Stack<AbstractParseNode>();
+		// nodes already processed
+		Stack<AbstractParseNode> output = new Stack<AbstractParseNode>();
+		// already processed nodes that have not yet been reinitialized
+		// with their (possibly changed) children
+		Stack<AbstractParseNode> pending = new Stack<AbstractParseNode>();
+
+		input.add(node);
+
+		while (!input.isEmpty() || !pending.isEmpty()) {
+			int pendingPeekPos = pending.isEmpty() ? -1 : output.size()
+					- pending.peek().getChildren().length - 1;
+			
+			if (!pending.isEmpty() && pendingPeekPos >= 0
+					&& output.get(pendingPeekPos) == pending.peek()) {
+				// collapse pending.peek() with its possibly changed children
+				
+				AbstractParseNode t = pending.pop();
+
+				AbstractParseNode[] args = new AbstractParseNode[t
+						.getChildren().length];
+				boolean changed = false;
+
+				for (int i = t.getChildren().length - 1; i >= 0; i--) {
+					args[i] = output.pop();
+					changed = changed || args[i] != t.getChildren()[i];
 				}
-			}
 
-			if (newArgs != null && args != newArgs)
-				t = new ParseNode(node.getLabel(), newArgs, AbstractParseNode.PARSENODE);
-			break;
-		case PARSE_PRODUCTION_NODE:
-			// leaf node -- do thing (cannot be any ambiguities here)
-			return t;
-		case CYCLE:
-			return t;
-		default:
-			throw new IllegalStateException("Unknown node type: " + t);
-		}
+				output.pop();
 
-		if (filterAssociativity) {
-			return applyAssociativityPriorityFilter(t);
-		} else {
-			return t;
-		}
-	}
+				if (changed)
+					t = new ParseNode(t.getLabel(), args,
+							AbstractParseNode.PARSENODE);
 
-	/**
-	 * Filters child parse nodes.
-	 *
-	 * @return An array of filtered child nodes, or null if no changes were made.
-	 */
-	private AbstractParseNode[] filterTree(AbstractParseNode[] args, boolean inAmbiguityCluster) throws FilterException {
+				if (filterAssociativity)
+					t = applyAssociativityPriorityFilter(t);
 
-		if(Tools.debugging) {
-			Tools.debug("filterTree(<nodes>) - ", args);
-		}
-
-		// TODO: Optimize - combine these two loops
-
-		AbstractParseNode[] newArgs = null;
-
-		for (int i = 0, max = args.length; i < max; i++) {
-			final AbstractParseNode n = args[i];
-			final AbstractParseNode filtered = filterTree(n, false);
-
-			if (newArgs == null) {
-				if (filtered != n) {
-					newArgs = cloneArrayUpToIndex(args, i);
-					newArgs[i] = filtered;
-				}
+				output.push(t);
 			} else {
-				newArgs[i] = filtered;
-			}
-		}
+				// examine input.peek() and traverse its children
+				
+				AbstractParseNode t = input.pop();
+
+				switch (t.getNodeType()) {
+				case AMBIGUITY:
+					if (!(inAmbiguityCluster && output.isEmpty())) {
+						// (some cycle stuff should be done here)
+						final AbstractParseNode[] ambs = t.getChildren();
+						t = filterAmbiguities(ambs);
+						output.push(t);
+					} else {
+						// FIXME: hasRejectProd(Amb) can never succeed?
+						if (filterReject && parseTable.hasRejects()
+								&& hasRejectProd(t)) {
+							output.push(t);
+						} else {
+							final AbstractParseNode[] ambs = t.getChildren();
+							output.push(filterAmbiguities(ambs));
+						}
 
-		// FIXME Shouldn't we do some filtering here?
-		// if (!changed) {
-		//     Tools.debug("Dropping: ", args);
-		//     newArgs = getEmptyList();
-		// }
-
-		if (filterAny) {
-			if (newArgs != null) args = newArgs;
-			newArgs = null;
-			for (int i = 0, max = args.length; i < max; i++) {
-				AbstractParseNode n = args[i];
-				AbstractParseNode filtered = applyAssociativityPriorityFilter(n);
-
-				if (newArgs == null) {
-					if (filtered != n) {
-						newArgs = cloneArrayUpToIndex(args, i);
-						newArgs[i] = filtered;
 					}
-				} else {
-					newArgs[i] = filtered;
+					break;
+				case PARSENODE:
+				case AVOID:
+				case PREFER:
+				case REJECT:
+
+					if (filterReject && parseTable.hasRejects()
+							&& hasRejectProd(t)) {
+						output.push(t);
+						rejectedBranch = t;
+					} else if (t.getChildren().length > 0
+							&& !t.isParseProductionChain()) {
+						output.push(t);
+						pending.push(t);
+						for (int i = t.getChildren().length - 1; i >= 0; i--)
+							input.push(t.getChildren()[i]);
+					} else {
+						output.push(t);
+					}
+					break;
+				case PARSE_PRODUCTION_NODE:
+					// leaf node -- do thing (cannot be any ambiguities here)
+					output.push(t);
+					break;
+				case CYCLE:
+					output.push(t);
+					break;
+				default:
+					throw new IllegalStateException("Unknown node type: " + t);
 				}
 			}
 		}
-		return newArgs == null ? args : newArgs;
-	}
 
-	private static AbstractParseNode[] cloneArrayUpToIndex(AbstractParseNode[] args, int index) {
-		AbstractParseNode[] newArgs;
-		newArgs = new AbstractParseNode[args.length];
-		System.arraycopy(args, 0, newArgs, 0, index);
-		return newArgs;
+		assert output.size() == 1;
+		return output.peek();
 	}
 
 	private AbstractParseNode applyAssociativityPriorityFilter(AbstractParseNode t) throws FilterException {

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java	Thu Jul 14 10:37:42 2011	(r23118)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/ParseProductionNode.java	Thu Jul 14 10:38:23 2011	(r23119)
@@ -74,4 +74,9 @@
 	public AbstractParseNode[] getChildren() {
 		return NO_CHILDREN;
 	}
+	
+    @Override
+	public int getLabel() {
+    	return prod;
+    }
 }

From m.dejonge at tudelft.nl  Fri Jul 15 23:47:39 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 15 Jul 2011 21:47:39 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23123 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20110715214739.39BC1CC15F@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Jul 15 21:47:38 2011
New Revision: 23123
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23123&sc=1

Log:
- bugfixes
- parenthesis
- origin-desugared

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Thu Jul 14 16:16:00 2011	(r23122)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Fri Jul 15 21:47:38 2011	(r23123)
@@ -6,6 +6,30 @@
 	sdf2imp/util/layout-adaption
 	sdf2imp/util/origin-tracking
 
+signature constructors
+  Parenthetical : Unknown -> Unknown
+
+rules //Parenthetical
+
+  origin-indent = ?Parenthetical(<origin-indent>)
+
+rules //pp rules for default nodes 
+	  
+  pp-default(pp):
+  	Parenthetical(node) -> <concat-strings> ["(", <pp> node, ")"]
+  
+  pp-default(pp):
+  	None() -> ""
+
+  pp-default(pp):
+  	Some(x) -> <pp> x
+
+  //pp-default(pp): amb([h|tail])
+
+  pp-default(pp) = is-string
+
+  pp-default(pp) = int-to-string
+  
 rules //interface
 
 // backwards compatibility
@@ -49,8 +73,7 @@
 rules //text-reconstruction
 
 construct-text(pp) = 
-	is-string <+
-	int-to-string <+
+	pp-default(construct-text(pp)) <+ //Parenthesis, None, ...
 	construct-text-from-origin-desugared(pp) <+
 	construct-text-from-origin(pp) <+
 	construct-text-by-pp(pp) <+
@@ -59,14 +82,16 @@
 construct-text-from-origin-desugared(pp):
 	node -> <construct-text-from-origin(pp)> (origin-desugared-node, node)
 	where 
-		origin-desugared-node := <origin-term-desugared; topdown(try(strip-annos))> node 
+		origin-desugared-node := <origin-term-desugared; topdown(try(strip-annos))> node
 	//TODO: apply-resugaring here?
+		//; <debug(!"          desugared: ")> origin-desugared-node
+		//; <origin-term; debug(!"origin of desugared: ")> origin-desugared-node
 
 construct-text-from-origin(pp):
 	node -> <construct-text-from-origin(pp)> (origin-node, node)
 	where
 		origin-node := <origin-term> node
-
+ 
 //list must be constructed with comments that preceed the first element or succeed the last element
 //(otherwise insert-at-end gives problems)
 construct-text-from-origin(pp):
@@ -77,36 +102,51 @@
 construct-text-from-origin(pp):
 	t@(origin-node, node) -> text
 	where //guarantees that node can be formatted from the origin node, preventing non-termination
-		<is-tuple> t; 
+		<is-tuple> t; debug(!"ast-changes?: ");
 		<has-origin-term> origin-node;
-		ast-changes := <collect-ast-changes(in-parent-context(|origin-node))> (origin-node, node); //debug(!"ast-changes: ");
+		ast-changes := <collect-ast-changes(in-parent-context(|origin-node))> (origin-node, node); 
 		<is-terminating-diff(|node)> ast-changes //prevent non termination
+		; debug(!"ast-changes!: ")
 	with
-		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; //debug(!"txt-changes: ");
+		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; debug(!"txt-changes: ");
 		text := <apply-text-changes>(text-changes, <origin-text> origin-node, <origin-start-offset> origin-node)		
 
 construct-text-by-pp(pp):
 	node -> text
 	where
-		text := <all(alltd(construct-text-with-comments(pp|<DEFAULT-INDENT>))); pp> node
-		//text := <alltd(construct-text-with-comments(pp|<DEFAULT-INDENT>)); pp> node
+		text := <
+			all(alltd(construct-text-with-comments(pp|<DEFAULT-INDENT>))); 
+			topdown(try(pp-default(pp))); //handle brackets
+			pp
+		> node
+
+construct-text-with-comments(pp|default-indent) = 
+	construct-text-with-comments-desugared(pp|default-indent) <+
+	construct-text-with-comments-origin(pp|default-indent)
 
-construct-text-with-comments-desugared = 
-	fail //TODO: first try text reconstruction on desugared, then try on origin (list)
+construct-text-with-comments-desugared(pp|default-indent):
+	node -> <construct-text-with-comments(pp|default-indent)> (origin-desugared-node, node)
+	where 
+		origin-desugared-node := <origin-term-desugared; topdown(try(strip-annos))> node;
+		<same-signature> (origin-desugared-node, node)
 
-construct-text-with-comments(pp|default-indent):
+construct-text-with-comments-origin(pp|default-indent):
 	node -> <construct-text-with-comments(pp|default-indent)> (origin-node, node)
 	where
 		origin-node := <origin-term <+ find-origin-sublist> node
 
+//construct-text-with-comments(pp|default-indent): Parentetical(node) -> ...
+// on this moment the parenthesis will be placed on the layouted text, 
+// which is awful. It should be: {indent + comments before}{(}{node-text}{)}{comments after} 
+
 construct-text-with-comments(pp|default-indent):
 	t@(origin-node, node) -> node-text
 	where 
 		<is-tuple> t;
 		<has-origin-term> origin-node
 	with //termination check is not needed (we need to Replace to keep comments), since it is called on a subterm in construct-text-by-pp
-		ast-changes := <collect-ast-changes(in-parent-context(|origin-node))> (origin-node, node); //debug(!"--ast-changes: ");
-		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; //debug(!"--txt-changes: ");
+		ast-changes := <collect-ast-changes(in-parent-context(|origin-node))> (origin-node, node); debug(!"--ast-changes: ");
+		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; debug(!"--txt-changes: ");
 		full-text := <origin-text-with-layout> origin-node; 
 		full-text-start-offset := <origin-layout-prefix-start-offset> origin-node; 
 		modified-full-text := <apply-text-changes>(text-changes, full-text, full-text-start-offset);
@@ -122,11 +162,17 @@
 
 collect-ast-changes(in-local-context) = 
 	where(is-tuple); 
+	try(remove-superfluous-parentethical);
 	(collect-ast-changes-eq <+
 	collect-ast-changes-rec-node(in-local-context) <+
 	collect-ast-changes-rec-list(in-local-context) <+
 	collect-ast-changes-replace(in-local-context))
-	
+
+remove-superfluous-parentethical:
+	(origin-node, Parenthetical(node)) -> (origin-node, node)
+	where //apparently, parenthesis already in source
+		<same-signature> (origin-node, node)
+
 collect-ast-changes-eq:
 	(origin-node, node) -> []
 	where
@@ -180,9 +226,9 @@
 	
 rules //list diff
 
-list-diff(in-local-context|origin-lst) =
-	list-diff-fuzzy(in-local-context|origin-lst) <+
-	list-diff-origin-related(in-local-context|origin-lst) 
+list-diff(in-local-context|origin-lst) = 
+	(list-diff-fuzzy(in-local-context|origin-lst) <+
+	list-diff-origin-related(in-local-context|origin-lst)) 
 	
 list-diff-fuzzy(in-local-context|origin-lst):
 	([origin-elem|origin-rest], [new-elem|new-rest]) -> ast-changes
@@ -198,14 +244,13 @@
 
 list-diff-origin-related(in-local-context|origin-lst): 
 	(origin-elems, new-elems) -> ast-changes
-	where
-		deleted-elems := <take-while(is-deletion(|new-elems))> origin-elems; 
-		origin-rest := <drop-while(is-deletion(|new-elems))>;
+	where 
+		deleted-elems := <take-while(is-deletion(|new-elems))> origin-elems;  
+		origin-rest := <drop-while(is-deletion(|new-elems))> origin-elems;
 		<not(?[])> deleted-elems 
 	with
 		ast-changes := <flatten-list>[DELETION(deleted-elems)|<list-diff(in-local-context|origin-lst)> (origin-rest, new-elems)]
 
-
 list-diff-origin-related(in-local-context|origin-lst):
 	([origin-elem|origin-rest], new-elems) -> ast-changes
 	where
@@ -246,6 +291,11 @@
 		<not(is-list)> trm1
 	)
 
+same-signature(|t1):
+	t -> t
+	where
+		<same-signature> (t1,t)
+
 violates-homomorphism-list =
 	?([],[_,_|_]) <+ 
 	?([_],[_,_|_]) <+
@@ -284,4 +334,4 @@
 		<not(has-origin-term)> node;
 		arg-tuples := <zip>(<get-arguments> origin-node, <get-arguments> node);
 		<map(is-related-to <+ (Snd; not(has-origin-term)))> arg-tuples;
-		<fetch(is-related-to)> arg-tuples
+		<fetch(is-related-to)> arg-tuples
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Thu Jul 14 16:16:00 2011	(r23122)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Fri Jul 15 21:47:38 2011	(r23123)
@@ -66,9 +66,9 @@
 		layout-before := <layout-prefix> elem; 
 		indented-prefix-text := <conc-strings; adapt-indentation(|origin-node, elem)> (layout-before, text); 
 		comments-after := <comments-after; adapt-indentation(|origin-node, elem)> elem; 
-		separation := <origin-separation> origin-node; 
-		layout-after := <create-separation-after> (separation, comments-after); 
-		elem-text := <conc-strings> (indented-prefix-text, layout-after) 
+		separation := <origin-separation> origin-node; debug(!"1|");
+		layout-after := <create-separation-after> (separation, comments-after); debug(!"2|");
+		elem-text := <conc-strings> (indented-prefix-text, layout-after) ;debug(!"3|")
 
 construct-text-list-element-last(pp|origin-node):
 	elem -> elem-text
@@ -189,8 +189,8 @@
 	(separation, comments-after) -> txt-between
 	where 
 		<not(is-substring(!"\n"))> separation;
-		txt-between := <concat-strings> [" ", comments-after, separation]
-
+		comments-after-separated := <?"" <+ <conc-strings>(" ", <id>)> comments-after;
+		txt-between := <conc-strings> (comments-after-separated, separation)
 
 rules //Applying the textual modifications
 
@@ -253,4 +253,4 @@
 
 assert-valid-offset =
 	?(s,e,_);
-	with(<leq>(s,e))
+	with(<leq>(s,e))
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str	Thu Jul 14 16:16:00 2011	(r23122)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/origin-tracking.str	Fri Jul 15 21:47:38 2011	(r23123)
@@ -1,13 +1,16 @@
 module sdf2imp/util/origin-tracking
 
-rules //origin primitives 
-	
+rules //origin primitives
+
 origin-sublist-term = prim("SSL_EXT_origin_sublist_term", <id>)
 
 origin-term = 
 	prim("SSL_EXT_origin_term", <id>) <+ 
 	origin-sublist-term
 
+origin-term-desugared = prim("SSL_EXT_origin_term_desugared", <id>)
+origin-term-fuzzy = prim("SSL_EXT_origin_term_fuzzy", <id>)
+
 origin-text   = origin-support-sublist(prim("SSL_EXT_origin_text", <id>))
 origin-offset = origin-support-sublist(prim("SSL_EXT_origin_offset", <id>)) //exclusive already in Spoofax. TODO: inclusive in Spoofax
 origin-indent = origin-support-sublist(prim("SSL_EXT_origin_indentation", <id>))
@@ -52,4 +55,4 @@
 DEFAULT-INDENT = !"  "
 
 layout-prefix = origin-layout-prefix <+ !""
-comments-after = origin-comments-after <+ !""
+comments-after = origin-comments-after <+ !""
\ No newline at end of file

From m.dejonge at tudelft.nl  Mon Jul 18 08:04:50 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 06:04:50 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23124 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services
Message-ID: <20110718060450.C2D93108C009@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 06:04:49 2011
New Revision: 23124
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23124&sc=1

Log:
- save resources before refactoring
- analyze (possible) changed files after refactoring
- pp-table no longer used in text reconstruction

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IRefactoring.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IRefactoring.java	Fri Jul 15 21:47:38 2011	(r23123)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IRefactoring.java	Mon Jul 18 06:04:49 2011	(r23124)
@@ -1,5 +1,8 @@
 package org.strategoxt.imp.runtime.services;
 
+import java.util.ArrayList;
+
+import org.eclipse.core.runtime.IPath;
 import org.strategoxt.imp.runtime.EditorState;
 
 /**
@@ -17,4 +20,5 @@
 	
 	boolean isDefinedOnSelection(EditorState editor);
 
+	ArrayList<IPath> getRelativePathsOfAffectedFiles();
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java	Fri Jul 15 21:47:38 2011	(r23123)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java	Mon Jul 18 06:04:49 2011	(r23124)
@@ -1,5 +1,7 @@
 package org.strategoxt.imp.runtime.services;
 
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.ActionContributionItem;
 import org.eclipse.jface.action.IAction;
@@ -9,9 +11,11 @@
 import org.eclipse.swt.widgets.MenuItem;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.IWorkbenchWindowPulldownDelegate;
+import org.eclipse.ui.PlatformUI;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
+import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 
 public class RefactoringButtonDelegate extends ToolbarButtonDelegate implements IWorkbenchWindowPulldownDelegate {
 
@@ -35,6 +39,7 @@
 	}
 
 	private void executeRefactoring(EditorState editor, IRefactoring refactoring) {
+		PlatformUI.getWorkbench().saveAllEditors(false);
 		refactoring.prepareExecute(editor);
 		StrategoRefactoringWizard wizard = new StrategoRefactoringWizard(
 			(StrategoRefactoring) refactoring, 
@@ -47,6 +52,16 @@
 		} catch (Exception e) {
 			e.printStackTrace();
 		}
+		queueAnalysisAffectedFiles(refactoring, editor);
+	}
+
+	//Queue analysis for affected asts, 
+	//dyn rules may be out of sync after re-analysis asts + abort refactoring)
+	private void queueAnalysisAffectedFiles(IRefactoring refactoring, EditorState editor) {		
+		IProject project = editor.getProject().getRawProject();
+		for (IPath projectRelativePath : refactoring.getRelativePathsOfAffectedFiles()) {
+			StrategoAnalysisQueueFactory.getInstance().queueAnalysis(projectRelativePath, project);			
+		}
 	}
 
 	@Override

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Fri Jul 15 21:47:38 2011	(r23123)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Mon Jul 18 06:04:49 2011	(r23124)
@@ -13,6 +13,7 @@
 import org.eclipse.core.resources.IFile;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
 import org.eclipse.ltk.core.refactoring.Change;
@@ -27,12 +28,13 @@
 import org.spoofax.interpreter.core.InterpreterExit;
 import org.spoofax.interpreter.core.Tools;
 import org.spoofax.interpreter.core.UndefinedStrategyException;
+import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.IStrategoTuple;
 import org.spoofax.interpreter.terms.ITermFactory;
 import org.spoofax.terms.TermFactory;
 import org.spoofax.terms.attachments.OriginAttachment;
-import org.strategoxt.imp.generator.construct_textual_change_1_1;
+import org.strategoxt.imp.generator.construct_textual_change_1_0;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
@@ -61,6 +63,8 @@
 	public ArrayList<StrategoRefactoringIdentifierInput> getInputFields() {
 		return inputFields;
 	}
+	
+	private ArrayList<IPath> affectedFilePaths;
 
 	private IStrategoTerm node;
 	
@@ -82,7 +86,8 @@
 	
 	public void prepareExecute(EditorState editor) {
 		this.node = getSelectionNode(editor);
-		fileChanges.clear();
+		this.fileChanges.clear();
+		this.affectedFilePaths.clear();
 		//inputFields.clear(); set default values?
 	}
 
@@ -96,8 +101,9 @@
 		this.caption = caption;
 		this.builderRule = builderRule;
 		this.semanticNodes = semanticNodes;
-		fileChanges = new HashSet<TextFileChange>();
+		this.fileChanges = new HashSet<TextFileChange>();
 		this.inputFields = inputFields;
+		this.affectedFilePaths = new ArrayList<IPath>();
 	}
 	
 	@Override
@@ -139,6 +145,8 @@
 				return RefactoringStatus.createFatalErrorStatus(errorMessage);
 			}
 			astChanges = builderResult.getSubterm(0);
+			fillAffectedFilePaths(astChanges);
+			//if(1<2) return RefactoringStatus.createFatalErrorStatus("TEST");
 			fatalErrors = builderResult.getSubterm(1);
 			errors = builderResult.getSubterm(2);
 			warnings = builderResult.getSubterm(3);
@@ -254,18 +262,14 @@
 			inputTerms[i] = inputFields.get(i).getInputValue();
 		}
 		ITermFactory factory = Environment.getTermFactory();
-		try {
-			IStrategoTuple inputTuple = factory.makeTuple(inputTerms, TermFactory.EMPTY_LIST);
-			return inputTuple;
-		} catch (Exception e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-			return null;
-		}
-		catch (AssertionError err) {
-			err.printStackTrace();
-			return null;
-		}
+		if(inputTerms.length == 0) {
+			IStrategoConstructor noneCons = factory.makeConstructor("None", 0);
+			return factory.makeAppl(noneCons);
+		}
+		if(inputTerms.length == 1)
+			return inputTerms[0];
+		IStrategoTuple inputTuple = factory.makeTuple(inputTerms, TermFactory.EMPTY_LIST);
+		return inputTuple;
 	}
 
 	private IResource getResource() {
@@ -312,7 +316,7 @@
 	}
 	
 	private IStrategoTerm getTextReplacement(IStrategoTerm resultTuple) {
-		IStrategoTerm textreplace=construct_textual_change_1_1.instance.invoke(
+		IStrategoTerm textreplace=construct_textual_change_1_0.instance.invoke(
 				observer.getRuntime().getCompiledContext(), 
 				resultTuple, 
 				new Strategy() {
@@ -341,4 +345,21 @@
 		textChange.setEdit(edit);
 		return textChange;
 	}
+
+	private void fillAffectedFilePaths(IStrategoTerm astChanges) {
+		affectedFilePaths.clear();
+		for (int i = 0; i < astChanges.getSubtermCount(); i++) {
+			IStrategoTerm affectedTerm = termAt(astChanges.getSubterm(i),0);
+			IStrategoTerm affectedOrigin = OriginAttachment.tryGetOrigin(affectedTerm);
+			IResource file = SourceAttachment.getResource(affectedOrigin);
+			assert(file != null) : "File of affected term is unknown";
+			IPath path = file.getProjectRelativePath();
+			affectedFilePaths.add(path);
+		}
+	}
+
+	public ArrayList<IPath> getRelativePathsOfAffectedFiles() {
+		return affectedFilePaths;
+	}
+	
 }

From m.dejonge at tudelft.nl  Mon Jul 18 08:07:15 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 06:07:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23125 -
	spoofax-imp/trunk/org.strategoxt.imp.generator
Message-ID: <20110718060715.CA4CF108C009@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 06:07:15 2011
New Revision: 23125
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23125&sc=1

Log:
increase heapsize

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Mon Jul 18 06:04:49 2011	(r23124)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Mon Jul 18 06:07:15 2011	(r23125)
@@ -38,7 +38,7 @@
     -I ${SDF}/share/pgen \
     `pkg-config --variable=strcxtcflags strategoxt`
 
-JAVACFLAGS=-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp strategoxt.jar -source 5 -nowarn
+export JAVACFLAGS=-J-Xmx1024m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp strategoxt.jar -source 5 -nowarn
 JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
 STRJ=`if which strj >/dev/null; then echo strj; elif [ -e strategoxt.jar ]; then echo java -server -Xss4m -jar strategoxt.jar; else echo Please install strj or put strategoxt.jar into the current directory. >&2; exit 1; fi`
 
@@ -79,7 +79,7 @@
 	$(STRJ) -clean -O 3 -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
 	        -la java-front --library -p org.strategoxt.imp.generator
 
-lib/sdf2imp.jar : src-gen/org/strategoxt/imp/generator/sdf2imp.java
+lib/sdf2imp.jar : src-gen/org/strategoxt/imp/generator/sdf2imp.java 
 	strj-jar -i $< -o $@ -cp src-gen
 
 syntax : $(SYNTAX)

From m.dejonge at tudelft.nl  Mon Jul 18 08:23:10 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 06:23:10 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23126 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util
Message-ID: <20110718062310.1F1647F8010@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 06:23:09 2011
New Revision: 23126
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23126&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Mon Jul 18 06:07:15 2011	(r23125)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/construct-text.str	Mon Jul 18 06:23:09 2011	(r23126)
@@ -102,13 +102,13 @@
 construct-text-from-origin(pp):
 	t@(origin-node, node) -> text
 	where //guarantees that node can be formatted from the origin node, preventing non-termination
-		<is-tuple> t; debug(!"ast-changes?: ");
+		<is-tuple> t; //debug(!"ast-changes?: ");
 		<has-origin-term> origin-node;
 		ast-changes := <collect-ast-changes(in-parent-context(|origin-node))> (origin-node, node); 
 		<is-terminating-diff(|node)> ast-changes //prevent non termination
-		; debug(!"ast-changes!: ")
+		//; debug(!"ast-changes!: ")
 	with
-		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; debug(!"txt-changes: ");
+		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; //debug(!"txt-changes: ");
 		text := <apply-text-changes>(text-changes, <origin-text> origin-node, <origin-start-offset> origin-node)		
 
 construct-text-by-pp(pp):
@@ -145,8 +145,8 @@
 		<is-tuple> t;
 		<has-origin-term> origin-node
 	with //termination check is not needed (we need to Replace to keep comments), since it is called on a subterm in construct-text-by-pp
-		ast-changes := <collect-ast-changes(in-parent-context(|origin-node))> (origin-node, node); debug(!"--ast-changes: ");
-		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; debug(!"--txt-changes: ");
+		ast-changes := <collect-ast-changes(in-parent-context(|origin-node))> (origin-node, node); //debug(!"--ast-changes: ");
+		text-changes := <map(ast-change-to-text-change(pp))> ast-changes; //debug(!"--txt-changes: ");
 		full-text := <origin-text-with-layout> origin-node; 
 		full-text-start-offset := <origin-layout-prefix-start-offset> origin-node; 
 		modified-full-text := <apply-text-changes>(text-changes, full-text, full-text-start-offset);

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Mon Jul 18 06:07:15 2011	(r23125)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/util/layout-adaption.str	Mon Jul 18 06:23:09 2011	(r23126)
@@ -66,9 +66,9 @@
 		layout-before := <layout-prefix> elem; 
 		indented-prefix-text := <conc-strings; adapt-indentation(|origin-node, elem)> (layout-before, text); 
 		comments-after := <comments-after; adapt-indentation(|origin-node, elem)> elem; 
-		separation := <origin-separation> origin-node; debug(!"1|");
-		layout-after := <create-separation-after> (separation, comments-after); debug(!"2|");
-		elem-text := <conc-strings> (indented-prefix-text, layout-after) ;debug(!"3|")
+		separation := <origin-separation> origin-node;
+		layout-after := <create-separation-after> (separation, comments-after);
+		elem-text := <conc-strings> (indented-prefix-text, layout-after)
 
 construct-text-list-element-last(pp|origin-node):
 	elem -> elem-text

From m.dejonge at tudelft.nl  Mon Jul 18 08:24:12 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 06:24:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23127 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring
Message-ID: <20110718062412.CF9847F8012@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 06:24:12 2011
New Revision: 23127
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23127&sc=1

Log:
- bugfixes
- comments

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/consistency-preservation.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/fetch.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/generic-rename.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/namebinding-preservation.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/consistency-preservation.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/consistency-preservation.str	Mon Jul 18 06:23:09 2011	(r23126)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/consistency-preservation.str	Mon Jul 18 06:24:12 2011	(r23127)
@@ -4,32 +4,34 @@
 
 /**
  * Collects consistency changes by comparing the semantic errors and warnings  
- * of the (re)analyzed tree before and after transformation
- * @example input:
- * ast := <annotate> tree
- * ast-t := <annotate; transform; re-annotate> tree
+ * of the (re)analyzed trees before and after transformation
+ * @example 
+ * input:
+ * [ast] := [<annotate> tree]
+ * [ast-t] := [<annotate; transform; re-annotate> tree]
  * collect-constraint-errors = !(<collect-all(constraint-error), conc>, <collect-all(constraint-warning), conc>) 
- * @param AST -> (errors, warnings)
- * @type (AST, AST) -> (errors, warnings)
- */
+ * @param collect-constraint-errors: AST -> (errors, warnings)
+ * @type (List(AST), List(AST)) -> (errors, warnings)
+ */  
 introduced-constraint-errors(collect-constraint-errors):
-  (ast, ast-t) -> (introduced-errors, introduced-warnings)
+  (asts, asts-t) -> (introduced-errors, introduced-warnings)
   where
-    (errors-before, warnings-before) := <collect-constraint-errors; topdown(strip-annos)> ast;
-    (errors-after, warnings-after)   := <collect-constraint-errors; topdown(strip-annos)> ast-t;
-    introduced-errors   := <diff> (errors-after, errors-before); 
-    introduced-warnings := <diff> (warnings-after, warnings-before) //TODO: when equal? 
-
+  	ast-change-tuples := <zip> (asts, asts-t);
+  	error-warning-tuples := <map(introduced-constraint-errors(collect-constraint-errors))> ast-change-tuples;
+  	(introduced-errors, introduced-warnings) := <unzip; all(flatten-list)> error-warning-tuples
+  	
 /**
  * Collects consistency changes by comparing the semantic errors and warnings  
- * of the (re)analyzed trees before and after transformation
- * @param AST -> (errors, warnings)
- * @type (List(AST), List(AST)) -> (errors, warnings)
- */	
+ * of the (re)analyzed tree before and after transformation
+ * @param collect-constraint-errors: AST -> (errors, warnings)
+ * @type (AST, AST) -> (errors, warnings)
+ */
 introduced-constraint-errors(collect-constraint-errors):
-  (asts, asts-t) -> (introduced-errors, introduced-warnings)
-  where
-    (errors-before, warnings-before) := <map(collect-constraint-errors); unzip; topdown(strip-annos)> asts;
-    (errors-after, warnings-after)   := <map(collect-constraint-errors); unzip; topdown(strip-annos)> asts-t;
+  (ast, ast-t) -> (introduced-errors, introduced-warnings)
+  where 
+    (errors-before, warnings-before) := <collect-constraint-errors; topdown(strip-annos); all(make-set)> ast; 
+    //debug(!"consistency errors before: ");
+    (errors-after, warnings-after)   := <collect-constraint-errors; topdown(strip-annos); all(make-set)> ast-t;
+    //debug(!"consistency errors after : ");
     introduced-errors   := <diff> (errors-after, errors-before); 
     introduced-warnings := <diff> (warnings-after, warnings-before) //TODO: when equal? 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/fetch.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/fetch.str	Mon Jul 18 06:23:09 2011	(r23126)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/fetch.str	Mon Jul 18 06:24:12 2011	(r23127)
@@ -1,69 +1,106 @@
 module lib-refactoring/fetch
 
 imports
-  lib/editor-common.generated
-  
+lib/editor-common.generated
+
 rules //strategies for fetching terms in the ast
 
-    /**
-	 * Annotates AST with reference names (analyse),
-	 * and fetches the annotated selected string in the result AST 
-	 * @type (String, T) -> (String{T}, T)
-	 * @param T -> T (or: List(T) -> T)
-	 */
-  annotated-terms(analyse):
-    (selected, ast) -> (ref-name, ast')
-    where
-      ast' := <analyse <+ (![<id>]; analyse; Hd)> ast;
-      ref-name := <fetch-annotated-term(|<fetch-down(is-string)> selected)> ast'
+/**
+ * fetches an ancestor and its AST position by visiting the ancestors of a term, bottum up
+ * @param matches ancestor term to be fetched
+ * @param AST
+ * @type (Term, List(Int)) -> (Term, List(Int))
+ */ 
+fetch-up-with-position(match|ast):
+  (term, position) -> (term', position')
+  where
+    (term', position') := <fetch-up-with-position(match, fail|ast)> (term, position)
+
+/**
+ * fetches an ancestor and its AST position by visiting the ancestors of a term, bottum up
+ * @param matches ancestor term to be fetched
+ * @param stop criteria
+ * @param AST
+ * @type (Term, List(Int)) -> (Term, List(Int))
+ */  
+fetch-up-with-position(match, stop|ast):
+  (term, position) -> (term', position')
+  where
+    <not(match)> term;
+    <not(stop)> term;
+    parent-tuple := (<parent-at-position(|position)> ast, <init> position);
+    (term', position') := <fetch-up-with-position(match, stop|ast)> parent-tuple
+
+fetch-up-with-position(match, stop|ast):
+  (term, position) -> (term, position)
+  where
+    <match> term
 
+/**
+ * fetches a subterm in a chain of single-argument nodes
+ * @param matches subterm to be fetched
+ * @type Term -> Term
+ */  
+fetch-down(match):
+  term -> term'
+  where
+    term' := <fetch-down-with-position(match); Fst> (term, [])
+
+/**
+ * fetches a subterm and its position in a chain of single-argument nodes
+ * @param matches subterm to be fetched
+ * @type (Term, List(Int)) -> (Term, List(Int))
+ */  
+fetch-down-with-position(match):
+  (term, position) -> (term', position')
+  where 
+    <not(match)> term; 
+    <get-arguments; ?[e]> term; 
+    (term', position') := <fetch-down-with-position(match)> (e, <conc>(position,[0]))
   
-  fetch-annotated-term(|selected):
-  	analysed-ast -> selected-ref
-  	where
-      selected-ref := <
-      	fetch-by-origin(
-      		has-annos; 
-      		strip-annos; 
-      		equal(|selected)|selected)
-      > analysed-ast
+fetch-down-with-position(match):
+  (term, position) -> (term, position)
+  where
+    <match> term
+
   
-  fetch-by-origin(|original-term) =
-    fetch-by-origin(not(fail)|original-term)
- 
-  fetch-by-origin(is-term|original-term):
-    ast -> selected'
-    where
-      selected' := <collect-one(
-        where(is-term);
-        where(origin-equal(|original-term)) 
-      )> ast
- 
-  fetch-up-with-position(match|ast) =
-    fetch-up-with-position(match, fail|ast)
+rules //strategies for fetching terms in the analysed ast
+
+  /**
+ * Annotates AST with reference names (analyse),
+ * and fetches the annotated selected string in the result AST 
+ * @type (String, T) -> (String{T}, T)
+ * @param T -> T (or: List(T) -> T)
+ */
+annotated-terms(analyse):
+  (selected, ast) -> (ref-name, ast')
+  where
+    ast' := <analyse <+ (![<id>]; analyse; Hd)> ast;
+    ref-name := <fetch-annotated-term(|<fetch-down(is-string)> selected)> ast'
+
+
+fetch-annotated-term(|selected):
+  analysed-ast -> selected-ref
+  where
+    selected-ref := <
+      fetch-by-origin(
+        has-annos; 
+        strip-annos; 
+        equal(|selected)|selected)
+    > analysed-ast
+
+fetch-by-origin(|original-term) =
+  fetch-by-origin(not(fail)|original-term)
+
+fetch-by-origin(|original-term):
+  ast -> term
+  where
+    term := <fetch-by-origin(not(fail)|original-term)> ast
  
-  fetch-up-with-position(match, stop|ast):
-    (term, position) -> (term', position')
-    where
-      <not(match)> term;
-      <not(stop)> term;
-      parent-tuple := (<parent-at-position(|position)> ast, <init> position);
-      (term', position') := <fetch-up-with-position(match, stop|ast)> parent-tuple
-
-  fetch-up-with-position(match, stop|ast) =
-    where(
-      ?(term, position);
-      <match> term
-    )
-     
-  fetch-down(match) =
-    !(<id>, []);
-    fetch-down-with-position(match);
-    Fst
-  
-  fetch-down-with-position(match) =
-    ?(term, position); 
-    if <not(match)> term then
-      <get-arguments; ?[e]> term; 
-      <fetch-down-with-position(match)> (e, <conc>(position,[0]))
-    end
\ No newline at end of file
+fetch-by-origin(is-term|original-term):
+  ast -> selected'
+  where
+    selected' := <collect-one(
+      where(is-term);
+      where(origin-equal(|original-term)) 
+    )> ast

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str	Mon Jul 18 06:23:09 2011	(r23126)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/files.str	Mon Jul 18 06:24:12 2011	(r23127)
@@ -1,83 +1,138 @@
 module lib-refactoring/files
 
 imports
-  lib/editor-common.generated
+lib/editor-common.generated
 
-rules //strategies for collecting files
+rules //strategies for collecting files and asts
 
-  get-source-asts(parse|extensions, source-dirs) =
-    get-source-asts(parse, check-extension(|extensions), elem-of(|source-dirs))
-
-  get-source-asts(parse, is-source-file, is-source-dir) =
-    get-source-files(is-source-file, is-source-dir);
-    parse-source-files(parse)
-  
-  parse-source-files(parse) :
-  	filenames -> (asts, parse-failures)
-  	where
-      (asts, parse-failures) := <partition(parse)> filenames
-  	
-  get-source-files(|extensions, source-dirs) =
-    get-source-files(check-extension(|extensions), elem-of(|source-dirs))
+/**
+ * Collects asts by recursively visiting the files in the source dirs, starting at a root dir
+ * Unparseble files are collected as well 
+ * @type String -> (List(AST), List(Strings)) 
+ */
+get-source-asts(|extensions, source-dirs):
+  dir-path -> (asts, parse-failures)
+  where
+    (asts, parse-failures) := 
+      <get-source-asts(check-extension(|extensions), elem-of(|source-dirs))> dir-path
+
+get-source-asts(is-source-file, is-source-dir):
+  dir-path -> (asts, parse-failures)
+  where
+    files := <get-source-files(is-source-file, is-source-dir)> dir-path;
+    (asts, parse-failures) := <parse-source-files> files
+
+/**
+ * @type List(String) -> (List(AST), List(Strings)) 
+ */
+parse-source-files :
+  filenames -> (asts, parse-failures)
+  where
+    (asts, parse-failures) := <partition(parse-file)> filenames
   
-  get-source-files(is-source-file, is-source-dir) =
-    ?dir-path; 
+get-source-files(|extensions, source-dirs):
+  dir-path -> files
+  where
+    files := <get-source-files(check-extension(|extensions), elem-of(|source-dirs))> dir-path
+
+/**
+ * Collects source files by recursively visiting source directories starting at a root dir 
+ * @type String -> List(Strings) 
+ */
+get-source-files(is-source-file, is-source-dir):
+  dir-path -> files
+  where 
     if <where(is-source-dir); isdir> dir-path then
-      readdir; 
-      map(!$[[dir-path]/[<id>]]);  
-      map(
-        where(is-source-file)  <+ 
-        (get-source-files(is-source-file, is-source-dir))
-      ); 
-      flatten-list 
+      files := < 
+        readdir; 
+        map(!$[[dir-path]/[<id>]]);  
+        map(
+          where(is-source-file)  <+ 
+          (get-source-files(is-source-file, is-source-dir))
+        ); 
+        flatten-list> dir-path 
     else
-      ![]
+      files := []
     end
-	
-  //save-all-resources = where(prim("SSL_EXT_saveresources", ""))
-  
-  check-extension(|ext) =
-  	has-extension(|ext)
 
-  check-extension(|extensions) = 
-  	where(
-  	  ext := <get-extension>; 
-  	  <fetch(equal(|ext))> extensions 
-  	)
-  	
-  elem-of(|lst) =
-  	!(<id>, lst); elem
-  	
-  is-spoofax-dir:
-    dir -> dir
-    where 
-  	  spoofax-dirs := ["bin", "editor", "icons", "include", "META-INF", "syntax",
-        "utils", ".cache", ".externalToolBuilders", ".settings", ".svn", "trans"];
-      <map(!$[[<project-path>]/[<id>]]); fetch(equal(|dir))> spoofax-dirs
-
-  get-affected-asts(affected, get-cache-path):
-    fnames -> (affected-asts, unparsable-files)
-    where
-      (collected-asts, unparsable-files) := <partition(get-affected-ast-or-none(affected, get-cache-path))> fnames;
-      affected-asts := <filter(not(equal(|None())))> collected-asts //filter irrelevant
-      
-  get-affected-ast-or-none(affected, get-cache-path) =
-    reject-ast-from-cache(affected, get-cache-path) <+ //cache can not be used to get the AST since origin info is required
-    reject-or-get-ast-from-parsing(affected)
-  
-  reject-ast-from-cache(affected, get-cache-path):
-    fname -> None()
-    where
-  	  cached-ast := <get-cache-path; ReadFromFile> fname;
-  	  <not(affected)> cached-ast
-
-  reject-or-get-ast-from-parsing(affected):
-    fname -> ast
-    where
-  	  parsed-ast := <parse-file> fname;
-  	  if <not(affected)> parsed-ast then
-  	    ast := None()
-  	  else
-  	    ast := parsed-ast
-  	  end
+//save-all-resources = where(prim("SSL_EXT_saveresources", ""))
+
+check-extension(|ext) =
+  has-extension(|ext)
 
+check-extension(|extensions):
+  fname -> fname
+  where
+    ext := <get-extension> fname; 
+    <fetch(equal(|ext))> extensions 
+  
+elem-of(|lst):
+  el -> el
+  where
+    <elem>(el, lst) 
+  
+is-spoofax-dir:
+  dir -> dir
+  where 
+    spoofax-dirs; 
+    fetch(equal(|dir)) 
+
+/**
+ * List of directories that are created for Spoofax projects.
+ * These dirs may be excluded when looking for source files
+ */    
+spoofax-dirs = <map(!$[[<project-path>]/[<id>]])>["bin", "editor", "icons", "include", "META-INF", "syntax",
+  "utils", ".cache", ".externalToolBuilders", ".settings", ".svn", "trans"]
+
+
+rules //strategie + helpers for collecting affected asts, using cache when possible
+
+/**
+ * Collects affected ASTs efficiently by using cache when possible
+ * @param checks if file is a source file
+ * @param checks if dir contains source files
+ * @param checks if AST is affected (semantically or syntactically) by the refactoring
+ * @param filepath -> cachepath 
+ * @type String -> (List(AST), List(Strings)) 
+ */
+get-affected-asts(is-source-file, is-source-dir, is-affected, get-cache-path):
+  dir-path -> (asts, parse-failures)
+  where
+  	fnames := <get-source-files(is-source-file, is-source-dir)> dir-path;
+  	(asts, parse-failures) := <parse-affected-asts(is-affected, get-cache-path)> fnames
+
+/**
+ * Collects affected ASTs efficiently by using cache when possible
+ * @param checks if AST is affected (semantically or syntactically) by the refactoring
+ * @param filepath -> cachepath 
+ * @type List(String) -> (List(AST), List(Strings)) 
+ */
+parse-affected-asts(is-affected, get-cache-path):
+  fnames -> (affected-asts, unparsable-files)
+  where
+    (collected-asts, unparsable-files) := <partition(parse-affected-ast-or-none(is-affected, get-cache-path))> fnames;
+    affected-asts := <filter(not(equal(|None())))> collected-asts //filter irrelevant
+    
+parse-affected-ast-or-none(affected, get-cache-path):
+  fname -> ast-or-none
+  where
+    ast-or-none := <
+      reject-ast-from-cache(affected, get-cache-path) <+ //cache can not be used to get the AST since origin info is required
+      reject-or-get-ast-from-parsing(affected)
+    > fname
+
+reject-ast-from-cache(affected, get-cache-path):
+  fname -> None()
+  where
+    cached-ast := <get-cache-path; ReadFromFile> fname;
+    <not(affected)> cached-ast
+
+reject-or-get-ast-from-parsing(affected):
+  fname -> ast
+  where
+    parsed-ast := <parse-file> fname;
+    if <not(affected)> parsed-ast then
+      ast := None()
+    else
+      ast := parsed-ast
+    end

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/generic-rename.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/generic-rename.str	Mon Jul 18 06:23:09 2011	(r23126)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/generic-rename.str	Mon Jul 18 06:24:12 2011	(r23127)
@@ -5,17 +5,37 @@
   lib-refactoring/namebinding-preservation
   
 rules
-	
+
+/**
+ * Applies renaming oldname{ref} to newname{ref} on a list of annotated ASTs,
+ * and checks behaviour preservation
+ * Binding violations are reported as errors, semantic constraint violations are reported as errors/warnings
+ * @param reannotates names in transformed tree
+ * @param collects constraint errors/warnings in analysed tree
+ * @param old name annotated with its reference name
+ * @param new name
+ * @type List(AST) -> (List(AST,AST'), List(errors), List(warnings))
+ */  
 apply-rename-refactoring(annotate-names, collect-constraint-errors|oldname, newname):
   asts-analyzed -> (ast-changes, errors, warnings)
   where
-  	(ast-changes, errors, warnings) := <apply-rename-refactoring(annotate-names, collect-constraint-errors|[(oldname, newname)])> asts-analyzed
+    (ast-changes, errors, warnings) := 
+      <apply-rename-refactoring(annotate-names, collect-constraint-errors|[(oldname, newname)])> asts-analyzed
 
+/**
+ * Applies multiple renamings oldname{ref} to newname{ref} on a list of annotated ASTs,
+ * and checks behaviour preservation
+ * Binding violations are reported as errors, semantic constraint violations are reported as errors/warnings
+ * @param reannotates names in transformed tree
+ * @param collects constraint errors/warnings in analysed tree
+ * @param list of old-name/new-name tuples  
+ * @type List(AST) -> (List(AST,AST'), List(errors), List(warnings))
+ */  
 apply-rename-refactoring(annotate-names, collect-constraint-errors|renamings):
   asts-analyzed -> (ast-changes, errors, warnings)
   where  
-  	asts-transformed := <topdown(try(apply-rename(|renamings)))> asts-analyzed;
-  	asts-reanalyzed := <annotate-names> asts-transformed;
+    asts-transformed := <topdown(try(apply-rename(|renamings)))> asts-analyzed;
+    asts-reanalyzed := <annotate-names> asts-transformed;
     (constraint-errors, warnings) := 
       <introduced-constraint-errors(collect-constraint-errors)> (asts-analyzed, asts-reanalyzed);
     binding-violations := 
@@ -24,22 +44,26 @@
     ast-changes := <get-changed-asts> (asts-analyzed, asts-transformed)
 
 apply-rename(|renamings):
-  trm -> <apply-rename(|old, new) <+ apply-rename(|tail)> trm
+  oldname -> newname
   where
-    <?[(old, new)|tail]> renamings
+    <?[(old, new)|tail]> renamings;
+    newname := <apply-rename(|old, new) <+ apply-rename(|tail)> oldname
 
 apply-rename(|old, new): 
   old -> new{ref} 
   where 
-  	<?_{ref}> old
+    <?_{ref}> old
 
 is-endangered-name(|renamings):
-  trm -> <is-endangered-name(|old, new) <+ is-endangered-name(|tail)> trm
+  trm -> trm
+  where
+    <?[(old, new)|tail]> renamings;
+    <is-endangered-name(|old, new) <+ is-endangered-name(|tail)> trm  
+  
+is-endangered-name(|old, new):
+  trm -> trm
   where
-    <?[(old, new)|tail]> renamings  
-	
-is-endangered-name(|old, new) =
-  where(strip-annos; (equal(|old{}) <+ equal(|new{})))
+    <strip-annos; (equal(|old{}) <+ equal(|new{}))> trm
 
 get-changed-asts:
   (asts-before, asts-after) -> changed-asts
@@ -48,3 +72,9 @@
       <topdown(strip-annos)> asts-before, 
       <topdown(strip-annos)> asts-after
     )
+
+get-changed-asts:
+  (ast-before, ast-after) -> <get-changed-asts> ([ast-before], [ast-after])
+  where
+  	<not(is-list)> ast-before;
+  	<not(is-list)> ast-after

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/namebinding-preservation.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/namebinding-preservation.str	Mon Jul 18 06:23:09 2011	(r23126)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/lib-refactoring/namebinding-preservation.str	Mon Jul 18 06:24:12 2011	(r23127)
@@ -18,13 +18,23 @@
     violations := <collect-binding-violations(is-name)> (ast-t, ast-t-reanalyzed);
     violation-messages := <map(mk-binding-violation-message)> violations
 
+/**
+ * Collects name binding violation by comparing the name annotations 
+ * in the transformed tree before and after re-analysis.
+ * @example input:
+ * ast-t := <annotate; transform> ast
+ * ast-t-reanalyzed := <annotate; transform; re-annotate> ast
+ * is-name = ?oldname <+ ?newname
+ * @param matches endangered names
+ * @type (Term, Term) -> List((Term, Term)) 
+ */
 collect-binding-violations(is-name):
   (ast-t, ast-t-reanalyzed) -> violations
   where
     old-names  := <collect-all(where(is-name), conc)> ast-t; 
     new-names  := <collect-all(where(is-name), conc)> ast-t-reanalyzed;
     violations := <zip; binding-violations> (old-names, new-names)
-	
+  
 binding-violations: 
   [(x,y)|tl] -> violations
   where
@@ -40,8 +50,10 @@
        partition(is-binding-violation(|x,y))
     > lst
 
-is-binding-violation(|x,y) =
-  where((?(_,y) <+ ?(x,_)); not(?(x,y)))
+is-binding-violation(|x,y):
+  (old-refname, new-refname) -> (old-refname, new-refname)
+  where
+    <(?(_,y) <+ ?(x,_)); not(?(x,y))> (old-refname, new-refname)
 
 mk-binding-violation-message:
-  (name, _) -> (name, <!$[Variabele captures detected for '[<strip-annos> name]']>)
\ No newline at end of file
+  (name, _) -> (name, $[Variabele captures detected for '[<strip-annos> name]'])
\ No newline at end of file

From m.dejonge at tudelft.nl  Mon Jul 18 08:52:12 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 06:52:12 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23128 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego: editor
	trans trans/refactoring trans/refactoring/helpers
Message-ID: <20110718065212.87C3F2B8013@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 06:52:12 2011
New Revision: 23128
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23128&sc=1

Log:
rename refactoring uses analysed AST
bugfixes
isolate common functionality stratego refactorings
refactorings in separate dir: inline, remove-debug, rename

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/multi-file-support.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/semantic-checks.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/remove-debug.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/rename.str
Deleted:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/remove-debug.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/rename.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Mon Jul 18 06:24:12 2011	(r23127)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Mon Jul 18 06:52:12 2011	(r23128)
@@ -11,16 +11,32 @@
   provider : include/stratego_sugar.jar
 
   observer : editor-analyze
+
+
+  builder : "Rename" = rename-builder (meta)
   
-  refactoring Id: "Rename" = 
-  	rename-refactoring (source)
+  builder: "Inline strategy" = inline-builder (meta)
+
+  builder: "Remove debug calls" = remove-debug-builder (meta)
 
   builder : "Show analysed AST" =
-    generate-aterm (realtime) (meta) (openeditor) 
+    generate-aterm (meta)
 
   builder : "Show desugared AST (selection)" =
-    generate-desugared-aterm (realtime) (meta) (openeditor) (source)
+    generate-desugared-aterm (realtime) (openeditor) (source) (meta)
 
   builder : "Show AST (selection)" =
-    generate-aterm (realtime) (meta)(openeditor) (source) 
+    generate-aterm (source) (meta) 
+
+
+refactorings
+  
+  pretty-print: pp-stratego-string
+   
+  refactoring Id: "Rename" = rename-refactoring
+  //input
+  //  identifier : "New Name" = ""
+  	
+  //refactoring: "Remove debug" = remove-debug-refactoring //(preview) //(source)
+
  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str	Mon Jul 18 06:52:12 2011	(r23128)
@@ -0,0 +1,53 @@
+module refactoring/helpers/builders //for testing
+
+imports
+  refactoring/rename
+  refactoring/inline
+  refactoring/remove-debug
+  lib-refactoring/fetch
+  lib-reconstruction/construct-text
+  libstratego-gpp
+  lib-reconstruction/stratego-parenthesize
+  libstrc
+
+rules 
+
+rename-builder:
+  (selected, position, ast, path, project-path) -> ("x.str", result)
+  where 
+  	<oncetd(oldname := <is-string; has-annos>)> selected;
+    refactoring-result := <rename-refactoring> ("NEWNAME", oldname, position, ast, path, project-path);
+    result := <process-refactoring-result> refactoring-result
+
+inline-builder:
+  (selected, position, ast, path, project-path) -> ("x.str", result)
+  where
+    refactoring-result := <inline-refactoring> (None(), selected, position, ast, path, project-path);
+    result := <process-refactoring-result> refactoring-result
+
+remove-debug-builder:
+  (selected, position, ast, path, project-path) -> ("x.str", result)
+  where
+    refactoring-result := <remove-debug-refactoring> (None(), selected, position, ast, path, project-path);
+    result := <process-refactoring-result> refactoring-result
+      
+process-refactoring-result:
+  (ast-changes, fatal-errors, errors, warnings) -> result
+  where
+    result := <
+    	map(!(<Fst>, <Snd; parenthesize-Stratego>)); 
+    	construct-textual-change(pp-stratego-string); 
+    	Hd; 
+    	Third
+    > ast-changes; //textual result of the first changed file
+    <length; debug(!"number of affected files: ")> ast-changes;
+    <debug(!"fatal-errors: ")> fatal-errors;
+    <debug(!"errors: ")> errors;
+    <debug(!"warnings: ")> warnings
+
+/*
+  pp-stratego-sugar = 
+    ast2abox(|[<import-term(include/Stratego-Sugar.generated.pp.af)>,
+               <import-term(lib-reconstruction/Stratego.pp.af)>]);
+    box2text-string(|100)
+*/
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/multi-file-support.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/multi-file-support.str	Mon Jul 18 06:52:12 2011	(r23128)
@@ -0,0 +1,55 @@
+module refactoring/helpers/multi-file-support
+
+imports
+  analysis
+  libstrc
+  desugar
+  sourcedir
+  lib/editor-common.generated
+  lib-refactoring/files
+
+rules //collecting affected asts using cache when possible
+	
+get-affected-stratego-asts(is-affected) =
+      	<get-affected-asts(
+      		has-extension(|"str"); not(string-ends-with(|".generated.str")), //is-source-file
+      		not(is-spoofax-dir) <+ equal(|$[[<project-path>]/trans]), //is-source-dir
+      		is-affected, //is-affected 
+      		get-cache-path
+      	)> <project-path>
+
+get-cache-path: 
+  path -> cache-path
+  where
+    cache-path := <import-cache-path; string-replace(|".str.sig", ".rtree")> path; 
+    <is-newer> (cache-path, path)
+
+
+rules //name analysis for multiple files
+  
+analyze-names:
+  asts -> <analyze-names-in-asts> desugared-asts
+  where
+    rules(CurrentFile := "" ProjectDir  := <project-path>);
+    try(get-source-base-dir);
+    desugared-asts := <map(basic-desugar-top)> asts;
+    <declare-globals> Import("libstratego-lib");
+    <ensure-imports> desugared-asts
+
+ensure-imports = where(collect-all(?Import(_) <+ ?ImportWildcard(_)); map(declare-globals))
+
+re-analyse-names =
+  topdown(strip-annos; try(resugar-Let));
+  analyze-names-in-asts
+
+analyze-names-in-asts:
+  asts -> asts'
+  where 
+    asts' := <
+      map(alltd(where(not(?Import(_) <+ ?ImportWildcard(_))); declare-globals)); //external imports already done 
+      map(declare-bodies-top)
+    > asts
+
+resugar-Let: //TODO: better solution?
+  Rec(x, y) -> Let(x,y) where origin-term; ?Let(_, _)
+

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/semantic-checks.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/semantic-checks.str	Mon Jul 18 06:52:12 2011	(r23128)
@@ -0,0 +1,12 @@
+module refactoring/helpers/semantic-checks //for testing
+
+imports
+  analysis
+  
+rules //semantic constraint check
+
+collect-semantic-issues:
+  ast -> (errors, warnings)
+  where 
+    errors := <collect-all(global-constraint-error + constraint-error, conc)> ast;
+    warnings := <collect-all(constraint-warning, conc)> ast

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str	Mon Jul 18 06:52:12 2011	(r23128)
@@ -0,0 +1,124 @@
+module refactoring/inline
+
+imports
+  libstrc
+
+rules //inline refactoring
+
+inline-refactoring:
+  (_, selected, position, ast, path, project-path) -> 
+  (ast-changes, fatal-errors, [], warnings)
+    where
+      declaration := <?(<?SDefT(_, _, _, _)>, _) <+ declaration-of-call> (selected, ast);
+      warnings := <warnings-multiple-declarations> (declaration, ast);
+      fatal-errors := <errors-recursion> declaration;
+      if <?[]> fatal-errors then
+        ast-changes := [(ast, <inline> (declaration, ast))]
+      else
+        ast-changes := []
+    end
+    
+declaration-of-call:
+  (CallT(SVar(name{ref}), _, _), ast) -> declaration
+  where
+    <oncetd(declaration := <?SDefT(name{ref}, _, _, _)>)> ast
+
+errors-recursion:
+  decl at SDefT(name{ref}, _, _, _) -> errors
+  where
+    if <is-recursive-declaration> decl then
+      errors := [(decl, "strategy declaration contains recursive call")]
+    else
+      errors := []
+    end
+
+is-recursive-declaration:
+  decl at SDefT(name{ref}, _, _, _) -> decl
+  where
+    <oncetd(?Rec(_, _) <+ ?SVar(name{ref}))> decl
+
+warnings-multiple-declarations:
+  (SDefT(name{ref}, _, _, _), ast) -> warnings
+  where
+    all-defs := <collect-all(?SDefT(name{ref}, _, _, _))> ast;
+    if <?[_,_|_]> all-defs then
+      warnings := <map(!(<id>, "multiple declarations found"))> all-defs
+    else
+      warnings := []
+    end
+    
+inline:
+  (decl at SDefT(name{ref}, _, _, _), ast) -> ast-inlined
+  where
+    ast-inlined := <
+      topdown(try(inline-call(|decl)));
+      delete-elements(?decl)
+    > ast 
+  
+inline-call(|decl):
+  CallT(SVar(name{ref}), svalues, tvalues) -> inlined-body
+  where
+    <?SDefT(name{ref}, svars, tvars, body)> decl;
+    s-uses := <map(svardec-to-svaruse)> svars;
+    t-uses := <map(tvardec-to-tvaruse)> tvars;
+    inlined-body := <
+      substitute-multiple(|s-uses, svalues);
+      substitute-multiple(|t-uses, tvalues);
+      try(rule-to-strategy)
+    > body
+    
+rule-to-strategy:
+  Rule(lhs, rhs, []) -> Seq(Match(lhs), Build(rhs))
+
+rule-to-strategy:
+  Rule(lhs, rhs, cond) -> Seq(Match(lhs), Seq(Where(cond), Build(rhs)))
+  where
+    <not(is-list)> cond
+
+rule-to-strategy:
+  Rule(lhs, rhs, clauses) -> Seq(Match(lhs), Seq(<clauses-to-strategy> clauses, Build(rhs)))
+
+clauses-to-strategy:
+  [WhereClause(s)] -> Where(s)
+
+clauses-to-strategy:
+  [WithClause(s)] -> With(s)
+
+clauses-to-strategy:
+  [WhereClause(s)|clauses] -> Seq(Where(s), <clauses-to-strategy> clauses)
+
+clauses-to-strategy:
+  [WithClause(s)|clauses] -> Seq(With(s), <clauses-to-strategy> clauses)
+
+svardec-to-svaruse:
+  VarDec(name{ref}, _) -> CallT(SVar(name{ref}), [], [])
+
+tvardec-to-tvaruse:
+  VarDec(name{ref}, _) -> Var(name{ref})
+
+substitute-multiple(|vars, values):
+  body -> new-body
+  where
+    <?[hvar|tl-vars]> vars;
+    <?[hvalue|tl-values]> values;
+    new-body := <
+      substitute-single(|hvar, hvalue);
+      substitute-multiple(|tl-vars, tl-values)
+    > body
+
+substitute-multiple(|vars, values):
+  body -> body
+  where
+    <?[]> vars;
+    <?[]> values
+
+substitute-single(|var, value):
+  body -> new-body
+  where
+    new-body := <topdown(try(?var; !value))> body
+
+delete-elements(is-deletion-elem):
+  ast -> ast-t
+  where
+    ast-t := <topdown(try(filter(not(is-deletion-elem))))> ast
+  
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/remove-debug.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/remove-debug.str	Mon Jul 18 06:52:12 2011	(r23128)
@@ -0,0 +1,54 @@
+module refactoring/remove-debug
+
+imports
+  libstrc
+
+rules //remove debug refactoring
+
+remove-debug-refactoring:
+  (_, selected, position, ast, path, project-path) -> 
+  (ast-changes, [], <conc> (pre-condition-errors, semantic-errors), warnings)
+  where 
+    ast-changes := [(selected, <bottomup(try(remove-debug))> selected)];
+    pre-condition-errors := [];
+    semantic-errors := [];
+    warnings := []
+
+
+rules //remove debug rules
+
+remove-debug:
+  Seq(s, <debug-call>) -> s
+  
+remove-debug:
+  Seq(<debug-call>, s) -> s
+  
+remove-debug:
+  GuardedLChoice(<debug-call>, s1, s2) -> s1
+
+remove-debug:
+  GuardedLChoice(s1, <debug-call>, s2) -> LChoice(s1, s2)
+
+remove-debug: //TODO: preference because more specific
+  GuardedLChoice(Where(s1), s2, <debug-call>) -> IfThen(s1, s2)
+
+remove-debug:
+  GuardedLChoice(s1, s2, <debug-call>) -> GuardedLChoice(s1, s2, Id())
+
+
+//TODO: support some common patterns
+//<debug> term ... result not used ???
+
+rules //debug calls
+
+debug-call =
+  where(?Where(BA(<debug-call>, Var(_))))
+
+debug-call =
+  where(?Where(BA(<debug-call>, NoAnnoList(_))))
+
+debug-call =
+  ?CallT(SVar("debug"{_}), _, [])
+
+debug-call =
+  ?Where(CallT(SVar("debug"{_}), _, []))
\ No newline at end of file

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/rename.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/rename.str	Mon Jul 18 06:52:12 2011	(r23128)
@@ -0,0 +1,94 @@
+module refactoring/rename
+
+imports
+  analysis
+  libstrc
+  lib/editor-common.generated
+  lib-refactoring/generic-rename
+  lib-refactoring/files
+  refactoring/helpers/multi-file-support
+  refactoring/helpers/semantic-checks
+
+rules //rename refactoring
+
+rename-refactoring:
+  (newname, name{ref}, position, ast-analyzed, path, project-path) -> 
+  (ast-changes, [], <make-set> errors, <make-set> warnings)
+  where 
+    renamings := <get-dependend-renamings> (name{ref}, newname);
+    (asts, parse-errors) := <get-asts-affected-by-renaming>(ref, renamings, ast-analyzed);
+    (ast-changes, semantic-errors, warnings) := <apply-rename-refactoring(
+      re-analyse-names, 
+      collect-semantic-issues |
+      renamings
+    )> asts;
+    ext-decl-errors := <external-declaration-errors> ref;
+    errors := <concat>[parse-errors, ext-decl-errors, semantic-errors]
+    //TODO Spoofax, schedule analysis affected files: analysis must be redone in case refactoring is canceled
+    
+rules //dependent names
+  
+get-dependend-renamings:
+  r@(refname, newname) -> renamings
+  where
+    <?_{ref}> refname;
+    if <Declaration; ?RDecT(oldname, _, _)> ref then 
+      old-names := <prefixes-dynrules; map(!$[[<id>]-[oldname]]{ref})>;
+      new-names := <prefixes-dynrules; map(!$[[<id>]-[newname]]{ref})>;
+      renamings := [(oldname{ref}, newname)|<zip>(old-names, new-names)]
+    else
+      renamings := [r]
+    end
+
+prefixes-dynrules =
+  !["once", "bagof", "bigbagof", "all-keys", "innermost-scope", "break", "break-bp", 
+    "continue", "chain", "bigchain", "new", "undefine", "aux", "reverse-bagof", "innermost-scope",
+    "break-to-label","continue-to-label", "throw", "fold", "bigfold"]
+
+rules //collect asts that are possibly affected by renaming, efficient implementation using cache
+
+get-asts-affected-by-renaming:
+  (ref-anno, renamings, ast) -> (analysed-asts, parse-errors)
+  where
+    if <is-global-ref> ref-anno then //files are only collected if the selected var is global 
+      (affected-asts, unparsable-files) := 
+      	<get-affected-stratego-asts(oncetd(is-endangered-name(|renamings)))>;
+      analysed-asts := <analyze-names> affected-asts 
+    else
+      analysed-asts := [ast];
+      unparsable-files := []
+    end;
+    parse-errors := <map(!$[parsing failed for: '[<id>]'])> unparsable-files
+    
+is-global-ref =
+  where(?ref; <Declaration; signature-of; DeclareCookie; equal(|ref)> ref)
+
+
+rules //precondition checks: do not rename an external declaration
+
+external-declaration-errors:
+  ref -> <conc> (generated-file-errors, external-lib-errors)
+  where 
+    files := <get-source-files(|"str", <dirs-with-generated-files>)> <project-path>; 
+    generated-file-errors := <filter(declared-in-generated-file(|ref))> files; 
+    external-lib-errors := <![<declared-in-external-lib>] <+ ![]> ref
+
+declared-in-generated-file(|ref):
+  fname -> $[Name in [<base-filename>] can not be edited]
+  where
+    not(is-editable);
+    (((import-cache-path <+ get-cache-path); ReadFromFile) <+ parse-file);
+    declare-globals-top;  
+    oncetd(?_{ref})
+
+declared-in-external-lib:
+  ref -> $[External declaration can not be edited]
+  where
+    <Declaration; get-constructor; string-starts-with(|"Ext")> ref
+    
+dirs-with-generated-files =
+	![$[[<project-path>]], $[[<project-path>]/include], $[[<project-path>]/lib], $[[<project-path>]/lib-refactoring]]
+
+is-editable = 
+  not(string-ends-with(|".generated.str"));
+  not(dirname; string-ends-with(|"include"))

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Mon Jul 18 06:24:12 2011	(r23127)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Mon Jul 18 06:52:12 2011	(r23128)
@@ -8,14 +8,15 @@
   analysis
   desugar
   lib/editor-common.generated
-  rename
+  refactoring/rename
+  refactoring/helpers/builders
 
 strategies
 
 rules
 
   editor-analyze:
-    (ast, path, project-path) -> (/*ast',*/ errors, warnings, [])
+    (ast, path, project-path) -> (ast', errors, warnings, [])
     with
       // Ensure all dynamic rules are properly scoped
       try(dr-scope-all-end);

From m.dejonge at tudelft.nl  Mon Jul 18 08:57:36 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 06:57:36 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23129 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers
Message-ID: <20110718065736.238A8CC06B@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 06:57:35 2011
New Revision: 23129
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23129&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str	Mon Jul 18 06:52:12 2011	(r23128)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str	Mon Jul 18 06:57:35 2011	(r23129)
@@ -5,9 +5,9 @@
   refactoring/inline
   refactoring/remove-debug
   lib-refactoring/fetch
-  lib-reconstruction/construct-text
+  //lib-reconstruction/construct-text
   libstratego-gpp
-  lib-reconstruction/stratego-parenthesize
+  //lib-reconstruction/stratego-parenthesize
   libstrc
 
 rules 
@@ -36,7 +36,8 @@
   where
     result := <
     	map(!(<Fst>, <Snd; parenthesize-Stratego>)); 
-    	construct-textual-change(pp-stratego-string); 
+    	pp-stratego-string;
+    	//construct-textual-change(pp-stratego-string); 
     	Hd; 
     	Third
     > ast-changes; //textual result of the first changed file

From tobivollebregt at gmail.com  Mon Jul 18 10:53:19 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 18 Jul 2011 08:53:19 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23130 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans:
	codegen/sdf context context/sdf
Message-ID: <20110718085319.34E9F2B803B@mx2.tudelft.nl>

Author: tvo
Date: Mon Jul 18 08:53:18 2011
New Revision: 23130
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23130&sc=1

Log:
TemplateLang: fix Sort.Cons references in priority specifications

In particular, use package scope instead of module scope to make them useful

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-symbols.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Mon Jul 18 06:57:35 2011	(r23129)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/sdf/to-sdf.str	Mon Jul 18 08:53:18 2011	(r23130)
@@ -224,7 +224,7 @@
   SortCons-to-prod:
     SortCons(sort, cons) -> t
     with t := <( Declaration <+ debug(!"Undeclared SortCons"); <debug(!"all-keys-Declaration: ")> <all-keys-Declaration>; fail )
-               ; try(template-production-to-sdf-no-attrs)> (<to-scoped-symbol>sort, <to-scoped-symbol>cons)
+               ; try(template-production-to-sdf-no-attrs)> (<to-package-scoped-symbol>sort, <to-package-scoped-symbol>cons)
 
   // Hook desugar-sdf-redux to templatelang-desugar-sdf
   desugar-sdf-redux = templatelang-desugar-sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-symbols.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-symbols.str	Mon Jul 18 06:57:35 2011	(r23129)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/resolve-symbols.str	Mon Jul 18 08:53:18 2011	(r23130)
@@ -1,80 +1,89 @@
 module context/resolve-symbols
 
 imports
-	include/SpoofaxLang 
+	include/SpoofaxLang
 	lib/editor-common.generated
-imports 
+imports
 	context/signatures
 	context/store-imports
 	context/scope-tree
 	context/resolve-declarations
 	normalize/signatures
-	codegen/compile 
-imports 	 
+	codegen/compile
+imports
 	common
-	config 
-	utils/annotations  
+	config
+	utils/annotations
 	utils/path
 	utils/debug
 
-rules 
-	
-	get_internal_module_qtname = 
+rules
+
+	get_internal_module_qtname =
 		?package-qt-name;
 		where(!package-qt-name => Package(QName(package-name-part*)));
 		!Module(QName([package-name-part*| [<internal_module_name_string>]]))
 
 	get_internal_module_qtname(|package-qt-name)  = <get_internal_module_qtname>package-qt-name
-	
-	
-rules 
-	
+
+
+rules
+
 	get-module-abs-filepath : Module(qname) -> result
-	where 
-			result := <DeclaredModule>qname 
+	where
+			result := <DeclaredModule>qname
 			<+
 			<debug-symboltable>$[SymbolTable| Failed to retrieve module's abs file path.];fail
-			 
+
 	get-package-abs-filepath : Module(qname) -> result
-	where 
-			result := <DeclaredPackage>qname 
+	where
+			result := <DeclaredPackage>qname
 			<+
 			<debug-symboltable>$[SymbolTable| Failed to retrieve package's abs file path.];fail
-	
-rules	
-	// Add scopes for the symbol 
-	
+
+rules
+	// Add scopes for the symbol
+
 	to-global-symbol =
 		!(Globals(), <id>)
 	<+
 		<debug> $[Type| FAIL | Failed to convert it to Global symbol. <symbol> [<pp-aterm-forced>]]
-		;fail	
-	
+		;fail
+
 	to-intenal-scoped-symbol =
 		!(<GetEnclosingPackageName> , <GetEnclosingPackageName;get_internal_module_qtname> , <id>)
 		<+
-		to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global 
+		to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global
 		<+
-		<debug> $[Type| FAIL | Failed to convert it to scoped symbol. 
+		<debug> $[Type| FAIL | Failed to convert it to scoped symbol.
 										<enclosing package> [<pp-aterm><GetEnclosingPackageName>] <enclosing module>[<pp-aterm-forced><GetEnclosingModuleName>] <symbol> [<pp-aterm-forced>]]
-		;fail	
-	 	
-		
-	to-scoped-symbol =  
+		;fail
+
+
+	to-scoped-symbol =
 		!(<GetEnclosingPackageName> , <GetEnclosingModuleName> , <id>)
 	<+
-		to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global 
+		to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global
 	<+
-		<debug> $[Type| FAIL | Failed to convert it to scoped symbol. 
+		<debug> $[Type| FAIL | Failed to convert it to scoped symbol.
 										<enclosing package> [<pp-aterm><GetEnclosingPackageName>] <enclosing module>[<pp-aterm-forced><GetEnclosingModuleName>] <symbol> [<pp-aterm-forced>]]
-		;fail	
-		 
-	// Strip Scope and retuns the symbol 
+		;fail
+
+  to-package-scoped-symbol =
+    !(<GetEnclosingPackageName> , <id>)
+  <+
+    to-global-symbol //if enclosing scope is not declared, then considering the namespace of the Symbol to be global
+  <+
+    <debug> $[Type| FAIL | Failed to convert it to scoped symbol.
+                    <enclosing package> [<pp-aterm><GetEnclosingPackageName>] <symbol> [<pp-aterm-forced>]]
+    ;fail
+
+	// Strip Scope and retuns the symbol
 	remove-scope-from-symbol = ?(_,_, <id>) + ?(Globals(), <id>)
 
 rules
-	//resolving symbol in global scope and returing list of result	
-	resolve-symbol-global-declarations(key-resolver, value-resolver)= 
+	//resolving symbol in global scope and returing list of result
+	resolve-symbol-global-declarations(key-resolver, value-resolver)=
 		?symbol; // NOTE : symbol does not contain any scope information
 		where(not(?(_,_) <+ ?(_,_,_)));
 		// Looking for the symbol in the Globals() Scope
@@ -85,69 +94,69 @@
 	<+
 		<debug-symboltable>$[SymbolTable| FAIL| Failed to resolve following symbol [<pp-aterm>] in Global Scope];
 		fail
-	
+
 	//resolving symbol in global scope only and ensuring result is unique
 	resolve-symbol-unique-declaration(key-resolver, value-resolver)=
 		where(?( Globals(), symbol ))
-		;<resolve-symbol-global-declarations(key-resolver, value-resolver)> symbol	
-		;ensure-is-unique // verify as resolved unique declaration 
-	<+	
+		;<resolve-symbol-global-declarations(key-resolver, value-resolver)> symbol
+		;ensure-is-unique // verify as resolved unique declaration
+	<+
 		<debug-symboltable>$[SymbolTable| FAIL| Failed to retrieve uniqe declaration in global scope."];fail
-	
+
 	// Resolving unique declaration of symbol in the scope (current-package, current-module)
-	// Symbol is resolved using the specified strategy parameter, i.e. using key-resolved and value-resolved  
+	// Symbol is resolved using the specified strategy parameter, i.e. using key-resolved and value-resolved
 	resolve-symbol-unique-declaration(key-resolver, value-resolver)=
 		?( current-package , current-module, symbol )
-		;<resolve-symbol-unique-declaration(key-resolver, value-resolver|current-package , current-module)>symbol	
-	
-	
-	// resolving unique declaration - generic implementation   
+		;<resolve-symbol-unique-declaration(key-resolver, value-resolver|current-package , current-module)>symbol
+
+
+	// resolving unique declaration - generic implementation
 	resolve-symbol-unique-declaration(key-resolver, value-resolver|current-package , current-module)=
 		resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)
-		;ensure-is-unique // verify as resolved unique declaration 
-	<+	
+		;ensure-is-unique // verify as resolved unique declaration
+	<+
 		<debug-symboltable>$[SymbolTable| Failed to retrieve unique declaration.];fail
-	
-	// resolving declaration in global scope 
-	resolve-symbol-declarations(key-resolver, value-resolver) = 
+
+	// resolving declaration in global scope
+	resolve-symbol-declarations(key-resolver, value-resolver) =
 		?( Globals(), symbol )
 		;<resolve-symbol-global-declarations(key-resolver, value-resolver)> symbol
-	
+
 	// resolving declartion in the scope mentioned
-	resolve-symbol-declarations(key-resolver, value-resolver) = 
+	resolve-symbol-declarations(key-resolver, value-resolver) =
 		?( current-package , current-module,symbol )
 		;<resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)> symbol
 
-rules	
-	// resolving declarations incrementally	
-	resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)= 
+rules
+	// resolving declarations incrementally
+	resolve-symbol-declarations(key-resolver, value-resolver|current-package , current-module)=
 		?symbol; // NOTE : symbol does not contain any scope information
-		(	
+		(
 				// Looking for the symbol in the current Module Scope
 				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Current Scope [<pp-aterm>(current-package , current-module)].]);
-				<value-resolver>(current-package , current-module, symbol); 
+				<value-resolver>(current-package , current-module, symbol);
 				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Current Scope. Result: [<pp-aterm>]]);
 				is-not-empty-list
 			<+
 				// Looking for the symbol in the parent enclosing scope => Package Scope
 				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Enclosing Package Scope ([<pp-aterm>current-package],_)  or in Global Scope]);
 				<resolve-symbol-declarations-internal(
-					key-resolver, 
-					value-resolver, 
+					key-resolver,
+					value-resolver,
 					?(current-package , _ , symbol) + ?(Globals() , symbol) // NOTE : Currently we combined Globals() + Enclosing package search in ONE loopup.
 				)>symbol;
-				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Enclosing Package + Global Scope. Result: [<pp-aterm>]]);				 	 
+				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Enclosing Package + Global Scope. Result: [<pp-aterm>]]);
 		 	 	is-not-empty-list
 			<+
 				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Imported Scopes.]);
-				where( 
-					// current package and module's untyped QName to create the scope 
+				where(
+					// current package and module's untyped QName to create the scope
 					!current-package => Package(untyped-package-qname);
 					!current-module  => Module(untyped-module-qname)
-					// getting all the using packages 
+					// getting all the using packages
 					;<get-all-usings>( untyped-package-qname , untyped-module-qname) => imported-typedqname*
 					;<debug-symboltable>$[SymbolResolver| Getting List of dependening-on packages/modules : [<pp-aterm>]]
-					
+
 				);
 				<resolve-imported-symbol-declarations(key-resolver  , value-resolver)>(symbol, imported-typedqname*);
 				where(<debug-symboltable>$[SymbolResolver| Resoving [<pp-aterm>symbol] in Imported Scopes. Result: [<pp-aterm>]]);
@@ -158,8 +167,8 @@
 		)
 
 rules
-	//TODO : refactor 
-	
+	//TODO : refactor
+
 	resolve-imported-symbol-declarations'(key-resolver,value-resolver , eq): scopes* -> resolved*
 	where
 		if !scopes* => [] then
@@ -167,21 +176,21 @@
 		else
 			!scopes* => [currentscope|rest*]
 		end
-	where 
-			if !currentscope => Package(_) then 
+	where
+			if !currentscope => Package(_) then
 				internal_module_qname := <get_internal_module_qtname>currentscope;
 				resolved* := <is-not-empty-list>
 												<resolve-symbol-declarations-internal(
-														key-resolver, 
+														key-resolver,
 														value-resolver,
-														( 
+														(
 															//Filter scopes to search in the imported scopes.
-															//In addition, skipping package's intenral scope. 
+															//In addition, skipping package's intenral scope.
 															?(currentscope, _ , _) ; not(?(currentscope, internal_module_qname , _));eq
 														)
 												)>
 			else
-				if !currentscope => Module(_) then 
+				if !currentscope => Module(_) then
 					resolved* := <is-not-empty-list><resolve-symbol-declarations-internal(key-resolver, value-resolver,?(_ , currentscope , symbol))>symbol
 				end
 			end;
@@ -189,33 +198,33 @@
 		<+
 			resolved* := <resolve-imported-symbol-declarations(key-resolver  , value-resolver)> rest*
 
-							 	
+
 
 	// Resolving Symbol in the imported scopes
 	resolve-imported-symbol-declarations(key-resolver,value-resolver):
 		(symbol, scopes*) -> resolved*
-		where 
-			if !scopes* => [] then 
+		where
+			if !scopes* => [] then
 				<debug-symboltable> $[SymbolTable| FAIL| Failed to resolve following symbol: [<pp-aterm>symbol] as there is no scope specified. ];
 				fail
 			else
-				!scopes* => [currentscope|rest*]	
+				!scopes* => [currentscope|rest*]
 			end
-		where 
-			if !currentscope => Package(_) then 
+		where
+			if !currentscope => Package(_) then
 				internal_module_qname := <get_internal_module_qtname>currentscope;
 				resolved* := <is-not-empty-list>
 												<resolve-symbol-declarations-internal(
-														key-resolver, 
+														key-resolver,
 														value-resolver,
-														( 
+														(
 															//Filter scopes to search in the imported scopes.
-															//In addition, skipping package's intenral scope. 
+															//In addition, skipping package's intenral scope.
 															?(currentscope, _ , symbol) ; not(?(currentscope, internal_module_qname , symbol))
 														)
 												)>symbol
 			else
-				if !currentscope => Module(_) then 
+				if !currentscope => Module(_) then
 					resolved* := <is-not-empty-list><resolve-symbol-declarations-internal(key-resolver, value-resolver,?(_ , currentscope , symbol))>symbol
 				end
 			end;
@@ -224,13 +233,13 @@
 			resolved* := <resolve-imported-symbol-declarations(key-resolver  , value-resolver)> ( symbol, rest*)
 
 rules
-	
+
 	// Internal strategy to resolve symbol using a matcher
 	resolve-symbol-declarations-internal(key-resolver,value-resolver,namespace-filter) =
 		key-resolver;
 		filter(namespace-filter);
 		mapconcat(value-resolver)
-	  
-	<+     			 
+
+	<+
 		<debug-symboltable>$[SymbolTable| FAIL | resolve-symbol-declarations | Failed to resolve following symbol [<pp-aterm>]]
-		;fail
\ No newline at end of file
+		;fail

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Mon Jul 18 06:57:35 2011	(r23129)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/sdf/declare.str	Mon Jul 18 08:53:18 2011	(r23130)
@@ -94,10 +94,11 @@
       <topdown(try(store-namespace-def))> lhs
     with
       if <fetch-cons-name> attrs => cons then
-        qualified-cons-name := <to-scoped-symbol> cons;
+        package-qualified-sort-name := <to-package-scoped-symbol> x;
+        package-qualified-cons-name := <to-package-scoped-symbol> cons;
         rules(
         	// Needed for Sort.Cons references to the production.
-        	Declaration: (qualified-sort-name, qualified-cons-name) -> prod
+        	Declaration: (package-qualified-sort-name, package-qualified-cons-name) -> prod
         )
       end
     with

From m.dejonge at tudelft.nl  Mon Jul 18 11:36:05 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 09:36:05 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23131 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers
Message-ID: <20110718093605.0BED6108C065@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 09:36:04 2011
New Revision: 23131
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23131&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str	Mon Jul 18 08:53:18 2011	(r23130)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str	Mon Jul 18 09:36:04 2011	(r23131)
@@ -35,11 +35,13 @@
   (ast-changes, fatal-errors, errors, warnings) -> result
   where
     result := <
-    	map(!(<Fst>, <Snd; parenthesize-Stratego>)); 
-    	pp-stratego-string;
+    	Hd;
+    	Snd; 
+    	pp-stratego-string
+    	//map(!(<Fst>, <Snd; parenthesize-Stratego>)); 
     	//construct-textual-change(pp-stratego-string); 
-    	Hd; 
-    	Third
+    	//Hd; 
+    	//Third
     > ast-changes; //textual result of the first changed file
     <length; debug(!"number of affected files: ")> ast-changes;
     <debug(!"fatal-errors: ")> fatal-errors;
@@ -51,4 +53,9 @@
     ast2abox(|[<import-term(include/Stratego-Sugar.generated.pp.af)>,
                <import-term(lib-reconstruction/Stratego.pp.af)>]);
     box2text-string(|100)
-*/
\ No newline at end of file
+*/
+
+pp-builder:
+  (selected, position, ast, path, project-path) -> ("x.str", result)
+  where 
+    result := <debug(!"pp: "); pp-stratego-string> selected

From tobivollebregt at gmail.com  Mon Jul 18 12:04:17 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 18 Jul 2011 10:04:17 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23132 -
	spoofax-imp/trunk/org.strategoxt.imp.generator
Message-ID: <20110718100417.2C598108C057@mx3.tudelft.nl>

Author: tvo
Date: Mon Jul 18 10:04:16 2011
New Revision: 23132
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23132&sc=1

Log:
These options are already in strj-jar (and -source may not be specified twice)

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Mon Jul 18 09:36:04 2011	(r23131)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/Makefile	Mon Jul 18 10:04:16 2011	(r23132)
@@ -1,139 +1,139 @@
-# HACK: Assume nix installation in Makefile
-
-STRATEGOXT ?= ${HOME}/.nix-profile
-JAVA_FRONT ?= ${HOME}/.nix-profile
-SDF        ?= ${HOME}/.nix-profile
-
-export PKG_CONFIG_PATH += ${STRATEGOXT}/lib/pkgconfig:${JAVA_FRONT}/lib/pkgconfig:${SDF}/lib/pkgconfig
-
-STRS     = $(wildcard src/*.str) \
-           $(wildcard src/sdf2imp/*.str) \
-           $(wildcard src/sdf2imp/lib/*.str) \
-           $(wildcard src/sdf2imp/project/*.str) \
-           $(wildcard src/sdf2imp/parser/*.str) \
-           $(wildcard src/sdf2imp/util/*.str) \
-           $(wildcard src/sdf2imp/services/*.str)           
-
-RTREES = $(STRS:.str=.rtree)
-
-SDFS     = $(wildcard src/syntax/*.sdf)
-
-SYNTAX   = src/syntax/EditorService.tbl src/syntax/EditorService.pp src/syntax/EditorService-pretty.pp.af src/syntax/EditorService.str src/syntax/Stratego-Java-EditorService.tbl
-
-STRCFLAGS = \
-    -la stratego-xtc \
-    -la stratego-lib \
-    -la stratego-gpp \
-    -la stratego-tool-doc \
-    -la stratego-sglr \
-    -la stratego-rtg \
-    -la stratego-sdf \
-    -la stratego-aterm \
-    -I ${JAVA_FRONT}/share/java-front \
-    -I ${STRATEGOXT}/share/gpp \
-    -I ${STRATEGOXT}/share/xml-front \
-    -I ${STRATEGOXT}/share/sdf-tools \
-    -I ${STRATEGOXT}/share/stratego-front \
-    -I ${STRATEGOXT}/share/xtc \
-    -I ${SDF}/share/pgen \
-    `pkg-config --variable=strcxtcflags strategoxt`
-
-export JAVACFLAGS=-J-Xmx1024m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp strategoxt.jar -source 5 -nowarn
-JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
-STRJ=`if which strj >/dev/null; then echo strj; elif [ -e strategoxt.jar ]; then echo java -server -Xss4m -jar strategoxt.jar; else echo Please install strj or put strategoxt.jar into the current directory. >&2; exit 1; fi`
-
-SDFINCLUDES = \
-    -Idef ${JAVA_FRONT}/share/java-front/Stratego-Java-EBlock.def
-
-# I don't care much for nullary constructor warnings unless it's about lowercase ones, such as 'start'
-STRCSTFU=2>&1 | grep -vE 'warning ] Nullary constructor .*[A-Z]|warning ] multiple external| \[ExtSDef\(|stratego-trm|module-name-checked|module-name-checked"' \
-                 >&2
-
-STRINCLUDES = \
-	-I ${STRATEGOXT}/share/sdf/xml-front \
-	-I ${STRATEGOXT}/share/sdf/gpp \
-	-I ${STRATEGOXT}/share/sdf/stratego-regular \
-	-I ${STRATEGOXT}/share/sdf/sdf-front \
-	-I ${JAVA_FRONT}/share/java-front \
-	-I src/syntax \
-	`pkg-config --variable=strcflags java-front`
-
-all : sdf2imp java jar syntax
-
-java : src-gen/org/strategoxt/imp/generator/sdf2imp.java
-
-jar : lib/sdf2imp.jar
-
-check : sdf2imp syntax \
-        test/EditorService.runtestsuite \
-        test/test-editor-service.runsh \
-        test/test-stratego-java.runsh \
-        test/test-foo.runsh
-
-sdf2imp : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
-	strc -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
-	     -la ${JAVA_FRONT}/lib/libjava-front.la
-	rm -f sdf2imp.c sdf2imp.lo sdf2imp.o
-
-src-gen/org/strategoxt/imp/generator/sdf2imp.java : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
-	$(STRJ) -clean -O 3 -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
-	        -la java-front --library -p org.strategoxt.imp.generator
-
-lib/sdf2imp.jar : src-gen/org/strategoxt/imp/generator/sdf2imp.java 
-	strj-jar -i $< -o $@ -cp src-gen
-
-syntax : $(SYNTAX)
-
-clean :
-	rm -f src/include/sdf2imp.ctree sdf2imp $(RTREES) $(wildcard src/syntax/*.tbl) $(wildcard src/syntax/*.def) *.dep include/*.dep src-gen/org/strategoxt/imp/generator/sdf2imp.java src-gen/org/strategoxt/imp/generator/sdf2imp.class
-	
-# files:
-
-% : %.str $(STRS)
-
-%.rtree : %.str $(SYNTAX)
-	@parse-stratego -i $< -o $@ $(STRINCLUDES)
-
-src/include/sdf2imp.ctree : sdf2imp
-	strc -F --library -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCSTFU)
-
-%.pp : %.def
-	ppgen -i $< -o $@
-
-%.pp.af : %.pp
-	parse-pp-table -i $< -o $@
-
-%.str : %.rtg
-	rtg2sig -i $< -o $@
-
-%.rtg : %.def
-	sdf2rtg -i $< -o $@ -m `basename $*` --ignore-missing-cons
-
-%.runtestsuite : %.testsuite
-	parse-unit --no-heuristic-filters -i $< -p src/syntax/EditorService.tbl
-
-%.runsh : %.sh
-	$<
-
-src/syntax/EditorService.def : src/syntax/EditorService.sdf $(SDFS)
-	pack-sdf -i $< -o $@ -I src/syntax
-
-src/syntax/EditorService.tbl : src/syntax/EditorService.def
-	sdf2table -m EditorService -i $< -o $@
-
-src/syntax/Stratego-Java-EditorService.def : src/syntax/Stratego-Java-EditorService.sdf $(SDFS)
-	pack-sdf -i $< -o $@ -I src/syntax $(SDFINCLUDES)
-
-src/syntax/Stratego-Java-EditorService.tbl : src/syntax/Stratego-Java-EditorService.def
-	sdf2table -m Stratego-Java-EditorService -i $< -o $@
-
-# We need a better solution for this
-src/include/rtg.tbl : ${STRATEGOXT}/share/sdf/stratego-regular/rtg.tbl
-	[ -e src/include ] || mkdir src/include
-	baf2trm  -i $< -o $@ # cp $< $@
-
-new-libs :
-	cp $(BRIDGE)/permissive-grammars/trans/make-permissive/bin/*.jar lib
-	cp $(ASTER)/trans/java/aster.jar lib
-
-#	make jar -C $(BRIDGE)/permissive-grammars/trans/make-permissive
+# HACK: Assume nix installation in Makefile
+
+STRATEGOXT ?= ${HOME}/.nix-profile
+JAVA_FRONT ?= ${HOME}/.nix-profile
+SDF        ?= ${HOME}/.nix-profile
+
+export PKG_CONFIG_PATH += ${STRATEGOXT}/lib/pkgconfig:${JAVA_FRONT}/lib/pkgconfig:${SDF}/lib/pkgconfig
+
+STRS     = $(wildcard src/*.str) \
+           $(wildcard src/sdf2imp/*.str) \
+           $(wildcard src/sdf2imp/lib/*.str) \
+           $(wildcard src/sdf2imp/project/*.str) \
+           $(wildcard src/sdf2imp/parser/*.str) \
+           $(wildcard src/sdf2imp/util/*.str) \
+           $(wildcard src/sdf2imp/services/*.str)           
+
+RTREES = $(STRS:.str=.rtree)
+
+SDFS     = $(wildcard src/syntax/*.sdf)
+
+SYNTAX   = src/syntax/EditorService.tbl src/syntax/EditorService.pp src/syntax/EditorService-pretty.pp.af src/syntax/EditorService.str src/syntax/Stratego-Java-EditorService.tbl
+
+STRCFLAGS = \
+    -la stratego-xtc \
+    -la stratego-lib \
+    -la stratego-gpp \
+    -la stratego-tool-doc \
+    -la stratego-sglr \
+    -la stratego-rtg \
+    -la stratego-sdf \
+    -la stratego-aterm \
+    -I ${JAVA_FRONT}/share/java-front \
+    -I ${STRATEGOXT}/share/gpp \
+    -I ${STRATEGOXT}/share/xml-front \
+    -I ${STRATEGOXT}/share/sdf-tools \
+    -I ${STRATEGOXT}/share/stratego-front \
+    -I ${STRATEGOXT}/share/xtc \
+    -I ${SDF}/share/pgen \
+    `pkg-config --variable=strcxtcflags strategoxt`
+
+export JAVACFLAGS=-J-Xmx1024m -J-Xms100m -J-server -J-XX:+UseParallelGC -cp strategoxt.jar
+JAVAC=`if which ecj >/dev/null; then echo ecj; else echo javac; fi`
+STRJ=`if which strj >/dev/null; then echo strj; elif [ -e strategoxt.jar ]; then echo java -server -Xss4m -jar strategoxt.jar; else echo Please install strj or put strategoxt.jar into the current directory. >&2; exit 1; fi`
+
+SDFINCLUDES = \
+    -Idef ${JAVA_FRONT}/share/java-front/Stratego-Java-EBlock.def
+
+# I don't care much for nullary constructor warnings unless it's about lowercase ones, such as 'start'
+STRCSTFU=2>&1 | grep -vE 'warning ] Nullary constructor .*[A-Z]|warning ] multiple external| \[ExtSDef\(|stratego-trm|module-name-checked|module-name-checked"' \
+                 >&2
+
+STRINCLUDES = \
+	-I ${STRATEGOXT}/share/sdf/xml-front \
+	-I ${STRATEGOXT}/share/sdf/gpp \
+	-I ${STRATEGOXT}/share/sdf/stratego-regular \
+	-I ${STRATEGOXT}/share/sdf/sdf-front \
+	-I ${JAVA_FRONT}/share/java-front \
+	-I src/syntax \
+	`pkg-config --variable=strcflags java-front`
+
+all : sdf2imp java jar syntax
+
+java : src-gen/org/strategoxt/imp/generator/sdf2imp.java
+
+jar : lib/sdf2imp.jar
+
+check : sdf2imp syntax \
+        test/EditorService.runtestsuite \
+        test/test-editor-service.runsh \
+        test/test-stratego-java.runsh \
+        test/test-foo.runsh
+
+sdf2imp : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
+	strc -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
+	     -la ${JAVA_FRONT}/lib/libjava-front.la
+	rm -f sdf2imp.c sdf2imp.lo sdf2imp.o
+
+src-gen/org/strategoxt/imp/generator/sdf2imp.java : $(RTREES) $(SYNTAX) Makefile src/include/rtg.tbl
+	$(STRJ) -clean -O 3 -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCFLAGS) -m main-sdf2imp \
+	        -la java-front --library -p org.strategoxt.imp.generator
+
+lib/sdf2imp.jar : src-gen/org/strategoxt/imp/generator/sdf2imp.java 
+	strj-jar -i $< -o $@ -cp src-gen
+
+syntax : $(SYNTAX)
+
+clean :
+	rm -f src/include/sdf2imp.ctree sdf2imp $(RTREES) $(wildcard src/syntax/*.tbl) $(wildcard src/syntax/*.def) *.dep include/*.dep src-gen/org/strategoxt/imp/generator/sdf2imp.java src-gen/org/strategoxt/imp/generator/sdf2imp.class
+	
+# files:
+
+% : %.str $(STRS)
+
+%.rtree : %.str $(SYNTAX)
+	@parse-stratego -i $< -o $@ $(STRINCLUDES)
+
+src/include/sdf2imp.ctree : sdf2imp
+	strc -F --library -i src/sdf2imp.str -o $@ $(STRINCLUDES) $(STRCSTFU)
+
+%.pp : %.def
+	ppgen -i $< -o $@
+
+%.pp.af : %.pp
+	parse-pp-table -i $< -o $@
+
+%.str : %.rtg
+	rtg2sig -i $< -o $@
+
+%.rtg : %.def
+	sdf2rtg -i $< -o $@ -m `basename $*` --ignore-missing-cons
+
+%.runtestsuite : %.testsuite
+	parse-unit --no-heuristic-filters -i $< -p src/syntax/EditorService.tbl
+
+%.runsh : %.sh
+	$<
+
+src/syntax/EditorService.def : src/syntax/EditorService.sdf $(SDFS)
+	pack-sdf -i $< -o $@ -I src/syntax
+
+src/syntax/EditorService.tbl : src/syntax/EditorService.def
+	sdf2table -m EditorService -i $< -o $@
+
+src/syntax/Stratego-Java-EditorService.def : src/syntax/Stratego-Java-EditorService.sdf $(SDFS)
+	pack-sdf -i $< -o $@ -I src/syntax $(SDFINCLUDES)
+
+src/syntax/Stratego-Java-EditorService.tbl : src/syntax/Stratego-Java-EditorService.def
+	sdf2table -m Stratego-Java-EditorService -i $< -o $@
+
+# We need a better solution for this
+src/include/rtg.tbl : ${STRATEGOXT}/share/sdf/stratego-regular/rtg.tbl
+	[ -e src/include ] || mkdir src/include
+	baf2trm  -i $< -o $@ # cp $< $@
+
+new-libs :
+	cp $(BRIDGE)/permissive-grammars/trans/make-permissive/bin/*.jar lib
+	cp $(ASTER)/trans/java/aster.jar lib
+
+#	make jar -C $(BRIDGE)/permissive-grammars/trans/make-permissive

From m.dejonge at tudelft.nl  Mon Jul 18 13:01:02 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 11:01:02 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23133 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans
Message-ID: <20110718110102.78B437F803C@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 11:01:02 2011
New Revision: 23133
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23133&sc=1

Log:
bugfix: name analysis, svars. CallT(SVar(x), _,_)  x must refer to local svar x argument not to global x strategy

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Mon Jul 18 10:04:16 2011	(r23132)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Mon Jul 18 11:01:02 2011	(r23133)
@@ -458,7 +458,18 @@
       rules(
         DeclareCookie: (x, _, _) -> cookie
         Declaration: cookie -> dec
-      )
+      );
+      // HACK: a higher-order strategy can be passed as an argument, 
+      // as in s1(s2), where s2 has arguments.
+      // We overwrite (in local scope) global strategies with signature ?(x,_,_)
+      // Fixes Bug: a{1} = fail; foo(a{2}) = a{2} //NOT a{1}
+      all-keys-DeclareCookie; 
+      filter(declare-svar-signatures(|cookie, x))
+  
+  declare-svar-signatures(|cookie, svar-name):
+  	key@(svar-name,_,_) -> key
+  	where
+  	  rules (DeclareCookie: key -> cookie)
 
   declare-tvar:
     x -> x'

From R.B.Vermaas at tudelft.nl  Mon Jul 18 14:39:26 2011
From: R.B.Vermaas at tudelft.nl (Rob Vermaas)
Date: Mon, 18 Jul 2011 12:39:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23134 - hydra/jobs
Message-ID: <20110718123926.4571E7F802C@mx1.tudelft.nl>

Author: rob
Date: Mon Jul 18 12:39:25 2011
New Revision: 23134
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23134&sc=1

Log:
add mailnotification for lennart, maartje and rob

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Mon Jul 18 11:01:02 2011	(r23133)
+++ hydra/jobs/spoofax-imp.nix	Mon Jul 18 12:39:25 2011	(r23134)
@@ -272,6 +272,7 @@
       '';
 
        __noChroot = true;
+       meta.maintainers = ["l.c.l.kats at tudelft.nl" "m.dejonge at tudelft.nl" "rob.vermaas at gmail.com"];
      } ;     
   } ;
 

From tobivollebregt at gmail.com  Mon Jul 18 17:06:15 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Mon, 18 Jul 2011 15:06:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23135 -
	spoofax-imp/trunk/org.strategoxt.imp.testing
Message-ID: <20110718150615.24A897F8042@mx1.tudelft.nl>

Author: tvo
Date: Mon Jul 18 15:06:14 2011
New Revision: 23135
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23135&sc=1

Log:
redo r22961, undo 23060, should fix the build

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Mon Jul 18 12:39:25 2011	(r23134)
+++ spoofax-imp/trunk/org.strategoxt.imp.testing/build.generated.xml	Mon Jul 18 15:06:14 2011	(r23135)
@@ -7,7 +7,7 @@
         <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
     
         <!-- Initialization -->
-        <available file="${build}/org/strategoxt/imp/testing/strategies/Main.class" property="java.jar.enabled"/>
+        <available file="${src-gen}/org/strategoxt/imp/testing/strategies/Main.java" property="java.jar.enabled"/>
         <condition property="java.jar.import" value="-la org.strategoxt.imp.testing.strategies" else="">
             <isset property="java.jar.enabled"/>
         </condition>

From m.dejonge at tudelft.nl  Mon Jul 18 19:39:03 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 17:39:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23136 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans:
	. refactoring refactoring/helpers
Message-ID: <20110718173903.621AB7F8023@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 17:39:03 2011
New Revision: 23136
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23136&sc=1

Log:
bugfix: LRule desugared to Scope [fixes name analysis for LRule]
bugfix: RdefT -> SDefT(., ., ., SRule(...)) [fixes invalid pp result]
scoped inlining

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Mon Jul 18 15:06:14 2011	(r23135)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/analysis.str	Mon Jul 18 17:39:03 2011	(r23136)
@@ -399,14 +399,7 @@
       t1' := <declare-match> t1;
       w'  := <declare-bodies-top> w;
       t2' := <declare-bodies-top> t2
-
-  declare-bodies:
-    LRule(r) -> LRule(r')
-    with
-      {| DeclareCookie: // acts as a non-blanking scope
-        r' := <declare-bodies-top> r
-      |}
-
+  
   declare-bodies:
     SetDynRule(x, r) -> SetDynRule(x', r')
     with

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	Mon Jul 18 15:06:14 2011	(r23135)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	Mon Jul 18 17:39:03 2011	(r23136)
@@ -30,10 +30,10 @@
     SDef(x, a*, s) -> SDefT(x, a*, [], s)
 
   basic-desugar:
-    RDef(x, a*, s) -> SDefT(x, a*, [], s)
+    RDef(x, a*, s) -> SDefT(x, a*, [], SRule(s))
 
   basic-desugar:
-    RDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s)
+    RDefT(x, s*, t*, s) -> SDefT(x, s*, t*, SRule(s))
 
   basic-desugar:
     RDec(x, a*) -> RDecT(x, a*, [])
@@ -42,7 +42,7 @@
     SDefNoArgs(x, s) -> SDefT(x, [], [], s)
 
   basic-desugar:
-    RDefNoArgs(x, s) -> SDefT(x, [], [], s)
+    RDefNoArgs(x, s) -> SDefT(x, [], [], SRule(s))
 
   basic-desugar:
     OverlayNoArgs(x, o) -> Overlay(x, [], o)
@@ -66,6 +66,12 @@
     RuleNoCond(t1, t2) -> Rule(t1, t2, [])
 
   basic-desugar:
+    LRule(rule) -> Scope(lhs-vars, SRule(desugared-rule))
+    where 
+    	desugared-rule at Rule(lhs,_,_) := <basic-desugar-top> rule;
+    	lhs-vars := <collect-all(?Var(<id>))> lhs 
+
+  basic-desugar:
     Choice(s1, s2) -> <try(basic-desugar)> GuardedLChoice(s1, Id(), s2)
 
   basic-desugar:
@@ -120,3 +126,4 @@
                       + ?FromMetaListExpr(_) + ?FromStrategy(_)
                       + \meta-var(x) -> Var(x)\
                       + \meta-listvar(x) -> Var(x)\, conc)> t
+

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str	Mon Jul 18 15:06:14 2011	(r23135)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/helpers/builders.str	Mon Jul 18 17:39:03 2011	(r23136)
@@ -36,7 +36,7 @@
   where
     result := <
     	Hd;
-    	Snd; 
+    	Snd; debug; 
     	pp-stratego-string
     	//map(!(<Fst>, <Snd; parenthesize-Stratego>)); 
     	//construct-textual-change(pp-stratego-string); 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str	Mon Jul 18 15:06:14 2011	(r23135)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str	Mon Jul 18 17:39:03 2011	(r23136)
@@ -64,31 +64,25 @@
     inlined-body := <
       substitute-multiple(|s-uses, svalues);
       substitute-multiple(|t-uses, tvalues);
-      try(rule-to-strategy)
+      try(rule-to-lambda-rule);
+      scope-free-vars
     > body
-    
-rule-to-strategy:
-  Rule(lhs, rhs, []) -> Seq(Match(lhs), Build(rhs))
 
-rule-to-strategy:
-  Rule(lhs, rhs, cond) -> Seq(Match(lhs), Seq(Where(cond), Build(rhs)))
-  where
-    <not(is-list)> cond
-
-rule-to-strategy:
-  Rule(lhs, rhs, clauses) -> Seq(Match(lhs), Seq(<clauses-to-strategy> clauses, Build(rhs)))
-
-clauses-to-strategy:
-  [WhereClause(s)] -> Where(s)
-
-clauses-to-strategy:
-  [WithClause(s)] -> With(s)
+scope-free-vars =
+  try(!Scope(<collect-vars; not(?[])>, <id>))
+  
+collect-vars =
+	topdown(strip-annos);
+	collect-om(
+		?Var(<id>) <+ collect-vars-scope 
+	);
+	flatten-list; make-set
 
-clauses-to-strategy:
-  [WhereClause(s)|clauses] -> Seq(Where(s), <clauses-to-strategy> clauses)
+collect-vars-scope:
+	Scope(scoped-vars, body) -> <diff>(<collect-vars> body, scoped-vars)
 
-clauses-to-strategy:
-  [WithClause(s)|clauses] -> Seq(With(s), <clauses-to-strategy> clauses)
+rule-to-lambda-rule:
+  rule at Rule(_, _, _) -> LRule(rule)
 
 svardec-to-svaruse:
   VarDec(name{ref}, _) -> CallT(SVar(name{ref}), [], [])
@@ -121,4 +115,3 @@
   ast -> ast-t
   where
     ast-t := <topdown(try(filter(not(is-deletion-elem))))> ast
-  
\ No newline at end of file

From m.dejonge at tudelft.nl  Mon Jul 18 21:46:24 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Mon, 18 Jul 2011 19:46:24 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23137 - in
	spoofax-imp/trunk: org.strategoxt.imp.editors.editorservice/editor
	org.strategoxt.imp.editors.editorservice/trans
	org.strategoxt.imp.generator/src/syntax
Message-ID: <20110718194624.BE3A07F8043@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Mon Jul 18 19:46:23 2011
New Revision: 23137
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23137&sc=1

Log:
pp-table no longer used

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Mon Jul 18 17:39:03 2011	(r23136)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/editor/EditorService-Completions.esv	Mon Jul 18 19:46:23 2011	(r23137)
@@ -67,6 +67,12 @@
   completion template : SemanticRule =
     "builder caption" ": " <"caption"> (blank)
 
+  completion template : SemanticRule =
+  	"refactoring" " _ : " <"caption"> " = " <s> (blank)
+
+  completion template : SemanticRule =
+  	"pretty-print" ": "  <s> (blank)
+
   completion template : LanguageProperty =
   	"unmanaged table" ": " <prefix> "*" (blank)
 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Mon Jul 18 17:39:03 2011	(r23136)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Mon Jul 18 19:46:23 2011	(r23137)
@@ -19,7 +19,7 @@
       <chdir> project-path;
       <record-all-sdfs> ".";
       error*   := <collect-all(constraint-error, conc)> ast;
-      warning* := <conc> (<collect-all(constraint-warning, conc)> ast, <warnings-refactoring> ast)
+      warning* := <collect-all(constraint-warning, conc)> ast
 
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, selected)
@@ -144,43 +144,15 @@
   constraint-warning:
     CompletionTrigger(".", _) -> $[Trigger is a regular expression that matches any character. Use \. instead]
 
-  warnings-refactoring=
-    ?ast;
-    wrns-pp-unspecified:=<warning-pptable-unspecified> ast;
-    wrns-src-property:=<collect-all(warning-source-property-missing)> ast;
-    wrns-unused-annotation:=<collect-all(warning-unused-anno); flatten-list> ast;
-    <concat>[wrns-pp-unspecified, wrns-src-property, wrns-unused-annotation]
-
-  warning-unused-anno=
-    ?Refactoring(_, _, _, annos);
-    <filter(
-      ?OpenEditor()<+
-      ?Persistent()<+
-      ?RealTime())
-    > annos;
-    map(!(<id>, $[the '[<origin-text>]' annotation is not used for refactorings]))
-
-  warning-pptable-unspecified=
-    if not(oncetd(?PPTable(_))) then
-      collect-all(
-        warning-pp-table-missing
-      )
-    else
-      ![]
-    end
-
-  warning-pp-table-missing=
-    ?refactoring at Refactoring(_, _, _, _);
-    !(
-       refactoring,
-       $["pp-table : 'stratego-call'" is missing,
-       as a result the source code reconstruction may fail]
-     )
-
-  warning-source-property-missing=
-    ?refactoring at Refactoring(_, _, _, props);
-    <not(fetch(?Source()))> props;
-    !(
-       refactoring,
-       $["Layout deviations will occur for desugared constructs, (source) annotation is recommended"]
-     )
+  constraint-warning:
+    Refactoring(_, _, _, annos) -> (err-anno, $[the '[<try(origin-text)> err-anno]' annotation is not used for refactorings])
+    where
+      [err-anno] := <filter(?OpenEditor() <+ ?Persistent()<+?RealTime())> annos
+
+  constraint-warning:
+    r at Refactoring(_, _, _, annos) -> (r, $['openeditor, persistent, realtime' annotations are not used for refactorings])
+    where
+      [_,_|_] := <filter(?OpenEditor() <+ ?Persistent()<+?RealTime())> annos
+
+  constraint-warning:
+	pp at PPTable(_) -> (pp, $['pp-table' property is deprecated, use "pretty-print : pp-mylang-string" instead])
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf	Mon Jul 18 17:39:03 2011	(r23136)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf	Mon Jul 18 19:46:23 2011	(r23137)
@@ -18,6 +18,7 @@
   	"pretty-print" ":" StrategoCall -> SemanticRule {cons("PrettyPrint")}
     "refactoring"  SemanticNode* ":" String "="   StrategoCall BuilderOption* -> SemanticRule {cons("Refactoring")}
   
-    %%"refactoring"  ":" String "=" Node "->" StrategoCall -> SemanticRule {cons("Refactoring")} 
-    %% Node defines on what sorts/constructors the refactoring can be defiend
-    
\ No newline at end of file
+     %% Avoid ambiguities with semantic nodes
+     "pp-table"  -> SemanticNode {reject}
+     "pretty-print"  -> SemanticNode {reject}
+     "refactoring"  -> SemanticNode {reject}

From tobivollebregt at gmail.com  Tue Jul 19 11:23:23 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 19 Jul 2011 09:23:23 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23138 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/META-INF
Message-ID: <20110719092323.B0231108C039@mx3.tudelft.nl>

Author: tvo
Date: Tue Jul 19 09:23:23 2011
New Revision: 23138
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23138&sc=1

Log:
remove some exact versions from XML library MANIFEST.MF

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/META-INF/MANIFEST.MF

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/META-INF/MANIFEST.MF
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/META-INF/MANIFEST.MF	Mon Jul 18 19:46:23 2011	(r23137)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/META-INF/MANIFEST.MF	Tue Jul 19 09:23:23 2011	(r23138)
@@ -4,7 +4,8 @@
 Bundle-SymbolicName: org.spoofax.interpreter.library.xml
 Bundle-Version: 1.0.0.qualifier
 Bundle-RequiredExecutionEnvironment: J2SE-1.5
-Require-Bundle: org.junit;bundle-version="4.8.1",
+Require-Bundle: org.junit,
+ org.junit4,
  org.spoofax.interpreter.core,
- org.spoofax.terms;bundle-version="1.0.0"
+ org.spoofax.terms
 Export-Package: org.spoofax.interpreter.library.xml

From tobivollebregt at gmail.com  Tue Jul 19 11:24:15 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 19 Jul 2011 09:24:15 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23139 - in
	strategoxt-java-backend/trunk: META-INF
	java/runtime/org/strategoxt/lang/compat
Message-ID: <20110719092415.9FA16108C030@mx3.tudelft.nl>

Author: tvo
Date: Tue Jul 19 09:24:15 2011
New Revision: 23139
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23139&sc=1

Log:
Added org.spoofax.interpreter.library.xml as dependency

Modified:
   strategoxt-java-backend/trunk/META-INF/MANIFEST.MF
   strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java

Modified: strategoxt-java-backend/trunk/META-INF/MANIFEST.MF
==============================================================================
--- strategoxt-java-backend/trunk/META-INF/MANIFEST.MF	Tue Jul 19 09:23:23 2011	(r23138)
+++ strategoxt-java-backend/trunk/META-INF/MANIFEST.MF	Tue Jul 19 09:24:15 2011	(r23139)
@@ -51,6 +51,7 @@
  org.spoofax.terms,
  org.spoofax.interpreter.library.jsglr,
  org.spoofax.interpreter.library.language;bundle-version="1.0.0",
+ org.spoofax.interpreter.library.xml,
  org.eclipse.ant.core;bundle-version="3.0.0",
  org.eclipse.core.runtime;bundle-version="3.0.0"
 Bundle-RequiredExecutionEnvironment: J2SE-1.5

Modified: strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java
==============================================================================
--- strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Tue Jul 19 09:23:23 2011	(r23138)
+++ strategoxt-java-backend/trunk/java/runtime/org/strategoxt/lang/compat/CompatManager.java	Tue Jul 19 09:24:15 2011	(r23139)
@@ -8,6 +8,7 @@
 import org.spoofax.interpreter.library.jsglr.JSGLRLibrary;
 import org.spoofax.interpreter.library.jsglr.origin.OriginLibrary;
 import org.spoofax.interpreter.library.language.LanguageLibrary;
+import org.spoofax.interpreter.library.xml.XMLLibrary;
 import org.strategoxt.HybridInterpreter;
 import org.strategoxt.lang.Context;
 import org.strategoxt.lang.InteropSDefT;
@@ -50,6 +51,7 @@
 		// More standard registries, kind of
         context.addOperatorRegistry(new LanguageLibrary());
         context.addOperatorRegistry(new OriginLibrary());
+        context.addOperatorRegistry(new XMLLibrary());
 	}
 
 	public void registerComponent(String component) {

From tobivollebregt at gmail.com  Tue Jul 19 11:24:34 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 19 Jul 2011 09:24:34 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23140 -
	spoofax-imp/trunk/org.strategoxt.imp.feature
Message-ID: <20110719092434.A5AC0CC167@mx4.tudelft.nl>

Author: tvo
Date: Tue Jul 19 09:24:34 2011
New Revision: 23140
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23140&sc=1

Log:
Added org.spoofax.interpreter.library.xml as dependency

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml

Modified: spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Jul 19 09:24:15 2011	(r23139)
+++ spoofax-imp/trunk/org.strategoxt.imp.feature/feature.xml	Tue Jul 19 09:24:34 2011	(r23140)
@@ -325,6 +325,13 @@
          unpack="false"/>
 
    <plugin
+         id="org.spoofax.interpreter.library.xml"
+         download-size="0"
+         install-size="0"
+         version="1.0.0.qualifier"
+         unpack="false"/>
+
+   <plugin
          id="org.strategoxt.imp.editors.spoofax"
          download-size="0"
          install-size="0"

From tobivollebregt at gmail.com  Tue Jul 19 11:26:32 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 19 Jul 2011 09:26:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23141 - hydra/jobs
Message-ID: <20110719092632.E124CCC122@mx4.tudelft.nl>

Author: tvo
Date: Tue Jul 19 09:26:32 2011
New Revision: 23141
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23141&sc=1

Log:
Include org.spoofax.interpreter.library.xml in build

Modified:
   hydra/jobs/spoofax-imp.nix

Modified: hydra/jobs/spoofax-imp.nix
==============================================================================
--- hydra/jobs/spoofax-imp.nix	Tue Jul 19 09:24:34 2011	(r23140)
+++ hydra/jobs/spoofax-imp.nix	Tue Jul 19 09:26:32 2011	(r23141)
@@ -79,6 +79,7 @@
                  ${spoofax}/org.spoofax.interpreter.core \
                  ${spoofax}/org.spoofax.interpreter.library.jsglr \
                  ${spoofax}/org.spoofax.interpreter.library.language \
+                 ${spoofax}/org.spoofax.interpreter.library.xml \
                  ${spoofax}/org.spoofax.jsglr \
                  ${spoofax}/org.spoofax.terms \
                  ${spoofaxImp}/org.strategoxt.imp.editors.aster \

From tobivollebregt at gmail.com  Tue Jul 19 15:12:01 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 19 Jul 2011 13:12:01 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23142 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110719131201.C7F40CC121@mx4.tudelft.nl>

Author: tvo
Date: Tue Jul 19 13:12:01 2011
New Revision: 23142
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23142&sc=1

Log:
add XML library to new-libs makefile target

Modified:
   strategoxt-java-backend/trunk/java/Makefile.am

Modified: strategoxt-java-backend/trunk/java/Makefile.am
==============================================================================
--- strategoxt-java-backend/trunk/java/Makefile.am	Tue Jul 19 09:26:32 2011	(r23141)
+++ strategoxt-java-backend/trunk/java/Makefile.am	Tue Jul 19 13:12:01 2011	(r23142)
@@ -138,6 +138,7 @@
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.jsglr/bin/ .
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.jsglr/bin/ .
 	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.language/bin/ .
+	$(JAR) uf spoofax-libs.jar.tmp -C $(SPOOFAX)/org.spoofax.interpreter.library.xml/bin/ .
 	rm -rf spoofax-libs-tmp
 	mv spoofax-libs.jar.tmp spoofax-libs.jar
 

From tobivollebregt at gmail.com  Tue Jul 19 15:31:09 2011
From: tobivollebregt at gmail.com (Tobi Vollebregt)
Date: Tue, 19 Jul 2011 13:31:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23143 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml
Message-ID: <20110719133109.A8B97108C068@mx3.tudelft.nl>

Author: tvo
Date: Tue Jul 19 13:31:09 2011
New Revision: 23143
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23143&sc=1

Log:
Java 1.5 compatibility

Modified:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java

Modified: spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java	Tue Jul 19 13:12:01 2011	(r23142)
+++ spoofax/trunk/spoofax/org.spoofax.interpreter.library.xml/src/org/spoofax/interpreter/library/xml/StrategoTermBuilder.java	Tue Jul 19 13:31:09 2011	(r23143)
@@ -125,8 +125,9 @@
 	private IStrategoTerm makeName(String uri, String localName, String qName)
 	{
 		if (namespaceAware) {
-			IStrategoTerm uriTerm = uri.isEmpty() ? factory.makeAppl(noneCons) : factory.makeString(uri);
-			IStrategoTerm localNameTerm = factory.makeString(uri.isEmpty() ? qName : localName);
+			boolean uriIsEmpty = uri.length() == 0;
+			IStrategoTerm uriTerm = uriIsEmpty ? factory.makeAppl(noneCons) : factory.makeString(uri);
+			IStrategoTerm localNameTerm = factory.makeString(uriIsEmpty ? qName : localName);
 			return factory.makeAppl(nameCons, uriTerm, localNameTerm);
 		}
 		else {

From L.C.L.Kats at tudelft.nl  Tue Jul 19 15:46:31 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 19 Jul 2011 13:46:31 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23144 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110719134631.28A43CC119@mx4.tudelft.nl>

Author: LennartKats
Date: Tue Jul 19 13:46:30 2011
New Revision: 23144
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23144&sc=1

Log:
new-libs

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From seba at informatik.uni-marburg.de  Tue Jul 19 17:04:38 2011
From: seba at informatik.uni-marburg.de (Sebastian Erdweg)
Date: Tue, 19 Jul 2011 15:04:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23145 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
Message-ID: <20110719150438.4CD9C7F8009@mx1.tudelft.nl>

Author: SebastianErdweg
Date: Tue Jul 19 15:04:38 2011
New Revision: 23145
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23145&sc=1

Log:
bugfix in non-recursive tree filter

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Tue Jul 19 13:46:30 2011	(r23144)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Tue Jul 19 15:04:38 2011	(r23145)
@@ -450,8 +450,7 @@
 				output.pop();
 
 				if (changed)
-					t = new ParseNode(t.getLabel(), args,
-							AbstractParseNode.PARSENODE);
+					t = new ParseNode(t.getLabel(), args, t.getNodeType());
 
 				if (filterAssociativity)
 					t = applyAssociativityPriorityFilter(t);

From L.C.L.Kats at tudelft.nl  Tue Jul 19 17:16:03 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Tue, 19 Jul 2011 15:16:03 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23146 -
	strategoxt-java-backend/trunk/java
Message-ID: <20110719151603.69F057F8036@mx1.tudelft.nl>

Author: LennartKats
Date: Tue Jul 19 15:16:03 2011
New Revision: 23146
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23146&sc=1

Log:
new-libs

Modified:
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From m.dejonge at tudelft.nl  Tue Jul 19 23:10:59 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 19 Jul 2011 21:10:59 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23147 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading services
Message-ID: <20110719211059.DF51B108C046@mx3.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 19 21:10:58 2011
New Revision: 23147
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23147&sc=1

Log:
read identifier input from .esv file

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringWizard.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Tue Jul 19 15:16:03 2011	(r23146)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Tue Jul 19 21:10:58 2011	(r23147)
@@ -49,13 +49,13 @@
 			ppStrategy=termContents(termAt(ppStrategyTerm, 0));
 		else
 			ppStrategy = ("pp-" + d.getLanguage().getName() + "-string").toLowerCase();
-		for (IStrategoAppl builder : collectTerms(d.getDocument(), "Refactoring")) {
-			IStrategoTerm[] semanticNodes = termAt(builder,0).getAllSubterms();
-			String caption = termContents(termAt(builder, 1));
-			String strategy = termContents(termAt(builder, 2));
+		for (IStrategoAppl aRefactoring : collectTerms(d.getDocument(), "Refactoring")) {
+			IStrategoTerm[] semanticNodes = termAt(aRefactoring,0).getAllSubterms();
+			String caption = termContents(termAt(aRefactoring, 1));
+			String strategy = termContents(termAt(aRefactoring, 2));
+			IStrategoList options = termAt(aRefactoring, 3);
 			ArrayList<StrategoRefactoringIdentifierInput> inputFields = 
-				getInputFields(builder, controller.getEditor());
-			IStrategoList options = termAt(builder, 3);
+				getInputFields(aRefactoring, controller.getEditor());
 			boolean cursor = false;
 			boolean source = false;
 			boolean meta = false;
@@ -97,7 +97,37 @@
 	}
 	
 	private static ArrayList<StrategoRefactoringIdentifierInput> getInputFields(
-			IStrategoAppl builder, EditorState editor) {
+			IStrategoAppl aRefactoring, EditorState editor) {
+		ArrayList<StrategoRefactoringIdentifierInput> inputFields = new ArrayList<StrategoRefactoringIdentifierInput>();
+		if(aRefactoring.getSubtermCount() < 5)
+			return inputFields;
+		IStrategoTerm lstInputFields = termAt(aRefactoring, 4);
+		for (int i = 0; i < lstInputFields.getSubtermCount(); i++) {
+			IStrategoAppl input = TermReader.applAt(lstInputFields, i);
+			if(TermReader.hasConstructor(input, "IdInputField")){
+				String label = termContents(termAt(input,0));
+				String defaultValue = "";
+				if(input.getSubtermCount() > 1)
+					defaultValue = termContents(termAt(input,1)); //TODO: Strategy OR String
+				StrategoRefactoringIdentifierInput idInput = 
+					new StrategoRefactoringIdentifierInput(
+						label, 
+						defaultValue, 
+						getIdPattern(editor), 
+						getKeywordRecognizer(editor),
+						getLanguageName(editor)
+					);
+				inputFields.add(idInput);
+			}
+			//TODO other input types
+			//TODO pattern
+		}
+		return inputFields;
+	}
+
+	/*
+	private static ArrayList<StrategoRefactoringIdentifierInput> getInputFields(
+			IStrategoAppl aRefactoring, EditorState editor) {
 		ArrayList<StrategoRefactoringIdentifierInput> inputFields = new ArrayList<StrategoRefactoringIdentifierInput>();
 		//TODO: read them from builder
 		StrategoRefactoringIdentifierInput idInput1 = 
@@ -110,7 +140,7 @@
 			);
 		inputFields.add(idInput1);
 		return inputFields;
-	}
+	}*/
 
 	private static String getLanguageName(EditorState editor) {
 		try {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringWizard.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringWizard.java	Tue Jul 19 15:16:03 2011	(r23146)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoringWizard.java	Tue Jul 19 21:10:58 2011	(r23147)
@@ -15,6 +15,11 @@
 
 	@Override
 	protected void addUserInputPages() {
-		addPage(inputPage);
+		if(hasUserInputValues())
+			addPage(inputPage);
+	}
+
+	private boolean hasUserInputValues() {
+		return ((StrategoRefactoring)getRefactoring()).getInputFields().size() > 0;
 	}
 }

From m.dejonge at tudelft.nl  Tue Jul 19 23:12:37 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 19 Jul 2011 21:12:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23148 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax
Message-ID: <20110719211237.7F664CC14E@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 19 21:12:37 2011
New Revision: 23148
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23148&sc=1

Log:
refactoring identifier input in .esv specification

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf	Tue Jul 19 21:10:58 2011	(r23147)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf	Tue Jul 19 21:12:37 2011	(r23148)
@@ -14,9 +14,27 @@
   
   context-free syntax
   	
-  	"pp-table" ":" StrategoCall -> SemanticRule {cons("PPTable")}
+  	"pp-table" ":" StrategoCall     -> SemanticRule {cons("PPTable"), deprecated("use 'pretty-print' instead")}
   	"pretty-print" ":" StrategoCall -> SemanticRule {cons("PrettyPrint")}
-    "refactoring"  SemanticNode* ":" String "="   StrategoCall BuilderOption* -> SemanticRule {cons("Refactoring")}
+    "refactoring" SemanticNode* ":" String "=" StrategoCall BuilderOption* "input" InputField+ 
+    								-> SemanticRule {cons("Refactoring")}
+    "refactoring" SemanticNode* ":" String "=" StrategoCall BuilderOption*  
+    								-> SemanticRule {cons("Refactoring")} 
+    								%% TODO: None should be []
+    
+    %% identifier input field, text input field + validation of idpattern, keywords 
+    "identifier" ":" String                  -> InputField {cons("IdInputField")}
+    "identifier" ":" String "=" String       -> InputField {cons("IdInputField")}
+    "identifier" ":" String "=" StrategoCall -> InputField {cons("IdInputField")}
+    
+    %% text input field 
+    "text" ":" String                  -> InputField {ast("TextInputField(<1>, \"\")")}
+    "text" ":" String "=" String       -> InputField {cons("TextInputField")}
+    "text" ":" String "=" StrategoCall -> InputField {cons("TextInputField")}
+
+    %% boolean input field 
+    %% boolean choice input field 
+    %% ...
   
      %% Avoid ambiguities with semantic nodes
      "pp-table"  -> SemanticNode {reject}

From m.dejonge at tudelft.nl  Tue Jul 19 23:15:44 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 19 Jul 2011 21:15:44 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23149 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego: editor
	trans trans/refactoring
Message-ID: <20110719211544.800692B8054@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 19 21:15:44 2011
New Revision: 23149
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23149&sc=1

Log:
- rename refactoring specified with identifier input
- code formatting refactoring

Added:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/format.str
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Tue Jul 19 21:12:37 2011	(r23148)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Tue Jul 19 21:15:44 2011	(r23149)
@@ -3,16 +3,16 @@
 
 imports Stratego-Sugar-Builders.generated
 
+
 builders
                                                                                       
   // This file can be used for custom analysis rules.                                 
   // See the imported file for a brief introduction and examples.                     
-                                                                                      
+                                                                                       
   provider : include/stratego_sugar.jar
 
   observer : editor-analyze
 
-
   builder : "Rename" = rename-builder (meta)
   
   builder: "Inline strategy" = inline-builder (meta)
@@ -28,15 +28,24 @@
   builder : "Show AST (selection)" =
     generate-aterm (source) (meta) 
 
+  builder : "PP Stratego String" =
+    pp-builder (source) (meta) 
+
+  builder : "PP Stratego String (analyzed)" =
+    pp-builder (meta) 
 
 refactorings
   
   pretty-print: pp-stratego-string
    
-  refactoring Id: "Rename" = rename-refactoring
-  //input
-  //  identifier : "New Name" = ""
+  refactoring Id: "Rename" = rename-refactoring //(shortcut)
+  input
+    identifier : "New Name"
+    //identifier : "New Name" = "<newname>"
+    //identifier : "New Name" = selected-name
   	
-  //refactoring: "Remove debug" = remove-debug-refactoring //(preview) //(source)
+  refactoring: "Pretty-Print (Warning: Looses Comments in Selection!)" = format-refactoring (source) //(preview) (shortcut)
+
+  refactoring: "Remove debug" = remove-debug-refactoring (meta) //(preview)
 
  
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	Tue Jul 19 21:12:37 2011	(r23148)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/desugar.str	Tue Jul 19 21:15:44 2011	(r23149)
@@ -65,7 +65,7 @@
   basic-desugar:
     RuleNoCond(t1, t2) -> Rule(t1, t2, [])
 
-  basic-desugar:
+  basic-desugar: //TODO: resugar rule for pretty-printing?
     LRule(rule) -> Scope(lhs-vars, SRule(desugared-rule))
     where 
     	desugared-rule at Rule(lhs,_,_) := <basic-desugar-top> rule;

Added: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/format.str
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/format.str	Tue Jul 19 21:15:44 2011	(r23149)
@@ -0,0 +1,10 @@
+module refactoring/format
+
+imports
+  libstrc
+
+rules //remove debug refactoring
+
+format-refactoring:
+  (_, selected, position, ast, path, project-path) -> 
+  ([(selected, <pp-stratego-string> selected)], [], [], [])

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str	Tue Jul 19 21:12:37 2011	(r23148)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/refactoring/inline.str	Tue Jul 19 21:15:44 2011	(r23149)
@@ -70,6 +70,7 @@
 
 scope-free-vars =
   try(!Scope(<collect-vars; not(?[])>, <id>))
+  //TODO: warning, programmar may not be happy with the result?
   
 collect-vars =
 	topdown(strip-annos);

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Tue Jul 19 21:12:37 2011	(r23148)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/trans/stratego_sugar.str	Tue Jul 19 21:15:44 2011	(r23149)
@@ -9,6 +9,7 @@
   desugar
   lib/editor-common.generated
   refactoring/rename
+  refactoring/format
   refactoring/helpers/builders
 
 strategies

From m.dejonge at tudelft.nl  Tue Jul 19 23:19:26 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 19 Jul 2011 21:19:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23150 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans
Message-ID: <20110719211926.8F2652B8054@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 19 21:19:26 2011
New Revision: 23150
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23150&sc=1

Log:
warnings refactoring with input

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Tue Jul 19 21:15:44 2011	(r23149)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Tue Jul 19 21:19:26 2011	(r23150)
@@ -145,14 +145,14 @@
     CompletionTrigger(".", _) -> $[Trigger is a regular expression that matches any character. Use \. instead]
 
   constraint-warning:
-    Refactoring(_, _, _, annos) -> (err-anno, $[the '[<try(origin-text)> err-anno]' annotation is not used for refactorings])
+  	Refactoring(a, b, c, annos) -> <constraint-warning> Refactoring(a, b, c, annos, None()) 
+
+  constraint-warning:
+    Refactoring(_, _, _, annos, _) -> (err-anno, $[the '[<try(origin-text)> err-anno]' annotation is not used for refactorings])
     where
       [err-anno] := <filter(?OpenEditor() <+ ?Persistent()<+?RealTime())> annos
 
   constraint-warning:
-    r at Refactoring(_, _, _, annos) -> (r, $['openeditor, persistent, realtime' annotations are not used for refactorings])
+    r at Refactoring(_, _, _, annos, _) -> (r, $['openeditor, persistent, realtime' annotations are not used for refactorings])
     where
       [_,_|_] := <filter(?OpenEditor() <+ ?Persistent()<+?RealTime())> annos
-
-  constraint-warning:
-	pp at PPTable(_) -> (pp, $['pp-table' property is deprecated, use "pretty-print : pp-mylang-string" instead])
\ No newline at end of file

From m.dejonge at tudelft.nl  Wed Jul 20 10:07:26 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 20 Jul 2011 08:07:26 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23151 - in
	spoofax-imp/trunk/org.strategoxt.imp.generator/src:
	sdf2imp/services syntax
Message-ID: <20110720080726.865E32B805A@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Jul 20 08:07:26 2011
New Revision: 23151
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23151&sc=1

Log:
refactoring + input field in example Entities project

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Stratego-Java-EditorService.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Tue Jul 19 21:19:26 2011	(r23150)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Wed Jul 20 08:07:26 2011	(r23151)
@@ -14,6 +14,7 @@
       <descriptor-name> "-Builders"
     , provider1 := <conc-strings> ("include/", <trans-module-name>, ".ctree");
       provider2 := <conc-strings> ("include/", <trans-module-name>, "-java.jar");
+      pp-strategy := $[pp-[<trans-module-name>]-string];
       !|[
         module <descriptor-name> "-Builders"
         
@@ -21,7 +22,7 @@
         
         builders
           ~~
-          ~~// This file can be used for custom analysis and builder rules.
+          ~~// This file can be used for custom analysis, builder and refactoring rules.
           ~~//
           ~~// See the imported file for a brief introduction and examples.
         builders
@@ -36,15 +37,11 @@
           ~~
            
         refactorings
-          ~~
-            
-          pp-table: get-pp-table
-          ~~
+          pretty-print: ~pp-strategy
           refactoring ID: "Rename Entity" = rename-entity (source) (cursor)
-
-          ~~
+          input
+          	identifier: "new name" = ""
           ~// on save: generate-java
-                
       ]|
     );
     
@@ -88,17 +85,19 @@
           ~//   (source)      Always apply this builder to the source AST, not to the AST
           ~//                 after it has been analyzed/desugared by the observer.
           ~//
-          ~// Refactorings are used for transformations that modify the original source code;
-          ~// the original layout is preserved for unchanged fragments,
-          ~// while newly inserted nodes are pretty printed using a custom pretty-print strategy, 
-          ~// or the layout definitions in the pp-table.
-          ~//   pp-table: get-pp-table
-          ~//   pretty-print: prettyprint
-          ~//
+          ~// Refactorings are used for transformations that modify the original source code,
+          ~// while preserving the layout. A custom pretty-print strategy is used to format newly inserted nodes.
           ~// Refactorings can be specified as shown below, whereby Property* indicates on which constructs the
           ~// refactoring is specified (<sort>.<constructor>).
+          ~//
+          ~// refactorings
+          ~//
+          ~//   pretty-print: prettyprint
           ~// 
           ~//   refactoring Property*: "Extract Entity" =  extract-entity (source)
+          ~//   input
+          ~//     identifier: "entity name" = ""
+          ~//     identifier: "property name" = ""
           ~// 
           ~// The 'on save' handler can be used  to generate code as files are saved:
           ~//   

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Tue Jul 19 21:19:26 2011	(r23150)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Wed Jul 20 08:07:26 2011	(r23151)
@@ -4,7 +4,16 @@
    Refactoring                            -- R [ H [ KW["refactoring"] _1 ]  KW[":"] _2 H [  KW["="] _3 _4] ],
    Refactoring.1:iter-star                -- _1,
    Refactoring.4:iter-star                -- _1,
-   Refactorings                           -- V is=2 [H hs=0 [KW["refactorings"] _1] A(l,l,l,l,l,l) [_2]],
+   Refactoring                            -- V vs=0 [ H [ KW["refactoring"] _1  KW[":"] _2  KW["="] _3 _4] V is=2 [KW["input"] _5]],
+   Refactoring.1:iter-star                -- _1,
+   Refactoring.4:iter-star                -- _1,
+   Refactoring.5:iter                     -- _1,
+   Refactorings                           -- V is=2 vs=1 [H hs=0 [KW["refactorings"] _1]  _2],
+   IdInputField                           -- H [KW["identifier"] KW[":"] _1],
+   IdInputField                           -- H [KW["identifier"] KW[":"] _1 KW["="] _2],
+   IdInputField                           -- H [KW["identifier"] KW[":"] _1 KW["="] _2],
+   TextInputField                         -- H [KW["text"] KW[":"] _1 KW["="] _2],
+   TextInputField                         -- H [KW["text"] KW[":"] _1 KW["="] _2],
    ReferenceHoverRule   -- R [ H [ KW["reference"] _1 ] KW[":"] H [ _2 _3 ] ],
    ReferenceRule        -- R [ H [ KW["reference"] _1 ] KW[":"] _2 ],
    CompletionProposer   -- R [ H [ KW["completion"] KW["proposer"] ] KW[":"] _1 ],

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Stratego-Java-EditorService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Stratego-Java-EditorService.sdf	Tue Jul 19 21:19:26 2011	(r23150)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/Stratego-Java-EditorService.sdf	Wed Jul 20 08:07:26 2011	(r23151)
@@ -37,6 +37,7 @@
 
     QuotedTerm -> Id {cons("FromMetaExpr"), avoid}
     QuotedTerm -> PropertyValue {cons("FromMetaExpr"), avoid}
+    QuotedTerm -> StrategoCall {cons("FromMetaExpr"), avoid}
     QuotedTerm -> URL {cons("FromMetaExpr"), avoid}
     QuotedTerm -> ModuleName {cons("FromMetaExpr")}
     QuotedTerm -> Color {cons("FromMetaExpr")}

From m.dejonge at tudelft.nl  Wed Jul 20 10:09:09 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Wed, 20 Jul 2011 08:09:09 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23152 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor
Message-ID: <20110720080909.D1DDC2B804D@mx2.tudelft.nl>

Author: MaartjeDeJonge
Date: Wed Jul 20 08:09:09 2011
New Revision: 23152
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23152&sc=1

Log:


Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Wed Jul 20 08:07:26 2011	(r23151)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.stratego/editor/Stratego-Sugar-Builders.esv	Wed Jul 20 08:09:09 2011	(r23152)
@@ -41,8 +41,6 @@
   refactoring Id: "Rename" = rename-refactoring //(shortcut)
   input
     identifier : "New Name"
-    //identifier : "New Name" = "<newname>"
-    //identifier : "New Name" = selected-name
   	
   refactoring: "Pretty-Print (Warning: Looses Comments in Selection!)" = format-refactoring (source) //(preview) (shortcut)
 

From m.dejonge at tudelft.nl  Thu Jul 21 09:03:29 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 21 Jul 2011 07:03:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23153 -
	spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans
Message-ID: <20110721070329.3012B7F8090@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Jul 21 07:03:27 2011
New Revision: 23153
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23153&sc=1

Log:
shortcut

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Wed Jul 20 08:09:09 2011	(r23152)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.editorservice/trans/editorservice.str	Thu Jul 21 07:03:27 2011	(r23153)
@@ -14,12 +14,13 @@
 rules
 
   editor-analyze:
-    (ast, path, project-path) -> (error*, warning*, [])
+    (ast, path, project-path) -> (error*, warning*, info*)
     with
       <chdir> project-path;
       <record-all-sdfs> ".";
       error*   := <collect-all(constraint-error, conc)> ast;
-      warning* := <collect-all(constraint-warning, conc)> ast
+      warning* := <collect-all(constraint-warning, conc)> ast;
+      info* := <collect-all(constraint-info, conc)> ast
 
   generate-aterm:
     (selected, position, ast, path, project-path) -> (filename, selected)
@@ -145,9 +146,6 @@
     CompletionTrigger(".", _) -> $[Trigger is a regular expression that matches any character. Use \. instead]
 
   constraint-warning:
-  	Refactoring(a, b, c, annos) -> <constraint-warning> Refactoring(a, b, c, annos, None()) 
-
-  constraint-warning:
     Refactoring(_, _, _, annos, _) -> (err-anno, $[the '[<try(origin-text)> err-anno]' annotation is not used for refactorings])
     where
       [err-anno] := <filter(?OpenEditor() <+ ?Persistent()<+?RealTime())> annos
@@ -156,3 +154,20 @@
     r at Refactoring(_, _, _, annos, _) -> (r, $['openeditor, persistent, realtime' annotations are not used for refactorings])
     where
       [_,_|_] := <filter(?OpenEditor() <+ ?Persistent()<+?RealTime())> annos
+
+  constraint-warning:
+  	uidefs -> (uidefs, $[A refactoring has one (or zero) input with multiple fields])
+  	where
+  	  filter(?UserInput(_)); ?[_,_|_]
+
+  constraint-warning:
+  	uidefs -> (uidefs, $[A refactoring has only one (or zero) shortcuts])
+  	where
+  	  filter(?KeyBinding(_)); ?[_,_|_]
+
+  constraint-info:
+  	kb at KeyBinding(_) -> (
+  		kb, 
+  		$[Explicit keybinding support is not yet implemented, 
+  		  Use the actionDefinitionId instead.
+  		  For example, 'shortcut: "org.eclipse.jdt.ui.edit.text.java.rename.element"'])

From m.dejonge at tudelft.nl  Thu Jul 21 09:04:29 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 21 Jul 2011 07:04:29 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23154 - in
	spoofax-imp/trunk/org.strategoxt.imp.generator/src:
	sdf2imp/services syntax
Message-ID: <20110721070429.CF291CC1D4@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Jul 21 07:04:29 2011
New Revision: 23154
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23154&sc=1

Log:
shortcut

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Thu Jul 21 07:03:27 2011	(r23153)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/services/create-builders-descriptor.str	Thu Jul 21 07:04:29 2011	(r23154)
@@ -39,6 +39,7 @@
         refactorings
           pretty-print: ~pp-strategy
           refactoring ID: "Rename Entity" = rename-entity (source) (cursor)
+          shortcut: "org.eclipse.jdt.ui.edit.text.java.rename.element"
           input
           	identifier: "new name" = ""
           ~// on save: generate-java
@@ -95,9 +96,10 @@
           ~//   pretty-print: prettyprint
           ~// 
           ~//   refactoring Property*: "Extract Entity" =  extract-entity (source)
-          ~//   input
-          ~//     identifier: "entity name" = ""
-          ~//     identifier: "property name" = ""
+          ~//     shortcut: Shift+Alt+M
+          ~//     input
+          ~//       identifier: "entity name" = ""
+          ~//       identifier: "property name" = ""
           ~// 
           ~// The 'on save' handler can be used  to generate code as files are saved:
           ~//   

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Thu Jul 21 07:03:27 2011	(r23153)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/EditorService-pretty.pp	Thu Jul 21 07:04:29 2011	(r23154)
@@ -1,14 +1,17 @@
 [
    PPTable                                -- R [ H [KW["pp-table"]] KW[":"] _1],
    PrettyPrint                            -- R [ H [KW["pretty-print"]] KW[":"] _1],
-   Refactoring                            -- R [ H [ KW["refactoring"] _1 ]  KW[":"] _2 H [  KW["="] _3 _4] ],
-   Refactoring.1:iter-star                -- _1,
-   Refactoring.4:iter-star                -- _1,
-   Refactoring                            -- V vs=0 [ H [ KW["refactoring"] _1  KW[":"] _2  KW["="] _3 _4] V is=2 [KW["input"] _5]],
+   Refactorings                           -- V is=2 vs=1 [H hs=0 [KW["refactorings"] _1]  _2],
+   Refactoring                            -- V is=2 [ H [ KW["refactoring"] _1  KW[":"] _2  KW["="] _3 _4] _5],
    Refactoring.1:iter-star                -- _1,
    Refactoring.4:iter-star                -- _1,
    Refactoring.5:iter                     -- _1,
-   Refactorings                           -- V is=2 vs=1 [H hs=0 [KW["refactorings"] _1]  _2],
+   Shortcut                               -- H [KW["shortcut"] KW[":"] _1],
+   KeyBinding                             -- _1,
+   Shortcut                               -- H [KW["shortcut"] KW[":"] _1],
+   InteractionId                          -- _1,
+   UserInput                              -- V is=2 [H  [KW["input"]] _1],
+   UserInput.1:iter                       -- _1,
    IdInputField                           -- H [KW["identifier"] KW[":"] _1],
    IdInputField                           -- H [KW["identifier"] KW[":"] _1 KW["="] _2],
    IdInputField                           -- H [KW["identifier"] KW[":"] _1 KW["="] _2],

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf	Thu Jul 21 07:03:27 2011	(r23153)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/syntax/RefactoringsService.sdf	Thu Jul 21 07:04:29 2011	(r23154)
@@ -16,13 +16,18 @@
   	
   	"pp-table" ":" StrategoCall     -> SemanticRule {cons("PPTable"), deprecated("use 'pretty-print' instead")}
   	"pretty-print" ":" StrategoCall -> SemanticRule {cons("PrettyPrint")}
-    "refactoring" SemanticNode* ":" String "=" StrategoCall BuilderOption* "input" InputField+ 
+
+    "refactoring" SemanticNode* ":" String "=" StrategoCall BuilderOption* UIOption* 
     								-> SemanticRule {cons("Refactoring")}
-    "refactoring" SemanticNode* ":" String "=" StrategoCall BuilderOption*  
-    								-> SemanticRule {cons("Refactoring")} 
-    								%% TODO: None should be []
     
-    %% identifier input field, text input field + validation of idpattern, keywords 
+    "shortcut" ":" KeyBinding -> UIOption {cons("Shortcut")}
+    RefactoringKeyBinding -> KeyBinding {cons("KeyBinding")}
+    "shortcut" ":" InteractionId -> UIOption {cons("Shortcut")}
+    String -> InteractionId {cons("InteractionId")}
+          
+    "input" InputField+ -> UIOption {cons("UserInput")}
+    
+    %% identifier input field [= text field + validation] 
     "identifier" ":" String                  -> InputField {cons("IdInputField")}
     "identifier" ":" String "=" String       -> InputField {cons("IdInputField")}
     "identifier" ":" String "=" StrategoCall -> InputField {cons("IdInputField")}
@@ -33,10 +38,26 @@
     "text" ":" String "=" StrategoCall -> InputField {cons("TextInputField")}
 
     %% boolean input field 
-    %% boolean choice input field 
-    %% ...
+    %% choice input field 
+    %% list input field
   
      %% Avoid ambiguities with semantic nodes
      "pp-table"  -> SemanticNode {reject}
      "pretty-print"  -> SemanticNode {reject}
      "refactoring"  -> SemanticNode {reject}
+
+lexical syntax
+	
+     %% Predefined Keybindings
+     "Shift+Alt+R"  -> RefactoringKeyBinding  %% Rename
+     "Shift+Alt+I"  -> RefactoringKeyBinding  %% Inline
+     "Shift+Alt+M"  -> RefactoringKeyBinding  %% Extract
+     "Shift+Alt+V"  -> RefactoringKeyBinding  %% Move
+     "Shift+Alt+C"  -> RefactoringKeyBinding  %% Change Signature
+     "Shift+Alt+L"  -> RefactoringKeyBinding  %% Extract Local Variabele
+     "Shift+Ctrl+F" -> RefactoringKeyBinding  %% Format
+     "Ctrl+I"       -> RefactoringKeyBinding  %% Correct Indentation
+     "Shift+Ctrl+C" -> RefactoringKeyBinding  %% Toggle Comment
+     "Shift+Alt+J"  -> RefactoringKeyBinding  %% Generate Element Comment
+     "Shift+Ctrl+M" -> RefactoringKeyBinding  %% Add Import
+     "Shift+Ctrl+O" -> RefactoringKeyBinding  %% Organize Imports

From m.dejonge at tudelft.nl  Thu Jul 21 09:05:38 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Thu, 21 Jul 2011 07:05:38 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23155 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading services
Message-ID: <20110721070538.C0E037F8002@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Thu Jul 21 07:05:38 2011
New Revision: 23155
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23155&sc=1

Log:
shortcut

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Thu Jul 21 07:04:29 2011	(r23154)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Thu Jul 21 07:05:38 2011	(r23155)
@@ -11,6 +11,9 @@
 import java.util.Set;
 import java.util.regex.Pattern;
 
+import javax.swing.text.JTextComponent.KeyBinding;
+
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
@@ -54,8 +57,11 @@
 			String caption = termContents(termAt(aRefactoring, 1));
 			String strategy = termContents(termAt(aRefactoring, 2));
 			IStrategoList options = termAt(aRefactoring, 3);
+			IStrategoTerm userInteractions = termAt(aRefactoring, 4);
 			ArrayList<StrategoRefactoringIdentifierInput> inputFields = 
-				getInputFields(aRefactoring, controller.getEditor());
+				getInputFields(userInteractions, controller.getEditor());
+			String actionDefinitionId = getKeyBinding(userInteractions);
+			//actionDefinitionId = "org.eclipse.jdt.ui.edit.text.java.rename.element";
 			boolean cursor = false;
 			boolean source = false;
 			boolean meta = false;
@@ -88,7 +94,8 @@
 						source, 
 						ppStrategy,
 						semanticNodes,
-						inputFields
+						inputFields,
+						actionDefinitionId
 					)
 				);
 			}
@@ -96,31 +103,42 @@
 		return refactorings;
 	}
 	
+	private static String getKeyBinding(IStrategoTerm userInteractions) {
+		IStrategoTerm keybinding = TermReader.findTerm(userInteractions, "KeyBinding");
+		if(keybinding != null)
+			return TermReader.termContents(keybinding);
+		IStrategoTerm interactionId = TermReader.findTerm(userInteractions, "InteractionId");
+		if(interactionId != null)
+			return TermReader.termContents(interactionId);
+		return null;
+	}
+
 	private static ArrayList<StrategoRefactoringIdentifierInput> getInputFields(
-			IStrategoAppl aRefactoring, EditorState editor) {
+			IStrategoTerm userInteractions, EditorState editor) {
 		ArrayList<StrategoRefactoringIdentifierInput> inputFields = new ArrayList<StrategoRefactoringIdentifierInput>();
-		if(aRefactoring.getSubtermCount() < 5)
-			return inputFields;
-		IStrategoTerm lstInputFields = termAt(aRefactoring, 4);
-		for (int i = 0; i < lstInputFields.getSubtermCount(); i++) {
-			IStrategoAppl input = TermReader.applAt(lstInputFields, i);
-			if(TermReader.hasConstructor(input, "IdInputField")){
-				String label = termContents(termAt(input,0));
-				String defaultValue = "";
-				if(input.getSubtermCount() > 1)
-					defaultValue = termContents(termAt(input,1)); //TODO: Strategy OR String
-				StrategoRefactoringIdentifierInput idInput = 
-					new StrategoRefactoringIdentifierInput(
-						label, 
-						defaultValue, 
-						getIdPattern(editor), 
-						getKeywordRecognizer(editor),
-						getLanguageName(editor)
-					);
-				inputFields.add(idInput);
+		IStrategoTerm userInput = TermReader.findTerm(userInteractions, "UserInput");
+		if(userInput != null){
+			IStrategoTerm userInputList = userInput.getSubterm(0);
+			for (int i = 0; i < userInputList.getSubtermCount(); i++) {
+				IStrategoAppl input = TermReader.applAt(userInputList, i);
+				if(TermReader.hasConstructor(input, "IdInputField")){
+					String label = termContents(termAt(input,0));
+					String defaultValue = "";
+					if(input.getSubtermCount() > 1)
+						defaultValue = termContents(termAt(input,1)); //TODO: Strategy OR String
+					StrategoRefactoringIdentifierInput idInput = 
+						new StrategoRefactoringIdentifierInput(
+							label, 
+							defaultValue, 
+							getIdPattern(editor), 
+							getKeywordRecognizer(editor),
+							getLanguageName(editor)
+						);
+					inputFields.add(idInput);
+				}
+				//TODO other input types
+				//TODO pattern
 			}
-			//TODO other input types
-			//TODO pattern
 		}
 		return inputFields;
 	}

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Thu Jul 21 07:04:29 2011	(r23154)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Thu Jul 21 07:05:38 2011	(r23155)
@@ -44,6 +44,8 @@
 
 public class StrategoRefactoring extends Refactoring implements IRefactoring {
 		
+	private final String actionDefinitionId;
+
 	private final String ppStrategy;
 	
 	private final StrategoObserver observer;
@@ -59,10 +61,6 @@
 	private final IStrategoTerm[] semanticNodes;
 			
 	protected final ArrayList<StrategoRefactoringIdentifierInput> inputFields;
-
-	public ArrayList<StrategoRefactoringIdentifierInput> getInputFields() {
-		return inputFields;
-	}
 	
 	private ArrayList<IPath> affectedFilePaths;
 
@@ -81,9 +79,13 @@
 
 	public String getActionDefinitionId() {
 		// TODO 
-		return "org.eclipse.jdt.ui.edit.text.java.rename.element";
+		return actionDefinitionId;
 	}
-	
+
+	public ArrayList<StrategoRefactoringIdentifierInput> getInputFields() {
+		return inputFields;
+	}
+
 	public void prepareExecute(EditorState editor) {
 		this.node = getSelectionNode(editor);
 		this.fileChanges.clear();
@@ -93,7 +95,7 @@
 
 	public StrategoRefactoring(StrategoObserver observer, String caption, String builderRule,
 			boolean cursor, boolean source, String ppStrategy,
-			IStrategoTerm[] semanticNodes, ArrayList<StrategoRefactoringIdentifierInput> inputFields) {
+			IStrategoTerm[] semanticNodes, ArrayList<StrategoRefactoringIdentifierInput> inputFields, String actionDefinitionId) {
 		this.cursor=cursor;
 		this.source=source;
 		this.ppStrategy=ppStrategy;
@@ -104,6 +106,7 @@
 		this.fileChanges = new HashSet<TextFileChange>();
 		this.inputFields = inputFields;
 		this.affectedFilePaths = new ArrayList<IPath>();
+		this.actionDefinitionId = actionDefinitionId;
 	}
 	
 	@Override

From m.dejonge at tudelft.nl  Fri Jul 22 14:21:13 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Fri, 22 Jul 2011 12:21:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23156 -
	spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project
Message-ID: <20110722122113.A1A66CC056@mx4.tudelft.nl>

Author: MaartjeDeJonge
Date: Fri Jul 22 12:21:13 2011
New Revision: 23156
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23156&sc=1

Log:
parenthesize automatically created for use in layout algorithm

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Thu Jul 21 07:05:38 2011	(r23155)
+++ spoofax-imp/trunk/org.strategoxt.imp.generator/src/sdf2imp/project/create-build-xml.str	Fri Jul 22 12:21:13 2011	(r23156)
@@ -119,7 +119,7 @@
         <mkdir dir="${lib}"/>
         <mkdir dir="${syntax}"/>
 
-        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
+        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone,sdf2parenthesize"/>
         
         <target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
             <java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
@@ -323,6 +323,37 @@
             </java>
         </target>
         
+        <target name="sdf2parenthesize" depends="pack-sdf,copy-sdf">
+            <dependset>
+                <srcfileset file="${include}/${sdfmodule}.def"/>
+                <targetfileset file="${include}/${sdfmodule}-parenthesize.str"/>
+            </dependset>
+            <available file="${include}/${sdfmodule}-parenthesize.str" property="sdf2parenthesize.available"/>
+            <antcall target="sdf2parenthesize.helper"/>
+        </target>
+
+        <target name="sdf2parenthesize.helper" unless="sdf2parenthesize.available">
+            <java classname="run" failonerror="true">
+                <arg value="org.strategoxt.tools.main-sdf2parenthesize"/>
+                <arg value="-i"/>
+                <arg value="${include}/${sdfmodule}.def"/>
+                <arg value="-m"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="-o"/>
+                <arg value="${include}/${sdfmodule}-parenthesize.str"/>
+                <arg value="--omod"/>
+                <arg value="include/${sdfmodule}-parenthesize"/>
+                <arg value="--main-strategy"/>
+                <arg value="io-${sdfmodule}-parenthesize"/>
+                <arg value="--lang"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--rule-prefix"/>
+                <arg value="${sdfmodule}"/>
+                <arg value="--sig-module"/>
+                <arg value="include/${sdfmodule}"/>
+            </java>
+        </target>
+        
         <target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
             <dependset>
                 <srcfileset file="${include}/${sdfmodule}.def"/>
@@ -494,149 +525,149 @@
                 
         <!-- begin: targets used for adding debugging instrumentation to stratego -->
         
-		<!-- 
-			if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
-			Only used by stratego.jvm.helper.debug 
-		-->
-		<condition property="transformer-output" value="" else="--output-rtree">
-			<isset property="debug.the.debug.transformer"/>
-		</condition>
-		
-		<!-- 
-			if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
-			if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
-			Only used by stratego.jvm.helper.debug
-		-->
-		<condition property="strj.input.file.type" value="str" else="rtree">
-			<isset property="debug.the.debug.transformer"/>
-		</condition>
+        <!-- 
+            if "debug.the.debug.transformer" is set, debug the debug instrumentation, do not output rtree-files, but str-files
+            Only used by stratego.jvm.helper.debug 
+        -->
+        <condition property="transformer-output" value="" else="--output-rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
+        
+        <!-- 
+            if debug.the.debug.transformer is set then the debug.transformer outputs str files, so the strj-compiler should accept a str-file.
+            if debug.the.debug.transformer is NOT set then the debug.transformer outputs rtree files (much faster generated), so the strj-compiler should accept a rtree-file
+            Only used by stratego.jvm.helper.debug
+        -->
+        <condition property="strj.input.file.type" value="str" else="rtree">
+            <isset property="debug.the.debug.transformer"/>
+        </condition>
         
         <!-- value determines which target will be executed.
-        	If the file ".debugmode" can be found in the project root call stratego.jar.debug
-        	else call stratego.jar
+            If the file ".debugmode" can be found in the project root call stratego.jar.debug
+            else call stratego.jar
         -->
         <condition property="stratego.jar.target" value="call.stratego.jar.debug" else="call.stratego.jar">
             <available file=".debugmode"/>
         </condition>
-		
-		<!-- will save the stratego files with debug info in this folder -->
-		<property name="trans-debug" location="trans-debug"/>
-		
-		<!-- this helper target determines what target to call, based on debug.build.enabled -->
-		<target name="stratego.jar.helper">
-			<antcall target="${stratego.jar.target}" />
-		</target>
-		
-		<!-- call stratego.jar unless debug.build.enabled property is set --> 
-		<target name="call.stratego.jar" depends="stratego.jar">
-			<echo message="call.stratego.jar - ${stratego.jar.target}"/>
-		</target>
-		
-		<!-- call stratego.jar.debug when debug.build.enabled property is set -->
-		<target name="call.stratego.jar.debug" depends="stratego.jar.debug">
-			<echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
-		</target>
-		
-		<!-- copy stratego runtime jars to utils folder -->
-		<target name="utils-files-debug" depends="utils-files">
-			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
-			<copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
-		</target>
-		
-	    <!-- Stratego to Java compiler with debugging capabilities -->
-	    <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
-	        <dependset>
-	            <srcfileset dir="${basedir}">
-	                <include name="**/*.str"/>
-	                <include name="**/*.astr"/>
-	                <exclude name="lib/editor-common.generated.str"/>
-	            </srcfileset>
-	            <targetfileset file="${src-gen}/trans/Main.java"/>
-	        </dependset>
-	        <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
-	        <antcall target="copy-jar"/>
-	        <antcall target="stratego.jar.deletehelper"/>
-	    	<!-- compile stratego to java -->
-	        <antcall target="stratego.jvm.helper.debug">
-	            <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
-	            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
-	        </antcall>
-	    	<!-- compile java to class -->
-	        <javac 
-	        	destdir="${build}" 
-	        	source="1.5" 
-	        	target="1.5" 
-	        	debug="on">
-	    		<!-- attribute in javac: srcdir="${src-gen}" -->
-	    		<src path="${src-gen}"/>
-	        	<!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
-	        	<classpath>
-	        		<pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
-	        		<pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
-	        		<pathelement location="utils/stratego-debug-runtime-java.jar"/>
-	        	</classpath>
-	        	<!-- attribute in javac: includes="trans/**"  -->
-	        	<include name="trans/**"/>
-	    	</javac>
-	        <!-- copy imported terms -->
-	        <copy todir="${build}/trans">
-	            <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
-	        </copy>
-	    	<!-- create a jar from the class files -->
-	        <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
-	        <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
-	        <delete><fileset dir="${build}" includes="trans/**"/></delete>
-	    </target>
-		
-		<!-- instrument the stratego program and compile it to java -->
-	    <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
-	    	<echo message="generate stratego with debug information" />
-	    	<echo message="${basedir}"/>
-	    	<available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
-	    	<!-- add debug information -->
-	  		<java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
-	  		     <classpath>
-					<pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
-	  		     	<pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
-	  		     	<pathelement location="${eclipse.spoofaximp.strategojar}" />
-	  		     </classpath>
-	  			<arg value="-i"/>
-	  			<arg value="${trans}/${strmodule}.str"/>
-	  			<arg value="--gen-dir"/>
-	  			<arg value="${trans-debug}"/>
-	  			<arg value="--base-dir"/> <!-- set the basedir to the project dir -->
-	  			<arg value="${basedir}"/>
-	  			<!-- "arg line='val'" val should contain space-separated arguments --> 
-	  			<arg line="--charoffset-converter --fail-catch ${transformer-output}" />
-	  			
-	  			<!-- arguments should start with two '-'-characters -->
-	  			<!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
-	  			<!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
-	  			<!-- <arg value="-output-rtree"/> --> 
-	    	</java>
-	    	<!-- now compile instrumented stratego to java -->
-	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-	        <java classname="org.strategoxt.strj.Main" failonerror="true">
-	            <arg value="-i"/>
-	            <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
-	            <arg value="-o"/>
-	            <arg value="${build.stratego.outputfile}"/>
-	            <arg value="-p"/>
-	            <arg value="trans"/>
-	            <arg value="--library"/>
-	            <arg value="--clean"/>
-	            <arg line="${build.stratego.args}"/>
-	            <arg line="${build.stratego.extraargs}"/>
-	            <arg line="${externaljarflags}"/>
-	            <arg line="${externaldefimport}"/>
-	            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
-	        	<!-- put strategodebuglib.rtree on the include path -->
-	        	<arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;" />
-	        	<arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans" />
-	        </java>
-	        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
-	        <mkdir dir="${build}/trans"/>
-	    </target>
+        
+        <!-- will save the stratego files with debug info in this folder -->
+        <property name="trans-debug" location="trans-debug"/>
+        
+        <!-- this helper target determines what target to call, based on debug.build.enabled -->
+        <target name="stratego.jar.helper">
+            <antcall target="${stratego.jar.target}" />
+        </target>
+        
+        <!-- call stratego.jar unless debug.build.enabled property is set --> 
+        <target name="call.stratego.jar" depends="stratego.jar">
+            <echo message="call.stratego.jar - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- call stratego.jar.debug when debug.build.enabled property is set -->
+        <target name="call.stratego.jar.debug" depends="stratego.jar.debug">
+            <echo message="call.stratego.jar.debug - ${stratego.jar.target}"/>
+        </target>
+        
+        <!-- copy stratego runtime jars to utils folder -->
+        <target name="utils-files-debug" depends="utils-files">
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-jar}" todir="utils" failonerror="false"/>
+            <copy file="${eclipse.spoofaximp.stratego-debug-runtime-java-jar}" todir="utils" failonerror="false"/>
+        </target>
+        
+        <!-- Stratego to Java compiler with debugging capabilities -->
+        <target name="stratego.jar.debug" depends="rtg2sig,utils-files-debug">
+            <dependset>
+                <srcfileset dir="${basedir}">
+                    <include name="**/*.str"/>
+                    <include name="**/*.astr"/>
+                    <exclude name="lib/editor-common.generated.str"/>
+                </srcfileset>
+                <targetfileset file="${src-gen}/trans/Main.java"/>
+            </dependset>
+            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
+            <antcall target="copy-jar"/>
+            <antcall target="stratego.jar.deletehelper"/>
+            <!-- compile stratego to java -->
+            <antcall target="stratego.jvm.helper.debug">
+                <param name="build.stratego.outputfile" value="${src-gen}/trans/Main.java"/>
+                <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
+            </antcall>
+            <!-- compile java to class -->
+            <javac 
+                destdir="${build}" 
+                source="1.5" 
+                target="1.5" 
+                debug="on">
+                <!-- attribute in javac: srcdir="${src-gen}" -->
+                <src path="${src-gen}"/>
+                <!-- attribute in javac: classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"  -->
+                <classpath>
+                    <pathelement path="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}"/> <!-- the path attribute accepts colon- or semicolon-separated lists of locations -->
+                    <pathelement location="utils/stratego-debug-runtime.jar"/> <!-- The location attribute specifies a single file or directory relative to the project's base directory (or an absolute filename) -->
+                    <pathelement location="utils/stratego-debug-runtime-java.jar"/>
+                </classpath>
+                <!-- attribute in javac: includes="trans/**"  -->
+                <include name="trans/**"/>
+            </javac>
+            <!-- copy imported terms -->
+            <copy todir="${build}/trans">
+                <fileset dir="${src-gen}/trans" excludes="**/*.java"/>
+            </copy>
+            <!-- create a jar from the class files -->
+            <jar basedir="${build}" includes="trans/**" destfile="${include}/${strmodule}.tmp.jar"/>
+            <move file="${include}/${strmodule}.tmp.jar" tofile="${include}/${strmodule}.jar"/>
+            <delete><fileset dir="${build}" includes="trans/**"/></delete>
+        </target>
+        
+        <!-- instrument the stratego program and compile it to java -->
+        <target name="stratego.jvm.helper.debug" unless="strc-java.available" if="build.stratego.enabled">
+            <echo message="generate stratego with debug information" />
+            <echo message="${basedir}"/>
+            <available classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" property="transformer.available"/>
+            <!-- add debug information -->
+              <java classname="org.strategoxt.imp.debug.stratego.transformer.trans.Main" failonerror="true" fork="true">
+                   <classpath>
+                    <pathelement location="${eclipse.spoofaximp.stratego-transformer-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.stratego-transformer-java-jar}"/>
+                       <pathelement location="${eclipse.spoofaximp.strategojar}" />
+                   </classpath>
+                  <arg value="-i"/>
+                  <arg value="${trans}/${strmodule}.str"/>
+                  <arg value="--gen-dir"/>
+                  <arg value="${trans-debug}"/>
+                  <arg value="--base-dir"/> <!-- set the basedir to the project dir -->
+                  <arg value="${basedir}"/>
+                  <!-- "arg line='val'" val should contain space-separated arguments --> 
+                  <arg line="--charoffset-converter --fail-catch ${transformer-output}" />
+                  
+                  <!-- arguments should start with two '-'-characters -->
+                  <!-- <arg value="-charoffset-converter"/> --> <!-- create charoffset table -->
+                  <!-- <arg value="-fail-catch"/>  --> <!-- catch failures in where/with-clauses in rules -->
+                  <!-- <arg value="-output-rtree"/> --> 
+            </java>
+            <!-- now compile instrumented stratego to java -->
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <java classname="org.strategoxt.strj.Main" failonerror="true">
+                <arg value="-i"/>
+                <arg value="${trans-debug}/trans/${strmodule}.${strj.input.file.type}"/>
+                <arg value="-o"/>
+                <arg value="${build.stratego.outputfile}"/>
+                <arg value="-p"/>
+                <arg value="trans"/>
+                <arg value="--library"/>
+                <arg value="--clean"/>
+                <arg line="${build.stratego.args}"/>
+                <arg line="${build.stratego.extraargs}"/>
+                <arg line="${externaljarflags}"/>
+                <arg line="${externaldefimport}"/>
+                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
+                <!-- put strategodebuglib.rtree on the include path -->
+                <arg line="-I &quot;${eclipse.spoofaximp.strategodebuglib-folder}&quot;" />
+                <arg line="-la org.strategoxt.imp.debug.stratego.runtime.trans" />
+            </java>
+            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
+            <mkdir dir="${build}/trans"/>
+        </target>
         
         
         <!-- end: targets used for adding debugging instrumentation to stratego -->

From M.A.Akhter at student.tudelft.nl  Sun Jul 24 23:05:13 2011
From: M.A.Akhter at student.tudelft.nl (Md Adil Akhter)
Date: Sun, 24 Jul 2011 21:05:13 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23157 - in
	spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans: .
	codegen context normalize utils
Message-ID: <20110724210513.18C73CC0B8@mx4.tudelft.nl>

Author: MdAdilAkhter
Date: Sun Jul 24 21:05:12 2011
New Revision: 23157
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23157&sc=1

Log:
Added codes for 
* renaming  bound strategy declaration/references 
* incremental code generation 

+ some refactoring

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
   spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Fri Jul 22 12:21:13 2011	(r23156)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/compile.str	Sun Jul 24 21:05:12 2011	(r23157)
@@ -162,14 +162,14 @@
 		where
 			<debug-compiler>$[compile-spx-package| Planning to compile : [<pp-aterm>]]
 		where
-			if should-compile-this-package  then //FOR handling circular referneces
-				// Making this package as currently being compiled
+			if should-compile-this-package  then //For handling circular referneces of packages marking this package as currently being compiled
 				where(
 					rules(
 						currently-compiling-package : package-typed-qname -> package-typed-qname
 					)
 				);
 				// Getting List of Packages/Modules that this package is depending on.
+				// Idea is to analyze/compile the dependent package first.
 				<get-all-usings>untyped-qname => depending-typedqname*
 			  ;<debug-compiler>$[	compile-spx-package | List of dependending-on packages/modules : [<pp-aterm>depending-typedqname*]]
 				// Start Compiling the dependent Spx Artifacts
@@ -180,11 +180,10 @@
 						// Now, since all the depending-on artifacts are compiled
 						// start compiling the enclosing modules of this package.
 						// Note: currently we are not considering any nested packages.
-						<declare-package>package-typed-qname;
+						<declare-spx-global-symbols>package-typed-qname;
 						<list-loop(compile-spx-module)><get-enclosed-modules>package-typed-qname
 
 				|};
-
 				// Making this package as compiled.
 				// TODO : consider keeping only 1 DR as a marker for compiled package.
 				where(
@@ -232,7 +231,7 @@
 				module-decl := <get-module-declaration>module-typed-qname;
 				{|GetEnclosingModuleName:
 						<declare-current-module-scope> module-typed-qname;
-						<delcare-module>module-decl
+						<delcare-spx-scoped-symbols>module-decl
 				|};
 				where(rules(CompiledModule: module-typed-qname -> module-typed-qname))
 			else

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Fri Jul 22 12:21:13 2011	(r23156)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/generate.str	Sun Jul 24 21:05:12 2011	(r23157)
@@ -25,27 +25,10 @@
 	utils/cache
 	analyze/main
 	codegen/generate
-
-rules 
-	
-	refresh-file = is-in-command-line-mode  < id + refresh-workspace-file 
-
-//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
-//TODO: OPTIMIZE : DR can be used to construct this imports  
-rules 
-	
-	init-code-generation = where(<emit-default-signatures>()) 
-	
-	generate-all = emit-sdf;emit-signatures ; emit-str <+ debug(!" Failed in Generate-all. "); fail
-
-	generate-main = 
-			?module-qname* ;generate-sdf-main;generate-str-main ; generate-esv-main 
-		<+ 
-			debug(!" Failed in Main Generation. "); fail    
 			
 		
 strategies 
-	build-all = 
+	build-all(gen-code) = 
 		?current-term
 		;new-compile-session(
 			list-of-package-qname* := <get-package-list> 
@@ -54,19 +37,63 @@
 			;<get-all-analyzed-problems>() => problems  
 			;if <fail-if-has-errors>problems then
 			 	{| ImportedDef : 
-			 	 			<debug>$[-------------------Generating artifacts-------------------]
-			 				;init-code-generation  
-							;<list-loop(generate-spx-package)>list-of-package-qname*
-							;<debug>$[-------------------------Generating Build Scipt---------------------]
-							;<emit-build-script> <filter(has-language-name-configured)>list-of-package-qname*
-							;<debug>$[-------------------------Code Generation is done-------------------------]
+							<gen-code>() 
 				|} 		
 			else
 				<debug>$[Please fix the errors before building the artifacts:  [<pp-aterm-forced>problems]]
 			end		 
 		)
 		;!current-term //restoring current term to avoid side effects  
-		
+
+	
+	generate-artifacts-all : () -> ()
+		where
+			<debug>$[-------------------Generating artifacts-------------------]
+			;init-code-generation
+		  ;list-of-package-qname* := <get-package-list>   
+			;<debug>$[-------------------Generating artifacts for following ALL spx -------------------]
+			;<list-loop(generate-spx-package)>list-of-package-qname*
+			;<debug>$[-------------------------Generating Build Scipt---------------------]
+			;<emit-build-script> <filter(has-language-name-configured)>list-of-package-qname*
+			;<debug>$[-------------------------Code Generation is done-------------------------] 
+
+
+	generate-artifacts-incrementally : () -> ()
+		where
+			<debug>$[-------------------Generating artefacts-------------------]
+			;init-code-generation
+		  ;seperate-compilable-spx-files := <get-all-modified-compilation-units>
+		  ;if !seperate-compilable-spx-files => [] then 
+		  	<debug>$[-------------------------No Changes found-------------------------] 
+		  else	 
+			  list-of-package-qname* := <get-packages-of-file>seperate-compilable-spx-files   
+				;<debug>$[-------------------Generating artifacts for following spx : [<pp-aterm>seperate-compilable-spx-files]-------------------]
+				;<list-loop(generate-spx-package)>list-of-package-qname*
+				;<debug>$[-------------------------Generating Build Scipt---------------------]
+				;<emit-build-script> <filter(has-language-name-configured)>list-of-package-qname*
+		 	end
+		 	;<debug>$[-------------------------Code Generation is done-------------------------] 
+
+		 			
+	get-packages-of-file = mapconcat(get-packages-of-file) ; make-set 
+				
+rules 
+	
+	refresh-file = is-in-command-line-mode  < id + refresh-workspace-file 
+
+//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
+//TODO: OPTIMIZE : DR can be used to construct this imports  
+rules 
+	
+	init-code-generation = where(<emit-default-signatures>()) 
+	
+	generate-all = emit-sdf;emit-signatures ; emit-str <+ debug(!" Failed in Generate-all. "); fail
+
+	generate-main = 
+			?module-qname* ;generate-sdf-main;generate-str-main ; generate-esv-main 
+		<+ 
+			debug(!" Failed in Main Generation. "); fail    
+
 rules
 
 	should-generate-code-this-package = 
@@ -77,7 +104,7 @@
 	generate-spx-package: 
 		package-typed-qname at Package(untyped-qname) -> <id>
 		where 
-			<debug-compiler> $[Generate| Generate code for spx-package| Planning to Generate Artifacts : [<pp-aterm>]] 
+			<debug-compiler> $[Generate| Generate code for spx-package| Generating Artifacts for following package: [<pp-aterm>]] 
 		with 
 			enclosed-module-typed-qnames := <get-enclosed-modules>package-typed-qname
 		where

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Fri Jul 22 12:21:13 2011	(r23156)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/codegen/main.str	Sun Jul 24 21:05:12 2011	(r23157)
@@ -5,8 +5,11 @@
 	codegen/sdf/-
 	codegen/str/-
 	codegen/esv/-
+	
 imports
 	codegen/buildscripts
+	codegen/generate
+	
 imports 
 	config 
 	utils/cache
@@ -61,8 +64,23 @@
 		with
 	  	 enable-compiler-debugging
 	  	;<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
-	  	;<build-all>()
+	  	;<build-all(generate-artifacts-all)>()
 	  	;disable-compiler-debugging
+	
+	build-incrementally:
+		(selected, position, ast, path, project-path) -> None()
+		where
+			 <debug>$[.................starting compile + build all ..........................]
+		with
+			editor-init	
+		 ;rules(ProjectPath := project-path)
+		 ;initialize-configuration
+		with
+	  	 enable-compiler-debugging
+	  	;<cache-currently-analyzing-ast>(<concat-strings>[project-path, "/" ,path] , ast)	 
+	  	;<build-all(generate-artifacts-incrementally)>()
+	  	;disable-compiler-debugging
+	
 		
 rules
 	//Intregation Test of the compile-all is working as expected 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Fri Jul 22 12:21:13 2011	(r23156)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/common.str	Sun Jul 24 21:05:12 2011	(r23157)
@@ -166,4 +166,72 @@
     with
     	filedescr := <fopen> (fileName, "w+")
       ;<fputs>(fileContent , filedescr)
-      ;<fclose>filedescr			 
\ No newline at end of file
+      ;<fclose>filedescr	
+       
+       
+ rules // scoped renaming
+	
+	/**
+	* executes the renaming strategy s in a new scope
+	* 
+	* declarations inside the new scope will hide existing declarations outside the new scope
+	* multiple declarations with the same name inside the new scope will be renamed to the same name
+	*
+	* @param renaming strategy s: a -> b
+	* @type a -> b
+	*/
+	new-scope(s) :
+		x -> y
+		where 
+			<debug-compiler> $[Entering scope [<pp-aterm> x].]
+		where
+			<newname> x => scope ;
+			{| Renamed, RenamedInScope, CurrentScope:
+				rules (CurrentScope: _ -> scope) ;
+				<s> x => y
+			|} 
+		where 
+			<debug-compiler> $[Leaving scope [<pp-aterm> x].]
+			
+	/**
+	* annotates the current term with a fresh name
+	* can distinguish different namespaces
+	* remembers the renaming by storing two dynamic rules
+	* 
+	* multiple calls on the same term inside the same scope will give identical results
+	* calls inside a new scope will hide the results of calls to the same term from outer scopes
+	*
+	* @param namespace 
+	* @type a -> a
+	*/
+	rename-declaration(|namespace) : 
+		x -> x'
+		where 
+			CurrentScope => scope ;
+			(
+				<RenamedInScope> (namespace, scope, x) => x' <+
+				x' := x{<newname> x}
+			)
+		where rules(
+			RenamedInScope: (namespace, scope, x) -> x' 
+			Renamed: (namespace, x) -> x'
+		)
+		where 
+			<debug-compiler> $[Renamed declaration [<pp-aterm> x] to [<pp-aterm> x'] in namespace [<pp-aterm> namespace].]
+	
+	/**
+	* annotates the current term with a new name
+	* succeeds only if rename-declaration was called before on the same term
+	* will use the same name as rename-declaration (by calling the dynamic rule stored by rename-declaration)
+	*
+	* @param namespace 
+	* @type a -> b
+	*/
+	rename-reference(|namespace) :
+			x -> x'
+		where
+			<Renamed> (namespace, x) => x'
+		where 
+			<debug-compiler> $[Renamed reference [<pp-aterm> x] to [<pp-aterm> x'] in namespace [<pp-aterm> namespace].]
+
+ 			 
\ No newline at end of file

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Fri Jul 22 12:21:13 2011	(r23156)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/context/declare.str	Sun Jul 24 21:05:12 2011	(r23157)
@@ -19,7 +19,7 @@
 	common
 
 rules
-	declare-package =
+	declare-spx-global-symbols =
 		contracts(
 			contract-requires(
 				?Package(QName(_))
@@ -35,7 +35,7 @@
 		)
 
 	
-	delcare-module =  
+	delcare-spx-scoped-symbols =  
 		declare-internal(declare-local-symbols-main)
 	
 	declare-local-symbols-main = 

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Fri Jul 22 12:21:13 2011	(r23156)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/normalize/main.str	Sun Jul 24 21:05:12 2011	(r23157)
@@ -62,7 +62,7 @@
 			|}
 
 	// desugaring package-wide imports
-	// TODO Consider : Deprecate 
+	// TODO  :  Consider as  Deprecate 
 	desugar-imports:
 		i at Imports(import*) -> i
 		with

Modified: spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Fri Jul 22 12:21:13 2011	(r23156)
+++ spoofax-imp/trunk/org.strategoxt.imp.editors.spoofax/trans/utils/cache.str	Sun Jul 24 21:05:12 2011	(r23157)
@@ -12,20 +12,28 @@
     with
     	full-path := <resolve-spx-path>path;
     	cache-path := <resolve-cache-path> full-path;
-			if not(<CachedCompilationUnit> full-path) then
+    	path' := <get-normalized-path> full-path;
+    	if not(<CachedCompilationUnit> full-path) then
       	if not( spx-compilation-unit:=  <CachedParseAst> <string-replace(|"\\", "/")>full-path) then
 					if <is-newer> (cache-path, path) then
+          	// Cache is still valid. 
           	spx-compilation-unit := <ReadFromFile> cache-path
           else
+          	// Invalid cache. So reading it from actual source and parsing it. 
           	spx-compilation-unit := <parse-file> full-path;
             if <file-exists> full-path then
             	// Only cache if on filesystem (e.g., ignore libstratego-lib)
               <WriteToBinaryFile> (cache-path, spx-compilation-unit)
+              // Marking this compilation unit for 
+          		// seperate compilation.
+          		;rules ( 
+ 			  				modified-compilation-units: path'    
+ 			  			)
             end
           end
  				end;
- 				path' := <string-replace(|"\\", "/")>full-path;
- 			  rules (
+ 				//TODO : delete the following dynamic rules since it is no longer used
+ 				rules (
  			  	CachedCompilationUnit: path' -> (cache-path,spx-compilation-unit)
  			  );
  			  {| currently-precompiling-spx-abspath:
@@ -40,6 +48,8 @@
   		<debug-compiler>$[Caching |Storing CompilationUnit: [<pp-aterm>full-path]]
 
 rules 
+	get-normalized-path = string-replace(|"\\", "/")
+	
 	cache-lib-ast : a@( name , ast) -> a
 	where
 		<spx-lib-cache-path> name => lib-cache-path
@@ -98,5 +108,7 @@
 
 
 	
+rules 
 	
+	get-all-modified-compilation-units = 	all-keys-modified-compilation-units
 					
\ No newline at end of file

From srabbelier at gmail.com  Tue Jul 26 15:13:58 2011
From: srabbelier at gmail.com (Sverre Rabbelier)
Date: Tue, 26 Jul 2011 13:13:58 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23158 -
	strategoxt/trunk/stratego-libraries/lib/spec/lang
Message-ID: <20110726131358.BD2DF108C002@mx3.tudelft.nl>

Author: SverreRabbelier
Date: Tue Jul 26 13:13:57 2011
New Revision: 23158
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23158&sc=1

Log:
Fix dr-eq-rule-sets

Modified:
   strategoxt/trunk/stratego-libraries/lib/spec/lang/dynamic-rules.str

Modified: strategoxt/trunk/stratego-libraries/lib/spec/lang/dynamic-rules.str
==============================================================================
--- strategoxt/trunk/stratego-libraries/lib/spec/lang/dynamic-rules.str	Sun Jul 24 21:05:12 2011	(r23157)
+++ strategoxt/trunk/stratego-libraries/lib/spec/lang/dynamic-rules.str	Tue Jul 26 13:13:57 2011	(r23158)
@@ -2066,7 +2066,7 @@
         ?(RuleScope(lbl1, tbl1), RuleScope(lbl2, tbl2))
       ; <iset-eq(|lbl2)> lbl1
       ; <hashtable-eq> (tbl1, tbl2)
-    +   ?(ChangeSet(lbl1, rmset1, tbl1), ChangeSet(lbl2, rmset1, tbl2))
+    +   ?(ChangeSet(lbl1, rmset1, tbl1), ChangeSet(lbl2, rmset2, tbl2))
       ; <iset-eq(|lbl2)> lbl1
       ; <iset-eq(|rmset2)> rmset1
       ; <hashtable-eq> (tbl1, tbl2)

From m.dejonge at tudelft.nl  Tue Jul 26 18:19:32 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Tue, 26 Jul 2011 16:19:32 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23159 - in
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime:
	dynamicloading services
Message-ID: <20110726161932.DEE007F8254@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Tue Jul 26 16:19:32 2011
New Revision: 23159
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23159&sc=1

Log:
eagerInit for refactorings to initialyse dynamic keybindings

Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IRefactoring.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	Tue Jul 26 13:13:57 2011	(r23158)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/DynamicParseController.java	Tue Jul 26 16:19:32 2011	(r23159)
@@ -89,6 +89,7 @@
 		OnSaveServiceFactory.eagerInit(descriptor, parser, lastEditor);
 		TokenColorerHelper.register((SGLRParseController) parser, lastEditor);
 		StrategoObserverPartListener.register(lastEditor);
+		RefactoringFactory.eagerInit(descriptor, parser, lastEditor);
 	}
 
 	public IAnnotationTypeInfo getAnnotationTypeInfo() {

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Tue Jul 26 13:13:57 2011	(r23158)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/dynamicloading/RefactoringFactory.java	Tue Jul 26 16:19:32 2011	(r23159)
@@ -7,14 +7,20 @@
 import static org.strategoxt.imp.runtime.dynamicloading.TermReader.termContents;
 
 import java.util.ArrayList;
+import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.Set;
 import java.util.regex.Pattern;
 
-import javax.swing.text.JTextComponent.KeyBinding;
-
+import org.eclipse.core.resources.IProject;
 import org.eclipse.core.runtime.IPath;
+import org.eclipse.imp.parser.IParseController;
 import org.eclipse.imp.services.ILanguageSyntaxProperties;
+import org.eclipse.jface.action.Action;
+import org.eclipse.jface.action.IAction;
+import org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.ui.PlatformUI;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
@@ -25,13 +31,15 @@
 import org.strategoxt.imp.runtime.services.IRefactoring;
 import org.strategoxt.imp.runtime.services.IRefactoringMap;
 import org.strategoxt.imp.runtime.services.RefactoringMap;
+import org.strategoxt.imp.runtime.services.StrategoAnalysisQueueFactory;
 import org.strategoxt.imp.runtime.services.StrategoObserver;
 import org.strategoxt.imp.runtime.services.StrategoRefactoring;
 import org.strategoxt.imp.runtime.services.StrategoRefactoringIdentifierInput;
+import org.strategoxt.imp.runtime.services.StrategoRefactoringWizard;
 import org.strategoxt.imp.runtime.services.SyntaxProperties;
 
 public class RefactoringFactory extends AbstractServiceFactory<IRefactoringMap> {
-
+	
 	public RefactoringFactory() {
 		super(IRefactoringMap.class, false); // not cached; depends on derived editor relation
 	}
@@ -40,8 +48,64 @@
 	public IRefactoringMap create(Descriptor descriptor, SGLRParseController controller)
 			throws BadDescriptorException {
 		Set<IRefactoring> refactorings = collectRefactorings(descriptor, controller);
+		setRefactoringActions(controller.getEditor(), refactorings);
 		return new RefactoringMap(refactorings);
 	}
+	
+	/**
+	 * Eagerly initializes refactorings so that they can be triggered by their shortcuts.
+	 */
+	public static void eagerInit(Descriptor descriptor, IParseController controller, final EditorState editor) {
+		Set<IRefactoring> refactorings = new HashSet<IRefactoring>();
+		if (editor != null && controller instanceof SGLRParseController) {
+			try {
+				refactorings = collectRefactorings(descriptor, (SGLRParseController) controller);
+				setRefactoringActions(editor, refactorings);
+			} catch (BadDescriptorException e) {
+				Environment.logException("Could not eagerly initialize the content proposal service", e);
+			}
+		}
+	}
+
+	private static void setRefactoringActions(final EditorState editor, Set<IRefactoring> refactorings) {
+		for (final IRefactoring refactoring : refactorings) {
+			IAction action = new Action(refactoring.getCaption()) {
+				@Override
+				public void run() {
+					executeRefactoring(editor, refactoring);
+				}
+			};
+			action.setActionDefinitionId(refactoring.getActionDefinitionId());
+			editor.getEditor().getSite().getKeyBindingService().registerAction(action);
+			refactoring.setAction(action);
+		}
+	}
+	
+	private static void executeRefactoring(EditorState editor, IRefactoring refactoring) {
+		PlatformUI.getWorkbench().saveAllEditors(false);
+		refactoring.prepareExecute(editor);
+		StrategoRefactoringWizard wizard = new StrategoRefactoringWizard(
+			(StrategoRefactoring) refactoring, 
+			refactoring.getCaption()
+		);
+		RefactoringWizardOpenOperation operation= new RefactoringWizardOpenOperation(wizard);
+		Shell shell = editor.getEditor().getSite().getShell();
+		try {
+			operation.run(shell, refactoring.getCaption());
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+		queueAnalysisAffectedFiles(refactoring, editor);
+	}
+
+	//Queue analysis for affected asts, 
+	//dyn rules may be out of sync after re-analysis asts + abort refactoring)
+	private static void queueAnalysisAffectedFiles(IRefactoring refactoring, EditorState editor) {		
+		IProject project = editor.getProject().getRawProject();
+		for (IPath projectRelativePath : refactoring.getRelativePathsOfAffectedFiles()) {
+			StrategoAnalysisQueueFactory.getInstance().queueAnalysis(projectRelativePath, project);			
+		}
+	}
 
 	private static Set<IRefactoring> collectRefactorings(Descriptor d, SGLRParseController controller) throws BadDescriptorException {
 		Set<IRefactoring> refactorings = new LinkedHashSet<IRefactoring>();
@@ -143,23 +207,6 @@
 		return inputFields;
 	}
 
-	/*
-	private static ArrayList<StrategoRefactoringIdentifierInput> getInputFields(
-			IStrategoAppl aRefactoring, EditorState editor) {
-		ArrayList<StrategoRefactoringIdentifierInput> inputFields = new ArrayList<StrategoRefactoringIdentifierInput>();
-		//TODO: read them from builder
-		StrategoRefactoringIdentifierInput idInput1 = 
-			new StrategoRefactoringIdentifierInput(
-				"New name", 
-				"", 
-				getIdPattern(editor), 
-				getKeywordRecognizer(editor),
-				getLanguageName(editor)
-			);
-		inputFields.add(idInput1);
-		return inputFields;
-	}*/
-
 	private static String getLanguageName(EditorState editor) {
 		try {
 			return editor.getDescriptor().getLanguage().getName();

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IRefactoring.java	Tue Jul 26 13:13:57 2011	(r23158)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/IRefactoring.java	Tue Jul 26 16:19:32 2011	(r23159)
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 
 import org.eclipse.core.runtime.IPath;
+import org.eclipse.jface.action.IAction;
 import org.strategoxt.imp.runtime.EditorState;
 
 /**
@@ -21,4 +22,8 @@
 	boolean isDefinedOnSelection(EditorState editor);
 
 	ArrayList<IPath> getRelativePathsOfAffectedFiles();
+
+	void setAction(IAction action);
+
+	IAction getAction();
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java	Tue Jul 26 13:13:57 2011	(r23158)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/RefactoringButtonDelegate.java	Tue Jul 26 16:19:32 2011	(r23159)
@@ -1,21 +1,14 @@
 package org.strategoxt.imp.runtime.services;
 
-import org.eclipse.core.resources.IProject;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.ActionContributionItem;
 import org.eclipse.jface.action.IAction;
-import org.eclipse.ltk.ui.refactoring.RefactoringWizardOpenOperation;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.MenuItem;
-import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.IWorkbenchWindowPulldownDelegate;
-import org.eclipse.ui.PlatformUI;
 import org.strategoxt.imp.runtime.EditorState;
 import org.strategoxt.imp.runtime.Environment;
 import org.strategoxt.imp.runtime.dynamicloading.BadDescriptorException;
-import org.strategoxt.imp.runtime.stratego.EditorIOAgent;
 
 public class RefactoringButtonDelegate extends ToolbarButtonDelegate implements IWorkbenchWindowPulldownDelegate {
 
@@ -34,33 +27,7 @@
 		if (refactoring == null) {
 			openError("No Refactorings defined for the current selection");
 		} else {
-			executeRefactoring(editor, refactoring);
-		}
-	}
-
-	private void executeRefactoring(EditorState editor, IRefactoring refactoring) {
-		PlatformUI.getWorkbench().saveAllEditors(false);
-		refactoring.prepareExecute(editor);
-		StrategoRefactoringWizard wizard = new StrategoRefactoringWizard(
-			(StrategoRefactoring) refactoring, 
-			refactoring.getCaption()
-		);
-		RefactoringWizardOpenOperation operation= new RefactoringWizardOpenOperation(wizard);
-		Shell shell = editor.getEditor().getSite().getShell();
-		try {
-			operation.run(shell, refactoring.getCaption());
-		} catch (Exception e) {
-			e.printStackTrace();
-		}
-		queueAnalysisAffectedFiles(refactoring, editor);
-	}
-
-	//Queue analysis for affected asts, 
-	//dyn rules may be out of sync after re-analysis asts + abort refactoring)
-	private void queueAnalysisAffectedFiles(IRefactoring refactoring, EditorState editor) {		
-		IProject project = editor.getProject().getRawProject();
-		for (IPath projectRelativePath : refactoring.getRelativePathsOfAffectedFiles()) {
-			StrategoAnalysisQueueFactory.getInstance().queueAnalysis(projectRelativePath, project);			
+			refactoring.getAction().run();
 		}
 	}
 
@@ -76,16 +43,7 @@
 		if (refactorings.getAll().size() == 0) return;
 		
 		for (final IRefactoring refactoring : refactorings.getAll()) {
-			IAction action = new Action(refactoring.getCaption()) {
-				@Override
-				public void run() {
-					lastAction = refactoring.getCaption();
-					executeRefactoring(editor, refactoring);
-				}
-			};
-			//FIXME: keybindings now only work after the user has pressed the refactoring button once.
-			action.setActionDefinitionId(refactoring.getActionDefinitionId());
-			editor.getEditor().getSite().getKeyBindingService().registerAction(action);
+			IAction action = refactoring.getAction();
 			ActionContributionItem item = new ActionContributionItem(action);
 			item.getAction().setEnabled(refactoring.isDefinedOnSelection(editor));
 			item.fill(menu, menu.getItemCount());
@@ -104,5 +62,4 @@
 		}
 		return refactorings;
 	}
-
 }

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Tue Jul 26 13:13:57 2011	(r23158)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/services/StrategoRefactoring.java	Tue Jul 26 16:19:32 2011	(r23159)
@@ -16,6 +16,7 @@
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.OperationCanceledException;
+import org.eclipse.jface.action.IAction;
 import org.eclipse.ltk.core.refactoring.Change;
 import org.eclipse.ltk.core.refactoring.CompositeChange;
 import org.eclipse.ltk.core.refactoring.Refactoring;
@@ -67,6 +68,8 @@
 	private IStrategoTerm node;
 	
 	private Collection<TextFileChange> fileChanges;
+	
+	private IAction action;
 
 	public boolean isDefinedOnSelection(EditorState editor) {
 		// TODO Auto-generated method stub
@@ -85,6 +88,15 @@
 	public ArrayList<StrategoRefactoringIdentifierInput> getInputFields() {
 		return inputFields;
 	}
+	
+	public void setAction(IAction action) {
+		this.action = action;
+	}
+
+	public IAction getAction() {
+		assert(action != null) : "refactoring action is not set";
+		return action;
+	}
 
 	public void prepareExecute(EditorState editor) {
 		this.node = getSelectionNode(editor);

From L.C.L.Kats at tudelft.nl  Wed Jul 27 16:00:46 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Jul 2011 14:00:46 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23160 -
	spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments
Message-ID: <20110727140046.55E837F8355@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Jul 27 14:00:46 2011
New Revision: 23160
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23160&sc=1

Log:
TermAttachmentSerializer.fromAnnotations()

Modified:
   spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java

Modified: spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java	Tue Jul 26 16:19:32 2011	(r23159)
+++ spoofax/trunk/spoofax/org.spoofax.terms/src/org/spoofax/terms/attachments/TermAttachmentSerializer.java	Wed Jul 27 14:00:46 2011	(r23160)
@@ -1,21 +1,24 @@
 package org.spoofax.terms.attachments;
 
-import static org.spoofax.terms.Term.isTermAppl;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 
-import org.spoofax.NotImplementedException;
 import org.spoofax.interpreter.terms.IStrategoAppl;
 import org.spoofax.interpreter.terms.IStrategoConstructor;
 import org.spoofax.interpreter.terms.IStrategoList;
 import org.spoofax.interpreter.terms.IStrategoTerm;
 import org.spoofax.interpreter.terms.ITermFactory;
+import org.spoofax.terms.StrategoTerm;
 import org.spoofax.terms.TermTransformer;
+import static org.spoofax.terms.Term.*;
 
 /**
  * @author Lennart Kats <lennart add lclnet.nl>
  */
 public class TermAttachmentSerializer {
 	
-	private final ITermFactory factory;
+	final ITermFactory factory;
 
 	public TermAttachmentSerializer(ITermFactory factory) {
 		this.factory = factory;
@@ -48,27 +51,72 @@
 		}.transform(term);
 	}
 	
-	public IStrategoTerm fromAnnotations(IStrategoTerm term, boolean mutableOperations) {
-		if (!mutableOperations)
-			throw new NotImplementedException("fromAnnotations() with mutableOperations == false");
-		
+	public IStrategoTerm fromAnnotations(IStrategoTerm term, final boolean mutableOperations) {
 		final TermAttachmentType<?>[] types = TermAttachmentType.getKnownTypes();
 		
 		return new TermTransformer(factory, false) {
 			@Override
 			public IStrategoTerm preTransform(IStrategoTerm term) {
-				IStrategoList annotations = term.getAnnotations();
+				IStrategoTerm origin = OriginAttachment.getOrigin(term); 
+				term = fromAnnotations(term, term);
+				if (origin != null)
+					term = fromAnnotations(origin, term);
+				return term;
+			}
+
+			private IStrategoTerm fromAnnotations(IStrategoTerm source, IStrategoTerm target) {
+				boolean isChanged = false;
+				IStrategoList annotations = source.getAnnotations();
 				while (!annotations.isEmpty()) {
 					IStrategoTerm head = annotations.head();
 					if (isTermAppl(head)) {
 						IStrategoAppl appl = (IStrategoAppl) head;
-						IStrategoConstructor con = appl.getConstructor();
-						for (TermAttachmentType<?> type : types)
-							if (type.getTermConstructor() == con)
-								term.putAttachment(type.fromTerm(appl)); // mutate
+						IStrategoConstructor cons = appl.getConstructor();
+						TermAttachmentType<?> type = getAttachmentType(cons);
+						if (type != null) {
+							if (!isChanged) {
+								isChanged = true;
+								target = removeAttachAnnotations(target, annotations);
+							}
+							target.putAttachment(type.fromTerm(appl));
+						}
 					}
 				}
-				return term;
+				return target;
+			}
+			
+			private TermAttachmentType<?> getAttachmentType(IStrategoConstructor cons) {
+				if (cons == null) return null;
+				for (TermAttachmentType<?> type : types) {
+					if (type.getTermConstructor() == cons)
+						return type;
+				}
+				return null;
+			}
+
+			private IStrategoTerm removeAttachAnnotations(IStrategoTerm term, IStrategoList annotations) {
+				List<IStrategoTerm> newAnnos = getNonAttachAnnotations(annotations);
+				
+				if (mutableOperations && term instanceof StrategoTerm) {
+					((StrategoTerm) term).internalSetAnnotations(factory.makeList(newAnnos));
+					return term;
+				} else {
+					return factory.annotateTerm(term, factory.makeList(newAnnos));
+				}
+			}
+
+			private List<IStrategoTerm> getNonAttachAnnotations(IStrategoList annotations) {
+				List<IStrategoTerm> newAnnos = null; 
+				while (!annotations.isEmpty()) {
+					if (getAttachmentType(tryGetConstructor(annotations.head())) == null) {
+						if (newAnnos == null) newAnnos = new ArrayList<IStrategoTerm>(annotations.size());
+						newAnnos.add(annotations);
+					}
+				}
+				if (newAnnos == null)
+					return Collections.emptyList();
+				else
+					return newAnnos;
 			}
 		}.transform(term);
 	}

From L.C.L.Kats at tudelft.nl  Wed Jul 27 16:01:00 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Jul 2011 14:01:00 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23161 -
	spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language
Message-ID: <20110727140100.503022B80B3@mx2.tudelft.nl>

Author: LennartKats
Date: Wed Jul 27 14:01:00 2011
New Revision: 23161
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23161&sc=1

Log:
cleanup

Deleted:
   spoofax/trunk/spoofax/org.spoofax.interpreter.library.language/src/org/spoofax/interpreter/library/language/LANG_index_retrieve.java

From L.C.L.Kats at tudelft.nl  Wed Jul 27 16:01:37 2011
From: L.C.L.Kats at tudelft.nl (Lennart Kats)
Date: Wed, 27 Jul 2011 14:01:37 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23162 -
	spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client
	strategoxt-java-backend/trunk/java
Message-ID: <20110727140137.E7CCC7F8341@mx1.tudelft.nl>

Author: LennartKats
Date: Wed Jul 27 14:01:37 2011
New Revision: 23162
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23162&sc=1

Log:
Added isAmbNode() check for Spoofax/405

Modified:
   spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
   strategoxt-java-backend/trunk/java/spoofax-libs.jar

Modified: spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java
==============================================================================
--- spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Wed Jul 27 14:01:00 2011	(r23161)
+++ spoofax/trunk/spoofax/org.spoofax.jsglr/src/org/spoofax/jsglr/client/Disambiguator.java	Wed Jul 27 14:01:37 2011	(r23162)
@@ -577,7 +577,8 @@
 		if(firstKid.isAmbNode()) {
 
 			for (final AbstractParseNode amb : firstKid.getChildren()) {
-				if(((ParseNode)amb).getLabel() != prodLabel.labelNumber) {
+				if(amb.isAmbNode()
+						|| ((ParseNode)amb).getLabel() != prodLabel.labelNumber) {
 					newAmbiguities.add(amb);
 				}
 			}

Modified: strategoxt-java-backend/trunk/java/spoofax-libs.jar
==============================================================================
Binary file (source and/or target). No diff available.

From m.dejonge at tudelft.nl  Sat Jul 30 11:29:08 2011
From: m.dejonge at tudelft.nl (Maartje de Jonge)
Date: Sat, 30 Jul 2011 09:29:08 +0000
Subject: [Stratego-commits] SVN commit: StrategoXT - r23163 -
	spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego
Message-ID: <20110730092908.41E057F8004@mx1.tudelft.nl>

Author: MaartjeDeJonge
Date: Sat Jul 30 09:29:06 2011
New Revision: 23163
URL: https://svn.strategoxt.org/websvn/StrategoXT/?rev=23163&sc=1

Log:


Added:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/InSelectedFragmentPrimitive.java   (contents, props changed)
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginNonLayoutTokensPrimitive.java   (contents, props changed)
Modified:
   spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java

Modified: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java
==============================================================================
--- spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Wed Jul 27 14:01:37 2011	(r23162)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/IMPLibrary.java	Sat Jul 30 09:29:06 2011	(r23163)
@@ -27,6 +27,9 @@
 		add(new LanguageDescriptionPrimitive());
 		add(new OverrideInputPrimitive());
 
+		add(new InSelectedFragmentPrimitive());
+		add(new OriginNonLayoutTokensPrimitive());
+
 		//origin term strategies
 		add(new OriginSublistTermPrimitive());
 		add(new OriginDesugaredTermPrimitive());
@@ -42,7 +45,7 @@
 		add(new OriginDeletionOffsetPrimitive());
 		add(new OriginInsertBeforeOffsetPrimitive());
 		add(new OriginInsertAtEndOffsetPrimitive());
-		add(new OriginTextWithLayoutPrimitive());		
+		add(new OriginTextWithLayoutPrimitive());				
 	}
 
 	public String getOperatorRegistryName() {

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/InSelectedFragmentPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/InSelectedFragmentPrimitive.java	Sat Jul 30 09:29:06 2011	(r23163)
@@ -0,0 +1,55 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.ui.progress.UIJob;
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.ImploderAttachment;
+import org.strategoxt.imp.runtime.EditorState;
+import org.strategoxt.imp.runtime.Environment;
+
+/**
+ * Checks if a term falls (partially) within the area selected by the user
+ */
+public class InSelectedFragmentPrimitive extends AbstractOriginPrimitive {
+	
+	public InSelectedFragmentPrimitive() {
+		super("SSL_EXT_in_selected_fragment");
+	}
+
+	@Override
+	public IStrategoTerm call(IContext env, IStrategoTerm origin) {
+		final int startOffset = ImploderAttachment.getLeftToken(origin).getStartOffset();
+		final int endOffset = ImploderAttachment.getRightToken(origin).getEndOffset();
+		final boolean[] inSelection = new boolean[]{true};
+		Job job = new UIJob("in selected fragment? primitive") {
+			@Override
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				Point selected = EditorState.getActiveEditor().getEditor().getSelection();
+				if(selected.x > endOffset)
+					inSelection[0] = false;
+				if(selected.x + selected.y -1 < startOffset)
+					inSelection[0] = false;
+				if(selected.y == 0)
+					inSelection[0] = false;
+				return Status.OK_STATUS;
+			}
+		};
+		job.setSystem(true);
+		job.schedule();
+		try {
+			job.join();
+		} catch (InterruptedException e) {
+			Environment.logException(e);
+		}
+		if (job.getResult()==Status.OK_STATUS && inSelection[0]){
+			return origin;
+		}
+		return null;
+	}
+}

Added: spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginNonLayoutTokensPrimitive.java
==============================================================================
--- /dev/null	00:00:00 1970	(empty, because file is newly added)
+++ spoofax-imp/trunk/org.strategoxt.imp.runtime/src/org/strategoxt/imp/runtime/stratego/OriginNonLayoutTokensPrimitive.java	Sat Jul 30 09:29:06 2011	(r23163)
@@ -0,0 +1,33 @@
+package org.strategoxt.imp.runtime.stratego;
+
+import java.util.ArrayList;
+
+import org.spoofax.interpreter.core.IContext;
+import org.spoofax.interpreter.library.jsglr.origin.AbstractOriginPrimitive;
+import org.spoofax.interpreter.terms.IStrategoTerm;
+import org.spoofax.jsglr.client.imploder.IToken;
+import org.spoofax.jsglr.client.imploder.ITokenizer;
+import static org.spoofax.jsglr.client.imploder.ImploderAttachment.*;
+
+/**
+ * Tokens, ignoring layout
+ */
+public class OriginNonLayoutTokensPrimitive extends AbstractOriginPrimitive {
+	
+	public OriginNonLayoutTokensPrimitive() {
+		super("SSL_EXT_origin_non_layout_tokens");
+	}
+
+	@Override
+	public IStrategoTerm call(IContext env, IStrategoTerm origin) {
+		ITokenizer tokenizer=getTokenizer(origin);
+		int startIndex=getLeftToken(origin).getIndex();
+		int endIndex = getRightToken(origin).getIndex();
+		ArrayList<IStrategoTerm> tokenStrings=new ArrayList<IStrategoTerm>();
+		for (int i = startIndex; i <= endIndex; i++) {
+			if(tokenizer.getTokenAt(i).getKind() != IToken.TK_LAYOUT)
+				tokenStrings.add(env.getFactory().makeString(tokenizer.getTokenAt(i).toString()));
+		}		
+		return env.getFactory().makeList(tokenStrings);
+	}
+}

